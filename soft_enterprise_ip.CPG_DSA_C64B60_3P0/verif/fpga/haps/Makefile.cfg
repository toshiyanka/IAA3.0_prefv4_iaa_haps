#!make

#=========== Vendor Tool Setting ============
HARDWARE  := HAPS-80
# Supported value of UNIFIED_COMPILE is '2.0'. If set, activates haps-uc 2.0
UNIFIED_COMPILE := 2.0

VIVADO_PATH           := /p/hdk/rtl/cad/x86-64_linux26/xilinx/vivado/2021.1-ep14/tools/XILINX_VIVADO
XILINX_VIVADO         := /p/hdk/rtl/cad/x86-64_linux26/xilinx/vivado/2021.1-ep14/tools/XILINX_VIVADO

# TARGET_DIR will be created inside WORKDIR
#==========================================
WORKDIR :=

# Disk space required in GB to build the design
# Build will continue if the available disk space is more than amount specified here
# Flow will give an error if the available disk space is less than or equal to the amount specified here
# Flow will give a warning if disk space limit is not specified
# Ex: DISK_SPACE_LIMIT := 50G
#====================================================================================================
DISK_SPACE_LIMIT := 40G

# Variables being consumed in UNIFIED_COMPILE 2.0
#================================================
# Analyze options
#----------------
# To disable designware, set AUTO_GEN_DW to 0
AUTO_GEN_DW               := 1  
NUM_ANALYZE_PARALLEL_JOBS := 100
# To build with emuvcs flow on a fpga design, remove +define+INTEL_EMULATION and add +define+INTEL_FPGA
VLOG_OPTS                 := -kdb +define+INTEL_EMULATION +define+INTEL_FPGA +define+default_clk=null -timescale=1ps/1ps -skip_translate_body -sverilog +librescan -Xmf=0x80000 -full64 -assert svaext # check these switches
VHDL_OPTS                 := -skip_translate_body -kdb


# Protocompiler constrints files
#=================================
TSS_FILE        := $(WORKAREA)/verif/fpga/haps/build_input_dir/iaa_design.tss
FDC_FILE        := $(WORKAREA)/verif/fpga/haps/build_input_dir/iaa_design.fdc \
                   $(WORKAREA)/subIP/fpga/cfg/vivado/xcvu440_pcie_phy/xcvu440_pcie_phy_macro.fdc \
                   $(WORKAREA)/subIP/fpga/cfg/vivado/xcvu440_pcie_phy/xcvu440_pcie_phy.fdc
PCF_FILE        := $(WORKAREA)/verif/fpga/haps/build_input_dir/iaa_design.pcf
IDC_FILE        := $(WORKAREA)/verif/fpga/haps/build_input_dir/iaa_design.idc
AREA_ESTIMATION := 1


#============== VIP env vars ==========
## these ought to have come from verif/emu/tool.cth
## but added here because they didnt seem to be picked up
OVM_HOME = ${WORKAREA}/subip/vip/ovm
UVM_HOME = ${WORKAREA}/subip/vip/uvm
XVM_HOME = ${WORKAREA}/subip/vip/xvm
SAOLA_HOME = ${WORKAREA}/subip/vip/saola
IOSF_PVC_ROOT = ${WORKAREA}/subip/vip/IOSF_PVC
IOSF_SVC_ROOT = ${WORKAREA}/subip/vip/IOSF_SVC




# Number of FPGA builds invoked in parallel
#==============================================
NUM_PARALLEL_JOBS := 16

# Add custom FPGA TCL for the required FPGA as:
# mb<board num>_u<fpga module>_CUSTOM_VIVADO_TCL
# replicate the below option per FPGA as required.
#For example:
#   mb1_uB_CUSTOM_VIVADO_TCL :=
#   mb2_uA_CUSTOM_VIVADO_TCL :=
#================================================
mb1_uA_CUSTOM_VIVADO_TCL := $(WORKAREA)/verif/fpga/haps/vivado/iaa_uA_single_run_vivado_haps.tcl
mb1_uD_CUSTOM_VIVADO_TCL := $(WORKAREA)/verif/fpga/haps/vivado/HAPS_uD_single_run_vivado_haps.tcl

# Add custom synthesis  TCL for the required FPGA as:
# mb<board num>_u<fpga module>_CUSTOM_SYNTHESIS_TCL
# replicate the below option per FPGA as required.
#For example:
#   mb1_uB_CUSTOM_SYNTHESIS_TCL :=
#   mb2_uA_CUSTOM_SYNTHESIS_TCL :=
#================================================
mb1_uA_CUSTOM_SYNTHESIS_TCL :=


# Add custom pre-map TCL for the required FPGA as:
# mb<board num>_u<fpga module>_CUSTOM_PREMAP_TCL
# replicate the below option per FPGA as required.
#For example:
#   mb1_uB_CUSTOM_PREMAP_TCL :=
#   mb2_uA_CUSTOM_PREMAP_TCL :=
#================================================
mb1_uA_CUSTOM_PREMAP_TCL :=


# Variable to skip premap and map stages for a specific FPGA.
# Set mb<board num>_u<fpga module>_SKIP_PREMAP_MAP variable to 1 to
# skip Premap and Map stages when a single custom script needs to be
# used for all synthesis to map stages.
#For example:
#   mb1_uB_SKIP_PREMAP_MAP :=
#   mb2_uA_SKIP_PREMAP_MAP :=
#================================================
mb1_uA_SKIP_PREMAP_MAP := 0


# Add custom map  TCL for the required FPGA as:
# mb<board num>_u<fpga module>_CUSTOM_MAP_TCL
# replicate the below option per FPGA as required.
#For example:
#   mb1_uB_CUSTOM_MAP_TCL :=
#   mb2_uA_CUSTOM_MAP_TCL :=
#================================================
mb1_uA_CUSTOM_MAP_TCL :=



#***************************************************************
# VIVADO RUN MPF settings
#---------------------------------------------------------------
# - Set ENABLE_MACHINE_MPF to 1 to enable SINGLE_MACHINE MPF.
# - MPF system requirements:
#    - 48G and 4 thread per SLR is required
#    eg: For single machine MPF:
#        - In case of HAPS-80 (VU440 device 3 SLRs)
#          a) 48*number of SLRs GB, that is 48*3~150G
#          b) 4*number of SLRs cores, that is 12 cores
#        - In case of HAPS-100 (VU19P device 4 SLRs)
#          a) 48*number of SLRs GB, that is 48*4~200G
#          b) 4*number of SLRs cores, that is 16 cores
# - Min tool version:
#    - PROTOCOMPILER : 2020.03
#    - VIVADO : 2020.01
# - Multi-machine MPF is not supported by vendor yet.
#===============================================================
ENABLE_MACHINE_MPF := 0

#***************************************************************
# Netbatch & Vendor Job Distribution
#---------------------------------------------------------------
# NB settings:
# - Set NB to 1 to launch main task (stage) on netbatch.
# - Makefile NB<Variable> is mapped as <Variable> in lite-infra:
#       NBNAME   => NAME
#       NBFEEDER => FEEDER
# - To extract info from lite-infra:
#     NBNAME: Tool will try to find compute section, having NAME as <NBNAME>.
#             And then, will read this compute section for different varaibles.
#             If compute section with same NAME is used more than once,
#             later will take precedence. Order in which default is searched:
#             Default: $(FLOW)@$(EC_ZONE), _DEFAULT@$(EC_ZONE), $(FLOW)@$(EC_SITE),
#                      _DEFAULT@$(EC_SITE), _DEFAULT
#     [Compute]
#         NAME           = haps@sc
#         FEEDER         = abc_pqr
#         FEEDER_MAX_MEM = 4G
#         TARGET         = sc_normal
#         QSLOT          = /pesg/fast
#         CLASS_ANA      = SLES121&&2G
#         CLASS_FE       = SLES12&&16G
#         CLASS_BE       = SLES12&&32G
#   lite-infra will read "verif/fpga/haps/tool.cth" file which will include "verif/fpga/<BUILD_DIRNAME>/compute.cth" file.
#   Use this compute.cth file to define compute section.
#
# - Default values exist for following variables:
#      NBNAME           = $(FLOW)@$(EC_ZONE)
#      NBFEEDER         = $(USER)_$(FLOW)_<date_time>_<mac>_<pid>
#   Other variables are mandatory to be provided, using 'Compute' section of '$WORKAREA/verif/fpga/<BUILD_DIRNAME>/compute.cth' file, included in '$WORKAREA/verif/fpga/haps/tool.cth'.
#       CLASS_ANA: analyze
#       CLASS_FE : compile, pre_partition, partition, system_route,
#                  system_generate, synthesis, pre_map, map, post_pnr
#       CLASS_BE : vivado
#==============================================
NB               := 0
NBNAME           :=
NBFEEDER         :=

#***************************************************************
# Overriding groups in Netbatch
#---------------------------------------------------------------
# NB_WASH_GROUPS is a comma-separated list of unix group names.
# When NB_WASH_ENABLE is set to 1, then any job executed in Netbatch
# will start by executing a wash command that sets the user groups
# according to the list specified in NB_WASH_GROUPS, overriding the
# default list of groups for that user, during the job execution.
# This is a standard Netbatch mechanism, not limited to Cheetah flows.
#
# Usage example:
#   NB_WASH_ENABLE ?= 1
#   NB_WASH_GROUPS ?= soc,hdk7nm
#===============================================================
NB_WASH_ENABLE ?= 0
NB_WASH_GROUPS ?=

#***************************************************************
# CDPL settings
#---------------------------------------------------------------
# - Set ENABLE_CDPL to 1 to launch distributed tasks of a Protocompiler stage on netbatch.
#   It sets both cdpl and distributed_compile to 1 in Protocompiler.
# - CDPL_DISTRIBUTED_SYNTHESIS will enable distributed_synthesis option in Protocompiler.
# - Please specify COMPUTE sections in "verif/fpga/<BUILD_DIRNAME>/compute.cth" for all the Protocompiler
#   stages that need to be distributed. Stage-specific CDPL host info files will be automatically generated
#   based on these COMPUTE sections and passed to the respective Protocompiler stages.
# - The order in which the COMPUTE sections will be read from $WORKAREA/verif/fpga/<BUILD_DIRNAME>/compute.cth for
#   determining resource info:
#      1. zone-specific and stage-specific COMPUTE section, for eg: HapsPreInstrument@<EC_ZONE>
#      2. zone-specific default COMPUTE section,            for eg: HapsDefault@<EC_ZONE>
#      3. site-specific and stage-specific COMPUTE section, for eg: HapsPreInstrument@<EC_SITE>
#      4. site-specific default COMPUTE section,            for eg: HapsDefault@<EC_SITE>
#      5. stage-specific COMPUTE section without site info, for eg: HapsPreInstrument
#      6. default COMPUTE section without site info,        for eg: HapsDefault
# - Sample COMPUTE section:
#      [ COMPUTE ]
#          NAME = HapsPreInstrument@pdx
#          QSLOT = /pesg/fast
#          TARGET = pdx_normal
#          RAM = 4
#          CPU = 1
#          OS = SLES12
#          NUM_SLOTS = 4
# - Supported stages & corresponding queues:
#      stages: pre_instrument,    compile,     pre_partition,    system_generate,    pre_map,    map
#      queues: HapsPreInstrument, HapsCompile, HapsPrePartition, HapsSystemGenerate, HapsPreMap, HapsMap
# - Target "gen_vendor_distrib_files" will generate CDPL host-info files in $(TARGET_DIR)/vendor_distrib_src dir
#==============================================
ENABLE_CDPL                  := 0
CDPL_DISTRIBUTED_SYNTHESIS   := 0

#***************************************************************
# Other options
#---------------------------------------------------------------
PREPEND_PATH            :=
PREPEND_LD_LIBRARY_PATH :=

# List the names of variables that should not be captured in source_env_var*, separated by whitespaces
DVB_CUSTOM_VARS_TO_IGNORE ?=

export
