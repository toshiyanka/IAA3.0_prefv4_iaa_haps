// $Header: /ds/data/2647/server_vault/Projects/drwork/x12dev_drwork/rst/x12dev_drwork_rst/PXL/1273/p1273d6_dr.rs.rca 1.46 Fri Oct  3 19:40:37 2014 dgthakur Experimental $ 
// $Log: p1273d6_dr.rs.rca $
// 
//  Revision: 1.46 Fri Oct  3 19:40:37 2014 dgthakur
//  updated for rev1.0 rules. 

#ifndef _P1273d6_DR_RS_
   #define _P1273d6_DR_RS_

   // This file is automatically created by:
   //   /nfpdx/disks/drwork.disks.12/work_areas/dgthakur/1272drwork/runset_libs/x12dev_drwork_rst//PXL/RuleCsv2PXLdr.pl -p 1273 
   // -i /nfs/pdx/disks/drwork.disks.12/work_areas/dgthakur/1272drwork/db_root/drwork/x12dev_drwork/rst/x12dev_drwork_rst/Latest/PXL/mystuff/drfile/1273_full.6.txt 


   // define all rule labels as their constant numeric values 
   ADC_04:double = 0.011; // Diffcon side space to Poly, ONLY ALLOWED value 
   ADC_21:double = 0.14; // Diffcon pitch, ONLY ALLOWED value
   AG4_01:double = 0.08; // Min AG4 width
   AG4_02:double = 0.08; // Min AG4 space
   AG4_03:double = 0.04; // Min AG4 jog segment length
   AG4_04:double = 0.2; // Min AG4 space along a M4 line
   AG4_07:double = 0.1; // Min AG4 overlap of M4 line end
   AG4_08:double = 0.1; // Min AG4 overlap of Via3/Via4
   AG4_09:double = 0.02; // Min AG4 overlap of M4 line side
   AG4_10:double = 0.048; // Max M4 space that gets AG4 synthesis
   AG6_01:double = 0.08; // Min AG6 width
   AG6_02:double = 0.08; // Min AG6 space
   AG6_03:double = 0.04; // Min AG6 jog segment length
   AG6_04:double = 0.4; // Min AG6 space along a M6 line
   AG6_07:double = 0.1; // Min AG6 overlap of M6 line end
   AG6_08:double = 0.1; // Min AG6 overlap of Via5/Via6
   AG6_09:double = 0.04; // Min AG6 overlap of M6 line side
   AG6_10:double = 0.083; // Max M6 space that gets AG6 synthesis
   AL_01:double = 0.14; // Minimum width of NAL/PAL layer
   AL_05:double = 0.0235; // Minimum required area of NAL/PAL layer (sq um)
   AL_06:double = 0.06; // Minimum required hole area of NAL/PAL layer  (sq um)
   AL_07:double = 0.07; // Minimum segment lengths
   AL_08:double = 0.042; // Restricted minimum segment lengths (has additional segment-to-segment requirements)
   AL_09:double = 0.21; // Space between restricted segment lengths (>= AL_08, <AL_07) convex-convex, concave-concave corner
   AL_10:double = 1; // Space between restricted segment lengths (>= AL_08, <AL_07) convex-concave corner
   AL_11:double = 0.021; // NAL/PAL enclosure of nuva/puva gate (PGD)
   AL_116:double = 0.0598; // NAL/PAL convex corner enclosure of nuva/puva gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge
   AL_12:double = 0.021; // NAL/PAL enclosure of nuva/puva gate (OGD)
   AL_13:double = 0.021; // NAL/PAL space to non-n/puva gate (PGD)
   AL_14:double = 0.021; // NAL/PAL space to non-n/puva gate (OGD)
   AL_15:double = 0; // NAL/PAL PGD edge must be centered in poly space or poly width
   AL_16:double = 0.066; // NAL/PAL unrestricted convex corner enclosure of nuva/puva gate
   AL_17:double = 0.066; // NAL/PAL concave corner enclosure of non-n/puva gate
   AL_31:double = 0.14; // Minimum space of NAL/PAL layer
   AL_32:double = 0.07; // NAL/PAL layer is allowed to have coincident edges of length >=
   AL_33:double = 0.07; // NAL/PAL layer is allowed to have coincident corners with space >=
   AL_34:double = 0; // NAL/PAL layer is allowed to have point touch
   AN_72:double = 0; // DiodeID must be drawn line on line with the nwell enclosing the diode.
   APC_42:double = 0.054; // Min Polycon end overlap of poly for PC_41
   APC_44:double = 0.016; // Min Polycon end space to poly side
   APL_01:double = 0.09; // Poly width, ONLY ALLOWED value
   APL_02:double = 0.14; // Poly pitch, ONLY ALLOWED value
   APL_04:double = 0; // Short poly end-to-end space (PL_04) not allowed in TG pitch region
   APL_11:double = 0.045; // Min Poly endcap length
   APL_13:double = 0; // Maximum pullback of Adjacent Dummy Poly line-end from Gate-STI (diffusion) edge
   APL_15:double = 0; // Maximum pullback of Adjacent Dummy Poly line-end from Tap diffusion edge
   APL_25:double = 0.078; // Min Poly end space to diffusion PGD
   BC_00:double = 0; // All Bitcell Cell Names must be within the SRAMPOLYID layer  
   BDC_02:double = 0.065; // Minimum diffcon length
   BDC_03:double = 0.04; // Diffcon end-to-end (ETE) space (min)
   BDC_04:double = 0.005; // Diffcon side space to poly, ONLY ALLOWED value 
   BDC_11:double = 0.006; // Transistor diffusion enclosure of diffcon (max value)
   BDC_31:double = 0.012; // Min offset between adjacent non-overlapping line-ends in opposite directions
   BDC_33:double = 0.035; // Min overlap between adjacent line-ends in opposite directions, when at least one line-end touches a min ETE space (DC_03) and has length <= DC_34
   BDC_36:double = 0.035; // Min overlap between adjacent line-ends in opposite directions, when at least one line-end touches a min ETE space (DC_03) and has length > DC_34
   BDF_10:double = 0.07; // Minimum transistor diffusion segment lengths OGD
   BDF_91:double = 0.04; // Transistor pdiff-pdiff facing-edge space, in gate-direction
   BDF_92:double = 0.028; // Transistor ndiff-pdiff facing-edge space, in gate-direction
   BDG_91:double = 0.028; // SRAM Diffusion check grid width (min value)
   BDG_92:double = 0.084; // SRAM Diffusion check grid width (max value)
   BDG_93:double = 0.056; // SRAM Diffusion check grid space (fixed value1)
   BDG_94:double = 0.128; // SRAM Diffusion check grid space (fixed value2)
   BJ_01:double = 0.124; // N+ S/D block width (post generation)
   BJ_03:double = 0.014; // NSD block space to active n+ diffusion
   BJ_05:double = 0.014; // NSD block enclosure of active p+ diffusion
   BJ_11:double = 0.014; // Ntip block space to active n-diffusion edge
   BJ_12:double = 0.014; // Ntip block enclosure of active p-diffusion edge
   BJ_14:double = 0.1059; // Minimum synthesized N+ S/D block convex corner encl of active p+ diff corner
   BJ_15:double = 0.107; // Minimum synthesized N+ S/D block concave corner space to active n+ diff corner
   BK_02:double = 0.124; // P+ S/D block space
   BK_03:double = 0.014; // PSD block space to active p+ diffusion
   BK_05:double = 0.014; // PSD block enclosure of active n+ diffusion
   BK_11:double = 0.014; // Ptip block space to active p-diffusion edge
   BK_12:double = 0.014; // Ptip block enclosure of active n-diffusion edge
   BK_14:double = 0.107; // Minimum synthesized P+ S/D block convex corner encl of active n+ diff corner
   BK_15:double = 0.1059; // Minimum synthesized P+ S/D block concave corner space to active p+ diff corner
   BK_23:double = 0.014; // P+ S/D block space to active p+ diff (PGD)
   BLDI_02:double = 9; // Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (logic)
   BLDI_102:double = 10.8; // Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (RFSRAM)
   BLDI_192:double = 13; // Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (LVC)
   BLDI_202:double = 12.4; // Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (any combination of logic or SRAM, )
   BLDI_292:double = 16.5; // Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (HPC)
   BLDI_302:double = 25; // Max allowed Intermediate Exposed N-diff density inside STTRAMID1/2 (LDI_02 exception)
   BLDI_392:double = 15.3; // Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (UPC)
   BLDI_402:double = 15.5; // Max allowed Intermediate Exposed N-diff density inside HDDP/SDP sram
   BLDI_492:double = 12; // Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (X73_RF)
   BLDI_592:double = 20.5; // Max allowed Intermediate Exposed N-diff density (SDP/HDDP)
   BLD_233:double = 54.5; // Max allowed local N + P diffusion density (%), 24.5um x 24.5um window size
   BLD_234:double = 43.5; // Max allowed local poly density (%), within a 1.96um x 1.96um window size (SRAM region)
   BLD_333:double = 62.5; // Max allowed local N + P diffusion density (%), 24.5um x 24.5um window size (UPC)
   BLD_334:double = 43.14; // Max allowed local poly density (%), within a 1.96um x 1.96um window size (ROM)
   BLD_431:double = 3.7; // Min required local Exposed P-diffusion density (%) 17.5um x 17.5um window size (X72B_TSROM)
   BLD_433:double = 59; // Max allowed local N + P diffusion density (%), 24.5um x 24.5um window size (HPC)
   BLD_531:double = 2.6; // Min required local Exposed P-diffusion density (%), 17.5um x 17.5um window size in DP ram
   BLD_533:double = 49.74; // Max allowed local N + P diffusion density (%), 24.5um x 24.5um window size (fuse)
   BLD_534:double = 44; // Max allowed local poly density (%), within a 1.96um x 1.96um window size (HDDP/SDP/HPDP/LVDP region)
   BLD_620:double = 17; // Max required local VCN density inside STTRAMID1/2 (LD_620 exception)
   BLD_631:double = 0; // Min required local Exposed P-diff density inside STTRAMID1/2 (LD_131 exception)
   BLD_633:double = 66.7; // Max allowed local N+P diffusion density inside STTRAMID1/2 (LD_233 exception)
   BLD_731:double = 3.9; // Min required local Exposed P-diffusion density (%), 17.5um X 17.5um window size in RFSERU 
   BNW_01:double = 0.014; // N-well space to N+ active diffusion, in gate-direction
   BNW_03:double = 0.014; // N-well enclosure of P+ active diffusion, in gate-direction
   BNW_24:double = 0.1059; // N-well concave corner space to N+ active diffusion corner
   BNW_28:double = 56; // P1273 NW_28 relaxation for sram
   BNW_29:double = 56; // P1273 NW_29 relaxation for sram
   BNW_31:double = 0.014; // N-well space to N+ active diffusion, in gate-direction
   BPC_41:double = 0.031; // Poly overlap of polycon (PGD) for PC_42
   BPC_44:double = 0.01; // Polycon end space to poly side
   BPC_46:double = 0.026; // Polycon end extension beyond poly side for PC_45
   BPC_47:double = 0; // Min overlap of poylcon and poly (pgd and ogd checked sperately for each type of sram)
   BPC_61:double = 0.02; // Polycon side space to gate/diffusion edge
   BPC_81:double = 0.0228; // Polycon space to Diffcon
   BPC_83:double = 0.005; // Polycon end overlap of Diffcon in OGD for PC_82
   BPL_01:double = 0.032; // SRAM poly width, fixed value
   BPL_02:double = 0.07; // SRAM poly pitch, fixed value
   BPL_04:double = 0.036; // Short poly end-to-end space (fixed value) (cannot be isolated)
   BPL_11:double = 0.018; // Poly endcap length
   BPL_13:double = 0.01; // Max enclosure of poly by OGD diffusion edges
   BU_01:double = 85; // Bump width, only allowed value
   BU_02:double = 130.3; // Bump to Bump separation (center-to-center, minimum)
   BU_03:double = 0; // Each Bump must have a TV1
   BU_04:double = 0; // Bump to Bump separation core region (center-to-center, maximum)***
   BU_05:double = 0; // Bump to Bump separation IO region (center-to-center, maximum)***
   BU_06:double = 0; // Bump to Bump separation IO-core transition region (center-to-center, maximum)***
   BU_101:double = 40; // C4EMIB Bump width, only allowed value
   BU_102:double = 55; // C4EMIB Bump to C4EMIB Bump separation (center-to-center, minimum)
   BU_103:double = 0; // Each C4EMIB Bump must have a TV1
   BU_104:double = 0; // C4EMIB Bump to C4EMIB Bump separation (center-to-center, maximum)***
   BU_105:double = 0; // C4EMIB Bump to C4 Bump separation (center-to-center, maximum)***
   BU_110:double = 0; // C4EMIB bumps must be drawn inside EMIBBUMPZONE ID (layer 81.79)
   BU_111:double = 0; // C4 bumps must be outside EMIBBUMPZONE ID
   BU_112:double = 306; // C4EMIB Bump to C4 Bump separation (center-to-center, minimum)
   BU_124:double = 0; // TV1 offset is not not allowed for C4EMIB bump (TV1 must be centered on C4EMIB bump)
   BU_21:double = 750; // Fixed Width of outer ring from EOA that requires additional rules
   BU_22:double = 10.5; // Max allowed offset from center of Rectangular TV1 to center of Bump
   BU_23:double = 0; // TV1 offset from center of Bump is allowed only in the direction orthogonal to the long edge of the via
   BU_24:double = 0; // TV1 offset is not allowed towards the edge of the die in the outer ring
   BU_25:double = 980; // Allowed gap in outer ring measured from die center line
   BVC_01:double = 0.042; // Bitcell ViaconA width, fixed value (SA edge)
   BVC_02:double = 0.046; // Bitcell ViaconA length, fixed value (non-SA edge)
   BXG_11:double = 0.229; // SRAM Min XGOXID enclosure of active gate area inside XGOXID 
   CDW_100:double = 2.1; // Window for CD_100
   CDW_100_X = CDW_100; // Window for CD_100 for x
   CDW_100_Y = CDW_100; // Window for CD_100 for y
   CDW_100_X_STEP = CDW_100; // Window for CD_100 for x-step
   CDW_100_Y_STEP = CDW_100; // Window for CD_100 for y-step
   CDW_101:double = 2.1; // Window for CD_101
   CDW_101_X = CDW_101; // Window for CD_101 for x
   CDW_101_Y = CDW_101; // Window for CD_101 for y
   CDW_101_X_STEP = CDW_101; // Window for CD_101 for x-step
   CDW_101_Y_STEP = CDW_101; // Window for CD_101 for y-step
   CDW_102:double = 2.1; // Window for CD_102
   CDW_102_X = CDW_102; // Window for CD_102 for x
   CDW_102_Y = CDW_102; // Window for CD_102 for y
   CDW_102_X_STEP = CDW_102; // Window for CD_102 for x-step
   CDW_102_Y_STEP = CDW_102; // Window for CD_102 for y-step
   CDW_103:double = 2.1; // Window for CD_103
   CDW_103_X = CDW_103; // Window for CD_103 for x
   CDW_103_Y = CDW_103; // Window for CD_103 for y
   CDW_103_X_STEP = CDW_103; // Window for CD_103 for x-step
   CDW_103_Y_STEP = CDW_103; // Window for CD_103 for y-step
   CDW_104:double = 2.1; // Window for CD_104
   CDW_104_X = CDW_104; // Window for CD_104 for x
   CDW_104_Y = CDW_104; // Window for CD_104 for y
   CDW_104_X_STEP = CDW_104; // Window for CD_104 for x-step
   CDW_104_Y_STEP = CDW_104; // Window for CD_104 for y-step
   CDW_105:double = 2.8; // Window for CD_105
   CDW_105_X = CDW_105; // Window for CD_105 for x
   CDW_105_Y = CDW_105; // Window for CD_105 for y
   CDW_105_X_STEP = CDW_105; // Window for CD_105 for x-step
   CDW_105_Y_STEP = CDW_105; // Window for CD_105 for y-step
   CDW_106:double = 2.8; // Window for CD_106
   CDW_106_X = CDW_106; // Window for CD_106 for x
   CDW_106_Y = CDW_106; // Window for CD_106 for y
   CDW_106_X_STEP = CDW_106; // Window for CD_106 for x-step
   CDW_106_Y_STEP = CDW_106; // Window for CD_106 for y-step
   CDW_107:double = 2.8; // Window for CD_107
   CDW_107_X = CDW_107; // Window for CD_107 for x
   CDW_107_Y = CDW_107; // Window for CD_107 for y
   CDW_107_X_STEP = CDW_107; // Window for CD_107 for x-step
   CDW_107_Y_STEP = CDW_107; // Window for CD_107 for y-step
   CDW_131:double = 1.96; // Window for CD_131
   CDW_131_X = CDW_131; // Window for CD_131 for x
   CDW_131_Y = CDW_131; // Window for CD_131 for y
   CDW_131_X_STEP = CDW_131; // Window for CD_131 for x-step
   CDW_131_Y_STEP = CDW_131; // Window for CD_131 for y-step
   CDW_200:double = 3.15; // Window for CD_200
   CDW_200_X = CDW_200; // Window for CD_200 for x
   CDW_200_Y = CDW_200; // Window for CD_200 for y
   CDW_200_X_STEP = CDW_200; // Window for CD_200 for x-step
   CDW_200_Y_STEP = CDW_200; // Window for CD_200 for y-step
   CDW_201:double = 3.15; // Window for CD_201
   CDW_201_X = CDW_201; // Window for CD_201 for x
   CDW_201_Y = CDW_201; // Window for CD_201 for y
   CDW_201_X_STEP = CDW_201; // Window for CD_201 for x-step
   CDW_201_Y_STEP = CDW_201; // Window for CD_201 for y-step
   CDW_202:double = 3.15; // Window for CD_202
   CDW_202_X = CDW_202; // Window for CD_202 for x
   CDW_202_Y = CDW_202; // Window for CD_202 for y
   CDW_202_X_STEP = CDW_202; // Window for CD_202 for x-step
   CDW_202_Y_STEP = CDW_202; // Window for CD_202 for y-step
   CDW_203:double = 3.15; // Window for CD_203
   CDW_203_X = CDW_203; // Window for CD_203 for x
   CDW_203_Y = CDW_203; // Window for CD_203 for y
   CDW_203_X_STEP = CDW_203; // Window for CD_203 for x-step
   CDW_203_Y_STEP = CDW_203; // Window for CD_203 for y-step
   CDW_204:double = 3.15; // Window for CD_204
   CDW_204_X = CDW_204; // Window for CD_204 for x
   CDW_204_Y = CDW_204; // Window for CD_204 for y
   CDW_204_X_STEP = CDW_204; // Window for CD_204 for x-step
   CDW_204_Y_STEP = CDW_204; // Window for CD_204 for y-step
   CDW_205:double = 4.5; // Window for CD_205
   CDW_205_X = CDW_205; // Window for CD_205 for x
   CDW_205_Y = CDW_205; // Window for CD_205 for y
   CDW_205_X_STEP = CDW_205; // Window for CD_205 for x-step
   CDW_205_Y_STEP = CDW_205; // Window for CD_205 for y-step
   CDW_206:double = 4.5; // Window for CD_206
   CDW_206_X = CDW_206; // Window for CD_206 for x
   CDW_206_Y = CDW_206; // Window for CD_206 for y
   CDW_206_X_STEP = CDW_206; // Window for CD_206 for x-step
   CDW_206_Y_STEP = CDW_206; // Window for CD_206 for y-step
   CDW_207:double = 4.5; // Window for CD_207
   CDW_207_X = CDW_207; // Window for CD_207 for x
   CDW_207_Y = CDW_207; // Window for CD_207 for y
   CDW_207_X_STEP = CDW_207; // Window for CD_207 for x-step
   CDW_207_Y_STEP = CDW_207; // Window for CD_207 for y-step
   CDW_208:double = 8.8; // Window for CD_208
   CDW_208_X = CDW_208; // Window for CD_208 for x
   CDW_208_Y = CDW_208; // Window for CD_208 for y
   CDW_208_X_STEP = CDW_208; // Window for CD_208 for x-step
   CDW_208_Y_STEP = CDW_208; // Window for CD_208 for y-step
   CDW_209:double = 8.8; // Window for CD_209
   CDW_209_X = CDW_209; // Window for CD_209 for x
   CDW_209_Y = CDW_209; // Window for CD_209 for y
   CDW_209_X_STEP = CDW_209; // Window for CD_209 for x-step
   CDW_209_Y_STEP = CDW_209; // Window for CD_209 for y-step
   CDW_210:double = 8.8; // Window for CD_210
   CDW_210_X = CDW_210; // Window for CD_210 for x
   CDW_210_Y = CDW_210; // Window for CD_210 for y
   CDW_210_X_STEP = CDW_210; // Window for CD_210 for x-step
   CDW_210_Y_STEP = CDW_210; // Window for CD_210 for y-step
   CDW_211:double = 8.8; // Window for CD_211
   CDW_211_X = CDW_211; // Window for CD_211 for x
   CDW_211_Y = CDW_211; // Window for CD_211 for y
   CDW_211_X_STEP = CDW_211; // Window for CD_211 for x-step
   CDW_211_Y_STEP = CDW_211; // Window for CD_211 for y-step
   CDW_231:double = 1.96; // Window for CD_231
   CDW_231_X = CDW_231; // Window for CD_231 for x
   CDW_231_Y = CDW_231; // Window for CD_231 for y
   CDW_231_X_STEP = CDW_231; // Window for CD_231 for x-step
   CDW_231_Y_STEP = CDW_231; // Window for CD_231 for y-step
   CD_100:double = 30; // Minimum concentrated local Metal 0 density (%), within a 2.1um x 2.1um window size
   CD_101:double = 18; // Minimum concentrated local Metal 1 density (%), within a 2.1um x 2.1um window size
   CD_102:double = 40; // Minimum concentrated local Metal 2 density (%), within a 2.1um x 2.1um window size
   CD_103:double = 40; // Minimum concentrated local Metal 3 density (%), within a 2.1um x 2.1um window size
   CD_104:double = 40; // Minimum concentrated local Metal 4 density (%), within a 2.1um x 2.1um window size
   CD_105:double = 23.8; // Minimum concentrated local Metal 5 density (%), within a 2.8um x 2.8um window size
   CD_106:double = 23.8; // Minimum concentrated local Metal 6 density (%), within a 2.8um x 2.8um window size
   CD_107:double = 23.8; // Minimum concentrated local Metal 7 density (%), within a 2.8um x 2.8um window size
   CD_131:double = 6; // Minimum concentrated N+P density (%), within a 1.96um x 1.96um window size
   CD_200:double = 75; // Maximum concentrated local Metal 0 density (%), within a 3.15um x 3.15um window size
   CD_201:double = 66.7; // Maximum concentrated local Metal 1 density (%), within a 3.15um x 3.15um window size
   CD_202:double = 78; // Maximum concentrated local Metal 2 density (%), within a 3.15um x 3.15um window size
   CD_203:double = 78; // Maximum concentrated local Metal 3 density (%), within a 3.15um x 3.15um window size
   CD_204:double = 78; // Maximum concentrated local Metal 4 density (%), within a 3.15um x 3.15um window size
   CD_205:double = 72.4; // Maximum concentrated local Metal 5 density (%), within a 4.5um x 4.5um window size
   CD_206:double = 72.4; // Maximum concentrated local Metal 6 density (%), within a 4.5um x 4.5um window size
   CD_207:double = 66.7; // Maximum concentrated local Metal 7 density (%), within a 4.5um x 4.5um window size
   CD_208:double = 85; // Maximum concentrated local Metal 8 density (%), within a 8.8um x 8.8um window size
   CD_209:double = 85; // Maximum concentrated local Metal 9 density (%), within a 8.8um x 8.8um window size
   CD_210:double = 85; // Maximum concentrated local Metal 10 density (%), within a 8.8um x 8.8um window size
   CD_211:double = 85; // Maximum concentrated local Metal 11 density (%), within a 8.8um x 8.8um window size
   CD_231:double = 76; // Maximum concentrated N+P density (%), within a 1.96um x 1.96um window size
   CHN_01:double = 1; // CHN ring must include 4 Corner cells, 1 CE12 resistor cell, 1 MT9/VA9 leakage cell and 1 OGD or PGD I/O cell
   CHN_02:double = 1; // Number of I/O cell placement allowed (either on a OGD or PGD die edge)
   CHN_03:double = 150; // Min distance of ce12res resistor cell or m9v9 leakage cell or I/O cell (OGD or PGD) away from die corner
   CHN_04:double = 0; // OGD or PGD I/O cell must be placed between the CE12 resistor and MT9/VA9 leakage cells (along the shorter perimeter distance separating the two cells)
   CHN_05:double = 0; // Abutting CHN cells are not allowed to create gaps, jogs or to overlap
   CHN_06:double = 0; // CHN I/O cell must be aligned to EDM I/O cell
   CHN_07:double = 0; // EOA layer in the CHN Ring must overlap with EOA layer in the EDM ring (they must overlap exactly) 
   CHN_08:double = 0; // CHN cells dimension not drawn according to spec
   CHW_01:double = 17.58; // Corner Cell x
   CHW_02:double = 16.572; // Corner Cell y
   CHW_03:double = 0.84; // OGD Gap Cell x
   CHW_04:double = 7.5; // OGD Gap Cell y
   CHW_05:double = 7.5; // PGD Gap Cell x
   CHW_06:double = 1.512; // PGD Gap Cell y
   CHW_07:double = 2254.56; // CE12 Resistor Cell x
   CHW_08:double = 7.5; // CE12 Resistor Cell y
   CHW_09:double = 7.5; // MT9/VA9 Leakage Cell x
   CHW_10:double = 2228.688; // MT9/VA9 Leakage Cell y
   CHW_11:double = 5.04; // OGD IO Cell x
   CHW_12:double = 7.5; // OGD IO Cell y
   CHW_13:double = 7.5; // PGD IO Cell x
   CHW_14:double = 6.048; // PGD IO Cell y
   CMW_05:double = 7; // Window for CM_05
   CMW_05_X = CMW_05; // Window for CM_05 for x
   CMW_05_Y = CMW_05; // Window for CM_05 for y
   CMW_05_X_STEP = CMW_05; // Window for CM_05 for x-step
   CMW_05_Y_STEP = CMW_05; // Window for CM_05 for y-step
   CMW_06:double = 7; // Window for CM_06
   CMW_06_X = CMW_06; // Window for CM_06 for x
   CMW_06_Y = CMW_06; // Window for CM_06 for y
   CMW_06_X_STEP = CMW_06; // Window for CM_06 for x-step
   CMW_06_Y_STEP = CMW_06; // Window for CM_06 for y-step
   CMW_07:double = 7; // Window for CM_07
   CMW_07_X = CMW_07; // Window for CM_07 for x
   CMW_07_Y = CMW_07; // Window for CM_07 for y
   CMW_07_X_STEP = CMW_07; // Window for CM_07 for x-step
   CMW_07_Y_STEP = CMW_07; // Window for CM_07 for y-step
   CMW_08:double = 7; // Window for CM_08
   CMW_08_X = CMW_08; // Window for CM_08 for x
   CMW_08_Y = CMW_08; // Window for CM_08 for y
   CMW_08_X_STEP = CMW_08; // Window for CM_08 for x-step
   CMW_08_Y_STEP = CMW_08; // Window for CM_08 for y-step
   CMW_09:double = 7; // Window for CM_09
   CMW_09_X = CMW_09; // Window for CM_09 for x
   CMW_09_Y = CMW_09; // Window for CM_09 for y
   CMW_09_X_STEP = CMW_09; // Window for CM_09 for x-step
   CMW_09_Y_STEP = CMW_09; // Window for CM_09 for y-step
   CM_05:double = 50; // Minimum cumulative density (M5+M6+M7+M8) (%), within a 7um x 7um window size
   CM_06:double = 50; // Minimum cumulative density (M6+M7+M8+M9) (%), within a 7um x 7um window size
   CM_07:double = 50; // Minimum cumulative density (M7+M8+M9+M10) (%), within a 7um x 7um window size
   CM_08:double = 50; // Minimum cumulative density (M8+M9+M10+M11) (%), within a 7um x 7um window size
   CM_09:double = 50; // Minimum cumulative density (M9+M10+M11+M12) (%), within a 7um x 7um window size
   DA_01:double = 0; // No Diffusion or Polycon (GCN) are allowed in the Transition Ring between Digital and TG regions. (1/2 poly wide diffusion slivers at inner/outer edges of TR are an exception)
   DA_02:double = 0; // Transition regions (TRDTOV1) cannot overlap (can abut PGD)
   DA_03:double = 0.042; // Any transition regions to transition region space OGD (min)
   DA_04:double = 0.924; // Minimum PGD facing-edge spacing between V1pitchID layers
   DA_05:double = 0.07; // TRDTOV1 PGD edge space to Polycheck grid outside (fixed value)
   DA_06:double = 0; // No restriction on number of TGULV poly lines
   DA_11:double = 0.462; // PGD width of TRDTOV1 ring (OGD running section) (fixed)
   DA_12:double = 0.374; // OGD width of TRDTOV1 ring (PGD running section) (fixed)
   DA_171:double = 0; // Diffcons are allowed in PGD section and OGD section of TR (but not in the corner section)
   DA_172:double = 0; // Diffcon in the PGD section of TR must follow all standard diffcon rules except the following rules (DA_174-176)
   DA_173:double = 0; // Min space of TCN in OGD section of TR to the corner section
   DA_174:double = 0; // Min TCN space (in PGD) to the corner section of TR
   DA_175:double = 0; // Diffcon ends in PGD section of TR must be all aligned to each other across the whole width of TR
   DA_176:double = 0; // Diffcons in PGD section of TR must be placed in the middle of poly space
   DA_22:double = 2; // Minimum space between concave corners of V1pitchID
   DA_24:double = 1.12; // Minimum width of V1pitchID
   DA_25:double = 0.924; // Minimum V1pitchID segment length
   DA_26:double = 5.7; // Minimum V1pitchID hole size (all direction)
   DA_27:double = 71.8; // Minimum V1pitchID hole area (um^2)
   DA_30:double = 0.56; // Minimum V1pitchID space (between connected V1pitchID region)
   DA_31:double = 0; // Poly layout in the Digital-to-TGULV Transition Ring must match a fixed poly layout pattern template comparison check
   DA_32:double = 0.12; // Poly space region min.separation (PGD direction) from TR OGD edge
   DA_33:double = 0; // Both digital and TGULV poly ends must flush with OGD edge of TRDTOV1 except three digital dummy polys at the edge of TR
   DA_35:double = 0; // TRDTOV1 OGD enclosure of first dummy poly line (fixed value)
   DA_361:double = 0.028; // Fixed width of first 2 poly within TR
   DA_362:double = 0.09; // Fixed width of 3rd/4th poly within TR (under V1pitchID)
   DA_371:double = 0.042; // Fixed space between 1st and 2nd poly within TR
   DA_372:double = 0.046; // Fixed space between 2nd and 3rd poly within TR
   DA_373:double = 0.05; // Fixed space between 3rd and 4th poly within TR
   DA_38:double = 0.025; // V1pitchID enclosure of first TG poly (or 3rd poly in TR) (fixed value)
   DA_41:double = 0; // OGD running section of TRDTOV1 must have special poly pattern exactly as illustrated in the next page
   DA_44:double = 0.12; // Dummy poly extension beyond poly space in TRDTOV1 around concave corner of V1pitchID
   DA_45:double = 0; // Dummy poly portion around concave corners of V1pitchID as defined by DA_44 must not have cuts and must not be used as transistor gate
   DA_46:double = 0.069; // Poly space region on next track min.separation (PGD direction) from TR convex corner
   DA_52:double = 0; // TRDTOV1 layer enclosure of bounding box surrounding all diffusion, Diffcon, and Polycon in TGULV region
   DA_53:double = 0.255; // Nwell extent OGD into TRDTOV1 layer beyond TGULV-poly line-side, only-allowed value
   DA_54:double = 0.231; // Nwell extension outside TRDTOV1, only value (PGD)
   DA_55:double = 0.36; // Nwell outside space to V1pitchID
   DA_56:double = 0; // Nwell inside V1pitchID and ouside cannot merge
   DA_70:double = 0.06; // Special width of TCN in OGD section of TR (fixed)
   DA_71:double = 0.3; // Min length of OGD TCN in TR
   DA_72:double = 0.1; // Min end-to-end space between TCN in OGD section of TR
   DA_73:double = 0.201; // TR OGD section enclosure of TCN side (measured in PGD) (fixed)
   DC_00:double = 0; // Only Rectangular Diffcon shape is allowed and only allowed with length in gate-direction.
   DC_01:double = 0.028; // Diffcon width, ONLY ALLOWED value
   DC_02:double = 0.084; // Min required Diffcon length
   DC_03:double = 0.042; // Diffcon end-to-end (ETE) space (min)
   DC_04:double = 0.007; // Diffcon side space to Poly, ONLY ALLOWED value 
   DC_05:double = 0.336; // Max allowed space between any pair of Diffcon and/or Polycon edges, in the smaller of either (OGD or PGD) direction
   DC_06:double = 0.54; // Max allowed space between any Diffcon edges, diffcon to analog/sram transition regions in the smaller of either direction
   DC_11:double = 0; // Transistor or tap diffusion enclosure of diffcon, max value
   DC_12:double = 0; // All Gate-SD edges require Adjacent Diffcon along the entire gate-SD edge.
   DC_15:double = 0.042; // Minimum Diffcon space to Diffusion, in PGD
   DC_20:double = 0; // All Diffcon line-ends must be on a 21nm grid across the whole die
   DC_21:double = 0.07; // Diffcon pitch, ONLY ALLOWED value
   DC_22:double = 0.1; // Isolated Diffcon (defined by DC_23 AND DC_24) min length
   DC_23:double = 0.112; // Minimum diffcon space (in OGD) on both sides of the isolated diffcon
   DC_24:double = 0.056; // Minimum diffcon space (in PGD) from at least one line-end of the isolated diffcon
   DC_30:double = 0.021; // Min overlap between adjacent line-ends in opposite directions
   DC_31:double = 0.021; // Min offset between adjacent non-overlapping line-ends in opposite directions
   DC_32:double = 0.063; // Min overlap between adjacent line-ends in opposite directions, when one of the lines is minimum length
   DC_33:double = 0.084; // Min overlap between adjacent line-ends in opposite directions, when at least one line-end touches a min ETE space (DC_03) and has length <= DC_34
   DC_34:double = 0.126; // Max Diffcon length (<=) for DC_33 check [and min length (>) for DC_36 check]
   DC_35:double = 0.042; // Min overlap between adjacent line-ends in opposite directions, with adjacent same direction offsets
   DC_36:double = 0.042; // Min overlap between adjacent line-ends in opposite directions, when at least one line-end touches a min ETE space (DC_03) and has length > DC_34
   DC_37:double = 0; // A line end cannot have 2 adjacent lines, one with a positive offset and the other with a negative offset forming a stair step with offset = DC_38
   DC_38:double = 0.042; // Offset value for DC_37 check
   DC_50:double = 0; // Minimum End-to-End space (DC_03) cannot be enclosed by adjacent-TCN overlaps < DC_52 on 3 or more corners (out of 4)
   DC_52:double = 0.063; // Overlap between adjacent line ends in the opposite direction that trigger the DC_50 check (<)
   DF_01:double = 0.042; // Min transistor diffusion/device width (PGD)
   DF_02:double = 0; // Diffusion width must be an integer multiple of DF_01
   DF_03:double = 0.14; // Min transistor diffusion length (OGD)
   DF_04:double = 0; // Diffusion PGD edges must be centered in poly
   DF_07:double = 0.336; // Maximum diffusion/device width (PGD), also applies to taps, diodes
   DF_09:double = 0.042; // Min Diffusion external corner-to-corner space
   DF_10:double = 0.07; // Minimum transistor diffusion segment lengths OGD
   DF_19:double = 0.042; // Min Diffusion internal corner-to-corner space
   DF_31:double = 0.042; // Minimum diffusion space, PGD
   DF_32:double = 0; // Diffusion space PGD must be an integer multiple of DF_31
   DF_34:double = 0.7; // Maximum allowed spacing between any diffusion edges (transistor or tap), in the smaller of either (OGD or PGD) direction
   DF_35:double = 0; // Transistor/Tap diffusion holes are NOT ALLOWED
   DF_43:double = 0.07; // Minimum diffusion space, OGD (applies to transistors and taps in all combinations)
   DF_51:double = 0.14; // Min Tap diffusion width OGD (Ntap or Ptap)
   DF_52:double = 0.042; // Min Tap diffusion length PGD (Ntap or Ptap)
   DF_56:double = 0; // Min Tap PGD/OGD edges must follow standard diffusion rules
   DF_80:double = 0; // Every diffusion must have a TCN
   DF_84:double = 0.084; // Min Tap to Transistor diffusion space PGD (within same well)
   DG_01:double = 0.028; // Diffusion check grid width: fixed value, PGD only
   DG_02:double = 0.056; // Diffusion check grid space: fixed value, PGD only
   DG_03:double = 1.75; // Minimum Diffusion check grid length, OGD only
   DG_04:double = 0; // Diffusion OGD edge must be centered in drawn Diffusion Check Grid width
   DG_05:double = 0; // Diffusion OGD edge must be centered in drawn Diffusion Check Grid space
   DI_01:double = 4; // Minimum total number of each type of DIC (i.e. nested DIC, isolated DIC) per die
   DI_02:double = 0; // Any two same-type DICs (i.e. any two nested DICs or any two isolated DICs) are not allowed to be placed with any edges (or edge portions) abutting each other.
   DI_03:double = 1250; // Maximum distance in x- and y-directions between any two isolated DICs (i.e. isolated-to-isolated)
   DI_04:double = 175; // Maximum distance from the perimeter of all isolated DICs to the Die Edge
   DI_06:double = 3000; // Maximum distance in x- and y-directions between any two nested DICs (i.e. nested-to-nested)
   DI_07:double = 1000; // Maximum distance from the perimeter of all nested DICs to the Die Edge
   DN_01:double = 0.56; // Deep n-well width (min)
   DN_02:double = 1.47; // Deep n-well space (min) 
   DN_03:double = 0.14; // Deep n-well overlap of N-well (min) 
   DN_04:double = 0.56; // Min extension of N-well beyond Deep n-well 
   DN_05:double = 0.7; // Min Deep n-well space to N-well outside 
   DN_07:double = 0.174; // Deep n-well enclosure of p-gates (min)
   DN_08:double = 0.174; // Deep n-well space to p-gates outside the Deep n-well (min)
   DN_09:double = 1.16; // Deep n-well space to BJTID, CAPID or wellResID (min)
   DN_10:double = 0; // The isolated Pwell inside the Deep n-well must have a Pwell tap (ptap) 
   DN_11:double = 4.2; // Max distance from N+ active diff inside Deep n-well to a ptap connected to Vss 
   DN_12:double = 4.2; // Max distance from N+ active diff (inside Deep n-well) to ntap in N-well (connected to Deep n-well) connected to Vcc* 
   DN_13:double = 0.7; // Min Deep n-well space to diffusions outside (active or tap) 
   DS_00:double = 0; // No layouts are allowed to use the SRAMPOLYID except pre-approved bit cell names and pre-approved device template cell names.  
   DS_01:double = 0; // No Diffusion or Polycon (GCN) are allowed in the Transition Ring between Digital and SRAM regions. (1/2 poly wide diffusion slivers at inner/outer edges of TR are an exception)
   DS_02:double = 0; // Transition regions (TRDTOS) cannot overlap (can abut PGD)
   DS_03:double = 0.042; // Any transition regions to transition region space OGD
   DS_04:double = 0.924; // Minimum PGD facing-edge spacing between SRAMPOLYID layers
   DS_05:double = 0.07; // TRDTOS PGD edge space to Poly check grid outside (fixed value)
   DS_09:double = 0; // Only allowed poly widths in the Transition Ring between Digital and SRAM regions are Digtial or SRAM poly widths.
   DS_11:double = 0.462; // PGD width of TRDTOS ring (OGD running section) (fixed)
   DS_12:double = 0.24; // OGD width of TRDTOS ring (PGD running section) (fixed)
   DS_171:double = 0; // Diffcons are allowed in PGD section and OGD section of TR (but not in the corner section)
   DS_172:double = 0; // Diffcon in the PGD section of TR must follow all standard diffcon rules except the following rules (DS_174-176)
   DS_173:double = 0; // Min space of TCN in OGD section of TR to the corner section
   DS_174:double = 0; // Min TCN space (in PGD) to the corner section of TR
   DS_175:double = 0; // Diffcon ends in PGD section of TR must be all aligned to each other across the whole width of TR
   DS_176:double = 0; // Diffcons in PGD section of TR must be placed in the middle of poly space
   DS_24:double = 1.044; // SRAMPOLYID to SRAMPOLYID space
   DS_25:double = 0.05; // Minimum SRAMPOLYID area (um sq)
   DS_31:double = 0; // Poly fixed layout comparison for Digital-to-SRAM Transition Ring
   DS_32:double = 0.12; // Poly space region min.separation (PGD direction) from TR OGD edge
   DS_33:double = 0; // Both digital and SRAM poly ends must flush with OGD edge of TRDTOS except two digital dummy polys at the edge of TR
   DS_35:double = 0; // TRDTOS OGD enclosure of first dummy poly line (fixed value)
   DS_361:double = 0.028; // Fixed width of first 3 poly within TR
   DS_362:double = 0.032; // Fixed width of 4th poly within TR
   DS_371:double = 0.042; // Fixed space between 1st and 2nd poly within TR
   DS_372:double = 0.042; // Fixed space between 2nd and 3rd poly within TR
   DS_373:double = 0.04; // Fixed space between 3rd and 4th poly within TR
   DS_38:double = 0.019; // SRAMPOLYID enclosure of first SRAM poly (or 4th poly in TR) (fixed value)
   DS_41:double = 0; // OGD running section of TRDTOS must have special poly pattern exactly as illustrated
   DS_50:double = 0; // TRDTOS enclosure of 1st two digital polys in TR PGD (fixed value)
   DS_52:double = 0; // TRDTOS layer enclosure of bounding box surrounding all diffusion, Diffcon, and Polycon in SRAM region
   DS_540:double = 0.002; // TRDTOS enclosure of 1st digital diffcheck (PGD)
   DS_541:double = 0.028; // Width of digital diffcheck (fixed value)
   DS_542:double = 0.056; // Digital diffcheck to digital diffcheck space PGD (fixed value)
   DS_543:double = 0.14; // Digital diffcheck to bitcell diffcheck space OGD (fixed value)
   DS_544:double = 0.092; // Digital diffcheck to bitcell diffcheck space PGD fixed value
   DS_60:double = 0.175; // min SRAMPOLYID space to logic diffusion (OGD)
   DS_601:double = 0.063; // TRDTOULP enclosure of SRAM2 pgd edge
   DS_602:double = 0.079; // ULP sram Transtion cell overlap of SRAMID2 in pdg direction
   DS_61:double = 0.035; // min SRAMPOLYID enclosure of bitcell diffusion (OGD)
   DS_62:double = 0.175; // min SRAMPOLYID space to logic diffcheck (OGD)
   DS_63:double = 0.035; // min SRAMPOLYID enclosure of bitcell diffcheck (OGD)
   DS_64:double = 0.194; // min SRAMPOLYID space to logic diffusion (PGD)
   DS_645:double = 0.093; // ULC SRAM diffcheck PGD spacing (fixed value)
   DS_65:double = 0.052; // min SRAMPOLYID enclosure of bitcell diffusion (PGD)
   DS_66:double = 0.012; // min SRAMPOLYID space to logic diffcheck (PGD)
   DS_660:double = 0.175; // min SRAMID2space to logic diffusion (OGD)
   DS_661:double = 0.042; // min SRAMID2 enclosure of bitcell diffusion (OGD)
   DS_662:double = 0.182; // min SRAMID2 space to logic diffcheck (OGD)
   DS_663:double = 0.042; // bitcell diffcheck extension over SRAMID2 (OGD, fixed value)
   DS_664:double = 0.173; // min SRAMID2 space to logic diffusion (PGD)
   DS_665:double = 0.116; // min SRAMID2 enclosure of bitcell diffusion (PGD)
   DS_666:double = 0.033; // min SRAMID2 space to logic diffcheck (PGD)
   DS_667:double = 0.059; // min SRAMID2 enclosure of bitcell diffcheck (PGD)
   DS_67:double = 0.08; // min SRAMPOLYID enclosure of bitcell diffcheck (PGD)
   DS_68:double = 0.056; // There should be no bitcell diffcheck edge between the last(?) bitcell diffusion OGD edge and SRAMPOLYID
   DS_70:double = 0.06; // Special width of TCN in OGD section of TR (fixed)
   DS_71:double = 0.180; // Min length of OGD TCN in TR
   DS_72:double = 0.1; // Min end-to-end space between TCN in OGD section of TR
   DS_73:double = 0.201; // TR OGD section enclosure of TCN side (measured in PGD) (fixed)
   DS_75:double = 0; // OGD edge of SRAMTAPID should be line on line w SRAMPOLYID 
   DS_76:double = 0; // SRAMTAPID should be fully enclosed by SRAMPOLYID
   DS_77:double = 0; // SRAM tap must be enclosed by SRAMTAPID 
   DS_78:double = 0; // Min SRAMTAPID space to bitcell diffusions
   DS_79:double = 0.14; // SRAM tap diffusion space to bitcell diffusion
   DS_80:double = 0.1; // min SRAM diffusion hole length (PGD) post DS_81 merge
   DS_81:double = 0.09; // SRAM diffusions <= DS_81 PGD space, with no diffcheck edge in between are merged before the DS_80 check
   DS_82:double = 0.07; // fixed SRAM diffusion hole width (OGD) post DS_81 merge 
   DT_01:double = 0; // No Diffusion or Polycon (GCN) are allowed in the Transition Ring between Digital and TG regions. (1/2 poly wide diffusion slivers at inner/outer edges of TR are an exception)
   DT_02:double = 0; // Transition regions (TRDTOV3) cannot overlap (can abut PGD)
   DT_03:double = 0.042; // Any transition regions to transition region space OGD (min)
   DT_04:double = 0.924; // Minimum PGD facing-edge spacing between TGPOLYID layers
   DT_05:double = 0.07; // TRDTOV3 PGD edge space to Polycheck grid outside (fixed value)
   DT_06:double = 0; // Number of TG poly lines (not including lines inside TR regions) must be an integer multiple of 4
   DT_11:double = 0.462; // PGD width of TRDTOV3 ring (OGD running section) (fixed)
   DT_12:double = 0.654; // OGD width of TRDTOV3 ring (PGD running section) (fixed)
   DT_171:double = 0; // Diffcons are allowed in PGD section and OGD section of TR (but not in the corner section)
   DT_172:double = 0; // Diffcon in the PGD section of TR must follow all standard diffcon rules except the following rules (DT_174-176)
   DT_173:double = 0; // Min space of TCN in OGD section of TR to the corner section
   DT_174:double = 0; // Min TCN space (in PGD) to the corner section of TR
   DT_175:double = 0; // Diffcon ends in PGD section of TR must be all aligned to each other across the whole width of TR
   DT_176:double = 0; // Diffcons in PGD section of TR must be placed in the middle of poly space
   DT_22:double = 2; // Minimum space between concave corners of V3pitchID
   DT_24:double = 1.26; // Minimum OGD width of V3pitchID
   DT_25:double = 0.924; // Minimum V3pitchID PGD segment length
   DT_26:double = 5.988; // Minimum V3pitchID hole size (all direction)
   DT_27:double = 36; // Minimum V3pitchID hole area (um^2)
   DT_30:double = 1.26; // Minimum V3pitchID space (between connected V3pitchID region)
   DT_31:double = 0; // Poly layout in the Digital-to-TG Transition Ring must match a fixed poly layout pattern template comparison check
   DT_32:double = 0.12; // Poly space region min.separation (PGD direction) from TR OGD edge
   DT_33:double = 0; // Both digital and TG poly ends must flush with OGD edge of TRDTOV3 except three digital dummy polys at the edge of TR
   DT_35:double = 0; // TRDTOV3 OGD enclosure of first dummy poly line (fixed value)
   DT_361:double = 0.028; // Fixed width of first 3 poly within TR
   DT_362:double = 0.028; // Fixed width of 4th poly within TR
   DT_363:double = 0.138; // Fixed width of 5th poly within TR
   DT_364:double = 0.16; // Fixed width of 6th poly within TR (this poly is under V3pitchID)
   DT_371:double = 0.042; // Fixed space between 1st and 2nd poly within TR
   DT_372:double = 0.042; // Fixed space between 2nd and 3rd poly within TR
   DT_373:double = 0.052; // Fixed space between 3rd and 4th poly within TR
   DT_374:double = 0.052; // Fixed space between 4th and 5th poly within TR
   DT_375:double = 0.056; // Fixed space between 5th and 6th poly within TR
   DT_38:double = 0.025; // V3pitchID enclosure of first TG poly (or 6th poly in TR) (fixed value)
   DT_41:double = 0; // OGD running section of TRDTOV3 must have special poly pattern exactly as illustrated in the next page
   DT_44:double = 0.12; // Dummy poly extension beyond poly space in TRDTOV3 around concave corner of V3pitchID
   DT_45:double = 0; // Dummy poly portion around concave corners of V3pitchID as defined by DT_44 must not have cuts and must not be used as transistor gate
   DT_52:double = 0; // TRDTOV3 layer enclosure of bounding box surrounding all diffusion, Diffcon, and Polycon in TG region
   DT_53:double = 0.025; // Nwell extent OGD into TRDTOV3 layer beyond first TG-poly line-side, only-allowed value
   DT_54:double = 0.231; // Nwell extension outside TRDTOV3, only value (PGD)
   DT_55:double = 0.36; // Nwell outside space to V3pitchID
   DT_56:double = 0; // Nwell inside V3pitchID and ouside cannot merge
   DT_70:double = 0.06; // Special width of TCN in OGD section of TR (fixed)
   DT_71:double = 0.3; // Min length of OGD TCN in TR
   DT_72:double = 0.1; // Min end-to-end space between TCN in OGD section of TR
   DT_73:double = 0.201; // TR OGD section enclosure of TCN side (measured in PGD) (fixed)
   DX_01:double = 0; // No Diffusion or Polycon (GCN) are allowed in the Transition Ring between Digital and ULP regions. (1/2 poly wide diffusion slivers at inner/outer edges of TR are an exception)
   DX_02:double = 0; // Transition regions (TRDTOULP) cannot overlap (can abut PGD)
   DX_03:double = 0.042; // Any transition regions to transition region space OGD (min)
   DX_04:double = 0.924; // Minimum PGD facing-edge spacing between ULPpitchID layers
   DX_05:double = 0.07; // TRDTOULP PGD edge space to Polycheck grid outside (fixed value)
   DX_06:double = 0; // Number of ULP poly lines (tracks) inside a ULPpitchID (including ones under TRDTOULP) must be 17+10*n (n=0,1,2, . . .)
   DX_11:double = 0.462; // PGD width of TRDTOULP ring (OGD running section) (fixed)
   DX_12:double = 0.84; // OGD width of TRDTOULP ring (PGD running section) (fixed)
   DX_171:double = 0; // Diffcons are allowed in PGD section and OGD section of TR (but not in the corner section)
   DX_172:double = 0; // Diffcon in the PGD section of TR must follow all standard diffcon rules except the following rules (DX_174-176)
   DX_173:double = 0; // Min space of TCN in OGD section of TR to the corner section
   DX_174:double = 0; // Min TCN space (in PGD) to the corner section of TR
   DX_175:double = 0; // Diffcon ends in PGD section of TR must be all aligned to each other across the whole width of TR
   DX_176:double = 0; // Diffcons in PGD section of TR must be placed in the middle of poly space
   DX_177:double = 0; // Diffcons are not allowed in poly spaces < 0.042um in TRDTOULP
   DX_22:double = 1.992; // Minimum space between concave corners of ULPpitchID
   DX_24:double = 1.428; // Minimum width of ULPpitchID
   DX_25:double = 0.924; // Minimum ULPpitchID segment length
   DX_26:double = 5.7; // Minimum ULPpitchID hole size (all direction)
   DX_27:double = 71.8; // Minimum ULPpitchID hole area (um^2)
   DX_30:double = 0.56; // Minimum ULPpitchID space (between connected ULPpitchID region)
   DX_31:double = 0; // Poly layout in the Digital-to-ULP Transition Ring must match a fixed poly layout pattern template comparison check
   DX_32:double = 0.12; // Poly space region min.separation (PGD direction) from TR OGD edge
   DX_33:double = 0; // Both digital and ULP poly ends must flush with OGD edge of TRDTOULP except three digital dummy polys at the edge of TR
   DX_35:double = 0; // TRDTOULP OGD enclosure of first dummy poly line (fixed value)
   DX_361:double = 0.028; // Fixed width of first 3 poly within TR
   DX_362:double = 0.028; // Fixed width of 4th/5th/6th/7th poly within TR
   DX_363:double = 0.046; // Fixed width of 8th poly within TR
   DX_364:double = 0.042; // Fixed width of 9th-12th poly lines (under ULP pitchID in TR)
   DX_371:double = 0.042; // Fixed space between polys throuth 1st to 4th poly within TR
   DX_372:double = 0.031; // Fixed space between 4th and 5th poly within TR
   DX_373:double = 0.041; // Fixed space between 5th and 6th poly within TR
   DX_374:double = 0.026; // Fixed space between 6th and 7th poly within TR
   DX_375:double = 0.038; // Fixed space between 7th and 8th poly within TR
   DX_376:double = 0.042; // Fixed space between polys through 8th to 12th within TR
   DX_38:double = 0.021; // ULPpitchID enclosure of first ULP poly (or 9th poly in TR) (fixed value)
   DX_41:double = 0; // OGD running section of TRDTOV1 must have special poly pattern exactly as illustrated in the next page
   DX_44:double = 0.12; // Dummy poly extension beyond poly space in TRDTOULP around concave corner of ULPpitchID
   DX_45:double = 0; // Dummy poly portion around concave corners of ULPpitchID as defined by DX_44 must not have cuts and must not be used as transistor gate
   DX_52:double = 0.315; // TRDTOULP layer enclosure of bounding box surrounding all diffusion, Diffcon, and Polycon in ULP region
   DX_53:double = 0.052; // Nwell extent OGD into TRDTOULP layer beyond ULP-poly line-side, only-allowed value
   DX_54:double = 0.231; // Nwell extension outside TRDTOULP, only value (PGD)
   DX_55:double = 0.36; // Nwell outside space to ULPpitchID
   DX_56:double = 0; // Nwell inside ULPpitchID and ouside cannot merge
   DX_70:double = 0.06; // Special width of TCN in OGD section of TR (fixed)
   DX_71:double = 0.3; // Min length of OGD TCN in TR
   DX_72:double = 0.1; // Min end-to-end space between TCN in OGD section of TR
   DX_73:double = 0.201; // TR OGD section enclosure of TCN side (measured in PGD) (fixed)
   EA_01:double = 1.512; // Edge-of-Active (EOA) PGD length must be a whole multiple of EA_01
   EA_02:double = 4.2; // Edge-of-Active (EOA) OGD length must be a whole multiple of EA_02
   EA_39:double = 7.512; // TM1 space to EOA boundary, PGD (min)
   EA_40:double = 12.012; // TM1 space to EOA boundary, maximum space
   EA_44:double = 7.4; // TM1 space to EOA boundary, OGD (min)
   EA_45:double = 2.4; // CE1/2 space to EOA boundary OGD (min)
   EA_46:double = 2.512; // CE1/2 space to EOA boundary PGD (min)
   EA_91:double = 0; // At full chip DRC, the EOA and EtchRing must both exist, and they must abut together line-on-line (i.e. with no gaps and no overlaps).
   EA_92:double = 0; // The EOA + EtchRing must be line-on-line covered by the Boundary layer (50;0).
   EDM_01:double = 0; // EOA layer must be present at top level Cell
   EDM_02:double = 0; // Area that is 1.512um from the OGD EOA and 1.68um from the PGD EOA is occupied by EDM cells
   EDM_03:double = 62; // Maximum number of Fill cells per PGD die edge
   EDM_04:double = 108; // Maximum number of Fill cells per OGD die edge
   EDM_05:double = 1; // Maximum number of PGD fill cell that can be placed consecutively
   EDM_06:double = 2; // Maximum number of OGD fill cell that can be placed consecutively
   EDM_07:double = 1; // Maximum number of PGD diode staircase cell that can be placed consecutively
   EDM_08:double = 1; // Maximum number of OGD diode staircase cell that can be placed consecutively
   EDM_09:double = 5; // Every fifth staircase cell must be a diode staircase cell
   EDM_10:double = 150; // Min distance of I/O cell location away from die corner
   EDM_11:double = 1; // Number of I/O cell placement allowed (either on a OGD or PGD die edge)
   EDM_12:double = 0; // Corner cells can only reside in die corners
   EDM_13:double = 0; // EDM cells cannot overlap each other
   EDM_14:double = 0; // EDM cells dimension not drawn according to spec
   EDW_01:double = 6.72; // Corner Cell x
   EDW_02:double = 6.048; // Corner Cell y
   EDW_03:double = 0.84; // OGD Fill Cell x
   EDW_04:double = 1.512; // OGD Fill Cell y
   EDW_05:double = 1.68; // PGD Fill Cell x
   EDW_06:double = 1.512; // PGD Fill Cell y
   EDW_07:double = 5.04; // OGD IO Cell x
   EDW_08:double = 1.512; // OGD IO Cell y
   EDW_09:double = 1.68; // PGD IO Cell x
   EDW_10:double = 6.048; // PGD IO Cell y
   EDW_11:double = 1.68; // PGD STAIRCASSE DIODE Cell x
   EDW_12:double = 93.744; // PGD STAIRCASSE DIODE Cell y
   EDW_13:double = 90.72; // OGD STAIRCASSE DIODE Cell x
   EDW_14:double = 1.512; // OGD STAIRCASSE DIODE Cell y
   EDW_15:double = 1.68; // PGD STAIRCASSE Cell x
   EDW_16:double = 93.744; // PGD STAIRCASSE Cell y
   EDW_17:double = 90.72; // OGD STAIRCASSE Cell x
   EDW_18:double = 1.512; // OGD STAIRCASSE Cell y
   EHV_01:double = 0.032; // Polycon space to Diffcon (min)
   EHV_02:double = 0.032; // VCN space to Diffcon (PGD), min
   EHV_04:double = 0.032; // VCN space to polycon (PGD), min
   EHV_06:double = 0.029; // VCN-Via0 space (min)
   EHV_07:double = 0.032; // Via0-Via1 space (min)
   EHV_09:double = 0.028; // Via1-Via1 space (min)
   EHV_11:double = 0.032; // Via1-Via2 space (min)
   EHV_12:double = 0.026; // Via2-Metal2 space (min)
   EHV_13:double = 0.028; // Via2-Via2 space (min)
   EHV_15:double = 0.032; // Via2-Via3 space (min)
   EHV_16:double = 0.026; // Via3-Metal3 space (min)
   EHV_18:double = 0.028; // Via3-Via3 space (min)
   EHV_19:double = 0.028; // Via4-Via4 space (min)
   EHV_20:double = 0.03; // Via4-Via5 space (min)
   EHV_21:double = 0.026; // Via5-Metal5 space (min)
   EHV_23:double = 0.029; // Via3-Via4 space (min)
   EHV_24:double = 0.027; // Via4-Metal4 space (min)
   EHV_25:double = 0.04; // Via5-Via6 space (min)
   EHV_26:double = 0.051; // Via6-Via7 space (min)
   EHV_27:double = 0.042; // Via6-Metal6 space (min)
   EHV_34:double = 0.049; // Metal4-Metal4 space (min)
   EHV_36:double = 0.084; // Metal6-Metal6 space (min)
   ENW_14:double = 0.36; // N-well space (min)
   ENW_21:double = 0.12; // N+ active diffusion space to extra high voltage nwells (min)
   ENW_22:double = 0.12; // P+ active diffusion enclosure by extra high voltage nwell (min)
   ER_01:double = 0.21; // ESD N-well resistor width (min)
   ER_03:double = 0.36; // ESD N-well resistor space to ESD N-well or regular N-well (min)
   ER_04:double = 0.063; // ESD N-well enclosure of N+ diffusion inside
   ER_05:double = 0.42; // ESD N-well resistor space to N+ diffusion outside
   ER_06:double = 0.252; // ESD N-well resistor space to P+ diffusion outside
   ER_07:double = 0.126; // ESD N-well resistor space to N+ diffusion outside, when that N+ diffusion is electrically strapped to the ESD N-well layer through Metal0, Metal1, or Metal2
   ER_08:double = 0.126; // ESD N-well resistor space to Floating diffusion ouside (Floating diffusion has no ViaCon electrically connected to the diffusion) 
   ER_09:double = 0.028; // Poly-blocked ESD resistor length, ONLY ALLOWED value
   ER_12:double = 0.084; // Min blocked poly resistor width
   FM_01:double = 77; // Maximum area of floating MT0 with zero facing edge component  (sq um)
   FM_02:double = 672; // Max length of floating MT0 edge facing a Vss MT0 edge within 2Xmin spacing
   FM_03:double = 77; // Maximum area of floating MT0 with non-zero facing edge component  (sq um)
   FM_101:double = 1063; // Maximum area of floating MT10 with zero facing edge component  (sq um)
   FM_102:double = 1887; // Max length of floating MT10 edge facing a Vss MT10 edge within 2Xmin spacing
   FM_103:double = 750; // Maximum area of floating MT10 with non-zero facing edge component  (sq um)
   FM_11:double = 77; // Maximum area of floating MT1 with zero facing edge component  (sq um)
   FM_111:double = 1063; // Maximum area of floating MT11 with zero facing edge component  (sq um)
   FM_112:double = 1887; // Max length of floating MT11 edge facing a Vss MT11 edge within 2Xmin spacing
   FM_113:double = 750; // Maximum area of floating MT11 with non-zero facing edge component  (sq um)
   FM_12:double = 672; // Max length of floating MT1 edge facing a Vss MT1 edge within 2Xmin spacing
   FM_121:double = 1063; // Maximum area of floating MT12 with zero facing edge component  (sq um)
   FM_122:double = 1887; // Max length of floating MT12 edge facing a Vss MT12 edge within 2Xmin spacing
   FM_123:double = 750; // Maximum area of floating MT12 with non-zero facing edge component  (sq um)
   FM_13:double = 77; // Maximum area of floating MT1 with non-zero facing edge component  (sq um)
   FM_21:double = 1011; // Maximum area of floating MT2 with zero facing edge component  (sq um)
   FM_22:double = 841; // Max length of floating MT2 edge facing a Vss MT2 edge within 2Xmin spacing
   FM_23:double = 294; // Maximum area of floating MT2 with non-zero facing edge component  (sq um)
   FM_291:double = 1125; // Maximum floating metal area for MT4  MT0 network  (sq um)
   FM_292:double = 2375; // Maximum floating metal area for MT5  MT0 network  (sq um)
   FM_293:double = 2375; // Maximum floating metal area for MT6  MT0 network  (sq um)
   FM_294:double = 3000; // Maximum floating metal area for MT7  MT0 network  (sq um)
   FM_295:double = 3000; // Maximum floating metal area for MT8  MT0 network  (sq um)
   FM_296:double = 3000; // Maximum floating metal area for MT9  MT0 network  (sq um)
   FM_297:double = 3000; // Maximum floating metal area for MT10  MT0 network  (sq um)
   FM_298:double = 3000; // Maximum floating metal area for MT11  MT0 network  (sq um)
   FM_299:double = 3625; // Maximum floating metal area for MT12  MT0 network  (sq um)
   FM_31:double = 1011; // Maximum area of floating MT3 with zero facing edge component  (sq um)
   FM_32:double = 1177; // Max length of floating MT3 edge facing a Vss MT3 edge within 2Xmin spacing
   FM_33:double = 98; // Maximum area of floating MT3 with non-zero facing edge component  (sq um)
   FM_41:double = 1011; // Maximum area of floating MT4 with zero facing edge component  (sq um)
   FM_42:double = 841; // Max length of floating MT4 edge facing a Vss MT4 edge within 2Xmin spacing
   FM_43:double = 294; // Maximum area of floating MT4 with non-zero facing edge component  (sq um)
   FM_51:double = 625; // Maximum area of floating MT5 with zero facing edge component  (sq um)
   FM_52:double = 1029; // Max length of floating MT5 edge facing a Vss MT5 edge within 2Xmin spacing
   FM_53:double = 82; // Maximum area of floating MT5 with non-zero facing edge component  (sq um)
   FM_61:double = 625; // Maximum area of floating MT6 with zero facing edge component  (sq um)
   FM_62:double = 1029; // Max length of floating MT6 edge facing a Vss MT6 edge within 2Xmin spacing
   FM_63:double = 82; // Maximum area of floating MT6 with non-zero facing edge component  (sq um)
   FM_71:double = 750; // Maximum area of floating MT7 with zero facing edge component  (sq um)
   FM_72:double = 1887; // Max length of floating M7 edge facing a Vss MT7 edge within 2Xmin spacing
   FM_73:double = 188; // Maximum area of floating MT7 with non-zero facing edge component  (sq um)
   FM_81:double = 1063; // Maximum area of floating MT8 with zero facing edge component  (sq um)
   FM_82:double = 1887; // Max length of floating MT8 edge facing a Vss MT8 edge within 2Xmin spacing
   FM_83:double = 750; // Maximum area of floating MT8 with non-zero facing edge component  (sq um)
   FM_91:double = 1063; // Maximum area of floating MT9 with zero facing edge component  (sq um)
   FM_92:double = 1887; // Max length of floating MT9 edge facing a Vss MT9 edge within 2Xmin spacing
   FM_93:double = 750; // Maximum area of floating MT9 with non-zero facing edge component  (sq um)
   FM_B1:double = 0; // Floating bumps are not allowed
   FM_T1:double = 2000; // Maximum length of floating TM1
   GD_01:double = 6; // Minimum Global Exposed P-diffusion density (%)
   GD_02:double = 6; // Minimum Global Exposed N-diffusion density (%)
   GD_100:double = 41; // Minimum Global Metal 0 Layer density (%)
   GD_101:double = 30; // Minimum Global Metal 1 Layer density (%)
   GD_102:double = 44; // Minimum Global Metal 2 Layer density (%)
   GD_103:double = 44; // Minimum Global Metal 3 Layer density (%)
   GD_104:double = 44; // Minimum Global Metal 4 Layer density (%)
   GD_105:double = 30; // Minimum Global Metal 5 Layer density (%)
   GD_106:double = 30; // Minimum Global Metal 6 Layer density (%)
   GD_107:double = 40; // Minimum Global Metal 7 Layer density (%)
   GD_108:double = 40; // Minimum Global Metal 8 Layer density (%)
   GD_109:double = 40; // Minimum Global Metal 9 Layer density (%)
   GD_110:double = 40; // Minimum Global Metal 10 Layer density (%)
   GD_111:double = 40; // Minimum Global Metal 11 Layer density (%)
   GD_112:double = 50; // Minimum Global Metal 12 Layer density (%)
   GD_120:double = 60; // Minimum Global TM1 Layer density (%)
   GD_121:double = 65; // Minimum Global CE1 Layer density (%)
   GD_122:double = 65; // Minimum Global CE2 Layer density (%)
   GD_123:double = 65; // Minimum Global CE3 Layer density (%)
   GD_200:double = 66; // Max Global Metal 0 layer density (%)
   GD_201:double = 55; // Max Global Metal 1 layer density (%)
   GD_202:double = 69; // Max Global Metal 2 layer density (%)
   GD_203:double = 69; // Max Global Metal 3 layer density (%)
   GD_204:double = 69; // Max Global Metal 4 layer density (%)
   GD_205:double = 58; // Max Global Metal 5 layer density (%)
   GD_206:double = 58; // Max Global Metal 6 layer density (%)
   GD_207:double = 60; // Max Global Metal 7 layer density (%)
   GD_208:double = 60; // Max Global Metal 8 layer density (%)
   GD_209:double = 60; // Max Global Metal 9 layer density (%)
   GD_21:double = 9; // Maximum Global Exposed P-diffusion density (%)
   GD_210:double = 60; // Max Global Metal 10 layer density (%)
   GD_211:double = 60; // Max Global Metal 11 layer density (%)
   GD_212:double = 80; // Max Global Metal 12 layer density (%)
   GD_22:double = 9; // Maximum Global Exposed N-diffusion density (%)
   GD_51:double = 41; // Min Global RDL density (%)
   GD_52:double = 55; // Max Global RDL density (%)
   GR_01:double = 16; // Min required TCN density (%), within a 3.92um x 3.92um window size
   GR_02:double = 31.5; // Max allowed TCN density (%), within a 3.92um x 3.92um window size
   GR_03:double = 21; // Min required TCN+GCN density (%), within a 3.92um x 3.92um window size
   GR_04:double = 36; // Max allowed TCN+GCN density (%), within a 3.92um x 3.92um window size
   GR_05:double = 7.14; // Oversize of GCN resistor cell boundary to form check regions for GR_01/02/03/04
   HNW_14:double = 0.22; // N-well space (min)
   HNW_21:double = 0.06; // N+ active diffusion space to high voltage nwells (min)
   HNW_22:double = 0.06; // P+ active diffusion enclosure by high voltage nwell (min)
   HV_01:double = 0.03; // Polycon space to Diffcon (min)
   HV_02:double = 0.03; // VCN space to Diffcon (PGD), min
   HV_04:double = 0.03; // VCN space to polycon (PGD), min
   HV_09:double = 0.026; // Via1-Via1 space (min)
   HV_11:double = 0.03; // Via1-Via2 space (min)
   HV_12:double = 0.024; // Via2-Metal2 space (min)
   HV_13:double = 0.026; // Via2-Via2 space (min)
   HV_16:double = 0.024; // Via3-Metal3 space (min)
   HV_18:double = 0.026; // Via3-Via3 space (min)
   HV_19:double = 0.026; // Via4-Via4 space (min)
   HV_20:double = 0.028; // Via4-Via5 space (min)
   HV_22:double = 0.03; // Via2-Via3 space (min)
   HV_23:double = 0.028; // Via3-Via4 space (min)
   HV_24:double = 0.024; // Via4-Metal4 space (min)
   HV_25:double = 0.038; // Via5-Via6 space (min)
   HV_26:double = 0.049; // Via6-Via7 space (min)
   HV_27:double = 0.04; // Via6-Metal6 space (min)
   HV_34:double = 0.049; // Metal4-Metal4 space (min)
   HV_36:double = 0.084; // Metal6-Metal6 space (min)
   HV_90:double = 0; // Gates with NACID or GATED_NACID cannot be connected to HV or EHV or UHV nets
   IPB_00:double = 1.7; // Max ratio of Metal area to Total PMOS gate edge  (um^2 /um)
   IPB_01:double = 14200; // Limit Ratio of Metal area (on the PMOS source) to N-discharge-transistor Ze  (um^2 /um)
   IPDW_111:double = 0; // Limit Ratio of Metal area (on the PMOS source) to N-discharge-transistor Ze  (um^2 /um) in isolated pwell
   IPDW_191:double = 0; // Limit Ratio of Metal or GCN+TCN area to logic/SRAM N-transistor Drain Ze (um^2 /um) no sub-tap
   IPDW_193:double = 0; // Limit Ratio of TM1 area to logic/SRAM N-transistor Drain Ze (um^2 /um) no sub-tap
   IPDW_201:double = 0; // Limit Ratio of Metal or GCN+TCNarea to nom N-transistor Ze   (um^2 /um)
   IPDW_391:double = 0; // Limit Ratio of Metal area to TG N-transistor Drain Ze (um^2 /um) no sub-tap
   IPDW_395:double = 0; // Limit Ratio of Metal area to n-transistor (TG-gNAC) Ze, for TG n-transistor protection  (um)
   IPDW_611:double = 0; // Limit Ratio of Metal area (on the PMOS source) to TG N-discharge-transistor Ze  (um^2 /um) in isolated pwell
   IPD_00:double = 174000; // GCN+TCN (Polycon+Diffcon)
   IPD_01:double = 174000; // Metal-0
   IPD_02:double = 174000; // Metal-1
   IPD_03:double = 174000; // Metal-2
   IPD_04:double = 174000; // Metal-3
   IPD_05:double = 174000; // Metal-4
   IPD_06:double = 174000; // Metal-5
   IPD_07:double = 174000; // Metal-6
   IPD_08:double = 174000; // Metal-7
   IPD_09:double = 174000; // Metal-8
   IPD_10:double = 174000; // Metal-9
   IPD_100:double = 174000; // GCN+TCN (Polycon+Diffcon)
   IPD_101:double = 174000; // Metal-0
   IPD_102:double = 174000; // Metal-1
   IPD_103:double = 174000; // Metal-2
   IPD_104:double = 174000; // Metal-3
   IPD_105:double = 174000; // Metal-4
   IPD_106:double = 174000; // Metal-5
   IPD_107:double = 174000; // Metal-6
   IPD_108:double = 174000; // Metal-7
   IPD_109:double = 174000; // Metal-8
   IPD_11:double = 174000; // Metal-10
   IPD_110:double = 174000; // Metal-9
   IPD_111:double = 174000; // Metal-10
   IPD_112:double = 174000; // Metal-11
   IPD_113:double = 174000; // TM1
   IPD_114:double = 174000; // Metal-12
   IPD_12:double = 174000; // Metal-11
   IPD_13:double = 174000; // TM1
   IPD_14:double = 174000; // Metal-12
   IPD_200:double = 1000000; // ViaCN
   IPD_201:double = 1000000; // Via0
   IPD_202:double = 1000000; // Via1 
   IPD_203:double = 1000000; // Via2 
   IPD_204:double = 1000000; // Via3 
   IPD_205:double = 1000000; // Via4
   IPD_206:double = 1000000; // Via5
   IPD_207:double = 1000000; // Via6
   IPD_208:double = 1000000; // Via7
   IPD_209:double = 1000000; // Via8
   IPD_210:double = 1000000; // Via9
   IPD_211:double = 1000000; // Via10
   IPD_212:double = 1000000; // Via11
   IPD_213:double = 1000000; // Via12
   IPD_300:double = 1000000; // ViaCN
   IPD_301:double = 1000000; // Via0
   IPD_302:double = 1000000; // Via1 
   IPD_303:double = 1000000; // Via2 
   IPD_304:double = 1000000; // Via3 
   IPD_305:double = 1000000; // Via4
   IPD_306:double = 1000000; // Via5
   IPD_307:double = 1000000; // Via6
   IPD_308:double = 1000000; // Via7
   IPD_309:double = 1000000; // Via8
   IPD_310:double = 1000000; // Via9
   IPD_311:double = 1000000; // Via10
   IPD_312:double = 1000000; // Via11
   IPD_313:double = 1000000; // Via12
   IPD_405:double = 1000000; // Via4 (vcc nodes)
   IPD_406:double = 1000000; // Via5 (vcc nodes)
   IPD_407:double = 1000000; // Via6 (vcc nodes)
   IPD_408:double = 1000000; // Via7 (vcc nodes)
   IPD_409:double = 1000000; // Via8 (vcc nodes)
   IPD_410:double = 1000000; // Via9 (vcc nodes)
   IPD_411:double = 1000000; // Via10 (vcc nodes)
   IPD_412:double = 1000000; // Via11 (vcc nodes)
   IPD_413:double = 1000000; // Via12 (vcc nodes)
   IPD_505:double = 1000000; // Via4 (vcc nodes)
   IPD_506:double = 1000000; // Via5 (vcc nodes)
   IPD_507:double = 1000000; // Via6 (vcc nodes)
   IPD_508:double = 1000000; // Via7 (vcc nodes)
   IPD_509:double = 1000000; // Via8 (vcc nodes)
   IPD_510:double = 1000000; // Via9 (vcc nodes)
   IPD_511:double = 1000000; // Via10 (vcc nodes)
   IPD_512:double = 1000000; // Via11 (vcc nodes)
   IPD_513:double = 1000000; // Via12 (vcc nodes)
   IPD_600:double = 35; // Limit Ratio of Metal or GCN+TCN area to N-transistor Drain Ze (um^2 /um) no sub-tap
   IPD_601:double = 14; // Limit Ratio of TM1 area to N-transistor Drain Ze (um^2 /um) no sub-tap
   IPD_602:double = 1.4; // Limit Ratio of TV1 area to logic/SRAM N-transistor Drain Ze (um^2 /um) no sub-tap
   IPD_610:double = 1.8; // Limit ratio of Metal or GCN+TCN area connected to nwell to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge without sub-tap
   IPD_611:double = 0.7; // Limit ratio of TM1 area connected to nwell to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge without sub-tap
   IPD_612:double = 0.07; // Limit ratio of TV1 area connected to nwell  to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge without sub-tap
   IPGTM1_05:double = 0.0071; // Limit Ratio of TM1 area to nwell area  (um^2 /um^2).
   IPG_00:double = 14200; // Limit Ratio of Metal or GCN+TCNarea to nom N-transistor Ze   (um^2 /um)
   IPG_01:double = 3500; // Limit Ratio of Metal or GCN+TCNarea to uv1/uv2 N-transistors
   IPG_02:double = 710; // Limit Ratio of Metal or GCN+TCNarea SRAM N-transistors
   IPG_03:double = 3500; // Limit Ratio of Metal or GCN+TCNarea to nom inverter with sub-tap Ze (smaller of N/P Z)  (um^2 /um)
   IPG_04:double = 2800; // Limit Ratio of Metal or GCN+TCNarea to uv1/uv2 inverter with sub-tap Ze (smaller of N/P Z)  (um^2 /um)
   IPG_05:double = 0.014; // Limit Ratio of Metal area to nwell area  (um^2 /um^2).
   IPG_100:double = 200; // Limit Ratio of Metal to esd-diode ndiff area  (um^2 /um^2)
   IPG_101:double = 500; // Limit Ratio of Metal to power clamp pmos Z  (um^2 /um)
   IPG_200:double = 7100; // Max TM1/Z
   IPG_300:double = 710; // Limit Ratio of TV1 area to nom N-transistor Ze   (um^2 /um)
   IPG_301:double = 350; // Limit Ratio of TV1 area to uv1/uv2 N-transistors
   IPG_302:double = 70; // Limit Ratio of TV1 area SRAM N-transistors
   IPG_303:double = 350; // Limit Ratio of TV1 area to nom inverter with sub-tap Ze (smaller of N/P Z)  (um^2 /um)
   IPG_304:double = 280; // Limit Ratio of TV1 area to uv1/uv2 inverter with sub-tap Ze (smaller of N/P Z)  (um^2 /um)
   IPG_305:double = 0.00071; // Limit Ratio of TV1 area to nwell area  (um^2 /um^2)
   IPG_400:double = 20; // Limit Ratio of TV1 area to esd-diode ndiff area  (um^2 /um^2)
   IPG_401:double = 50; // Limit Ratio of TV1 area to power clamp pmos Z  (um^2 /um)
   IPG_610:double = 35; // Limit ratio of Metal or GCN+TCN area connected to nwell to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge with sub-tap
   IPG_611:double = 14; // Limit ratio of TM1 area connected to nwell to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge with sub-tap
   IPG_612:double = 1.4; // Limit ratio of TV1 area connected to nwell to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge with sub-tap
   IPNWD_101:double = 3550; // Limit Metal or GCN+TCN area to Pdiff Z (um^2/um) connected to NAC
   IPNWD_102:double = 1775; // Limit TM1 area to Pdiff Z (um^2/um) connected to NAC
   IPNWD_103:double = 177.5; // Limit TV1 area to Pdiff Z (um^2/um) connected to NAC
   IPNWG_101:double = 7100; // Limit Metal or GCN+TCN area to Pdiff Z (um^2/um) connected to GNAC
   IPNWG_102:double = 3550; // Limit TM1 area to Pdiff Z (um^2/um) connected to GNAC
   IPNWG_103:double = 355; // Limit TV1 area to Pdiff Z (um^2/um) connected to GNAC
   IPNWN_01:double = 6.9; // Max ratio of GCN+TCN area to victim nwell area
   IPNWN_02:double = 93; // Max ratio of metal to victim nwell area
   IPNWN_03:double = 3.3; // Max via to victim nwell area
   IPNWN_04:double = 0; // Max ratio of TM1 to victim nwell area (0 means effectively not allowed)
   IPNWN_05:double = 0; // Max TV1 area to victim nwell area (0 means effectively not allowed)
   IPN_00:double = 70; // GCN+TCN (Polycon+Diffcon)
   IPN_01:double = 1400; // Metal-0
   IPN_02:double = 1400; // Metal-1
   IPN_03:double = 1400; // Metal-2
   IPN_04:double = 1400; // Metal-3
   IPN_05:double = 1400; // Metal-4
   IPN_06:double = 1400; // Metal-5
   IPN_07:double = 1400; // Metal-6
   IPN_08:double = 1400; // Metal-7
   IPN_09:double = 1400; // Metal-8
   IPN_10:double = 1400; // Metal-9
   IPN_100:double = 42; // GCN+TCN (Polycon+Diffcon)
   IPN_101:double = 850; // Metal-0
   IPN_102:double = 850; // Metal-1
   IPN_103:double = 850; // Metal-2
   IPN_104:double = 850; // Metal-3
   IPN_105:double = 850; // Metal-4
   IPN_106:double = 850; // Metal-5
   IPN_107:double = 850; // Metal-6
   IPN_108:double = 850; // Metal-7
   IPN_109:double = 850; // Metal-8
   IPN_11:double = 1400; // Metal-10
   IPN_110:double = 850; // Metal-9
   IPN_111:double = 850; // Metal-10
   IPN_112:double = 850; // Metal-11
   IPN_113:double = 0; // TM1
   IPN_114:double = 275; // Metal-12
   IPN_12:double = 1400; // Metal-11
   IPN_13:double = 0; // TM1
   IPN_14:double = 560; // Metal-12
   IPN_200:double = 140; // GCN+TCN (Polycon+Diffcon)
   IPN_201:double = 2850; // Metal-0
   IPN_202:double = 2850; // Metal-1
   IPN_203:double = 2850; // Metal-2
   IPN_204:double = 2850; // Metal-3
   IPN_205:double = 2850; // Metal-4
   IPN_206:double = 2850; // Metal-5
   IPN_207:double = 2850; // Metal-6
   IPN_208:double = 2850; // Metal-7
   IPN_209:double = 2850; // Metal-8
   IPN_210:double = 2850; // Metal-9
   IPN_211:double = 2850; // Metal-10
   IPN_212:double = 2850; // Metal-11
   IPN_213:double = 0; // TM1
   IPN_214:double = 850; // Metal-12
   IPN_300:double = 9; // ViaCN
   IPN_301:double = 45; // Via0
   IPN_302:double = 180; // Via1
   IPN_303:double = 180; // Via2
   IPN_304:double = 180; // Via3
   IPN_305:double = 275; // Via4
   IPN_306:double = 275; // Via5
   IPN_307:double = 275; // Via6
   IPN_308:double = 275; // Via7
   IPN_309:double = 475; // Via8
   IPN_310:double = 475; // Via9
   IPN_311:double = 475; // Via10
   IPN_312:double = 475; // Via11
   IPN_313:double = 35; // Via12
   IPN_400:double = 9; // ViaCN
   IPN_401:double = 45; // Via0
   IPN_402:double = 180; // Via1
   IPN_403:double = 180; // Via2
   IPN_404:double = 180; // Via3
   IPN_405:double = 275; // Via4
   IPN_406:double = 275; // Via5
   IPN_407:double = 275; // Via6
   IPN_408:double = 275; // Via7
   IPN_409:double = 475; // Via8
   IPN_410:double = 475; // Via9
   IPN_411:double = 475; // Via10
   IPN_412:double = 475; // Via11
   IPN_413:double = 35; // Via12
   IPTB_00:double = 6; // Max ratio of Metal area to Total PMOS TG gate edge  (um^2 /um)
   IPTB_01:double = 3080; // Limit Ratio of Metal area (on the PMOS source) to TG N-discharge-transistor Ze  (um^2 /um)
   IPTD_100:double = 6000; // GCN+TCN (Polycon+Diffcon)
   IPTD_101:double = 7800; // Metal-0
   IPTD_102:double = 7800; // Metal-1
   IPTD_103:double = 7800; // Metal-2
   IPTD_104:double = 7800; // Metal-3
   IPTD_105:double = 7800; // Metal-4
   IPTD_106:double = 7800; // Metal-5
   IPTD_107:double = 7800; // Metal-6
   IPTD_108:double = 7800; // Metal-7
   IPTD_109:double = 7800; // Metal-8
   IPTD_110:double = 7800; // Metal-9
   IPTD_111:double = 7800; // Metal-10
   IPTD_112:double = 7800; // Metal-11
   IPTD_113:double = 7800; // TM1
   IPTD_114:double = 7800; // Metal-12
   IPTD_600:double = 3080; // Limit Ratio of Metal or GCN+TCN area to TG N-transistor Drain Ze (um^2 /um) no sub-tap
   IPTG_00:double = 3080; // Limit Ratio of Metal or GCN+TCN area to TG N-transistor gNAC Ze (um^2 /um), for TG-gNAC protection
   IPTG_100:double = 15000; // GCN+TCN (Polycon+Diffcon)
   IPTG_101:double = 19200; // Metal-0
   IPTG_102:double = 19200; // Metal-1
   IPTG_103:double = 19200; // Metal-2
   IPTG_104:double = 19200; // Metal-3
   IPTG_105:double = 19200; // Metal-4
   IPTG_106:double = 19200; // Metal-5
   IPTG_107:double = 19200; // Metal-6
   IPTG_108:double = 19200; // Metal-7
   IPTG_109:double = 19200; // Metal-8
   IPTG_110:double = 19200; // Metal-9
   IPTG_111:double = 19200; // Metal-10
   IPTG_112:double = 19200; // Metal-11
   IPTG_113:double = 19200; // TM1
   IPTG_114:double = 19200; // Metal-12
   IPTG_600:double = 1280; // GCN+TCN (Polycon+Diffcon)
   IPTG_601:double = 1280; // Metal-0
   IPTG_602:double = 1280; // Metal-1
   IPTG_603:double = 1280; // Metal-2
   IPTG_604:double = 1280; // Metal-3
   IPTG_605:double = 1280; // Metal-4
   IPTG_606:double = 1280; // Metal-5
   IPTG_607:double = 1280; // Metal-6
   IPTG_608:double = 1280; // Metal-7
   IPTG_609:double = 1280; // Metal-8
   IPTG_610:double = 1280; // Metal-9
   IPTG_611:double = 1280; // Metal-10
   IPTG_612:double = 1280; // Metal-11
   IPTG_613:double = 1280; // TM1
   IPTG_614:double = 1280; // Metal-12
   IPTG_700:double = 1500; // Limit Ratio of Metal or GCN+TCN area to UHV TG gNAC template Ze (um^2 /um), for TG-gNAC protection
   IPTN_100:double = 2; // GCN+TCN (Polycon+Diffcon)
   IPTN_101:double = 78; // Metal-0
   IPTN_102:double = 78; // Metal-1
   IPTN_103:double = 78; // Metal-2
   IPTN_104:double = 78; // Metal-3
   IPTN_105:double = 78; // Metal-4
   IPTN_106:double = 78; // Metal-5
   IPTN_107:double = 78; // Metal-6
   IPTN_108:double = 78; // Metal-7
   IPTN_109:double = 78; // Metal-8
   IPTN_110:double = 78; // Metal-9
   IPTN_111:double = 78; // Metal-10
   IPTN_112:double = 78; // Metal-11
   IPTN_113:double = 0; // TM1
   IPTN_114:double = 78; // Metal-12
   IPTN_200:double = 2; // GCN+TCN (Polycon+Diffcon)
   IPTN_201:double = 230; // Metal-0
   IPTN_202:double = 230; // Metal-1
   IPTN_203:double = 230; // Metal-2
   IPTN_204:double = 230; // Metal-3
   IPTN_205:double = 230; // Metal-4
   IPTN_206:double = 230; // Metal-5
   IPTN_207:double = 230; // Metal-6
   IPTN_208:double = 230; // Metal-7
   IPTN_209:double = 230; // Metal-8
   IPTN_210:double = 230; // Metal-9
   IPTN_211:double = 230; // Metal-10
   IPTN_212:double = 230; // Metal-11
   IPTN_213:double = 0; // TM1
   IPTN_214:double = 230; // Metal-12
   IPT_01:double = 50; // Max ratio of field poly area to active TG gate poly area  (um^2 / um^2)
   IPT_02:double = 2; // Max ratio of GCN area to TG n-gate area  (um^2 / um^2)
   IPT_03:double = 2; // Max ratio of GCN area to TG p-gate area  (um^2 / um^2)
   IP_01:double = 25; // Max ratio of field poly area to active gate poly area  (um^2 / um^2)
   IP_02:double = 42; // Max ratio of GCN area to n-gate area  (um^2 / um^2)
   IP_03:double = 42; // Max ratio of GCN area to p-gate area  (um^2 / um^2)
   J_01:double = 0.126; // N+ S/D block width (post generation)
   J_02:double = 0.126; // N+ S/D block space (post generation)
   J_03:double = 0.035; // N+ S/D block space to active n+ diff (OGD)
   J_04:double = 0.035; // N+ S/D block space to n+ well tap diff (OGD)
   J_05:double = 0.035; // N+ S/D block encl of active p+ diff (OGD)
   J_06:double = 0.035; // N+ S/D block encl of p+ substrate tap diff (OGD)
   J_07:double = 0; // n-well enclosure of N+ s/d block
   J_08:double = 0.0264; // Min generated nsd/ntp block area (in sq u. area)
   J_09:double = 0.0264; // Min generated nsd/ntp hole area (in sq u. area)
   J_10:double = 0; // n-well enclosure of N-tip block
   J_11:double = 0.021; // N-tip block space to active n-diffusion edge
   J_12:double = 0.021; // N-tip block encl of active p-diffusion edge
   J_13:double = 0.112; // Minimum synthesized N+ S/D block segment lengths, when both adjacent at a corner
   J_14:double = 0.107; // Minimum synthesized N+ S/D block convex corner encl of active p+ diff corner
   J_15:double = 0.107; // Minimum synthesized N+ S/D block concave corner space to active n+ diff corner
   J_16:double = 0.273; // Minimum pitch (width+space) on synthesized mask
   J_21:double = 0.126; // N-tip block width
   J_22:double = 0.126; // N-tip block space
   J_23:double = 0.021; // N+ S/D block space to active n+ diff (PGD)
   J_24:double = 0.378; // N-tip block pitch
   J_25:double = 0.021; // N+ S/D block encl of active p+ diff (PGD)
   J_41:double = 0.168; // N+ S/D segment lengths less than J_41 are subject to rules J_42/43 on the adjacent edges
   J_42:double = 0.042; // Forbidden adjacent edge length range min (>)
   J_43:double = 0.112; // Forbidden adjacent edge length range max (<)
   J_44:double = 0.042; // N+ S/D block space to n+ well tap diff (PGD)
   J_46:double = 0.042; // N+ S/D block encl of p+ substrate tap diff (PGD)
   J_81:double = 0.035; // Minimum synthesized N+ S/D block space after J_82 oversize (checked edge-to-edge only)
   J_82:double = 0.035; // Oversize value for the J_81 check
   K_01:double = 0.126; // P+ S/D block width
   K_02:double = 0.126; // P+ S/D block space
   K_03:double = 0.035; // P+ S/D block space to active p+ diff (OGD)
   K_04:double = 0.035; // P+ S/D block space to p+ sub tap diff (OGD)
   K_05:double = 0.035; // P+ S/D block encl of active n+ diff (OGD)
   K_06:double = 0.035; // P+ S/D block encl of n+ well tap diff (OGD)
   K_07:double = 0; // P+ S/D block space to n-well edge
   K_08:double = 0.0264; // Min generated psd/ptp block area (in sq u. area)
   K_09:double = 0.0264; // Min generated psd/ptp hole area (in sq u. area)
   K_10:double = 0; // P-tip block space to n-well edge
   K_11:double = 0.021; // P-tip block space to active p-diffusion edge
   K_12:double = 0.021; // P-tip block encl of active n-diffusion edge
   K_13:double = 0.112; // Minimum synthesized P+ S/D block segment lengths, when both adjacent at a corner
   K_14:double = 0.107; // Minimum synthesized P+ S/D block convex corner encl of active n+ diff corner
   K_15:double = 0.107; // Minimum synthesized P+ S/D block concave corner space to active p+ diff corner
   K_16:double = 0.273; // Minimum pitch (width+space) on synthesized mask
   K_21:double = 0.126; // P-tip block width
   K_22:double = 0.126; // P-tip block space
   K_23:double = 0.021; // P+ S/D block space to active p+ diff (PGD)
   K_24:double = 0.378; // P-tip block pitch
   K_25:double = 0.021; // P+ S/D block encl of active n+ diff (PGD)
   K_41:double = 0.168; // P+ S/D segment lengths less than K_41 are subject to rules K_42/43 on the adjacent edges
   K_42:double = 0.042; // Forbidden adjacent edge length range min (>)
   K_43:double = 0.112; // Forbidden adjacent edge length range max (<)
   K_44:double = 0.042; // P+ S/D block space to p+ sub tap diff (PGD)
   K_46:double = 0.042; // P+ S/D block encl of n+ well tap diff (PGD)
   K_81:double = 0.035; // Minimum synthesized P+ S/D opening space after K_82 oversize (checked edge-to-edge only)
   K_82:double = 0.035; // Oversize value for the K_81 check
   LDIP_101:double = 0.007; // Poly upsize for LDI_01/02
   LDIW_01:double = 245; // Window for LDI_01
   LDIW_01_X = LDIW_01; // Window for LDI_01 for x
   LDIW_01_Y = LDIW_01; // Window for LDI_01 for y
   LDIW_01_X_STEP = LDIW_01; // Window for LDI_01 for x-step
   LDIW_01_Y_STEP = LDIW_01; // Window for LDI_01 for y-step
   LDIW_02:double = 245; // Window for LDI_02
   LDIW_02_X = LDIW_02; // Window for LDI_02 for x
   LDIW_02_Y = LDIW_02; // Window for LDI_02 for y
   LDIW_02_X_STEP = LDIW_02; // Window for LDI_02 for x-step
   LDIW_02_Y_STEP = LDIW_02; // Window for LDI_02 for y-step
   LDIW_120:double = 364; // Window for LDI_120
   LDIW_120_X = LDIW_120; // Window for LDI_120 for x
   LDIW_120_Y = LDIW_120; // Window for LDI_120 for y
   LDIW_120_X_STEP = LDIW_120; // Window for LDI_120 for x-step
   LDIW_120_Y_STEP = LDIW_120; // Window for LDI_120 for y-step
   LDIW_220:double = 364; // Window for LDI_220
   LDIW_220_X = LDIW_220; // Window for LDI_220 for x
   LDIW_220_Y = LDIW_220; // Window for LDI_220 for y
   LDIW_220_X_STEP = LDIW_220; // Window for LDI_220 for x-step
   LDIW_220_Y_STEP = LDIW_220; // Window for LDI_220 for y-step
   LDIW_500:double = 70; // Window for LDI_500
   LDIW_500_X = LDIW_500; // Window for LDI_500 for x
   LDIW_500_Y = LDIW_500; // Window for LDI_500 for y
   LDIW_500_X_STEP = LDIW_500; // Window for LDI_500 for x-step
   LDIW_500_Y_STEP = LDIW_500; // Window for LDI_500 for y-step
   LDIW_501:double = 70; // Window for LDI_501
   LDIW_501_X = LDIW_501; // Window for LDI_501 for x
   LDIW_501_Y = LDIW_501; // Window for LDI_501 for y
   LDIW_501_X_STEP = LDIW_501; // Window for LDI_501 for x-step
   LDIW_501_Y_STEP = LDIW_501; // Window for LDI_501 for y-step
   LDIW_502:double = 70; // Window for LDI_502
   LDIW_502_X = LDIW_502; // Window for LDI_502 for x
   LDIW_502_Y = LDIW_502; // Window for LDI_502 for y
   LDIW_502_X_STEP = LDIW_502; // Window for LDI_502 for x-step
   LDIW_502_Y_STEP = LDIW_502; // Window for LDI_502 for y-step
   LDIW_503:double = 70; // Window for LDI_503
   LDIW_503_X = LDIW_503; // Window for LDI_503 for x
   LDIW_503_Y = LDIW_503; // Window for LDI_503 for y
   LDIW_503_X_STEP = LDIW_503; // Window for LDI_503 for x-step
   LDIW_503_Y_STEP = LDIW_503; // Window for LDI_503 for y-step
   LDIW_504:double = 70; // Window for LDI_504
   LDIW_504_X = LDIW_504; // Window for LDI_504 for x
   LDIW_504_Y = LDIW_504; // Window for LDI_504 for y
   LDIW_504_X_STEP = LDIW_504; // Window for LDI_504 for x-step
   LDIW_504_Y_STEP = LDIW_504; // Window for LDI_504 for y-step
   LDIW_505:double = 84; // Window for LDI_505
   LDIW_505_X = LDIW_505; // Window for LDI_505 for x
   LDIW_505_Y = LDIW_505; // Window for LDI_505 for y
   LDIW_505_X_STEP = LDIW_505; // Window for LDI_505 for x-step
   LDIW_505_Y_STEP = LDIW_505; // Window for LDI_505 for y-step
   LDIW_506:double = 84; // Window for LDI_506
   LDIW_506_X = LDIW_506; // Window for LDI_506 for x
   LDIW_506_Y = LDIW_506; // Window for LDI_506 for y
   LDIW_506_X_STEP = LDIW_506; // Window for LDI_506 for x-step
   LDIW_506_Y_STEP = LDIW_506; // Window for LDI_506 for y-step
   LDI_01:double = 8; // Max allowed INTERMEDIATE Exposed P-diffusion density (%), within a 245um x 245um window size
   LDI_02:double = 9; // Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size
   LDI_120:double = 60; // Min required intermediate TM1 density (%), within a 364um x 364um window size
   LDI_220:double = 75; // Max allowed intermediate TM1 density (%), within a 364um x 364um window size
   LDI_500:double = -10; // Min Intermediate Metal 0 density (%) relative to actual global Metal 0 density, within a 70um x 70um window size. 
   LDI_501:double = -10; // Min Intermediate Metal 1 density (%) relative to actual global Metal 1 density, within a 70um x 70um window size. 
   LDI_502:double = -10; // Min Intermediate Metal 2 density (%) relative to actual global Metal 2 density, within a 70um x 70um window size. 
   LDI_503:double = -10; // Min Intermediate Metal 3 density (%) relative to actual global Metal 3 density, within a 70um x 70um window size. 
   LDI_504:double = -10; // Min Intermediate Metal 4 density (%) relative to actual global Metal 4 density, within a 70um x 70um window size. 
   LDI_505:double = -10; // Min Intermediate Metal 5 density (%) relative to actual global Metal 5 density, within a 84um x 84um window size. 
   LDI_506:double = -10; // Min Intermediate Metal 6 density (%) relative to actual global Metal 6 density, within a 84um x 84um window size. 
   LDP_101:double = 0.007; // Poly upsize for LD_131/132/231/232
   LDP_102:double = 0.005; // Poly upsize for LD_131/132/231/232 in HDDP/HPDP/SDP region
   LDT_101:double = 0; // TCN upsize for LDB_135/136/235/236
   LDW_100:double = 25; // Window for LD_100
   LDW_100_X = LDW_100; // Window for LD_100 for x
   LDW_100_Y = LDW_100; // Window for LD_100 for y
   LDW_100_X_STEP = LDW_100; // Window for LD_100 for x-step
   LDW_100_Y_STEP = LDW_100; // Window for LD_100 for y-step
   LDW_101:double = 25; // Window for LD_101
   LDW_101_X = LDW_101; // Window for LD_101 for x
   LDW_101_Y = LDW_101; // Window for LD_101 for y
   LDW_101_X_STEP = LDW_101; // Window for LD_101 for x-step
   LDW_101_Y_STEP = LDW_101; // Window for LD_101 for y-step
   LDW_102:double = 25; // Window for LD_102
   LDW_102_X = LDW_102; // Window for LD_102 for x
   LDW_102_Y = LDW_102; // Window for LD_102 for y
   LDW_102_X_STEP = LDW_102; // Window for LD_102 for x-step
   LDW_102_Y_STEP = LDW_102; // Window for LD_102 for y-step
   LDW_103:double = 25; // Window for LD_103
   LDW_103_X = LDW_103; // Window for LD_103 for x
   LDW_103_Y = LDW_103; // Window for LD_103 for y
   LDW_103_X_STEP = LDW_103; // Window for LD_103 for x-step
   LDW_103_Y_STEP = LDW_103; // Window for LD_103 for y-step
   LDW_104:double = 25; // Window for LD_104
   LDW_104_X = LDW_104; // Window for LD_104 for x
   LDW_104_Y = LDW_104; // Window for LD_104 for y
   LDW_104_X_STEP = LDW_104; // Window for LD_104 for x-step
   LDW_104_Y_STEP = LDW_104; // Window for LD_104 for y-step
   LDW_105:double = 37; // Window for LD_105
   LDW_105_X = LDW_105; // Window for LD_105 for x
   LDW_105_Y = LDW_105; // Window for LD_105 for y
   LDW_105_X_STEP = LDW_105; // Window for LD_105 for x-step
   LDW_105_Y_STEP = LDW_105; // Window for LD_105 for y-step
   LDW_106:double = 37; // Window for LD_106
   LDW_106_X = LDW_106; // Window for LD_106 for x
   LDW_106_Y = LDW_106; // Window for LD_106 for y
   LDW_106_X_STEP = LDW_106; // Window for LD_106 for x-step
   LDW_106_Y_STEP = LDW_106; // Window for LD_106 for y-step
   LDW_107:double = 37; // Window for LD_107
   LDW_107_X = LDW_107; // Window for LD_107 for x
   LDW_107_Y = LDW_107; // Window for LD_107 for y
   LDW_107_X_STEP = LDW_107; // Window for LD_107 for x-step
   LDW_107_Y_STEP = LDW_107; // Window for LD_107 for y-step
   LDW_108:double = 37; // Window for LD_108
   LDW_108_X = LDW_108; // Window for LD_108 for x
   LDW_108_Y = LDW_108; // Window for LD_108 for y
   LDW_108_X_STEP = LDW_108; // Window for LD_108 for x-step
   LDW_108_Y_STEP = LDW_108; // Window for LD_108 for y-step
   LDW_109:double = 37; // Window for LD_109
   LDW_109_X = LDW_109; // Window for LD_109 for x
   LDW_109_Y = LDW_109; // Window for LD_109 for y
   LDW_109_X_STEP = LDW_109; // Window for LD_109 for x-step
   LDW_109_Y_STEP = LDW_109; // Window for LD_109 for y-step
   LDW_110:double = 37; // Window for LD_110
   LDW_110_X = LDW_110; // Window for LD_110 for x
   LDW_110_Y = LDW_110; // Window for LD_110 for y
   LDW_110_X_STEP = LDW_110; // Window for LD_110 for x-step
   LDW_110_Y_STEP = LDW_110; // Window for LD_110 for y-step
   LDW_111:double = 37; // Window for LD_111
   LDW_111_X = LDW_111; // Window for LD_111 for x
   LDW_111_Y = LDW_111; // Window for LD_111 for y
   LDW_111_X_STEP = LDW_111; // Window for LD_111 for x-step
   LDW_111_Y_STEP = LDW_111; // Window for LD_111 for y-step
   LDW_112:double = 25; // Window for LD_112
   LDW_112_X = LDW_112; // Window for LD_112 for x
   LDW_112_Y = LDW_112; // Window for LD_112 for y
   LDW_112_X_STEP = LDW_112; // Window for LD_112 for x-step
   LDW_112_Y_STEP = LDW_112; // Window for LD_112 for y-step
   LDW_120:double = 65; // Window for LD_120
   LDW_120_X = LDW_120; // Window for LD_120 for x
   LDW_120_Y = LDW_120; // Window for LD_120 for y
   LDW_120_X_STEP = LDW_120; // Window for LD_120 for x-step
   LDW_120_Y_STEP = LDW_120; // Window for LD_120 for y-step
   LDW_121:double = 350; // Window for LD_121
   LDW_121_X = LDW_121; // Window for LD_121 for x
   LDW_121_Y = LDW_121; // Window for LD_121 for y
   LDW_121_X_STEP = LDW_121; // Window for LD_121 for x-step
   LDW_121_Y_STEP = LDW_121; // Window for LD_121 for y-step
   LDW_122:double = 350; // Window for LD_122
   LDW_122_X = LDW_122; // Window for LD_122 for x
   LDW_122_Y = LDW_122; // Window for LD_122 for y
   LDW_122_X_STEP = LDW_122; // Window for LD_122 for x-step
   LDW_122_Y_STEP = LDW_122; // Window for LD_122 for y-step
   LDW_123:double = 350; // Window for LD_123
   LDW_123_X = LDW_123; // Window for LD_123 for x
   LDW_123_Y = LDW_123; // Window for LD_123 for y
   LDW_123_X_STEP = LDW_123; // Window for LD_123 for x-step
   LDW_123_Y_STEP = LDW_123; // Window for LD_123 for y-step
   LDW_131:double = 17.5; // Window for LD_131
   LDW_131_X = LDW_131; // Window for LD_131 for x
   LDW_131_Y = LDW_131; // Window for LD_131 for y
   LDW_131_X_STEP = LDW_131; // Window for LD_131 for x-step
   LDW_131_Y_STEP = LDW_131; // Window for LD_131 for y-step
   LDW_132:double = 17.5; // Window for LD_132
   LDW_132_X = LDW_132; // Window for LD_132 for x
   LDW_132_Y = LDW_132; // Window for LD_132 for y
   LDW_132_X_STEP = LDW_132; // Window for LD_132 for x-step
   LDW_132_Y_STEP = LDW_132; // Window for LD_132 for y-step
   LDW_133:double = 24.5; // Window for LD_133
   LDW_133_X = LDW_133; // Window for LD_133 for x
   LDW_133_Y = LDW_133; // Window for LD_133 for y
   LDW_133_X_STEP = LDW_133; // Window for LD_133 for x-step
   LDW_133_Y_STEP = LDW_133; // Window for LD_133 for y-step
   LDW_134:double = 2.1; // Window for LD_134
   LDW_134_X = LDW_134; // Window for LD_134 for x
   LDW_134_Y = LDW_134; // Window for LD_134 for y
   LDW_134_X_STEP = LDW_134; // Window for LD_134 for x-step
   LDW_134_Y_STEP = LDW_134; // Window for LD_134 for y-step
   LDW_135:double = 1.96; // Window for LD_135
   LDW_135_X = LDW_135; // Window for LD_135 for x
   LDW_135_Y = LDW_135; // Window for LD_135 for y
   LDW_135_X_STEP = LDW_135; // Window for LD_135 for x-step
   LDW_135_Y_STEP = LDW_135; // Window for LD_135 for y-step
   LDW_136:double = 1.96; // Window for LD_136
   LDW_136_X = LDW_136; // Window for LD_136 for x
   LDW_136_Y = LDW_136; // Window for LD_136 for y
   LDW_136_X_STEP = LDW_136; // Window for LD_136 for x-step
   LDW_136_Y_STEP = LDW_136; // Window for LD_136 for y-step
   LDW_200:double = 9; // Window for LD_200
   LDW_200_X = LDW_200; // Window for LD_200 for x
   LDW_200_Y = LDW_200; // Window for LD_200 for y
   LDW_200_X_STEP = LDW_200; // Window for LD_200 for x-step
   LDW_200_Y_STEP = LDW_200; // Window for LD_200 for y-step
   LDW_201:double = 9; // Window for LD_201
   LDW_201_X = LDW_201; // Window for LD_201 for x
   LDW_201_Y = LDW_201; // Window for LD_201 for y
   LDW_201_X_STEP = LDW_201; // Window for LD_201 for x-step
   LDW_201_Y_STEP = LDW_201; // Window for LD_201 for y-step
   LDW_202:double = 9; // Window for LD_202
   LDW_202_X = LDW_202; // Window for LD_202 for x
   LDW_202_Y = LDW_202; // Window for LD_202 for y
   LDW_202_X_STEP = LDW_202; // Window for LD_202 for x-step
   LDW_202_Y_STEP = LDW_202; // Window for LD_202 for y-step
   LDW_203:double = 9; // Window for LD_203
   LDW_203_X = LDW_203; // Window for LD_203 for x
   LDW_203_Y = LDW_203; // Window for LD_203 for y
   LDW_203_X_STEP = LDW_203; // Window for LD_203 for x-step
   LDW_203_Y_STEP = LDW_203; // Window for LD_203 for y-step
   LDW_204:double = 9; // Window for LD_204
   LDW_204_X = LDW_204; // Window for LD_204 for x
   LDW_204_Y = LDW_204; // Window for LD_204 for y
   LDW_204_X_STEP = LDW_204; // Window for LD_204 for x-step
   LDW_204_Y_STEP = LDW_204; // Window for LD_204 for y-step
   LDW_205:double = 12.6; // Window for LD_205
   LDW_205_X = LDW_205; // Window for LD_205 for x
   LDW_205_Y = LDW_205; // Window for LD_205 for y
   LDW_205_X_STEP = LDW_205; // Window for LD_205 for x-step
   LDW_205_Y_STEP = LDW_205; // Window for LD_205 for y-step
   LDW_206:double = 12.6; // Window for LD_206
   LDW_206_X = LDW_206; // Window for LD_206 for x
   LDW_206_Y = LDW_206; // Window for LD_206 for y
   LDW_206_X_STEP = LDW_206; // Window for LD_206 for x-step
   LDW_206_Y_STEP = LDW_206; // Window for LD_206 for y-step
   LDW_207:double = 12.6; // Window for LD_207
   LDW_207_X = LDW_207; // Window for LD_207 for x
   LDW_207_Y = LDW_207; // Window for LD_207 for y
   LDW_207_X_STEP = LDW_207; // Window for LD_207 for x-step
   LDW_207_Y_STEP = LDW_207; // Window for LD_207 for y-step
   LDW_208:double = 12.6; // Window for LD_208
   LDW_208_X = LDW_208; // Window for LD_208 for x
   LDW_208_Y = LDW_208; // Window for LD_208 for y
   LDW_208_X_STEP = LDW_208; // Window for LD_208 for x-step
   LDW_208_Y_STEP = LDW_208; // Window for LD_208 for y-step
   LDW_209:double = 12.6; // Window for LD_209
   LDW_209_X = LDW_209; // Window for LD_209 for x
   LDW_209_Y = LDW_209; // Window for LD_209 for y
   LDW_209_X_STEP = LDW_209; // Window for LD_209 for x-step
   LDW_209_Y_STEP = LDW_209; // Window for LD_209 for y-step
   LDW_210:double = 12.6; // Window for LD_210
   LDW_210_X = LDW_210; // Window for LD_210 for x
   LDW_210_Y = LDW_210; // Window for LD_210 for y
   LDW_210_X_STEP = LDW_210; // Window for LD_210 for x-step
   LDW_210_Y_STEP = LDW_210; // Window for LD_210 for y-step
   LDW_211:double = 12.6; // Window for LD_211
   LDW_211_X = LDW_211; // Window for LD_211 for x
   LDW_211_Y = LDW_211; // Window for LD_211 for y
   LDW_211_X_STEP = LDW_211; // Window for LD_211 for x-step
   LDW_211_Y_STEP = LDW_211; // Window for LD_211 for y-step
   LDW_212:double = 9; // Window for LD_212
   LDW_212_X = LDW_212; // Window for LD_212 for x
   LDW_212_Y = LDW_212; // Window for LD_212 for y
   LDW_212_X_STEP = LDW_212; // Window for LD_212 for x-step
   LDW_212_Y_STEP = LDW_212; // Window for LD_212 for y-step
   LDW_220:double = 65; // Window for LD_220
   LDW_220_X = LDW_220; // Window for LD_220 for x
   LDW_220_Y = LDW_220; // Window for LD_220 for y
   LDW_220_X_STEP = LDW_220; // Window for LD_220 for x-step
   LDW_220_Y_STEP = LDW_220; // Window for LD_220 for y-step
   LDW_231:double = 17.5; // Window for LD_231
   LDW_231_X = LDW_231; // Window for LD_231 for x
   LDW_231_Y = LDW_231; // Window for LD_231 for y
   LDW_231_X_STEP = LDW_231; // Window for LD_231 for x-step
   LDW_231_Y_STEP = LDW_231; // Window for LD_231 for y-step
   LDW_232:double = 17.5; // Window for LD_232
   LDW_232_X = LDW_232; // Window for LD_232 for x
   LDW_232_Y = LDW_232; // Window for LD_232 for y
   LDW_232_X_STEP = LDW_232; // Window for LD_232 for x-step
   LDW_232_Y_STEP = LDW_232; // Window for LD_232 for y-step
   LDW_233:double = 24.5; // Window for LD_233
   LDW_233_X = LDW_233; // Window for LD_233 for x
   LDW_233_Y = LDW_233; // Window for LD_233 for y
   LDW_233_X_STEP = LDW_233; // Window for LD_233 for x-step
   LDW_233_Y_STEP = LDW_233; // Window for LD_233 for y-step
   LDW_234:double = 2.1; // Window for LD_234
   LDW_234_X = LDW_234; // Window for LD_234 for x
   LDW_234_Y = LDW_234; // Window for LD_234 for y
   LDW_234_X_STEP = LDW_234; // Window for LD_234 for x-step
   LDW_234_Y_STEP = LDW_234; // Window for LD_234 for y-step
   LDW_235:double = 1.96; // Window for LD_235
   LDW_235_X = LDW_235; // Window for LD_235 for x
   LDW_235_Y = LDW_235; // Window for LD_235 for y
   LDW_235_X_STEP = LDW_235; // Window for LD_235 for x-step
   LDW_235_Y_STEP = LDW_235; // Window for LD_235 for y-step
   LDW_236:double = 1.96; // Window for LD_236
   LDW_236_X = LDW_236; // Window for LD_236 for x
   LDW_236_Y = LDW_236; // Window for LD_236 for y
   LDW_236_X_STEP = LDW_236; // Window for LD_236 for x-step
   LDW_236_Y_STEP = LDW_236; // Window for LD_236 for y-step
   LDW_500:double = 3.9; // Window for LD_500
   LDW_500_X = LDW_500; // Window for LD_500 for x
   LDW_500_Y = LDW_500; // Window for LD_500 for y
   LDW_500_X_STEP = LDW_500; // Window for LD_500 for x-step
   LDW_500_Y_STEP = LDW_500; // Window for LD_500 for y-step
   LDW_501:double = 3.9; // Window for LD_501
   LDW_501_X = LDW_501; // Window for LD_501 for x
   LDW_501_Y = LDW_501; // Window for LD_501 for y
   LDW_501_X_STEP = LDW_501; // Window for LD_501 for x-step
   LDW_501_Y_STEP = LDW_501; // Window for LD_501 for y-step
   LDW_502:double = 3.9; // Window for LD_502
   LDW_502_X = LDW_502; // Window for LD_502 for x
   LDW_502_Y = LDW_502; // Window for LD_502 for y
   LDW_502_X_STEP = LDW_502; // Window for LD_502 for x-step
   LDW_502_Y_STEP = LDW_502; // Window for LD_502 for y-step
   LDW_503:double = 3.9; // Window for LD_503
   LDW_503_X = LDW_503; // Window for LD_503 for x
   LDW_503_Y = LDW_503; // Window for LD_503 for y
   LDW_503_X_STEP = LDW_503; // Window for LD_503 for x-step
   LDW_503_Y_STEP = LDW_503; // Window for LD_503 for y-step
   LDW_504:double = 3.9; // Window for LD_504
   LDW_504_X = LDW_504; // Window for LD_504 for x
   LDW_504_Y = LDW_504; // Window for LD_504 for y
   LDW_504_X_STEP = LDW_504; // Window for LD_504 for x-step
   LDW_504_Y_STEP = LDW_504; // Window for LD_504 for y-step
   LDW_505:double = 3.9; // Window for LD_505
   LDW_505_X = LDW_505; // Window for LD_505 for x
   LDW_505_Y = LDW_505; // Window for LD_505 for y
   LDW_505_X_STEP = LDW_505; // Window for LD_505 for x-step
   LDW_505_Y_STEP = LDW_505; // Window for LD_505 for y-step
   LDW_506:double = 3.9; // Window for LD_506
   LDW_506_X = LDW_506; // Window for LD_506 for x
   LDW_506_Y = LDW_506; // Window for LD_506 for y
   LDW_506_X_STEP = LDW_506; // Window for LD_506 for x-step
   LDW_506_Y_STEP = LDW_506; // Window for LD_506 for y-step
   LDW_507:double = 6.7; // Window for LD_507
   LDW_507_X = LDW_507; // Window for LD_507 for x
   LDW_507_Y = LDW_507; // Window for LD_507 for y
   LDW_507_X_STEP = LDW_507; // Window for LD_507 for x-step
   LDW_507_Y_STEP = LDW_507; // Window for LD_507 for y-step
   LDW_508:double = 10; // Window for LD_508
   LDW_508_X = LDW_508; // Window for LD_508 for x
   LDW_508_Y = LDW_508; // Window for LD_508 for y
   LDW_508_X_STEP = LDW_508; // Window for LD_508 for x-step
   LDW_508_Y_STEP = LDW_508; // Window for LD_508 for y-step
   LDW_509:double = 11; // Window for LD_509
   LDW_509_X = LDW_509; // Window for LD_509 for x
   LDW_509_Y = LDW_509; // Window for LD_509 for y
   LDW_509_X_STEP = LDW_509; // Window for LD_509 for x-step
   LDW_509_Y_STEP = LDW_509; // Window for LD_509 for y-step
   LDW_510:double = 11; // Window for LD_510
   LDW_510_X = LDW_510; // Window for LD_510 for x
   LDW_510_Y = LDW_510; // Window for LD_510 for y
   LDW_510_X_STEP = LDW_510; // Window for LD_510 for x-step
   LDW_510_Y_STEP = LDW_510; // Window for LD_510 for y-step
   LDW_511:double = 11; // Window for LD_511
   LDW_511_X = LDW_511; // Window for LD_511 for x
   LDW_511_Y = LDW_511; // Window for LD_511 for y
   LDW_511_X_STEP = LDW_511; // Window for LD_511 for x-step
   LDW_511_Y_STEP = LDW_511; // Window for LD_511 for y-step
   LDW_512:double = 53; // Window for LD_512
   LDW_512_X = LDW_512; // Window for LD_512 for x
   LDW_512_Y = LDW_512; // Window for LD_512 for y
   LDW_512_X_STEP = LDW_512; // Window for LD_512 for x-step
   LDW_512_Y_STEP = LDW_512; // Window for LD_512 for y-step
   LDW_520:double = 3.9; // Window for LD_520
   LDW_520_X = LDW_520; // Window for LD_520 for x
   LDW_520_Y = LDW_520; // Window for LD_520 for y
   LDW_520_X_STEP = LDW_520; // Window for LD_520 for x-step
   LDW_520_Y_STEP = LDW_520; // Window for LD_520 for y-step
   LDW_600:double = 3.9; // Window for LD_600
   LDW_600_X = LDW_600; // Window for LD_600 for x
   LDW_600_Y = LDW_600; // Window for LD_600 for y
   LDW_600_X_STEP = LDW_600; // Window for LD_600 for x-step
   LDW_600_Y_STEP = LDW_600; // Window for LD_600 for y-step
   LDW_601:double = 3.9; // Window for LD_601
   LDW_601_X = LDW_601; // Window for LD_601 for x
   LDW_601_Y = LDW_601; // Window for LD_601 for y
   LDW_601_X_STEP = LDW_601; // Window for LD_601 for x-step
   LDW_601_Y_STEP = LDW_601; // Window for LD_601 for y-step
   LDW_602:double = 3.9; // Window for LD_602
   LDW_602_X = LDW_602; // Window for LD_602 for x
   LDW_602_Y = LDW_602; // Window for LD_602 for y
   LDW_602_X_STEP = LDW_602; // Window for LD_602 for x-step
   LDW_602_Y_STEP = LDW_602; // Window for LD_602 for y-step
   LDW_603:double = 3.9; // Window for LD_603
   LDW_603_X = LDW_603; // Window for LD_603 for x
   LDW_603_Y = LDW_603; // Window for LD_603 for y
   LDW_603_X_STEP = LDW_603; // Window for LD_603 for x-step
   LDW_603_Y_STEP = LDW_603; // Window for LD_603 for y-step
   LDW_604:double = 3.9; // Window for LD_604
   LDW_604_X = LDW_604; // Window for LD_604 for x
   LDW_604_Y = LDW_604; // Window for LD_604 for y
   LDW_604_X_STEP = LDW_604; // Window for LD_604 for x-step
   LDW_604_Y_STEP = LDW_604; // Window for LD_604 for y-step
   LDW_605:double = 3.9; // Window for LD_605
   LDW_605_X = LDW_605; // Window for LD_605 for x
   LDW_605_Y = LDW_605; // Window for LD_605 for y
   LDW_605_X_STEP = LDW_605; // Window for LD_605 for x-step
   LDW_605_Y_STEP = LDW_605; // Window for LD_605 for y-step
   LDW_606:double = 3.9; // Window for LD_606
   LDW_606_X = LDW_606; // Window for LD_606 for x
   LDW_606_Y = LDW_606; // Window for LD_606 for y
   LDW_606_X_STEP = LDW_606; // Window for LD_606 for x-step
   LDW_606_Y_STEP = LDW_606; // Window for LD_606 for y-step
   LDW_607:double = 5.3; // Window for LD_607
   LDW_607_X = LDW_607; // Window for LD_607 for x
   LDW_607_Y = LDW_607; // Window for LD_607 for y
   LDW_607_X_STEP = LDW_607; // Window for LD_607 for x-step
   LDW_607_Y_STEP = LDW_607; // Window for LD_607 for y-step
   LDW_609:double = 53; // Window for LD_609
   LDW_609_X = LDW_609; // Window for LD_609 for x
   LDW_609_Y = LDW_609; // Window for LD_609 for y
   LDW_609_X_STEP = LDW_609; // Window for LD_609 for x-step
   LDW_609_Y_STEP = LDW_609; // Window for LD_609 for y-step
   LDW_611:double = 53; // Window for LD_611
   LDW_611_X = LDW_611; // Window for LD_611 for x
   LDW_611_Y = LDW_611; // Window for LD_611 for y
   LDW_611_X_STEP = LDW_611; // Window for LD_611 for x-step
   LDW_611_Y_STEP = LDW_611; // Window for LD_611 for y-step
   LDW_612:double = 53; // Window for LD_612
   LDW_612_X = LDW_612; // Window for LD_612 for x
   LDW_612_Y = LDW_612; // Window for LD_612 for y
   LDW_612_X_STEP = LDW_612; // Window for LD_612 for x-step
   LDW_612_Y_STEP = LDW_612; // Window for LD_612 for y-step
   LDW_620:double = 3.9; // Window for LD_620
   LDW_620_X = LDW_620; // Window for LD_620 for x
   LDW_620_Y = LDW_620; // Window for LD_620 for y
   LDW_620_X_STEP = LDW_620; // Window for LD_620 for x-step
   LDW_620_Y_STEP = LDW_620; // Window for LD_620 for y-step
   LDW_81:double = 130; // Window for LD_81
   LDW_81_X = LDW_81; // Window for LD_81 for x
   LDW_81_Y = LDW_81; // Window for LD_81 for y
   LDW_81_X_STEP = LDW_81; // Window for LD_81 for x-step
   LDW_81_Y_STEP = LDW_81; // Window for LD_81 for y-step
   LDW_82:double = 130; // Window for LD_82
   LDW_82_X = LDW_82; // Window for LD_82 for x
   LDW_82_Y = LDW_82; // Window for LD_82 for y
   LDW_82_X_STEP = LDW_82; // Window for LD_82 for x-step
   LDW_82_Y_STEP = LDW_82; // Window for LD_82 for y-step
   LD_100:double = 40; // Min required local Metal 0 density (%), within a 25um x 25um window size
   LD_101:double = 23.8; // Min required local Metal 1 density (%), within a 25um x 25um window size
   LD_102:double = 40; // Min required local Metal 2 density (%), within a 25um x 25um window size
   LD_103:double = 40; // Min required local Metal 3 density (%), within a 25um x 25um window size
   LD_104:double = 40; // Min required local Metal 4 density (%), within a 25um x 25um window size
   LD_105:double = 23.8; // Min required local Metal 5 density (%), within a 37um x 37um window size
   LD_106:double = 23.8; // Min required local Metal 6 density (%), within a 37um x 37um window size
   LD_107:double = 23.8; // Min required local Metal 7 density (%), within a 37um x 37um window size
   LD_108:double = 35; // Min required local Metal 8 density (%), within a 37um x 37um window size
   LD_109:double = 35; // Min required local Metal 9 density (%), within a 37um x 37um window size
   LD_110:double = 35; // Min required local Metal 10 density (%), within a 37um x 37um window size
   LD_111:double = 35; // Min required local Metal 11 density (%), within a 37um x 37um window size
   LD_112:double = 40; // Min required local Metal 12 density (%), within a 25um x 25um window size
   LD_120:double = 46; // Min required local TM1 density (%), within a 65um x 65um window size
   LD_121:double = 55; // Min required local CE1 density (%), within a 350um x 350um window size
   LD_122:double = 55; // Min required local CE2 density (%), within a 350um x 350um window size
   LD_123:double = 55; // Min required local CE3 density (%), within a 350um x 350um window size
   LD_131:double = 4; // Min required local Exposed P-diffusion density (%), 17.5um x 17.5um window size
   LD_132:double = 4; // Min required local Exposed N-diffusion density (%), 17.5um x 17.5um window size
   LD_133:double = 25; // Min required local N + P diffusion density (%), 24.5um x 24.5um window size
   LD_134:double = 25; // Min required local Poly density (%), within a 2.1um x 2.1um window size
   LD_135:double = 17; // Min required local TCN and GCN combined density (%), 1.96um x 1.96um window 
   LD_136:double = 12; // Min required local TCN density (%), 1.96um x 1.96um window 
   LD_200:double = 70; // Max allowed local Metal 0 density (%), within a 9um x 9um window size
   LD_201:double = 66.8; // Max allowed local Metal 1 density (%), within a 9um x 9um window size
   LD_202:double = 78; // Max allowed local Metal 2 density (%), within a 9um x 9um window size
   LD_203:double = 78; // Max allowed local Metal 3 density (%), within a 9um x 9um window size
   LD_204:double = 78; // Max allowed local Metal 4 density (%), within a 9um x 9um window size
   LD_205:double = 72.5; // Max allowed local Metal 5 density (%), within a 12.6um x 12.6um window size
   LD_206:double = 72.5; // Max allowed local Metal 6 density (%), within a 12.6um x 12.6um window size
   LD_207:double = 66.8; // Max allowed local Metal 7 density (%), within a 12.6um x 12.6um window size
   LD_208:double = 70; // Max allowed local Metal 8 density (%), within a 12.6um x 12.6um window size
   LD_209:double = 70; // Max allowed local Metal 9 density (%), within a 12.6um x 12.6um window size
   LD_210:double = 70; // Max allowed local Metal 10 density (%), within a 12.6um x 12.6um window size
   LD_211:double = 70; // Max allowed local Metal 11 density (%), within a 12.6um x 12.6um window size
   LD_212:double = 90; // Max allowed local Metal 12 density (%), within a 9um x 9um window size
   LD_220:double = 91; // Max allowed local TM1 density (%), within a 65um x 65um window size
   LD_231:double = 22; // Max allowed local Exposed P-diffusion density (%), 17.5um x 17.5um window size
   LD_232:double = 22; // Max allowed local Exposed N-diffusion density (%), 17.5um x 17.5um window size
   LD_233:double = 48; // Max allowed local N + P diffusion density (%), 24.5um x 24.5um window size
   LD_234:double = 39; // Max allowed local poly density (%), within a 2.1um x 2.1um window size
   LD_235:double = 37; // Max allowed local TCN and GCN combined density (%), 1.96um x 1.96um window 
   LD_236:double = 31.5; // Max allowed local TCN density (%), 1.96um x 1.96um window 
   LD_331:double = 1.5; // Min required local Exposed P-diffusion density in TG or TGULV region (%), 17.5um x 17.5um window size
   LD_332:double = 1.5; // Min required local Exposed N-diffusion density in TG or TGULV region (%), 17.5um x 17.5um window size
   LD_334:double = 50; // Max allowed local poly density in TG or TGULV pitch region (%), within a 2.1um x 2.1um window size
   LD_336:double = 5; // Min required local TCN density in TG or TGULV region (%), 1.96um x 1.96um window 
   LD_434:double = 48; // Max allowed local poly density in ULP pitch region (%), within a 2.1um x 2.1um window size
   LD_435:double = 16; // Min required local TCN and GCN combined density in ULP region (%), 1.96um x 1.96um window 
   LD_436:double = 9.9; // Min required local TCN density in ULP region (%), 1.96um x 1.96um window 
   LD_500:double = 0.2; // Min required local Via0 density (%), within a 3.9um x 3.9um window size
   LD_501:double = 0.2; // Min required local Via1 density (%), within a 3.9um x 3.9um window size
   LD_502:double = 0.2; // Min required local Via2 density (%), within a 3.9um x 3.9um window size
   LD_503:double = 0.2; // Min required local Via3 density (%), within a 3.9um x 3.9um window size
   LD_504:double = 0.2; // Min required local Via4 density (%), within a 3.9um x 3.9um window size
   LD_505:double = 0.2; // Min required local Via5 density (%), within a 3.9um x 3.9um window size
   LD_506:double = 0.2; // Min required local Via6 density (%), within a 3.9um x 3.9um window size
   LD_507:double = 0.3; // Min required local Via7 density (%), within a 6.7um x 6.7um window size
   LD_508:double = 0.3; // Min required local Via8 density (%), within a 10um x 10um window size
   LD_509:double = 0.3; // Min required local Via9 density (%), within a 11um x 11um window size
   LD_510:double = 0.3; // Min required local Via10 density (%), within a 11um x 11um window size
   LD_511:double = 0.3; // Min required local Via11 density (%), within a 11um x 11um window size
   LD_512:double = 0.5; // Min required local Via12 density (%), within a 53um x 53um window size
   LD_520:double = 0.2; // Min required local VCN density (%), within a 3.9um x 3.9um window size
   LD_535:double = 15; // Min required local TCN and GCN combined density in TG and TGULV region (%), 1.96um x 1.96um window 
   LD_600:double = 15; // Max required local Via0 density (%), within a 3.9um x 3.9um window size
   LD_601:double = 15; // Max required local Via1 density (%), within a 3.9um x 3.9um window size
   LD_602:double = 15; // Max required local Via2 density (%), within a 3.9um x 3.9um window size
   LD_603:double = 15; // Max required local Via3 density (%), within a 3.9um x 3.9um window size
   LD_604:double = 10; // Max required local Via4 density (%), within a 3.9um x 3.9um window size
   LD_605:double = 10; // Max required local Via5 density (%), within a 3.9um x 3.9um window size
   LD_606:double = 10; // Max required local Via6 density (%), within a 3.9um x 3.9um window size
   LD_607:double = 10; // Max required local Via7 density (%), within a 5.3um x 5.3um window size
   LD_609:double = 12; // Max required local Via9 density (%), within a 53um x 53um window size
   LD_611:double = 12; // Max required local Via11 density (%), within a 53um x 53um window size
   LD_612:double = 12; // Max required local Via12 density (%), within a 53um x 53um window size
   LD_620:double = 15.2; // Max required local VCN density (%), within a 3.9um x 3.9um window size
   LD_634:double = 49; // Max allowed local poly density in TRDTOULP region (%), within a 2.1umx2.1um window size
   LD_81:double = 30; // Min required local RDL density (%), 130um x 130um window size
   LD_82:double = 90; // Max allowed local RDL density (%), 130um x 130um window size
   LMI_01:double = 14.142; // LMI width, only allowed value
   LMI_02:double = 40; // LMI-to-LMI separation orthogonal to TSV spine direction (center-to-center), only allowed value in std array, OGD
   LMI_03:double = 40; // LMI-to-LMI separation parallel to TSV spine direction (center-to-center), only allowed value in std array, PGD
   LMI_04:double = 120; // Separation of LMI arrays (center to center), orthogonal to TSV spine
   LMI_05:double = 1000; // Separation of LMI arrays (center to center), parallel to TSV spine
   LMI_06:double = 0.707; // RDL (217;0), RDLPAD (217;40) enclosure of LMI (all sides), fixed
   LMI_11:double = 6; // LMI rows in a single array, only allowed value
   LMI_12:double = 73; // LMI columns in a single array, only allowed value
   LMI_13:double = 850; // LMI array edge distance to active die edge (EOA) (parallel to spine)
   LMI_40:double = 920; // Maximum PGD offset between any LMI center to die centerline
   LMI_41:double = 1500; // LMI keepaway zone from die corners
   M0L_01:double = 0.054; // width_L_01
   M0L_02:double = 0.06; // width_L_02
   M0L_03:double = 0.078; // width_L_03
   M0L_04:double = 0.08; // width_L_04
   M0M_01:double = 0.036; // width_M_01
   M0M_02:double = 0.04; // width_M_02
   M0M_03:double = 0.042; // width_M_03
   M0M_04:double = 0.046; // width_M_04
   M0M_05:double = 0.048; // width_M_05
   M0S_01:double = 0.028; // width_S_01
   M0S_02:double = 0.032; // width_S_02
   M0_00:double = 0; // Only Rectangular M0 shape is allowed and only allowed in OGD.
   M0_126:double = 0; // (B:28-32),(C:54-80) not allowed pairs
   M0_127:double = 0; // (B:36-60),(C:78-80) not allowed pairs
   M0_128:double = 0; // (B:78-80),(C:28) not allowed pairs
   M0_129:double = 0; // (B),(B)
   M0_130:double = 0; // (C),(C)
   M0_131:double = 0; // (B:28-32),(C:28-40),(B:28-48)
   M0_132:double = 0; // (B:28-32),(C:32-46),(B:54-60)
   M0_133:double = 0; // (B:28-32),(C:32-48),(B:78-80)
   M0_134:double = 0; // (B:36-48),(C:28-48),(B:36-48)
   M0_135:double = 0; // (B:36-60),(C:32-60),(B:54-80)
   M0_136:double = 0; // (B:78-80),(C:32-80),(B:78-80)
   M0_137:double = 0; // (B:28-32),(C:42-80),(B:28-48) not allowed B-C-B sets
   M0_138:double = 0; // (B:28-32),(C:28,48-80),(B:54-60) not allowed B-C-B sets
   M0_139:double = 0; // (B:28-32),(C:28,54-80),(B:78-80) not allowed B-C-B sets
   M0_140:double = 0; // (B:36-48),(C:54-80),(B:36-48) not allowed B-C-B sets
   M0_141:double = 0; // (B:36-60),(C:28,78-80),(B:54-80) not allowed B-C-B sets
   M0_142:double = 0; // (B:78-80),(C:28),(B:78-80) not allowed B-C-B sets
   M0_21:double = 0.028; // B to C only space
   M0_23:double = 0; // M0CID and M0BID layers can be used to force/flip drawn B/C layers and must fully cover the Metal-0 lines.
   M0_41:double = 0.054; // End-to-end space (fixed value), when line-ends are completely aligned and lines are same type (B-B, C-C), can also be = M0_42
   M0_42:double = 0.124; // End-to-end space (fixed value), when line-ends are not completely aligned or lines are of different type (B-C)
   M0_48:double = 0.016; // Minimum overlap of line ends in opposite directions at minimum side-to-side space
   M0_60:double = 0.086; // Min length of M0 line (any type, any width)
   M0_812:double = 0.158; // Metal0 line-end overlap of TG poly, fixed value1 (M0 line ends must terminate within the poly)
   M0_813:double = 0.088; // Metal0 line-end overlap of TG poly, fixed value2 (M0 line ends must terminate within the poly)
   M0_814:double = 0.018; // Metal0 line-end overlap of TG poly, fixed value3 (M0 line ends must terminate within the poly)
   M0_82:double = 0.022; // Metal0 line-end overlap of poly, fixed value (M0 line ends must terminate within the poly)
   M0_822:double = 0.088; // Metal0 line-end overlap of TGULV poly, fixed value1 (M0 line ends must terminate within the poly)
   M0_823:double = 0.018; // Metal0 line-end overlap of TGULV poly, fixed value2 (M0 line ends must terminate within the poly)
   M0_83:double = 0.028; // Line ETE space region is extended by M0_83 in PGD before doing the ETE space checks
   M0_832:double = 0.036; // Metal0 line-end overlap of ULP poly, fixed value (M0 line ends must terminate within the poly)
   M0_84:double = 0.084; // M0_41/42 ETE to M0_42 ETE min space PGD
   M0_841:double = 0.25; // Minimum C line length, in OGD (>) 
   M0_842:double = 0.138; // End-to-end space (fixed value) in ULP region, when line-ends are not completely aligned or lines are of different type (B-C)
   M0_85:double = 0.086; // M0_41/42 ETE to M0_42 ETE min space OGD
   M0_91:double = 0.028; // Line ETE space region is extended by M0_91 in PGD before doing the isolated line checks
   M0_92:double = 0.028; // Min space/line-width between ETE space regions (PGD), when both ETE region lengths are <= M0_93
   M0_93:double = 0.102; // Limit of ETE region length PGD for M0_92
   M0_94:double = 0.032; // Min space/line-width between ETE space regions (PGD), when both ETE region lengths are <= M0_95
   M0_941:double = 0.25; // Minimum C line length, in OGD (>)
   M0_942:double = 0.036; // Minimum C line width, in PGD (>)
   M0_95:double = 0.136; // Limit of ETE region length PGD for M0_94
   M0_96:double = 0.036; // Min space/line-width between ETE space regions (PGD), when one or both ETE region lengths are > M0_95
   M0_97:double = 0.04; // Min space/line-width between ETE region (PGD) if the length of one or both the ETE regions (PGD) is > M0_98
   M0_98:double = 0.096; // Length of ETE space region PGD (>=)
   M10_00:double = 0; // Only Rectangular M10 shape is allowed for width_01 and width_04/06/07/08 shield wires.
   M10_01:double = 0.126; // width_01 value (OGD only)
   M10_02:double = 0.14; // width_02 value (OGD/PGD)
   M10_03:double = 0.192; // width_03 value (OGD only)
   M10_04:double = 0.21; // width_04 value (OGD/PGD)
   M10_05:double = 0.26; // width_05 value (OGD only)
   M10_06:double = 0.36; // width_06 value (OGD only)
   M10_07:double = 0.378; // width_07 value (OGD only)
   M10_08:double = 0.406; // width_08 value (OGD only)
   M10_09:double = 0.42; // width_09 value (OGD only)
   M10_10:double = 0.798; // width_10 value (OGD only)
   M10_121:double = 0.126; // width_07 to width_07 space, fixed space exception (fixed value)
   M10_20:double = 0; // width_01 wire cannot be sandwiched between two width_04/06/07/08 wires at min space on both sides
   M10_21:double = 0.126; // width_01 to width_01/04/06/07/08 space, fixed space1
   M10_22:double = 0.378; // width_01 to width_01/04/06/07/08 space, fixed space2
   M10_23:double = 0.63; // width_01 to width_01/04/06/07/08 space, fixed space3
   M10_24:double = 0.14; // width_02-09 to width_02-09 space, min unrestricted
   M10_35:double = 0.14; // Width_02/04 to width_02/04 space, min unrestricted
   M10_37:double = 0.198; // Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M10_38
   M10_38:double = 0.378; // Min unrestricted space for rule M10_37
   M10_41:double = 0.14; // Metal10 end-to-end space (min)
   M10_42:double = 0.198; // Metal10 end-to-end space width_01 line to any line (min)
   M10_50:double = 0; // Width_02/04 attacker (PGD) to width_01 victim (OGD) is not allowed.  Width_01 victim must be shielded (physically) by parallel rectangular-only width_04/06/07/08 wire.
   M10_51:double = 0.14; // OGD/PGD attacker to victim unrestricted space (min)
   M10_52:double = 0.198; // Width_01 attacker to victim unrestricted space (min)
   M10_60:double = 0.274; // Min length for all widths
   M10_65:double = 0.148; // Min required M10 hole area (sq um)
   M10_71:double = 0.14; // Minimum length of at least one segment, when two segments are adjacent at a corner
   M10_80:double = 0.178; // Min Corner-to-corner space, when corners have no overlap
   M10_81:double = 0.178; // Min Internal corner-to-corner width 
   M10_82:double = 0.14; // Min Width between facing concave corner extensions of opposite directions 
   M10err_01:double = 0.126; // Metal10 width_01 value (OGD only)
   M10err_05:double = 0.36; // Metal10 width_05 value (OGD only)
   M10err_06:double = 0.378; // Metal10 width_06 value (OGD only)
   M10err_09:double = 0.714; // Metal10 width_09 value (OGD only)
   M10err_10:double = 0.798; // Metal10 width_10 value (OGD only)
   M10err_21:double = 0.14; // BDW-specific Metal10 min space (values less than this are disallowed)
   M11_00:double = 0; // Only Rectangular M11 shape is allowed for width_01 and width_03/05/06/09/10 shield wires.
   M11_01:double = 0.126; // width_01 value (PGD only)
   M11_02:double = 0.14; // width_02 value (OGD/PGD)
   M11_03:double = 0.21; // width_03 value (OGD/PGD)
   M11_04:double = 0.28; // width_04 value (PGD only)
   M11_05:double = 0.36; // width_05 value (PGD only)
   M11_06:double = 0.378; // width_06 value (PGD only)
   M11_07:double = 0.42; // width_07 value (PGD only)
   M11_08:double = 0.7; // width_08 value (PGD only)
   M11_09:double = 0.714; // width_09 value (PGD only)
   M11_10:double = 0.798; // width_10 value (PGD only)
   M11_121:double = 0.126; // width_06 to width_06 space, fixed space exception (fixed value)
   M11_20:double = 0; // width_01 wire cannot be sandwiched between two width_03/05/06/09/10 wires at min space on both sides
   M11_21:double = 0.126; // width_01 to width_01/03/05/06/09/10 space, fixed space1
   M11_22:double = 0.378; // width_01 to width_01/03/05/06/09/10 space, fixed space2
   M11_23:double = 0.63; // width_01 to width_01/03/05/06/09/10 space, fixed space3
   M11_24:double = 0.14; // width_02-10 to width_02-10 space, min unrestricted
   M11_35:double = 0.14; // Width_02/03 to width_02/03 space, min unrestricted
   M11_37:double = 0.198; // Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M11_38
   M11_38:double = 0.378; // Min unrestricted space for rule M11_37
   M11_41:double = 0.14; // Metal11 end-to-end space (min)
   M11_42:double = 0.198; // Metal11 end-to-end space width_01 line to any line (min)
   M11_43:double = 0.13; // M11 coverage of Square Via10 orthogonal edge
   M11_50:double = 0; // Width_02/03 attacker (OGD) to width_01 victim (PGD) is not allowed.  Width_01 victim must be shielded (physically) by parallel rectangular-only width_03/05/06/09/10 wire.
   M11_51:double = 0.14; // OGD/PGD attacker to victim unrestricted space (min)
   M11_52:double = 0.198; // Width_01 attacker to victim unrestricted space (min)
   M11_60:double = 0.274; // Min length for all widths
   M11_65:double = 0.148; // Min required M11 hole area (sq um)
   M11_71:double = 0.14; // Minimum length of at least one segment, when two segments are adjacent at a corner
   M11_80:double = 0.178; // Min Corner-to-corner space, when corners have no overlap
   M11_81:double = 0.178; // Min Internal corner-to-corner width 
   M11_82:double = 0.14; // Min Width between facing concave corner extensions of opposite directions 
   M12_01:double = 0.54; // M12 width, minimum
   M12_02:double = 0.54; // M12 space, minimum
   M12_21:double = 6; // Maximum allowed M12 width
   M12_22:double = 2.2; // Min required M12 hole area (sq um)
   M12_23:double = 0.54; // Minimum length of at least one M12 segment, when two segments are adjacent at a corner
   M12_24:double = 2.13; // Min required M12 length/extent
   M12_41:double = 0.05; // Min M12 coverage of Square Via11 (one edge at a corner)
   M12_43:double = 0.13; // Min M12 coverage of Square Via11 orthogonal edge
   M12_51:double = 0.05; // Min M12 coverage of Rectangular Via11 (one edge at a corner)
   M12_52:double = 0.13; // Min M12 coverage of Rectangular Via11 orthogonal edge
   M1F_01:double = 0; // M1 notches/nubs only allowed in Metal1 color drawing region (over Metal1BCregionID)
   M1F_02:double = 0; // M1 notch can be only on Metal1C
   M1F_03:double = 0; // M1 nub can be only on Metal1B
   M1F_04:double = 0; // M1 nub must face M1 notch satisfying all M1 facing edge spacing rule (28nm)
   M1F_11:double = 0.042; // M1 nub width (in PGD), fixed value
   M1F_12:double = 0.01; // Max nub depth (in OGD)
   M1F_13:double = 0.098; // M1 notch length (in PGD), fixed value
   M1F_14:double = 0.032; // Min notch width (in OGD)
   M1F_15:double = 0; // Center of the neighboring nub and notch must be aligned
   M1F_21:double = 0.1; // Min space between M1 notch and Via0/Via1 (in PGD)
   M1F_22:double = 0.021; // Min M1 end offset from M1 notch section (in neighboring metal1B lines)
   M1F_23:double = 0.14; // Min space between M1 notches (in all direction)
   M1F_24:double = 0.14; // Min space between M1 nubs (in all direction)
   M1F_31:double = 0; // M1 color region is marked with Metal1BCregionID (82;71)
   M1F_32:double = 0; // Inside M1 color region, all metal1 tracks should be marked as B or C, in alternating way
   M1F_33:double = 0; // Metal1B in M1 color region is marked with M1BID (4;135) layer over M1 (4;0)
   M1F_34:double = 0; // Metal1C in M1 color region is marked with M1CID (111;137) layer over M1 (4;0)
   M1F_35:double = 0; // All metal1 lines (metal1B and metal1C) must be aligned to global M1 grid (M1_290)
   M1F_36:double = 0; // All metal1 lines (metal1B and metal1C) must follow all regular metal1 design rules
   M1F_40:double = 0; // First and last M1 track in each M1 colar region must not be empty (legal cuts are allowed)
   M1F_41:double = 0; // Each M1 color region must begin with Metal1B and end with Metal1B
   M1F_42:double = 0; // B-B, C-C pairs are not allowed
   M1F_43:double = 0.588; // Min V1/V0 keepaway space from OGD edge of M1BCregionID (i.e. only dummy M1)
   M1F_44:double = 0.462; // Min V1/V0 keepaway space from PGD edge of M1BCregionID (i.e. only dummy M1)
   M1F_45:double = 0; // M1BCregionID PGD edge must be coincide with Metal1B edge inside
   M1F_46:double = 0.238; // Min metal1 keepaway space from M1BCregionID (PGD and OGD)
   M1_00:double = 0; // M1 width_01 is not allowed over ULPpitchID or TRDTOULP
   M1_01:double = 0.042; // M1 width_01 value (fixed), PGD only
   M1_100:double = 0; // M1 width_02 is only allowed inside ULPpitchID
   M1_101:double = 0.056; // M1 width_02 value (fixed), PGD only
   M1_21:double = 0.028; // M1 width_01 to width_01 or width_02 to width_02 space1 (minimum value, but only allowed in fixed locations)
   M1_290:double = 0; // All PGD M1 width_01 lines must be on a 70nm pitch grid across the whole die
   M1_291:double = 0; // All PGD M1 width_02 lines must be on a 84nm pitch grid within each ULP region (centered in middle of poly space)
   M1_36:double = 0.239; // Maximum space between M1 lines (OGD/PGD) (<)
   M1_41:double = 0.042; // Min end-to-end space (width_01 to width_01 or width_02 to width_02)
   M1_42:double = 0.056; // Max end-to-end space (width_01 to width_01 or width_02 to width_02), when at least one line has length <= M1_43
   M1_43:double = 0.098; // M1 lines shorter than this length are subject to M1_42
   M1_60:double = 0.07; // Min length of M1 line
   M1_69:double = 0.126; // A short line < M1_69 length cannot have exposed edges >M1_85 on one side or both sides
   M1_81:double = 0.042; // Minimum overlap of adjacent line-ends in opposite directions
   M1_84:double = 0.042; // Minimum offset between adjacent line-ends in opposite directions
   M1_85:double = 0.014; // Maximum offset between adjacent line-ends for line-end edges to be considered unexposed
   M1_86:double = 0.098; // Minimum exposed offset between adjacent line-ends in same direction
   M1_87:double = 0.056; // Min End-to-End space when both line ends have exposed edges (>=M1_86) on both sides
   M2BB_21:double = 0; // B - B can skip a valid C line in between, that would create a valid B-C-B combination
   M2BB_22:double = 0.376; // (B) - (B) unrestricted space, minimum
   M2BB_31:double = 0.088; // (B) - (B) min multi-track-skip space (>)
   M2BB_32:double = 0.232; // (B) - (B) max multi-track-skip space (<)
   M2BB_33:double = 0.056; // Min width of B line next to the multi-track-skip space
   M2BB_34:double = 0.038; // Min width of C line next to the above B line next to the multi-track-skip space
   M2BB_35:double = 0; // The above B line next to the unrestricted space needs to be floating (no vias above or below)
   M2BB_36:double = 0.232; // Maximum space in PGD (<) if rule M2BB_37 is not met
   M2BB_37:double = 0.308; // Maximum space in OGD (<) if rule M2BB_36 is not met
   M2BB_38:double = 0.198; // Min PGD space between multi-track-skip spaces
   M2BC_21:double = 0.312; // (B) to (C-B) unrestricted space, minimum
   M2CC_21:double = 0; // (B-C) - (C-B) pairs are allowed to skip a valid B in between. The B in the space must form a valid B-C-(B)-C-B combination 
   M2CC_27:double = 0.248; // (B-C) to (C-B) unrestricted space, minimum
   M2CC_28:double = 0.564; // For width <= 36 C to any C, in (B-C) - (C-B) pair, unrestricted space, minimum
   M2L_01:double = 0.056; // width_L_01
   M2L_02:double = 0.06; // width_L_02
   M2L_03:double = 0.068; // width_L_03
   M2L_05:double = 0.076; // width_L_05
   M2L_06:double = 0.084; // width_L_06
   M2L_07:double = 0.074; // width_L_07
   M2M_01:double = 0.038; // width_M_01
   M2M_02:double = 0.04; // width_M_02
   M2M_03:double = 0.046; // width_M_03
   M2S_01:double = 0.028; // width_S_01
   M2S_02:double = 0.03; // width_S_02
   M2S_03:double = 0.032; // width_S_03
   M2S_04:double = 0.036; // width_S_04
   M2_00:double = 0; // Only Rectangular M2 shape is allowed and only allowed in OGD.
   M2_126:double = 0; // (B:28-36),(C:60-84) not allowed pairs
   M2_127:double = 0; // (B:38-46),(C:84) not allowed pairs
   M2_128:double = 0; // (B:56-84),(C:28-36) not allowed pairs
   M2_129:double = 0; // (B),(B)
   M2_130:double = 0; // (C),(C)
   M2_131:double = 0; // (B:28-36),(C:28-46),(B:28-36)
   M2_132:double = 0; // (B:28-46),(C:28-56),(B:38-46)
   M2_133:double = 0; // (B:28-36),(C:38-56),(B:56-84)
   M2_134:double = 0; // (B:38-46),(C:38-76),(B:56-84)
   M2_135:double = 0; // (B:56-84),(C:38-84),(B:56-84)
   M2_136:double = 0; // (B:28-36),(C:56-84),(B:28-36) not allowed B-C-B sets
   M2_137:double = 0; // (B:28-46),(C:60-84),(B:38-46) not allowed B-C-B sets
   M2_138:double = 0; // (B:28-36),(C:28-36,60-84),(B:56-84) not allowed B-C-B sets
   M2_139:double = 0; // (B:38-46),(C:28-36,84),(B:56-84) not allowed B-C-B sets
   M2_140:double = 0; // (B:56-84),(C:28-36),(B:56-84) not allowed B-C-B sets
   M2_141:double = 0; // (B:28),(C:56),(B:76) not allowed B-C-B sets
   M2_147:double = 0.024; // Width <= 32nm (M2S_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M2_147
   M2_148:double = 0.014; // Width > 32nm (M2S_03) and <= 46nm (M2M_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M2_148
   M2_20:double = 0.05; // Line ends are extended by M2_20 before doing any side to side space checks
   M2_21:double = 0.024; // B to C min space (fixed value for adjacent lines)
   M2_22:double = 0; // Every C line should have an adjacent B line at M2_21 space on atleast one side, along its entire length (allowed to have M2_42 ETE gaps)
   M2_23:double = 0; // M2CID and M2BID layers can be used to force/flip drawn B/C layers and must fully cover the Metal-2 lines.
   M2_37:double = 0.112; // Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M2_38
   M2_38:double = 0.076; // Min unrestricted space for rule M2_37 
   M2_41:double = 0.056; // End-to-end space (min), when line-ends are completely aligned and lines are same type (B-B, C-C)
   M2_42:double = 0.112; // End-to-end space (min), when line-ends are not completely aligned or lines are of different type (B-C)
   M2_43:double = 0.012; // Line ends are extended by M2_43 on both sides before doing ETE space checks M2_41/42 
   M2_44:double = 0; // All line ends for widths <= M2_45 must be aligned or covered at M2_46 space 
   M2_45:double = 0.055; // Max width for M2_44 check 
   M2_46:double = 0.024; // Space at which the line ends must be aligned or covered (fixed value) for M2_44 check
   M2_47:double = 0; // Lines <= M2_45 wide cannot be isolated (cannot be exposed on both sides), must be next to another narrow or wide line 
   M2_48:double = 0.07; // Minimum overlap of adjacent line ends in opposite directions at minimum space
   M2_49:double = 0.056; // Minimum offset of adjacent line ends in opposite directions (line ends are extended by M2_43), applies to > M2_45 width wires
   M2_60:double = 0.084; // Min length of M2 line (any type, any width)
   M2_841:double = 0.25; // Minimum C line length, in OGD (>) 
   M2_842:double = 0.036; // Minimum C line width, in PGD (>)
   M2_941:double = 0.25; // Minimum C line length, in OGD (>)
   M2_942:double = 0.036; // Minimum C line width, in PGD (>)
   M3BB_21:double = 0; // B - B can skip a valid C line in between, that would create a valid B-C-B combination
   M3BB_22:double = 0.376; // (B) - (B) unrestricted space, minimum
   M3BB_31:double = 0.088; // (B) - (B) min multi-track-skip space (>)
   M3BB_32:double = 0.232; // (B) - (B) max multi-track-skip space (<)
   M3BB_33:double = 0.056; // Min width of B line next to the multi-track-skip space
   M3BB_34:double = 0.038; // Min width of C line next to the above B line next to the multi-track-skip space
   M3BB_35:double = 0; // The above B line next to the unrestricted space needs to be floating (no vias above or below) 
   M3BB_36:double = 0.232; // Maximum space in OGD (<) if rule M3BB_37 is not met
   M3BB_37:double = 0.308; // Maximum space in PGD (<) if rule M3BB_36 is not met
   M3BB_38:double = 0.198; // Min OGD space between multi-track-skip spaces
   M3BC_21:double = 0.312; // (B) to (C-B) unrestricted space, minimum
   M3CC_21:double = 0; // (B-C) - (C-B) pairs are allowed to skip a valid B in between. The B in the space must form a valid B-C-(B)-C-B combination 
   M3CC_27:double = 0.248; // (B-C) to (C-B) unrestricted space, minimum
   M3CC_28:double = 0.564; // For width <= 36 C to any C, in (B-C) - (C-B) pair, unrestricted space, minimum
   M3L_01:double = 0.056; // width_L_01
   M3L_02:double = 0.06; // width_L_02
   M3L_03:double = 0.068; // width_L_03
   M3L_04:double = 0.064; // width_L_04
   M3L_05:double = 0.076; // width_L_05
   M3L_06:double = 0.084; // width_L_06
   M3L_07:double = 0.074; // width_L_07
   M3L_08:double = 0.082; // width_L_08
   M3L_09:double = 0.066; // width_L_09
   M3M_01:double = 0.038; // width_M_01
   M3M_02:double = 0.04; // width_M_02
   M3M_03:double = 0.046; // width_M_03
   M3M_04:double = 0.046; // width_M_04
   M3M_05:double = 0.048; // width_M_05
   M3M_06:double = 0.052; // width_M_06
   M3S_01:double = 0.028; // width_S_01
   M3S_02:double = 0.03; // width_S_02
   M3S_03:double = 0.032; // width_S_03
   M3S_04:double = 0.036; // width_S_04
   M3_00:double = 0; // Only Rectangular M3 shape is allowed and only allowed in PGD.
   M3_126:double = 0; // (B:28-36),(C:60-84) not allowed pairs
   M3_127:double = 0; // (B:40-46),(C:84) not allowed pairs
   M3_128:double = 0; // (B:56-84),(C:28-36) not allowed pairs
   M3_129:double = 0; // (B),(B)
   M3_130:double = 0; // (C),(C)
   M3_131:double = 0; // (B:28-36),(C:28-46),(B:28-36)
   M3_132:double = 0; // (B:28-46),(C:28-56),(B:40-46)
   M3_133:double = 0; // (B:28-36),(C:40-56),(B:56-84)
   M3_134:double = 0; // (B:40-46),(C:40-76),(B:56-84)
   M3_135:double = 0; // (B:56-84),(C:40-84),(B:56-84)
   M3_136:double = 0; // (B:28-36),(C:56-84),(B:28-36) not allowed B-C-B sets
   M3_137:double = 0; // (B:28-46),(C:60-84),(B:40-46) not allowed B-C-B sets
   M3_138:double = 0; // (B:28-36),(C:28-36,60-84),(B:56-84) not allowed B-C-B sets
   M3_139:double = 0; // (B:40-46),(C:28-36,84),(B:56-84) not allowed B-C-B sets
   M3_140:double = 0; // (B:56-84),(C:28-36),(B:56-84) not allowed B-C-B sets
   M3_141:double = 0; // (B:28),(C:56),(B:76) not allowed B-C-B sets
   M3_142:double = 0; // (B:38-52),(C:82-84),(B:56-84)
   M3_143:double = 0; // (B:56-84),(C:32-36),(B:56-84)
   M3_147:double = 0.024; // Width <= 32nm (M3S_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M3_147
   M3_148:double = 0.014; // Width > 32nm (M3S_03) and <= 46nm (M3M_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M3_148
   M3_20:double = 0.05; // Line ends are extended by M3_20 before doing any side to side space checks
   M3_21:double = 0.024; // B to C min space (fixed value for adjacent lines)
   M3_22:double = 0; // Every C line should have an adjacent B line at M3_21 space on atleast one side, along its entire length (allowed to have M3_42 ETE gaps)
   M3_23:double = 0; // M3CID and M3BID layers can be used to force/flip drawn B/C layers and must fully cover the Metal-3 lines.
   M3_37:double = 0.112; // Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M3_38
   M3_38:double = 0.076; // Min unrestricted space for rule M3_37
   M3_41:double = 0.056; // End-to-end space (min), when line-ends are completely aligned and lines are same type (B-B, C-C)
   M3_42:double = 0.112; // End-to-end space (min), when line-ends are not completely aligned or lines are of different type (B-C)
   M3_43:double = 0.012; // Line ends are extended by M3_43 on both sides before doing ETE space checks M3_41/42 
   M3_44:double = 0; // All line ends for widths <= M3_45 must be a aligned or covered at M3_46 space 
   M3_45:double = 0.055; // Max width for M3_44 check 
   M3_46:double = 0.024; // Space at which the line ends must be aligned or covered (fixed value) for M3_44 check
   M3_47:double = 0; // Lines <= M3_45 wide cannot be isolated (cannot be exposed on both sides), must be next to another narrow or wide line 
   M3_48:double = 0.07; // Minimum overlap of adjacent line ends in opposite directions at minimum space
   M3_49:double = 0.056; // Minimum offset of adjacent line ends in opposite directions (line ends are extended by M3_43), applies to > M3_45 width wires
   M3_60:double = 0.084; // Min length of M3 line (any type, any width)
   M3_841:double = 0.25; // Minimum C line length, in PGD (>) 
   M3_842:double = 0.036; // Minimum C line width, in OGD (>)
   M3_941:double = 0.25; // Minimum C line length, in PGD (>)
   M3_942:double = 0.036; // Minimum C line width, in OGD (>)
   M4BB_21:double = 0; // B - B can skip a valid C line in between, that would create a valid B-C-B combination
   M4BB_22:double = 0.376; // (B) - (B) unrestricted space, minimum
   M4BB_31:double = 0.088; // (B) - (B) min multi-track-skip space (>)
   M4BB_32:double = 0.232; // (B) - (B) max multi-track-skip space (<)
   M4BB_33:double = 0.056; // Min width of B line next to the multi-track-skip space
   M4BB_34:double = 0.038; // Min width of C line next to the above B line next to the multi-track-skip space
   M4BB_35:double = 0; // The above B line next to the unrestricted space needs to be floating (no vias above or below) 
   M4BB_36:double = 0.232; // Maximum space in PGD (<) if rule M4BB_37 is not met
   M4BB_37:double = 0.308; // Maximum space in OGD (<) if rule M4BB_36 is not met
   M4BB_38:double = 0.198; // Min PGD space between multi-track-skip spaces
   M4BC_21:double = 0.312; // (B) to (C-B) unrestricted space, minimum
   M4CC_21:double = 0; // (B-C) - (C-B) pairs are allowed to skip a valid B in between. The B in the space must form a valid B-C-(B)-C-B combination 
   M4CC_27:double = 0.248; // (B-C) to (C-B) unrestricted space, minimum
   M4CC_28:double = 0.564; // For width <= 36 C to any C, in (B-C) - (C-B) pair, unrestricted space, minimum
   M4L_01:double = 0.056; // width_L_01
   M4L_02:double = 0.06; // width_L_02
   M4L_03:double = 0.068; // width_L_03
   M4L_05:double = 0.076; // width_L_05
   M4L_06:double = 0.084; // width_L_06
   M4L_07:double = 0.074; // width_L_07
   M4L_08:double = 0.054; // width_L_08
   M4L_09:double = 0.066; // width_L_09
   M4M_02:double = 0.04; // width_M_02
   M4M_03:double = 0.046; // width_M_03
   M4S_01:double = 0.028; // width_S_01
   M4S_02:double = 0.03; // width_S_02
   M4S_03:double = 0.032; // width_S_03
   M4S_04:double = 0.036; // width_S_04
   M4_00:double = 0; // Only Rectangular M4 shape is allowed and only allowed in OGD.
   M4_01:double = 0.04; // width_01 value (OGD only)
   M4_02:double = 0.044; // width_02 value (OGD only)
   M4_03:double = 0.048; // width_03 value (OGD only)
   M4_04:double = 0.056; // width_04 value (OGD only)
   M4_05:double = 0.06; // width_05 value (OGD only)
   M4_06:double = 0.064; // width_06 value (OGD only)
   M4_07:double = 0.068; // width_07 value (OGD only)
   M4_08:double = 0.076; // width_08 value (OGD only)
   M4_09:double = 0.08; // width_09 value (OGD only)
   M4_10:double = 0.09; // width_10 value (OGD/PGD)
   M4_101:double = 0; // 2 adjacent jogs next to a width_01/02 lines is not allowed
   M4_102:double = 0; // Multi-track jog on one side and a facing one/multi-track jog on the other side of a width_01/02 line is not allowed
   M4_103:double = 0; // 2 facing jogs, without a wire in between is not allowed
   M4_11:double = 0.108; // width_11 value (OGD only)
   M4_123:double = 0.044; // width_02/03 to width_03 space range min
   M4_124:double = 0.046; // width_02/03 to width_03 space range max
   M4_126:double = 0; // (B:28-36),(C:60-84) not allowed pairs
   M4_127:double = 0; // (B:40-46),(C:84) not allowed pairs
   M4_128:double = 0; // (B:54-84),(C:28-36) not allowed pairs
   M4_129:double = 0; // (B),(B)
   M4_130:double = 0; // (C),(C)
   M4_131:double = 0; // (B:28-36),(C:28-46),(B:28-36)
   M4_132:double = 0; // (B:28-46),(C:28-56),(B:40-46)
   M4_133:double = 0; // (B:28-36),(C:40-56),(B:54-84)
   M4_134:double = 0; // (B:40-46),(C:40-76),(B:54-84)
   M4_135:double = 0; // (B:54-84),(C:40-84),(B:54-84)
   M4_136:double = 0; // (B:28-36),(C:54-84),(B:28-36) not allowed B-C-B sets
   M4_137:double = 0; // (B:28-46),(C:60-84),(B:40-46) not allowed B-C-B sets
   M4_138:double = 0; // (B:28-36),(C:28-36,60-84),(B:54-84) not allowed B-C-B sets
   M4_139:double = 0; // (B:40-46),(C:28-36,84),(B:54-84) not allowed B-C-B sets
   M4_140:double = 0; // (B:54-84),(C:28-36),(B:54-84) not allowed B-C-B sets
   M4_141:double = 0; // (B:28),(C:56),(B:76) not allowed B-C-B sets
   M4_142:double = 0; // (B:28),(C:54),(B:76) not allowed B-C-B sets
   M4_147:double = 0.024; // Width <= 32nm (M4S_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M4_147
   M4_148:double = 0.014; // Width > 32nm (M4S_03) and <= 46nm (M4M_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M4_148
   M4_20:double = 0.05; // Line ends are extended by M4_20 before doing any side to side space checks
   M4_21:double = 0.024; // B to C min space (fixed value for adjacent lines)
   M4_22:double = 0; // Every C line should have an adjacent B line at M4_21 space on atleast one side, along its entire length (allowed to have M4_42 ETE gaps)
   M4_23:double = 0; // M4CID and M4BID layers can be used to force/flip drawn B/C layers and must fully cover the Metal-4 lines.
   M4_24:double = 0.046; // width_02 to width_02 space range max
   M4_249:double = 0; // Metal4 line <= width_04 (56nm) cannot have exposed edges on both side of the line end (see M4_250 exception to this rule)
   M4_25:double = 0.044; // width_02/03 to width_04-11 space range min
   M4_250:double = 0; // Metal4 line <= width_04 is allowed to have exposed edges, if the adjacent ETE meets M4_251/252/253, forming a line end bridge
   M4_251:double = 0.11; // Max adjacent ETE space (<=)
   M4_252:double = 0.048; // Max width of atleast one of the two lines forming the adjacent ETE space (<=)
   M4_253:double = 0.03; // Minimum overlap of the line ends forming the ETE space (>=)
   M4_26:double = 0.05; // width_02/03 to width_04-11 space range max
   M4_260:double = 0.04; // Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE can form a bridge defined by M4_251/252/253
   M4_261:double = 0.08; // Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE cannot form a bridge
   M4_262:double = 0.04; // Minimum overlap of > Width_03 (48nm) <= Width_04 (56nm) line end with an adjacent line in the opposite direction
   M4_27:double = 0.044; // width_04-07 to width_04-11 space range min
   M4_28:double = 0.056; // width_04-07 to width_04-11 space range max
   M4_31:double = 0; // width_01 is not allowed to be next to width_03 to width_11
   M4_32:double = 0.044; // width_08/09 to width_08-10 unrestricted space (min)
   M4_33:double = 0.06; // width_10/11 to width_10/11 unrestricted space (min)
   M4_37:double = 0.112; // Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M4_38
   M4_38:double = 0.076; // Min unrestricted space for rule M4_37
   M4_40:double = 0.08; // width_10 to width_10 unrestricted space (min)
   M4_41:double = 0.056; // End-to-end space (min), when line-ends are completely aligned and lines are same type (B-B, C-C)
   M4_42:double = 0.112; // End-to-end space (min), when line-ends are not completely aligned or lines are of different type (B-C)
   M4_43:double = 0.012; // Line ends are extended by M4_43 on both sides before doing ETE space checks M4_41/42 
   M4_44:double = 0; // All line ends for widths <= M4_45 must be a aligned or covered at M4_46 space 
   M4_45:double = 0.055; // Max width for M4_44 check 
   M4_46:double = 0.024; // Space at which the line ends must be aligned or covered (fixed value) for M4_44 check
   M4_47:double = 0; // Lines <= M4_45 wide cannot be isolated (cannot be exposed on both sides), must be next to another narrow or wide line 
   M4_48:double = 0.07; // Minimum overlap of adjacent line ends in opposite directions at minimum space
   M4_49:double = 0.056; // Minimum offset of adjacent line ends in opposite directions (line ends are extended by M4_43), applies to > M4_45 width wires
   M4_51:double = 0.08; // Width_01-11 attacker to width_10 victim min space
   M4_52:double = 0.08; // Width_10 attacker to width_08-11 victim min space
   M4_53:double = 0; // Width_10 line cannot attack a width_01-07 victim
   M4_60:double = 0.084; // Min length of M4 line (any type, any width)
   M4_62:double = 0.14; // Min edge length of width_01-07 line
   M4_63:double = 0.12; // Min length of width_10 nub
   M4_65:double = 0.16; // Min length of holes
   M4_70:double = 0.018; // Minimum segment length
   M4_71:double = 0.1; // Minimum length of at least one segment, when two segments are adjacent at a corner
   M4_72:double = 0; // segments can be smaller than M4_70 if both adjacent segments are >= M4_73
   M4_73:double = 0.35; // Minimum segment lengths for M4_72
   M4_80:double = 0.056; // Corner-to-corner space, when corners have no overlap
   M4_81:double = 0.056; // Internal corner-to-corner width 
   M4_82:double = 0.09; // Width between facing concave corner extensions of opposite directions 
   M4_83:double = 0.09; // Min width of notched line section
   M4_84:double = 0.124; // Above rule applies to notch length less than
   M4_941:double = 0.25; // Minimum C line length, in OGD (>)
   M4_942:double = 0.036; // Minimum C line width, in PGD (>)
   M5BB_21:double = 0; // B - B can skip a valid C line in between, that would create a valid B-C-B combination
   M5BB_22:double = 0.376; // (B) - (B) unrestricted space, minimum
   M5BB_31:double = 0.088; // (B) - (B) min multi-track-skip space (>)
   M5BB_32:double = 0.232; // (B) - (B) max multi-track-skip space (<)
   M5BB_33:double = 0.056; // Min width of B line next to the multi-track-skip space
   M5BB_34:double = 0.038; // Min width of C line next to the above B line next to the multi-track-skip space
   M5BB_35:double = 0; // The above B line next to the unrestricted space needs to be floating (no vias above or below) 
   M5BB_36:double = 0.232; // Maximum space in OGD (<) if rule M5BB_37 is not met
   M5BB_37:double = 0.308; // Maximum space in PGD (<) if rule M5BB_36 is not met
   M5BB_38:double = 0.198; // Min OGD space between unrestricted spaces
   M5BC_21:double = 0.312; // (B) to (C-B) unrestricted space, minimum
   M5CC_21:double = 0; // (B-C) - (C-B) pairs are allowed to skip a valid B in between. The B in the space must form a valid B-C-(B)-C-B combination 
   M5CC_27:double = 0.248; // (B-C) to (C-B) unrestricted space, minimum
   M5CC_28:double = 0.564; // For width <= 36 C to any C, in (B-C) - (C-B) pair, unrestricted space, minimum
   M5L_01:double = 0.056; // width_L_01
   M5L_02:double = 0.06; // width_L_02
   M5L_03:double = 0.068; // width_L_03
   M5L_05:double = 0.076; // width_L_05
   M5L_06:double = 0.084; // width_L_06
   M5L_07:double = 0.074; // width_L_07
   M5L_09:double = 0.066; // width_L_09
   M5M_02:double = 0.04; // width_M_02
   M5M_03:double = 0.046; // width_M_03
   M5S_01:double = 0.028; // width_S_01
   M5S_02:double = 0.03; // width_S_02
   M5S_03:double = 0.032; // width_S_03
   M5S_04:double = 0.036; // width_S_04
   M5_00:double = 0; // Only Rectangular M5 shape is allowed and only allowed in PGD.
   M5_01:double = 0.04; // width_01 value (PGD only)
   M5_02:double = 0.044; // width_02 value (PGD only)
   M5_03:double = 0.048; // width_03 value (PGD only)
   M5_04:double = 0.056; // width_04 value (PGD only)
   M5_05:double = 0.06; // width_05 value (PGD only)
   M5_06:double = 0.064; // width_06 value (PGD only)
   M5_07:double = 0.068; // width_07 value (PGD only)
   M5_08:double = 0.076; // width_08 value (PGD only)
   M5_09:double = 0.08; // width_09 value (PGD only)
   M5_10:double = 0.09; // width_10 value (PGD/OGD)
   M5_101:double = 0; // 2 adjacent jogs next to a width_01/02 lines is not allowed
   M5_102:double = 0; // Multi-track jog on one side and a facing one/multi-track jog on the other side of a width_01/02 line is not allowed
   M5_103:double = 0; // 2 facing jogs, without a wire in between is not allowed
   M5_11:double = 0.108; // width_11 value (PGD only)
   M5_12:double = 0.054; // width_12 value (PGD only)
   M5_123:double = 0.044; // width_02/03 to width_03 space range min
   M5_124:double = 0.046; // width_02/03 to width_03 space range max
   M5_126:double = 0; // (B:28-36),(C:60-84) not allowed pairs
   M5_127:double = 0; // (B:40-46),(C:84) not allowed B-C-B pairs
   M5_128:double = 0; // (B:56-84),(C:28-36) not allowed pairs
   M5_129:double = 0; // (B),(B)
   M5_13:double = 0.16; // width_13 value (PGD only)
   M5_130:double = 0; // (C),(C)
   M5_131:double = 0; // (B:28-36),(C:28-46),(B:28-36)
   M5_132:double = 0.048; // width_08/09 to width_11 unrestricted space (min)
   M5_133:double = 0; // (B:28-36),(C:40-56),(B:56-84)
   M5_134:double = 0; // (B:40-46),(C:40-76),(B:56-84)
   M5_135:double = 0; // (B:56-84),(C:40-84),(B:56-84)
   M5_136:double = 0; // (B:28-36),(C:56-84),(B:28-36) not allowed B-C-B sets
   M5_137:double = 0; // (B:28-46),(C:60-84),(B:40-46) not allowed B-C-B sets
   M5_138:double = 0; // (B:28-36),(C:28-36,60-84),(B:56-84) not allowed B-C-B sets
   M5_139:double = 0; // (B:40-46),(C:28-36,84),(B:56-84) not allowed B-C-B sets
   M5_14:double = 0.2; // width_14 value (PGD only)
   M5_140:double = 0; // (B:56-84),(C:28-36),(B:56-84) not allowed B-C-B sets
   M5_141:double = 0; // (B:28),(C:56),(B:76)
   M5_147:double = 0.024; // Width <= 32nm (M5S_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M5_147
   M5_148:double = 0.014; // Width > 32nm (M5S_03) and <= 46nm (M5M_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M5_148
   M5_149:double = 0; // Metal5 line <= width_04 cannot have exposed edges (see M5_150 exception to this rule)
   M5_15:double = 0.24; // width_15 value (PGD only)
   M5_150:double = 0; // Metal5 line <= width_04 is allowed to have exposed edges, if the adjacent ETE meets M5_151/152/153
   M5_151:double = 0.11; // Max adjacent ETE space (<=)
   M5_152:double = 0.048; // Max width of atleast one of the two lines forming the adjacent ETE space (<=)
   M5_153:double = 0.03; // Minimum overlap (in OGD) of the facing line ends forming the ETE space (>=)
   M5_16:double = 0; // width_13/14/15 must be rectangles only (no jog or junction allowed)
   M5_160:double = 0.04; // Minimum overlap (in PGD) of Width_04 line end with an adjacent line in the opposite direction, if the ETE space of the width_04 line is = M5_161 
   M5_161:double = 0.08; // Fixed ETE space for M5_160 (=), and Minimum ETE space for M5_162 (>)
   M5_162:double = 0.08; // Minimum overlap (in PGD) of Width_04 line end with an adjacent line in the opposite direction, if the ETE space of the width_04 line is > M5_161 
   M5_20:double = 0.05; // Line ends are extended by M5_20 before doing any side to side space checks
   M5_21:double = 0.04; // width_01 to width_01/02 space range min
   M5_22:double = 0.044; // width_01 to width_01/02 space range max
   M5_23:double = 0.04; // width_02 to width_02 space range min
   M5_24:double = 0.046; // width_02 to width_02 space range max
   M5_249:double = 0; // Metal5 line <= width_04 (56nm) cannot have exposed edges on both side of the line end (see M5_250 exception to this rule)
   M5_25:double = 0.044; // width_02/03 to width_04-12 space range min
   M5_250:double = 0; // Metal5 line <= width_04 is allowed to have exposed edges, if the adjacent ETE meets M5_251/252/253, forming a line end bridge
   M5_251:double = 0.11; // Max adjacent ETE space (<=)
   M5_252:double = 0.048; // Max width of at least one of the two lines forming the adjacent ETE space (<=)
   M5_253:double = 0.03; // Minimum overlap of the line ends forming the ETE space (>=)
   M5_26:double = 0.05; // width_02/03 to width_04-12 space range max
   M5_260:double = 0.04; // Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE can form a bridge defined by M4_251/252/253
   M5_261:double = 0.08; // Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE cannot form a bridge
   M5_262:double = 0.04; // Minimum overlap of > Width_03 (48nm) <= Width_04 (56nm) line end with an adjacent line in the opposite direction
   M5_27:double = 0.044; // width_12/04-07 to width_04-12 space range min
   M5_28:double = 0.056; // width_12/04-07 to width_04-12 space range max
   M5_31:double = 0; // width_01 is not allowed to be next to width_03 to width_15
   M5_32:double = 0.044; // width_08/09 to width_08-10 unrestricted space (min)
   M5_33:double = 0.06; // width_10/11 to width_10/11 unrestricted space (min)
   M5_34:double = 0.08; // width_13/14/15 to width 08-11/13-15 unrestricted space (min)
   M5_35:double = 0; // width_13/14/15 are not allowed to be next to width_01-07/12
   M5_37:double = 0.112; // Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M5_38
   M5_38:double = 0; // width_02 cannot be between two width_10/11 lines
   M5_40:double = 0.08; // width_10 to width_10 unrestricted space (min)
   M5_41:double = 0.08; // Metal5 end-to-end space (min)
   M5_42:double = 0.112; // End-to-end space (min), when line-ends are not completely aligned or lines are of different type (B-C)
   M5_43:double = 0.012; // Line ends are extended by M5_43 on both sides before doing ETE space checks M5_41/42 
   M5_44:double = 0.16; // Width_01/02 to width_01-15 end-to-end space (min) if overlap between facing ends is < M5_45
   M5_45:double = 0.03; // Max overlap between facing line ends for rule M5_44
   M5_46:double = 0.08; // Maximum allowed length of exposed edge of a width_01-07/12 line
   M5_47:double = 0.1; // Min ETE space between a <=M5_03 line and a <=M5_07 line, when the line ends are not facing each other (The line ends of the <=M5_03 wide lines are extended by M5_48 prior to this check)
   M5_48:double = 0.013; // Line end extensions of the <=M5_03 width lines for M5_47 check
   M5_49:double = 0.056; // Minimum offset of adjacent line ends in opposite directions (line ends are extended by M5_43), applies to > M5_45 width wires
   M5_51:double = 0.08; // Width_01-15 attacker to width_10 victim min space
   M5_52:double = 0.08; // Width_10 attacker to width_08-15 victim min space
   M5_53:double = 0; // Width_10 line cannot attack a width_01-07/12 victim
   M5_60:double = 0.16; // Min length of width_01-15 lines
   M5_62:double = 0.14; // Min edge length of width_01-07/12 line
   M5_63:double = 0.12; // Min length of width_10 nub
   M5_65:double = 0.16; // Min length of holes
   M5_70:double = 0.018; // Minimum segment length
   M5_71:double = 0.1; // Minimum length of at least one segment, when two segments are adjacent at a corner
   M5_72:double = 0; // A segment can be smaller than M5_70 if it has two adjacent segments >= M5_73
   M5_73:double = 0.35; // Minimum segment lengths for rule M5_72
   M5_74:double = 0.09; // M5_72 segment to line end space
   M5_80:double = 0.056; // Min Corner-to-corner space, when corners have no overlap
   M5_81:double = 0.056; // Min Internal corner-to-corner width 
   M5_82:double = 0.09; // Min Width between facing concave corner extensions of opposite directions 
   M5_83:double = 0.09; // Min width of notched line section
   M5_84:double = 0.124; // Rule M5_83 applies to notch length less than M5_84
   M5_941:double = 0.25; // Minimum C line length, in PGD (>)
   M5_942:double = 0.036; // Minimum C line width, in OGD (>)
   M5err_00:double = 0.05; // Metal5 width_00 value (PGD only)
   M6_00:double = 0.08; // width_00 value (OGD only)
   M6_01:double = 0.04; // width_01 value (OGD only)
   M6_02:double = 0.044; // width_02 value (OGD only)
   M6_03:double = 0.048; // width_03 value (OGD only)
   M6_04:double = 0.056; // width_04 value (OGD only)
   M6_05:double = 0.06; // width_05 value (OGD only)
   M6_06:double = 0.064; // width_06 value (OGD only)
   M6_07:double = 0.068; // width_07 value (OGD only)
   M6_08:double = 0.076; // width_08 value (OGD only)
   M6_09:double = 0.08; // width_09 value (OGD only)
   M6_10:double = 0.09; // width_10 value (OGD/PGD)
   M6_101:double = 0; // 2 adjacent jogs next to a width_01/02 lines is not allowed
   M6_102:double = 0; // Multi-track jog on one side and a facing one/multi-track jog on the other side of a width_01/02 line is not allowed
   M6_103:double = 0; // 2 facing jogs, without a wire in between is not allowed
   M6_11:double = 0.108; // width_11 value (OGD only)
   M6_12:double = 0.054; // width_12 value (OGD only)
   M6_123:double = 0.044; // width_02/03 to width_03 space range min
   M6_124:double = 0.046; // width_02/03 to width_03 space range max
   M6_13:double = 0.16; // width_13 value (OGD only)
   M6_132:double = 0.048; // width_08/09 to width_11 unrestricted space (min)
   M6_14:double = 0.2; // width_14 value (OGD only)
   M6_149:double = 0; // Metal6 line <= width_04 cannot have exposed edges (see M6_150 exception to this rule)
   M6_15:double = 0.24; // width_15 value (OGD only)
   M6_150:double = 0; // Metal6 line <= width_04 is allowed to have exposed edges, if the adjacent ETE meets M6_151/152/153
   M6_151:double = 0.11; // Max adjacent ETE space (<=)
   M6_152:double = 0.048; // Max width of atleast one of the two lines forming the adjacent ETE space (<=)
   M6_153:double = 0.03; // Minimum overlap (in PGD) of the facing line ends forming the ETE space (>=)
   M6_16:double = 0; // width_13/14/15 must be rectangles only (no jog or junction allowed)
   M6_160:double = 0.04; // Minimum overlap (in OGD) of Width_04 line end with an adjacent line in the opposite direction, if the ETE space of the width_04 line is = M6_161 
   M6_161:double = 0.08; // Fixed ETE space for M6_160 (=), Minimum ETE space for M6_162 (>)
   M6_162:double = 0.08; // Minimum overlap (in OGD) of Width_04 line end with an adjacent line in the opposite direction, if the ETE space of the width_04 line is > M6_161 
   M6_21:double = 0.04; // width_01 to width_01/02 space range min
   M6_22:double = 0.044; // width_01 to width_01/02 space range max
   M6_23:double = 0.04; // width_02 to width_02 space range min
   M6_24:double = 0.046; // width_02 to width_02 space range max
   M6_249:double = 0; // Metal6 line <= width_04 (56nm) cannot have exposed edges on both side of the line end (see M6_250 exception to this rule)
   M6_25:double = 0.044; // width_02/03 to width_04-12 space range min
   M6_250:double = 0; // Metal6 line <= width_04 is allowed to have exposed edges, if the adjacent ETE meets M6_251/252/253, forming a line end bridge
   M6_251:double = 0.11; // Max adjacent ETE space (<=)
   M6_252:double = 0.048; // Max width of at least one of the two lines forming the adjacent ETE space (<=)
   M6_253:double = 0.03; // Minimum overlap of the line ends forming the ETE space (>=)
   M6_26:double = 0.05; // width_02/03 to width_04-12 space range max
   M6_260:double = 0.04; // Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE can form a bridge defined by M4_251/252/253
   M6_261:double = 0.08; // Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE cannot form a bridge
   M6_262:double = 0.04; // Minimum overlap of > Width_03 (48nm) <= Width_04 (56nm) line end with an adjacent line in the opposite direction
   M6_27:double = 0.044; // width_12/04-07 to width_04-12 space range min
   M6_28:double = 0.056; // width_12/04-07 to width_04-12 space range max
   M6_31:double = 0; // width_01 is not allowed to be next to width_03 to width_15
   M6_32:double = 0.044; // width_08/09 to width_08-10 unrestricted space (min)
   M6_33:double = 0.06; // width_10/11 to width_10/11 unrestricted space (min)
   M6_34:double = 0.08; // width_13/14/15 to width 08-11/13-15 unrestricted space (min)
   M6_35:double = 0; // width_13/14/15 are not allowed to be next to width_01-07/12
   M6_37:double = 0.12; // max edge lengths that can violate the forbidden spaces if space  between the edges is >=M6_38
   M6_38:double = 0; // width_02 cannot be between two width_10/11 lines
   M6_40:double = 0.08; // width_10 to width_10 unrestricted space (min)
   M6_41:double = 0.08; // Metal6 end-to-end space (min)
   M6_44:double = 0.16; // Width_01/02 to width_01-15 end-to-end space (min) if overlap between facing ends is < M6_45
   M6_45:double = 0.03; // Max overlap between facing line ends for rule M6_44
   M6_46:double = 0.08; // Maximum allowed length of exposed edge of a width_01-07/12 line
   M6_47:double = 0.1; // Min ETE space between a <=M6_03 line and a <=M6_07 line, when the line ends are not facing each other (The line ends of the <=M6_03 wide lines are extended by M6_48 prior to this check)
   M6_48:double = 0.013; // Line end extensions of the <=M6_03 wide line for M6_47 check
   M6_51:double = 0.08; // Width_01-15 attacker to width_10 victim min space
   M6_52:double = 0.08; // Width_10 attacker to width_08-15 victim min space
   M6_53:double = 0; // Width_10 line cannot attack a width_01-07/12 victim
   M6_60:double = 0.16; // Min length of width_01-15 lines
   M6_62:double = 0.14; // Min edge length of width_01-07/12 line
   M6_63:double = 0.12; // Min length of width_10 nub
   M6_65:double = 0.16; // Min length of holes
   M6_70:double = 0.018; // Minimum segment length
   M6_71:double = 0.1; // Minimum length of at least one segment, when two segments are adjacent at a corner
   M6_72:double = 0; // A segment can be smaller than M6_70 if it has two adjacent segments >= M6_73
   M6_73:double = 0.35; // Minimum segment lengths for rule M6_72
   M6_80:double = 0.056; // Min Corner-to-corner space, when corners have no overlap
   M6_81:double = 0.056; // Min Internal corner-to-corner width 
   M6_82:double = 0.09; // Min Width between facing concave corner extensions of opposite directions 
   M6_83:double = 0.09; // Min width of notched line section
   M6_84:double = 0.124; // Rule M6_83 applies to notch length less than M6_84
   M7_00:double = 0.08; // width_00 value (PGD only)
   M7_01:double = 0.056; // width_01 value (PGD only)
   M7_02:double = 0.06; // width_02 value (PGD only)
   M7_03:double = 0.084; // width_03 value (PGD/OGD)
   M7_04:double = 0.12; // width_04 value (PGD only)
   M7_05:double = 0.15; // width_05 value (PGD only)
   M7_06:double = 0.168; // width_06 value (PGD only)
   M7_07:double = 0.18; // width_07 value (PGD only)
   M7_08:double = 0.256; // width_08 value (PGD only)
   M7_09:double = 0.28; // width_09 value (PGD only)
   M7_21:double = 0.056; // width_01/02 to width_01/02 space range1 min
   M7_22:double = 0.07; // width_01/02 to width_01/02 space range1 max
   M7_23:double = 0.23; // width_00/01 to width_00-09 space range2 min
   M7_24:double = 0.251; // width_00/01 to width_00-09 space range2 max
   M7_25:double = 0.4; // width_00/01 to width_00-09 unrestricted space min
   M7_26:double = 0.056; // width_01/02 to width_03/04/05/06/07 space range1 min
   M7_27:double = 0.08; // width_01/02 to width_03/04/05/06/07 space range1 max
   M7_31:double = 0.074; // width_03/04 to width_03/04 unrestricted space (min)
   M7_32:double = 0.06; // width_03/0405/06/07 to width_05/06/07 unrestricted space (min)
   M7_35:double = 0.09; // width_03 to width_03 unrestricted space (min) 
   M7_37:double = 0.09; // Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M7_38
   M7_38:double = 0.168; // Min unrestricted space for rule M7_37
   M7_41:double = 0.09; // width_01/02/03/04/05/06/07 to width_01/02/03/04/05/06/07 end-to-end space (min)
   M7_51:double = 0.06; // width_03 attacker to width_01/02/03/04/05/06/07 victim unrestricted space OGD (min)
   M7_52:double = 0.09; // width_01/02/03/04/05/06/07 attacker to width_03 victim unrestricted space PGD (min)
   M7_60:double = 0.204; // Min length for all widths
   M7_65:double = 0.42; // Min length of holes
   M7_70:double = 0.026; // Minimum segment length
   M7_71:double = 0.116; // Minimum length of at least one segment, when two segments are adjacent at a corner
   M7_72:double = 0; // A segment can be smaller than M7_70 if it has two adjacent segments >= M7_73
   M7_73:double = 0.5; // Minimum segment lengths for rule M7_72
   M7_74:double = 0.09; // Minimum M7_72 segment to line end space
   M7_80:double = 0.079; // Min Corner-to-corner space, when corners have no overlap
   M7_81:double = 0.079; // Min Internal corner-to-corner width 
   M7_82:double = 0.084; // Min Width between facing concave corner extensions of opposite directions 
   M7_83:double = 0.084; // Min width of notched line section
   M7_84:double = 0.168; // Rule M7_83 applies to notch length less than M7_84
   M7err_00:double = 0.08; // Metal7 width_00 value (PGD only)
   M7err_01:double = 0.088; // Metal7 width_01 value (PGD only)
   M7err_08:double = 0.256; // Metal7 width_08 value (PGD only)
   M8_00:double = 0.08; // width_00 value (OGD only)
   M8_01:double = 0.126; // width_01 value (OGD only)
   M8_02:double = 0.104; // width_02 value (OGD only)
   M8_03:double = 0.12; // width_03 value (OGD/PGD)
   M8_04:double = 0.144; // width_04 value (OGD only)
   M8_05:double = 0.16; // width_05 value (OGD only)
   M8_06:double = 0.2; // width_06 value (OGD only)
   M8_07:double = 0.24; // width_07 value (OGD only)
   M8_08:double = 0.264; // width_08 value (OGD only)
   M8_09:double = 0.714; // width_09 value (OGD only)
   M8_10:double = 0.798; // width_10 value (OGD only)
   M8_121:double = 0.126; // width_06 to width_06 space, fixed space exception (fixed value)
   M8_20:double = 0; // width_01 wire cannot be sandwiched between two width_03/05/06/09/10 wires at min space on both sides
   M8_21:double = 0.08; // width_00 to width_00-05 space range1 min
   M8_22:double = 0.1; // width_00 to width_00-05 space range1 max
   M8_23:double = 0.23; // width_00 to width_00-08 space range2 min
   M8_24:double = 0.251; // width_00 to width_00-08 space range2 max
   M8_25:double = 0.4; // width_00 to width_00-08 unrestricted space min
   M8_26:double = 0.08; // width_00 to width_06/07/08 space range1 min
   M8_27:double = 0.11; // width_00 to width_06/07/08 space range1 max
   M8_32:double = 0.08; // width_02-08 to width_02-08 unrestricted space (min)
   M8_35:double = 0.12; // width_03 to width_03 unrestricted space (min) 
   M8_37:double = 0.12; // Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M8_38
   M8_38:double = 0.25; // Min unrestricted space for rule M8_37
   M8_41:double = 0.12; // Metal8 end-to-end space (min)
   M8_42:double = 0.198; // Metal8 end-to-end space for width_01 line to any line (min)
   M8_50:double = 0; // Width_02/03 attacker (PGD) to width_01 victim (OGD) is not allowed.  Width_01 victim must be shielded by parallel rectangular-only width_03/05/06/09/10 wire.
   M8_51:double = 0.08; // width_03 attacker to width_00-08 victim unrestricted space OGD (min)
   M8_52:double = 0.12; // width_00-08 attacker to width_03 victim unrestricted space PGD (min)
   M8_60:double = 0.21; // Min length for all widths
   M8_65:double = 0.44; // Min length of holes
   M8_70:double = 0.04; // Minimum segment length
   M8_71:double = 0.08; // Minimum length of at least one segment, when two segments are adjacent at a corner
   M8_80:double = 0.113; // Min Corner-to-corner space, when corners have no overlap
   M8_81:double = 0.113; // Min Internal corner-to-corner width 
   M8_82:double = 0.12; // Min Width between facing concave corner extensions of opposite directions 
   M8_83:double = 0.12; // Min width of notched line section
   M8_84:double = 0.24; // Rule M8_83 applies to notch length less than M8_84
   M8err_00:double = 0.08; // Metal8 width_00 value (OGD only)
   M8err_09:double = 0.3; // Metal8 width_09 value (OGD only)
   M8err_21:double = 0.084; // BDW-specific Metal8 min space (values less than this are disallowed)
   M9_00:double = 0.08; // width_00 value (PGD only)
   M9_01:double = 0.54; // M9 width, minimum
   M9_02:double = 0.11; // width_02 value (PGD only)
   M9_03:double = 0.124; // width_03 value (PGD)
   M9_04:double = 0.148; // width_04 value (PGD/OGD)
   M9_05:double = 0.168; // width_05 value (PGD only)
   M9_06:double = 0.192; // width_06 value (PGD only)
   M9_07:double = 0.212; // width_07 value (PGD only)
   M9_08:double = 0.236; // width_08 value (PGD only)
   M9_09:double = 0.3; // width_09 value (PGD only)
   M9_121:double = 0.126; // width_07 to width_07 space, fixed space exception
   M9_20:double = 0; // width_01 wire cannot be sandwiched between two width_04/06/07/08 wires at min space on both sides
   M9_21:double = 0.08; // width_00 to width_00-06 space range1 min
   M9_22:double = 0.1; // width_00 to width_00-06 space range1 max
   M9_23:double = 0.23; // width_00 to width_00-09 space range2 min
   M9_24:double = 0.251; // width_00 to width_00-09 space range2 max
   M9_25:double = 0.4; // width_00 to width_00-09 unrestricted space min
   M9_26:double = 0.08; // width_00 to width_07-09 space range1 min
   M9_27:double = 0.11; // width_00 to width_07-09 space range1 max
   M9_32:double = 0.08; // width_02-09 to width_02-09 unrestricted space (min)
   M9_35:double = 0.12; // width_04 to width_04 unrestricted space (min) 
   M9_37:double = 0.12; // Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M9_38
   M9_38:double = 0.25; // Min unrestricted space for rule M9_37
   M9_41:double = 0.12; // Metal8 end-to-end space (min)
   M9_42:double = 0.198; // Metal9 end-to-end space width_01 line to any line (min)
   M9_43:double = 0.13; // Min M9 coverage of Square Via8 orthogonal edge
   M9_50:double = 0; // width_02/04 attacker (OGD) to width_01 victim (PGD) is not allowed.  Width_01 victim must be shielded (physically) by parallel rectangular-only width_04/06/07/08 wire.
   M9_51:double = 0.08; // width_04 attacker to width_00-09 victim unrestricted space PGD (min)
   M9_52:double = 0.12; // width_00-09 attacker to width_04 victim unrestricted space OGD (min)
   M9_60:double = 0.21; // Min length for all widths
   M9_65:double = 0.44; // Min length of holes
   M9_70:double = 0.04; // Minimum segment length
   M9_71:double = 0.08; // Minimum length of at least one segment, when two segments are adjacent at a corner
   M9_80:double = 0.113; // Min Corner-to-corner space, when corners have no overlap
   M9_81:double = 0.113; // Min Internal corner-to-corner width 
   M9_82:double = 0.148; // Min Width between facing concave corner extensions of opposite directions 
   M9_83:double = 0.148; // Min width of notched line section
   M9_84:double = 0.24; // Rule M9_83 applies to notch length less than M9_84
   MC_01:double = 0; // Outer edges of the PRS cells must be line-on-line with the EDM cells boundary.
   MC_02:double = 0; // CE1/2 cannot overlap the PRS cells 
   MC_03:double = 0; // CE1/2 cannot overlap the logo cells
   MIM_01:double = 2; // CE1/2 width min
   MIM_02:double = 1; // CE1/2 space min
   MIM_03:double = 0.16; // Minimum offset between CE1-CE2 edges
   MIM_04:double = 1; // Minimum overlap between CE1-CE2 layers
   MIM_05:double = 0; // CE1-CE2 edges cannot cross each other
   MIM_06:double = 0; // CE2 must be between CE1 and CE3 (minimum size holes around via11 are the exception to this requirement)
   MIM_07:double = 0; // CE2 must enclose CE1 edges
   MIM_22:double = 10.78; // Min required CE1/2 hole area (sq um)
   MIM_23:double = 1; // Minimum CE1/2 jog length
   MIM_25:double = 64; // Min required CE1/2 area (sq um)
   MIM_26:double = 250; // Max extent of CE1/2
   MIM_51:double = 0.4; // Minimum CE1/2 enclosure of Via12 (all directions)
   MIM_52:double = 1; // Min Via12 space to unconnected CE1/2
   MIM_53:double = 0; // Via12 cannot land on overlapping CE1/2
   MIM_54:double = 1.76; // Min Via12 space to unconnected CE1, when Via12 is connected to 0 or 1 capacitor plates
   MIM_55:double = 1.6; // Min Via12 space to unconnected CE2, when Via12 is connected to 0 or 1 capacitor plates
   MIM_61:double = 0; // CE1/2 electrode layers cannot be used as a resistor, must have a M12 or TM1 shunt
   MIM_62:double = 0; // CE1 must be at a higher potential than CE2 (except for stacked HV/EHV/UHV MIM caps)
   MIM_63:double = 0; // CE1/2 cannot be connected to HV/EHV/UHV unless properly stacked
   MIM_71:double = 0; // In double stacked MIM cap configuration, HV/EHV(CE1)-floating(CE2) and floating(CE2)-VSS(CE1) caps are connected by a common floating CE2
   MIM_72:double = 1.2; // Max area ratio of VSS CE1-floating CE2 cap to HV/EHV CE1-floating CE2 cap in a double stack
   MIM_73:double = 1; // Min area ratio of VSS CE1-floating CE2 cap to HV/EHV CE1-floating CE2 cap in a double stack
   MIM_74:double = 0; // CE1 and CE3 must be shorted when used as a parallel capacitor and CE1/3 must be at a higher potential than CE2 (max voltage 1.0V - nom voltage)
   MIM_75:double = 0; // CE1/2/3 cannot be used as a series cap with CE2 floating, there cannot be a floating plate in any capacitor configuration
   MIM_81:double = 0; // In triple stacked MIM cap configuration, UHV(CE1)-floating(CE2), floating(CE2)-floating(CE1), floating(CE1)-VSS(CE2) caps are connected by common floating CE1/CE2
   MIM_82:double = 1.2; // Max area ratio of middle cap (floating CE2-floating CE1) to top (UHV CE1-floating CE2) or bottom (floating CE1-VSS CE2) caps in a triple stack
   MIM_83:double = 1; // Min area ratio of middle cap (floating CE2-floating CE1) to top (UHV CE1-floating CE2) or bottom (floating CE1-VSS CE2) caps in a triple stack
   MJ0_01:double = 0.132; // MTJID enclosure of MJ0 in OGD (fixed)
   MJ0_02:double = 0; // No cuts allowed on first two dummy Metal2 above/below MJ0 within MTJID
   MJ0_03:double = 0; // No GCN, V1, M2 allowed inside MJ0
   MJ0_04:double = 0; // No jogs allowed in MTJID
   MJ0_05:double = 0.024; // Min space from dummy M2 to MJ0 (in PGD)
   MJ0_06:double = 0.052; // Max space from dummy M2 to MJ0 (in PGD)
   MJ0_07:double = 0.024; // Fixed space from dummy M2 end to MJ0 (in OGD)
   MJ0_08:double = 0.4; // Minimum space between MJ0 
   MJ0_09:double = 0.42; // Minimum width of MJ0
   MTJ_01:double = 0; // M2 KeepGenAway layer (TC only) needs to be line-on-line with MTJID
   MTJ_02:double = 0; // M2 keepout layer (STT_MRAM circuit array) needs to be line-on-line with MTJID
   MTJ_03:double = 0.018; // MTJ fixed width (in OGD)
   MTJ_04:double = 0.06; // MTJ fixed length (in PGD)
   MTJ_05:double = 0.14; // MTJ fixed pitch (in OGD) in large bitcell (under STTRAMID2)
   MTJ_06:double = 0.07; // MTJ minimum pitch (in OGD) in small bitcell (under STTRAMID1)
   MTJ_07:double = 0.126; // MTJ fixed pitch (in PGD)
   MTJ_08:double = 0; // Inside a single MJ0, either large bitcells or small bitcells are allowed - not BOTH
   MTJ_09:double = 0.2; // MJO enclosure of MTJ (only allowed value)
   MTJ_10:double = 0; // STTRAMID1, STTRAMID2 must be line-line with MTJID
   MTJ_11:double = 0; // Via2 must be centered on MTJ
   MTJ_12:double = 0.046; // Via2 length (in OGD) allowed over MTJ
   MTJ_13:double = 0.032; // Via2 width (in PGD) allowed over MTJ
   MTJ_14:double = 0; // M1 must be centered under MTJ
   MTJ_15:double = 0.012; // MTJ enclosure of M1 (both OGD and PGD), only allowed value
   NW_01:double = 0.021; // Min N-well space to N+ active (all directions), P+ tap (OGD)
   NW_03:double = 0.021; // Min N-well enclosure of P+ active (all directions), N+ tap (OGD)
   NW_12:double = 0.126; // Min N-well width
   NW_128:double = 5.6; // Maximum distance from P active diff with gate in the well to a well tap, for I/O and high voltage wells and pad-connected diffusions, also applies to all non-logic gates such as thick gate.
   NW_129:double = 5.6; // Maximum distance from N active diff with gate in the p-well to a sub tap, for I/O and high voltage wells and pad-connected diffusions, also applies to all non-logic gates such as thick gate.
   NW_14:double = 0.126; // Min N-well space
   NW_17:double = 0.05; // Min required drawn N-well area (in sq um)
   NW_18:double = 0.05; // Min required drawn N-well hole area (in sq um)
   NW_21:double = 0.06; // Min N+ active diffusion space to high voltage nwells
   NW_22:double = 0.06; // Min P+ active diffusion enclosure by high voltage nwell
   NW_23:double = 0.107; // Min N-well convex corner enclosure of P+ active diffusion corner
   NW_24:double = 0.107; // Min N-well concave corner space to N+ active diffusion corner
   NW_25:double = 0.126; // Minimum N-well segment lengths, when both adjacent at a corner (if one segment is <NW_25, then the other segment must be >=NW_25)
   NW_28:double = 56; // Maximum distance from P active diff with gate in the well to a well tap, for nominal voltage wells
   NW_29:double = 56; // Maximum distance from N active diff with gate in the p-well to a sub tap, for nominal voltage wells
   NW_30:double = 0.378; // Minimum nwell pitch
   NW_31:double = 0.042; // Min N-well space to P+ tap (PGD)
   NW_33:double = 0.042; // Min N-well enclosure of N+ tap (PGD)
   NW_35:double = 0.144; // Maximum nwell length when width is less than NW_35
   NW_36:double = 0.144; // Maximum N-well facing edge length, if space is less than NW_36
   NW_41:double = 0.168; // N-well segment lengths less than this value are subject to rules NW_42/43 on the adjacent edges
   NW_42:double = 0.042; // Forbidden adjacent edge length range min (>)
   NW_43:double = 0.126; // Forbidden adjacent edge length range max (<)
   NW_55:double = 0.154; // Min N-well enclosure of N+ tap diff (in all directions) near short n-well jog <=NW_57
   NW_56:double = 0.154; // Min N-well space to P+ tap diff (in all directions) near short n-well jog <=NW_57
   NW_57:double = 0.112; // Max length of short NWL jog for which rules NW_55,NW_56 apply
   NW_58:double = 0.154; // Min N+ tap diff or P+ tap diff distance to NWL edge when facing an opposite-type tap spaced at <NW_58 from the NWL edge
   NW_59:double = 12; // Maximum allowed open/unfilled N-well area of >= NW_60 width (in sq um)
   NW_60:double = 2.4; // Runset check value for NW_59 (Max width of open/unfilled NWL area for which rule NW_59 applies)
   NW_71:double = 300; // Maximum N-well area (n-well sections < NW_73 width are ignored before the NW_71 check), sq um
   NW_73:double = 8; // N-well width exception for rule NW_71 (um)
   NW_74:double = 4; // N-well holes of area <= NW_74 are closed before the NW_71 check (um^2)
   PC_00:double = 0; // Only Rectangular Polycon shape is allowed and only allowed with length perpendicular to gate-direction.
   PC_01:double = 0.032; // Polycon width, fixed value
   PC_02:double = 0.054; // Min required Polycon length
   PC_04:double = 0; // All Polycon center lines must be on a 21nm pitch grid across the whole die
   PC_20:double = 0.025; // Polycon line extension for all polycon side-to-side space checks (except PC_91/92 space check which uses PC_93 extension)
   PC_21:double = 0.052; // Min Polycon side-to-side space
   PC_23:double = 0.115; // Polycon side-to-side forbidden space (fixed value)
   PC_25:double = 0.05; // Min Polycon end-to-end space, when facing ends are aligned
   PC_31:double = 0.12; // Min Polycon end-to-end (ETE) space, when facing ends are not aligned (ends extended by PC_32)
   PC_32:double = 0.025; // Polycon line end extensions for PC_31 check
   PC_33:double = 0.07; // Max Polycon ETE space, on at least one end, when Polycon is short (length < PC_34)
   PC_34:double = 0.08; // Max Polycon length for PC_33 check (<)
   PC_35:double = 0.04; // Min offset between non-overlapping line-ends in opposite directions, when at a PC_21 side-to-side space
   PC_36:double = 0.018; // Minimum overlap between line-ends in opposite directions, when at a PC_21 side-to-side space. PC_36 overlap is allowed when the ETE space to the same-track GCN is >= PC_56 or the length of all the adjacent GCNs is >=PC_57
   PC_41:double = 0.032; // Poly overlap of polycon (PGD) for PC_42 (fixed value)
   PC_42:double = 0.024; // Min Polycon end overlap of poly for PC_41
   PC_43:double = 0.023; // Min Polycon side space to poly line-end (PGD)
   PC_44:double = 0.012; // Min Polycon end space to poly side (OGD)
   PC_444:double = 0.041; // Min Polycon side space to poly line-end in TG/TGULV pitch regions
   PC_45:double = 0.019; // Min Poly overlap of polycon (PGD) for PC_46
   PC_46:double = 0.03; // Min Polycon end extension beyond poly side for PC_45
   PC_50:double = 0; // End-to-End space < PC_51 cannot be enclosed by adjacent-GCN overlaps < PC_52 on 3 or more corners (out of 4)
   PC_51:double = 0.052; // End-to-End space that triggers PC_50 check (<)
   PC_52:double = 0.064; // Overlap between adjacent (PC_21-spaced) line ends in opposite directions that trigger the PC_50 check (<)
   PC_53:double = 0; // If Polycon length is < PC_34, and end-to-end (ETE) space is <= PC_54, then any adjacent line-ends at PC_21 side spacing must be fully aligned with the ETE space
   PC_54:double = 0.06; // Max Polycon ETE space for PC_53 check (<=)
   PC_55:double = 0.06; // If ETE space is < PC_56 and length is < PC_57, then min overlap between line <PC_57 and an adjacent line at PC_21 side spacing must be >= PC_55
   PC_56:double = 0.06; // Min Polycon end-to-end space to allow PC_36 overlap (in the adjacent track)
   PC_57:double = 0.088; // Min length of the 3 adjacent GCNs to allow PC_36 overlap
   PC_61:double = 0.026; // Min Polycon side space to active gate/diffusion OGD edge (no restriction for dummy gates)
   PC_81:double = 0.026; // Min Polycon space to Diffcon
   PC_82:double = 0.032; // Diffcon overlap of Polycon in PGD for PC_83, fixed value
   PC_83:double = 0.023; // Min Polycon end overlap of Diffcon in OGD for PC_82
   PC_84:double = 0.016; // Min Diffcon overlap of Polycon in PGD for PC_85
   PC_85:double = 0.031; // Min Polycon end extension beyond Diffcon side (OGD) for PC_84
   PC_91:double = 0; // =PC_21 and =PC_92 PGD spaces on opposite sides of a GCN are not allowed
   PC_92:double = 0.094; // Space for the PC_91 check (fixed value)
   PC_93:double = 0.05; // Polycon line extension (OGD) for PC_91/92 side-to-side space checks only
   PG_01:double = 0.042; // Poly check grid width: fixed value, OGD only
   PG_02:double = 0.14; // Poly check grid Pitch: fixed value, OGD only
   PG_03:double = 0; // Poly check grid must be continuous across the complete length of the active die
   PG_04:double = 0.049; // Poly check grid OGD space to edge of active die (EOA), fixed value
   PG_05:double = 0; // Poly check grid must centered in drawn digital Poly space
   PL_00:double = 0; // Only Rectangular, Uni-directional Poly shape is allowed
   PL_01:double = 0.028; // Poly width, ONLY ALLOWED value
   PL_02:double = 0.07; // Poly pitch, ONLY ALLOWED value
   PL_03:double = 0.09; // Min required Poly length with no restrictions
   PL_04:double = 0.036; // Poly Short end-to-end space, fixed value (cannot be isolated)
   PL_05:double = 0.078; // Poly Long end-to-end space, fixed value
   PL_06:double = 0.26; // Poly Long end-to-end space, maximum of allowed range
   PL_07:double = 0.078; // Poly Medium end-to-end space, fixed value
   PL_08:double = 0.099; // Poly Long end-to-end space, minimum of allowed range
   PL_09:double = 0; // End-to-end space between PL_05 and PL_08 is not allowed
   PL_100:double = 2.1; // Floating poly overlapping diffusion cannot be next to a signal TCN if >= this length
   PL_101:double = 0.07; // Max width of long space region that triggers PL_102/103 checks
   PL_102:double = 0.007; // Forbidden offset between the short space region ends (min)
   PL_103:double = 0.047; // Forbidden offset between the short space region ends (max)
   PL_104:double = 0.14; // Minimum space between type B configuration synthesized regions
   PL_105:double = 0; // Need an even number of rectangular polygons (synthesized from drawn cuts plus oversized PL_04's) in the loop 
   PL_106:double = 0.068; // Oversize in PGD of narrow (PL_04) cut for PL_105 check
   PL_11:double = 0.024; // Min Poly endcap length (poly line-end extent beyond diffusion edge)
   PL_12:double = 0; // All Gate-SD edges and taps require Adjacent Poly (with max pullback defined by PL_13/15)
   PL_13:double = 0.018; // Maximum pullback of Adjacent Dummy Poly line-end from Gate-STI (diffusion) edge
   PL_15:double = 0.018; // Maximum pullback of Adjacent Dummy Poly line-end from Tap diffusion edge
   PL_16:double = 0.042; // Min offset between adjacent poly line-ends having the same line-end direction
   PL_24:double = 0; // NWL edge parallel to poly must be centered in poly space
   PL_25:double = 0.018; // Min Poly line-end space to diffusion PGD
   PL_51:double = 0; // Poly overlapping a S/D, tap diffusion must be either (1) shorted to the overlapping S/D, tap or (2) unconnected  
   PL_52:double = 0; // Unconnected Poly can have multiple overlapping diffusions if all the diffusions are connected to the same node.
   PL_55:double = 0; // Poly jumper between two diffusions is not allowed.
   PL_61:double = 0.036; // Min overlap of any poly cuts 1 poly pitch apart
   PL_62:double = 0; // A PL_04 adjacent to a long cut on one side must also be adjacent to a PL_04 or a long cut on its other side.  PL_04 cannot be isolated.
   PL_63:double = 0.069; // Min offset between any poly cuts 1 poly pitch apart
   PL_66:double = 0; // PL_07 cuts must be aligned
   PL_67:double = 0.048; // Min offset between PL_07 cuts
   PL_68:double = 0.036; // Fixed overlap between the PL_07 cuts
   PL_69:double = 0; // A PL_07 adjacent to a PL_04 must be centered (aligned centerlines) or else satisfy PL_16 (aligned on one side)
   PL_70:double = 0; // Cannot have a single isolated PL_04 next to a centered PL_07 (i.e. the PL_04 must also be adjacent to another ETE space on its other side)
   PL_71:double = 0; // A centered PL_07 ETE space cannot contain a GCN
   PL_91:double = 0; // Within each cell, all gates are checked to be in a single direction.
   PL_92:double = 0; // At full chip DRC, all gates are checked to be in absolute horizontal direction.
   RDL_01:double = 2; // RDL wire (217;0) width, minimum
   RDL_02:double = 6; // RDL wire width, maximum (for location other than LMI pad or TSV cap) 
   RDL_03:double = 15.556; // RDL width/height of LMI PAD (marked by RDLPAD ID (217;40)), only allowed value
   RDL_04:double = 10; // RDL width/height for TSV CAP (marked by RDLCAP ID (217;10)), only allowed value
   RDL_05:double = 1.98; // RDL wire space, minimum
   RDL_06:double = 12.98; // RDL distance from LMI PAD center (center of (217;40)) to unconnected RDL wire, minimum 
   RDL_07:double = 0.25; // RDL, RDLCAP coverage of TSV on all sides, minimum
   RDL_08:double = 0; // RDL wire offset from LMI PAD center axis, maximum
   RDL_09:double = 2.23; // RDL wire edge to TSV CAP edge distance, minimum
   RDL_10:double = 5.222; // RDL wire vertex space to LMI PAD, minimum
   RDL_11:double = 2; // RDL wire vertex space to TSV CAP, minimum
   RDL_12:double = 0; // Only one RDL wire connection allowed per semicircle for an LMI PAD or TSV CAP
   RDL_13:double = 0; // RDL wire jog length (217;0), minimum value
   RDL_14:double = 1.98; // RDL space between  TSV CAP (edge of (217;10)) and RDL wire (unconnected), minimum
   RDL_15:double = 1.98; // Space between LMI pad and RDL line
   RDL_16:double = 350; // Maximum RDL wire segment length
   SDC_03:double = 0.036; // Diffcon end-to-end (ETE) space (min) (under STTRAMID1/2, exception to DC_03)
   SDC_11:double = 0.004; // Fixed TCN extension beyond drawn N-diffusion (top) (under STTRAMID1/2)
   SDC_111:double = 0.002; // Fixed TCN extension beyond drawn N-diffusion (bottom) (under STTRAMID1/2)
   SD_01:double = 0; // STACKDEVTYPE ID must be rectangular in shape
   SD_02:double = 0; // STACKDEVTYPE ID must be drawn coincident with diffusion OGD inside edge
   SD_03:double = 0; // STACKDEVTYPE ID must be drawn coincident with poly PGD inside edge
   SD_04:double = 0; // Any TCN interacting with STACKDEVTYPE ID cannot have viacon 
   SK_12:double = 0; // Disallowed V1/V2 non-redundant stack, if under TV1 and max via0 density > 5% (350X350nm window) and metal2 density < 40% (500X500nm window)
   SK_22:double = 0; // Disallowed V2/V3 non-redundant stack, if under TV1 and max via1 density > 5% (350X350nm window) and metal3 density < 40% (500X500nm window)
   SK_31:double = 0; // Disallowed V3/V4 non-redundant stack, if under TV1 and max via1 density > 6% (350X350nm window) and metal4 density < 40% (500X500nm window)
   SK_32:double = 0; // Disallowed V3/V4 non-redundant stack, if under TV1 and max via2 density > 5% (350X350nm window) and metal4 density < 40% (500X500nm window)
   SK_41:double = 0; // Disallowed V4/V5 non-redundant stack, if under TV1 and max via2 density > 6% (350X350nm window) and metal5 density < 40% (500X500nm window)
   SK_42:double = 0; // Disallowed V4/V5 non-redundant stack, if under TV1 and max via3 density > 5% (350X350nm window) and metal5 density < 40% (500X500nm window)
   SK_51:double = 0; // Disallowed V5/V6 non-redundant stack, if under TV1 and max via3 density > 6% (350X350nm window) and metal6 density < 40% (500X500nm window)
   SK_52:double = 0; // Disallowed V5/V6 non-redundant stack, if under TV1 and max via4 density > 5% (350X350nm window) and metal6 density < 40% (500X500nm window)
   SK_61:double = 0; // Disallowed V6/V7 non-redundant stack, if under TV1 and max via4 density > 4% (490X490nm window)  and metal7 density < 40% (500X500nm window)
   SK_62:double = 0; // Disallowed V6/V7 non-redundant stack, if under TV1 and max via5 density > 3% (490X490nm window)  and metal7 density < 40% (500X500nm window)
   SK_71:double = 0; // Disallowed V7/V8 non-redundant stack, if under TV1 and max via5 density > 4% (490X490nm window) and metal8 density < 40% (500X500nm window)
   SK_72:double = 0; // Disallowed V7/V8 non-redundant stack, if under TV1 and max via6 density > 3% (490X490nm window) and metal8 density < 40% (500X500nm window)
   SK_81:double = 0; // Disallowed V8/V9 non-redundant stack, if under TV1 and max via6 density > 4% (490X490nm window) and metal9 density < 40% (500X500nm window)
   SK_82:double = 0; // Disallowed V8/V9 non-redundant stack, if under TV1 and max via7 density > 5% (600X600nm window) and metal9 density < 40% (500X500nm window)
   SM0_41:double = 0.042; // End-to-end space (fixed value), when line-ends are completely aligned and lines are same type (B-B, C-C),
   SM0_60:double = 0.063; // Fixed length of M0 line (any type, any width) 
   SM0_82:double = 0; // Metal0 line-end overlap of poly, fixed value (edge touching M0)
   SM0_821:double = 0.007; // Metal0 line-end distance from poly, fixed value (other edge)
   SM3_41:double = 0.042; // End-to-end space (min), when line-ends are completely aligned and lines are same type (B-B, C-C)
   SM3_47:double = 0.046; // Lines != SM3_47 wide cannot be isolated, must be next to another narrow or wide line
   SNW_29:double = 10; // NW_29 relaxation for STT MRAM
   SV3_97:double = 0.094; // Min V3TA/TB/TC to V3TA/TB/TC space PGD (this is an exception to V3_23)
   TDC_04:double = 0.011; // Diffcon side space to Poly, ONLY ALLOWED value 
   TDC_21:double = 0.21; // Diffcon pitch, ONLY ALLOWED value
   TEDM_01:double = 0; // Catch-cup guard ring must be present at top level Cell
   TEDM_02:double = 0; // Area that is 1.512um outside from the OGD edge of Catch-cup guard ring and 1.68um outside from the PGD edge of Catch-cup guard ring is occupied by TSV EDM ring
   TEDM_04:double = 108; // Maximum number of Fill cells per OGD die edge
   TEDM_06:double = 2; // Maximum number of OGD fill cell that can be placed consecutively
   TEDM_07:double = 1; // Maximum number of PGD diode staircase cell that can be placed consecutively
   TEDM_08:double = 1; // Maximum number of OGD diode staircase cell that can be placed consecutively
   TEDM_11:double = 1; // Number of I/O cell placement allowed (OGD die TSV EDM ring only)
   TEDM_12:double = 0; // Corner cells can only reside in die corners
   TEDM_13:double = 0; // EDM cells cannot overlap each other
   TEDM_14:double = 0; // EDM cells dimension not drawn according to spec
   TEDM_15:double = 25; // Every 25th OGD staircase cell must be a diode staircase cell
   TEDM_16:double = 1; // There should be at least one PGD staircase cells in each PGD part of EDM ring
   TEDW_01:double = 6.72; // Corner Cell x
   TEDW_02:double = 6.048; // Corner Cell y
   TEDW_03:double = 0.84; // OGD Fill Cell x
   TEDW_04:double = 1.512; // OGD Fill Cell y
   TEDW_07:double = 13.44; // OGD IO Cell x
   TEDW_08:double = 1.512; // OGD IO Cell y
   TEDW_11:double = 1.68; // PGD STAIRCASSE DIODE Cell x
   TEDW_12:double = 9.072; // PGD STAIRCASSE DIODE Cell y
   TEDW_13:double = 13.44; // OGD STAIRCASSE DIODE Cell x
   TEDW_14:double = 1.512; // OGD STAIRCASSE DIODE Cell y
   TEDW_15:double = 1.68; // PGD STAIRCASSE Cell x
   TEDW_16:double = 9.072; // PGD STAIRCASSE Cell y
   TEDW_17:double = 13.44; // OGD STAIRCASSE Cell x
   TEDW_18:double = 1.512; // OGD STAIRCASSE Cell y
   TM1_01:double = 5.5; // TM1 width allowed range min
   TM1_02:double = 5.5; // TM1 space allowed range min
   TM1_03:double = 10.5; // TM1 space allowed range max
   TM1_04:double = 10.5; // Max TM1 edge length that can violate the max space rule 
   TM1_21:double = 50; // TM1 width allowed range max
   TM1_22:double = 250; // Min required TM1 hole area (sq um)
   TM1_23:double = 0.1; // Minimum TM1 segment lengths, when both adjacent at corners
   TM1_25:double = 1000; // Min required TM1 area with a TV1 (sq um)
   TM1_26:double = 200; // Min required TM1 area (sq um)
   TM1_51:double = 3; // TM1 coverage of Via12 (all directions)
   TM1_60:double = 0; // TM1 space above inductors templates has special handling
   TPC_42:double = 0.084; // Min Polycon end overlap of poly for PC_41
   TPC_44:double = 0.016; // Min Polycon end space to poly side
   TPC_46:double = 0.108; // Min Polycon overlap with poly (in OGD) for PC_45
   TPL_01:double = 0.16; // Poly width, ONLY ALLOWED value
   TPL_02:double = 0.21; // Poly pitch, ONLY ALLOWED value
   TPL_04:double = 0; // Short poly end-to-end space (PL_04) not allowed in TG pitch region
   TPL_11:double = 0.045; // Min Poly endcap length
   TPL_13:double = 0; // Maximum pullback of Adjacent Dummy Poly line-end from Gate-STI (diffusion) edge
   TPL_15:double = 0; // Maximum pullback of Adjacent Dummy Poly line-end from Tap diffusion edge
   TPL_25:double = 0.078; // Min Poly end space to diffusion PGD
   TSV_01:double = 9.5; // TSV width, only allowed value
   TSV_02:double = 15.84; // TSV_02 for X73B (rusnet use only)
   TSV_03:double = 14.784; // TSV row-to-row separation within spine, only allowed value
   TSV_04:double = 5; // TSV rows in a single spine, only allowed value
   TSV_05:double = 182; // TSV columns in a single spine, only allowed value
   TSV_06:double = 0; // TSV must be centered on the catch cup
   TSV_07:double = 10; // Min transistor keepout zone from M1 catch cup grid (no performance impact)
   TSV_08:double = 6; // Min transistor keepout zone from M1 catch cup grid (15% performance degradation)
   TSV_10:double = 2; // Number of allowed TSV spines
   TSV_21:double = 15.12; // TSV-to-TSV separation within spine (in the direction of the spine), allowed value 1
   TSV_22:double = 15.96; // TSV-to-TSV separation within spine (in the direction of the spine), allowed value 2
   TSV_23:double = 16.8; // TSV-to-TSV separation within spine (in the direction of the spine), allowed value 3
   TSV_61:double = 15.12; // TSV catchcup size (in X) (runset use only)
   TSV_62:double = 14.784; // TSV catchcup size (in Y) (runset use only)
   TV1_31:double = 6; //  TV1A width, fixed value
   TV1_32:double = 30; //  TV1A length, fixed value
   TV1_51:double = 3; // Min TM1 enclosure of  TV1 (all directions)
   TV1_61:double = 0; // Only 1 TV1 allowed per bump, and each TV1 must be covered by a bump
   TX_01:double = 0; // TGOXID is only allowed over V3pitchID and V1pitchID
   TX_02:double = 0.48; // Min width of TGOXID in any direction
   TX_03:double = 0.48; // Min space between TGOXID in any direction
   TX_05:double = 0; // PGD edge of TGOXID must be drawn in the middle of the space between poly center lines
   TX_06:double = 0.039; // Min TGOXID enclosure of poly end, in PGD
   TX_07:double = 0.039; // Min TGOXID space to poly end, in PGD
   TX_08:double = 0; // Nwell inside TGOXID and outside TGOXID cannot interact
   TX_09:double = 0.252; // Min TGOXID enclosure of nwell inside
   TX_10:double = 0.252; // Min TGOXID space to nwell outside
   TX_11:double = 0.23; // Min TGOXID enclosure of active gate area inside TGOXID
   TX_12:double = 0.23; // Min TGOXID space to active gate area outside TGOXID
   TX_13:double = 0.48; // Min TGOXID space to XGOXID
   TX_21:double = 0; // V3pitchID or V1pitchID must always be covered by TGOXID as shown in transition rules
   UHV_01:double = 0.045; // Polycon space to Diffcon (min)
   UHV_02:double = 0.045; // VCN space to Diffcon (PGD), min
   UHV_04:double = 0.045; // VCN space to polycon (PGD), min
   UHV_05:double = 0.04; // VCN-VCN space (min)
   UHV_06:double = 0.042; // VCN-Via0 space (min)
   UHV_07:double = 0.045; // Via0-Via1 space (min)
   UHV_09:double = 0.041; // Via1-Via1 space (min)
   UHV_10:double = 0.036; // Via1-Metal2 space (min)
   UHV_11:double = 0.045; // Via1-Via2 space (min)
   UHV_12:double = 0.039; // Via2-Metal2 space (min)
   UHV_13:double = 0.041; // Via2-Via2 space (min)
   UHV_14:double = 0.036; // Via2-Metal3 space (min)
   UHV_15:double = 0.045; // Via2-Via3 space (min)
   UHV_16:double = 0.039; // Via3-Metal3 space (min)
   UHV_20:double = 0.043; // Via4-Via5 space (min)
   UHV_21:double = 0.041; // Via5-Metal5 space (min)
   UHV_34:double = 0.031; // Metal4-Metal4 space (min)
   UHV_36:double = 0.084; // Metal6-Metal6 space (min)
   UHV_40:double = 0.04; // VCN space to Diffcon side (OGD), min
   UHV_41:double = 0.042; // VCN space to Polycon end (OGD), min
   UHV_42:double = 0.037; // VCN-Metal0 space (min)
   UHV_43:double = 0.03; // Metal0-Metal0 space (min)
   UHV_44:double = 0.039; // Via0-Metal0 space (min)
   UHV_45:double = 0.036; // Via0-Via0 space (min)
   UHV_46:double = 0.033; // Via0-Metal1 space (min)
   UHV_47:double = 0.03; // Metal1-Metal1 space (min)
   UHV_48:double = 0.042; // Via1-Metal1 space (min)
   UHV_49:double = 0.031; // Metal2-Metal2 space (min)
   UHV_50:double = 0.031; // Metal3-Metal3 space (min)
   UHV_51:double = 0.041; // Via3-Via3 space (min)
   UHV_52:double = 0.036; // Via3-Metal4 space (min)
   UHV_53:double = 0.043; // Via3-Via4 space (min)
   UHV_54:double = 0.04; // Via4-Metal4 space (min)
   UHV_55:double = 0.045; // Via4-Via4 space (min)
   UHV_56:double = 0.041; // Via4-Metal5 space (min)
   UHV_57:double = 0.031; // Metal5-Metal5 space (min)
   UHV_58:double = 0.045; // Via5-Via5 space (min)
   UHV_59:double = 0.041; // Via5-Metal6 space (min)
   UHV_60:double = 0.053; // Via5-Via6 space (min)
   UHV_61:double = 0.055; // Via6-Metal6 space (min)
   UHV_62:double = 0.064; // Via6-Via7 space (min)
   UHV_63:double = 0.06; // Via7-Metal7 space (min)
   UL1_01:double = 0.14; // Minimum width of NU1/PU1 layer
   UL1_05:double = 0.0235; // Minimum required area of NU1/PU1 layer (sq um)
   UL1_06:double = 0.06; // Minimum required hole area of NU1/PU1 layer  (sq um)
   UL1_07:double = 0.07; // Unrestricted minimum segment lengths
   UL1_08:double = 0.042; // Restricted minimum segment lengths (has additional segment-to-segment requirements)
   UL1_09:double = 0.21; // Space between restricted segment lengths (>= UL1_08, <UL1_07) convex-convex, concave-concave corner
   UL1_10:double = 1; // Space between restricted segment lengths (>= UL1_08, <UL1_07) convex-concave corner
   UL1_11:double = 0.021; // NU1/PU1 enclosure of nulv/pulv gate (PGD)
   UL1_116:double = 0.0598; // NU1/PU1 convex corner enclosure of nulv/pulv gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge
   UL1_12:double = 0.021; // NU1/PU1 enclosure of nulv/pulv gate (OGD)
   UL1_13:double = 0.021; // NU1/PU1 space to non-n/pulv gate (PGD)
   UL1_14:double = 0.021; // NU1/PU1 space to non-n/pulv gate (OGD)
   UL1_15:double = 0; // NU1/PU1 PGD edge must be centered in poly space or poly width
   UL1_16:double = 0.066; // NU1/PU1 unrestricted convex corner enclosure of nulv/pulv gate
   UL1_17:double = 0.066; // NU1/PU1 concave corner enclosure of non-n/pulv gate
   UL1_31:double = 0.14; // Minimum space of NU1/PU1 layer
   UL1_32:double = 0.07; // NU1/PU1 layer is allowed to have coincident edges of length >=
   UL1_33:double = 0.07; // NU1/PU1 layer is allowed to have coincident corners with space >=
   UL1_34:double = 0; // NU1/PU1 layer is allowed to have point touch
   UNW_14:double = 0.48; // N-well space (min)
   UNW_21:double = 0.18; // N+ active diffusion space to ultra high voltage nwells (min)
   UNW_22:double = 0.18; // P+ active diffusion enclosure by ultra high voltage nwell (min)
   UV0_01:double = 0.14; // Minimum width of NV0/PV0 layer
   UV0_05:double = 0.0235; // Minimum required area of NV0/PV0 layer (sq um)
   UV0_06:double = 0.06; // Minimum required hole area of NV0/PV0 layer  (sq um)
   UV0_07:double = 0.07; // Minimum segment lengths
   UV0_08:double = 0.042; // Restricted minimum segment lengths (has additional segment-to-segment requirements)
   UV0_09:double = 0.21; // Space between restricted segment lengths (>= UV0_08, <UV0_07) convex-convex, concave-concave corner
   UV0_10:double = 1; // Space between restricted segment lengths (>= UV0_08, <UV0_07) convex-concave corner
   UV0_11:double = 0.021; // NV0/PV0 enclosure of nuv0/puv0 gate (PGD)
   UV0_116:double = 0.0598; // NV0/PV0 convex corner enclosure of nuv0/puv0 gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge
   UV0_12:double = 0.021; // NV0/PV0 enclosure of nuv0/puv0 gate (OGD)
   UV0_13:double = 0.021; // NV0/PV0 space to non-n/puv0 gate (PGD)
   UV0_14:double = 0.021; // NV0/PV0 space to non-n/puv0 gate (OGD)
   UV0_15:double = 0; // NV0/PV0 PGD edge must be centered in poly space or poly width
   UV0_16:double = 0.066; // NV0/PV0 unrestricted convex corner enclosure of nuv0/puv0 gate
   UV0_17:double = 0.066; // NV0/PV0 concave corner enclosure of non-n/puv0 gate
   UV0_31:double = 0.14; // Minimum space of NV0/PV0 layer
   UV0_32:double = 0.07; // NV0/PV0 layer is allowed to have coincident edges of length >=
   UV0_33:double = 0.07; // NV0/PV0 layer is allowed to have coincident corners with space >=
   UV0_34:double = 0; // NV0/PV0 layer is allowed to have point touch
   UV1_01:double = 0.14; // Minimum width of NV1/PV1 layer
   UV1_05:double = 0.0235; // Minimum required area of NV1/PV1 layer (sq um)
   UV1_06:double = 0.06; // Minimum required hole area of NV1/PV1 layer  (sq um)
   UV1_07:double = 0.07; // Unrestricted minimum segment lengths
   UV1_08:double = 0.042; // Restricted minimum segment lengths (has additional segment-to-segment requirements)
   UV1_09:double = 0.21; // Space between restricted segment lengths (>= UV1_08, <UV1_07) convex-convex, concave-concave corner
   UV1_10:double = 1; // Space between restricted segment lengths (>= UV1_08, <UV1_07) convex-concave corner
   UV1_11:double = 0.021; // NV1/PV1 enclosure of nuv1/puv1 gate (PGD)
   UV1_116:double = 0.0598; // NV1/PV1 convex corner enclosure of nuv1/puv1 gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge
   UV1_12:double = 0.021; // NV1/PV1 enclosure of nuv1/puv1 gate (OGD)
   UV1_13:double = 0.021; // NV1/PV1 space to non-n/puv1 gate (PGD)
   UV1_14:double = 0.021; // NV1/PV1 space to non-n/puv1 gate (OGD)
   UV1_15:double = 0; // NV1/PV1 PGD edge must be centered in poly space or poly width
   UV1_16:double = 0.066; // NV1/PV1 unrestricted convex corner enclosure of nuv1/puv1 gate
   UV1_17:double = 0.066; // NV1/PV1 concave corner enclosure of non-n/puv1 gate
   UV1_31:double = 0.14; // Minimum space of NV1/PV1 layer
   UV1_32:double = 0.07; // NV1/PV1 layer is allowed to have coincident edges of length >=
   UV1_33:double = 0.07; // NV1/PV1 layer is allowed to have coincident corners with space >=
   UV1_34:double = 0; // NV1/PV1 layer is allowed to have point touch
   UV2_01:double = 0.14; // Minimum width of NV2/PV2 layer
   UV2_05:double = 0.0235; // Minimum required area of NV2/PV2 layer (sq um)
   UV2_06:double = 0.06; // Minimum required hole area of NV2/PV2 layer  (sq um)
   UV2_07:double = 0.07; // Minimum segment lengths
   UV2_08:double = 0.042; // Restricted minimum segment lengths (has additional segment-to-segment requirements)
   UV2_09:double = 0.21; // Space between restricted segment lengths (>= UV2_08, <UV2_07) convex-convex, concave-concave corner
   UV2_10:double = 1; // Space between restricted segment lengths (>= UV2_08, <UV2_07) convex-concave corner
   UV2_11:double = 0.021; // NV2/PV2 enclosure of nuv2/puv2 gate (PGD)
   UV2_116:double = 0.0598; // NV2/PV2 convex corner enclosure of nuv2/puv2 gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge
   UV2_12:double = 0.021; // NV2/PV2 enclosure of nuv2/puv2 gate (OGD)
   UV2_13:double = 0.021; // NV2/PV2 space to non-n/puv2 gate (PGD)
   UV2_14:double = 0.021; // NV2/PV2 space to non-n/puv2 gate (OGD)
   UV2_15:double = 0; // NV2/PV2 PGD edge must be centered in poly space or poly width
   UV2_16:double = 0.066; // NV2/PV2 unrestricted convex corner enclosure of nuv2/puv2 gate
   UV2_17:double = 0.066; // NV2/PV2 concave corner enclosure of non-n/puv2 gate
   UV2_31:double = 0.14; // Minimum space of NV2/PV2 layer
   UV2_32:double = 0.07; // NV2/PV2 layer is allowed to have coincident edges of length >=
   UV2_33:double = 0.07; // NV2/PV2 layer is allowed to have coincident corners with space >=
   UV2_34:double = 0; // NV2/PV2 layer is allowed to have point touch
   UV3_01:double = 0.14; // Minimum width of NV3/PV3 layer
   UV3_05:double = 0.0235; // Minimum required area of NV3/PV3 layer (sq um)
   UV3_06:double = 0.06; // Minimum required hole area of NV3/PV3 layer  (sq um)
   UV3_07:double = 0.07; // Minimum segment lengths
   UV3_08:double = 0.042; // Restricted minimum segment lengths (has additional segment-to-segment requirements)
   UV3_09:double = 0.21; // Space between restricted segment lengths (>= UV3_08, <UV3_07) convex-convex, concave-concave corner
   UV3_10:double = 1; // Space between restricted segment lengths (>= UV3_08, <UV3_07) convex-concave corner
   UV3_11:double = 0.021; // NV3/PV3 enclosure of nuv3/puv3 gate (PGD)
   UV3_116:double = 0.0598; // NV3/PV3 convex corner enclosure of nuv3/puv3 gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge
   UV3_12:double = 0.021; // NV3/PV3 enclosure of nuv3/puv3 gate (OGD)
   UV3_13:double = 0.021; // NV3/PV3 space to non-n/puv3 gate (PGD)
   UV3_14:double = 0.021; // NV3/PV3 space to non-n/puv3 gate (OGD)
   UV3_15:double = 0; // NV3/PV3 PGD edge must be centered in poly space or poly width
   UV3_16:double = 0.066; // NV3/PV3 unrestricted convex corner enclosure of nuv3/puv3 gate
   UV3_17:double = 0.066; // NV3/PV3 concave corner enclosure of non-n/puv3 gate
   UV3_31:double = 0.14; // Minimum space of NV3/PV3 layer
   UV3_32:double = 0.07; // NV3/PV3 layer is allowed to have coincident edges of length >=
   UV3_33:double = 0.07; // NV3/PV3 layer is allowed to have coincident corners with space >=
   UV3_34:double = 0; // NV3/PV3 layer is allowed to have point touch
   V0P_02:double = 0.034; // Via0PAX length (PGD), fixed value
   V0P_102:double = 0.034; // Via0PAY length (PGD), fixed value
   V0T_10:double = 0.078; // Via0TAX (bridge via) length, fixed value
   V0T_11:double = 0.08; // Via0TBX (bridge via) length, fixed value
   V0T_12:double = 0.11; // Via0TPX (bridge via) length, fixed value
   V0T_20:double = 0.078; // Via0TAY (bridge via) length, fixed value
   V0T_21:double = 0.08; // Via0TBY (bridge via) length, fixed value
   V0T_22:double = 0; // Via0TAY/TBY are only allowed in ULP region (under width_02 M1)
   V0_01:double = 0.042; // Width of Via0, fixed value (OGD)
   V0_02:double = 0.028; // Via0AX length (PGD), fixed value
   V0_03:double = 0.032; // Via0BX length (PGD), fixed value
   V0_04:double = 0.04; // Via0CX length (PGD), fixed value
   V0_05:double = 0.042; // Via0A length (PGD), fixed value
   V0_06:double = 0.046; // Via0B length (PGD), fixed value
   V0_07:double = 0.048; // Via0DX length (PGD), fixed value
   V0_08:double = 0.054; // Via0EX length (PGD), fixed value
   V0_09:double = 0.06; // Via0C length (PGD), fixed value
   V0_10:double = 0.078; // Via0FX length (PGD), fixed value
   V0_101:double = 0.056; // Width of Via0 in ULP region, fixed value (OGD)
   V0_102:double = 0.028; // Via0AY length (PGD), fixed value
   V0_103:double = 0.032; // Via0BY length (PGD), fixed value
   V0_104:double = 0.04; // Via0CY length (PGD), fixed value
   V0_105:double = 0.042; // Via0AW length (PGD), fixed value
   V0_106:double = 0.046; // Via0BW length (PGD), fixed value
   V0_107:double = 0.048; // Via0DY length (PGD), fixed value
   V0_108:double = 0.054; // Via0EY length (PGD), fixed value
   V0_111:double = 0.042; // Width of Via0TAY/TBY, fixed value (OGD)
   V0_122:double = 0.1; // Unrestricted Via0AY-to-Via0AY center-to-center space (min)
   V0_142:double = 0.026; // Minimum Via0TBX/TBY overlap of M0
   V0_171:double = 0.118; // Unrestricted min Via0-Via0 center-to-center space for all V0AY/BY/CY/DY/EY/AW/BW/PAY (if centers are closer, vias are allowed on maximum of any 2 corners)
   V0_19:double = 0; // V0_02-V0T_12 edges are SA edges; the line-end edge of Via0PAX can also be self aligned (in addition to the line-side edges)
   V0_22:double = 0.089; // Unrestricted Via0AX-to-Via0AX center-to-center space (min)
   V0_23:double = 0; // Parallel full-facing metal-aligned Via0 edges can be as closely spaced as the minimum allowed M1 space.  (only allowed value)
   V0_24:double = 0.084; // Min space between non-SA Via0 edges (PGD)
   V0_242:double = 0.041; // Minimum Via0TPX overlap of M0
   V0_25:double = 0.074; // Min space between Via0BX non-SA edge and V0PAX line end edge, Via0BY non-SA edge and V0PAY line-end edge, Via0AX/BX to Via0AX/BX non-SA edges (PGD), Via0AY/BY to Via0AY/BY non-SA edges (PGD)
   V0_250:double = 0.092; // Min unrestricted Via0TAY/TBY to any Via0 corner-to-corner space
   V0_252:double = 0; // Via0TAY/TBY can have 2 or fewer via0 at corner-to-corner space of [>=V0_70 and <V0_250] on any 2 corners, the other vias must have corner-to-corner space >=V0_250 from Via0TAY/TBY 
   V0_26:double = 0.084; // Unrestricted min Via0 edge-to-edge space
   V0_27:double = 0; // V0TAX/TBX/TAY/TBY/TPXs, V0FXs cannot be on adjacent M1 wires at minimum space (this is an exception to V0_23)
   V0_28:double = 0.07; // Adjacent end-to-end (same track) Via0PAX/PAYs allowed space max value
   V0_29:double = 0; // Adjacent-track (side-by-side) Via0PAX/PAYs are allowed FOR A SINGLE PAIR only
   V0_30:double = 0; // A pair of side-by-side Via0PAX/PAYs cannot have a facing Via0PAX/PAYs
   V0_31:double = 0.028; // Min Via0 to VCN space (on different Metal0)
   V0_32:double = 0.076; // Facing V0PAX/PAY pair to adjacent V0PAX/PAY min space
   V0_328:double = 0; // Via0PAX pair facing each other at minimum M1 ETE space (M1_41=42nm) must be overlapped or replaced with a bridge Via0TPX, if the nets are the same
   V0_33:double = 0.028; // Min Via0 edge space to Metal0
   V0_40:double = 0; // Min Metal0 side enclosure of Via0
   V0_42:double = 0.025; // Minimum Via0TAX/TAY overlap of M0
   V0_43:double = 0; // Via0TAX/TBX/TAY/TBY/TPX must overlap two adjacent M0 lines
   V0_49:double = 0.014; // Min Metal0 line end enclosure of Via0
   V0_61:double = 0.017; // Minimum M1 line end enclosure of Via0FX/TAX/TBX/TAY/TBY/TPX
   V0_62:double = 0.014; // Minimum M1 line end enclosure of Via0 (see V0_61 exception)
   V0_63:double = 0; // M1 line end enclosure of Via0PAX (fixed value) on one end only
   V0_64:double = 0.084; // Minimum M1 line end enclosure of opposite side of Via0PAX
   V0_66:double = 0.042; // Min M1 line-end enclosure of any Via0, when the M1 line-end has an exposed offset on either or both sides, as defined by M1_86
   V0_69:double = 0.007; // M1 line-side enclosure of Via0TAY/TBY, only allowed value
   V0_70:double = 0.039; // Min Via0 corner-to-corner space
   V0_71:double = 0.103; // Unrestricted min Via0-Via0 center-to-center space for all via0s except V0AY/BY/CY/DY/EY/AW/BW/PAY (if centers are closer, vias are allowed on maximum of any 2 corners)
   V0_840:double = 0.007; // Min Metal0 line-side enclosure (PGD) of each Via0PAX/Y when two are placed on facing M1 line-ends 
   V0_98:double = 0; // V0TAX/TAYs cannot be on a power net
   V0_99:double = 0; // V0TBX/TBY bridging two M0 lines must have a TCN shunt shorting the 2 M0s it is bridging.
   V10_01:double = 0.14; // Square Via10 size ONLY ALLOWED value
   V10_02:double = 0.356; // Square Via10 to Square Via10 (center-to-center) separation, minimum
   V10_11:double = 0.007; // Maximum Square Via10 overhang of Metal10
   V10_12:double = 0.04; // Min M10 enclosure of Square Via10, orthogonal edge
   V10_21:double = 0.21; // Min Square Via10 to Via9 (square/rectangular) space (on different M10, all-directional check)
   V10_31:double = 0.14; // Rectangular Via10 width, ONLY ALLOWED value
   V10_32:double = 0.28; // Rectangular Via10 length, ONLY ALLOWED value
   V10_33:double = 0.275; // Min Rectangular Via10 Long edge facing space to Square or Rectangular Via10 
   V10_34:double = 0.307; // Min Rectangular Via10 Short edge facing space to Square or Rectangular Via10 
   V10_35:double = 0.212; // Min Rectangular Via10 Corner-to-corner space to Square or Rectangular Via10 
   V10_39:double = 0.16; // Redundant Rectangular Via10 spacing between facing Long edges, for electrically shorted vias, fixed value
   V10_40:double = 0; // Redundant Rectangular Via10s must be aligned with each other
   V10_41:double = 0.21; // Min Rectangular Via10 to Via9 (square/rectangular) space (on different M10, all-directional check)
   V10_51:double = 0; // Min M10 enclosure of Rectangular Via10 (one edge at a corner)
   V10_52:double = 0.04; // Min M10 enclosure of Rectangular Via10, orthogonal edge
   V10_61:double = 0.007; // Max extent of Square Via10 edge beyond M11 edge
   V10_62:double = 0.04; // Min M11 coverage of Square Via10 orthogonal edge
   V10_71:double = 0.02; // Max extent of Rectangular Via10 long edge beyond M11 edge
   V10_72:double = 0.04; // M11 coverage of Rectangular Via10 short edge, minimum
   V11_01:double = 0.44; // Square Via11 size ONLY ALLOWED value
   V11_02:double = 1.115; // Square Via11 to Square Via11 (center-to-center) separation, minimum
   V11_11:double = 0.08; // Min M11 enclosure of Square Via11
   V11_12:double = 0.08; // Min M11 enclosure of Square Via11, orthogonal edge
   V11_31:double = 0.44; // Rectangular Via11 width, ONLY ALLOWED value
   V11_32:double = 0.88; // Rectangular Via11 length, ONLY ALLOWED value
   V11_33:double = 0.64; // Min Rectangular Via11 space to Via11 (square/rectangular, includes all combinations of long edges, short edges, and corners), all-directional check
   V11_34:double = 3.7; // Via11C length, fixed value
   V11_40:double = 2; // Via11 to Via11 space (all directions)
   V11_41:double = 2.5; // Via11 to Via11 corner-to-corner space
   V11_51:double = 0.08; // Min M11 enclosure of Rectangular Via11
   V11_52:double = 0.08; // Min M11 enclosure of Rectangular Via11, orthogonal edge
   V12_31:double = 0.8; // Width of Via12A/B/C, fixed value
   V12_32:double = 1.85; // Via12A length, fixed value
   V12_33:double = 7.4; // Via12B length, fixed value
   V12_34:double = 3.7; // Via12C length, fixed value
   V12_40:double = 2; // Min Via12 to Via12 space (all directions)
   V12_41:double = 2.5; // Min Via12 to Via12 corner-to-corner space
   V12_51:double = 0.14; // Min M12 enclosure of Via12 (all directions)
   V1H_01:double = 0.036; // Width of below Via1 (OGD), fixed value
   V1H_02:double = 0.036; // Via1HA length (PGD), fixed value (one V1H_01 edge is SA)
   V1H_05:double = 0.072; // Via1HD length (PGD), fixed value (non-SA only)
   V1H_08:double = 0.078; // Via1HG length (PGD), fixed value (one V1H_01 edge is SA)
   V1H_09:double = 0.064; // Via1HJ length (PGD), fixed value (non-SA only)
   V1H_10:double = 0.07; // Via1HK length (PGD), fixed value (one V1H_01 edge is SA)
   V1H_11:double = 0.048; // Via1HL length (PGD), fixed value (non-SA only)
   V1H_12:double = 0.054; // Via1HM length (PGD), fixed value (one V1H_01 edge is SA)
   V1T_01:double = 0.106; // Via1TA-Bridge via length (OGD), fixed value
   V1T_02:double = 0.028; // Via1TA-Bridge via width (PGD), fixed value
   V1T_03:double = 0.032; // Via1TB-Bridge via width (PGD), fixed value
   V1T_11:double = 0.098; // Via1TB-Bridge via length (OGD), fixed value
   V1T_20:double = 0; // The V1T_01/11 edges of V1TA/B must both be aligned with parallel Metal-2 edges.
   V1_01:double = 0.036; // Width of below Via1 (OGD), fixed value
   V1_02:double = 0.028; // Via1A length (PGD), fixed value
   V1_03:double = 0.03; // Via1B length (PGD), fixed value
   V1_04:double = 0.032; // Via1C length (PGD), fixed value
   V1_05:double = 0.036; // Via1D length (PGD), fixed value
   V1_06:double = 0.04; // Via1F length (PGD), fixed value
   V1_07:double = 0.046; // Via1G length (PGD), fixed value
   V1_08:double = 0.056; // Via1J length (PGD), fixed value
   V1_10:double = 0.068; // Via1L length (PGD), fixed value
   V1_124:double = 0.046; // Via1 corner-to-corner space (min unrestricted) doesn't need to meet the V1_25 one pair rule (V1_225/226 are exceptions)
   V1_125:double = 0.049; // Via1TB corner-to-corner space (min unrestricted) doesn't need to meet the V1_26 one pair rule
   V1_128:double = 0.104; // Unrestricted min Via1 edge-to-edge space (OGD)
   V1_13:double = 0.084; // Via1O length (PGD), fixed value
   V1_14:double = 0.06; // Via1R length (PGD), fixed value
   V1_140:double = 0.01; // Via1 edge enclosure by width_02 Metal1 (OGD), fixed value (V1TA/TB are exceptions)
   V1_142:double = 0.039; // Minimum Via1TA overlap of Metal1 (OGD)
   V1_15:double = 0.038; // Via1E length (PGD), fixed value
   V1_16:double = 0.076; // Via1S length (PGD), fixed value
   V1_17:double = 0.074; // Via1V length (PGD), fixed value
   V1_20:double = 0; // The V1_01 edges of V1A-V must both be aligned with parallel Metal-2 edges.
   V1_22:double = 0.087; // Unrestricted Via1A-to-Via1A center-to-center space (min)
   V1_225:double = 0.052; // A tight V1HL to V1HA, non-SA edge corner space <V1_225 is allowed for a single isolated via pair only. The pair must be spaced from other vias by >=V1_28. 
   V1_226:double = 0.058; // A tight V1HL to any V1, SA edge corner space <V1_226 is allowed for 2 or fewer neighboring vias. These vias must be spaced from other vias by >=V1_226. Note: This rule applies only if any of the vias neighboring the V1HL via are <V1_227 in the PGD direction.
   V1_227:double = 0.052; // Max PGD length of neighboring vias for V1_226 to apply (<)
   V1_23:double = 0.024; // Parallel full-facing metal-aligned Via1 edges can be as closely spaced as the minimum allowed M2 space.  (only allowed value)
   V1_24:double = 0.041; // Min Via1 corner-to-corner space
   V1_25:double = 0; // A tight via-via corner space <V1_124 is allowed for a single isolated via pair only. The pair must be spaced from other vias by >= V1_28.
   V1_26:double = 0; // A tight Via1TB-Via1TB corner space <V1_125 is allowed for a single isolated via pair only. The pair must be spaced from other vias by >= V1_28. 
   V1_28:double = 0.076; // Unrestricted min Via1 edge-to-edge space (PGD)
   V1_301:double = 0.058; // Via1A/B/C in ULPpitchID can have at most 2 Via1 neighbors at corner-to-corner spacing < V1_301  (3 neighbors or 4 neighbors all at < V1_301 corner spacing are not allowed)
   V1_302:double = 0.08; // Via1A/B/C in ULPpitchID is not allowed to form a Y shape in which 2 corner-to-corner Via1 neighbors are at <V1_301 spacing and the 4th Via1 is at PGD spacing <= V1_302
   V1_303:double = 0.08; // Via1A/B/C in ULPpitchID is not allowed to form a diamond shape in which all 4 corner-to-corner Via1 neighbors are at <V1_301 spacing and the PGD spacing inside the diamond is <=V1_303
   V1_32:double = 0.031; // Min Via1 to Via0 space (on different Metal1)
   V1_33:double = 0.031; // Min Via1 edge space to Metal1
   V1_40:double = 0.003; // Via1 edge enclosure by width_01 Metal1 (OGD), fixed value (V1TA/TB are exceptions)
   V1_42:double = 0.035; // Minimum Via1TB overlap of Metal1 (OGD)
   V1_43:double = 0; // Via1TA/TB must overlap 2 adjacent M1 lines
   V1_49:double = 0.007; // Min Metal1 line-end enclosure of Via1
   V1_50:double = 0.028; // Min Metal1 line-end enclosure of Via1, when Via1 lands on an offset M1 as defined by M1_86
   V1_52:double = 0; // All Via1 must be centered in metal2 (PGD) (except V1HA/HG/HK/HM)
   V1_53:double = 0; // Via1HD/HG can only be covered by a width_L_06 metal2
   V1_54:double = 0; // Via1HJ/HK can only be covered by a width_L_05 metal2
   V1_55:double = 0; // Via1HA can only be covered by a width_M_01 M2 wire
   V1_56:double = 0; // Via1HL/HM can only be covered by a width_L_02 or wider M2 wire
   V1_61:double = 0.024; // Min M2 line-end enclosure of Via1 
   V1_97:double = 0.128; // Min space between Via1TA/TB long edge to long edge (PGD)
   V1_98:double = 0; // V1Ts cannot be on a power net
   V2H_01:double = 0.032; // Width of Via2HA (PGD), fixed value
   V2H_02:double = 0.036; // Via2HA length (OGD), fixed value (one edge SA only)
   V2H_03:double = 0.032; // Width of Via2HG (PGD), fixed value
   V2H_04:double = 0.078; // Via2HG length (OGD), fixed value (one edge SA only)
   V2H_05:double = 0.032; // Width of Via2HK (PGD), fixed value
   V2H_06:double = 0.07; // Via2HK length (OGD), fixed value (one edge SA only)
   V2H_07:double = 0.032; // Width of Via2HM (PGD), fixed value
   V2H_08:double = 0.054; // Via2HM length (OGD), fixed value (one edge SA only)
   V2H_10:double = 0; // Only one of the Via2HA/HG/HK/HM PGD edges is aligned to a Metal3 edge.
   V2H_11:double = 0.032; // Width of Via2HD (PGD), fixed value
   V2H_12:double = 0.072; // Via2HD length (OGD), fixed value (non-SA only)
   V2H_13:double = 0.032; // Width of Via2HJ (PGD), fixed value
   V2H_14:double = 0.064; // Via2HJ length (OGD), fixed value (non-SA only)
   V2H_15:double = 0.032; // Width of Via2HL (PGD), fixed value
   V2H_16:double = 0.048; // Via2HL length (OGD), fixed value (non-SA only)
   V2H_20:double = 0; // None of the Via2HD/HJ/HL edges are aligned to Metal-3 edges.
   V2T_01:double = 0.084; // Via2TA-Bridge via length (PGD), fixed value (SA edge)
   V2T_02:double = 0.028; // Via2TA-Bridge via width (OGD), fixed value
   V2T_03:double = 0.084; // Via2TB-Bridge via length (PGD), fixed value (SA edge)
   V2T_04:double = 0.032; // Via2TB-Bridge via width (OGD), fixed value
   V2T_05:double = 0.08; // Via2TC-Bridge via length (PGD), fixed value (SA edge)
   V2T_06:double = 0.04; // Via2TC-Bridge via width (OGD), fixed value
   V2T_20:double = 0; // The V2T_01 edges of V2TA, V2T_03 edges of V2TB, and V2T_05 edges of V2TC must both be aligned with parallel Metal-3 edges.
   V2_01:double = 0.032; // Width of below Via2 (PGD), fixed value
   V2_02:double = 0.028; // Via2A length (OGD), fixed value
   V2_03:double = 0.03; // Via2B length (OGD), fixed value
   V2_04:double = 0.036; // Via2D length (OGD), fixed value
   V2_05:double = 0.04; // Via2F length (OGD), fixed value
   V2_06:double = 0.046; // Via2G length (OGD), fixed value
   V2_07:double = 0.046; // Via2F length (OGD), fixed value
   V2_08:double = 0.056; // Via2J length (OGD), fixed value
   V2_09:double = 0.06; // Via2R length (OGD), fixed value
   V2_10:double = 0.074; // Via2V length (OGD), fixed value
   V2_11:double = 0.068; // Via2L length (OGD), fixed value
   V2_116:double = 0.058; // Via2GY (PGD), fixed value (SA edges) (not for P1273.6)
   V2_117:double = 0.046; // Via2GY length (OGD), fixed value (not for P1273.6)
   V2_118:double = 0.064; // Via2GZ (PGD), fixed value (SA edges) (not for P1273.6)
   V2_119:double = 0.046; // Via2GZ length (OGD), fixed value (not for P1273.6)
   V2_12:double = 0.066; // Via2N length (OGD), fixed value
   V2_120:double = 0.056; // Via2JX length (OGD), fixed value
   V2_121:double = 0.064; // Via2S (PGD), fixed value (SA edges)
   V2_122:double = 0.046; // Via2S length (OGD), fixed value
   V2_123:double = 0.052; // Via2GX (PGD), fixed value (SA edges)
   V2_124:double = 0.046; // Via2GX length (OGD), fixed value
   V2_127:double = 0.046; // Via2JX (PGD), fixed value (SA edges)
   V2_128:double = 0.076; // Unrestricted min Via2 edge-to-edge space, between SA edges
   V2_129:double = 0.038; // Via2VX (PGD), fixed value (SA edges)
   V2_13:double = 0.076; // Via2S length (OGD), fixed value
   V2_130:double = 0.074; // Via2VX length (OGD), fixed value
   V2_131:double = 0.038; // Via2RX (PGD), fixed value (SA edges)
   V2_132:double = 0.06; // Via2RX length (OGD), fixed value
   V2_133:double = 0.044; // Via2RY (PGD), fixed value (SA edges)
   V2_134:double = 0.06; // Via2RY length (OGD), fixed value
   V2_135:double = 0.04; // Via2NX (PGD), fixed value (SA edges)
   V2_136:double = 0.066; // Via2NX length (OGD), fixed value
   V2_137:double = 0.054; // Via2PW (PGD), fixed value (SA edges)
   V2_138:double = 0.032; // Via2PW length (OGD), fixed value
   V2_139:double = 0.044; // Via2PT (PGD), fixed value (SA edges)
   V2_14:double = 0.084; // Via2O length (OGD), fixed value
   V2_140:double = 0.056; // Via2PT length (OGD), fixed value
   V2_141:double = 0.044; // Via2PU (PGD), fixed value (SA edges)
   V2_142:double = 0.028; // Minimum Via2TC overlap of Metal2 (PGD). If M2 width is <V2_42, then Via2TC OGD edge enclosure of M2 inside edge must be >=V2_142.
   V2_143:double = 0.044; // Via2PV (PGD), fixed value (SA edges)
   V2_144:double = 0.082; // Via2PV length (OGD), fixed value
   V2_145:double = 0.054; // Via2PW (PGD), fixed value (SA edges)
   V2_146:double = 0.032; // Via2PW length (OGD), fixed value
   V2_147:double = 0.054; // Via2PX (PGD), fixed value (SA edges)
   V2_148:double = 0.04; // Via2PX length (OGD), fixed value
   V2_149:double = 0.054; // Via2PY (PGD), fixed value (SA edges)
   V2_150:double = 0.068; // Via2PY length (OGD), fixed value
   V2_152:double = 0.027; // Min Via2 to Via1 edge-to-edge space (on different Metal2)
   V2_16:double = 0.084; // Via2R length (OGD), fixed value
   V2_161:double = 0.046; // Via2SA (PGD), fixed value (SA edges)
   V2_162:double = 0.046; // Via2SA length (OGD), fixed value
   V2_163:double = 0.058; // Via2SB (PGD), fixed value (SA edges)
   V2_164:double = 0.046; // Via2SB length (OGD), fixed value
   V2_165:double = 0.076; // Via2SC (PGD), fixed value (SA edges)
   V2_166:double = 0.046; // Via2SC length (OGD), fixed value
   V2_17:double = 0.038; // Via2ZA length (OGD), fixed value
   V2_172:double = 0.068; // Via2PU length (OGD), fixed value
   V2_18:double = 0.076; // Via2ZB length (OGD), fixed value
   V2_19:double = 0.032; // Via2C length (OGD), fixed value
   V2_20:double = 0; // The V2_01 edges of above Via2 must both be aligned with parallel Metal-3 edges.
   V2_22:double = 0.104; // Unrestricted V2A-to-V2A center-to-center space (min)
   V2_228:double = 0.08; // Unrestricted min V2HA SA edge to SA edge of any via2
   V2_23:double = 0.024; // Parallel full-facing metal-aligned Via2 edges can be as closely spaced as the minimum allowed M3 space.  (only allowed value)
   V2_24:double = 0.048; // Min Via2 corner-to-corner space (Note that space values between V2_24 and V2_250 come with restrictions)
   V2_240:double = 0; // Only V2_01 width vias can overhang Metal2 (PGD)
   V2_241:double = 0; // Minimum Metal2 enclosure of Via2GY/GZ (PGD)
   V2_250:double = 0.071; // Min unrestricted Via2 corner-to-corner space
   V2_251:double = 0; // A small via2 (32 wide - A/B/C/D/F/G/J/L/N/O/R/S/V/HA/HG/HK/HM/HD/HJ/HL) can have only one via2 (big or small) at corner-to-corner space >=V2_24 and <V2_250; other vias must be >=V2_250 from the small via 
   V2_252:double = 0; // A big via2 can have 2 or fewer small via2 (32 wide) at corner-to-corner space >=V2_24 and <V2_250 on any 2 corners; other vias must be >=V2_250 from the big via 
   V2_28:double = 0.072; // Unrestricted min Via2 edge-to-edge space, between non-SA edges
   V2_32:double = 0.023; // Min Via2 to Via1 corner-to-corner space (on different Metal2)
   V2_33:double = 0.022; // Min Via2 edge space to Metal2
   V2_40:double = 0.002; // Maximum Via2 overhang of Metal2 (PGD)
   V2_41:double = 0; // Via2 must be centered on Metal2 (PGD) (V2_241 is an exception)
   V2_42:double = 0.03; // Minimum Via2TA/TB overlap of Metal2 (PGD). If M2 width is <V2_42, then Via2TA/TB OGD edge enclosure of M2 inside edge must be >=V2_42.
   V2_43:double = 0; // Via2TA/TB/TC must overlap 2 adjacent Metal2 lines
   V2_45:double = 0; // Via2JX cannot land on Metal2 narrower than M2L_01 (all M2S and M2M lines)
   V2_450:double = 0.071; // Min Bridge Via2 corner-to-corner space to any other via2
   V2_451:double = 0.136; // Min Bridge Via2 self-aligned edge space to any via2 self-aligned edge
   V2_452:double = 0.09; // Min Bridge Via2 non-self-aligned edge space to any via2 non-self-aligned edge
   V2_46:double = 0; // Via2RX cannot land on Metal2 narrower than M2M_02 (all M2S and M2M_01 lines)
   V2_49:double = 0.009; // Min Metal2 line-end enclosure of Via2
   V2_51:double = 0; // Both opposite edges of a (2-sided SA) aligned via must be metal aligned
   V2_54:double = 0; // Via2HJ can only be covered by a width_L_05 metal3
   V2_61:double = 0.024; // Min M3 line-end enclosure of Via2 
   V2_62:double = 0.006; // Min M3 line-side enclosure of Via2HD/HJ/HL (OGD) 
   V2_97:double = 0.136; // Min V2TA/TB/TC to V2TA/TB/TC space OGD (this is an exception to V2_23)
   V2_98:double = 0; // V2Ts (TA/TB/TC) cannot be on a power net
   V3H_01:double = 0.032; // Width of Via3HA (OGD), fixed value
   V3H_02:double = 0.036; // Via3HA length (PGD), fixed value (one OGD edge SA only)
   V3H_03:double = 0.032; // Width of Via3HG (OGD), fixed value
   V3H_04:double = 0.078; // Via3HG length (PGD), fixed value (one OGD edge SA only)
   V3H_05:double = 0.032; // Width of Via3HK (OGD), fixed value
   V3H_06:double = 0.07; // Via3HK length (PGD), fixed value (one OGD edge SA only)
   V3H_07:double = 0.032; // Width of Via3HM (OGD), fixed value
   V3H_08:double = 0.054; // Via3HM length (PGD), fixed value (one OGD edge SA only)
   V3H_10:double = 0; // Only one of the Via3HA/HG/HK/HM OGD edges is aligned to a Metal-4 edge.
   V3H_11:double = 0.032; // Width of Via3HD (OGD), fixed value
   V3H_12:double = 0.072; // Via3HD length (PGD), fixed value (non-SA only)
   V3H_13:double = 0.032; // Width of Via3HJ (OGD), fixed value
   V3H_14:double = 0.064; // Via3HJ length (PGD), fixed value (non-SA only)
   V3H_15:double = 0.032; // Width of Via3HL (OGD), fixed value
   V3H_16:double = 0.048; // Via3HL length (PGD), fixed value (non-SA only)
   V3H_17:double = 0.038; // Width of Via3HN (OGD), fixed value (not allowed for P1273.6)
   V3H_18:double = 0.048; // Via3HN length (PGD), fixed value (non-SA only) (not allowed for P1273.6) 
   V3H_20:double = 0; // None of the Via3HD/HJ/HL/HN edges are aligned to Metal-4 edges.
   V3T_01:double = 0.084; // Via3TA-Bridge via length (OGD), fixed value (SA edge)
   V3T_02:double = 0.028; // Via3TA-Bridge via width (PGD), fixed value
   V3T_03:double = 0.084; // Via3TB-Bridge via length (OGD), fixed value (SA edge)
   V3T_04:double = 0.032; // Via3TB-Bridge via width (PGD), fixed value
   V3T_05:double = 0.08; // Via3TC-Bridge via length (OGD), fixed value (SA edge)
   V3T_06:double = 0.04; // Via3TC-Bridge via width (PGD), fixed value
   V3T_20:double = 0; // The V3T_01 edges of V3TA, V3T_03 edges of V3TB, and V3T_05 edges of V3TC must both be aligned with parallel Metal-4 edges.
   V3_01:double = 0.032; // Width of below Via3 (OGD), fixed value
   V3_02:double = 0.028; // Via3A length (PGD), fixed value
   V3_03:double = 0.03; // Via3B length (PGD), fixed value
   V3_04:double = 0.036; // Via3D length (PGD), fixed value
   V3_05:double = 0.04; // Via3F length (PGD), fixed value
   V3_06:double = 0.046; // Via3G length (PGD), fixed value
   V3_07:double = 0.054; // Via3X length (PGD), fixed value
   V3_08:double = 0.056; // Via3J length (PGD), fixed value
   V3_09:double = 0.06; // Via3R length (PGD), fixed value
   V3_10:double = 0.074; // Via3V length (PGD), fixed value
   V3_101:double = 0.056; // Width of Via3S (OGD), fixed value (SA edge)
   V3_102:double = 0.044; // Length of Via3S (PGD), fixed value
   V3_103:double = 0.048; // Width of Via3U (OGD), fixed value (SA edge)
   V3_104:double = 0.076; // Length of Via3U (PGD), fixed value
   V3_105:double = 0.048; // Width of Via3V (OGD), fixed value (SA edge)
   V3_106:double = 0.09; // Length of Via3V (PGD), fixed value
   V3_107:double = 0.068; // Width of Via3W (OGD), fixed value (SA edge)
   V3_108:double = 0.044; // Length of Via3W (PGD), fixed value
   V3_109:double = 0.068; // Width of Via3X (OGD), fixed value (SA edge)
   V3_11:double = 0.068; // Via3L length (PGD), fixed value
   V3_110:double = 0.076; // Length of Via3X (PGD), fixed value
   V3_111:double = 0.08; // Width of Via3Y (OGD), fixed value (SA edge)
   V3_112:double = 0.064; // Length of Via3Y (PGD), fixed value
   V3_113:double = 0.084; // Width of Via3Z (OGD), fixed value (SA edge)
   V3_114:double = 0.056; // Length of Via3Z (PGD), fixed value
   V3_12:double = 0.066; // Via3N length (PGD), fixed value
   V3_120:double = 0.056; // Via3JX length (PGD), fixed value
   V3_123:double = 0.052; // Via3GX (OGD), fixed value (SA edges)
   V3_124:double = 0.046; // Via3GX length (PGD), fixed value
   V3_125:double = 0.046; // Via3XX (OGD), fixed value (SA edges)
   V3_126:double = 0.054; // Via3XX length (PGD), fixed value
   V3_127:double = 0.046; // Via3JX (OGD), fixed value (SA edges)
   V3_128:double = 0.076; // Unrestricted min Via3 edge-to-edge space, between SA edges
   V3_129:double = 0.038; // Via3VX (OGD), fixed value (SA edges)
   V3_13:double = 0.076; // Via3S length (PGD), fixed value
   V3_130:double = 0.074; // Via3VX length (PGD), fixed value
   V3_131:double = 0.038; // Via3RX (OGD), fixed value (SA edges)
   V3_132:double = 0.06; // Via3RX length (PGD), fixed value
   V3_133:double = 0.044; // Via3RY (OGD), fixed value (SA edges)
   V3_134:double = 0.06; // Via3RY length (PGD), fixed value
   V3_135:double = 0.04; // Via3NX (OGD), fixed value (SA edges)
   V3_136:double = 0.066; // Via3NX length (PGD), fixed value
   V3_137:double = 0.046; // Via3RZ (OGD), fixed value (SA edges) (not allowed for P1273.6)
   V3_138:double = 0.06; // Via3RZ length (PGD), fixed value (not allowed for P1273.6)
   V3_14:double = 0.084; // Via3O length (PGD), fixed value
   V3_142:double = 0.028; // Minimum Via3TC overlap of Metal3 (OGD). If M3 width is <V3_42, then Via3TC PGD edge enclosure of M3 inside edge must be >=V3_142.
   V3_15:double = 0.068; // Via3T length (PGD), fixed value
   V3_152:double = 0.027; // Min Via3 to Via2 edge-to-edge space (on different Metal3)
   V3_153:double = 0.035; // Via3 on isolated M4 to Via2 space (on different Metal3 net)
   V3_154:double = 0.04; // Isolated M4 line for V3_153 is defined as a line with exposed edges on opposite edges of the line with overlap of > V3_154
   V3_16:double = 0.08; // Via3C length (PGD), fixed value
   V3_161:double = 0.044; // Width of below Via3 (OGD), fixed value (SA edges)
   V3_162:double = 0.044; // Via3BP length (PGD), fixed value
   V3_163:double = 0.048; // Via3NP length (PGD), fixed value
   V3_164:double = 0.06; // Via3OP length (PGD), fixed value
   V3_165:double = 0.064; // Via3DP length (PGD), fixed value
   V3_166:double = 0.056; // Via3EP length (PGD), fixed value
   V3_167:double = 0.068; // Via3TP length (PGD), fixed value
   V3_168:double = 0.076; // Via3QP length (PGD), fixed value
   V3_169:double = 0.08; // Via3CP length (PGD), fixed value
   V3_170:double = 0.09; // Via3RP length (PGD), fixed value
   V3_171:double = 0.108; // Via3MP length (PGD), fixed value
   V3_19:double = 0.032; // Via3C length (PGD), fixed value
   V3_20:double = 0; // The V3_01 edges of above Via3 must both be aligned with parallel Metal-4 edges.
   V3_22:double = 0.104; // Unrestricted V3A-to-V3A center-to-center space (min)
   V3_228:double = 0.08; // Unrestricted min V3HA SA edge to SA edge of any via3
   V3_23:double = 0.024; // Parallel full-facing metal-aligned Via3 edges can be as closely spaced as the minimum allowed M4 space.  (only allowed value)
   V3_24:double = 0.048; // Min Via3 corner-to-corner space (Note that space values between V3_24 and V3_250 come with restrictions)
   V3_240:double = 0; // Only V3_01 width vias can overhang Metal3 (OGD)
   V3_25:double = 0; // The tight via-via corner space (<V3_28) is allowed for a single isolated via pair. The pair must be spaced from other vias by V3_28 
   V3_250:double = 0.071; // Min unrestricted Via3 corner-to-corner space
   V3_251:double = 0; // A small via3 (32 wide - A/B/C/D/F/G/J/L/N/O/R/S/V/X/HA/HG/HK/HM/HD/HJ/HL) can have only one via3 (big or small) at corner-to-corner space >=V3_24 and <V3_250; other vias must be >=V3_250 from the small via 
   V3_252:double = 0; // A big via3 can have 2 or fewer small via3 (32 wide) at corner-to-corner space >=V3_24 and <V3_250 on any 2 corners; other vias must be >=V3_250 from the big via 
   V3_26:double = 0.076; // Min (Via3BP/NP/OP/DP/EP/TP/QP/CP/RP/MP/S/U/V/W/X/Y/Z to any Via3) or  (Via3FA/Q/R/T/C to Via3FA/Q/R/T/C) corner-to-corner space (exception to V3_24/25 rules)
   V3_28:double = 0.072; // Unrestricted min Via3 edge-to-edge space, between non-SA edges
   V3_32:double = 0.023; // Min Via3 to Via2 corner-to-corner space (on different Metal3)
   V3_33:double = 0.022; // Min Via3 edge space to Metal3
   V3_40:double = 0.002; // Maximum Via3 overhang of Metal3 (OGD)
   V3_41:double = 0; // Via3 must be centered on Metal3 (OGD) 
   V3_42:double = 0.03; // Minimum Via3TA/TB overlap of Metal3 (OGD). If M3 width is <V3_42, then Via3TA/TB PGD edge enclosure of M3 inside edge must be >=V3_42.
   V3_43:double = 0; // Via3TA/TB/TC must overlap 2 adjacent Metal3 lines
   V3_45:double = 0; // Via3JX cannot land on Metal3 narrower than M3L_01 (all M3S and M3M lines)
   V3_450:double = 0.071; // Min Bridge Via3 corner-to-corner space to any other via3
   V3_451:double = 0.136; // Min Bridge Via3 self-aligned edge space to any via3 self-aligned edge
   V3_452:double = 0.09; // Min Bridge Via3 non-self-aligned edge space to any via3 non-self-aligned edge
   V3_46:double = 0; // Via3RX cannot land on Metal3 narrower than M3M_02 (all M3S and M3M_01 lines)
   V3_49:double = 0.009; // Min Metal3 line-end enclosure of Via3
   V3_51:double = 0; // Both opposite edges of a (2-sided SA) aligned via must be metal aligned
   V3_54:double = 0; // Via3HJ can only be covered by a width_L_05 metal4
   V3_61:double = 0.024; // Min M4 line-end enclosure of Via3 
   V3_62:double = 0.006; // Min M4 line-side enclosure of Via3HD/HJ/HL/HN (PGD) 
   V3_97:double = 0.136; // Min V3TA/TB/TC to V3TA/TB/TC space PGD (this is an exception to V3_23)
   V3_98:double = 0; // V3Ts (TA/TB/TC) cannot be on a power net
   V4H_01:double = 0.032; // Width of Via4HA (PGD), fixed value
   V4H_02:double = 0.036; // Via4HA length (OGD), fixed value (one edge SA only)
   V4H_03:double = 0.032; // Width of Via4HG (PGD), fixed value
   V4H_04:double = 0.078; // Via4HG length (OGD), fixed value (one edge SA only)
   V4H_05:double = 0.032; // Width of Via4HK (PGD), fixed value
   V4H_06:double = 0.07; // Via4HK length (OGD), fixed value (one edge SA only)
   V4H_07:double = 0.032; // Width of Via4HM (PGD), fixed value
   V4H_08:double = 0.054; // Via4HM length (OGD), fixed value (one edge SA only)
   V4H_10:double = 0; // Only one of the Via4HA/HG/HK/HM PGD edges is aligned to a Metal-5 edge.
   V4H_11:double = 0.032; // Width of Via4HD (PGD), fixed value
   V4H_12:double = 0.072; // Via4HD length (OGD), fixed value (non-SA only)
   V4H_13:double = 0.032; // Width of Via4HJ (PGD), fixed value
   V4H_14:double = 0.064; // Via4HJ length (OGD), fixed value (non-SA only)
   V4H_15:double = 0.032; // Width of Via4HL (PGD), fixed value
   V4H_16:double = 0.048; // Via4HL length (OGD), fixed value (non-SA only)
   V4H_20:double = 0; // None of the Via4HD/HJ/HL edges are aligned to Metal-5 edges.
   V4T_01:double = 0.084; // Via4TA-Bridge via length (PGD), fixed value (SA edge)
   V4T_02:double = 0.028; // Via4TA-Bridge via width (OGD), fixed value
   V4T_03:double = 0.084; // Via4TB-Bridge via length (PGD), fixed value (SA edge)
   V4T_04:double = 0.032; // Via4TB-Bridge via width (OGD), fixed value
   V4T_05:double = 0.08; // Via4TC-Bridge via length (PGD), fixed value (SA edge)
   V4T_06:double = 0.04; // Via4TC-Bridge via width (OGD), fixed value
   V4T_20:double = 0; // The V4T_01 edges of V4TA, V4T_03 edges of V4TB, and V4T_05 edges of V4TC must both be aligned with parallel Metal-5 edges.
   V4_01:double = 0.032; // Width of below Via4 (PGD), fixed value (SA edges)
   V4_02:double = 0.04; // Via4A length (OGD), fixed value
   V4_03:double = 0.044; // Via4B length (OGD), fixed value
   V4_04:double = 0.036; // Via4D length (OGD), fixed value
   V4_05:double = 0.04; // Via4F length (OGD), fixed value
   V4_06:double = 0.064; // Via4D length (OGD), fixed value
   V4_08:double = 0.056; // Via4J length (OGD), fixed value
   V4_09:double = 0.108; // Via4FA length (OGD), fixed value
   V4_10:double = 0.048; // Via4N length (OGD), fixed value
   V4_101:double = 0.056; // Width of Via4S (PGD), fixed value (SA edges)
   V4_102:double = 0.044; // Length of Via4S (OGD), fixed value
   V4_103:double = 0.048; // Width of Via4U (PGD), fixed value (SA edges)
   V4_104:double = 0.076; // Length of Via4U (OGD), fixed value
   V4_105:double = 0.048; // Width of Via4V (PGD), fixed value (SA edges)
   V4_106:double = 0.09; // Length of Via4V (OGD), fixed value
   V4_107:double = 0.068; // Width of Via4W (PGD), fixed value (SA edges)
   V4_108:double = 0.044; // Length of Via4W (OGD), fixed value
   V4_109:double = 0.068; // Width of Via4X (PGD), fixed value (SA edges)
   V4_11:double = 0.06; // Via4O length (OGD), fixed value
   V4_110:double = 0.076; // Length of Via4X (OGD), fixed value
   V4_111:double = 0.08; // Width of Via4Y (PGD), fixed value (SA edges)
   V4_112:double = 0.064; // Length of Via4Y (OGD), fixed value
   V4_113:double = 0.084; // Width of Via4Z (PGD), fixed value (SA edges)
   V4_114:double = 0.056; // Length of Via4Z (OGD), fixed value
   V4_115:double = 0.054; // Width of Via4FP (PGD), fixed value (SA edges)
   V4_116:double = 0.056; // Length of Via4FP (OGD), fixed value
   V4_117:double = 0.054; // Width of Via4HP (PGD), fixed value (SA edges)
   V4_118:double = 0.054; // Length of Via4HP (OGD), fixed value
   V4_119:double = 0.158; // Via4RS length (OGD), fixed value
   V4_12:double = 0.076; // Via4Q length (OGD), fixed value
   V4_120:double = 0.056; // Via4JX length (OGD), fixed value
   V4_121:double = 0.108; // Via4W Width (PGD) , fixed value (SA edges)
   V4_122:double = 0.054; // Via4W length (OGD), fixed value
   V4_123:double = 0.052; // Via4GX (PGD), fixed value (SA edges)
   V4_124:double = 0.046; // Via4GX length (OGD), fixed value
   V4_125:double = 0.15; // Via4Y length (OGD), fixed value
   V4_126:double = 0.15; // Via4Z length (OGD), fixed value
   V4_127:double = 0.046; // Via4JX (PGD), fixed value (SA edges)
   V4_128:double = 0.12; // Unrestricted min Via4 edge-to-edge space between SA edges
   V4_129:double = 0.04; // Via4NX (PGD), fixed value (SA edges)
   V4_13:double = 0.09; // Via4R length (OGD), fixed value
   V4_130:double = 0.066; // Via4NX length (OGD), fixed value
   V4_131:double = 0.038; // Via4RX (PGD), fixed value (SA edges)
   V4_132:double = 0.06; // Via4RX length (OGD), fixed value
   V4_133:double = 0.044; // Via4RY (PGD), fixed value (SA edges)
   V4_134:double = 0.06; // Via4RY length (OGD), fixed value
   V4_135:double = 0.038; // Via4VX (PGD), fixed value (SA edges)
   V4_136:double = 0.074; // Via4VX length (OGD), fixed value
   V4_137:double = 0.042; // Via4SX (PGD), fixed value (SA edges)
   V4_138:double = 0.076; // Via4SX length (OGD), fixed value
   V4_14:double = 0.056; // Via4M length (OGD), fixed value
   V4_142:double = 0.028; // Minimum Via4TC overlap of Metal4 (PGD). If M4 width is <V4_42, then Via4TC OGD edge enclosure of M4 inside edge must be >=V4_142.
   V4_15:double = 0.068; // Via4T length (OGD), fixed value
   V4_152:double = 0.028; // Min Via4 to Via3 edge-to-edge space (on different Metal4)
   V4_153:double = 0.035; // Min Via4 on isolated M5 to Via3 space (on different Metal4)
   V4_154:double = 0.04; // Isolated M5 line for V4_153 is defined as a line with exposed edges on both sides with an overlap of the exposed edges > V4_154
   V4_16:double = 0.08; // Via4C length (OGD), fixed value
   V4_161:double = 0.044; // Width of below Via4 (PGD), fixed value (SA edges)
   V4_162:double = 0.044; // Via4BP length (OGD), fixed value
   V4_163:double = 0.048; // Via4NP length (OGD), fixed value
   V4_164:double = 0.06; // Via4OP length (OGD), fixed value
   V4_165:double = 0.064; // Via4DP length (OGD), fixed value
   V4_166:double = 0.056; // Via4EP length (OGD), fixed value
   V4_167:double = 0.068; // Via4TP length (OGD), fixed value
   V4_168:double = 0.076; // Via4QP length (OGD), fixed value
   V4_169:double = 0.08; // Via4CP length (OGD), fixed value
   V4_17:double = 0.08; // Via4V length (OGD), fixed value
   V4_170:double = 0.09; // Via4RP length (OGD), fixed value
   V4_171:double = 0.108; // Via4MP length (OGD), fixed value
   V4_172:double = 0.054; // Via4GP length (OGD), fixed value
   V4_181:double = 0.044; // Width of Via4YZ (PGD), fixed value
   V4_182:double = 0.142; // Length of Via4YZ (OGD), fixed value
   V4_19:double = 0; // V4_01 edge of above vias must both be aligned with parallel Metal-5 edges.
   V4_20:double = 0; // The V4_01 edges of above Via4 must both be aligned with parallel Metal-5 edges.
   V4_22:double = 0.095; // Unrestricted V4A-to-V4A center-to-center space (min)
   V4_228:double = 0.08; // Unrestricted min V4HA SA edge to SA edge of any via4
   V4_23:double = 0.04; // Parallel full-facing metal-aligned Via4 edges can be as closely spaced as the minimum allowed M5 space. (min value, allowed up to max value <V4_128)
   V4_24:double = 0.044; // Min Via4 corner-to-corner space
   V4_240:double = 0; // Only V4_01 (32nm), V4_161 (44nm) width vias (except Via4MP) can overhang Metal4 (PGD)
   V4_25:double = 0; // The tight via-via corner space (<V4_28) is allowed for a single isolated via pair. The pair must be spaced from other vias by >=V4_28 
   V4_250:double = 0.071; // Min unrestricted Via4 corner-to-corner space
   V4_251:double = 0; // A small via4 (32 wide - A/B/C/D/F/G/J/L/N/O/R/S/V/HA/HG/HK/HM/HD/HJ/HL) can have only one via4 (big or small) at corner-to-corner space >=V4_24 and <V4_250; other vias must be >=V4_250 from the small via 
   V4_252:double = 0; // A big via4 can have 2 or fewer small via4 (32 wide) at corner-to-corner space >=V4_24 and <V4_250 on any 2 corners; other vias must be >=V4_250 from the big via 
   V4_26:double = 0.076; // Min (Via4BP/NP/OP/DP/EP/TP/QP/CP/RP/MP/GP/S/U/V/W/X/Y/Z/FP/HP/YZ to any Via4) or  (Via4FA/Q/R/T/C to Via4FA/Q/R/T/C) corner-to-corner space (exception to V4_24/25 rules)
   V4_28:double = 0.072; // Unrestricted min Via4 edge-to-edge space
   V4_29:double = 0.02; // Via4 min edge offset if corner-to-corner space is less than V4_30
   V4_30:double = 0.1; // Via4  corner-to-corner space limit for V4_29
   V4_32:double = 0.025; // Min Via4 to Via3 corner-to-corner space (on different Metal4)
   V4_33:double = 0.022; // Min Via4 edge space to Metal4
   V4_40:double = 0.002; // Maximum Via4 overhang of Metal4 (PGD)
   V4_41:double = 0; // Via4 must be centered on Metal4 (PGD)
   V4_42:double = 0; // Via4YZ can only land on width_L_05/06 M4 lines (M4L_05/06)
   V4_43:double = 0; // Via4TA/TB/TC must overlap 2 adjacent Metal4 lines
   V4_45:double = 0; // Via4JX cannot land on Metal4 narrower than M4L_01 (all M4S and M4M lines)
   V4_450:double = 0.071; // Min Bridge Via4 corner-to-corner space to any other via4
   V4_451:double = 0.136; // Min Bridge Via4 self-aligned edge space to any via4 self-aligned edge
   V4_452:double = 0.09; // Min Bridge Via4 non-self-aligned edge space to any via4 non-self-aligned edge
   V4_46:double = 0; // Via4RX cannot land on Metal4 narrower than M4M_02 (all M4S and M4M_01 lines)
   V4_49:double = 0.012; // Min Metal4 line-end enclosure of Via4
   V4_51:double = 0; // Both opposite edges of a (2-sided SA) aligned via must be metal aligned
   V4_52:double = 0; // Via4YZ must be centered under M5_13/14/15 width M5 (only)
   V4_54:double = 0.022; // Min Metal5 concave corner space to Via4
   V4_61:double = 0.022; // Min Metal5 line-end enclosure of Via4  (except Via4YZ)
   V4_62:double = 0.032; // Min Metal5 line-end enclosure of Via4YZ
   V4_97:double = 0.136; // Min V4TA/TB/TC to V4TA/TB/TC space OGD (this is an exception to V4_23)
   V4_98:double = 0; // V4Ts (TA/TB/TC) cannot be on a power net
   V4err_101:double = 0.05; // Via4N length (OGD), fixed value
   V4err_113:double = 0.05; // Via4NS length (OGD), fixed value
   V5_01:double = 0.06; // Width of below Via5 (OGD), fixed value (SA edges)
   V5_02:double = 0.04; // Via5A length (PGD), fixed value
   V5_03:double = 0.044; // Via5B length (PGD), fixed value
   V5_04:double = 0.048; // Via5C length (PGD), fixed value
   V5_05:double = 0.054; // Via5D length (PGD), fixed value
   V5_06:double = 0.056; // Via5E length (PGD), fixed value
   V5_07:double = 0.06; // Via5F length (PGD), fixed value
   V5_08:double = 0.064; // Via5G length (PGD), fixed value
   V5_09:double = 0.068; // Via5H length (PGD), fixed value
   V5_10:double = 0.076; // Via5I length (PGD), fixed value
   V5_101:double = 0.06; // Width of Via5K (OGD/PGD), fixed value (SA edge)
   V5_102:double = 0.09; // Length of Via5K (PGD/OGD), fixed value
   V5_103:double = 0.072; // Width of Via5CX (OGD), fixed value (SA edge)
   V5_104:double = 0.08; // Length of Via5CX (PGD), fixed value
   V5_105:double = 0.088; // Width of Via5P (OGD), fixed value (SA edge)
   V5_106:double = 0.24; // Length of Via5P (PGD), fixed value
   V5_107:double = 0.068; // Width of Via5W (OGD), fixed value (SA edge)
   V5_108:double = 0.044; // Length of Via5W (PGD), fixed value
   V5_109:double = 0.068; // Width of Via5X (OGD), fixed value (SA edge)
   V5_11:double = 0.08; // Via5J length (PGD), fixed value
   V5_110:double = 0.076; // Length of Via5X (PGD), fixed value
   V5_111:double = 0.08; // Width of Via5Y (OGD), fixed value (SA edge)
   V5_112:double = 0.064; // Length of Via5Y (PGD), fixed value
   V5_113:double = 0.084; // Width of Via5Z (OGD), fixed value (SA edge)
   V5_114:double = 0.056; // Length of Via5Z (PGD), fixed value
   V5_115:double = 0.054; // Width of Via5FP (OGD), fixed value (SA edge)
   V5_116:double = 0.056; // Length of Via5FP (PGD), fixed value
   V5_117:double = 0.054; // Width of Via5HP (OGD), fixed value (SA edge)
   V5_118:double = 0.054; // Length of Via5HP (PGD), fixed value
   V5_12:double = 0.108; // Via5L length (PGD), fixed value
   V5_124:double = 0.088; // Via5 min corner-to-corner spacing between via with SA edge in PGD and via with SA edge in OGD
   V5_128:double = 0.12; // Unrestricted min Via5 edge-to-edge space (SA edges, SA to non-SA edges)
   V5_13:double = 0.16; // Via5M length (PGD), fixed value
   V5_14:double = 0.2; // Via5N length (PGD), fixed value
   V5_15:double = 0.24; // Via5O length (PGD), fixed value
   V5_152:double = 0.028; // Min Via5 to Via4 edge-to-edge space (on different Metal5)
   V5_153:double = 0.035; // Min Via5 on isolated M6 to Via4 space (on different Metal5)
   V5_154:double = 0.04; // Isolated M6 line for V5_153 is defined as a line with exposed edges on both sides with an overlap of the exposed edges > V5_154
   V5_16:double = 0.08; // Via5C length (PGD), fixed value
   V5_161:double = 0.044; // Width of below Via5 (OGD), fixed value (SA edges)
   V5_162:double = 0.044; // Via5BP length (PGD), fixed value
   V5_163:double = 0.048; // Via5NP length (PGD), fixed value
   V5_164:double = 0.06; // Via5OP length (PGD), fixed value
   V5_165:double = 0.064; // Via5DP length (PGD), fixed value
   V5_166:double = 0.056; // Via5EP length (PGD), fixed value
   V5_167:double = 0.068; // Via5TP length (PGD), fixed value
   V5_168:double = 0.076; // Via5QP length (PGD), fixed value
   V5_169:double = 0.08; // Via5CP length (PGD), fixed value
   V5_170:double = 0.09; // Via5RP length (PGD), fixed value
   V5_171:double = 0.108; // Via5MP length (PGD), fixed value
   V5_172:double = 0.054; // Via5GP length (PGD), fixed value
   V5_181:double = 0.044; // Width of Via5YZ (OGD), fixed value
   V5_182:double = 0.142; // Length of Via5YZ (PGD), fixed value
   V5_19:double = 0; // V5_01 edge of above vias must both be aligned with parallel Metal6 edges.
   V5_22:double = 0.113; // Via5A-to-Via5A center-to-center space (on different M5 lines), minimum
   V5_23:double = 0.04; // Parallel full-facing metal-aligned Via5 edges can be as closely spaced as the minimum allowed M6 space.  (min value, allowed up to max value <=M6_33)
   V5_24:double = 0.044; // Min Via5 corner-to-corner space
   V5_240:double = 0; // Min enclosure of Via5P by Metal5
   V5_241:double = 0; // Only Via5L/M/N/O/P can land on Metal5 wires M5_13/14/15 (>=0.160)
   V5_25:double = 0; // The tight via-via corner space (<V5_28) is allowed for a single isolated via pair. The pair must be spaced from other vias by V5_28 
   V5_26:double = 0.076; // Min (Via5BP/NP/OP/DP/EP/TP/QP/CP/RP/MP/GP/S/U/V/W/X/Y/Z/FP/HP/YZ to any Via5) or  (Via5FA/Q/R/T/C to Via5FA/Q/R/T/C) corner-to-corner space (exception to V5_24/25 rules)
   V5_28:double = 0.1; // Unrestricted min Via5 edge-to-edge space (non-SA edges)
   V5_29:double = 0.02; // Via5 min edge offset if corner-to-corner space is < V5_30
   V5_30:double = 0.1; // Via5  corner-to-corner space limit (max value) for rule V5_29
   V5_32:double = 0.036; // Min Via5 to Via4 space (on different Metal5, all-directional check)
   V5_33:double = 0.03; // Min Via5 edge space to Metal5
   V5_40:double = 0.01; // Maximum Via5 overhang of Metal5 (PGD/OGD)
   V5_41:double = 0; // All Via5 (except Via5P) must be centered on Metal5 (PGD/OGD)
   V5_42:double = 0; // Via5YZ can only land on width_L_05/06 M5 lines (M5L_05/06)
   V5_49:double = 0.012; // Min Metal5 line-end enclosure of Via5
   V5_51:double = 0; // Both opposite edges of a (2-sided SA) aligned via must be metal aligned
   V5_52:double = 0; // Via5YZ must be centered under M6_13/14/15 width M6 (only)
   V5_54:double = 0.022; // Min Metal6 concave corner space to Via5
   V5_61:double = 0.022; // Min Metal6 line-end enclosure of Via5 
   V5_62:double = 0.032; // Min Metal6 line-end enclosure of Via5YZ
   V6_01:double = 0.056; // Via6A width (OGD), fixed value
   V6_02:double = 0.06; // Via6A length (PGD), fixed value
   V6_03:double = 0.06; // Via6B width (OGD), fixed value
   V6_04:double = 0.06; // Via6B length (PGD), fixed value
   V6_05:double = 0.06; // Via6C length (PGD/OGD - SA edges), fixed value
   V6_06:double = 0.084; // Via6C width (OGD/PGD - non SA edges), fixed value
   V6_07:double = 0.06; // Via6D length (PGD), fixed value
   V6_08:double = 0.12; // Via6D width (OGD), fixed value
   V6_09:double = 0.06; // Via6E length (PGD), fixed value
   V6_10:double = 0.15; // Via6E width (OGD), fixed value
   V6_101:double = 0.144; // Width of Via6R (PGD), fixed value  (SA edge)
   V6_102:double = 0.22; // Via6R length (OGD), fixed value
   V6_103:double = 0.144; // Width of Via6S (PGD), fixed value  (SA edge)
   V6_104:double = 0.256; // Via6S length (OGD), fixed value
   V6_105:double = 0.144; // Width of Via6T (PGD), fixed value  (SA edge)
   V6_106:double = 0.112; // Via6T length (OGD), fixed value
   V6_107:double = 0.08; // Via6DX length (PGD), fixed value (not allowed for P1273.6)
   V6_108:double = 0.12; // Via6DX width (OGD), fixed value (not allowed for P1273.6)
   V6_109:double = 0.09; // Via6EX length (PGD), fixed value (not allowed for P1273.6)
   V6_11:double = 0.06; // Via6F length (PGD), fixed value
   V6_110:double = 0.15; // Via6EX width (OGD), fixed value (not allowed for P1273.6)
   V6_117:double = 0.09; // Via6CY length (PGD/OGD - SA edges), fixed value (not allowed for P1273.6)
   V6_118:double = 0.084; // Via6CY width (OGD/PGD - non SA edges), fixed value (not allowed for P1273.6)
   V6_12:double = 0.168; // Via6F width (OGD), fixed value
   V6_128:double = 0.24; // Unrestricted min Via6 edge-to-edge space (SA edges, SA to non-SA edges)
   V6_13:double = 0.06; // Via6G length (PGD), fixed value
   V6_14:double = 0.18; // Via6G width (OGD), fixed value
   V6_15:double = 0.088; // Via6H length (PGD), fixed value
   V6_16:double = 0.18; // Via6H width (OGD), fixed value
   V6_17:double = 0.072; // Via6CX length (PGD/OGD - SA edges), fixed value
   V6_18:double = 0.084; // Via6CX width (OGD/PGD - non SA edges), fixed value
   V6_19:double = 0; // The long edges of V6A/CY must both be aligned with parallel metal edges
   V6_20:double = 0; // The short edges V6B/C/CX/D/DX/E/EX/F/G/H vias must both be aligned with parallel metal edges
   V6_22:double = 0.137; // Via6A-Via6A center-to-center space, minimum
   V6_23:double = 0.056; // Min Via6 metal aligned edges space when the other edges (non-metal limited edges) are perfectly aligned  (allowed up to max value <=M7_27)
   V6_24:double = 0.059; // Min Via6 corner-to-corner space
   V6_240:double = 0; // Via6H is not allowed to overhang
   V6_25:double = 0.1; // Min Via6 facing edge space (V6_23,27,28 are exceptions)
   V6_27:double = 0.168; // Via6C/CX/D/E/F/G/H/CY/DX/EX facing short-edge to short-edge space, minimum
   V6_28:double = 0.168; // Min Via6 metal aligned edges space when the other edges (non-metal limited edges) are NOT perfectly aligned
   V6_29:double = 0.02; // Via6 min edge offset if corner-to-corner space is < V6_30
   V6_30:double = 0.098; // Via6 corner-to-corner space limit (max value) for rule V6_29
   V6_31:double = 0.036; // Min Via6 to Via5 edge-edge space (on different M6)
   V6_32:double = 0.03; // Min Via6 to Via5 corner-to-corner space (on different M6)
   V6_33:double = 0.03; // Min Via6 edge space to Metal6
   V6_40:double = 0.01; // Maximum Via6 overhang of Metal6 (PGD)
   V6_41:double = 0; // Via6 (except Via6H) must be centered on Metal6 (PGD)
   V6_48:double = 0; // Via6H enclosure by Metal6, min value
   V6_49:double = 0.016; // Min Metal6 line end enclosure of Via6
   V6_51:double = 0; // Both opposite edges of a (2-sided SA) aligned via must be metal aligned
   V6_54:double = 0.032; // Min M7 concave corner space to Via6
   V6_61:double = 0.032; // Min M7 line end enclosure of Via6 
   V6_92:double = 0.088; // Via6BS length (OGD), fixed value
   V6err_02:double = 0.08; // Via6AS length (OGD), fixed value
   V6err_103:double = 0.144; // Width of Via6S (PGD), fixed value  (SA edge)
   V6err_104:double = 0.256; // Via6S length (OGD), fixed value
   V6err_12:double = 0.256; // Via6Q length (OGD), fixed value
   V6err_92:double = 0.088; // Via6BS length (OGD), fixed value
   V7_01:double = 0.074; // Width of below Via7, (OGD) fixed value (SA edges)
   V7_02:double = 0.08; // Via7AS length (PGD), fixed value
   V7_03:double = 0.12; // Via7CS length (PGD), fixed value
   V7_04:double = 0.144; // Via7DS length (PGD), fixed value
   V7_05:double = 0.16; // Via7ES length (PGD), fixed value
   V7_06:double = 0.264; // Via7GS length (PGD), fixed value
   V7_07:double = 0.104; // Via7M length (PGD), fixed value
   V7_08:double = 0.2; // Via7N length (PGD), fixed value
   V7_09:double = 0.24; // Via7P length (PGD), fixed value
   V7_10:double = 0.3; // Via7JS length (PGD), fixed value
   V7_101:double = 0.12; // Via7Q width (OGD), fixed value (SA edges)
   V7_102:double = 0.144; // Via7Q length (PGD), fixed value
   V7_103:double = 0.102; // Via7R width (OGD), fixed value (SA edges)
   V7_104:double = 0.144; // Via7R length (PGD), fixed value
   V7_105:double = 0.12; // Via7S width (OGD), fixed value (SA edges)
   V7_106:double = 0.08; // Via7S length (PGD), fixed value
   V7_107:double = 0.12; // Via7T width (OGD), fixed value (SA edges)
   V7_108:double = 0.104; // Via7T length (PGD), fixed value
   V7_109:double = 0.102; // Via7U width (OGD), fixed value (SA edges)
   V7_11:double = 0.126; // Rectangular Via7C width, ONLY ALLOWED value
   V7_110:double = 0.16; // Via7U length (PGD), fixed value
   V7_111:double = 0.132; // Via7ZS width (OGD), fixed value (SA edges)
   V7_112:double = 0.144; // Via7ZS length (PGD), fixed value
   V7_12:double = 0.126; // Rectangular Via7C length, ONLY ALLOWED value
   V7_128:double = 0.24; // Unrestricted min Via7 edge-to-edge space (SA edges, SA to non-SA edges)
   V7_13:double = 0.126; // Rectangular Via7D width, ONLY ALLOWED value
   V7_14:double = 0.18; // Rectangular Via7D length, ONLY ALLOWED value
   V7_151:double = 0.208; // Width of Via7TS, fixed value (OGD SA edge)
   V7_152:double = 0.212; // Via7TS length (PGD), fixed value
   V7_153:double = 0.232; // Width of Via7US, fixed value (OGD SA edge)
   V7_154:double = 0.124; // Via7US length (PGD), fixed value
   V7_155:double = 0.18; // Width of Via7VS, fixed value (OGD SA edge)
   V7_156:double = 0.212; // Via7VS length (PGD), fixed value
   V7_157:double = 0.22; // Width of Via7WS, fixed value (OGD SA edge)
   V7_158:double = 0.192; // Via7WS length (PGD), fixed value
   V7_159:double = 0.176; // Width of Via7XS, fixed value (OGD SA edge)
   V7_16:double = 0.126; // Rectangular Via7E width, ONLY ALLOWED value
   V7_160:double = 0.168; // Via7XS length (PGD), fixed value
   V7_161:double = 0.18; // Width of Via7YS, fixed value (OGD SA edge)
   V7_162:double = 0.192; // Via7YS length (PGD), fixed value
   V7_163:double = 0.18; // Width of Via7ZS, fixed value (OGD SA edge)
   V7_164:double = 0.124; // Via7ZS length (PGD), fixed value
   V7_17:double = 0.084; // Rectangular Via7E length, ONLY ALLOWED value
   V7_22:double = 0.195; // Via7AS-to-Via7AS center-to-center space (on different M7 lines), minimum
   V7_23:double = 0.08; // Parallel full-facing metal-aligned Via7 edges can be as closely spaced as the minimum allowed M8 space.  (min value, allowed up to max value <=M8_27)
   V7_230:double = 0.164; // Max value for rule V7_23 spacing check
   V7_24:double = 0.088; // Min Via7 corner-to-corner space
   V7_28:double = 0.15; // Unrestricted min Via7 edge-to-edge space (non-SA edges)
   V7_29:double = 0.038; // Via7 min edge offset if corner-to-corner space is < V7_30
   V7_30:double = 0.15; // Via7 corner-to-corner space limit (max value) for rule V7_29
   V7_32:double = 0.046; // Min Via7 to Via6 space (on different Metal7, all-directional check)
   V7_33:double = 0.047; // Min Via7 edge space to Metal7
   V7_40:double = 0.009; // Maximum Via7 overhang of Metal7 (OGD/PGD)
   V7_41:double = 0; // Via7 must be centered on Metal7 (PGD/OGD)
   V7_42:double = 0; // Redundant Rectangular Via7s must be aligned with each other
   V7_49:double = 0.028; // Min Metal7 line-end enclosure of Via7
   V7_51:double = 0; // Both opposite edges of a (2-sided SA) aligned via must be metal aligned
   V7_52:double = 0; // Min M8 enclosure of Via7C/D/E (one edge at a corner)
   V7_53:double = 0.028; // Min M8 line-end enclosure of Via7C/D/E, orthogonal edge
   V7_54:double = 0.028; // Min Metal8 concave corner space to Via7
   V7_61:double = 0.028; // Min Metal8 line-end enclosure of Via7 
   V7err_02:double = 0.08; // Via7AS length (PGD), fixed value
   V7err_10:double = 0.3; // Via7JS length (PGD), fixed value
   V7err_102:double = 0.08; // Via7KS length (PGD), fixed value
   V7err_151:double = 0.208; // Width of Via7TS, fixed value (OGD SA edge)
   V7err_152:double = 0.212; // Via7TS length (PGD), fixed value
   V7err_155:double = 0.18; // Width of Via7VS, fixed value (OGD SA edge)
   V7err_156:double = 0.212; // Via7VS length (PGD), fixed value
   V7err_157:double = 0.22; // Width of Via7WS, fixed value (OGD SA edge)
   V7err_158:double = 0.192; // Via7WS length (PGD), fixed value
   V8_01:double = 0.1; // Width of below Via8, fixed value (PGD SA-edge)
   V8_02:double = 0.08; // Via8AS length (OGD), fixed value
   V8_03:double = 0.11; // Via8BS length (OGD), fixed value
   V8_04:double = 0.124; // Via8CS length (OGD), fixed value
   V8_05:double = 0.148; // Via8DS length (OGD), fixed value
   V8_06:double = 0.168; // Via8ES length (OGD), fixed value
   V8_07:double = 0.192; // Via8FS length (OGD), fixed value
   V8_08:double = 0.212; // Via8GS length (OGD), fixed value
   V8_09:double = 0.236; // Via8HS length (OGD), fixed value
   V8_10:double = 0.3; // Via8JS length (OGD), fixed value
   V8_101:double = 0.092; // Width of below Via8, fixed value (PGD SA-edge)
   V8_102:double = 0.08; // Via8KS length (OGD), fixed value
   V8_103:double = 0.11; // Via8LS length (OGD), fixed value
   V8_104:double = 0.124; // Via8MS length (OGD), fixed value
   V8_105:double = 0.148; // Via8NS length (OGD), fixed value
   V8_106:double = 0.168; // Via8OS length (OGD), fixed value
   V8_107:double = 0.192; // Via8PS length (OGD), fixed value
   V8_108:double = 0.212; // Via8QS length (OGD), fixed value
   V8_109:double = 0.236; // Via8RS length (OGD), fixed value
   V8_11:double = 0.08; // Min M8 enclosure of Square Via8
   V8_12:double = 0.08; // Min M8 enclosure of Square Via8, orthogonal edge
   V8_128:double = 0.24; // Unrestricted min Via8 edge-to-edge space (SA edges, SA to non-SA edges)
   V8_131:double = 0.11; // Rectangular Via8RA width, ONLY ALLOWED value
   V8_132:double = 0.22; // Rectangular Via8RA length, ONLY ALLOWED value
   V8_151:double = 0.208; // Width of Via8TS, fixed value (PGD SA edge)
   V8_152:double = 0.212; // Via8TS length (OGD), fixed value
   V8_153:double = 0.232; // Width of Via8US, fixed value (PGD SA edge)
   V8_154:double = 0.124; // Via8US length (OGD), fixed value
   V8_155:double = 0.18; // Width of Via8VS, fixed value (PGD SA edge)
   V8_156:double = 0.212; // Via8VS length (OGD), fixed value
   V8_157:double = 0.22; // Width of Via8WS, fixed value (PGD SA edge)
   V8_158:double = 0.192; // Via8WS length (OGD), fixed value
   V8_159:double = 0.176; // Width of Via8XS, fixed value (PGD SA edge)
   V8_160:double = 0.168; // Via8XS length (OGD), fixed value
   V8_161:double = 0.18; // Width of Via8YS, fixed value (PGD SA edge)
   V8_162:double = 0.192; // Via8YS length (OGD), fixed value
   V8_163:double = 0.18; // Width of Via8ZS, fixed value (PGD SA edge)
   V8_164:double = 0.124; // Via8ZS length (OGD), fixed value
   V8_21:double = 0.18; // Square Via8 to Via7 (square/rectangular) space (on different M8 net, all-directional check)
   V8_22:double = 0.226; // Via8A-to-Via8A center-to-center space (on different M8 lines), minimum
   V8_23:double = 0.08; // Parallel full-facing metal-aligned Via8 edges can be as closely spaced as the minimum allowed M9 space.  (min value, allowed up to max value <=M9_22)
   V8_24:double = 0.104; // Min Via8 corner-to-corner space
   V8_28:double = 0.228; // Unrestricted min Via8 edge-to-edge space (non SA edges)
   V8_29:double = 0.068; // Via8 min edge offset if corner-to-corner space is < V8_30
   V8_30:double = 0.228; // Via8 corner-to-corner space limit (max value) for rule V8_29
   V8_31:double = 0.44; // Rectangular Via8 width, ONLY ALLOWED value
   V8_32:double = 0.126; // Min Via8 to Via7 space (on different Metal8 net, all-directional check)
   V8_33:double = 0.074; // Min Via8 edge space to Metal8
   V8_34:double = 0.307; // Rectangular Via8 Short edge facing space to Square or Rectangular Via8 
   V8_35:double = 0.212; // Rectangular Via8 Corner-to-corner space to Square or Rectangular Via8 
   V8_39:double = 0.16; // Redundant Rectangular Via8 spacing between facing Long edges, for electrically shorted vias, fixed value  (note this is an allowed exception to V8_33)
   V8_40:double = 0.006; // Maximum Via8 overhang of Metal8 (PGD)
   V8_41:double = 0; // Via8 must be centered on Metal8 (PGD)
   V8_49:double = 0.04; // Min Metal8 line-end enclosure of Via8
   V8_51:double = 0; // Both opposite edges of a (2-sided SA) aligned via must be metal aligned
   V8_52:double = 0.08; // Min M8 enclosure of Rectangular Via8, orthogonal edge
   V8_53:double = 0.018; // Max extent of Rectangular Via8 short edge beyond M8 side
   V8_54:double = 0.044; // Min Metal9 concave corner space to Via8
   V8_61:double = 0.044; // Min Metal9 line-end coverage of Via8
   V8_62:double = 0.04; // M9 coverage of Square Via8 orthogonal edge
   V8_71:double = 0; // M9 coverage of Rectangular Via8 (one edge at a corner)
   V8_72:double = 0.04; // M9 coverage of Rectangular Via8, orthogonal edge
   V8_73:double = 0.001; // Max extent of Redundant Rectangular Via8 long edge beyond M9 edge
   V8err_01:double = 0.08; // Square Via8SS ONLY ALLOWED value
   V8err_101:double = 0.11; // Square Via8SA ONLY ALLOWED value
   V8err_31:double = 0.08; // Rectangular Via8RS width, ONLY ALLOWED value
   V8err_32:double = 0.16; // Rectangular Via8RS length, ONLY ALLOWED value
   V9_01:double = 0.08; // Square Via9SS ONLY ALLOWED value
   V9_02:double = 0.298; // Square Via9 to Square Via9 (center-to-center) separation, minimum
   V9_101:double = 0.11; // Square Via9SA ONLY ALLOWED value
   V9_11:double = 0; // Min M9 enclosure of Square Via9
   V9_12:double = 0.04; // Min M9 enclosure of Square Via9, orthogonal edge
   V9_131:double = 0.11; // Rectangular Via9RA width, ONLY ALLOWED value
   V9_132:double = 0.22; // Rectangular Via9RA length, ONLY ALLOWED value
   V9_153:double = 0; // Rectangular Via9s that overhang the M9 edge must be centered on the PGD M9 they lands on
   V9_21:double = 0.18; // Min Square Via9 to Via8 (square/rectangular) space (on different M9, all-directional check)
   V9_31:double = 0.08; // Rectangular Via9RS width, ONLY ALLOWED value
   V9_32:double = 0.16; // Rectangular Via9RS length, ONLY ALLOWED value
   V9_33:double = 0.275; // Min Rectangular Via9 Long edge facing space to Square or Rectangular Via9 
   V9_34:double = 0.307; // Min Rectangular Via9 Short edge facing space to Square or Rectangular Via9 
   V9_35:double = 0.212; // Min Rectangular Via9 Corner-to-corner space to Square or Rectangular Via9 
   V9_39:double = 0.16; // Redundant Rectangular Via9 spacing between facing Long edges, for electrically shorted vias, fixed value
   V9_40:double = 0; // Redundant Rectangular Via9s must be aligned with each other
   V9_41:double = 0.18; // Min Rectangular Via9 to Via8 (square/rectangular) space (on different M9, all-directional check)
   V9_51:double = 0; // M9 enclosure of Rectangular Via9 long edge (min)
   V9_52:double = 0.04; // Min M9 enclosure of Rectangular Via9, orthogonal edge
   V9_53:double = 0.018; // Max extent of Rectangular Via9 short edge beyond M9 side
   V9_61:double = 0; // Min M10 coverage of Square Via9 (one edge at a corner)
   V9_62:double = 0.04; // Min M10 coverage of Square Via9 orthogonal edge
   V9_71:double = 0; // Min M10 coverage of Rectangular Via9 (one edge at a corner)
   V9_72:double = 0.04; // Min M10 coverage of Rectangular Via9, orthogonal edge
   V9_73:double = 0.001; // Max extent of Redundant Rectangular Via9 long edge beyond M10 edge
   VCH_01:double = 0.042; // Width of VCNHB/HC (OGD), fixed value
   VCH_02:double = 0.052; // VCNHB length (PGD), fixed value (one VCH_01 edge is SA)
   VCH_03:double = 0.038; // VCNHC length (PGD), fixed value (one VCH_01 edge is SA)
   VC_01:double = 0.042; // Width of all VCNs, fixed value (OGD)
   VC_02:double = 0.028; // VCNAX length fixed value
   VC_03:double = 0.032; // VCNA length, fixed value
   VC_04:double = 0.036; // VCNBX length, fixed value
   VC_05:double = 0.04; // VCNCX length, fixed value
   VC_06:double = 0.042; // VCNDX length, fixed value
   VC_07:double = 0.046; // VCNB length, fixed value
   VC_08:double = 0.048; // VCNEX length, fixed value
   VC_09:double = 0.054; // VCNFX length, fixed value
   VC_10:double = 0.06; // VCNC length, fixed value
   VC_11:double = 0.078; // VCNGX length, fixed value
   VC_12:double = 0.08; // VCNJX length, fixed value
   VC_134:double = 0.036; // The TCN line end that has the VC_34 overhang needs to have a TCN ETE space of =VC_134, or >=42, also note this line end falls of the 21nm TCN line end grid by 6nm) 
   VC_139:double = 0.008; // Max VCNBX OGD edge enclosure of TCN end (PGD)
   VC_19:double = 0; // VC_01 edges of above vias must be aligned with Metal-0 side edges.
   VC_22:double = 0.089; // Unrestricted VCNAX-to-VCNAX center-to-center space (min)
   VC_23:double = 0.028; // Parallel full-facing metal-aligned VCN edges can be as closely spaced as the minimum allowed M0 space.  (only allowed value)
   VC_24:double = 0.098; // Min space between non-metal-aligned VCN edges (OGD)
   VC_26:double = 0.084; // Min space between VCN edges (PGD)
   VC_30:double = 0; // Diffcon line-end enclosure of VCN (metal-aligned edge), min value
   VC_31:double = 0.007; // Max VCNDX OGD edge enclosure of TCN end (PGD)
   VC_32:double = 0.019; // Max VCNGX OGD edge enclosure of TCN end (PGD)
   VC_33:double = 0.007; // Non-metal aligned VCN edge extent beyond Diffcon side, min value
   VC_34:double = 0.006; // VCNCX OGD edge enclosure of TCN end (PGD) fixed value (or >=0 VC_30). This TCN line end also requires a TCN ETE exception value of VC_134 (36nm)
   VC_35:double = 0.019; // Max VCNJX OGD edge enclosure of TCN end (PGD)
   VC_36:double = 0.026; // Min VCN space to Diffcon, PGD
   VC_37:double = 0.034; // Min VCN space to Diffcon, OGD
   VC_38:double = 0.026; // Min VCN PGD offset from Diffcon line-end, if corner-to-corner space is < VC_37
   VC_39:double = 0.002; // Max VCNB OGD edge enclosure of TCN end (PGD)
   VC_40:double = 0; // All VCN must be centered on Polycon in the PGD direction. (Except VCNDX/HB)
   VC_41:double = 0.012; // Max VCNDX OGD edge enclosure of Polycon side (PGD)
   VC_42:double = 0; // Only VCNAX/A/BX/CX/DX/B/FX/HB are allowed to land on GCN.
   VC_43:double = 0.012; // VCN edge enclosure of Polycon end, max value OGD
   VC_44:double = 0.026; // Min VCN edge space to Polycon side (PGD)
   VC_46:double = 0.038; // Min VCN edge space to Polycon end (OGD)
   VC_47:double = 0.024; // Max VCNHB (SA edge) OGD edge enclosure of Polycon side (PGD)
   VC_48:double = 0.026; // Min VCN to Polycon PGD offset, if VCN-Polycon corners are < VC_46
   VC_49:double = 0.028; // Min VCNHC edge space to Polycon side (PGD)
   VC_51:double = 0; // VCNHB/HC can be under a M0L_03/04 line
   VC_61:double = 0.022; // Minimum M0 line end enclosure of VCN
   VC_70:double = 0.039; // Min VCN corner-to-corner space
   VD_07:double = 0.46; // Via7 space threshold that subjects the array to max area check
   VD_08:double = 1.35; // Via8 space threshold that subjects the array to max area check
   VD_09:double = 0.46; // Via9 space threshold that subjects the array to max area check
   VD_10:double = 0.46; // Via10 space threshold that subjects the array to max area check
   VD_11:double = 1.35; // Via11 space threshold that subjects the array to max area check
   VD_17:double = 0.838; // Via 7 array width exception limit
   VD_19:double = 0.838; // Via 9 array width exception limit
   VD_20:double = 0.838; // Via 10 array width exception limit
   VD_21:double = 0.838; // Via 11 array width exception limit
   VD_27:double = 47.47; // Maximum Via 7 array area after merge and exception
   VD_28:double = 47.47; // Maximum Via 8 array area after merge and exception
   VD_29:double = 47.47; // Maximum Via 9 array area after merge and exception
   VD_30:double = 47.47; // Maximum Via 10 array area after merge and exception
   VD_31:double = 47.47; // Maximum Via 11 array area after merge and exception
   VD_57:double = 18.4; // Max width of merged Via 7 array
   VD_58:double = 18.4; // Max width of merged Via 8 array
   VD_59:double = 18.4; // Max width of merged Via 9 array
   VD_60:double = 18.4; // Max width of merged Via 10 array
   VD_61:double = 18.4; // Max width of merged Via 11 array
   XDC_21:double = 0.084; // Diffcon pitch, ONLY ALLOWED value
   XG_01:double = 0; // XGOXID is only allowed in ULPpitchID or in logic pitch
   XG_02:double = 0.48; // Min width of XGOXID in any direction
   XG_03:double = 0.48; // Min space between XGOXID in any direction
   XG_05:double = 0; // PGD edge of XGOXID must be drawn in the middle of the space bewteen poly center lines
   XG_06:double = 0.039; // Min XGOXID enclosure of poly end, in PGD
   XG_07:double = 0.039; // Min XGOXID space to poly end, in PGD
   XG_08:double = 0; // Nwell inside XGOXID and outside XGOXID cannot interact
   XG_09:double = 0.252; // Min XGOXID enclosure of nwell inside
   XG_10:double = 0.252; // Min XGOXID space to nwell outside
   XG_11:double = 0.23; // Min XGOXID enclosure of active gate area inside XGOXID
   XG_12:double = 0.23; // Min XGOXID space to active gate area outside XGOXID
   XG_13:double = 0.48; // Min XGOXID space to TGOXID
   XG_21:double = 0; // ULPpitchID must always be covered by XGOXID as shown in the transition rules
   XPL_01:double = 0.042; // Poly width, ONLY ALLOWED value
   XPL_02:double = 0.084; // Poly pitch, ONLY ALLOWED value

   // define/initialize a hash for rule label to value
   drValHash:typeHashString2Double = { 
      xc(ADC_04) => 0.011,
      xc(ADC_21) => 0.14,
      xc(AG4_01) => 0.08,
      xc(AG4_02) => 0.08,
      xc(AG4_03) => 0.04,
      xc(AG4_04) => 0.2,
      xc(AG4_07) => 0.1,
      xc(AG4_08) => 0.1,
      xc(AG4_09) => 0.02,
      xc(AG4_10) => 0.048,
      xc(AG6_01) => 0.08,
      xc(AG6_02) => 0.08,
      xc(AG6_03) => 0.04,
      xc(AG6_04) => 0.4,
      xc(AG6_07) => 0.1,
      xc(AG6_08) => 0.1,
      xc(AG6_09) => 0.04,
      xc(AG6_10) => 0.083,
      xc(AL_01) => 0.14,
      xc(AL_05) => 0.0235,
      xc(AL_06) => 0.06,
      xc(AL_07) => 0.07,
      xc(AL_08) => 0.042,
      xc(AL_09) => 0.21,
      xc(AL_10) => 1,
      xc(AL_11) => 0.021,
      xc(AL_116) => 0.0598,
      xc(AL_12) => 0.021,
      xc(AL_13) => 0.021,
      xc(AL_14) => 0.021,
      xc(AL_15) => 0,
      xc(AL_16) => 0.066,
      xc(AL_17) => 0.066,
      xc(AL_31) => 0.14,
      xc(AL_32) => 0.07,
      xc(AL_33) => 0.07,
      xc(AL_34) => 0,
      xc(AN_72) => 0,
      xc(APC_42) => 0.054,
      xc(APC_44) => 0.016,
      xc(APL_01) => 0.09,
      xc(APL_02) => 0.14,
      xc(APL_04) => 0,
      xc(APL_11) => 0.045,
      xc(APL_13) => 0,
      xc(APL_15) => 0,
      xc(APL_25) => 0.078,
      xc(BC_00) => 0,
      xc(BDC_02) => 0.065,
      xc(BDC_03) => 0.04,
      xc(BDC_04) => 0.005,
      xc(BDC_11) => 0.006,
      xc(BDC_31) => 0.012,
      xc(BDC_33) => 0.035,
      xc(BDC_36) => 0.035,
      xc(BDF_10) => 0.07,
      xc(BDF_91) => 0.04,
      xc(BDF_92) => 0.028,
      xc(BDG_91) => 0.028,
      xc(BDG_92) => 0.084,
      xc(BDG_93) => 0.056,
      xc(BDG_94) => 0.128,
      xc(BJ_01) => 0.124,
      xc(BJ_03) => 0.014,
      xc(BJ_05) => 0.014,
      xc(BJ_11) => 0.014,
      xc(BJ_12) => 0.014,
      xc(BJ_14) => 0.1059,
      xc(BJ_15) => 0.107,
      xc(BK_02) => 0.124,
      xc(BK_03) => 0.014,
      xc(BK_05) => 0.014,
      xc(BK_11) => 0.014,
      xc(BK_12) => 0.014,
      xc(BK_14) => 0.107,
      xc(BK_15) => 0.1059,
      xc(BK_23) => 0.014,
      xc(BLDI_02) => 9,
      xc(BLDI_102) => 10.8,
      xc(BLDI_192) => 13,
      xc(BLDI_202) => 12.4,
      xc(BLDI_292) => 16.5,
      xc(BLDI_302) => 25,
      xc(BLDI_392) => 15.3,
      xc(BLDI_402) => 15.5,
      xc(BLDI_492) => 12,
      xc(BLDI_592) => 20.5,
      xc(BLD_233) => 54.5,
      xc(BLD_234) => 43.5,
      xc(BLD_333) => 62.5,
      xc(BLD_334) => 43.14,
      xc(BLD_431) => 3.7,
      xc(BLD_433) => 59,
      xc(BLD_531) => 2.6,
      xc(BLD_533) => 49.74,
      xc(BLD_534) => 44,
      xc(BLD_620) => 17,
      xc(BLD_631) => 0,
      xc(BLD_633) => 66.7,
      xc(BLD_731) => 3.9,
      xc(BNW_01) => 0.014,
      xc(BNW_03) => 0.014,
      xc(BNW_24) => 0.1059,
      xc(BNW_28) => 56,
      xc(BNW_29) => 56,
      xc(BNW_31) => 0.014,
      xc(BPC_41) => 0.031,
      xc(BPC_44) => 0.01,
      xc(BPC_46) => 0.026,
      xc(BPC_47) => 0,
      xc(BPC_61) => 0.02,
      xc(BPC_81) => 0.0228,
      xc(BPC_83) => 0.005,
      xc(BPL_01) => 0.032,
      xc(BPL_02) => 0.07,
      xc(BPL_04) => 0.036,
      xc(BPL_11) => 0.018,
      xc(BPL_13) => 0.01,
      xc(BU_01) => 85,
      xc(BU_02) => 130.3,
      xc(BU_03) => 0,
      xc(BU_04) => 0,
      xc(BU_05) => 0,
      xc(BU_06) => 0,
      xc(BU_101) => 40,
      xc(BU_102) => 55,
      xc(BU_103) => 0,
      xc(BU_104) => 0,
      xc(BU_105) => 0,
      xc(BU_110) => 0,
      xc(BU_111) => 0,
      xc(BU_112) => 306,
      xc(BU_124) => 0,
      xc(BU_21) => 750,
      xc(BU_22) => 10.5,
      xc(BU_23) => 0,
      xc(BU_24) => 0,
      xc(BU_25) => 980,
      xc(BVC_01) => 0.042,
      xc(BVC_02) => 0.046,
      xc(BXG_11) => 0.229,
      xc(CDW_100) => 2.1,
      xc(CDW_101) => 2.1,
      xc(CDW_102) => 2.1,
      xc(CDW_103) => 2.1,
      xc(CDW_104) => 2.1,
      xc(CDW_105) => 2.8,
      xc(CDW_106) => 2.8,
      xc(CDW_107) => 2.8,
      xc(CDW_131) => 1.96,
      xc(CDW_200) => 3.15,
      xc(CDW_201) => 3.15,
      xc(CDW_202) => 3.15,
      xc(CDW_203) => 3.15,
      xc(CDW_204) => 3.15,
      xc(CDW_205) => 4.5,
      xc(CDW_206) => 4.5,
      xc(CDW_207) => 4.5,
      xc(CDW_208) => 8.8,
      xc(CDW_209) => 8.8,
      xc(CDW_210) => 8.8,
      xc(CDW_211) => 8.8,
      xc(CDW_231) => 1.96,
      xc(CD_100) => 30,
      xc(CD_101) => 18,
      xc(CD_102) => 40,
      xc(CD_103) => 40,
      xc(CD_104) => 40,
      xc(CD_105) => 23.8,
      xc(CD_106) => 23.8,
      xc(CD_107) => 23.8,
      xc(CD_131) => 6,
      xc(CD_200) => 75,
      xc(CD_201) => 66.7,
      xc(CD_202) => 78,
      xc(CD_203) => 78,
      xc(CD_204) => 78,
      xc(CD_205) => 72.4,
      xc(CD_206) => 72.4,
      xc(CD_207) => 66.7,
      xc(CD_208) => 85,
      xc(CD_209) => 85,
      xc(CD_210) => 85,
      xc(CD_211) => 85,
      xc(CD_231) => 76,
      xc(CHN_01) => 1,
      xc(CHN_02) => 1,
      xc(CHN_03) => 150,
      xc(CHN_04) => 0,
      xc(CHN_05) => 0,
      xc(CHN_06) => 0,
      xc(CHN_07) => 0,
      xc(CHN_08) => 0,
      xc(CHW_01) => 17.58,
      xc(CHW_02) => 16.572,
      xc(CHW_03) => 0.84,
      xc(CHW_04) => 7.5,
      xc(CHW_05) => 7.5,
      xc(CHW_06) => 1.512,
      xc(CHW_07) => 2254.56,
      xc(CHW_08) => 7.5,
      xc(CHW_09) => 7.5,
      xc(CHW_10) => 2228.688,
      xc(CHW_11) => 5.04,
      xc(CHW_12) => 7.5,
      xc(CHW_13) => 7.5,
      xc(CHW_14) => 6.048,
      xc(CMW_05) => 7,
      xc(CMW_06) => 7,
      xc(CMW_07) => 7,
      xc(CMW_08) => 7,
      xc(CMW_09) => 7,
      xc(CM_05) => 50,
      xc(CM_06) => 50,
      xc(CM_07) => 50,
      xc(CM_08) => 50,
      xc(CM_09) => 50,
      xc(DA_01) => 0,
      xc(DA_02) => 0,
      xc(DA_03) => 0.042,
      xc(DA_04) => 0.924,
      xc(DA_05) => 0.07,
      xc(DA_06) => 0,
      xc(DA_11) => 0.462,
      xc(DA_12) => 0.374,
      xc(DA_171) => 0,
      xc(DA_172) => 0,
      xc(DA_173) => 0,
      xc(DA_174) => 0,
      xc(DA_175) => 0,
      xc(DA_176) => 0,
      xc(DA_22) => 2,
      xc(DA_24) => 1.12,
      xc(DA_25) => 0.924,
      xc(DA_26) => 5.7,
      xc(DA_27) => 71.8,
      xc(DA_30) => 0.56,
      xc(DA_31) => 0,
      xc(DA_32) => 0.12,
      xc(DA_33) => 0,
      xc(DA_35) => 0,
      xc(DA_361) => 0.028,
      xc(DA_362) => 0.09,
      xc(DA_371) => 0.042,
      xc(DA_372) => 0.046,
      xc(DA_373) => 0.05,
      xc(DA_38) => 0.025,
      xc(DA_41) => 0,
      xc(DA_44) => 0.12,
      xc(DA_45) => 0,
      xc(DA_46) => 0.069,
      xc(DA_52) => 0,
      xc(DA_53) => 0.255,
      xc(DA_54) => 0.231,
      xc(DA_55) => 0.36,
      xc(DA_56) => 0,
      xc(DA_70) => 0.06,
      xc(DA_71) => 0.3,
      xc(DA_72) => 0.1,
      xc(DA_73) => 0.201,
      xc(DC_00) => 0,
      xc(DC_01) => 0.028,
      xc(DC_02) => 0.084,
      xc(DC_03) => 0.042,
      xc(DC_04) => 0.007,
      xc(DC_05) => 0.336,
      xc(DC_06) => 0.54,
      xc(DC_11) => 0,
      xc(DC_12) => 0,
      xc(DC_15) => 0.042,
      xc(DC_20) => 0,
      xc(DC_21) => 0.07,
      xc(DC_22) => 0.1,
      xc(DC_23) => 0.112,
      xc(DC_24) => 0.056,
      xc(DC_30) => 0.021,
      xc(DC_31) => 0.021,
      xc(DC_32) => 0.063,
      xc(DC_33) => 0.084,
      xc(DC_34) => 0.126,
      xc(DC_35) => 0.042,
      xc(DC_36) => 0.042,
      xc(DC_37) => 0,
      xc(DC_38) => 0.042,
      xc(DC_50) => 0,
      xc(DC_52) => 0.063,
      xc(DF_01) => 0.042,
      xc(DF_02) => 0,
      xc(DF_03) => 0.14,
      xc(DF_04) => 0,
      xc(DF_07) => 0.336,
      xc(DF_09) => 0.042,
      xc(DF_10) => 0.07,
      xc(DF_19) => 0.042,
      xc(DF_31) => 0.042,
      xc(DF_32) => 0,
      xc(DF_34) => 0.7,
      xc(DF_35) => 0,
      xc(DF_43) => 0.07,
      xc(DF_51) => 0.14,
      xc(DF_52) => 0.042,
      xc(DF_56) => 0,
      xc(DF_80) => 0,
      xc(DF_84) => 0.084,
      xc(DG_01) => 0.028,
      xc(DG_02) => 0.056,
      xc(DG_03) => 1.75,
      xc(DG_04) => 0,
      xc(DG_05) => 0,
      xc(DI_01) => 4,
      xc(DI_02) => 0,
      xc(DI_03) => 1250,
      xc(DI_04) => 175,
      xc(DI_06) => 3000,
      xc(DI_07) => 1000,
      xc(DN_01) => 0.56,
      xc(DN_02) => 1.47,
      xc(DN_03) => 0.14,
      xc(DN_04) => 0.56,
      xc(DN_05) => 0.7,
      xc(DN_07) => 0.174,
      xc(DN_08) => 0.174,
      xc(DN_09) => 1.16,
      xc(DN_10) => 0,
      xc(DN_11) => 4.2,
      xc(DN_12) => 4.2,
      xc(DN_13) => 0.7,
      xc(DS_00) => 0,
      xc(DS_01) => 0,
      xc(DS_02) => 0,
      xc(DS_03) => 0.042,
      xc(DS_04) => 0.924,
      xc(DS_05) => 0.07,
      xc(DS_09) => 0,
      xc(DS_11) => 0.462,
      xc(DS_12) => 0.24,
      xc(DS_171) => 0,
      xc(DS_172) => 0,
      xc(DS_173) => 0,
      xc(DS_174) => 0,
      xc(DS_175) => 0,
      xc(DS_176) => 0,
      xc(DS_24) => 1.044,
      xc(DS_25) => 0.05,
      xc(DS_31) => 0,
      xc(DS_32) => 0.12,
      xc(DS_33) => 0,
      xc(DS_35) => 0,
      xc(DS_361) => 0.028,
      xc(DS_362) => 0.032,
      xc(DS_371) => 0.042,
      xc(DS_372) => 0.042,
      xc(DS_373) => 0.04,
      xc(DS_38) => 0.019,
      xc(DS_41) => 0,
      xc(DS_50) => 0,
      xc(DS_52) => 0,
      xc(DS_540) => 0.002,
      xc(DS_541) => 0.028,
      xc(DS_542) => 0.056,
      xc(DS_543) => 0.14,
      xc(DS_544) => 0.092,
      xc(DS_60) => 0.175,
      xc(DS_601) => 0.063,
      xc(DS_602) => 0.079,
      xc(DS_61) => 0.035,
      xc(DS_62) => 0.175,
      xc(DS_63) => 0.035,
      xc(DS_64) => 0.194,
      xc(DS_645) => 0.093,
      xc(DS_65) => 0.052,
      xc(DS_66) => 0.012,
      xc(DS_660) => 0.175,
      xc(DS_661) => 0.042,
      xc(DS_662) => 0.182,
      xc(DS_663) => 0.042,
      xc(DS_664) => 0.173,
      xc(DS_665) => 0.116,
      xc(DS_666) => 0.033,
      xc(DS_667) => 0.059,
      xc(DS_67) => 0.08,
      xc(DS_68) => 0.056,
      xc(DS_70) => 0.06,
      xc(DS_71) => 0.180,
      xc(DS_72) => 0.1,
      xc(DS_73) => 0.201,
      xc(DS_75) => 0,
      xc(DS_76) => 0,
      xc(DS_77) => 0,
      xc(DS_78) => 0,
      xc(DS_79) => 0.14,
      xc(DS_80) => 0.1,
      xc(DS_81) => 0.09,
      xc(DS_82) => 0.07,
      xc(DT_01) => 0,
      xc(DT_02) => 0,
      xc(DT_03) => 0.042,
      xc(DT_04) => 0.924,
      xc(DT_05) => 0.07,
      xc(DT_06) => 0,
      xc(DT_11) => 0.462,
      xc(DT_12) => 0.654,
      xc(DT_171) => 0,
      xc(DT_172) => 0,
      xc(DT_173) => 0,
      xc(DT_174) => 0,
      xc(DT_175) => 0,
      xc(DT_176) => 0,
      xc(DT_22) => 2,
      xc(DT_24) => 1.26,
      xc(DT_25) => 0.924,
      xc(DT_26) => 5.988,
      xc(DT_27) => 36,
      xc(DT_30) => 1.26,
      xc(DT_31) => 0,
      xc(DT_32) => 0.12,
      xc(DT_33) => 0,
      xc(DT_35) => 0,
      xc(DT_361) => 0.028,
      xc(DT_362) => 0.028,
      xc(DT_363) => 0.138,
      xc(DT_364) => 0.16,
      xc(DT_371) => 0.042,
      xc(DT_372) => 0.042,
      xc(DT_373) => 0.052,
      xc(DT_374) => 0.052,
      xc(DT_375) => 0.056,
      xc(DT_38) => 0.025,
      xc(DT_41) => 0,
      xc(DT_44) => 0.12,
      xc(DT_45) => 0,
      xc(DT_52) => 0,
      xc(DT_53) => 0.025,
      xc(DT_54) => 0.231,
      xc(DT_55) => 0.36,
      xc(DT_56) => 0,
      xc(DT_70) => 0.06,
      xc(DT_71) => 0.3,
      xc(DT_72) => 0.1,
      xc(DT_73) => 0.201,
      xc(DX_01) => 0,
      xc(DX_02) => 0,
      xc(DX_03) => 0.042,
      xc(DX_04) => 0.924,
      xc(DX_05) => 0.07,
      xc(DX_06) => 0,
      xc(DX_11) => 0.462,
      xc(DX_12) => 0.84,
      xc(DX_171) => 0,
      xc(DX_172) => 0,
      xc(DX_173) => 0,
      xc(DX_174) => 0,
      xc(DX_175) => 0,
      xc(DX_176) => 0,
      xc(DX_177) => 0,
      xc(DX_22) => 1.992,
      xc(DX_24) => 1.428,
      xc(DX_25) => 0.924,
      xc(DX_26) => 5.7,
      xc(DX_27) => 71.8,
      xc(DX_30) => 0.56,
      xc(DX_31) => 0,
      xc(DX_32) => 0.12,
      xc(DX_33) => 0,
      xc(DX_35) => 0,
      xc(DX_361) => 0.028,
      xc(DX_362) => 0.028,
      xc(DX_363) => 0.046,
      xc(DX_364) => 0.042,
      xc(DX_371) => 0.042,
      xc(DX_372) => 0.031,
      xc(DX_373) => 0.041,
      xc(DX_374) => 0.026,
      xc(DX_375) => 0.038,
      xc(DX_376) => 0.042,
      xc(DX_38) => 0.021,
      xc(DX_41) => 0,
      xc(DX_44) => 0.12,
      xc(DX_45) => 0,
      xc(DX_52) => 0.315,
      xc(DX_53) => 0.052,
      xc(DX_54) => 0.231,
      xc(DX_55) => 0.36,
      xc(DX_56) => 0,
      xc(DX_70) => 0.06,
      xc(DX_71) => 0.3,
      xc(DX_72) => 0.1,
      xc(DX_73) => 0.201,
      xc(EA_01) => 1.512,
      xc(EA_02) => 4.2,
      xc(EA_39) => 7.512,
      xc(EA_40) => 12.012,
      xc(EA_44) => 7.4,
      xc(EA_45) => 2.4,
      xc(EA_46) => 2.512,
      xc(EA_91) => 0,
      xc(EA_92) => 0,
      xc(EDM_01) => 0,
      xc(EDM_02) => 0,
      xc(EDM_03) => 62,
      xc(EDM_04) => 108,
      xc(EDM_05) => 1,
      xc(EDM_06) => 2,
      xc(EDM_07) => 1,
      xc(EDM_08) => 1,
      xc(EDM_09) => 5,
      xc(EDM_10) => 150,
      xc(EDM_11) => 1,
      xc(EDM_12) => 0,
      xc(EDM_13) => 0,
      xc(EDM_14) => 0,
      xc(EDW_01) => 6.72,
      xc(EDW_02) => 6.048,
      xc(EDW_03) => 0.84,
      xc(EDW_04) => 1.512,
      xc(EDW_05) => 1.68,
      xc(EDW_06) => 1.512,
      xc(EDW_07) => 5.04,
      xc(EDW_08) => 1.512,
      xc(EDW_09) => 1.68,
      xc(EDW_10) => 6.048,
      xc(EDW_11) => 1.68,
      xc(EDW_12) => 93.744,
      xc(EDW_13) => 90.72,
      xc(EDW_14) => 1.512,
      xc(EDW_15) => 1.68,
      xc(EDW_16) => 93.744,
      xc(EDW_17) => 90.72,
      xc(EDW_18) => 1.512,
      xc(EHV_01) => 0.032,
      xc(EHV_02) => 0.032,
      xc(EHV_04) => 0.032,
      xc(EHV_06) => 0.029,
      xc(EHV_07) => 0.032,
      xc(EHV_09) => 0.028,
      xc(EHV_11) => 0.032,
      xc(EHV_12) => 0.026,
      xc(EHV_13) => 0.028,
      xc(EHV_15) => 0.032,
      xc(EHV_16) => 0.026,
      xc(EHV_18) => 0.028,
      xc(EHV_19) => 0.028,
      xc(EHV_20) => 0.03,
      xc(EHV_21) => 0.026,
      xc(EHV_23) => 0.029,
      xc(EHV_24) => 0.027,
      xc(EHV_25) => 0.04,
      xc(EHV_26) => 0.051,
      xc(EHV_27) => 0.042,
      xc(EHV_34) => 0.049,
      xc(EHV_36) => 0.084,
      xc(ENW_14) => 0.36,
      xc(ENW_21) => 0.12,
      xc(ENW_22) => 0.12,
      xc(ER_01) => 0.21,
      xc(ER_03) => 0.36,
      xc(ER_04) => 0.063,
      xc(ER_05) => 0.42,
      xc(ER_06) => 0.252,
      xc(ER_07) => 0.126,
      xc(ER_08) => 0.126,
      xc(ER_09) => 0.028,
      xc(ER_12) => 0.084,
      xc(FM_01) => 77,
      xc(FM_02) => 672,
      xc(FM_03) => 77,
      xc(FM_101) => 1063,
      xc(FM_102) => 1887,
      xc(FM_103) => 750,
      xc(FM_11) => 77,
      xc(FM_111) => 1063,
      xc(FM_112) => 1887,
      xc(FM_113) => 750,
      xc(FM_12) => 672,
      xc(FM_121) => 1063,
      xc(FM_122) => 1887,
      xc(FM_123) => 750,
      xc(FM_13) => 77,
      xc(FM_21) => 1011,
      xc(FM_22) => 841,
      xc(FM_23) => 294,
      xc(FM_291) => 1125,
      xc(FM_292) => 2375,
      xc(FM_293) => 2375,
      xc(FM_294) => 3000,
      xc(FM_295) => 3000,
      xc(FM_296) => 3000,
      xc(FM_297) => 3000,
      xc(FM_298) => 3000,
      xc(FM_299) => 3625,
      xc(FM_31) => 1011,
      xc(FM_32) => 1177,
      xc(FM_33) => 98,
      xc(FM_41) => 1011,
      xc(FM_42) => 841,
      xc(FM_43) => 294,
      xc(FM_51) => 625,
      xc(FM_52) => 1029,
      xc(FM_53) => 82,
      xc(FM_61) => 625,
      xc(FM_62) => 1029,
      xc(FM_63) => 82,
      xc(FM_71) => 750,
      xc(FM_72) => 1887,
      xc(FM_73) => 188,
      xc(FM_81) => 1063,
      xc(FM_82) => 1887,
      xc(FM_83) => 750,
      xc(FM_91) => 1063,
      xc(FM_92) => 1887,
      xc(FM_93) => 750,
      xc(FM_B1) => 0,
      xc(FM_T1) => 2000,
      xc(GD_01) => 6,
      xc(GD_02) => 6,
      xc(GD_100) => 41,
      xc(GD_101) => 30,
      xc(GD_102) => 44,
      xc(GD_103) => 44,
      xc(GD_104) => 44,
      xc(GD_105) => 30,
      xc(GD_106) => 30,
      xc(GD_107) => 40,
      xc(GD_108) => 40,
      xc(GD_109) => 40,
      xc(GD_110) => 40,
      xc(GD_111) => 40,
      xc(GD_112) => 50,
      xc(GD_120) => 60,
      xc(GD_121) => 65,
      xc(GD_122) => 65,
      xc(GD_123) => 65,
      xc(GD_200) => 66,
      xc(GD_201) => 55,
      xc(GD_202) => 69,
      xc(GD_203) => 69,
      xc(GD_204) => 69,
      xc(GD_205) => 58,
      xc(GD_206) => 58,
      xc(GD_207) => 60,
      xc(GD_208) => 60,
      xc(GD_209) => 60,
      xc(GD_21) => 9,
      xc(GD_210) => 60,
      xc(GD_211) => 60,
      xc(GD_212) => 80,
      xc(GD_22) => 9,
      xc(GD_51) => 41,
      xc(GD_52) => 55,
      xc(GR_01) => 16,
      xc(GR_02) => 31.5,
      xc(GR_03) => 21,
      xc(GR_04) => 36,
      xc(GR_05) => 7.14,
      xc(HNW_14) => 0.22,
      xc(HNW_21) => 0.06,
      xc(HNW_22) => 0.06,
      xc(HV_01) => 0.03,
      xc(HV_02) => 0.03,
      xc(HV_04) => 0.03,
      xc(HV_09) => 0.026,
      xc(HV_11) => 0.03,
      xc(HV_12) => 0.024,
      xc(HV_13) => 0.026,
      xc(HV_16) => 0.024,
      xc(HV_18) => 0.026,
      xc(HV_19) => 0.026,
      xc(HV_20) => 0.028,
      xc(HV_22) => 0.03,
      xc(HV_23) => 0.028,
      xc(HV_24) => 0.024,
      xc(HV_25) => 0.038,
      xc(HV_26) => 0.049,
      xc(HV_27) => 0.04,
      xc(HV_34) => 0.049,
      xc(HV_36) => 0.084,
      xc(HV_90) => 0,
      xc(IPB_00) => 1.7,
      xc(IPB_01) => 14200,
      xc(IPDW_111) => 0,
      xc(IPDW_191) => 0,
      xc(IPDW_193) => 0,
      xc(IPDW_201) => 0,
      xc(IPDW_391) => 0,
      xc(IPDW_395) => 0,
      xc(IPDW_611) => 0,
      xc(IPD_00) => 174000,
      xc(IPD_01) => 174000,
      xc(IPD_02) => 174000,
      xc(IPD_03) => 174000,
      xc(IPD_04) => 174000,
      xc(IPD_05) => 174000,
      xc(IPD_06) => 174000,
      xc(IPD_07) => 174000,
      xc(IPD_08) => 174000,
      xc(IPD_09) => 174000,
      xc(IPD_10) => 174000,
      xc(IPD_100) => 174000,
      xc(IPD_101) => 174000,
      xc(IPD_102) => 174000,
      xc(IPD_103) => 174000,
      xc(IPD_104) => 174000,
      xc(IPD_105) => 174000,
      xc(IPD_106) => 174000,
      xc(IPD_107) => 174000,
      xc(IPD_108) => 174000,
      xc(IPD_109) => 174000,
      xc(IPD_11) => 174000,
      xc(IPD_110) => 174000,
      xc(IPD_111) => 174000,
      xc(IPD_112) => 174000,
      xc(IPD_113) => 174000,
      xc(IPD_114) => 174000,
      xc(IPD_12) => 174000,
      xc(IPD_13) => 174000,
      xc(IPD_14) => 174000,
      xc(IPD_200) => 1000000,
      xc(IPD_201) => 1000000,
      xc(IPD_202) => 1000000,
      xc(IPD_203) => 1000000,
      xc(IPD_204) => 1000000,
      xc(IPD_205) => 1000000,
      xc(IPD_206) => 1000000,
      xc(IPD_207) => 1000000,
      xc(IPD_208) => 1000000,
      xc(IPD_209) => 1000000,
      xc(IPD_210) => 1000000,
      xc(IPD_211) => 1000000,
      xc(IPD_212) => 1000000,
      xc(IPD_213) => 1000000,
      xc(IPD_300) => 1000000,
      xc(IPD_301) => 1000000,
      xc(IPD_302) => 1000000,
      xc(IPD_303) => 1000000,
      xc(IPD_304) => 1000000,
      xc(IPD_305) => 1000000,
      xc(IPD_306) => 1000000,
      xc(IPD_307) => 1000000,
      xc(IPD_308) => 1000000,
      xc(IPD_309) => 1000000,
      xc(IPD_310) => 1000000,
      xc(IPD_311) => 1000000,
      xc(IPD_312) => 1000000,
      xc(IPD_313) => 1000000,
      xc(IPD_405) => 1000000,
      xc(IPD_406) => 1000000,
      xc(IPD_407) => 1000000,
      xc(IPD_408) => 1000000,
      xc(IPD_409) => 1000000,
      xc(IPD_410) => 1000000,
      xc(IPD_411) => 1000000,
      xc(IPD_412) => 1000000,
      xc(IPD_413) => 1000000,
      xc(IPD_505) => 1000000,
      xc(IPD_506) => 1000000,
      xc(IPD_507) => 1000000,
      xc(IPD_508) => 1000000,
      xc(IPD_509) => 1000000,
      xc(IPD_510) => 1000000,
      xc(IPD_511) => 1000000,
      xc(IPD_512) => 1000000,
      xc(IPD_513) => 1000000,
      xc(IPD_600) => 35,
      xc(IPD_601) => 14,
      xc(IPD_602) => 1.4,
      xc(IPD_610) => 1.8,
      xc(IPD_611) => 0.7,
      xc(IPD_612) => 0.07,
      xc(IPGTM1_05) => 0.0071,
      xc(IPG_00) => 14200,
      xc(IPG_01) => 3500,
      xc(IPG_02) => 710,
      xc(IPG_03) => 3500,
      xc(IPG_04) => 2800,
      xc(IPG_05) => 0.014,
      xc(IPG_100) => 200,
      xc(IPG_101) => 500,
      xc(IPG_200) => 7100,
      xc(IPG_300) => 710,
      xc(IPG_301) => 350,
      xc(IPG_302) => 70,
      xc(IPG_303) => 350,
      xc(IPG_304) => 280,
      xc(IPG_305) => 0.00071,
      xc(IPG_400) => 20,
      xc(IPG_401) => 50,
      xc(IPG_610) => 35,
      xc(IPG_611) => 14,
      xc(IPG_612) => 1.4,
      xc(IPNWD_101) => 3550,
      xc(IPNWD_102) => 1775,
      xc(IPNWD_103) => 177.5,
      xc(IPNWG_101) => 7100,
      xc(IPNWG_102) => 3550,
      xc(IPNWG_103) => 355,
      xc(IPNWN_01) => 6.9,
      xc(IPNWN_02) => 93,
      xc(IPNWN_03) => 3.3,
      xc(IPNWN_04) => 0,
      xc(IPNWN_05) => 0,
      xc(IPN_00) => 70,
      xc(IPN_01) => 1400,
      xc(IPN_02) => 1400,
      xc(IPN_03) => 1400,
      xc(IPN_04) => 1400,
      xc(IPN_05) => 1400,
      xc(IPN_06) => 1400,
      xc(IPN_07) => 1400,
      xc(IPN_08) => 1400,
      xc(IPN_09) => 1400,
      xc(IPN_10) => 1400,
      xc(IPN_100) => 42,
      xc(IPN_101) => 850,
      xc(IPN_102) => 850,
      xc(IPN_103) => 850,
      xc(IPN_104) => 850,
      xc(IPN_105) => 850,
      xc(IPN_106) => 850,
      xc(IPN_107) => 850,
      xc(IPN_108) => 850,
      xc(IPN_109) => 850,
      xc(IPN_11) => 1400,
      xc(IPN_110) => 850,
      xc(IPN_111) => 850,
      xc(IPN_112) => 850,
      xc(IPN_113) => 0,
      xc(IPN_114) => 275,
      xc(IPN_12) => 1400,
      xc(IPN_13) => 0,
      xc(IPN_14) => 560,
      xc(IPN_200) => 140,
      xc(IPN_201) => 2850,
      xc(IPN_202) => 2850,
      xc(IPN_203) => 2850,
      xc(IPN_204) => 2850,
      xc(IPN_205) => 2850,
      xc(IPN_206) => 2850,
      xc(IPN_207) => 2850,
      xc(IPN_208) => 2850,
      xc(IPN_209) => 2850,
      xc(IPN_210) => 2850,
      xc(IPN_211) => 2850,
      xc(IPN_212) => 2850,
      xc(IPN_213) => 0,
      xc(IPN_214) => 850,
      xc(IPN_300) => 9,
      xc(IPN_301) => 45,
      xc(IPN_302) => 180,
      xc(IPN_303) => 180,
      xc(IPN_304) => 180,
      xc(IPN_305) => 275,
      xc(IPN_306) => 275,
      xc(IPN_307) => 275,
      xc(IPN_308) => 275,
      xc(IPN_309) => 475,
      xc(IPN_310) => 475,
      xc(IPN_311) => 475,
      xc(IPN_312) => 475,
      xc(IPN_313) => 35,
      xc(IPN_400) => 9,
      xc(IPN_401) => 45,
      xc(IPN_402) => 180,
      xc(IPN_403) => 180,
      xc(IPN_404) => 180,
      xc(IPN_405) => 275,
      xc(IPN_406) => 275,
      xc(IPN_407) => 275,
      xc(IPN_408) => 275,
      xc(IPN_409) => 475,
      xc(IPN_410) => 475,
      xc(IPN_411) => 475,
      xc(IPN_412) => 475,
      xc(IPN_413) => 35,
      xc(IPTB_00) => 6,
      xc(IPTB_01) => 3080,
      xc(IPTD_100) => 6000,
      xc(IPTD_101) => 7800,
      xc(IPTD_102) => 7800,
      xc(IPTD_103) => 7800,
      xc(IPTD_104) => 7800,
      xc(IPTD_105) => 7800,
      xc(IPTD_106) => 7800,
      xc(IPTD_107) => 7800,
      xc(IPTD_108) => 7800,
      xc(IPTD_109) => 7800,
      xc(IPTD_110) => 7800,
      xc(IPTD_111) => 7800,
      xc(IPTD_112) => 7800,
      xc(IPTD_113) => 7800,
      xc(IPTD_114) => 7800,
      xc(IPTD_600) => 3080,
      xc(IPTG_00) => 3080,
      xc(IPTG_100) => 15000,
      xc(IPTG_101) => 19200,
      xc(IPTG_102) => 19200,
      xc(IPTG_103) => 19200,
      xc(IPTG_104) => 19200,
      xc(IPTG_105) => 19200,
      xc(IPTG_106) => 19200,
      xc(IPTG_107) => 19200,
      xc(IPTG_108) => 19200,
      xc(IPTG_109) => 19200,
      xc(IPTG_110) => 19200,
      xc(IPTG_111) => 19200,
      xc(IPTG_112) => 19200,
      xc(IPTG_113) => 19200,
      xc(IPTG_114) => 19200,
      xc(IPTG_600) => 1280,
      xc(IPTG_601) => 1280,
      xc(IPTG_602) => 1280,
      xc(IPTG_603) => 1280,
      xc(IPTG_604) => 1280,
      xc(IPTG_605) => 1280,
      xc(IPTG_606) => 1280,
      xc(IPTG_607) => 1280,
      xc(IPTG_608) => 1280,
      xc(IPTG_609) => 1280,
      xc(IPTG_610) => 1280,
      xc(IPTG_611) => 1280,
      xc(IPTG_612) => 1280,
      xc(IPTG_613) => 1280,
      xc(IPTG_614) => 1280,
      xc(IPTG_700) => 1500,
      xc(IPTN_100) => 2,
      xc(IPTN_101) => 78,
      xc(IPTN_102) => 78,
      xc(IPTN_103) => 78,
      xc(IPTN_104) => 78,
      xc(IPTN_105) => 78,
      xc(IPTN_106) => 78,
      xc(IPTN_107) => 78,
      xc(IPTN_108) => 78,
      xc(IPTN_109) => 78,
      xc(IPTN_110) => 78,
      xc(IPTN_111) => 78,
      xc(IPTN_112) => 78,
      xc(IPTN_113) => 0,
      xc(IPTN_114) => 78,
      xc(IPTN_200) => 2,
      xc(IPTN_201) => 230,
      xc(IPTN_202) => 230,
      xc(IPTN_203) => 230,
      xc(IPTN_204) => 230,
      xc(IPTN_205) => 230,
      xc(IPTN_206) => 230,
      xc(IPTN_207) => 230,
      xc(IPTN_208) => 230,
      xc(IPTN_209) => 230,
      xc(IPTN_210) => 230,
      xc(IPTN_211) => 230,
      xc(IPTN_212) => 230,
      xc(IPTN_213) => 0,
      xc(IPTN_214) => 230,
      xc(IPT_01) => 50,
      xc(IPT_02) => 2,
      xc(IPT_03) => 2,
      xc(IP_01) => 25,
      xc(IP_02) => 42,
      xc(IP_03) => 42,
      xc(J_01) => 0.126,
      xc(J_02) => 0.126,
      xc(J_03) => 0.035,
      xc(J_04) => 0.035,
      xc(J_05) => 0.035,
      xc(J_06) => 0.035,
      xc(J_07) => 0,
      xc(J_08) => 0.0264,
      xc(J_09) => 0.0264,
      xc(J_10) => 0,
      xc(J_11) => 0.021,
      xc(J_12) => 0.021,
      xc(J_13) => 0.112,
      xc(J_14) => 0.107,
      xc(J_15) => 0.107,
      xc(J_16) => 0.273,
      xc(J_21) => 0.126,
      xc(J_22) => 0.126,
      xc(J_23) => 0.021,
      xc(J_24) => 0.378,
      xc(J_25) => 0.021,
      xc(J_41) => 0.168,
      xc(J_42) => 0.042,
      xc(J_43) => 0.112,
      xc(J_44) => 0.042,
      xc(J_46) => 0.042,
      xc(J_81) => 0.035,
      xc(J_82) => 0.035,
      xc(K_01) => 0.126,
      xc(K_02) => 0.126,
      xc(K_03) => 0.035,
      xc(K_04) => 0.035,
      xc(K_05) => 0.035,
      xc(K_06) => 0.035,
      xc(K_07) => 0,
      xc(K_08) => 0.0264,
      xc(K_09) => 0.0264,
      xc(K_10) => 0,
      xc(K_11) => 0.021,
      xc(K_12) => 0.021,
      xc(K_13) => 0.112,
      xc(K_14) => 0.107,
      xc(K_15) => 0.107,
      xc(K_16) => 0.273,
      xc(K_21) => 0.126,
      xc(K_22) => 0.126,
      xc(K_23) => 0.021,
      xc(K_24) => 0.378,
      xc(K_25) => 0.021,
      xc(K_41) => 0.168,
      xc(K_42) => 0.042,
      xc(K_43) => 0.112,
      xc(K_44) => 0.042,
      xc(K_46) => 0.042,
      xc(K_81) => 0.035,
      xc(K_82) => 0.035,
      xc(LDIP_101) => 0.007,
      xc(LDIW_01) => 245,
      xc(LDIW_02) => 245,
      xc(LDIW_120) => 364,
      xc(LDIW_220) => 364,
      xc(LDIW_500) => 70,
      xc(LDIW_501) => 70,
      xc(LDIW_502) => 70,
      xc(LDIW_503) => 70,
      xc(LDIW_504) => 70,
      xc(LDIW_505) => 84,
      xc(LDIW_506) => 84,
      xc(LDI_01) => 8,
      xc(LDI_02) => 9,
      xc(LDI_120) => 60,
      xc(LDI_220) => 75,
      xc(LDI_500) => -10,
      xc(LDI_501) => -10,
      xc(LDI_502) => -10,
      xc(LDI_503) => -10,
      xc(LDI_504) => -10,
      xc(LDI_505) => -10,
      xc(LDI_506) => -10,
      xc(LDP_101) => 0.007,
      xc(LDP_102) => 0.005,
      xc(LDT_101) => 0,
      xc(LDW_100) => 25,
      xc(LDW_101) => 25,
      xc(LDW_102) => 25,
      xc(LDW_103) => 25,
      xc(LDW_104) => 25,
      xc(LDW_105) => 37,
      xc(LDW_106) => 37,
      xc(LDW_107) => 37,
      xc(LDW_108) => 37,
      xc(LDW_109) => 37,
      xc(LDW_110) => 37,
      xc(LDW_111) => 37,
      xc(LDW_112) => 25,
      xc(LDW_120) => 65,
      xc(LDW_121) => 350,
      xc(LDW_122) => 350,
      xc(LDW_123) => 350,
      xc(LDW_131) => 17.5,
      xc(LDW_132) => 17.5,
      xc(LDW_133) => 24.5,
      xc(LDW_134) => 2.1,
      xc(LDW_135) => 1.96,
      xc(LDW_136) => 1.96,
      xc(LDW_200) => 9,
      xc(LDW_201) => 9,
      xc(LDW_202) => 9,
      xc(LDW_203) => 9,
      xc(LDW_204) => 9,
      xc(LDW_205) => 12.6,
      xc(LDW_206) => 12.6,
      xc(LDW_207) => 12.6,
      xc(LDW_208) => 12.6,
      xc(LDW_209) => 12.6,
      xc(LDW_210) => 12.6,
      xc(LDW_211) => 12.6,
      xc(LDW_212) => 9,
      xc(LDW_220) => 65,
      xc(LDW_231) => 17.5,
      xc(LDW_232) => 17.5,
      xc(LDW_233) => 24.5,
      xc(LDW_234) => 2.1,
      xc(LDW_235) => 1.96,
      xc(LDW_236) => 1.96,
      xc(LDW_500) => 3.9,
      xc(LDW_501) => 3.9,
      xc(LDW_502) => 3.9,
      xc(LDW_503) => 3.9,
      xc(LDW_504) => 3.9,
      xc(LDW_505) => 3.9,
      xc(LDW_506) => 3.9,
      xc(LDW_507) => 6.7,
      xc(LDW_508) => 10,
      xc(LDW_509) => 11,
      xc(LDW_510) => 11,
      xc(LDW_511) => 11,
      xc(LDW_512) => 53,
      xc(LDW_520) => 3.9,
      xc(LDW_600) => 3.9,
      xc(LDW_601) => 3.9,
      xc(LDW_602) => 3.9,
      xc(LDW_603) => 3.9,
      xc(LDW_604) => 3.9,
      xc(LDW_605) => 3.9,
      xc(LDW_606) => 3.9,
      xc(LDW_607) => 5.3,
      xc(LDW_609) => 53,
      xc(LDW_611) => 53,
      xc(LDW_612) => 53,
      xc(LDW_620) => 3.9,
      xc(LDW_81) => 130,
      xc(LDW_82) => 130,
      xc(LD_100) => 40,
      xc(LD_101) => 23.8,
      xc(LD_102) => 40,
      xc(LD_103) => 40,
      xc(LD_104) => 40,
      xc(LD_105) => 23.8,
      xc(LD_106) => 23.8,
      xc(LD_107) => 23.8,
      xc(LD_108) => 35,
      xc(LD_109) => 35,
      xc(LD_110) => 35,
      xc(LD_111) => 35,
      xc(LD_112) => 40,
      xc(LD_120) => 46,
      xc(LD_121) => 55,
      xc(LD_122) => 55,
      xc(LD_123) => 55,
      xc(LD_131) => 4,
      xc(LD_132) => 4,
      xc(LD_133) => 25,
      xc(LD_134) => 25,
      xc(LD_135) => 17,
      xc(LD_136) => 12,
      xc(LD_200) => 70,
      xc(LD_201) => 66.8,
      xc(LD_202) => 78,
      xc(LD_203) => 78,
      xc(LD_204) => 78,
      xc(LD_205) => 72.5,
      xc(LD_206) => 72.5,
      xc(LD_207) => 66.8,
      xc(LD_208) => 70,
      xc(LD_209) => 70,
      xc(LD_210) => 70,
      xc(LD_211) => 70,
      xc(LD_212) => 90,
      xc(LD_220) => 91,
      xc(LD_231) => 22,
      xc(LD_232) => 22,
      xc(LD_233) => 48,
      xc(LD_234) => 39,
      xc(LD_235) => 37,
      xc(LD_236) => 31.5,
      xc(LD_331) => 1.5,
      xc(LD_332) => 1.5,
      xc(LD_334) => 50,
      xc(LD_336) => 5,
      xc(LD_434) => 48,
      xc(LD_435) => 16,
      xc(LD_436) => 9.9,
      xc(LD_500) => 0.2,
      xc(LD_501) => 0.2,
      xc(LD_502) => 0.2,
      xc(LD_503) => 0.2,
      xc(LD_504) => 0.2,
      xc(LD_505) => 0.2,
      xc(LD_506) => 0.2,
      xc(LD_507) => 0.3,
      xc(LD_508) => 0.3,
      xc(LD_509) => 0.3,
      xc(LD_510) => 0.3,
      xc(LD_511) => 0.3,
      xc(LD_512) => 0.5,
      xc(LD_520) => 0.2,
      xc(LD_535) => 15,
      xc(LD_600) => 15,
      xc(LD_601) => 15,
      xc(LD_602) => 15,
      xc(LD_603) => 15,
      xc(LD_604) => 10,
      xc(LD_605) => 10,
      xc(LD_606) => 10,
      xc(LD_607) => 10,
      xc(LD_609) => 12,
      xc(LD_611) => 12,
      xc(LD_612) => 12,
      xc(LD_620) => 15.2,
      xc(LD_634) => 49,
      xc(LD_81) => 30,
      xc(LD_82) => 90,
      xc(LMI_01) => 14.142,
      xc(LMI_02) => 40,
      xc(LMI_03) => 40,
      xc(LMI_04) => 120,
      xc(LMI_05) => 1000,
      xc(LMI_06) => 0.707,
      xc(LMI_11) => 6,
      xc(LMI_12) => 73,
      xc(LMI_13) => 850,
      xc(LMI_40) => 920,
      xc(LMI_41) => 1500,
      xc(M0L_01) => 0.054,
      xc(M0L_02) => 0.06,
      xc(M0L_03) => 0.078,
      xc(M0L_04) => 0.08,
      xc(M0M_01) => 0.036,
      xc(M0M_02) => 0.04,
      xc(M0M_03) => 0.042,
      xc(M0M_04) => 0.046,
      xc(M0M_05) => 0.048,
      xc(M0S_01) => 0.028,
      xc(M0S_02) => 0.032,
      xc(M0_00) => 0,
      xc(M0_126) => 0,
      xc(M0_127) => 0,
      xc(M0_128) => 0,
      xc(M0_129) => 0,
      xc(M0_130) => 0,
      xc(M0_131) => 0,
      xc(M0_132) => 0,
      xc(M0_133) => 0,
      xc(M0_134) => 0,
      xc(M0_135) => 0,
      xc(M0_136) => 0,
      xc(M0_137) => 0,
      xc(M0_138) => 0,
      xc(M0_139) => 0,
      xc(M0_140) => 0,
      xc(M0_141) => 0,
      xc(M0_142) => 0,
      xc(M0_21) => 0.028,
      xc(M0_23) => 0,
      xc(M0_41) => 0.054,
      xc(M0_42) => 0.124,
      xc(M0_48) => 0.016,
      xc(M0_60) => 0.086,
      xc(M0_812) => 0.158,
      xc(M0_813) => 0.088,
      xc(M0_814) => 0.018,
      xc(M0_82) => 0.022,
      xc(M0_822) => 0.088,
      xc(M0_823) => 0.018,
      xc(M0_83) => 0.028,
      xc(M0_832) => 0.036,
      xc(M0_84) => 0.084,
      xc(M0_841) => 0.25,
      xc(M0_842) => 0.138,
      xc(M0_85) => 0.086,
      xc(M0_91) => 0.028,
      xc(M0_92) => 0.028,
      xc(M0_93) => 0.102,
      xc(M0_94) => 0.032,
      xc(M0_941) => 0.25,
      xc(M0_942) => 0.036,
      xc(M0_95) => 0.136,
      xc(M0_96) => 0.036,
      xc(M0_97) => 0.04,
      xc(M0_98) => 0.096,
      xc(M10_00) => 0,
      xc(M10_01) => 0.126,
      xc(M10_02) => 0.14,
      xc(M10_03) => 0.192,
      xc(M10_04) => 0.21,
      xc(M10_05) => 0.26,
      xc(M10_06) => 0.36,
      xc(M10_07) => 0.378,
      xc(M10_08) => 0.406,
      xc(M10_09) => 0.42,
      xc(M10_10) => 0.798,
      xc(M10_121) => 0.126,
      xc(M10_20) => 0,
      xc(M10_21) => 0.126,
      xc(M10_22) => 0.378,
      xc(M10_23) => 0.63,
      xc(M10_24) => 0.14,
      xc(M10_35) => 0.14,
      xc(M10_37) => 0.198,
      xc(M10_38) => 0.378,
      xc(M10_41) => 0.14,
      xc(M10_42) => 0.198,
      xc(M10_50) => 0,
      xc(M10_51) => 0.14,
      xc(M10_52) => 0.198,
      xc(M10_60) => 0.274,
      xc(M10_65) => 0.148,
      xc(M10_71) => 0.14,
      xc(M10_80) => 0.178,
      xc(M10_81) => 0.178,
      xc(M10_82) => 0.14,
      xc(M10err_01) => 0.126,
      xc(M10err_05) => 0.36,
      xc(M10err_06) => 0.378,
      xc(M10err_09) => 0.714,
      xc(M10err_10) => 0.798,
      xc(M10err_21) => 0.14,
      xc(M11_00) => 0,
      xc(M11_01) => 0.126,
      xc(M11_02) => 0.14,
      xc(M11_03) => 0.21,
      xc(M11_04) => 0.28,
      xc(M11_05) => 0.36,
      xc(M11_06) => 0.378,
      xc(M11_07) => 0.42,
      xc(M11_08) => 0.7,
      xc(M11_09) => 0.714,
      xc(M11_10) => 0.798,
      xc(M11_121) => 0.126,
      xc(M11_20) => 0,
      xc(M11_21) => 0.126,
      xc(M11_22) => 0.378,
      xc(M11_23) => 0.63,
      xc(M11_24) => 0.14,
      xc(M11_35) => 0.14,
      xc(M11_37) => 0.198,
      xc(M11_38) => 0.378,
      xc(M11_41) => 0.14,
      xc(M11_42) => 0.198,
      xc(M11_43) => 0.13,
      xc(M11_50) => 0,
      xc(M11_51) => 0.14,
      xc(M11_52) => 0.198,
      xc(M11_60) => 0.274,
      xc(M11_65) => 0.148,
      xc(M11_71) => 0.14,
      xc(M11_80) => 0.178,
      xc(M11_81) => 0.178,
      xc(M11_82) => 0.14,
      xc(M12_01) => 0.54,
      xc(M12_02) => 0.54,
      xc(M12_21) => 6,
      xc(M12_22) => 2.2,
      xc(M12_23) => 0.54,
      xc(M12_24) => 2.13,
      xc(M12_41) => 0.05,
      xc(M12_43) => 0.13,
      xc(M12_51) => 0.05,
      xc(M12_52) => 0.13,
      xc(M1F_01) => 0,
      xc(M1F_02) => 0,
      xc(M1F_03) => 0,
      xc(M1F_04) => 0,
      xc(M1F_11) => 0.042,
      xc(M1F_12) => 0.01,
      xc(M1F_13) => 0.098,
      xc(M1F_14) => 0.032,
      xc(M1F_15) => 0,
      xc(M1F_21) => 0.1,
      xc(M1F_22) => 0.021,
      xc(M1F_23) => 0.14,
      xc(M1F_24) => 0.14,
      xc(M1F_31) => 0,
      xc(M1F_32) => 0,
      xc(M1F_33) => 0,
      xc(M1F_34) => 0,
      xc(M1F_35) => 0,
      xc(M1F_36) => 0,
      xc(M1F_40) => 0,
      xc(M1F_41) => 0,
      xc(M1F_42) => 0,
      xc(M1F_43) => 0.588,
      xc(M1F_44) => 0.462,
      xc(M1F_45) => 0,
      xc(M1F_46) => 0.238,
      xc(M1_00) => 0,
      xc(M1_01) => 0.042,
      xc(M1_100) => 0,
      xc(M1_101) => 0.056,
      xc(M1_21) => 0.028,
      xc(M1_290) => 0,
      xc(M1_291) => 0,
      xc(M1_36) => 0.239,
      xc(M1_41) => 0.042,
      xc(M1_42) => 0.056,
      xc(M1_43) => 0.098,
      xc(M1_60) => 0.07,
      xc(M1_69) => 0.126,
      xc(M1_81) => 0.042,
      xc(M1_84) => 0.042,
      xc(M1_85) => 0.014,
      xc(M1_86) => 0.098,
      xc(M1_87) => 0.056,
      xc(M2BB_21) => 0,
      xc(M2BB_22) => 0.376,
      xc(M2BB_31) => 0.088,
      xc(M2BB_32) => 0.232,
      xc(M2BB_33) => 0.056,
      xc(M2BB_34) => 0.038,
      xc(M2BB_35) => 0,
      xc(M2BB_36) => 0.232,
      xc(M2BB_37) => 0.308,
      xc(M2BB_38) => 0.198,
      xc(M2BC_21) => 0.312,
      xc(M2CC_21) => 0,
      xc(M2CC_27) => 0.248,
      xc(M2CC_28) => 0.564,
      xc(M2L_01) => 0.056,
      xc(M2L_02) => 0.06,
      xc(M2L_03) => 0.068,
      xc(M2L_05) => 0.076,
      xc(M2L_06) => 0.084,
      xc(M2L_07) => 0.074,
      xc(M2M_01) => 0.038,
      xc(M2M_02) => 0.04,
      xc(M2M_03) => 0.046,
      xc(M2S_01) => 0.028,
      xc(M2S_02) => 0.03,
      xc(M2S_03) => 0.032,
      xc(M2S_04) => 0.036,
      xc(M2_00) => 0,
      xc(M2_126) => 0,
      xc(M2_127) => 0,
      xc(M2_128) => 0,
      xc(M2_129) => 0,
      xc(M2_130) => 0,
      xc(M2_131) => 0,
      xc(M2_132) => 0,
      xc(M2_133) => 0,
      xc(M2_134) => 0,
      xc(M2_135) => 0,
      xc(M2_136) => 0,
      xc(M2_137) => 0,
      xc(M2_138) => 0,
      xc(M2_139) => 0,
      xc(M2_140) => 0,
      xc(M2_141) => 0,
      xc(M2_147) => 0.024,
      xc(M2_148) => 0.014,
      xc(M2_20) => 0.05,
      xc(M2_21) => 0.024,
      xc(M2_22) => 0,
      xc(M2_23) => 0,
      xc(M2_37) => 0.112,
      xc(M2_38) => 0.076,
      xc(M2_41) => 0.056,
      xc(M2_42) => 0.112,
      xc(M2_43) => 0.012,
      xc(M2_44) => 0,
      xc(M2_45) => 0.055,
      xc(M2_46) => 0.024,
      xc(M2_47) => 0,
      xc(M2_48) => 0.07,
      xc(M2_49) => 0.056,
      xc(M2_60) => 0.084,
      xc(M2_841) => 0.25,
      xc(M2_842) => 0.036,
      xc(M2_941) => 0.25,
      xc(M2_942) => 0.036,
      xc(M3BB_21) => 0,
      xc(M3BB_22) => 0.376,
      xc(M3BB_31) => 0.088,
      xc(M3BB_32) => 0.232,
      xc(M3BB_33) => 0.056,
      xc(M3BB_34) => 0.038,
      xc(M3BB_35) => 0,
      xc(M3BB_36) => 0.232,
      xc(M3BB_37) => 0.308,
      xc(M3BB_38) => 0.198,
      xc(M3BC_21) => 0.312,
      xc(M3CC_21) => 0,
      xc(M3CC_27) => 0.248,
      xc(M3CC_28) => 0.564,
      xc(M3L_01) => 0.056,
      xc(M3L_02) => 0.06,
      xc(M3L_03) => 0.068,
      xc(M3L_04) => 0.064,
      xc(M3L_05) => 0.076,
      xc(M3L_06) => 0.084,
      xc(M3L_07) => 0.074,
      xc(M3L_08) => 0.082,
      xc(M3L_09) => 0.066,
      xc(M3M_01) => 0.038,
      xc(M3M_02) => 0.04,
      xc(M3M_03) => 0.046,
      xc(M3M_04) => 0.046,
      xc(M3M_05) => 0.048,
      xc(M3M_06) => 0.052,
      xc(M3S_01) => 0.028,
      xc(M3S_02) => 0.03,
      xc(M3S_03) => 0.032,
      xc(M3S_04) => 0.036,
      xc(M3_00) => 0,
      xc(M3_126) => 0,
      xc(M3_127) => 0,
      xc(M3_128) => 0,
      xc(M3_129) => 0,
      xc(M3_130) => 0,
      xc(M3_131) => 0,
      xc(M3_132) => 0,
      xc(M3_133) => 0,
      xc(M3_134) => 0,
      xc(M3_135) => 0,
      xc(M3_136) => 0,
      xc(M3_137) => 0,
      xc(M3_138) => 0,
      xc(M3_139) => 0,
      xc(M3_140) => 0,
      xc(M3_141) => 0,
      xc(M3_142) => 0,
      xc(M3_143) => 0,
      xc(M3_147) => 0.024,
      xc(M3_148) => 0.014,
      xc(M3_20) => 0.05,
      xc(M3_21) => 0.024,
      xc(M3_22) => 0,
      xc(M3_23) => 0,
      xc(M3_37) => 0.112,
      xc(M3_38) => 0.076,
      xc(M3_41) => 0.056,
      xc(M3_42) => 0.112,
      xc(M3_43) => 0.012,
      xc(M3_44) => 0,
      xc(M3_45) => 0.055,
      xc(M3_46) => 0.024,
      xc(M3_47) => 0,
      xc(M3_48) => 0.07,
      xc(M3_49) => 0.056,
      xc(M3_60) => 0.084,
      xc(M3_841) => 0.25,
      xc(M3_842) => 0.036,
      xc(M3_941) => 0.25,
      xc(M3_942) => 0.036,
      xc(M4BB_21) => 0,
      xc(M4BB_22) => 0.376,
      xc(M4BB_31) => 0.088,
      xc(M4BB_32) => 0.232,
      xc(M4BB_33) => 0.056,
      xc(M4BB_34) => 0.038,
      xc(M4BB_35) => 0,
      xc(M4BB_36) => 0.232,
      xc(M4BB_37) => 0.308,
      xc(M4BB_38) => 0.198,
      xc(M4BC_21) => 0.312,
      xc(M4CC_21) => 0,
      xc(M4CC_27) => 0.248,
      xc(M4CC_28) => 0.564,
      xc(M4L_01) => 0.056,
      xc(M4L_02) => 0.06,
      xc(M4L_03) => 0.068,
      xc(M4L_05) => 0.076,
      xc(M4L_06) => 0.084,
      xc(M4L_07) => 0.074,
      xc(M4L_08) => 0.054,
      xc(M4L_09) => 0.066,
      xc(M4M_02) => 0.04,
      xc(M4M_03) => 0.046,
      xc(M4S_01) => 0.028,
      xc(M4S_02) => 0.03,
      xc(M4S_03) => 0.032,
      xc(M4S_04) => 0.036,
      xc(M4_00) => 0,
      xc(M4_01) => 0.04,
      xc(M4_02) => 0.044,
      xc(M4_03) => 0.048,
      xc(M4_04) => 0.056,
      xc(M4_05) => 0.06,
      xc(M4_06) => 0.064,
      xc(M4_07) => 0.068,
      xc(M4_08) => 0.076,
      xc(M4_09) => 0.08,
      xc(M4_10) => 0.09,
      xc(M4_101) => 0,
      xc(M4_102) => 0,
      xc(M4_103) => 0,
      xc(M4_11) => 0.108,
      xc(M4_123) => 0.044,
      xc(M4_124) => 0.046,
      xc(M4_126) => 0,
      xc(M4_127) => 0,
      xc(M4_128) => 0,
      xc(M4_129) => 0,
      xc(M4_130) => 0,
      xc(M4_131) => 0,
      xc(M4_132) => 0,
      xc(M4_133) => 0,
      xc(M4_134) => 0,
      xc(M4_135) => 0,
      xc(M4_136) => 0,
      xc(M4_137) => 0,
      xc(M4_138) => 0,
      xc(M4_139) => 0,
      xc(M4_140) => 0,
      xc(M4_141) => 0,
      xc(M4_142) => 0,
      xc(M4_147) => 0.024,
      xc(M4_148) => 0.014,
      xc(M4_20) => 0.05,
      xc(M4_21) => 0.024,
      xc(M4_22) => 0,
      xc(M4_23) => 0,
      xc(M4_24) => 0.046,
      xc(M4_249) => 0,
      xc(M4_25) => 0.044,
      xc(M4_250) => 0,
      xc(M4_251) => 0.11,
      xc(M4_252) => 0.048,
      xc(M4_253) => 0.03,
      xc(M4_26) => 0.05,
      xc(M4_260) => 0.04,
      xc(M4_261) => 0.08,
      xc(M4_262) => 0.04,
      xc(M4_27) => 0.044,
      xc(M4_28) => 0.056,
      xc(M4_31) => 0,
      xc(M4_32) => 0.044,
      xc(M4_33) => 0.06,
      xc(M4_37) => 0.112,
      xc(M4_38) => 0.076,
      xc(M4_40) => 0.08,
      xc(M4_41) => 0.056,
      xc(M4_42) => 0.112,
      xc(M4_43) => 0.012,
      xc(M4_44) => 0,
      xc(M4_45) => 0.055,
      xc(M4_46) => 0.024,
      xc(M4_47) => 0,
      xc(M4_48) => 0.07,
      xc(M4_49) => 0.056,
      xc(M4_51) => 0.08,
      xc(M4_52) => 0.08,
      xc(M4_53) => 0,
      xc(M4_60) => 0.084,
      xc(M4_62) => 0.14,
      xc(M4_63) => 0.12,
      xc(M4_65) => 0.16,
      xc(M4_70) => 0.018,
      xc(M4_71) => 0.1,
      xc(M4_72) => 0,
      xc(M4_73) => 0.35,
      xc(M4_80) => 0.056,
      xc(M4_81) => 0.056,
      xc(M4_82) => 0.09,
      xc(M4_83) => 0.09,
      xc(M4_84) => 0.124,
      xc(M4_941) => 0.25,
      xc(M4_942) => 0.036,
      xc(M5BB_21) => 0,
      xc(M5BB_22) => 0.376,
      xc(M5BB_31) => 0.088,
      xc(M5BB_32) => 0.232,
      xc(M5BB_33) => 0.056,
      xc(M5BB_34) => 0.038,
      xc(M5BB_35) => 0,
      xc(M5BB_36) => 0.232,
      xc(M5BB_37) => 0.308,
      xc(M5BB_38) => 0.198,
      xc(M5BC_21) => 0.312,
      xc(M5CC_21) => 0,
      xc(M5CC_27) => 0.248,
      xc(M5CC_28) => 0.564,
      xc(M5L_01) => 0.056,
      xc(M5L_02) => 0.06,
      xc(M5L_03) => 0.068,
      xc(M5L_05) => 0.076,
      xc(M5L_06) => 0.084,
      xc(M5L_07) => 0.074,
      xc(M5L_09) => 0.066,
      xc(M5M_02) => 0.04,
      xc(M5M_03) => 0.046,
      xc(M5S_01) => 0.028,
      xc(M5S_02) => 0.03,
      xc(M5S_03) => 0.032,
      xc(M5S_04) => 0.036,
      xc(M5_00) => 0,
      xc(M5_01) => 0.04,
      xc(M5_02) => 0.044,
      xc(M5_03) => 0.048,
      xc(M5_04) => 0.056,
      xc(M5_05) => 0.06,
      xc(M5_06) => 0.064,
      xc(M5_07) => 0.068,
      xc(M5_08) => 0.076,
      xc(M5_09) => 0.08,
      xc(M5_10) => 0.09,
      xc(M5_101) => 0,
      xc(M5_102) => 0,
      xc(M5_103) => 0,
      xc(M5_11) => 0.108,
      xc(M5_12) => 0.054,
      xc(M5_123) => 0.044,
      xc(M5_124) => 0.046,
      xc(M5_126) => 0,
      xc(M5_127) => 0,
      xc(M5_128) => 0,
      xc(M5_129) => 0,
      xc(M5_13) => 0.16,
      xc(M5_130) => 0,
      xc(M5_131) => 0,
      xc(M5_132) => 0.048,
      xc(M5_133) => 0,
      xc(M5_134) => 0,
      xc(M5_135) => 0,
      xc(M5_136) => 0,
      xc(M5_137) => 0,
      xc(M5_138) => 0,
      xc(M5_139) => 0,
      xc(M5_14) => 0.2,
      xc(M5_140) => 0,
      xc(M5_141) => 0,
      xc(M5_147) => 0.024,
      xc(M5_148) => 0.014,
      xc(M5_149) => 0,
      xc(M5_15) => 0.24,
      xc(M5_150) => 0,
      xc(M5_151) => 0.11,
      xc(M5_152) => 0.048,
      xc(M5_153) => 0.03,
      xc(M5_16) => 0,
      xc(M5_160) => 0.04,
      xc(M5_161) => 0.08,
      xc(M5_162) => 0.08,
      xc(M5_20) => 0.05,
      xc(M5_21) => 0.04,
      xc(M5_22) => 0.044,
      xc(M5_23) => 0.04,
      xc(M5_24) => 0.046,
      xc(M5_249) => 0,
      xc(M5_25) => 0.044,
      xc(M5_250) => 0,
      xc(M5_251) => 0.11,
      xc(M5_252) => 0.048,
      xc(M5_253) => 0.03,
      xc(M5_26) => 0.05,
      xc(M5_260) => 0.04,
      xc(M5_261) => 0.08,
      xc(M5_262) => 0.04,
      xc(M5_27) => 0.044,
      xc(M5_28) => 0.056,
      xc(M5_31) => 0,
      xc(M5_32) => 0.044,
      xc(M5_33) => 0.06,
      xc(M5_34) => 0.08,
      xc(M5_35) => 0,
      xc(M5_37) => 0.112,
      xc(M5_38) => 0,
      xc(M5_40) => 0.08,
      xc(M5_41) => 0.08,
      xc(M5_42) => 0.112,
      xc(M5_43) => 0.012,
      xc(M5_44) => 0.16,
      xc(M5_45) => 0.03,
      xc(M5_46) => 0.08,
      xc(M5_47) => 0.1,
      xc(M5_48) => 0.013,
      xc(M5_49) => 0.056,
      xc(M5_51) => 0.08,
      xc(M5_52) => 0.08,
      xc(M5_53) => 0,
      xc(M5_60) => 0.16,
      xc(M5_62) => 0.14,
      xc(M5_63) => 0.12,
      xc(M5_65) => 0.16,
      xc(M5_70) => 0.018,
      xc(M5_71) => 0.1,
      xc(M5_72) => 0,
      xc(M5_73) => 0.35,
      xc(M5_74) => 0.09,
      xc(M5_80) => 0.056,
      xc(M5_81) => 0.056,
      xc(M5_82) => 0.09,
      xc(M5_83) => 0.09,
      xc(M5_84) => 0.124,
      xc(M5_941) => 0.25,
      xc(M5_942) => 0.036,
      xc(M5err_00) => 0.05,
      xc(M6_00) => 0.08,
      xc(M6_01) => 0.04,
      xc(M6_02) => 0.044,
      xc(M6_03) => 0.048,
      xc(M6_04) => 0.056,
      xc(M6_05) => 0.06,
      xc(M6_06) => 0.064,
      xc(M6_07) => 0.068,
      xc(M6_08) => 0.076,
      xc(M6_09) => 0.08,
      xc(M6_10) => 0.09,
      xc(M6_101) => 0,
      xc(M6_102) => 0,
      xc(M6_103) => 0,
      xc(M6_11) => 0.108,
      xc(M6_12) => 0.054,
      xc(M6_123) => 0.044,
      xc(M6_124) => 0.046,
      xc(M6_13) => 0.16,
      xc(M6_132) => 0.048,
      xc(M6_14) => 0.2,
      xc(M6_149) => 0,
      xc(M6_15) => 0.24,
      xc(M6_150) => 0,
      xc(M6_151) => 0.11,
      xc(M6_152) => 0.048,
      xc(M6_153) => 0.03,
      xc(M6_16) => 0,
      xc(M6_160) => 0.04,
      xc(M6_161) => 0.08,
      xc(M6_162) => 0.08,
      xc(M6_21) => 0.04,
      xc(M6_22) => 0.044,
      xc(M6_23) => 0.04,
      xc(M6_24) => 0.046,
      xc(M6_249) => 0,
      xc(M6_25) => 0.044,
      xc(M6_250) => 0,
      xc(M6_251) => 0.11,
      xc(M6_252) => 0.048,
      xc(M6_253) => 0.03,
      xc(M6_26) => 0.05,
      xc(M6_260) => 0.04,
      xc(M6_261) => 0.08,
      xc(M6_262) => 0.04,
      xc(M6_27) => 0.044,
      xc(M6_28) => 0.056,
      xc(M6_31) => 0,
      xc(M6_32) => 0.044,
      xc(M6_33) => 0.06,
      xc(M6_34) => 0.08,
      xc(M6_35) => 0,
      xc(M6_37) => 0.12,
      xc(M6_38) => 0,
      xc(M6_40) => 0.08,
      xc(M6_41) => 0.08,
      xc(M6_44) => 0.16,
      xc(M6_45) => 0.03,
      xc(M6_46) => 0.08,
      xc(M6_47) => 0.1,
      xc(M6_48) => 0.013,
      xc(M6_51) => 0.08,
      xc(M6_52) => 0.08,
      xc(M6_53) => 0,
      xc(M6_60) => 0.16,
      xc(M6_62) => 0.14,
      xc(M6_63) => 0.12,
      xc(M6_65) => 0.16,
      xc(M6_70) => 0.018,
      xc(M6_71) => 0.1,
      xc(M6_72) => 0,
      xc(M6_73) => 0.35,
      xc(M6_80) => 0.056,
      xc(M6_81) => 0.056,
      xc(M6_82) => 0.09,
      xc(M6_83) => 0.09,
      xc(M6_84) => 0.124,
      xc(M7_00) => 0.08,
      xc(M7_01) => 0.056,
      xc(M7_02) => 0.06,
      xc(M7_03) => 0.084,
      xc(M7_04) => 0.12,
      xc(M7_05) => 0.15,
      xc(M7_06) => 0.168,
      xc(M7_07) => 0.18,
      xc(M7_08) => 0.256,
      xc(M7_09) => 0.28,
      xc(M7_21) => 0.056,
      xc(M7_22) => 0.07,
      xc(M7_23) => 0.23,
      xc(M7_24) => 0.251,
      xc(M7_25) => 0.4,
      xc(M7_26) => 0.056,
      xc(M7_27) => 0.08,
      xc(M7_31) => 0.074,
      xc(M7_32) => 0.06,
      xc(M7_35) => 0.09,
      xc(M7_37) => 0.09,
      xc(M7_38) => 0.168,
      xc(M7_41) => 0.09,
      xc(M7_51) => 0.06,
      xc(M7_52) => 0.09,
      xc(M7_60) => 0.204,
      xc(M7_65) => 0.42,
      xc(M7_70) => 0.026,
      xc(M7_71) => 0.116,
      xc(M7_72) => 0,
      xc(M7_73) => 0.5,
      xc(M7_74) => 0.09,
      xc(M7_80) => 0.079,
      xc(M7_81) => 0.079,
      xc(M7_82) => 0.084,
      xc(M7_83) => 0.084,
      xc(M7_84) => 0.168,
      xc(M7err_00) => 0.08,
      xc(M7err_01) => 0.088,
      xc(M7err_08) => 0.256,
      xc(M8_00) => 0.08,
      xc(M8_01) => 0.126,
      xc(M8_02) => 0.104,
      xc(M8_03) => 0.12,
      xc(M8_04) => 0.144,
      xc(M8_05) => 0.16,
      xc(M8_06) => 0.2,
      xc(M8_07) => 0.24,
      xc(M8_08) => 0.264,
      xc(M8_09) => 0.714,
      xc(M8_10) => 0.798,
      xc(M8_121) => 0.126,
      xc(M8_20) => 0,
      xc(M8_21) => 0.08,
      xc(M8_22) => 0.1,
      xc(M8_23) => 0.23,
      xc(M8_24) => 0.251,
      xc(M8_25) => 0.4,
      xc(M8_26) => 0.08,
      xc(M8_27) => 0.11,
      xc(M8_32) => 0.08,
      xc(M8_35) => 0.12,
      xc(M8_37) => 0.12,
      xc(M8_38) => 0.25,
      xc(M8_41) => 0.12,
      xc(M8_42) => 0.198,
      xc(M8_50) => 0,
      xc(M8_51) => 0.08,
      xc(M8_52) => 0.12,
      xc(M8_60) => 0.21,
      xc(M8_65) => 0.44,
      xc(M8_70) => 0.04,
      xc(M8_71) => 0.08,
      xc(M8_80) => 0.113,
      xc(M8_81) => 0.113,
      xc(M8_82) => 0.12,
      xc(M8_83) => 0.12,
      xc(M8_84) => 0.24,
      xc(M8err_00) => 0.08,
      xc(M8err_09) => 0.3,
      xc(M8err_21) => 0.084,
      xc(M9_00) => 0.08,
      xc(M9_01) => 0.54,
      xc(M9_02) => 0.11,
      xc(M9_03) => 0.124,
      xc(M9_04) => 0.148,
      xc(M9_05) => 0.168,
      xc(M9_06) => 0.192,
      xc(M9_07) => 0.212,
      xc(M9_08) => 0.236,
      xc(M9_09) => 0.3,
      xc(M9_121) => 0.126,
      xc(M9_20) => 0,
      xc(M9_21) => 0.08,
      xc(M9_22) => 0.1,
      xc(M9_23) => 0.23,
      xc(M9_24) => 0.251,
      xc(M9_25) => 0.4,
      xc(M9_26) => 0.08,
      xc(M9_27) => 0.11,
      xc(M9_32) => 0.08,
      xc(M9_35) => 0.12,
      xc(M9_37) => 0.12,
      xc(M9_38) => 0.25,
      xc(M9_41) => 0.12,
      xc(M9_42) => 0.198,
      xc(M9_43) => 0.13,
      xc(M9_50) => 0,
      xc(M9_51) => 0.08,
      xc(M9_52) => 0.12,
      xc(M9_60) => 0.21,
      xc(M9_65) => 0.44,
      xc(M9_70) => 0.04,
      xc(M9_71) => 0.08,
      xc(M9_80) => 0.113,
      xc(M9_81) => 0.113,
      xc(M9_82) => 0.148,
      xc(M9_83) => 0.148,
      xc(M9_84) => 0.24,
      xc(MC_01) => 0,
      xc(MC_02) => 0,
      xc(MC_03) => 0,
      xc(MIM_01) => 2,
      xc(MIM_02) => 1,
      xc(MIM_03) => 0.16,
      xc(MIM_04) => 1,
      xc(MIM_05) => 0,
      xc(MIM_06) => 0,
      xc(MIM_07) => 0,
      xc(MIM_22) => 10.78,
      xc(MIM_23) => 1,
      xc(MIM_25) => 64,
      xc(MIM_26) => 250,
      xc(MIM_51) => 0.4,
      xc(MIM_52) => 1,
      xc(MIM_53) => 0,
      xc(MIM_54) => 1.76,
      xc(MIM_55) => 1.6,
      xc(MIM_61) => 0,
      xc(MIM_62) => 0,
      xc(MIM_63) => 0,
      xc(MIM_71) => 0,
      xc(MIM_72) => 1.2,
      xc(MIM_73) => 1,
      xc(MIM_74) => 0,
      xc(MIM_75) => 0,
      xc(MIM_81) => 0,
      xc(MIM_82) => 1.2,
      xc(MIM_83) => 1,
      xc(MJ0_01) => 0.132,
      xc(MJ0_02) => 0,
      xc(MJ0_03) => 0,
      xc(MJ0_04) => 0,
      xc(MJ0_05) => 0.024,
      xc(MJ0_06) => 0.052,
      xc(MJ0_07) => 0.024,
      xc(MJ0_08) => 0.4,
      xc(MJ0_09) => 0.42,
      xc(MTJ_01) => 0,
      xc(MTJ_02) => 0,
      xc(MTJ_03) => 0.018,
      xc(MTJ_04) => 0.06,
      xc(MTJ_05) => 0.14,
      xc(MTJ_06) => 0.07,
      xc(MTJ_07) => 0.126,
      xc(MTJ_08) => 0,
      xc(MTJ_09) => 0.2,
      xc(MTJ_10) => 0,
      xc(MTJ_11) => 0,
      xc(MTJ_12) => 0.046,
      xc(MTJ_13) => 0.032,
      xc(MTJ_14) => 0,
      xc(MTJ_15) => 0.012,
      xc(NW_01) => 0.021,
      xc(NW_03) => 0.021,
      xc(NW_12) => 0.126,
      xc(NW_128) => 5.6,
      xc(NW_129) => 5.6,
      xc(NW_14) => 0.126,
      xc(NW_17) => 0.05,
      xc(NW_18) => 0.05,
      xc(NW_21) => 0.06,
      xc(NW_22) => 0.06,
      xc(NW_23) => 0.107,
      xc(NW_24) => 0.107,
      xc(NW_25) => 0.126,
      xc(NW_28) => 56,
      xc(NW_29) => 56,
      xc(NW_30) => 0.378,
      xc(NW_31) => 0.042,
      xc(NW_33) => 0.042,
      xc(NW_35) => 0.144,
      xc(NW_36) => 0.144,
      xc(NW_41) => 0.168,
      xc(NW_42) => 0.042,
      xc(NW_43) => 0.126,
      xc(NW_55) => 0.154,
      xc(NW_56) => 0.154,
      xc(NW_57) => 0.112,
      xc(NW_58) => 0.154,
      xc(NW_59) => 12,
      xc(NW_60) => 2.4,
      xc(NW_71) => 300,
      xc(NW_73) => 8,
      xc(NW_74) => 4,
      xc(PC_00) => 0,
      xc(PC_01) => 0.032,
      xc(PC_02) => 0.054,
      xc(PC_04) => 0,
      xc(PC_20) => 0.025,
      xc(PC_21) => 0.052,
      xc(PC_23) => 0.115,
      xc(PC_25) => 0.05,
      xc(PC_31) => 0.12,
      xc(PC_32) => 0.025,
      xc(PC_33) => 0.07,
      xc(PC_34) => 0.08,
      xc(PC_35) => 0.04,
      xc(PC_36) => 0.018,
      xc(PC_41) => 0.032,
      xc(PC_42) => 0.024,
      xc(PC_43) => 0.023,
      xc(PC_44) => 0.012,
      xc(PC_444) => 0.041,
      xc(PC_45) => 0.019,
      xc(PC_46) => 0.03,
      xc(PC_50) => 0,
      xc(PC_51) => 0.052,
      xc(PC_52) => 0.064,
      xc(PC_53) => 0,
      xc(PC_54) => 0.06,
      xc(PC_55) => 0.06,
      xc(PC_56) => 0.06,
      xc(PC_57) => 0.088,
      xc(PC_61) => 0.026,
      xc(PC_81) => 0.026,
      xc(PC_82) => 0.032,
      xc(PC_83) => 0.023,
      xc(PC_84) => 0.016,
      xc(PC_85) => 0.031,
      xc(PC_91) => 0,
      xc(PC_92) => 0.094,
      xc(PC_93) => 0.05,
      xc(PG_01) => 0.042,
      xc(PG_02) => 0.14,
      xc(PG_03) => 0,
      xc(PG_04) => 0.049,
      xc(PG_05) => 0,
      xc(PL_00) => 0,
      xc(PL_01) => 0.028,
      xc(PL_02) => 0.07,
      xc(PL_03) => 0.09,
      xc(PL_04) => 0.036,
      xc(PL_05) => 0.078,
      xc(PL_06) => 0.26,
      xc(PL_07) => 0.078,
      xc(PL_08) => 0.099,
      xc(PL_09) => 0,
      xc(PL_100) => 2.1,
      xc(PL_101) => 0.07,
      xc(PL_102) => 0.007,
      xc(PL_103) => 0.047,
      xc(PL_104) => 0.14,
      xc(PL_105) => 0,
      xc(PL_106) => 0.068,
      xc(PL_11) => 0.024,
      xc(PL_12) => 0,
      xc(PL_13) => 0.018,
      xc(PL_15) => 0.018,
      xc(PL_16) => 0.042,
      xc(PL_24) => 0,
      xc(PL_25) => 0.018,
      xc(PL_51) => 0,
      xc(PL_52) => 0,
      xc(PL_55) => 0,
      xc(PL_61) => 0.036,
      xc(PL_62) => 0,
      xc(PL_63) => 0.069,
      xc(PL_66) => 0,
      xc(PL_67) => 0.048,
      xc(PL_68) => 0.036,
      xc(PL_69) => 0,
      xc(PL_70) => 0,
      xc(PL_71) => 0,
      xc(PL_91) => 0,
      xc(PL_92) => 0,
      xc(RDL_01) => 2,
      xc(RDL_02) => 6,
      xc(RDL_03) => 15.556,
      xc(RDL_04) => 10,
      xc(RDL_05) => 1.98,
      xc(RDL_06) => 12.98,
      xc(RDL_07) => 0.25,
      xc(RDL_08) => 0,
      xc(RDL_09) => 2.23,
      xc(RDL_10) => 5.222,
      xc(RDL_11) => 2,
      xc(RDL_12) => 0,
      xc(RDL_13) => 0,
      xc(RDL_14) => 1.98,
      xc(RDL_15) => 1.98,
      xc(RDL_16) => 350,
      xc(SDC_03) => 0.036,
      xc(SDC_11) => 0.004,
      xc(SDC_111) => 0.002,
      xc(SD_01) => 0,
      xc(SD_02) => 0,
      xc(SD_03) => 0,
      xc(SD_04) => 0,
      xc(SK_12) => 0,
      xc(SK_22) => 0,
      xc(SK_31) => 0,
      xc(SK_32) => 0,
      xc(SK_41) => 0,
      xc(SK_42) => 0,
      xc(SK_51) => 0,
      xc(SK_52) => 0,
      xc(SK_61) => 0,
      xc(SK_62) => 0,
      xc(SK_71) => 0,
      xc(SK_72) => 0,
      xc(SK_81) => 0,
      xc(SK_82) => 0,
      xc(SM0_41) => 0.042,
      xc(SM0_60) => 0.063,
      xc(SM0_82) => 0,
      xc(SM0_821) => 0.007,
      xc(SM3_41) => 0.042,
      xc(SM3_47) => 0.046,
      xc(SNW_29) => 10,
      xc(SV3_97) => 0.094,
      xc(TDC_04) => 0.011,
      xc(TDC_21) => 0.21,
      xc(TEDM_01) => 0,
      xc(TEDM_02) => 0,
      xc(TEDM_04) => 108,
      xc(TEDM_06) => 2,
      xc(TEDM_07) => 1,
      xc(TEDM_08) => 1,
      xc(TEDM_11) => 1,
      xc(TEDM_12) => 0,
      xc(TEDM_13) => 0,
      xc(TEDM_14) => 0,
      xc(TEDM_15) => 25,
      xc(TEDM_16) => 1,
      xc(TEDW_01) => 6.72,
      xc(TEDW_02) => 6.048,
      xc(TEDW_03) => 0.84,
      xc(TEDW_04) => 1.512,
      xc(TEDW_07) => 13.44,
      xc(TEDW_08) => 1.512,
      xc(TEDW_11) => 1.68,
      xc(TEDW_12) => 9.072,
      xc(TEDW_13) => 13.44,
      xc(TEDW_14) => 1.512,
      xc(TEDW_15) => 1.68,
      xc(TEDW_16) => 9.072,
      xc(TEDW_17) => 13.44,
      xc(TEDW_18) => 1.512,
      xc(TM1_01) => 5.5,
      xc(TM1_02) => 5.5,
      xc(TM1_03) => 10.5,
      xc(TM1_04) => 10.5,
      xc(TM1_21) => 50,
      xc(TM1_22) => 250,
      xc(TM1_23) => 0.1,
      xc(TM1_25) => 1000,
      xc(TM1_26) => 200,
      xc(TM1_51) => 3,
      xc(TM1_60) => 0,
      xc(TPC_42) => 0.084,
      xc(TPC_44) => 0.016,
      xc(TPC_46) => 0.108,
      xc(TPL_01) => 0.16,
      xc(TPL_02) => 0.21,
      xc(TPL_04) => 0,
      xc(TPL_11) => 0.045,
      xc(TPL_13) => 0,
      xc(TPL_15) => 0,
      xc(TPL_25) => 0.078,
      xc(TSV_01) => 9.5,
      xc(TSV_02) => 15.84,
      xc(TSV_03) => 14.784,
      xc(TSV_04) => 5,
      xc(TSV_05) => 182,
      xc(TSV_06) => 0,
      xc(TSV_07) => 10,
      xc(TSV_08) => 6,
      xc(TSV_10) => 2,
      xc(TSV_21) => 15.12,
      xc(TSV_22) => 15.96,
      xc(TSV_23) => 16.8,
      xc(TSV_61) => 15.12,
      xc(TSV_62) => 14.784,
      xc(TV1_31) => 6,
      xc(TV1_32) => 30,
      xc(TV1_51) => 3,
      xc(TV1_61) => 0,
      xc(TX_01) => 0,
      xc(TX_02) => 0.48,
      xc(TX_03) => 0.48,
      xc(TX_05) => 0,
      xc(TX_06) => 0.039,
      xc(TX_07) => 0.039,
      xc(TX_08) => 0,
      xc(TX_09) => 0.252,
      xc(TX_10) => 0.252,
      xc(TX_11) => 0.23,
      xc(TX_12) => 0.23,
      xc(TX_13) => 0.48,
      xc(TX_21) => 0,
      xc(UHV_01) => 0.045,
      xc(UHV_02) => 0.045,
      xc(UHV_04) => 0.045,
      xc(UHV_05) => 0.04,
      xc(UHV_06) => 0.042,
      xc(UHV_07) => 0.045,
      xc(UHV_09) => 0.041,
      xc(UHV_10) => 0.036,
      xc(UHV_11) => 0.045,
      xc(UHV_12) => 0.039,
      xc(UHV_13) => 0.041,
      xc(UHV_14) => 0.036,
      xc(UHV_15) => 0.045,
      xc(UHV_16) => 0.039,
      xc(UHV_20) => 0.043,
      xc(UHV_21) => 0.041,
      xc(UHV_34) => 0.031,
      xc(UHV_36) => 0.084,
      xc(UHV_40) => 0.04,
      xc(UHV_41) => 0.042,
      xc(UHV_42) => 0.037,
      xc(UHV_43) => 0.03,
      xc(UHV_44) => 0.039,
      xc(UHV_45) => 0.036,
      xc(UHV_46) => 0.033,
      xc(UHV_47) => 0.03,
      xc(UHV_48) => 0.042,
      xc(UHV_49) => 0.031,
      xc(UHV_50) => 0.031,
      xc(UHV_51) => 0.041,
      xc(UHV_52) => 0.036,
      xc(UHV_53) => 0.043,
      xc(UHV_54) => 0.04,
      xc(UHV_55) => 0.045,
      xc(UHV_56) => 0.041,
      xc(UHV_57) => 0.031,
      xc(UHV_58) => 0.045,
      xc(UHV_59) => 0.041,
      xc(UHV_60) => 0.053,
      xc(UHV_61) => 0.055,
      xc(UHV_62) => 0.064,
      xc(UHV_63) => 0.06,
      xc(UL1_01) => 0.14,
      xc(UL1_05) => 0.0235,
      xc(UL1_06) => 0.06,
      xc(UL1_07) => 0.07,
      xc(UL1_08) => 0.042,
      xc(UL1_09) => 0.21,
      xc(UL1_10) => 1,
      xc(UL1_11) => 0.021,
      xc(UL1_116) => 0.0598,
      xc(UL1_12) => 0.021,
      xc(UL1_13) => 0.021,
      xc(UL1_14) => 0.021,
      xc(UL1_15) => 0,
      xc(UL1_16) => 0.066,
      xc(UL1_17) => 0.066,
      xc(UL1_31) => 0.14,
      xc(UL1_32) => 0.07,
      xc(UL1_33) => 0.07,
      xc(UL1_34) => 0,
      xc(UNW_14) => 0.48,
      xc(UNW_21) => 0.18,
      xc(UNW_22) => 0.18,
      xc(UV0_01) => 0.14,
      xc(UV0_05) => 0.0235,
      xc(UV0_06) => 0.06,
      xc(UV0_07) => 0.07,
      xc(UV0_08) => 0.042,
      xc(UV0_09) => 0.21,
      xc(UV0_10) => 1,
      xc(UV0_11) => 0.021,
      xc(UV0_116) => 0.0598,
      xc(UV0_12) => 0.021,
      xc(UV0_13) => 0.021,
      xc(UV0_14) => 0.021,
      xc(UV0_15) => 0,
      xc(UV0_16) => 0.066,
      xc(UV0_17) => 0.066,
      xc(UV0_31) => 0.14,
      xc(UV0_32) => 0.07,
      xc(UV0_33) => 0.07,
      xc(UV0_34) => 0,
      xc(UV1_01) => 0.14,
      xc(UV1_05) => 0.0235,
      xc(UV1_06) => 0.06,
      xc(UV1_07) => 0.07,
      xc(UV1_08) => 0.042,
      xc(UV1_09) => 0.21,
      xc(UV1_10) => 1,
      xc(UV1_11) => 0.021,
      xc(UV1_116) => 0.0598,
      xc(UV1_12) => 0.021,
      xc(UV1_13) => 0.021,
      xc(UV1_14) => 0.021,
      xc(UV1_15) => 0,
      xc(UV1_16) => 0.066,
      xc(UV1_17) => 0.066,
      xc(UV1_31) => 0.14,
      xc(UV1_32) => 0.07,
      xc(UV1_33) => 0.07,
      xc(UV1_34) => 0,
      xc(UV2_01) => 0.14,
      xc(UV2_05) => 0.0235,
      xc(UV2_06) => 0.06,
      xc(UV2_07) => 0.07,
      xc(UV2_08) => 0.042,
      xc(UV2_09) => 0.21,
      xc(UV2_10) => 1,
      xc(UV2_11) => 0.021,
      xc(UV2_116) => 0.0598,
      xc(UV2_12) => 0.021,
      xc(UV2_13) => 0.021,
      xc(UV2_14) => 0.021,
      xc(UV2_15) => 0,
      xc(UV2_16) => 0.066,
      xc(UV2_17) => 0.066,
      xc(UV2_31) => 0.14,
      xc(UV2_32) => 0.07,
      xc(UV2_33) => 0.07,
      xc(UV2_34) => 0,
      xc(UV3_01) => 0.14,
      xc(UV3_05) => 0.0235,
      xc(UV3_06) => 0.06,
      xc(UV3_07) => 0.07,
      xc(UV3_08) => 0.042,
      xc(UV3_09) => 0.21,
      xc(UV3_10) => 1,
      xc(UV3_11) => 0.021,
      xc(UV3_116) => 0.0598,
      xc(UV3_12) => 0.021,
      xc(UV3_13) => 0.021,
      xc(UV3_14) => 0.021,
      xc(UV3_15) => 0,
      xc(UV3_16) => 0.066,
      xc(UV3_17) => 0.066,
      xc(UV3_31) => 0.14,
      xc(UV3_32) => 0.07,
      xc(UV3_33) => 0.07,
      xc(UV3_34) => 0,
      xc(V0P_02) => 0.034,
      xc(V0P_102) => 0.034,
      xc(V0T_10) => 0.078,
      xc(V0T_11) => 0.08,
      xc(V0T_12) => 0.11,
      xc(V0T_20) => 0.078,
      xc(V0T_21) => 0.08,
      xc(V0T_22) => 0,
      xc(V0_01) => 0.042,
      xc(V0_02) => 0.028,
      xc(V0_03) => 0.032,
      xc(V0_04) => 0.04,
      xc(V0_05) => 0.042,
      xc(V0_06) => 0.046,
      xc(V0_07) => 0.048,
      xc(V0_08) => 0.054,
      xc(V0_09) => 0.06,
      xc(V0_10) => 0.078,
      xc(V0_101) => 0.056,
      xc(V0_102) => 0.028,
      xc(V0_103) => 0.032,
      xc(V0_104) => 0.04,
      xc(V0_105) => 0.042,
      xc(V0_106) => 0.046,
      xc(V0_107) => 0.048,
      xc(V0_108) => 0.054,
      xc(V0_111) => 0.042,
      xc(V0_122) => 0.1,
      xc(V0_142) => 0.026,
      xc(V0_171) => 0.118,
      xc(V0_19) => 0,
      xc(V0_22) => 0.089,
      xc(V0_23) => 0,
      xc(V0_24) => 0.084,
      xc(V0_242) => 0.041,
      xc(V0_25) => 0.074,
      xc(V0_250) => 0.092,
      xc(V0_252) => 0,
      xc(V0_26) => 0.084,
      xc(V0_27) => 0,
      xc(V0_28) => 0.07,
      xc(V0_29) => 0,
      xc(V0_30) => 0,
      xc(V0_31) => 0.028,
      xc(V0_32) => 0.076,
      xc(V0_328) => 0,
      xc(V0_33) => 0.028,
      xc(V0_40) => 0,
      xc(V0_42) => 0.025,
      xc(V0_43) => 0,
      xc(V0_49) => 0.014,
      xc(V0_61) => 0.017,
      xc(V0_62) => 0.014,
      xc(V0_63) => 0,
      xc(V0_64) => 0.084,
      xc(V0_66) => 0.042,
      xc(V0_69) => 0.007,
      xc(V0_70) => 0.039,
      xc(V0_71) => 0.103,
      xc(V0_840) => 0.007,
      xc(V0_98) => 0,
      xc(V0_99) => 0,
      xc(V10_01) => 0.14,
      xc(V10_02) => 0.356,
      xc(V10_11) => 0.007,
      xc(V10_12) => 0.04,
      xc(V10_21) => 0.21,
      xc(V10_31) => 0.14,
      xc(V10_32) => 0.28,
      xc(V10_33) => 0.275,
      xc(V10_34) => 0.307,
      xc(V10_35) => 0.212,
      xc(V10_39) => 0.16,
      xc(V10_40) => 0,
      xc(V10_41) => 0.21,
      xc(V10_51) => 0,
      xc(V10_52) => 0.04,
      xc(V10_61) => 0.007,
      xc(V10_62) => 0.04,
      xc(V10_71) => 0.02,
      xc(V10_72) => 0.04,
      xc(V11_01) => 0.44,
      xc(V11_02) => 1.115,
      xc(V11_11) => 0.08,
      xc(V11_12) => 0.08,
      xc(V11_31) => 0.44,
      xc(V11_32) => 0.88,
      xc(V11_33) => 0.64,
      xc(V11_34) => 3.7,
      xc(V11_40) => 2,
      xc(V11_41) => 2.5,
      xc(V11_51) => 0.08,
      xc(V11_52) => 0.08,
      xc(V12_31) => 0.8,
      xc(V12_32) => 1.85,
      xc(V12_33) => 7.4,
      xc(V12_34) => 3.7,
      xc(V12_40) => 2,
      xc(V12_41) => 2.5,
      xc(V12_51) => 0.14,
      xc(V1H_01) => 0.036,
      xc(V1H_02) => 0.036,
      xc(V1H_05) => 0.072,
      xc(V1H_08) => 0.078,
      xc(V1H_09) => 0.064,
      xc(V1H_10) => 0.07,
      xc(V1H_11) => 0.048,
      xc(V1H_12) => 0.054,
      xc(V1T_01) => 0.106,
      xc(V1T_02) => 0.028,
      xc(V1T_03) => 0.032,
      xc(V1T_11) => 0.098,
      xc(V1T_20) => 0,
      xc(V1_01) => 0.036,
      xc(V1_02) => 0.028,
      xc(V1_03) => 0.03,
      xc(V1_04) => 0.032,
      xc(V1_05) => 0.036,
      xc(V1_06) => 0.04,
      xc(V1_07) => 0.046,
      xc(V1_08) => 0.056,
      xc(V1_10) => 0.068,
      xc(V1_124) => 0.046,
      xc(V1_125) => 0.049,
      xc(V1_128) => 0.104,
      xc(V1_13) => 0.084,
      xc(V1_14) => 0.06,
      xc(V1_140) => 0.01,
      xc(V1_142) => 0.039,
      xc(V1_15) => 0.038,
      xc(V1_16) => 0.076,
      xc(V1_17) => 0.074,
      xc(V1_20) => 0,
      xc(V1_22) => 0.087,
      xc(V1_225) => 0.052,
      xc(V1_226) => 0.058,
      xc(V1_227) => 0.052,
      xc(V1_23) => 0.024,
      xc(V1_24) => 0.041,
      xc(V1_25) => 0,
      xc(V1_26) => 0,
      xc(V1_28) => 0.076,
      xc(V1_301) => 0.058,
      xc(V1_302) => 0.08,
      xc(V1_303) => 0.08,
      xc(V1_32) => 0.031,
      xc(V1_33) => 0.031,
      xc(V1_40) => 0.003,
      xc(V1_42) => 0.035,
      xc(V1_43) => 0,
      xc(V1_49) => 0.007,
      xc(V1_50) => 0.028,
      xc(V1_52) => 0,
      xc(V1_53) => 0,
      xc(V1_54) => 0,
      xc(V1_55) => 0,
      xc(V1_56) => 0,
      xc(V1_61) => 0.024,
      xc(V1_97) => 0.128,
      xc(V1_98) => 0,
      xc(V2H_01) => 0.032,
      xc(V2H_02) => 0.036,
      xc(V2H_03) => 0.032,
      xc(V2H_04) => 0.078,
      xc(V2H_05) => 0.032,
      xc(V2H_06) => 0.07,
      xc(V2H_07) => 0.032,
      xc(V2H_08) => 0.054,
      xc(V2H_10) => 0,
      xc(V2H_11) => 0.032,
      xc(V2H_12) => 0.072,
      xc(V2H_13) => 0.032,
      xc(V2H_14) => 0.064,
      xc(V2H_15) => 0.032,
      xc(V2H_16) => 0.048,
      xc(V2H_20) => 0,
      xc(V2T_01) => 0.084,
      xc(V2T_02) => 0.028,
      xc(V2T_03) => 0.084,
      xc(V2T_04) => 0.032,
      xc(V2T_05) => 0.08,
      xc(V2T_06) => 0.04,
      xc(V2T_20) => 0,
      xc(V2_01) => 0.032,
      xc(V2_02) => 0.028,
      xc(V2_03) => 0.03,
      xc(V2_04) => 0.036,
      xc(V2_05) => 0.04,
      xc(V2_06) => 0.046,
      xc(V2_07) => 0.046,
      xc(V2_08) => 0.056,
      xc(V2_09) => 0.06,
      xc(V2_10) => 0.074,
      xc(V2_11) => 0.068,
      xc(V2_116) => 0.058,
      xc(V2_117) => 0.046,
      xc(V2_118) => 0.064,
      xc(V2_119) => 0.046,
      xc(V2_12) => 0.066,
      xc(V2_120) => 0.056,
      xc(V2_121) => 0.064,
      xc(V2_122) => 0.046,
      xc(V2_123) => 0.052,
      xc(V2_124) => 0.046,
      xc(V2_127) => 0.046,
      xc(V2_128) => 0.076,
      xc(V2_129) => 0.038,
      xc(V2_13) => 0.076,
      xc(V2_130) => 0.074,
      xc(V2_131) => 0.038,
      xc(V2_132) => 0.06,
      xc(V2_133) => 0.044,
      xc(V2_134) => 0.06,
      xc(V2_135) => 0.04,
      xc(V2_136) => 0.066,
      xc(V2_137) => 0.054,
      xc(V2_138) => 0.032,
      xc(V2_139) => 0.044,
      xc(V2_14) => 0.084,
      xc(V2_140) => 0.056,
      xc(V2_141) => 0.044,
      xc(V2_142) => 0.028,
      xc(V2_143) => 0.044,
      xc(V2_144) => 0.082,
      xc(V2_145) => 0.054,
      xc(V2_146) => 0.032,
      xc(V2_147) => 0.054,
      xc(V2_148) => 0.04,
      xc(V2_149) => 0.054,
      xc(V2_150) => 0.068,
      xc(V2_152) => 0.027,
      xc(V2_16) => 0.084,
      xc(V2_161) => 0.046,
      xc(V2_162) => 0.046,
      xc(V2_163) => 0.058,
      xc(V2_164) => 0.046,
      xc(V2_165) => 0.076,
      xc(V2_166) => 0.046,
      xc(V2_17) => 0.038,
      xc(V2_172) => 0.068,
      xc(V2_18) => 0.076,
      xc(V2_19) => 0.032,
      xc(V2_20) => 0,
      xc(V2_22) => 0.104,
      xc(V2_228) => 0.08,
      xc(V2_23) => 0.024,
      xc(V2_24) => 0.048,
      xc(V2_240) => 0,
      xc(V2_241) => 0,
      xc(V2_250) => 0.071,
      xc(V2_251) => 0,
      xc(V2_252) => 0,
      xc(V2_28) => 0.072,
      xc(V2_32) => 0.023,
      xc(V2_33) => 0.022,
      xc(V2_40) => 0.002,
      xc(V2_41) => 0,
      xc(V2_42) => 0.03,
      xc(V2_43) => 0,
      xc(V2_45) => 0,
      xc(V2_450) => 0.071,
      xc(V2_451) => 0.136,
      xc(V2_452) => 0.09,
      xc(V2_46) => 0,
      xc(V2_49) => 0.009,
      xc(V2_51) => 0,
      xc(V2_54) => 0,
      xc(V2_61) => 0.024,
      xc(V2_62) => 0.006,
      xc(V2_97) => 0.136,
      xc(V2_98) => 0,
      xc(V3H_01) => 0.032,
      xc(V3H_02) => 0.036,
      xc(V3H_03) => 0.032,
      xc(V3H_04) => 0.078,
      xc(V3H_05) => 0.032,
      xc(V3H_06) => 0.07,
      xc(V3H_07) => 0.032,
      xc(V3H_08) => 0.054,
      xc(V3H_10) => 0,
      xc(V3H_11) => 0.032,
      xc(V3H_12) => 0.072,
      xc(V3H_13) => 0.032,
      xc(V3H_14) => 0.064,
      xc(V3H_15) => 0.032,
      xc(V3H_16) => 0.048,
      xc(V3H_17) => 0.038,
      xc(V3H_18) => 0.048,
      xc(V3H_20) => 0,
      xc(V3T_01) => 0.084,
      xc(V3T_02) => 0.028,
      xc(V3T_03) => 0.084,
      xc(V3T_04) => 0.032,
      xc(V3T_05) => 0.08,
      xc(V3T_06) => 0.04,
      xc(V3T_20) => 0,
      xc(V3_01) => 0.032,
      xc(V3_02) => 0.028,
      xc(V3_03) => 0.03,
      xc(V3_04) => 0.036,
      xc(V3_05) => 0.04,
      xc(V3_06) => 0.046,
      xc(V3_07) => 0.054,
      xc(V3_08) => 0.056,
      xc(V3_09) => 0.06,
      xc(V3_10) => 0.074,
      xc(V3_101) => 0.056,
      xc(V3_102) => 0.044,
      xc(V3_103) => 0.048,
      xc(V3_104) => 0.076,
      xc(V3_105) => 0.048,
      xc(V3_106) => 0.09,
      xc(V3_107) => 0.068,
      xc(V3_108) => 0.044,
      xc(V3_109) => 0.068,
      xc(V3_11) => 0.068,
      xc(V3_110) => 0.076,
      xc(V3_111) => 0.08,
      xc(V3_112) => 0.064,
      xc(V3_113) => 0.084,
      xc(V3_114) => 0.056,
      xc(V3_12) => 0.066,
      xc(V3_120) => 0.056,
      xc(V3_123) => 0.052,
      xc(V3_124) => 0.046,
      xc(V3_125) => 0.046,
      xc(V3_126) => 0.054,
      xc(V3_127) => 0.046,
      xc(V3_128) => 0.076,
      xc(V3_129) => 0.038,
      xc(V3_13) => 0.076,
      xc(V3_130) => 0.074,
      xc(V3_131) => 0.038,
      xc(V3_132) => 0.06,
      xc(V3_133) => 0.044,
      xc(V3_134) => 0.06,
      xc(V3_135) => 0.04,
      xc(V3_136) => 0.066,
      xc(V3_137) => 0.046,
      xc(V3_138) => 0.06,
      xc(V3_14) => 0.084,
      xc(V3_142) => 0.028,
      xc(V3_15) => 0.068,
      xc(V3_152) => 0.027,
      xc(V3_153) => 0.035,
      xc(V3_154) => 0.04,
      xc(V3_16) => 0.08,
      xc(V3_161) => 0.044,
      xc(V3_162) => 0.044,
      xc(V3_163) => 0.048,
      xc(V3_164) => 0.06,
      xc(V3_165) => 0.064,
      xc(V3_166) => 0.056,
      xc(V3_167) => 0.068,
      xc(V3_168) => 0.076,
      xc(V3_169) => 0.08,
      xc(V3_170) => 0.09,
      xc(V3_171) => 0.108,
      xc(V3_19) => 0.032,
      xc(V3_20) => 0,
      xc(V3_22) => 0.104,
      xc(V3_228) => 0.08,
      xc(V3_23) => 0.024,
      xc(V3_24) => 0.048,
      xc(V3_240) => 0,
      xc(V3_25) => 0,
      xc(V3_250) => 0.071,
      xc(V3_251) => 0,
      xc(V3_252) => 0,
      xc(V3_26) => 0.076,
      xc(V3_28) => 0.072,
      xc(V3_32) => 0.023,
      xc(V3_33) => 0.022,
      xc(V3_40) => 0.002,
      xc(V3_41) => 0,
      xc(V3_42) => 0.03,
      xc(V3_43) => 0,
      xc(V3_45) => 0,
      xc(V3_450) => 0.071,
      xc(V3_451) => 0.136,
      xc(V3_452) => 0.09,
      xc(V3_46) => 0,
      xc(V3_49) => 0.009,
      xc(V3_51) => 0,
      xc(V3_54) => 0,
      xc(V3_61) => 0.024,
      xc(V3_62) => 0.006,
      xc(V3_97) => 0.136,
      xc(V3_98) => 0,
      xc(V4H_01) => 0.032,
      xc(V4H_02) => 0.036,
      xc(V4H_03) => 0.032,
      xc(V4H_04) => 0.078,
      xc(V4H_05) => 0.032,
      xc(V4H_06) => 0.07,
      xc(V4H_07) => 0.032,
      xc(V4H_08) => 0.054,
      xc(V4H_10) => 0,
      xc(V4H_11) => 0.032,
      xc(V4H_12) => 0.072,
      xc(V4H_13) => 0.032,
      xc(V4H_14) => 0.064,
      xc(V4H_15) => 0.032,
      xc(V4H_16) => 0.048,
      xc(V4H_20) => 0,
      xc(V4T_01) => 0.084,
      xc(V4T_02) => 0.028,
      xc(V4T_03) => 0.084,
      xc(V4T_04) => 0.032,
      xc(V4T_05) => 0.08,
      xc(V4T_06) => 0.04,
      xc(V4T_20) => 0,
      xc(V4_01) => 0.032,
      xc(V4_02) => 0.04,
      xc(V4_03) => 0.044,
      xc(V4_04) => 0.036,
      xc(V4_05) => 0.04,
      xc(V4_06) => 0.064,
      xc(V4_08) => 0.056,
      xc(V4_09) => 0.108,
      xc(V4_10) => 0.048,
      xc(V4_101) => 0.056,
      xc(V4_102) => 0.044,
      xc(V4_103) => 0.048,
      xc(V4_104) => 0.076,
      xc(V4_105) => 0.048,
      xc(V4_106) => 0.09,
      xc(V4_107) => 0.068,
      xc(V4_108) => 0.044,
      xc(V4_109) => 0.068,
      xc(V4_11) => 0.06,
      xc(V4_110) => 0.076,
      xc(V4_111) => 0.08,
      xc(V4_112) => 0.064,
      xc(V4_113) => 0.084,
      xc(V4_114) => 0.056,
      xc(V4_115) => 0.054,
      xc(V4_116) => 0.056,
      xc(V4_117) => 0.054,
      xc(V4_118) => 0.054,
      xc(V4_119) => 0.158,
      xc(V4_12) => 0.076,
      xc(V4_120) => 0.056,
      xc(V4_121) => 0.108,
      xc(V4_122) => 0.054,
      xc(V4_123) => 0.052,
      xc(V4_124) => 0.046,
      xc(V4_125) => 0.15,
      xc(V4_126) => 0.15,
      xc(V4_127) => 0.046,
      xc(V4_128) => 0.12,
      xc(V4_129) => 0.04,
      xc(V4_13) => 0.09,
      xc(V4_130) => 0.066,
      xc(V4_131) => 0.038,
      xc(V4_132) => 0.06,
      xc(V4_133) => 0.044,
      xc(V4_134) => 0.06,
      xc(V4_135) => 0.038,
      xc(V4_136) => 0.074,
      xc(V4_137) => 0.042,
      xc(V4_138) => 0.076,
      xc(V4_14) => 0.056,
      xc(V4_142) => 0.028,
      xc(V4_15) => 0.068,
      xc(V4_152) => 0.028,
      xc(V4_153) => 0.035,
      xc(V4_154) => 0.04,
      xc(V4_16) => 0.08,
      xc(V4_161) => 0.044,
      xc(V4_162) => 0.044,
      xc(V4_163) => 0.048,
      xc(V4_164) => 0.06,
      xc(V4_165) => 0.064,
      xc(V4_166) => 0.056,
      xc(V4_167) => 0.068,
      xc(V4_168) => 0.076,
      xc(V4_169) => 0.08,
      xc(V4_17) => 0.08,
      xc(V4_170) => 0.09,
      xc(V4_171) => 0.108,
      xc(V4_172) => 0.054,
      xc(V4_181) => 0.044,
      xc(V4_182) => 0.142,
      xc(V4_19) => 0,
      xc(V4_20) => 0,
      xc(V4_22) => 0.095,
      xc(V4_228) => 0.08,
      xc(V4_23) => 0.04,
      xc(V4_24) => 0.044,
      xc(V4_240) => 0,
      xc(V4_25) => 0,
      xc(V4_250) => 0.071,
      xc(V4_251) => 0,
      xc(V4_252) => 0,
      xc(V4_26) => 0.076,
      xc(V4_28) => 0.072,
      xc(V4_29) => 0.02,
      xc(V4_30) => 0.1,
      xc(V4_32) => 0.025,
      xc(V4_33) => 0.022,
      xc(V4_40) => 0.002,
      xc(V4_41) => 0,
      xc(V4_42) => 0,
      xc(V4_43) => 0,
      xc(V4_45) => 0,
      xc(V4_450) => 0.071,
      xc(V4_451) => 0.136,
      xc(V4_452) => 0.09,
      xc(V4_46) => 0,
      xc(V4_49) => 0.012,
      xc(V4_51) => 0,
      xc(V4_52) => 0,
      xc(V4_54) => 0.022,
      xc(V4_61) => 0.022,
      xc(V4_62) => 0.032,
      xc(V4_97) => 0.136,
      xc(V4_98) => 0,
      xc(V4err_101) => 0.05,
      xc(V4err_113) => 0.05,
      xc(V5_01) => 0.06,
      xc(V5_02) => 0.04,
      xc(V5_03) => 0.044,
      xc(V5_04) => 0.048,
      xc(V5_05) => 0.054,
      xc(V5_06) => 0.056,
      xc(V5_07) => 0.06,
      xc(V5_08) => 0.064,
      xc(V5_09) => 0.068,
      xc(V5_10) => 0.076,
      xc(V5_101) => 0.06,
      xc(V5_102) => 0.09,
      xc(V5_103) => 0.072,
      xc(V5_104) => 0.08,
      xc(V5_105) => 0.088,
      xc(V5_106) => 0.24,
      xc(V5_107) => 0.068,
      xc(V5_108) => 0.044,
      xc(V5_109) => 0.068,
      xc(V5_11) => 0.08,
      xc(V5_110) => 0.076,
      xc(V5_111) => 0.08,
      xc(V5_112) => 0.064,
      xc(V5_113) => 0.084,
      xc(V5_114) => 0.056,
      xc(V5_115) => 0.054,
      xc(V5_116) => 0.056,
      xc(V5_117) => 0.054,
      xc(V5_118) => 0.054,
      xc(V5_12) => 0.108,
      xc(V5_124) => 0.088,
      xc(V5_128) => 0.12,
      xc(V5_13) => 0.16,
      xc(V5_14) => 0.2,
      xc(V5_15) => 0.24,
      xc(V5_152) => 0.028,
      xc(V5_153) => 0.035,
      xc(V5_154) => 0.04,
      xc(V5_16) => 0.08,
      xc(V5_161) => 0.044,
      xc(V5_162) => 0.044,
      xc(V5_163) => 0.048,
      xc(V5_164) => 0.06,
      xc(V5_165) => 0.064,
      xc(V5_166) => 0.056,
      xc(V5_167) => 0.068,
      xc(V5_168) => 0.076,
      xc(V5_169) => 0.08,
      xc(V5_170) => 0.09,
      xc(V5_171) => 0.108,
      xc(V5_172) => 0.054,
      xc(V5_181) => 0.044,
      xc(V5_182) => 0.142,
      xc(V5_19) => 0,
      xc(V5_22) => 0.113,
      xc(V5_23) => 0.04,
      xc(V5_24) => 0.044,
      xc(V5_240) => 0,
      xc(V5_241) => 0,
      xc(V5_25) => 0,
      xc(V5_26) => 0.076,
      xc(V5_28) => 0.1,
      xc(V5_29) => 0.02,
      xc(V5_30) => 0.1,
      xc(V5_32) => 0.036,
      xc(V5_33) => 0.03,
      xc(V5_40) => 0.01,
      xc(V5_41) => 0,
      xc(V5_42) => 0,
      xc(V5_49) => 0.012,
      xc(V5_51) => 0,
      xc(V5_52) => 0,
      xc(V5_54) => 0.022,
      xc(V5_61) => 0.022,
      xc(V5_62) => 0.032,
      xc(V6_01) => 0.056,
      xc(V6_02) => 0.06,
      xc(V6_03) => 0.06,
      xc(V6_04) => 0.06,
      xc(V6_05) => 0.06,
      xc(V6_06) => 0.084,
      xc(V6_07) => 0.06,
      xc(V6_08) => 0.12,
      xc(V6_09) => 0.06,
      xc(V6_10) => 0.15,
      xc(V6_101) => 0.144,
      xc(V6_102) => 0.22,
      xc(V6_103) => 0.144,
      xc(V6_104) => 0.256,
      xc(V6_105) => 0.144,
      xc(V6_106) => 0.112,
      xc(V6_107) => 0.08,
      xc(V6_108) => 0.12,
      xc(V6_109) => 0.09,
      xc(V6_11) => 0.06,
      xc(V6_110) => 0.15,
      xc(V6_117) => 0.09,
      xc(V6_118) => 0.084,
      xc(V6_12) => 0.168,
      xc(V6_128) => 0.24,
      xc(V6_13) => 0.06,
      xc(V6_14) => 0.18,
      xc(V6_15) => 0.088,
      xc(V6_16) => 0.18,
      xc(V6_17) => 0.072,
      xc(V6_18) => 0.084,
      xc(V6_19) => 0,
      xc(V6_20) => 0,
      xc(V6_22) => 0.137,
      xc(V6_23) => 0.056,
      xc(V6_24) => 0.059,
      xc(V6_240) => 0,
      xc(V6_25) => 0.1,
      xc(V6_27) => 0.168,
      xc(V6_28) => 0.168,
      xc(V6_29) => 0.02,
      xc(V6_30) => 0.098,
      xc(V6_31) => 0.036,
      xc(V6_32) => 0.03,
      xc(V6_33) => 0.03,
      xc(V6_40) => 0.01,
      xc(V6_41) => 0,
      xc(V6_48) => 0,
      xc(V6_49) => 0.016,
      xc(V6_51) => 0,
      xc(V6_54) => 0.032,
      xc(V6_61) => 0.032,
      xc(V6_92) => 0.088,
      xc(V6err_02) => 0.08,
      xc(V6err_103) => 0.144,
      xc(V6err_104) => 0.256,
      xc(V6err_12) => 0.256,
      xc(V6err_92) => 0.088,
      xc(V7_01) => 0.074,
      xc(V7_02) => 0.08,
      xc(V7_03) => 0.12,
      xc(V7_04) => 0.144,
      xc(V7_05) => 0.16,
      xc(V7_06) => 0.264,
      xc(V7_07) => 0.104,
      xc(V7_08) => 0.2,
      xc(V7_09) => 0.24,
      xc(V7_10) => 0.3,
      xc(V7_101) => 0.12,
      xc(V7_102) => 0.144,
      xc(V7_103) => 0.102,
      xc(V7_104) => 0.144,
      xc(V7_105) => 0.12,
      xc(V7_106) => 0.08,
      xc(V7_107) => 0.12,
      xc(V7_108) => 0.104,
      xc(V7_109) => 0.102,
      xc(V7_11) => 0.126,
      xc(V7_110) => 0.16,
      xc(V7_111) => 0.132,
      xc(V7_112) => 0.144,
      xc(V7_12) => 0.126,
      xc(V7_128) => 0.24,
      xc(V7_13) => 0.126,
      xc(V7_14) => 0.18,
      xc(V7_151) => 0.208,
      xc(V7_152) => 0.212,
      xc(V7_153) => 0.232,
      xc(V7_154) => 0.124,
      xc(V7_155) => 0.18,
      xc(V7_156) => 0.212,
      xc(V7_157) => 0.22,
      xc(V7_158) => 0.192,
      xc(V7_159) => 0.176,
      xc(V7_16) => 0.126,
      xc(V7_160) => 0.168,
      xc(V7_161) => 0.18,
      xc(V7_162) => 0.192,
      xc(V7_163) => 0.18,
      xc(V7_164) => 0.124,
      xc(V7_17) => 0.084,
      xc(V7_22) => 0.195,
      xc(V7_23) => 0.08,
      xc(V7_230) => 0.164,
      xc(V7_24) => 0.088,
      xc(V7_28) => 0.15,
      xc(V7_29) => 0.038,
      xc(V7_30) => 0.15,
      xc(V7_32) => 0.046,
      xc(V7_33) => 0.047,
      xc(V7_40) => 0.009,
      xc(V7_41) => 0,
      xc(V7_42) => 0,
      xc(V7_49) => 0.028,
      xc(V7_51) => 0,
      xc(V7_52) => 0,
      xc(V7_53) => 0.028,
      xc(V7_54) => 0.028,
      xc(V7_61) => 0.028,
      xc(V7err_02) => 0.08,
      xc(V7err_10) => 0.3,
      xc(V7err_102) => 0.08,
      xc(V7err_151) => 0.208,
      xc(V7err_152) => 0.212,
      xc(V7err_155) => 0.18,
      xc(V7err_156) => 0.212,
      xc(V7err_157) => 0.22,
      xc(V7err_158) => 0.192,
      xc(V8_01) => 0.1,
      xc(V8_02) => 0.08,
      xc(V8_03) => 0.11,
      xc(V8_04) => 0.124,
      xc(V8_05) => 0.148,
      xc(V8_06) => 0.168,
      xc(V8_07) => 0.192,
      xc(V8_08) => 0.212,
      xc(V8_09) => 0.236,
      xc(V8_10) => 0.3,
      xc(V8_101) => 0.092,
      xc(V8_102) => 0.08,
      xc(V8_103) => 0.11,
      xc(V8_104) => 0.124,
      xc(V8_105) => 0.148,
      xc(V8_106) => 0.168,
      xc(V8_107) => 0.192,
      xc(V8_108) => 0.212,
      xc(V8_109) => 0.236,
      xc(V8_11) => 0.08,
      xc(V8_12) => 0.08,
      xc(V8_128) => 0.24,
      xc(V8_131) => 0.11,
      xc(V8_132) => 0.22,
      xc(V8_151) => 0.208,
      xc(V8_152) => 0.212,
      xc(V8_153) => 0.232,
      xc(V8_154) => 0.124,
      xc(V8_155) => 0.18,
      xc(V8_156) => 0.212,
      xc(V8_157) => 0.22,
      xc(V8_158) => 0.192,
      xc(V8_159) => 0.176,
      xc(V8_160) => 0.168,
      xc(V8_161) => 0.18,
      xc(V8_162) => 0.192,
      xc(V8_163) => 0.18,
      xc(V8_164) => 0.124,
      xc(V8_21) => 0.18,
      xc(V8_22) => 0.226,
      xc(V8_23) => 0.08,
      xc(V8_24) => 0.104,
      xc(V8_28) => 0.228,
      xc(V8_29) => 0.068,
      xc(V8_30) => 0.228,
      xc(V8_31) => 0.44,
      xc(V8_32) => 0.126,
      xc(V8_33) => 0.074,
      xc(V8_34) => 0.307,
      xc(V8_35) => 0.212,
      xc(V8_39) => 0.16,
      xc(V8_40) => 0.006,
      xc(V8_41) => 0,
      xc(V8_49) => 0.04,
      xc(V8_51) => 0,
      xc(V8_52) => 0.08,
      xc(V8_53) => 0.018,
      xc(V8_54) => 0.044,
      xc(V8_61) => 0.044,
      xc(V8_62) => 0.04,
      xc(V8_71) => 0,
      xc(V8_72) => 0.04,
      xc(V8_73) => 0.001,
      xc(V8err_01) => 0.08,
      xc(V8err_101) => 0.11,
      xc(V8err_31) => 0.08,
      xc(V8err_32) => 0.16,
      xc(V9_01) => 0.08,
      xc(V9_02) => 0.298,
      xc(V9_101) => 0.11,
      xc(V9_11) => 0,
      xc(V9_12) => 0.04,
      xc(V9_131) => 0.11,
      xc(V9_132) => 0.22,
      xc(V9_153) => 0,
      xc(V9_21) => 0.18,
      xc(V9_31) => 0.08,
      xc(V9_32) => 0.16,
      xc(V9_33) => 0.275,
      xc(V9_34) => 0.307,
      xc(V9_35) => 0.212,
      xc(V9_39) => 0.16,
      xc(V9_40) => 0,
      xc(V9_41) => 0.18,
      xc(V9_51) => 0,
      xc(V9_52) => 0.04,
      xc(V9_53) => 0.018,
      xc(V9_61) => 0,
      xc(V9_62) => 0.04,
      xc(V9_71) => 0,
      xc(V9_72) => 0.04,
      xc(V9_73) => 0.001,
      xc(VCH_01) => 0.042,
      xc(VCH_02) => 0.052,
      xc(VCH_03) => 0.038,
      xc(VC_01) => 0.042,
      xc(VC_02) => 0.028,
      xc(VC_03) => 0.032,
      xc(VC_04) => 0.036,
      xc(VC_05) => 0.04,
      xc(VC_06) => 0.042,
      xc(VC_07) => 0.046,
      xc(VC_08) => 0.048,
      xc(VC_09) => 0.054,
      xc(VC_10) => 0.06,
      xc(VC_11) => 0.078,
      xc(VC_12) => 0.08,
      xc(VC_134) => 0.036,
      xc(VC_139) => 0.008,
      xc(VC_19) => 0,
      xc(VC_22) => 0.089,
      xc(VC_23) => 0.028,
      xc(VC_24) => 0.098,
      xc(VC_26) => 0.084,
      xc(VC_30) => 0,
      xc(VC_31) => 0.007,
      xc(VC_32) => 0.019,
      xc(VC_33) => 0.007,
      xc(VC_34) => 0.006,
      xc(VC_35) => 0.019,
      xc(VC_36) => 0.026,
      xc(VC_37) => 0.034,
      xc(VC_38) => 0.026,
      xc(VC_39) => 0.002,
      xc(VC_40) => 0,
      xc(VC_41) => 0.012,
      xc(VC_42) => 0,
      xc(VC_43) => 0.012,
      xc(VC_44) => 0.026,
      xc(VC_46) => 0.038,
      xc(VC_47) => 0.024,
      xc(VC_48) => 0.026,
      xc(VC_49) => 0.028,
      xc(VC_51) => 0,
      xc(VC_61) => 0.022,
      xc(VC_70) => 0.039,
      xc(VD_07) => 0.46,
      xc(VD_08) => 1.35,
      xc(VD_09) => 0.46,
      xc(VD_10) => 0.46,
      xc(VD_11) => 1.35,
      xc(VD_17) => 0.838,
      xc(VD_19) => 0.838,
      xc(VD_20) => 0.838,
      xc(VD_21) => 0.838,
      xc(VD_27) => 47.47,
      xc(VD_28) => 47.47,
      xc(VD_29) => 47.47,
      xc(VD_30) => 47.47,
      xc(VD_31) => 47.47,
      xc(VD_57) => 18.4,
      xc(VD_58) => 18.4,
      xc(VD_59) => 18.4,
      xc(VD_60) => 18.4,
      xc(VD_61) => 18.4,
      xc(XDC_21) => 0.084,
      xc(XG_01) => 0,
      xc(XG_02) => 0.48,
      xc(XG_03) => 0.48,
      xc(XG_05) => 0,
      xc(XG_06) => 0.039,
      xc(XG_07) => 0.039,
      xc(XG_08) => 0,
      xc(XG_09) => 0.252,
      xc(XG_10) => 0.252,
      xc(XG_11) => 0.23,
      xc(XG_12) => 0.23,
      xc(XG_13) => 0.48,
      xc(XG_21) => 0,
      xc(XPL_01) => 0.042,
      xc(XPL_02) => 0.084
   };


   // define/initialize a hash for rule label to error message
   drHash:typeHashString2String = { 
      xc(ADC_04) => "Diffcon side space to Poly, ONLY ALLOWED value ",
      xc(ADC_21) => "Diffcon pitch, ONLY ALLOWED value",
      xc(AG4_01) => "Min AG4 width",
      xc(AG4_02) => "Min AG4 space",
      xc(AG4_03) => "Min AG4 jog segment length",
      xc(AG4_04) => "Min AG4 space along a M4 line",
      xc(AG4_07) => "Min AG4 overlap of M4 line end",
      xc(AG4_08) => "Min AG4 overlap of Via3/Via4",
      xc(AG4_09) => "Min AG4 overlap of M4 line side",
      xc(AG4_10) => "Max M4 space that gets AG4 synthesis",
      xc(AG6_01) => "Min AG6 width",
      xc(AG6_02) => "Min AG6 space",
      xc(AG6_03) => "Min AG6 jog segment length",
      xc(AG6_04) => "Min AG6 space along a M6 line",
      xc(AG6_07) => "Min AG6 overlap of M6 line end",
      xc(AG6_08) => "Min AG6 overlap of Via5/Via6",
      xc(AG6_09) => "Min AG6 overlap of M6 line side",
      xc(AG6_10) => "Max M6 space that gets AG6 synthesis",
      xc(AL_01) => "Minimum width of NAL/PAL layer",
      xc(AL_05) => "Minimum required area of NAL/PAL layer (sq um)",
      xc(AL_06) => "Minimum required hole area of NAL/PAL layer  (sq um)",
      xc(AL_07) => "Minimum segment lengths",
      xc(AL_08) => "Restricted minimum segment lengths (has additional segment-to-segment requirements)",
      xc(AL_09) => "Space between restricted segment lengths (>= AL_08, <AL_07) convex-convex, concave-concave corner",
      xc(AL_10) => "Space between restricted segment lengths (>= AL_08, <AL_07) convex-concave corner",
      xc(AL_11) => "NAL/PAL enclosure of nuva/puva gate (PGD)",
      xc(AL_116) => "NAL/PAL convex corner enclosure of nuva/puva gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge",
      xc(AL_12) => "NAL/PAL enclosure of nuva/puva gate (OGD)",
      xc(AL_13) => "NAL/PAL space to non-n/puva gate (PGD)",
      xc(AL_14) => "NAL/PAL space to non-n/puva gate (OGD)",
      xc(AL_15) => "NAL/PAL PGD edge must be centered in poly space or poly width",
      xc(AL_16) => "NAL/PAL unrestricted convex corner enclosure of nuva/puva gate",
      xc(AL_17) => "NAL/PAL concave corner enclosure of non-n/puva gate",
      xc(AL_31) => "Minimum space of NAL/PAL layer",
      xc(AL_32) => "NAL/PAL layer is allowed to have coincident edges of length >=",
      xc(AL_33) => "NAL/PAL layer is allowed to have coincident corners with space >=",
      xc(AL_34) => "NAL/PAL layer is allowed to have point touch",
      xc(AN_72) => "DiodeID must be drawn line on line with the nwell enclosing the diode.",
      xc(APC_42) => "Min Polycon end overlap of poly for PC_41",
      xc(APC_44) => "Min Polycon end space to poly side",
      xc(APL_01) => "Poly width, ONLY ALLOWED value",
      xc(APL_02) => "Poly pitch, ONLY ALLOWED value",
      xc(APL_04) => "Short poly end-to-end space (PL_04) not allowed in TG pitch region",
      xc(APL_11) => "Min Poly endcap length",
      xc(APL_13) => "Maximum pullback of Adjacent Dummy Poly line-end from Gate-STI (diffusion) edge",
      xc(APL_15) => "Maximum pullback of Adjacent Dummy Poly line-end from Tap diffusion edge",
      xc(APL_25) => "Min Poly end space to diffusion PGD",
      xc(BC_00) => "All Bitcell Cell Names must be within the SRAMPOLYID layer  ",
      xc(BDC_02) => "Minimum diffcon length",
      xc(BDC_03) => "Diffcon end-to-end (ETE) space (min)",
      xc(BDC_04) => "Diffcon side space to poly, ONLY ALLOWED value ",
      xc(BDC_11) => "Transistor diffusion enclosure of diffcon (max value)",
      xc(BDC_31) => "Min offset between adjacent non-overlapping line-ends in opposite directions",
      xc(BDC_33) => "Min overlap between adjacent line-ends in opposite directions, when at least one line-end touches a min ETE space (DC_03) and has length <= DC_34",
      xc(BDC_36) => "Min overlap between adjacent line-ends in opposite directions, when at least one line-end touches a min ETE space (DC_03) and has length > DC_34",
      xc(BDF_10) => "Minimum transistor diffusion segment lengths OGD",
      xc(BDF_91) => "Transistor pdiff-pdiff facing-edge space, in gate-direction",
      xc(BDF_92) => "Transistor ndiff-pdiff facing-edge space, in gate-direction",
      xc(BDG_91) => "SRAM Diffusion check grid width (min value)",
      xc(BDG_92) => "SRAM Diffusion check grid width (max value)",
      xc(BDG_93) => "SRAM Diffusion check grid space (fixed value1)",
      xc(BDG_94) => "SRAM Diffusion check grid space (fixed value2)",
      xc(BJ_01) => "N+ S/D block width (post generation)",
      xc(BJ_03) => "NSD block space to active n+ diffusion",
      xc(BJ_05) => "NSD block enclosure of active p+ diffusion",
      xc(BJ_11) => "Ntip block space to active n-diffusion edge",
      xc(BJ_12) => "Ntip block enclosure of active p-diffusion edge",
      xc(BJ_14) => "Minimum synthesized N+ S/D block convex corner encl of active p+ diff corner",
      xc(BJ_15) => "Minimum synthesized N+ S/D block concave corner space to active n+ diff corner",
      xc(BK_02) => "P+ S/D block space",
      xc(BK_03) => "PSD block space to active p+ diffusion",
      xc(BK_05) => "PSD block enclosure of active n+ diffusion",
      xc(BK_11) => "Ptip block space to active p-diffusion edge",
      xc(BK_12) => "Ptip block enclosure of active n-diffusion edge",
      xc(BK_14) => "Minimum synthesized P+ S/D block convex corner encl of active n+ diff corner",
      xc(BK_15) => "Minimum synthesized P+ S/D block concave corner space to active p+ diff corner",
      xc(BK_23) => "P+ S/D block space to active p+ diff (PGD)",
      xc(BLDI_02) => "Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (logic)",
      xc(BLDI_102) => "Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (RFSRAM)",
      xc(BLDI_192) => "Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (LVC)",
      xc(BLDI_202) => "Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (any combination of logic or SRAM, )",
      xc(BLDI_292) => "Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (HPC)",
      xc(BLDI_302) => "Max allowed Intermediate Exposed N-diff density inside STTRAMID1/2 (LDI_02 exception)",
      xc(BLDI_392) => "Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (UPC)",
      xc(BLDI_402) => "Max allowed Intermediate Exposed N-diff density inside HDDP/SDP sram",
      xc(BLDI_492) => "Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size (X73_RF)",
      xc(BLDI_592) => "Max allowed Intermediate Exposed N-diff density (SDP/HDDP)",
      xc(BLD_233) => "Max allowed local N + P diffusion density (%), 24.5um x 24.5um window size",
      xc(BLD_234) => "Max allowed local poly density (%), within a 1.96um x 1.96um window size (SRAM region)",
      xc(BLD_333) => "Max allowed local N + P diffusion density (%), 24.5um x 24.5um window size (UPC)",
      xc(BLD_334) => "Max allowed local poly density (%), within a 1.96um x 1.96um window size (ROM)",
      xc(BLD_431) => "Min required local Exposed P-diffusion density (%) 17.5um x 17.5um window size (X72B_TSROM)",
      xc(BLD_433) => "Max allowed local N + P diffusion density (%), 24.5um x 24.5um window size (HPC)",
      xc(BLD_531) => "Min required local Exposed P-diffusion density (%), 17.5um x 17.5um window size in DP ram",
      xc(BLD_533) => "Max allowed local N + P diffusion density (%), 24.5um x 24.5um window size (fuse)",
      xc(BLD_534) => "Max allowed local poly density (%), within a 1.96um x 1.96um window size (HDDP/SDP/HPDP/LVDP region)",
      xc(BLD_620) => "Max required local VCN density inside STTRAMID1/2 (LD_620 exception)",
      xc(BLD_631) => "Min required local Exposed P-diff density inside STTRAMID1/2 (LD_131 exception)",
      xc(BLD_633) => "Max allowed local N+P diffusion density inside STTRAMID1/2 (LD_233 exception)",
      xc(BLD_731) => "Min required local Exposed P-diffusion density (%), 17.5um X 17.5um window size in RFSERU ",
      xc(BNW_01) => "N-well space to N+ active diffusion, in gate-direction",
      xc(BNW_03) => "N-well enclosure of P+ active diffusion, in gate-direction",
      xc(BNW_24) => "N-well concave corner space to N+ active diffusion corner",
      xc(BNW_28) => "P1273 NW_28 relaxation for sram",
      xc(BNW_29) => "P1273 NW_29 relaxation for sram",
      xc(BNW_31) => "N-well space to N+ active diffusion, in gate-direction",
      xc(BPC_41) => "Poly overlap of polycon (PGD) for PC_42",
      xc(BPC_44) => "Polycon end space to poly side",
      xc(BPC_46) => "Polycon end extension beyond poly side for PC_45",
      xc(BPC_47) => "Min overlap of poylcon and poly (pgd and ogd checked sperately for each type of sram)",
      xc(BPC_61) => "Polycon side space to gate/diffusion edge",
      xc(BPC_81) => "Polycon space to Diffcon",
      xc(BPC_83) => "Polycon end overlap of Diffcon in OGD for PC_82",
      xc(BPL_01) => "SRAM poly width, fixed value",
      xc(BPL_02) => "SRAM poly pitch, fixed value",
      xc(BPL_04) => "Short poly end-to-end space (fixed value) (cannot be isolated)",
      xc(BPL_11) => "Poly endcap length",
      xc(BPL_13) => "Max enclosure of poly by OGD diffusion edges",
      xc(BU_01) => "Bump width, only allowed value",
      xc(BU_02) => "Bump to Bump separation (center-to-center, minimum)",
      xc(BU_03) => "Each Bump must have a TV1",
      xc(BU_04) => "Bump to Bump separation core region (center-to-center, maximum)***",
      xc(BU_05) => "Bump to Bump separation IO region (center-to-center, maximum)***",
      xc(BU_06) => "Bump to Bump separation IO-core transition region (center-to-center, maximum)***",
      xc(BU_101) => "C4EMIB Bump width, only allowed value",
      xc(BU_102) => "C4EMIB Bump to C4EMIB Bump separation (center-to-center, minimum)",
      xc(BU_103) => "Each C4EMIB Bump must have a TV1",
      xc(BU_104) => "C4EMIB Bump to C4EMIB Bump separation (center-to-center, maximum)***",
      xc(BU_105) => "C4EMIB Bump to C4 Bump separation (center-to-center, maximum)***",
      xc(BU_110) => "C4EMIB bumps must be drawn inside EMIBBUMPZONE ID (layer 81.79)",
      xc(BU_111) => "C4 bumps must be outside EMIBBUMPZONE ID",
      xc(BU_112) => "C4EMIB Bump to C4 Bump separation (center-to-center, minimum)",
      xc(BU_124) => "TV1 offset is not not allowed for C4EMIB bump (TV1 must be centered on C4EMIB bump)",
      xc(BU_21) => "Fixed Width of outer ring from EOA that requires additional rules",
      xc(BU_22) => "Max allowed offset from center of Rectangular TV1 to center of Bump",
      xc(BU_23) => "TV1 offset from center of Bump is allowed only in the direction orthogonal to the long edge of the via",
      xc(BU_24) => "TV1 offset is not allowed towards the edge of the die in the outer ring",
      xc(BU_25) => "Allowed gap in outer ring measured from die center line",
      xc(BVC_01) => "Bitcell ViaconA width, fixed value (SA edge)",
      xc(BVC_02) => "Bitcell ViaconA length, fixed value (non-SA edge)",
      xc(BXG_11) => "SRAM Min XGOXID enclosure of active gate area inside XGOXID ",
      xc(CDW_100) => "Window for CD_100",
      xc(CDW_101) => "Window for CD_101",
      xc(CDW_102) => "Window for CD_102",
      xc(CDW_103) => "Window for CD_103",
      xc(CDW_104) => "Window for CD_104",
      xc(CDW_105) => "Window for CD_105",
      xc(CDW_106) => "Window for CD_106",
      xc(CDW_107) => "Window for CD_107",
      xc(CDW_131) => "Window for CD_131",
      xc(CDW_200) => "Window for CD_200",
      xc(CDW_201) => "Window for CD_201",
      xc(CDW_202) => "Window for CD_202",
      xc(CDW_203) => "Window for CD_203",
      xc(CDW_204) => "Window for CD_204",
      xc(CDW_205) => "Window for CD_205",
      xc(CDW_206) => "Window for CD_206",
      xc(CDW_207) => "Window for CD_207",
      xc(CDW_208) => "Window for CD_208",
      xc(CDW_209) => "Window for CD_209",
      xc(CDW_210) => "Window for CD_210",
      xc(CDW_211) => "Window for CD_211",
      xc(CDW_231) => "Window for CD_231",
      xc(CD_100) => "Minimum concentrated local Metal 0 density (%), within a 2.1um x 2.1um window size",
      xc(CD_101) => "Minimum concentrated local Metal 1 density (%), within a 2.1um x 2.1um window size",
      xc(CD_102) => "Minimum concentrated local Metal 2 density (%), within a 2.1um x 2.1um window size",
      xc(CD_103) => "Minimum concentrated local Metal 3 density (%), within a 2.1um x 2.1um window size",
      xc(CD_104) => "Minimum concentrated local Metal 4 density (%), within a 2.1um x 2.1um window size",
      xc(CD_105) => "Minimum concentrated local Metal 5 density (%), within a 2.8um x 2.8um window size",
      xc(CD_106) => "Minimum concentrated local Metal 6 density (%), within a 2.8um x 2.8um window size",
      xc(CD_107) => "Minimum concentrated local Metal 7 density (%), within a 2.8um x 2.8um window size",
      xc(CD_131) => "Minimum concentrated N+P density (%), within a 1.96um x 1.96um window size",
      xc(CD_200) => "Maximum concentrated local Metal 0 density (%), within a 3.15um x 3.15um window size",
      xc(CD_201) => "Maximum concentrated local Metal 1 density (%), within a 3.15um x 3.15um window size",
      xc(CD_202) => "Maximum concentrated local Metal 2 density (%), within a 3.15um x 3.15um window size",
      xc(CD_203) => "Maximum concentrated local Metal 3 density (%), within a 3.15um x 3.15um window size",
      xc(CD_204) => "Maximum concentrated local Metal 4 density (%), within a 3.15um x 3.15um window size",
      xc(CD_205) => "Maximum concentrated local Metal 5 density (%), within a 4.5um x 4.5um window size",
      xc(CD_206) => "Maximum concentrated local Metal 6 density (%), within a 4.5um x 4.5um window size",
      xc(CD_207) => "Maximum concentrated local Metal 7 density (%), within a 4.5um x 4.5um window size",
      xc(CD_208) => "Maximum concentrated local Metal 8 density (%), within a 8.8um x 8.8um window size",
      xc(CD_209) => "Maximum concentrated local Metal 9 density (%), within a 8.8um x 8.8um window size",
      xc(CD_210) => "Maximum concentrated local Metal 10 density (%), within a 8.8um x 8.8um window size",
      xc(CD_211) => "Maximum concentrated local Metal 11 density (%), within a 8.8um x 8.8um window size",
      xc(CD_231) => "Maximum concentrated N+P density (%), within a 1.96um x 1.96um window size",
      xc(CHN_01) => "CHN ring must include 4 Corner cells, 1 CE12 resistor cell, 1 MT9/VA9 leakage cell and 1 OGD or PGD I/O cell",
      xc(CHN_02) => "Number of I/O cell placement allowed (either on a OGD or PGD die edge)",
      xc(CHN_03) => "Min distance of ce12res resistor cell or m9v9 leakage cell or I/O cell (OGD or PGD) away from die corner",
      xc(CHN_04) => "OGD or PGD I/O cell must be placed between the CE12 resistor and MT9/VA9 leakage cells (along the shorter perimeter distance separating the two cells)",
      xc(CHN_05) => "Abutting CHN cells are not allowed to create gaps, jogs or to overlap",
      xc(CHN_06) => "CHN I/O cell must be aligned to EDM I/O cell",
      xc(CHN_07) => "EOA layer in the CHN Ring must overlap with EOA layer in the EDM ring (they must overlap exactly) ",
      xc(CHN_08) => "CHN cells dimension not drawn according to spec",
      xc(CHW_01) => "Corner Cell x",
      xc(CHW_02) => "Corner Cell y",
      xc(CHW_03) => "OGD Gap Cell x",
      xc(CHW_04) => "OGD Gap Cell y",
      xc(CHW_05) => "PGD Gap Cell x",
      xc(CHW_06) => "PGD Gap Cell y",
      xc(CHW_07) => "CE12 Resistor Cell x",
      xc(CHW_08) => "CE12 Resistor Cell y",
      xc(CHW_09) => "MT9/VA9 Leakage Cell x",
      xc(CHW_10) => "MT9/VA9 Leakage Cell y",
      xc(CHW_11) => "OGD IO Cell x",
      xc(CHW_12) => "OGD IO Cell y",
      xc(CHW_13) => "PGD IO Cell x",
      xc(CHW_14) => "PGD IO Cell y",
      xc(CMW_05) => "Window for CM_05",
      xc(CMW_06) => "Window for CM_06",
      xc(CMW_07) => "Window for CM_07",
      xc(CMW_08) => "Window for CM_08",
      xc(CMW_09) => "Window for CM_09",
      xc(CM_05) => "Minimum cumulative density (M5+M6+M7+M8) (%), within a 7um x 7um window size",
      xc(CM_06) => "Minimum cumulative density (M6+M7+M8+M9) (%), within a 7um x 7um window size",
      xc(CM_07) => "Minimum cumulative density (M7+M8+M9+M10) (%), within a 7um x 7um window size",
      xc(CM_08) => "Minimum cumulative density (M8+M9+M10+M11) (%), within a 7um x 7um window size",
      xc(CM_09) => "Minimum cumulative density (M9+M10+M11+M12) (%), within a 7um x 7um window size",
      xc(DA_01) => "No Diffusion or Polycon (GCN) are allowed in the Transition Ring between Digital and TG regions. (1/2 poly wide diffusion slivers at inner/outer edges of TR are an exception)",
      xc(DA_02) => "Transition regions (TRDTOV1) cannot overlap (can abut PGD)",
      xc(DA_03) => "Any transition regions to transition region space OGD (min)",
      xc(DA_04) => "Minimum PGD facing-edge spacing between V1pitchID layers",
      xc(DA_05) => "TRDTOV1 PGD edge space to Polycheck grid outside (fixed value)",
      xc(DA_06) => "No restriction on number of TGULV poly lines",
      xc(DA_11) => "PGD width of TRDTOV1 ring (OGD running section) (fixed)",
      xc(DA_12) => "OGD width of TRDTOV1 ring (PGD running section) (fixed)",
      xc(DA_171) => "Diffcons are allowed in PGD section and OGD section of TR (but not in the corner section)",
      xc(DA_172) => "Diffcon in the PGD section of TR must follow all standard diffcon rules except the following rules (DA_174-176)",
      xc(DA_173) => "Min space of TCN in OGD section of TR to the corner section",
      xc(DA_174) => "Min TCN space (in PGD) to the corner section of TR",
      xc(DA_175) => "Diffcon ends in PGD section of TR must be all aligned to each other across the whole width of TR",
      xc(DA_176) => "Diffcons in PGD section of TR must be placed in the middle of poly space",
      xc(DA_22) => "Minimum space between concave corners of V1pitchID",
      xc(DA_24) => "Minimum width of V1pitchID",
      xc(DA_25) => "Minimum V1pitchID segment length",
      xc(DA_26) => "Minimum V1pitchID hole size (all direction)",
      xc(DA_27) => "Minimum V1pitchID hole area (um^2)",
      xc(DA_30) => "Minimum V1pitchID space (between connected V1pitchID region)",
      xc(DA_31) => "Poly layout in the Digital-to-TGULV Transition Ring must match a fixed poly layout pattern template comparison check",
      xc(DA_32) => "Poly space region min.separation (PGD direction) from TR OGD edge",
      xc(DA_33) => "Both digital and TGULV poly ends must flush with OGD edge of TRDTOV1 except three digital dummy polys at the edge of TR",
      xc(DA_35) => "TRDTOV1 OGD enclosure of first dummy poly line (fixed value)",
      xc(DA_361) => "Fixed width of first 2 poly within TR",
      xc(DA_362) => "Fixed width of 3rd/4th poly within TR (under V1pitchID)",
      xc(DA_371) => "Fixed space between 1st and 2nd poly within TR",
      xc(DA_372) => "Fixed space between 2nd and 3rd poly within TR",
      xc(DA_373) => "Fixed space between 3rd and 4th poly within TR",
      xc(DA_38) => "V1pitchID enclosure of first TG poly (or 3rd poly in TR) (fixed value)",
      xc(DA_41) => "OGD running section of TRDTOV1 must have special poly pattern exactly as illustrated in the next page",
      xc(DA_44) => "Dummy poly extension beyond poly space in TRDTOV1 around concave corner of V1pitchID",
      xc(DA_45) => "Dummy poly portion around concave corners of V1pitchID as defined by DA_44 must not have cuts and must not be used as transistor gate",
      xc(DA_46) => "Poly space region on next track min.separation (PGD direction) from TR convex corner",
      xc(DA_52) => "TRDTOV1 layer enclosure of bounding box surrounding all diffusion, Diffcon, and Polycon in TGULV region",
      xc(DA_53) => "Nwell extent OGD into TRDTOV1 layer beyond TGULV-poly line-side, only-allowed value",
      xc(DA_54) => "Nwell extension outside TRDTOV1, only value (PGD)",
      xc(DA_55) => "Nwell outside space to V1pitchID",
      xc(DA_56) => "Nwell inside V1pitchID and ouside cannot merge",
      xc(DA_70) => "Special width of TCN in OGD section of TR (fixed)",
      xc(DA_71) => "Min length of OGD TCN in TR",
      xc(DA_72) => "Min end-to-end space between TCN in OGD section of TR",
      xc(DA_73) => "TR OGD section enclosure of TCN side (measured in PGD) (fixed)",
      xc(DC_00) => "Only Rectangular Diffcon shape is allowed and only allowed with length in gate-direction.",
      xc(DC_01) => "Diffcon width, ONLY ALLOWED value",
      xc(DC_02) => "Min required Diffcon length",
      xc(DC_03) => "Diffcon end-to-end (ETE) space (min)",
      xc(DC_04) => "Diffcon side space to Poly, ONLY ALLOWED value ",
      xc(DC_05) => "Max allowed space between any pair of Diffcon and/or Polycon edges, in the smaller of either (OGD or PGD) direction",
      xc(DC_06) => "Max allowed space between any Diffcon edges, diffcon to analog/sram transition regions in the smaller of either direction",
      xc(DC_11) => "Transistor or tap diffusion enclosure of diffcon, max value",
      xc(DC_12) => "All Gate-SD edges require Adjacent Diffcon along the entire gate-SD edge.",
      xc(DC_15) => "Minimum Diffcon space to Diffusion, in PGD",
      xc(DC_20) => "All Diffcon line-ends must be on a 21nm grid across the whole die",
      xc(DC_21) => "Diffcon pitch, ONLY ALLOWED value",
      xc(DC_22) => "Isolated Diffcon (defined by DC_23 AND DC_24) min length",
      xc(DC_23) => "Minimum diffcon space (in OGD) on both sides of the isolated diffcon",
      xc(DC_24) => "Minimum diffcon space (in PGD) from at least one line-end of the isolated diffcon",
      xc(DC_30) => "Min overlap between adjacent line-ends in opposite directions",
      xc(DC_31) => "Min offset between adjacent non-overlapping line-ends in opposite directions",
      xc(DC_32) => "Min overlap between adjacent line-ends in opposite directions, when one of the lines is minimum length",
      xc(DC_33) => "Min overlap between adjacent line-ends in opposite directions, when at least one line-end touches a min ETE space (DC_03) and has length <= DC_34",
      xc(DC_34) => "Max Diffcon length (<=) for DC_33 check [and min length (>) for DC_36 check]",
      xc(DC_35) => "Min overlap between adjacent line-ends in opposite directions, with adjacent same direction offsets",
      xc(DC_36) => "Min overlap between adjacent line-ends in opposite directions, when at least one line-end touches a min ETE space (DC_03) and has length > DC_34",
      xc(DC_37) => "A line end cannot have 2 adjacent lines, one with a positive offset and the other with a negative offset forming a stair step with offset = DC_38",
      xc(DC_38) => "Offset value for DC_37 check",
      xc(DC_50) => "Minimum End-to-End space (DC_03) cannot be enclosed by adjacent-TCN overlaps < DC_52 on 3 or more corners (out of 4)",
      xc(DC_52) => "Overlap between adjacent line ends in the opposite direction that trigger the DC_50 check (<)",
      xc(DF_01) => "Min transistor diffusion/device width (PGD)",
      xc(DF_02) => "Diffusion width must be an integer multiple of DF_01",
      xc(DF_03) => "Min transistor diffusion length (OGD)",
      xc(DF_04) => "Diffusion PGD edges must be centered in poly",
      xc(DF_07) => "Maximum diffusion/device width (PGD), also applies to taps, diodes",
      xc(DF_09) => "Min Diffusion external corner-to-corner space",
      xc(DF_10) => "Minimum transistor diffusion segment lengths OGD",
      xc(DF_19) => "Min Diffusion internal corner-to-corner space",
      xc(DF_31) => "Minimum diffusion space, PGD",
      xc(DF_32) => "Diffusion space PGD must be an integer multiple of DF_31",
      xc(DF_34) => "Maximum allowed spacing between any diffusion edges (transistor or tap), in the smaller of either (OGD or PGD) direction",
      xc(DF_35) => "Transistor/Tap diffusion holes are NOT ALLOWED",
      xc(DF_43) => "Minimum diffusion space, OGD (applies to transistors and taps in all combinations)",
      xc(DF_51) => "Min Tap diffusion width OGD (Ntap or Ptap)",
      xc(DF_52) => "Min Tap diffusion length PGD (Ntap or Ptap)",
      xc(DF_56) => "Min Tap PGD/OGD edges must follow standard diffusion rules",
      xc(DF_80) => "Every diffusion must have a TCN",
      xc(DF_84) => "Min Tap to Transistor diffusion space PGD (within same well)",
      xc(DG_01) => "Diffusion check grid width: fixed value, PGD only",
      xc(DG_02) => "Diffusion check grid space: fixed value, PGD only",
      xc(DG_03) => "Minimum Diffusion check grid length, OGD only",
      xc(DG_04) => "Diffusion OGD edge must be centered in drawn Diffusion Check Grid width",
      xc(DG_05) => "Diffusion OGD edge must be centered in drawn Diffusion Check Grid space",
      xc(DI_01) => "Minimum total number of each type of DIC (i.e. nested DIC, isolated DIC) per die",
      xc(DI_02) => "Any two same-type DICs (i.e. any two nested DICs or any two isolated DICs) are not allowed to be placed with any edges (or edge portions) abutting each other.",
      xc(DI_03) => "Maximum distance in x- and y-directions between any two isolated DICs (i.e. isolated-to-isolated)",
      xc(DI_04) => "Maximum distance from the perimeter of all isolated DICs to the Die Edge",
      xc(DI_06) => "Maximum distance in x- and y-directions between any two nested DICs (i.e. nested-to-nested)",
      xc(DI_07) => "Maximum distance from the perimeter of all nested DICs to the Die Edge",
      xc(DN_01) => "Deep n-well width (min)",
      xc(DN_02) => "Deep n-well space (min) ",
      xc(DN_03) => "Deep n-well overlap of N-well (min) ",
      xc(DN_04) => "Min extension of N-well beyond Deep n-well ",
      xc(DN_05) => "Min Deep n-well space to N-well outside ",
      xc(DN_07) => "Deep n-well enclosure of p-gates (min)",
      xc(DN_08) => "Deep n-well space to p-gates outside the Deep n-well (min)",
      xc(DN_09) => "Deep n-well space to BJTID, CAPID or wellResID (min)",
      xc(DN_10) => "The isolated Pwell inside the Deep n-well must have a Pwell tap (ptap) ",
      xc(DN_11) => "Max distance from N+ active diff inside Deep n-well to a ptap connected to Vss ",
      xc(DN_12) => "Max distance from N+ active diff (inside Deep n-well) to ntap in N-well (connected to Deep n-well) connected to Vcc* ",
      xc(DN_13) => "Min Deep n-well space to diffusions outside (active or tap) ",
      xc(DS_00) => "No layouts are allowed to use the SRAMPOLYID except pre-approved bit cell names and pre-approved device template cell names.  ",
      xc(DS_01) => "No Diffusion or Polycon (GCN) are allowed in the Transition Ring between Digital and SRAM regions. (1/2 poly wide diffusion slivers at inner/outer edges of TR are an exception)",
      xc(DS_02) => "Transition regions (TRDTOS) cannot overlap (can abut PGD)",
      xc(DS_03) => "Any transition regions to transition region space OGD",
      xc(DS_04) => "Minimum PGD facing-edge spacing between SRAMPOLYID layers",
      xc(DS_05) => "TRDTOS PGD edge space to Poly check grid outside (fixed value)",
      xc(DS_09) => "Only allowed poly widths in the Transition Ring between Digital and SRAM regions are Digtial or SRAM poly widths.",
      xc(DS_11) => "PGD width of TRDTOS ring (OGD running section) (fixed)",
      xc(DS_12) => "OGD width of TRDTOS ring (PGD running section) (fixed)",
      xc(DS_171) => "Diffcons are allowed in PGD section and OGD section of TR (but not in the corner section)",
      xc(DS_172) => "Diffcon in the PGD section of TR must follow all standard diffcon rules except the following rules (DS_174-176)",
      xc(DS_173) => "Min space of TCN in OGD section of TR to the corner section",
      xc(DS_174) => "Min TCN space (in PGD) to the corner section of TR",
      xc(DS_175) => "Diffcon ends in PGD section of TR must be all aligned to each other across the whole width of TR",
      xc(DS_176) => "Diffcons in PGD section of TR must be placed in the middle of poly space",
      xc(DS_24) => "SRAMPOLYID to SRAMPOLYID space",
      xc(DS_25) => "Minimum SRAMPOLYID area (um sq)",
      xc(DS_31) => "Poly fixed layout comparison for Digital-to-SRAM Transition Ring",
      xc(DS_32) => "Poly space region min.separation (PGD direction) from TR OGD edge",
      xc(DS_33) => "Both digital and SRAM poly ends must flush with OGD edge of TRDTOS except two digital dummy polys at the edge of TR",
      xc(DS_35) => "TRDTOS OGD enclosure of first dummy poly line (fixed value)",
      xc(DS_361) => "Fixed width of first 3 poly within TR",
      xc(DS_362) => "Fixed width of 4th poly within TR",
      xc(DS_371) => "Fixed space between 1st and 2nd poly within TR",
      xc(DS_372) => "Fixed space between 2nd and 3rd poly within TR",
      xc(DS_373) => "Fixed space between 3rd and 4th poly within TR",
      xc(DS_38) => "SRAMPOLYID enclosure of first SRAM poly (or 4th poly in TR) (fixed value)",
      xc(DS_41) => "OGD running section of TRDTOS must have special poly pattern exactly as illustrated",
      xc(DS_50) => "TRDTOS enclosure of 1st two digital polys in TR PGD (fixed value)",
      xc(DS_52) => "TRDTOS layer enclosure of bounding box surrounding all diffusion, Diffcon, and Polycon in SRAM region",
      xc(DS_540) => "TRDTOS enclosure of 1st digital diffcheck (PGD)",
      xc(DS_541) => "Width of digital diffcheck (fixed value)",
      xc(DS_542) => "Digital diffcheck to digital diffcheck space PGD (fixed value)",
      xc(DS_543) => "Digital diffcheck to bitcell diffcheck space OGD (fixed value)",
      xc(DS_544) => "Digital diffcheck to bitcell diffcheck space PGD fixed value",
      xc(DS_60) => "min SRAMPOLYID space to logic diffusion (OGD)",
      xc(DS_601) => "TRDTOULP enclosure of SRAM2 pgd edge",
      xc(DS_602) => "ULP sram Transtion cell overlap of SRAMID2 in pdg direction",
      xc(DS_61) => "min SRAMPOLYID enclosure of bitcell diffusion (OGD)",
      xc(DS_62) => "min SRAMPOLYID space to logic diffcheck (OGD)",
      xc(DS_63) => "min SRAMPOLYID enclosure of bitcell diffcheck (OGD)",
      xc(DS_64) => "min SRAMPOLYID space to logic diffusion (PGD)",
      xc(DS_645) => "ULC SRAM diffcheck PGD spacing (fixed value)",
      xc(DS_65) => "min SRAMPOLYID enclosure of bitcell diffusion (PGD)",
      xc(DS_66) => "min SRAMPOLYID space to logic diffcheck (PGD)",
      xc(DS_660) => "min SRAMID2space to logic diffusion (OGD)",
      xc(DS_661) => "min SRAMID2 enclosure of bitcell diffusion (OGD)",
      xc(DS_662) => "min SRAMID2 space to logic diffcheck (OGD)",
      xc(DS_663) => "bitcell diffcheck extension over SRAMID2 (OGD, fixed value)",
      xc(DS_664) => "min SRAMID2 space to logic diffusion (PGD)",
      xc(DS_665) => "min SRAMID2 enclosure of bitcell diffusion (PGD)",
      xc(DS_666) => "min SRAMID2 space to logic diffcheck (PGD)",
      xc(DS_667) => "min SRAMID2 enclosure of bitcell diffcheck (PGD)",
      xc(DS_67) => "min SRAMPOLYID enclosure of bitcell diffcheck (PGD)",
      xc(DS_68) => "There should be no bitcell diffcheck edge between the last(?) bitcell diffusion OGD edge and SRAMPOLYID",
      xc(DS_70) => "Special width of TCN in OGD section of TR (fixed)",
      xc(DS_71) => "Min length of OGD TCN in TR",
      xc(DS_72) => "Min end-to-end space between TCN in OGD section of TR",
      xc(DS_73) => "TR OGD section enclosure of TCN side (measured in PGD) (fixed)",
      xc(DS_75) => "OGD edge of SRAMTAPID should be line on line w SRAMPOLYID ",
      xc(DS_76) => "SRAMTAPID should be fully enclosed by SRAMPOLYID",
      xc(DS_77) => "SRAM tap must be enclosed by SRAMTAPID ",
      xc(DS_78) => "Min SRAMTAPID space to bitcell diffusions",
      xc(DS_79) => "SRAM tap diffusion space to bitcell diffusion",
      xc(DS_80) => "min SRAM diffusion hole length (PGD) post DS_81 merge",
      xc(DS_81) => "SRAM diffusions <= DS_81 PGD space, with no diffcheck edge in between are merged before the DS_80 check",
      xc(DS_82) => "fixed SRAM diffusion hole width (OGD) post DS_81 merge ",
      xc(DT_01) => "No Diffusion or Polycon (GCN) are allowed in the Transition Ring between Digital and TG regions. (1/2 poly wide diffusion slivers at inner/outer edges of TR are an exception)",
      xc(DT_02) => "Transition regions (TRDTOV3) cannot overlap (can abut PGD)",
      xc(DT_03) => "Any transition regions to transition region space OGD (min)",
      xc(DT_04) => "Minimum PGD facing-edge spacing between TGPOLYID layers",
      xc(DT_05) => "TRDTOV3 PGD edge space to Polycheck grid outside (fixed value)",
      xc(DT_06) => "Number of TG poly lines (not including lines inside TR regions) must be an integer multiple of 4",
      xc(DT_11) => "PGD width of TRDTOV3 ring (OGD running section) (fixed)",
      xc(DT_12) => "OGD width of TRDTOV3 ring (PGD running section) (fixed)",
      xc(DT_171) => "Diffcons are allowed in PGD section and OGD section of TR (but not in the corner section)",
      xc(DT_172) => "Diffcon in the PGD section of TR must follow all standard diffcon rules except the following rules (DT_174-176)",
      xc(DT_173) => "Min space of TCN in OGD section of TR to the corner section",
      xc(DT_174) => "Min TCN space (in PGD) to the corner section of TR",
      xc(DT_175) => "Diffcon ends in PGD section of TR must be all aligned to each other across the whole width of TR",
      xc(DT_176) => "Diffcons in PGD section of TR must be placed in the middle of poly space",
      xc(DT_22) => "Minimum space between concave corners of V3pitchID",
      xc(DT_24) => "Minimum OGD width of V3pitchID",
      xc(DT_25) => "Minimum V3pitchID PGD segment length",
      xc(DT_26) => "Minimum V3pitchID hole size (all direction)",
      xc(DT_27) => "Minimum V3pitchID hole area (um^2)",
      xc(DT_30) => "Minimum V3pitchID space (between connected V3pitchID region)",
      xc(DT_31) => "Poly layout in the Digital-to-TG Transition Ring must match a fixed poly layout pattern template comparison check",
      xc(DT_32) => "Poly space region min.separation (PGD direction) from TR OGD edge",
      xc(DT_33) => "Both digital and TG poly ends must flush with OGD edge of TRDTOV3 except three digital dummy polys at the edge of TR",
      xc(DT_35) => "TRDTOV3 OGD enclosure of first dummy poly line (fixed value)",
      xc(DT_361) => "Fixed width of first 3 poly within TR",
      xc(DT_362) => "Fixed width of 4th poly within TR",
      xc(DT_363) => "Fixed width of 5th poly within TR",
      xc(DT_364) => "Fixed width of 6th poly within TR (this poly is under V3pitchID)",
      xc(DT_371) => "Fixed space between 1st and 2nd poly within TR",
      xc(DT_372) => "Fixed space between 2nd and 3rd poly within TR",
      xc(DT_373) => "Fixed space between 3rd and 4th poly within TR",
      xc(DT_374) => "Fixed space between 4th and 5th poly within TR",
      xc(DT_375) => "Fixed space between 5th and 6th poly within TR",
      xc(DT_38) => "V3pitchID enclosure of first TG poly (or 6th poly in TR) (fixed value)",
      xc(DT_41) => "OGD running section of TRDTOV3 must have special poly pattern exactly as illustrated in the next page",
      xc(DT_44) => "Dummy poly extension beyond poly space in TRDTOV3 around concave corner of V3pitchID",
      xc(DT_45) => "Dummy poly portion around concave corners of V3pitchID as defined by DT_44 must not have cuts and must not be used as transistor gate",
      xc(DT_52) => "TRDTOV3 layer enclosure of bounding box surrounding all diffusion, Diffcon, and Polycon in TG region",
      xc(DT_53) => "Nwell extent OGD into TRDTOV3 layer beyond first TG-poly line-side, only-allowed value",
      xc(DT_54) => "Nwell extension outside TRDTOV3, only value (PGD)",
      xc(DT_55) => "Nwell outside space to V3pitchID",
      xc(DT_56) => "Nwell inside V3pitchID and ouside cannot merge",
      xc(DT_70) => "Special width of TCN in OGD section of TR (fixed)",
      xc(DT_71) => "Min length of OGD TCN in TR",
      xc(DT_72) => "Min end-to-end space between TCN in OGD section of TR",
      xc(DT_73) => "TR OGD section enclosure of TCN side (measured in PGD) (fixed)",
      xc(DX_01) => "No Diffusion or Polycon (GCN) are allowed in the Transition Ring between Digital and ULP regions. (1/2 poly wide diffusion slivers at inner/outer edges of TR are an exception)",
      xc(DX_02) => "Transition regions (TRDTOULP) cannot overlap (can abut PGD)",
      xc(DX_03) => "Any transition regions to transition region space OGD (min)",
      xc(DX_04) => "Minimum PGD facing-edge spacing between ULPpitchID layers",
      xc(DX_05) => "TRDTOULP PGD edge space to Polycheck grid outside (fixed value)",
      xc(DX_06) => "Number of ULP poly lines (tracks) inside a ULPpitchID (including ones under TRDTOULP) must be 17+10*n (n=0,1,2, . . .)",
      xc(DX_11) => "PGD width of TRDTOULP ring (OGD running section) (fixed)",
      xc(DX_12) => "OGD width of TRDTOULP ring (PGD running section) (fixed)",
      xc(DX_171) => "Diffcons are allowed in PGD section and OGD section of TR (but not in the corner section)",
      xc(DX_172) => "Diffcon in the PGD section of TR must follow all standard diffcon rules except the following rules (DX_174-176)",
      xc(DX_173) => "Min space of TCN in OGD section of TR to the corner section",
      xc(DX_174) => "Min TCN space (in PGD) to the corner section of TR",
      xc(DX_175) => "Diffcon ends in PGD section of TR must be all aligned to each other across the whole width of TR",
      xc(DX_176) => "Diffcons in PGD section of TR must be placed in the middle of poly space",
      xc(DX_177) => "Diffcons are not allowed in poly spaces < 0.042um in TRDTOULP",
      xc(DX_22) => "Minimum space between concave corners of ULPpitchID",
      xc(DX_24) => "Minimum width of ULPpitchID",
      xc(DX_25) => "Minimum ULPpitchID segment length",
      xc(DX_26) => "Minimum ULPpitchID hole size (all direction)",
      xc(DX_27) => "Minimum ULPpitchID hole area (um^2)",
      xc(DX_30) => "Minimum ULPpitchID space (between connected ULPpitchID region)",
      xc(DX_31) => "Poly layout in the Digital-to-ULP Transition Ring must match a fixed poly layout pattern template comparison check",
      xc(DX_32) => "Poly space region min.separation (PGD direction) from TR OGD edge",
      xc(DX_33) => "Both digital and ULP poly ends must flush with OGD edge of TRDTOULP except three digital dummy polys at the edge of TR",
      xc(DX_35) => "TRDTOULP OGD enclosure of first dummy poly line (fixed value)",
      xc(DX_361) => "Fixed width of first 3 poly within TR",
      xc(DX_362) => "Fixed width of 4th/5th/6th/7th poly within TR",
      xc(DX_363) => "Fixed width of 8th poly within TR",
      xc(DX_364) => "Fixed width of 9th-12th poly lines (under ULP pitchID in TR)",
      xc(DX_371) => "Fixed space between polys throuth 1st to 4th poly within TR",
      xc(DX_372) => "Fixed space between 4th and 5th poly within TR",
      xc(DX_373) => "Fixed space between 5th and 6th poly within TR",
      xc(DX_374) => "Fixed space between 6th and 7th poly within TR",
      xc(DX_375) => "Fixed space between 7th and 8th poly within TR",
      xc(DX_376) => "Fixed space between polys through 8th to 12th within TR",
      xc(DX_38) => "ULPpitchID enclosure of first ULP poly (or 9th poly in TR) (fixed value)",
      xc(DX_41) => "OGD running section of TRDTOV1 must have special poly pattern exactly as illustrated in the next page",
      xc(DX_44) => "Dummy poly extension beyond poly space in TRDTOULP around concave corner of ULPpitchID",
      xc(DX_45) => "Dummy poly portion around concave corners of ULPpitchID as defined by DX_44 must not have cuts and must not be used as transistor gate",
      xc(DX_52) => "TRDTOULP layer enclosure of bounding box surrounding all diffusion, Diffcon, and Polycon in ULP region",
      xc(DX_53) => "Nwell extent OGD into TRDTOULP layer beyond ULP-poly line-side, only-allowed value",
      xc(DX_54) => "Nwell extension outside TRDTOULP, only value (PGD)",
      xc(DX_55) => "Nwell outside space to ULPpitchID",
      xc(DX_56) => "Nwell inside ULPpitchID and ouside cannot merge",
      xc(DX_70) => "Special width of TCN in OGD section of TR (fixed)",
      xc(DX_71) => "Min length of OGD TCN in TR",
      xc(DX_72) => "Min end-to-end space between TCN in OGD section of TR",
      xc(DX_73) => "TR OGD section enclosure of TCN side (measured in PGD) (fixed)",
      xc(EA_01) => "Edge-of-Active (EOA) PGD length must be a whole multiple of EA_01",
      xc(EA_02) => "Edge-of-Active (EOA) OGD length must be a whole multiple of EA_02",
      xc(EA_39) => "TM1 space to EOA boundary, PGD (min)",
      xc(EA_40) => "TM1 space to EOA boundary, maximum space",
      xc(EA_44) => "TM1 space to EOA boundary, OGD (min)",
      xc(EA_45) => "CE1/2 space to EOA boundary OGD (min)",
      xc(EA_46) => "CE1/2 space to EOA boundary PGD (min)",
      xc(EA_91) => "At full chip DRC, the EOA and EtchRing must both exist, and they must abut together line-on-line (i.e. with no gaps and no overlaps).",
      xc(EA_92) => "The EOA + EtchRing must be line-on-line covered by the Boundary layer (50;0).",
      xc(EDM_01) => "EOA layer must be present at top level Cell",
      xc(EDM_02) => "Area that is 1.512um from the OGD EOA and 1.68um from the PGD EOA is occupied by EDM cells",
      xc(EDM_03) => "Maximum number of Fill cells per PGD die edge",
      xc(EDM_04) => "Maximum number of Fill cells per OGD die edge",
      xc(EDM_05) => "Maximum number of PGD fill cell that can be placed consecutively",
      xc(EDM_06) => "Maximum number of OGD fill cell that can be placed consecutively",
      xc(EDM_07) => "Maximum number of PGD diode staircase cell that can be placed consecutively",
      xc(EDM_08) => "Maximum number of OGD diode staircase cell that can be placed consecutively",
      xc(EDM_09) => "Every fifth staircase cell must be a diode staircase cell",
      xc(EDM_10) => "Min distance of I/O cell location away from die corner",
      xc(EDM_11) => "Number of I/O cell placement allowed (either on a OGD or PGD die edge)",
      xc(EDM_12) => "Corner cells can only reside in die corners",
      xc(EDM_13) => "EDM cells cannot overlap each other",
      xc(EDM_14) => "EDM cells dimension not drawn according to spec",
      xc(EDW_01) => "Corner Cell x",
      xc(EDW_02) => "Corner Cell y",
      xc(EDW_03) => "OGD Fill Cell x",
      xc(EDW_04) => "OGD Fill Cell y",
      xc(EDW_05) => "PGD Fill Cell x",
      xc(EDW_06) => "PGD Fill Cell y",
      xc(EDW_07) => "OGD IO Cell x",
      xc(EDW_08) => "OGD IO Cell y",
      xc(EDW_09) => "PGD IO Cell x",
      xc(EDW_10) => "PGD IO Cell y",
      xc(EDW_11) => "PGD STAIRCASSE DIODE Cell x",
      xc(EDW_12) => "PGD STAIRCASSE DIODE Cell y",
      xc(EDW_13) => "OGD STAIRCASSE DIODE Cell x",
      xc(EDW_14) => "OGD STAIRCASSE DIODE Cell y",
      xc(EDW_15) => "PGD STAIRCASSE Cell x",
      xc(EDW_16) => "PGD STAIRCASSE Cell y",
      xc(EDW_17) => "OGD STAIRCASSE Cell x",
      xc(EDW_18) => "OGD STAIRCASSE Cell y",
      xc(EHV_01) => "Polycon space to Diffcon (min)",
      xc(EHV_02) => "VCN space to Diffcon (PGD), min",
      xc(EHV_04) => "VCN space to polycon (PGD), min",
      xc(EHV_06) => "VCN-Via0 space (min)",
      xc(EHV_07) => "Via0-Via1 space (min)",
      xc(EHV_09) => "Via1-Via1 space (min)",
      xc(EHV_11) => "Via1-Via2 space (min)",
      xc(EHV_12) => "Via2-Metal2 space (min)",
      xc(EHV_13) => "Via2-Via2 space (min)",
      xc(EHV_15) => "Via2-Via3 space (min)",
      xc(EHV_16) => "Via3-Metal3 space (min)",
      xc(EHV_18) => "Via3-Via3 space (min)",
      xc(EHV_19) => "Via4-Via4 space (min)",
      xc(EHV_20) => "Via4-Via5 space (min)",
      xc(EHV_21) => "Via5-Metal5 space (min)",
      xc(EHV_23) => "Via3-Via4 space (min)",
      xc(EHV_24) => "Via4-Metal4 space (min)",
      xc(EHV_25) => "Via5-Via6 space (min)",
      xc(EHV_26) => "Via6-Via7 space (min)",
      xc(EHV_27) => "Via6-Metal6 space (min)",
      xc(EHV_34) => "Metal4-Metal4 space (min)",
      xc(EHV_36) => "Metal6-Metal6 space (min)",
      xc(ENW_14) => "N-well space (min)",
      xc(ENW_21) => "N+ active diffusion space to extra high voltage nwells (min)",
      xc(ENW_22) => "P+ active diffusion enclosure by extra high voltage nwell (min)",
      xc(ER_01) => "ESD N-well resistor width (min)",
      xc(ER_03) => "ESD N-well resistor space to ESD N-well or regular N-well (min)",
      xc(ER_04) => "ESD N-well enclosure of N+ diffusion inside",
      xc(ER_05) => "ESD N-well resistor space to N+ diffusion outside",
      xc(ER_06) => "ESD N-well resistor space to P+ diffusion outside",
      xc(ER_07) => "ESD N-well resistor space to N+ diffusion outside, when that N+ diffusion is electrically strapped to the ESD N-well layer through Metal0, Metal1, or Metal2",
      xc(ER_08) => "ESD N-well resistor space to Floating diffusion ouside (Floating diffusion has no ViaCon electrically connected to the diffusion) ",
      xc(ER_09) => "Poly-blocked ESD resistor length, ONLY ALLOWED value",
      xc(ER_12) => "Min blocked poly resistor width",
      xc(FM_01) => "Maximum area of floating MT0 with zero facing edge component  (sq um)",
      xc(FM_02) => "Max length of floating MT0 edge facing a Vss MT0 edge within 2Xmin spacing",
      xc(FM_03) => "Maximum area of floating MT0 with non-zero facing edge component  (sq um)",
      xc(FM_101) => "Maximum area of floating MT10 with zero facing edge component  (sq um)",
      xc(FM_102) => "Max length of floating MT10 edge facing a Vss MT10 edge within 2Xmin spacing",
      xc(FM_103) => "Maximum area of floating MT10 with non-zero facing edge component  (sq um)",
      xc(FM_11) => "Maximum area of floating MT1 with zero facing edge component  (sq um)",
      xc(FM_111) => "Maximum area of floating MT11 with zero facing edge component  (sq um)",
      xc(FM_112) => "Max length of floating MT11 edge facing a Vss MT11 edge within 2Xmin spacing",
      xc(FM_113) => "Maximum area of floating MT11 with non-zero facing edge component  (sq um)",
      xc(FM_12) => "Max length of floating MT1 edge facing a Vss MT1 edge within 2Xmin spacing",
      xc(FM_121) => "Maximum area of floating MT12 with zero facing edge component  (sq um)",
      xc(FM_122) => "Max length of floating MT12 edge facing a Vss MT12 edge within 2Xmin spacing",
      xc(FM_123) => "Maximum area of floating MT12 with non-zero facing edge component  (sq um)",
      xc(FM_13) => "Maximum area of floating MT1 with non-zero facing edge component  (sq um)",
      xc(FM_21) => "Maximum area of floating MT2 with zero facing edge component  (sq um)",
      xc(FM_22) => "Max length of floating MT2 edge facing a Vss MT2 edge within 2Xmin spacing",
      xc(FM_23) => "Maximum area of floating MT2 with non-zero facing edge component  (sq um)",
      xc(FM_291) => "Maximum floating metal area for MT4  MT0 network  (sq um)",
      xc(FM_292) => "Maximum floating metal area for MT5  MT0 network  (sq um)",
      xc(FM_293) => "Maximum floating metal area for MT6  MT0 network  (sq um)",
      xc(FM_294) => "Maximum floating metal area for MT7  MT0 network  (sq um)",
      xc(FM_295) => "Maximum floating metal area for MT8  MT0 network  (sq um)",
      xc(FM_296) => "Maximum floating metal area for MT9  MT0 network  (sq um)",
      xc(FM_297) => "Maximum floating metal area for MT10  MT0 network  (sq um)",
      xc(FM_298) => "Maximum floating metal area for MT11  MT0 network  (sq um)",
      xc(FM_299) => "Maximum floating metal area for MT12  MT0 network  (sq um)",
      xc(FM_31) => "Maximum area of floating MT3 with zero facing edge component  (sq um)",
      xc(FM_32) => "Max length of floating MT3 edge facing a Vss MT3 edge within 2Xmin spacing",
      xc(FM_33) => "Maximum area of floating MT3 with non-zero facing edge component  (sq um)",
      xc(FM_41) => "Maximum area of floating MT4 with zero facing edge component  (sq um)",
      xc(FM_42) => "Max length of floating MT4 edge facing a Vss MT4 edge within 2Xmin spacing",
      xc(FM_43) => "Maximum area of floating MT4 with non-zero facing edge component  (sq um)",
      xc(FM_51) => "Maximum area of floating MT5 with zero facing edge component  (sq um)",
      xc(FM_52) => "Max length of floating MT5 edge facing a Vss MT5 edge within 2Xmin spacing",
      xc(FM_53) => "Maximum area of floating MT5 with non-zero facing edge component  (sq um)",
      xc(FM_61) => "Maximum area of floating MT6 with zero facing edge component  (sq um)",
      xc(FM_62) => "Max length of floating MT6 edge facing a Vss MT6 edge within 2Xmin spacing",
      xc(FM_63) => "Maximum area of floating MT6 with non-zero facing edge component  (sq um)",
      xc(FM_71) => "Maximum area of floating MT7 with zero facing edge component  (sq um)",
      xc(FM_72) => "Max length of floating M7 edge facing a Vss MT7 edge within 2Xmin spacing",
      xc(FM_73) => "Maximum area of floating MT7 with non-zero facing edge component  (sq um)",
      xc(FM_81) => "Maximum area of floating MT8 with zero facing edge component  (sq um)",
      xc(FM_82) => "Max length of floating MT8 edge facing a Vss MT8 edge within 2Xmin spacing",
      xc(FM_83) => "Maximum area of floating MT8 with non-zero facing edge component  (sq um)",
      xc(FM_91) => "Maximum area of floating MT9 with zero facing edge component  (sq um)",
      xc(FM_92) => "Max length of floating MT9 edge facing a Vss MT9 edge within 2Xmin spacing",
      xc(FM_93) => "Maximum area of floating MT9 with non-zero facing edge component  (sq um)",
      xc(FM_B1) => "Floating bumps are not allowed",
      xc(FM_T1) => "Maximum length of floating TM1",
      xc(GD_01) => "Minimum Global Exposed P-diffusion density (%)",
      xc(GD_02) => "Minimum Global Exposed N-diffusion density (%)",
      xc(GD_100) => "Minimum Global Metal 0 Layer density (%)",
      xc(GD_101) => "Minimum Global Metal 1 Layer density (%)",
      xc(GD_102) => "Minimum Global Metal 2 Layer density (%)",
      xc(GD_103) => "Minimum Global Metal 3 Layer density (%)",
      xc(GD_104) => "Minimum Global Metal 4 Layer density (%)",
      xc(GD_105) => "Minimum Global Metal 5 Layer density (%)",
      xc(GD_106) => "Minimum Global Metal 6 Layer density (%)",
      xc(GD_107) => "Minimum Global Metal 7 Layer density (%)",
      xc(GD_108) => "Minimum Global Metal 8 Layer density (%)",
      xc(GD_109) => "Minimum Global Metal 9 Layer density (%)",
      xc(GD_110) => "Minimum Global Metal 10 Layer density (%)",
      xc(GD_111) => "Minimum Global Metal 11 Layer density (%)",
      xc(GD_112) => "Minimum Global Metal 12 Layer density (%)",
      xc(GD_120) => "Minimum Global TM1 Layer density (%)",
      xc(GD_121) => "Minimum Global CE1 Layer density (%)",
      xc(GD_122) => "Minimum Global CE2 Layer density (%)",
      xc(GD_123) => "Minimum Global CE3 Layer density (%)",
      xc(GD_200) => "Max Global Metal 0 layer density (%)",
      xc(GD_201) => "Max Global Metal 1 layer density (%)",
      xc(GD_202) => "Max Global Metal 2 layer density (%)",
      xc(GD_203) => "Max Global Metal 3 layer density (%)",
      xc(GD_204) => "Max Global Metal 4 layer density (%)",
      xc(GD_205) => "Max Global Metal 5 layer density (%)",
      xc(GD_206) => "Max Global Metal 6 layer density (%)",
      xc(GD_207) => "Max Global Metal 7 layer density (%)",
      xc(GD_208) => "Max Global Metal 8 layer density (%)",
      xc(GD_209) => "Max Global Metal 9 layer density (%)",
      xc(GD_21) => "Maximum Global Exposed P-diffusion density (%)",
      xc(GD_210) => "Max Global Metal 10 layer density (%)",
      xc(GD_211) => "Max Global Metal 11 layer density (%)",
      xc(GD_212) => "Max Global Metal 12 layer density (%)",
      xc(GD_22) => "Maximum Global Exposed N-diffusion density (%)",
      xc(GD_51) => "Min Global RDL density (%)",
      xc(GD_52) => "Max Global RDL density (%)",
      xc(GR_01) => "Min required TCN density (%), within a 3.92um x 3.92um window size",
      xc(GR_02) => "Max allowed TCN density (%), within a 3.92um x 3.92um window size",
      xc(GR_03) => "Min required TCN+GCN density (%), within a 3.92um x 3.92um window size",
      xc(GR_04) => "Max allowed TCN+GCN density (%), within a 3.92um x 3.92um window size",
      xc(GR_05) => "Oversize of GCN resistor cell boundary to form check regions for GR_01/02/03/04",
      xc(HNW_14) => "N-well space (min)",
      xc(HNW_21) => "N+ active diffusion space to high voltage nwells (min)",
      xc(HNW_22) => "P+ active diffusion enclosure by high voltage nwell (min)",
      xc(HV_01) => "Polycon space to Diffcon (min)",
      xc(HV_02) => "VCN space to Diffcon (PGD), min",
      xc(HV_04) => "VCN space to polycon (PGD), min",
      xc(HV_09) => "Via1-Via1 space (min)",
      xc(HV_11) => "Via1-Via2 space (min)",
      xc(HV_12) => "Via2-Metal2 space (min)",
      xc(HV_13) => "Via2-Via2 space (min)",
      xc(HV_16) => "Via3-Metal3 space (min)",
      xc(HV_18) => "Via3-Via3 space (min)",
      xc(HV_19) => "Via4-Via4 space (min)",
      xc(HV_20) => "Via4-Via5 space (min)",
      xc(HV_22) => "Via2-Via3 space (min)",
      xc(HV_23) => "Via3-Via4 space (min)",
      xc(HV_24) => "Via4-Metal4 space (min)",
      xc(HV_25) => "Via5-Via6 space (min)",
      xc(HV_26) => "Via6-Via7 space (min)",
      xc(HV_27) => "Via6-Metal6 space (min)",
      xc(HV_34) => "Metal4-Metal4 space (min)",
      xc(HV_36) => "Metal6-Metal6 space (min)",
      xc(HV_90) => "Gates with NACID or GATED_NACID cannot be connected to HV or EHV or UHV nets",
      xc(IPB_00) => "Max ratio of Metal area to Total PMOS gate edge  (um^2 /um)",
      xc(IPB_01) => "Limit Ratio of Metal area (on the PMOS source) to N-discharge-transistor Ze  (um^2 /um)",
      xc(IPDW_111) => "Limit Ratio of Metal area (on the PMOS source) to N-discharge-transistor Ze  (um^2 /um) in isolated pwell",
      xc(IPDW_191) => "Limit Ratio of Metal or GCN+TCN area to logic/SRAM N-transistor Drain Ze (um^2 /um) no sub-tap",
      xc(IPDW_193) => "Limit Ratio of TM1 area to logic/SRAM N-transistor Drain Ze (um^2 /um) no sub-tap",
      xc(IPDW_201) => "Limit Ratio of Metal or GCN+TCNarea to nom N-transistor Ze   (um^2 /um)",
      xc(IPDW_391) => "Limit Ratio of Metal area to TG N-transistor Drain Ze (um^2 /um) no sub-tap",
      xc(IPDW_395) => "Limit Ratio of Metal area to n-transistor (TG-gNAC) Ze, for TG n-transistor protection  (um)",
      xc(IPDW_611) => "Limit Ratio of Metal area (on the PMOS source) to TG N-discharge-transistor Ze  (um^2 /um) in isolated pwell",
      xc(IPD_00) => "GCN+TCN (Polycon+Diffcon)",
      xc(IPD_01) => "Metal-0",
      xc(IPD_02) => "Metal-1",
      xc(IPD_03) => "Metal-2",
      xc(IPD_04) => "Metal-3",
      xc(IPD_05) => "Metal-4",
      xc(IPD_06) => "Metal-5",
      xc(IPD_07) => "Metal-6",
      xc(IPD_08) => "Metal-7",
      xc(IPD_09) => "Metal-8",
      xc(IPD_10) => "Metal-9",
      xc(IPD_100) => "GCN+TCN (Polycon+Diffcon)",
      xc(IPD_101) => "Metal-0",
      xc(IPD_102) => "Metal-1",
      xc(IPD_103) => "Metal-2",
      xc(IPD_104) => "Metal-3",
      xc(IPD_105) => "Metal-4",
      xc(IPD_106) => "Metal-5",
      xc(IPD_107) => "Metal-6",
      xc(IPD_108) => "Metal-7",
      xc(IPD_109) => "Metal-8",
      xc(IPD_11) => "Metal-10",
      xc(IPD_110) => "Metal-9",
      xc(IPD_111) => "Metal-10",
      xc(IPD_112) => "Metal-11",
      xc(IPD_113) => "TM1",
      xc(IPD_114) => "Metal-12",
      xc(IPD_12) => "Metal-11",
      xc(IPD_13) => "TM1",
      xc(IPD_14) => "Metal-12",
      xc(IPD_200) => "ViaCN",
      xc(IPD_201) => "Via0",
      xc(IPD_202) => "Via1 ",
      xc(IPD_203) => "Via2 ",
      xc(IPD_204) => "Via3 ",
      xc(IPD_205) => "Via4",
      xc(IPD_206) => "Via5",
      xc(IPD_207) => "Via6",
      xc(IPD_208) => "Via7",
      xc(IPD_209) => "Via8",
      xc(IPD_210) => "Via9",
      xc(IPD_211) => "Via10",
      xc(IPD_212) => "Via11",
      xc(IPD_213) => "Via12",
      xc(IPD_300) => "ViaCN",
      xc(IPD_301) => "Via0",
      xc(IPD_302) => "Via1 ",
      xc(IPD_303) => "Via2 ",
      xc(IPD_304) => "Via3 ",
      xc(IPD_305) => "Via4",
      xc(IPD_306) => "Via5",
      xc(IPD_307) => "Via6",
      xc(IPD_308) => "Via7",
      xc(IPD_309) => "Via8",
      xc(IPD_310) => "Via9",
      xc(IPD_311) => "Via10",
      xc(IPD_312) => "Via11",
      xc(IPD_313) => "Via12",
      xc(IPD_405) => "Via4 (vcc nodes)",
      xc(IPD_406) => "Via5 (vcc nodes)",
      xc(IPD_407) => "Via6 (vcc nodes)",
      xc(IPD_408) => "Via7 (vcc nodes)",
      xc(IPD_409) => "Via8 (vcc nodes)",
      xc(IPD_410) => "Via9 (vcc nodes)",
      xc(IPD_411) => "Via10 (vcc nodes)",
      xc(IPD_412) => "Via11 (vcc nodes)",
      xc(IPD_413) => "Via12 (vcc nodes)",
      xc(IPD_505) => "Via4 (vcc nodes)",
      xc(IPD_506) => "Via5 (vcc nodes)",
      xc(IPD_507) => "Via6 (vcc nodes)",
      xc(IPD_508) => "Via7 (vcc nodes)",
      xc(IPD_509) => "Via8 (vcc nodes)",
      xc(IPD_510) => "Via9 (vcc nodes)",
      xc(IPD_511) => "Via10 (vcc nodes)",
      xc(IPD_512) => "Via11 (vcc nodes)",
      xc(IPD_513) => "Via12 (vcc nodes)",
      xc(IPD_600) => "Limit Ratio of Metal or GCN+TCN area to N-transistor Drain Ze (um^2 /um) no sub-tap",
      xc(IPD_601) => "Limit Ratio of TM1 area to N-transistor Drain Ze (um^2 /um) no sub-tap",
      xc(IPD_602) => "Limit Ratio of TV1 area to logic/SRAM N-transistor Drain Ze (um^2 /um) no sub-tap",
      xc(IPD_610) => "Limit ratio of Metal or GCN+TCN area connected to nwell to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge without sub-tap",
      xc(IPD_611) => "Limit ratio of TM1 area connected to nwell to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge without sub-tap",
      xc(IPD_612) => "Limit ratio of TV1 area connected to nwell  to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge without sub-tap",
      xc(IPGTM1_05) => "Limit Ratio of TM1 area to nwell area  (um^2 /um^2).",
      xc(IPG_00) => "Limit Ratio of Metal or GCN+TCNarea to nom N-transistor Ze   (um^2 /um)",
      xc(IPG_01) => "Limit Ratio of Metal or GCN+TCNarea to uv1/uv2 N-transistors",
      xc(IPG_02) => "Limit Ratio of Metal or GCN+TCNarea SRAM N-transistors",
      xc(IPG_03) => "Limit Ratio of Metal or GCN+TCNarea to nom inverter with sub-tap Ze (smaller of N/P Z)  (um^2 /um)",
      xc(IPG_04) => "Limit Ratio of Metal or GCN+TCNarea to uv1/uv2 inverter with sub-tap Ze (smaller of N/P Z)  (um^2 /um)",
      xc(IPG_05) => "Limit Ratio of Metal area to nwell area  (um^2 /um^2).",
      xc(IPG_100) => "Limit Ratio of Metal to esd-diode ndiff area  (um^2 /um^2)",
      xc(IPG_101) => "Limit Ratio of Metal to power clamp pmos Z  (um^2 /um)",
      xc(IPG_200) => "Max TM1/Z",
      xc(IPG_300) => "Limit Ratio of TV1 area to nom N-transistor Ze   (um^2 /um)",
      xc(IPG_301) => "Limit Ratio of TV1 area to uv1/uv2 N-transistors",
      xc(IPG_302) => "Limit Ratio of TV1 area SRAM N-transistors",
      xc(IPG_303) => "Limit Ratio of TV1 area to nom inverter with sub-tap Ze (smaller of N/P Z)  (um^2 /um)",
      xc(IPG_304) => "Limit Ratio of TV1 area to uv1/uv2 inverter with sub-tap Ze (smaller of N/P Z)  (um^2 /um)",
      xc(IPG_305) => "Limit Ratio of TV1 area to nwell area  (um^2 /um^2)",
      xc(IPG_400) => "Limit Ratio of TV1 area to esd-diode ndiff area  (um^2 /um^2)",
      xc(IPG_401) => "Limit Ratio of TV1 area to power clamp pmos Z  (um^2 /um)",
      xc(IPG_610) => "Limit ratio of Metal or GCN+TCN area connected to nwell to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge with sub-tap",
      xc(IPG_611) => "Limit ratio of TM1 area connected to nwell to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge with sub-tap",
      xc(IPG_612) => "Limit ratio of TV1 area connected to nwell to PMOS/gbnwell Ze (um^2/um) connected to nmos discharge with sub-tap",
      xc(IPNWD_101) => "Limit Metal or GCN+TCN area to Pdiff Z (um^2/um) connected to NAC",
      xc(IPNWD_102) => "Limit TM1 area to Pdiff Z (um^2/um) connected to NAC",
      xc(IPNWD_103) => "Limit TV1 area to Pdiff Z (um^2/um) connected to NAC",
      xc(IPNWG_101) => "Limit Metal or GCN+TCN area to Pdiff Z (um^2/um) connected to GNAC",
      xc(IPNWG_102) => "Limit TM1 area to Pdiff Z (um^2/um) connected to GNAC",
      xc(IPNWG_103) => "Limit TV1 area to Pdiff Z (um^2/um) connected to GNAC",
      xc(IPNWN_01) => "Max ratio of GCN+TCN area to victim nwell area",
      xc(IPNWN_02) => "Max ratio of metal to victim nwell area",
      xc(IPNWN_03) => "Max via to victim nwell area",
      xc(IPNWN_04) => "Max ratio of TM1 to victim nwell area (0 means effectively not allowed)",
      xc(IPNWN_05) => "Max TV1 area to victim nwell area (0 means effectively not allowed)",
      xc(IPN_00) => "GCN+TCN (Polycon+Diffcon)",
      xc(IPN_01) => "Metal-0",
      xc(IPN_02) => "Metal-1",
      xc(IPN_03) => "Metal-2",
      xc(IPN_04) => "Metal-3",
      xc(IPN_05) => "Metal-4",
      xc(IPN_06) => "Metal-5",
      xc(IPN_07) => "Metal-6",
      xc(IPN_08) => "Metal-7",
      xc(IPN_09) => "Metal-8",
      xc(IPN_10) => "Metal-9",
      xc(IPN_100) => "GCN+TCN (Polycon+Diffcon)",
      xc(IPN_101) => "Metal-0",
      xc(IPN_102) => "Metal-1",
      xc(IPN_103) => "Metal-2",
      xc(IPN_104) => "Metal-3",
      xc(IPN_105) => "Metal-4",
      xc(IPN_106) => "Metal-5",
      xc(IPN_107) => "Metal-6",
      xc(IPN_108) => "Metal-7",
      xc(IPN_109) => "Metal-8",
      xc(IPN_11) => "Metal-10",
      xc(IPN_110) => "Metal-9",
      xc(IPN_111) => "Metal-10",
      xc(IPN_112) => "Metal-11",
      xc(IPN_113) => "TM1",
      xc(IPN_114) => "Metal-12",
      xc(IPN_12) => "Metal-11",
      xc(IPN_13) => "TM1",
      xc(IPN_14) => "Metal-12",
      xc(IPN_200) => "GCN+TCN (Polycon+Diffcon)",
      xc(IPN_201) => "Metal-0",
      xc(IPN_202) => "Metal-1",
      xc(IPN_203) => "Metal-2",
      xc(IPN_204) => "Metal-3",
      xc(IPN_205) => "Metal-4",
      xc(IPN_206) => "Metal-5",
      xc(IPN_207) => "Metal-6",
      xc(IPN_208) => "Metal-7",
      xc(IPN_209) => "Metal-8",
      xc(IPN_210) => "Metal-9",
      xc(IPN_211) => "Metal-10",
      xc(IPN_212) => "Metal-11",
      xc(IPN_213) => "TM1",
      xc(IPN_214) => "Metal-12",
      xc(IPN_300) => "ViaCN",
      xc(IPN_301) => "Via0",
      xc(IPN_302) => "Via1",
      xc(IPN_303) => "Via2",
      xc(IPN_304) => "Via3",
      xc(IPN_305) => "Via4",
      xc(IPN_306) => "Via5",
      xc(IPN_307) => "Via6",
      xc(IPN_308) => "Via7",
      xc(IPN_309) => "Via8",
      xc(IPN_310) => "Via9",
      xc(IPN_311) => "Via10",
      xc(IPN_312) => "Via11",
      xc(IPN_313) => "Via12",
      xc(IPN_400) => "ViaCN",
      xc(IPN_401) => "Via0",
      xc(IPN_402) => "Via1",
      xc(IPN_403) => "Via2",
      xc(IPN_404) => "Via3",
      xc(IPN_405) => "Via4",
      xc(IPN_406) => "Via5",
      xc(IPN_407) => "Via6",
      xc(IPN_408) => "Via7",
      xc(IPN_409) => "Via8",
      xc(IPN_410) => "Via9",
      xc(IPN_411) => "Via10",
      xc(IPN_412) => "Via11",
      xc(IPN_413) => "Via12",
      xc(IPTB_00) => "Max ratio of Metal area to Total PMOS TG gate edge  (um^2 /um)",
      xc(IPTB_01) => "Limit Ratio of Metal area (on the PMOS source) to TG N-discharge-transistor Ze  (um^2 /um)",
      xc(IPTD_100) => "GCN+TCN (Polycon+Diffcon)",
      xc(IPTD_101) => "Metal-0",
      xc(IPTD_102) => "Metal-1",
      xc(IPTD_103) => "Metal-2",
      xc(IPTD_104) => "Metal-3",
      xc(IPTD_105) => "Metal-4",
      xc(IPTD_106) => "Metal-5",
      xc(IPTD_107) => "Metal-6",
      xc(IPTD_108) => "Metal-7",
      xc(IPTD_109) => "Metal-8",
      xc(IPTD_110) => "Metal-9",
      xc(IPTD_111) => "Metal-10",
      xc(IPTD_112) => "Metal-11",
      xc(IPTD_113) => "TM1",
      xc(IPTD_114) => "Metal-12",
      xc(IPTD_600) => "Limit Ratio of Metal or GCN+TCN area to TG N-transistor Drain Ze (um^2 /um) no sub-tap",
      xc(IPTG_00) => "Limit Ratio of Metal or GCN+TCN area to TG N-transistor gNAC Ze (um^2 /um), for TG-gNAC protection",
      xc(IPTG_100) => "GCN+TCN (Polycon+Diffcon)",
      xc(IPTG_101) => "Metal-0",
      xc(IPTG_102) => "Metal-1",
      xc(IPTG_103) => "Metal-2",
      xc(IPTG_104) => "Metal-3",
      xc(IPTG_105) => "Metal-4",
      xc(IPTG_106) => "Metal-5",
      xc(IPTG_107) => "Metal-6",
      xc(IPTG_108) => "Metal-7",
      xc(IPTG_109) => "Metal-8",
      xc(IPTG_110) => "Metal-9",
      xc(IPTG_111) => "Metal-10",
      xc(IPTG_112) => "Metal-11",
      xc(IPTG_113) => "TM1",
      xc(IPTG_114) => "Metal-12",
      xc(IPTG_600) => "GCN+TCN (Polycon+Diffcon)",
      xc(IPTG_601) => "Metal-0",
      xc(IPTG_602) => "Metal-1",
      xc(IPTG_603) => "Metal-2",
      xc(IPTG_604) => "Metal-3",
      xc(IPTG_605) => "Metal-4",
      xc(IPTG_606) => "Metal-5",
      xc(IPTG_607) => "Metal-6",
      xc(IPTG_608) => "Metal-7",
      xc(IPTG_609) => "Metal-8",
      xc(IPTG_610) => "Metal-9",
      xc(IPTG_611) => "Metal-10",
      xc(IPTG_612) => "Metal-11",
      xc(IPTG_613) => "TM1",
      xc(IPTG_614) => "Metal-12",
      xc(IPTG_700) => "Limit Ratio of Metal or GCN+TCN area to UHV TG gNAC template Ze (um^2 /um), for TG-gNAC protection",
      xc(IPTN_100) => "GCN+TCN (Polycon+Diffcon)",
      xc(IPTN_101) => "Metal-0",
      xc(IPTN_102) => "Metal-1",
      xc(IPTN_103) => "Metal-2",
      xc(IPTN_104) => "Metal-3",
      xc(IPTN_105) => "Metal-4",
      xc(IPTN_106) => "Metal-5",
      xc(IPTN_107) => "Metal-6",
      xc(IPTN_108) => "Metal-7",
      xc(IPTN_109) => "Metal-8",
      xc(IPTN_110) => "Metal-9",
      xc(IPTN_111) => "Metal-10",
      xc(IPTN_112) => "Metal-11",
      xc(IPTN_113) => "TM1",
      xc(IPTN_114) => "Metal-12",
      xc(IPTN_200) => "GCN+TCN (Polycon+Diffcon)",
      xc(IPTN_201) => "Metal-0",
      xc(IPTN_202) => "Metal-1",
      xc(IPTN_203) => "Metal-2",
      xc(IPTN_204) => "Metal-3",
      xc(IPTN_205) => "Metal-4",
      xc(IPTN_206) => "Metal-5",
      xc(IPTN_207) => "Metal-6",
      xc(IPTN_208) => "Metal-7",
      xc(IPTN_209) => "Metal-8",
      xc(IPTN_210) => "Metal-9",
      xc(IPTN_211) => "Metal-10",
      xc(IPTN_212) => "Metal-11",
      xc(IPTN_213) => "TM1",
      xc(IPTN_214) => "Metal-12",
      xc(IPT_01) => "Max ratio of field poly area to active TG gate poly area  (um^2 / um^2)",
      xc(IPT_02) => "Max ratio of GCN area to TG n-gate area  (um^2 / um^2)",
      xc(IPT_03) => "Max ratio of GCN area to TG p-gate area  (um^2 / um^2)",
      xc(IP_01) => "Max ratio of field poly area to active gate poly area  (um^2 / um^2)",
      xc(IP_02) => "Max ratio of GCN area to n-gate area  (um^2 / um^2)",
      xc(IP_03) => "Max ratio of GCN area to p-gate area  (um^2 / um^2)",
      xc(J_01) => "N+ S/D block width (post generation)",
      xc(J_02) => "N+ S/D block space (post generation)",
      xc(J_03) => "N+ S/D block space to active n+ diff (OGD)",
      xc(J_04) => "N+ S/D block space to n+ well tap diff (OGD)",
      xc(J_05) => "N+ S/D block encl of active p+ diff (OGD)",
      xc(J_06) => "N+ S/D block encl of p+ substrate tap diff (OGD)",
      xc(J_07) => "n-well enclosure of N+ s/d block",
      xc(J_08) => "Min generated nsd/ntp block area (in sq u. area)",
      xc(J_09) => "Min generated nsd/ntp hole area (in sq u. area)",
      xc(J_10) => "n-well enclosure of N-tip block",
      xc(J_11) => "N-tip block space to active n-diffusion edge",
      xc(J_12) => "N-tip block encl of active p-diffusion edge",
      xc(J_13) => "Minimum synthesized N+ S/D block segment lengths, when both adjacent at a corner",
      xc(J_14) => "Minimum synthesized N+ S/D block convex corner encl of active p+ diff corner",
      xc(J_15) => "Minimum synthesized N+ S/D block concave corner space to active n+ diff corner",
      xc(J_16) => "Minimum pitch (width+space) on synthesized mask",
      xc(J_21) => "N-tip block width",
      xc(J_22) => "N-tip block space",
      xc(J_23) => "N+ S/D block space to active n+ diff (PGD)",
      xc(J_24) => "N-tip block pitch",
      xc(J_25) => "N+ S/D block encl of active p+ diff (PGD)",
      xc(J_41) => "N+ S/D segment lengths less than J_41 are subject to rules J_42/43 on the adjacent edges",
      xc(J_42) => "Forbidden adjacent edge length range min (>)",
      xc(J_43) => "Forbidden adjacent edge length range max (<)",
      xc(J_44) => "N+ S/D block space to n+ well tap diff (PGD)",
      xc(J_46) => "N+ S/D block encl of p+ substrate tap diff (PGD)",
      xc(J_81) => "Minimum synthesized N+ S/D block space after J_82 oversize (checked edge-to-edge only)",
      xc(J_82) => "Oversize value for the J_81 check",
      xc(K_01) => "P+ S/D block width",
      xc(K_02) => "P+ S/D block space",
      xc(K_03) => "P+ S/D block space to active p+ diff (OGD)",
      xc(K_04) => "P+ S/D block space to p+ sub tap diff (OGD)",
      xc(K_05) => "P+ S/D block encl of active n+ diff (OGD)",
      xc(K_06) => "P+ S/D block encl of n+ well tap diff (OGD)",
      xc(K_07) => "P+ S/D block space to n-well edge",
      xc(K_08) => "Min generated psd/ptp block area (in sq u. area)",
      xc(K_09) => "Min generated psd/ptp hole area (in sq u. area)",
      xc(K_10) => "P-tip block space to n-well edge",
      xc(K_11) => "P-tip block space to active p-diffusion edge",
      xc(K_12) => "P-tip block encl of active n-diffusion edge",
      xc(K_13) => "Minimum synthesized P+ S/D block segment lengths, when both adjacent at a corner",
      xc(K_14) => "Minimum synthesized P+ S/D block convex corner encl of active n+ diff corner",
      xc(K_15) => "Minimum synthesized P+ S/D block concave corner space to active p+ diff corner",
      xc(K_16) => "Minimum pitch (width+space) on synthesized mask",
      xc(K_21) => "P-tip block width",
      xc(K_22) => "P-tip block space",
      xc(K_23) => "P+ S/D block space to active p+ diff (PGD)",
      xc(K_24) => "P-tip block pitch",
      xc(K_25) => "P+ S/D block encl of active n+ diff (PGD)",
      xc(K_41) => "P+ S/D segment lengths less than K_41 are subject to rules K_42/43 on the adjacent edges",
      xc(K_42) => "Forbidden adjacent edge length range min (>)",
      xc(K_43) => "Forbidden adjacent edge length range max (<)",
      xc(K_44) => "P+ S/D block space to p+ sub tap diff (PGD)",
      xc(K_46) => "P+ S/D block encl of n+ well tap diff (PGD)",
      xc(K_81) => "Minimum synthesized P+ S/D opening space after K_82 oversize (checked edge-to-edge only)",
      xc(K_82) => "Oversize value for the K_81 check",
      xc(LDIP_101) => "Poly upsize for LDI_01/02",
      xc(LDIW_01) => "Window for LDI_01",
      xc(LDIW_02) => "Window for LDI_02",
      xc(LDIW_120) => "Window for LDI_120",
      xc(LDIW_220) => "Window for LDI_220",
      xc(LDIW_500) => "Window for LDI_500",
      xc(LDIW_501) => "Window for LDI_501",
      xc(LDIW_502) => "Window for LDI_502",
      xc(LDIW_503) => "Window for LDI_503",
      xc(LDIW_504) => "Window for LDI_504",
      xc(LDIW_505) => "Window for LDI_505",
      xc(LDIW_506) => "Window for LDI_506",
      xc(LDI_01) => "Max allowed INTERMEDIATE Exposed P-diffusion density (%), within a 245um x 245um window size",
      xc(LDI_02) => "Max allowed INTERMEDIATE Exposed N-diffusion density (%), within a 245um x 245um window size",
      xc(LDI_120) => "Min required intermediate TM1 density (%), within a 364um x 364um window size",
      xc(LDI_220) => "Max allowed intermediate TM1 density (%), within a 364um x 364um window size",
      xc(LDI_500) => "Min Intermediate Metal 0 density (%) relative to actual global Metal 0 density, within a 70um x 70um window size. ",
      xc(LDI_501) => "Min Intermediate Metal 1 density (%) relative to actual global Metal 1 density, within a 70um x 70um window size. ",
      xc(LDI_502) => "Min Intermediate Metal 2 density (%) relative to actual global Metal 2 density, within a 70um x 70um window size. ",
      xc(LDI_503) => "Min Intermediate Metal 3 density (%) relative to actual global Metal 3 density, within a 70um x 70um window size. ",
      xc(LDI_504) => "Min Intermediate Metal 4 density (%) relative to actual global Metal 4 density, within a 70um x 70um window size. ",
      xc(LDI_505) => "Min Intermediate Metal 5 density (%) relative to actual global Metal 5 density, within a 84um x 84um window size. ",
      xc(LDI_506) => "Min Intermediate Metal 6 density (%) relative to actual global Metal 6 density, within a 84um x 84um window size. ",
      xc(LDP_101) => "Poly upsize for LD_131/132/231/232",
      xc(LDP_102) => "Poly upsize for LD_131/132/231/232 in HDDP/HPDP/SDP region",
      xc(LDT_101) => "TCN upsize for LDB_135/136/235/236",
      xc(LDW_100) => "Window for LD_100",
      xc(LDW_101) => "Window for LD_101",
      xc(LDW_102) => "Window for LD_102",
      xc(LDW_103) => "Window for LD_103",
      xc(LDW_104) => "Window for LD_104",
      xc(LDW_105) => "Window for LD_105",
      xc(LDW_106) => "Window for LD_106",
      xc(LDW_107) => "Window for LD_107",
      xc(LDW_108) => "Window for LD_108",
      xc(LDW_109) => "Window for LD_109",
      xc(LDW_110) => "Window for LD_110",
      xc(LDW_111) => "Window for LD_111",
      xc(LDW_112) => "Window for LD_112",
      xc(LDW_120) => "Window for LD_120",
      xc(LDW_121) => "Window for LD_121",
      xc(LDW_122) => "Window for LD_122",
      xc(LDW_123) => "Window for LD_123",
      xc(LDW_131) => "Window for LD_131",
      xc(LDW_132) => "Window for LD_132",
      xc(LDW_133) => "Window for LD_133",
      xc(LDW_134) => "Window for LD_134",
      xc(LDW_135) => "Window for LD_135",
      xc(LDW_136) => "Window for LD_136",
      xc(LDW_200) => "Window for LD_200",
      xc(LDW_201) => "Window for LD_201",
      xc(LDW_202) => "Window for LD_202",
      xc(LDW_203) => "Window for LD_203",
      xc(LDW_204) => "Window for LD_204",
      xc(LDW_205) => "Window for LD_205",
      xc(LDW_206) => "Window for LD_206",
      xc(LDW_207) => "Window for LD_207",
      xc(LDW_208) => "Window for LD_208",
      xc(LDW_209) => "Window for LD_209",
      xc(LDW_210) => "Window for LD_210",
      xc(LDW_211) => "Window for LD_211",
      xc(LDW_212) => "Window for LD_212",
      xc(LDW_220) => "Window for LD_220",
      xc(LDW_231) => "Window for LD_231",
      xc(LDW_232) => "Window for LD_232",
      xc(LDW_233) => "Window for LD_233",
      xc(LDW_234) => "Window for LD_234",
      xc(LDW_235) => "Window for LD_235",
      xc(LDW_236) => "Window for LD_236",
      xc(LDW_500) => "Window for LD_500",
      xc(LDW_501) => "Window for LD_501",
      xc(LDW_502) => "Window for LD_502",
      xc(LDW_503) => "Window for LD_503",
      xc(LDW_504) => "Window for LD_504",
      xc(LDW_505) => "Window for LD_505",
      xc(LDW_506) => "Window for LD_506",
      xc(LDW_507) => "Window for LD_507",
      xc(LDW_508) => "Window for LD_508",
      xc(LDW_509) => "Window for LD_509",
      xc(LDW_510) => "Window for LD_510",
      xc(LDW_511) => "Window for LD_511",
      xc(LDW_512) => "Window for LD_512",
      xc(LDW_520) => "Window for LD_520",
      xc(LDW_600) => "Window for LD_600",
      xc(LDW_601) => "Window for LD_601",
      xc(LDW_602) => "Window for LD_602",
      xc(LDW_603) => "Window for LD_603",
      xc(LDW_604) => "Window for LD_604",
      xc(LDW_605) => "Window for LD_605",
      xc(LDW_606) => "Window for LD_606",
      xc(LDW_607) => "Window for LD_607",
      xc(LDW_609) => "Window for LD_609",
      xc(LDW_611) => "Window for LD_611",
      xc(LDW_612) => "Window for LD_612",
      xc(LDW_620) => "Window for LD_620",
      xc(LDW_81) => "Window for LD_81",
      xc(LDW_82) => "Window for LD_82",
      xc(LD_100) => "Min required local Metal 0 density (%), within a 25um x 25um window size",
      xc(LD_101) => "Min required local Metal 1 density (%), within a 25um x 25um window size",
      xc(LD_102) => "Min required local Metal 2 density (%), within a 25um x 25um window size",
      xc(LD_103) => "Min required local Metal 3 density (%), within a 25um x 25um window size",
      xc(LD_104) => "Min required local Metal 4 density (%), within a 25um x 25um window size",
      xc(LD_105) => "Min required local Metal 5 density (%), within a 37um x 37um window size",
      xc(LD_106) => "Min required local Metal 6 density (%), within a 37um x 37um window size",
      xc(LD_107) => "Min required local Metal 7 density (%), within a 37um x 37um window size",
      xc(LD_108) => "Min required local Metal 8 density (%), within a 37um x 37um window size",
      xc(LD_109) => "Min required local Metal 9 density (%), within a 37um x 37um window size",
      xc(LD_110) => "Min required local Metal 10 density (%), within a 37um x 37um window size",
      xc(LD_111) => "Min required local Metal 11 density (%), within a 37um x 37um window size",
      xc(LD_112) => "Min required local Metal 12 density (%), within a 25um x 25um window size",
      xc(LD_120) => "Min required local TM1 density (%), within a 65um x 65um window size",
      xc(LD_121) => "Min required local CE1 density (%), within a 350um x 350um window size",
      xc(LD_122) => "Min required local CE2 density (%), within a 350um x 350um window size",
      xc(LD_123) => "Min required local CE3 density (%), within a 350um x 350um window size",
      xc(LD_131) => "Min required local Exposed P-diffusion density (%), 17.5um x 17.5um window size",
      xc(LD_132) => "Min required local Exposed N-diffusion density (%), 17.5um x 17.5um window size",
      xc(LD_133) => "Min required local N + P diffusion density (%), 24.5um x 24.5um window size",
      xc(LD_134) => "Min required local Poly density (%), within a 2.1um x 2.1um window size",
      xc(LD_135) => "Min required local TCN and GCN combined density (%), 1.96um x 1.96um window ",
      xc(LD_136) => "Min required local TCN density (%), 1.96um x 1.96um window ",
      xc(LD_200) => "Max allowed local Metal 0 density (%), within a 9um x 9um window size",
      xc(LD_201) => "Max allowed local Metal 1 density (%), within a 9um x 9um window size",
      xc(LD_202) => "Max allowed local Metal 2 density (%), within a 9um x 9um window size",
      xc(LD_203) => "Max allowed local Metal 3 density (%), within a 9um x 9um window size",
      xc(LD_204) => "Max allowed local Metal 4 density (%), within a 9um x 9um window size",
      xc(LD_205) => "Max allowed local Metal 5 density (%), within a 12.6um x 12.6um window size",
      xc(LD_206) => "Max allowed local Metal 6 density (%), within a 12.6um x 12.6um window size",
      xc(LD_207) => "Max allowed local Metal 7 density (%), within a 12.6um x 12.6um window size",
      xc(LD_208) => "Max allowed local Metal 8 density (%), within a 12.6um x 12.6um window size",
      xc(LD_209) => "Max allowed local Metal 9 density (%), within a 12.6um x 12.6um window size",
      xc(LD_210) => "Max allowed local Metal 10 density (%), within a 12.6um x 12.6um window size",
      xc(LD_211) => "Max allowed local Metal 11 density (%), within a 12.6um x 12.6um window size",
      xc(LD_212) => "Max allowed local Metal 12 density (%), within a 9um x 9um window size",
      xc(LD_220) => "Max allowed local TM1 density (%), within a 65um x 65um window size",
      xc(LD_231) => "Max allowed local Exposed P-diffusion density (%), 17.5um x 17.5um window size",
      xc(LD_232) => "Max allowed local Exposed N-diffusion density (%), 17.5um x 17.5um window size",
      xc(LD_233) => "Max allowed local N + P diffusion density (%), 24.5um x 24.5um window size",
      xc(LD_234) => "Max allowed local poly density (%), within a 2.1um x 2.1um window size",
      xc(LD_235) => "Max allowed local TCN and GCN combined density (%), 1.96um x 1.96um window ",
      xc(LD_236) => "Max allowed local TCN density (%), 1.96um x 1.96um window ",
      xc(LD_331) => "Min required local Exposed P-diffusion density in TG or TGULV region (%), 17.5um x 17.5um window size",
      xc(LD_332) => "Min required local Exposed N-diffusion density in TG or TGULV region (%), 17.5um x 17.5um window size",
      xc(LD_334) => "Max allowed local poly density in TG or TGULV pitch region (%), within a 2.1um x 2.1um window size",
      xc(LD_336) => "Min required local TCN density in TG or TGULV region (%), 1.96um x 1.96um window ",
      xc(LD_434) => "Max allowed local poly density in ULP pitch region (%), within a 2.1um x 2.1um window size",
      xc(LD_435) => "Min required local TCN and GCN combined density in ULP region (%), 1.96um x 1.96um window ",
      xc(LD_436) => "Min required local TCN density in ULP region (%), 1.96um x 1.96um window ",
      xc(LD_500) => "Min required local Via0 density (%), within a 3.9um x 3.9um window size",
      xc(LD_501) => "Min required local Via1 density (%), within a 3.9um x 3.9um window size",
      xc(LD_502) => "Min required local Via2 density (%), within a 3.9um x 3.9um window size",
      xc(LD_503) => "Min required local Via3 density (%), within a 3.9um x 3.9um window size",
      xc(LD_504) => "Min required local Via4 density (%), within a 3.9um x 3.9um window size",
      xc(LD_505) => "Min required local Via5 density (%), within a 3.9um x 3.9um window size",
      xc(LD_506) => "Min required local Via6 density (%), within a 3.9um x 3.9um window size",
      xc(LD_507) => "Min required local Via7 density (%), within a 6.7um x 6.7um window size",
      xc(LD_508) => "Min required local Via8 density (%), within a 10um x 10um window size",
      xc(LD_509) => "Min required local Via9 density (%), within a 11um x 11um window size",
      xc(LD_510) => "Min required local Via10 density (%), within a 11um x 11um window size",
      xc(LD_511) => "Min required local Via11 density (%), within a 11um x 11um window size",
      xc(LD_512) => "Min required local Via12 density (%), within a 53um x 53um window size",
      xc(LD_520) => "Min required local VCN density (%), within a 3.9um x 3.9um window size",
      xc(LD_535) => "Min required local TCN and GCN combined density in TG and TGULV region (%), 1.96um x 1.96um window ",
      xc(LD_600) => "Max required local Via0 density (%), within a 3.9um x 3.9um window size",
      xc(LD_601) => "Max required local Via1 density (%), within a 3.9um x 3.9um window size",
      xc(LD_602) => "Max required local Via2 density (%), within a 3.9um x 3.9um window size",
      xc(LD_603) => "Max required local Via3 density (%), within a 3.9um x 3.9um window size",
      xc(LD_604) => "Max required local Via4 density (%), within a 3.9um x 3.9um window size",
      xc(LD_605) => "Max required local Via5 density (%), within a 3.9um x 3.9um window size",
      xc(LD_606) => "Max required local Via6 density (%), within a 3.9um x 3.9um window size",
      xc(LD_607) => "Max required local Via7 density (%), within a 5.3um x 5.3um window size",
      xc(LD_609) => "Max required local Via9 density (%), within a 53um x 53um window size",
      xc(LD_611) => "Max required local Via11 density (%), within a 53um x 53um window size",
      xc(LD_612) => "Max required local Via12 density (%), within a 53um x 53um window size",
      xc(LD_620) => "Max required local VCN density (%), within a 3.9um x 3.9um window size",
      xc(LD_634) => "Max allowed local poly density in TRDTOULP region (%), within a 2.1umx2.1um window size",
      xc(LD_81) => "Min required local RDL density (%), 130um x 130um window size",
      xc(LD_82) => "Max allowed local RDL density (%), 130um x 130um window size",
      xc(LMI_01) => "LMI width, only allowed value",
      xc(LMI_02) => "LMI-to-LMI separation orthogonal to TSV spine direction (center-to-center), only allowed value in std array, OGD",
      xc(LMI_03) => "LMI-to-LMI separation parallel to TSV spine direction (center-to-center), only allowed value in std array, PGD",
      xc(LMI_04) => "Separation of LMI arrays (center to center), orthogonal to TSV spine",
      xc(LMI_05) => "Separation of LMI arrays (center to center), parallel to TSV spine",
      xc(LMI_06) => "RDL (217;0), RDLPAD (217;40) enclosure of LMI (all sides), fixed",
      xc(LMI_11) => "LMI rows in a single array, only allowed value",
      xc(LMI_12) => "LMI columns in a single array, only allowed value",
      xc(LMI_13) => "LMI array edge distance to active die edge (EOA) (parallel to spine)",
      xc(LMI_40) => "Maximum PGD offset between any LMI center to die centerline",
      xc(LMI_41) => "LMI keepaway zone from die corners",
      xc(M0L_01) => "width_L_01",
      xc(M0L_02) => "width_L_02",
      xc(M0L_03) => "width_L_03",
      xc(M0L_04) => "width_L_04",
      xc(M0M_01) => "width_M_01",
      xc(M0M_02) => "width_M_02",
      xc(M0M_03) => "width_M_03",
      xc(M0M_04) => "width_M_04",
      xc(M0M_05) => "width_M_05",
      xc(M0S_01) => "width_S_01",
      xc(M0S_02) => "width_S_02",
      xc(M0_00) => "Only Rectangular M0 shape is allowed and only allowed in OGD.",
      xc(M0_126) => "(B:28-32),(C:54-80) not allowed pairs",
      xc(M0_127) => "(B:36-60),(C:78-80) not allowed pairs",
      xc(M0_128) => "(B:78-80),(C:28) not allowed pairs",
      xc(M0_129) => "(B),(B)",
      xc(M0_130) => "(C),(C)",
      xc(M0_131) => "(B:28-32),(C:28-40),(B:28-48)",
      xc(M0_132) => "(B:28-32),(C:32-46),(B:54-60)",
      xc(M0_133) => "(B:28-32),(C:32-48),(B:78-80)",
      xc(M0_134) => "(B:36-48),(C:28-48),(B:36-48)",
      xc(M0_135) => "(B:36-60),(C:32-60),(B:54-80)",
      xc(M0_136) => "(B:78-80),(C:32-80),(B:78-80)",
      xc(M0_137) => "(B:28-32),(C:42-80),(B:28-48) not allowed B-C-B sets",
      xc(M0_138) => "(B:28-32),(C:28,48-80),(B:54-60) not allowed B-C-B sets",
      xc(M0_139) => "(B:28-32),(C:28,54-80),(B:78-80) not allowed B-C-B sets",
      xc(M0_140) => "(B:36-48),(C:54-80),(B:36-48) not allowed B-C-B sets",
      xc(M0_141) => "(B:36-60),(C:28,78-80),(B:54-80) not allowed B-C-B sets",
      xc(M0_142) => "(B:78-80),(C:28),(B:78-80) not allowed B-C-B sets",
      xc(M0_21) => "B to C only space",
      xc(M0_23) => "M0CID and M0BID layers can be used to force/flip drawn B/C layers and must fully cover the Metal-0 lines.",
      xc(M0_41) => "End-to-end space (fixed value), when line-ends are completely aligned and lines are same type (B-B, C-C), can also be = M0_42",
      xc(M0_42) => "End-to-end space (fixed value), when line-ends are not completely aligned or lines are of different type (B-C)",
      xc(M0_48) => "Minimum overlap of line ends in opposite directions at minimum side-to-side space",
      xc(M0_60) => "Min length of M0 line (any type, any width)",
      xc(M0_812) => "Metal0 line-end overlap of TG poly, fixed value1 (M0 line ends must terminate within the poly)",
      xc(M0_813) => "Metal0 line-end overlap of TG poly, fixed value2 (M0 line ends must terminate within the poly)",
      xc(M0_814) => "Metal0 line-end overlap of TG poly, fixed value3 (M0 line ends must terminate within the poly)",
      xc(M0_82) => "Metal0 line-end overlap of poly, fixed value (M0 line ends must terminate within the poly)",
      xc(M0_822) => "Metal0 line-end overlap of TGULV poly, fixed value1 (M0 line ends must terminate within the poly)",
      xc(M0_823) => "Metal0 line-end overlap of TGULV poly, fixed value2 (M0 line ends must terminate within the poly)",
      xc(M0_83) => "Line ETE space region is extended by M0_83 in PGD before doing the ETE space checks",
      xc(M0_832) => "Metal0 line-end overlap of ULP poly, fixed value (M0 line ends must terminate within the poly)",
      xc(M0_84) => "M0_41/42 ETE to M0_42 ETE min space PGD",
      xc(M0_841) => "Minimum C line length, in OGD (>) ",
      xc(M0_842) => "End-to-end space (fixed value) in ULP region, when line-ends are not completely aligned or lines are of different type (B-C)",
      xc(M0_85) => "M0_41/42 ETE to M0_42 ETE min space OGD",
      xc(M0_91) => "Line ETE space region is extended by M0_91 in PGD before doing the isolated line checks",
      xc(M0_92) => "Min space/line-width between ETE space regions (PGD), when both ETE region lengths are <= M0_93",
      xc(M0_93) => "Limit of ETE region length PGD for M0_92",
      xc(M0_94) => "Min space/line-width between ETE space regions (PGD), when both ETE region lengths are <= M0_95",
      xc(M0_941) => "Minimum C line length, in OGD (>)",
      xc(M0_942) => "Minimum C line width, in PGD (>)",
      xc(M0_95) => "Limit of ETE region length PGD for M0_94",
      xc(M0_96) => "Min space/line-width between ETE space regions (PGD), when one or both ETE region lengths are > M0_95",
      xc(M0_97) => "Min space/line-width between ETE region (PGD) if the length of one or both the ETE regions (PGD) is > M0_98",
      xc(M0_98) => "Length of ETE space region PGD (>=)",
      xc(M10_00) => "Only Rectangular M10 shape is allowed for width_01 and width_04/06/07/08 shield wires.",
      xc(M10_01) => "width_01 value (OGD only)",
      xc(M10_02) => "width_02 value (OGD/PGD)",
      xc(M10_03) => "width_03 value (OGD only)",
      xc(M10_04) => "width_04 value (OGD/PGD)",
      xc(M10_05) => "width_05 value (OGD only)",
      xc(M10_06) => "width_06 value (OGD only)",
      xc(M10_07) => "width_07 value (OGD only)",
      xc(M10_08) => "width_08 value (OGD only)",
      xc(M10_09) => "width_09 value (OGD only)",
      xc(M10_10) => "width_10 value (OGD only)",
      xc(M10_121) => "width_07 to width_07 space, fixed space exception (fixed value)",
      xc(M10_20) => "width_01 wire cannot be sandwiched between two width_04/06/07/08 wires at min space on both sides",
      xc(M10_21) => "width_01 to width_01/04/06/07/08 space, fixed space1",
      xc(M10_22) => "width_01 to width_01/04/06/07/08 space, fixed space2",
      xc(M10_23) => "width_01 to width_01/04/06/07/08 space, fixed space3",
      xc(M10_24) => "width_02-09 to width_02-09 space, min unrestricted",
      xc(M10_35) => "Width_02/04 to width_02/04 space, min unrestricted",
      xc(M10_37) => "Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M10_38",
      xc(M10_38) => "Min unrestricted space for rule M10_37",
      xc(M10_41) => "Metal10 end-to-end space (min)",
      xc(M10_42) => "Metal10 end-to-end space width_01 line to any line (min)",
      xc(M10_50) => "Width_02/04 attacker (PGD) to width_01 victim (OGD) is not allowed.  Width_01 victim must be shielded (physically) by parallel rectangular-only width_04/06/07/08 wire.",
      xc(M10_51) => "OGD/PGD attacker to victim unrestricted space (min)",
      xc(M10_52) => "Width_01 attacker to victim unrestricted space (min)",
      xc(M10_60) => "Min length for all widths",
      xc(M10_65) => "Min required M10 hole area (sq um)",
      xc(M10_71) => "Minimum length of at least one segment, when two segments are adjacent at a corner",
      xc(M10_80) => "Min Corner-to-corner space, when corners have no overlap",
      xc(M10_81) => "Min Internal corner-to-corner width ",
      xc(M10_82) => "Min Width between facing concave corner extensions of opposite directions ",
      xc(M10err_01) => "Metal10 width_01 value (OGD only)",
      xc(M10err_05) => "Metal10 width_05 value (OGD only)",
      xc(M10err_06) => "Metal10 width_06 value (OGD only)",
      xc(M10err_09) => "Metal10 width_09 value (OGD only)",
      xc(M10err_10) => "Metal10 width_10 value (OGD only)",
      xc(M10err_21) => "BDW-specific Metal10 min space (values less than this are disallowed)",
      xc(M11_00) => "Only Rectangular M11 shape is allowed for width_01 and width_03/05/06/09/10 shield wires.",
      xc(M11_01) => "width_01 value (PGD only)",
      xc(M11_02) => "width_02 value (OGD/PGD)",
      xc(M11_03) => "width_03 value (OGD/PGD)",
      xc(M11_04) => "width_04 value (PGD only)",
      xc(M11_05) => "width_05 value (PGD only)",
      xc(M11_06) => "width_06 value (PGD only)",
      xc(M11_07) => "width_07 value (PGD only)",
      xc(M11_08) => "width_08 value (PGD only)",
      xc(M11_09) => "width_09 value (PGD only)",
      xc(M11_10) => "width_10 value (PGD only)",
      xc(M11_121) => "width_06 to width_06 space, fixed space exception (fixed value)",
      xc(M11_20) => "width_01 wire cannot be sandwiched between two width_03/05/06/09/10 wires at min space on both sides",
      xc(M11_21) => "width_01 to width_01/03/05/06/09/10 space, fixed space1",
      xc(M11_22) => "width_01 to width_01/03/05/06/09/10 space, fixed space2",
      xc(M11_23) => "width_01 to width_01/03/05/06/09/10 space, fixed space3",
      xc(M11_24) => "width_02-10 to width_02-10 space, min unrestricted",
      xc(M11_35) => "Width_02/03 to width_02/03 space, min unrestricted",
      xc(M11_37) => "Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M11_38",
      xc(M11_38) => "Min unrestricted space for rule M11_37",
      xc(M11_41) => "Metal11 end-to-end space (min)",
      xc(M11_42) => "Metal11 end-to-end space width_01 line to any line (min)",
      xc(M11_43) => "M11 coverage of Square Via10 orthogonal edge",
      xc(M11_50) => "Width_02/03 attacker (OGD) to width_01 victim (PGD) is not allowed.  Width_01 victim must be shielded (physically) by parallel rectangular-only width_03/05/06/09/10 wire.",
      xc(M11_51) => "OGD/PGD attacker to victim unrestricted space (min)",
      xc(M11_52) => "Width_01 attacker to victim unrestricted space (min)",
      xc(M11_60) => "Min length for all widths",
      xc(M11_65) => "Min required M11 hole area (sq um)",
      xc(M11_71) => "Minimum length of at least one segment, when two segments are adjacent at a corner",
      xc(M11_80) => "Min Corner-to-corner space, when corners have no overlap",
      xc(M11_81) => "Min Internal corner-to-corner width ",
      xc(M11_82) => "Min Width between facing concave corner extensions of opposite directions ",
      xc(M12_01) => "M12 width, minimum",
      xc(M12_02) => "M12 space, minimum",
      xc(M12_21) => "Maximum allowed M12 width",
      xc(M12_22) => "Min required M12 hole area (sq um)",
      xc(M12_23) => "Minimum length of at least one M12 segment, when two segments are adjacent at a corner",
      xc(M12_24) => "Min required M12 length/extent",
      xc(M12_41) => "Min M12 coverage of Square Via11 (one edge at a corner)",
      xc(M12_43) => "Min M12 coverage of Square Via11 orthogonal edge",
      xc(M12_51) => "Min M12 coverage of Rectangular Via11 (one edge at a corner)",
      xc(M12_52) => "Min M12 coverage of Rectangular Via11 orthogonal edge",
      xc(M1F_01) => "M1 notches/nubs only allowed in Metal1 color drawing region (over Metal1BCregionID)",
      xc(M1F_02) => "M1 notch can be only on Metal1C",
      xc(M1F_03) => "M1 nub can be only on Metal1B",
      xc(M1F_04) => "M1 nub must face M1 notch satisfying all M1 facing edge spacing rule (28nm)",
      xc(M1F_11) => "M1 nub width (in PGD), fixed value",
      xc(M1F_12) => "Max nub depth (in OGD)",
      xc(M1F_13) => "M1 notch length (in PGD), fixed value",
      xc(M1F_14) => "Min notch width (in OGD)",
      xc(M1F_15) => "Center of the neighboring nub and notch must be aligned",
      xc(M1F_21) => "Min space between M1 notch and Via0/Via1 (in PGD)",
      xc(M1F_22) => "Min M1 end offset from M1 notch section (in neighboring metal1B lines)",
      xc(M1F_23) => "Min space between M1 notches (in all direction)",
      xc(M1F_24) => "Min space between M1 nubs (in all direction)",
      xc(M1F_31) => "M1 color region is marked with Metal1BCregionID (82;71)",
      xc(M1F_32) => "Inside M1 color region, all metal1 tracks should be marked as B or C, in alternating way",
      xc(M1F_33) => "Metal1B in M1 color region is marked with M1BID (4;135) layer over M1 (4;0)",
      xc(M1F_34) => "Metal1C in M1 color region is marked with M1CID (111;137) layer over M1 (4;0)",
      xc(M1F_35) => "All metal1 lines (metal1B and metal1C) must be aligned to global M1 grid (M1_290)",
      xc(M1F_36) => "All metal1 lines (metal1B and metal1C) must follow all regular metal1 design rules",
      xc(M1F_40) => "First and last M1 track in each M1 colar region must not be empty (legal cuts are allowed)",
      xc(M1F_41) => "Each M1 color region must begin with Metal1B and end with Metal1B",
      xc(M1F_42) => "B-B, C-C pairs are not allowed",
      xc(M1F_43) => "Min V1/V0 keepaway space from OGD edge of M1BCregionID (i.e. only dummy M1)",
      xc(M1F_44) => "Min V1/V0 keepaway space from PGD edge of M1BCregionID (i.e. only dummy M1)",
      xc(M1F_45) => "M1BCregionID PGD edge must be coincide with Metal1B edge inside",
      xc(M1F_46) => "Min metal1 keepaway space from M1BCregionID (PGD and OGD)",
      xc(M1_00) => "M1 width_01 is not allowed over ULPpitchID or TRDTOULP",
      xc(M1_01) => "M1 width_01 value (fixed), PGD only",
      xc(M1_100) => "M1 width_02 is only allowed inside ULPpitchID",
      xc(M1_101) => "M1 width_02 value (fixed), PGD only",
      xc(M1_21) => "M1 width_01 to width_01 or width_02 to width_02 space1 (minimum value, but only allowed in fixed locations)",
      xc(M1_290) => "All PGD M1 width_01 lines must be on a 70nm pitch grid across the whole die",
      xc(M1_291) => "All PGD M1 width_02 lines must be on a 84nm pitch grid within each ULP region (centered in middle of poly space)",
      xc(M1_36) => "Maximum space between M1 lines (OGD/PGD) (<)",
      xc(M1_41) => "Min end-to-end space (width_01 to width_01 or width_02 to width_02)",
      xc(M1_42) => "Max end-to-end space (width_01 to width_01 or width_02 to width_02), when at least one line has length <= M1_43",
      xc(M1_43) => "M1 lines shorter than this length are subject to M1_42",
      xc(M1_60) => "Min length of M1 line",
      xc(M1_69) => "A short line < M1_69 length cannot have exposed edges >M1_85 on one side or both sides",
      xc(M1_81) => "Minimum overlap of adjacent line-ends in opposite directions",
      xc(M1_84) => "Minimum offset between adjacent line-ends in opposite directions",
      xc(M1_85) => "Maximum offset between adjacent line-ends for line-end edges to be considered unexposed",
      xc(M1_86) => "Minimum exposed offset between adjacent line-ends in same direction",
      xc(M1_87) => "Min End-to-End space when both line ends have exposed edges (>=M1_86) on both sides",
      xc(M2BB_21) => "B - B can skip a valid C line in between, that would create a valid B-C-B combination",
      xc(M2BB_22) => "(B) - (B) unrestricted space, minimum",
      xc(M2BB_31) => "(B) - (B) min multi-track-skip space (>)",
      xc(M2BB_32) => "(B) - (B) max multi-track-skip space (<)",
      xc(M2BB_33) => "Min width of B line next to the multi-track-skip space",
      xc(M2BB_34) => "Min width of C line next to the above B line next to the multi-track-skip space",
      xc(M2BB_35) => "The above B line next to the unrestricted space needs to be floating (no vias above or below)",
      xc(M2BB_36) => "Maximum space in PGD (<) if rule M2BB_37 is not met",
      xc(M2BB_37) => "Maximum space in OGD (<) if rule M2BB_36 is not met",
      xc(M2BB_38) => "Min PGD space between multi-track-skip spaces",
      xc(M2BC_21) => "(B) to (C-B) unrestricted space, minimum",
      xc(M2CC_21) => "(B-C) - (C-B) pairs are allowed to skip a valid B in between. The B in the space must form a valid B-C-(B)-C-B combination ",
      xc(M2CC_27) => "(B-C) to (C-B) unrestricted space, minimum",
      xc(M2CC_28) => "For width <= 36 C to any C, in (B-C) - (C-B) pair, unrestricted space, minimum",
      xc(M2L_01) => "width_L_01",
      xc(M2L_02) => "width_L_02",
      xc(M2L_03) => "width_L_03",
      xc(M2L_05) => "width_L_05",
      xc(M2L_06) => "width_L_06",
      xc(M2L_07) => "width_L_07",
      xc(M2M_01) => "width_M_01",
      xc(M2M_02) => "width_M_02",
      xc(M2M_03) => "width_M_03",
      xc(M2S_01) => "width_S_01",
      xc(M2S_02) => "width_S_02",
      xc(M2S_03) => "width_S_03",
      xc(M2S_04) => "width_S_04",
      xc(M2_00) => "Only Rectangular M2 shape is allowed and only allowed in OGD.",
      xc(M2_126) => "(B:28-36),(C:60-84) not allowed pairs",
      xc(M2_127) => "(B:38-46),(C:84) not allowed pairs",
      xc(M2_128) => "(B:56-84),(C:28-36) not allowed pairs",
      xc(M2_129) => "(B),(B)",
      xc(M2_130) => "(C),(C)",
      xc(M2_131) => "(B:28-36),(C:28-46),(B:28-36)",
      xc(M2_132) => "(B:28-46),(C:28-56),(B:38-46)",
      xc(M2_133) => "(B:28-36),(C:38-56),(B:56-84)",
      xc(M2_134) => "(B:38-46),(C:38-76),(B:56-84)",
      xc(M2_135) => "(B:56-84),(C:38-84),(B:56-84)",
      xc(M2_136) => "(B:28-36),(C:56-84),(B:28-36) not allowed B-C-B sets",
      xc(M2_137) => "(B:28-46),(C:60-84),(B:38-46) not allowed B-C-B sets",
      xc(M2_138) => "(B:28-36),(C:28-36,60-84),(B:56-84) not allowed B-C-B sets",
      xc(M2_139) => "(B:38-46),(C:28-36,84),(B:56-84) not allowed B-C-B sets",
      xc(M2_140) => "(B:56-84),(C:28-36),(B:56-84) not allowed B-C-B sets",
      xc(M2_141) => "(B:28),(C:56),(B:76) not allowed B-C-B sets",
      xc(M2_147) => "Width <= 32nm (M2S_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M2_147",
      xc(M2_148) => "Width > 32nm (M2S_03) and <= 46nm (M2M_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M2_148",
      xc(M2_20) => "Line ends are extended by M2_20 before doing any side to side space checks",
      xc(M2_21) => "B to C min space (fixed value for adjacent lines)",
      xc(M2_22) => "Every C line should have an adjacent B line at M2_21 space on atleast one side, along its entire length (allowed to have M2_42 ETE gaps)",
      xc(M2_23) => "M2CID and M2BID layers can be used to force/flip drawn B/C layers and must fully cover the Metal-2 lines.",
      xc(M2_37) => "Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M2_38",
      xc(M2_38) => "Min unrestricted space for rule M2_37 ",
      xc(M2_41) => "End-to-end space (min), when line-ends are completely aligned and lines are same type (B-B, C-C)",
      xc(M2_42) => "End-to-end space (min), when line-ends are not completely aligned or lines are of different type (B-C)",
      xc(M2_43) => "Line ends are extended by M2_43 on both sides before doing ETE space checks M2_41/42 ",
      xc(M2_44) => "All line ends for widths <= M2_45 must be aligned or covered at M2_46 space ",
      xc(M2_45) => "Max width for M2_44 check ",
      xc(M2_46) => "Space at which the line ends must be aligned or covered (fixed value) for M2_44 check",
      xc(M2_47) => "Lines <= M2_45 wide cannot be isolated (cannot be exposed on both sides), must be next to another narrow or wide line ",
      xc(M2_48) => "Minimum overlap of adjacent line ends in opposite directions at minimum space",
      xc(M2_49) => "Minimum offset of adjacent line ends in opposite directions (line ends are extended by M2_43), applies to > M2_45 width wires",
      xc(M2_60) => "Min length of M2 line (any type, any width)",
      xc(M2_841) => "Minimum C line length, in OGD (>) ",
      xc(M2_842) => "Minimum C line width, in PGD (>)",
      xc(M2_941) => "Minimum C line length, in OGD (>)",
      xc(M2_942) => "Minimum C line width, in PGD (>)",
      xc(M3BB_21) => "B - B can skip a valid C line in between, that would create a valid B-C-B combination",
      xc(M3BB_22) => "(B) - (B) unrestricted space, minimum",
      xc(M3BB_31) => "(B) - (B) min multi-track-skip space (>)",
      xc(M3BB_32) => "(B) - (B) max multi-track-skip space (<)",
      xc(M3BB_33) => "Min width of B line next to the multi-track-skip space",
      xc(M3BB_34) => "Min width of C line next to the above B line next to the multi-track-skip space",
      xc(M3BB_35) => "The above B line next to the unrestricted space needs to be floating (no vias above or below) ",
      xc(M3BB_36) => "Maximum space in OGD (<) if rule M3BB_37 is not met",
      xc(M3BB_37) => "Maximum space in PGD (<) if rule M3BB_36 is not met",
      xc(M3BB_38) => "Min OGD space between multi-track-skip spaces",
      xc(M3BC_21) => "(B) to (C-B) unrestricted space, minimum",
      xc(M3CC_21) => "(B-C) - (C-B) pairs are allowed to skip a valid B in between. The B in the space must form a valid B-C-(B)-C-B combination ",
      xc(M3CC_27) => "(B-C) to (C-B) unrestricted space, minimum",
      xc(M3CC_28) => "For width <= 36 C to any C, in (B-C) - (C-B) pair, unrestricted space, minimum",
      xc(M3L_01) => "width_L_01",
      xc(M3L_02) => "width_L_02",
      xc(M3L_03) => "width_L_03",
      xc(M3L_04) => "width_L_04",
      xc(M3L_05) => "width_L_05",
      xc(M3L_06) => "width_L_06",
      xc(M3L_07) => "width_L_07",
      xc(M3L_08) => "width_L_08",
      xc(M3L_09) => "width_L_09",
      xc(M3M_01) => "width_M_01",
      xc(M3M_02) => "width_M_02",
      xc(M3M_03) => "width_M_03",
      xc(M3M_04) => "width_M_04",
      xc(M3M_05) => "width_M_05",
      xc(M3M_06) => "width_M_06",
      xc(M3S_01) => "width_S_01",
      xc(M3S_02) => "width_S_02",
      xc(M3S_03) => "width_S_03",
      xc(M3S_04) => "width_S_04",
      xc(M3_00) => "Only Rectangular M3 shape is allowed and only allowed in PGD.",
      xc(M3_126) => "(B:28-36),(C:60-84) not allowed pairs",
      xc(M3_127) => "(B:40-46),(C:84) not allowed pairs",
      xc(M3_128) => "(B:56-84),(C:28-36) not allowed pairs",
      xc(M3_129) => "(B),(B)",
      xc(M3_130) => "(C),(C)",
      xc(M3_131) => "(B:28-36),(C:28-46),(B:28-36)",
      xc(M3_132) => "(B:28-46),(C:28-56),(B:40-46)",
      xc(M3_133) => "(B:28-36),(C:40-56),(B:56-84)",
      xc(M3_134) => "(B:40-46),(C:40-76),(B:56-84)",
      xc(M3_135) => "(B:56-84),(C:40-84),(B:56-84)",
      xc(M3_136) => "(B:28-36),(C:56-84),(B:28-36) not allowed B-C-B sets",
      xc(M3_137) => "(B:28-46),(C:60-84),(B:40-46) not allowed B-C-B sets",
      xc(M3_138) => "(B:28-36),(C:28-36,60-84),(B:56-84) not allowed B-C-B sets",
      xc(M3_139) => "(B:40-46),(C:28-36,84),(B:56-84) not allowed B-C-B sets",
      xc(M3_140) => "(B:56-84),(C:28-36),(B:56-84) not allowed B-C-B sets",
      xc(M3_141) => "(B:28),(C:56),(B:76) not allowed B-C-B sets",
      xc(M3_142) => "(B:38-52),(C:82-84),(B:56-84)",
      xc(M3_143) => "(B:56-84),(C:32-36),(B:56-84)",
      xc(M3_147) => "Width <= 32nm (M3S_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M3_147",
      xc(M3_148) => "Width > 32nm (M3S_03) and <= 46nm (M3M_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M3_148",
      xc(M3_20) => "Line ends are extended by M3_20 before doing any side to side space checks",
      xc(M3_21) => "B to C min space (fixed value for adjacent lines)",
      xc(M3_22) => "Every C line should have an adjacent B line at M3_21 space on atleast one side, along its entire length (allowed to have M3_42 ETE gaps)",
      xc(M3_23) => "M3CID and M3BID layers can be used to force/flip drawn B/C layers and must fully cover the Metal-3 lines.",
      xc(M3_37) => "Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M3_38",
      xc(M3_38) => "Min unrestricted space for rule M3_37",
      xc(M3_41) => "End-to-end space (min), when line-ends are completely aligned and lines are same type (B-B, C-C)",
      xc(M3_42) => "End-to-end space (min), when line-ends are not completely aligned or lines are of different type (B-C)",
      xc(M3_43) => "Line ends are extended by M3_43 on both sides before doing ETE space checks M3_41/42 ",
      xc(M3_44) => "All line ends for widths <= M3_45 must be a aligned or covered at M3_46 space ",
      xc(M3_45) => "Max width for M3_44 check ",
      xc(M3_46) => "Space at which the line ends must be aligned or covered (fixed value) for M3_44 check",
      xc(M3_47) => "Lines <= M3_45 wide cannot be isolated (cannot be exposed on both sides), must be next to another narrow or wide line ",
      xc(M3_48) => "Minimum overlap of adjacent line ends in opposite directions at minimum space",
      xc(M3_49) => "Minimum offset of adjacent line ends in opposite directions (line ends are extended by M3_43), applies to > M3_45 width wires",
      xc(M3_60) => "Min length of M3 line (any type, any width)",
      xc(M3_841) => "Minimum C line length, in PGD (>) ",
      xc(M3_842) => "Minimum C line width, in OGD (>)",
      xc(M3_941) => "Minimum C line length, in PGD (>)",
      xc(M3_942) => "Minimum C line width, in OGD (>)",
      xc(M4BB_21) => "B - B can skip a valid C line in between, that would create a valid B-C-B combination",
      xc(M4BB_22) => "(B) - (B) unrestricted space, minimum",
      xc(M4BB_31) => "(B) - (B) min multi-track-skip space (>)",
      xc(M4BB_32) => "(B) - (B) max multi-track-skip space (<)",
      xc(M4BB_33) => "Min width of B line next to the multi-track-skip space",
      xc(M4BB_34) => "Min width of C line next to the above B line next to the multi-track-skip space",
      xc(M4BB_35) => "The above B line next to the unrestricted space needs to be floating (no vias above or below) ",
      xc(M4BB_36) => "Maximum space in PGD (<) if rule M4BB_37 is not met",
      xc(M4BB_37) => "Maximum space in OGD (<) if rule M4BB_36 is not met",
      xc(M4BB_38) => "Min PGD space between multi-track-skip spaces",
      xc(M4BC_21) => "(B) to (C-B) unrestricted space, minimum",
      xc(M4CC_21) => "(B-C) - (C-B) pairs are allowed to skip a valid B in between. The B in the space must form a valid B-C-(B)-C-B combination ",
      xc(M4CC_27) => "(B-C) to (C-B) unrestricted space, minimum",
      xc(M4CC_28) => "For width <= 36 C to any C, in (B-C) - (C-B) pair, unrestricted space, minimum",
      xc(M4L_01) => "width_L_01",
      xc(M4L_02) => "width_L_02",
      xc(M4L_03) => "width_L_03",
      xc(M4L_05) => "width_L_05",
      xc(M4L_06) => "width_L_06",
      xc(M4L_07) => "width_L_07",
      xc(M4L_08) => "width_L_08",
      xc(M4L_09) => "width_L_09",
      xc(M4M_02) => "width_M_02",
      xc(M4M_03) => "width_M_03",
      xc(M4S_01) => "width_S_01",
      xc(M4S_02) => "width_S_02",
      xc(M4S_03) => "width_S_03",
      xc(M4S_04) => "width_S_04",
      xc(M4_00) => "Only Rectangular M4 shape is allowed and only allowed in OGD.",
      xc(M4_01) => "width_01 value (OGD only)",
      xc(M4_02) => "width_02 value (OGD only)",
      xc(M4_03) => "width_03 value (OGD only)",
      xc(M4_04) => "width_04 value (OGD only)",
      xc(M4_05) => "width_05 value (OGD only)",
      xc(M4_06) => "width_06 value (OGD only)",
      xc(M4_07) => "width_07 value (OGD only)",
      xc(M4_08) => "width_08 value (OGD only)",
      xc(M4_09) => "width_09 value (OGD only)",
      xc(M4_10) => "width_10 value (OGD/PGD)",
      xc(M4_101) => "2 adjacent jogs next to a width_01/02 lines is not allowed",
      xc(M4_102) => "Multi-track jog on one side and a facing one/multi-track jog on the other side of a width_01/02 line is not allowed",
      xc(M4_103) => "2 facing jogs, without a wire in between is not allowed",
      xc(M4_11) => "width_11 value (OGD only)",
      xc(M4_123) => "width_02/03 to width_03 space range min",
      xc(M4_124) => "width_02/03 to width_03 space range max",
      xc(M4_126) => "(B:28-36),(C:60-84) not allowed pairs",
      xc(M4_127) => "(B:40-46),(C:84) not allowed pairs",
      xc(M4_128) => "(B:54-84),(C:28-36) not allowed pairs",
      xc(M4_129) => "(B),(B)",
      xc(M4_130) => "(C),(C)",
      xc(M4_131) => "(B:28-36),(C:28-46),(B:28-36)",
      xc(M4_132) => "(B:28-46),(C:28-56),(B:40-46)",
      xc(M4_133) => "(B:28-36),(C:40-56),(B:54-84)",
      xc(M4_134) => "(B:40-46),(C:40-76),(B:54-84)",
      xc(M4_135) => "(B:54-84),(C:40-84),(B:54-84)",
      xc(M4_136) => "(B:28-36),(C:54-84),(B:28-36) not allowed B-C-B sets",
      xc(M4_137) => "(B:28-46),(C:60-84),(B:40-46) not allowed B-C-B sets",
      xc(M4_138) => "(B:28-36),(C:28-36,60-84),(B:54-84) not allowed B-C-B sets",
      xc(M4_139) => "(B:40-46),(C:28-36,84),(B:54-84) not allowed B-C-B sets",
      xc(M4_140) => "(B:54-84),(C:28-36),(B:54-84) not allowed B-C-B sets",
      xc(M4_141) => "(B:28),(C:56),(B:76) not allowed B-C-B sets",
      xc(M4_142) => "(B:28),(C:54),(B:76) not allowed B-C-B sets",
      xc(M4_147) => "Width <= 32nm (M4S_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M4_147",
      xc(M4_148) => "Width > 32nm (M4S_03) and <= 46nm (M4M_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M4_148",
      xc(M4_20) => "Line ends are extended by M4_20 before doing any side to side space checks",
      xc(M4_21) => "B to C min space (fixed value for adjacent lines)",
      xc(M4_22) => "Every C line should have an adjacent B line at M4_21 space on atleast one side, along its entire length (allowed to have M4_42 ETE gaps)",
      xc(M4_23) => "M4CID and M4BID layers can be used to force/flip drawn B/C layers and must fully cover the Metal-4 lines.",
      xc(M4_24) => "width_02 to width_02 space range max",
      xc(M4_249) => "Metal4 line <= width_04 (56nm) cannot have exposed edges on both side of the line end (see M4_250 exception to this rule)",
      xc(M4_25) => "width_02/03 to width_04-11 space range min",
      xc(M4_250) => "Metal4 line <= width_04 is allowed to have exposed edges, if the adjacent ETE meets M4_251/252/253, forming a line end bridge",
      xc(M4_251) => "Max adjacent ETE space (<=)",
      xc(M4_252) => "Max width of atleast one of the two lines forming the adjacent ETE space (<=)",
      xc(M4_253) => "Minimum overlap of the line ends forming the ETE space (>=)",
      xc(M4_26) => "width_02/03 to width_04-11 space range max",
      xc(M4_260) => "Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE can form a bridge defined by M4_251/252/253",
      xc(M4_261) => "Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE cannot form a bridge",
      xc(M4_262) => "Minimum overlap of > Width_03 (48nm) <= Width_04 (56nm) line end with an adjacent line in the opposite direction",
      xc(M4_27) => "width_04-07 to width_04-11 space range min",
      xc(M4_28) => "width_04-07 to width_04-11 space range max",
      xc(M4_31) => "width_01 is not allowed to be next to width_03 to width_11",
      xc(M4_32) => "width_08/09 to width_08-10 unrestricted space (min)",
      xc(M4_33) => "width_10/11 to width_10/11 unrestricted space (min)",
      xc(M4_37) => "Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M4_38",
      xc(M4_38) => "Min unrestricted space for rule M4_37",
      xc(M4_40) => "width_10 to width_10 unrestricted space (min)",
      xc(M4_41) => "End-to-end space (min), when line-ends are completely aligned and lines are same type (B-B, C-C)",
      xc(M4_42) => "End-to-end space (min), when line-ends are not completely aligned or lines are of different type (B-C)",
      xc(M4_43) => "Line ends are extended by M4_43 on both sides before doing ETE space checks M4_41/42 ",
      xc(M4_44) => "All line ends for widths <= M4_45 must be a aligned or covered at M4_46 space ",
      xc(M4_45) => "Max width for M4_44 check ",
      xc(M4_46) => "Space at which the line ends must be aligned or covered (fixed value) for M4_44 check",
      xc(M4_47) => "Lines <= M4_45 wide cannot be isolated (cannot be exposed on both sides), must be next to another narrow or wide line ",
      xc(M4_48) => "Minimum overlap of adjacent line ends in opposite directions at minimum space",
      xc(M4_49) => "Minimum offset of adjacent line ends in opposite directions (line ends are extended by M4_43), applies to > M4_45 width wires",
      xc(M4_51) => "Width_01-11 attacker to width_10 victim min space",
      xc(M4_52) => "Width_10 attacker to width_08-11 victim min space",
      xc(M4_53) => "Width_10 line cannot attack a width_01-07 victim",
      xc(M4_60) => "Min length of M4 line (any type, any width)",
      xc(M4_62) => "Min edge length of width_01-07 line",
      xc(M4_63) => "Min length of width_10 nub",
      xc(M4_65) => "Min length of holes",
      xc(M4_70) => "Minimum segment length",
      xc(M4_71) => "Minimum length of at least one segment, when two segments are adjacent at a corner",
      xc(M4_72) => "segments can be smaller than M4_70 if both adjacent segments are >= M4_73",
      xc(M4_73) => "Minimum segment lengths for M4_72",
      xc(M4_80) => "Corner-to-corner space, when corners have no overlap",
      xc(M4_81) => "Internal corner-to-corner width ",
      xc(M4_82) => "Width between facing concave corner extensions of opposite directions ",
      xc(M4_83) => "Min width of notched line section",
      xc(M4_84) => "Above rule applies to notch length less than",
      xc(M4_941) => "Minimum C line length, in OGD (>)",
      xc(M4_942) => "Minimum C line width, in PGD (>)",
      xc(M5BB_21) => "B - B can skip a valid C line in between, that would create a valid B-C-B combination",
      xc(M5BB_22) => "(B) - (B) unrestricted space, minimum",
      xc(M5BB_31) => "(B) - (B) min multi-track-skip space (>)",
      xc(M5BB_32) => "(B) - (B) max multi-track-skip space (<)",
      xc(M5BB_33) => "Min width of B line next to the multi-track-skip space",
      xc(M5BB_34) => "Min width of C line next to the above B line next to the multi-track-skip space",
      xc(M5BB_35) => "The above B line next to the unrestricted space needs to be floating (no vias above or below) ",
      xc(M5BB_36) => "Maximum space in OGD (<) if rule M5BB_37 is not met",
      xc(M5BB_37) => "Maximum space in PGD (<) if rule M5BB_36 is not met",
      xc(M5BB_38) => "Min OGD space between unrestricted spaces",
      xc(M5BC_21) => "(B) to (C-B) unrestricted space, minimum",
      xc(M5CC_21) => "(B-C) - (C-B) pairs are allowed to skip a valid B in between. The B in the space must form a valid B-C-(B)-C-B combination ",
      xc(M5CC_27) => "(B-C) to (C-B) unrestricted space, minimum",
      xc(M5CC_28) => "For width <= 36 C to any C, in (B-C) - (C-B) pair, unrestricted space, minimum",
      xc(M5L_01) => "width_L_01",
      xc(M5L_02) => "width_L_02",
      xc(M5L_03) => "width_L_03",
      xc(M5L_05) => "width_L_05",
      xc(M5L_06) => "width_L_06",
      xc(M5L_07) => "width_L_07",
      xc(M5L_09) => "width_L_09",
      xc(M5M_02) => "width_M_02",
      xc(M5M_03) => "width_M_03",
      xc(M5S_01) => "width_S_01",
      xc(M5S_02) => "width_S_02",
      xc(M5S_03) => "width_S_03",
      xc(M5S_04) => "width_S_04",
      xc(M5_00) => "Only Rectangular M5 shape is allowed and only allowed in PGD.",
      xc(M5_01) => "width_01 value (PGD only)",
      xc(M5_02) => "width_02 value (PGD only)",
      xc(M5_03) => "width_03 value (PGD only)",
      xc(M5_04) => "width_04 value (PGD only)",
      xc(M5_05) => "width_05 value (PGD only)",
      xc(M5_06) => "width_06 value (PGD only)",
      xc(M5_07) => "width_07 value (PGD only)",
      xc(M5_08) => "width_08 value (PGD only)",
      xc(M5_09) => "width_09 value (PGD only)",
      xc(M5_10) => "width_10 value (PGD/OGD)",
      xc(M5_101) => "2 adjacent jogs next to a width_01/02 lines is not allowed",
      xc(M5_102) => "Multi-track jog on one side and a facing one/multi-track jog on the other side of a width_01/02 line is not allowed",
      xc(M5_103) => "2 facing jogs, without a wire in between is not allowed",
      xc(M5_11) => "width_11 value (PGD only)",
      xc(M5_12) => "width_12 value (PGD only)",
      xc(M5_123) => "width_02/03 to width_03 space range min",
      xc(M5_124) => "width_02/03 to width_03 space range max",
      xc(M5_126) => "(B:28-36),(C:60-84) not allowed pairs",
      xc(M5_127) => "(B:40-46),(C:84) not allowed B-C-B pairs",
      xc(M5_128) => "(B:56-84),(C:28-36) not allowed pairs",
      xc(M5_129) => "(B),(B)",
      xc(M5_13) => "width_13 value (PGD only)",
      xc(M5_130) => "(C),(C)",
      xc(M5_131) => "(B:28-36),(C:28-46),(B:28-36)",
      xc(M5_132) => "width_08/09 to width_11 unrestricted space (min)",
      xc(M5_133) => "(B:28-36),(C:40-56),(B:56-84)",
      xc(M5_134) => "(B:40-46),(C:40-76),(B:56-84)",
      xc(M5_135) => "(B:56-84),(C:40-84),(B:56-84)",
      xc(M5_136) => "(B:28-36),(C:56-84),(B:28-36) not allowed B-C-B sets",
      xc(M5_137) => "(B:28-46),(C:60-84),(B:40-46) not allowed B-C-B sets",
      xc(M5_138) => "(B:28-36),(C:28-36,60-84),(B:56-84) not allowed B-C-B sets",
      xc(M5_139) => "(B:40-46),(C:28-36,84),(B:56-84) not allowed B-C-B sets",
      xc(M5_14) => "width_14 value (PGD only)",
      xc(M5_140) => "(B:56-84),(C:28-36),(B:56-84) not allowed B-C-B sets",
      xc(M5_141) => "(B:28),(C:56),(B:76)",
      xc(M5_147) => "Width <= 32nm (M5S_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M5_147",
      xc(M5_148) => "Width > 32nm (M5S_03) and <= 46nm (M5M_03) flanked on both sides by adjacent line ends in opposite directions must have overlap >= M5_148",
      xc(M5_149) => "Metal5 line <= width_04 cannot have exposed edges (see M5_150 exception to this rule)",
      xc(M5_15) => "width_15 value (PGD only)",
      xc(M5_150) => "Metal5 line <= width_04 is allowed to have exposed edges, if the adjacent ETE meets M5_151/152/153",
      xc(M5_151) => "Max adjacent ETE space (<=)",
      xc(M5_152) => "Max width of atleast one of the two lines forming the adjacent ETE space (<=)",
      xc(M5_153) => "Minimum overlap (in OGD) of the facing line ends forming the ETE space (>=)",
      xc(M5_16) => "width_13/14/15 must be rectangles only (no jog or junction allowed)",
      xc(M5_160) => "Minimum overlap (in PGD) of Width_04 line end with an adjacent line in the opposite direction, if the ETE space of the width_04 line is = M5_161 ",
      xc(M5_161) => "Fixed ETE space for M5_160 (=), and Minimum ETE space for M5_162 (>)",
      xc(M5_162) => "Minimum overlap (in PGD) of Width_04 line end with an adjacent line in the opposite direction, if the ETE space of the width_04 line is > M5_161 ",
      xc(M5_20) => "Line ends are extended by M5_20 before doing any side to side space checks",
      xc(M5_21) => "width_01 to width_01/02 space range min",
      xc(M5_22) => "width_01 to width_01/02 space range max",
      xc(M5_23) => "width_02 to width_02 space range min",
      xc(M5_24) => "width_02 to width_02 space range max",
      xc(M5_249) => "Metal5 line <= width_04 (56nm) cannot have exposed edges on both side of the line end (see M5_250 exception to this rule)",
      xc(M5_25) => "width_02/03 to width_04-12 space range min",
      xc(M5_250) => "Metal5 line <= width_04 is allowed to have exposed edges, if the adjacent ETE meets M5_251/252/253, forming a line end bridge",
      xc(M5_251) => "Max adjacent ETE space (<=)",
      xc(M5_252) => "Max width of at least one of the two lines forming the adjacent ETE space (<=)",
      xc(M5_253) => "Minimum overlap of the line ends forming the ETE space (>=)",
      xc(M5_26) => "width_02/03 to width_04-12 space range max",
      xc(M5_260) => "Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE can form a bridge defined by M4_251/252/253",
      xc(M5_261) => "Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE cannot form a bridge",
      xc(M5_262) => "Minimum overlap of > Width_03 (48nm) <= Width_04 (56nm) line end with an adjacent line in the opposite direction",
      xc(M5_27) => "width_12/04-07 to width_04-12 space range min",
      xc(M5_28) => "width_12/04-07 to width_04-12 space range max",
      xc(M5_31) => "width_01 is not allowed to be next to width_03 to width_15",
      xc(M5_32) => "width_08/09 to width_08-10 unrestricted space (min)",
      xc(M5_33) => "width_10/11 to width_10/11 unrestricted space (min)",
      xc(M5_34) => "width_13/14/15 to width 08-11/13-15 unrestricted space (min)",
      xc(M5_35) => "width_13/14/15 are not allowed to be next to width_01-07/12",
      xc(M5_37) => "Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M5_38",
      xc(M5_38) => "width_02 cannot be between two width_10/11 lines",
      xc(M5_40) => "width_10 to width_10 unrestricted space (min)",
      xc(M5_41) => "Metal5 end-to-end space (min)",
      xc(M5_42) => "End-to-end space (min), when line-ends are not completely aligned or lines are of different type (B-C)",
      xc(M5_43) => "Line ends are extended by M5_43 on both sides before doing ETE space checks M5_41/42 ",
      xc(M5_44) => "Width_01/02 to width_01-15 end-to-end space (min) if overlap between facing ends is < M5_45",
      xc(M5_45) => "Max overlap between facing line ends for rule M5_44",
      xc(M5_46) => "Maximum allowed length of exposed edge of a width_01-07/12 line",
      xc(M5_47) => "Min ETE space between a <=M5_03 line and a <=M5_07 line, when the line ends are not facing each other (The line ends of the <=M5_03 wide lines are extended by M5_48 prior to this check)",
      xc(M5_48) => "Line end extensions of the <=M5_03 width lines for M5_47 check",
      xc(M5_49) => "Minimum offset of adjacent line ends in opposite directions (line ends are extended by M5_43), applies to > M5_45 width wires",
      xc(M5_51) => "Width_01-15 attacker to width_10 victim min space",
      xc(M5_52) => "Width_10 attacker to width_08-15 victim min space",
      xc(M5_53) => "Width_10 line cannot attack a width_01-07/12 victim",
      xc(M5_60) => "Min length of width_01-15 lines",
      xc(M5_62) => "Min edge length of width_01-07/12 line",
      xc(M5_63) => "Min length of width_10 nub",
      xc(M5_65) => "Min length of holes",
      xc(M5_70) => "Minimum segment length",
      xc(M5_71) => "Minimum length of at least one segment, when two segments are adjacent at a corner",
      xc(M5_72) => "A segment can be smaller than M5_70 if it has two adjacent segments >= M5_73",
      xc(M5_73) => "Minimum segment lengths for rule M5_72",
      xc(M5_74) => "M5_72 segment to line end space",
      xc(M5_80) => "Min Corner-to-corner space, when corners have no overlap",
      xc(M5_81) => "Min Internal corner-to-corner width ",
      xc(M5_82) => "Min Width between facing concave corner extensions of opposite directions ",
      xc(M5_83) => "Min width of notched line section",
      xc(M5_84) => "Rule M5_83 applies to notch length less than M5_84",
      xc(M5_941) => "Minimum C line length, in PGD (>)",
      xc(M5_942) => "Minimum C line width, in OGD (>)",
      xc(M5err_00) => "Metal5 width_00 value (PGD only)",
      xc(M6_00) => "width_00 value (OGD only)",
      xc(M6_01) => "width_01 value (OGD only)",
      xc(M6_02) => "width_02 value (OGD only)",
      xc(M6_03) => "width_03 value (OGD only)",
      xc(M6_04) => "width_04 value (OGD only)",
      xc(M6_05) => "width_05 value (OGD only)",
      xc(M6_06) => "width_06 value (OGD only)",
      xc(M6_07) => "width_07 value (OGD only)",
      xc(M6_08) => "width_08 value (OGD only)",
      xc(M6_09) => "width_09 value (OGD only)",
      xc(M6_10) => "width_10 value (OGD/PGD)",
      xc(M6_101) => "2 adjacent jogs next to a width_01/02 lines is not allowed",
      xc(M6_102) => "Multi-track jog on one side and a facing one/multi-track jog on the other side of a width_01/02 line is not allowed",
      xc(M6_103) => "2 facing jogs, without a wire in between is not allowed",
      xc(M6_11) => "width_11 value (OGD only)",
      xc(M6_12) => "width_12 value (OGD only)",
      xc(M6_123) => "width_02/03 to width_03 space range min",
      xc(M6_124) => "width_02/03 to width_03 space range max",
      xc(M6_13) => "width_13 value (OGD only)",
      xc(M6_132) => "width_08/09 to width_11 unrestricted space (min)",
      xc(M6_14) => "width_14 value (OGD only)",
      xc(M6_149) => "Metal6 line <= width_04 cannot have exposed edges (see M6_150 exception to this rule)",
      xc(M6_15) => "width_15 value (OGD only)",
      xc(M6_150) => "Metal6 line <= width_04 is allowed to have exposed edges, if the adjacent ETE meets M6_151/152/153",
      xc(M6_151) => "Max adjacent ETE space (<=)",
      xc(M6_152) => "Max width of atleast one of the two lines forming the adjacent ETE space (<=)",
      xc(M6_153) => "Minimum overlap (in PGD) of the facing line ends forming the ETE space (>=)",
      xc(M6_16) => "width_13/14/15 must be rectangles only (no jog or junction allowed)",
      xc(M6_160) => "Minimum overlap (in OGD) of Width_04 line end with an adjacent line in the opposite direction, if the ETE space of the width_04 line is = M6_161 ",
      xc(M6_161) => "Fixed ETE space for M6_160 (=), Minimum ETE space for M6_162 (>)",
      xc(M6_162) => "Minimum overlap (in OGD) of Width_04 line end with an adjacent line in the opposite direction, if the ETE space of the width_04 line is > M6_161 ",
      xc(M6_21) => "width_01 to width_01/02 space range min",
      xc(M6_22) => "width_01 to width_01/02 space range max",
      xc(M6_23) => "width_02 to width_02 space range min",
      xc(M6_24) => "width_02 to width_02 space range max",
      xc(M6_249) => "Metal6 line <= width_04 (56nm) cannot have exposed edges on both side of the line end (see M6_250 exception to this rule)",
      xc(M6_25) => "width_02/03 to width_04-12 space range min",
      xc(M6_250) => "Metal6 line <= width_04 is allowed to have exposed edges, if the adjacent ETE meets M6_251/252/253, forming a line end bridge",
      xc(M6_251) => "Max adjacent ETE space (<=)",
      xc(M6_252) => "Max width of at least one of the two lines forming the adjacent ETE space (<=)",
      xc(M6_253) => "Minimum overlap of the line ends forming the ETE space (>=)",
      xc(M6_26) => "width_02/03 to width_04-12 space range max",
      xc(M6_260) => "Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE can form a bridge defined by M4_251/252/253",
      xc(M6_261) => "Minimum overlap of <= Width_03 (48nm) line end with an adjacent line in the opposite direction, if the ETE cannot form a bridge",
      xc(M6_262) => "Minimum overlap of > Width_03 (48nm) <= Width_04 (56nm) line end with an adjacent line in the opposite direction",
      xc(M6_27) => "width_12/04-07 to width_04-12 space range min",
      xc(M6_28) => "width_12/04-07 to width_04-12 space range max",
      xc(M6_31) => "width_01 is not allowed to be next to width_03 to width_15",
      xc(M6_32) => "width_08/09 to width_08-10 unrestricted space (min)",
      xc(M6_33) => "width_10/11 to width_10/11 unrestricted space (min)",
      xc(M6_34) => "width_13/14/15 to width 08-11/13-15 unrestricted space (min)",
      xc(M6_35) => "width_13/14/15 are not allowed to be next to width_01-07/12",
      xc(M6_37) => "max edge lengths that can violate the forbidden spaces if space  between the edges is >=M6_38",
      xc(M6_38) => "width_02 cannot be between two width_10/11 lines",
      xc(M6_40) => "width_10 to width_10 unrestricted space (min)",
      xc(M6_41) => "Metal6 end-to-end space (min)",
      xc(M6_44) => "Width_01/02 to width_01-15 end-to-end space (min) if overlap between facing ends is < M6_45",
      xc(M6_45) => "Max overlap between facing line ends for rule M6_44",
      xc(M6_46) => "Maximum allowed length of exposed edge of a width_01-07/12 line",
      xc(M6_47) => "Min ETE space between a <=M6_03 line and a <=M6_07 line, when the line ends are not facing each other (The line ends of the <=M6_03 wide lines are extended by M6_48 prior to this check)",
      xc(M6_48) => "Line end extensions of the <=M6_03 wide line for M6_47 check",
      xc(M6_51) => "Width_01-15 attacker to width_10 victim min space",
      xc(M6_52) => "Width_10 attacker to width_08-15 victim min space",
      xc(M6_53) => "Width_10 line cannot attack a width_01-07/12 victim",
      xc(M6_60) => "Min length of width_01-15 lines",
      xc(M6_62) => "Min edge length of width_01-07/12 line",
      xc(M6_63) => "Min length of width_10 nub",
      xc(M6_65) => "Min length of holes",
      xc(M6_70) => "Minimum segment length",
      xc(M6_71) => "Minimum length of at least one segment, when two segments are adjacent at a corner",
      xc(M6_72) => "A segment can be smaller than M6_70 if it has two adjacent segments >= M6_73",
      xc(M6_73) => "Minimum segment lengths for rule M6_72",
      xc(M6_80) => "Min Corner-to-corner space, when corners have no overlap",
      xc(M6_81) => "Min Internal corner-to-corner width ",
      xc(M6_82) => "Min Width between facing concave corner extensions of opposite directions ",
      xc(M6_83) => "Min width of notched line section",
      xc(M6_84) => "Rule M6_83 applies to notch length less than M6_84",
      xc(M7_00) => "width_00 value (PGD only)",
      xc(M7_01) => "width_01 value (PGD only)",
      xc(M7_02) => "width_02 value (PGD only)",
      xc(M7_03) => "width_03 value (PGD/OGD)",
      xc(M7_04) => "width_04 value (PGD only)",
      xc(M7_05) => "width_05 value (PGD only)",
      xc(M7_06) => "width_06 value (PGD only)",
      xc(M7_07) => "width_07 value (PGD only)",
      xc(M7_08) => "width_08 value (PGD only)",
      xc(M7_09) => "width_09 value (PGD only)",
      xc(M7_21) => "width_01/02 to width_01/02 space range1 min",
      xc(M7_22) => "width_01/02 to width_01/02 space range1 max",
      xc(M7_23) => "width_00/01 to width_00-09 space range2 min",
      xc(M7_24) => "width_00/01 to width_00-09 space range2 max",
      xc(M7_25) => "width_00/01 to width_00-09 unrestricted space min",
      xc(M7_26) => "width_01/02 to width_03/04/05/06/07 space range1 min",
      xc(M7_27) => "width_01/02 to width_03/04/05/06/07 space range1 max",
      xc(M7_31) => "width_03/04 to width_03/04 unrestricted space (min)",
      xc(M7_32) => "width_03/0405/06/07 to width_05/06/07 unrestricted space (min)",
      xc(M7_35) => "width_03 to width_03 unrestricted space (min) ",
      xc(M7_37) => "Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M7_38",
      xc(M7_38) => "Min unrestricted space for rule M7_37",
      xc(M7_41) => "width_01/02/03/04/05/06/07 to width_01/02/03/04/05/06/07 end-to-end space (min)",
      xc(M7_51) => "width_03 attacker to width_01/02/03/04/05/06/07 victim unrestricted space OGD (min)",
      xc(M7_52) => "width_01/02/03/04/05/06/07 attacker to width_03 victim unrestricted space PGD (min)",
      xc(M7_60) => "Min length for all widths",
      xc(M7_65) => "Min length of holes",
      xc(M7_70) => "Minimum segment length",
      xc(M7_71) => "Minimum length of at least one segment, when two segments are adjacent at a corner",
      xc(M7_72) => "A segment can be smaller than M7_70 if it has two adjacent segments >= M7_73",
      xc(M7_73) => "Minimum segment lengths for rule M7_72",
      xc(M7_74) => "Minimum M7_72 segment to line end space",
      xc(M7_80) => "Min Corner-to-corner space, when corners have no overlap",
      xc(M7_81) => "Min Internal corner-to-corner width ",
      xc(M7_82) => "Min Width between facing concave corner extensions of opposite directions ",
      xc(M7_83) => "Min width of notched line section",
      xc(M7_84) => "Rule M7_83 applies to notch length less than M7_84",
      xc(M7err_00) => "Metal7 width_00 value (PGD only)",
      xc(M7err_01) => "Metal7 width_01 value (PGD only)",
      xc(M7err_08) => "Metal7 width_08 value (PGD only)",
      xc(M8_00) => "width_00 value (OGD only)",
      xc(M8_01) => "width_01 value (OGD only)",
      xc(M8_02) => "width_02 value (OGD only)",
      xc(M8_03) => "width_03 value (OGD/PGD)",
      xc(M8_04) => "width_04 value (OGD only)",
      xc(M8_05) => "width_05 value (OGD only)",
      xc(M8_06) => "width_06 value (OGD only)",
      xc(M8_07) => "width_07 value (OGD only)",
      xc(M8_08) => "width_08 value (OGD only)",
      xc(M8_09) => "width_09 value (OGD only)",
      xc(M8_10) => "width_10 value (OGD only)",
      xc(M8_121) => "width_06 to width_06 space, fixed space exception (fixed value)",
      xc(M8_20) => "width_01 wire cannot be sandwiched between two width_03/05/06/09/10 wires at min space on both sides",
      xc(M8_21) => "width_00 to width_00-05 space range1 min",
      xc(M8_22) => "width_00 to width_00-05 space range1 max",
      xc(M8_23) => "width_00 to width_00-08 space range2 min",
      xc(M8_24) => "width_00 to width_00-08 space range2 max",
      xc(M8_25) => "width_00 to width_00-08 unrestricted space min",
      xc(M8_26) => "width_00 to width_06/07/08 space range1 min",
      xc(M8_27) => "width_00 to width_06/07/08 space range1 max",
      xc(M8_32) => "width_02-08 to width_02-08 unrestricted space (min)",
      xc(M8_35) => "width_03 to width_03 unrestricted space (min) ",
      xc(M8_37) => "Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M8_38",
      xc(M8_38) => "Min unrestricted space for rule M8_37",
      xc(M8_41) => "Metal8 end-to-end space (min)",
      xc(M8_42) => "Metal8 end-to-end space for width_01 line to any line (min)",
      xc(M8_50) => "Width_02/03 attacker (PGD) to width_01 victim (OGD) is not allowed.  Width_01 victim must be shielded by parallel rectangular-only width_03/05/06/09/10 wire.",
      xc(M8_51) => "width_03 attacker to width_00-08 victim unrestricted space OGD (min)",
      xc(M8_52) => "width_00-08 attacker to width_03 victim unrestricted space PGD (min)",
      xc(M8_60) => "Min length for all widths",
      xc(M8_65) => "Min length of holes",
      xc(M8_70) => "Minimum segment length",
      xc(M8_71) => "Minimum length of at least one segment, when two segments are adjacent at a corner",
      xc(M8_80) => "Min Corner-to-corner space, when corners have no overlap",
      xc(M8_81) => "Min Internal corner-to-corner width ",
      xc(M8_82) => "Min Width between facing concave corner extensions of opposite directions ",
      xc(M8_83) => "Min width of notched line section",
      xc(M8_84) => "Rule M8_83 applies to notch length less than M8_84",
      xc(M8err_00) => "Metal8 width_00 value (OGD only)",
      xc(M8err_09) => "Metal8 width_09 value (OGD only)",
      xc(M8err_21) => "BDW-specific Metal8 min space (values less than this are disallowed)",
      xc(M9_00) => "width_00 value (PGD only)",
      xc(M9_01) => "M9 width, minimum",
      xc(M9_02) => "width_02 value (PGD only)",
      xc(M9_03) => "width_03 value (PGD)",
      xc(M9_04) => "width_04 value (PGD/OGD)",
      xc(M9_05) => "width_05 value (PGD only)",
      xc(M9_06) => "width_06 value (PGD only)",
      xc(M9_07) => "width_07 value (PGD only)",
      xc(M9_08) => "width_08 value (PGD only)",
      xc(M9_09) => "width_09 value (PGD only)",
      xc(M9_121) => "width_07 to width_07 space, fixed space exception",
      xc(M9_20) => "width_01 wire cannot be sandwiched between two width_04/06/07/08 wires at min space on both sides",
      xc(M9_21) => "width_00 to width_00-06 space range1 min",
      xc(M9_22) => "width_00 to width_00-06 space range1 max",
      xc(M9_23) => "width_00 to width_00-09 space range2 min",
      xc(M9_24) => "width_00 to width_00-09 space range2 max",
      xc(M9_25) => "width_00 to width_00-09 unrestricted space min",
      xc(M9_26) => "width_00 to width_07-09 space range1 min",
      xc(M9_27) => "width_00 to width_07-09 space range1 max",
      xc(M9_32) => "width_02-09 to width_02-09 unrestricted space (min)",
      xc(M9_35) => "width_04 to width_04 unrestricted space (min) ",
      xc(M9_37) => "Max facing edge lengths that can violate a forbidden space value if the space between the facing edges is >=M9_38",
      xc(M9_38) => "Min unrestricted space for rule M9_37",
      xc(M9_41) => "Metal8 end-to-end space (min)",
      xc(M9_42) => "Metal9 end-to-end space width_01 line to any line (min)",
      xc(M9_43) => "Min M9 coverage of Square Via8 orthogonal edge",
      xc(M9_50) => "width_02/04 attacker (OGD) to width_01 victim (PGD) is not allowed.  Width_01 victim must be shielded (physically) by parallel rectangular-only width_04/06/07/08 wire.",
      xc(M9_51) => "width_04 attacker to width_00-09 victim unrestricted space PGD (min)",
      xc(M9_52) => "width_00-09 attacker to width_04 victim unrestricted space OGD (min)",
      xc(M9_60) => "Min length for all widths",
      xc(M9_65) => "Min length of holes",
      xc(M9_70) => "Minimum segment length",
      xc(M9_71) => "Minimum length of at least one segment, when two segments are adjacent at a corner",
      xc(M9_80) => "Min Corner-to-corner space, when corners have no overlap",
      xc(M9_81) => "Min Internal corner-to-corner width ",
      xc(M9_82) => "Min Width between facing concave corner extensions of opposite directions ",
      xc(M9_83) => "Min width of notched line section",
      xc(M9_84) => "Rule M9_83 applies to notch length less than M9_84",
      xc(MC_01) => "Outer edges of the PRS cells must be line-on-line with the EDM cells boundary.",
      xc(MC_02) => "CE1/2 cannot overlap the PRS cells ",
      xc(MC_03) => "CE1/2 cannot overlap the logo cells",
      xc(MIM_01) => "CE1/2 width min",
      xc(MIM_02) => "CE1/2 space min",
      xc(MIM_03) => "Minimum offset between CE1-CE2 edges",
      xc(MIM_04) => "Minimum overlap between CE1-CE2 layers",
      xc(MIM_05) => "CE1-CE2 edges cannot cross each other",
      xc(MIM_06) => "CE2 must be between CE1 and CE3 (minimum size holes around via11 are the exception to this requirement)",
      xc(MIM_07) => "CE2 must enclose CE1 edges",
      xc(MIM_22) => "Min required CE1/2 hole area (sq um)",
      xc(MIM_23) => "Minimum CE1/2 jog length",
      xc(MIM_25) => "Min required CE1/2 area (sq um)",
      xc(MIM_26) => "Max extent of CE1/2",
      xc(MIM_51) => "Minimum CE1/2 enclosure of Via12 (all directions)",
      xc(MIM_52) => "Min Via12 space to unconnected CE1/2",
      xc(MIM_53) => "Via12 cannot land on overlapping CE1/2",
      xc(MIM_54) => "Min Via12 space to unconnected CE1, when Via12 is connected to 0 or 1 capacitor plates",
      xc(MIM_55) => "Min Via12 space to unconnected CE2, when Via12 is connected to 0 or 1 capacitor plates",
      xc(MIM_61) => "CE1/2 electrode layers cannot be used as a resistor, must have a M12 or TM1 shunt",
      xc(MIM_62) => "CE1 must be at a higher potential than CE2 (except for stacked HV/EHV/UHV MIM caps)",
      xc(MIM_63) => "CE1/2 cannot be connected to HV/EHV/UHV unless properly stacked",
      xc(MIM_71) => "In double stacked MIM cap configuration, HV/EHV(CE1)-floating(CE2) and floating(CE2)-VSS(CE1) caps are connected by a common floating CE2",
      xc(MIM_72) => "Max area ratio of VSS CE1-floating CE2 cap to HV/EHV CE1-floating CE2 cap in a double stack",
      xc(MIM_73) => "Min area ratio of VSS CE1-floating CE2 cap to HV/EHV CE1-floating CE2 cap in a double stack",
      xc(MIM_74) => "CE1 and CE3 must be shorted when used as a parallel capacitor and CE1/3 must be at a higher potential than CE2 (max voltage 1.0V - nom voltage)",
      xc(MIM_75) => "CE1/2/3 cannot be used as a series cap with CE2 floating, there cannot be a floating plate in any capacitor configuration",
      xc(MIM_81) => "In triple stacked MIM cap configuration, UHV(CE1)-floating(CE2), floating(CE2)-floating(CE1), floating(CE1)-VSS(CE2) caps are connected by common floating CE1/CE2",
      xc(MIM_82) => "Max area ratio of middle cap (floating CE2-floating CE1) to top (UHV CE1-floating CE2) or bottom (floating CE1-VSS CE2) caps in a triple stack",
      xc(MIM_83) => "Min area ratio of middle cap (floating CE2-floating CE1) to top (UHV CE1-floating CE2) or bottom (floating CE1-VSS CE2) caps in a triple stack",
      xc(MJ0_01) => "MTJID enclosure of MJ0 in OGD (fixed)",
      xc(MJ0_02) => "No cuts allowed on first two dummy Metal2 above/below MJ0 within MTJID",
      xc(MJ0_03) => "No GCN, V1, M2 allowed inside MJ0",
      xc(MJ0_04) => "No jogs allowed in MTJID",
      xc(MJ0_05) => "Min space from dummy M2 to MJ0 (in PGD)",
      xc(MJ0_06) => "Max space from dummy M2 to MJ0 (in PGD)",
      xc(MJ0_07) => "Fixed space from dummy M2 end to MJ0 (in OGD)",
      xc(MJ0_08) => "Minimum space between MJ0 ",
      xc(MJ0_09) => "Minimum width of MJ0",
      xc(MTJ_01) => "M2 KeepGenAway layer (TC only) needs to be line-on-line with MTJID",
      xc(MTJ_02) => "M2 keepout layer (STT_MRAM circuit array) needs to be line-on-line with MTJID",
      xc(MTJ_03) => "MTJ fixed width (in OGD)",
      xc(MTJ_04) => "MTJ fixed length (in PGD)",
      xc(MTJ_05) => "MTJ fixed pitch (in OGD) in large bitcell (under STTRAMID2)",
      xc(MTJ_06) => "MTJ minimum pitch (in OGD) in small bitcell (under STTRAMID1)",
      xc(MTJ_07) => "MTJ fixed pitch (in PGD)",
      xc(MTJ_08) => "Inside a single MJ0, either large bitcells or small bitcells are allowed - not BOTH",
      xc(MTJ_09) => "MJO enclosure of MTJ (only allowed value)",
      xc(MTJ_10) => "STTRAMID1, STTRAMID2 must be line-line with MTJID",
      xc(MTJ_11) => "Via2 must be centered on MTJ",
      xc(MTJ_12) => "Via2 length (in OGD) allowed over MTJ",
      xc(MTJ_13) => "Via2 width (in PGD) allowed over MTJ",
      xc(MTJ_14) => "M1 must be centered under MTJ",
      xc(MTJ_15) => "MTJ enclosure of M1 (both OGD and PGD), only allowed value",
      xc(NW_01) => "Min N-well space to N+ active (all directions), P+ tap (OGD)",
      xc(NW_03) => "Min N-well enclosure of P+ active (all directions), N+ tap (OGD)",
      xc(NW_12) => "Min N-well width",
      xc(NW_128) => "Maximum distance from P active diff with gate in the well to a well tap, for I/O and high voltage wells and pad-connected diffusions, also applies to all non-logic gates such as thick gate.",
      xc(NW_129) => "Maximum distance from N active diff with gate in the p-well to a sub tap, for I/O and high voltage wells and pad-connected diffusions, also applies to all non-logic gates such as thick gate.",
      xc(NW_14) => "Min N-well space",
      xc(NW_17) => "Min required drawn N-well area (in sq um)",
      xc(NW_18) => "Min required drawn N-well hole area (in sq um)",
      xc(NW_21) => "Min N+ active diffusion space to high voltage nwells",
      xc(NW_22) => "Min P+ active diffusion enclosure by high voltage nwell",
      xc(NW_23) => "Min N-well convex corner enclosure of P+ active diffusion corner",
      xc(NW_24) => "Min N-well concave corner space to N+ active diffusion corner",
      xc(NW_25) => "Minimum N-well segment lengths, when both adjacent at a corner (if one segment is <NW_25, then the other segment must be >=NW_25)",
      xc(NW_28) => "Maximum distance from P active diff with gate in the well to a well tap, for nominal voltage wells",
      xc(NW_29) => "Maximum distance from N active diff with gate in the p-well to a sub tap, for nominal voltage wells",
      xc(NW_30) => "Minimum nwell pitch",
      xc(NW_31) => "Min N-well space to P+ tap (PGD)",
      xc(NW_33) => "Min N-well enclosure of N+ tap (PGD)",
      xc(NW_35) => "Maximum nwell length when width is less than NW_35",
      xc(NW_36) => "Maximum N-well facing edge length, if space is less than NW_36",
      xc(NW_41) => "N-well segment lengths less than this value are subject to rules NW_42/43 on the adjacent edges",
      xc(NW_42) => "Forbidden adjacent edge length range min (>)",
      xc(NW_43) => "Forbidden adjacent edge length range max (<)",
      xc(NW_55) => "Min N-well enclosure of N+ tap diff (in all directions) near short n-well jog <=NW_57",
      xc(NW_56) => "Min N-well space to P+ tap diff (in all directions) near short n-well jog <=NW_57",
      xc(NW_57) => "Max length of short NWL jog for which rules NW_55,NW_56 apply",
      xc(NW_58) => "Min N+ tap diff or P+ tap diff distance to NWL edge when facing an opposite-type tap spaced at <NW_58 from the NWL edge",
      xc(NW_59) => "Maximum allowed open/unfilled N-well area of >= NW_60 width (in sq um)",
      xc(NW_60) => "Runset check value for NW_59 (Max width of open/unfilled NWL area for which rule NW_59 applies)",
      xc(NW_71) => "Maximum N-well area (n-well sections < NW_73 width are ignored before the NW_71 check), sq um",
      xc(NW_73) => "N-well width exception for rule NW_71 (um)",
      xc(NW_74) => "N-well holes of area <= NW_74 are closed before the NW_71 check (um^2)",
      xc(PC_00) => "Only Rectangular Polycon shape is allowed and only allowed with length perpendicular to gate-direction.",
      xc(PC_01) => "Polycon width, fixed value",
      xc(PC_02) => "Min required Polycon length",
      xc(PC_04) => "All Polycon center lines must be on a 21nm pitch grid across the whole die",
      xc(PC_20) => "Polycon line extension for all polycon side-to-side space checks (except PC_91/92 space check which uses PC_93 extension)",
      xc(PC_21) => "Min Polycon side-to-side space",
      xc(PC_23) => "Polycon side-to-side forbidden space (fixed value)",
      xc(PC_25) => "Min Polycon end-to-end space, when facing ends are aligned",
      xc(PC_31) => "Min Polycon end-to-end (ETE) space, when facing ends are not aligned (ends extended by PC_32)",
      xc(PC_32) => "Polycon line end extensions for PC_31 check",
      xc(PC_33) => "Max Polycon ETE space, on at least one end, when Polycon is short (length < PC_34)",
      xc(PC_34) => "Max Polycon length for PC_33 check (<)",
      xc(PC_35) => "Min offset between non-overlapping line-ends in opposite directions, when at a PC_21 side-to-side space",
      xc(PC_36) => "Minimum overlap between line-ends in opposite directions, when at a PC_21 side-to-side space. PC_36 overlap is allowed when the ETE space to the same-track GCN is >= PC_56 or the length of all the adjacent GCNs is >=PC_57",
      xc(PC_41) => "Poly overlap of polycon (PGD) for PC_42 (fixed value)",
      xc(PC_42) => "Min Polycon end overlap of poly for PC_41",
      xc(PC_43) => "Min Polycon side space to poly line-end (PGD)",
      xc(PC_44) => "Min Polycon end space to poly side (OGD)",
      xc(PC_444) => "Min Polycon side space to poly line-end in TG/TGULV pitch regions",
      xc(PC_45) => "Min Poly overlap of polycon (PGD) for PC_46",
      xc(PC_46) => "Min Polycon end extension beyond poly side for PC_45",
      xc(PC_50) => "End-to-End space < PC_51 cannot be enclosed by adjacent-GCN overlaps < PC_52 on 3 or more corners (out of 4)",
      xc(PC_51) => "End-to-End space that triggers PC_50 check (<)",
      xc(PC_52) => "Overlap between adjacent (PC_21-spaced) line ends in opposite directions that trigger the PC_50 check (<)",
      xc(PC_53) => "If Polycon length is < PC_34, and end-to-end (ETE) space is <= PC_54, then any adjacent line-ends at PC_21 side spacing must be fully aligned with the ETE space",
      xc(PC_54) => "Max Polycon ETE space for PC_53 check (<=)",
      xc(PC_55) => "If ETE space is < PC_56 and length is < PC_57, then min overlap between line <PC_57 and an adjacent line at PC_21 side spacing must be >= PC_55",
      xc(PC_56) => "Min Polycon end-to-end space to allow PC_36 overlap (in the adjacent track)",
      xc(PC_57) => "Min length of the 3 adjacent GCNs to allow PC_36 overlap",
      xc(PC_61) => "Min Polycon side space to active gate/diffusion OGD edge (no restriction for dummy gates)",
      xc(PC_81) => "Min Polycon space to Diffcon",
      xc(PC_82) => "Diffcon overlap of Polycon in PGD for PC_83, fixed value",
      xc(PC_83) => "Min Polycon end overlap of Diffcon in OGD for PC_82",
      xc(PC_84) => "Min Diffcon overlap of Polycon in PGD for PC_85",
      xc(PC_85) => "Min Polycon end extension beyond Diffcon side (OGD) for PC_84",
      xc(PC_91) => "=PC_21 and =PC_92 PGD spaces on opposite sides of a GCN are not allowed",
      xc(PC_92) => "Space for the PC_91 check (fixed value)",
      xc(PC_93) => "Polycon line extension (OGD) for PC_91/92 side-to-side space checks only",
      xc(PG_01) => "Poly check grid width: fixed value, OGD only",
      xc(PG_02) => "Poly check grid Pitch: fixed value, OGD only",
      xc(PG_03) => "Poly check grid must be continuous across the complete length of the active die",
      xc(PG_04) => "Poly check grid OGD space to edge of active die (EOA), fixed value",
      xc(PG_05) => "Poly check grid must centered in drawn digital Poly space",
      xc(PL_00) => "Only Rectangular, Uni-directional Poly shape is allowed",
      xc(PL_01) => "Poly width, ONLY ALLOWED value",
      xc(PL_02) => "Poly pitch, ONLY ALLOWED value",
      xc(PL_03) => "Min required Poly length with no restrictions",
      xc(PL_04) => "Poly Short end-to-end space, fixed value (cannot be isolated)",
      xc(PL_05) => "Poly Long end-to-end space, fixed value",
      xc(PL_06) => "Poly Long end-to-end space, maximum of allowed range",
      xc(PL_07) => "Poly Medium end-to-end space, fixed value",
      xc(PL_08) => "Poly Long end-to-end space, minimum of allowed range",
      xc(PL_09) => "End-to-end space between PL_05 and PL_08 is not allowed",
      xc(PL_100) => "Floating poly overlapping diffusion cannot be next to a signal TCN if >= this length",
      xc(PL_101) => "Max width of long space region that triggers PL_102/103 checks",
      xc(PL_102) => "Forbidden offset between the short space region ends (min)",
      xc(PL_103) => "Forbidden offset between the short space region ends (max)",
      xc(PL_104) => "Minimum space between type B configuration synthesized regions",
      xc(PL_105) => "Need an even number of rectangular polygons (synthesized from drawn cuts plus oversized PL_04's) in the loop ",
      xc(PL_106) => "Oversize in PGD of narrow (PL_04) cut for PL_105 check",
      xc(PL_11) => "Min Poly endcap length (poly line-end extent beyond diffusion edge)",
      xc(PL_12) => "All Gate-SD edges and taps require Adjacent Poly (with max pullback defined by PL_13/15)",
      xc(PL_13) => "Maximum pullback of Adjacent Dummy Poly line-end from Gate-STI (diffusion) edge",
      xc(PL_15) => "Maximum pullback of Adjacent Dummy Poly line-end from Tap diffusion edge",
      xc(PL_16) => "Min offset between adjacent poly line-ends having the same line-end direction",
      xc(PL_24) => "NWL edge parallel to poly must be centered in poly space",
      xc(PL_25) => "Min Poly line-end space to diffusion PGD",
      xc(PL_51) => "Poly overlapping a S/D, tap diffusion must be either (1) shorted to the overlapping S/D, tap or (2) unconnected  ",
      xc(PL_52) => "Unconnected Poly can have multiple overlapping diffusions if all the diffusions are connected to the same node.",
      xc(PL_55) => "Poly jumper between two diffusions is not allowed.",
      xc(PL_61) => "Min overlap of any poly cuts 1 poly pitch apart",
      xc(PL_62) => "A PL_04 adjacent to a long cut on one side must also be adjacent to a PL_04 or a long cut on its other side.  PL_04 cannot be isolated.",
      xc(PL_63) => "Min offset between any poly cuts 1 poly pitch apart",
      xc(PL_66) => "PL_07 cuts must be aligned",
      xc(PL_67) => "Min offset between PL_07 cuts",
      xc(PL_68) => "Fixed overlap between the PL_07 cuts",
      xc(PL_69) => "A PL_07 adjacent to a PL_04 must be centered (aligned centerlines) or else satisfy PL_16 (aligned on one side)",
      xc(PL_70) => "Cannot have a single isolated PL_04 next to a centered PL_07 (i.e. the PL_04 must also be adjacent to another ETE space on its other side)",
      xc(PL_71) => "A centered PL_07 ETE space cannot contain a GCN",
      xc(PL_91) => "Within each cell, all gates are checked to be in a single direction.",
      xc(PL_92) => "At full chip DRC, all gates are checked to be in absolute horizontal direction.",
      xc(RDL_01) => "RDL wire (217;0) width, minimum",
      xc(RDL_02) => "RDL wire width, maximum (for location other than LMI pad or TSV cap) ",
      xc(RDL_03) => "RDL width/height of LMI PAD (marked by RDLPAD ID (217;40)), only allowed value",
      xc(RDL_04) => "RDL width/height for TSV CAP (marked by RDLCAP ID (217;10)), only allowed value",
      xc(RDL_05) => "RDL wire space, minimum",
      xc(RDL_06) => "RDL distance from LMI PAD center (center of (217;40)) to unconnected RDL wire, minimum ",
      xc(RDL_07) => "RDL, RDLCAP coverage of TSV on all sides, minimum",
      xc(RDL_08) => "RDL wire offset from LMI PAD center axis, maximum",
      xc(RDL_09) => "RDL wire edge to TSV CAP edge distance, minimum",
      xc(RDL_10) => "RDL wire vertex space to LMI PAD, minimum",
      xc(RDL_11) => "RDL wire vertex space to TSV CAP, minimum",
      xc(RDL_12) => "Only one RDL wire connection allowed per semicircle for an LMI PAD or TSV CAP",
      xc(RDL_13) => "RDL wire jog length (217;0), minimum value",
      xc(RDL_14) => "RDL space between  TSV CAP (edge of (217;10)) and RDL wire (unconnected), minimum",
      xc(RDL_15) => "Space between LMI pad and RDL line",
      xc(RDL_16) => "Maximum RDL wire segment length",
      xc(SDC_03) => "Diffcon end-to-end (ETE) space (min) (under STTRAMID1/2, exception to DC_03)",
      xc(SDC_11) => "Fixed TCN extension beyond drawn N-diffusion (top) (under STTRAMID1/2)",
      xc(SDC_111) => "Fixed TCN extension beyond drawn N-diffusion (bottom) (under STTRAMID1/2)",
      xc(SD_01) => "STACKDEVTYPE ID must be rectangular in shape",
      xc(SD_02) => "STACKDEVTYPE ID must be drawn coincident with diffusion OGD inside edge",
      xc(SD_03) => "STACKDEVTYPE ID must be drawn coincident with poly PGD inside edge",
      xc(SD_04) => "Any TCN interacting with STACKDEVTYPE ID cannot have viacon ",
      xc(SK_12) => "Disallowed V1/V2 non-redundant stack, if under TV1 and max via0 density > 5% (350X350nm window) and metal2 density < 40% (500X500nm window)",
      xc(SK_22) => "Disallowed V2/V3 non-redundant stack, if under TV1 and max via1 density > 5% (350X350nm window) and metal3 density < 40% (500X500nm window)",
      xc(SK_31) => "Disallowed V3/V4 non-redundant stack, if under TV1 and max via1 density > 6% (350X350nm window) and metal4 density < 40% (500X500nm window)",
      xc(SK_32) => "Disallowed V3/V4 non-redundant stack, if under TV1 and max via2 density > 5% (350X350nm window) and metal4 density < 40% (500X500nm window)",
      xc(SK_41) => "Disallowed V4/V5 non-redundant stack, if under TV1 and max via2 density > 6% (350X350nm window) and metal5 density < 40% (500X500nm window)",
      xc(SK_42) => "Disallowed V4/V5 non-redundant stack, if under TV1 and max via3 density > 5% (350X350nm window) and metal5 density < 40% (500X500nm window)",
      xc(SK_51) => "Disallowed V5/V6 non-redundant stack, if under TV1 and max via3 density > 6% (350X350nm window) and metal6 density < 40% (500X500nm window)",
      xc(SK_52) => "Disallowed V5/V6 non-redundant stack, if under TV1 and max via4 density > 5% (350X350nm window) and metal6 density < 40% (500X500nm window)",
      xc(SK_61) => "Disallowed V6/V7 non-redundant stack, if under TV1 and max via4 density > 4% (490X490nm window)  and metal7 density < 40% (500X500nm window)",
      xc(SK_62) => "Disallowed V6/V7 non-redundant stack, if under TV1 and max via5 density > 3% (490X490nm window)  and metal7 density < 40% (500X500nm window)",
      xc(SK_71) => "Disallowed V7/V8 non-redundant stack, if under TV1 and max via5 density > 4% (490X490nm window) and metal8 density < 40% (500X500nm window)",
      xc(SK_72) => "Disallowed V7/V8 non-redundant stack, if under TV1 and max via6 density > 3% (490X490nm window) and metal8 density < 40% (500X500nm window)",
      xc(SK_81) => "Disallowed V8/V9 non-redundant stack, if under TV1 and max via6 density > 4% (490X490nm window) and metal9 density < 40% (500X500nm window)",
      xc(SK_82) => "Disallowed V8/V9 non-redundant stack, if under TV1 and max via7 density > 5% (600X600nm window) and metal9 density < 40% (500X500nm window)",
      xc(SM0_41) => "End-to-end space (fixed value), when line-ends are completely aligned and lines are same type (B-B, C-C),",
      xc(SM0_60) => "Fixed length of M0 line (any type, any width) ",
      xc(SM0_82) => "Metal0 line-end overlap of poly, fixed value (edge touching M0)",
      xc(SM0_821) => "Metal0 line-end distance from poly, fixed value (other edge)",
      xc(SM3_41) => "End-to-end space (min), when line-ends are completely aligned and lines are same type (B-B, C-C)",
      xc(SM3_47) => "Lines != SM3_47 wide cannot be isolated, must be next to another narrow or wide line",
      xc(SNW_29) => "NW_29 relaxation for STT MRAM",
      xc(SV3_97) => "Min V3TA/TB/TC to V3TA/TB/TC space PGD (this is an exception to V3_23)",
      xc(TDC_04) => "Diffcon side space to Poly, ONLY ALLOWED value ",
      xc(TDC_21) => "Diffcon pitch, ONLY ALLOWED value",
      xc(TEDM_01) => "Catch-cup guard ring must be present at top level Cell",
      xc(TEDM_02) => "Area that is 1.512um outside from the OGD edge of Catch-cup guard ring and 1.68um outside from the PGD edge of Catch-cup guard ring is occupied by TSV EDM ring",
      xc(TEDM_04) => "Maximum number of Fill cells per OGD die edge",
      xc(TEDM_06) => "Maximum number of OGD fill cell that can be placed consecutively",
      xc(TEDM_07) => "Maximum number of PGD diode staircase cell that can be placed consecutively",
      xc(TEDM_08) => "Maximum number of OGD diode staircase cell that can be placed consecutively",
      xc(TEDM_11) => "Number of I/O cell placement allowed (OGD die TSV EDM ring only)",
      xc(TEDM_12) => "Corner cells can only reside in die corners",
      xc(TEDM_13) => "EDM cells cannot overlap each other",
      xc(TEDM_14) => "EDM cells dimension not drawn according to spec",
      xc(TEDM_15) => "Every 25th OGD staircase cell must be a diode staircase cell",
      xc(TEDM_16) => "There should be at least one PGD staircase cells in each PGD part of EDM ring",
      xc(TEDW_01) => "Corner Cell x",
      xc(TEDW_02) => "Corner Cell y",
      xc(TEDW_03) => "OGD Fill Cell x",
      xc(TEDW_04) => "OGD Fill Cell y",
      xc(TEDW_07) => "OGD IO Cell x",
      xc(TEDW_08) => "OGD IO Cell y",
      xc(TEDW_11) => "PGD STAIRCASSE DIODE Cell x",
      xc(TEDW_12) => "PGD STAIRCASSE DIODE Cell y",
      xc(TEDW_13) => "OGD STAIRCASSE DIODE Cell x",
      xc(TEDW_14) => "OGD STAIRCASSE DIODE Cell y",
      xc(TEDW_15) => "PGD STAIRCASSE Cell x",
      xc(TEDW_16) => "PGD STAIRCASSE Cell y",
      xc(TEDW_17) => "OGD STAIRCASSE Cell x",
      xc(TEDW_18) => "OGD STAIRCASSE Cell y",
      xc(TM1_01) => "TM1 width allowed range min",
      xc(TM1_02) => "TM1 space allowed range min",
      xc(TM1_03) => "TM1 space allowed range max",
      xc(TM1_04) => "Max TM1 edge length that can violate the max space rule ",
      xc(TM1_21) => "TM1 width allowed range max",
      xc(TM1_22) => "Min required TM1 hole area (sq um)",
      xc(TM1_23) => "Minimum TM1 segment lengths, when both adjacent at corners",
      xc(TM1_25) => "Min required TM1 area with a TV1 (sq um)",
      xc(TM1_26) => "Min required TM1 area (sq um)",
      xc(TM1_51) => "TM1 coverage of Via12 (all directions)",
      xc(TM1_60) => "TM1 space above inductors templates has special handling",
      xc(TPC_42) => "Min Polycon end overlap of poly for PC_41",
      xc(TPC_44) => "Min Polycon end space to poly side",
      xc(TPC_46) => "Min Polycon overlap with poly (in OGD) for PC_45",
      xc(TPL_01) => "Poly width, ONLY ALLOWED value",
      xc(TPL_02) => "Poly pitch, ONLY ALLOWED value",
      xc(TPL_04) => "Short poly end-to-end space (PL_04) not allowed in TG pitch region",
      xc(TPL_11) => "Min Poly endcap length",
      xc(TPL_13) => "Maximum pullback of Adjacent Dummy Poly line-end from Gate-STI (diffusion) edge",
      xc(TPL_15) => "Maximum pullback of Adjacent Dummy Poly line-end from Tap diffusion edge",
      xc(TPL_25) => "Min Poly end space to diffusion PGD",
      xc(TSV_01) => "TSV width, only allowed value",
      xc(TSV_02) => "TSV_02 for X73B (rusnet use only)",
      xc(TSV_03) => "TSV row-to-row separation within spine, only allowed value",
      xc(TSV_04) => "TSV rows in a single spine, only allowed value",
      xc(TSV_05) => "TSV columns in a single spine, only allowed value",
      xc(TSV_06) => "TSV must be centered on the catch cup",
      xc(TSV_07) => "Min transistor keepout zone from M1 catch cup grid (no performance impact)",
      xc(TSV_08) => "Min transistor keepout zone from M1 catch cup grid (15% performance degradation)",
      xc(TSV_10) => "Number of allowed TSV spines",
      xc(TSV_21) => "TSV-to-TSV separation within spine (in the direction of the spine), allowed value 1",
      xc(TSV_22) => "TSV-to-TSV separation within spine (in the direction of the spine), allowed value 2",
      xc(TSV_23) => "TSV-to-TSV separation within spine (in the direction of the spine), allowed value 3",
      xc(TSV_61) => "TSV catchcup size (in X) (runset use only)",
      xc(TSV_62) => "TSV catchcup size (in Y) (runset use only)",
      xc(TV1_31) => " TV1A width, fixed value",
      xc(TV1_32) => " TV1A length, fixed value",
      xc(TV1_51) => "Min TM1 enclosure of  TV1 (all directions)",
      xc(TV1_61) => "Only 1 TV1 allowed per bump, and each TV1 must be covered by a bump",
      xc(TX_01) => "TGOXID is only allowed over V3pitchID and V1pitchID",
      xc(TX_02) => "Min width of TGOXID in any direction",
      xc(TX_03) => "Min space between TGOXID in any direction",
      xc(TX_05) => "PGD edge of TGOXID must be drawn in the middle of the space between poly center lines",
      xc(TX_06) => "Min TGOXID enclosure of poly end, in PGD",
      xc(TX_07) => "Min TGOXID space to poly end, in PGD",
      xc(TX_08) => "Nwell inside TGOXID and outside TGOXID cannot interact",
      xc(TX_09) => "Min TGOXID enclosure of nwell inside",
      xc(TX_10) => "Min TGOXID space to nwell outside",
      xc(TX_11) => "Min TGOXID enclosure of active gate area inside TGOXID",
      xc(TX_12) => "Min TGOXID space to active gate area outside TGOXID",
      xc(TX_13) => "Min TGOXID space to XGOXID",
      xc(TX_21) => "V3pitchID or V1pitchID must always be covered by TGOXID as shown in transition rules",
      xc(UHV_01) => "Polycon space to Diffcon (min)",
      xc(UHV_02) => "VCN space to Diffcon (PGD), min",
      xc(UHV_04) => "VCN space to polycon (PGD), min",
      xc(UHV_05) => "VCN-VCN space (min)",
      xc(UHV_06) => "VCN-Via0 space (min)",
      xc(UHV_07) => "Via0-Via1 space (min)",
      xc(UHV_09) => "Via1-Via1 space (min)",
      xc(UHV_10) => "Via1-Metal2 space (min)",
      xc(UHV_11) => "Via1-Via2 space (min)",
      xc(UHV_12) => "Via2-Metal2 space (min)",
      xc(UHV_13) => "Via2-Via2 space (min)",
      xc(UHV_14) => "Via2-Metal3 space (min)",
      xc(UHV_15) => "Via2-Via3 space (min)",
      xc(UHV_16) => "Via3-Metal3 space (min)",
      xc(UHV_20) => "Via4-Via5 space (min)",
      xc(UHV_21) => "Via5-Metal5 space (min)",
      xc(UHV_34) => "Metal4-Metal4 space (min)",
      xc(UHV_36) => "Metal6-Metal6 space (min)",
      xc(UHV_40) => "VCN space to Diffcon side (OGD), min",
      xc(UHV_41) => "VCN space to Polycon end (OGD), min",
      xc(UHV_42) => "VCN-Metal0 space (min)",
      xc(UHV_43) => "Metal0-Metal0 space (min)",
      xc(UHV_44) => "Via0-Metal0 space (min)",
      xc(UHV_45) => "Via0-Via0 space (min)",
      xc(UHV_46) => "Via0-Metal1 space (min)",
      xc(UHV_47) => "Metal1-Metal1 space (min)",
      xc(UHV_48) => "Via1-Metal1 space (min)",
      xc(UHV_49) => "Metal2-Metal2 space (min)",
      xc(UHV_50) => "Metal3-Metal3 space (min)",
      xc(UHV_51) => "Via3-Via3 space (min)",
      xc(UHV_52) => "Via3-Metal4 space (min)",
      xc(UHV_53) => "Via3-Via4 space (min)",
      xc(UHV_54) => "Via4-Metal4 space (min)",
      xc(UHV_55) => "Via4-Via4 space (min)",
      xc(UHV_56) => "Via4-Metal5 space (min)",
      xc(UHV_57) => "Metal5-Metal5 space (min)",
      xc(UHV_58) => "Via5-Via5 space (min)",
      xc(UHV_59) => "Via5-Metal6 space (min)",
      xc(UHV_60) => "Via5-Via6 space (min)",
      xc(UHV_61) => "Via6-Metal6 space (min)",
      xc(UHV_62) => "Via6-Via7 space (min)",
      xc(UHV_63) => "Via7-Metal7 space (min)",
      xc(UL1_01) => "Minimum width of NU1/PU1 layer",
      xc(UL1_05) => "Minimum required area of NU1/PU1 layer (sq um)",
      xc(UL1_06) => "Minimum required hole area of NU1/PU1 layer  (sq um)",
      xc(UL1_07) => "Unrestricted minimum segment lengths",
      xc(UL1_08) => "Restricted minimum segment lengths (has additional segment-to-segment requirements)",
      xc(UL1_09) => "Space between restricted segment lengths (>= UL1_08, <UL1_07) convex-convex, concave-concave corner",
      xc(UL1_10) => "Space between restricted segment lengths (>= UL1_08, <UL1_07) convex-concave corner",
      xc(UL1_11) => "NU1/PU1 enclosure of nulv/pulv gate (PGD)",
      xc(UL1_116) => "NU1/PU1 convex corner enclosure of nulv/pulv gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge",
      xc(UL1_12) => "NU1/PU1 enclosure of nulv/pulv gate (OGD)",
      xc(UL1_13) => "NU1/PU1 space to non-n/pulv gate (PGD)",
      xc(UL1_14) => "NU1/PU1 space to non-n/pulv gate (OGD)",
      xc(UL1_15) => "NU1/PU1 PGD edge must be centered in poly space or poly width",
      xc(UL1_16) => "NU1/PU1 unrestricted convex corner enclosure of nulv/pulv gate",
      xc(UL1_17) => "NU1/PU1 concave corner enclosure of non-n/pulv gate",
      xc(UL1_31) => "Minimum space of NU1/PU1 layer",
      xc(UL1_32) => "NU1/PU1 layer is allowed to have coincident edges of length >=",
      xc(UL1_33) => "NU1/PU1 layer is allowed to have coincident corners with space >=",
      xc(UL1_34) => "NU1/PU1 layer is allowed to have point touch",
      xc(UNW_14) => "N-well space (min)",
      xc(UNW_21) => "N+ active diffusion space to ultra high voltage nwells (min)",
      xc(UNW_22) => "P+ active diffusion enclosure by ultra high voltage nwell (min)",
      xc(UV0_01) => "Minimum width of NV0/PV0 layer",
      xc(UV0_05) => "Minimum required area of NV0/PV0 layer (sq um)",
      xc(UV0_06) => "Minimum required hole area of NV0/PV0 layer  (sq um)",
      xc(UV0_07) => "Minimum segment lengths",
      xc(UV0_08) => "Restricted minimum segment lengths (has additional segment-to-segment requirements)",
      xc(UV0_09) => "Space between restricted segment lengths (>= UV0_08, <UV0_07) convex-convex, concave-concave corner",
      xc(UV0_10) => "Space between restricted segment lengths (>= UV0_08, <UV0_07) convex-concave corner",
      xc(UV0_11) => "NV0/PV0 enclosure of nuv0/puv0 gate (PGD)",
      xc(UV0_116) => "NV0/PV0 convex corner enclosure of nuv0/puv0 gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge",
      xc(UV0_12) => "NV0/PV0 enclosure of nuv0/puv0 gate (OGD)",
      xc(UV0_13) => "NV0/PV0 space to non-n/puv0 gate (PGD)",
      xc(UV0_14) => "NV0/PV0 space to non-n/puv0 gate (OGD)",
      xc(UV0_15) => "NV0/PV0 PGD edge must be centered in poly space or poly width",
      xc(UV0_16) => "NV0/PV0 unrestricted convex corner enclosure of nuv0/puv0 gate",
      xc(UV0_17) => "NV0/PV0 concave corner enclosure of non-n/puv0 gate",
      xc(UV0_31) => "Minimum space of NV0/PV0 layer",
      xc(UV0_32) => "NV0/PV0 layer is allowed to have coincident edges of length >=",
      xc(UV0_33) => "NV0/PV0 layer is allowed to have coincident corners with space >=",
      xc(UV0_34) => "NV0/PV0 layer is allowed to have point touch",
      xc(UV1_01) => "Minimum width of NV1/PV1 layer",
      xc(UV1_05) => "Minimum required area of NV1/PV1 layer (sq um)",
      xc(UV1_06) => "Minimum required hole area of NV1/PV1 layer  (sq um)",
      xc(UV1_07) => "Unrestricted minimum segment lengths",
      xc(UV1_08) => "Restricted minimum segment lengths (has additional segment-to-segment requirements)",
      xc(UV1_09) => "Space between restricted segment lengths (>= UV1_08, <UV1_07) convex-convex, concave-concave corner",
      xc(UV1_10) => "Space between restricted segment lengths (>= UV1_08, <UV1_07) convex-concave corner",
      xc(UV1_11) => "NV1/PV1 enclosure of nuv1/puv1 gate (PGD)",
      xc(UV1_116) => "NV1/PV1 convex corner enclosure of nuv1/puv1 gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge",
      xc(UV1_12) => "NV1/PV1 enclosure of nuv1/puv1 gate (OGD)",
      xc(UV1_13) => "NV1/PV1 space to non-n/puv1 gate (PGD)",
      xc(UV1_14) => "NV1/PV1 space to non-n/puv1 gate (OGD)",
      xc(UV1_15) => "NV1/PV1 PGD edge must be centered in poly space or poly width",
      xc(UV1_16) => "NV1/PV1 unrestricted convex corner enclosure of nuv1/puv1 gate",
      xc(UV1_17) => "NV1/PV1 concave corner enclosure of non-n/puv1 gate",
      xc(UV1_31) => "Minimum space of NV1/PV1 layer",
      xc(UV1_32) => "NV1/PV1 layer is allowed to have coincident edges of length >=",
      xc(UV1_33) => "NV1/PV1 layer is allowed to have coincident corners with space >=",
      xc(UV1_34) => "NV1/PV1 layer is allowed to have point touch",
      xc(UV2_01) => "Minimum width of NV2/PV2 layer",
      xc(UV2_05) => "Minimum required area of NV2/PV2 layer (sq um)",
      xc(UV2_06) => "Minimum required hole area of NV2/PV2 layer  (sq um)",
      xc(UV2_07) => "Minimum segment lengths",
      xc(UV2_08) => "Restricted minimum segment lengths (has additional segment-to-segment requirements)",
      xc(UV2_09) => "Space between restricted segment lengths (>= UV2_08, <UV2_07) convex-convex, concave-concave corner",
      xc(UV2_10) => "Space between restricted segment lengths (>= UV2_08, <UV2_07) convex-concave corner",
      xc(UV2_11) => "NV2/PV2 enclosure of nuv2/puv2 gate (PGD)",
      xc(UV2_116) => "NV2/PV2 convex corner enclosure of nuv2/puv2 gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge",
      xc(UV2_12) => "NV2/PV2 enclosure of nuv2/puv2 gate (OGD)",
      xc(UV2_13) => "NV2/PV2 space to non-n/puv2 gate (PGD)",
      xc(UV2_14) => "NV2/PV2 space to non-n/puv2 gate (OGD)",
      xc(UV2_15) => "NV2/PV2 PGD edge must be centered in poly space or poly width",
      xc(UV2_16) => "NV2/PV2 unrestricted convex corner enclosure of nuv2/puv2 gate",
      xc(UV2_17) => "NV2/PV2 concave corner enclosure of non-n/puv2 gate",
      xc(UV2_31) => "Minimum space of NV2/PV2 layer",
      xc(UV2_32) => "NV2/PV2 layer is allowed to have coincident edges of length >=",
      xc(UV2_33) => "NV2/PV2 layer is allowed to have coincident corners with space >=",
      xc(UV2_34) => "NV2/PV2 layer is allowed to have point touch",
      xc(UV3_01) => "Minimum width of NV3/PV3 layer",
      xc(UV3_05) => "Minimum required area of NV3/PV3 layer (sq um)",
      xc(UV3_06) => "Minimum required hole area of NV3/PV3 layer  (sq um)",
      xc(UV3_07) => "Minimum segment lengths",
      xc(UV3_08) => "Restricted minimum segment lengths (has additional segment-to-segment requirements)",
      xc(UV3_09) => "Space between restricted segment lengths (>= UV3_08, <UV3_07) convex-convex, concave-concave corner",
      xc(UV3_10) => "Space between restricted segment lengths (>= UV3_08, <UV3_07) convex-concave corner",
      xc(UV3_11) => "NV3/PV3 enclosure of nuv3/puv3 gate (PGD)",
      xc(UV3_116) => "NV3/PV3 convex corner enclosure of nuv3/puv3 gate, when the corner is mid dummy poly and the OGD edge at the corner is coincident with the nwell edge",
      xc(UV3_12) => "NV3/PV3 enclosure of nuv3/puv3 gate (OGD)",
      xc(UV3_13) => "NV3/PV3 space to non-n/puv3 gate (PGD)",
      xc(UV3_14) => "NV3/PV3 space to non-n/puv3 gate (OGD)",
      xc(UV3_15) => "NV3/PV3 PGD edge must be centered in poly space or poly width",
      xc(UV3_16) => "NV3/PV3 unrestricted convex corner enclosure of nuv3/puv3 gate",
      xc(UV3_17) => "NV3/PV3 concave corner enclosure of non-n/puv3 gate",
      xc(UV3_31) => "Minimum space of NV3/PV3 layer",
      xc(UV3_32) => "NV3/PV3 layer is allowed to have coincident edges of length >=",
      xc(UV3_33) => "NV3/PV3 layer is allowed to have coincident corners with space >=",
      xc(UV3_34) => "NV3/PV3 layer is allowed to have point touch",
      xc(V0P_02) => "Via0PAX length (PGD), fixed value",
      xc(V0P_102) => "Via0PAY length (PGD), fixed value",
      xc(V0T_10) => "Via0TAX (bridge via) length, fixed value",
      xc(V0T_11) => "Via0TBX (bridge via) length, fixed value",
      xc(V0T_12) => "Via0TPX (bridge via) length, fixed value",
      xc(V0T_20) => "Via0TAY (bridge via) length, fixed value",
      xc(V0T_21) => "Via0TBY (bridge via) length, fixed value",
      xc(V0T_22) => "Via0TAY/TBY are only allowed in ULP region (under width_02 M1)",
      xc(V0_01) => "Width of Via0, fixed value (OGD)",
      xc(V0_02) => "Via0AX length (PGD), fixed value",
      xc(V0_03) => "Via0BX length (PGD), fixed value",
      xc(V0_04) => "Via0CX length (PGD), fixed value",
      xc(V0_05) => "Via0A length (PGD), fixed value",
      xc(V0_06) => "Via0B length (PGD), fixed value",
      xc(V0_07) => "Via0DX length (PGD), fixed value",
      xc(V0_08) => "Via0EX length (PGD), fixed value",
      xc(V0_09) => "Via0C length (PGD), fixed value",
      xc(V0_10) => "Via0FX length (PGD), fixed value",
      xc(V0_101) => "Width of Via0 in ULP region, fixed value (OGD)",
      xc(V0_102) => "Via0AY length (PGD), fixed value",
      xc(V0_103) => "Via0BY length (PGD), fixed value",
      xc(V0_104) => "Via0CY length (PGD), fixed value",
      xc(V0_105) => "Via0AW length (PGD), fixed value",
      xc(V0_106) => "Via0BW length (PGD), fixed value",
      xc(V0_107) => "Via0DY length (PGD), fixed value",
      xc(V0_108) => "Via0EY length (PGD), fixed value",
      xc(V0_111) => "Width of Via0TAY/TBY, fixed value (OGD)",
      xc(V0_122) => "Unrestricted Via0AY-to-Via0AY center-to-center space (min)",
      xc(V0_142) => "Minimum Via0TBX/TBY overlap of M0",
      xc(V0_171) => "Unrestricted min Via0-Via0 center-to-center space for all V0AY/BY/CY/DY/EY/AW/BW/PAY (if centers are closer, vias are allowed on maximum of any 2 corners)",
      xc(V0_19) => "V0_02-V0T_12 edges are SA edges; the line-end edge of Via0PAX can also be self aligned (in addition to the line-side edges)",
      xc(V0_22) => "Unrestricted Via0AX-to-Via0AX center-to-center space (min)",
      xc(V0_23) => "Parallel full-facing metal-aligned Via0 edges can be as closely spaced as the minimum allowed M1 space.  (only allowed value)",
      xc(V0_24) => "Min space between non-SA Via0 edges (PGD)",
      xc(V0_242) => "Minimum Via0TPX overlap of M0",
      xc(V0_25) => "Min space between Via0BX non-SA edge and V0PAX line end edge, Via0BY non-SA edge and V0PAY line-end edge, Via0AX/BX to Via0AX/BX non-SA edges (PGD), Via0AY/BY to Via0AY/BY non-SA edges (PGD)",
      xc(V0_250) => "Min unrestricted Via0TAY/TBY to any Via0 corner-to-corner space",
      xc(V0_252) => "Via0TAY/TBY can have 2 or fewer via0 at corner-to-corner space of [>=V0_70 and <V0_250] on any 2 corners, the other vias must have corner-to-corner space >=V0_250 from Via0TAY/TBY ",
      xc(V0_26) => "Unrestricted min Via0 edge-to-edge space",
      xc(V0_27) => "V0TAX/TBX/TAY/TBY/TPXs, V0FXs cannot be on adjacent M1 wires at minimum space (this is an exception to V0_23)",
      xc(V0_28) => "Adjacent end-to-end (same track) Via0PAX/PAYs allowed space max value",
      xc(V0_29) => "Adjacent-track (side-by-side) Via0PAX/PAYs are allowed FOR A SINGLE PAIR only",
      xc(V0_30) => "A pair of side-by-side Via0PAX/PAYs cannot have a facing Via0PAX/PAYs",
      xc(V0_31) => "Min Via0 to VCN space (on different Metal0)",
      xc(V0_32) => "Facing V0PAX/PAY pair to adjacent V0PAX/PAY min space",
      xc(V0_328) => "Via0PAX pair facing each other at minimum M1 ETE space (M1_41=42nm) must be overlapped or replaced with a bridge Via0TPX, if the nets are the same",
      xc(V0_33) => "Min Via0 edge space to Metal0",
      xc(V0_40) => "Min Metal0 side enclosure of Via0",
      xc(V0_42) => "Minimum Via0TAX/TAY overlap of M0",
      xc(V0_43) => "Via0TAX/TBX/TAY/TBY/TPX must overlap two adjacent M0 lines",
      xc(V0_49) => "Min Metal0 line end enclosure of Via0",
      xc(V0_61) => "Minimum M1 line end enclosure of Via0FX/TAX/TBX/TAY/TBY/TPX",
      xc(V0_62) => "Minimum M1 line end enclosure of Via0 (see V0_61 exception)",
      xc(V0_63) => "M1 line end enclosure of Via0PAX (fixed value) on one end only",
      xc(V0_64) => "Minimum M1 line end enclosure of opposite side of Via0PAX",
      xc(V0_66) => "Min M1 line-end enclosure of any Via0, when the M1 line-end has an exposed offset on either or both sides, as defined by M1_86",
      xc(V0_69) => "M1 line-side enclosure of Via0TAY/TBY, only allowed value",
      xc(V0_70) => "Min Via0 corner-to-corner space",
      xc(V0_71) => "Unrestricted min Via0-Via0 center-to-center space for all via0s except V0AY/BY/CY/DY/EY/AW/BW/PAY (if centers are closer, vias are allowed on maximum of any 2 corners)",
      xc(V0_840) => "Min Metal0 line-side enclosure (PGD) of each Via0PAX/Y when two are placed on facing M1 line-ends ",
      xc(V0_98) => "V0TAX/TAYs cannot be on a power net",
      xc(V0_99) => "V0TBX/TBY bridging two M0 lines must have a TCN shunt shorting the 2 M0s it is bridging.",
      xc(V10_01) => "Square Via10 size ONLY ALLOWED value",
      xc(V10_02) => "Square Via10 to Square Via10 (center-to-center) separation, minimum",
      xc(V10_11) => "Maximum Square Via10 overhang of Metal10",
      xc(V10_12) => "Min M10 enclosure of Square Via10, orthogonal edge",
      xc(V10_21) => "Min Square Via10 to Via9 (square/rectangular) space (on different M10, all-directional check)",
      xc(V10_31) => "Rectangular Via10 width, ONLY ALLOWED value",
      xc(V10_32) => "Rectangular Via10 length, ONLY ALLOWED value",
      xc(V10_33) => "Min Rectangular Via10 Long edge facing space to Square or Rectangular Via10 ",
      xc(V10_34) => "Min Rectangular Via10 Short edge facing space to Square or Rectangular Via10 ",
      xc(V10_35) => "Min Rectangular Via10 Corner-to-corner space to Square or Rectangular Via10 ",
      xc(V10_39) => "Redundant Rectangular Via10 spacing between facing Long edges, for electrically shorted vias, fixed value",
      xc(V10_40) => "Redundant Rectangular Via10s must be aligned with each other",
      xc(V10_41) => "Min Rectangular Via10 to Via9 (square/rectangular) space (on different M10, all-directional check)",
      xc(V10_51) => "Min M10 enclosure of Rectangular Via10 (one edge at a corner)",
      xc(V10_52) => "Min M10 enclosure of Rectangular Via10, orthogonal edge",
      xc(V10_61) => "Max extent of Square Via10 edge beyond M11 edge",
      xc(V10_62) => "Min M11 coverage of Square Via10 orthogonal edge",
      xc(V10_71) => "Max extent of Rectangular Via10 long edge beyond M11 edge",
      xc(V10_72) => "M11 coverage of Rectangular Via10 short edge, minimum",
      xc(V11_01) => "Square Via11 size ONLY ALLOWED value",
      xc(V11_02) => "Square Via11 to Square Via11 (center-to-center) separation, minimum",
      xc(V11_11) => "Min M11 enclosure of Square Via11",
      xc(V11_12) => "Min M11 enclosure of Square Via11, orthogonal edge",
      xc(V11_31) => "Rectangular Via11 width, ONLY ALLOWED value",
      xc(V11_32) => "Rectangular Via11 length, ONLY ALLOWED value",
      xc(V11_33) => "Min Rectangular Via11 space to Via11 (square/rectangular, includes all combinations of long edges, short edges, and corners), all-directional check",
      xc(V11_34) => "Via11C length, fixed value",
      xc(V11_40) => "Via11 to Via11 space (all directions)",
      xc(V11_41) => "Via11 to Via11 corner-to-corner space",
      xc(V11_51) => "Min M11 enclosure of Rectangular Via11",
      xc(V11_52) => "Min M11 enclosure of Rectangular Via11, orthogonal edge",
      xc(V12_31) => "Width of Via12A/B/C, fixed value",
      xc(V12_32) => "Via12A length, fixed value",
      xc(V12_33) => "Via12B length, fixed value",
      xc(V12_34) => "Via12C length, fixed value",
      xc(V12_40) => "Min Via12 to Via12 space (all directions)",
      xc(V12_41) => "Min Via12 to Via12 corner-to-corner space",
      xc(V12_51) => "Min M12 enclosure of Via12 (all directions)",
      xc(V1H_01) => "Width of below Via1 (OGD), fixed value",
      xc(V1H_02) => "Via1HA length (PGD), fixed value (one V1H_01 edge is SA)",
      xc(V1H_05) => "Via1HD length (PGD), fixed value (non-SA only)",
      xc(V1H_08) => "Via1HG length (PGD), fixed value (one V1H_01 edge is SA)",
      xc(V1H_09) => "Via1HJ length (PGD), fixed value (non-SA only)",
      xc(V1H_10) => "Via1HK length (PGD), fixed value (one V1H_01 edge is SA)",
      xc(V1H_11) => "Via1HL length (PGD), fixed value (non-SA only)",
      xc(V1H_12) => "Via1HM length (PGD), fixed value (one V1H_01 edge is SA)",
      xc(V1T_01) => "Via1TA-Bridge via length (OGD), fixed value",
      xc(V1T_02) => "Via1TA-Bridge via width (PGD), fixed value",
      xc(V1T_03) => "Via1TB-Bridge via width (PGD), fixed value",
      xc(V1T_11) => "Via1TB-Bridge via length (OGD), fixed value",
      xc(V1T_20) => "The V1T_01/11 edges of V1TA/B must both be aligned with parallel Metal-2 edges.",
      xc(V1_01) => "Width of below Via1 (OGD), fixed value",
      xc(V1_02) => "Via1A length (PGD), fixed value",
      xc(V1_03) => "Via1B length (PGD), fixed value",
      xc(V1_04) => "Via1C length (PGD), fixed value",
      xc(V1_05) => "Via1D length (PGD), fixed value",
      xc(V1_06) => "Via1F length (PGD), fixed value",
      xc(V1_07) => "Via1G length (PGD), fixed value",
      xc(V1_08) => "Via1J length (PGD), fixed value",
      xc(V1_10) => "Via1L length (PGD), fixed value",
      xc(V1_124) => "Via1 corner-to-corner space (min unrestricted) doesn't need to meet the V1_25 one pair rule (V1_225/226 are exceptions)",
      xc(V1_125) => "Via1TB corner-to-corner space (min unrestricted) doesn't need to meet the V1_26 one pair rule",
      xc(V1_128) => "Unrestricted min Via1 edge-to-edge space (OGD)",
      xc(V1_13) => "Via1O length (PGD), fixed value",
      xc(V1_14) => "Via1R length (PGD), fixed value",
      xc(V1_140) => "Via1 edge enclosure by width_02 Metal1 (OGD), fixed value (V1TA/TB are exceptions)",
      xc(V1_142) => "Minimum Via1TA overlap of Metal1 (OGD)",
      xc(V1_15) => "Via1E length (PGD), fixed value",
      xc(V1_16) => "Via1S length (PGD), fixed value",
      xc(V1_17) => "Via1V length (PGD), fixed value",
      xc(V1_20) => "The V1_01 edges of V1A-V must both be aligned with parallel Metal-2 edges.",
      xc(V1_22) => "Unrestricted Via1A-to-Via1A center-to-center space (min)",
      xc(V1_225) => "A tight V1HL to V1HA, non-SA edge corner space <V1_225 is allowed for a single isolated via pair only. The pair must be spaced from other vias by >=V1_28. ",
      xc(V1_226) => "A tight V1HL to any V1, SA edge corner space <V1_226 is allowed for 2 or fewer neighboring vias. These vias must be spaced from other vias by >=V1_226. Note: This rule applies only if any of the vias neighboring the V1HL via are <V1_227 in the PGD direction.",
      xc(V1_227) => "Max PGD length of neighboring vias for V1_226 to apply (<)",
      xc(V1_23) => "Parallel full-facing metal-aligned Via1 edges can be as closely spaced as the minimum allowed M2 space.  (only allowed value)",
      xc(V1_24) => "Min Via1 corner-to-corner space",
      xc(V1_25) => "A tight via-via corner space <V1_124 is allowed for a single isolated via pair only. The pair must be spaced from other vias by >= V1_28.",
      xc(V1_26) => "A tight Via1TB-Via1TB corner space <V1_125 is allowed for a single isolated via pair only. The pair must be spaced from other vias by >= V1_28. ",
      xc(V1_28) => "Unrestricted min Via1 edge-to-edge space (PGD)",
      xc(V1_301) => "Via1A/B/C in ULPpitchID can have at most 2 Via1 neighbors at corner-to-corner spacing < V1_301  (3 neighbors or 4 neighbors all at < V1_301 corner spacing are not allowed)",
      xc(V1_302) => "Via1A/B/C in ULPpitchID is not allowed to form a Y shape in which 2 corner-to-corner Via1 neighbors are at <V1_301 spacing and the 4th Via1 is at PGD spacing <= V1_302",
      xc(V1_303) => "Via1A/B/C in ULPpitchID is not allowed to form a diamond shape in which all 4 corner-to-corner Via1 neighbors are at <V1_301 spacing and the PGD spacing inside the diamond is <=V1_303",
      xc(V1_32) => "Min Via1 to Via0 space (on different Metal1)",
      xc(V1_33) => "Min Via1 edge space to Metal1",
      xc(V1_40) => "Via1 edge enclosure by width_01 Metal1 (OGD), fixed value (V1TA/TB are exceptions)",
      xc(V1_42) => "Minimum Via1TB overlap of Metal1 (OGD)",
      xc(V1_43) => "Via1TA/TB must overlap 2 adjacent M1 lines",
      xc(V1_49) => "Min Metal1 line-end enclosure of Via1",
      xc(V1_50) => "Min Metal1 line-end enclosure of Via1, when Via1 lands on an offset M1 as defined by M1_86",
      xc(V1_52) => "All Via1 must be centered in metal2 (PGD) (except V1HA/HG/HK/HM)",
      xc(V1_53) => "Via1HD/HG can only be covered by a width_L_06 metal2",
      xc(V1_54) => "Via1HJ/HK can only be covered by a width_L_05 metal2",
      xc(V1_55) => "Via1HA can only be covered by a width_M_01 M2 wire",
      xc(V1_56) => "Via1HL/HM can only be covered by a width_L_02 or wider M2 wire",
      xc(V1_61) => "Min M2 line-end enclosure of Via1 ",
      xc(V1_97) => "Min space between Via1TA/TB long edge to long edge (PGD)",
      xc(V1_98) => "V1Ts cannot be on a power net",
      xc(V2H_01) => "Width of Via2HA (PGD), fixed value",
      xc(V2H_02) => "Via2HA length (OGD), fixed value (one edge SA only)",
      xc(V2H_03) => "Width of Via2HG (PGD), fixed value",
      xc(V2H_04) => "Via2HG length (OGD), fixed value (one edge SA only)",
      xc(V2H_05) => "Width of Via2HK (PGD), fixed value",
      xc(V2H_06) => "Via2HK length (OGD), fixed value (one edge SA only)",
      xc(V2H_07) => "Width of Via2HM (PGD), fixed value",
      xc(V2H_08) => "Via2HM length (OGD), fixed value (one edge SA only)",
      xc(V2H_10) => "Only one of the Via2HA/HG/HK/HM PGD edges is aligned to a Metal3 edge.",
      xc(V2H_11) => "Width of Via2HD (PGD), fixed value",
      xc(V2H_12) => "Via2HD length (OGD), fixed value (non-SA only)",
      xc(V2H_13) => "Width of Via2HJ (PGD), fixed value",
      xc(V2H_14) => "Via2HJ length (OGD), fixed value (non-SA only)",
      xc(V2H_15) => "Width of Via2HL (PGD), fixed value",
      xc(V2H_16) => "Via2HL length (OGD), fixed value (non-SA only)",
      xc(V2H_20) => "None of the Via2HD/HJ/HL edges are aligned to Metal-3 edges.",
      xc(V2T_01) => "Via2TA-Bridge via length (PGD), fixed value (SA edge)",
      xc(V2T_02) => "Via2TA-Bridge via width (OGD), fixed value",
      xc(V2T_03) => "Via2TB-Bridge via length (PGD), fixed value (SA edge)",
      xc(V2T_04) => "Via2TB-Bridge via width (OGD), fixed value",
      xc(V2T_05) => "Via2TC-Bridge via length (PGD), fixed value (SA edge)",
      xc(V2T_06) => "Via2TC-Bridge via width (OGD), fixed value",
      xc(V2T_20) => "The V2T_01 edges of V2TA, V2T_03 edges of V2TB, and V2T_05 edges of V2TC must both be aligned with parallel Metal-3 edges.",
      xc(V2_01) => "Width of below Via2 (PGD), fixed value",
      xc(V2_02) => "Via2A length (OGD), fixed value",
      xc(V2_03) => "Via2B length (OGD), fixed value",
      xc(V2_04) => "Via2D length (OGD), fixed value",
      xc(V2_05) => "Via2F length (OGD), fixed value",
      xc(V2_06) => "Via2G length (OGD), fixed value",
      xc(V2_07) => "Via2F length (OGD), fixed value",
      xc(V2_08) => "Via2J length (OGD), fixed value",
      xc(V2_09) => "Via2R length (OGD), fixed value",
      xc(V2_10) => "Via2V length (OGD), fixed value",
      xc(V2_11) => "Via2L length (OGD), fixed value",
      xc(V2_116) => "Via2GY (PGD), fixed value (SA edges) (not for P1273.6)",
      xc(V2_117) => "Via2GY length (OGD), fixed value (not for P1273.6)",
      xc(V2_118) => "Via2GZ (PGD), fixed value (SA edges) (not for P1273.6)",
      xc(V2_119) => "Via2GZ length (OGD), fixed value (not for P1273.6)",
      xc(V2_12) => "Via2N length (OGD), fixed value",
      xc(V2_120) => "Via2JX length (OGD), fixed value",
      xc(V2_121) => "Via2S (PGD), fixed value (SA edges)",
      xc(V2_122) => "Via2S length (OGD), fixed value",
      xc(V2_123) => "Via2GX (PGD), fixed value (SA edges)",
      xc(V2_124) => "Via2GX length (OGD), fixed value",
      xc(V2_127) => "Via2JX (PGD), fixed value (SA edges)",
      xc(V2_128) => "Unrestricted min Via2 edge-to-edge space, between SA edges",
      xc(V2_129) => "Via2VX (PGD), fixed value (SA edges)",
      xc(V2_13) => "Via2S length (OGD), fixed value",
      xc(V2_130) => "Via2VX length (OGD), fixed value",
      xc(V2_131) => "Via2RX (PGD), fixed value (SA edges)",
      xc(V2_132) => "Via2RX length (OGD), fixed value",
      xc(V2_133) => "Via2RY (PGD), fixed value (SA edges)",
      xc(V2_134) => "Via2RY length (OGD), fixed value",
      xc(V2_135) => "Via2NX (PGD), fixed value (SA edges)",
      xc(V2_136) => "Via2NX length (OGD), fixed value",
      xc(V2_137) => "Via2PW (PGD), fixed value (SA edges)",
      xc(V2_138) => "Via2PW length (OGD), fixed value",
      xc(V2_139) => "Via2PT (PGD), fixed value (SA edges)",
      xc(V2_14) => "Via2O length (OGD), fixed value",
      xc(V2_140) => "Via2PT length (OGD), fixed value",
      xc(V2_141) => "Via2PU (PGD), fixed value (SA edges)",
      xc(V2_142) => "Minimum Via2TC overlap of Metal2 (PGD). If M2 width is <V2_42, then Via2TC OGD edge enclosure of M2 inside edge must be >=V2_142.",
      xc(V2_143) => "Via2PV (PGD), fixed value (SA edges)",
      xc(V2_144) => "Via2PV length (OGD), fixed value",
      xc(V2_145) => "Via2PW (PGD), fixed value (SA edges)",
      xc(V2_146) => "Via2PW length (OGD), fixed value",
      xc(V2_147) => "Via2PX (PGD), fixed value (SA edges)",
      xc(V2_148) => "Via2PX length (OGD), fixed value",
      xc(V2_149) => "Via2PY (PGD), fixed value (SA edges)",
      xc(V2_150) => "Via2PY length (OGD), fixed value",
      xc(V2_152) => "Min Via2 to Via1 edge-to-edge space (on different Metal2)",
      xc(V2_16) => "Via2R length (OGD), fixed value",
      xc(V2_161) => "Via2SA (PGD), fixed value (SA edges)",
      xc(V2_162) => "Via2SA length (OGD), fixed value",
      xc(V2_163) => "Via2SB (PGD), fixed value (SA edges)",
      xc(V2_164) => "Via2SB length (OGD), fixed value",
      xc(V2_165) => "Via2SC (PGD), fixed value (SA edges)",
      xc(V2_166) => "Via2SC length (OGD), fixed value",
      xc(V2_17) => "Via2ZA length (OGD), fixed value",
      xc(V2_172) => "Via2PU length (OGD), fixed value",
      xc(V2_18) => "Via2ZB length (OGD), fixed value",
      xc(V2_19) => "Via2C length (OGD), fixed value",
      xc(V2_20) => "The V2_01 edges of above Via2 must both be aligned with parallel Metal-3 edges.",
      xc(V2_22) => "Unrestricted V2A-to-V2A center-to-center space (min)",
      xc(V2_228) => "Unrestricted min V2HA SA edge to SA edge of any via2",
      xc(V2_23) => "Parallel full-facing metal-aligned Via2 edges can be as closely spaced as the minimum allowed M3 space.  (only allowed value)",
      xc(V2_24) => "Min Via2 corner-to-corner space (Note that space values between V2_24 and V2_250 come with restrictions)",
      xc(V2_240) => "Only V2_01 width vias can overhang Metal2 (PGD)",
      xc(V2_241) => "Minimum Metal2 enclosure of Via2GY/GZ (PGD)",
      xc(V2_250) => "Min unrestricted Via2 corner-to-corner space",
      xc(V2_251) => "A small via2 (32 wide - A/B/C/D/F/G/J/L/N/O/R/S/V/HA/HG/HK/HM/HD/HJ/HL) can have only one via2 (big or small) at corner-to-corner space >=V2_24 and <V2_250; other vias must be >=V2_250 from the small via ",
      xc(V2_252) => "A big via2 can have 2 or fewer small via2 (32 wide) at corner-to-corner space >=V2_24 and <V2_250 on any 2 corners; other vias must be >=V2_250 from the big via ",
      xc(V2_28) => "Unrestricted min Via2 edge-to-edge space, between non-SA edges",
      xc(V2_32) => "Min Via2 to Via1 corner-to-corner space (on different Metal2)",
      xc(V2_33) => "Min Via2 edge space to Metal2",
      xc(V2_40) => "Maximum Via2 overhang of Metal2 (PGD)",
      xc(V2_41) => "Via2 must be centered on Metal2 (PGD) (V2_241 is an exception)",
      xc(V2_42) => "Minimum Via2TA/TB overlap of Metal2 (PGD). If M2 width is <V2_42, then Via2TA/TB OGD edge enclosure of M2 inside edge must be >=V2_42.",
      xc(V2_43) => "Via2TA/TB/TC must overlap 2 adjacent Metal2 lines",
      xc(V2_45) => "Via2JX cannot land on Metal2 narrower than M2L_01 (all M2S and M2M lines)",
      xc(V2_450) => "Min Bridge Via2 corner-to-corner space to any other via2",
      xc(V2_451) => "Min Bridge Via2 self-aligned edge space to any via2 self-aligned edge",
      xc(V2_452) => "Min Bridge Via2 non-self-aligned edge space to any via2 non-self-aligned edge",
      xc(V2_46) => "Via2RX cannot land on Metal2 narrower than M2M_02 (all M2S and M2M_01 lines)",
      xc(V2_49) => "Min Metal2 line-end enclosure of Via2",
      xc(V2_51) => "Both opposite edges of a (2-sided SA) aligned via must be metal aligned",
      xc(V2_54) => "Via2HJ can only be covered by a width_L_05 metal3",
      xc(V2_61) => "Min M3 line-end enclosure of Via2 ",
      xc(V2_62) => "Min M3 line-side enclosure of Via2HD/HJ/HL (OGD) ",
      xc(V2_97) => "Min V2TA/TB/TC to V2TA/TB/TC space OGD (this is an exception to V2_23)",
      xc(V2_98) => "V2Ts (TA/TB/TC) cannot be on a power net",
      xc(V3H_01) => "Width of Via3HA (OGD), fixed value",
      xc(V3H_02) => "Via3HA length (PGD), fixed value (one OGD edge SA only)",
      xc(V3H_03) => "Width of Via3HG (OGD), fixed value",
      xc(V3H_04) => "Via3HG length (PGD), fixed value (one OGD edge SA only)",
      xc(V3H_05) => "Width of Via3HK (OGD), fixed value",
      xc(V3H_06) => "Via3HK length (PGD), fixed value (one OGD edge SA only)",
      xc(V3H_07) => "Width of Via3HM (OGD), fixed value",
      xc(V3H_08) => "Via3HM length (PGD), fixed value (one OGD edge SA only)",
      xc(V3H_10) => "Only one of the Via3HA/HG/HK/HM OGD edges is aligned to a Metal-4 edge.",
      xc(V3H_11) => "Width of Via3HD (OGD), fixed value",
      xc(V3H_12) => "Via3HD length (PGD), fixed value (non-SA only)",
      xc(V3H_13) => "Width of Via3HJ (OGD), fixed value",
      xc(V3H_14) => "Via3HJ length (PGD), fixed value (non-SA only)",
      xc(V3H_15) => "Width of Via3HL (OGD), fixed value",
      xc(V3H_16) => "Via3HL length (PGD), fixed value (non-SA only)",
      xc(V3H_17) => "Width of Via3HN (OGD), fixed value (not allowed for P1273.6)",
      xc(V3H_18) => "Via3HN length (PGD), fixed value (non-SA only) (not allowed for P1273.6) ",
      xc(V3H_20) => "None of the Via3HD/HJ/HL/HN edges are aligned to Metal-4 edges.",
      xc(V3T_01) => "Via3TA-Bridge via length (OGD), fixed value (SA edge)",
      xc(V3T_02) => "Via3TA-Bridge via width (PGD), fixed value",
      xc(V3T_03) => "Via3TB-Bridge via length (OGD), fixed value (SA edge)",
      xc(V3T_04) => "Via3TB-Bridge via width (PGD), fixed value",
      xc(V3T_05) => "Via3TC-Bridge via length (OGD), fixed value (SA edge)",
      xc(V3T_06) => "Via3TC-Bridge via width (PGD), fixed value",
      xc(V3T_20) => "The V3T_01 edges of V3TA, V3T_03 edges of V3TB, and V3T_05 edges of V3TC must both be aligned with parallel Metal-4 edges.",
      xc(V3_01) => "Width of below Via3 (OGD), fixed value",
      xc(V3_02) => "Via3A length (PGD), fixed value",
      xc(V3_03) => "Via3B length (PGD), fixed value",
      xc(V3_04) => "Via3D length (PGD), fixed value",
      xc(V3_05) => "Via3F length (PGD), fixed value",
      xc(V3_06) => "Via3G length (PGD), fixed value",
      xc(V3_07) => "Via3X length (PGD), fixed value",
      xc(V3_08) => "Via3J length (PGD), fixed value",
      xc(V3_09) => "Via3R length (PGD), fixed value",
      xc(V3_10) => "Via3V length (PGD), fixed value",
      xc(V3_101) => "Width of Via3S (OGD), fixed value (SA edge)",
      xc(V3_102) => "Length of Via3S (PGD), fixed value",
      xc(V3_103) => "Width of Via3U (OGD), fixed value (SA edge)",
      xc(V3_104) => "Length of Via3U (PGD), fixed value",
      xc(V3_105) => "Width of Via3V (OGD), fixed value (SA edge)",
      xc(V3_106) => "Length of Via3V (PGD), fixed value",
      xc(V3_107) => "Width of Via3W (OGD), fixed value (SA edge)",
      xc(V3_108) => "Length of Via3W (PGD), fixed value",
      xc(V3_109) => "Width of Via3X (OGD), fixed value (SA edge)",
      xc(V3_11) => "Via3L length (PGD), fixed value",
      xc(V3_110) => "Length of Via3X (PGD), fixed value",
      xc(V3_111) => "Width of Via3Y (OGD), fixed value (SA edge)",
      xc(V3_112) => "Length of Via3Y (PGD), fixed value",
      xc(V3_113) => "Width of Via3Z (OGD), fixed value (SA edge)",
      xc(V3_114) => "Length of Via3Z (PGD), fixed value",
      xc(V3_12) => "Via3N length (PGD), fixed value",
      xc(V3_120) => "Via3JX length (PGD), fixed value",
      xc(V3_123) => "Via3GX (OGD), fixed value (SA edges)",
      xc(V3_124) => "Via3GX length (PGD), fixed value",
      xc(V3_125) => "Via3XX (OGD), fixed value (SA edges)",
      xc(V3_126) => "Via3XX length (PGD), fixed value",
      xc(V3_127) => "Via3JX (OGD), fixed value (SA edges)",
      xc(V3_128) => "Unrestricted min Via3 edge-to-edge space, between SA edges",
      xc(V3_129) => "Via3VX (OGD), fixed value (SA edges)",
      xc(V3_13) => "Via3S length (PGD), fixed value",
      xc(V3_130) => "Via3VX length (PGD), fixed value",
      xc(V3_131) => "Via3RX (OGD), fixed value (SA edges)",
      xc(V3_132) => "Via3RX length (PGD), fixed value",
      xc(V3_133) => "Via3RY (OGD), fixed value (SA edges)",
      xc(V3_134) => "Via3RY length (PGD), fixed value",
      xc(V3_135) => "Via3NX (OGD), fixed value (SA edges)",
      xc(V3_136) => "Via3NX length (PGD), fixed value",
      xc(V3_137) => "Via3RZ (OGD), fixed value (SA edges) (not allowed for P1273.6)",
      xc(V3_138) => "Via3RZ length (PGD), fixed value (not allowed for P1273.6)",
      xc(V3_14) => "Via3O length (PGD), fixed value",
      xc(V3_142) => "Minimum Via3TC overlap of Metal3 (OGD). If M3 width is <V3_42, then Via3TC PGD edge enclosure of M3 inside edge must be >=V3_142.",
      xc(V3_15) => "Via3T length (PGD), fixed value",
      xc(V3_152) => "Min Via3 to Via2 edge-to-edge space (on different Metal3)",
      xc(V3_153) => "Via3 on isolated M4 to Via2 space (on different Metal3 net)",
      xc(V3_154) => "Isolated M4 line for V3_153 is defined as a line with exposed edges on opposite edges of the line with overlap of > V3_154",
      xc(V3_16) => "Via3C length (PGD), fixed value",
      xc(V3_161) => "Width of below Via3 (OGD), fixed value (SA edges)",
      xc(V3_162) => "Via3BP length (PGD), fixed value",
      xc(V3_163) => "Via3NP length (PGD), fixed value",
      xc(V3_164) => "Via3OP length (PGD), fixed value",
      xc(V3_165) => "Via3DP length (PGD), fixed value",
      xc(V3_166) => "Via3EP length (PGD), fixed value",
      xc(V3_167) => "Via3TP length (PGD), fixed value",
      xc(V3_168) => "Via3QP length (PGD), fixed value",
      xc(V3_169) => "Via3CP length (PGD), fixed value",
      xc(V3_170) => "Via3RP length (PGD), fixed value",
      xc(V3_171) => "Via3MP length (PGD), fixed value",
      xc(V3_19) => "Via3C length (PGD), fixed value",
      xc(V3_20) => "The V3_01 edges of above Via3 must both be aligned with parallel Metal-4 edges.",
      xc(V3_22) => "Unrestricted V3A-to-V3A center-to-center space (min)",
      xc(V3_228) => "Unrestricted min V3HA SA edge to SA edge of any via3",
      xc(V3_23) => "Parallel full-facing metal-aligned Via3 edges can be as closely spaced as the minimum allowed M4 space.  (only allowed value)",
      xc(V3_24) => "Min Via3 corner-to-corner space (Note that space values between V3_24 and V3_250 come with restrictions)",
      xc(V3_240) => "Only V3_01 width vias can overhang Metal3 (OGD)",
      xc(V3_25) => "The tight via-via corner space (<V3_28) is allowed for a single isolated via pair. The pair must be spaced from other vias by V3_28 ",
      xc(V3_250) => "Min unrestricted Via3 corner-to-corner space",
      xc(V3_251) => "A small via3 (32 wide - A/B/C/D/F/G/J/L/N/O/R/S/V/X/HA/HG/HK/HM/HD/HJ/HL) can have only one via3 (big or small) at corner-to-corner space >=V3_24 and <V3_250; other vias must be >=V3_250 from the small via ",
      xc(V3_252) => "A big via3 can have 2 or fewer small via3 (32 wide) at corner-to-corner space >=V3_24 and <V3_250 on any 2 corners; other vias must be >=V3_250 from the big via ",
      xc(V3_26) => "Min (Via3BP/NP/OP/DP/EP/TP/QP/CP/RP/MP/S/U/V/W/X/Y/Z to any Via3) or  (Via3FA/Q/R/T/C to Via3FA/Q/R/T/C) corner-to-corner space (exception to V3_24/25 rules)",
      xc(V3_28) => "Unrestricted min Via3 edge-to-edge space, between non-SA edges",
      xc(V3_32) => "Min Via3 to Via2 corner-to-corner space (on different Metal3)",
      xc(V3_33) => "Min Via3 edge space to Metal3",
      xc(V3_40) => "Maximum Via3 overhang of Metal3 (OGD)",
      xc(V3_41) => "Via3 must be centered on Metal3 (OGD) ",
      xc(V3_42) => "Minimum Via3TA/TB overlap of Metal3 (OGD). If M3 width is <V3_42, then Via3TA/TB PGD edge enclosure of M3 inside edge must be >=V3_42.",
      xc(V3_43) => "Via3TA/TB/TC must overlap 2 adjacent Metal3 lines",
      xc(V3_45) => "Via3JX cannot land on Metal3 narrower than M3L_01 (all M3S and M3M lines)",
      xc(V3_450) => "Min Bridge Via3 corner-to-corner space to any other via3",
      xc(V3_451) => "Min Bridge Via3 self-aligned edge space to any via3 self-aligned edge",
      xc(V3_452) => "Min Bridge Via3 non-self-aligned edge space to any via3 non-self-aligned edge",
      xc(V3_46) => "Via3RX cannot land on Metal3 narrower than M3M_02 (all M3S and M3M_01 lines)",
      xc(V3_49) => "Min Metal3 line-end enclosure of Via3",
      xc(V3_51) => "Both opposite edges of a (2-sided SA) aligned via must be metal aligned",
      xc(V3_54) => "Via3HJ can only be covered by a width_L_05 metal4",
      xc(V3_61) => "Min M4 line-end enclosure of Via3 ",
      xc(V3_62) => "Min M4 line-side enclosure of Via3HD/HJ/HL/HN (PGD) ",
      xc(V3_97) => "Min V3TA/TB/TC to V3TA/TB/TC space PGD (this is an exception to V3_23)",
      xc(V3_98) => "V3Ts (TA/TB/TC) cannot be on a power net",
      xc(V4H_01) => "Width of Via4HA (PGD), fixed value",
      xc(V4H_02) => "Via4HA length (OGD), fixed value (one edge SA only)",
      xc(V4H_03) => "Width of Via4HG (PGD), fixed value",
      xc(V4H_04) => "Via4HG length (OGD), fixed value (one edge SA only)",
      xc(V4H_05) => "Width of Via4HK (PGD), fixed value",
      xc(V4H_06) => "Via4HK length (OGD), fixed value (one edge SA only)",
      xc(V4H_07) => "Width of Via4HM (PGD), fixed value",
      xc(V4H_08) => "Via4HM length (OGD), fixed value (one edge SA only)",
      xc(V4H_10) => "Only one of the Via4HA/HG/HK/HM PGD edges is aligned to a Metal-5 edge.",
      xc(V4H_11) => "Width of Via4HD (PGD), fixed value",
      xc(V4H_12) => "Via4HD length (OGD), fixed value (non-SA only)",
      xc(V4H_13) => "Width of Via4HJ (PGD), fixed value",
      xc(V4H_14) => "Via4HJ length (OGD), fixed value (non-SA only)",
      xc(V4H_15) => "Width of Via4HL (PGD), fixed value",
      xc(V4H_16) => "Via4HL length (OGD), fixed value (non-SA only)",
      xc(V4H_20) => "None of the Via4HD/HJ/HL edges are aligned to Metal-5 edges.",
      xc(V4T_01) => "Via4TA-Bridge via length (PGD), fixed value (SA edge)",
      xc(V4T_02) => "Via4TA-Bridge via width (OGD), fixed value",
      xc(V4T_03) => "Via4TB-Bridge via length (PGD), fixed value (SA edge)",
      xc(V4T_04) => "Via4TB-Bridge via width (OGD), fixed value",
      xc(V4T_05) => "Via4TC-Bridge via length (PGD), fixed value (SA edge)",
      xc(V4T_06) => "Via4TC-Bridge via width (OGD), fixed value",
      xc(V4T_20) => "The V4T_01 edges of V4TA, V4T_03 edges of V4TB, and V4T_05 edges of V4TC must both be aligned with parallel Metal-5 edges.",
      xc(V4_01) => "Width of below Via4 (PGD), fixed value (SA edges)",
      xc(V4_02) => "Via4A length (OGD), fixed value",
      xc(V4_03) => "Via4B length (OGD), fixed value",
      xc(V4_04) => "Via4D length (OGD), fixed value",
      xc(V4_05) => "Via4F length (OGD), fixed value",
      xc(V4_06) => "Via4D length (OGD), fixed value",
      xc(V4_08) => "Via4J length (OGD), fixed value",
      xc(V4_09) => "Via4FA length (OGD), fixed value",
      xc(V4_10) => "Via4N length (OGD), fixed value",
      xc(V4_101) => "Width of Via4S (PGD), fixed value (SA edges)",
      xc(V4_102) => "Length of Via4S (OGD), fixed value",
      xc(V4_103) => "Width of Via4U (PGD), fixed value (SA edges)",
      xc(V4_104) => "Length of Via4U (OGD), fixed value",
      xc(V4_105) => "Width of Via4V (PGD), fixed value (SA edges)",
      xc(V4_106) => "Length of Via4V (OGD), fixed value",
      xc(V4_107) => "Width of Via4W (PGD), fixed value (SA edges)",
      xc(V4_108) => "Length of Via4W (OGD), fixed value",
      xc(V4_109) => "Width of Via4X (PGD), fixed value (SA edges)",
      xc(V4_11) => "Via4O length (OGD), fixed value",
      xc(V4_110) => "Length of Via4X (OGD), fixed value",
      xc(V4_111) => "Width of Via4Y (PGD), fixed value (SA edges)",
      xc(V4_112) => "Length of Via4Y (OGD), fixed value",
      xc(V4_113) => "Width of Via4Z (PGD), fixed value (SA edges)",
      xc(V4_114) => "Length of Via4Z (OGD), fixed value",
      xc(V4_115) => "Width of Via4FP (PGD), fixed value (SA edges)",
      xc(V4_116) => "Length of Via4FP (OGD), fixed value",
      xc(V4_117) => "Width of Via4HP (PGD), fixed value (SA edges)",
      xc(V4_118) => "Length of Via4HP (OGD), fixed value",
      xc(V4_119) => "Via4RS length (OGD), fixed value",
      xc(V4_12) => "Via4Q length (OGD), fixed value",
      xc(V4_120) => "Via4JX length (OGD), fixed value",
      xc(V4_121) => "Via4W Width (PGD) , fixed value (SA edges)",
      xc(V4_122) => "Via4W length (OGD), fixed value",
      xc(V4_123) => "Via4GX (PGD), fixed value (SA edges)",
      xc(V4_124) => "Via4GX length (OGD), fixed value",
      xc(V4_125) => "Via4Y length (OGD), fixed value",
      xc(V4_126) => "Via4Z length (OGD), fixed value",
      xc(V4_127) => "Via4JX (PGD), fixed value (SA edges)",
      xc(V4_128) => "Unrestricted min Via4 edge-to-edge space between SA edges",
      xc(V4_129) => "Via4NX (PGD), fixed value (SA edges)",
      xc(V4_13) => "Via4R length (OGD), fixed value",
      xc(V4_130) => "Via4NX length (OGD), fixed value",
      xc(V4_131) => "Via4RX (PGD), fixed value (SA edges)",
      xc(V4_132) => "Via4RX length (OGD), fixed value",
      xc(V4_133) => "Via4RY (PGD), fixed value (SA edges)",
      xc(V4_134) => "Via4RY length (OGD), fixed value",
      xc(V4_135) => "Via4VX (PGD), fixed value (SA edges)",
      xc(V4_136) => "Via4VX length (OGD), fixed value",
      xc(V4_137) => "Via4SX (PGD), fixed value (SA edges)",
      xc(V4_138) => "Via4SX length (OGD), fixed value",
      xc(V4_14) => "Via4M length (OGD), fixed value",
      xc(V4_142) => "Minimum Via4TC overlap of Metal4 (PGD). If M4 width is <V4_42, then Via4TC OGD edge enclosure of M4 inside edge must be >=V4_142.",
      xc(V4_15) => "Via4T length (OGD), fixed value",
      xc(V4_152) => "Min Via4 to Via3 edge-to-edge space (on different Metal4)",
      xc(V4_153) => "Min Via4 on isolated M5 to Via3 space (on different Metal4)",
      xc(V4_154) => "Isolated M5 line for V4_153 is defined as a line with exposed edges on both sides with an overlap of the exposed edges > V4_154",
      xc(V4_16) => "Via4C length (OGD), fixed value",
      xc(V4_161) => "Width of below Via4 (PGD), fixed value (SA edges)",
      xc(V4_162) => "Via4BP length (OGD), fixed value",
      xc(V4_163) => "Via4NP length (OGD), fixed value",
      xc(V4_164) => "Via4OP length (OGD), fixed value",
      xc(V4_165) => "Via4DP length (OGD), fixed value",
      xc(V4_166) => "Via4EP length (OGD), fixed value",
      xc(V4_167) => "Via4TP length (OGD), fixed value",
      xc(V4_168) => "Via4QP length (OGD), fixed value",
      xc(V4_169) => "Via4CP length (OGD), fixed value",
      xc(V4_17) => "Via4V length (OGD), fixed value",
      xc(V4_170) => "Via4RP length (OGD), fixed value",
      xc(V4_171) => "Via4MP length (OGD), fixed value",
      xc(V4_172) => "Via4GP length (OGD), fixed value",
      xc(V4_181) => "Width of Via4YZ (PGD), fixed value",
      xc(V4_182) => "Length of Via4YZ (OGD), fixed value",
      xc(V4_19) => "V4_01 edge of above vias must both be aligned with parallel Metal-5 edges.",
      xc(V4_20) => "The V4_01 edges of above Via4 must both be aligned with parallel Metal-5 edges.",
      xc(V4_22) => "Unrestricted V4A-to-V4A center-to-center space (min)",
      xc(V4_228) => "Unrestricted min V4HA SA edge to SA edge of any via4",
      xc(V4_23) => "Parallel full-facing metal-aligned Via4 edges can be as closely spaced as the minimum allowed M5 space. (min value, allowed up to max value <V4_128)",
      xc(V4_24) => "Min Via4 corner-to-corner space",
      xc(V4_240) => "Only V4_01 (32nm), V4_161 (44nm) width vias (except Via4MP) can overhang Metal4 (PGD)",
      xc(V4_25) => "The tight via-via corner space (<V4_28) is allowed for a single isolated via pair. The pair must be spaced from other vias by >=V4_28 ",
      xc(V4_250) => "Min unrestricted Via4 corner-to-corner space",
      xc(V4_251) => "A small via4 (32 wide - A/B/C/D/F/G/J/L/N/O/R/S/V/HA/HG/HK/HM/HD/HJ/HL) can have only one via4 (big or small) at corner-to-corner space >=V4_24 and <V4_250; other vias must be >=V4_250 from the small via ",
      xc(V4_252) => "A big via4 can have 2 or fewer small via4 (32 wide) at corner-to-corner space >=V4_24 and <V4_250 on any 2 corners; other vias must be >=V4_250 from the big via ",
      xc(V4_26) => "Min (Via4BP/NP/OP/DP/EP/TP/QP/CP/RP/MP/GP/S/U/V/W/X/Y/Z/FP/HP/YZ to any Via4) or  (Via4FA/Q/R/T/C to Via4FA/Q/R/T/C) corner-to-corner space (exception to V4_24/25 rules)",
      xc(V4_28) => "Unrestricted min Via4 edge-to-edge space",
      xc(V4_29) => "Via4 min edge offset if corner-to-corner space is less than V4_30",
      xc(V4_30) => "Via4  corner-to-corner space limit for V4_29",
      xc(V4_32) => "Min Via4 to Via3 corner-to-corner space (on different Metal4)",
      xc(V4_33) => "Min Via4 edge space to Metal4",
      xc(V4_40) => "Maximum Via4 overhang of Metal4 (PGD)",
      xc(V4_41) => "Via4 must be centered on Metal4 (PGD)",
      xc(V4_42) => "Via4YZ can only land on width_L_05/06 M4 lines (M4L_05/06)",
      xc(V4_43) => "Via4TA/TB/TC must overlap 2 adjacent Metal4 lines",
      xc(V4_45) => "Via4JX cannot land on Metal4 narrower than M4L_01 (all M4S and M4M lines)",
      xc(V4_450) => "Min Bridge Via4 corner-to-corner space to any other via4",
      xc(V4_451) => "Min Bridge Via4 self-aligned edge space to any via4 self-aligned edge",
      xc(V4_452) => "Min Bridge Via4 non-self-aligned edge space to any via4 non-self-aligned edge",
      xc(V4_46) => "Via4RX cannot land on Metal4 narrower than M4M_02 (all M4S and M4M_01 lines)",
      xc(V4_49) => "Min Metal4 line-end enclosure of Via4",
      xc(V4_51) => "Both opposite edges of a (2-sided SA) aligned via must be metal aligned",
      xc(V4_52) => "Via4YZ must be centered under M5_13/14/15 width M5 (only)",
      xc(V4_54) => "Min Metal5 concave corner space to Via4",
      xc(V4_61) => "Min Metal5 line-end enclosure of Via4  (except Via4YZ)",
      xc(V4_62) => "Min Metal5 line-end enclosure of Via4YZ",
      xc(V4_97) => "Min V4TA/TB/TC to V4TA/TB/TC space OGD (this is an exception to V4_23)",
      xc(V4_98) => "V4Ts (TA/TB/TC) cannot be on a power net",
      xc(V4err_101) => "Via4N length (OGD), fixed value",
      xc(V4err_113) => "Via4NS length (OGD), fixed value",
      xc(V5_01) => "Width of below Via5 (OGD), fixed value (SA edges)",
      xc(V5_02) => "Via5A length (PGD), fixed value",
      xc(V5_03) => "Via5B length (PGD), fixed value",
      xc(V5_04) => "Via5C length (PGD), fixed value",
      xc(V5_05) => "Via5D length (PGD), fixed value",
      xc(V5_06) => "Via5E length (PGD), fixed value",
      xc(V5_07) => "Via5F length (PGD), fixed value",
      xc(V5_08) => "Via5G length (PGD), fixed value",
      xc(V5_09) => "Via5H length (PGD), fixed value",
      xc(V5_10) => "Via5I length (PGD), fixed value",
      xc(V5_101) => "Width of Via5K (OGD/PGD), fixed value (SA edge)",
      xc(V5_102) => "Length of Via5K (PGD/OGD), fixed value",
      xc(V5_103) => "Width of Via5CX (OGD), fixed value (SA edge)",
      xc(V5_104) => "Length of Via5CX (PGD), fixed value",
      xc(V5_105) => "Width of Via5P (OGD), fixed value (SA edge)",
      xc(V5_106) => "Length of Via5P (PGD), fixed value",
      xc(V5_107) => "Width of Via5W (OGD), fixed value (SA edge)",
      xc(V5_108) => "Length of Via5W (PGD), fixed value",
      xc(V5_109) => "Width of Via5X (OGD), fixed value (SA edge)",
      xc(V5_11) => "Via5J length (PGD), fixed value",
      xc(V5_110) => "Length of Via5X (PGD), fixed value",
      xc(V5_111) => "Width of Via5Y (OGD), fixed value (SA edge)",
      xc(V5_112) => "Length of Via5Y (PGD), fixed value",
      xc(V5_113) => "Width of Via5Z (OGD), fixed value (SA edge)",
      xc(V5_114) => "Length of Via5Z (PGD), fixed value",
      xc(V5_115) => "Width of Via5FP (OGD), fixed value (SA edge)",
      xc(V5_116) => "Length of Via5FP (PGD), fixed value",
      xc(V5_117) => "Width of Via5HP (OGD), fixed value (SA edge)",
      xc(V5_118) => "Length of Via5HP (PGD), fixed value",
      xc(V5_12) => "Via5L length (PGD), fixed value",
      xc(V5_124) => "Via5 min corner-to-corner spacing between via with SA edge in PGD and via with SA edge in OGD",
      xc(V5_128) => "Unrestricted min Via5 edge-to-edge space (SA edges, SA to non-SA edges)",
      xc(V5_13) => "Via5M length (PGD), fixed value",
      xc(V5_14) => "Via5N length (PGD), fixed value",
      xc(V5_15) => "Via5O length (PGD), fixed value",
      xc(V5_152) => "Min Via5 to Via4 edge-to-edge space (on different Metal5)",
      xc(V5_153) => "Min Via5 on isolated M6 to Via4 space (on different Metal5)",
      xc(V5_154) => "Isolated M6 line for V5_153 is defined as a line with exposed edges on both sides with an overlap of the exposed edges > V5_154",
      xc(V5_16) => "Via5C length (PGD), fixed value",
      xc(V5_161) => "Width of below Via5 (OGD), fixed value (SA edges)",
      xc(V5_162) => "Via5BP length (PGD), fixed value",
      xc(V5_163) => "Via5NP length (PGD), fixed value",
      xc(V5_164) => "Via5OP length (PGD), fixed value",
      xc(V5_165) => "Via5DP length (PGD), fixed value",
      xc(V5_166) => "Via5EP length (PGD), fixed value",
      xc(V5_167) => "Via5TP length (PGD), fixed value",
      xc(V5_168) => "Via5QP length (PGD), fixed value",
      xc(V5_169) => "Via5CP length (PGD), fixed value",
      xc(V5_170) => "Via5RP length (PGD), fixed value",
      xc(V5_171) => "Via5MP length (PGD), fixed value",
      xc(V5_172) => "Via5GP length (PGD), fixed value",
      xc(V5_181) => "Width of Via5YZ (OGD), fixed value",
      xc(V5_182) => "Length of Via5YZ (PGD), fixed value",
      xc(V5_19) => "V5_01 edge of above vias must both be aligned with parallel Metal6 edges.",
      xc(V5_22) => "Via5A-to-Via5A center-to-center space (on different M5 lines), minimum",
      xc(V5_23) => "Parallel full-facing metal-aligned Via5 edges can be as closely spaced as the minimum allowed M6 space.  (min value, allowed up to max value <=M6_33)",
      xc(V5_24) => "Min Via5 corner-to-corner space",
      xc(V5_240) => "Min enclosure of Via5P by Metal5",
      xc(V5_241) => "Only Via5L/M/N/O/P can land on Metal5 wires M5_13/14/15 (>=0.160)",
      xc(V5_25) => "The tight via-via corner space (<V5_28) is allowed for a single isolated via pair. The pair must be spaced from other vias by V5_28 ",
      xc(V5_26) => "Min (Via5BP/NP/OP/DP/EP/TP/QP/CP/RP/MP/GP/S/U/V/W/X/Y/Z/FP/HP/YZ to any Via5) or  (Via5FA/Q/R/T/C to Via5FA/Q/R/T/C) corner-to-corner space (exception to V5_24/25 rules)",
      xc(V5_28) => "Unrestricted min Via5 edge-to-edge space (non-SA edges)",
      xc(V5_29) => "Via5 min edge offset if corner-to-corner space is < V5_30",
      xc(V5_30) => "Via5  corner-to-corner space limit (max value) for rule V5_29",
      xc(V5_32) => "Min Via5 to Via4 space (on different Metal5, all-directional check)",
      xc(V5_33) => "Min Via5 edge space to Metal5",
      xc(V5_40) => "Maximum Via5 overhang of Metal5 (PGD/OGD)",
      xc(V5_41) => "All Via5 (except Via5P) must be centered on Metal5 (PGD/OGD)",
      xc(V5_42) => "Via5YZ can only land on width_L_05/06 M5 lines (M5L_05/06)",
      xc(V5_49) => "Min Metal5 line-end enclosure of Via5",
      xc(V5_51) => "Both opposite edges of a (2-sided SA) aligned via must be metal aligned",
      xc(V5_52) => "Via5YZ must be centered under M6_13/14/15 width M6 (only)",
      xc(V5_54) => "Min Metal6 concave corner space to Via5",
      xc(V5_61) => "Min Metal6 line-end enclosure of Via5 ",
      xc(V5_62) => "Min Metal6 line-end enclosure of Via5YZ",
      xc(V6_01) => "Via6A width (OGD), fixed value",
      xc(V6_02) => "Via6A length (PGD), fixed value",
      xc(V6_03) => "Via6B width (OGD), fixed value",
      xc(V6_04) => "Via6B length (PGD), fixed value",
      xc(V6_05) => "Via6C length (PGD/OGD - SA edges), fixed value",
      xc(V6_06) => "Via6C width (OGD/PGD - non SA edges), fixed value",
      xc(V6_07) => "Via6D length (PGD), fixed value",
      xc(V6_08) => "Via6D width (OGD), fixed value",
      xc(V6_09) => "Via6E length (PGD), fixed value",
      xc(V6_10) => "Via6E width (OGD), fixed value",
      xc(V6_101) => "Width of Via6R (PGD), fixed value  (SA edge)",
      xc(V6_102) => "Via6R length (OGD), fixed value",
      xc(V6_103) => "Width of Via6S (PGD), fixed value  (SA edge)",
      xc(V6_104) => "Via6S length (OGD), fixed value",
      xc(V6_105) => "Width of Via6T (PGD), fixed value  (SA edge)",
      xc(V6_106) => "Via6T length (OGD), fixed value",
      xc(V6_107) => "Via6DX length (PGD), fixed value (not allowed for P1273.6)",
      xc(V6_108) => "Via6DX width (OGD), fixed value (not allowed for P1273.6)",
      xc(V6_109) => "Via6EX length (PGD), fixed value (not allowed for P1273.6)",
      xc(V6_11) => "Via6F length (PGD), fixed value",
      xc(V6_110) => "Via6EX width (OGD), fixed value (not allowed for P1273.6)",
      xc(V6_117) => "Via6CY length (PGD/OGD - SA edges), fixed value (not allowed for P1273.6)",
      xc(V6_118) => "Via6CY width (OGD/PGD - non SA edges), fixed value (not allowed for P1273.6)",
      xc(V6_12) => "Via6F width (OGD), fixed value",
      xc(V6_128) => "Unrestricted min Via6 edge-to-edge space (SA edges, SA to non-SA edges)",
      xc(V6_13) => "Via6G length (PGD), fixed value",
      xc(V6_14) => "Via6G width (OGD), fixed value",
      xc(V6_15) => "Via6H length (PGD), fixed value",
      xc(V6_16) => "Via6H width (OGD), fixed value",
      xc(V6_17) => "Via6CX length (PGD/OGD - SA edges), fixed value",
      xc(V6_18) => "Via6CX width (OGD/PGD - non SA edges), fixed value",
      xc(V6_19) => "The long edges of V6A/CY must both be aligned with parallel metal edges",
      xc(V6_20) => "The short edges V6B/C/CX/D/DX/E/EX/F/G/H vias must both be aligned with parallel metal edges",
      xc(V6_22) => "Via6A-Via6A center-to-center space, minimum",
      xc(V6_23) => "Min Via6 metal aligned edges space when the other edges (non-metal limited edges) are perfectly aligned  (allowed up to max value <=M7_27)",
      xc(V6_24) => "Min Via6 corner-to-corner space",
      xc(V6_240) => "Via6H is not allowed to overhang",
      xc(V6_25) => "Min Via6 facing edge space (V6_23,27,28 are exceptions)",
      xc(V6_27) => "Via6C/CX/D/E/F/G/H/CY/DX/EX facing short-edge to short-edge space, minimum",
      xc(V6_28) => "Min Via6 metal aligned edges space when the other edges (non-metal limited edges) are NOT perfectly aligned",
      xc(V6_29) => "Via6 min edge offset if corner-to-corner space is < V6_30",
      xc(V6_30) => "Via6 corner-to-corner space limit (max value) for rule V6_29",
      xc(V6_31) => "Min Via6 to Via5 edge-edge space (on different M6)",
      xc(V6_32) => "Min Via6 to Via5 corner-to-corner space (on different M6)",
      xc(V6_33) => "Min Via6 edge space to Metal6",
      xc(V6_40) => "Maximum Via6 overhang of Metal6 (PGD)",
      xc(V6_41) => "Via6 (except Via6H) must be centered on Metal6 (PGD)",
      xc(V6_48) => "Via6H enclosure by Metal6, min value",
      xc(V6_49) => "Min Metal6 line end enclosure of Via6",
      xc(V6_51) => "Both opposite edges of a (2-sided SA) aligned via must be metal aligned",
      xc(V6_54) => "Min M7 concave corner space to Via6",
      xc(V6_61) => "Min M7 line end enclosure of Via6 ",
      xc(V6_92) => "Via6BS length (OGD), fixed value",
      xc(V6err_02) => "Via6AS length (OGD), fixed value",
      xc(V6err_103) => "Width of Via6S (PGD), fixed value  (SA edge)",
      xc(V6err_104) => "Via6S length (OGD), fixed value",
      xc(V6err_12) => "Via6Q length (OGD), fixed value",
      xc(V6err_92) => "Via6BS length (OGD), fixed value",
      xc(V7_01) => "Width of below Via7, (OGD) fixed value (SA edges)",
      xc(V7_02) => "Via7AS length (PGD), fixed value",
      xc(V7_03) => "Via7CS length (PGD), fixed value",
      xc(V7_04) => "Via7DS length (PGD), fixed value",
      xc(V7_05) => "Via7ES length (PGD), fixed value",
      xc(V7_06) => "Via7GS length (PGD), fixed value",
      xc(V7_07) => "Via7M length (PGD), fixed value",
      xc(V7_08) => "Via7N length (PGD), fixed value",
      xc(V7_09) => "Via7P length (PGD), fixed value",
      xc(V7_10) => "Via7JS length (PGD), fixed value",
      xc(V7_101) => "Via7Q width (OGD), fixed value (SA edges)",
      xc(V7_102) => "Via7Q length (PGD), fixed value",
      xc(V7_103) => "Via7R width (OGD), fixed value (SA edges)",
      xc(V7_104) => "Via7R length (PGD), fixed value",
      xc(V7_105) => "Via7S width (OGD), fixed value (SA edges)",
      xc(V7_106) => "Via7S length (PGD), fixed value",
      xc(V7_107) => "Via7T width (OGD), fixed value (SA edges)",
      xc(V7_108) => "Via7T length (PGD), fixed value",
      xc(V7_109) => "Via7U width (OGD), fixed value (SA edges)",
      xc(V7_11) => "Rectangular Via7C width, ONLY ALLOWED value",
      xc(V7_110) => "Via7U length (PGD), fixed value",
      xc(V7_111) => "Via7ZS width (OGD), fixed value (SA edges)",
      xc(V7_112) => "Via7ZS length (PGD), fixed value",
      xc(V7_12) => "Rectangular Via7C length, ONLY ALLOWED value",
      xc(V7_128) => "Unrestricted min Via7 edge-to-edge space (SA edges, SA to non-SA edges)",
      xc(V7_13) => "Rectangular Via7D width, ONLY ALLOWED value",
      xc(V7_14) => "Rectangular Via7D length, ONLY ALLOWED value",
      xc(V7_151) => "Width of Via7TS, fixed value (OGD SA edge)",
      xc(V7_152) => "Via7TS length (PGD), fixed value",
      xc(V7_153) => "Width of Via7US, fixed value (OGD SA edge)",
      xc(V7_154) => "Via7US length (PGD), fixed value",
      xc(V7_155) => "Width of Via7VS, fixed value (OGD SA edge)",
      xc(V7_156) => "Via7VS length (PGD), fixed value",
      xc(V7_157) => "Width of Via7WS, fixed value (OGD SA edge)",
      xc(V7_158) => "Via7WS length (PGD), fixed value",
      xc(V7_159) => "Width of Via7XS, fixed value (OGD SA edge)",
      xc(V7_16) => "Rectangular Via7E width, ONLY ALLOWED value",
      xc(V7_160) => "Via7XS length (PGD), fixed value",
      xc(V7_161) => "Width of Via7YS, fixed value (OGD SA edge)",
      xc(V7_162) => "Via7YS length (PGD), fixed value",
      xc(V7_163) => "Width of Via7ZS, fixed value (OGD SA edge)",
      xc(V7_164) => "Via7ZS length (PGD), fixed value",
      xc(V7_17) => "Rectangular Via7E length, ONLY ALLOWED value",
      xc(V7_22) => "Via7AS-to-Via7AS center-to-center space (on different M7 lines), minimum",
      xc(V7_23) => "Parallel full-facing metal-aligned Via7 edges can be as closely spaced as the minimum allowed M8 space.  (min value, allowed up to max value <=M8_27)",
      xc(V7_230) => "Max value for rule V7_23 spacing check",
      xc(V7_24) => "Min Via7 corner-to-corner space",
      xc(V7_28) => "Unrestricted min Via7 edge-to-edge space (non-SA edges)",
      xc(V7_29) => "Via7 min edge offset if corner-to-corner space is < V7_30",
      xc(V7_30) => "Via7 corner-to-corner space limit (max value) for rule V7_29",
      xc(V7_32) => "Min Via7 to Via6 space (on different Metal7, all-directional check)",
      xc(V7_33) => "Min Via7 edge space to Metal7",
      xc(V7_40) => "Maximum Via7 overhang of Metal7 (OGD/PGD)",
      xc(V7_41) => "Via7 must be centered on Metal7 (PGD/OGD)",
      xc(V7_42) => "Redundant Rectangular Via7s must be aligned with each other",
      xc(V7_49) => "Min Metal7 line-end enclosure of Via7",
      xc(V7_51) => "Both opposite edges of a (2-sided SA) aligned via must be metal aligned",
      xc(V7_52) => "Min M8 enclosure of Via7C/D/E (one edge at a corner)",
      xc(V7_53) => "Min M8 line-end enclosure of Via7C/D/E, orthogonal edge",
      xc(V7_54) => "Min Metal8 concave corner space to Via7",
      xc(V7_61) => "Min Metal8 line-end enclosure of Via7 ",
      xc(V7err_02) => "Via7AS length (PGD), fixed value",
      xc(V7err_10) => "Via7JS length (PGD), fixed value",
      xc(V7err_102) => "Via7KS length (PGD), fixed value",
      xc(V7err_151) => "Width of Via7TS, fixed value (OGD SA edge)",
      xc(V7err_152) => "Via7TS length (PGD), fixed value",
      xc(V7err_155) => "Width of Via7VS, fixed value (OGD SA edge)",
      xc(V7err_156) => "Via7VS length (PGD), fixed value",
      xc(V7err_157) => "Width of Via7WS, fixed value (OGD SA edge)",
      xc(V7err_158) => "Via7WS length (PGD), fixed value",
      xc(V8_01) => "Width of below Via8, fixed value (PGD SA-edge)",
      xc(V8_02) => "Via8AS length (OGD), fixed value",
      xc(V8_03) => "Via8BS length (OGD), fixed value",
      xc(V8_04) => "Via8CS length (OGD), fixed value",
      xc(V8_05) => "Via8DS length (OGD), fixed value",
      xc(V8_06) => "Via8ES length (OGD), fixed value",
      xc(V8_07) => "Via8FS length (OGD), fixed value",
      xc(V8_08) => "Via8GS length (OGD), fixed value",
      xc(V8_09) => "Via8HS length (OGD), fixed value",
      xc(V8_10) => "Via8JS length (OGD), fixed value",
      xc(V8_101) => "Width of below Via8, fixed value (PGD SA-edge)",
      xc(V8_102) => "Via8KS length (OGD), fixed value",
      xc(V8_103) => "Via8LS length (OGD), fixed value",
      xc(V8_104) => "Via8MS length (OGD), fixed value",
      xc(V8_105) => "Via8NS length (OGD), fixed value",
      xc(V8_106) => "Via8OS length (OGD), fixed value",
      xc(V8_107) => "Via8PS length (OGD), fixed value",
      xc(V8_108) => "Via8QS length (OGD), fixed value",
      xc(V8_109) => "Via8RS length (OGD), fixed value",
      xc(V8_11) => "Min M8 enclosure of Square Via8",
      xc(V8_12) => "Min M8 enclosure of Square Via8, orthogonal edge",
      xc(V8_128) => "Unrestricted min Via8 edge-to-edge space (SA edges, SA to non-SA edges)",
      xc(V8_131) => "Rectangular Via8RA width, ONLY ALLOWED value",
      xc(V8_132) => "Rectangular Via8RA length, ONLY ALLOWED value",
      xc(V8_151) => "Width of Via8TS, fixed value (PGD SA edge)",
      xc(V8_152) => "Via8TS length (OGD), fixed value",
      xc(V8_153) => "Width of Via8US, fixed value (PGD SA edge)",
      xc(V8_154) => "Via8US length (OGD), fixed value",
      xc(V8_155) => "Width of Via8VS, fixed value (PGD SA edge)",
      xc(V8_156) => "Via8VS length (OGD), fixed value",
      xc(V8_157) => "Width of Via8WS, fixed value (PGD SA edge)",
      xc(V8_158) => "Via8WS length (OGD), fixed value",
      xc(V8_159) => "Width of Via8XS, fixed value (PGD SA edge)",
      xc(V8_160) => "Via8XS length (OGD), fixed value",
      xc(V8_161) => "Width of Via8YS, fixed value (PGD SA edge)",
      xc(V8_162) => "Via8YS length (OGD), fixed value",
      xc(V8_163) => "Width of Via8ZS, fixed value (PGD SA edge)",
      xc(V8_164) => "Via8ZS length (OGD), fixed value",
      xc(V8_21) => "Square Via8 to Via7 (square/rectangular) space (on different M8 net, all-directional check)",
      xc(V8_22) => "Via8A-to-Via8A center-to-center space (on different M8 lines), minimum",
      xc(V8_23) => "Parallel full-facing metal-aligned Via8 edges can be as closely spaced as the minimum allowed M9 space.  (min value, allowed up to max value <=M9_22)",
      xc(V8_24) => "Min Via8 corner-to-corner space",
      xc(V8_28) => "Unrestricted min Via8 edge-to-edge space (non SA edges)",
      xc(V8_29) => "Via8 min edge offset if corner-to-corner space is < V8_30",
      xc(V8_30) => "Via8 corner-to-corner space limit (max value) for rule V8_29",
      xc(V8_31) => "Rectangular Via8 width, ONLY ALLOWED value",
      xc(V8_32) => "Min Via8 to Via7 space (on different Metal8 net, all-directional check)",
      xc(V8_33) => "Min Via8 edge space to Metal8",
      xc(V8_34) => "Rectangular Via8 Short edge facing space to Square or Rectangular Via8 ",
      xc(V8_35) => "Rectangular Via8 Corner-to-corner space to Square or Rectangular Via8 ",
      xc(V8_39) => "Redundant Rectangular Via8 spacing between facing Long edges, for electrically shorted vias, fixed value  (note this is an allowed exception to V8_33)",
      xc(V8_40) => "Maximum Via8 overhang of Metal8 (PGD)",
      xc(V8_41) => "Via8 must be centered on Metal8 (PGD)",
      xc(V8_49) => "Min Metal8 line-end enclosure of Via8",
      xc(V8_51) => "Both opposite edges of a (2-sided SA) aligned via must be metal aligned",
      xc(V8_52) => "Min M8 enclosure of Rectangular Via8, orthogonal edge",
      xc(V8_53) => "Max extent of Rectangular Via8 short edge beyond M8 side",
      xc(V8_54) => "Min Metal9 concave corner space to Via8",
      xc(V8_61) => "Min Metal9 line-end coverage of Via8",
      xc(V8_62) => "M9 coverage of Square Via8 orthogonal edge",
      xc(V8_71) => "M9 coverage of Rectangular Via8 (one edge at a corner)",
      xc(V8_72) => "M9 coverage of Rectangular Via8, orthogonal edge",
      xc(V8_73) => "Max extent of Redundant Rectangular Via8 long edge beyond M9 edge",
      xc(V8err_01) => "Square Via8SS ONLY ALLOWED value",
      xc(V8err_101) => "Square Via8SA ONLY ALLOWED value",
      xc(V8err_31) => "Rectangular Via8RS width, ONLY ALLOWED value",
      xc(V8err_32) => "Rectangular Via8RS length, ONLY ALLOWED value",
      xc(V9_01) => "Square Via9SS ONLY ALLOWED value",
      xc(V9_02) => "Square Via9 to Square Via9 (center-to-center) separation, minimum",
      xc(V9_101) => "Square Via9SA ONLY ALLOWED value",
      xc(V9_11) => "Min M9 enclosure of Square Via9",
      xc(V9_12) => "Min M9 enclosure of Square Via9, orthogonal edge",
      xc(V9_131) => "Rectangular Via9RA width, ONLY ALLOWED value",
      xc(V9_132) => "Rectangular Via9RA length, ONLY ALLOWED value",
      xc(V9_153) => "Rectangular Via9s that overhang the M9 edge must be centered on the PGD M9 they lands on",
      xc(V9_21) => "Min Square Via9 to Via8 (square/rectangular) space (on different M9, all-directional check)",
      xc(V9_31) => "Rectangular Via9RS width, ONLY ALLOWED value",
      xc(V9_32) => "Rectangular Via9RS length, ONLY ALLOWED value",
      xc(V9_33) => "Min Rectangular Via9 Long edge facing space to Square or Rectangular Via9 ",
      xc(V9_34) => "Min Rectangular Via9 Short edge facing space to Square or Rectangular Via9 ",
      xc(V9_35) => "Min Rectangular Via9 Corner-to-corner space to Square or Rectangular Via9 ",
      xc(V9_39) => "Redundant Rectangular Via9 spacing between facing Long edges, for electrically shorted vias, fixed value",
      xc(V9_40) => "Redundant Rectangular Via9s must be aligned with each other",
      xc(V9_41) => "Min Rectangular Via9 to Via8 (square/rectangular) space (on different M9, all-directional check)",
      xc(V9_51) => "M9 enclosure of Rectangular Via9 long edge (min)",
      xc(V9_52) => "Min M9 enclosure of Rectangular Via9, orthogonal edge",
      xc(V9_53) => "Max extent of Rectangular Via9 short edge beyond M9 side",
      xc(V9_61) => "Min M10 coverage of Square Via9 (one edge at a corner)",
      xc(V9_62) => "Min M10 coverage of Square Via9 orthogonal edge",
      xc(V9_71) => "Min M10 coverage of Rectangular Via9 (one edge at a corner)",
      xc(V9_72) => "Min M10 coverage of Rectangular Via9, orthogonal edge",
      xc(V9_73) => "Max extent of Redundant Rectangular Via9 long edge beyond M10 edge",
      xc(VCH_01) => "Width of VCNHB/HC (OGD), fixed value",
      xc(VCH_02) => "VCNHB length (PGD), fixed value (one VCH_01 edge is SA)",
      xc(VCH_03) => "VCNHC length (PGD), fixed value (one VCH_01 edge is SA)",
      xc(VC_01) => "Width of all VCNs, fixed value (OGD)",
      xc(VC_02) => "VCNAX length fixed value",
      xc(VC_03) => "VCNA length, fixed value",
      xc(VC_04) => "VCNBX length, fixed value",
      xc(VC_05) => "VCNCX length, fixed value",
      xc(VC_06) => "VCNDX length, fixed value",
      xc(VC_07) => "VCNB length, fixed value",
      xc(VC_08) => "VCNEX length, fixed value",
      xc(VC_09) => "VCNFX length, fixed value",
      xc(VC_10) => "VCNC length, fixed value",
      xc(VC_11) => "VCNGX length, fixed value",
      xc(VC_12) => "VCNJX length, fixed value",
      xc(VC_134) => "The TCN line end that has the VC_34 overhang needs to have a TCN ETE space of =VC_134, or >=42, also note this line end falls of the 21nm TCN line end grid by 6nm) ",
      xc(VC_139) => "Max VCNBX OGD edge enclosure of TCN end (PGD)",
      xc(VC_19) => "VC_01 edges of above vias must be aligned with Metal-0 side edges.",
      xc(VC_22) => "Unrestricted VCNAX-to-VCNAX center-to-center space (min)",
      xc(VC_23) => "Parallel full-facing metal-aligned VCN edges can be as closely spaced as the minimum allowed M0 space.  (only allowed value)",
      xc(VC_24) => "Min space between non-metal-aligned VCN edges (OGD)",
      xc(VC_26) => "Min space between VCN edges (PGD)",
      xc(VC_30) => "Diffcon line-end enclosure of VCN (metal-aligned edge), min value",
      xc(VC_31) => "Max VCNDX OGD edge enclosure of TCN end (PGD)",
      xc(VC_32) => "Max VCNGX OGD edge enclosure of TCN end (PGD)",
      xc(VC_33) => "Non-metal aligned VCN edge extent beyond Diffcon side, min value",
      xc(VC_34) => "VCNCX OGD edge enclosure of TCN end (PGD) fixed value (or >=0 VC_30). This TCN line end also requires a TCN ETE exception value of VC_134 (36nm)",
      xc(VC_35) => "Max VCNJX OGD edge enclosure of TCN end (PGD)",
      xc(VC_36) => "Min VCN space to Diffcon, PGD",
      xc(VC_37) => "Min VCN space to Diffcon, OGD",
      xc(VC_38) => "Min VCN PGD offset from Diffcon line-end, if corner-to-corner space is < VC_37",
      xc(VC_39) => "Max VCNB OGD edge enclosure of TCN end (PGD)",
      xc(VC_40) => "All VCN must be centered on Polycon in the PGD direction. (Except VCNDX/HB)",
      xc(VC_41) => "Max VCNDX OGD edge enclosure of Polycon side (PGD)",
      xc(VC_42) => "Only VCNAX/A/BX/CX/DX/B/FX/HB are allowed to land on GCN.",
      xc(VC_43) => "VCN edge enclosure of Polycon end, max value OGD",
      xc(VC_44) => "Min VCN edge space to Polycon side (PGD)",
      xc(VC_46) => "Min VCN edge space to Polycon end (OGD)",
      xc(VC_47) => "Max VCNHB (SA edge) OGD edge enclosure of Polycon side (PGD)",
      xc(VC_48) => "Min VCN to Polycon PGD offset, if VCN-Polycon corners are < VC_46",
      xc(VC_49) => "Min VCNHC edge space to Polycon side (PGD)",
      xc(VC_51) => "VCNHB/HC can be under a M0L_03/04 line",
      xc(VC_61) => "Minimum M0 line end enclosure of VCN",
      xc(VC_70) => "Min VCN corner-to-corner space",
      xc(VD_07) => "Via7 space threshold that subjects the array to max area check",
      xc(VD_08) => "Via8 space threshold that subjects the array to max area check",
      xc(VD_09) => "Via9 space threshold that subjects the array to max area check",
      xc(VD_10) => "Via10 space threshold that subjects the array to max area check",
      xc(VD_11) => "Via11 space threshold that subjects the array to max area check",
      xc(VD_17) => "Via 7 array width exception limit",
      xc(VD_19) => "Via 9 array width exception limit",
      xc(VD_20) => "Via 10 array width exception limit",
      xc(VD_21) => "Via 11 array width exception limit",
      xc(VD_27) => "Maximum Via 7 array area after merge and exception",
      xc(VD_28) => "Maximum Via 8 array area after merge and exception",
      xc(VD_29) => "Maximum Via 9 array area after merge and exception",
      xc(VD_30) => "Maximum Via 10 array area after merge and exception",
      xc(VD_31) => "Maximum Via 11 array area after merge and exception",
      xc(VD_57) => "Max width of merged Via 7 array",
      xc(VD_58) => "Max width of merged Via 8 array",
      xc(VD_59) => "Max width of merged Via 9 array",
      xc(VD_60) => "Max width of merged Via 10 array",
      xc(VD_61) => "Max width of merged Via 11 array",
      xc(XDC_21) => "Diffcon pitch, ONLY ALLOWED value",
      xc(XG_01) => "XGOXID is only allowed in ULPpitchID or in logic pitch",
      xc(XG_02) => "Min width of XGOXID in any direction",
      xc(XG_03) => "Min space between XGOXID in any direction",
      xc(XG_05) => "PGD edge of XGOXID must be drawn in the middle of the space bewteen poly center lines",
      xc(XG_06) => "Min XGOXID enclosure of poly end, in PGD",
      xc(XG_07) => "Min XGOXID space to poly end, in PGD",
      xc(XG_08) => "Nwell inside XGOXID and outside XGOXID cannot interact",
      xc(XG_09) => "Min XGOXID enclosure of nwell inside",
      xc(XG_10) => "Min XGOXID space to nwell outside",
      xc(XG_11) => "Min XGOXID enclosure of active gate area inside XGOXID",
      xc(XG_12) => "Min XGOXID space to active gate area outside XGOXID",
      xc(XG_13) => "Min XGOXID space to TGOXID",
      xc(XG_21) => "ULPpitchID must always be covered by XGOXID as shown in the transition rules",
      xc(XPL_01) => "Poly width, ONLY ALLOWED value",
      xc(XPL_02) => "Poly pitch, ONLY ALLOWED value"
   };

   // handle version specific cases for empty_violation
   #if VERSION_LT(2009, 12, 2, 0)
      #define empty_violation createEmptyViolation
   #endif

   // define/initialize the error layers and then create a hash of Label to violation 
   drErrHash:typeHashString2Violation = {}; 
   Error_ADC_04 = empty_violation();
   drErrHash[xc(ADC_04)] = Error_ADC_04;
   Error_ADC_21 = empty_violation();
   drErrHash[xc(ADC_21)] = Error_ADC_21;
   Error_AG4_01 = empty_violation();
   drErrHash[xc(AG4_01)] = Error_AG4_01;
   Error_AG4_02 = empty_violation();
   drErrHash[xc(AG4_02)] = Error_AG4_02;
   Error_AG4_03 = empty_violation();
   drErrHash[xc(AG4_03)] = Error_AG4_03;
   Error_AG4_04 = empty_violation();
   drErrHash[xc(AG4_04)] = Error_AG4_04;
   Error_AG4_07 = empty_violation();
   drErrHash[xc(AG4_07)] = Error_AG4_07;
   Error_AG4_08 = empty_violation();
   drErrHash[xc(AG4_08)] = Error_AG4_08;
   Error_AG4_09 = empty_violation();
   drErrHash[xc(AG4_09)] = Error_AG4_09;
   Error_AG4_10 = empty_violation();
   drErrHash[xc(AG4_10)] = Error_AG4_10;
   Error_AG6_01 = empty_violation();
   drErrHash[xc(AG6_01)] = Error_AG6_01;
   Error_AG6_02 = empty_violation();
   drErrHash[xc(AG6_02)] = Error_AG6_02;
   Error_AG6_03 = empty_violation();
   drErrHash[xc(AG6_03)] = Error_AG6_03;
   Error_AG6_04 = empty_violation();
   drErrHash[xc(AG6_04)] = Error_AG6_04;
   Error_AG6_07 = empty_violation();
   drErrHash[xc(AG6_07)] = Error_AG6_07;
   Error_AG6_08 = empty_violation();
   drErrHash[xc(AG6_08)] = Error_AG6_08;
   Error_AG6_09 = empty_violation();
   drErrHash[xc(AG6_09)] = Error_AG6_09;
   Error_AG6_10 = empty_violation();
   drErrHash[xc(AG6_10)] = Error_AG6_10;
   Error_AL_01 = empty_violation();
   drErrHash[xc(AL_01)] = Error_AL_01;
   Error_AL_05 = empty_violation();
   drErrHash[xc(AL_05)] = Error_AL_05;
   Error_AL_06 = empty_violation();
   drErrHash[xc(AL_06)] = Error_AL_06;
   Error_AL_07 = empty_violation();
   drErrHash[xc(AL_07)] = Error_AL_07;
   Error_AL_08 = empty_violation();
   drErrHash[xc(AL_08)] = Error_AL_08;
   Error_AL_09 = empty_violation();
   drErrHash[xc(AL_09)] = Error_AL_09;
   Error_AL_10 = empty_violation();
   drErrHash[xc(AL_10)] = Error_AL_10;
   Error_AL_11 = empty_violation();
   drErrHash[xc(AL_11)] = Error_AL_11;
   Error_AL_116 = empty_violation();
   drErrHash[xc(AL_116)] = Error_AL_116;
   Error_AL_12 = empty_violation();
   drErrHash[xc(AL_12)] = Error_AL_12;
   Error_AL_13 = empty_violation();
   drErrHash[xc(AL_13)] = Error_AL_13;
   Error_AL_14 = empty_violation();
   drErrHash[xc(AL_14)] = Error_AL_14;
   Error_AL_15 = empty_violation();
   drErrHash[xc(AL_15)] = Error_AL_15;
   Error_AL_16 = empty_violation();
   drErrHash[xc(AL_16)] = Error_AL_16;
   Error_AL_17 = empty_violation();
   drErrHash[xc(AL_17)] = Error_AL_17;
   Error_AL_31 = empty_violation();
   drErrHash[xc(AL_31)] = Error_AL_31;
   Error_AL_32 = empty_violation();
   drErrHash[xc(AL_32)] = Error_AL_32;
   Error_AL_33 = empty_violation();
   drErrHash[xc(AL_33)] = Error_AL_33;
   Error_AL_34 = empty_violation();
   drErrHash[xc(AL_34)] = Error_AL_34;
   Error_AN_72 = empty_violation();
   drErrHash[xc(AN_72)] = Error_AN_72;
   Error_APC_42 = empty_violation();
   drErrHash[xc(APC_42)] = Error_APC_42;
   Error_APC_44 = empty_violation();
   drErrHash[xc(APC_44)] = Error_APC_44;
   Error_APL_01 = empty_violation();
   drErrHash[xc(APL_01)] = Error_APL_01;
   Error_APL_02 = empty_violation();
   drErrHash[xc(APL_02)] = Error_APL_02;
   Error_APL_04 = empty_violation();
   drErrHash[xc(APL_04)] = Error_APL_04;
   Error_APL_11 = empty_violation();
   drErrHash[xc(APL_11)] = Error_APL_11;
   Error_APL_13 = empty_violation();
   drErrHash[xc(APL_13)] = Error_APL_13;
   Error_APL_15 = empty_violation();
   drErrHash[xc(APL_15)] = Error_APL_15;
   Error_APL_25 = empty_violation();
   drErrHash[xc(APL_25)] = Error_APL_25;
   Error_BC_00 = empty_violation();
   drErrHash[xc(BC_00)] = Error_BC_00;
   Error_BDC_02 = empty_violation();
   drErrHash[xc(BDC_02)] = Error_BDC_02;
   Error_BDC_03 = empty_violation();
   drErrHash[xc(BDC_03)] = Error_BDC_03;
   Error_BDC_04 = empty_violation();
   drErrHash[xc(BDC_04)] = Error_BDC_04;
   Error_BDC_11 = empty_violation();
   drErrHash[xc(BDC_11)] = Error_BDC_11;
   Error_BDC_31 = empty_violation();
   drErrHash[xc(BDC_31)] = Error_BDC_31;
   Error_BDC_33 = empty_violation();
   drErrHash[xc(BDC_33)] = Error_BDC_33;
   Error_BDC_36 = empty_violation();
   drErrHash[xc(BDC_36)] = Error_BDC_36;
   Error_BDF_10 = empty_violation();
   drErrHash[xc(BDF_10)] = Error_BDF_10;
   Error_BDF_91 = empty_violation();
   drErrHash[xc(BDF_91)] = Error_BDF_91;
   Error_BDF_92 = empty_violation();
   drErrHash[xc(BDF_92)] = Error_BDF_92;
   Error_BDG_91 = empty_violation();
   drErrHash[xc(BDG_91)] = Error_BDG_91;
   Error_BDG_92 = empty_violation();
   drErrHash[xc(BDG_92)] = Error_BDG_92;
   Error_BDG_93 = empty_violation();
   drErrHash[xc(BDG_93)] = Error_BDG_93;
   Error_BDG_94 = empty_violation();
   drErrHash[xc(BDG_94)] = Error_BDG_94;
   Error_BJ_01 = empty_violation();
   drErrHash[xc(BJ_01)] = Error_BJ_01;
   Error_BJ_03 = empty_violation();
   drErrHash[xc(BJ_03)] = Error_BJ_03;
   Error_BJ_05 = empty_violation();
   drErrHash[xc(BJ_05)] = Error_BJ_05;
   Error_BJ_11 = empty_violation();
   drErrHash[xc(BJ_11)] = Error_BJ_11;
   Error_BJ_12 = empty_violation();
   drErrHash[xc(BJ_12)] = Error_BJ_12;
   Error_BJ_14 = empty_violation();
   drErrHash[xc(BJ_14)] = Error_BJ_14;
   Error_BJ_15 = empty_violation();
   drErrHash[xc(BJ_15)] = Error_BJ_15;
   Error_BK_02 = empty_violation();
   drErrHash[xc(BK_02)] = Error_BK_02;
   Error_BK_03 = empty_violation();
   drErrHash[xc(BK_03)] = Error_BK_03;
   Error_BK_05 = empty_violation();
   drErrHash[xc(BK_05)] = Error_BK_05;
   Error_BK_11 = empty_violation();
   drErrHash[xc(BK_11)] = Error_BK_11;
   Error_BK_12 = empty_violation();
   drErrHash[xc(BK_12)] = Error_BK_12;
   Error_BK_14 = empty_violation();
   drErrHash[xc(BK_14)] = Error_BK_14;
   Error_BK_15 = empty_violation();
   drErrHash[xc(BK_15)] = Error_BK_15;
   Error_BK_23 = empty_violation();
   drErrHash[xc(BK_23)] = Error_BK_23;
   Error_BLDI_02 = empty_violation();
   drErrHash[xc(BLDI_02)] = Error_BLDI_02;
   Error_BLDI_102 = empty_violation();
   drErrHash[xc(BLDI_102)] = Error_BLDI_102;
   Error_BLDI_192 = empty_violation();
   drErrHash[xc(BLDI_192)] = Error_BLDI_192;
   Error_BLDI_202 = empty_violation();
   drErrHash[xc(BLDI_202)] = Error_BLDI_202;
   Error_BLDI_292 = empty_violation();
   drErrHash[xc(BLDI_292)] = Error_BLDI_292;
   Error_BLDI_302 = empty_violation();
   drErrHash[xc(BLDI_302)] = Error_BLDI_302;
   Error_BLDI_392 = empty_violation();
   drErrHash[xc(BLDI_392)] = Error_BLDI_392;
   Error_BLDI_402 = empty_violation();
   drErrHash[xc(BLDI_402)] = Error_BLDI_402;
   Error_BLDI_492 = empty_violation();
   drErrHash[xc(BLDI_492)] = Error_BLDI_492;
   Error_BLDI_592 = empty_violation();
   drErrHash[xc(BLDI_592)] = Error_BLDI_592;
   Error_BLD_233 = empty_violation();
   drErrHash[xc(BLD_233)] = Error_BLD_233;
   Error_BLD_234 = empty_violation();
   drErrHash[xc(BLD_234)] = Error_BLD_234;
   Error_BLD_333 = empty_violation();
   drErrHash[xc(BLD_333)] = Error_BLD_333;
   Error_BLD_334 = empty_violation();
   drErrHash[xc(BLD_334)] = Error_BLD_334;
   Error_BLD_431 = empty_violation();
   drErrHash[xc(BLD_431)] = Error_BLD_431;
   Error_BLD_433 = empty_violation();
   drErrHash[xc(BLD_433)] = Error_BLD_433;
   Error_BLD_531 = empty_violation();
   drErrHash[xc(BLD_531)] = Error_BLD_531;
   Error_BLD_533 = empty_violation();
   drErrHash[xc(BLD_533)] = Error_BLD_533;
   Error_BLD_534 = empty_violation();
   drErrHash[xc(BLD_534)] = Error_BLD_534;
   Error_BLD_620 = empty_violation();
   drErrHash[xc(BLD_620)] = Error_BLD_620;
   Error_BLD_631 = empty_violation();
   drErrHash[xc(BLD_631)] = Error_BLD_631;
   Error_BLD_633 = empty_violation();
   drErrHash[xc(BLD_633)] = Error_BLD_633;
   Error_BLD_731 = empty_violation();
   drErrHash[xc(BLD_731)] = Error_BLD_731;
   Error_BNW_01 = empty_violation();
   drErrHash[xc(BNW_01)] = Error_BNW_01;
   Error_BNW_03 = empty_violation();
   drErrHash[xc(BNW_03)] = Error_BNW_03;
   Error_BNW_24 = empty_violation();
   drErrHash[xc(BNW_24)] = Error_BNW_24;
   Error_BNW_28 = empty_violation();
   drErrHash[xc(BNW_28)] = Error_BNW_28;
   Error_BNW_29 = empty_violation();
   drErrHash[xc(BNW_29)] = Error_BNW_29;
   Error_BNW_31 = empty_violation();
   drErrHash[xc(BNW_31)] = Error_BNW_31;
   Error_BPC_41 = empty_violation();
   drErrHash[xc(BPC_41)] = Error_BPC_41;
   Error_BPC_44 = empty_violation();
   drErrHash[xc(BPC_44)] = Error_BPC_44;
   Error_BPC_46 = empty_violation();
   drErrHash[xc(BPC_46)] = Error_BPC_46;
   Error_BPC_47 = empty_violation();
   drErrHash[xc(BPC_47)] = Error_BPC_47;
   Error_BPC_61 = empty_violation();
   drErrHash[xc(BPC_61)] = Error_BPC_61;
   Error_BPC_81 = empty_violation();
   drErrHash[xc(BPC_81)] = Error_BPC_81;
   Error_BPC_83 = empty_violation();
   drErrHash[xc(BPC_83)] = Error_BPC_83;
   Error_BPL_01 = empty_violation();
   drErrHash[xc(BPL_01)] = Error_BPL_01;
   Error_BPL_02 = empty_violation();
   drErrHash[xc(BPL_02)] = Error_BPL_02;
   Error_BPL_04 = empty_violation();
   drErrHash[xc(BPL_04)] = Error_BPL_04;
   Error_BPL_11 = empty_violation();
   drErrHash[xc(BPL_11)] = Error_BPL_11;
   Error_BPL_13 = empty_violation();
   drErrHash[xc(BPL_13)] = Error_BPL_13;
   Error_BU_01 = empty_violation();
   drErrHash[xc(BU_01)] = Error_BU_01;
   Error_BU_02 = empty_violation();
   drErrHash[xc(BU_02)] = Error_BU_02;
   Error_BU_03 = empty_violation();
   drErrHash[xc(BU_03)] = Error_BU_03;
   Error_BU_04 = empty_violation();
   drErrHash[xc(BU_04)] = Error_BU_04;
   Error_BU_05 = empty_violation();
   drErrHash[xc(BU_05)] = Error_BU_05;
   Error_BU_06 = empty_violation();
   drErrHash[xc(BU_06)] = Error_BU_06;
   Error_BU_101 = empty_violation();
   drErrHash[xc(BU_101)] = Error_BU_101;
   Error_BU_102 = empty_violation();
   drErrHash[xc(BU_102)] = Error_BU_102;
   Error_BU_103 = empty_violation();
   drErrHash[xc(BU_103)] = Error_BU_103;
   Error_BU_104 = empty_violation();
   drErrHash[xc(BU_104)] = Error_BU_104;
   Error_BU_105 = empty_violation();
   drErrHash[xc(BU_105)] = Error_BU_105;
   Error_BU_110 = empty_violation();
   drErrHash[xc(BU_110)] = Error_BU_110;
   Error_BU_111 = empty_violation();
   drErrHash[xc(BU_111)] = Error_BU_111;
   Error_BU_112 = empty_violation();
   drErrHash[xc(BU_112)] = Error_BU_112;
   Error_BU_124 = empty_violation();
   drErrHash[xc(BU_124)] = Error_BU_124;
   Error_BU_21 = empty_violation();
   drErrHash[xc(BU_21)] = Error_BU_21;
   Error_BU_22 = empty_violation();
   drErrHash[xc(BU_22)] = Error_BU_22;
   Error_BU_23 = empty_violation();
   drErrHash[xc(BU_23)] = Error_BU_23;
   Error_BU_24 = empty_violation();
   drErrHash[xc(BU_24)] = Error_BU_24;
   Error_BU_25 = empty_violation();
   drErrHash[xc(BU_25)] = Error_BU_25;
   Error_BVC_01 = empty_violation();
   drErrHash[xc(BVC_01)] = Error_BVC_01;
   Error_BVC_02 = empty_violation();
   drErrHash[xc(BVC_02)] = Error_BVC_02;
   Error_BXG_11 = empty_violation();
   drErrHash[xc(BXG_11)] = Error_BXG_11;
   Error_CDW_100 = empty_violation();
   drErrHash[xc(CDW_100)] = Error_CDW_100;
   Error_CDW_101 = empty_violation();
   drErrHash[xc(CDW_101)] = Error_CDW_101;
   Error_CDW_102 = empty_violation();
   drErrHash[xc(CDW_102)] = Error_CDW_102;
   Error_CDW_103 = empty_violation();
   drErrHash[xc(CDW_103)] = Error_CDW_103;
   Error_CDW_104 = empty_violation();
   drErrHash[xc(CDW_104)] = Error_CDW_104;
   Error_CDW_105 = empty_violation();
   drErrHash[xc(CDW_105)] = Error_CDW_105;
   Error_CDW_106 = empty_violation();
   drErrHash[xc(CDW_106)] = Error_CDW_106;
   Error_CDW_107 = empty_violation();
   drErrHash[xc(CDW_107)] = Error_CDW_107;
   Error_CDW_131 = empty_violation();
   drErrHash[xc(CDW_131)] = Error_CDW_131;
   Error_CDW_200 = empty_violation();
   drErrHash[xc(CDW_200)] = Error_CDW_200;
   Error_CDW_201 = empty_violation();
   drErrHash[xc(CDW_201)] = Error_CDW_201;
   Error_CDW_202 = empty_violation();
   drErrHash[xc(CDW_202)] = Error_CDW_202;
   Error_CDW_203 = empty_violation();
   drErrHash[xc(CDW_203)] = Error_CDW_203;
   Error_CDW_204 = empty_violation();
   drErrHash[xc(CDW_204)] = Error_CDW_204;
   Error_CDW_205 = empty_violation();
   drErrHash[xc(CDW_205)] = Error_CDW_205;
   Error_CDW_206 = empty_violation();
   drErrHash[xc(CDW_206)] = Error_CDW_206;
   Error_CDW_207 = empty_violation();
   drErrHash[xc(CDW_207)] = Error_CDW_207;
   Error_CDW_208 = empty_violation();
   drErrHash[xc(CDW_208)] = Error_CDW_208;
   Error_CDW_209 = empty_violation();
   drErrHash[xc(CDW_209)] = Error_CDW_209;
   Error_CDW_210 = empty_violation();
   drErrHash[xc(CDW_210)] = Error_CDW_210;
   Error_CDW_211 = empty_violation();
   drErrHash[xc(CDW_211)] = Error_CDW_211;
   Error_CDW_231 = empty_violation();
   drErrHash[xc(CDW_231)] = Error_CDW_231;
   Error_CD_100 = empty_violation();
   drErrHash[xc(CD_100)] = Error_CD_100;
   Error_CD_101 = empty_violation();
   drErrHash[xc(CD_101)] = Error_CD_101;
   Error_CD_102 = empty_violation();
   drErrHash[xc(CD_102)] = Error_CD_102;
   Error_CD_103 = empty_violation();
   drErrHash[xc(CD_103)] = Error_CD_103;
   Error_CD_104 = empty_violation();
   drErrHash[xc(CD_104)] = Error_CD_104;
   Error_CD_105 = empty_violation();
   drErrHash[xc(CD_105)] = Error_CD_105;
   Error_CD_106 = empty_violation();
   drErrHash[xc(CD_106)] = Error_CD_106;
   Error_CD_107 = empty_violation();
   drErrHash[xc(CD_107)] = Error_CD_107;
   Error_CD_131 = empty_violation();
   drErrHash[xc(CD_131)] = Error_CD_131;
   Error_CD_200 = empty_violation();
   drErrHash[xc(CD_200)] = Error_CD_200;
   Error_CD_201 = empty_violation();
   drErrHash[xc(CD_201)] = Error_CD_201;
   Error_CD_202 = empty_violation();
   drErrHash[xc(CD_202)] = Error_CD_202;
   Error_CD_203 = empty_violation();
   drErrHash[xc(CD_203)] = Error_CD_203;
   Error_CD_204 = empty_violation();
   drErrHash[xc(CD_204)] = Error_CD_204;
   Error_CD_205 = empty_violation();
   drErrHash[xc(CD_205)] = Error_CD_205;
   Error_CD_206 = empty_violation();
   drErrHash[xc(CD_206)] = Error_CD_206;
   Error_CD_207 = empty_violation();
   drErrHash[xc(CD_207)] = Error_CD_207;
   Error_CD_208 = empty_violation();
   drErrHash[xc(CD_208)] = Error_CD_208;
   Error_CD_209 = empty_violation();
   drErrHash[xc(CD_209)] = Error_CD_209;
   Error_CD_210 = empty_violation();
   drErrHash[xc(CD_210)] = Error_CD_210;
   Error_CD_211 = empty_violation();
   drErrHash[xc(CD_211)] = Error_CD_211;
   Error_CD_231 = empty_violation();
   drErrHash[xc(CD_231)] = Error_CD_231;
   Error_CHN_01 = empty_violation();
   drErrHash[xc(CHN_01)] = Error_CHN_01;
   Error_CHN_02 = empty_violation();
   drErrHash[xc(CHN_02)] = Error_CHN_02;
   Error_CHN_03 = empty_violation();
   drErrHash[xc(CHN_03)] = Error_CHN_03;
   Error_CHN_04 = empty_violation();
   drErrHash[xc(CHN_04)] = Error_CHN_04;
   Error_CHN_05 = empty_violation();
   drErrHash[xc(CHN_05)] = Error_CHN_05;
   Error_CHN_06 = empty_violation();
   drErrHash[xc(CHN_06)] = Error_CHN_06;
   Error_CHN_07 = empty_violation();
   drErrHash[xc(CHN_07)] = Error_CHN_07;
   Error_CHN_08 = empty_violation();
   drErrHash[xc(CHN_08)] = Error_CHN_08;
   Error_CHW_01 = empty_violation();
   drErrHash[xc(CHW_01)] = Error_CHW_01;
   Error_CHW_02 = empty_violation();
   drErrHash[xc(CHW_02)] = Error_CHW_02;
   Error_CHW_03 = empty_violation();
   drErrHash[xc(CHW_03)] = Error_CHW_03;
   Error_CHW_04 = empty_violation();
   drErrHash[xc(CHW_04)] = Error_CHW_04;
   Error_CHW_05 = empty_violation();
   drErrHash[xc(CHW_05)] = Error_CHW_05;
   Error_CHW_06 = empty_violation();
   drErrHash[xc(CHW_06)] = Error_CHW_06;
   Error_CHW_07 = empty_violation();
   drErrHash[xc(CHW_07)] = Error_CHW_07;
   Error_CHW_08 = empty_violation();
   drErrHash[xc(CHW_08)] = Error_CHW_08;
   Error_CHW_09 = empty_violation();
   drErrHash[xc(CHW_09)] = Error_CHW_09;
   Error_CHW_10 = empty_violation();
   drErrHash[xc(CHW_10)] = Error_CHW_10;
   Error_CHW_11 = empty_violation();
   drErrHash[xc(CHW_11)] = Error_CHW_11;
   Error_CHW_12 = empty_violation();
   drErrHash[xc(CHW_12)] = Error_CHW_12;
   Error_CHW_13 = empty_violation();
   drErrHash[xc(CHW_13)] = Error_CHW_13;
   Error_CHW_14 = empty_violation();
   drErrHash[xc(CHW_14)] = Error_CHW_14;
   Error_CMW_05 = empty_violation();
   drErrHash[xc(CMW_05)] = Error_CMW_05;
   Error_CMW_06 = empty_violation();
   drErrHash[xc(CMW_06)] = Error_CMW_06;
   Error_CMW_07 = empty_violation();
   drErrHash[xc(CMW_07)] = Error_CMW_07;
   Error_CMW_08 = empty_violation();
   drErrHash[xc(CMW_08)] = Error_CMW_08;
   Error_CMW_09 = empty_violation();
   drErrHash[xc(CMW_09)] = Error_CMW_09;
   Error_CM_05 = empty_violation();
   drErrHash[xc(CM_05)] = Error_CM_05;
   Error_CM_06 = empty_violation();
   drErrHash[xc(CM_06)] = Error_CM_06;
   Error_CM_07 = empty_violation();
   drErrHash[xc(CM_07)] = Error_CM_07;
   Error_CM_08 = empty_violation();
   drErrHash[xc(CM_08)] = Error_CM_08;
   Error_CM_09 = empty_violation();
   drErrHash[xc(CM_09)] = Error_CM_09;
   Error_DA_01 = empty_violation();
   drErrHash[xc(DA_01)] = Error_DA_01;
   Error_DA_02 = empty_violation();
   drErrHash[xc(DA_02)] = Error_DA_02;
   Error_DA_03 = empty_violation();
   drErrHash[xc(DA_03)] = Error_DA_03;
   Error_DA_04 = empty_violation();
   drErrHash[xc(DA_04)] = Error_DA_04;
   Error_DA_05 = empty_violation();
   drErrHash[xc(DA_05)] = Error_DA_05;
   Error_DA_06 = empty_violation();
   drErrHash[xc(DA_06)] = Error_DA_06;
   Error_DA_11 = empty_violation();
   drErrHash[xc(DA_11)] = Error_DA_11;
   Error_DA_12 = empty_violation();
   drErrHash[xc(DA_12)] = Error_DA_12;
   Error_DA_171 = empty_violation();
   drErrHash[xc(DA_171)] = Error_DA_171;
   Error_DA_172 = empty_violation();
   drErrHash[xc(DA_172)] = Error_DA_172;
   Error_DA_173 = empty_violation();
   drErrHash[xc(DA_173)] = Error_DA_173;
   Error_DA_174 = empty_violation();
   drErrHash[xc(DA_174)] = Error_DA_174;
   Error_DA_175 = empty_violation();
   drErrHash[xc(DA_175)] = Error_DA_175;
   Error_DA_176 = empty_violation();
   drErrHash[xc(DA_176)] = Error_DA_176;
   Error_DA_22 = empty_violation();
   drErrHash[xc(DA_22)] = Error_DA_22;
   Error_DA_24 = empty_violation();
   drErrHash[xc(DA_24)] = Error_DA_24;
   Error_DA_25 = empty_violation();
   drErrHash[xc(DA_25)] = Error_DA_25;
   Error_DA_26 = empty_violation();
   drErrHash[xc(DA_26)] = Error_DA_26;
   Error_DA_27 = empty_violation();
   drErrHash[xc(DA_27)] = Error_DA_27;
   Error_DA_30 = empty_violation();
   drErrHash[xc(DA_30)] = Error_DA_30;
   Error_DA_31 = empty_violation();
   drErrHash[xc(DA_31)] = Error_DA_31;
   Error_DA_32 = empty_violation();
   drErrHash[xc(DA_32)] = Error_DA_32;
   Error_DA_33 = empty_violation();
   drErrHash[xc(DA_33)] = Error_DA_33;
   Error_DA_35 = empty_violation();
   drErrHash[xc(DA_35)] = Error_DA_35;
   Error_DA_361 = empty_violation();
   drErrHash[xc(DA_361)] = Error_DA_361;
   Error_DA_362 = empty_violation();
   drErrHash[xc(DA_362)] = Error_DA_362;
   Error_DA_371 = empty_violation();
   drErrHash[xc(DA_371)] = Error_DA_371;
   Error_DA_372 = empty_violation();
   drErrHash[xc(DA_372)] = Error_DA_372;
   Error_DA_373 = empty_violation();
   drErrHash[xc(DA_373)] = Error_DA_373;
   Error_DA_38 = empty_violation();
   drErrHash[xc(DA_38)] = Error_DA_38;
   Error_DA_41 = empty_violation();
   drErrHash[xc(DA_41)] = Error_DA_41;
   Error_DA_44 = empty_violation();
   drErrHash[xc(DA_44)] = Error_DA_44;
   Error_DA_45 = empty_violation();
   drErrHash[xc(DA_45)] = Error_DA_45;
   Error_DA_46 = empty_violation();
   drErrHash[xc(DA_46)] = Error_DA_46;
   Error_DA_52 = empty_violation();
   drErrHash[xc(DA_52)] = Error_DA_52;
   Error_DA_53 = empty_violation();
   drErrHash[xc(DA_53)] = Error_DA_53;
   Error_DA_54 = empty_violation();
   drErrHash[xc(DA_54)] = Error_DA_54;
   Error_DA_55 = empty_violation();
   drErrHash[xc(DA_55)] = Error_DA_55;
   Error_DA_56 = empty_violation();
   drErrHash[xc(DA_56)] = Error_DA_56;
   Error_DA_70 = empty_violation();
   drErrHash[xc(DA_70)] = Error_DA_70;
   Error_DA_71 = empty_violation();
   drErrHash[xc(DA_71)] = Error_DA_71;
   Error_DA_72 = empty_violation();
   drErrHash[xc(DA_72)] = Error_DA_72;
   Error_DA_73 = empty_violation();
   drErrHash[xc(DA_73)] = Error_DA_73;
   Error_DC_00 = empty_violation();
   drErrHash[xc(DC_00)] = Error_DC_00;
   Error_DC_01 = empty_violation();
   drErrHash[xc(DC_01)] = Error_DC_01;
   Error_DC_02 = empty_violation();
   drErrHash[xc(DC_02)] = Error_DC_02;
   Error_DC_03 = empty_violation();
   drErrHash[xc(DC_03)] = Error_DC_03;
   Error_DC_04 = empty_violation();
   drErrHash[xc(DC_04)] = Error_DC_04;
   Error_DC_05 = empty_violation();
   drErrHash[xc(DC_05)] = Error_DC_05;
   Error_DC_06 = empty_violation();
   drErrHash[xc(DC_06)] = Error_DC_06;
   Error_DC_11 = empty_violation();
   drErrHash[xc(DC_11)] = Error_DC_11;
   Error_DC_12 = empty_violation();
   drErrHash[xc(DC_12)] = Error_DC_12;
   Error_DC_15 = empty_violation();
   drErrHash[xc(DC_15)] = Error_DC_15;
   Error_DC_20 = empty_violation();
   drErrHash[xc(DC_20)] = Error_DC_20;
   Error_DC_21 = empty_violation();
   drErrHash[xc(DC_21)] = Error_DC_21;
   Error_DC_22 = empty_violation();
   drErrHash[xc(DC_22)] = Error_DC_22;
   Error_DC_23 = empty_violation();
   drErrHash[xc(DC_23)] = Error_DC_23;
   Error_DC_24 = empty_violation();
   drErrHash[xc(DC_24)] = Error_DC_24;
   Error_DC_30 = empty_violation();
   drErrHash[xc(DC_30)] = Error_DC_30;
   Error_DC_31 = empty_violation();
   drErrHash[xc(DC_31)] = Error_DC_31;
   Error_DC_32 = empty_violation();
   drErrHash[xc(DC_32)] = Error_DC_32;
   Error_DC_33 = empty_violation();
   drErrHash[xc(DC_33)] = Error_DC_33;
   Error_DC_34 = empty_violation();
   drErrHash[xc(DC_34)] = Error_DC_34;
   Error_DC_35 = empty_violation();
   drErrHash[xc(DC_35)] = Error_DC_35;
   Error_DC_36 = empty_violation();
   drErrHash[xc(DC_36)] = Error_DC_36;
   Error_DC_37 = empty_violation();
   drErrHash[xc(DC_37)] = Error_DC_37;
   Error_DC_38 = empty_violation();
   drErrHash[xc(DC_38)] = Error_DC_38;
   Error_DC_50 = empty_violation();
   drErrHash[xc(DC_50)] = Error_DC_50;
   Error_DC_52 = empty_violation();
   drErrHash[xc(DC_52)] = Error_DC_52;
   Error_DF_01 = empty_violation();
   drErrHash[xc(DF_01)] = Error_DF_01;
   Error_DF_02 = empty_violation();
   drErrHash[xc(DF_02)] = Error_DF_02;
   Error_DF_03 = empty_violation();
   drErrHash[xc(DF_03)] = Error_DF_03;
   Error_DF_04 = empty_violation();
   drErrHash[xc(DF_04)] = Error_DF_04;
   Error_DF_07 = empty_violation();
   drErrHash[xc(DF_07)] = Error_DF_07;
   Error_DF_09 = empty_violation();
   drErrHash[xc(DF_09)] = Error_DF_09;
   Error_DF_10 = empty_violation();
   drErrHash[xc(DF_10)] = Error_DF_10;
   Error_DF_19 = empty_violation();
   drErrHash[xc(DF_19)] = Error_DF_19;
   Error_DF_31 = empty_violation();
   drErrHash[xc(DF_31)] = Error_DF_31;
   Error_DF_32 = empty_violation();
   drErrHash[xc(DF_32)] = Error_DF_32;
   Error_DF_34 = empty_violation();
   drErrHash[xc(DF_34)] = Error_DF_34;
   Error_DF_35 = empty_violation();
   drErrHash[xc(DF_35)] = Error_DF_35;
   Error_DF_43 = empty_violation();
   drErrHash[xc(DF_43)] = Error_DF_43;
   Error_DF_51 = empty_violation();
   drErrHash[xc(DF_51)] = Error_DF_51;
   Error_DF_52 = empty_violation();
   drErrHash[xc(DF_52)] = Error_DF_52;
   Error_DF_56 = empty_violation();
   drErrHash[xc(DF_56)] = Error_DF_56;
   Error_DF_80 = empty_violation();
   drErrHash[xc(DF_80)] = Error_DF_80;
   Error_DF_84 = empty_violation();
   drErrHash[xc(DF_84)] = Error_DF_84;
   Error_DG_01 = empty_violation();
   drErrHash[xc(DG_01)] = Error_DG_01;
   Error_DG_02 = empty_violation();
   drErrHash[xc(DG_02)] = Error_DG_02;
   Error_DG_03 = empty_violation();
   drErrHash[xc(DG_03)] = Error_DG_03;
   Error_DG_04 = empty_violation();
   drErrHash[xc(DG_04)] = Error_DG_04;
   Error_DG_05 = empty_violation();
   drErrHash[xc(DG_05)] = Error_DG_05;
   Error_DI_01 = empty_violation();
   drErrHash[xc(DI_01)] = Error_DI_01;
   Error_DI_02 = empty_violation();
   drErrHash[xc(DI_02)] = Error_DI_02;
   Error_DI_03 = empty_violation();
   drErrHash[xc(DI_03)] = Error_DI_03;
   Error_DI_04 = empty_violation();
   drErrHash[xc(DI_04)] = Error_DI_04;
   Error_DI_06 = empty_violation();
   drErrHash[xc(DI_06)] = Error_DI_06;
   Error_DI_07 = empty_violation();
   drErrHash[xc(DI_07)] = Error_DI_07;
   Error_DN_01 = empty_violation();
   drErrHash[xc(DN_01)] = Error_DN_01;
   Error_DN_02 = empty_violation();
   drErrHash[xc(DN_02)] = Error_DN_02;
   Error_DN_03 = empty_violation();
   drErrHash[xc(DN_03)] = Error_DN_03;
   Error_DN_04 = empty_violation();
   drErrHash[xc(DN_04)] = Error_DN_04;
   Error_DN_05 = empty_violation();
   drErrHash[xc(DN_05)] = Error_DN_05;
   Error_DN_07 = empty_violation();
   drErrHash[xc(DN_07)] = Error_DN_07;
   Error_DN_08 = empty_violation();
   drErrHash[xc(DN_08)] = Error_DN_08;
   Error_DN_09 = empty_violation();
   drErrHash[xc(DN_09)] = Error_DN_09;
   Error_DN_10 = empty_violation();
   drErrHash[xc(DN_10)] = Error_DN_10;
   Error_DN_11 = empty_violation();
   drErrHash[xc(DN_11)] = Error_DN_11;
   Error_DN_12 = empty_violation();
   drErrHash[xc(DN_12)] = Error_DN_12;
   Error_DN_13 = empty_violation();
   drErrHash[xc(DN_13)] = Error_DN_13;
   Error_DS_00 = empty_violation();
   drErrHash[xc(DS_00)] = Error_DS_00;
   Error_DS_01 = empty_violation();
   drErrHash[xc(DS_01)] = Error_DS_01;
   Error_DS_02 = empty_violation();
   drErrHash[xc(DS_02)] = Error_DS_02;
   Error_DS_03 = empty_violation();
   drErrHash[xc(DS_03)] = Error_DS_03;
   Error_DS_04 = empty_violation();
   drErrHash[xc(DS_04)] = Error_DS_04;
   Error_DS_05 = empty_violation();
   drErrHash[xc(DS_05)] = Error_DS_05;
   Error_DS_09 = empty_violation();
   drErrHash[xc(DS_09)] = Error_DS_09;
   Error_DS_11 = empty_violation();
   drErrHash[xc(DS_11)] = Error_DS_11;
   Error_DS_12 = empty_violation();
   drErrHash[xc(DS_12)] = Error_DS_12;
   Error_DS_171 = empty_violation();
   drErrHash[xc(DS_171)] = Error_DS_171;
   Error_DS_172 = empty_violation();
   drErrHash[xc(DS_172)] = Error_DS_172;
   Error_DS_173 = empty_violation();
   drErrHash[xc(DS_173)] = Error_DS_173;
   Error_DS_174 = empty_violation();
   drErrHash[xc(DS_174)] = Error_DS_174;
   Error_DS_175 = empty_violation();
   drErrHash[xc(DS_175)] = Error_DS_175;
   Error_DS_176 = empty_violation();
   drErrHash[xc(DS_176)] = Error_DS_176;
   Error_DS_24 = empty_violation();
   drErrHash[xc(DS_24)] = Error_DS_24;
   Error_DS_25 = empty_violation();
   drErrHash[xc(DS_25)] = Error_DS_25;
   Error_DS_31 = empty_violation();
   drErrHash[xc(DS_31)] = Error_DS_31;
   Error_DS_32 = empty_violation();
   drErrHash[xc(DS_32)] = Error_DS_32;
   Error_DS_33 = empty_violation();
   drErrHash[xc(DS_33)] = Error_DS_33;
   Error_DS_35 = empty_violation();
   drErrHash[xc(DS_35)] = Error_DS_35;
   Error_DS_361 = empty_violation();
   drErrHash[xc(DS_361)] = Error_DS_361;
   Error_DS_362 = empty_violation();
   drErrHash[xc(DS_362)] = Error_DS_362;
   Error_DS_371 = empty_violation();
   drErrHash[xc(DS_371)] = Error_DS_371;
   Error_DS_372 = empty_violation();
   drErrHash[xc(DS_372)] = Error_DS_372;
   Error_DS_373 = empty_violation();
   drErrHash[xc(DS_373)] = Error_DS_373;
   Error_DS_38 = empty_violation();
   drErrHash[xc(DS_38)] = Error_DS_38;
   Error_DS_41 = empty_violation();
   drErrHash[xc(DS_41)] = Error_DS_41;
   Error_DS_50 = empty_violation();
   drErrHash[xc(DS_50)] = Error_DS_50;
   Error_DS_52 = empty_violation();
   drErrHash[xc(DS_52)] = Error_DS_52;
   Error_DS_540 = empty_violation();
   drErrHash[xc(DS_540)] = Error_DS_540;
   Error_DS_541 = empty_violation();
   drErrHash[xc(DS_541)] = Error_DS_541;
   Error_DS_542 = empty_violation();
   drErrHash[xc(DS_542)] = Error_DS_542;
   Error_DS_543 = empty_violation();
   drErrHash[xc(DS_543)] = Error_DS_543;
   Error_DS_544 = empty_violation();
   drErrHash[xc(DS_544)] = Error_DS_544;
   Error_DS_60 = empty_violation();
   drErrHash[xc(DS_60)] = Error_DS_60;
   Error_DS_601 = empty_violation();
   drErrHash[xc(DS_601)] = Error_DS_601;
   Error_DS_602 = empty_violation();
   drErrHash[xc(DS_602)] = Error_DS_602;
   Error_DS_61 = empty_violation();
   drErrHash[xc(DS_61)] = Error_DS_61;
   Error_DS_62 = empty_violation();
   drErrHash[xc(DS_62)] = Error_DS_62;
   Error_DS_63 = empty_violation();
   drErrHash[xc(DS_63)] = Error_DS_63;
   Error_DS_64 = empty_violation();
   drErrHash[xc(DS_64)] = Error_DS_64;
   Error_DS_645 = empty_violation();
   drErrHash[xc(DS_645)] = Error_DS_645;
   Error_DS_65 = empty_violation();
   drErrHash[xc(DS_65)] = Error_DS_65;
   Error_DS_66 = empty_violation();
   drErrHash[xc(DS_66)] = Error_DS_66;
   Error_DS_660 = empty_violation();
   drErrHash[xc(DS_660)] = Error_DS_660;
   Error_DS_661 = empty_violation();
   drErrHash[xc(DS_661)] = Error_DS_661;
   Error_DS_662 = empty_violation();
   drErrHash[xc(DS_662)] = Error_DS_662;
   Error_DS_663 = empty_violation();
   drErrHash[xc(DS_663)] = Error_DS_663;
   Error_DS_664 = empty_violation();
   drErrHash[xc(DS_664)] = Error_DS_664;
   Error_DS_665 = empty_violation();
   drErrHash[xc(DS_665)] = Error_DS_665;
   Error_DS_666 = empty_violation();
   drErrHash[xc(DS_666)] = Error_DS_666;
   Error_DS_667 = empty_violation();
   drErrHash[xc(DS_667)] = Error_DS_667;
   Error_DS_67 = empty_violation();
   drErrHash[xc(DS_67)] = Error_DS_67;
   Error_DS_68 = empty_violation();
   drErrHash[xc(DS_68)] = Error_DS_68;
   Error_DS_70 = empty_violation();
   drErrHash[xc(DS_70)] = Error_DS_70;
   Error_DS_71 = empty_violation();
   drErrHash[xc(DS_71)] = Error_DS_71;
   Error_DS_72 = empty_violation();
   drErrHash[xc(DS_72)] = Error_DS_72;
   Error_DS_73 = empty_violation();
   drErrHash[xc(DS_73)] = Error_DS_73;
   Error_DS_75 = empty_violation();
   drErrHash[xc(DS_75)] = Error_DS_75;
   Error_DS_76 = empty_violation();
   drErrHash[xc(DS_76)] = Error_DS_76;
   Error_DS_77 = empty_violation();
   drErrHash[xc(DS_77)] = Error_DS_77;
   Error_DS_78 = empty_violation();
   drErrHash[xc(DS_78)] = Error_DS_78;
   Error_DS_79 = empty_violation();
   drErrHash[xc(DS_79)] = Error_DS_79;
   Error_DS_80 = empty_violation();
   drErrHash[xc(DS_80)] = Error_DS_80;
   Error_DS_81 = empty_violation();
   drErrHash[xc(DS_81)] = Error_DS_81;
   Error_DS_82 = empty_violation();
   drErrHash[xc(DS_82)] = Error_DS_82;
   Error_DT_01 = empty_violation();
   drErrHash[xc(DT_01)] = Error_DT_01;
   Error_DT_02 = empty_violation();
   drErrHash[xc(DT_02)] = Error_DT_02;
   Error_DT_03 = empty_violation();
   drErrHash[xc(DT_03)] = Error_DT_03;
   Error_DT_04 = empty_violation();
   drErrHash[xc(DT_04)] = Error_DT_04;
   Error_DT_05 = empty_violation();
   drErrHash[xc(DT_05)] = Error_DT_05;
   Error_DT_06 = empty_violation();
   drErrHash[xc(DT_06)] = Error_DT_06;
   Error_DT_11 = empty_violation();
   drErrHash[xc(DT_11)] = Error_DT_11;
   Error_DT_12 = empty_violation();
   drErrHash[xc(DT_12)] = Error_DT_12;
   Error_DT_171 = empty_violation();
   drErrHash[xc(DT_171)] = Error_DT_171;
   Error_DT_172 = empty_violation();
   drErrHash[xc(DT_172)] = Error_DT_172;
   Error_DT_173 = empty_violation();
   drErrHash[xc(DT_173)] = Error_DT_173;
   Error_DT_174 = empty_violation();
   drErrHash[xc(DT_174)] = Error_DT_174;
   Error_DT_175 = empty_violation();
   drErrHash[xc(DT_175)] = Error_DT_175;
   Error_DT_176 = empty_violation();
   drErrHash[xc(DT_176)] = Error_DT_176;
   Error_DT_22 = empty_violation();
   drErrHash[xc(DT_22)] = Error_DT_22;
   Error_DT_24 = empty_violation();
   drErrHash[xc(DT_24)] = Error_DT_24;
   Error_DT_25 = empty_violation();
   drErrHash[xc(DT_25)] = Error_DT_25;
   Error_DT_26 = empty_violation();
   drErrHash[xc(DT_26)] = Error_DT_26;
   Error_DT_27 = empty_violation();
   drErrHash[xc(DT_27)] = Error_DT_27;
   Error_DT_30 = empty_violation();
   drErrHash[xc(DT_30)] = Error_DT_30;
   Error_DT_31 = empty_violation();
   drErrHash[xc(DT_31)] = Error_DT_31;
   Error_DT_32 = empty_violation();
   drErrHash[xc(DT_32)] = Error_DT_32;
   Error_DT_33 = empty_violation();
   drErrHash[xc(DT_33)] = Error_DT_33;
   Error_DT_35 = empty_violation();
   drErrHash[xc(DT_35)] = Error_DT_35;
   Error_DT_361 = empty_violation();
   drErrHash[xc(DT_361)] = Error_DT_361;
   Error_DT_362 = empty_violation();
   drErrHash[xc(DT_362)] = Error_DT_362;
   Error_DT_363 = empty_violation();
   drErrHash[xc(DT_363)] = Error_DT_363;
   Error_DT_364 = empty_violation();
   drErrHash[xc(DT_364)] = Error_DT_364;
   Error_DT_371 = empty_violation();
   drErrHash[xc(DT_371)] = Error_DT_371;
   Error_DT_372 = empty_violation();
   drErrHash[xc(DT_372)] = Error_DT_372;
   Error_DT_373 = empty_violation();
   drErrHash[xc(DT_373)] = Error_DT_373;
   Error_DT_374 = empty_violation();
   drErrHash[xc(DT_374)] = Error_DT_374;
   Error_DT_375 = empty_violation();
   drErrHash[xc(DT_375)] = Error_DT_375;
   Error_DT_38 = empty_violation();
   drErrHash[xc(DT_38)] = Error_DT_38;
   Error_DT_41 = empty_violation();
   drErrHash[xc(DT_41)] = Error_DT_41;
   Error_DT_44 = empty_violation();
   drErrHash[xc(DT_44)] = Error_DT_44;
   Error_DT_45 = empty_violation();
   drErrHash[xc(DT_45)] = Error_DT_45;
   Error_DT_52 = empty_violation();
   drErrHash[xc(DT_52)] = Error_DT_52;
   Error_DT_53 = empty_violation();
   drErrHash[xc(DT_53)] = Error_DT_53;
   Error_DT_54 = empty_violation();
   drErrHash[xc(DT_54)] = Error_DT_54;
   Error_DT_55 = empty_violation();
   drErrHash[xc(DT_55)] = Error_DT_55;
   Error_DT_56 = empty_violation();
   drErrHash[xc(DT_56)] = Error_DT_56;
   Error_DT_70 = empty_violation();
   drErrHash[xc(DT_70)] = Error_DT_70;
   Error_DT_71 = empty_violation();
   drErrHash[xc(DT_71)] = Error_DT_71;
   Error_DT_72 = empty_violation();
   drErrHash[xc(DT_72)] = Error_DT_72;
   Error_DT_73 = empty_violation();
   drErrHash[xc(DT_73)] = Error_DT_73;
   Error_DX_01 = empty_violation();
   drErrHash[xc(DX_01)] = Error_DX_01;
   Error_DX_02 = empty_violation();
   drErrHash[xc(DX_02)] = Error_DX_02;
   Error_DX_03 = empty_violation();
   drErrHash[xc(DX_03)] = Error_DX_03;
   Error_DX_04 = empty_violation();
   drErrHash[xc(DX_04)] = Error_DX_04;
   Error_DX_05 = empty_violation();
   drErrHash[xc(DX_05)] = Error_DX_05;
   Error_DX_06 = empty_violation();
   drErrHash[xc(DX_06)] = Error_DX_06;
   Error_DX_11 = empty_violation();
   drErrHash[xc(DX_11)] = Error_DX_11;
   Error_DX_12 = empty_violation();
   drErrHash[xc(DX_12)] = Error_DX_12;
   Error_DX_171 = empty_violation();
   drErrHash[xc(DX_171)] = Error_DX_171;
   Error_DX_172 = empty_violation();
   drErrHash[xc(DX_172)] = Error_DX_172;
   Error_DX_173 = empty_violation();
   drErrHash[xc(DX_173)] = Error_DX_173;
   Error_DX_174 = empty_violation();
   drErrHash[xc(DX_174)] = Error_DX_174;
   Error_DX_175 = empty_violation();
   drErrHash[xc(DX_175)] = Error_DX_175;
   Error_DX_176 = empty_violation();
   drErrHash[xc(DX_176)] = Error_DX_176;
   Error_DX_177 = empty_violation();
   drErrHash[xc(DX_177)] = Error_DX_177;
   Error_DX_22 = empty_violation();
   drErrHash[xc(DX_22)] = Error_DX_22;
   Error_DX_24 = empty_violation();
   drErrHash[xc(DX_24)] = Error_DX_24;
   Error_DX_25 = empty_violation();
   drErrHash[xc(DX_25)] = Error_DX_25;
   Error_DX_26 = empty_violation();
   drErrHash[xc(DX_26)] = Error_DX_26;
   Error_DX_27 = empty_violation();
   drErrHash[xc(DX_27)] = Error_DX_27;
   Error_DX_30 = empty_violation();
   drErrHash[xc(DX_30)] = Error_DX_30;
   Error_DX_31 = empty_violation();
   drErrHash[xc(DX_31)] = Error_DX_31;
   Error_DX_32 = empty_violation();
   drErrHash[xc(DX_32)] = Error_DX_32;
   Error_DX_33 = empty_violation();
   drErrHash[xc(DX_33)] = Error_DX_33;
   Error_DX_35 = empty_violation();
   drErrHash[xc(DX_35)] = Error_DX_35;
   Error_DX_361 = empty_violation();
   drErrHash[xc(DX_361)] = Error_DX_361;
   Error_DX_362 = empty_violation();
   drErrHash[xc(DX_362)] = Error_DX_362;
   Error_DX_363 = empty_violation();
   drErrHash[xc(DX_363)] = Error_DX_363;
   Error_DX_364 = empty_violation();
   drErrHash[xc(DX_364)] = Error_DX_364;
   Error_DX_371 = empty_violation();
   drErrHash[xc(DX_371)] = Error_DX_371;
   Error_DX_372 = empty_violation();
   drErrHash[xc(DX_372)] = Error_DX_372;
   Error_DX_373 = empty_violation();
   drErrHash[xc(DX_373)] = Error_DX_373;
   Error_DX_374 = empty_violation();
   drErrHash[xc(DX_374)] = Error_DX_374;
   Error_DX_375 = empty_violation();
   drErrHash[xc(DX_375)] = Error_DX_375;
   Error_DX_376 = empty_violation();
   drErrHash[xc(DX_376)] = Error_DX_376;
   Error_DX_38 = empty_violation();
   drErrHash[xc(DX_38)] = Error_DX_38;
   Error_DX_41 = empty_violation();
   drErrHash[xc(DX_41)] = Error_DX_41;
   Error_DX_44 = empty_violation();
   drErrHash[xc(DX_44)] = Error_DX_44;
   Error_DX_45 = empty_violation();
   drErrHash[xc(DX_45)] = Error_DX_45;
   Error_DX_52 = empty_violation();
   drErrHash[xc(DX_52)] = Error_DX_52;
   Error_DX_53 = empty_violation();
   drErrHash[xc(DX_53)] = Error_DX_53;
   Error_DX_54 = empty_violation();
   drErrHash[xc(DX_54)] = Error_DX_54;
   Error_DX_55 = empty_violation();
   drErrHash[xc(DX_55)] = Error_DX_55;
   Error_DX_56 = empty_violation();
   drErrHash[xc(DX_56)] = Error_DX_56;
   Error_DX_70 = empty_violation();
   drErrHash[xc(DX_70)] = Error_DX_70;
   Error_DX_71 = empty_violation();
   drErrHash[xc(DX_71)] = Error_DX_71;
   Error_DX_72 = empty_violation();
   drErrHash[xc(DX_72)] = Error_DX_72;
   Error_DX_73 = empty_violation();
   drErrHash[xc(DX_73)] = Error_DX_73;
   Error_EA_01 = empty_violation();
   drErrHash[xc(EA_01)] = Error_EA_01;
   Error_EA_02 = empty_violation();
   drErrHash[xc(EA_02)] = Error_EA_02;
   Error_EA_39 = empty_violation();
   drErrHash[xc(EA_39)] = Error_EA_39;
   Error_EA_40 = empty_violation();
   drErrHash[xc(EA_40)] = Error_EA_40;
   Error_EA_44 = empty_violation();
   drErrHash[xc(EA_44)] = Error_EA_44;
   Error_EA_45 = empty_violation();
   drErrHash[xc(EA_45)] = Error_EA_45;
   Error_EA_46 = empty_violation();
   drErrHash[xc(EA_46)] = Error_EA_46;
   Error_EA_91 = empty_violation();
   drErrHash[xc(EA_91)] = Error_EA_91;
   Error_EA_92 = empty_violation();
   drErrHash[xc(EA_92)] = Error_EA_92;
   Error_EDM_01 = empty_violation();
   drErrHash[xc(EDM_01)] = Error_EDM_01;
   Error_EDM_02 = empty_violation();
   drErrHash[xc(EDM_02)] = Error_EDM_02;
   Error_EDM_03 = empty_violation();
   drErrHash[xc(EDM_03)] = Error_EDM_03;
   Error_EDM_04 = empty_violation();
   drErrHash[xc(EDM_04)] = Error_EDM_04;
   Error_EDM_05 = empty_violation();
   drErrHash[xc(EDM_05)] = Error_EDM_05;
   Error_EDM_06 = empty_violation();
   drErrHash[xc(EDM_06)] = Error_EDM_06;
   Error_EDM_07 = empty_violation();
   drErrHash[xc(EDM_07)] = Error_EDM_07;
   Error_EDM_08 = empty_violation();
   drErrHash[xc(EDM_08)] = Error_EDM_08;
   Error_EDM_09 = empty_violation();
   drErrHash[xc(EDM_09)] = Error_EDM_09;
   Error_EDM_10 = empty_violation();
   drErrHash[xc(EDM_10)] = Error_EDM_10;
   Error_EDM_11 = empty_violation();
   drErrHash[xc(EDM_11)] = Error_EDM_11;
   Error_EDM_12 = empty_violation();
   drErrHash[xc(EDM_12)] = Error_EDM_12;
   Error_EDM_13 = empty_violation();
   drErrHash[xc(EDM_13)] = Error_EDM_13;
   Error_EDM_14 = empty_violation();
   drErrHash[xc(EDM_14)] = Error_EDM_14;
   Error_EDW_01 = empty_violation();
   drErrHash[xc(EDW_01)] = Error_EDW_01;
   Error_EDW_02 = empty_violation();
   drErrHash[xc(EDW_02)] = Error_EDW_02;
   Error_EDW_03 = empty_violation();
   drErrHash[xc(EDW_03)] = Error_EDW_03;
   Error_EDW_04 = empty_violation();
   drErrHash[xc(EDW_04)] = Error_EDW_04;
   Error_EDW_05 = empty_violation();
   drErrHash[xc(EDW_05)] = Error_EDW_05;
   Error_EDW_06 = empty_violation();
   drErrHash[xc(EDW_06)] = Error_EDW_06;
   Error_EDW_07 = empty_violation();
   drErrHash[xc(EDW_07)] = Error_EDW_07;
   Error_EDW_08 = empty_violation();
   drErrHash[xc(EDW_08)] = Error_EDW_08;
   Error_EDW_09 = empty_violation();
   drErrHash[xc(EDW_09)] = Error_EDW_09;
   Error_EDW_10 = empty_violation();
   drErrHash[xc(EDW_10)] = Error_EDW_10;
   Error_EDW_11 = empty_violation();
   drErrHash[xc(EDW_11)] = Error_EDW_11;
   Error_EDW_12 = empty_violation();
   drErrHash[xc(EDW_12)] = Error_EDW_12;
   Error_EDW_13 = empty_violation();
   drErrHash[xc(EDW_13)] = Error_EDW_13;
   Error_EDW_14 = empty_violation();
   drErrHash[xc(EDW_14)] = Error_EDW_14;
   Error_EDW_15 = empty_violation();
   drErrHash[xc(EDW_15)] = Error_EDW_15;
   Error_EDW_16 = empty_violation();
   drErrHash[xc(EDW_16)] = Error_EDW_16;
   Error_EDW_17 = empty_violation();
   drErrHash[xc(EDW_17)] = Error_EDW_17;
   Error_EDW_18 = empty_violation();
   drErrHash[xc(EDW_18)] = Error_EDW_18;
   Error_EHV_01 = empty_violation();
   drErrHash[xc(EHV_01)] = Error_EHV_01;
   Error_EHV_02 = empty_violation();
   drErrHash[xc(EHV_02)] = Error_EHV_02;
   Error_EHV_04 = empty_violation();
   drErrHash[xc(EHV_04)] = Error_EHV_04;
   Error_EHV_06 = empty_violation();
   drErrHash[xc(EHV_06)] = Error_EHV_06;
   Error_EHV_07 = empty_violation();
   drErrHash[xc(EHV_07)] = Error_EHV_07;
   Error_EHV_09 = empty_violation();
   drErrHash[xc(EHV_09)] = Error_EHV_09;
   Error_EHV_11 = empty_violation();
   drErrHash[xc(EHV_11)] = Error_EHV_11;
   Error_EHV_12 = empty_violation();
   drErrHash[xc(EHV_12)] = Error_EHV_12;
   Error_EHV_13 = empty_violation();
   drErrHash[xc(EHV_13)] = Error_EHV_13;
   Error_EHV_15 = empty_violation();
   drErrHash[xc(EHV_15)] = Error_EHV_15;
   Error_EHV_16 = empty_violation();
   drErrHash[xc(EHV_16)] = Error_EHV_16;
   Error_EHV_18 = empty_violation();
   drErrHash[xc(EHV_18)] = Error_EHV_18;
   Error_EHV_19 = empty_violation();
   drErrHash[xc(EHV_19)] = Error_EHV_19;
   Error_EHV_20 = empty_violation();
   drErrHash[xc(EHV_20)] = Error_EHV_20;
   Error_EHV_21 = empty_violation();
   drErrHash[xc(EHV_21)] = Error_EHV_21;
   Error_EHV_23 = empty_violation();
   drErrHash[xc(EHV_23)] = Error_EHV_23;
   Error_EHV_24 = empty_violation();
   drErrHash[xc(EHV_24)] = Error_EHV_24;
   Error_EHV_25 = empty_violation();
   drErrHash[xc(EHV_25)] = Error_EHV_25;
   Error_EHV_26 = empty_violation();
   drErrHash[xc(EHV_26)] = Error_EHV_26;
   Error_EHV_27 = empty_violation();
   drErrHash[xc(EHV_27)] = Error_EHV_27;
   Error_EHV_34 = empty_violation();
   drErrHash[xc(EHV_34)] = Error_EHV_34;
   Error_EHV_36 = empty_violation();
   drErrHash[xc(EHV_36)] = Error_EHV_36;
   Error_ENW_14 = empty_violation();
   drErrHash[xc(ENW_14)] = Error_ENW_14;
   Error_ENW_21 = empty_violation();
   drErrHash[xc(ENW_21)] = Error_ENW_21;
   Error_ENW_22 = empty_violation();
   drErrHash[xc(ENW_22)] = Error_ENW_22;
   Error_ER_01 = empty_violation();
   drErrHash[xc(ER_01)] = Error_ER_01;
   Error_ER_03 = empty_violation();
   drErrHash[xc(ER_03)] = Error_ER_03;
   Error_ER_04 = empty_violation();
   drErrHash[xc(ER_04)] = Error_ER_04;
   Error_ER_05 = empty_violation();
   drErrHash[xc(ER_05)] = Error_ER_05;
   Error_ER_06 = empty_violation();
   drErrHash[xc(ER_06)] = Error_ER_06;
   Error_ER_07 = empty_violation();
   drErrHash[xc(ER_07)] = Error_ER_07;
   Error_ER_08 = empty_violation();
   drErrHash[xc(ER_08)] = Error_ER_08;
   Error_ER_09 = empty_violation();
   drErrHash[xc(ER_09)] = Error_ER_09;
   Error_ER_12 = empty_violation();
   drErrHash[xc(ER_12)] = Error_ER_12;
   Error_FM_01 = empty_violation();
   drErrHash[xc(FM_01)] = Error_FM_01;
   Error_FM_02 = empty_violation();
   drErrHash[xc(FM_02)] = Error_FM_02;
   Error_FM_03 = empty_violation();
   drErrHash[xc(FM_03)] = Error_FM_03;
   Error_FM_101 = empty_violation();
   drErrHash[xc(FM_101)] = Error_FM_101;
   Error_FM_102 = empty_violation();
   drErrHash[xc(FM_102)] = Error_FM_102;
   Error_FM_103 = empty_violation();
   drErrHash[xc(FM_103)] = Error_FM_103;
   Error_FM_11 = empty_violation();
   drErrHash[xc(FM_11)] = Error_FM_11;
   Error_FM_111 = empty_violation();
   drErrHash[xc(FM_111)] = Error_FM_111;
   Error_FM_112 = empty_violation();
   drErrHash[xc(FM_112)] = Error_FM_112;
   Error_FM_113 = empty_violation();
   drErrHash[xc(FM_113)] = Error_FM_113;
   Error_FM_12 = empty_violation();
   drErrHash[xc(FM_12)] = Error_FM_12;
   Error_FM_121 = empty_violation();
   drErrHash[xc(FM_121)] = Error_FM_121;
   Error_FM_122 = empty_violation();
   drErrHash[xc(FM_122)] = Error_FM_122;
   Error_FM_123 = empty_violation();
   drErrHash[xc(FM_123)] = Error_FM_123;
   Error_FM_13 = empty_violation();
   drErrHash[xc(FM_13)] = Error_FM_13;
   Error_FM_21 = empty_violation();
   drErrHash[xc(FM_21)] = Error_FM_21;
   Error_FM_22 = empty_violation();
   drErrHash[xc(FM_22)] = Error_FM_22;
   Error_FM_23 = empty_violation();
   drErrHash[xc(FM_23)] = Error_FM_23;
   Error_FM_291 = empty_violation();
   drErrHash[xc(FM_291)] = Error_FM_291;
   Error_FM_292 = empty_violation();
   drErrHash[xc(FM_292)] = Error_FM_292;
   Error_FM_293 = empty_violation();
   drErrHash[xc(FM_293)] = Error_FM_293;
   Error_FM_294 = empty_violation();
   drErrHash[xc(FM_294)] = Error_FM_294;
   Error_FM_295 = empty_violation();
   drErrHash[xc(FM_295)] = Error_FM_295;
   Error_FM_296 = empty_violation();
   drErrHash[xc(FM_296)] = Error_FM_296;
   Error_FM_297 = empty_violation();
   drErrHash[xc(FM_297)] = Error_FM_297;
   Error_FM_298 = empty_violation();
   drErrHash[xc(FM_298)] = Error_FM_298;
   Error_FM_299 = empty_violation();
   drErrHash[xc(FM_299)] = Error_FM_299;
   Error_FM_31 = empty_violation();
   drErrHash[xc(FM_31)] = Error_FM_31;
   Error_FM_32 = empty_violation();
   drErrHash[xc(FM_32)] = Error_FM_32;
   Error_FM_33 = empty_violation();
   drErrHash[xc(FM_33)] = Error_FM_33;
   Error_FM_41 = empty_violation();
   drErrHash[xc(FM_41)] = Error_FM_41;
   Error_FM_42 = empty_violation();
   drErrHash[xc(FM_42)] = Error_FM_42;
   Error_FM_43 = empty_violation();
   drErrHash[xc(FM_43)] = Error_FM_43;
   Error_FM_51 = empty_violation();
   drErrHash[xc(FM_51)] = Error_FM_51;
   Error_FM_52 = empty_violation();
   drErrHash[xc(FM_52)] = Error_FM_52;
   Error_FM_53 = empty_violation();
   drErrHash[xc(FM_53)] = Error_FM_53;
   Error_FM_61 = empty_violation();
   drErrHash[xc(FM_61)] = Error_FM_61;
   Error_FM_62 = empty_violation();
   drErrHash[xc(FM_62)] = Error_FM_62;
   Error_FM_63 = empty_violation();
   drErrHash[xc(FM_63)] = Error_FM_63;
   Error_FM_71 = empty_violation();
   drErrHash[xc(FM_71)] = Error_FM_71;
   Error_FM_72 = empty_violation();
   drErrHash[xc(FM_72)] = Error_FM_72;
   Error_FM_73 = empty_violation();
   drErrHash[xc(FM_73)] = Error_FM_73;
   Error_FM_81 = empty_violation();
   drErrHash[xc(FM_81)] = Error_FM_81;
   Error_FM_82 = empty_violation();
   drErrHash[xc(FM_82)] = Error_FM_82;
   Error_FM_83 = empty_violation();
   drErrHash[xc(FM_83)] = Error_FM_83;
   Error_FM_91 = empty_violation();
   drErrHash[xc(FM_91)] = Error_FM_91;
   Error_FM_92 = empty_violation();
   drErrHash[xc(FM_92)] = Error_FM_92;
   Error_FM_93 = empty_violation();
   drErrHash[xc(FM_93)] = Error_FM_93;
   Error_FM_B1 = empty_violation();
   drErrHash[xc(FM_B1)] = Error_FM_B1;
   Error_FM_T1 = empty_violation();
   drErrHash[xc(FM_T1)] = Error_FM_T1;
   Error_GD_01 = empty_violation();
   drErrHash[xc(GD_01)] = Error_GD_01;
   Error_GD_02 = empty_violation();
   drErrHash[xc(GD_02)] = Error_GD_02;
   Error_GD_100 = empty_violation();
   drErrHash[xc(GD_100)] = Error_GD_100;
   Error_GD_101 = empty_violation();
   drErrHash[xc(GD_101)] = Error_GD_101;
   Error_GD_102 = empty_violation();
   drErrHash[xc(GD_102)] = Error_GD_102;
   Error_GD_103 = empty_violation();
   drErrHash[xc(GD_103)] = Error_GD_103;
   Error_GD_104 = empty_violation();
   drErrHash[xc(GD_104)] = Error_GD_104;
   Error_GD_105 = empty_violation();
   drErrHash[xc(GD_105)] = Error_GD_105;
   Error_GD_106 = empty_violation();
   drErrHash[xc(GD_106)] = Error_GD_106;
   Error_GD_107 = empty_violation();
   drErrHash[xc(GD_107)] = Error_GD_107;
   Error_GD_108 = empty_violation();
   drErrHash[xc(GD_108)] = Error_GD_108;
   Error_GD_109 = empty_violation();
   drErrHash[xc(GD_109)] = Error_GD_109;
   Error_GD_110 = empty_violation();
   drErrHash[xc(GD_110)] = Error_GD_110;
   Error_GD_111 = empty_violation();
   drErrHash[xc(GD_111)] = Error_GD_111;
   Error_GD_112 = empty_violation();
   drErrHash[xc(GD_112)] = Error_GD_112;
   Error_GD_120 = empty_violation();
   drErrHash[xc(GD_120)] = Error_GD_120;
   Error_GD_121 = empty_violation();
   drErrHash[xc(GD_121)] = Error_GD_121;
   Error_GD_122 = empty_violation();
   drErrHash[xc(GD_122)] = Error_GD_122;
   Error_GD_123 = empty_violation();
   drErrHash[xc(GD_123)] = Error_GD_123;
   Error_GD_200 = empty_violation();
   drErrHash[xc(GD_200)] = Error_GD_200;
   Error_GD_201 = empty_violation();
   drErrHash[xc(GD_201)] = Error_GD_201;
   Error_GD_202 = empty_violation();
   drErrHash[xc(GD_202)] = Error_GD_202;
   Error_GD_203 = empty_violation();
   drErrHash[xc(GD_203)] = Error_GD_203;
   Error_GD_204 = empty_violation();
   drErrHash[xc(GD_204)] = Error_GD_204;
   Error_GD_205 = empty_violation();
   drErrHash[xc(GD_205)] = Error_GD_205;
   Error_GD_206 = empty_violation();
   drErrHash[xc(GD_206)] = Error_GD_206;
   Error_GD_207 = empty_violation();
   drErrHash[xc(GD_207)] = Error_GD_207;
   Error_GD_208 = empty_violation();
   drErrHash[xc(GD_208)] = Error_GD_208;
   Error_GD_209 = empty_violation();
   drErrHash[xc(GD_209)] = Error_GD_209;
   Error_GD_21 = empty_violation();
   drErrHash[xc(GD_21)] = Error_GD_21;
   Error_GD_210 = empty_violation();
   drErrHash[xc(GD_210)] = Error_GD_210;
   Error_GD_211 = empty_violation();
   drErrHash[xc(GD_211)] = Error_GD_211;
   Error_GD_212 = empty_violation();
   drErrHash[xc(GD_212)] = Error_GD_212;
   Error_GD_22 = empty_violation();
   drErrHash[xc(GD_22)] = Error_GD_22;
   Error_GD_51 = empty_violation();
   drErrHash[xc(GD_51)] = Error_GD_51;
   Error_GD_52 = empty_violation();
   drErrHash[xc(GD_52)] = Error_GD_52;
   Error_GR_01 = empty_violation();
   drErrHash[xc(GR_01)] = Error_GR_01;
   Error_GR_02 = empty_violation();
   drErrHash[xc(GR_02)] = Error_GR_02;
   Error_GR_03 = empty_violation();
   drErrHash[xc(GR_03)] = Error_GR_03;
   Error_GR_04 = empty_violation();
   drErrHash[xc(GR_04)] = Error_GR_04;
   Error_GR_05 = empty_violation();
   drErrHash[xc(GR_05)] = Error_GR_05;
   Error_HNW_14 = empty_violation();
   drErrHash[xc(HNW_14)] = Error_HNW_14;
   Error_HNW_21 = empty_violation();
   drErrHash[xc(HNW_21)] = Error_HNW_21;
   Error_HNW_22 = empty_violation();
   drErrHash[xc(HNW_22)] = Error_HNW_22;
   Error_HV_01 = empty_violation();
   drErrHash[xc(HV_01)] = Error_HV_01;
   Error_HV_02 = empty_violation();
   drErrHash[xc(HV_02)] = Error_HV_02;
   Error_HV_04 = empty_violation();
   drErrHash[xc(HV_04)] = Error_HV_04;
   Error_HV_09 = empty_violation();
   drErrHash[xc(HV_09)] = Error_HV_09;
   Error_HV_11 = empty_violation();
   drErrHash[xc(HV_11)] = Error_HV_11;
   Error_HV_12 = empty_violation();
   drErrHash[xc(HV_12)] = Error_HV_12;
   Error_HV_13 = empty_violation();
   drErrHash[xc(HV_13)] = Error_HV_13;
   Error_HV_16 = empty_violation();
   drErrHash[xc(HV_16)] = Error_HV_16;
   Error_HV_18 = empty_violation();
   drErrHash[xc(HV_18)] = Error_HV_18;
   Error_HV_19 = empty_violation();
   drErrHash[xc(HV_19)] = Error_HV_19;
   Error_HV_20 = empty_violation();
   drErrHash[xc(HV_20)] = Error_HV_20;
   Error_HV_22 = empty_violation();
   drErrHash[xc(HV_22)] = Error_HV_22;
   Error_HV_23 = empty_violation();
   drErrHash[xc(HV_23)] = Error_HV_23;
   Error_HV_24 = empty_violation();
   drErrHash[xc(HV_24)] = Error_HV_24;
   Error_HV_25 = empty_violation();
   drErrHash[xc(HV_25)] = Error_HV_25;
   Error_HV_26 = empty_violation();
   drErrHash[xc(HV_26)] = Error_HV_26;
   Error_HV_27 = empty_violation();
   drErrHash[xc(HV_27)] = Error_HV_27;
   Error_HV_34 = empty_violation();
   drErrHash[xc(HV_34)] = Error_HV_34;
   Error_HV_36 = empty_violation();
   drErrHash[xc(HV_36)] = Error_HV_36;
   Error_HV_90 = empty_violation();
   drErrHash[xc(HV_90)] = Error_HV_90;
   Error_IPB_00 = empty_violation();
   drErrHash[xc(IPB_00)] = Error_IPB_00;
   Error_IPB_01 = empty_violation();
   drErrHash[xc(IPB_01)] = Error_IPB_01;
   Error_IPDW_111 = empty_violation();
   drErrHash[xc(IPDW_111)] = Error_IPDW_111;
   Error_IPDW_191 = empty_violation();
   drErrHash[xc(IPDW_191)] = Error_IPDW_191;
   Error_IPDW_193 = empty_violation();
   drErrHash[xc(IPDW_193)] = Error_IPDW_193;
   Error_IPDW_201 = empty_violation();
   drErrHash[xc(IPDW_201)] = Error_IPDW_201;
   Error_IPDW_391 = empty_violation();
   drErrHash[xc(IPDW_391)] = Error_IPDW_391;
   Error_IPDW_395 = empty_violation();
   drErrHash[xc(IPDW_395)] = Error_IPDW_395;
   Error_IPDW_611 = empty_violation();
   drErrHash[xc(IPDW_611)] = Error_IPDW_611;
   Error_IPD_00 = empty_violation();
   drErrHash[xc(IPD_00)] = Error_IPD_00;
   Error_IPD_01 = empty_violation();
   drErrHash[xc(IPD_01)] = Error_IPD_01;
   Error_IPD_02 = empty_violation();
   drErrHash[xc(IPD_02)] = Error_IPD_02;
   Error_IPD_03 = empty_violation();
   drErrHash[xc(IPD_03)] = Error_IPD_03;
   Error_IPD_04 = empty_violation();
   drErrHash[xc(IPD_04)] = Error_IPD_04;
   Error_IPD_05 = empty_violation();
   drErrHash[xc(IPD_05)] = Error_IPD_05;
   Error_IPD_06 = empty_violation();
   drErrHash[xc(IPD_06)] = Error_IPD_06;
   Error_IPD_07 = empty_violation();
   drErrHash[xc(IPD_07)] = Error_IPD_07;
   Error_IPD_08 = empty_violation();
   drErrHash[xc(IPD_08)] = Error_IPD_08;
   Error_IPD_09 = empty_violation();
   drErrHash[xc(IPD_09)] = Error_IPD_09;
   Error_IPD_10 = empty_violation();
   drErrHash[xc(IPD_10)] = Error_IPD_10;
   Error_IPD_100 = empty_violation();
   drErrHash[xc(IPD_100)] = Error_IPD_100;
   Error_IPD_101 = empty_violation();
   drErrHash[xc(IPD_101)] = Error_IPD_101;
   Error_IPD_102 = empty_violation();
   drErrHash[xc(IPD_102)] = Error_IPD_102;
   Error_IPD_103 = empty_violation();
   drErrHash[xc(IPD_103)] = Error_IPD_103;
   Error_IPD_104 = empty_violation();
   drErrHash[xc(IPD_104)] = Error_IPD_104;
   Error_IPD_105 = empty_violation();
   drErrHash[xc(IPD_105)] = Error_IPD_105;
   Error_IPD_106 = empty_violation();
   drErrHash[xc(IPD_106)] = Error_IPD_106;
   Error_IPD_107 = empty_violation();
   drErrHash[xc(IPD_107)] = Error_IPD_107;
   Error_IPD_108 = empty_violation();
   drErrHash[xc(IPD_108)] = Error_IPD_108;
   Error_IPD_109 = empty_violation();
   drErrHash[xc(IPD_109)] = Error_IPD_109;
   Error_IPD_11 = empty_violation();
   drErrHash[xc(IPD_11)] = Error_IPD_11;
   Error_IPD_110 = empty_violation();
   drErrHash[xc(IPD_110)] = Error_IPD_110;
   Error_IPD_111 = empty_violation();
   drErrHash[xc(IPD_111)] = Error_IPD_111;
   Error_IPD_112 = empty_violation();
   drErrHash[xc(IPD_112)] = Error_IPD_112;
   Error_IPD_113 = empty_violation();
   drErrHash[xc(IPD_113)] = Error_IPD_113;
   Error_IPD_114 = empty_violation();
   drErrHash[xc(IPD_114)] = Error_IPD_114;
   Error_IPD_12 = empty_violation();
   drErrHash[xc(IPD_12)] = Error_IPD_12;
   Error_IPD_13 = empty_violation();
   drErrHash[xc(IPD_13)] = Error_IPD_13;
   Error_IPD_14 = empty_violation();
   drErrHash[xc(IPD_14)] = Error_IPD_14;
   Error_IPD_200 = empty_violation();
   drErrHash[xc(IPD_200)] = Error_IPD_200;
   Error_IPD_201 = empty_violation();
   drErrHash[xc(IPD_201)] = Error_IPD_201;
   Error_IPD_202 = empty_violation();
   drErrHash[xc(IPD_202)] = Error_IPD_202;
   Error_IPD_203 = empty_violation();
   drErrHash[xc(IPD_203)] = Error_IPD_203;
   Error_IPD_204 = empty_violation();
   drErrHash[xc(IPD_204)] = Error_IPD_204;
   Error_IPD_205 = empty_violation();
   drErrHash[xc(IPD_205)] = Error_IPD_205;
   Error_IPD_206 = empty_violation();
   drErrHash[xc(IPD_206)] = Error_IPD_206;
   Error_IPD_207 = empty_violation();
   drErrHash[xc(IPD_207)] = Error_IPD_207;
   Error_IPD_208 = empty_violation();
   drErrHash[xc(IPD_208)] = Error_IPD_208;
   Error_IPD_209 = empty_violation();
   drErrHash[xc(IPD_209)] = Error_IPD_209;
   Error_IPD_210 = empty_violation();
   drErrHash[xc(IPD_210)] = Error_IPD_210;
   Error_IPD_211 = empty_violation();
   drErrHash[xc(IPD_211)] = Error_IPD_211;
   Error_IPD_212 = empty_violation();
   drErrHash[xc(IPD_212)] = Error_IPD_212;
   Error_IPD_213 = empty_violation();
   drErrHash[xc(IPD_213)] = Error_IPD_213;
   Error_IPD_300 = empty_violation();
   drErrHash[xc(IPD_300)] = Error_IPD_300;
   Error_IPD_301 = empty_violation();
   drErrHash[xc(IPD_301)] = Error_IPD_301;
   Error_IPD_302 = empty_violation();
   drErrHash[xc(IPD_302)] = Error_IPD_302;
   Error_IPD_303 = empty_violation();
   drErrHash[xc(IPD_303)] = Error_IPD_303;
   Error_IPD_304 = empty_violation();
   drErrHash[xc(IPD_304)] = Error_IPD_304;
   Error_IPD_305 = empty_violation();
   drErrHash[xc(IPD_305)] = Error_IPD_305;
   Error_IPD_306 = empty_violation();
   drErrHash[xc(IPD_306)] = Error_IPD_306;
   Error_IPD_307 = empty_violation();
   drErrHash[xc(IPD_307)] = Error_IPD_307;
   Error_IPD_308 = empty_violation();
   drErrHash[xc(IPD_308)] = Error_IPD_308;
   Error_IPD_309 = empty_violation();
   drErrHash[xc(IPD_309)] = Error_IPD_309;
   Error_IPD_310 = empty_violation();
   drErrHash[xc(IPD_310)] = Error_IPD_310;
   Error_IPD_311 = empty_violation();
   drErrHash[xc(IPD_311)] = Error_IPD_311;
   Error_IPD_312 = empty_violation();
   drErrHash[xc(IPD_312)] = Error_IPD_312;
   Error_IPD_313 = empty_violation();
   drErrHash[xc(IPD_313)] = Error_IPD_313;
   Error_IPD_405 = empty_violation();
   drErrHash[xc(IPD_405)] = Error_IPD_405;
   Error_IPD_406 = empty_violation();
   drErrHash[xc(IPD_406)] = Error_IPD_406;
   Error_IPD_407 = empty_violation();
   drErrHash[xc(IPD_407)] = Error_IPD_407;
   Error_IPD_408 = empty_violation();
   drErrHash[xc(IPD_408)] = Error_IPD_408;
   Error_IPD_409 = empty_violation();
   drErrHash[xc(IPD_409)] = Error_IPD_409;
   Error_IPD_410 = empty_violation();
   drErrHash[xc(IPD_410)] = Error_IPD_410;
   Error_IPD_411 = empty_violation();
   drErrHash[xc(IPD_411)] = Error_IPD_411;
   Error_IPD_412 = empty_violation();
   drErrHash[xc(IPD_412)] = Error_IPD_412;
   Error_IPD_413 = empty_violation();
   drErrHash[xc(IPD_413)] = Error_IPD_413;
   Error_IPD_505 = empty_violation();
   drErrHash[xc(IPD_505)] = Error_IPD_505;
   Error_IPD_506 = empty_violation();
   drErrHash[xc(IPD_506)] = Error_IPD_506;
   Error_IPD_507 = empty_violation();
   drErrHash[xc(IPD_507)] = Error_IPD_507;
   Error_IPD_508 = empty_violation();
   drErrHash[xc(IPD_508)] = Error_IPD_508;
   Error_IPD_509 = empty_violation();
   drErrHash[xc(IPD_509)] = Error_IPD_509;
   Error_IPD_510 = empty_violation();
   drErrHash[xc(IPD_510)] = Error_IPD_510;
   Error_IPD_511 = empty_violation();
   drErrHash[xc(IPD_511)] = Error_IPD_511;
   Error_IPD_512 = empty_violation();
   drErrHash[xc(IPD_512)] = Error_IPD_512;
   Error_IPD_513 = empty_violation();
   drErrHash[xc(IPD_513)] = Error_IPD_513;
   Error_IPD_600 = empty_violation();
   drErrHash[xc(IPD_600)] = Error_IPD_600;
   Error_IPD_601 = empty_violation();
   drErrHash[xc(IPD_601)] = Error_IPD_601;
   Error_IPD_602 = empty_violation();
   drErrHash[xc(IPD_602)] = Error_IPD_602;
   Error_IPD_610 = empty_violation();
   drErrHash[xc(IPD_610)] = Error_IPD_610;
   Error_IPD_611 = empty_violation();
   drErrHash[xc(IPD_611)] = Error_IPD_611;
   Error_IPD_612 = empty_violation();
   drErrHash[xc(IPD_612)] = Error_IPD_612;
   Error_IPGTM1_05 = empty_violation();
   drErrHash[xc(IPGTM1_05)] = Error_IPGTM1_05;
   Error_IPG_00 = empty_violation();
   drErrHash[xc(IPG_00)] = Error_IPG_00;
   Error_IPG_01 = empty_violation();
   drErrHash[xc(IPG_01)] = Error_IPG_01;
   Error_IPG_02 = empty_violation();
   drErrHash[xc(IPG_02)] = Error_IPG_02;
   Error_IPG_03 = empty_violation();
   drErrHash[xc(IPG_03)] = Error_IPG_03;
   Error_IPG_04 = empty_violation();
   drErrHash[xc(IPG_04)] = Error_IPG_04;
   Error_IPG_05 = empty_violation();
   drErrHash[xc(IPG_05)] = Error_IPG_05;
   Error_IPG_100 = empty_violation();
   drErrHash[xc(IPG_100)] = Error_IPG_100;
   Error_IPG_101 = empty_violation();
   drErrHash[xc(IPG_101)] = Error_IPG_101;
   Error_IPG_200 = empty_violation();
   drErrHash[xc(IPG_200)] = Error_IPG_200;
   Error_IPG_300 = empty_violation();
   drErrHash[xc(IPG_300)] = Error_IPG_300;
   Error_IPG_301 = empty_violation();
   drErrHash[xc(IPG_301)] = Error_IPG_301;
   Error_IPG_302 = empty_violation();
   drErrHash[xc(IPG_302)] = Error_IPG_302;
   Error_IPG_303 = empty_violation();
   drErrHash[xc(IPG_303)] = Error_IPG_303;
   Error_IPG_304 = empty_violation();
   drErrHash[xc(IPG_304)] = Error_IPG_304;
   Error_IPG_305 = empty_violation();
   drErrHash[xc(IPG_305)] = Error_IPG_305;
   Error_IPG_400 = empty_violation();
   drErrHash[xc(IPG_400)] = Error_IPG_400;
   Error_IPG_401 = empty_violation();
   drErrHash[xc(IPG_401)] = Error_IPG_401;
   Error_IPG_610 = empty_violation();
   drErrHash[xc(IPG_610)] = Error_IPG_610;
   Error_IPG_611 = empty_violation();
   drErrHash[xc(IPG_611)] = Error_IPG_611;
   Error_IPG_612 = empty_violation();
   drErrHash[xc(IPG_612)] = Error_IPG_612;
   Error_IPNWD_101 = empty_violation();
   drErrHash[xc(IPNWD_101)] = Error_IPNWD_101;
   Error_IPNWD_102 = empty_violation();
   drErrHash[xc(IPNWD_102)] = Error_IPNWD_102;
   Error_IPNWD_103 = empty_violation();
   drErrHash[xc(IPNWD_103)] = Error_IPNWD_103;
   Error_IPNWG_101 = empty_violation();
   drErrHash[xc(IPNWG_101)] = Error_IPNWG_101;
   Error_IPNWG_102 = empty_violation();
   drErrHash[xc(IPNWG_102)] = Error_IPNWG_102;
   Error_IPNWG_103 = empty_violation();
   drErrHash[xc(IPNWG_103)] = Error_IPNWG_103;
   Error_IPNWN_01 = empty_violation();
   drErrHash[xc(IPNWN_01)] = Error_IPNWN_01;
   Error_IPNWN_02 = empty_violation();
   drErrHash[xc(IPNWN_02)] = Error_IPNWN_02;
   Error_IPNWN_03 = empty_violation();
   drErrHash[xc(IPNWN_03)] = Error_IPNWN_03;
   Error_IPNWN_04 = empty_violation();
   drErrHash[xc(IPNWN_04)] = Error_IPNWN_04;
   Error_IPNWN_05 = empty_violation();
   drErrHash[xc(IPNWN_05)] = Error_IPNWN_05;
   Error_IPN_00 = empty_violation();
   drErrHash[xc(IPN_00)] = Error_IPN_00;
   Error_IPN_01 = empty_violation();
   drErrHash[xc(IPN_01)] = Error_IPN_01;
   Error_IPN_02 = empty_violation();
   drErrHash[xc(IPN_02)] = Error_IPN_02;
   Error_IPN_03 = empty_violation();
   drErrHash[xc(IPN_03)] = Error_IPN_03;
   Error_IPN_04 = empty_violation();
   drErrHash[xc(IPN_04)] = Error_IPN_04;
   Error_IPN_05 = empty_violation();
   drErrHash[xc(IPN_05)] = Error_IPN_05;
   Error_IPN_06 = empty_violation();
   drErrHash[xc(IPN_06)] = Error_IPN_06;
   Error_IPN_07 = empty_violation();
   drErrHash[xc(IPN_07)] = Error_IPN_07;
   Error_IPN_08 = empty_violation();
   drErrHash[xc(IPN_08)] = Error_IPN_08;
   Error_IPN_09 = empty_violation();
   drErrHash[xc(IPN_09)] = Error_IPN_09;
   Error_IPN_10 = empty_violation();
   drErrHash[xc(IPN_10)] = Error_IPN_10;
   Error_IPN_100 = empty_violation();
   drErrHash[xc(IPN_100)] = Error_IPN_100;
   Error_IPN_101 = empty_violation();
   drErrHash[xc(IPN_101)] = Error_IPN_101;
   Error_IPN_102 = empty_violation();
   drErrHash[xc(IPN_102)] = Error_IPN_102;
   Error_IPN_103 = empty_violation();
   drErrHash[xc(IPN_103)] = Error_IPN_103;
   Error_IPN_104 = empty_violation();
   drErrHash[xc(IPN_104)] = Error_IPN_104;
   Error_IPN_105 = empty_violation();
   drErrHash[xc(IPN_105)] = Error_IPN_105;
   Error_IPN_106 = empty_violation();
   drErrHash[xc(IPN_106)] = Error_IPN_106;
   Error_IPN_107 = empty_violation();
   drErrHash[xc(IPN_107)] = Error_IPN_107;
   Error_IPN_108 = empty_violation();
   drErrHash[xc(IPN_108)] = Error_IPN_108;
   Error_IPN_109 = empty_violation();
   drErrHash[xc(IPN_109)] = Error_IPN_109;
   Error_IPN_11 = empty_violation();
   drErrHash[xc(IPN_11)] = Error_IPN_11;
   Error_IPN_110 = empty_violation();
   drErrHash[xc(IPN_110)] = Error_IPN_110;
   Error_IPN_111 = empty_violation();
   drErrHash[xc(IPN_111)] = Error_IPN_111;
   Error_IPN_112 = empty_violation();
   drErrHash[xc(IPN_112)] = Error_IPN_112;
   Error_IPN_113 = empty_violation();
   drErrHash[xc(IPN_113)] = Error_IPN_113;
   Error_IPN_114 = empty_violation();
   drErrHash[xc(IPN_114)] = Error_IPN_114;
   Error_IPN_12 = empty_violation();
   drErrHash[xc(IPN_12)] = Error_IPN_12;
   Error_IPN_13 = empty_violation();
   drErrHash[xc(IPN_13)] = Error_IPN_13;
   Error_IPN_14 = empty_violation();
   drErrHash[xc(IPN_14)] = Error_IPN_14;
   Error_IPN_200 = empty_violation();
   drErrHash[xc(IPN_200)] = Error_IPN_200;
   Error_IPN_201 = empty_violation();
   drErrHash[xc(IPN_201)] = Error_IPN_201;
   Error_IPN_202 = empty_violation();
   drErrHash[xc(IPN_202)] = Error_IPN_202;
   Error_IPN_203 = empty_violation();
   drErrHash[xc(IPN_203)] = Error_IPN_203;
   Error_IPN_204 = empty_violation();
   drErrHash[xc(IPN_204)] = Error_IPN_204;
   Error_IPN_205 = empty_violation();
   drErrHash[xc(IPN_205)] = Error_IPN_205;
   Error_IPN_206 = empty_violation();
   drErrHash[xc(IPN_206)] = Error_IPN_206;
   Error_IPN_207 = empty_violation();
   drErrHash[xc(IPN_207)] = Error_IPN_207;
   Error_IPN_208 = empty_violation();
   drErrHash[xc(IPN_208)] = Error_IPN_208;
   Error_IPN_209 = empty_violation();
   drErrHash[xc(IPN_209)] = Error_IPN_209;
   Error_IPN_210 = empty_violation();
   drErrHash[xc(IPN_210)] = Error_IPN_210;
   Error_IPN_211 = empty_violation();
   drErrHash[xc(IPN_211)] = Error_IPN_211;
   Error_IPN_212 = empty_violation();
   drErrHash[xc(IPN_212)] = Error_IPN_212;
   Error_IPN_213 = empty_violation();
   drErrHash[xc(IPN_213)] = Error_IPN_213;
   Error_IPN_214 = empty_violation();
   drErrHash[xc(IPN_214)] = Error_IPN_214;
   Error_IPN_300 = empty_violation();
   drErrHash[xc(IPN_300)] = Error_IPN_300;
   Error_IPN_301 = empty_violation();
   drErrHash[xc(IPN_301)] = Error_IPN_301;
   Error_IPN_302 = empty_violation();
   drErrHash[xc(IPN_302)] = Error_IPN_302;
   Error_IPN_303 = empty_violation();
   drErrHash[xc(IPN_303)] = Error_IPN_303;
   Error_IPN_304 = empty_violation();
   drErrHash[xc(IPN_304)] = Error_IPN_304;
   Error_IPN_305 = empty_violation();
   drErrHash[xc(IPN_305)] = Error_IPN_305;
   Error_IPN_306 = empty_violation();
   drErrHash[xc(IPN_306)] = Error_IPN_306;
   Error_IPN_307 = empty_violation();
   drErrHash[xc(IPN_307)] = Error_IPN_307;
   Error_IPN_308 = empty_violation();
   drErrHash[xc(IPN_308)] = Error_IPN_308;
   Error_IPN_309 = empty_violation();
   drErrHash[xc(IPN_309)] = Error_IPN_309;
   Error_IPN_310 = empty_violation();
   drErrHash[xc(IPN_310)] = Error_IPN_310;
   Error_IPN_311 = empty_violation();
   drErrHash[xc(IPN_311)] = Error_IPN_311;
   Error_IPN_312 = empty_violation();
   drErrHash[xc(IPN_312)] = Error_IPN_312;
   Error_IPN_313 = empty_violation();
   drErrHash[xc(IPN_313)] = Error_IPN_313;
   Error_IPN_400 = empty_violation();
   drErrHash[xc(IPN_400)] = Error_IPN_400;
   Error_IPN_401 = empty_violation();
   drErrHash[xc(IPN_401)] = Error_IPN_401;
   Error_IPN_402 = empty_violation();
   drErrHash[xc(IPN_402)] = Error_IPN_402;
   Error_IPN_403 = empty_violation();
   drErrHash[xc(IPN_403)] = Error_IPN_403;
   Error_IPN_404 = empty_violation();
   drErrHash[xc(IPN_404)] = Error_IPN_404;
   Error_IPN_405 = empty_violation();
   drErrHash[xc(IPN_405)] = Error_IPN_405;
   Error_IPN_406 = empty_violation();
   drErrHash[xc(IPN_406)] = Error_IPN_406;
   Error_IPN_407 = empty_violation();
   drErrHash[xc(IPN_407)] = Error_IPN_407;
   Error_IPN_408 = empty_violation();
   drErrHash[xc(IPN_408)] = Error_IPN_408;
   Error_IPN_409 = empty_violation();
   drErrHash[xc(IPN_409)] = Error_IPN_409;
   Error_IPN_410 = empty_violation();
   drErrHash[xc(IPN_410)] = Error_IPN_410;
   Error_IPN_411 = empty_violation();
   drErrHash[xc(IPN_411)] = Error_IPN_411;
   Error_IPN_412 = empty_violation();
   drErrHash[xc(IPN_412)] = Error_IPN_412;
   Error_IPN_413 = empty_violation();
   drErrHash[xc(IPN_413)] = Error_IPN_413;
   Error_IPTB_00 = empty_violation();
   drErrHash[xc(IPTB_00)] = Error_IPTB_00;
   Error_IPTB_01 = empty_violation();
   drErrHash[xc(IPTB_01)] = Error_IPTB_01;
   Error_IPTD_100 = empty_violation();
   drErrHash[xc(IPTD_100)] = Error_IPTD_100;
   Error_IPTD_101 = empty_violation();
   drErrHash[xc(IPTD_101)] = Error_IPTD_101;
   Error_IPTD_102 = empty_violation();
   drErrHash[xc(IPTD_102)] = Error_IPTD_102;
   Error_IPTD_103 = empty_violation();
   drErrHash[xc(IPTD_103)] = Error_IPTD_103;
   Error_IPTD_104 = empty_violation();
   drErrHash[xc(IPTD_104)] = Error_IPTD_104;
   Error_IPTD_105 = empty_violation();
   drErrHash[xc(IPTD_105)] = Error_IPTD_105;
   Error_IPTD_106 = empty_violation();
   drErrHash[xc(IPTD_106)] = Error_IPTD_106;
   Error_IPTD_107 = empty_violation();
   drErrHash[xc(IPTD_107)] = Error_IPTD_107;
   Error_IPTD_108 = empty_violation();
   drErrHash[xc(IPTD_108)] = Error_IPTD_108;
   Error_IPTD_109 = empty_violation();
   drErrHash[xc(IPTD_109)] = Error_IPTD_109;
   Error_IPTD_110 = empty_violation();
   drErrHash[xc(IPTD_110)] = Error_IPTD_110;
   Error_IPTD_111 = empty_violation();
   drErrHash[xc(IPTD_111)] = Error_IPTD_111;
   Error_IPTD_112 = empty_violation();
   drErrHash[xc(IPTD_112)] = Error_IPTD_112;
   Error_IPTD_113 = empty_violation();
   drErrHash[xc(IPTD_113)] = Error_IPTD_113;
   Error_IPTD_114 = empty_violation();
   drErrHash[xc(IPTD_114)] = Error_IPTD_114;
   Error_IPTD_600 = empty_violation();
   drErrHash[xc(IPTD_600)] = Error_IPTD_600;
   Error_IPTG_00 = empty_violation();
   drErrHash[xc(IPTG_00)] = Error_IPTG_00;
   Error_IPTG_100 = empty_violation();
   drErrHash[xc(IPTG_100)] = Error_IPTG_100;
   Error_IPTG_101 = empty_violation();
   drErrHash[xc(IPTG_101)] = Error_IPTG_101;
   Error_IPTG_102 = empty_violation();
   drErrHash[xc(IPTG_102)] = Error_IPTG_102;
   Error_IPTG_103 = empty_violation();
   drErrHash[xc(IPTG_103)] = Error_IPTG_103;
   Error_IPTG_104 = empty_violation();
   drErrHash[xc(IPTG_104)] = Error_IPTG_104;
   Error_IPTG_105 = empty_violation();
   drErrHash[xc(IPTG_105)] = Error_IPTG_105;
   Error_IPTG_106 = empty_violation();
   drErrHash[xc(IPTG_106)] = Error_IPTG_106;
   Error_IPTG_107 = empty_violation();
   drErrHash[xc(IPTG_107)] = Error_IPTG_107;
   Error_IPTG_108 = empty_violation();
   drErrHash[xc(IPTG_108)] = Error_IPTG_108;
   Error_IPTG_109 = empty_violation();
   drErrHash[xc(IPTG_109)] = Error_IPTG_109;
   Error_IPTG_110 = empty_violation();
   drErrHash[xc(IPTG_110)] = Error_IPTG_110;
   Error_IPTG_111 = empty_violation();
   drErrHash[xc(IPTG_111)] = Error_IPTG_111;
   Error_IPTG_112 = empty_violation();
   drErrHash[xc(IPTG_112)] = Error_IPTG_112;
   Error_IPTG_113 = empty_violation();
   drErrHash[xc(IPTG_113)] = Error_IPTG_113;
   Error_IPTG_114 = empty_violation();
   drErrHash[xc(IPTG_114)] = Error_IPTG_114;
   Error_IPTG_600 = empty_violation();
   drErrHash[xc(IPTG_600)] = Error_IPTG_600;
   Error_IPTG_601 = empty_violation();
   drErrHash[xc(IPTG_601)] = Error_IPTG_601;
   Error_IPTG_602 = empty_violation();
   drErrHash[xc(IPTG_602)] = Error_IPTG_602;
   Error_IPTG_603 = empty_violation();
   drErrHash[xc(IPTG_603)] = Error_IPTG_603;
   Error_IPTG_604 = empty_violation();
   drErrHash[xc(IPTG_604)] = Error_IPTG_604;
   Error_IPTG_605 = empty_violation();
   drErrHash[xc(IPTG_605)] = Error_IPTG_605;
   Error_IPTG_606 = empty_violation();
   drErrHash[xc(IPTG_606)] = Error_IPTG_606;
   Error_IPTG_607 = empty_violation();
   drErrHash[xc(IPTG_607)] = Error_IPTG_607;
   Error_IPTG_608 = empty_violation();
   drErrHash[xc(IPTG_608)] = Error_IPTG_608;
   Error_IPTG_609 = empty_violation();
   drErrHash[xc(IPTG_609)] = Error_IPTG_609;
   Error_IPTG_610 = empty_violation();
   drErrHash[xc(IPTG_610)] = Error_IPTG_610;
   Error_IPTG_611 = empty_violation();
   drErrHash[xc(IPTG_611)] = Error_IPTG_611;
   Error_IPTG_612 = empty_violation();
   drErrHash[xc(IPTG_612)] = Error_IPTG_612;
   Error_IPTG_613 = empty_violation();
   drErrHash[xc(IPTG_613)] = Error_IPTG_613;
   Error_IPTG_614 = empty_violation();
   drErrHash[xc(IPTG_614)] = Error_IPTG_614;
   Error_IPTG_700 = empty_violation();
   drErrHash[xc(IPTG_700)] = Error_IPTG_700;
   Error_IPTN_100 = empty_violation();
   drErrHash[xc(IPTN_100)] = Error_IPTN_100;
   Error_IPTN_101 = empty_violation();
   drErrHash[xc(IPTN_101)] = Error_IPTN_101;
   Error_IPTN_102 = empty_violation();
   drErrHash[xc(IPTN_102)] = Error_IPTN_102;
   Error_IPTN_103 = empty_violation();
   drErrHash[xc(IPTN_103)] = Error_IPTN_103;
   Error_IPTN_104 = empty_violation();
   drErrHash[xc(IPTN_104)] = Error_IPTN_104;
   Error_IPTN_105 = empty_violation();
   drErrHash[xc(IPTN_105)] = Error_IPTN_105;
   Error_IPTN_106 = empty_violation();
   drErrHash[xc(IPTN_106)] = Error_IPTN_106;
   Error_IPTN_107 = empty_violation();
   drErrHash[xc(IPTN_107)] = Error_IPTN_107;
   Error_IPTN_108 = empty_violation();
   drErrHash[xc(IPTN_108)] = Error_IPTN_108;
   Error_IPTN_109 = empty_violation();
   drErrHash[xc(IPTN_109)] = Error_IPTN_109;
   Error_IPTN_110 = empty_violation();
   drErrHash[xc(IPTN_110)] = Error_IPTN_110;
   Error_IPTN_111 = empty_violation();
   drErrHash[xc(IPTN_111)] = Error_IPTN_111;
   Error_IPTN_112 = empty_violation();
   drErrHash[xc(IPTN_112)] = Error_IPTN_112;
   Error_IPTN_113 = empty_violation();
   drErrHash[xc(IPTN_113)] = Error_IPTN_113;
   Error_IPTN_114 = empty_violation();
   drErrHash[xc(IPTN_114)] = Error_IPTN_114;
   Error_IPTN_200 = empty_violation();
   drErrHash[xc(IPTN_200)] = Error_IPTN_200;
   Error_IPTN_201 = empty_violation();
   drErrHash[xc(IPTN_201)] = Error_IPTN_201;
   Error_IPTN_202 = empty_violation();
   drErrHash[xc(IPTN_202)] = Error_IPTN_202;
   Error_IPTN_203 = empty_violation();
   drErrHash[xc(IPTN_203)] = Error_IPTN_203;
   Error_IPTN_204 = empty_violation();
   drErrHash[xc(IPTN_204)] = Error_IPTN_204;
   Error_IPTN_205 = empty_violation();
   drErrHash[xc(IPTN_205)] = Error_IPTN_205;
   Error_IPTN_206 = empty_violation();
   drErrHash[xc(IPTN_206)] = Error_IPTN_206;
   Error_IPTN_207 = empty_violation();
   drErrHash[xc(IPTN_207)] = Error_IPTN_207;
   Error_IPTN_208 = empty_violation();
   drErrHash[xc(IPTN_208)] = Error_IPTN_208;
   Error_IPTN_209 = empty_violation();
   drErrHash[xc(IPTN_209)] = Error_IPTN_209;
   Error_IPTN_210 = empty_violation();
   drErrHash[xc(IPTN_210)] = Error_IPTN_210;
   Error_IPTN_211 = empty_violation();
   drErrHash[xc(IPTN_211)] = Error_IPTN_211;
   Error_IPTN_212 = empty_violation();
   drErrHash[xc(IPTN_212)] = Error_IPTN_212;
   Error_IPTN_213 = empty_violation();
   drErrHash[xc(IPTN_213)] = Error_IPTN_213;
   Error_IPTN_214 = empty_violation();
   drErrHash[xc(IPTN_214)] = Error_IPTN_214;
   Error_IPT_01 = empty_violation();
   drErrHash[xc(IPT_01)] = Error_IPT_01;
   Error_IPT_02 = empty_violation();
   drErrHash[xc(IPT_02)] = Error_IPT_02;
   Error_IPT_03 = empty_violation();
   drErrHash[xc(IPT_03)] = Error_IPT_03;
   Error_IP_01 = empty_violation();
   drErrHash[xc(IP_01)] = Error_IP_01;
   Error_IP_02 = empty_violation();
   drErrHash[xc(IP_02)] = Error_IP_02;
   Error_IP_03 = empty_violation();
   drErrHash[xc(IP_03)] = Error_IP_03;
   Error_J_01 = empty_violation();
   drErrHash[xc(J_01)] = Error_J_01;
   Error_J_02 = empty_violation();
   drErrHash[xc(J_02)] = Error_J_02;
   Error_J_03 = empty_violation();
   drErrHash[xc(J_03)] = Error_J_03;
   Error_J_04 = empty_violation();
   drErrHash[xc(J_04)] = Error_J_04;
   Error_J_05 = empty_violation();
   drErrHash[xc(J_05)] = Error_J_05;
   Error_J_06 = empty_violation();
   drErrHash[xc(J_06)] = Error_J_06;
   Error_J_07 = empty_violation();
   drErrHash[xc(J_07)] = Error_J_07;
   Error_J_08 = empty_violation();
   drErrHash[xc(J_08)] = Error_J_08;
   Error_J_09 = empty_violation();
   drErrHash[xc(J_09)] = Error_J_09;
   Error_J_10 = empty_violation();
   drErrHash[xc(J_10)] = Error_J_10;
   Error_J_11 = empty_violation();
   drErrHash[xc(J_11)] = Error_J_11;
   Error_J_12 = empty_violation();
   drErrHash[xc(J_12)] = Error_J_12;
   Error_J_13 = empty_violation();
   drErrHash[xc(J_13)] = Error_J_13;
   Error_J_14 = empty_violation();
   drErrHash[xc(J_14)] = Error_J_14;
   Error_J_15 = empty_violation();
   drErrHash[xc(J_15)] = Error_J_15;
   Error_J_16 = empty_violation();
   drErrHash[xc(J_16)] = Error_J_16;
   Error_J_21 = empty_violation();
   drErrHash[xc(J_21)] = Error_J_21;
   Error_J_22 = empty_violation();
   drErrHash[xc(J_22)] = Error_J_22;
   Error_J_23 = empty_violation();
   drErrHash[xc(J_23)] = Error_J_23;
   Error_J_24 = empty_violation();
   drErrHash[xc(J_24)] = Error_J_24;
   Error_J_25 = empty_violation();
   drErrHash[xc(J_25)] = Error_J_25;
   Error_J_41 = empty_violation();
   drErrHash[xc(J_41)] = Error_J_41;
   Error_J_42 = empty_violation();
   drErrHash[xc(J_42)] = Error_J_42;
   Error_J_43 = empty_violation();
   drErrHash[xc(J_43)] = Error_J_43;
   Error_J_44 = empty_violation();
   drErrHash[xc(J_44)] = Error_J_44;
   Error_J_46 = empty_violation();
   drErrHash[xc(J_46)] = Error_J_46;
   Error_J_81 = empty_violation();
   drErrHash[xc(J_81)] = Error_J_81;
   Error_J_82 = empty_violation();
   drErrHash[xc(J_82)] = Error_J_82;
   Error_K_01 = empty_violation();
   drErrHash[xc(K_01)] = Error_K_01;
   Error_K_02 = empty_violation();
   drErrHash[xc(K_02)] = Error_K_02;
   Error_K_03 = empty_violation();
   drErrHash[xc(K_03)] = Error_K_03;
   Error_K_04 = empty_violation();
   drErrHash[xc(K_04)] = Error_K_04;
   Error_K_05 = empty_violation();
   drErrHash[xc(K_05)] = Error_K_05;
   Error_K_06 = empty_violation();
   drErrHash[xc(K_06)] = Error_K_06;
   Error_K_07 = empty_violation();
   drErrHash[xc(K_07)] = Error_K_07;
   Error_K_08 = empty_violation();
   drErrHash[xc(K_08)] = Error_K_08;
   Error_K_09 = empty_violation();
   drErrHash[xc(K_09)] = Error_K_09;
   Error_K_10 = empty_violation();
   drErrHash[xc(K_10)] = Error_K_10;
   Error_K_11 = empty_violation();
   drErrHash[xc(K_11)] = Error_K_11;
   Error_K_12 = empty_violation();
   drErrHash[xc(K_12)] = Error_K_12;
   Error_K_13 = empty_violation();
   drErrHash[xc(K_13)] = Error_K_13;
   Error_K_14 = empty_violation();
   drErrHash[xc(K_14)] = Error_K_14;
   Error_K_15 = empty_violation();
   drErrHash[xc(K_15)] = Error_K_15;
   Error_K_16 = empty_violation();
   drErrHash[xc(K_16)] = Error_K_16;
   Error_K_21 = empty_violation();
   drErrHash[xc(K_21)] = Error_K_21;
   Error_K_22 = empty_violation();
   drErrHash[xc(K_22)] = Error_K_22;
   Error_K_23 = empty_violation();
   drErrHash[xc(K_23)] = Error_K_23;
   Error_K_24 = empty_violation();
   drErrHash[xc(K_24)] = Error_K_24;
   Error_K_25 = empty_violation();
   drErrHash[xc(K_25)] = Error_K_25;
   Error_K_41 = empty_violation();
   drErrHash[xc(K_41)] = Error_K_41;
   Error_K_42 = empty_violation();
   drErrHash[xc(K_42)] = Error_K_42;
   Error_K_43 = empty_violation();
   drErrHash[xc(K_43)] = Error_K_43;
   Error_K_44 = empty_violation();
   drErrHash[xc(K_44)] = Error_K_44;
   Error_K_46 = empty_violation();
   drErrHash[xc(K_46)] = Error_K_46;
   Error_K_81 = empty_violation();
   drErrHash[xc(K_81)] = Error_K_81;
   Error_K_82 = empty_violation();
   drErrHash[xc(K_82)] = Error_K_82;
   Error_LDIP_101 = empty_violation();
   drErrHash[xc(LDIP_101)] = Error_LDIP_101;
   Error_LDIW_01 = empty_violation();
   drErrHash[xc(LDIW_01)] = Error_LDIW_01;
   Error_LDIW_02 = empty_violation();
   drErrHash[xc(LDIW_02)] = Error_LDIW_02;
   Error_LDIW_120 = empty_violation();
   drErrHash[xc(LDIW_120)] = Error_LDIW_120;
   Error_LDIW_220 = empty_violation();
   drErrHash[xc(LDIW_220)] = Error_LDIW_220;
   Error_LDIW_500 = empty_violation();
   drErrHash[xc(LDIW_500)] = Error_LDIW_500;
   Error_LDIW_501 = empty_violation();
   drErrHash[xc(LDIW_501)] = Error_LDIW_501;
   Error_LDIW_502 = empty_violation();
   drErrHash[xc(LDIW_502)] = Error_LDIW_502;
   Error_LDIW_503 = empty_violation();
   drErrHash[xc(LDIW_503)] = Error_LDIW_503;
   Error_LDIW_504 = empty_violation();
   drErrHash[xc(LDIW_504)] = Error_LDIW_504;
   Error_LDIW_505 = empty_violation();
   drErrHash[xc(LDIW_505)] = Error_LDIW_505;
   Error_LDIW_506 = empty_violation();
   drErrHash[xc(LDIW_506)] = Error_LDIW_506;
   Error_LDI_01 = empty_violation();
   drErrHash[xc(LDI_01)] = Error_LDI_01;
   Error_LDI_02 = empty_violation();
   drErrHash[xc(LDI_02)] = Error_LDI_02;
   Error_LDI_120 = empty_violation();
   drErrHash[xc(LDI_120)] = Error_LDI_120;
   Error_LDI_220 = empty_violation();
   drErrHash[xc(LDI_220)] = Error_LDI_220;
   Error_LDI_500 = empty_violation();
   drErrHash[xc(LDI_500)] = Error_LDI_500;
   Error_LDI_501 = empty_violation();
   drErrHash[xc(LDI_501)] = Error_LDI_501;
   Error_LDI_502 = empty_violation();
   drErrHash[xc(LDI_502)] = Error_LDI_502;
   Error_LDI_503 = empty_violation();
   drErrHash[xc(LDI_503)] = Error_LDI_503;
   Error_LDI_504 = empty_violation();
   drErrHash[xc(LDI_504)] = Error_LDI_504;
   Error_LDI_505 = empty_violation();
   drErrHash[xc(LDI_505)] = Error_LDI_505;
   Error_LDI_506 = empty_violation();
   drErrHash[xc(LDI_506)] = Error_LDI_506;
   Error_LDP_101 = empty_violation();
   drErrHash[xc(LDP_101)] = Error_LDP_101;
   Error_LDP_102 = empty_violation();
   drErrHash[xc(LDP_102)] = Error_LDP_102;
   Error_LDT_101 = empty_violation();
   drErrHash[xc(LDT_101)] = Error_LDT_101;
   Error_LDW_100 = empty_violation();
   drErrHash[xc(LDW_100)] = Error_LDW_100;
   Error_LDW_101 = empty_violation();
   drErrHash[xc(LDW_101)] = Error_LDW_101;
   Error_LDW_102 = empty_violation();
   drErrHash[xc(LDW_102)] = Error_LDW_102;
   Error_LDW_103 = empty_violation();
   drErrHash[xc(LDW_103)] = Error_LDW_103;
   Error_LDW_104 = empty_violation();
   drErrHash[xc(LDW_104)] = Error_LDW_104;
   Error_LDW_105 = empty_violation();
   drErrHash[xc(LDW_105)] = Error_LDW_105;
   Error_LDW_106 = empty_violation();
   drErrHash[xc(LDW_106)] = Error_LDW_106;
   Error_LDW_107 = empty_violation();
   drErrHash[xc(LDW_107)] = Error_LDW_107;
   Error_LDW_108 = empty_violation();
   drErrHash[xc(LDW_108)] = Error_LDW_108;
   Error_LDW_109 = empty_violation();
   drErrHash[xc(LDW_109)] = Error_LDW_109;
   Error_LDW_110 = empty_violation();
   drErrHash[xc(LDW_110)] = Error_LDW_110;
   Error_LDW_111 = empty_violation();
   drErrHash[xc(LDW_111)] = Error_LDW_111;
   Error_LDW_112 = empty_violation();
   drErrHash[xc(LDW_112)] = Error_LDW_112;
   Error_LDW_120 = empty_violation();
   drErrHash[xc(LDW_120)] = Error_LDW_120;
   Error_LDW_121 = empty_violation();
   drErrHash[xc(LDW_121)] = Error_LDW_121;
   Error_LDW_122 = empty_violation();
   drErrHash[xc(LDW_122)] = Error_LDW_122;
   Error_LDW_123 = empty_violation();
   drErrHash[xc(LDW_123)] = Error_LDW_123;
   Error_LDW_131 = empty_violation();
   drErrHash[xc(LDW_131)] = Error_LDW_131;
   Error_LDW_132 = empty_violation();
   drErrHash[xc(LDW_132)] = Error_LDW_132;
   Error_LDW_133 = empty_violation();
   drErrHash[xc(LDW_133)] = Error_LDW_133;
   Error_LDW_134 = empty_violation();
   drErrHash[xc(LDW_134)] = Error_LDW_134;
   Error_LDW_135 = empty_violation();
   drErrHash[xc(LDW_135)] = Error_LDW_135;
   Error_LDW_136 = empty_violation();
   drErrHash[xc(LDW_136)] = Error_LDW_136;
   Error_LDW_200 = empty_violation();
   drErrHash[xc(LDW_200)] = Error_LDW_200;
   Error_LDW_201 = empty_violation();
   drErrHash[xc(LDW_201)] = Error_LDW_201;
   Error_LDW_202 = empty_violation();
   drErrHash[xc(LDW_202)] = Error_LDW_202;
   Error_LDW_203 = empty_violation();
   drErrHash[xc(LDW_203)] = Error_LDW_203;
   Error_LDW_204 = empty_violation();
   drErrHash[xc(LDW_204)] = Error_LDW_204;
   Error_LDW_205 = empty_violation();
   drErrHash[xc(LDW_205)] = Error_LDW_205;
   Error_LDW_206 = empty_violation();
   drErrHash[xc(LDW_206)] = Error_LDW_206;
   Error_LDW_207 = empty_violation();
   drErrHash[xc(LDW_207)] = Error_LDW_207;
   Error_LDW_208 = empty_violation();
   drErrHash[xc(LDW_208)] = Error_LDW_208;
   Error_LDW_209 = empty_violation();
   drErrHash[xc(LDW_209)] = Error_LDW_209;
   Error_LDW_210 = empty_violation();
   drErrHash[xc(LDW_210)] = Error_LDW_210;
   Error_LDW_211 = empty_violation();
   drErrHash[xc(LDW_211)] = Error_LDW_211;
   Error_LDW_212 = empty_violation();
   drErrHash[xc(LDW_212)] = Error_LDW_212;
   Error_LDW_220 = empty_violation();
   drErrHash[xc(LDW_220)] = Error_LDW_220;
   Error_LDW_231 = empty_violation();
   drErrHash[xc(LDW_231)] = Error_LDW_231;
   Error_LDW_232 = empty_violation();
   drErrHash[xc(LDW_232)] = Error_LDW_232;
   Error_LDW_233 = empty_violation();
   drErrHash[xc(LDW_233)] = Error_LDW_233;
   Error_LDW_234 = empty_violation();
   drErrHash[xc(LDW_234)] = Error_LDW_234;
   Error_LDW_235 = empty_violation();
   drErrHash[xc(LDW_235)] = Error_LDW_235;
   Error_LDW_236 = empty_violation();
   drErrHash[xc(LDW_236)] = Error_LDW_236;
   Error_LDW_500 = empty_violation();
   drErrHash[xc(LDW_500)] = Error_LDW_500;
   Error_LDW_501 = empty_violation();
   drErrHash[xc(LDW_501)] = Error_LDW_501;
   Error_LDW_502 = empty_violation();
   drErrHash[xc(LDW_502)] = Error_LDW_502;
   Error_LDW_503 = empty_violation();
   drErrHash[xc(LDW_503)] = Error_LDW_503;
   Error_LDW_504 = empty_violation();
   drErrHash[xc(LDW_504)] = Error_LDW_504;
   Error_LDW_505 = empty_violation();
   drErrHash[xc(LDW_505)] = Error_LDW_505;
   Error_LDW_506 = empty_violation();
   drErrHash[xc(LDW_506)] = Error_LDW_506;
   Error_LDW_507 = empty_violation();
   drErrHash[xc(LDW_507)] = Error_LDW_507;
   Error_LDW_508 = empty_violation();
   drErrHash[xc(LDW_508)] = Error_LDW_508;
   Error_LDW_509 = empty_violation();
   drErrHash[xc(LDW_509)] = Error_LDW_509;
   Error_LDW_510 = empty_violation();
   drErrHash[xc(LDW_510)] = Error_LDW_510;
   Error_LDW_511 = empty_violation();
   drErrHash[xc(LDW_511)] = Error_LDW_511;
   Error_LDW_512 = empty_violation();
   drErrHash[xc(LDW_512)] = Error_LDW_512;
   Error_LDW_520 = empty_violation();
   drErrHash[xc(LDW_520)] = Error_LDW_520;
   Error_LDW_600 = empty_violation();
   drErrHash[xc(LDW_600)] = Error_LDW_600;
   Error_LDW_601 = empty_violation();
   drErrHash[xc(LDW_601)] = Error_LDW_601;
   Error_LDW_602 = empty_violation();
   drErrHash[xc(LDW_602)] = Error_LDW_602;
   Error_LDW_603 = empty_violation();
   drErrHash[xc(LDW_603)] = Error_LDW_603;
   Error_LDW_604 = empty_violation();
   drErrHash[xc(LDW_604)] = Error_LDW_604;
   Error_LDW_605 = empty_violation();
   drErrHash[xc(LDW_605)] = Error_LDW_605;
   Error_LDW_606 = empty_violation();
   drErrHash[xc(LDW_606)] = Error_LDW_606;
   Error_LDW_607 = empty_violation();
   drErrHash[xc(LDW_607)] = Error_LDW_607;
   Error_LDW_609 = empty_violation();
   drErrHash[xc(LDW_609)] = Error_LDW_609;
   Error_LDW_611 = empty_violation();
   drErrHash[xc(LDW_611)] = Error_LDW_611;
   Error_LDW_612 = empty_violation();
   drErrHash[xc(LDW_612)] = Error_LDW_612;
   Error_LDW_620 = empty_violation();
   drErrHash[xc(LDW_620)] = Error_LDW_620;
   Error_LDW_81 = empty_violation();
   drErrHash[xc(LDW_81)] = Error_LDW_81;
   Error_LDW_82 = empty_violation();
   drErrHash[xc(LDW_82)] = Error_LDW_82;
   Error_LD_100 = empty_violation();
   drErrHash[xc(LD_100)] = Error_LD_100;
   Error_LD_101 = empty_violation();
   drErrHash[xc(LD_101)] = Error_LD_101;
   Error_LD_102 = empty_violation();
   drErrHash[xc(LD_102)] = Error_LD_102;
   Error_LD_103 = empty_violation();
   drErrHash[xc(LD_103)] = Error_LD_103;
   Error_LD_104 = empty_violation();
   drErrHash[xc(LD_104)] = Error_LD_104;
   Error_LD_105 = empty_violation();
   drErrHash[xc(LD_105)] = Error_LD_105;
   Error_LD_106 = empty_violation();
   drErrHash[xc(LD_106)] = Error_LD_106;
   Error_LD_107 = empty_violation();
   drErrHash[xc(LD_107)] = Error_LD_107;
   Error_LD_108 = empty_violation();
   drErrHash[xc(LD_108)] = Error_LD_108;
   Error_LD_109 = empty_violation();
   drErrHash[xc(LD_109)] = Error_LD_109;
   Error_LD_110 = empty_violation();
   drErrHash[xc(LD_110)] = Error_LD_110;
   Error_LD_111 = empty_violation();
   drErrHash[xc(LD_111)] = Error_LD_111;
   Error_LD_112 = empty_violation();
   drErrHash[xc(LD_112)] = Error_LD_112;
   Error_LD_120 = empty_violation();
   drErrHash[xc(LD_120)] = Error_LD_120;
   Error_LD_121 = empty_violation();
   drErrHash[xc(LD_121)] = Error_LD_121;
   Error_LD_122 = empty_violation();
   drErrHash[xc(LD_122)] = Error_LD_122;
   Error_LD_123 = empty_violation();
   drErrHash[xc(LD_123)] = Error_LD_123;
   Error_LD_131 = empty_violation();
   drErrHash[xc(LD_131)] = Error_LD_131;
   Error_LD_132 = empty_violation();
   drErrHash[xc(LD_132)] = Error_LD_132;
   Error_LD_133 = empty_violation();
   drErrHash[xc(LD_133)] = Error_LD_133;
   Error_LD_134 = empty_violation();
   drErrHash[xc(LD_134)] = Error_LD_134;
   Error_LD_135 = empty_violation();
   drErrHash[xc(LD_135)] = Error_LD_135;
   Error_LD_136 = empty_violation();
   drErrHash[xc(LD_136)] = Error_LD_136;
   Error_LD_200 = empty_violation();
   drErrHash[xc(LD_200)] = Error_LD_200;
   Error_LD_201 = empty_violation();
   drErrHash[xc(LD_201)] = Error_LD_201;
   Error_LD_202 = empty_violation();
   drErrHash[xc(LD_202)] = Error_LD_202;
   Error_LD_203 = empty_violation();
   drErrHash[xc(LD_203)] = Error_LD_203;
   Error_LD_204 = empty_violation();
   drErrHash[xc(LD_204)] = Error_LD_204;
   Error_LD_205 = empty_violation();
   drErrHash[xc(LD_205)] = Error_LD_205;
   Error_LD_206 = empty_violation();
   drErrHash[xc(LD_206)] = Error_LD_206;
   Error_LD_207 = empty_violation();
   drErrHash[xc(LD_207)] = Error_LD_207;
   Error_LD_208 = empty_violation();
   drErrHash[xc(LD_208)] = Error_LD_208;
   Error_LD_209 = empty_violation();
   drErrHash[xc(LD_209)] = Error_LD_209;
   Error_LD_210 = empty_violation();
   drErrHash[xc(LD_210)] = Error_LD_210;
   Error_LD_211 = empty_violation();
   drErrHash[xc(LD_211)] = Error_LD_211;
   Error_LD_212 = empty_violation();
   drErrHash[xc(LD_212)] = Error_LD_212;
   Error_LD_220 = empty_violation();
   drErrHash[xc(LD_220)] = Error_LD_220;
   Error_LD_231 = empty_violation();
   drErrHash[xc(LD_231)] = Error_LD_231;
   Error_LD_232 = empty_violation();
   drErrHash[xc(LD_232)] = Error_LD_232;
   Error_LD_233 = empty_violation();
   drErrHash[xc(LD_233)] = Error_LD_233;
   Error_LD_234 = empty_violation();
   drErrHash[xc(LD_234)] = Error_LD_234;
   Error_LD_235 = empty_violation();
   drErrHash[xc(LD_235)] = Error_LD_235;
   Error_LD_236 = empty_violation();
   drErrHash[xc(LD_236)] = Error_LD_236;
   Error_LD_331 = empty_violation();
   drErrHash[xc(LD_331)] = Error_LD_331;
   Error_LD_332 = empty_violation();
   drErrHash[xc(LD_332)] = Error_LD_332;
   Error_LD_334 = empty_violation();
   drErrHash[xc(LD_334)] = Error_LD_334;
   Error_LD_336 = empty_violation();
   drErrHash[xc(LD_336)] = Error_LD_336;
   Error_LD_434 = empty_violation();
   drErrHash[xc(LD_434)] = Error_LD_434;
   Error_LD_435 = empty_violation();
   drErrHash[xc(LD_435)] = Error_LD_435;
   Error_LD_436 = empty_violation();
   drErrHash[xc(LD_436)] = Error_LD_436;
   Error_LD_500 = empty_violation();
   drErrHash[xc(LD_500)] = Error_LD_500;
   Error_LD_501 = empty_violation();
   drErrHash[xc(LD_501)] = Error_LD_501;
   Error_LD_502 = empty_violation();
   drErrHash[xc(LD_502)] = Error_LD_502;
   Error_LD_503 = empty_violation();
   drErrHash[xc(LD_503)] = Error_LD_503;
   Error_LD_504 = empty_violation();
   drErrHash[xc(LD_504)] = Error_LD_504;
   Error_LD_505 = empty_violation();
   drErrHash[xc(LD_505)] = Error_LD_505;
   Error_LD_506 = empty_violation();
   drErrHash[xc(LD_506)] = Error_LD_506;
   Error_LD_507 = empty_violation();
   drErrHash[xc(LD_507)] = Error_LD_507;
   Error_LD_508 = empty_violation();
   drErrHash[xc(LD_508)] = Error_LD_508;
   Error_LD_509 = empty_violation();
   drErrHash[xc(LD_509)] = Error_LD_509;
   Error_LD_510 = empty_violation();
   drErrHash[xc(LD_510)] = Error_LD_510;
   Error_LD_511 = empty_violation();
   drErrHash[xc(LD_511)] = Error_LD_511;
   Error_LD_512 = empty_violation();
   drErrHash[xc(LD_512)] = Error_LD_512;
   Error_LD_520 = empty_violation();
   drErrHash[xc(LD_520)] = Error_LD_520;
   Error_LD_535 = empty_violation();
   drErrHash[xc(LD_535)] = Error_LD_535;
   Error_LD_600 = empty_violation();
   drErrHash[xc(LD_600)] = Error_LD_600;
   Error_LD_601 = empty_violation();
   drErrHash[xc(LD_601)] = Error_LD_601;
   Error_LD_602 = empty_violation();
   drErrHash[xc(LD_602)] = Error_LD_602;
   Error_LD_603 = empty_violation();
   drErrHash[xc(LD_603)] = Error_LD_603;
   Error_LD_604 = empty_violation();
   drErrHash[xc(LD_604)] = Error_LD_604;
   Error_LD_605 = empty_violation();
   drErrHash[xc(LD_605)] = Error_LD_605;
   Error_LD_606 = empty_violation();
   drErrHash[xc(LD_606)] = Error_LD_606;
   Error_LD_607 = empty_violation();
   drErrHash[xc(LD_607)] = Error_LD_607;
   Error_LD_609 = empty_violation();
   drErrHash[xc(LD_609)] = Error_LD_609;
   Error_LD_611 = empty_violation();
   drErrHash[xc(LD_611)] = Error_LD_611;
   Error_LD_612 = empty_violation();
   drErrHash[xc(LD_612)] = Error_LD_612;
   Error_LD_620 = empty_violation();
   drErrHash[xc(LD_620)] = Error_LD_620;
   Error_LD_634 = empty_violation();
   drErrHash[xc(LD_634)] = Error_LD_634;
   Error_LD_81 = empty_violation();
   drErrHash[xc(LD_81)] = Error_LD_81;
   Error_LD_82 = empty_violation();
   drErrHash[xc(LD_82)] = Error_LD_82;
   Error_LMI_01 = empty_violation();
   drErrHash[xc(LMI_01)] = Error_LMI_01;
   Error_LMI_02 = empty_violation();
   drErrHash[xc(LMI_02)] = Error_LMI_02;
   Error_LMI_03 = empty_violation();
   drErrHash[xc(LMI_03)] = Error_LMI_03;
   Error_LMI_04 = empty_violation();
   drErrHash[xc(LMI_04)] = Error_LMI_04;
   Error_LMI_05 = empty_violation();
   drErrHash[xc(LMI_05)] = Error_LMI_05;
   Error_LMI_06 = empty_violation();
   drErrHash[xc(LMI_06)] = Error_LMI_06;
   Error_LMI_11 = empty_violation();
   drErrHash[xc(LMI_11)] = Error_LMI_11;
   Error_LMI_12 = empty_violation();
   drErrHash[xc(LMI_12)] = Error_LMI_12;
   Error_LMI_13 = empty_violation();
   drErrHash[xc(LMI_13)] = Error_LMI_13;
   Error_LMI_40 = empty_violation();
   drErrHash[xc(LMI_40)] = Error_LMI_40;
   Error_LMI_41 = empty_violation();
   drErrHash[xc(LMI_41)] = Error_LMI_41;
   Error_M0L_01 = empty_violation();
   drErrHash[xc(M0L_01)] = Error_M0L_01;
   Error_M0L_02 = empty_violation();
   drErrHash[xc(M0L_02)] = Error_M0L_02;
   Error_M0L_03 = empty_violation();
   drErrHash[xc(M0L_03)] = Error_M0L_03;
   Error_M0L_04 = empty_violation();
   drErrHash[xc(M0L_04)] = Error_M0L_04;
   Error_M0M_01 = empty_violation();
   drErrHash[xc(M0M_01)] = Error_M0M_01;
   Error_M0M_02 = empty_violation();
   drErrHash[xc(M0M_02)] = Error_M0M_02;
   Error_M0M_03 = empty_violation();
   drErrHash[xc(M0M_03)] = Error_M0M_03;
   Error_M0M_04 = empty_violation();
   drErrHash[xc(M0M_04)] = Error_M0M_04;
   Error_M0M_05 = empty_violation();
   drErrHash[xc(M0M_05)] = Error_M0M_05;
   Error_M0S_01 = empty_violation();
   drErrHash[xc(M0S_01)] = Error_M0S_01;
   Error_M0S_02 = empty_violation();
   drErrHash[xc(M0S_02)] = Error_M0S_02;
   Error_M0_00 = empty_violation();
   drErrHash[xc(M0_00)] = Error_M0_00;
   Error_M0_126 = empty_violation();
   drErrHash[xc(M0_126)] = Error_M0_126;
   Error_M0_127 = empty_violation();
   drErrHash[xc(M0_127)] = Error_M0_127;
   Error_M0_128 = empty_violation();
   drErrHash[xc(M0_128)] = Error_M0_128;
   Error_M0_129 = empty_violation();
   drErrHash[xc(M0_129)] = Error_M0_129;
   Error_M0_130 = empty_violation();
   drErrHash[xc(M0_130)] = Error_M0_130;
   Error_M0_131 = empty_violation();
   drErrHash[xc(M0_131)] = Error_M0_131;
   Error_M0_132 = empty_violation();
   drErrHash[xc(M0_132)] = Error_M0_132;
   Error_M0_133 = empty_violation();
   drErrHash[xc(M0_133)] = Error_M0_133;
   Error_M0_134 = empty_violation();
   drErrHash[xc(M0_134)] = Error_M0_134;
   Error_M0_135 = empty_violation();
   drErrHash[xc(M0_135)] = Error_M0_135;
   Error_M0_136 = empty_violation();
   drErrHash[xc(M0_136)] = Error_M0_136;
   Error_M0_137 = empty_violation();
   drErrHash[xc(M0_137)] = Error_M0_137;
   Error_M0_138 = empty_violation();
   drErrHash[xc(M0_138)] = Error_M0_138;
   Error_M0_139 = empty_violation();
   drErrHash[xc(M0_139)] = Error_M0_139;
   Error_M0_140 = empty_violation();
   drErrHash[xc(M0_140)] = Error_M0_140;
   Error_M0_141 = empty_violation();
   drErrHash[xc(M0_141)] = Error_M0_141;
   Error_M0_142 = empty_violation();
   drErrHash[xc(M0_142)] = Error_M0_142;
   Error_M0_21 = empty_violation();
   drErrHash[xc(M0_21)] = Error_M0_21;
   Error_M0_23 = empty_violation();
   drErrHash[xc(M0_23)] = Error_M0_23;
   Error_M0_41 = empty_violation();
   drErrHash[xc(M0_41)] = Error_M0_41;
   Error_M0_42 = empty_violation();
   drErrHash[xc(M0_42)] = Error_M0_42;
   Error_M0_48 = empty_violation();
   drErrHash[xc(M0_48)] = Error_M0_48;
   Error_M0_60 = empty_violation();
   drErrHash[xc(M0_60)] = Error_M0_60;
   Error_M0_812 = empty_violation();
   drErrHash[xc(M0_812)] = Error_M0_812;
   Error_M0_813 = empty_violation();
   drErrHash[xc(M0_813)] = Error_M0_813;
   Error_M0_814 = empty_violation();
   drErrHash[xc(M0_814)] = Error_M0_814;
   Error_M0_82 = empty_violation();
   drErrHash[xc(M0_82)] = Error_M0_82;
   Error_M0_822 = empty_violation();
   drErrHash[xc(M0_822)] = Error_M0_822;
   Error_M0_823 = empty_violation();
   drErrHash[xc(M0_823)] = Error_M0_823;
   Error_M0_83 = empty_violation();
   drErrHash[xc(M0_83)] = Error_M0_83;
   Error_M0_832 = empty_violation();
   drErrHash[xc(M0_832)] = Error_M0_832;
   Error_M0_84 = empty_violation();
   drErrHash[xc(M0_84)] = Error_M0_84;
   Error_M0_841 = empty_violation();
   drErrHash[xc(M0_841)] = Error_M0_841;
   Error_M0_842 = empty_violation();
   drErrHash[xc(M0_842)] = Error_M0_842;
   Error_M0_85 = empty_violation();
   drErrHash[xc(M0_85)] = Error_M0_85;
   Error_M0_91 = empty_violation();
   drErrHash[xc(M0_91)] = Error_M0_91;
   Error_M0_92 = empty_violation();
   drErrHash[xc(M0_92)] = Error_M0_92;
   Error_M0_93 = empty_violation();
   drErrHash[xc(M0_93)] = Error_M0_93;
   Error_M0_94 = empty_violation();
   drErrHash[xc(M0_94)] = Error_M0_94;
   Error_M0_941 = empty_violation();
   drErrHash[xc(M0_941)] = Error_M0_941;
   Error_M0_942 = empty_violation();
   drErrHash[xc(M0_942)] = Error_M0_942;
   Error_M0_95 = empty_violation();
   drErrHash[xc(M0_95)] = Error_M0_95;
   Error_M0_96 = empty_violation();
   drErrHash[xc(M0_96)] = Error_M0_96;
   Error_M0_97 = empty_violation();
   drErrHash[xc(M0_97)] = Error_M0_97;
   Error_M0_98 = empty_violation();
   drErrHash[xc(M0_98)] = Error_M0_98;
   Error_M10_00 = empty_violation();
   drErrHash[xc(M10_00)] = Error_M10_00;
   Error_M10_01 = empty_violation();
   drErrHash[xc(M10_01)] = Error_M10_01;
   Error_M10_02 = empty_violation();
   drErrHash[xc(M10_02)] = Error_M10_02;
   Error_M10_03 = empty_violation();
   drErrHash[xc(M10_03)] = Error_M10_03;
   Error_M10_04 = empty_violation();
   drErrHash[xc(M10_04)] = Error_M10_04;
   Error_M10_05 = empty_violation();
   drErrHash[xc(M10_05)] = Error_M10_05;
   Error_M10_06 = empty_violation();
   drErrHash[xc(M10_06)] = Error_M10_06;
   Error_M10_07 = empty_violation();
   drErrHash[xc(M10_07)] = Error_M10_07;
   Error_M10_08 = empty_violation();
   drErrHash[xc(M10_08)] = Error_M10_08;
   Error_M10_09 = empty_violation();
   drErrHash[xc(M10_09)] = Error_M10_09;
   Error_M10_10 = empty_violation();
   drErrHash[xc(M10_10)] = Error_M10_10;
   Error_M10_121 = empty_violation();
   drErrHash[xc(M10_121)] = Error_M10_121;
   Error_M10_20 = empty_violation();
   drErrHash[xc(M10_20)] = Error_M10_20;
   Error_M10_21 = empty_violation();
   drErrHash[xc(M10_21)] = Error_M10_21;
   Error_M10_22 = empty_violation();
   drErrHash[xc(M10_22)] = Error_M10_22;
   Error_M10_23 = empty_violation();
   drErrHash[xc(M10_23)] = Error_M10_23;
   Error_M10_24 = empty_violation();
   drErrHash[xc(M10_24)] = Error_M10_24;
   Error_M10_35 = empty_violation();
   drErrHash[xc(M10_35)] = Error_M10_35;
   Error_M10_37 = empty_violation();
   drErrHash[xc(M10_37)] = Error_M10_37;
   Error_M10_38 = empty_violation();
   drErrHash[xc(M10_38)] = Error_M10_38;
   Error_M10_41 = empty_violation();
   drErrHash[xc(M10_41)] = Error_M10_41;
   Error_M10_42 = empty_violation();
   drErrHash[xc(M10_42)] = Error_M10_42;
   Error_M10_50 = empty_violation();
   drErrHash[xc(M10_50)] = Error_M10_50;
   Error_M10_51 = empty_violation();
   drErrHash[xc(M10_51)] = Error_M10_51;
   Error_M10_52 = empty_violation();
   drErrHash[xc(M10_52)] = Error_M10_52;
   Error_M10_60 = empty_violation();
   drErrHash[xc(M10_60)] = Error_M10_60;
   Error_M10_65 = empty_violation();
   drErrHash[xc(M10_65)] = Error_M10_65;
   Error_M10_71 = empty_violation();
   drErrHash[xc(M10_71)] = Error_M10_71;
   Error_M10_80 = empty_violation();
   drErrHash[xc(M10_80)] = Error_M10_80;
   Error_M10_81 = empty_violation();
   drErrHash[xc(M10_81)] = Error_M10_81;
   Error_M10_82 = empty_violation();
   drErrHash[xc(M10_82)] = Error_M10_82;
   Error_M10err_01 = empty_violation();
   drErrHash[xc(M10err_01)] = Error_M10err_01;
   Error_M10err_05 = empty_violation();
   drErrHash[xc(M10err_05)] = Error_M10err_05;
   Error_M10err_06 = empty_violation();
   drErrHash[xc(M10err_06)] = Error_M10err_06;
   Error_M10err_09 = empty_violation();
   drErrHash[xc(M10err_09)] = Error_M10err_09;
   Error_M10err_10 = empty_violation();
   drErrHash[xc(M10err_10)] = Error_M10err_10;
   Error_M10err_21 = empty_violation();
   drErrHash[xc(M10err_21)] = Error_M10err_21;
   Error_M11_00 = empty_violation();
   drErrHash[xc(M11_00)] = Error_M11_00;
   Error_M11_01 = empty_violation();
   drErrHash[xc(M11_01)] = Error_M11_01;
   Error_M11_02 = empty_violation();
   drErrHash[xc(M11_02)] = Error_M11_02;
   Error_M11_03 = empty_violation();
   drErrHash[xc(M11_03)] = Error_M11_03;
   Error_M11_04 = empty_violation();
   drErrHash[xc(M11_04)] = Error_M11_04;
   Error_M11_05 = empty_violation();
   drErrHash[xc(M11_05)] = Error_M11_05;
   Error_M11_06 = empty_violation();
   drErrHash[xc(M11_06)] = Error_M11_06;
   Error_M11_07 = empty_violation();
   drErrHash[xc(M11_07)] = Error_M11_07;
   Error_M11_08 = empty_violation();
   drErrHash[xc(M11_08)] = Error_M11_08;
   Error_M11_09 = empty_violation();
   drErrHash[xc(M11_09)] = Error_M11_09;
   Error_M11_10 = empty_violation();
   drErrHash[xc(M11_10)] = Error_M11_10;
   Error_M11_121 = empty_violation();
   drErrHash[xc(M11_121)] = Error_M11_121;
   Error_M11_20 = empty_violation();
   drErrHash[xc(M11_20)] = Error_M11_20;
   Error_M11_21 = empty_violation();
   drErrHash[xc(M11_21)] = Error_M11_21;
   Error_M11_22 = empty_violation();
   drErrHash[xc(M11_22)] = Error_M11_22;
   Error_M11_23 = empty_violation();
   drErrHash[xc(M11_23)] = Error_M11_23;
   Error_M11_24 = empty_violation();
   drErrHash[xc(M11_24)] = Error_M11_24;
   Error_M11_35 = empty_violation();
   drErrHash[xc(M11_35)] = Error_M11_35;
   Error_M11_37 = empty_violation();
   drErrHash[xc(M11_37)] = Error_M11_37;
   Error_M11_38 = empty_violation();
   drErrHash[xc(M11_38)] = Error_M11_38;
   Error_M11_41 = empty_violation();
   drErrHash[xc(M11_41)] = Error_M11_41;
   Error_M11_42 = empty_violation();
   drErrHash[xc(M11_42)] = Error_M11_42;
   Error_M11_43 = empty_violation();
   drErrHash[xc(M11_43)] = Error_M11_43;
   Error_M11_50 = empty_violation();
   drErrHash[xc(M11_50)] = Error_M11_50;
   Error_M11_51 = empty_violation();
   drErrHash[xc(M11_51)] = Error_M11_51;
   Error_M11_52 = empty_violation();
   drErrHash[xc(M11_52)] = Error_M11_52;
   Error_M11_60 = empty_violation();
   drErrHash[xc(M11_60)] = Error_M11_60;
   Error_M11_65 = empty_violation();
   drErrHash[xc(M11_65)] = Error_M11_65;
   Error_M11_71 = empty_violation();
   drErrHash[xc(M11_71)] = Error_M11_71;
   Error_M11_80 = empty_violation();
   drErrHash[xc(M11_80)] = Error_M11_80;
   Error_M11_81 = empty_violation();
   drErrHash[xc(M11_81)] = Error_M11_81;
   Error_M11_82 = empty_violation();
   drErrHash[xc(M11_82)] = Error_M11_82;
   Error_M12_01 = empty_violation();
   drErrHash[xc(M12_01)] = Error_M12_01;
   Error_M12_02 = empty_violation();
   drErrHash[xc(M12_02)] = Error_M12_02;
   Error_M12_21 = empty_violation();
   drErrHash[xc(M12_21)] = Error_M12_21;
   Error_M12_22 = empty_violation();
   drErrHash[xc(M12_22)] = Error_M12_22;
   Error_M12_23 = empty_violation();
   drErrHash[xc(M12_23)] = Error_M12_23;
   Error_M12_24 = empty_violation();
   drErrHash[xc(M12_24)] = Error_M12_24;
   Error_M12_41 = empty_violation();
   drErrHash[xc(M12_41)] = Error_M12_41;
   Error_M12_43 = empty_violation();
   drErrHash[xc(M12_43)] = Error_M12_43;
   Error_M12_51 = empty_violation();
   drErrHash[xc(M12_51)] = Error_M12_51;
   Error_M12_52 = empty_violation();
   drErrHash[xc(M12_52)] = Error_M12_52;
   Error_M1F_01 = empty_violation();
   drErrHash[xc(M1F_01)] = Error_M1F_01;
   Error_M1F_02 = empty_violation();
   drErrHash[xc(M1F_02)] = Error_M1F_02;
   Error_M1F_03 = empty_violation();
   drErrHash[xc(M1F_03)] = Error_M1F_03;
   Error_M1F_04 = empty_violation();
   drErrHash[xc(M1F_04)] = Error_M1F_04;
   Error_M1F_11 = empty_violation();
   drErrHash[xc(M1F_11)] = Error_M1F_11;
   Error_M1F_12 = empty_violation();
   drErrHash[xc(M1F_12)] = Error_M1F_12;
   Error_M1F_13 = empty_violation();
   drErrHash[xc(M1F_13)] = Error_M1F_13;
   Error_M1F_14 = empty_violation();
   drErrHash[xc(M1F_14)] = Error_M1F_14;
   Error_M1F_15 = empty_violation();
   drErrHash[xc(M1F_15)] = Error_M1F_15;
   Error_M1F_21 = empty_violation();
   drErrHash[xc(M1F_21)] = Error_M1F_21;
   Error_M1F_22 = empty_violation();
   drErrHash[xc(M1F_22)] = Error_M1F_22;
   Error_M1F_23 = empty_violation();
   drErrHash[xc(M1F_23)] = Error_M1F_23;
   Error_M1F_24 = empty_violation();
   drErrHash[xc(M1F_24)] = Error_M1F_24;
   Error_M1F_31 = empty_violation();
   drErrHash[xc(M1F_31)] = Error_M1F_31;
   Error_M1F_32 = empty_violation();
   drErrHash[xc(M1F_32)] = Error_M1F_32;
   Error_M1F_33 = empty_violation();
   drErrHash[xc(M1F_33)] = Error_M1F_33;
   Error_M1F_34 = empty_violation();
   drErrHash[xc(M1F_34)] = Error_M1F_34;
   Error_M1F_35 = empty_violation();
   drErrHash[xc(M1F_35)] = Error_M1F_35;
   Error_M1F_36 = empty_violation();
   drErrHash[xc(M1F_36)] = Error_M1F_36;
   Error_M1F_40 = empty_violation();
   drErrHash[xc(M1F_40)] = Error_M1F_40;
   Error_M1F_41 = empty_violation();
   drErrHash[xc(M1F_41)] = Error_M1F_41;
   Error_M1F_42 = empty_violation();
   drErrHash[xc(M1F_42)] = Error_M1F_42;
   Error_M1F_43 = empty_violation();
   drErrHash[xc(M1F_43)] = Error_M1F_43;
   Error_M1F_44 = empty_violation();
   drErrHash[xc(M1F_44)] = Error_M1F_44;
   Error_M1F_45 = empty_violation();
   drErrHash[xc(M1F_45)] = Error_M1F_45;
   Error_M1F_46 = empty_violation();
   drErrHash[xc(M1F_46)] = Error_M1F_46;
   Error_M1_00 = empty_violation();
   drErrHash[xc(M1_00)] = Error_M1_00;
   Error_M1_01 = empty_violation();
   drErrHash[xc(M1_01)] = Error_M1_01;
   Error_M1_100 = empty_violation();
   drErrHash[xc(M1_100)] = Error_M1_100;
   Error_M1_101 = empty_violation();
   drErrHash[xc(M1_101)] = Error_M1_101;
   Error_M1_21 = empty_violation();
   drErrHash[xc(M1_21)] = Error_M1_21;
   Error_M1_290 = empty_violation();
   drErrHash[xc(M1_290)] = Error_M1_290;
   Error_M1_291 = empty_violation();
   drErrHash[xc(M1_291)] = Error_M1_291;
   Error_M1_36 = empty_violation();
   drErrHash[xc(M1_36)] = Error_M1_36;
   Error_M1_41 = empty_violation();
   drErrHash[xc(M1_41)] = Error_M1_41;
   Error_M1_42 = empty_violation();
   drErrHash[xc(M1_42)] = Error_M1_42;
   Error_M1_43 = empty_violation();
   drErrHash[xc(M1_43)] = Error_M1_43;
   Error_M1_60 = empty_violation();
   drErrHash[xc(M1_60)] = Error_M1_60;
   Error_M1_69 = empty_violation();
   drErrHash[xc(M1_69)] = Error_M1_69;
   Error_M1_81 = empty_violation();
   drErrHash[xc(M1_81)] = Error_M1_81;
   Error_M1_84 = empty_violation();
   drErrHash[xc(M1_84)] = Error_M1_84;
   Error_M1_85 = empty_violation();
   drErrHash[xc(M1_85)] = Error_M1_85;
   Error_M1_86 = empty_violation();
   drErrHash[xc(M1_86)] = Error_M1_86;
   Error_M1_87 = empty_violation();
   drErrHash[xc(M1_87)] = Error_M1_87;
   Error_M2BB_21 = empty_violation();
   drErrHash[xc(M2BB_21)] = Error_M2BB_21;
   Error_M2BB_22 = empty_violation();
   drErrHash[xc(M2BB_22)] = Error_M2BB_22;
   Error_M2BB_31 = empty_violation();
   drErrHash[xc(M2BB_31)] = Error_M2BB_31;
   Error_M2BB_32 = empty_violation();
   drErrHash[xc(M2BB_32)] = Error_M2BB_32;
   Error_M2BB_33 = empty_violation();
   drErrHash[xc(M2BB_33)] = Error_M2BB_33;
   Error_M2BB_34 = empty_violation();
   drErrHash[xc(M2BB_34)] = Error_M2BB_34;
   Error_M2BB_35 = empty_violation();
   drErrHash[xc(M2BB_35)] = Error_M2BB_35;
   Error_M2BB_36 = empty_violation();
   drErrHash[xc(M2BB_36)] = Error_M2BB_36;
   Error_M2BB_37 = empty_violation();
   drErrHash[xc(M2BB_37)] = Error_M2BB_37;
   Error_M2BB_38 = empty_violation();
   drErrHash[xc(M2BB_38)] = Error_M2BB_38;
   Error_M2BC_21 = empty_violation();
   drErrHash[xc(M2BC_21)] = Error_M2BC_21;
   Error_M2CC_21 = empty_violation();
   drErrHash[xc(M2CC_21)] = Error_M2CC_21;
   Error_M2CC_27 = empty_violation();
   drErrHash[xc(M2CC_27)] = Error_M2CC_27;
   Error_M2CC_28 = empty_violation();
   drErrHash[xc(M2CC_28)] = Error_M2CC_28;
   Error_M2L_01 = empty_violation();
   drErrHash[xc(M2L_01)] = Error_M2L_01;
   Error_M2L_02 = empty_violation();
   drErrHash[xc(M2L_02)] = Error_M2L_02;
   Error_M2L_03 = empty_violation();
   drErrHash[xc(M2L_03)] = Error_M2L_03;
   Error_M2L_05 = empty_violation();
   drErrHash[xc(M2L_05)] = Error_M2L_05;
   Error_M2L_06 = empty_violation();
   drErrHash[xc(M2L_06)] = Error_M2L_06;
   Error_M2L_07 = empty_violation();
   drErrHash[xc(M2L_07)] = Error_M2L_07;
   Error_M2M_01 = empty_violation();
   drErrHash[xc(M2M_01)] = Error_M2M_01;
   Error_M2M_02 = empty_violation();
   drErrHash[xc(M2M_02)] = Error_M2M_02;
   Error_M2M_03 = empty_violation();
   drErrHash[xc(M2M_03)] = Error_M2M_03;
   Error_M2S_01 = empty_violation();
   drErrHash[xc(M2S_01)] = Error_M2S_01;
   Error_M2S_02 = empty_violation();
   drErrHash[xc(M2S_02)] = Error_M2S_02;
   Error_M2S_03 = empty_violation();
   drErrHash[xc(M2S_03)] = Error_M2S_03;
   Error_M2S_04 = empty_violation();
   drErrHash[xc(M2S_04)] = Error_M2S_04;
   Error_M2_00 = empty_violation();
   drErrHash[xc(M2_00)] = Error_M2_00;
   Error_M2_126 = empty_violation();
   drErrHash[xc(M2_126)] = Error_M2_126;
   Error_M2_127 = empty_violation();
   drErrHash[xc(M2_127)] = Error_M2_127;
   Error_M2_128 = empty_violation();
   drErrHash[xc(M2_128)] = Error_M2_128;
   Error_M2_129 = empty_violation();
   drErrHash[xc(M2_129)] = Error_M2_129;
   Error_M2_130 = empty_violation();
   drErrHash[xc(M2_130)] = Error_M2_130;
   Error_M2_131 = empty_violation();
   drErrHash[xc(M2_131)] = Error_M2_131;
   Error_M2_132 = empty_violation();
   drErrHash[xc(M2_132)] = Error_M2_132;
   Error_M2_133 = empty_violation();
   drErrHash[xc(M2_133)] = Error_M2_133;
   Error_M2_134 = empty_violation();
   drErrHash[xc(M2_134)] = Error_M2_134;
   Error_M2_135 = empty_violation();
   drErrHash[xc(M2_135)] = Error_M2_135;
   Error_M2_136 = empty_violation();
   drErrHash[xc(M2_136)] = Error_M2_136;
   Error_M2_137 = empty_violation();
   drErrHash[xc(M2_137)] = Error_M2_137;
   Error_M2_138 = empty_violation();
   drErrHash[xc(M2_138)] = Error_M2_138;
   Error_M2_139 = empty_violation();
   drErrHash[xc(M2_139)] = Error_M2_139;
   Error_M2_140 = empty_violation();
   drErrHash[xc(M2_140)] = Error_M2_140;
   Error_M2_141 = empty_violation();
   drErrHash[xc(M2_141)] = Error_M2_141;
   Error_M2_147 = empty_violation();
   drErrHash[xc(M2_147)] = Error_M2_147;
   Error_M2_148 = empty_violation();
   drErrHash[xc(M2_148)] = Error_M2_148;
   Error_M2_20 = empty_violation();
   drErrHash[xc(M2_20)] = Error_M2_20;
   Error_M2_21 = empty_violation();
   drErrHash[xc(M2_21)] = Error_M2_21;
   Error_M2_22 = empty_violation();
   drErrHash[xc(M2_22)] = Error_M2_22;
   Error_M2_23 = empty_violation();
   drErrHash[xc(M2_23)] = Error_M2_23;
   Error_M2_37 = empty_violation();
   drErrHash[xc(M2_37)] = Error_M2_37;
   Error_M2_38 = empty_violation();
   drErrHash[xc(M2_38)] = Error_M2_38;
   Error_M2_41 = empty_violation();
   drErrHash[xc(M2_41)] = Error_M2_41;
   Error_M2_42 = empty_violation();
   drErrHash[xc(M2_42)] = Error_M2_42;
   Error_M2_43 = empty_violation();
   drErrHash[xc(M2_43)] = Error_M2_43;
   Error_M2_44 = empty_violation();
   drErrHash[xc(M2_44)] = Error_M2_44;
   Error_M2_45 = empty_violation();
   drErrHash[xc(M2_45)] = Error_M2_45;
   Error_M2_46 = empty_violation();
   drErrHash[xc(M2_46)] = Error_M2_46;
   Error_M2_47 = empty_violation();
   drErrHash[xc(M2_47)] = Error_M2_47;
   Error_M2_48 = empty_violation();
   drErrHash[xc(M2_48)] = Error_M2_48;
   Error_M2_49 = empty_violation();
   drErrHash[xc(M2_49)] = Error_M2_49;
   Error_M2_60 = empty_violation();
   drErrHash[xc(M2_60)] = Error_M2_60;
   Error_M2_841 = empty_violation();
   drErrHash[xc(M2_841)] = Error_M2_841;
   Error_M2_842 = empty_violation();
   drErrHash[xc(M2_842)] = Error_M2_842;
   Error_M2_941 = empty_violation();
   drErrHash[xc(M2_941)] = Error_M2_941;
   Error_M2_942 = empty_violation();
   drErrHash[xc(M2_942)] = Error_M2_942;
   Error_M3BB_21 = empty_violation();
   drErrHash[xc(M3BB_21)] = Error_M3BB_21;
   Error_M3BB_22 = empty_violation();
   drErrHash[xc(M3BB_22)] = Error_M3BB_22;
   Error_M3BB_31 = empty_violation();
   drErrHash[xc(M3BB_31)] = Error_M3BB_31;
   Error_M3BB_32 = empty_violation();
   drErrHash[xc(M3BB_32)] = Error_M3BB_32;
   Error_M3BB_33 = empty_violation();
   drErrHash[xc(M3BB_33)] = Error_M3BB_33;
   Error_M3BB_34 = empty_violation();
   drErrHash[xc(M3BB_34)] = Error_M3BB_34;
   Error_M3BB_35 = empty_violation();
   drErrHash[xc(M3BB_35)] = Error_M3BB_35;
   Error_M3BB_36 = empty_violation();
   drErrHash[xc(M3BB_36)] = Error_M3BB_36;
   Error_M3BB_37 = empty_violation();
   drErrHash[xc(M3BB_37)] = Error_M3BB_37;
   Error_M3BB_38 = empty_violation();
   drErrHash[xc(M3BB_38)] = Error_M3BB_38;
   Error_M3BC_21 = empty_violation();
   drErrHash[xc(M3BC_21)] = Error_M3BC_21;
   Error_M3CC_21 = empty_violation();
   drErrHash[xc(M3CC_21)] = Error_M3CC_21;
   Error_M3CC_27 = empty_violation();
   drErrHash[xc(M3CC_27)] = Error_M3CC_27;
   Error_M3CC_28 = empty_violation();
   drErrHash[xc(M3CC_28)] = Error_M3CC_28;
   Error_M3L_01 = empty_violation();
   drErrHash[xc(M3L_01)] = Error_M3L_01;
   Error_M3L_02 = empty_violation();
   drErrHash[xc(M3L_02)] = Error_M3L_02;
   Error_M3L_03 = empty_violation();
   drErrHash[xc(M3L_03)] = Error_M3L_03;
   Error_M3L_04 = empty_violation();
   drErrHash[xc(M3L_04)] = Error_M3L_04;
   Error_M3L_05 = empty_violation();
   drErrHash[xc(M3L_05)] = Error_M3L_05;
   Error_M3L_06 = empty_violation();
   drErrHash[xc(M3L_06)] = Error_M3L_06;
   Error_M3L_07 = empty_violation();
   drErrHash[xc(M3L_07)] = Error_M3L_07;
   Error_M3L_08 = empty_violation();
   drErrHash[xc(M3L_08)] = Error_M3L_08;
   Error_M3L_09 = empty_violation();
   drErrHash[xc(M3L_09)] = Error_M3L_09;
   Error_M3M_01 = empty_violation();
   drErrHash[xc(M3M_01)] = Error_M3M_01;
   Error_M3M_02 = empty_violation();
   drErrHash[xc(M3M_02)] = Error_M3M_02;
   Error_M3M_03 = empty_violation();
   drErrHash[xc(M3M_03)] = Error_M3M_03;
   Error_M3M_04 = empty_violation();
   drErrHash[xc(M3M_04)] = Error_M3M_04;
   Error_M3M_05 = empty_violation();
   drErrHash[xc(M3M_05)] = Error_M3M_05;
   Error_M3M_06 = empty_violation();
   drErrHash[xc(M3M_06)] = Error_M3M_06;
   Error_M3S_01 = empty_violation();
   drErrHash[xc(M3S_01)] = Error_M3S_01;
   Error_M3S_02 = empty_violation();
   drErrHash[xc(M3S_02)] = Error_M3S_02;
   Error_M3S_03 = empty_violation();
   drErrHash[xc(M3S_03)] = Error_M3S_03;
   Error_M3S_04 = empty_violation();
   drErrHash[xc(M3S_04)] = Error_M3S_04;
   Error_M3_00 = empty_violation();
   drErrHash[xc(M3_00)] = Error_M3_00;
   Error_M3_126 = empty_violation();
   drErrHash[xc(M3_126)] = Error_M3_126;
   Error_M3_127 = empty_violation();
   drErrHash[xc(M3_127)] = Error_M3_127;
   Error_M3_128 = empty_violation();
   drErrHash[xc(M3_128)] = Error_M3_128;
   Error_M3_129 = empty_violation();
   drErrHash[xc(M3_129)] = Error_M3_129;
   Error_M3_130 = empty_violation();
   drErrHash[xc(M3_130)] = Error_M3_130;
   Error_M3_131 = empty_violation();
   drErrHash[xc(M3_131)] = Error_M3_131;
   Error_M3_132 = empty_violation();
   drErrHash[xc(M3_132)] = Error_M3_132;
   Error_M3_133 = empty_violation();
   drErrHash[xc(M3_133)] = Error_M3_133;
   Error_M3_134 = empty_violation();
   drErrHash[xc(M3_134)] = Error_M3_134;
   Error_M3_135 = empty_violation();
   drErrHash[xc(M3_135)] = Error_M3_135;
   Error_M3_136 = empty_violation();
   drErrHash[xc(M3_136)] = Error_M3_136;
   Error_M3_137 = empty_violation();
   drErrHash[xc(M3_137)] = Error_M3_137;
   Error_M3_138 = empty_violation();
   drErrHash[xc(M3_138)] = Error_M3_138;
   Error_M3_139 = empty_violation();
   drErrHash[xc(M3_139)] = Error_M3_139;
   Error_M3_140 = empty_violation();
   drErrHash[xc(M3_140)] = Error_M3_140;
   Error_M3_141 = empty_violation();
   drErrHash[xc(M3_141)] = Error_M3_141;
   Error_M3_142 = empty_violation();
   drErrHash[xc(M3_142)] = Error_M3_142;
   Error_M3_143 = empty_violation();
   drErrHash[xc(M3_143)] = Error_M3_143;
   Error_M3_147 = empty_violation();
   drErrHash[xc(M3_147)] = Error_M3_147;
   Error_M3_148 = empty_violation();
   drErrHash[xc(M3_148)] = Error_M3_148;
   Error_M3_20 = empty_violation();
   drErrHash[xc(M3_20)] = Error_M3_20;
   Error_M3_21 = empty_violation();
   drErrHash[xc(M3_21)] = Error_M3_21;
   Error_M3_22 = empty_violation();
   drErrHash[xc(M3_22)] = Error_M3_22;
   Error_M3_23 = empty_violation();
   drErrHash[xc(M3_23)] = Error_M3_23;
   Error_M3_37 = empty_violation();
   drErrHash[xc(M3_37)] = Error_M3_37;
   Error_M3_38 = empty_violation();
   drErrHash[xc(M3_38)] = Error_M3_38;
   Error_M3_41 = empty_violation();
   drErrHash[xc(M3_41)] = Error_M3_41;
   Error_M3_42 = empty_violation();
   drErrHash[xc(M3_42)] = Error_M3_42;
   Error_M3_43 = empty_violation();
   drErrHash[xc(M3_43)] = Error_M3_43;
   Error_M3_44 = empty_violation();
   drErrHash[xc(M3_44)] = Error_M3_44;
   Error_M3_45 = empty_violation();
   drErrHash[xc(M3_45)] = Error_M3_45;
   Error_M3_46 = empty_violation();
   drErrHash[xc(M3_46)] = Error_M3_46;
   Error_M3_47 = empty_violation();
   drErrHash[xc(M3_47)] = Error_M3_47;
   Error_M3_48 = empty_violation();
   drErrHash[xc(M3_48)] = Error_M3_48;
   Error_M3_49 = empty_violation();
   drErrHash[xc(M3_49)] = Error_M3_49;
   Error_M3_60 = empty_violation();
   drErrHash[xc(M3_60)] = Error_M3_60;
   Error_M3_841 = empty_violation();
   drErrHash[xc(M3_841)] = Error_M3_841;
   Error_M3_842 = empty_violation();
   drErrHash[xc(M3_842)] = Error_M3_842;
   Error_M3_941 = empty_violation();
   drErrHash[xc(M3_941)] = Error_M3_941;
   Error_M3_942 = empty_violation();
   drErrHash[xc(M3_942)] = Error_M3_942;
   Error_M4BB_21 = empty_violation();
   drErrHash[xc(M4BB_21)] = Error_M4BB_21;
   Error_M4BB_22 = empty_violation();
   drErrHash[xc(M4BB_22)] = Error_M4BB_22;
   Error_M4BB_31 = empty_violation();
   drErrHash[xc(M4BB_31)] = Error_M4BB_31;
   Error_M4BB_32 = empty_violation();
   drErrHash[xc(M4BB_32)] = Error_M4BB_32;
   Error_M4BB_33 = empty_violation();
   drErrHash[xc(M4BB_33)] = Error_M4BB_33;
   Error_M4BB_34 = empty_violation();
   drErrHash[xc(M4BB_34)] = Error_M4BB_34;
   Error_M4BB_35 = empty_violation();
   drErrHash[xc(M4BB_35)] = Error_M4BB_35;
   Error_M4BB_36 = empty_violation();
   drErrHash[xc(M4BB_36)] = Error_M4BB_36;
   Error_M4BB_37 = empty_violation();
   drErrHash[xc(M4BB_37)] = Error_M4BB_37;
   Error_M4BB_38 = empty_violation();
   drErrHash[xc(M4BB_38)] = Error_M4BB_38;
   Error_M4BC_21 = empty_violation();
   drErrHash[xc(M4BC_21)] = Error_M4BC_21;
   Error_M4CC_21 = empty_violation();
   drErrHash[xc(M4CC_21)] = Error_M4CC_21;
   Error_M4CC_27 = empty_violation();
   drErrHash[xc(M4CC_27)] = Error_M4CC_27;
   Error_M4CC_28 = empty_violation();
   drErrHash[xc(M4CC_28)] = Error_M4CC_28;
   Error_M4L_01 = empty_violation();
   drErrHash[xc(M4L_01)] = Error_M4L_01;
   Error_M4L_02 = empty_violation();
   drErrHash[xc(M4L_02)] = Error_M4L_02;
   Error_M4L_03 = empty_violation();
   drErrHash[xc(M4L_03)] = Error_M4L_03;
   Error_M4L_05 = empty_violation();
   drErrHash[xc(M4L_05)] = Error_M4L_05;
   Error_M4L_06 = empty_violation();
   drErrHash[xc(M4L_06)] = Error_M4L_06;
   Error_M4L_07 = empty_violation();
   drErrHash[xc(M4L_07)] = Error_M4L_07;
   Error_M4L_08 = empty_violation();
   drErrHash[xc(M4L_08)] = Error_M4L_08;
   Error_M4L_09 = empty_violation();
   drErrHash[xc(M4L_09)] = Error_M4L_09;
   Error_M4M_02 = empty_violation();
   drErrHash[xc(M4M_02)] = Error_M4M_02;
   Error_M4M_03 = empty_violation();
   drErrHash[xc(M4M_03)] = Error_M4M_03;
   Error_M4S_01 = empty_violation();
   drErrHash[xc(M4S_01)] = Error_M4S_01;
   Error_M4S_02 = empty_violation();
   drErrHash[xc(M4S_02)] = Error_M4S_02;
   Error_M4S_03 = empty_violation();
   drErrHash[xc(M4S_03)] = Error_M4S_03;
   Error_M4S_04 = empty_violation();
   drErrHash[xc(M4S_04)] = Error_M4S_04;
   Error_M4_00 = empty_violation();
   drErrHash[xc(M4_00)] = Error_M4_00;
   Error_M4_01 = empty_violation();
   drErrHash[xc(M4_01)] = Error_M4_01;
   Error_M4_02 = empty_violation();
   drErrHash[xc(M4_02)] = Error_M4_02;
   Error_M4_03 = empty_violation();
   drErrHash[xc(M4_03)] = Error_M4_03;
   Error_M4_04 = empty_violation();
   drErrHash[xc(M4_04)] = Error_M4_04;
   Error_M4_05 = empty_violation();
   drErrHash[xc(M4_05)] = Error_M4_05;
   Error_M4_06 = empty_violation();
   drErrHash[xc(M4_06)] = Error_M4_06;
   Error_M4_07 = empty_violation();
   drErrHash[xc(M4_07)] = Error_M4_07;
   Error_M4_08 = empty_violation();
   drErrHash[xc(M4_08)] = Error_M4_08;
   Error_M4_09 = empty_violation();
   drErrHash[xc(M4_09)] = Error_M4_09;
   Error_M4_10 = empty_violation();
   drErrHash[xc(M4_10)] = Error_M4_10;
   Error_M4_101 = empty_violation();
   drErrHash[xc(M4_101)] = Error_M4_101;
   Error_M4_102 = empty_violation();
   drErrHash[xc(M4_102)] = Error_M4_102;
   Error_M4_103 = empty_violation();
   drErrHash[xc(M4_103)] = Error_M4_103;
   Error_M4_11 = empty_violation();
   drErrHash[xc(M4_11)] = Error_M4_11;
   Error_M4_123 = empty_violation();
   drErrHash[xc(M4_123)] = Error_M4_123;
   Error_M4_124 = empty_violation();
   drErrHash[xc(M4_124)] = Error_M4_124;
   Error_M4_126 = empty_violation();
   drErrHash[xc(M4_126)] = Error_M4_126;
   Error_M4_127 = empty_violation();
   drErrHash[xc(M4_127)] = Error_M4_127;
   Error_M4_128 = empty_violation();
   drErrHash[xc(M4_128)] = Error_M4_128;
   Error_M4_129 = empty_violation();
   drErrHash[xc(M4_129)] = Error_M4_129;
   Error_M4_130 = empty_violation();
   drErrHash[xc(M4_130)] = Error_M4_130;
   Error_M4_131 = empty_violation();
   drErrHash[xc(M4_131)] = Error_M4_131;
   Error_M4_132 = empty_violation();
   drErrHash[xc(M4_132)] = Error_M4_132;
   Error_M4_133 = empty_violation();
   drErrHash[xc(M4_133)] = Error_M4_133;
   Error_M4_134 = empty_violation();
   drErrHash[xc(M4_134)] = Error_M4_134;
   Error_M4_135 = empty_violation();
   drErrHash[xc(M4_135)] = Error_M4_135;
   Error_M4_136 = empty_violation();
   drErrHash[xc(M4_136)] = Error_M4_136;
   Error_M4_137 = empty_violation();
   drErrHash[xc(M4_137)] = Error_M4_137;
   Error_M4_138 = empty_violation();
   drErrHash[xc(M4_138)] = Error_M4_138;
   Error_M4_139 = empty_violation();
   drErrHash[xc(M4_139)] = Error_M4_139;
   Error_M4_140 = empty_violation();
   drErrHash[xc(M4_140)] = Error_M4_140;
   Error_M4_141 = empty_violation();
   drErrHash[xc(M4_141)] = Error_M4_141;
   Error_M4_142 = empty_violation();
   drErrHash[xc(M4_142)] = Error_M4_142;
   Error_M4_147 = empty_violation();
   drErrHash[xc(M4_147)] = Error_M4_147;
   Error_M4_148 = empty_violation();
   drErrHash[xc(M4_148)] = Error_M4_148;
   Error_M4_20 = empty_violation();
   drErrHash[xc(M4_20)] = Error_M4_20;
   Error_M4_21 = empty_violation();
   drErrHash[xc(M4_21)] = Error_M4_21;
   Error_M4_22 = empty_violation();
   drErrHash[xc(M4_22)] = Error_M4_22;
   Error_M4_23 = empty_violation();
   drErrHash[xc(M4_23)] = Error_M4_23;
   Error_M4_24 = empty_violation();
   drErrHash[xc(M4_24)] = Error_M4_24;
   Error_M4_249 = empty_violation();
   drErrHash[xc(M4_249)] = Error_M4_249;
   Error_M4_25 = empty_violation();
   drErrHash[xc(M4_25)] = Error_M4_25;
   Error_M4_250 = empty_violation();
   drErrHash[xc(M4_250)] = Error_M4_250;
   Error_M4_251 = empty_violation();
   drErrHash[xc(M4_251)] = Error_M4_251;
   Error_M4_252 = empty_violation();
   drErrHash[xc(M4_252)] = Error_M4_252;
   Error_M4_253 = empty_violation();
   drErrHash[xc(M4_253)] = Error_M4_253;
   Error_M4_26 = empty_violation();
   drErrHash[xc(M4_26)] = Error_M4_26;
   Error_M4_260 = empty_violation();
   drErrHash[xc(M4_260)] = Error_M4_260;
   Error_M4_261 = empty_violation();
   drErrHash[xc(M4_261)] = Error_M4_261;
   Error_M4_262 = empty_violation();
   drErrHash[xc(M4_262)] = Error_M4_262;
   Error_M4_27 = empty_violation();
   drErrHash[xc(M4_27)] = Error_M4_27;
   Error_M4_28 = empty_violation();
   drErrHash[xc(M4_28)] = Error_M4_28;
   Error_M4_31 = empty_violation();
   drErrHash[xc(M4_31)] = Error_M4_31;
   Error_M4_32 = empty_violation();
   drErrHash[xc(M4_32)] = Error_M4_32;
   Error_M4_33 = empty_violation();
   drErrHash[xc(M4_33)] = Error_M4_33;
   Error_M4_37 = empty_violation();
   drErrHash[xc(M4_37)] = Error_M4_37;
   Error_M4_38 = empty_violation();
   drErrHash[xc(M4_38)] = Error_M4_38;
   Error_M4_40 = empty_violation();
   drErrHash[xc(M4_40)] = Error_M4_40;
   Error_M4_41 = empty_violation();
   drErrHash[xc(M4_41)] = Error_M4_41;
   Error_M4_42 = empty_violation();
   drErrHash[xc(M4_42)] = Error_M4_42;
   Error_M4_43 = empty_violation();
   drErrHash[xc(M4_43)] = Error_M4_43;
   Error_M4_44 = empty_violation();
   drErrHash[xc(M4_44)] = Error_M4_44;
   Error_M4_45 = empty_violation();
   drErrHash[xc(M4_45)] = Error_M4_45;
   Error_M4_46 = empty_violation();
   drErrHash[xc(M4_46)] = Error_M4_46;
   Error_M4_47 = empty_violation();
   drErrHash[xc(M4_47)] = Error_M4_47;
   Error_M4_48 = empty_violation();
   drErrHash[xc(M4_48)] = Error_M4_48;
   Error_M4_49 = empty_violation();
   drErrHash[xc(M4_49)] = Error_M4_49;
   Error_M4_51 = empty_violation();
   drErrHash[xc(M4_51)] = Error_M4_51;
   Error_M4_52 = empty_violation();
   drErrHash[xc(M4_52)] = Error_M4_52;
   Error_M4_53 = empty_violation();
   drErrHash[xc(M4_53)] = Error_M4_53;
   Error_M4_60 = empty_violation();
   drErrHash[xc(M4_60)] = Error_M4_60;
   Error_M4_62 = empty_violation();
   drErrHash[xc(M4_62)] = Error_M4_62;
   Error_M4_63 = empty_violation();
   drErrHash[xc(M4_63)] = Error_M4_63;
   Error_M4_65 = empty_violation();
   drErrHash[xc(M4_65)] = Error_M4_65;
   Error_M4_70 = empty_violation();
   drErrHash[xc(M4_70)] = Error_M4_70;
   Error_M4_71 = empty_violation();
   drErrHash[xc(M4_71)] = Error_M4_71;
   Error_M4_72 = empty_violation();
   drErrHash[xc(M4_72)] = Error_M4_72;
   Error_M4_73 = empty_violation();
   drErrHash[xc(M4_73)] = Error_M4_73;
   Error_M4_80 = empty_violation();
   drErrHash[xc(M4_80)] = Error_M4_80;
   Error_M4_81 = empty_violation();
   drErrHash[xc(M4_81)] = Error_M4_81;
   Error_M4_82 = empty_violation();
   drErrHash[xc(M4_82)] = Error_M4_82;
   Error_M4_83 = empty_violation();
   drErrHash[xc(M4_83)] = Error_M4_83;
   Error_M4_84 = empty_violation();
   drErrHash[xc(M4_84)] = Error_M4_84;
   Error_M4_941 = empty_violation();
   drErrHash[xc(M4_941)] = Error_M4_941;
   Error_M4_942 = empty_violation();
   drErrHash[xc(M4_942)] = Error_M4_942;
   Error_M5BB_21 = empty_violation();
   drErrHash[xc(M5BB_21)] = Error_M5BB_21;
   Error_M5BB_22 = empty_violation();
   drErrHash[xc(M5BB_22)] = Error_M5BB_22;
   Error_M5BB_31 = empty_violation();
   drErrHash[xc(M5BB_31)] = Error_M5BB_31;
   Error_M5BB_32 = empty_violation();
   drErrHash[xc(M5BB_32)] = Error_M5BB_32;
   Error_M5BB_33 = empty_violation();
   drErrHash[xc(M5BB_33)] = Error_M5BB_33;
   Error_M5BB_34 = empty_violation();
   drErrHash[xc(M5BB_34)] = Error_M5BB_34;
   Error_M5BB_35 = empty_violation();
   drErrHash[xc(M5BB_35)] = Error_M5BB_35;
   Error_M5BB_36 = empty_violation();
   drErrHash[xc(M5BB_36)] = Error_M5BB_36;
   Error_M5BB_37 = empty_violation();
   drErrHash[xc(M5BB_37)] = Error_M5BB_37;
   Error_M5BB_38 = empty_violation();
   drErrHash[xc(M5BB_38)] = Error_M5BB_38;
   Error_M5BC_21 = empty_violation();
   drErrHash[xc(M5BC_21)] = Error_M5BC_21;
   Error_M5CC_21 = empty_violation();
   drErrHash[xc(M5CC_21)] = Error_M5CC_21;
   Error_M5CC_27 = empty_violation();
   drErrHash[xc(M5CC_27)] = Error_M5CC_27;
   Error_M5CC_28 = empty_violation();
   drErrHash[xc(M5CC_28)] = Error_M5CC_28;
   Error_M5L_01 = empty_violation();
   drErrHash[xc(M5L_01)] = Error_M5L_01;
   Error_M5L_02 = empty_violation();
   drErrHash[xc(M5L_02)] = Error_M5L_02;
   Error_M5L_03 = empty_violation();
   drErrHash[xc(M5L_03)] = Error_M5L_03;
   Error_M5L_05 = empty_violation();
   drErrHash[xc(M5L_05)] = Error_M5L_05;
   Error_M5L_06 = empty_violation();
   drErrHash[xc(M5L_06)] = Error_M5L_06;
   Error_M5L_07 = empty_violation();
   drErrHash[xc(M5L_07)] = Error_M5L_07;
   Error_M5L_09 = empty_violation();
   drErrHash[xc(M5L_09)] = Error_M5L_09;
   Error_M5M_02 = empty_violation();
   drErrHash[xc(M5M_02)] = Error_M5M_02;
   Error_M5M_03 = empty_violation();
   drErrHash[xc(M5M_03)] = Error_M5M_03;
   Error_M5S_01 = empty_violation();
   drErrHash[xc(M5S_01)] = Error_M5S_01;
   Error_M5S_02 = empty_violation();
   drErrHash[xc(M5S_02)] = Error_M5S_02;
   Error_M5S_03 = empty_violation();
   drErrHash[xc(M5S_03)] = Error_M5S_03;
   Error_M5S_04 = empty_violation();
   drErrHash[xc(M5S_04)] = Error_M5S_04;
   Error_M5_00 = empty_violation();
   drErrHash[xc(M5_00)] = Error_M5_00;
   Error_M5_01 = empty_violation();
   drErrHash[xc(M5_01)] = Error_M5_01;
   Error_M5_02 = empty_violation();
   drErrHash[xc(M5_02)] = Error_M5_02;
   Error_M5_03 = empty_violation();
   drErrHash[xc(M5_03)] = Error_M5_03;
   Error_M5_04 = empty_violation();
   drErrHash[xc(M5_04)] = Error_M5_04;
   Error_M5_05 = empty_violation();
   drErrHash[xc(M5_05)] = Error_M5_05;
   Error_M5_06 = empty_violation();
   drErrHash[xc(M5_06)] = Error_M5_06;
   Error_M5_07 = empty_violation();
   drErrHash[xc(M5_07)] = Error_M5_07;
   Error_M5_08 = empty_violation();
   drErrHash[xc(M5_08)] = Error_M5_08;
   Error_M5_09 = empty_violation();
   drErrHash[xc(M5_09)] = Error_M5_09;
   Error_M5_10 = empty_violation();
   drErrHash[xc(M5_10)] = Error_M5_10;
   Error_M5_101 = empty_violation();
   drErrHash[xc(M5_101)] = Error_M5_101;
   Error_M5_102 = empty_violation();
   drErrHash[xc(M5_102)] = Error_M5_102;
   Error_M5_103 = empty_violation();
   drErrHash[xc(M5_103)] = Error_M5_103;
   Error_M5_11 = empty_violation();
   drErrHash[xc(M5_11)] = Error_M5_11;
   Error_M5_12 = empty_violation();
   drErrHash[xc(M5_12)] = Error_M5_12;
   Error_M5_123 = empty_violation();
   drErrHash[xc(M5_123)] = Error_M5_123;
   Error_M5_124 = empty_violation();
   drErrHash[xc(M5_124)] = Error_M5_124;
   Error_M5_126 = empty_violation();
   drErrHash[xc(M5_126)] = Error_M5_126;
   Error_M5_127 = empty_violation();
   drErrHash[xc(M5_127)] = Error_M5_127;
   Error_M5_128 = empty_violation();
   drErrHash[xc(M5_128)] = Error_M5_128;
   Error_M5_129 = empty_violation();
   drErrHash[xc(M5_129)] = Error_M5_129;
   Error_M5_13 = empty_violation();
   drErrHash[xc(M5_13)] = Error_M5_13;
   Error_M5_130 = empty_violation();
   drErrHash[xc(M5_130)] = Error_M5_130;
   Error_M5_131 = empty_violation();
   drErrHash[xc(M5_131)] = Error_M5_131;
   Error_M5_132 = empty_violation();
   drErrHash[xc(M5_132)] = Error_M5_132;
   Error_M5_133 = empty_violation();
   drErrHash[xc(M5_133)] = Error_M5_133;
   Error_M5_134 = empty_violation();
   drErrHash[xc(M5_134)] = Error_M5_134;
   Error_M5_135 = empty_violation();
   drErrHash[xc(M5_135)] = Error_M5_135;
   Error_M5_136 = empty_violation();
   drErrHash[xc(M5_136)] = Error_M5_136;
   Error_M5_137 = empty_violation();
   drErrHash[xc(M5_137)] = Error_M5_137;
   Error_M5_138 = empty_violation();
   drErrHash[xc(M5_138)] = Error_M5_138;
   Error_M5_139 = empty_violation();
   drErrHash[xc(M5_139)] = Error_M5_139;
   Error_M5_14 = empty_violation();
   drErrHash[xc(M5_14)] = Error_M5_14;
   Error_M5_140 = empty_violation();
   drErrHash[xc(M5_140)] = Error_M5_140;
   Error_M5_141 = empty_violation();
   drErrHash[xc(M5_141)] = Error_M5_141;
   Error_M5_147 = empty_violation();
   drErrHash[xc(M5_147)] = Error_M5_147;
   Error_M5_148 = empty_violation();
   drErrHash[xc(M5_148)] = Error_M5_148;
   Error_M5_149 = empty_violation();
   drErrHash[xc(M5_149)] = Error_M5_149;
   Error_M5_15 = empty_violation();
   drErrHash[xc(M5_15)] = Error_M5_15;
   Error_M5_150 = empty_violation();
   drErrHash[xc(M5_150)] = Error_M5_150;
   Error_M5_151 = empty_violation();
   drErrHash[xc(M5_151)] = Error_M5_151;
   Error_M5_152 = empty_violation();
   drErrHash[xc(M5_152)] = Error_M5_152;
   Error_M5_153 = empty_violation();
   drErrHash[xc(M5_153)] = Error_M5_153;
   Error_M5_16 = empty_violation();
   drErrHash[xc(M5_16)] = Error_M5_16;
   Error_M5_160 = empty_violation();
   drErrHash[xc(M5_160)] = Error_M5_160;
   Error_M5_161 = empty_violation();
   drErrHash[xc(M5_161)] = Error_M5_161;
   Error_M5_162 = empty_violation();
   drErrHash[xc(M5_162)] = Error_M5_162;
   Error_M5_20 = empty_violation();
   drErrHash[xc(M5_20)] = Error_M5_20;
   Error_M5_21 = empty_violation();
   drErrHash[xc(M5_21)] = Error_M5_21;
   Error_M5_22 = empty_violation();
   drErrHash[xc(M5_22)] = Error_M5_22;
   Error_M5_23 = empty_violation();
   drErrHash[xc(M5_23)] = Error_M5_23;
   Error_M5_24 = empty_violation();
   drErrHash[xc(M5_24)] = Error_M5_24;
   Error_M5_249 = empty_violation();
   drErrHash[xc(M5_249)] = Error_M5_249;
   Error_M5_25 = empty_violation();
   drErrHash[xc(M5_25)] = Error_M5_25;
   Error_M5_250 = empty_violation();
   drErrHash[xc(M5_250)] = Error_M5_250;
   Error_M5_251 = empty_violation();
   drErrHash[xc(M5_251)] = Error_M5_251;
   Error_M5_252 = empty_violation();
   drErrHash[xc(M5_252)] = Error_M5_252;
   Error_M5_253 = empty_violation();
   drErrHash[xc(M5_253)] = Error_M5_253;
   Error_M5_26 = empty_violation();
   drErrHash[xc(M5_26)] = Error_M5_26;
   Error_M5_260 = empty_violation();
   drErrHash[xc(M5_260)] = Error_M5_260;
   Error_M5_261 = empty_violation();
   drErrHash[xc(M5_261)] = Error_M5_261;
   Error_M5_262 = empty_violation();
   drErrHash[xc(M5_262)] = Error_M5_262;
   Error_M5_27 = empty_violation();
   drErrHash[xc(M5_27)] = Error_M5_27;
   Error_M5_28 = empty_violation();
   drErrHash[xc(M5_28)] = Error_M5_28;
   Error_M5_31 = empty_violation();
   drErrHash[xc(M5_31)] = Error_M5_31;
   Error_M5_32 = empty_violation();
   drErrHash[xc(M5_32)] = Error_M5_32;
   Error_M5_33 = empty_violation();
   drErrHash[xc(M5_33)] = Error_M5_33;
   Error_M5_34 = empty_violation();
   drErrHash[xc(M5_34)] = Error_M5_34;
   Error_M5_35 = empty_violation();
   drErrHash[xc(M5_35)] = Error_M5_35;
   Error_M5_37 = empty_violation();
   drErrHash[xc(M5_37)] = Error_M5_37;
   Error_M5_38 = empty_violation();
   drErrHash[xc(M5_38)] = Error_M5_38;
   Error_M5_40 = empty_violation();
   drErrHash[xc(M5_40)] = Error_M5_40;
   Error_M5_41 = empty_violation();
   drErrHash[xc(M5_41)] = Error_M5_41;
   Error_M5_42 = empty_violation();
   drErrHash[xc(M5_42)] = Error_M5_42;
   Error_M5_43 = empty_violation();
   drErrHash[xc(M5_43)] = Error_M5_43;
   Error_M5_44 = empty_violation();
   drErrHash[xc(M5_44)] = Error_M5_44;
   Error_M5_45 = empty_violation();
   drErrHash[xc(M5_45)] = Error_M5_45;
   Error_M5_46 = empty_violation();
   drErrHash[xc(M5_46)] = Error_M5_46;
   Error_M5_47 = empty_violation();
   drErrHash[xc(M5_47)] = Error_M5_47;
   Error_M5_48 = empty_violation();
   drErrHash[xc(M5_48)] = Error_M5_48;
   Error_M5_49 = empty_violation();
   drErrHash[xc(M5_49)] = Error_M5_49;
   Error_M5_51 = empty_violation();
   drErrHash[xc(M5_51)] = Error_M5_51;
   Error_M5_52 = empty_violation();
   drErrHash[xc(M5_52)] = Error_M5_52;
   Error_M5_53 = empty_violation();
   drErrHash[xc(M5_53)] = Error_M5_53;
   Error_M5_60 = empty_violation();
   drErrHash[xc(M5_60)] = Error_M5_60;
   Error_M5_62 = empty_violation();
   drErrHash[xc(M5_62)] = Error_M5_62;
   Error_M5_63 = empty_violation();
   drErrHash[xc(M5_63)] = Error_M5_63;
   Error_M5_65 = empty_violation();
   drErrHash[xc(M5_65)] = Error_M5_65;
   Error_M5_70 = empty_violation();
   drErrHash[xc(M5_70)] = Error_M5_70;
   Error_M5_71 = empty_violation();
   drErrHash[xc(M5_71)] = Error_M5_71;
   Error_M5_72 = empty_violation();
   drErrHash[xc(M5_72)] = Error_M5_72;
   Error_M5_73 = empty_violation();
   drErrHash[xc(M5_73)] = Error_M5_73;
   Error_M5_74 = empty_violation();
   drErrHash[xc(M5_74)] = Error_M5_74;
   Error_M5_80 = empty_violation();
   drErrHash[xc(M5_80)] = Error_M5_80;
   Error_M5_81 = empty_violation();
   drErrHash[xc(M5_81)] = Error_M5_81;
   Error_M5_82 = empty_violation();
   drErrHash[xc(M5_82)] = Error_M5_82;
   Error_M5_83 = empty_violation();
   drErrHash[xc(M5_83)] = Error_M5_83;
   Error_M5_84 = empty_violation();
   drErrHash[xc(M5_84)] = Error_M5_84;
   Error_M5_941 = empty_violation();
   drErrHash[xc(M5_941)] = Error_M5_941;
   Error_M5_942 = empty_violation();
   drErrHash[xc(M5_942)] = Error_M5_942;
   Error_M5err_00 = empty_violation();
   drErrHash[xc(M5err_00)] = Error_M5err_00;
   Error_M6_00 = empty_violation();
   drErrHash[xc(M6_00)] = Error_M6_00;
   Error_M6_01 = empty_violation();
   drErrHash[xc(M6_01)] = Error_M6_01;
   Error_M6_02 = empty_violation();
   drErrHash[xc(M6_02)] = Error_M6_02;
   Error_M6_03 = empty_violation();
   drErrHash[xc(M6_03)] = Error_M6_03;
   Error_M6_04 = empty_violation();
   drErrHash[xc(M6_04)] = Error_M6_04;
   Error_M6_05 = empty_violation();
   drErrHash[xc(M6_05)] = Error_M6_05;
   Error_M6_06 = empty_violation();
   drErrHash[xc(M6_06)] = Error_M6_06;
   Error_M6_07 = empty_violation();
   drErrHash[xc(M6_07)] = Error_M6_07;
   Error_M6_08 = empty_violation();
   drErrHash[xc(M6_08)] = Error_M6_08;
   Error_M6_09 = empty_violation();
   drErrHash[xc(M6_09)] = Error_M6_09;
   Error_M6_10 = empty_violation();
   drErrHash[xc(M6_10)] = Error_M6_10;
   Error_M6_101 = empty_violation();
   drErrHash[xc(M6_101)] = Error_M6_101;
   Error_M6_102 = empty_violation();
   drErrHash[xc(M6_102)] = Error_M6_102;
   Error_M6_103 = empty_violation();
   drErrHash[xc(M6_103)] = Error_M6_103;
   Error_M6_11 = empty_violation();
   drErrHash[xc(M6_11)] = Error_M6_11;
   Error_M6_12 = empty_violation();
   drErrHash[xc(M6_12)] = Error_M6_12;
   Error_M6_123 = empty_violation();
   drErrHash[xc(M6_123)] = Error_M6_123;
   Error_M6_124 = empty_violation();
   drErrHash[xc(M6_124)] = Error_M6_124;
   Error_M6_13 = empty_violation();
   drErrHash[xc(M6_13)] = Error_M6_13;
   Error_M6_132 = empty_violation();
   drErrHash[xc(M6_132)] = Error_M6_132;
   Error_M6_14 = empty_violation();
   drErrHash[xc(M6_14)] = Error_M6_14;
   Error_M6_149 = empty_violation();
   drErrHash[xc(M6_149)] = Error_M6_149;
   Error_M6_15 = empty_violation();
   drErrHash[xc(M6_15)] = Error_M6_15;
   Error_M6_150 = empty_violation();
   drErrHash[xc(M6_150)] = Error_M6_150;
   Error_M6_151 = empty_violation();
   drErrHash[xc(M6_151)] = Error_M6_151;
   Error_M6_152 = empty_violation();
   drErrHash[xc(M6_152)] = Error_M6_152;
   Error_M6_153 = empty_violation();
   drErrHash[xc(M6_153)] = Error_M6_153;
   Error_M6_16 = empty_violation();
   drErrHash[xc(M6_16)] = Error_M6_16;
   Error_M6_160 = empty_violation();
   drErrHash[xc(M6_160)] = Error_M6_160;
   Error_M6_161 = empty_violation();
   drErrHash[xc(M6_161)] = Error_M6_161;
   Error_M6_162 = empty_violation();
   drErrHash[xc(M6_162)] = Error_M6_162;
   Error_M6_21 = empty_violation();
   drErrHash[xc(M6_21)] = Error_M6_21;
   Error_M6_22 = empty_violation();
   drErrHash[xc(M6_22)] = Error_M6_22;
   Error_M6_23 = empty_violation();
   drErrHash[xc(M6_23)] = Error_M6_23;
   Error_M6_24 = empty_violation();
   drErrHash[xc(M6_24)] = Error_M6_24;
   Error_M6_249 = empty_violation();
   drErrHash[xc(M6_249)] = Error_M6_249;
   Error_M6_25 = empty_violation();
   drErrHash[xc(M6_25)] = Error_M6_25;
   Error_M6_250 = empty_violation();
   drErrHash[xc(M6_250)] = Error_M6_250;
   Error_M6_251 = empty_violation();
   drErrHash[xc(M6_251)] = Error_M6_251;
   Error_M6_252 = empty_violation();
   drErrHash[xc(M6_252)] = Error_M6_252;
   Error_M6_253 = empty_violation();
   drErrHash[xc(M6_253)] = Error_M6_253;
   Error_M6_26 = empty_violation();
   drErrHash[xc(M6_26)] = Error_M6_26;
   Error_M6_260 = empty_violation();
   drErrHash[xc(M6_260)] = Error_M6_260;
   Error_M6_261 = empty_violation();
   drErrHash[xc(M6_261)] = Error_M6_261;
   Error_M6_262 = empty_violation();
   drErrHash[xc(M6_262)] = Error_M6_262;
   Error_M6_27 = empty_violation();
   drErrHash[xc(M6_27)] = Error_M6_27;
   Error_M6_28 = empty_violation();
   drErrHash[xc(M6_28)] = Error_M6_28;
   Error_M6_31 = empty_violation();
   drErrHash[xc(M6_31)] = Error_M6_31;
   Error_M6_32 = empty_violation();
   drErrHash[xc(M6_32)] = Error_M6_32;
   Error_M6_33 = empty_violation();
   drErrHash[xc(M6_33)] = Error_M6_33;
   Error_M6_34 = empty_violation();
   drErrHash[xc(M6_34)] = Error_M6_34;
   Error_M6_35 = empty_violation();
   drErrHash[xc(M6_35)] = Error_M6_35;
   Error_M6_37 = empty_violation();
   drErrHash[xc(M6_37)] = Error_M6_37;
   Error_M6_38 = empty_violation();
   drErrHash[xc(M6_38)] = Error_M6_38;
   Error_M6_40 = empty_violation();
   drErrHash[xc(M6_40)] = Error_M6_40;
   Error_M6_41 = empty_violation();
   drErrHash[xc(M6_41)] = Error_M6_41;
   Error_M6_44 = empty_violation();
   drErrHash[xc(M6_44)] = Error_M6_44;
   Error_M6_45 = empty_violation();
   drErrHash[xc(M6_45)] = Error_M6_45;
   Error_M6_46 = empty_violation();
   drErrHash[xc(M6_46)] = Error_M6_46;
   Error_M6_47 = empty_violation();
   drErrHash[xc(M6_47)] = Error_M6_47;
   Error_M6_48 = empty_violation();
   drErrHash[xc(M6_48)] = Error_M6_48;
   Error_M6_51 = empty_violation();
   drErrHash[xc(M6_51)] = Error_M6_51;
   Error_M6_52 = empty_violation();
   drErrHash[xc(M6_52)] = Error_M6_52;
   Error_M6_53 = empty_violation();
   drErrHash[xc(M6_53)] = Error_M6_53;
   Error_M6_60 = empty_violation();
   drErrHash[xc(M6_60)] = Error_M6_60;
   Error_M6_62 = empty_violation();
   drErrHash[xc(M6_62)] = Error_M6_62;
   Error_M6_63 = empty_violation();
   drErrHash[xc(M6_63)] = Error_M6_63;
   Error_M6_65 = empty_violation();
   drErrHash[xc(M6_65)] = Error_M6_65;
   Error_M6_70 = empty_violation();
   drErrHash[xc(M6_70)] = Error_M6_70;
   Error_M6_71 = empty_violation();
   drErrHash[xc(M6_71)] = Error_M6_71;
   Error_M6_72 = empty_violation();
   drErrHash[xc(M6_72)] = Error_M6_72;
   Error_M6_73 = empty_violation();
   drErrHash[xc(M6_73)] = Error_M6_73;
   Error_M6_80 = empty_violation();
   drErrHash[xc(M6_80)] = Error_M6_80;
   Error_M6_81 = empty_violation();
   drErrHash[xc(M6_81)] = Error_M6_81;
   Error_M6_82 = empty_violation();
   drErrHash[xc(M6_82)] = Error_M6_82;
   Error_M6_83 = empty_violation();
   drErrHash[xc(M6_83)] = Error_M6_83;
   Error_M6_84 = empty_violation();
   drErrHash[xc(M6_84)] = Error_M6_84;
   Error_M7_00 = empty_violation();
   drErrHash[xc(M7_00)] = Error_M7_00;
   Error_M7_01 = empty_violation();
   drErrHash[xc(M7_01)] = Error_M7_01;
   Error_M7_02 = empty_violation();
   drErrHash[xc(M7_02)] = Error_M7_02;
   Error_M7_03 = empty_violation();
   drErrHash[xc(M7_03)] = Error_M7_03;
   Error_M7_04 = empty_violation();
   drErrHash[xc(M7_04)] = Error_M7_04;
   Error_M7_05 = empty_violation();
   drErrHash[xc(M7_05)] = Error_M7_05;
   Error_M7_06 = empty_violation();
   drErrHash[xc(M7_06)] = Error_M7_06;
   Error_M7_07 = empty_violation();
   drErrHash[xc(M7_07)] = Error_M7_07;
   Error_M7_08 = empty_violation();
   drErrHash[xc(M7_08)] = Error_M7_08;
   Error_M7_09 = empty_violation();
   drErrHash[xc(M7_09)] = Error_M7_09;
   Error_M7_21 = empty_violation();
   drErrHash[xc(M7_21)] = Error_M7_21;
   Error_M7_22 = empty_violation();
   drErrHash[xc(M7_22)] = Error_M7_22;
   Error_M7_23 = empty_violation();
   drErrHash[xc(M7_23)] = Error_M7_23;
   Error_M7_24 = empty_violation();
   drErrHash[xc(M7_24)] = Error_M7_24;
   Error_M7_25 = empty_violation();
   drErrHash[xc(M7_25)] = Error_M7_25;
   Error_M7_26 = empty_violation();
   drErrHash[xc(M7_26)] = Error_M7_26;
   Error_M7_27 = empty_violation();
   drErrHash[xc(M7_27)] = Error_M7_27;
   Error_M7_31 = empty_violation();
   drErrHash[xc(M7_31)] = Error_M7_31;
   Error_M7_32 = empty_violation();
   drErrHash[xc(M7_32)] = Error_M7_32;
   Error_M7_35 = empty_violation();
   drErrHash[xc(M7_35)] = Error_M7_35;
   Error_M7_37 = empty_violation();
   drErrHash[xc(M7_37)] = Error_M7_37;
   Error_M7_38 = empty_violation();
   drErrHash[xc(M7_38)] = Error_M7_38;
   Error_M7_41 = empty_violation();
   drErrHash[xc(M7_41)] = Error_M7_41;
   Error_M7_51 = empty_violation();
   drErrHash[xc(M7_51)] = Error_M7_51;
   Error_M7_52 = empty_violation();
   drErrHash[xc(M7_52)] = Error_M7_52;
   Error_M7_60 = empty_violation();
   drErrHash[xc(M7_60)] = Error_M7_60;
   Error_M7_65 = empty_violation();
   drErrHash[xc(M7_65)] = Error_M7_65;
   Error_M7_70 = empty_violation();
   drErrHash[xc(M7_70)] = Error_M7_70;
   Error_M7_71 = empty_violation();
   drErrHash[xc(M7_71)] = Error_M7_71;
   Error_M7_72 = empty_violation();
   drErrHash[xc(M7_72)] = Error_M7_72;
   Error_M7_73 = empty_violation();
   drErrHash[xc(M7_73)] = Error_M7_73;
   Error_M7_74 = empty_violation();
   drErrHash[xc(M7_74)] = Error_M7_74;
   Error_M7_80 = empty_violation();
   drErrHash[xc(M7_80)] = Error_M7_80;
   Error_M7_81 = empty_violation();
   drErrHash[xc(M7_81)] = Error_M7_81;
   Error_M7_82 = empty_violation();
   drErrHash[xc(M7_82)] = Error_M7_82;
   Error_M7_83 = empty_violation();
   drErrHash[xc(M7_83)] = Error_M7_83;
   Error_M7_84 = empty_violation();
   drErrHash[xc(M7_84)] = Error_M7_84;
   Error_M7err_00 = empty_violation();
   drErrHash[xc(M7err_00)] = Error_M7err_00;
   Error_M7err_01 = empty_violation();
   drErrHash[xc(M7err_01)] = Error_M7err_01;
   Error_M7err_08 = empty_violation();
   drErrHash[xc(M7err_08)] = Error_M7err_08;
   Error_M8_00 = empty_violation();
   drErrHash[xc(M8_00)] = Error_M8_00;
   Error_M8_01 = empty_violation();
   drErrHash[xc(M8_01)] = Error_M8_01;
   Error_M8_02 = empty_violation();
   drErrHash[xc(M8_02)] = Error_M8_02;
   Error_M8_03 = empty_violation();
   drErrHash[xc(M8_03)] = Error_M8_03;
   Error_M8_04 = empty_violation();
   drErrHash[xc(M8_04)] = Error_M8_04;
   Error_M8_05 = empty_violation();
   drErrHash[xc(M8_05)] = Error_M8_05;
   Error_M8_06 = empty_violation();
   drErrHash[xc(M8_06)] = Error_M8_06;
   Error_M8_07 = empty_violation();
   drErrHash[xc(M8_07)] = Error_M8_07;
   Error_M8_08 = empty_violation();
   drErrHash[xc(M8_08)] = Error_M8_08;
   Error_M8_09 = empty_violation();
   drErrHash[xc(M8_09)] = Error_M8_09;
   Error_M8_10 = empty_violation();
   drErrHash[xc(M8_10)] = Error_M8_10;
   Error_M8_121 = empty_violation();
   drErrHash[xc(M8_121)] = Error_M8_121;
   Error_M8_20 = empty_violation();
   drErrHash[xc(M8_20)] = Error_M8_20;
   Error_M8_21 = empty_violation();
   drErrHash[xc(M8_21)] = Error_M8_21;
   Error_M8_22 = empty_violation();
   drErrHash[xc(M8_22)] = Error_M8_22;
   Error_M8_23 = empty_violation();
   drErrHash[xc(M8_23)] = Error_M8_23;
   Error_M8_24 = empty_violation();
   drErrHash[xc(M8_24)] = Error_M8_24;
   Error_M8_25 = empty_violation();
   drErrHash[xc(M8_25)] = Error_M8_25;
   Error_M8_26 = empty_violation();
   drErrHash[xc(M8_26)] = Error_M8_26;
   Error_M8_27 = empty_violation();
   drErrHash[xc(M8_27)] = Error_M8_27;
   Error_M8_32 = empty_violation();
   drErrHash[xc(M8_32)] = Error_M8_32;
   Error_M8_35 = empty_violation();
   drErrHash[xc(M8_35)] = Error_M8_35;
   Error_M8_37 = empty_violation();
   drErrHash[xc(M8_37)] = Error_M8_37;
   Error_M8_38 = empty_violation();
   drErrHash[xc(M8_38)] = Error_M8_38;
   Error_M8_41 = empty_violation();
   drErrHash[xc(M8_41)] = Error_M8_41;
   Error_M8_42 = empty_violation();
   drErrHash[xc(M8_42)] = Error_M8_42;
   Error_M8_50 = empty_violation();
   drErrHash[xc(M8_50)] = Error_M8_50;
   Error_M8_51 = empty_violation();
   drErrHash[xc(M8_51)] = Error_M8_51;
   Error_M8_52 = empty_violation();
   drErrHash[xc(M8_52)] = Error_M8_52;
   Error_M8_60 = empty_violation();
   drErrHash[xc(M8_60)] = Error_M8_60;
   Error_M8_65 = empty_violation();
   drErrHash[xc(M8_65)] = Error_M8_65;
   Error_M8_70 = empty_violation();
   drErrHash[xc(M8_70)] = Error_M8_70;
   Error_M8_71 = empty_violation();
   drErrHash[xc(M8_71)] = Error_M8_71;
   Error_M8_80 = empty_violation();
   drErrHash[xc(M8_80)] = Error_M8_80;
   Error_M8_81 = empty_violation();
   drErrHash[xc(M8_81)] = Error_M8_81;
   Error_M8_82 = empty_violation();
   drErrHash[xc(M8_82)] = Error_M8_82;
   Error_M8_83 = empty_violation();
   drErrHash[xc(M8_83)] = Error_M8_83;
   Error_M8_84 = empty_violation();
   drErrHash[xc(M8_84)] = Error_M8_84;
   Error_M8err_00 = empty_violation();
   drErrHash[xc(M8err_00)] = Error_M8err_00;
   Error_M8err_09 = empty_violation();
   drErrHash[xc(M8err_09)] = Error_M8err_09;
   Error_M8err_21 = empty_violation();
   drErrHash[xc(M8err_21)] = Error_M8err_21;
   Error_M9_00 = empty_violation();
   drErrHash[xc(M9_00)] = Error_M9_00;
   Error_M9_01 = empty_violation();
   drErrHash[xc(M9_01)] = Error_M9_01;
   Error_M9_02 = empty_violation();
   drErrHash[xc(M9_02)] = Error_M9_02;
   Error_M9_03 = empty_violation();
   drErrHash[xc(M9_03)] = Error_M9_03;
   Error_M9_04 = empty_violation();
   drErrHash[xc(M9_04)] = Error_M9_04;
   Error_M9_05 = empty_violation();
   drErrHash[xc(M9_05)] = Error_M9_05;
   Error_M9_06 = empty_violation();
   drErrHash[xc(M9_06)] = Error_M9_06;
   Error_M9_07 = empty_violation();
   drErrHash[xc(M9_07)] = Error_M9_07;
   Error_M9_08 = empty_violation();
   drErrHash[xc(M9_08)] = Error_M9_08;
   Error_M9_09 = empty_violation();
   drErrHash[xc(M9_09)] = Error_M9_09;
   Error_M9_121 = empty_violation();
   drErrHash[xc(M9_121)] = Error_M9_121;
   Error_M9_20 = empty_violation();
   drErrHash[xc(M9_20)] = Error_M9_20;
   Error_M9_21 = empty_violation();
   drErrHash[xc(M9_21)] = Error_M9_21;
   Error_M9_22 = empty_violation();
   drErrHash[xc(M9_22)] = Error_M9_22;
   Error_M9_23 = empty_violation();
   drErrHash[xc(M9_23)] = Error_M9_23;
   Error_M9_24 = empty_violation();
   drErrHash[xc(M9_24)] = Error_M9_24;
   Error_M9_25 = empty_violation();
   drErrHash[xc(M9_25)] = Error_M9_25;
   Error_M9_26 = empty_violation();
   drErrHash[xc(M9_26)] = Error_M9_26;
   Error_M9_27 = empty_violation();
   drErrHash[xc(M9_27)] = Error_M9_27;
   Error_M9_32 = empty_violation();
   drErrHash[xc(M9_32)] = Error_M9_32;
   Error_M9_35 = empty_violation();
   drErrHash[xc(M9_35)] = Error_M9_35;
   Error_M9_37 = empty_violation();
   drErrHash[xc(M9_37)] = Error_M9_37;
   Error_M9_38 = empty_violation();
   drErrHash[xc(M9_38)] = Error_M9_38;
   Error_M9_41 = empty_violation();
   drErrHash[xc(M9_41)] = Error_M9_41;
   Error_M9_42 = empty_violation();
   drErrHash[xc(M9_42)] = Error_M9_42;
   Error_M9_43 = empty_violation();
   drErrHash[xc(M9_43)] = Error_M9_43;
   Error_M9_50 = empty_violation();
   drErrHash[xc(M9_50)] = Error_M9_50;
   Error_M9_51 = empty_violation();
   drErrHash[xc(M9_51)] = Error_M9_51;
   Error_M9_52 = empty_violation();
   drErrHash[xc(M9_52)] = Error_M9_52;
   Error_M9_60 = empty_violation();
   drErrHash[xc(M9_60)] = Error_M9_60;
   Error_M9_65 = empty_violation();
   drErrHash[xc(M9_65)] = Error_M9_65;
   Error_M9_70 = empty_violation();
   drErrHash[xc(M9_70)] = Error_M9_70;
   Error_M9_71 = empty_violation();
   drErrHash[xc(M9_71)] = Error_M9_71;
   Error_M9_80 = empty_violation();
   drErrHash[xc(M9_80)] = Error_M9_80;
   Error_M9_81 = empty_violation();
   drErrHash[xc(M9_81)] = Error_M9_81;
   Error_M9_82 = empty_violation();
   drErrHash[xc(M9_82)] = Error_M9_82;
   Error_M9_83 = empty_violation();
   drErrHash[xc(M9_83)] = Error_M9_83;
   Error_M9_84 = empty_violation();
   drErrHash[xc(M9_84)] = Error_M9_84;
   Error_MC_01 = empty_violation();
   drErrHash[xc(MC_01)] = Error_MC_01;
   Error_MC_02 = empty_violation();
   drErrHash[xc(MC_02)] = Error_MC_02;
   Error_MC_03 = empty_violation();
   drErrHash[xc(MC_03)] = Error_MC_03;
   Error_MIM_01 = empty_violation();
   drErrHash[xc(MIM_01)] = Error_MIM_01;
   Error_MIM_02 = empty_violation();
   drErrHash[xc(MIM_02)] = Error_MIM_02;
   Error_MIM_03 = empty_violation();
   drErrHash[xc(MIM_03)] = Error_MIM_03;
   Error_MIM_04 = empty_violation();
   drErrHash[xc(MIM_04)] = Error_MIM_04;
   Error_MIM_05 = empty_violation();
   drErrHash[xc(MIM_05)] = Error_MIM_05;
   Error_MIM_06 = empty_violation();
   drErrHash[xc(MIM_06)] = Error_MIM_06;
   Error_MIM_07 = empty_violation();
   drErrHash[xc(MIM_07)] = Error_MIM_07;
   Error_MIM_22 = empty_violation();
   drErrHash[xc(MIM_22)] = Error_MIM_22;
   Error_MIM_23 = empty_violation();
   drErrHash[xc(MIM_23)] = Error_MIM_23;
   Error_MIM_25 = empty_violation();
   drErrHash[xc(MIM_25)] = Error_MIM_25;
   Error_MIM_26 = empty_violation();
   drErrHash[xc(MIM_26)] = Error_MIM_26;
   Error_MIM_51 = empty_violation();
   drErrHash[xc(MIM_51)] = Error_MIM_51;
   Error_MIM_52 = empty_violation();
   drErrHash[xc(MIM_52)] = Error_MIM_52;
   Error_MIM_53 = empty_violation();
   drErrHash[xc(MIM_53)] = Error_MIM_53;
   Error_MIM_54 = empty_violation();
   drErrHash[xc(MIM_54)] = Error_MIM_54;
   Error_MIM_55 = empty_violation();
   drErrHash[xc(MIM_55)] = Error_MIM_55;
   Error_MIM_61 = empty_violation();
   drErrHash[xc(MIM_61)] = Error_MIM_61;
   Error_MIM_62 = empty_violation();
   drErrHash[xc(MIM_62)] = Error_MIM_62;
   Error_MIM_63 = empty_violation();
   drErrHash[xc(MIM_63)] = Error_MIM_63;
   Error_MIM_71 = empty_violation();
   drErrHash[xc(MIM_71)] = Error_MIM_71;
   Error_MIM_72 = empty_violation();
   drErrHash[xc(MIM_72)] = Error_MIM_72;
   Error_MIM_73 = empty_violation();
   drErrHash[xc(MIM_73)] = Error_MIM_73;
   Error_MIM_74 = empty_violation();
   drErrHash[xc(MIM_74)] = Error_MIM_74;
   Error_MIM_75 = empty_violation();
   drErrHash[xc(MIM_75)] = Error_MIM_75;
   Error_MIM_81 = empty_violation();
   drErrHash[xc(MIM_81)] = Error_MIM_81;
   Error_MIM_82 = empty_violation();
   drErrHash[xc(MIM_82)] = Error_MIM_82;
   Error_MIM_83 = empty_violation();
   drErrHash[xc(MIM_83)] = Error_MIM_83;
   Error_MJ0_01 = empty_violation();
   drErrHash[xc(MJ0_01)] = Error_MJ0_01;
   Error_MJ0_02 = empty_violation();
   drErrHash[xc(MJ0_02)] = Error_MJ0_02;
   Error_MJ0_03 = empty_violation();
   drErrHash[xc(MJ0_03)] = Error_MJ0_03;
   Error_MJ0_04 = empty_violation();
   drErrHash[xc(MJ0_04)] = Error_MJ0_04;
   Error_MJ0_05 = empty_violation();
   drErrHash[xc(MJ0_05)] = Error_MJ0_05;
   Error_MJ0_06 = empty_violation();
   drErrHash[xc(MJ0_06)] = Error_MJ0_06;
   Error_MJ0_07 = empty_violation();
   drErrHash[xc(MJ0_07)] = Error_MJ0_07;
   Error_MJ0_08 = empty_violation();
   drErrHash[xc(MJ0_08)] = Error_MJ0_08;
   Error_MJ0_09 = empty_violation();
   drErrHash[xc(MJ0_09)] = Error_MJ0_09;
   Error_MTJ_01 = empty_violation();
   drErrHash[xc(MTJ_01)] = Error_MTJ_01;
   Error_MTJ_02 = empty_violation();
   drErrHash[xc(MTJ_02)] = Error_MTJ_02;
   Error_MTJ_03 = empty_violation();
   drErrHash[xc(MTJ_03)] = Error_MTJ_03;
   Error_MTJ_04 = empty_violation();
   drErrHash[xc(MTJ_04)] = Error_MTJ_04;
   Error_MTJ_05 = empty_violation();
   drErrHash[xc(MTJ_05)] = Error_MTJ_05;
   Error_MTJ_06 = empty_violation();
   drErrHash[xc(MTJ_06)] = Error_MTJ_06;
   Error_MTJ_07 = empty_violation();
   drErrHash[xc(MTJ_07)] = Error_MTJ_07;
   Error_MTJ_08 = empty_violation();
   drErrHash[xc(MTJ_08)] = Error_MTJ_08;
   Error_MTJ_09 = empty_violation();
   drErrHash[xc(MTJ_09)] = Error_MTJ_09;
   Error_MTJ_10 = empty_violation();
   drErrHash[xc(MTJ_10)] = Error_MTJ_10;
   Error_MTJ_11 = empty_violation();
   drErrHash[xc(MTJ_11)] = Error_MTJ_11;
   Error_MTJ_12 = empty_violation();
   drErrHash[xc(MTJ_12)] = Error_MTJ_12;
   Error_MTJ_13 = empty_violation();
   drErrHash[xc(MTJ_13)] = Error_MTJ_13;
   Error_MTJ_14 = empty_violation();
   drErrHash[xc(MTJ_14)] = Error_MTJ_14;
   Error_MTJ_15 = empty_violation();
   drErrHash[xc(MTJ_15)] = Error_MTJ_15;
   Error_NW_01 = empty_violation();
   drErrHash[xc(NW_01)] = Error_NW_01;
   Error_NW_03 = empty_violation();
   drErrHash[xc(NW_03)] = Error_NW_03;
   Error_NW_12 = empty_violation();
   drErrHash[xc(NW_12)] = Error_NW_12;
   Error_NW_128 = empty_violation();
   drErrHash[xc(NW_128)] = Error_NW_128;
   Error_NW_129 = empty_violation();
   drErrHash[xc(NW_129)] = Error_NW_129;
   Error_NW_14 = empty_violation();
   drErrHash[xc(NW_14)] = Error_NW_14;
   Error_NW_17 = empty_violation();
   drErrHash[xc(NW_17)] = Error_NW_17;
   Error_NW_18 = empty_violation();
   drErrHash[xc(NW_18)] = Error_NW_18;
   Error_NW_21 = empty_violation();
   drErrHash[xc(NW_21)] = Error_NW_21;
   Error_NW_22 = empty_violation();
   drErrHash[xc(NW_22)] = Error_NW_22;
   Error_NW_23 = empty_violation();
   drErrHash[xc(NW_23)] = Error_NW_23;
   Error_NW_24 = empty_violation();
   drErrHash[xc(NW_24)] = Error_NW_24;
   Error_NW_25 = empty_violation();
   drErrHash[xc(NW_25)] = Error_NW_25;
   Error_NW_28 = empty_violation();
   drErrHash[xc(NW_28)] = Error_NW_28;
   Error_NW_29 = empty_violation();
   drErrHash[xc(NW_29)] = Error_NW_29;
   Error_NW_30 = empty_violation();
   drErrHash[xc(NW_30)] = Error_NW_30;
   Error_NW_31 = empty_violation();
   drErrHash[xc(NW_31)] = Error_NW_31;
   Error_NW_33 = empty_violation();
   drErrHash[xc(NW_33)] = Error_NW_33;
   Error_NW_35 = empty_violation();
   drErrHash[xc(NW_35)] = Error_NW_35;
   Error_NW_36 = empty_violation();
   drErrHash[xc(NW_36)] = Error_NW_36;
   Error_NW_41 = empty_violation();
   drErrHash[xc(NW_41)] = Error_NW_41;
   Error_NW_42 = empty_violation();
   drErrHash[xc(NW_42)] = Error_NW_42;
   Error_NW_43 = empty_violation();
   drErrHash[xc(NW_43)] = Error_NW_43;
   Error_NW_55 = empty_violation();
   drErrHash[xc(NW_55)] = Error_NW_55;
   Error_NW_56 = empty_violation();
   drErrHash[xc(NW_56)] = Error_NW_56;
   Error_NW_57 = empty_violation();
   drErrHash[xc(NW_57)] = Error_NW_57;
   Error_NW_58 = empty_violation();
   drErrHash[xc(NW_58)] = Error_NW_58;
   Error_NW_59 = empty_violation();
   drErrHash[xc(NW_59)] = Error_NW_59;
   Error_NW_60 = empty_violation();
   drErrHash[xc(NW_60)] = Error_NW_60;
   Error_NW_71 = empty_violation();
   drErrHash[xc(NW_71)] = Error_NW_71;
   Error_NW_73 = empty_violation();
   drErrHash[xc(NW_73)] = Error_NW_73;
   Error_NW_74 = empty_violation();
   drErrHash[xc(NW_74)] = Error_NW_74;
   Error_PC_00 = empty_violation();
   drErrHash[xc(PC_00)] = Error_PC_00;
   Error_PC_01 = empty_violation();
   drErrHash[xc(PC_01)] = Error_PC_01;
   Error_PC_02 = empty_violation();
   drErrHash[xc(PC_02)] = Error_PC_02;
   Error_PC_04 = empty_violation();
   drErrHash[xc(PC_04)] = Error_PC_04;
   Error_PC_20 = empty_violation();
   drErrHash[xc(PC_20)] = Error_PC_20;
   Error_PC_21 = empty_violation();
   drErrHash[xc(PC_21)] = Error_PC_21;
   Error_PC_23 = empty_violation();
   drErrHash[xc(PC_23)] = Error_PC_23;
   Error_PC_25 = empty_violation();
   drErrHash[xc(PC_25)] = Error_PC_25;
   Error_PC_31 = empty_violation();
   drErrHash[xc(PC_31)] = Error_PC_31;
   Error_PC_32 = empty_violation();
   drErrHash[xc(PC_32)] = Error_PC_32;
   Error_PC_33 = empty_violation();
   drErrHash[xc(PC_33)] = Error_PC_33;
   Error_PC_34 = empty_violation();
   drErrHash[xc(PC_34)] = Error_PC_34;
   Error_PC_35 = empty_violation();
   drErrHash[xc(PC_35)] = Error_PC_35;
   Error_PC_36 = empty_violation();
   drErrHash[xc(PC_36)] = Error_PC_36;
   Error_PC_41 = empty_violation();
   drErrHash[xc(PC_41)] = Error_PC_41;
   Error_PC_42 = empty_violation();
   drErrHash[xc(PC_42)] = Error_PC_42;
   Error_PC_43 = empty_violation();
   drErrHash[xc(PC_43)] = Error_PC_43;
   Error_PC_44 = empty_violation();
   drErrHash[xc(PC_44)] = Error_PC_44;
   Error_PC_444 = empty_violation();
   drErrHash[xc(PC_444)] = Error_PC_444;
   Error_PC_45 = empty_violation();
   drErrHash[xc(PC_45)] = Error_PC_45;
   Error_PC_46 = empty_violation();
   drErrHash[xc(PC_46)] = Error_PC_46;
   Error_PC_50 = empty_violation();
   drErrHash[xc(PC_50)] = Error_PC_50;
   Error_PC_51 = empty_violation();
   drErrHash[xc(PC_51)] = Error_PC_51;
   Error_PC_52 = empty_violation();
   drErrHash[xc(PC_52)] = Error_PC_52;
   Error_PC_53 = empty_violation();
   drErrHash[xc(PC_53)] = Error_PC_53;
   Error_PC_54 = empty_violation();
   drErrHash[xc(PC_54)] = Error_PC_54;
   Error_PC_55 = empty_violation();
   drErrHash[xc(PC_55)] = Error_PC_55;
   Error_PC_56 = empty_violation();
   drErrHash[xc(PC_56)] = Error_PC_56;
   Error_PC_57 = empty_violation();
   drErrHash[xc(PC_57)] = Error_PC_57;
   Error_PC_61 = empty_violation();
   drErrHash[xc(PC_61)] = Error_PC_61;
   Error_PC_81 = empty_violation();
   drErrHash[xc(PC_81)] = Error_PC_81;
   Error_PC_82 = empty_violation();
   drErrHash[xc(PC_82)] = Error_PC_82;
   Error_PC_83 = empty_violation();
   drErrHash[xc(PC_83)] = Error_PC_83;
   Error_PC_84 = empty_violation();
   drErrHash[xc(PC_84)] = Error_PC_84;
   Error_PC_85 = empty_violation();
   drErrHash[xc(PC_85)] = Error_PC_85;
   Error_PC_91 = empty_violation();
   drErrHash[xc(PC_91)] = Error_PC_91;
   Error_PC_92 = empty_violation();
   drErrHash[xc(PC_92)] = Error_PC_92;
   Error_PC_93 = empty_violation();
   drErrHash[xc(PC_93)] = Error_PC_93;
   Error_PG_01 = empty_violation();
   drErrHash[xc(PG_01)] = Error_PG_01;
   Error_PG_02 = empty_violation();
   drErrHash[xc(PG_02)] = Error_PG_02;
   Error_PG_03 = empty_violation();
   drErrHash[xc(PG_03)] = Error_PG_03;
   Error_PG_04 = empty_violation();
   drErrHash[xc(PG_04)] = Error_PG_04;
   Error_PG_05 = empty_violation();
   drErrHash[xc(PG_05)] = Error_PG_05;
   Error_PL_00 = empty_violation();
   drErrHash[xc(PL_00)] = Error_PL_00;
   Error_PL_01 = empty_violation();
   drErrHash[xc(PL_01)] = Error_PL_01;
   Error_PL_02 = empty_violation();
   drErrHash[xc(PL_02)] = Error_PL_02;
   Error_PL_03 = empty_violation();
   drErrHash[xc(PL_03)] = Error_PL_03;
   Error_PL_04 = empty_violation();
   drErrHash[xc(PL_04)] = Error_PL_04;
   Error_PL_05 = empty_violation();
   drErrHash[xc(PL_05)] = Error_PL_05;
   Error_PL_06 = empty_violation();
   drErrHash[xc(PL_06)] = Error_PL_06;
   Error_PL_07 = empty_violation();
   drErrHash[xc(PL_07)] = Error_PL_07;
   Error_PL_08 = empty_violation();
   drErrHash[xc(PL_08)] = Error_PL_08;
   Error_PL_09 = empty_violation();
   drErrHash[xc(PL_09)] = Error_PL_09;
   Error_PL_100 = empty_violation();
   drErrHash[xc(PL_100)] = Error_PL_100;
   Error_PL_101 = empty_violation();
   drErrHash[xc(PL_101)] = Error_PL_101;
   Error_PL_102 = empty_violation();
   drErrHash[xc(PL_102)] = Error_PL_102;
   Error_PL_103 = empty_violation();
   drErrHash[xc(PL_103)] = Error_PL_103;
   Error_PL_104 = empty_violation();
   drErrHash[xc(PL_104)] = Error_PL_104;
   Error_PL_105 = empty_violation();
   drErrHash[xc(PL_105)] = Error_PL_105;
   Error_PL_106 = empty_violation();
   drErrHash[xc(PL_106)] = Error_PL_106;
   Error_PL_11 = empty_violation();
   drErrHash[xc(PL_11)] = Error_PL_11;
   Error_PL_12 = empty_violation();
   drErrHash[xc(PL_12)] = Error_PL_12;
   Error_PL_13 = empty_violation();
   drErrHash[xc(PL_13)] = Error_PL_13;
   Error_PL_15 = empty_violation();
   drErrHash[xc(PL_15)] = Error_PL_15;
   Error_PL_16 = empty_violation();
   drErrHash[xc(PL_16)] = Error_PL_16;
   Error_PL_24 = empty_violation();
   drErrHash[xc(PL_24)] = Error_PL_24;
   Error_PL_25 = empty_violation();
   drErrHash[xc(PL_25)] = Error_PL_25;
   Error_PL_51 = empty_violation();
   drErrHash[xc(PL_51)] = Error_PL_51;
   Error_PL_52 = empty_violation();
   drErrHash[xc(PL_52)] = Error_PL_52;
   Error_PL_55 = empty_violation();
   drErrHash[xc(PL_55)] = Error_PL_55;
   Error_PL_61 = empty_violation();
   drErrHash[xc(PL_61)] = Error_PL_61;
   Error_PL_62 = empty_violation();
   drErrHash[xc(PL_62)] = Error_PL_62;
   Error_PL_63 = empty_violation();
   drErrHash[xc(PL_63)] = Error_PL_63;
   Error_PL_66 = empty_violation();
   drErrHash[xc(PL_66)] = Error_PL_66;
   Error_PL_67 = empty_violation();
   drErrHash[xc(PL_67)] = Error_PL_67;
   Error_PL_68 = empty_violation();
   drErrHash[xc(PL_68)] = Error_PL_68;
   Error_PL_69 = empty_violation();
   drErrHash[xc(PL_69)] = Error_PL_69;
   Error_PL_70 = empty_violation();
   drErrHash[xc(PL_70)] = Error_PL_70;
   Error_PL_71 = empty_violation();
   drErrHash[xc(PL_71)] = Error_PL_71;
   Error_PL_91 = empty_violation();
   drErrHash[xc(PL_91)] = Error_PL_91;
   Error_PL_92 = empty_violation();
   drErrHash[xc(PL_92)] = Error_PL_92;
   Error_RDL_01 = empty_violation();
   drErrHash[xc(RDL_01)] = Error_RDL_01;
   Error_RDL_02 = empty_violation();
   drErrHash[xc(RDL_02)] = Error_RDL_02;
   Error_RDL_03 = empty_violation();
   drErrHash[xc(RDL_03)] = Error_RDL_03;
   Error_RDL_04 = empty_violation();
   drErrHash[xc(RDL_04)] = Error_RDL_04;
   Error_RDL_05 = empty_violation();
   drErrHash[xc(RDL_05)] = Error_RDL_05;
   Error_RDL_06 = empty_violation();
   drErrHash[xc(RDL_06)] = Error_RDL_06;
   Error_RDL_07 = empty_violation();
   drErrHash[xc(RDL_07)] = Error_RDL_07;
   Error_RDL_08 = empty_violation();
   drErrHash[xc(RDL_08)] = Error_RDL_08;
   Error_RDL_09 = empty_violation();
   drErrHash[xc(RDL_09)] = Error_RDL_09;
   Error_RDL_10 = empty_violation();
   drErrHash[xc(RDL_10)] = Error_RDL_10;
   Error_RDL_11 = empty_violation();
   drErrHash[xc(RDL_11)] = Error_RDL_11;
   Error_RDL_12 = empty_violation();
   drErrHash[xc(RDL_12)] = Error_RDL_12;
   Error_RDL_13 = empty_violation();
   drErrHash[xc(RDL_13)] = Error_RDL_13;
   Error_RDL_14 = empty_violation();
   drErrHash[xc(RDL_14)] = Error_RDL_14;
   Error_RDL_15 = empty_violation();
   drErrHash[xc(RDL_15)] = Error_RDL_15;
   Error_RDL_16 = empty_violation();
   drErrHash[xc(RDL_16)] = Error_RDL_16;
   Error_SDC_03 = empty_violation();
   drErrHash[xc(SDC_03)] = Error_SDC_03;
   Error_SDC_11 = empty_violation();
   drErrHash[xc(SDC_11)] = Error_SDC_11;
   Error_SDC_111 = empty_violation();
   drErrHash[xc(SDC_111)] = Error_SDC_111;
   Error_SD_01 = empty_violation();
   drErrHash[xc(SD_01)] = Error_SD_01;
   Error_SD_02 = empty_violation();
   drErrHash[xc(SD_02)] = Error_SD_02;
   Error_SD_03 = empty_violation();
   drErrHash[xc(SD_03)] = Error_SD_03;
   Error_SD_04 = empty_violation();
   drErrHash[xc(SD_04)] = Error_SD_04;
   Error_SK_12 = empty_violation();
   drErrHash[xc(SK_12)] = Error_SK_12;
   Error_SK_22 = empty_violation();
   drErrHash[xc(SK_22)] = Error_SK_22;
   Error_SK_31 = empty_violation();
   drErrHash[xc(SK_31)] = Error_SK_31;
   Error_SK_32 = empty_violation();
   drErrHash[xc(SK_32)] = Error_SK_32;
   Error_SK_41 = empty_violation();
   drErrHash[xc(SK_41)] = Error_SK_41;
   Error_SK_42 = empty_violation();
   drErrHash[xc(SK_42)] = Error_SK_42;
   Error_SK_51 = empty_violation();
   drErrHash[xc(SK_51)] = Error_SK_51;
   Error_SK_52 = empty_violation();
   drErrHash[xc(SK_52)] = Error_SK_52;
   Error_SK_61 = empty_violation();
   drErrHash[xc(SK_61)] = Error_SK_61;
   Error_SK_62 = empty_violation();
   drErrHash[xc(SK_62)] = Error_SK_62;
   Error_SK_71 = empty_violation();
   drErrHash[xc(SK_71)] = Error_SK_71;
   Error_SK_72 = empty_violation();
   drErrHash[xc(SK_72)] = Error_SK_72;
   Error_SK_81 = empty_violation();
   drErrHash[xc(SK_81)] = Error_SK_81;
   Error_SK_82 = empty_violation();
   drErrHash[xc(SK_82)] = Error_SK_82;
   Error_SM0_41 = empty_violation();
   drErrHash[xc(SM0_41)] = Error_SM0_41;
   Error_SM0_60 = empty_violation();
   drErrHash[xc(SM0_60)] = Error_SM0_60;
   Error_SM0_82 = empty_violation();
   drErrHash[xc(SM0_82)] = Error_SM0_82;
   Error_SM0_821 = empty_violation();
   drErrHash[xc(SM0_821)] = Error_SM0_821;
   Error_SM3_41 = empty_violation();
   drErrHash[xc(SM3_41)] = Error_SM3_41;
   Error_SM3_47 = empty_violation();
   drErrHash[xc(SM3_47)] = Error_SM3_47;
   Error_SNW_29 = empty_violation();
   drErrHash[xc(SNW_29)] = Error_SNW_29;
   Error_SV3_97 = empty_violation();
   drErrHash[xc(SV3_97)] = Error_SV3_97;
   Error_TDC_04 = empty_violation();
   drErrHash[xc(TDC_04)] = Error_TDC_04;
   Error_TDC_21 = empty_violation();
   drErrHash[xc(TDC_21)] = Error_TDC_21;
   Error_TEDM_01 = empty_violation();
   drErrHash[xc(TEDM_01)] = Error_TEDM_01;
   Error_TEDM_02 = empty_violation();
   drErrHash[xc(TEDM_02)] = Error_TEDM_02;
   Error_TEDM_04 = empty_violation();
   drErrHash[xc(TEDM_04)] = Error_TEDM_04;
   Error_TEDM_06 = empty_violation();
   drErrHash[xc(TEDM_06)] = Error_TEDM_06;
   Error_TEDM_07 = empty_violation();
   drErrHash[xc(TEDM_07)] = Error_TEDM_07;
   Error_TEDM_08 = empty_violation();
   drErrHash[xc(TEDM_08)] = Error_TEDM_08;
   Error_TEDM_11 = empty_violation();
   drErrHash[xc(TEDM_11)] = Error_TEDM_11;
   Error_TEDM_12 = empty_violation();
   drErrHash[xc(TEDM_12)] = Error_TEDM_12;
   Error_TEDM_13 = empty_violation();
   drErrHash[xc(TEDM_13)] = Error_TEDM_13;
   Error_TEDM_14 = empty_violation();
   drErrHash[xc(TEDM_14)] = Error_TEDM_14;
   Error_TEDM_15 = empty_violation();
   drErrHash[xc(TEDM_15)] = Error_TEDM_15;
   Error_TEDM_16 = empty_violation();
   drErrHash[xc(TEDM_16)] = Error_TEDM_16;
   Error_TEDW_01 = empty_violation();
   drErrHash[xc(TEDW_01)] = Error_TEDW_01;
   Error_TEDW_02 = empty_violation();
   drErrHash[xc(TEDW_02)] = Error_TEDW_02;
   Error_TEDW_03 = empty_violation();
   drErrHash[xc(TEDW_03)] = Error_TEDW_03;
   Error_TEDW_04 = empty_violation();
   drErrHash[xc(TEDW_04)] = Error_TEDW_04;
   Error_TEDW_07 = empty_violation();
   drErrHash[xc(TEDW_07)] = Error_TEDW_07;
   Error_TEDW_08 = empty_violation();
   drErrHash[xc(TEDW_08)] = Error_TEDW_08;
   Error_TEDW_11 = empty_violation();
   drErrHash[xc(TEDW_11)] = Error_TEDW_11;
   Error_TEDW_12 = empty_violation();
   drErrHash[xc(TEDW_12)] = Error_TEDW_12;
   Error_TEDW_13 = empty_violation();
   drErrHash[xc(TEDW_13)] = Error_TEDW_13;
   Error_TEDW_14 = empty_violation();
   drErrHash[xc(TEDW_14)] = Error_TEDW_14;
   Error_TEDW_15 = empty_violation();
   drErrHash[xc(TEDW_15)] = Error_TEDW_15;
   Error_TEDW_16 = empty_violation();
   drErrHash[xc(TEDW_16)] = Error_TEDW_16;
   Error_TEDW_17 = empty_violation();
   drErrHash[xc(TEDW_17)] = Error_TEDW_17;
   Error_TEDW_18 = empty_violation();
   drErrHash[xc(TEDW_18)] = Error_TEDW_18;
   Error_TM1_01 = empty_violation();
   drErrHash[xc(TM1_01)] = Error_TM1_01;
   Error_TM1_02 = empty_violation();
   drErrHash[xc(TM1_02)] = Error_TM1_02;
   Error_TM1_03 = empty_violation();
   drErrHash[xc(TM1_03)] = Error_TM1_03;
   Error_TM1_04 = empty_violation();
   drErrHash[xc(TM1_04)] = Error_TM1_04;
   Error_TM1_21 = empty_violation();
   drErrHash[xc(TM1_21)] = Error_TM1_21;
   Error_TM1_22 = empty_violation();
   drErrHash[xc(TM1_22)] = Error_TM1_22;
   Error_TM1_23 = empty_violation();
   drErrHash[xc(TM1_23)] = Error_TM1_23;
   Error_TM1_25 = empty_violation();
   drErrHash[xc(TM1_25)] = Error_TM1_25;
   Error_TM1_26 = empty_violation();
   drErrHash[xc(TM1_26)] = Error_TM1_26;
   Error_TM1_51 = empty_violation();
   drErrHash[xc(TM1_51)] = Error_TM1_51;
   Error_TM1_60 = empty_violation();
   drErrHash[xc(TM1_60)] = Error_TM1_60;
   Error_TPC_42 = empty_violation();
   drErrHash[xc(TPC_42)] = Error_TPC_42;
   Error_TPC_44 = empty_violation();
   drErrHash[xc(TPC_44)] = Error_TPC_44;
   Error_TPC_46 = empty_violation();
   drErrHash[xc(TPC_46)] = Error_TPC_46;
   Error_TPL_01 = empty_violation();
   drErrHash[xc(TPL_01)] = Error_TPL_01;
   Error_TPL_02 = empty_violation();
   drErrHash[xc(TPL_02)] = Error_TPL_02;
   Error_TPL_04 = empty_violation();
   drErrHash[xc(TPL_04)] = Error_TPL_04;
   Error_TPL_11 = empty_violation();
   drErrHash[xc(TPL_11)] = Error_TPL_11;
   Error_TPL_13 = empty_violation();
   drErrHash[xc(TPL_13)] = Error_TPL_13;
   Error_TPL_15 = empty_violation();
   drErrHash[xc(TPL_15)] = Error_TPL_15;
   Error_TPL_25 = empty_violation();
   drErrHash[xc(TPL_25)] = Error_TPL_25;
   Error_TSV_01 = empty_violation();
   drErrHash[xc(TSV_01)] = Error_TSV_01;
   Error_TSV_02 = empty_violation();
   drErrHash[xc(TSV_02)] = Error_TSV_02;
   Error_TSV_03 = empty_violation();
   drErrHash[xc(TSV_03)] = Error_TSV_03;
   Error_TSV_04 = empty_violation();
   drErrHash[xc(TSV_04)] = Error_TSV_04;
   Error_TSV_05 = empty_violation();
   drErrHash[xc(TSV_05)] = Error_TSV_05;
   Error_TSV_06 = empty_violation();
   drErrHash[xc(TSV_06)] = Error_TSV_06;
   Error_TSV_07 = empty_violation();
   drErrHash[xc(TSV_07)] = Error_TSV_07;
   Error_TSV_08 = empty_violation();
   drErrHash[xc(TSV_08)] = Error_TSV_08;
   Error_TSV_10 = empty_violation();
   drErrHash[xc(TSV_10)] = Error_TSV_10;
   Error_TSV_21 = empty_violation();
   drErrHash[xc(TSV_21)] = Error_TSV_21;
   Error_TSV_22 = empty_violation();
   drErrHash[xc(TSV_22)] = Error_TSV_22;
   Error_TSV_23 = empty_violation();
   drErrHash[xc(TSV_23)] = Error_TSV_23;
   Error_TSV_61 = empty_violation();
   drErrHash[xc(TSV_61)] = Error_TSV_61;
   Error_TSV_62 = empty_violation();
   drErrHash[xc(TSV_62)] = Error_TSV_62;
   Error_TV1_31 = empty_violation();
   drErrHash[xc(TV1_31)] = Error_TV1_31;
   Error_TV1_32 = empty_violation();
   drErrHash[xc(TV1_32)] = Error_TV1_32;
   Error_TV1_51 = empty_violation();
   drErrHash[xc(TV1_51)] = Error_TV1_51;
   Error_TV1_61 = empty_violation();
   drErrHash[xc(TV1_61)] = Error_TV1_61;
   Error_TX_01 = empty_violation();
   drErrHash[xc(TX_01)] = Error_TX_01;
   Error_TX_02 = empty_violation();
   drErrHash[xc(TX_02)] = Error_TX_02;
   Error_TX_03 = empty_violation();
   drErrHash[xc(TX_03)] = Error_TX_03;
   Error_TX_05 = empty_violation();
   drErrHash[xc(TX_05)] = Error_TX_05;
   Error_TX_06 = empty_violation();
   drErrHash[xc(TX_06)] = Error_TX_06;
   Error_TX_07 = empty_violation();
   drErrHash[xc(TX_07)] = Error_TX_07;
   Error_TX_08 = empty_violation();
   drErrHash[xc(TX_08)] = Error_TX_08;
   Error_TX_09 = empty_violation();
   drErrHash[xc(TX_09)] = Error_TX_09;
   Error_TX_10 = empty_violation();
   drErrHash[xc(TX_10)] = Error_TX_10;
   Error_TX_11 = empty_violation();
   drErrHash[xc(TX_11)] = Error_TX_11;
   Error_TX_12 = empty_violation();
   drErrHash[xc(TX_12)] = Error_TX_12;
   Error_TX_13 = empty_violation();
   drErrHash[xc(TX_13)] = Error_TX_13;
   Error_TX_21 = empty_violation();
   drErrHash[xc(TX_21)] = Error_TX_21;
   Error_UHV_01 = empty_violation();
   drErrHash[xc(UHV_01)] = Error_UHV_01;
   Error_UHV_02 = empty_violation();
   drErrHash[xc(UHV_02)] = Error_UHV_02;
   Error_UHV_04 = empty_violation();
   drErrHash[xc(UHV_04)] = Error_UHV_04;
   Error_UHV_05 = empty_violation();
   drErrHash[xc(UHV_05)] = Error_UHV_05;
   Error_UHV_06 = empty_violation();
   drErrHash[xc(UHV_06)] = Error_UHV_06;
   Error_UHV_07 = empty_violation();
   drErrHash[xc(UHV_07)] = Error_UHV_07;
   Error_UHV_09 = empty_violation();
   drErrHash[xc(UHV_09)] = Error_UHV_09;
   Error_UHV_10 = empty_violation();
   drErrHash[xc(UHV_10)] = Error_UHV_10;
   Error_UHV_11 = empty_violation();
   drErrHash[xc(UHV_11)] = Error_UHV_11;
   Error_UHV_12 = empty_violation();
   drErrHash[xc(UHV_12)] = Error_UHV_12;
   Error_UHV_13 = empty_violation();
   drErrHash[xc(UHV_13)] = Error_UHV_13;
   Error_UHV_14 = empty_violation();
   drErrHash[xc(UHV_14)] = Error_UHV_14;
   Error_UHV_15 = empty_violation();
   drErrHash[xc(UHV_15)] = Error_UHV_15;
   Error_UHV_16 = empty_violation();
   drErrHash[xc(UHV_16)] = Error_UHV_16;
   Error_UHV_20 = empty_violation();
   drErrHash[xc(UHV_20)] = Error_UHV_20;
   Error_UHV_21 = empty_violation();
   drErrHash[xc(UHV_21)] = Error_UHV_21;
   Error_UHV_34 = empty_violation();
   drErrHash[xc(UHV_34)] = Error_UHV_34;
   Error_UHV_36 = empty_violation();
   drErrHash[xc(UHV_36)] = Error_UHV_36;
   Error_UHV_40 = empty_violation();
   drErrHash[xc(UHV_40)] = Error_UHV_40;
   Error_UHV_41 = empty_violation();
   drErrHash[xc(UHV_41)] = Error_UHV_41;
   Error_UHV_42 = empty_violation();
   drErrHash[xc(UHV_42)] = Error_UHV_42;
   Error_UHV_43 = empty_violation();
   drErrHash[xc(UHV_43)] = Error_UHV_43;
   Error_UHV_44 = empty_violation();
   drErrHash[xc(UHV_44)] = Error_UHV_44;
   Error_UHV_45 = empty_violation();
   drErrHash[xc(UHV_45)] = Error_UHV_45;
   Error_UHV_46 = empty_violation();
   drErrHash[xc(UHV_46)] = Error_UHV_46;
   Error_UHV_47 = empty_violation();
   drErrHash[xc(UHV_47)] = Error_UHV_47;
   Error_UHV_48 = empty_violation();
   drErrHash[xc(UHV_48)] = Error_UHV_48;
   Error_UHV_49 = empty_violation();
   drErrHash[xc(UHV_49)] = Error_UHV_49;
   Error_UHV_50 = empty_violation();
   drErrHash[xc(UHV_50)] = Error_UHV_50;
   Error_UHV_51 = empty_violation();
   drErrHash[xc(UHV_51)] = Error_UHV_51;
   Error_UHV_52 = empty_violation();
   drErrHash[xc(UHV_52)] = Error_UHV_52;
   Error_UHV_53 = empty_violation();
   drErrHash[xc(UHV_53)] = Error_UHV_53;
   Error_UHV_54 = empty_violation();
   drErrHash[xc(UHV_54)] = Error_UHV_54;
   Error_UHV_55 = empty_violation();
   drErrHash[xc(UHV_55)] = Error_UHV_55;
   Error_UHV_56 = empty_violation();
   drErrHash[xc(UHV_56)] = Error_UHV_56;
   Error_UHV_57 = empty_violation();
   drErrHash[xc(UHV_57)] = Error_UHV_57;
   Error_UHV_58 = empty_violation();
   drErrHash[xc(UHV_58)] = Error_UHV_58;
   Error_UHV_59 = empty_violation();
   drErrHash[xc(UHV_59)] = Error_UHV_59;
   Error_UHV_60 = empty_violation();
   drErrHash[xc(UHV_60)] = Error_UHV_60;
   Error_UHV_61 = empty_violation();
   drErrHash[xc(UHV_61)] = Error_UHV_61;
   Error_UHV_62 = empty_violation();
   drErrHash[xc(UHV_62)] = Error_UHV_62;
   Error_UHV_63 = empty_violation();
   drErrHash[xc(UHV_63)] = Error_UHV_63;
   Error_UL1_01 = empty_violation();
   drErrHash[xc(UL1_01)] = Error_UL1_01;
   Error_UL1_05 = empty_violation();
   drErrHash[xc(UL1_05)] = Error_UL1_05;
   Error_UL1_06 = empty_violation();
   drErrHash[xc(UL1_06)] = Error_UL1_06;
   Error_UL1_07 = empty_violation();
   drErrHash[xc(UL1_07)] = Error_UL1_07;
   Error_UL1_08 = empty_violation();
   drErrHash[xc(UL1_08)] = Error_UL1_08;
   Error_UL1_09 = empty_violation();
   drErrHash[xc(UL1_09)] = Error_UL1_09;
   Error_UL1_10 = empty_violation();
   drErrHash[xc(UL1_10)] = Error_UL1_10;
   Error_UL1_11 = empty_violation();
   drErrHash[xc(UL1_11)] = Error_UL1_11;
   Error_UL1_116 = empty_violation();
   drErrHash[xc(UL1_116)] = Error_UL1_116;
   Error_UL1_12 = empty_violation();
   drErrHash[xc(UL1_12)] = Error_UL1_12;
   Error_UL1_13 = empty_violation();
   drErrHash[xc(UL1_13)] = Error_UL1_13;
   Error_UL1_14 = empty_violation();
   drErrHash[xc(UL1_14)] = Error_UL1_14;
   Error_UL1_15 = empty_violation();
   drErrHash[xc(UL1_15)] = Error_UL1_15;
   Error_UL1_16 = empty_violation();
   drErrHash[xc(UL1_16)] = Error_UL1_16;
   Error_UL1_17 = empty_violation();
   drErrHash[xc(UL1_17)] = Error_UL1_17;
   Error_UL1_31 = empty_violation();
   drErrHash[xc(UL1_31)] = Error_UL1_31;
   Error_UL1_32 = empty_violation();
   drErrHash[xc(UL1_32)] = Error_UL1_32;
   Error_UL1_33 = empty_violation();
   drErrHash[xc(UL1_33)] = Error_UL1_33;
   Error_UL1_34 = empty_violation();
   drErrHash[xc(UL1_34)] = Error_UL1_34;
   Error_UNW_14 = empty_violation();
   drErrHash[xc(UNW_14)] = Error_UNW_14;
   Error_UNW_21 = empty_violation();
   drErrHash[xc(UNW_21)] = Error_UNW_21;
   Error_UNW_22 = empty_violation();
   drErrHash[xc(UNW_22)] = Error_UNW_22;
   Error_UV0_01 = empty_violation();
   drErrHash[xc(UV0_01)] = Error_UV0_01;
   Error_UV0_05 = empty_violation();
   drErrHash[xc(UV0_05)] = Error_UV0_05;
   Error_UV0_06 = empty_violation();
   drErrHash[xc(UV0_06)] = Error_UV0_06;
   Error_UV0_07 = empty_violation();
   drErrHash[xc(UV0_07)] = Error_UV0_07;
   Error_UV0_08 = empty_violation();
   drErrHash[xc(UV0_08)] = Error_UV0_08;
   Error_UV0_09 = empty_violation();
   drErrHash[xc(UV0_09)] = Error_UV0_09;
   Error_UV0_10 = empty_violation();
   drErrHash[xc(UV0_10)] = Error_UV0_10;
   Error_UV0_11 = empty_violation();
   drErrHash[xc(UV0_11)] = Error_UV0_11;
   Error_UV0_116 = empty_violation();
   drErrHash[xc(UV0_116)] = Error_UV0_116;
   Error_UV0_12 = empty_violation();
   drErrHash[xc(UV0_12)] = Error_UV0_12;
   Error_UV0_13 = empty_violation();
   drErrHash[xc(UV0_13)] = Error_UV0_13;
   Error_UV0_14 = empty_violation();
   drErrHash[xc(UV0_14)] = Error_UV0_14;
   Error_UV0_15 = empty_violation();
   drErrHash[xc(UV0_15)] = Error_UV0_15;
   Error_UV0_16 = empty_violation();
   drErrHash[xc(UV0_16)] = Error_UV0_16;
   Error_UV0_17 = empty_violation();
   drErrHash[xc(UV0_17)] = Error_UV0_17;
   Error_UV0_31 = empty_violation();
   drErrHash[xc(UV0_31)] = Error_UV0_31;
   Error_UV0_32 = empty_violation();
   drErrHash[xc(UV0_32)] = Error_UV0_32;
   Error_UV0_33 = empty_violation();
   drErrHash[xc(UV0_33)] = Error_UV0_33;
   Error_UV0_34 = empty_violation();
   drErrHash[xc(UV0_34)] = Error_UV0_34;
   Error_UV1_01 = empty_violation();
   drErrHash[xc(UV1_01)] = Error_UV1_01;
   Error_UV1_05 = empty_violation();
   drErrHash[xc(UV1_05)] = Error_UV1_05;
   Error_UV1_06 = empty_violation();
   drErrHash[xc(UV1_06)] = Error_UV1_06;
   Error_UV1_07 = empty_violation();
   drErrHash[xc(UV1_07)] = Error_UV1_07;
   Error_UV1_08 = empty_violation();
   drErrHash[xc(UV1_08)] = Error_UV1_08;
   Error_UV1_09 = empty_violation();
   drErrHash[xc(UV1_09)] = Error_UV1_09;
   Error_UV1_10 = empty_violation();
   drErrHash[xc(UV1_10)] = Error_UV1_10;
   Error_UV1_11 = empty_violation();
   drErrHash[xc(UV1_11)] = Error_UV1_11;
   Error_UV1_116 = empty_violation();
   drErrHash[xc(UV1_116)] = Error_UV1_116;
   Error_UV1_12 = empty_violation();
   drErrHash[xc(UV1_12)] = Error_UV1_12;
   Error_UV1_13 = empty_violation();
   drErrHash[xc(UV1_13)] = Error_UV1_13;
   Error_UV1_14 = empty_violation();
   drErrHash[xc(UV1_14)] = Error_UV1_14;
   Error_UV1_15 = empty_violation();
   drErrHash[xc(UV1_15)] = Error_UV1_15;
   Error_UV1_16 = empty_violation();
   drErrHash[xc(UV1_16)] = Error_UV1_16;
   Error_UV1_17 = empty_violation();
   drErrHash[xc(UV1_17)] = Error_UV1_17;
   Error_UV1_31 = empty_violation();
   drErrHash[xc(UV1_31)] = Error_UV1_31;
   Error_UV1_32 = empty_violation();
   drErrHash[xc(UV1_32)] = Error_UV1_32;
   Error_UV1_33 = empty_violation();
   drErrHash[xc(UV1_33)] = Error_UV1_33;
   Error_UV1_34 = empty_violation();
   drErrHash[xc(UV1_34)] = Error_UV1_34;
   Error_UV2_01 = empty_violation();
   drErrHash[xc(UV2_01)] = Error_UV2_01;
   Error_UV2_05 = empty_violation();
   drErrHash[xc(UV2_05)] = Error_UV2_05;
   Error_UV2_06 = empty_violation();
   drErrHash[xc(UV2_06)] = Error_UV2_06;
   Error_UV2_07 = empty_violation();
   drErrHash[xc(UV2_07)] = Error_UV2_07;
   Error_UV2_08 = empty_violation();
   drErrHash[xc(UV2_08)] = Error_UV2_08;
   Error_UV2_09 = empty_violation();
   drErrHash[xc(UV2_09)] = Error_UV2_09;
   Error_UV2_10 = empty_violation();
   drErrHash[xc(UV2_10)] = Error_UV2_10;
   Error_UV2_11 = empty_violation();
   drErrHash[xc(UV2_11)] = Error_UV2_11;
   Error_UV2_116 = empty_violation();
   drErrHash[xc(UV2_116)] = Error_UV2_116;
   Error_UV2_12 = empty_violation();
   drErrHash[xc(UV2_12)] = Error_UV2_12;
   Error_UV2_13 = empty_violation();
   drErrHash[xc(UV2_13)] = Error_UV2_13;
   Error_UV2_14 = empty_violation();
   drErrHash[xc(UV2_14)] = Error_UV2_14;
   Error_UV2_15 = empty_violation();
   drErrHash[xc(UV2_15)] = Error_UV2_15;
   Error_UV2_16 = empty_violation();
   drErrHash[xc(UV2_16)] = Error_UV2_16;
   Error_UV2_17 = empty_violation();
   drErrHash[xc(UV2_17)] = Error_UV2_17;
   Error_UV2_31 = empty_violation();
   drErrHash[xc(UV2_31)] = Error_UV2_31;
   Error_UV2_32 = empty_violation();
   drErrHash[xc(UV2_32)] = Error_UV2_32;
   Error_UV2_33 = empty_violation();
   drErrHash[xc(UV2_33)] = Error_UV2_33;
   Error_UV2_34 = empty_violation();
   drErrHash[xc(UV2_34)] = Error_UV2_34;
   Error_UV3_01 = empty_violation();
   drErrHash[xc(UV3_01)] = Error_UV3_01;
   Error_UV3_05 = empty_violation();
   drErrHash[xc(UV3_05)] = Error_UV3_05;
   Error_UV3_06 = empty_violation();
   drErrHash[xc(UV3_06)] = Error_UV3_06;
   Error_UV3_07 = empty_violation();
   drErrHash[xc(UV3_07)] = Error_UV3_07;
   Error_UV3_08 = empty_violation();
   drErrHash[xc(UV3_08)] = Error_UV3_08;
   Error_UV3_09 = empty_violation();
   drErrHash[xc(UV3_09)] = Error_UV3_09;
   Error_UV3_10 = empty_violation();
   drErrHash[xc(UV3_10)] = Error_UV3_10;
   Error_UV3_11 = empty_violation();
   drErrHash[xc(UV3_11)] = Error_UV3_11;
   Error_UV3_116 = empty_violation();
   drErrHash[xc(UV3_116)] = Error_UV3_116;
   Error_UV3_12 = empty_violation();
   drErrHash[xc(UV3_12)] = Error_UV3_12;
   Error_UV3_13 = empty_violation();
   drErrHash[xc(UV3_13)] = Error_UV3_13;
   Error_UV3_14 = empty_violation();
   drErrHash[xc(UV3_14)] = Error_UV3_14;
   Error_UV3_15 = empty_violation();
   drErrHash[xc(UV3_15)] = Error_UV3_15;
   Error_UV3_16 = empty_violation();
   drErrHash[xc(UV3_16)] = Error_UV3_16;
   Error_UV3_17 = empty_violation();
   drErrHash[xc(UV3_17)] = Error_UV3_17;
   Error_UV3_31 = empty_violation();
   drErrHash[xc(UV3_31)] = Error_UV3_31;
   Error_UV3_32 = empty_violation();
   drErrHash[xc(UV3_32)] = Error_UV3_32;
   Error_UV3_33 = empty_violation();
   drErrHash[xc(UV3_33)] = Error_UV3_33;
   Error_UV3_34 = empty_violation();
   drErrHash[xc(UV3_34)] = Error_UV3_34;
   Error_V0P_02 = empty_violation();
   drErrHash[xc(V0P_02)] = Error_V0P_02;
   Error_V0P_102 = empty_violation();
   drErrHash[xc(V0P_102)] = Error_V0P_102;
   Error_V0T_10 = empty_violation();
   drErrHash[xc(V0T_10)] = Error_V0T_10;
   Error_V0T_11 = empty_violation();
   drErrHash[xc(V0T_11)] = Error_V0T_11;
   Error_V0T_12 = empty_violation();
   drErrHash[xc(V0T_12)] = Error_V0T_12;
   Error_V0T_20 = empty_violation();
   drErrHash[xc(V0T_20)] = Error_V0T_20;
   Error_V0T_21 = empty_violation();
   drErrHash[xc(V0T_21)] = Error_V0T_21;
   Error_V0T_22 = empty_violation();
   drErrHash[xc(V0T_22)] = Error_V0T_22;
   Error_V0_01 = empty_violation();
   drErrHash[xc(V0_01)] = Error_V0_01;
   Error_V0_02 = empty_violation();
   drErrHash[xc(V0_02)] = Error_V0_02;
   Error_V0_03 = empty_violation();
   drErrHash[xc(V0_03)] = Error_V0_03;
   Error_V0_04 = empty_violation();
   drErrHash[xc(V0_04)] = Error_V0_04;
   Error_V0_05 = empty_violation();
   drErrHash[xc(V0_05)] = Error_V0_05;
   Error_V0_06 = empty_violation();
   drErrHash[xc(V0_06)] = Error_V0_06;
   Error_V0_07 = empty_violation();
   drErrHash[xc(V0_07)] = Error_V0_07;
   Error_V0_08 = empty_violation();
   drErrHash[xc(V0_08)] = Error_V0_08;
   Error_V0_09 = empty_violation();
   drErrHash[xc(V0_09)] = Error_V0_09;
   Error_V0_10 = empty_violation();
   drErrHash[xc(V0_10)] = Error_V0_10;
   Error_V0_101 = empty_violation();
   drErrHash[xc(V0_101)] = Error_V0_101;
   Error_V0_102 = empty_violation();
   drErrHash[xc(V0_102)] = Error_V0_102;
   Error_V0_103 = empty_violation();
   drErrHash[xc(V0_103)] = Error_V0_103;
   Error_V0_104 = empty_violation();
   drErrHash[xc(V0_104)] = Error_V0_104;
   Error_V0_105 = empty_violation();
   drErrHash[xc(V0_105)] = Error_V0_105;
   Error_V0_106 = empty_violation();
   drErrHash[xc(V0_106)] = Error_V0_106;
   Error_V0_107 = empty_violation();
   drErrHash[xc(V0_107)] = Error_V0_107;
   Error_V0_108 = empty_violation();
   drErrHash[xc(V0_108)] = Error_V0_108;
   Error_V0_111 = empty_violation();
   drErrHash[xc(V0_111)] = Error_V0_111;
   Error_V0_122 = empty_violation();
   drErrHash[xc(V0_122)] = Error_V0_122;
   Error_V0_142 = empty_violation();
   drErrHash[xc(V0_142)] = Error_V0_142;
   Error_V0_171 = empty_violation();
   drErrHash[xc(V0_171)] = Error_V0_171;
   Error_V0_19 = empty_violation();
   drErrHash[xc(V0_19)] = Error_V0_19;
   Error_V0_22 = empty_violation();
   drErrHash[xc(V0_22)] = Error_V0_22;
   Error_V0_23 = empty_violation();
   drErrHash[xc(V0_23)] = Error_V0_23;
   Error_V0_24 = empty_violation();
   drErrHash[xc(V0_24)] = Error_V0_24;
   Error_V0_242 = empty_violation();
   drErrHash[xc(V0_242)] = Error_V0_242;
   Error_V0_25 = empty_violation();
   drErrHash[xc(V0_25)] = Error_V0_25;
   Error_V0_250 = empty_violation();
   drErrHash[xc(V0_250)] = Error_V0_250;
   Error_V0_252 = empty_violation();
   drErrHash[xc(V0_252)] = Error_V0_252;
   Error_V0_26 = empty_violation();
   drErrHash[xc(V0_26)] = Error_V0_26;
   Error_V0_27 = empty_violation();
   drErrHash[xc(V0_27)] = Error_V0_27;
   Error_V0_28 = empty_violation();
   drErrHash[xc(V0_28)] = Error_V0_28;
   Error_V0_29 = empty_violation();
   drErrHash[xc(V0_29)] = Error_V0_29;
   Error_V0_30 = empty_violation();
   drErrHash[xc(V0_30)] = Error_V0_30;
   Error_V0_31 = empty_violation();
   drErrHash[xc(V0_31)] = Error_V0_31;
   Error_V0_32 = empty_violation();
   drErrHash[xc(V0_32)] = Error_V0_32;
   Error_V0_328 = empty_violation();
   drErrHash[xc(V0_328)] = Error_V0_328;
   Error_V0_33 = empty_violation();
   drErrHash[xc(V0_33)] = Error_V0_33;
   Error_V0_40 = empty_violation();
   drErrHash[xc(V0_40)] = Error_V0_40;
   Error_V0_42 = empty_violation();
   drErrHash[xc(V0_42)] = Error_V0_42;
   Error_V0_43 = empty_violation();
   drErrHash[xc(V0_43)] = Error_V0_43;
   Error_V0_49 = empty_violation();
   drErrHash[xc(V0_49)] = Error_V0_49;
   Error_V0_61 = empty_violation();
   drErrHash[xc(V0_61)] = Error_V0_61;
   Error_V0_62 = empty_violation();
   drErrHash[xc(V0_62)] = Error_V0_62;
   Error_V0_63 = empty_violation();
   drErrHash[xc(V0_63)] = Error_V0_63;
   Error_V0_64 = empty_violation();
   drErrHash[xc(V0_64)] = Error_V0_64;
   Error_V0_66 = empty_violation();
   drErrHash[xc(V0_66)] = Error_V0_66;
   Error_V0_69 = empty_violation();
   drErrHash[xc(V0_69)] = Error_V0_69;
   Error_V0_70 = empty_violation();
   drErrHash[xc(V0_70)] = Error_V0_70;
   Error_V0_71 = empty_violation();
   drErrHash[xc(V0_71)] = Error_V0_71;
   Error_V0_840 = empty_violation();
   drErrHash[xc(V0_840)] = Error_V0_840;
   Error_V0_98 = empty_violation();
   drErrHash[xc(V0_98)] = Error_V0_98;
   Error_V0_99 = empty_violation();
   drErrHash[xc(V0_99)] = Error_V0_99;
   Error_V10_01 = empty_violation();
   drErrHash[xc(V10_01)] = Error_V10_01;
   Error_V10_02 = empty_violation();
   drErrHash[xc(V10_02)] = Error_V10_02;
   Error_V10_11 = empty_violation();
   drErrHash[xc(V10_11)] = Error_V10_11;
   Error_V10_12 = empty_violation();
   drErrHash[xc(V10_12)] = Error_V10_12;
   Error_V10_21 = empty_violation();
   drErrHash[xc(V10_21)] = Error_V10_21;
   Error_V10_31 = empty_violation();
   drErrHash[xc(V10_31)] = Error_V10_31;
   Error_V10_32 = empty_violation();
   drErrHash[xc(V10_32)] = Error_V10_32;
   Error_V10_33 = empty_violation();
   drErrHash[xc(V10_33)] = Error_V10_33;
   Error_V10_34 = empty_violation();
   drErrHash[xc(V10_34)] = Error_V10_34;
   Error_V10_35 = empty_violation();
   drErrHash[xc(V10_35)] = Error_V10_35;
   Error_V10_39 = empty_violation();
   drErrHash[xc(V10_39)] = Error_V10_39;
   Error_V10_40 = empty_violation();
   drErrHash[xc(V10_40)] = Error_V10_40;
   Error_V10_41 = empty_violation();
   drErrHash[xc(V10_41)] = Error_V10_41;
   Error_V10_51 = empty_violation();
   drErrHash[xc(V10_51)] = Error_V10_51;
   Error_V10_52 = empty_violation();
   drErrHash[xc(V10_52)] = Error_V10_52;
   Error_V10_61 = empty_violation();
   drErrHash[xc(V10_61)] = Error_V10_61;
   Error_V10_62 = empty_violation();
   drErrHash[xc(V10_62)] = Error_V10_62;
   Error_V10_71 = empty_violation();
   drErrHash[xc(V10_71)] = Error_V10_71;
   Error_V10_72 = empty_violation();
   drErrHash[xc(V10_72)] = Error_V10_72;
   Error_V11_01 = empty_violation();
   drErrHash[xc(V11_01)] = Error_V11_01;
   Error_V11_02 = empty_violation();
   drErrHash[xc(V11_02)] = Error_V11_02;
   Error_V11_11 = empty_violation();
   drErrHash[xc(V11_11)] = Error_V11_11;
   Error_V11_12 = empty_violation();
   drErrHash[xc(V11_12)] = Error_V11_12;
   Error_V11_31 = empty_violation();
   drErrHash[xc(V11_31)] = Error_V11_31;
   Error_V11_32 = empty_violation();
   drErrHash[xc(V11_32)] = Error_V11_32;
   Error_V11_33 = empty_violation();
   drErrHash[xc(V11_33)] = Error_V11_33;
   Error_V11_34 = empty_violation();
   drErrHash[xc(V11_34)] = Error_V11_34;
   Error_V11_40 = empty_violation();
   drErrHash[xc(V11_40)] = Error_V11_40;
   Error_V11_41 = empty_violation();
   drErrHash[xc(V11_41)] = Error_V11_41;
   Error_V11_51 = empty_violation();
   drErrHash[xc(V11_51)] = Error_V11_51;
   Error_V11_52 = empty_violation();
   drErrHash[xc(V11_52)] = Error_V11_52;
   Error_V12_31 = empty_violation();
   drErrHash[xc(V12_31)] = Error_V12_31;
   Error_V12_32 = empty_violation();
   drErrHash[xc(V12_32)] = Error_V12_32;
   Error_V12_33 = empty_violation();
   drErrHash[xc(V12_33)] = Error_V12_33;
   Error_V12_34 = empty_violation();
   drErrHash[xc(V12_34)] = Error_V12_34;
   Error_V12_40 = empty_violation();
   drErrHash[xc(V12_40)] = Error_V12_40;
   Error_V12_41 = empty_violation();
   drErrHash[xc(V12_41)] = Error_V12_41;
   Error_V12_51 = empty_violation();
   drErrHash[xc(V12_51)] = Error_V12_51;
   Error_V1H_01 = empty_violation();
   drErrHash[xc(V1H_01)] = Error_V1H_01;
   Error_V1H_02 = empty_violation();
   drErrHash[xc(V1H_02)] = Error_V1H_02;
   Error_V1H_05 = empty_violation();
   drErrHash[xc(V1H_05)] = Error_V1H_05;
   Error_V1H_08 = empty_violation();
   drErrHash[xc(V1H_08)] = Error_V1H_08;
   Error_V1H_09 = empty_violation();
   drErrHash[xc(V1H_09)] = Error_V1H_09;
   Error_V1H_10 = empty_violation();
   drErrHash[xc(V1H_10)] = Error_V1H_10;
   Error_V1H_11 = empty_violation();
   drErrHash[xc(V1H_11)] = Error_V1H_11;
   Error_V1H_12 = empty_violation();
   drErrHash[xc(V1H_12)] = Error_V1H_12;
   Error_V1T_01 = empty_violation();
   drErrHash[xc(V1T_01)] = Error_V1T_01;
   Error_V1T_02 = empty_violation();
   drErrHash[xc(V1T_02)] = Error_V1T_02;
   Error_V1T_03 = empty_violation();
   drErrHash[xc(V1T_03)] = Error_V1T_03;
   Error_V1T_11 = empty_violation();
   drErrHash[xc(V1T_11)] = Error_V1T_11;
   Error_V1T_20 = empty_violation();
   drErrHash[xc(V1T_20)] = Error_V1T_20;
   Error_V1_01 = empty_violation();
   drErrHash[xc(V1_01)] = Error_V1_01;
   Error_V1_02 = empty_violation();
   drErrHash[xc(V1_02)] = Error_V1_02;
   Error_V1_03 = empty_violation();
   drErrHash[xc(V1_03)] = Error_V1_03;
   Error_V1_04 = empty_violation();
   drErrHash[xc(V1_04)] = Error_V1_04;
   Error_V1_05 = empty_violation();
   drErrHash[xc(V1_05)] = Error_V1_05;
   Error_V1_06 = empty_violation();
   drErrHash[xc(V1_06)] = Error_V1_06;
   Error_V1_07 = empty_violation();
   drErrHash[xc(V1_07)] = Error_V1_07;
   Error_V1_08 = empty_violation();
   drErrHash[xc(V1_08)] = Error_V1_08;
   Error_V1_10 = empty_violation();
   drErrHash[xc(V1_10)] = Error_V1_10;
   Error_V1_124 = empty_violation();
   drErrHash[xc(V1_124)] = Error_V1_124;
   Error_V1_125 = empty_violation();
   drErrHash[xc(V1_125)] = Error_V1_125;
   Error_V1_128 = empty_violation();
   drErrHash[xc(V1_128)] = Error_V1_128;
   Error_V1_13 = empty_violation();
   drErrHash[xc(V1_13)] = Error_V1_13;
   Error_V1_14 = empty_violation();
   drErrHash[xc(V1_14)] = Error_V1_14;
   Error_V1_140 = empty_violation();
   drErrHash[xc(V1_140)] = Error_V1_140;
   Error_V1_142 = empty_violation();
   drErrHash[xc(V1_142)] = Error_V1_142;
   Error_V1_15 = empty_violation();
   drErrHash[xc(V1_15)] = Error_V1_15;
   Error_V1_16 = empty_violation();
   drErrHash[xc(V1_16)] = Error_V1_16;
   Error_V1_17 = empty_violation();
   drErrHash[xc(V1_17)] = Error_V1_17;
   Error_V1_20 = empty_violation();
   drErrHash[xc(V1_20)] = Error_V1_20;
   Error_V1_22 = empty_violation();
   drErrHash[xc(V1_22)] = Error_V1_22;
   Error_V1_225 = empty_violation();
   drErrHash[xc(V1_225)] = Error_V1_225;
   Error_V1_226 = empty_violation();
   drErrHash[xc(V1_226)] = Error_V1_226;
   Error_V1_227 = empty_violation();
   drErrHash[xc(V1_227)] = Error_V1_227;
   Error_V1_23 = empty_violation();
   drErrHash[xc(V1_23)] = Error_V1_23;
   Error_V1_24 = empty_violation();
   drErrHash[xc(V1_24)] = Error_V1_24;
   Error_V1_25 = empty_violation();
   drErrHash[xc(V1_25)] = Error_V1_25;
   Error_V1_26 = empty_violation();
   drErrHash[xc(V1_26)] = Error_V1_26;
   Error_V1_28 = empty_violation();
   drErrHash[xc(V1_28)] = Error_V1_28;
   Error_V1_301 = empty_violation();
   drErrHash[xc(V1_301)] = Error_V1_301;
   Error_V1_302 = empty_violation();
   drErrHash[xc(V1_302)] = Error_V1_302;
   Error_V1_303 = empty_violation();
   drErrHash[xc(V1_303)] = Error_V1_303;
   Error_V1_32 = empty_violation();
   drErrHash[xc(V1_32)] = Error_V1_32;
   Error_V1_33 = empty_violation();
   drErrHash[xc(V1_33)] = Error_V1_33;
   Error_V1_40 = empty_violation();
   drErrHash[xc(V1_40)] = Error_V1_40;
   Error_V1_42 = empty_violation();
   drErrHash[xc(V1_42)] = Error_V1_42;
   Error_V1_43 = empty_violation();
   drErrHash[xc(V1_43)] = Error_V1_43;
   Error_V1_49 = empty_violation();
   drErrHash[xc(V1_49)] = Error_V1_49;
   Error_V1_50 = empty_violation();
   drErrHash[xc(V1_50)] = Error_V1_50;
   Error_V1_52 = empty_violation();
   drErrHash[xc(V1_52)] = Error_V1_52;
   Error_V1_53 = empty_violation();
   drErrHash[xc(V1_53)] = Error_V1_53;
   Error_V1_54 = empty_violation();
   drErrHash[xc(V1_54)] = Error_V1_54;
   Error_V1_55 = empty_violation();
   drErrHash[xc(V1_55)] = Error_V1_55;
   Error_V1_56 = empty_violation();
   drErrHash[xc(V1_56)] = Error_V1_56;
   Error_V1_61 = empty_violation();
   drErrHash[xc(V1_61)] = Error_V1_61;
   Error_V1_97 = empty_violation();
   drErrHash[xc(V1_97)] = Error_V1_97;
   Error_V1_98 = empty_violation();
   drErrHash[xc(V1_98)] = Error_V1_98;
   Error_V2H_01 = empty_violation();
   drErrHash[xc(V2H_01)] = Error_V2H_01;
   Error_V2H_02 = empty_violation();
   drErrHash[xc(V2H_02)] = Error_V2H_02;
   Error_V2H_03 = empty_violation();
   drErrHash[xc(V2H_03)] = Error_V2H_03;
   Error_V2H_04 = empty_violation();
   drErrHash[xc(V2H_04)] = Error_V2H_04;
   Error_V2H_05 = empty_violation();
   drErrHash[xc(V2H_05)] = Error_V2H_05;
   Error_V2H_06 = empty_violation();
   drErrHash[xc(V2H_06)] = Error_V2H_06;
   Error_V2H_07 = empty_violation();
   drErrHash[xc(V2H_07)] = Error_V2H_07;
   Error_V2H_08 = empty_violation();
   drErrHash[xc(V2H_08)] = Error_V2H_08;
   Error_V2H_10 = empty_violation();
   drErrHash[xc(V2H_10)] = Error_V2H_10;
   Error_V2H_11 = empty_violation();
   drErrHash[xc(V2H_11)] = Error_V2H_11;
   Error_V2H_12 = empty_violation();
   drErrHash[xc(V2H_12)] = Error_V2H_12;
   Error_V2H_13 = empty_violation();
   drErrHash[xc(V2H_13)] = Error_V2H_13;
   Error_V2H_14 = empty_violation();
   drErrHash[xc(V2H_14)] = Error_V2H_14;
   Error_V2H_15 = empty_violation();
   drErrHash[xc(V2H_15)] = Error_V2H_15;
   Error_V2H_16 = empty_violation();
   drErrHash[xc(V2H_16)] = Error_V2H_16;
   Error_V2H_20 = empty_violation();
   drErrHash[xc(V2H_20)] = Error_V2H_20;
   Error_V2T_01 = empty_violation();
   drErrHash[xc(V2T_01)] = Error_V2T_01;
   Error_V2T_02 = empty_violation();
   drErrHash[xc(V2T_02)] = Error_V2T_02;
   Error_V2T_03 = empty_violation();
   drErrHash[xc(V2T_03)] = Error_V2T_03;
   Error_V2T_04 = empty_violation();
   drErrHash[xc(V2T_04)] = Error_V2T_04;
   Error_V2T_05 = empty_violation();
   drErrHash[xc(V2T_05)] = Error_V2T_05;
   Error_V2T_06 = empty_violation();
   drErrHash[xc(V2T_06)] = Error_V2T_06;
   Error_V2T_20 = empty_violation();
   drErrHash[xc(V2T_20)] = Error_V2T_20;
   Error_V2_01 = empty_violation();
   drErrHash[xc(V2_01)] = Error_V2_01;
   Error_V2_02 = empty_violation();
   drErrHash[xc(V2_02)] = Error_V2_02;
   Error_V2_03 = empty_violation();
   drErrHash[xc(V2_03)] = Error_V2_03;
   Error_V2_04 = empty_violation();
   drErrHash[xc(V2_04)] = Error_V2_04;
   Error_V2_05 = empty_violation();
   drErrHash[xc(V2_05)] = Error_V2_05;
   Error_V2_06 = empty_violation();
   drErrHash[xc(V2_06)] = Error_V2_06;
   Error_V2_07 = empty_violation();
   drErrHash[xc(V2_07)] = Error_V2_07;
   Error_V2_08 = empty_violation();
   drErrHash[xc(V2_08)] = Error_V2_08;
   Error_V2_09 = empty_violation();
   drErrHash[xc(V2_09)] = Error_V2_09;
   Error_V2_10 = empty_violation();
   drErrHash[xc(V2_10)] = Error_V2_10;
   Error_V2_11 = empty_violation();
   drErrHash[xc(V2_11)] = Error_V2_11;
   Error_V2_116 = empty_violation();
   drErrHash[xc(V2_116)] = Error_V2_116;
   Error_V2_117 = empty_violation();
   drErrHash[xc(V2_117)] = Error_V2_117;
   Error_V2_118 = empty_violation();
   drErrHash[xc(V2_118)] = Error_V2_118;
   Error_V2_119 = empty_violation();
   drErrHash[xc(V2_119)] = Error_V2_119;
   Error_V2_12 = empty_violation();
   drErrHash[xc(V2_12)] = Error_V2_12;
   Error_V2_120 = empty_violation();
   drErrHash[xc(V2_120)] = Error_V2_120;
   Error_V2_121 = empty_violation();
   drErrHash[xc(V2_121)] = Error_V2_121;
   Error_V2_122 = empty_violation();
   drErrHash[xc(V2_122)] = Error_V2_122;
   Error_V2_123 = empty_violation();
   drErrHash[xc(V2_123)] = Error_V2_123;
   Error_V2_124 = empty_violation();
   drErrHash[xc(V2_124)] = Error_V2_124;
   Error_V2_127 = empty_violation();
   drErrHash[xc(V2_127)] = Error_V2_127;
   Error_V2_128 = empty_violation();
   drErrHash[xc(V2_128)] = Error_V2_128;
   Error_V2_129 = empty_violation();
   drErrHash[xc(V2_129)] = Error_V2_129;
   Error_V2_13 = empty_violation();
   drErrHash[xc(V2_13)] = Error_V2_13;
   Error_V2_130 = empty_violation();
   drErrHash[xc(V2_130)] = Error_V2_130;
   Error_V2_131 = empty_violation();
   drErrHash[xc(V2_131)] = Error_V2_131;
   Error_V2_132 = empty_violation();
   drErrHash[xc(V2_132)] = Error_V2_132;
   Error_V2_133 = empty_violation();
   drErrHash[xc(V2_133)] = Error_V2_133;
   Error_V2_134 = empty_violation();
   drErrHash[xc(V2_134)] = Error_V2_134;
   Error_V2_135 = empty_violation();
   drErrHash[xc(V2_135)] = Error_V2_135;
   Error_V2_136 = empty_violation();
   drErrHash[xc(V2_136)] = Error_V2_136;
   Error_V2_137 = empty_violation();
   drErrHash[xc(V2_137)] = Error_V2_137;
   Error_V2_138 = empty_violation();
   drErrHash[xc(V2_138)] = Error_V2_138;
   Error_V2_139 = empty_violation();
   drErrHash[xc(V2_139)] = Error_V2_139;
   Error_V2_14 = empty_violation();
   drErrHash[xc(V2_14)] = Error_V2_14;
   Error_V2_140 = empty_violation();
   drErrHash[xc(V2_140)] = Error_V2_140;
   Error_V2_141 = empty_violation();
   drErrHash[xc(V2_141)] = Error_V2_141;
   Error_V2_142 = empty_violation();
   drErrHash[xc(V2_142)] = Error_V2_142;
   Error_V2_143 = empty_violation();
   drErrHash[xc(V2_143)] = Error_V2_143;
   Error_V2_144 = empty_violation();
   drErrHash[xc(V2_144)] = Error_V2_144;
   Error_V2_145 = empty_violation();
   drErrHash[xc(V2_145)] = Error_V2_145;
   Error_V2_146 = empty_violation();
   drErrHash[xc(V2_146)] = Error_V2_146;
   Error_V2_147 = empty_violation();
   drErrHash[xc(V2_147)] = Error_V2_147;
   Error_V2_148 = empty_violation();
   drErrHash[xc(V2_148)] = Error_V2_148;
   Error_V2_149 = empty_violation();
   drErrHash[xc(V2_149)] = Error_V2_149;
   Error_V2_150 = empty_violation();
   drErrHash[xc(V2_150)] = Error_V2_150;
   Error_V2_152 = empty_violation();
   drErrHash[xc(V2_152)] = Error_V2_152;
   Error_V2_16 = empty_violation();
   drErrHash[xc(V2_16)] = Error_V2_16;
   Error_V2_161 = empty_violation();
   drErrHash[xc(V2_161)] = Error_V2_161;
   Error_V2_162 = empty_violation();
   drErrHash[xc(V2_162)] = Error_V2_162;
   Error_V2_163 = empty_violation();
   drErrHash[xc(V2_163)] = Error_V2_163;
   Error_V2_164 = empty_violation();
   drErrHash[xc(V2_164)] = Error_V2_164;
   Error_V2_165 = empty_violation();
   drErrHash[xc(V2_165)] = Error_V2_165;
   Error_V2_166 = empty_violation();
   drErrHash[xc(V2_166)] = Error_V2_166;
   Error_V2_17 = empty_violation();
   drErrHash[xc(V2_17)] = Error_V2_17;
   Error_V2_172 = empty_violation();
   drErrHash[xc(V2_172)] = Error_V2_172;
   Error_V2_18 = empty_violation();
   drErrHash[xc(V2_18)] = Error_V2_18;
   Error_V2_19 = empty_violation();
   drErrHash[xc(V2_19)] = Error_V2_19;
   Error_V2_20 = empty_violation();
   drErrHash[xc(V2_20)] = Error_V2_20;
   Error_V2_22 = empty_violation();
   drErrHash[xc(V2_22)] = Error_V2_22;
   Error_V2_228 = empty_violation();
   drErrHash[xc(V2_228)] = Error_V2_228;
   Error_V2_23 = empty_violation();
   drErrHash[xc(V2_23)] = Error_V2_23;
   Error_V2_24 = empty_violation();
   drErrHash[xc(V2_24)] = Error_V2_24;
   Error_V2_240 = empty_violation();
   drErrHash[xc(V2_240)] = Error_V2_240;
   Error_V2_241 = empty_violation();
   drErrHash[xc(V2_241)] = Error_V2_241;
   Error_V2_250 = empty_violation();
   drErrHash[xc(V2_250)] = Error_V2_250;
   Error_V2_251 = empty_violation();
   drErrHash[xc(V2_251)] = Error_V2_251;
   Error_V2_252 = empty_violation();
   drErrHash[xc(V2_252)] = Error_V2_252;
   Error_V2_28 = empty_violation();
   drErrHash[xc(V2_28)] = Error_V2_28;
   Error_V2_32 = empty_violation();
   drErrHash[xc(V2_32)] = Error_V2_32;
   Error_V2_33 = empty_violation();
   drErrHash[xc(V2_33)] = Error_V2_33;
   Error_V2_40 = empty_violation();
   drErrHash[xc(V2_40)] = Error_V2_40;
   Error_V2_41 = empty_violation();
   drErrHash[xc(V2_41)] = Error_V2_41;
   Error_V2_42 = empty_violation();
   drErrHash[xc(V2_42)] = Error_V2_42;
   Error_V2_43 = empty_violation();
   drErrHash[xc(V2_43)] = Error_V2_43;
   Error_V2_45 = empty_violation();
   drErrHash[xc(V2_45)] = Error_V2_45;
   Error_V2_450 = empty_violation();
   drErrHash[xc(V2_450)] = Error_V2_450;
   Error_V2_451 = empty_violation();
   drErrHash[xc(V2_451)] = Error_V2_451;
   Error_V2_452 = empty_violation();
   drErrHash[xc(V2_452)] = Error_V2_452;
   Error_V2_46 = empty_violation();
   drErrHash[xc(V2_46)] = Error_V2_46;
   Error_V2_49 = empty_violation();
   drErrHash[xc(V2_49)] = Error_V2_49;
   Error_V2_51 = empty_violation();
   drErrHash[xc(V2_51)] = Error_V2_51;
   Error_V2_54 = empty_violation();
   drErrHash[xc(V2_54)] = Error_V2_54;
   Error_V2_61 = empty_violation();
   drErrHash[xc(V2_61)] = Error_V2_61;
   Error_V2_62 = empty_violation();
   drErrHash[xc(V2_62)] = Error_V2_62;
   Error_V2_97 = empty_violation();
   drErrHash[xc(V2_97)] = Error_V2_97;
   Error_V2_98 = empty_violation();
   drErrHash[xc(V2_98)] = Error_V2_98;
   Error_V3H_01 = empty_violation();
   drErrHash[xc(V3H_01)] = Error_V3H_01;
   Error_V3H_02 = empty_violation();
   drErrHash[xc(V3H_02)] = Error_V3H_02;
   Error_V3H_03 = empty_violation();
   drErrHash[xc(V3H_03)] = Error_V3H_03;
   Error_V3H_04 = empty_violation();
   drErrHash[xc(V3H_04)] = Error_V3H_04;
   Error_V3H_05 = empty_violation();
   drErrHash[xc(V3H_05)] = Error_V3H_05;
   Error_V3H_06 = empty_violation();
   drErrHash[xc(V3H_06)] = Error_V3H_06;
   Error_V3H_07 = empty_violation();
   drErrHash[xc(V3H_07)] = Error_V3H_07;
   Error_V3H_08 = empty_violation();
   drErrHash[xc(V3H_08)] = Error_V3H_08;
   Error_V3H_10 = empty_violation();
   drErrHash[xc(V3H_10)] = Error_V3H_10;
   Error_V3H_11 = empty_violation();
   drErrHash[xc(V3H_11)] = Error_V3H_11;
   Error_V3H_12 = empty_violation();
   drErrHash[xc(V3H_12)] = Error_V3H_12;
   Error_V3H_13 = empty_violation();
   drErrHash[xc(V3H_13)] = Error_V3H_13;
   Error_V3H_14 = empty_violation();
   drErrHash[xc(V3H_14)] = Error_V3H_14;
   Error_V3H_15 = empty_violation();
   drErrHash[xc(V3H_15)] = Error_V3H_15;
   Error_V3H_16 = empty_violation();
   drErrHash[xc(V3H_16)] = Error_V3H_16;
   Error_V3H_17 = empty_violation();
   drErrHash[xc(V3H_17)] = Error_V3H_17;
   Error_V3H_18 = empty_violation();
   drErrHash[xc(V3H_18)] = Error_V3H_18;
   Error_V3H_20 = empty_violation();
   drErrHash[xc(V3H_20)] = Error_V3H_20;
   Error_V3T_01 = empty_violation();
   drErrHash[xc(V3T_01)] = Error_V3T_01;
   Error_V3T_02 = empty_violation();
   drErrHash[xc(V3T_02)] = Error_V3T_02;
   Error_V3T_03 = empty_violation();
   drErrHash[xc(V3T_03)] = Error_V3T_03;
   Error_V3T_04 = empty_violation();
   drErrHash[xc(V3T_04)] = Error_V3T_04;
   Error_V3T_05 = empty_violation();
   drErrHash[xc(V3T_05)] = Error_V3T_05;
   Error_V3T_06 = empty_violation();
   drErrHash[xc(V3T_06)] = Error_V3T_06;
   Error_V3T_20 = empty_violation();
   drErrHash[xc(V3T_20)] = Error_V3T_20;
   Error_V3_01 = empty_violation();
   drErrHash[xc(V3_01)] = Error_V3_01;
   Error_V3_02 = empty_violation();
   drErrHash[xc(V3_02)] = Error_V3_02;
   Error_V3_03 = empty_violation();
   drErrHash[xc(V3_03)] = Error_V3_03;
   Error_V3_04 = empty_violation();
   drErrHash[xc(V3_04)] = Error_V3_04;
   Error_V3_05 = empty_violation();
   drErrHash[xc(V3_05)] = Error_V3_05;
   Error_V3_06 = empty_violation();
   drErrHash[xc(V3_06)] = Error_V3_06;
   Error_V3_07 = empty_violation();
   drErrHash[xc(V3_07)] = Error_V3_07;
   Error_V3_08 = empty_violation();
   drErrHash[xc(V3_08)] = Error_V3_08;
   Error_V3_09 = empty_violation();
   drErrHash[xc(V3_09)] = Error_V3_09;
   Error_V3_10 = empty_violation();
   drErrHash[xc(V3_10)] = Error_V3_10;
   Error_V3_101 = empty_violation();
   drErrHash[xc(V3_101)] = Error_V3_101;
   Error_V3_102 = empty_violation();
   drErrHash[xc(V3_102)] = Error_V3_102;
   Error_V3_103 = empty_violation();
   drErrHash[xc(V3_103)] = Error_V3_103;
   Error_V3_104 = empty_violation();
   drErrHash[xc(V3_104)] = Error_V3_104;
   Error_V3_105 = empty_violation();
   drErrHash[xc(V3_105)] = Error_V3_105;
   Error_V3_106 = empty_violation();
   drErrHash[xc(V3_106)] = Error_V3_106;
   Error_V3_107 = empty_violation();
   drErrHash[xc(V3_107)] = Error_V3_107;
   Error_V3_108 = empty_violation();
   drErrHash[xc(V3_108)] = Error_V3_108;
   Error_V3_109 = empty_violation();
   drErrHash[xc(V3_109)] = Error_V3_109;
   Error_V3_11 = empty_violation();
   drErrHash[xc(V3_11)] = Error_V3_11;
   Error_V3_110 = empty_violation();
   drErrHash[xc(V3_110)] = Error_V3_110;
   Error_V3_111 = empty_violation();
   drErrHash[xc(V3_111)] = Error_V3_111;
   Error_V3_112 = empty_violation();
   drErrHash[xc(V3_112)] = Error_V3_112;
   Error_V3_113 = empty_violation();
   drErrHash[xc(V3_113)] = Error_V3_113;
   Error_V3_114 = empty_violation();
   drErrHash[xc(V3_114)] = Error_V3_114;
   Error_V3_12 = empty_violation();
   drErrHash[xc(V3_12)] = Error_V3_12;
   Error_V3_120 = empty_violation();
   drErrHash[xc(V3_120)] = Error_V3_120;
   Error_V3_123 = empty_violation();
   drErrHash[xc(V3_123)] = Error_V3_123;
   Error_V3_124 = empty_violation();
   drErrHash[xc(V3_124)] = Error_V3_124;
   Error_V3_125 = empty_violation();
   drErrHash[xc(V3_125)] = Error_V3_125;
   Error_V3_126 = empty_violation();
   drErrHash[xc(V3_126)] = Error_V3_126;
   Error_V3_127 = empty_violation();
   drErrHash[xc(V3_127)] = Error_V3_127;
   Error_V3_128 = empty_violation();
   drErrHash[xc(V3_128)] = Error_V3_128;
   Error_V3_129 = empty_violation();
   drErrHash[xc(V3_129)] = Error_V3_129;
   Error_V3_13 = empty_violation();
   drErrHash[xc(V3_13)] = Error_V3_13;
   Error_V3_130 = empty_violation();
   drErrHash[xc(V3_130)] = Error_V3_130;
   Error_V3_131 = empty_violation();
   drErrHash[xc(V3_131)] = Error_V3_131;
   Error_V3_132 = empty_violation();
   drErrHash[xc(V3_132)] = Error_V3_132;
   Error_V3_133 = empty_violation();
   drErrHash[xc(V3_133)] = Error_V3_133;
   Error_V3_134 = empty_violation();
   drErrHash[xc(V3_134)] = Error_V3_134;
   Error_V3_135 = empty_violation();
   drErrHash[xc(V3_135)] = Error_V3_135;
   Error_V3_136 = empty_violation();
   drErrHash[xc(V3_136)] = Error_V3_136;
   Error_V3_137 = empty_violation();
   drErrHash[xc(V3_137)] = Error_V3_137;
   Error_V3_138 = empty_violation();
   drErrHash[xc(V3_138)] = Error_V3_138;
   Error_V3_14 = empty_violation();
   drErrHash[xc(V3_14)] = Error_V3_14;
   Error_V3_142 = empty_violation();
   drErrHash[xc(V3_142)] = Error_V3_142;
   Error_V3_15 = empty_violation();
   drErrHash[xc(V3_15)] = Error_V3_15;
   Error_V3_152 = empty_violation();
   drErrHash[xc(V3_152)] = Error_V3_152;
   Error_V3_153 = empty_violation();
   drErrHash[xc(V3_153)] = Error_V3_153;
   Error_V3_154 = empty_violation();
   drErrHash[xc(V3_154)] = Error_V3_154;
   Error_V3_16 = empty_violation();
   drErrHash[xc(V3_16)] = Error_V3_16;
   Error_V3_161 = empty_violation();
   drErrHash[xc(V3_161)] = Error_V3_161;
   Error_V3_162 = empty_violation();
   drErrHash[xc(V3_162)] = Error_V3_162;
   Error_V3_163 = empty_violation();
   drErrHash[xc(V3_163)] = Error_V3_163;
   Error_V3_164 = empty_violation();
   drErrHash[xc(V3_164)] = Error_V3_164;
   Error_V3_165 = empty_violation();
   drErrHash[xc(V3_165)] = Error_V3_165;
   Error_V3_166 = empty_violation();
   drErrHash[xc(V3_166)] = Error_V3_166;
   Error_V3_167 = empty_violation();
   drErrHash[xc(V3_167)] = Error_V3_167;
   Error_V3_168 = empty_violation();
   drErrHash[xc(V3_168)] = Error_V3_168;
   Error_V3_169 = empty_violation();
   drErrHash[xc(V3_169)] = Error_V3_169;
   Error_V3_170 = empty_violation();
   drErrHash[xc(V3_170)] = Error_V3_170;
   Error_V3_171 = empty_violation();
   drErrHash[xc(V3_171)] = Error_V3_171;
   Error_V3_19 = empty_violation();
   drErrHash[xc(V3_19)] = Error_V3_19;
   Error_V3_20 = empty_violation();
   drErrHash[xc(V3_20)] = Error_V3_20;
   Error_V3_22 = empty_violation();
   drErrHash[xc(V3_22)] = Error_V3_22;
   Error_V3_228 = empty_violation();
   drErrHash[xc(V3_228)] = Error_V3_228;
   Error_V3_23 = empty_violation();
   drErrHash[xc(V3_23)] = Error_V3_23;
   Error_V3_24 = empty_violation();
   drErrHash[xc(V3_24)] = Error_V3_24;
   Error_V3_240 = empty_violation();
   drErrHash[xc(V3_240)] = Error_V3_240;
   Error_V3_25 = empty_violation();
   drErrHash[xc(V3_25)] = Error_V3_25;
   Error_V3_250 = empty_violation();
   drErrHash[xc(V3_250)] = Error_V3_250;
   Error_V3_251 = empty_violation();
   drErrHash[xc(V3_251)] = Error_V3_251;
   Error_V3_252 = empty_violation();
   drErrHash[xc(V3_252)] = Error_V3_252;
   Error_V3_26 = empty_violation();
   drErrHash[xc(V3_26)] = Error_V3_26;
   Error_V3_28 = empty_violation();
   drErrHash[xc(V3_28)] = Error_V3_28;
   Error_V3_32 = empty_violation();
   drErrHash[xc(V3_32)] = Error_V3_32;
   Error_V3_33 = empty_violation();
   drErrHash[xc(V3_33)] = Error_V3_33;
   Error_V3_40 = empty_violation();
   drErrHash[xc(V3_40)] = Error_V3_40;
   Error_V3_41 = empty_violation();
   drErrHash[xc(V3_41)] = Error_V3_41;
   Error_V3_42 = empty_violation();
   drErrHash[xc(V3_42)] = Error_V3_42;
   Error_V3_43 = empty_violation();
   drErrHash[xc(V3_43)] = Error_V3_43;
   Error_V3_45 = empty_violation();
   drErrHash[xc(V3_45)] = Error_V3_45;
   Error_V3_450 = empty_violation();
   drErrHash[xc(V3_450)] = Error_V3_450;
   Error_V3_451 = empty_violation();
   drErrHash[xc(V3_451)] = Error_V3_451;
   Error_V3_452 = empty_violation();
   drErrHash[xc(V3_452)] = Error_V3_452;
   Error_V3_46 = empty_violation();
   drErrHash[xc(V3_46)] = Error_V3_46;
   Error_V3_49 = empty_violation();
   drErrHash[xc(V3_49)] = Error_V3_49;
   Error_V3_51 = empty_violation();
   drErrHash[xc(V3_51)] = Error_V3_51;
   Error_V3_54 = empty_violation();
   drErrHash[xc(V3_54)] = Error_V3_54;
   Error_V3_61 = empty_violation();
   drErrHash[xc(V3_61)] = Error_V3_61;
   Error_V3_62 = empty_violation();
   drErrHash[xc(V3_62)] = Error_V3_62;
   Error_V3_97 = empty_violation();
   drErrHash[xc(V3_97)] = Error_V3_97;
   Error_V3_98 = empty_violation();
   drErrHash[xc(V3_98)] = Error_V3_98;
   Error_V4H_01 = empty_violation();
   drErrHash[xc(V4H_01)] = Error_V4H_01;
   Error_V4H_02 = empty_violation();
   drErrHash[xc(V4H_02)] = Error_V4H_02;
   Error_V4H_03 = empty_violation();
   drErrHash[xc(V4H_03)] = Error_V4H_03;
   Error_V4H_04 = empty_violation();
   drErrHash[xc(V4H_04)] = Error_V4H_04;
   Error_V4H_05 = empty_violation();
   drErrHash[xc(V4H_05)] = Error_V4H_05;
   Error_V4H_06 = empty_violation();
   drErrHash[xc(V4H_06)] = Error_V4H_06;
   Error_V4H_07 = empty_violation();
   drErrHash[xc(V4H_07)] = Error_V4H_07;
   Error_V4H_08 = empty_violation();
   drErrHash[xc(V4H_08)] = Error_V4H_08;
   Error_V4H_10 = empty_violation();
   drErrHash[xc(V4H_10)] = Error_V4H_10;
   Error_V4H_11 = empty_violation();
   drErrHash[xc(V4H_11)] = Error_V4H_11;
   Error_V4H_12 = empty_violation();
   drErrHash[xc(V4H_12)] = Error_V4H_12;
   Error_V4H_13 = empty_violation();
   drErrHash[xc(V4H_13)] = Error_V4H_13;
   Error_V4H_14 = empty_violation();
   drErrHash[xc(V4H_14)] = Error_V4H_14;
   Error_V4H_15 = empty_violation();
   drErrHash[xc(V4H_15)] = Error_V4H_15;
   Error_V4H_16 = empty_violation();
   drErrHash[xc(V4H_16)] = Error_V4H_16;
   Error_V4H_20 = empty_violation();
   drErrHash[xc(V4H_20)] = Error_V4H_20;
   Error_V4T_01 = empty_violation();
   drErrHash[xc(V4T_01)] = Error_V4T_01;
   Error_V4T_02 = empty_violation();
   drErrHash[xc(V4T_02)] = Error_V4T_02;
   Error_V4T_03 = empty_violation();
   drErrHash[xc(V4T_03)] = Error_V4T_03;
   Error_V4T_04 = empty_violation();
   drErrHash[xc(V4T_04)] = Error_V4T_04;
   Error_V4T_05 = empty_violation();
   drErrHash[xc(V4T_05)] = Error_V4T_05;
   Error_V4T_06 = empty_violation();
   drErrHash[xc(V4T_06)] = Error_V4T_06;
   Error_V4T_20 = empty_violation();
   drErrHash[xc(V4T_20)] = Error_V4T_20;
   Error_V4_01 = empty_violation();
   drErrHash[xc(V4_01)] = Error_V4_01;
   Error_V4_02 = empty_violation();
   drErrHash[xc(V4_02)] = Error_V4_02;
   Error_V4_03 = empty_violation();
   drErrHash[xc(V4_03)] = Error_V4_03;
   Error_V4_04 = empty_violation();
   drErrHash[xc(V4_04)] = Error_V4_04;
   Error_V4_05 = empty_violation();
   drErrHash[xc(V4_05)] = Error_V4_05;
   Error_V4_06 = empty_violation();
   drErrHash[xc(V4_06)] = Error_V4_06;
   Error_V4_08 = empty_violation();
   drErrHash[xc(V4_08)] = Error_V4_08;
   Error_V4_09 = empty_violation();
   drErrHash[xc(V4_09)] = Error_V4_09;
   Error_V4_10 = empty_violation();
   drErrHash[xc(V4_10)] = Error_V4_10;
   Error_V4_101 = empty_violation();
   drErrHash[xc(V4_101)] = Error_V4_101;
   Error_V4_102 = empty_violation();
   drErrHash[xc(V4_102)] = Error_V4_102;
   Error_V4_103 = empty_violation();
   drErrHash[xc(V4_103)] = Error_V4_103;
   Error_V4_104 = empty_violation();
   drErrHash[xc(V4_104)] = Error_V4_104;
   Error_V4_105 = empty_violation();
   drErrHash[xc(V4_105)] = Error_V4_105;
   Error_V4_106 = empty_violation();
   drErrHash[xc(V4_106)] = Error_V4_106;
   Error_V4_107 = empty_violation();
   drErrHash[xc(V4_107)] = Error_V4_107;
   Error_V4_108 = empty_violation();
   drErrHash[xc(V4_108)] = Error_V4_108;
   Error_V4_109 = empty_violation();
   drErrHash[xc(V4_109)] = Error_V4_109;
   Error_V4_11 = empty_violation();
   drErrHash[xc(V4_11)] = Error_V4_11;
   Error_V4_110 = empty_violation();
   drErrHash[xc(V4_110)] = Error_V4_110;
   Error_V4_111 = empty_violation();
   drErrHash[xc(V4_111)] = Error_V4_111;
   Error_V4_112 = empty_violation();
   drErrHash[xc(V4_112)] = Error_V4_112;
   Error_V4_113 = empty_violation();
   drErrHash[xc(V4_113)] = Error_V4_113;
   Error_V4_114 = empty_violation();
   drErrHash[xc(V4_114)] = Error_V4_114;
   Error_V4_115 = empty_violation();
   drErrHash[xc(V4_115)] = Error_V4_115;
   Error_V4_116 = empty_violation();
   drErrHash[xc(V4_116)] = Error_V4_116;
   Error_V4_117 = empty_violation();
   drErrHash[xc(V4_117)] = Error_V4_117;
   Error_V4_118 = empty_violation();
   drErrHash[xc(V4_118)] = Error_V4_118;
   Error_V4_119 = empty_violation();
   drErrHash[xc(V4_119)] = Error_V4_119;
   Error_V4_12 = empty_violation();
   drErrHash[xc(V4_12)] = Error_V4_12;
   Error_V4_120 = empty_violation();
   drErrHash[xc(V4_120)] = Error_V4_120;
   Error_V4_121 = empty_violation();
   drErrHash[xc(V4_121)] = Error_V4_121;
   Error_V4_122 = empty_violation();
   drErrHash[xc(V4_122)] = Error_V4_122;
   Error_V4_123 = empty_violation();
   drErrHash[xc(V4_123)] = Error_V4_123;
   Error_V4_124 = empty_violation();
   drErrHash[xc(V4_124)] = Error_V4_124;
   Error_V4_125 = empty_violation();
   drErrHash[xc(V4_125)] = Error_V4_125;
   Error_V4_126 = empty_violation();
   drErrHash[xc(V4_126)] = Error_V4_126;
   Error_V4_127 = empty_violation();
   drErrHash[xc(V4_127)] = Error_V4_127;
   Error_V4_128 = empty_violation();
   drErrHash[xc(V4_128)] = Error_V4_128;
   Error_V4_129 = empty_violation();
   drErrHash[xc(V4_129)] = Error_V4_129;
   Error_V4_13 = empty_violation();
   drErrHash[xc(V4_13)] = Error_V4_13;
   Error_V4_130 = empty_violation();
   drErrHash[xc(V4_130)] = Error_V4_130;
   Error_V4_131 = empty_violation();
   drErrHash[xc(V4_131)] = Error_V4_131;
   Error_V4_132 = empty_violation();
   drErrHash[xc(V4_132)] = Error_V4_132;
   Error_V4_133 = empty_violation();
   drErrHash[xc(V4_133)] = Error_V4_133;
   Error_V4_134 = empty_violation();
   drErrHash[xc(V4_134)] = Error_V4_134;
   Error_V4_135 = empty_violation();
   drErrHash[xc(V4_135)] = Error_V4_135;
   Error_V4_136 = empty_violation();
   drErrHash[xc(V4_136)] = Error_V4_136;
   Error_V4_137 = empty_violation();
   drErrHash[xc(V4_137)] = Error_V4_137;
   Error_V4_138 = empty_violation();
   drErrHash[xc(V4_138)] = Error_V4_138;
   Error_V4_14 = empty_violation();
   drErrHash[xc(V4_14)] = Error_V4_14;
   Error_V4_142 = empty_violation();
   drErrHash[xc(V4_142)] = Error_V4_142;
   Error_V4_15 = empty_violation();
   drErrHash[xc(V4_15)] = Error_V4_15;
   Error_V4_152 = empty_violation();
   drErrHash[xc(V4_152)] = Error_V4_152;
   Error_V4_153 = empty_violation();
   drErrHash[xc(V4_153)] = Error_V4_153;
   Error_V4_154 = empty_violation();
   drErrHash[xc(V4_154)] = Error_V4_154;
   Error_V4_16 = empty_violation();
   drErrHash[xc(V4_16)] = Error_V4_16;
   Error_V4_161 = empty_violation();
   drErrHash[xc(V4_161)] = Error_V4_161;
   Error_V4_162 = empty_violation();
   drErrHash[xc(V4_162)] = Error_V4_162;
   Error_V4_163 = empty_violation();
   drErrHash[xc(V4_163)] = Error_V4_163;
   Error_V4_164 = empty_violation();
   drErrHash[xc(V4_164)] = Error_V4_164;
   Error_V4_165 = empty_violation();
   drErrHash[xc(V4_165)] = Error_V4_165;
   Error_V4_166 = empty_violation();
   drErrHash[xc(V4_166)] = Error_V4_166;
   Error_V4_167 = empty_violation();
   drErrHash[xc(V4_167)] = Error_V4_167;
   Error_V4_168 = empty_violation();
   drErrHash[xc(V4_168)] = Error_V4_168;
   Error_V4_169 = empty_violation();
   drErrHash[xc(V4_169)] = Error_V4_169;
   Error_V4_17 = empty_violation();
   drErrHash[xc(V4_17)] = Error_V4_17;
   Error_V4_170 = empty_violation();
   drErrHash[xc(V4_170)] = Error_V4_170;
   Error_V4_171 = empty_violation();
   drErrHash[xc(V4_171)] = Error_V4_171;
   Error_V4_172 = empty_violation();
   drErrHash[xc(V4_172)] = Error_V4_172;
   Error_V4_181 = empty_violation();
   drErrHash[xc(V4_181)] = Error_V4_181;
   Error_V4_182 = empty_violation();
   drErrHash[xc(V4_182)] = Error_V4_182;
   Error_V4_19 = empty_violation();
   drErrHash[xc(V4_19)] = Error_V4_19;
   Error_V4_20 = empty_violation();
   drErrHash[xc(V4_20)] = Error_V4_20;
   Error_V4_22 = empty_violation();
   drErrHash[xc(V4_22)] = Error_V4_22;
   Error_V4_228 = empty_violation();
   drErrHash[xc(V4_228)] = Error_V4_228;
   Error_V4_23 = empty_violation();
   drErrHash[xc(V4_23)] = Error_V4_23;
   Error_V4_24 = empty_violation();
   drErrHash[xc(V4_24)] = Error_V4_24;
   Error_V4_240 = empty_violation();
   drErrHash[xc(V4_240)] = Error_V4_240;
   Error_V4_25 = empty_violation();
   drErrHash[xc(V4_25)] = Error_V4_25;
   Error_V4_250 = empty_violation();
   drErrHash[xc(V4_250)] = Error_V4_250;
   Error_V4_251 = empty_violation();
   drErrHash[xc(V4_251)] = Error_V4_251;
   Error_V4_252 = empty_violation();
   drErrHash[xc(V4_252)] = Error_V4_252;
   Error_V4_26 = empty_violation();
   drErrHash[xc(V4_26)] = Error_V4_26;
   Error_V4_28 = empty_violation();
   drErrHash[xc(V4_28)] = Error_V4_28;
   Error_V4_29 = empty_violation();
   drErrHash[xc(V4_29)] = Error_V4_29;
   Error_V4_30 = empty_violation();
   drErrHash[xc(V4_30)] = Error_V4_30;
   Error_V4_32 = empty_violation();
   drErrHash[xc(V4_32)] = Error_V4_32;
   Error_V4_33 = empty_violation();
   drErrHash[xc(V4_33)] = Error_V4_33;
   Error_V4_40 = empty_violation();
   drErrHash[xc(V4_40)] = Error_V4_40;
   Error_V4_41 = empty_violation();
   drErrHash[xc(V4_41)] = Error_V4_41;
   Error_V4_42 = empty_violation();
   drErrHash[xc(V4_42)] = Error_V4_42;
   Error_V4_43 = empty_violation();
   drErrHash[xc(V4_43)] = Error_V4_43;
   Error_V4_45 = empty_violation();
   drErrHash[xc(V4_45)] = Error_V4_45;
   Error_V4_450 = empty_violation();
   drErrHash[xc(V4_450)] = Error_V4_450;
   Error_V4_451 = empty_violation();
   drErrHash[xc(V4_451)] = Error_V4_451;
   Error_V4_452 = empty_violation();
   drErrHash[xc(V4_452)] = Error_V4_452;
   Error_V4_46 = empty_violation();
   drErrHash[xc(V4_46)] = Error_V4_46;
   Error_V4_49 = empty_violation();
   drErrHash[xc(V4_49)] = Error_V4_49;
   Error_V4_51 = empty_violation();
   drErrHash[xc(V4_51)] = Error_V4_51;
   Error_V4_52 = empty_violation();
   drErrHash[xc(V4_52)] = Error_V4_52;
   Error_V4_54 = empty_violation();
   drErrHash[xc(V4_54)] = Error_V4_54;
   Error_V4_61 = empty_violation();
   drErrHash[xc(V4_61)] = Error_V4_61;
   Error_V4_62 = empty_violation();
   drErrHash[xc(V4_62)] = Error_V4_62;
   Error_V4_97 = empty_violation();
   drErrHash[xc(V4_97)] = Error_V4_97;
   Error_V4_98 = empty_violation();
   drErrHash[xc(V4_98)] = Error_V4_98;
   Error_V4err_101 = empty_violation();
   drErrHash[xc(V4err_101)] = Error_V4err_101;
   Error_V4err_113 = empty_violation();
   drErrHash[xc(V4err_113)] = Error_V4err_113;
   Error_V5_01 = empty_violation();
   drErrHash[xc(V5_01)] = Error_V5_01;
   Error_V5_02 = empty_violation();
   drErrHash[xc(V5_02)] = Error_V5_02;
   Error_V5_03 = empty_violation();
   drErrHash[xc(V5_03)] = Error_V5_03;
   Error_V5_04 = empty_violation();
   drErrHash[xc(V5_04)] = Error_V5_04;
   Error_V5_05 = empty_violation();
   drErrHash[xc(V5_05)] = Error_V5_05;
   Error_V5_06 = empty_violation();
   drErrHash[xc(V5_06)] = Error_V5_06;
   Error_V5_07 = empty_violation();
   drErrHash[xc(V5_07)] = Error_V5_07;
   Error_V5_08 = empty_violation();
   drErrHash[xc(V5_08)] = Error_V5_08;
   Error_V5_09 = empty_violation();
   drErrHash[xc(V5_09)] = Error_V5_09;
   Error_V5_10 = empty_violation();
   drErrHash[xc(V5_10)] = Error_V5_10;
   Error_V5_101 = empty_violation();
   drErrHash[xc(V5_101)] = Error_V5_101;
   Error_V5_102 = empty_violation();
   drErrHash[xc(V5_102)] = Error_V5_102;
   Error_V5_103 = empty_violation();
   drErrHash[xc(V5_103)] = Error_V5_103;
   Error_V5_104 = empty_violation();
   drErrHash[xc(V5_104)] = Error_V5_104;
   Error_V5_105 = empty_violation();
   drErrHash[xc(V5_105)] = Error_V5_105;
   Error_V5_106 = empty_violation();
   drErrHash[xc(V5_106)] = Error_V5_106;
   Error_V5_107 = empty_violation();
   drErrHash[xc(V5_107)] = Error_V5_107;
   Error_V5_108 = empty_violation();
   drErrHash[xc(V5_108)] = Error_V5_108;
   Error_V5_109 = empty_violation();
   drErrHash[xc(V5_109)] = Error_V5_109;
   Error_V5_11 = empty_violation();
   drErrHash[xc(V5_11)] = Error_V5_11;
   Error_V5_110 = empty_violation();
   drErrHash[xc(V5_110)] = Error_V5_110;
   Error_V5_111 = empty_violation();
   drErrHash[xc(V5_111)] = Error_V5_111;
   Error_V5_112 = empty_violation();
   drErrHash[xc(V5_112)] = Error_V5_112;
   Error_V5_113 = empty_violation();
   drErrHash[xc(V5_113)] = Error_V5_113;
   Error_V5_114 = empty_violation();
   drErrHash[xc(V5_114)] = Error_V5_114;
   Error_V5_115 = empty_violation();
   drErrHash[xc(V5_115)] = Error_V5_115;
   Error_V5_116 = empty_violation();
   drErrHash[xc(V5_116)] = Error_V5_116;
   Error_V5_117 = empty_violation();
   drErrHash[xc(V5_117)] = Error_V5_117;
   Error_V5_118 = empty_violation();
   drErrHash[xc(V5_118)] = Error_V5_118;
   Error_V5_12 = empty_violation();
   drErrHash[xc(V5_12)] = Error_V5_12;
   Error_V5_124 = empty_violation();
   drErrHash[xc(V5_124)] = Error_V5_124;
   Error_V5_128 = empty_violation();
   drErrHash[xc(V5_128)] = Error_V5_128;
   Error_V5_13 = empty_violation();
   drErrHash[xc(V5_13)] = Error_V5_13;
   Error_V5_14 = empty_violation();
   drErrHash[xc(V5_14)] = Error_V5_14;
   Error_V5_15 = empty_violation();
   drErrHash[xc(V5_15)] = Error_V5_15;
   Error_V5_152 = empty_violation();
   drErrHash[xc(V5_152)] = Error_V5_152;
   Error_V5_153 = empty_violation();
   drErrHash[xc(V5_153)] = Error_V5_153;
   Error_V5_154 = empty_violation();
   drErrHash[xc(V5_154)] = Error_V5_154;
   Error_V5_16 = empty_violation();
   drErrHash[xc(V5_16)] = Error_V5_16;
   Error_V5_161 = empty_violation();
   drErrHash[xc(V5_161)] = Error_V5_161;
   Error_V5_162 = empty_violation();
   drErrHash[xc(V5_162)] = Error_V5_162;
   Error_V5_163 = empty_violation();
   drErrHash[xc(V5_163)] = Error_V5_163;
   Error_V5_164 = empty_violation();
   drErrHash[xc(V5_164)] = Error_V5_164;
   Error_V5_165 = empty_violation();
   drErrHash[xc(V5_165)] = Error_V5_165;
   Error_V5_166 = empty_violation();
   drErrHash[xc(V5_166)] = Error_V5_166;
   Error_V5_167 = empty_violation();
   drErrHash[xc(V5_167)] = Error_V5_167;
   Error_V5_168 = empty_violation();
   drErrHash[xc(V5_168)] = Error_V5_168;
   Error_V5_169 = empty_violation();
   drErrHash[xc(V5_169)] = Error_V5_169;
   Error_V5_170 = empty_violation();
   drErrHash[xc(V5_170)] = Error_V5_170;
   Error_V5_171 = empty_violation();
   drErrHash[xc(V5_171)] = Error_V5_171;
   Error_V5_172 = empty_violation();
   drErrHash[xc(V5_172)] = Error_V5_172;
   Error_V5_181 = empty_violation();
   drErrHash[xc(V5_181)] = Error_V5_181;
   Error_V5_182 = empty_violation();
   drErrHash[xc(V5_182)] = Error_V5_182;
   Error_V5_19 = empty_violation();
   drErrHash[xc(V5_19)] = Error_V5_19;
   Error_V5_22 = empty_violation();
   drErrHash[xc(V5_22)] = Error_V5_22;
   Error_V5_23 = empty_violation();
   drErrHash[xc(V5_23)] = Error_V5_23;
   Error_V5_24 = empty_violation();
   drErrHash[xc(V5_24)] = Error_V5_24;
   Error_V5_240 = empty_violation();
   drErrHash[xc(V5_240)] = Error_V5_240;
   Error_V5_241 = empty_violation();
   drErrHash[xc(V5_241)] = Error_V5_241;
   Error_V5_25 = empty_violation();
   drErrHash[xc(V5_25)] = Error_V5_25;
   Error_V5_26 = empty_violation();
   drErrHash[xc(V5_26)] = Error_V5_26;
   Error_V5_28 = empty_violation();
   drErrHash[xc(V5_28)] = Error_V5_28;
   Error_V5_29 = empty_violation();
   drErrHash[xc(V5_29)] = Error_V5_29;
   Error_V5_30 = empty_violation();
   drErrHash[xc(V5_30)] = Error_V5_30;
   Error_V5_32 = empty_violation();
   drErrHash[xc(V5_32)] = Error_V5_32;
   Error_V5_33 = empty_violation();
   drErrHash[xc(V5_33)] = Error_V5_33;
   Error_V5_40 = empty_violation();
   drErrHash[xc(V5_40)] = Error_V5_40;
   Error_V5_41 = empty_violation();
   drErrHash[xc(V5_41)] = Error_V5_41;
   Error_V5_42 = empty_violation();
   drErrHash[xc(V5_42)] = Error_V5_42;
   Error_V5_49 = empty_violation();
   drErrHash[xc(V5_49)] = Error_V5_49;
   Error_V5_51 = empty_violation();
   drErrHash[xc(V5_51)] = Error_V5_51;
   Error_V5_52 = empty_violation();
   drErrHash[xc(V5_52)] = Error_V5_52;
   Error_V5_54 = empty_violation();
   drErrHash[xc(V5_54)] = Error_V5_54;
   Error_V5_61 = empty_violation();
   drErrHash[xc(V5_61)] = Error_V5_61;
   Error_V5_62 = empty_violation();
   drErrHash[xc(V5_62)] = Error_V5_62;
   Error_V6_01 = empty_violation();
   drErrHash[xc(V6_01)] = Error_V6_01;
   Error_V6_02 = empty_violation();
   drErrHash[xc(V6_02)] = Error_V6_02;
   Error_V6_03 = empty_violation();
   drErrHash[xc(V6_03)] = Error_V6_03;
   Error_V6_04 = empty_violation();
   drErrHash[xc(V6_04)] = Error_V6_04;
   Error_V6_05 = empty_violation();
   drErrHash[xc(V6_05)] = Error_V6_05;
   Error_V6_06 = empty_violation();
   drErrHash[xc(V6_06)] = Error_V6_06;
   Error_V6_07 = empty_violation();
   drErrHash[xc(V6_07)] = Error_V6_07;
   Error_V6_08 = empty_violation();
   drErrHash[xc(V6_08)] = Error_V6_08;
   Error_V6_09 = empty_violation();
   drErrHash[xc(V6_09)] = Error_V6_09;
   Error_V6_10 = empty_violation();
   drErrHash[xc(V6_10)] = Error_V6_10;
   Error_V6_101 = empty_violation();
   drErrHash[xc(V6_101)] = Error_V6_101;
   Error_V6_102 = empty_violation();
   drErrHash[xc(V6_102)] = Error_V6_102;
   Error_V6_103 = empty_violation();
   drErrHash[xc(V6_103)] = Error_V6_103;
   Error_V6_104 = empty_violation();
   drErrHash[xc(V6_104)] = Error_V6_104;
   Error_V6_105 = empty_violation();
   drErrHash[xc(V6_105)] = Error_V6_105;
   Error_V6_106 = empty_violation();
   drErrHash[xc(V6_106)] = Error_V6_106;
   Error_V6_107 = empty_violation();
   drErrHash[xc(V6_107)] = Error_V6_107;
   Error_V6_108 = empty_violation();
   drErrHash[xc(V6_108)] = Error_V6_108;
   Error_V6_109 = empty_violation();
   drErrHash[xc(V6_109)] = Error_V6_109;
   Error_V6_11 = empty_violation();
   drErrHash[xc(V6_11)] = Error_V6_11;
   Error_V6_110 = empty_violation();
   drErrHash[xc(V6_110)] = Error_V6_110;
   Error_V6_117 = empty_violation();
   drErrHash[xc(V6_117)] = Error_V6_117;
   Error_V6_118 = empty_violation();
   drErrHash[xc(V6_118)] = Error_V6_118;
   Error_V6_12 = empty_violation();
   drErrHash[xc(V6_12)] = Error_V6_12;
   Error_V6_128 = empty_violation();
   drErrHash[xc(V6_128)] = Error_V6_128;
   Error_V6_13 = empty_violation();
   drErrHash[xc(V6_13)] = Error_V6_13;
   Error_V6_14 = empty_violation();
   drErrHash[xc(V6_14)] = Error_V6_14;
   Error_V6_15 = empty_violation();
   drErrHash[xc(V6_15)] = Error_V6_15;
   Error_V6_16 = empty_violation();
   drErrHash[xc(V6_16)] = Error_V6_16;
   Error_V6_17 = empty_violation();
   drErrHash[xc(V6_17)] = Error_V6_17;
   Error_V6_18 = empty_violation();
   drErrHash[xc(V6_18)] = Error_V6_18;
   Error_V6_19 = empty_violation();
   drErrHash[xc(V6_19)] = Error_V6_19;
   Error_V6_20 = empty_violation();
   drErrHash[xc(V6_20)] = Error_V6_20;
   Error_V6_22 = empty_violation();
   drErrHash[xc(V6_22)] = Error_V6_22;
   Error_V6_23 = empty_violation();
   drErrHash[xc(V6_23)] = Error_V6_23;
   Error_V6_24 = empty_violation();
   drErrHash[xc(V6_24)] = Error_V6_24;
   Error_V6_240 = empty_violation();
   drErrHash[xc(V6_240)] = Error_V6_240;
   Error_V6_25 = empty_violation();
   drErrHash[xc(V6_25)] = Error_V6_25;
   Error_V6_27 = empty_violation();
   drErrHash[xc(V6_27)] = Error_V6_27;
   Error_V6_28 = empty_violation();
   drErrHash[xc(V6_28)] = Error_V6_28;
   Error_V6_29 = empty_violation();
   drErrHash[xc(V6_29)] = Error_V6_29;
   Error_V6_30 = empty_violation();
   drErrHash[xc(V6_30)] = Error_V6_30;
   Error_V6_31 = empty_violation();
   drErrHash[xc(V6_31)] = Error_V6_31;
   Error_V6_32 = empty_violation();
   drErrHash[xc(V6_32)] = Error_V6_32;
   Error_V6_33 = empty_violation();
   drErrHash[xc(V6_33)] = Error_V6_33;
   Error_V6_40 = empty_violation();
   drErrHash[xc(V6_40)] = Error_V6_40;
   Error_V6_41 = empty_violation();
   drErrHash[xc(V6_41)] = Error_V6_41;
   Error_V6_48 = empty_violation();
   drErrHash[xc(V6_48)] = Error_V6_48;
   Error_V6_49 = empty_violation();
   drErrHash[xc(V6_49)] = Error_V6_49;
   Error_V6_51 = empty_violation();
   drErrHash[xc(V6_51)] = Error_V6_51;
   Error_V6_54 = empty_violation();
   drErrHash[xc(V6_54)] = Error_V6_54;
   Error_V6_61 = empty_violation();
   drErrHash[xc(V6_61)] = Error_V6_61;
   Error_V6_92 = empty_violation();
   drErrHash[xc(V6_92)] = Error_V6_92;
   Error_V6err_02 = empty_violation();
   drErrHash[xc(V6err_02)] = Error_V6err_02;
   Error_V6err_103 = empty_violation();
   drErrHash[xc(V6err_103)] = Error_V6err_103;
   Error_V6err_104 = empty_violation();
   drErrHash[xc(V6err_104)] = Error_V6err_104;
   Error_V6err_12 = empty_violation();
   drErrHash[xc(V6err_12)] = Error_V6err_12;
   Error_V6err_92 = empty_violation();
   drErrHash[xc(V6err_92)] = Error_V6err_92;
   Error_V7_01 = empty_violation();
   drErrHash[xc(V7_01)] = Error_V7_01;
   Error_V7_02 = empty_violation();
   drErrHash[xc(V7_02)] = Error_V7_02;
   Error_V7_03 = empty_violation();
   drErrHash[xc(V7_03)] = Error_V7_03;
   Error_V7_04 = empty_violation();
   drErrHash[xc(V7_04)] = Error_V7_04;
   Error_V7_05 = empty_violation();
   drErrHash[xc(V7_05)] = Error_V7_05;
   Error_V7_06 = empty_violation();
   drErrHash[xc(V7_06)] = Error_V7_06;
   Error_V7_07 = empty_violation();
   drErrHash[xc(V7_07)] = Error_V7_07;
   Error_V7_08 = empty_violation();
   drErrHash[xc(V7_08)] = Error_V7_08;
   Error_V7_09 = empty_violation();
   drErrHash[xc(V7_09)] = Error_V7_09;
   Error_V7_10 = empty_violation();
   drErrHash[xc(V7_10)] = Error_V7_10;
   Error_V7_101 = empty_violation();
   drErrHash[xc(V7_101)] = Error_V7_101;
   Error_V7_102 = empty_violation();
   drErrHash[xc(V7_102)] = Error_V7_102;
   Error_V7_103 = empty_violation();
   drErrHash[xc(V7_103)] = Error_V7_103;
   Error_V7_104 = empty_violation();
   drErrHash[xc(V7_104)] = Error_V7_104;
   Error_V7_105 = empty_violation();
   drErrHash[xc(V7_105)] = Error_V7_105;
   Error_V7_106 = empty_violation();
   drErrHash[xc(V7_106)] = Error_V7_106;
   Error_V7_107 = empty_violation();
   drErrHash[xc(V7_107)] = Error_V7_107;
   Error_V7_108 = empty_violation();
   drErrHash[xc(V7_108)] = Error_V7_108;
   Error_V7_109 = empty_violation();
   drErrHash[xc(V7_109)] = Error_V7_109;
   Error_V7_11 = empty_violation();
   drErrHash[xc(V7_11)] = Error_V7_11;
   Error_V7_110 = empty_violation();
   drErrHash[xc(V7_110)] = Error_V7_110;
   Error_V7_111 = empty_violation();
   drErrHash[xc(V7_111)] = Error_V7_111;
   Error_V7_112 = empty_violation();
   drErrHash[xc(V7_112)] = Error_V7_112;
   Error_V7_12 = empty_violation();
   drErrHash[xc(V7_12)] = Error_V7_12;
   Error_V7_128 = empty_violation();
   drErrHash[xc(V7_128)] = Error_V7_128;
   Error_V7_13 = empty_violation();
   drErrHash[xc(V7_13)] = Error_V7_13;
   Error_V7_14 = empty_violation();
   drErrHash[xc(V7_14)] = Error_V7_14;
   Error_V7_151 = empty_violation();
   drErrHash[xc(V7_151)] = Error_V7_151;
   Error_V7_152 = empty_violation();
   drErrHash[xc(V7_152)] = Error_V7_152;
   Error_V7_153 = empty_violation();
   drErrHash[xc(V7_153)] = Error_V7_153;
   Error_V7_154 = empty_violation();
   drErrHash[xc(V7_154)] = Error_V7_154;
   Error_V7_155 = empty_violation();
   drErrHash[xc(V7_155)] = Error_V7_155;
   Error_V7_156 = empty_violation();
   drErrHash[xc(V7_156)] = Error_V7_156;
   Error_V7_157 = empty_violation();
   drErrHash[xc(V7_157)] = Error_V7_157;
   Error_V7_158 = empty_violation();
   drErrHash[xc(V7_158)] = Error_V7_158;
   Error_V7_159 = empty_violation();
   drErrHash[xc(V7_159)] = Error_V7_159;
   Error_V7_16 = empty_violation();
   drErrHash[xc(V7_16)] = Error_V7_16;
   Error_V7_160 = empty_violation();
   drErrHash[xc(V7_160)] = Error_V7_160;
   Error_V7_161 = empty_violation();
   drErrHash[xc(V7_161)] = Error_V7_161;
   Error_V7_162 = empty_violation();
   drErrHash[xc(V7_162)] = Error_V7_162;
   Error_V7_163 = empty_violation();
   drErrHash[xc(V7_163)] = Error_V7_163;
   Error_V7_164 = empty_violation();
   drErrHash[xc(V7_164)] = Error_V7_164;
   Error_V7_17 = empty_violation();
   drErrHash[xc(V7_17)] = Error_V7_17;
   Error_V7_22 = empty_violation();
   drErrHash[xc(V7_22)] = Error_V7_22;
   Error_V7_23 = empty_violation();
   drErrHash[xc(V7_23)] = Error_V7_23;
   Error_V7_230 = empty_violation();
   drErrHash[xc(V7_230)] = Error_V7_230;
   Error_V7_24 = empty_violation();
   drErrHash[xc(V7_24)] = Error_V7_24;
   Error_V7_28 = empty_violation();
   drErrHash[xc(V7_28)] = Error_V7_28;
   Error_V7_29 = empty_violation();
   drErrHash[xc(V7_29)] = Error_V7_29;
   Error_V7_30 = empty_violation();
   drErrHash[xc(V7_30)] = Error_V7_30;
   Error_V7_32 = empty_violation();
   drErrHash[xc(V7_32)] = Error_V7_32;
   Error_V7_33 = empty_violation();
   drErrHash[xc(V7_33)] = Error_V7_33;
   Error_V7_40 = empty_violation();
   drErrHash[xc(V7_40)] = Error_V7_40;
   Error_V7_41 = empty_violation();
   drErrHash[xc(V7_41)] = Error_V7_41;
   Error_V7_42 = empty_violation();
   drErrHash[xc(V7_42)] = Error_V7_42;
   Error_V7_49 = empty_violation();
   drErrHash[xc(V7_49)] = Error_V7_49;
   Error_V7_51 = empty_violation();
   drErrHash[xc(V7_51)] = Error_V7_51;
   Error_V7_52 = empty_violation();
   drErrHash[xc(V7_52)] = Error_V7_52;
   Error_V7_53 = empty_violation();
   drErrHash[xc(V7_53)] = Error_V7_53;
   Error_V7_54 = empty_violation();
   drErrHash[xc(V7_54)] = Error_V7_54;
   Error_V7_61 = empty_violation();
   drErrHash[xc(V7_61)] = Error_V7_61;
   Error_V7err_02 = empty_violation();
   drErrHash[xc(V7err_02)] = Error_V7err_02;
   Error_V7err_10 = empty_violation();
   drErrHash[xc(V7err_10)] = Error_V7err_10;
   Error_V7err_102 = empty_violation();
   drErrHash[xc(V7err_102)] = Error_V7err_102;
   Error_V7err_151 = empty_violation();
   drErrHash[xc(V7err_151)] = Error_V7err_151;
   Error_V7err_152 = empty_violation();
   drErrHash[xc(V7err_152)] = Error_V7err_152;
   Error_V7err_155 = empty_violation();
   drErrHash[xc(V7err_155)] = Error_V7err_155;
   Error_V7err_156 = empty_violation();
   drErrHash[xc(V7err_156)] = Error_V7err_156;
   Error_V7err_157 = empty_violation();
   drErrHash[xc(V7err_157)] = Error_V7err_157;
   Error_V7err_158 = empty_violation();
   drErrHash[xc(V7err_158)] = Error_V7err_158;
   Error_V8_01 = empty_violation();
   drErrHash[xc(V8_01)] = Error_V8_01;
   Error_V8_02 = empty_violation();
   drErrHash[xc(V8_02)] = Error_V8_02;
   Error_V8_03 = empty_violation();
   drErrHash[xc(V8_03)] = Error_V8_03;
   Error_V8_04 = empty_violation();
   drErrHash[xc(V8_04)] = Error_V8_04;
   Error_V8_05 = empty_violation();
   drErrHash[xc(V8_05)] = Error_V8_05;
   Error_V8_06 = empty_violation();
   drErrHash[xc(V8_06)] = Error_V8_06;
   Error_V8_07 = empty_violation();
   drErrHash[xc(V8_07)] = Error_V8_07;
   Error_V8_08 = empty_violation();
   drErrHash[xc(V8_08)] = Error_V8_08;
   Error_V8_09 = empty_violation();
   drErrHash[xc(V8_09)] = Error_V8_09;
   Error_V8_10 = empty_violation();
   drErrHash[xc(V8_10)] = Error_V8_10;
   Error_V8_101 = empty_violation();
   drErrHash[xc(V8_101)] = Error_V8_101;
   Error_V8_102 = empty_violation();
   drErrHash[xc(V8_102)] = Error_V8_102;
   Error_V8_103 = empty_violation();
   drErrHash[xc(V8_103)] = Error_V8_103;
   Error_V8_104 = empty_violation();
   drErrHash[xc(V8_104)] = Error_V8_104;
   Error_V8_105 = empty_violation();
   drErrHash[xc(V8_105)] = Error_V8_105;
   Error_V8_106 = empty_violation();
   drErrHash[xc(V8_106)] = Error_V8_106;
   Error_V8_107 = empty_violation();
   drErrHash[xc(V8_107)] = Error_V8_107;
   Error_V8_108 = empty_violation();
   drErrHash[xc(V8_108)] = Error_V8_108;
   Error_V8_109 = empty_violation();
   drErrHash[xc(V8_109)] = Error_V8_109;
   Error_V8_11 = empty_violation();
   drErrHash[xc(V8_11)] = Error_V8_11;
   Error_V8_12 = empty_violation();
   drErrHash[xc(V8_12)] = Error_V8_12;
   Error_V8_128 = empty_violation();
   drErrHash[xc(V8_128)] = Error_V8_128;
   Error_V8_131 = empty_violation();
   drErrHash[xc(V8_131)] = Error_V8_131;
   Error_V8_132 = empty_violation();
   drErrHash[xc(V8_132)] = Error_V8_132;
   Error_V8_151 = empty_violation();
   drErrHash[xc(V8_151)] = Error_V8_151;
   Error_V8_152 = empty_violation();
   drErrHash[xc(V8_152)] = Error_V8_152;
   Error_V8_153 = empty_violation();
   drErrHash[xc(V8_153)] = Error_V8_153;
   Error_V8_154 = empty_violation();
   drErrHash[xc(V8_154)] = Error_V8_154;
   Error_V8_155 = empty_violation();
   drErrHash[xc(V8_155)] = Error_V8_155;
   Error_V8_156 = empty_violation();
   drErrHash[xc(V8_156)] = Error_V8_156;
   Error_V8_157 = empty_violation();
   drErrHash[xc(V8_157)] = Error_V8_157;
   Error_V8_158 = empty_violation();
   drErrHash[xc(V8_158)] = Error_V8_158;
   Error_V8_159 = empty_violation();
   drErrHash[xc(V8_159)] = Error_V8_159;
   Error_V8_160 = empty_violation();
   drErrHash[xc(V8_160)] = Error_V8_160;
   Error_V8_161 = empty_violation();
   drErrHash[xc(V8_161)] = Error_V8_161;
   Error_V8_162 = empty_violation();
   drErrHash[xc(V8_162)] = Error_V8_162;
   Error_V8_163 = empty_violation();
   drErrHash[xc(V8_163)] = Error_V8_163;
   Error_V8_164 = empty_violation();
   drErrHash[xc(V8_164)] = Error_V8_164;
   Error_V8_21 = empty_violation();
   drErrHash[xc(V8_21)] = Error_V8_21;
   Error_V8_22 = empty_violation();
   drErrHash[xc(V8_22)] = Error_V8_22;
   Error_V8_23 = empty_violation();
   drErrHash[xc(V8_23)] = Error_V8_23;
   Error_V8_24 = empty_violation();
   drErrHash[xc(V8_24)] = Error_V8_24;
   Error_V8_28 = empty_violation();
   drErrHash[xc(V8_28)] = Error_V8_28;
   Error_V8_29 = empty_violation();
   drErrHash[xc(V8_29)] = Error_V8_29;
   Error_V8_30 = empty_violation();
   drErrHash[xc(V8_30)] = Error_V8_30;
   Error_V8_31 = empty_violation();
   drErrHash[xc(V8_31)] = Error_V8_31;
   Error_V8_32 = empty_violation();
   drErrHash[xc(V8_32)] = Error_V8_32;
   Error_V8_33 = empty_violation();
   drErrHash[xc(V8_33)] = Error_V8_33;
   Error_V8_34 = empty_violation();
   drErrHash[xc(V8_34)] = Error_V8_34;
   Error_V8_35 = empty_violation();
   drErrHash[xc(V8_35)] = Error_V8_35;
   Error_V8_39 = empty_violation();
   drErrHash[xc(V8_39)] = Error_V8_39;
   Error_V8_40 = empty_violation();
   drErrHash[xc(V8_40)] = Error_V8_40;
   Error_V8_41 = empty_violation();
   drErrHash[xc(V8_41)] = Error_V8_41;
   Error_V8_49 = empty_violation();
   drErrHash[xc(V8_49)] = Error_V8_49;
   Error_V8_51 = empty_violation();
   drErrHash[xc(V8_51)] = Error_V8_51;
   Error_V8_52 = empty_violation();
   drErrHash[xc(V8_52)] = Error_V8_52;
   Error_V8_53 = empty_violation();
   drErrHash[xc(V8_53)] = Error_V8_53;
   Error_V8_54 = empty_violation();
   drErrHash[xc(V8_54)] = Error_V8_54;
   Error_V8_61 = empty_violation();
   drErrHash[xc(V8_61)] = Error_V8_61;
   Error_V8_62 = empty_violation();
   drErrHash[xc(V8_62)] = Error_V8_62;
   Error_V8_71 = empty_violation();
   drErrHash[xc(V8_71)] = Error_V8_71;
   Error_V8_72 = empty_violation();
   drErrHash[xc(V8_72)] = Error_V8_72;
   Error_V8_73 = empty_violation();
   drErrHash[xc(V8_73)] = Error_V8_73;
   Error_V8err_01 = empty_violation();
   drErrHash[xc(V8err_01)] = Error_V8err_01;
   Error_V8err_101 = empty_violation();
   drErrHash[xc(V8err_101)] = Error_V8err_101;
   Error_V8err_31 = empty_violation();
   drErrHash[xc(V8err_31)] = Error_V8err_31;
   Error_V8err_32 = empty_violation();
   drErrHash[xc(V8err_32)] = Error_V8err_32;
   Error_V9_01 = empty_violation();
   drErrHash[xc(V9_01)] = Error_V9_01;
   Error_V9_02 = empty_violation();
   drErrHash[xc(V9_02)] = Error_V9_02;
   Error_V9_101 = empty_violation();
   drErrHash[xc(V9_101)] = Error_V9_101;
   Error_V9_11 = empty_violation();
   drErrHash[xc(V9_11)] = Error_V9_11;
   Error_V9_12 = empty_violation();
   drErrHash[xc(V9_12)] = Error_V9_12;
   Error_V9_131 = empty_violation();
   drErrHash[xc(V9_131)] = Error_V9_131;
   Error_V9_132 = empty_violation();
   drErrHash[xc(V9_132)] = Error_V9_132;
   Error_V9_153 = empty_violation();
   drErrHash[xc(V9_153)] = Error_V9_153;
   Error_V9_21 = empty_violation();
   drErrHash[xc(V9_21)] = Error_V9_21;
   Error_V9_31 = empty_violation();
   drErrHash[xc(V9_31)] = Error_V9_31;
   Error_V9_32 = empty_violation();
   drErrHash[xc(V9_32)] = Error_V9_32;
   Error_V9_33 = empty_violation();
   drErrHash[xc(V9_33)] = Error_V9_33;
   Error_V9_34 = empty_violation();
   drErrHash[xc(V9_34)] = Error_V9_34;
   Error_V9_35 = empty_violation();
   drErrHash[xc(V9_35)] = Error_V9_35;
   Error_V9_39 = empty_violation();
   drErrHash[xc(V9_39)] = Error_V9_39;
   Error_V9_40 = empty_violation();
   drErrHash[xc(V9_40)] = Error_V9_40;
   Error_V9_41 = empty_violation();
   drErrHash[xc(V9_41)] = Error_V9_41;
   Error_V9_51 = empty_violation();
   drErrHash[xc(V9_51)] = Error_V9_51;
   Error_V9_52 = empty_violation();
   drErrHash[xc(V9_52)] = Error_V9_52;
   Error_V9_53 = empty_violation();
   drErrHash[xc(V9_53)] = Error_V9_53;
   Error_V9_61 = empty_violation();
   drErrHash[xc(V9_61)] = Error_V9_61;
   Error_V9_62 = empty_violation();
   drErrHash[xc(V9_62)] = Error_V9_62;
   Error_V9_71 = empty_violation();
   drErrHash[xc(V9_71)] = Error_V9_71;
   Error_V9_72 = empty_violation();
   drErrHash[xc(V9_72)] = Error_V9_72;
   Error_V9_73 = empty_violation();
   drErrHash[xc(V9_73)] = Error_V9_73;
   Error_VCH_01 = empty_violation();
   drErrHash[xc(VCH_01)] = Error_VCH_01;
   Error_VCH_02 = empty_violation();
   drErrHash[xc(VCH_02)] = Error_VCH_02;
   Error_VCH_03 = empty_violation();
   drErrHash[xc(VCH_03)] = Error_VCH_03;
   Error_VC_01 = empty_violation();
   drErrHash[xc(VC_01)] = Error_VC_01;
   Error_VC_02 = empty_violation();
   drErrHash[xc(VC_02)] = Error_VC_02;
   Error_VC_03 = empty_violation();
   drErrHash[xc(VC_03)] = Error_VC_03;
   Error_VC_04 = empty_violation();
   drErrHash[xc(VC_04)] = Error_VC_04;
   Error_VC_05 = empty_violation();
   drErrHash[xc(VC_05)] = Error_VC_05;
   Error_VC_06 = empty_violation();
   drErrHash[xc(VC_06)] = Error_VC_06;
   Error_VC_07 = empty_violation();
   drErrHash[xc(VC_07)] = Error_VC_07;
   Error_VC_08 = empty_violation();
   drErrHash[xc(VC_08)] = Error_VC_08;
   Error_VC_09 = empty_violation();
   drErrHash[xc(VC_09)] = Error_VC_09;
   Error_VC_10 = empty_violation();
   drErrHash[xc(VC_10)] = Error_VC_10;
   Error_VC_11 = empty_violation();
   drErrHash[xc(VC_11)] = Error_VC_11;
   Error_VC_12 = empty_violation();
   drErrHash[xc(VC_12)] = Error_VC_12;
   Error_VC_134 = empty_violation();
   drErrHash[xc(VC_134)] = Error_VC_134;
   Error_VC_139 = empty_violation();
   drErrHash[xc(VC_139)] = Error_VC_139;
   Error_VC_19 = empty_violation();
   drErrHash[xc(VC_19)] = Error_VC_19;
   Error_VC_22 = empty_violation();
   drErrHash[xc(VC_22)] = Error_VC_22;
   Error_VC_23 = empty_violation();
   drErrHash[xc(VC_23)] = Error_VC_23;
   Error_VC_24 = empty_violation();
   drErrHash[xc(VC_24)] = Error_VC_24;
   Error_VC_26 = empty_violation();
   drErrHash[xc(VC_26)] = Error_VC_26;
   Error_VC_30 = empty_violation();
   drErrHash[xc(VC_30)] = Error_VC_30;
   Error_VC_31 = empty_violation();
   drErrHash[xc(VC_31)] = Error_VC_31;
   Error_VC_32 = empty_violation();
   drErrHash[xc(VC_32)] = Error_VC_32;
   Error_VC_33 = empty_violation();
   drErrHash[xc(VC_33)] = Error_VC_33;
   Error_VC_34 = empty_violation();
   drErrHash[xc(VC_34)] = Error_VC_34;
   Error_VC_35 = empty_violation();
   drErrHash[xc(VC_35)] = Error_VC_35;
   Error_VC_36 = empty_violation();
   drErrHash[xc(VC_36)] = Error_VC_36;
   Error_VC_37 = empty_violation();
   drErrHash[xc(VC_37)] = Error_VC_37;
   Error_VC_38 = empty_violation();
   drErrHash[xc(VC_38)] = Error_VC_38;
   Error_VC_39 = empty_violation();
   drErrHash[xc(VC_39)] = Error_VC_39;
   Error_VC_40 = empty_violation();
   drErrHash[xc(VC_40)] = Error_VC_40;
   Error_VC_41 = empty_violation();
   drErrHash[xc(VC_41)] = Error_VC_41;
   Error_VC_42 = empty_violation();
   drErrHash[xc(VC_42)] = Error_VC_42;
   Error_VC_43 = empty_violation();
   drErrHash[xc(VC_43)] = Error_VC_43;
   Error_VC_44 = empty_violation();
   drErrHash[xc(VC_44)] = Error_VC_44;
   Error_VC_46 = empty_violation();
   drErrHash[xc(VC_46)] = Error_VC_46;
   Error_VC_47 = empty_violation();
   drErrHash[xc(VC_47)] = Error_VC_47;
   Error_VC_48 = empty_violation();
   drErrHash[xc(VC_48)] = Error_VC_48;
   Error_VC_49 = empty_violation();
   drErrHash[xc(VC_49)] = Error_VC_49;
   Error_VC_51 = empty_violation();
   drErrHash[xc(VC_51)] = Error_VC_51;
   Error_VC_61 = empty_violation();
   drErrHash[xc(VC_61)] = Error_VC_61;
   Error_VC_70 = empty_violation();
   drErrHash[xc(VC_70)] = Error_VC_70;
   Error_VD_07 = empty_violation();
   drErrHash[xc(VD_07)] = Error_VD_07;
   Error_VD_08 = empty_violation();
   drErrHash[xc(VD_08)] = Error_VD_08;
   Error_VD_09 = empty_violation();
   drErrHash[xc(VD_09)] = Error_VD_09;
   Error_VD_10 = empty_violation();
   drErrHash[xc(VD_10)] = Error_VD_10;
   Error_VD_11 = empty_violation();
   drErrHash[xc(VD_11)] = Error_VD_11;
   Error_VD_17 = empty_violation();
   drErrHash[xc(VD_17)] = Error_VD_17;
   Error_VD_19 = empty_violation();
   drErrHash[xc(VD_19)] = Error_VD_19;
   Error_VD_20 = empty_violation();
   drErrHash[xc(VD_20)] = Error_VD_20;
   Error_VD_21 = empty_violation();
   drErrHash[xc(VD_21)] = Error_VD_21;
   Error_VD_27 = empty_violation();
   drErrHash[xc(VD_27)] = Error_VD_27;
   Error_VD_28 = empty_violation();
   drErrHash[xc(VD_28)] = Error_VD_28;
   Error_VD_29 = empty_violation();
   drErrHash[xc(VD_29)] = Error_VD_29;
   Error_VD_30 = empty_violation();
   drErrHash[xc(VD_30)] = Error_VD_30;
   Error_VD_31 = empty_violation();
   drErrHash[xc(VD_31)] = Error_VD_31;
   Error_VD_57 = empty_violation();
   drErrHash[xc(VD_57)] = Error_VD_57;
   Error_VD_58 = empty_violation();
   drErrHash[xc(VD_58)] = Error_VD_58;
   Error_VD_59 = empty_violation();
   drErrHash[xc(VD_59)] = Error_VD_59;
   Error_VD_60 = empty_violation();
   drErrHash[xc(VD_60)] = Error_VD_60;
   Error_VD_61 = empty_violation();
   drErrHash[xc(VD_61)] = Error_VD_61;
   Error_XDC_21 = empty_violation();
   drErrHash[xc(XDC_21)] = Error_XDC_21;
   Error_XG_01 = empty_violation();
   drErrHash[xc(XG_01)] = Error_XG_01;
   Error_XG_02 = empty_violation();
   drErrHash[xc(XG_02)] = Error_XG_02;
   Error_XG_03 = empty_violation();
   drErrHash[xc(XG_03)] = Error_XG_03;
   Error_XG_05 = empty_violation();
   drErrHash[xc(XG_05)] = Error_XG_05;
   Error_XG_06 = empty_violation();
   drErrHash[xc(XG_06)] = Error_XG_06;
   Error_XG_07 = empty_violation();
   drErrHash[xc(XG_07)] = Error_XG_07;
   Error_XG_08 = empty_violation();
   drErrHash[xc(XG_08)] = Error_XG_08;
   Error_XG_09 = empty_violation();
   drErrHash[xc(XG_09)] = Error_XG_09;
   Error_XG_10 = empty_violation();
   drErrHash[xc(XG_10)] = Error_XG_10;
   Error_XG_11 = empty_violation();
   drErrHash[xc(XG_11)] = Error_XG_11;
   Error_XG_12 = empty_violation();
   drErrHash[xc(XG_12)] = Error_XG_12;
   Error_XG_13 = empty_violation();
   drErrHash[xc(XG_13)] = Error_XG_13;
   Error_XG_21 = empty_violation();
   drErrHash[xc(XG_21)] = Error_XG_21;
   Error_XPL_01 = empty_violation();
   drErrHash[xc(XPL_01)] = Error_XPL_01;
   Error_XPL_02 = empty_violation();
   drErrHash[xc(XPL_02)] = Error_XPL_02;


   // define/initialize a hash for rule label to gds dl dt 
   // the dl will map to drawn layer or generic unused layer for non-layer error codes
   // the dt will map to error label + 1000
   drErrGDSHash:typeHashString2gds = { 
      xc(ADC_04) => { 305 , 1004 },
      xc(ADC_21) => { 305 , 1021 },
      xc(AG4_01) => { 230 , 1001 },
      xc(AG4_02) => { 230 , 1002 },
      xc(AG4_03) => { 230 , 1003 },
      xc(AG4_04) => { 230 , 1004 },
      xc(AG4_07) => { 230 , 1007 },
      xc(AG4_08) => { 230 , 1008 },
      xc(AG4_09) => { 230 , 1009 },
      xc(AG4_10) => { 230 , 1010 },
      xc(AG6_01) => { 231 , 1001 },
      xc(AG6_02) => { 231 , 1002 },
      xc(AG6_03) => { 231 , 1003 },
      xc(AG6_04) => { 231 , 1004 },
      xc(AG6_07) => { 231 , 1007 },
      xc(AG6_08) => { 231 , 1008 },
      xc(AG6_09) => { 231 , 1009 },
      xc(AG6_10) => { 231 , 1010 },
      xc(AL_01) => { 169 , 1001 },
      xc(AL_05) => { 169 , 1005 },
      xc(AL_06) => { 169 , 1006 },
      xc(AL_07) => { 169 , 1007 },
      xc(AL_08) => { 169 , 1008 },
      xc(AL_09) => { 169 , 1009 },
      xc(AL_10) => { 169 , 1010 },
      xc(AL_11) => { 169 , 1011 },
      xc(AL_116) => { 169 , 1116 },
      xc(AL_12) => { 169 , 1012 },
      xc(AL_13) => { 169 , 1013 },
      xc(AL_14) => { 169 , 1014 },
      xc(AL_15) => { 169 , 1015 },
      xc(AL_16) => { 169 , 1016 },
      xc(AL_17) => { 169 , 1017 },
      xc(AL_31) => { 169 , 1031 },
      xc(AL_32) => { 169 , 1032 },
      xc(AL_33) => { 169 , 1033 },
      xc(AL_34) => { 169 , 1034 },
      xc(AN_72) => { 702 , 1072 },
      xc(APC_42) => { 106 , 1042 },
      xc(APC_44) => { 106 , 1044 },
      xc(APL_01) => { 502 , 1001 },
      xc(APL_02) => { 502 , 1002 },
      xc(APL_04) => { 502 , 1004 },
      xc(APL_11) => { 502 , 1011 },
      xc(APL_13) => { 502 , 1013 },
      xc(APL_15) => { 502 , 1015 },
      xc(APL_25) => { 502 , 1025 },
      xc(BC_00) => { 450 , 1000 },
      xc(BDC_02) => { 205 , 1002 },
      xc(BDC_03) => { 205 , 1003 },
      xc(BDC_04) => { 205 , 1004 },
      xc(BDC_11) => { 205 , 1011 },
      xc(BDC_31) => { 205 , 1031 },
      xc(BDC_33) => { 205 , 1033 },
      xc(BDC_36) => { 205 , 1036 },
      xc(BDF_10) => { 401 , 1010 },
      xc(BDF_91) => { 401 , 1091 },
      xc(BDF_92) => { 401 , 1092 },
      xc(BDG_91) => { 308 , 1091 },
      xc(BDG_92) => { 308 , 1092 },
      xc(BDG_93) => { 308 , 1093 },
      xc(BDG_94) => { 308 , 1094 },
      xc(BJ_01) => { 501 , 1001 },
      xc(BJ_03) => { 501 , 1003 },
      xc(BJ_05) => { 501 , 1005 },
      xc(BJ_11) => { 501 , 1011 },
      xc(BJ_12) => { 501 , 1012 },
      xc(BJ_14) => { 501 , 1014 },
      xc(BJ_15) => { 501 , 1015 },
      xc(BK_02) => { 208 , 1002 },
      xc(BK_03) => { 208 , 1003 },
      xc(BK_05) => { 208 , 1005 },
      xc(BK_11) => { 208 , 1011 },
      xc(BK_12) => { 208 , 1012 },
      xc(BK_14) => { 208 , 1014 },
      xc(BK_15) => { 208 , 1015 },
      xc(BK_23) => { 208 , 1023 },
      xc(BLDI_02) => { 551 , 1002 },
      xc(BLDI_102) => { 551 , 1102 },
      xc(BLDI_192) => { 551 , 1192 },
      xc(BLDI_202) => { 551 , 1202 },
      xc(BLDI_292) => { 551 , 1292 },
      xc(BLDI_302) => { 551 , 1302 },
      xc(BLDI_392) => { 551 , 1392 },
      xc(BLDI_402) => { 551 , 1402 },
      xc(BLDI_492) => { 551 , 1492 },
      xc(BLDI_592) => { 551 , 1592 },
      xc(BLD_233) => { 550 , 1233 },
      xc(BLD_234) => { 550 , 1234 },
      xc(BLD_333) => { 550 , 1333 },
      xc(BLD_334) => { 550 , 1334 },
      xc(BLD_431) => { 550 , 1431 },
      xc(BLD_433) => { 550 , 1433 },
      xc(BLD_531) => { 550 , 1531 },
      xc(BLD_533) => { 550 , 1533 },
      xc(BLD_534) => { 550 , 1534 },
      xc(BLD_620) => { 550 , 1620 },
      xc(BLD_631) => { 550 , 1631 },
      xc(BLD_633) => { 550 , 1633 },
      xc(BLD_731) => { 550 , 1731 },
      xc(BNW_01) => { 311 , 1001 },
      xc(BNW_03) => { 311 , 1003 },
      xc(BNW_24) => { 311 , 1024 },
      xc(BNW_28) => { 311 , 1028 },
      xc(BNW_29) => { 311 , 1029 },
      xc(BNW_31) => { 311 , 1031 },
      xc(BPC_41) => { 206 , 1041 },
      xc(BPC_44) => { 206 , 1044 },
      xc(BPC_46) => { 206 , 1046 },
      xc(BPC_47) => { 206 , 1047 },
      xc(BPC_61) => { 206 , 1061 },
      xc(BPC_81) => { 206 , 1081 },
      xc(BPC_83) => { 206 , 1083 },
      xc(BPL_01) => { 602 , 1001 },
      xc(BPL_02) => { 602 , 1002 },
      xc(BPL_04) => { 602 , 1004 },
      xc(BPL_11) => { 602 , 1011 },
      xc(BPL_13) => { 602 , 1013 },
      xc(BU_01) => { 180 , 1001 },
      xc(BU_02) => { 180 , 1002 },
      xc(BU_03) => { 180 , 1003 },
      xc(BU_04) => { 180 , 1004 },
      xc(BU_05) => { 180 , 1005 },
      xc(BU_06) => { 180 , 1006 },
      xc(BU_101) => { 180 , 1101 },
      xc(BU_102) => { 180 , 1102 },
      xc(BU_103) => { 180 , 1103 },
      xc(BU_104) => { 180 , 1104 },
      xc(BU_105) => { 180 , 1105 },
      xc(BU_110) => { 180 , 1110 },
      xc(BU_111) => { 180 , 1111 },
      xc(BU_112) => { 180 , 1112 },
      xc(BU_124) => { 180 , 1124 },
      xc(BU_21) => { 180 , 1021 },
      xc(BU_22) => { 180 , 1022 },
      xc(BU_23) => { 180 , 1023 },
      xc(BU_24) => { 180 , 1024 },
      xc(BU_25) => { 180 , 1025 },
      xc(BVC_01) => { 103 , 1001 },
      xc(BVC_02) => { 103 , 1002 },
      xc(BXG_11) => { 209 , 1011 },
      xc(CDW_100) => { 9999 , 1100 },
      xc(CDW_101) => { 9999 , 1101 },
      xc(CDW_102) => { 9999 , 1102 },
      xc(CDW_103) => { 9999 , 1103 },
      xc(CDW_104) => { 9999 , 1104 },
      xc(CDW_105) => { 9999 , 1105 },
      xc(CDW_106) => { 9999 , 1106 },
      xc(CDW_107) => { 9999 , 1107 },
      xc(CDW_131) => { 9999 , 1131 },
      xc(CDW_200) => { 9999 , 1200 },
      xc(CDW_201) => { 9999 , 1201 },
      xc(CDW_202) => { 9999 , 1202 },
      xc(CDW_203) => { 9999 , 1203 },
      xc(CDW_204) => { 9999 , 1204 },
      xc(CDW_205) => { 9999 , 1205 },
      xc(CDW_206) => { 9999 , 1206 },
      xc(CDW_207) => { 9999 , 1207 },
      xc(CDW_208) => { 9999 , 1208 },
      xc(CDW_209) => { 9999 , 1209 },
      xc(CDW_210) => { 9999 , 1210 },
      xc(CDW_211) => { 9999 , 1211 },
      xc(CDW_231) => { 9999 , 1231 },
      xc(CD_100) => { 50 , 1100 },
      xc(CD_101) => { 50 , 1101 },
      xc(CD_102) => { 50 , 1102 },
      xc(CD_103) => { 50 , 1103 },
      xc(CD_104) => { 50 , 1104 },
      xc(CD_105) => { 50 , 1105 },
      xc(CD_106) => { 50 , 1106 },
      xc(CD_107) => { 50 , 1107 },
      xc(CD_131) => { 50 , 1131 },
      xc(CD_200) => { 50 , 1200 },
      xc(CD_201) => { 50 , 1201 },
      xc(CD_202) => { 50 , 1202 },
      xc(CD_203) => { 50 , 1203 },
      xc(CD_204) => { 50 , 1204 },
      xc(CD_205) => { 50 , 1205 },
      xc(CD_206) => { 50 , 1206 },
      xc(CD_207) => { 50 , 1207 },
      xc(CD_208) => { 50 , 1208 },
      xc(CD_209) => { 50 , 1209 },
      xc(CD_210) => { 50 , 1210 },
      xc(CD_211) => { 50 , 1211 },
      xc(CD_231) => { 50 , 1231 },
      xc(CHN_01) => { 8130 , 1001 },
      xc(CHN_02) => { 8130 , 1002 },
      xc(CHN_03) => { 8130 , 1003 },
      xc(CHN_04) => { 8130 , 1004 },
      xc(CHN_05) => { 8130 , 1005 },
      xc(CHN_06) => { 8130 , 1006 },
      xc(CHN_07) => { 8130 , 1007 },
      xc(CHN_08) => { 8130 , 1008 },
      xc(CHW_01) => { 9999 , 1001 },
      xc(CHW_02) => { 9999 , 1002 },
      xc(CHW_03) => { 9999 , 1003 },
      xc(CHW_04) => { 9999 , 1004 },
      xc(CHW_05) => { 9999 , 1005 },
      xc(CHW_06) => { 9999 , 1006 },
      xc(CHW_07) => { 9999 , 1007 },
      xc(CHW_08) => { 9999 , 1008 },
      xc(CHW_09) => { 9999 , 1009 },
      xc(CHW_10) => { 9999 , 1010 },
      xc(CHW_11) => { 9999 , 1011 },
      xc(CHW_12) => { 9999 , 1012 },
      xc(CHW_13) => { 9999 , 1013 },
      xc(CHW_14) => { 9999 , 1014 },
      xc(CMW_05) => { 9999 , 1005 },
      xc(CMW_06) => { 9999 , 1006 },
      xc(CMW_07) => { 9999 , 1007 },
      xc(CMW_08) => { 9999 , 1008 },
      xc(CMW_09) => { 9999 , 1009 },
      xc(CM_05) => { 51 , 1005 },
      xc(CM_06) => { 51 , 1006 },
      xc(CM_07) => { 51 , 1007 },
      xc(CM_08) => { 51 , 1008 },
      xc(CM_09) => { 51 , 1009 },
      xc(DA_01) => { 102 , 1001 },
      xc(DA_02) => { 102 , 1002 },
      xc(DA_03) => { 102 , 1003 },
      xc(DA_04) => { 102 , 1004 },
      xc(DA_05) => { 102 , 1005 },
      xc(DA_06) => { 102 , 1006 },
      xc(DA_11) => { 102 , 1011 },
      xc(DA_12) => { 102 , 1012 },
      xc(DA_171) => { 102 , 1171 },
      xc(DA_172) => { 102 , 1172 },
      xc(DA_173) => { 102 , 1173 },
      xc(DA_174) => { 102 , 1174 },
      xc(DA_175) => { 102 , 1175 },
      xc(DA_176) => { 102 , 1176 },
      xc(DA_22) => { 102 , 1022 },
      xc(DA_24) => { 102 , 1024 },
      xc(DA_25) => { 102 , 1025 },
      xc(DA_26) => { 102 , 1026 },
      xc(DA_27) => { 102 , 1027 },
      xc(DA_30) => { 102 , 1030 },
      xc(DA_31) => { 102 , 1031 },
      xc(DA_32) => { 102 , 1032 },
      xc(DA_33) => { 102 , 1033 },
      xc(DA_35) => { 102 , 1035 },
      xc(DA_361) => { 102 , 1361 },
      xc(DA_362) => { 102 , 1362 },
      xc(DA_371) => { 102 , 1371 },
      xc(DA_372) => { 102 , 1372 },
      xc(DA_373) => { 102 , 1373 },
      xc(DA_38) => { 102 , 1038 },
      xc(DA_41) => { 102 , 1041 },
      xc(DA_44) => { 102 , 1044 },
      xc(DA_45) => { 102 , 1045 },
      xc(DA_46) => { 102 , 1046 },
      xc(DA_52) => { 102 , 1052 },
      xc(DA_53) => { 102 , 1053 },
      xc(DA_54) => { 102 , 1054 },
      xc(DA_55) => { 102 , 1055 },
      xc(DA_56) => { 102 , 1056 },
      xc(DA_70) => { 102 , 1070 },
      xc(DA_71) => { 102 , 1071 },
      xc(DA_72) => { 102 , 1072 },
      xc(DA_73) => { 102 , 1073 },
      xc(DC_00) => { 5 , 1000 },
      xc(DC_01) => { 5 , 1001 },
      xc(DC_02) => { 5 , 1002 },
      xc(DC_03) => { 5 , 1003 },
      xc(DC_04) => { 5 , 1004 },
      xc(DC_05) => { 5 , 1005 },
      xc(DC_06) => { 5 , 1006 },
      xc(DC_11) => { 5 , 1011 },
      xc(DC_12) => { 5 , 1012 },
      xc(DC_15) => { 5 , 1015 },
      xc(DC_20) => { 5 , 1020 },
      xc(DC_21) => { 5 , 1021 },
      xc(DC_22) => { 5 , 1022 },
      xc(DC_23) => { 5 , 1023 },
      xc(DC_24) => { 5 , 1024 },
      xc(DC_30) => { 5 , 1030 },
      xc(DC_31) => { 5 , 1031 },
      xc(DC_32) => { 5 , 1032 },
      xc(DC_33) => { 5 , 1033 },
      xc(DC_34) => { 5 , 1034 },
      xc(DC_35) => { 5 , 1035 },
      xc(DC_36) => { 5 , 1036 },
      xc(DC_37) => { 5 , 1037 },
      xc(DC_38) => { 5 , 1038 },
      xc(DC_50) => { 5 , 1050 },
      xc(DC_52) => { 5 , 1052 },
      xc(DF_01) => { 1 , 1001 },
      xc(DF_02) => { 1 , 1002 },
      xc(DF_03) => { 1 , 1003 },
      xc(DF_04) => { 1 , 1004 },
      xc(DF_07) => { 1 , 1007 },
      xc(DF_09) => { 1 , 1009 },
      xc(DF_10) => { 1 , 1010 },
      xc(DF_19) => { 1 , 1019 },
      xc(DF_31) => { 1 , 1031 },
      xc(DF_32) => { 1 , 1032 },
      xc(DF_34) => { 1 , 1034 },
      xc(DF_35) => { 1 , 1035 },
      xc(DF_43) => { 1 , 1043 },
      xc(DF_51) => { 1 , 1051 },
      xc(DF_52) => { 1 , 1052 },
      xc(DF_56) => { 1 , 1056 },
      xc(DF_80) => { 1 , 1080 },
      xc(DF_84) => { 1 , 1084 },
      xc(DG_01) => { 8 , 1001 },
      xc(DG_02) => { 8 , 1002 },
      xc(DG_03) => { 8 , 1003 },
      xc(DG_04) => { 8 , 1004 },
      xc(DG_05) => { 8 , 1005 },
      xc(DI_01) => { 750 , 1001 },
      xc(DI_02) => { 750 , 1002 },
      xc(DI_03) => { 750 , 1003 },
      xc(DI_04) => { 750 , 1004 },
      xc(DI_06) => { 750 , 1006 },
      xc(DI_07) => { 750 , 1007 },
      xc(DN_01) => { 20 , 1001 },
      xc(DN_02) => { 20 , 1002 },
      xc(DN_03) => { 20 , 1003 },
      xc(DN_04) => { 20 , 1004 },
      xc(DN_05) => { 20 , 1005 },
      xc(DN_07) => { 20 , 1007 },
      xc(DN_08) => { 20 , 1008 },
      xc(DN_09) => { 20 , 1009 },
      xc(DN_10) => { 20 , 1010 },
      xc(DN_11) => { 20 , 1011 },
      xc(DN_12) => { 20 , 1012 },
      xc(DN_13) => { 20 , 1013 },
      xc(DS_00) => { 202 , 1000 },
      xc(DS_01) => { 202 , 1001 },
      xc(DS_02) => { 202 , 1002 },
      xc(DS_03) => { 202 , 1003 },
      xc(DS_04) => { 202 , 1004 },
      xc(DS_05) => { 202 , 1005 },
      xc(DS_09) => { 202 , 1009 },
      xc(DS_11) => { 202 , 1011 },
      xc(DS_12) => { 202 , 1012 },
      xc(DS_171) => { 202 , 1171 },
      xc(DS_172) => { 202 , 1172 },
      xc(DS_173) => { 202 , 1173 },
      xc(DS_174) => { 202 , 1174 },
      xc(DS_175) => { 202 , 1175 },
      xc(DS_176) => { 202 , 1176 },
      xc(DS_24) => { 202 , 1024 },
      xc(DS_25) => { 202 , 1025 },
      xc(DS_31) => { 202 , 1031 },
      xc(DS_32) => { 202 , 1032 },
      xc(DS_33) => { 202 , 1033 },
      xc(DS_35) => { 202 , 1035 },
      xc(DS_361) => { 202 , 1361 },
      xc(DS_362) => { 202 , 1362 },
      xc(DS_371) => { 202 , 1371 },
      xc(DS_372) => { 202 , 1372 },
      xc(DS_373) => { 202 , 1373 },
      xc(DS_38) => { 202 , 1038 },
      xc(DS_41) => { 202 , 1041 },
      xc(DS_50) => { 202 , 1050 },
      xc(DS_52) => { 202 , 1052 },
      xc(DS_540) => { 202 , 1540 },
      xc(DS_541) => { 202 , 1541 },
      xc(DS_542) => { 202 , 1542 },
      xc(DS_543) => { 202 , 1543 },
      xc(DS_544) => { 202 , 1544 },
      xc(DS_60) => { 202 , 1060 },
      xc(DS_601) => { 202 , 1601 },
      xc(DS_602) => { 202 , 1602 },
      xc(DS_61) => { 202 , 1061 },
      xc(DS_62) => { 202 , 1062 },
      xc(DS_63) => { 202 , 1063 },
      xc(DS_64) => { 202 , 1064 },
      xc(DS_645) => { 202 , 1645 },
      xc(DS_65) => { 202 , 1065 },
      xc(DS_66) => { 202 , 1066 },
      xc(DS_660) => { 202 , 1660 },
      xc(DS_661) => { 202 , 1661 },
      xc(DS_662) => { 202 , 1662 },
      xc(DS_663) => { 202 , 1663 },
      xc(DS_664) => { 202 , 1664 },
      xc(DS_665) => { 202 , 1665 },
      xc(DS_666) => { 202 , 1666 },
      xc(DS_667) => { 202 , 1667 },
      xc(DS_67) => { 202 , 1067 },
      xc(DS_68) => { 202 , 1068 },
      xc(DS_70) => { 202 , 1070 },
      xc(DS_71) => { 202 , 1071 },
      xc(DS_72) => { 202 , 1072 },
      xc(DS_73) => { 202 , 1073 },
      xc(DS_75) => { 202 , 1075 },
      xc(DS_76) => { 202 , 1076 },
      xc(DS_77) => { 202 , 1077 },
      xc(DS_78) => { 202 , 1078 },
      xc(DS_79) => { 202 , 1079 },
      xc(DS_80) => { 202 , 1080 },
      xc(DS_81) => { 202 , 1081 },
      xc(DS_82) => { 202 , 1082 },
      xc(DT_01) => { 165 , 1001 },
      xc(DT_02) => { 165 , 1002 },
      xc(DT_03) => { 165 , 1003 },
      xc(DT_04) => { 165 , 1004 },
      xc(DT_05) => { 165 , 1005 },
      xc(DT_06) => { 165 , 1006 },
      xc(DT_11) => { 165 , 1011 },
      xc(DT_12) => { 165 , 1012 },
      xc(DT_171) => { 165 , 1171 },
      xc(DT_172) => { 165 , 1172 },
      xc(DT_173) => { 165 , 1173 },
      xc(DT_174) => { 165 , 1174 },
      xc(DT_175) => { 165 , 1175 },
      xc(DT_176) => { 165 , 1176 },
      xc(DT_22) => { 165 , 1022 },
      xc(DT_24) => { 165 , 1024 },
      xc(DT_25) => { 165 , 1025 },
      xc(DT_26) => { 165 , 1026 },
      xc(DT_27) => { 165 , 1027 },
      xc(DT_30) => { 165 , 1030 },
      xc(DT_31) => { 165 , 1031 },
      xc(DT_32) => { 165 , 1032 },
      xc(DT_33) => { 165 , 1033 },
      xc(DT_35) => { 165 , 1035 },
      xc(DT_361) => { 165 , 1361 },
      xc(DT_362) => { 165 , 1362 },
      xc(DT_363) => { 165 , 1363 },
      xc(DT_364) => { 165 , 1364 },
      xc(DT_371) => { 165 , 1371 },
      xc(DT_372) => { 165 , 1372 },
      xc(DT_373) => { 165 , 1373 },
      xc(DT_374) => { 165 , 1374 },
      xc(DT_375) => { 165 , 1375 },
      xc(DT_38) => { 165 , 1038 },
      xc(DT_41) => { 165 , 1041 },
      xc(DT_44) => { 165 , 1044 },
      xc(DT_45) => { 165 , 1045 },
      xc(DT_52) => { 165 , 1052 },
      xc(DT_53) => { 165 , 1053 },
      xc(DT_54) => { 165 , 1054 },
      xc(DT_55) => { 165 , 1055 },
      xc(DT_56) => { 165 , 1056 },
      xc(DT_70) => { 165 , 1070 },
      xc(DT_71) => { 165 , 1071 },
      xc(DT_72) => { 165 , 1072 },
      xc(DT_73) => { 165 , 1073 },
      xc(DX_01) => { 171 , 1001 },
      xc(DX_02) => { 171 , 1002 },
      xc(DX_03) => { 171 , 1003 },
      xc(DX_04) => { 171 , 1004 },
      xc(DX_05) => { 171 , 1005 },
      xc(DX_06) => { 171 , 1006 },
      xc(DX_11) => { 171 , 1011 },
      xc(DX_12) => { 171 , 1012 },
      xc(DX_171) => { 171 , 1171 },
      xc(DX_172) => { 171 , 1172 },
      xc(DX_173) => { 171 , 1173 },
      xc(DX_174) => { 171 , 1174 },
      xc(DX_175) => { 171 , 1175 },
      xc(DX_176) => { 171 , 1176 },
      xc(DX_177) => { 171 , 1177 },
      xc(DX_22) => { 171 , 1022 },
      xc(DX_24) => { 171 , 1024 },
      xc(DX_25) => { 171 , 1025 },
      xc(DX_26) => { 171 , 1026 },
      xc(DX_27) => { 171 , 1027 },
      xc(DX_30) => { 171 , 1030 },
      xc(DX_31) => { 171 , 1031 },
      xc(DX_32) => { 171 , 1032 },
      xc(DX_33) => { 171 , 1033 },
      xc(DX_35) => { 171 , 1035 },
      xc(DX_361) => { 171 , 1361 },
      xc(DX_362) => { 171 , 1362 },
      xc(DX_363) => { 171 , 1363 },
      xc(DX_364) => { 171 , 1364 },
      xc(DX_371) => { 171 , 1371 },
      xc(DX_372) => { 171 , 1372 },
      xc(DX_373) => { 171 , 1373 },
      xc(DX_374) => { 171 , 1374 },
      xc(DX_375) => { 171 , 1375 },
      xc(DX_376) => { 171 , 1376 },
      xc(DX_38) => { 171 , 1038 },
      xc(DX_41) => { 171 , 1041 },
      xc(DX_44) => { 171 , 1044 },
      xc(DX_45) => { 171 , 1045 },
      xc(DX_52) => { 171 , 1052 },
      xc(DX_53) => { 171 , 1053 },
      xc(DX_54) => { 171 , 1054 },
      xc(DX_55) => { 171 , 1055 },
      xc(DX_56) => { 171 , 1056 },
      xc(DX_70) => { 171 , 1070 },
      xc(DX_71) => { 171 , 1071 },
      xc(DX_72) => { 171 , 1072 },
      xc(DX_73) => { 171 , 1073 },
      xc(EA_01) => { 81 , 1001 },
      xc(EA_02) => { 81 , 1002 },
      xc(EA_39) => { 81 , 1039 },
      xc(EA_40) => { 81 , 1040 },
      xc(EA_44) => { 81 , 1044 },
      xc(EA_45) => { 81 , 1045 },
      xc(EA_46) => { 81 , 1046 },
      xc(EA_91) => { 81 , 1091 },
      xc(EA_92) => { 81 , 1092 },
      xc(EDM_01) => { 8129 , 1001 },
      xc(EDM_02) => { 8129 , 1002 },
      xc(EDM_03) => { 8129 , 1003 },
      xc(EDM_04) => { 8129 , 1004 },
      xc(EDM_05) => { 8129 , 1005 },
      xc(EDM_06) => { 8129 , 1006 },
      xc(EDM_07) => { 8129 , 1007 },
      xc(EDM_08) => { 8129 , 1008 },
      xc(EDM_09) => { 8129 , 1009 },
      xc(EDM_10) => { 8129 , 1010 },
      xc(EDM_11) => { 8129 , 1011 },
      xc(EDM_12) => { 8129 , 1012 },
      xc(EDM_13) => { 8129 , 1013 },
      xc(EDM_14) => { 8129 , 1014 },
      xc(EDW_01) => { 9999 , 1001 },
      xc(EDW_02) => { 9999 , 1002 },
      xc(EDW_03) => { 9999 , 1003 },
      xc(EDW_04) => { 9999 , 1004 },
      xc(EDW_05) => { 9999 , 1005 },
      xc(EDW_06) => { 9999 , 1006 },
      xc(EDW_07) => { 9999 , 1007 },
      xc(EDW_08) => { 9999 , 1008 },
      xc(EDW_09) => { 9999 , 1009 },
      xc(EDW_10) => { 9999 , 1010 },
      xc(EDW_11) => { 9999 , 1011 },
      xc(EDW_12) => { 9999 , 1012 },
      xc(EDW_13) => { 9999 , 1013 },
      xc(EDW_14) => { 9999 , 1014 },
      xc(EDW_15) => { 9999 , 1015 },
      xc(EDW_16) => { 9999 , 1016 },
      xc(EDW_17) => { 9999 , 1017 },
      xc(EDW_18) => { 9999 , 1018 },
      xc(EHV_01) => { 170 , 1001 },
      xc(EHV_02) => { 170 , 1002 },
      xc(EHV_04) => { 170 , 1004 },
      xc(EHV_06) => { 170 , 1006 },
      xc(EHV_07) => { 170 , 1007 },
      xc(EHV_09) => { 170 , 1009 },
      xc(EHV_11) => { 170 , 1011 },
      xc(EHV_12) => { 170 , 1012 },
      xc(EHV_13) => { 170 , 1013 },
      xc(EHV_15) => { 170 , 1015 },
      xc(EHV_16) => { 170 , 1016 },
      xc(EHV_18) => { 170 , 1018 },
      xc(EHV_19) => { 170 , 1019 },
      xc(EHV_20) => { 170 , 1020 },
      xc(EHV_21) => { 170 , 1021 },
      xc(EHV_23) => { 170 , 1023 },
      xc(EHV_24) => { 170 , 1024 },
      xc(EHV_25) => { 170 , 1025 },
      xc(EHV_26) => { 170 , 1026 },
      xc(EHV_27) => { 170 , 1027 },
      xc(EHV_34) => { 170 , 1034 },
      xc(EHV_36) => { 170 , 1036 },
      xc(ENW_14) => { 111 , 1014 },
      xc(ENW_21) => { 111 , 1021 },
      xc(ENW_22) => { 111 , 1022 },
      xc(ER_01) => { 19 , 1001 },
      xc(ER_03) => { 19 , 1003 },
      xc(ER_04) => { 19 , 1004 },
      xc(ER_05) => { 19 , 1005 },
      xc(ER_06) => { 19 , 1006 },
      xc(ER_07) => { 19 , 1007 },
      xc(ER_08) => { 19 , 1008 },
      xc(ER_09) => { 19 , 1009 },
      xc(ER_12) => { 19 , 1012 },
      xc(FM_01) => { 151 , 1001 },
      xc(FM_02) => { 151 , 1002 },
      xc(FM_03) => { 151 , 1003 },
      xc(FM_101) => { 151 , 1101 },
      xc(FM_102) => { 151 , 1102 },
      xc(FM_103) => { 151 , 1103 },
      xc(FM_11) => { 151 , 1011 },
      xc(FM_111) => { 151 , 1111 },
      xc(FM_112) => { 151 , 1112 },
      xc(FM_113) => { 151 , 1113 },
      xc(FM_12) => { 151 , 1012 },
      xc(FM_121) => { 151 , 1121 },
      xc(FM_122) => { 151 , 1122 },
      xc(FM_123) => { 151 , 1123 },
      xc(FM_13) => { 151 , 1013 },
      xc(FM_21) => { 151 , 1021 },
      xc(FM_22) => { 151 , 1022 },
      xc(FM_23) => { 151 , 1023 },
      xc(FM_291) => { 151 , 1291 },
      xc(FM_292) => { 151 , 1292 },
      xc(FM_293) => { 151 , 1293 },
      xc(FM_294) => { 151 , 1294 },
      xc(FM_295) => { 151 , 1295 },
      xc(FM_296) => { 151 , 1296 },
      xc(FM_297) => { 151 , 1297 },
      xc(FM_298) => { 151 , 1298 },
      xc(FM_299) => { 151 , 1299 },
      xc(FM_31) => { 151 , 1031 },
      xc(FM_32) => { 151 , 1032 },
      xc(FM_33) => { 151 , 1033 },
      xc(FM_41) => { 151 , 1041 },
      xc(FM_42) => { 151 , 1042 },
      xc(FM_43) => { 151 , 1043 },
      xc(FM_51) => { 151 , 1051 },
      xc(FM_52) => { 151 , 1052 },
      xc(FM_53) => { 151 , 1053 },
      xc(FM_61) => { 151 , 1061 },
      xc(FM_62) => { 151 , 1062 },
      xc(FM_63) => { 151 , 1063 },
      xc(FM_71) => { 151 , 1071 },
      xc(FM_72) => { 151 , 1072 },
      xc(FM_73) => { 151 , 1073 },
      xc(FM_81) => { 151 , 1081 },
      xc(FM_82) => { 151 , 1082 },
      xc(FM_83) => { 151 , 1083 },
      xc(FM_91) => { 151 , 1091 },
      xc(FM_92) => { 151 , 1092 },
      xc(FM_93) => { 151 , 1093 },
      xc(FM_B1) => { 151 , 1000 },
      xc(FM_T1) => { 151 , 1000 },
      xc(GD_01) => { 150 , 1001 },
      xc(GD_02) => { 150 , 1002 },
      xc(GD_100) => { 150 , 1100 },
      xc(GD_101) => { 150 , 1101 },
      xc(GD_102) => { 150 , 1102 },
      xc(GD_103) => { 150 , 1103 },
      xc(GD_104) => { 150 , 1104 },
      xc(GD_105) => { 150 , 1105 },
      xc(GD_106) => { 150 , 1106 },
      xc(GD_107) => { 150 , 1107 },
      xc(GD_108) => { 150 , 1108 },
      xc(GD_109) => { 150 , 1109 },
      xc(GD_110) => { 150 , 1110 },
      xc(GD_111) => { 150 , 1111 },
      xc(GD_112) => { 150 , 1112 },
      xc(GD_120) => { 150 , 1120 },
      xc(GD_121) => { 150 , 1121 },
      xc(GD_122) => { 150 , 1122 },
      xc(GD_123) => { 150 , 1123 },
      xc(GD_200) => { 150 , 1200 },
      xc(GD_201) => { 150 , 1201 },
      xc(GD_202) => { 150 , 1202 },
      xc(GD_203) => { 150 , 1203 },
      xc(GD_204) => { 150 , 1204 },
      xc(GD_205) => { 150 , 1205 },
      xc(GD_206) => { 150 , 1206 },
      xc(GD_207) => { 150 , 1207 },
      xc(GD_208) => { 150 , 1208 },
      xc(GD_209) => { 150 , 1209 },
      xc(GD_21) => { 150 , 1021 },
      xc(GD_210) => { 150 , 1210 },
      xc(GD_211) => { 150 , 1211 },
      xc(GD_212) => { 150 , 1212 },
      xc(GD_22) => { 150 , 1022 },
      xc(GD_51) => { 150 , 1051 },
      xc(GD_52) => { 150 , 1052 },
      xc(GR_01) => { 850 , 1001 },
      xc(GR_02) => { 850 , 1002 },
      xc(GR_03) => { 850 , 1003 },
      xc(GR_04) => { 850 , 1004 },
      xc(GR_05) => { 850 , 1005 },
      xc(HNW_14) => { 211 , 1014 },
      xc(HNW_21) => { 211 , 1021 },
      xc(HNW_22) => { 211 , 1022 },
      xc(HV_01) => { 70 , 1001 },
      xc(HV_02) => { 70 , 1002 },
      xc(HV_04) => { 70 , 1004 },
      xc(HV_09) => { 70 , 1009 },
      xc(HV_11) => { 70 , 1011 },
      xc(HV_12) => { 70 , 1012 },
      xc(HV_13) => { 70 , 1013 },
      xc(HV_16) => { 70 , 1016 },
      xc(HV_18) => { 70 , 1018 },
      xc(HV_19) => { 70 , 1019 },
      xc(HV_20) => { 70 , 1020 },
      xc(HV_22) => { 70 , 1022 },
      xc(HV_23) => { 70 , 1023 },
      xc(HV_24) => { 70 , 1024 },
      xc(HV_25) => { 70 , 1025 },
      xc(HV_26) => { 70 , 1026 },
      xc(HV_27) => { 70 , 1027 },
      xc(HV_34) => { 70 , 1034 },
      xc(HV_36) => { 70 , 1036 },
      xc(HV_90) => { 70 , 1090 },
      xc(IPB_00) => { 427 , 1000 },
      xc(IPB_01) => { 427 , 1001 },
      xc(IPDW_111) => { 433 , 1111 },
      xc(IPDW_191) => { 433 , 1191 },
      xc(IPDW_193) => { 433 , 1193 },
      xc(IPDW_201) => { 433 , 1201 },
      xc(IPDW_391) => { 433 , 1391 },
      xc(IPDW_395) => { 433 , 1395 },
      xc(IPDW_611) => { 433 , 1611 },
      xc(IPD_00) => { 327 , 1000 },
      xc(IPD_01) => { 327 , 1001 },
      xc(IPD_02) => { 327 , 1002 },
      xc(IPD_03) => { 327 , 1003 },
      xc(IPD_04) => { 327 , 1004 },
      xc(IPD_05) => { 327 , 1005 },
      xc(IPD_06) => { 327 , 1006 },
      xc(IPD_07) => { 327 , 1007 },
      xc(IPD_08) => { 327 , 1008 },
      xc(IPD_09) => { 327 , 1009 },
      xc(IPD_10) => { 327 , 1010 },
      xc(IPD_100) => { 327 , 1100 },
      xc(IPD_101) => { 327 , 1101 },
      xc(IPD_102) => { 327 , 1102 },
      xc(IPD_103) => { 327 , 1103 },
      xc(IPD_104) => { 327 , 1104 },
      xc(IPD_105) => { 327 , 1105 },
      xc(IPD_106) => { 327 , 1106 },
      xc(IPD_107) => { 327 , 1107 },
      xc(IPD_108) => { 327 , 1108 },
      xc(IPD_109) => { 327 , 1109 },
      xc(IPD_11) => { 327 , 1011 },
      xc(IPD_110) => { 327 , 1110 },
      xc(IPD_111) => { 327 , 1111 },
      xc(IPD_112) => { 327 , 1112 },
      xc(IPD_113) => { 327 , 1113 },
      xc(IPD_114) => { 327 , 1114 },
      xc(IPD_12) => { 327 , 1012 },
      xc(IPD_13) => { 327 , 1013 },
      xc(IPD_14) => { 327 , 1014 },
      xc(IPD_200) => { 327 , 1200 },
      xc(IPD_201) => { 327 , 1201 },
      xc(IPD_202) => { 327 , 1202 },
      xc(IPD_203) => { 327 , 1203 },
      xc(IPD_204) => { 327 , 1204 },
      xc(IPD_205) => { 327 , 1205 },
      xc(IPD_206) => { 327 , 1206 },
      xc(IPD_207) => { 327 , 1207 },
      xc(IPD_208) => { 327 , 1208 },
      xc(IPD_209) => { 327 , 1209 },
      xc(IPD_210) => { 327 , 1210 },
      xc(IPD_211) => { 327 , 1211 },
      xc(IPD_212) => { 327 , 1212 },
      xc(IPD_213) => { 327 , 1213 },
      xc(IPD_300) => { 327 , 1300 },
      xc(IPD_301) => { 327 , 1301 },
      xc(IPD_302) => { 327 , 1302 },
      xc(IPD_303) => { 327 , 1303 },
      xc(IPD_304) => { 327 , 1304 },
      xc(IPD_305) => { 327 , 1305 },
      xc(IPD_306) => { 327 , 1306 },
      xc(IPD_307) => { 327 , 1307 },
      xc(IPD_308) => { 327 , 1308 },
      xc(IPD_309) => { 327 , 1309 },
      xc(IPD_310) => { 327 , 1310 },
      xc(IPD_311) => { 327 , 1311 },
      xc(IPD_312) => { 327 , 1312 },
      xc(IPD_313) => { 327 , 1313 },
      xc(IPD_405) => { 327 , 1405 },
      xc(IPD_406) => { 327 , 1406 },
      xc(IPD_407) => { 327 , 1407 },
      xc(IPD_408) => { 327 , 1408 },
      xc(IPD_409) => { 327 , 1409 },
      xc(IPD_410) => { 327 , 1410 },
      xc(IPD_411) => { 327 , 1411 },
      xc(IPD_412) => { 327 , 1412 },
      xc(IPD_413) => { 327 , 1413 },
      xc(IPD_505) => { 327 , 1505 },
      xc(IPD_506) => { 327 , 1506 },
      xc(IPD_507) => { 327 , 1507 },
      xc(IPD_508) => { 327 , 1508 },
      xc(IPD_509) => { 327 , 1509 },
      xc(IPD_510) => { 327 , 1510 },
      xc(IPD_511) => { 327 , 1511 },
      xc(IPD_512) => { 327 , 1512 },
      xc(IPD_513) => { 327 , 1513 },
      xc(IPD_600) => { 327 , 1600 },
      xc(IPD_601) => { 327 , 1601 },
      xc(IPD_602) => { 327 , 1602 },
      xc(IPD_610) => { 327 , 1610 },
      xc(IPD_611) => { 327 , 1611 },
      xc(IPD_612) => { 327 , 1612 },
      xc(IPGTM1_05) => { 434 , 1005 },
      xc(IPG_00) => { 227 , 1000 },
      xc(IPG_01) => { 227 , 1001 },
      xc(IPG_02) => { 227 , 1002 },
      xc(IPG_03) => { 227 , 1003 },
      xc(IPG_04) => { 227 , 1004 },
      xc(IPG_05) => { 227 , 1005 },
      xc(IPG_100) => { 227 , 1100 },
      xc(IPG_101) => { 227 , 1101 },
      xc(IPG_200) => { 227 , 1200 },
      xc(IPG_300) => { 227 , 1300 },
      xc(IPG_301) => { 227 , 1301 },
      xc(IPG_302) => { 227 , 1302 },
      xc(IPG_303) => { 227 , 1303 },
      xc(IPG_304) => { 227 , 1304 },
      xc(IPG_305) => { 227 , 1305 },
      xc(IPG_400) => { 227 , 1400 },
      xc(IPG_401) => { 227 , 1401 },
      xc(IPG_610) => { 227 , 1610 },
      xc(IPG_611) => { 227 , 1611 },
      xc(IPG_612) => { 227 , 1612 },
      xc(IPNWD_101) => { 435 , 1101 },
      xc(IPNWD_102) => { 435 , 1102 },
      xc(IPNWD_103) => { 435 , 1103 },
      xc(IPNWG_101) => { 436 , 1101 },
      xc(IPNWG_102) => { 436 , 1102 },
      xc(IPNWG_103) => { 436 , 1103 },
      xc(IPNWN_01) => { 437 , 1001 },
      xc(IPNWN_02) => { 437 , 1002 },
      xc(IPNWN_03) => { 437 , 1003 },
      xc(IPNWN_04) => { 437 , 1004 },
      xc(IPNWN_05) => { 437 , 1005 },
      xc(IPN_00) => { 127 , 1000 },
      xc(IPN_01) => { 127 , 1001 },
      xc(IPN_02) => { 127 , 1002 },
      xc(IPN_03) => { 127 , 1003 },
      xc(IPN_04) => { 127 , 1004 },
      xc(IPN_05) => { 127 , 1005 },
      xc(IPN_06) => { 127 , 1006 },
      xc(IPN_07) => { 127 , 1007 },
      xc(IPN_08) => { 127 , 1008 },
      xc(IPN_09) => { 127 , 1009 },
      xc(IPN_10) => { 127 , 1010 },
      xc(IPN_100) => { 127 , 1100 },
      xc(IPN_101) => { 127 , 1101 },
      xc(IPN_102) => { 127 , 1102 },
      xc(IPN_103) => { 127 , 1103 },
      xc(IPN_104) => { 127 , 1104 },
      xc(IPN_105) => { 127 , 1105 },
      xc(IPN_106) => { 127 , 1106 },
      xc(IPN_107) => { 127 , 1107 },
      xc(IPN_108) => { 127 , 1108 },
      xc(IPN_109) => { 127 , 1109 },
      xc(IPN_11) => { 127 , 1011 },
      xc(IPN_110) => { 127 , 1110 },
      xc(IPN_111) => { 127 , 1111 },
      xc(IPN_112) => { 127 , 1112 },
      xc(IPN_113) => { 127 , 1113 },
      xc(IPN_114) => { 127 , 1114 },
      xc(IPN_12) => { 127 , 1012 },
      xc(IPN_13) => { 127 , 1013 },
      xc(IPN_14) => { 127 , 1014 },
      xc(IPN_200) => { 127 , 1200 },
      xc(IPN_201) => { 127 , 1201 },
      xc(IPN_202) => { 127 , 1202 },
      xc(IPN_203) => { 127 , 1203 },
      xc(IPN_204) => { 127 , 1204 },
      xc(IPN_205) => { 127 , 1205 },
      xc(IPN_206) => { 127 , 1206 },
      xc(IPN_207) => { 127 , 1207 },
      xc(IPN_208) => { 127 , 1208 },
      xc(IPN_209) => { 127 , 1209 },
      xc(IPN_210) => { 127 , 1210 },
      xc(IPN_211) => { 127 , 1211 },
      xc(IPN_212) => { 127 , 1212 },
      xc(IPN_213) => { 127 , 1213 },
      xc(IPN_214) => { 127 , 1214 },
      xc(IPN_300) => { 127 , 1300 },
      xc(IPN_301) => { 127 , 1301 },
      xc(IPN_302) => { 127 , 1302 },
      xc(IPN_303) => { 127 , 1303 },
      xc(IPN_304) => { 127 , 1304 },
      xc(IPN_305) => { 127 , 1305 },
      xc(IPN_306) => { 127 , 1306 },
      xc(IPN_307) => { 127 , 1307 },
      xc(IPN_308) => { 127 , 1308 },
      xc(IPN_309) => { 127 , 1309 },
      xc(IPN_310) => { 127 , 1310 },
      xc(IPN_311) => { 127 , 1311 },
      xc(IPN_312) => { 127 , 1312 },
      xc(IPN_313) => { 127 , 1313 },
      xc(IPN_400) => { 127 , 1400 },
      xc(IPN_401) => { 127 , 1401 },
      xc(IPN_402) => { 127 , 1402 },
      xc(IPN_403) => { 127 , 1403 },
      xc(IPN_404) => { 127 , 1404 },
      xc(IPN_405) => { 127 , 1405 },
      xc(IPN_406) => { 127 , 1406 },
      xc(IPN_407) => { 127 , 1407 },
      xc(IPN_408) => { 127 , 1408 },
      xc(IPN_409) => { 127 , 1409 },
      xc(IPN_410) => { 127 , 1410 },
      xc(IPN_411) => { 127 , 1411 },
      xc(IPN_412) => { 127 , 1412 },
      xc(IPN_413) => { 127 , 1413 },
      xc(IPTB_00) => { 428 , 1000 },
      xc(IPTB_01) => { 428 , 1001 },
      xc(IPTD_100) => { 429 , 1100 },
      xc(IPTD_101) => { 429 , 1101 },
      xc(IPTD_102) => { 429 , 1102 },
      xc(IPTD_103) => { 429 , 1103 },
      xc(IPTD_104) => { 429 , 1104 },
      xc(IPTD_105) => { 429 , 1105 },
      xc(IPTD_106) => { 429 , 1106 },
      xc(IPTD_107) => { 429 , 1107 },
      xc(IPTD_108) => { 429 , 1108 },
      xc(IPTD_109) => { 429 , 1109 },
      xc(IPTD_110) => { 429 , 1110 },
      xc(IPTD_111) => { 429 , 1111 },
      xc(IPTD_112) => { 429 , 1112 },
      xc(IPTD_113) => { 429 , 1113 },
      xc(IPTD_114) => { 429 , 1114 },
      xc(IPTD_600) => { 429 , 1600 },
      xc(IPTG_00) => { 430 , 1000 },
      xc(IPTG_100) => { 430 , 1100 },
      xc(IPTG_101) => { 430 , 1101 },
      xc(IPTG_102) => { 430 , 1102 },
      xc(IPTG_103) => { 430 , 1103 },
      xc(IPTG_104) => { 430 , 1104 },
      xc(IPTG_105) => { 430 , 1105 },
      xc(IPTG_106) => { 430 , 1106 },
      xc(IPTG_107) => { 430 , 1107 },
      xc(IPTG_108) => { 430 , 1108 },
      xc(IPTG_109) => { 430 , 1109 },
      xc(IPTG_110) => { 430 , 1110 },
      xc(IPTG_111) => { 430 , 1111 },
      xc(IPTG_112) => { 430 , 1112 },
      xc(IPTG_113) => { 430 , 1113 },
      xc(IPTG_114) => { 430 , 1114 },
      xc(IPTG_600) => { 430 , 1600 },
      xc(IPTG_601) => { 430 , 1601 },
      xc(IPTG_602) => { 430 , 1602 },
      xc(IPTG_603) => { 430 , 1603 },
      xc(IPTG_604) => { 430 , 1604 },
      xc(IPTG_605) => { 430 , 1605 },
      xc(IPTG_606) => { 430 , 1606 },
      xc(IPTG_607) => { 430 , 1607 },
      xc(IPTG_608) => { 430 , 1608 },
      xc(IPTG_609) => { 430 , 1609 },
      xc(IPTG_610) => { 430 , 1610 },
      xc(IPTG_611) => { 430 , 1611 },
      xc(IPTG_612) => { 430 , 1612 },
      xc(IPTG_613) => { 430 , 1613 },
      xc(IPTG_614) => { 430 , 1614 },
      xc(IPTG_700) => { 430 , 1700 },
      xc(IPTN_100) => { 431 , 1100 },
      xc(IPTN_101) => { 431 , 1101 },
      xc(IPTN_102) => { 431 , 1102 },
      xc(IPTN_103) => { 431 , 1103 },
      xc(IPTN_104) => { 431 , 1104 },
      xc(IPTN_105) => { 431 , 1105 },
      xc(IPTN_106) => { 431 , 1106 },
      xc(IPTN_107) => { 431 , 1107 },
      xc(IPTN_108) => { 431 , 1108 },
      xc(IPTN_109) => { 431 , 1109 },
      xc(IPTN_110) => { 431 , 1110 },
      xc(IPTN_111) => { 431 , 1111 },
      xc(IPTN_112) => { 431 , 1112 },
      xc(IPTN_113) => { 431 , 1113 },
      xc(IPTN_114) => { 431 , 1114 },
      xc(IPTN_200) => { 431 , 1200 },
      xc(IPTN_201) => { 431 , 1201 },
      xc(IPTN_202) => { 431 , 1202 },
      xc(IPTN_203) => { 431 , 1203 },
      xc(IPTN_204) => { 431 , 1204 },
      xc(IPTN_205) => { 431 , 1205 },
      xc(IPTN_206) => { 431 , 1206 },
      xc(IPTN_207) => { 431 , 1207 },
      xc(IPTN_208) => { 431 , 1208 },
      xc(IPTN_209) => { 431 , 1209 },
      xc(IPTN_210) => { 431 , 1210 },
      xc(IPTN_211) => { 431 , 1211 },
      xc(IPTN_212) => { 431 , 1212 },
      xc(IPTN_213) => { 431 , 1213 },
      xc(IPTN_214) => { 431 , 1214 },
      xc(IPT_01) => { 432 , 1001 },
      xc(IPT_02) => { 432 , 1002 },
      xc(IPT_03) => { 432 , 1003 },
      xc(IP_01) => { 27 , 1001 },
      xc(IP_02) => { 27 , 1002 },
      xc(IP_03) => { 27 , 1003 },
      xc(J_01) => { 301 , 1001 },
      xc(J_02) => { 301 , 1002 },
      xc(J_03) => { 301 , 1003 },
      xc(J_04) => { 301 , 1004 },
      xc(J_05) => { 301 , 1005 },
      xc(J_06) => { 301 , 1006 },
      xc(J_07) => { 301 , 1007 },
      xc(J_08) => { 301 , 1008 },
      xc(J_09) => { 301 , 1009 },
      xc(J_10) => { 301 , 1010 },
      xc(J_11) => { 301 , 1011 },
      xc(J_12) => { 301 , 1012 },
      xc(J_13) => { 301 , 1013 },
      xc(J_14) => { 301 , 1014 },
      xc(J_15) => { 301 , 1015 },
      xc(J_16) => { 301 , 1016 },
      xc(J_21) => { 301 , 1021 },
      xc(J_22) => { 301 , 1022 },
      xc(J_23) => { 301 , 1023 },
      xc(J_24) => { 301 , 1024 },
      xc(J_25) => { 301 , 1025 },
      xc(J_41) => { 301 , 1041 },
      xc(J_42) => { 301 , 1042 },
      xc(J_43) => { 301 , 1043 },
      xc(J_44) => { 301 , 1044 },
      xc(J_46) => { 301 , 1046 },
      xc(J_81) => { 301 , 1081 },
      xc(J_82) => { 301 , 1082 },
      xc(K_01) => { 108 , 1001 },
      xc(K_02) => { 108 , 1002 },
      xc(K_03) => { 108 , 1003 },
      xc(K_04) => { 108 , 1004 },
      xc(K_05) => { 108 , 1005 },
      xc(K_06) => { 108 , 1006 },
      xc(K_07) => { 108 , 1007 },
      xc(K_08) => { 108 , 1008 },
      xc(K_09) => { 108 , 1009 },
      xc(K_10) => { 108 , 1010 },
      xc(K_11) => { 108 , 1011 },
      xc(K_12) => { 108 , 1012 },
      xc(K_13) => { 108 , 1013 },
      xc(K_14) => { 108 , 1014 },
      xc(K_15) => { 108 , 1015 },
      xc(K_16) => { 108 , 1016 },
      xc(K_21) => { 108 , 1021 },
      xc(K_22) => { 108 , 1022 },
      xc(K_23) => { 108 , 1023 },
      xc(K_24) => { 108 , 1024 },
      xc(K_25) => { 108 , 1025 },
      xc(K_41) => { 108 , 1041 },
      xc(K_42) => { 108 , 1042 },
      xc(K_43) => { 108 , 1043 },
      xc(K_44) => { 108 , 1044 },
      xc(K_46) => { 108 , 1046 },
      xc(K_81) => { 108 , 1081 },
      xc(K_82) => { 108 , 1082 },
      xc(LDIP_101) => { 9999 , 1101 },
      xc(LDIW_01) => { 9999 , 1001 },
      xc(LDIW_02) => { 9999 , 1002 },
      xc(LDIW_120) => { 9999 , 1120 },
      xc(LDIW_220) => { 9999 , 1220 },
      xc(LDIW_500) => { 9999 , 1500 },
      xc(LDIW_501) => { 9999 , 1501 },
      xc(LDIW_502) => { 9999 , 1502 },
      xc(LDIW_503) => { 9999 , 1503 },
      xc(LDIW_504) => { 9999 , 1504 },
      xc(LDIW_505) => { 9999 , 1505 },
      xc(LDIW_506) => { 9999 , 1506 },
      xc(LDI_01) => { 351 , 1001 },
      xc(LDI_02) => { 351 , 1002 },
      xc(LDI_120) => { 351 , 1120 },
      xc(LDI_220) => { 351 , 1220 },
      xc(LDI_500) => { 351 , 1500 },
      xc(LDI_501) => { 351 , 1501 },
      xc(LDI_502) => { 351 , 1502 },
      xc(LDI_503) => { 351 , 1503 },
      xc(LDI_504) => { 351 , 1504 },
      xc(LDI_505) => { 351 , 1505 },
      xc(LDI_506) => { 351 , 1506 },
      xc(LDP_101) => { 9999 , 1101 },
      xc(LDP_102) => { 9999 , 1102 },
      xc(LDT_101) => { 9999 , 1101 },
      xc(LDW_100) => { 9999 , 1100 },
      xc(LDW_101) => { 9999 , 1101 },
      xc(LDW_102) => { 9999 , 1102 },
      xc(LDW_103) => { 9999 , 1103 },
      xc(LDW_104) => { 9999 , 1104 },
      xc(LDW_105) => { 9999 , 1105 },
      xc(LDW_106) => { 9999 , 1106 },
      xc(LDW_107) => { 9999 , 1107 },
      xc(LDW_108) => { 9999 , 1108 },
      xc(LDW_109) => { 9999 , 1109 },
      xc(LDW_110) => { 9999 , 1110 },
      xc(LDW_111) => { 9999 , 1111 },
      xc(LDW_112) => { 9999 , 1112 },
      xc(LDW_120) => { 9999 , 1120 },
      xc(LDW_121) => { 9999 , 1121 },
      xc(LDW_122) => { 9999 , 1122 },
      xc(LDW_123) => { 9999 , 1123 },
      xc(LDW_131) => { 9999 , 1131 },
      xc(LDW_132) => { 9999 , 1132 },
      xc(LDW_133) => { 9999 , 1133 },
      xc(LDW_134) => { 9999 , 1134 },
      xc(LDW_135) => { 9999 , 1135 },
      xc(LDW_136) => { 9999 , 1136 },
      xc(LDW_200) => { 9999 , 1200 },
      xc(LDW_201) => { 9999 , 1201 },
      xc(LDW_202) => { 9999 , 1202 },
      xc(LDW_203) => { 9999 , 1203 },
      xc(LDW_204) => { 9999 , 1204 },
      xc(LDW_205) => { 9999 , 1205 },
      xc(LDW_206) => { 9999 , 1206 },
      xc(LDW_207) => { 9999 , 1207 },
      xc(LDW_208) => { 9999 , 1208 },
      xc(LDW_209) => { 9999 , 1209 },
      xc(LDW_210) => { 9999 , 1210 },
      xc(LDW_211) => { 9999 , 1211 },
      xc(LDW_212) => { 9999 , 1212 },
      xc(LDW_220) => { 9999 , 1220 },
      xc(LDW_231) => { 9999 , 1231 },
      xc(LDW_232) => { 9999 , 1232 },
      xc(LDW_233) => { 9999 , 1233 },
      xc(LDW_234) => { 9999 , 1234 },
      xc(LDW_235) => { 9999 , 1235 },
      xc(LDW_236) => { 9999 , 1236 },
      xc(LDW_500) => { 9999 , 1500 },
      xc(LDW_501) => { 9999 , 1501 },
      xc(LDW_502) => { 9999 , 1502 },
      xc(LDW_503) => { 9999 , 1503 },
      xc(LDW_504) => { 9999 , 1504 },
      xc(LDW_505) => { 9999 , 1505 },
      xc(LDW_506) => { 9999 , 1506 },
      xc(LDW_507) => { 9999 , 1507 },
      xc(LDW_508) => { 9999 , 1508 },
      xc(LDW_509) => { 9999 , 1509 },
      xc(LDW_510) => { 9999 , 1510 },
      xc(LDW_511) => { 9999 , 1511 },
      xc(LDW_512) => { 9999 , 1512 },
      xc(LDW_520) => { 9999 , 1520 },
      xc(LDW_600) => { 9999 , 1600 },
      xc(LDW_601) => { 9999 , 1601 },
      xc(LDW_602) => { 9999 , 1602 },
      xc(LDW_603) => { 9999 , 1603 },
      xc(LDW_604) => { 9999 , 1604 },
      xc(LDW_605) => { 9999 , 1605 },
      xc(LDW_606) => { 9999 , 1606 },
      xc(LDW_607) => { 9999 , 1607 },
      xc(LDW_609) => { 9999 , 1609 },
      xc(LDW_611) => { 9999 , 1611 },
      xc(LDW_612) => { 9999 , 1612 },
      xc(LDW_620) => { 9999 , 1620 },
      xc(LDW_81) => { 9999 , 1081 },
      xc(LDW_82) => { 9999 , 1082 },
      xc(LD_100) => { 250 , 1100 },
      xc(LD_101) => { 250 , 1101 },
      xc(LD_102) => { 250 , 1102 },
      xc(LD_103) => { 250 , 1103 },
      xc(LD_104) => { 250 , 1104 },
      xc(LD_105) => { 250 , 1105 },
      xc(LD_106) => { 250 , 1106 },
      xc(LD_107) => { 250 , 1107 },
      xc(LD_108) => { 250 , 1108 },
      xc(LD_109) => { 250 , 1109 },
      xc(LD_110) => { 250 , 1110 },
      xc(LD_111) => { 250 , 1111 },
      xc(LD_112) => { 250 , 1112 },
      xc(LD_120) => { 250 , 1120 },
      xc(LD_121) => { 250 , 1121 },
      xc(LD_122) => { 250 , 1122 },
      xc(LD_123) => { 250 , 1123 },
      xc(LD_131) => { 250 , 1131 },
      xc(LD_132) => { 250 , 1132 },
      xc(LD_133) => { 250 , 1133 },
      xc(LD_134) => { 250 , 1134 },
      xc(LD_135) => { 250 , 1135 },
      xc(LD_136) => { 250 , 1136 },
      xc(LD_200) => { 250 , 1200 },
      xc(LD_201) => { 250 , 1201 },
      xc(LD_202) => { 250 , 1202 },
      xc(LD_203) => { 250 , 1203 },
      xc(LD_204) => { 250 , 1204 },
      xc(LD_205) => { 250 , 1205 },
      xc(LD_206) => { 250 , 1206 },
      xc(LD_207) => { 250 , 1207 },
      xc(LD_208) => { 250 , 1208 },
      xc(LD_209) => { 250 , 1209 },
      xc(LD_210) => { 250 , 1210 },
      xc(LD_211) => { 250 , 1211 },
      xc(LD_212) => { 250 , 1212 },
      xc(LD_220) => { 250 , 1220 },
      xc(LD_231) => { 250 , 1231 },
      xc(LD_232) => { 250 , 1232 },
      xc(LD_233) => { 250 , 1233 },
      xc(LD_234) => { 250 , 1234 },
      xc(LD_235) => { 250 , 1235 },
      xc(LD_236) => { 250 , 1236 },
      xc(LD_331) => { 250 , 1331 },
      xc(LD_332) => { 250 , 1332 },
      xc(LD_334) => { 250 , 1334 },
      xc(LD_336) => { 250 , 1336 },
      xc(LD_434) => { 250 , 1434 },
      xc(LD_435) => { 250 , 1435 },
      xc(LD_436) => { 250 , 1436 },
      xc(LD_500) => { 250 , 1500 },
      xc(LD_501) => { 250 , 1501 },
      xc(LD_502) => { 250 , 1502 },
      xc(LD_503) => { 250 , 1503 },
      xc(LD_504) => { 250 , 1504 },
      xc(LD_505) => { 250 , 1505 },
      xc(LD_506) => { 250 , 1506 },
      xc(LD_507) => { 250 , 1507 },
      xc(LD_508) => { 250 , 1508 },
      xc(LD_509) => { 250 , 1509 },
      xc(LD_510) => { 250 , 1510 },
      xc(LD_511) => { 250 , 1511 },
      xc(LD_512) => { 250 , 1512 },
      xc(LD_520) => { 250 , 1520 },
      xc(LD_535) => { 250 , 1535 },
      xc(LD_600) => { 250 , 1600 },
      xc(LD_601) => { 250 , 1601 },
      xc(LD_602) => { 250 , 1602 },
      xc(LD_603) => { 250 , 1603 },
      xc(LD_604) => { 250 , 1604 },
      xc(LD_605) => { 250 , 1605 },
      xc(LD_606) => { 250 , 1606 },
      xc(LD_607) => { 250 , 1607 },
      xc(LD_609) => { 250 , 1609 },
      xc(LD_611) => { 250 , 1611 },
      xc(LD_612) => { 250 , 1612 },
      xc(LD_620) => { 250 , 1620 },
      xc(LD_634) => { 250 , 1634 },
      xc(LD_81) => { 250 , 1081 },
      xc(LD_82) => { 250 , 1082 },
      xc(LMI_01) => { 356 , 1001 },
      xc(LMI_02) => { 356 , 1002 },
      xc(LMI_03) => { 356 , 1003 },
      xc(LMI_04) => { 356 , 1004 },
      xc(LMI_05) => { 356 , 1005 },
      xc(LMI_06) => { 356 , 1006 },
      xc(LMI_11) => { 356 , 1011 },
      xc(LMI_12) => { 356 , 1012 },
      xc(LMI_13) => { 356 , 1013 },
      xc(LMI_40) => { 356 , 1040 },
      xc(LMI_41) => { 356 , 1041 },
      xc(M0L_01) => { 155 , 1001 },
      xc(M0L_02) => { 155 , 1002 },
      xc(M0L_03) => { 155 , 1003 },
      xc(M0L_04) => { 155 , 1004 },
      xc(M0M_01) => { 157 , 1001 },
      xc(M0M_02) => { 157 , 1002 },
      xc(M0M_03) => { 157 , 1003 },
      xc(M0M_04) => { 157 , 1004 },
      xc(M0M_05) => { 157 , 1005 },
      xc(M0S_01) => { 158 , 1001 },
      xc(M0S_02) => { 158 , 1002 },
      xc(M0_00) => { 55 , 1000 },
      xc(M0_126) => { 55 , 1126 },
      xc(M0_127) => { 55 , 1127 },
      xc(M0_128) => { 55 , 1128 },
      xc(M0_129) => { 55 , 1129 },
      xc(M0_130) => { 55 , 1130 },
      xc(M0_131) => { 55 , 1131 },
      xc(M0_132) => { 55 , 1132 },
      xc(M0_133) => { 55 , 1133 },
      xc(M0_134) => { 55 , 1134 },
      xc(M0_135) => { 55 , 1135 },
      xc(M0_136) => { 55 , 1136 },
      xc(M0_137) => { 55 , 1137 },
      xc(M0_138) => { 55 , 1138 },
      xc(M0_139) => { 55 , 1139 },
      xc(M0_140) => { 55 , 1140 },
      xc(M0_141) => { 55 , 1141 },
      xc(M0_142) => { 55 , 1142 },
      xc(M0_21) => { 55 , 1021 },
      xc(M0_23) => { 55 , 1023 },
      xc(M0_41) => { 55 , 1041 },
      xc(M0_42) => { 55 , 1042 },
      xc(M0_48) => { 55 , 1048 },
      xc(M0_60) => { 55 , 1060 },
      xc(M0_812) => { 55 , 1812 },
      xc(M0_813) => { 55 , 1813 },
      xc(M0_814) => { 55 , 1814 },
      xc(M0_82) => { 55 , 1082 },
      xc(M0_822) => { 55 , 1822 },
      xc(M0_823) => { 55 , 1823 },
      xc(M0_83) => { 55 , 1083 },
      xc(M0_832) => { 55 , 1832 },
      xc(M0_84) => { 55 , 1084 },
      xc(M0_841) => { 55 , 1841 },
      xc(M0_842) => { 55 , 1842 },
      xc(M0_85) => { 55 , 1085 },
      xc(M0_91) => { 55 , 1091 },
      xc(M0_92) => { 55 , 1092 },
      xc(M0_93) => { 55 , 1093 },
      xc(M0_94) => { 55 , 1094 },
      xc(M0_941) => { 55 , 1941 },
      xc(M0_942) => { 55 , 1942 },
      xc(M0_95) => { 55 , 1095 },
      xc(M0_96) => { 55 , 1096 },
      xc(M0_97) => { 55 , 1097 },
      xc(M0_98) => { 55 , 1098 },
      xc(M10_00) => { 54 , 1000 },
      xc(M10_01) => { 54 , 1001 },
      xc(M10_02) => { 54 , 1002 },
      xc(M10_03) => { 54 , 1003 },
      xc(M10_04) => { 54 , 1004 },
      xc(M10_05) => { 54 , 1005 },
      xc(M10_06) => { 54 , 1006 },
      xc(M10_07) => { 54 , 1007 },
      xc(M10_08) => { 54 , 1008 },
      xc(M10_09) => { 54 , 1009 },
      xc(M10_10) => { 54 , 1010 },
      xc(M10_121) => { 54 , 1121 },
      xc(M10_20) => { 54 , 1020 },
      xc(M10_21) => { 54 , 1021 },
      xc(M10_22) => { 54 , 1022 },
      xc(M10_23) => { 54 , 1023 },
      xc(M10_24) => { 54 , 1024 },
      xc(M10_35) => { 54 , 1035 },
      xc(M10_37) => { 54 , 1037 },
      xc(M10_38) => { 54 , 1038 },
      xc(M10_41) => { 54 , 1041 },
      xc(M10_42) => { 54 , 1042 },
      xc(M10_50) => { 54 , 1050 },
      xc(M10_51) => { 54 , 1051 },
      xc(M10_52) => { 54 , 1052 },
      xc(M10_60) => { 54 , 1060 },
      xc(M10_65) => { 54 , 1065 },
      xc(M10_71) => { 54 , 1071 },
      xc(M10_80) => { 54 , 1080 },
      xc(M10_81) => { 54 , 1081 },
      xc(M10_82) => { 54 , 1082 },
      xc(M10err_01) => { 154 , 1001 },
      xc(M10err_05) => { 154 , 1005 },
      xc(M10err_06) => { 154 , 1006 },
      xc(M10err_09) => { 154 , 1009 },
      xc(M10err_10) => { 154 , 1010 },
      xc(M10err_21) => { 154 , 1021 },
      xc(M11_00) => { 58 , 1000 },
      xc(M11_01) => { 58 , 1001 },
      xc(M11_02) => { 58 , 1002 },
      xc(M11_03) => { 58 , 1003 },
      xc(M11_04) => { 58 , 1004 },
      xc(M11_05) => { 58 , 1005 },
      xc(M11_06) => { 58 , 1006 },
      xc(M11_07) => { 58 , 1007 },
      xc(M11_08) => { 58 , 1008 },
      xc(M11_09) => { 58 , 1009 },
      xc(M11_10) => { 58 , 1010 },
      xc(M11_121) => { 58 , 1121 },
      xc(M11_20) => { 58 , 1020 },
      xc(M11_21) => { 58 , 1021 },
      xc(M11_22) => { 58 , 1022 },
      xc(M11_23) => { 58 , 1023 },
      xc(M11_24) => { 58 , 1024 },
      xc(M11_35) => { 58 , 1035 },
      xc(M11_37) => { 58 , 1037 },
      xc(M11_38) => { 58 , 1038 },
      xc(M11_41) => { 58 , 1041 },
      xc(M11_42) => { 58 , 1042 },
      xc(M11_43) => { 58 , 1043 },
      xc(M11_50) => { 58 , 1050 },
      xc(M11_51) => { 58 , 1051 },
      xc(M11_52) => { 58 , 1052 },
      xc(M11_60) => { 58 , 1060 },
      xc(M11_65) => { 58 , 1065 },
      xc(M11_71) => { 58 , 1071 },
      xc(M11_80) => { 58 , 1080 },
      xc(M11_81) => { 58 , 1081 },
      xc(M11_82) => { 58 , 1082 },
      xc(M12_01) => { 62 , 1001 },
      xc(M12_02) => { 62 , 1002 },
      xc(M12_21) => { 62 , 1021 },
      xc(M12_22) => { 62 , 1022 },
      xc(M12_23) => { 62 , 1023 },
      xc(M12_24) => { 62 , 1024 },
      xc(M12_41) => { 62 , 1041 },
      xc(M12_43) => { 62 , 1043 },
      xc(M12_51) => { 62 , 1051 },
      xc(M12_52) => { 62 , 1052 },
      xc(M1F_01) => { 234 , 1001 },
      xc(M1F_02) => { 234 , 1002 },
      xc(M1F_03) => { 234 , 1003 },
      xc(M1F_04) => { 234 , 1004 },
      xc(M1F_11) => { 234 , 1011 },
      xc(M1F_12) => { 234 , 1012 },
      xc(M1F_13) => { 234 , 1013 },
      xc(M1F_14) => { 234 , 1014 },
      xc(M1F_15) => { 234 , 1015 },
      xc(M1F_21) => { 234 , 1021 },
      xc(M1F_22) => { 234 , 1022 },
      xc(M1F_23) => { 234 , 1023 },
      xc(M1F_24) => { 234 , 1024 },
      xc(M1F_31) => { 234 , 1031 },
      xc(M1F_32) => { 234 , 1032 },
      xc(M1F_33) => { 234 , 1033 },
      xc(M1F_34) => { 234 , 1034 },
      xc(M1F_35) => { 234 , 1035 },
      xc(M1F_36) => { 234 , 1036 },
      xc(M1F_40) => { 234 , 1040 },
      xc(M1F_41) => { 234 , 1041 },
      xc(M1F_42) => { 234 , 1042 },
      xc(M1F_43) => { 234 , 1043 },
      xc(M1F_44) => { 234 , 1044 },
      xc(M1F_45) => { 234 , 1045 },
      xc(M1F_46) => { 234 , 1046 },
      xc(M1_00) => { 4 , 1000 },
      xc(M1_01) => { 4 , 1001 },
      xc(M1_100) => { 4 , 1100 },
      xc(M1_101) => { 4 , 1101 },
      xc(M1_21) => { 4 , 1021 },
      xc(M1_290) => { 4 , 1290 },
      xc(M1_291) => { 4 , 1291 },
      xc(M1_36) => { 4 , 1036 },
      xc(M1_41) => { 4 , 1041 },
      xc(M1_42) => { 4 , 1042 },
      xc(M1_43) => { 4 , 1043 },
      xc(M1_60) => { 4 , 1060 },
      xc(M1_69) => { 4 , 1069 },
      xc(M1_81) => { 4 , 1081 },
      xc(M1_84) => { 4 , 1084 },
      xc(M1_85) => { 4 , 1085 },
      xc(M1_86) => { 4 , 1086 },
      xc(M1_87) => { 4 , 1087 },
      xc(M2BB_21) => { 214 , 1021 },
      xc(M2BB_22) => { 214 , 1022 },
      xc(M2BB_31) => { 214 , 1031 },
      xc(M2BB_32) => { 214 , 1032 },
      xc(M2BB_33) => { 214 , 1033 },
      xc(M2BB_34) => { 214 , 1034 },
      xc(M2BB_35) => { 214 , 1035 },
      xc(M2BB_36) => { 214 , 1036 },
      xc(M2BB_37) => { 214 , 1037 },
      xc(M2BB_38) => { 214 , 1038 },
      xc(M2BC_21) => { 414 , 1021 },
      xc(M2CC_21) => { 314 , 1021 },
      xc(M2CC_27) => { 314 , 1027 },
      xc(M2CC_28) => { 314 , 1028 },
      xc(M2L_01) => { 714 , 1001 },
      xc(M2L_02) => { 714 , 1002 },
      xc(M2L_03) => { 714 , 1003 },
      xc(M2L_05) => { 714 , 1005 },
      xc(M2L_06) => { 714 , 1006 },
      xc(M2L_07) => { 714 , 1007 },
      xc(M2M_01) => { 614 , 1001 },
      xc(M2M_02) => { 614 , 1002 },
      xc(M2M_03) => { 614 , 1003 },
      xc(M2S_01) => { 514 , 1001 },
      xc(M2S_02) => { 514 , 1002 },
      xc(M2S_03) => { 514 , 1003 },
      xc(M2S_04) => { 514 , 1004 },
      xc(M2_00) => { 14 , 1000 },
      xc(M2_126) => { 14 , 1126 },
      xc(M2_127) => { 14 , 1127 },
      xc(M2_128) => { 14 , 1128 },
      xc(M2_129) => { 14 , 1129 },
      xc(M2_130) => { 14 , 1130 },
      xc(M2_131) => { 14 , 1131 },
      xc(M2_132) => { 14 , 1132 },
      xc(M2_133) => { 14 , 1133 },
      xc(M2_134) => { 14 , 1134 },
      xc(M2_135) => { 14 , 1135 },
      xc(M2_136) => { 14 , 1136 },
      xc(M2_137) => { 14 , 1137 },
      xc(M2_138) => { 14 , 1138 },
      xc(M2_139) => { 14 , 1139 },
      xc(M2_140) => { 14 , 1140 },
      xc(M2_141) => { 14 , 1141 },
      xc(M2_147) => { 14 , 1147 },
      xc(M2_148) => { 14 , 1148 },
      xc(M2_20) => { 14 , 1020 },
      xc(M2_21) => { 14 , 1021 },
      xc(M2_22) => { 14 , 1022 },
      xc(M2_23) => { 14 , 1023 },
      xc(M2_37) => { 14 , 1037 },
      xc(M2_38) => { 14 , 1038 },
      xc(M2_41) => { 14 , 1041 },
      xc(M2_42) => { 14 , 1042 },
      xc(M2_43) => { 14 , 1043 },
      xc(M2_44) => { 14 , 1044 },
      xc(M2_45) => { 14 , 1045 },
      xc(M2_46) => { 14 , 1046 },
      xc(M2_47) => { 14 , 1047 },
      xc(M2_48) => { 14 , 1048 },
      xc(M2_49) => { 14 , 1049 },
      xc(M2_60) => { 14 , 1060 },
      xc(M2_841) => { 14 , 1841 },
      xc(M2_842) => { 14 , 1842 },
      xc(M2_941) => { 14 , 1941 },
      xc(M2_942) => { 14 , 1942 },
      xc(M3BB_21) => { 218 , 1021 },
      xc(M3BB_22) => { 218 , 1022 },
      xc(M3BB_31) => { 218 , 1031 },
      xc(M3BB_32) => { 218 , 1032 },
      xc(M3BB_33) => { 218 , 1033 },
      xc(M3BB_34) => { 218 , 1034 },
      xc(M3BB_35) => { 218 , 1035 },
      xc(M3BB_36) => { 218 , 1036 },
      xc(M3BB_37) => { 218 , 1037 },
      xc(M3BB_38) => { 218 , 1038 },
      xc(M3BC_21) => { 418 , 1021 },
      xc(M3CC_21) => { 318 , 1021 },
      xc(M3CC_27) => { 318 , 1027 },
      xc(M3CC_28) => { 318 , 1028 },
      xc(M3L_01) => { 518 , 1001 },
      xc(M3L_02) => { 518 , 1002 },
      xc(M3L_03) => { 518 , 1003 },
      xc(M3L_04) => { 518 , 1004 },
      xc(M3L_05) => { 518 , 1005 },
      xc(M3L_06) => { 518 , 1006 },
      xc(M3L_07) => { 518 , 1007 },
      xc(M3L_08) => { 518 , 1008 },
      xc(M3L_09) => { 518 , 1009 },
      xc(M3M_01) => { 618 , 1001 },
      xc(M3M_02) => { 618 , 1002 },
      xc(M3M_03) => { 618 , 1003 },
      xc(M3M_04) => { 618 , 1004 },
      xc(M3M_05) => { 618 , 1005 },
      xc(M3M_06) => { 618 , 1006 },
      xc(M3S_01) => { 718 , 1001 },
      xc(M3S_02) => { 718 , 1002 },
      xc(M3S_03) => { 718 , 1003 },
      xc(M3S_04) => { 718 , 1004 },
      xc(M3_00) => { 18 , 1000 },
      xc(M3_126) => { 18 , 1126 },
      xc(M3_127) => { 18 , 1127 },
      xc(M3_128) => { 18 , 1128 },
      xc(M3_129) => { 18 , 1129 },
      xc(M3_130) => { 18 , 1130 },
      xc(M3_131) => { 18 , 1131 },
      xc(M3_132) => { 18 , 1132 },
      xc(M3_133) => { 18 , 1133 },
      xc(M3_134) => { 18 , 1134 },
      xc(M3_135) => { 18 , 1135 },
      xc(M3_136) => { 18 , 1136 },
      xc(M3_137) => { 18 , 1137 },
      xc(M3_138) => { 18 , 1138 },
      xc(M3_139) => { 18 , 1139 },
      xc(M3_140) => { 18 , 1140 },
      xc(M3_141) => { 18 , 1141 },
      xc(M3_142) => { 18 , 1142 },
      xc(M3_143) => { 18 , 1143 },
      xc(M3_147) => { 18 , 1147 },
      xc(M3_148) => { 18 , 1148 },
      xc(M3_20) => { 18 , 1020 },
      xc(M3_21) => { 18 , 1021 },
      xc(M3_22) => { 18 , 1022 },
      xc(M3_23) => { 18 , 1023 },
      xc(M3_37) => { 18 , 1037 },
      xc(M3_38) => { 18 , 1038 },
      xc(M3_41) => { 18 , 1041 },
      xc(M3_42) => { 18 , 1042 },
      xc(M3_43) => { 18 , 1043 },
      xc(M3_44) => { 18 , 1044 },
      xc(M3_45) => { 18 , 1045 },
      xc(M3_46) => { 18 , 1046 },
      xc(M3_47) => { 18 , 1047 },
      xc(M3_48) => { 18 , 1048 },
      xc(M3_49) => { 18 , 1049 },
      xc(M3_60) => { 18 , 1060 },
      xc(M3_841) => { 18 , 1841 },
      xc(M3_842) => { 18 , 1842 },
      xc(M3_941) => { 18 , 1941 },
      xc(M3_942) => { 18 , 1942 },
      xc(M4BB_21) => { 222 , 1021 },
      xc(M4BB_22) => { 222 , 1022 },
      xc(M4BB_31) => { 222 , 1031 },
      xc(M4BB_32) => { 222 , 1032 },
      xc(M4BB_33) => { 222 , 1033 },
      xc(M4BB_34) => { 222 , 1034 },
      xc(M4BB_35) => { 222 , 1035 },
      xc(M4BB_36) => { 222 , 1036 },
      xc(M4BB_37) => { 222 , 1037 },
      xc(M4BB_38) => { 222 , 1038 },
      xc(M4BC_21) => { 422 , 1021 },
      xc(M4CC_21) => { 322 , 1021 },
      xc(M4CC_27) => { 322 , 1027 },
      xc(M4CC_28) => { 322 , 1028 },
      xc(M4L_01) => { 522 , 1001 },
      xc(M4L_02) => { 522 , 1002 },
      xc(M4L_03) => { 522 , 1003 },
      xc(M4L_05) => { 522 , 1005 },
      xc(M4L_06) => { 522 , 1006 },
      xc(M4L_07) => { 522 , 1007 },
      xc(M4L_08) => { 522 , 1008 },
      xc(M4L_09) => { 522 , 1009 },
      xc(M4M_02) => { 622 , 1002 },
      xc(M4M_03) => { 622 , 1003 },
      xc(M4S_01) => { 722 , 1001 },
      xc(M4S_02) => { 722 , 1002 },
      xc(M4S_03) => { 722 , 1003 },
      xc(M4S_04) => { 722 , 1004 },
      xc(M4_00) => { 22 , 1000 },
      xc(M4_01) => { 22 , 1001 },
      xc(M4_02) => { 22 , 1002 },
      xc(M4_03) => { 22 , 1003 },
      xc(M4_04) => { 22 , 1004 },
      xc(M4_05) => { 22 , 1005 },
      xc(M4_06) => { 22 , 1006 },
      xc(M4_07) => { 22 , 1007 },
      xc(M4_08) => { 22 , 1008 },
      xc(M4_09) => { 22 , 1009 },
      xc(M4_10) => { 22 , 1010 },
      xc(M4_101) => { 22 , 1101 },
      xc(M4_102) => { 22 , 1102 },
      xc(M4_103) => { 22 , 1103 },
      xc(M4_11) => { 22 , 1011 },
      xc(M4_123) => { 22 , 1123 },
      xc(M4_124) => { 22 , 1124 },
      xc(M4_126) => { 22 , 1126 },
      xc(M4_127) => { 22 , 1127 },
      xc(M4_128) => { 22 , 1128 },
      xc(M4_129) => { 22 , 1129 },
      xc(M4_130) => { 22 , 1130 },
      xc(M4_131) => { 22 , 1131 },
      xc(M4_132) => { 22 , 1132 },
      xc(M4_133) => { 22 , 1133 },
      xc(M4_134) => { 22 , 1134 },
      xc(M4_135) => { 22 , 1135 },
      xc(M4_136) => { 22 , 1136 },
      xc(M4_137) => { 22 , 1137 },
      xc(M4_138) => { 22 , 1138 },
      xc(M4_139) => { 22 , 1139 },
      xc(M4_140) => { 22 , 1140 },
      xc(M4_141) => { 22 , 1141 },
      xc(M4_142) => { 22 , 1142 },
      xc(M4_147) => { 22 , 1147 },
      xc(M4_148) => { 22 , 1148 },
      xc(M4_20) => { 22 , 1020 },
      xc(M4_21) => { 22 , 1021 },
      xc(M4_22) => { 22 , 1022 },
      xc(M4_23) => { 22 , 1023 },
      xc(M4_24) => { 22 , 1024 },
      xc(M4_249) => { 22 , 1249 },
      xc(M4_25) => { 22 , 1025 },
      xc(M4_250) => { 22 , 1250 },
      xc(M4_251) => { 22 , 1251 },
      xc(M4_252) => { 22 , 1252 },
      xc(M4_253) => { 22 , 1253 },
      xc(M4_26) => { 22 , 1026 },
      xc(M4_260) => { 22 , 1260 },
      xc(M4_261) => { 22 , 1261 },
      xc(M4_262) => { 22 , 1262 },
      xc(M4_27) => { 22 , 1027 },
      xc(M4_28) => { 22 , 1028 },
      xc(M4_31) => { 22 , 1031 },
      xc(M4_32) => { 22 , 1032 },
      xc(M4_33) => { 22 , 1033 },
      xc(M4_37) => { 22 , 1037 },
      xc(M4_38) => { 22 , 1038 },
      xc(M4_40) => { 22 , 1040 },
      xc(M4_41) => { 22 , 1041 },
      xc(M4_42) => { 22 , 1042 },
      xc(M4_43) => { 22 , 1043 },
      xc(M4_44) => { 22 , 1044 },
      xc(M4_45) => { 22 , 1045 },
      xc(M4_46) => { 22 , 1046 },
      xc(M4_47) => { 22 , 1047 },
      xc(M4_48) => { 22 , 1048 },
      xc(M4_49) => { 22 , 1049 },
      xc(M4_51) => { 22 , 1051 },
      xc(M4_52) => { 22 , 1052 },
      xc(M4_53) => { 22 , 1053 },
      xc(M4_60) => { 22 , 1060 },
      xc(M4_62) => { 22 , 1062 },
      xc(M4_63) => { 22 , 1063 },
      xc(M4_65) => { 22 , 1065 },
      xc(M4_70) => { 22 , 1070 },
      xc(M4_71) => { 22 , 1071 },
      xc(M4_72) => { 22 , 1072 },
      xc(M4_73) => { 22 , 1073 },
      xc(M4_80) => { 22 , 1080 },
      xc(M4_81) => { 22 , 1081 },
      xc(M4_82) => { 22 , 1082 },
      xc(M4_83) => { 22 , 1083 },
      xc(M4_84) => { 22 , 1084 },
      xc(M4_941) => { 22 , 1941 },
      xc(M4_942) => { 22 , 1942 },
      xc(M5BB_21) => { 226 , 1021 },
      xc(M5BB_22) => { 226 , 1022 },
      xc(M5BB_31) => { 226 , 1031 },
      xc(M5BB_32) => { 226 , 1032 },
      xc(M5BB_33) => { 226 , 1033 },
      xc(M5BB_34) => { 226 , 1034 },
      xc(M5BB_35) => { 226 , 1035 },
      xc(M5BB_36) => { 226 , 1036 },
      xc(M5BB_37) => { 226 , 1037 },
      xc(M5BB_38) => { 226 , 1038 },
      xc(M5BC_21) => { 426 , 1021 },
      xc(M5CC_21) => { 326 , 1021 },
      xc(M5CC_27) => { 326 , 1027 },
      xc(M5CC_28) => { 326 , 1028 },
      xc(M5L_01) => { 526 , 1001 },
      xc(M5L_02) => { 526 , 1002 },
      xc(M5L_03) => { 526 , 1003 },
      xc(M5L_05) => { 526 , 1005 },
      xc(M5L_06) => { 526 , 1006 },
      xc(M5L_07) => { 526 , 1007 },
      xc(M5L_09) => { 526 , 1009 },
      xc(M5M_02) => { 626 , 1002 },
      xc(M5M_03) => { 626 , 1003 },
      xc(M5S_01) => { 726 , 1001 },
      xc(M5S_02) => { 726 , 1002 },
      xc(M5S_03) => { 726 , 1003 },
      xc(M5S_04) => { 726 , 1004 },
      xc(M5_00) => { 26 , 1000 },
      xc(M5_01) => { 26 , 1001 },
      xc(M5_02) => { 26 , 1002 },
      xc(M5_03) => { 26 , 1003 },
      xc(M5_04) => { 26 , 1004 },
      xc(M5_05) => { 26 , 1005 },
      xc(M5_06) => { 26 , 1006 },
      xc(M5_07) => { 26 , 1007 },
      xc(M5_08) => { 26 , 1008 },
      xc(M5_09) => { 26 , 1009 },
      xc(M5_10) => { 26 , 1010 },
      xc(M5_101) => { 26 , 1101 },
      xc(M5_102) => { 26 , 1102 },
      xc(M5_103) => { 26 , 1103 },
      xc(M5_11) => { 26 , 1011 },
      xc(M5_12) => { 26 , 1012 },
      xc(M5_123) => { 26 , 1123 },
      xc(M5_124) => { 26 , 1124 },
      xc(M5_126) => { 26 , 1126 },
      xc(M5_127) => { 26 , 1127 },
      xc(M5_128) => { 26 , 1128 },
      xc(M5_129) => { 26 , 1129 },
      xc(M5_13) => { 26 , 1013 },
      xc(M5_130) => { 26 , 1130 },
      xc(M5_131) => { 26 , 1131 },
      xc(M5_132) => { 26 , 1132 },
      xc(M5_133) => { 26 , 1133 },
      xc(M5_134) => { 26 , 1134 },
      xc(M5_135) => { 26 , 1135 },
      xc(M5_136) => { 26 , 1136 },
      xc(M5_137) => { 26 , 1137 },
      xc(M5_138) => { 26 , 1138 },
      xc(M5_139) => { 26 , 1139 },
      xc(M5_14) => { 26 , 1014 },
      xc(M5_140) => { 26 , 1140 },
      xc(M5_141) => { 26 , 1141 },
      xc(M5_147) => { 26 , 1147 },
      xc(M5_148) => { 26 , 1148 },
      xc(M5_149) => { 26 , 1149 },
      xc(M5_15) => { 26 , 1015 },
      xc(M5_150) => { 26 , 1150 },
      xc(M5_151) => { 26 , 1151 },
      xc(M5_152) => { 26 , 1152 },
      xc(M5_153) => { 26 , 1153 },
      xc(M5_16) => { 26 , 1016 },
      xc(M5_160) => { 26 , 1160 },
      xc(M5_161) => { 26 , 1161 },
      xc(M5_162) => { 26 , 1162 },
      xc(M5_20) => { 26 , 1020 },
      xc(M5_21) => { 26 , 1021 },
      xc(M5_22) => { 26 , 1022 },
      xc(M5_23) => { 26 , 1023 },
      xc(M5_24) => { 26 , 1024 },
      xc(M5_249) => { 26 , 1249 },
      xc(M5_25) => { 26 , 1025 },
      xc(M5_250) => { 26 , 1250 },
      xc(M5_251) => { 26 , 1251 },
      xc(M5_252) => { 26 , 1252 },
      xc(M5_253) => { 26 , 1253 },
      xc(M5_26) => { 26 , 1026 },
      xc(M5_260) => { 26 , 1260 },
      xc(M5_261) => { 26 , 1261 },
      xc(M5_262) => { 26 , 1262 },
      xc(M5_27) => { 26 , 1027 },
      xc(M5_28) => { 26 , 1028 },
      xc(M5_31) => { 26 , 1031 },
      xc(M5_32) => { 26 , 1032 },
      xc(M5_33) => { 26 , 1033 },
      xc(M5_34) => { 26 , 1034 },
      xc(M5_35) => { 26 , 1035 },
      xc(M5_37) => { 26 , 1037 },
      xc(M5_38) => { 26 , 1038 },
      xc(M5_40) => { 26 , 1040 },
      xc(M5_41) => { 26 , 1041 },
      xc(M5_42) => { 26 , 1042 },
      xc(M5_43) => { 26 , 1043 },
      xc(M5_44) => { 26 , 1044 },
      xc(M5_45) => { 26 , 1045 },
      xc(M5_46) => { 26 , 1046 },
      xc(M5_47) => { 26 , 1047 },
      xc(M5_48) => { 26 , 1048 },
      xc(M5_49) => { 26 , 1049 },
      xc(M5_51) => { 26 , 1051 },
      xc(M5_52) => { 26 , 1052 },
      xc(M5_53) => { 26 , 1053 },
      xc(M5_60) => { 26 , 1060 },
      xc(M5_62) => { 26 , 1062 },
      xc(M5_63) => { 26 , 1063 },
      xc(M5_65) => { 26 , 1065 },
      xc(M5_70) => { 26 , 1070 },
      xc(M5_71) => { 26 , 1071 },
      xc(M5_72) => { 26 , 1072 },
      xc(M5_73) => { 26 , 1073 },
      xc(M5_74) => { 26 , 1074 },
      xc(M5_80) => { 26 , 1080 },
      xc(M5_81) => { 26 , 1081 },
      xc(M5_82) => { 26 , 1082 },
      xc(M5_83) => { 26 , 1083 },
      xc(M5_84) => { 26 , 1084 },
      xc(M5_941) => { 26 , 1941 },
      xc(M5_942) => { 26 , 1942 },
      xc(M5err_00) => { 52 , 1000 },
      xc(M6_00) => { 30 , 1000 },
      xc(M6_01) => { 30 , 1001 },
      xc(M6_02) => { 30 , 1002 },
      xc(M6_03) => { 30 , 1003 },
      xc(M6_04) => { 30 , 1004 },
      xc(M6_05) => { 30 , 1005 },
      xc(M6_06) => { 30 , 1006 },
      xc(M6_07) => { 30 , 1007 },
      xc(M6_08) => { 30 , 1008 },
      xc(M6_09) => { 30 , 1009 },
      xc(M6_10) => { 30 , 1010 },
      xc(M6_101) => { 30 , 1101 },
      xc(M6_102) => { 30 , 1102 },
      xc(M6_103) => { 30 , 1103 },
      xc(M6_11) => { 30 , 1011 },
      xc(M6_12) => { 30 , 1012 },
      xc(M6_123) => { 30 , 1123 },
      xc(M6_124) => { 30 , 1124 },
      xc(M6_13) => { 30 , 1013 },
      xc(M6_132) => { 30 , 1132 },
      xc(M6_14) => { 30 , 1014 },
      xc(M6_149) => { 30 , 1149 },
      xc(M6_15) => { 30 , 1015 },
      xc(M6_150) => { 30 , 1150 },
      xc(M6_151) => { 30 , 1151 },
      xc(M6_152) => { 30 , 1152 },
      xc(M6_153) => { 30 , 1153 },
      xc(M6_16) => { 30 , 1016 },
      xc(M6_160) => { 30 , 1160 },
      xc(M6_161) => { 30 , 1161 },
      xc(M6_162) => { 30 , 1162 },
      xc(M6_21) => { 30 , 1021 },
      xc(M6_22) => { 30 , 1022 },
      xc(M6_23) => { 30 , 1023 },
      xc(M6_24) => { 30 , 1024 },
      xc(M6_249) => { 30 , 1249 },
      xc(M6_25) => { 30 , 1025 },
      xc(M6_250) => { 30 , 1250 },
      xc(M6_251) => { 30 , 1251 },
      xc(M6_252) => { 30 , 1252 },
      xc(M6_253) => { 30 , 1253 },
      xc(M6_26) => { 30 , 1026 },
      xc(M6_260) => { 30 , 1260 },
      xc(M6_261) => { 30 , 1261 },
      xc(M6_262) => { 30 , 1262 },
      xc(M6_27) => { 30 , 1027 },
      xc(M6_28) => { 30 , 1028 },
      xc(M6_31) => { 30 , 1031 },
      xc(M6_32) => { 30 , 1032 },
      xc(M6_33) => { 30 , 1033 },
      xc(M6_34) => { 30 , 1034 },
      xc(M6_35) => { 30 , 1035 },
      xc(M6_37) => { 30 , 1037 },
      xc(M6_38) => { 30 , 1038 },
      xc(M6_40) => { 30 , 1040 },
      xc(M6_41) => { 30 , 1041 },
      xc(M6_44) => { 30 , 1044 },
      xc(M6_45) => { 30 , 1045 },
      xc(M6_46) => { 30 , 1046 },
      xc(M6_47) => { 30 , 1047 },
      xc(M6_48) => { 30 , 1048 },
      xc(M6_51) => { 30 , 1051 },
      xc(M6_52) => { 30 , 1052 },
      xc(M6_53) => { 30 , 1053 },
      xc(M6_60) => { 30 , 1060 },
      xc(M6_62) => { 30 , 1062 },
      xc(M6_63) => { 30 , 1063 },
      xc(M6_65) => { 30 , 1065 },
      xc(M6_70) => { 30 , 1070 },
      xc(M6_71) => { 30 , 1071 },
      xc(M6_72) => { 30 , 1072 },
      xc(M6_73) => { 30 , 1073 },
      xc(M6_80) => { 30 , 1080 },
      xc(M6_81) => { 30 , 1081 },
      xc(M6_82) => { 30 , 1082 },
      xc(M6_83) => { 30 , 1083 },
      xc(M6_84) => { 30 , 1084 },
      xc(M7_00) => { 34 , 1000 },
      xc(M7_01) => { 34 , 1001 },
      xc(M7_02) => { 34 , 1002 },
      xc(M7_03) => { 34 , 1003 },
      xc(M7_04) => { 34 , 1004 },
      xc(M7_05) => { 34 , 1005 },
      xc(M7_06) => { 34 , 1006 },
      xc(M7_07) => { 34 , 1007 },
      xc(M7_08) => { 34 , 1008 },
      xc(M7_09) => { 34 , 1009 },
      xc(M7_21) => { 34 , 1021 },
      xc(M7_22) => { 34 , 1022 },
      xc(M7_23) => { 34 , 1023 },
      xc(M7_24) => { 34 , 1024 },
      xc(M7_25) => { 34 , 1025 },
      xc(M7_26) => { 34 , 1026 },
      xc(M7_27) => { 34 , 1027 },
      xc(M7_31) => { 34 , 1031 },
      xc(M7_32) => { 34 , 1032 },
      xc(M7_35) => { 34 , 1035 },
      xc(M7_37) => { 34 , 1037 },
      xc(M7_38) => { 34 , 1038 },
      xc(M7_41) => { 34 , 1041 },
      xc(M7_51) => { 34 , 1051 },
      xc(M7_52) => { 34 , 1052 },
      xc(M7_60) => { 34 , 1060 },
      xc(M7_65) => { 34 , 1065 },
      xc(M7_70) => { 34 , 1070 },
      xc(M7_71) => { 34 , 1071 },
      xc(M7_72) => { 34 , 1072 },
      xc(M7_73) => { 34 , 1073 },
      xc(M7_74) => { 34 , 1074 },
      xc(M7_80) => { 34 , 1080 },
      xc(M7_81) => { 34 , 1081 },
      xc(M7_82) => { 34 , 1082 },
      xc(M7_83) => { 34 , 1083 },
      xc(M7_84) => { 34 , 1084 },
      xc(M7err_00) => { 134 , 1000 },
      xc(M7err_01) => { 134 , 1001 },
      xc(M7err_08) => { 134 , 1008 },
      xc(M8_00) => { 38 , 1000 },
      xc(M8_01) => { 38 , 1001 },
      xc(M8_02) => { 38 , 1002 },
      xc(M8_03) => { 38 , 1003 },
      xc(M8_04) => { 38 , 1004 },
      xc(M8_05) => { 38 , 1005 },
      xc(M8_06) => { 38 , 1006 },
      xc(M8_07) => { 38 , 1007 },
      xc(M8_08) => { 38 , 1008 },
      xc(M8_09) => { 38 , 1009 },
      xc(M8_10) => { 38 , 1010 },
      xc(M8_121) => { 38 , 1121 },
      xc(M8_20) => { 38 , 1020 },
      xc(M8_21) => { 38 , 1021 },
      xc(M8_22) => { 38 , 1022 },
      xc(M8_23) => { 38 , 1023 },
      xc(M8_24) => { 38 , 1024 },
      xc(M8_25) => { 38 , 1025 },
      xc(M8_26) => { 38 , 1026 },
      xc(M8_27) => { 38 , 1027 },
      xc(M8_32) => { 38 , 1032 },
      xc(M8_35) => { 38 , 1035 },
      xc(M8_37) => { 38 , 1037 },
      xc(M8_38) => { 38 , 1038 },
      xc(M8_41) => { 38 , 1041 },
      xc(M8_42) => { 38 , 1042 },
      xc(M8_50) => { 38 , 1050 },
      xc(M8_51) => { 38 , 1051 },
      xc(M8_52) => { 38 , 1052 },
      xc(M8_60) => { 38 , 1060 },
      xc(M8_65) => { 38 , 1065 },
      xc(M8_70) => { 38 , 1070 },
      xc(M8_71) => { 38 , 1071 },
      xc(M8_80) => { 38 , 1080 },
      xc(M8_81) => { 38 , 1081 },
      xc(M8_82) => { 38 , 1082 },
      xc(M8_83) => { 38 , 1083 },
      xc(M8_84) => { 38 , 1084 },
      xc(M8err_00) => { 138 , 1000 },
      xc(M8err_09) => { 138 , 1009 },
      xc(M8err_21) => { 138 , 1021 },
      xc(M9_00) => { 46 , 1000 },
      xc(M9_01) => { 46 , 1001 },
      xc(M9_02) => { 46 , 1002 },
      xc(M9_03) => { 46 , 1003 },
      xc(M9_04) => { 46 , 1004 },
      xc(M9_05) => { 46 , 1005 },
      xc(M9_06) => { 46 , 1006 },
      xc(M9_07) => { 46 , 1007 },
      xc(M9_08) => { 46 , 1008 },
      xc(M9_09) => { 46 , 1009 },
      xc(M9_121) => { 46 , 1121 },
      xc(M9_20) => { 46 , 1020 },
      xc(M9_21) => { 46 , 1021 },
      xc(M9_22) => { 46 , 1022 },
      xc(M9_23) => { 46 , 1023 },
      xc(M9_24) => { 46 , 1024 },
      xc(M9_25) => { 46 , 1025 },
      xc(M9_26) => { 46 , 1026 },
      xc(M9_27) => { 46 , 1027 },
      xc(M9_32) => { 46 , 1032 },
      xc(M9_35) => { 46 , 1035 },
      xc(M9_37) => { 46 , 1037 },
      xc(M9_38) => { 46 , 1038 },
      xc(M9_41) => { 46 , 1041 },
      xc(M9_42) => { 46 , 1042 },
      xc(M9_43) => { 46 , 1043 },
      xc(M9_50) => { 46 , 1050 },
      xc(M9_51) => { 46 , 1051 },
      xc(M9_52) => { 46 , 1052 },
      xc(M9_60) => { 46 , 1060 },
      xc(M9_65) => { 46 , 1065 },
      xc(M9_70) => { 46 , 1070 },
      xc(M9_71) => { 46 , 1071 },
      xc(M9_80) => { 46 , 1080 },
      xc(M9_81) => { 46 , 1081 },
      xc(M9_82) => { 46 , 1082 },
      xc(M9_83) => { 46 , 1083 },
      xc(M9_84) => { 46 , 1084 },
      xc(MC_01) => { 152 , 1001 },
      xc(MC_02) => { 152 , 1002 },
      xc(MC_03) => { 152 , 1003 },
      xc(MIM_01) => { 90 , 1001 },
      xc(MIM_02) => { 90 , 1002 },
      xc(MIM_03) => { 90 , 1003 },
      xc(MIM_04) => { 90 , 1004 },
      xc(MIM_05) => { 90 , 1005 },
      xc(MIM_06) => { 90 , 1006 },
      xc(MIM_07) => { 90 , 1007 },
      xc(MIM_22) => { 90 , 1022 },
      xc(MIM_23) => { 90 , 1023 },
      xc(MIM_25) => { 90 , 1025 },
      xc(MIM_26) => { 90 , 1026 },
      xc(MIM_51) => { 90 , 1051 },
      xc(MIM_52) => { 90 , 1052 },
      xc(MIM_53) => { 90 , 1053 },
      xc(MIM_54) => { 90 , 1054 },
      xc(MIM_55) => { 90 , 1055 },
      xc(MIM_61) => { 90 , 1061 },
      xc(MIM_62) => { 90 , 1062 },
      xc(MIM_63) => { 90 , 1063 },
      xc(MIM_71) => { 90 , 1071 },
      xc(MIM_72) => { 90 , 1072 },
      xc(MIM_73) => { 90 , 1073 },
      xc(MIM_74) => { 90 , 1074 },
      xc(MIM_75) => { 90 , 1075 },
      xc(MIM_81) => { 90 , 1081 },
      xc(MIM_82) => { 90 , 1082 },
      xc(MIM_83) => { 90 , 1083 },
      xc(MJ0_01) => { 187 , 1001 },
      xc(MJ0_02) => { 187 , 1002 },
      xc(MJ0_03) => { 187 , 1003 },
      xc(MJ0_04) => { 187 , 1004 },
      xc(MJ0_05) => { 187 , 1005 },
      xc(MJ0_06) => { 187 , 1006 },
      xc(MJ0_07) => { 187 , 1007 },
      xc(MJ0_08) => { 187 , 1008 },
      xc(MJ0_09) => { 187 , 1009 },
      xc(MTJ_01) => { 186 , 1001 },
      xc(MTJ_02) => { 186 , 1002 },
      xc(MTJ_03) => { 186 , 1003 },
      xc(MTJ_04) => { 186 , 1004 },
      xc(MTJ_05) => { 186 , 1005 },
      xc(MTJ_06) => { 186 , 1006 },
      xc(MTJ_07) => { 186 , 1007 },
      xc(MTJ_08) => { 186 , 1008 },
      xc(MTJ_09) => { 186 , 1009 },
      xc(MTJ_10) => { 186 , 1010 },
      xc(MTJ_11) => { 186 , 1011 },
      xc(MTJ_12) => { 186 , 1012 },
      xc(MTJ_13) => { 186 , 1013 },
      xc(MTJ_14) => { 186 , 1014 },
      xc(MTJ_15) => { 186 , 1015 },
      xc(NW_01) => { 11 , 1001 },
      xc(NW_03) => { 11 , 1003 },
      xc(NW_12) => { 11 , 1012 },
      xc(NW_128) => { 11 , 1128 },
      xc(NW_129) => { 11 , 1129 },
      xc(NW_14) => { 11 , 1014 },
      xc(NW_17) => { 11 , 1017 },
      xc(NW_18) => { 11 , 1018 },
      xc(NW_21) => { 11 , 1021 },
      xc(NW_22) => { 11 , 1022 },
      xc(NW_23) => { 11 , 1023 },
      xc(NW_24) => { 11 , 1024 },
      xc(NW_25) => { 11 , 1025 },
      xc(NW_28) => { 11 , 1028 },
      xc(NW_29) => { 11 , 1029 },
      xc(NW_30) => { 11 , 1030 },
      xc(NW_31) => { 11 , 1031 },
      xc(NW_33) => { 11 , 1033 },
      xc(NW_35) => { 11 , 1035 },
      xc(NW_36) => { 11 , 1036 },
      xc(NW_41) => { 11 , 1041 },
      xc(NW_42) => { 11 , 1042 },
      xc(NW_43) => { 11 , 1043 },
      xc(NW_55) => { 11 , 1055 },
      xc(NW_56) => { 11 , 1056 },
      xc(NW_57) => { 11 , 1057 },
      xc(NW_58) => { 11 , 1058 },
      xc(NW_59) => { 11 , 1059 },
      xc(NW_60) => { 11 , 1060 },
      xc(NW_71) => { 11 , 1071 },
      xc(NW_73) => { 11 , 1073 },
      xc(NW_74) => { 11 , 1074 },
      xc(PC_00) => { 6 , 1000 },
      xc(PC_01) => { 6 , 1001 },
      xc(PC_02) => { 6 , 1002 },
      xc(PC_04) => { 6 , 1004 },
      xc(PC_20) => { 6 , 1020 },
      xc(PC_21) => { 6 , 1021 },
      xc(PC_23) => { 6 , 1023 },
      xc(PC_25) => { 6 , 1025 },
      xc(PC_31) => { 6 , 1031 },
      xc(PC_32) => { 6 , 1032 },
      xc(PC_33) => { 6 , 1033 },
      xc(PC_34) => { 6 , 1034 },
      xc(PC_35) => { 6 , 1035 },
      xc(PC_36) => { 6 , 1036 },
      xc(PC_41) => { 6 , 1041 },
      xc(PC_42) => { 6 , 1042 },
      xc(PC_43) => { 6 , 1043 },
      xc(PC_44) => { 6 , 1044 },
      xc(PC_444) => { 6 , 1444 },
      xc(PC_45) => { 6 , 1045 },
      xc(PC_46) => { 6 , 1046 },
      xc(PC_50) => { 6 , 1050 },
      xc(PC_51) => { 6 , 1051 },
      xc(PC_52) => { 6 , 1052 },
      xc(PC_53) => { 6 , 1053 },
      xc(PC_54) => { 6 , 1054 },
      xc(PC_55) => { 6 , 1055 },
      xc(PC_56) => { 6 , 1056 },
      xc(PC_57) => { 6 , 1057 },
      xc(PC_61) => { 6 , 1061 },
      xc(PC_81) => { 6 , 1081 },
      xc(PC_82) => { 6 , 1082 },
      xc(PC_83) => { 6 , 1083 },
      xc(PC_84) => { 6 , 1084 },
      xc(PC_85) => { 6 , 1085 },
      xc(PC_91) => { 6 , 1091 },
      xc(PC_92) => { 6 , 1092 },
      xc(PC_93) => { 6 , 1093 },
      xc(PG_01) => { 220 , 1001 },
      xc(PG_02) => { 220 , 1002 },
      xc(PG_03) => { 220 , 1003 },
      xc(PG_04) => { 220 , 1004 },
      xc(PG_05) => { 220 , 1005 },
      xc(PL_00) => { 2 , 1000 },
      xc(PL_01) => { 2 , 1001 },
      xc(PL_02) => { 2 , 1002 },
      xc(PL_03) => { 2 , 1003 },
      xc(PL_04) => { 2 , 1004 },
      xc(PL_05) => { 2 , 1005 },
      xc(PL_06) => { 2 , 1006 },
      xc(PL_07) => { 2 , 1007 },
      xc(PL_08) => { 2 , 1008 },
      xc(PL_09) => { 2 , 1009 },
      xc(PL_100) => { 2 , 1100 },
      xc(PL_101) => { 2 , 1101 },
      xc(PL_102) => { 2 , 1102 },
      xc(PL_103) => { 2 , 1103 },
      xc(PL_104) => { 2 , 1104 },
      xc(PL_105) => { 2 , 1105 },
      xc(PL_106) => { 2 , 1106 },
      xc(PL_11) => { 2 , 1011 },
      xc(PL_12) => { 2 , 1012 },
      xc(PL_13) => { 2 , 1013 },
      xc(PL_15) => { 2 , 1015 },
      xc(PL_16) => { 2 , 1016 },
      xc(PL_24) => { 2 , 1024 },
      xc(PL_25) => { 2 , 1025 },
      xc(PL_51) => { 2 , 1051 },
      xc(PL_52) => { 2 , 1052 },
      xc(PL_55) => { 2 , 1055 },
      xc(PL_61) => { 2 , 1061 },
      xc(PL_62) => { 2 , 1062 },
      xc(PL_63) => { 2 , 1063 },
      xc(PL_66) => { 2 , 1066 },
      xc(PL_67) => { 2 , 1067 },
      xc(PL_68) => { 2 , 1068 },
      xc(PL_69) => { 2 , 1069 },
      xc(PL_70) => { 2 , 1070 },
      xc(PL_71) => { 2 , 1071 },
      xc(PL_91) => { 2 , 1091 },
      xc(PL_92) => { 2 , 1092 },
      xc(RDL_01) => { 355 , 1001 },
      xc(RDL_02) => { 355 , 1002 },
      xc(RDL_03) => { 355 , 1003 },
      xc(RDL_04) => { 355 , 1004 },
      xc(RDL_05) => { 355 , 1005 },
      xc(RDL_06) => { 355 , 1006 },
      xc(RDL_07) => { 355 , 1007 },
      xc(RDL_08) => { 355 , 1008 },
      xc(RDL_09) => { 355 , 1009 },
      xc(RDL_10) => { 355 , 1010 },
      xc(RDL_11) => { 355 , 1011 },
      xc(RDL_12) => { 355 , 1012 },
      xc(RDL_13) => { 355 , 1013 },
      xc(RDL_14) => { 355 , 1014 },
      xc(RDL_15) => { 355 , 1015 },
      xc(RDL_16) => { 355 , 1016 },
      xc(SDC_03) => { 817 , 1003 },
      xc(SDC_11) => { 817 , 1011 },
      xc(SDC_111) => { 817 , 1111 },
      xc(SD_01) => { 829 , 1001 },
      xc(SD_02) => { 829 , 1002 },
      xc(SD_03) => { 829 , 1003 },
      xc(SD_04) => { 829 , 1004 },
      xc(SK_12) => { 153 , 1012 },
      xc(SK_22) => { 153 , 1022 },
      xc(SK_31) => { 153 , 1031 },
      xc(SK_32) => { 153 , 1032 },
      xc(SK_41) => { 153 , 1041 },
      xc(SK_42) => { 153 , 1042 },
      xc(SK_51) => { 153 , 1051 },
      xc(SK_52) => { 153 , 1052 },
      xc(SK_61) => { 153 , 1061 },
      xc(SK_62) => { 153 , 1062 },
      xc(SK_71) => { 153 , 1071 },
      xc(SK_72) => { 153 , 1072 },
      xc(SK_81) => { 153 , 1081 },
      xc(SK_82) => { 153 , 1082 },
      xc(SM0_41) => { 819 , 1041 },
      xc(SM0_60) => { 819 , 1060 },
      xc(SM0_82) => { 819 , 1082 },
      xc(SM0_821) => { 819 , 1821 },
      xc(SM3_41) => { 818 , 1041 },
      xc(SM3_47) => { 818 , 1047 },
      xc(SNW_29) => { 821 , 1029 },
      xc(SV3_97) => { 820 , 1097 },
      xc(TDC_04) => { 405 , 1004 },
      xc(TDC_21) => { 405 , 1021 },
      xc(TEDM_01) => { 8131 , 1001 },
      xc(TEDM_02) => { 8131 , 1002 },
      xc(TEDM_04) => { 8131 , 1004 },
      xc(TEDM_06) => { 8131 , 1006 },
      xc(TEDM_07) => { 8131 , 1007 },
      xc(TEDM_08) => { 8131 , 1008 },
      xc(TEDM_11) => { 8131 , 1011 },
      xc(TEDM_12) => { 8131 , 1012 },
      xc(TEDM_13) => { 8131 , 1013 },
      xc(TEDM_14) => { 8131 , 1014 },
      xc(TEDM_15) => { 8131 , 1015 },
      xc(TEDM_16) => { 8131 , 1016 },
      xc(TEDW_01) => { 8132 , 1001 },
      xc(TEDW_02) => { 8132 , 1002 },
      xc(TEDW_03) => { 8132 , 1003 },
      xc(TEDW_04) => { 8132 , 1004 },
      xc(TEDW_07) => { 8132 , 1007 },
      xc(TEDW_08) => { 8132 , 1008 },
      xc(TEDW_11) => { 8132 , 1011 },
      xc(TEDW_12) => { 8132 , 1012 },
      xc(TEDW_13) => { 8132 , 1013 },
      xc(TEDW_14) => { 8132 , 1014 },
      xc(TEDW_15) => { 8132 , 1015 },
      xc(TEDW_16) => { 8132 , 1016 },
      xc(TEDW_17) => { 8132 , 1017 },
      xc(TEDW_18) => { 8132 , 1018 },
      xc(TM1_01) => { 42 , 1001 },
      xc(TM1_02) => { 42 , 1002 },
      xc(TM1_03) => { 42 , 1003 },
      xc(TM1_04) => { 42 , 1004 },
      xc(TM1_21) => { 42 , 1021 },
      xc(TM1_22) => { 42 , 1022 },
      xc(TM1_23) => { 42 , 1023 },
      xc(TM1_25) => { 42 , 1025 },
      xc(TM1_26) => { 42 , 1026 },
      xc(TM1_51) => { 42 , 1051 },
      xc(TM1_60) => { 42 , 1060 },
      xc(TPC_42) => { 164 , 1042 },
      xc(TPC_44) => { 164 , 1044 },
      xc(TPC_46) => { 164 , 1046 },
      xc(TPL_01) => { 161 , 1001 },
      xc(TPL_02) => { 161 , 1002 },
      xc(TPL_04) => { 161 , 1004 },
      xc(TPL_11) => { 161 , 1011 },
      xc(TPL_13) => { 161 , 1013 },
      xc(TPL_15) => { 161 , 1015 },
      xc(TPL_25) => { 161 , 1025 },
      xc(TSV_01) => { 354 , 1001 },
      xc(TSV_02) => { 354 , 1002 },
      xc(TSV_03) => { 354 , 1003 },
      xc(TSV_04) => { 354 , 1004 },
      xc(TSV_05) => { 354 , 1005 },
      xc(TSV_06) => { 354 , 1006 },
      xc(TSV_07) => { 354 , 1007 },
      xc(TSV_08) => { 354 , 1008 },
      xc(TSV_10) => { 354 , 1010 },
      xc(TSV_21) => { 354 , 1021 },
      xc(TSV_22) => { 354 , 1022 },
      xc(TSV_23) => { 354 , 1023 },
      xc(TSV_61) => { 354 , 1061 },
      xc(TSV_62) => { 354 , 1062 },
      xc(TV1_31) => { 80 , 1031 },
      xc(TV1_32) => { 80 , 1032 },
      xc(TV1_51) => { 80 , 1051 },
      xc(TV1_61) => { 80 , 1061 },
      xc(TX_01) => { 23 , 1001 },
      xc(TX_02) => { 23 , 1002 },
      xc(TX_03) => { 23 , 1003 },
      xc(TX_05) => { 23 , 1005 },
      xc(TX_06) => { 23 , 1006 },
      xc(TX_07) => { 23 , 1007 },
      xc(TX_08) => { 23 , 1008 },
      xc(TX_09) => { 23 , 1009 },
      xc(TX_10) => { 23 , 1010 },
      xc(TX_11) => { 23 , 1011 },
      xc(TX_12) => { 23 , 1012 },
      xc(TX_13) => { 23 , 1013 },
      xc(TX_21) => { 23 , 1021 },
      xc(UHV_01) => { 270 , 1001 },
      xc(UHV_02) => { 270 , 1002 },
      xc(UHV_04) => { 270 , 1004 },
      xc(UHV_05) => { 270 , 1005 },
      xc(UHV_06) => { 270 , 1006 },
      xc(UHV_07) => { 270 , 1007 },
      xc(UHV_09) => { 270 , 1009 },
      xc(UHV_10) => { 270 , 1010 },
      xc(UHV_11) => { 270 , 1011 },
      xc(UHV_12) => { 270 , 1012 },
      xc(UHV_13) => { 270 , 1013 },
      xc(UHV_14) => { 270 , 1014 },
      xc(UHV_15) => { 270 , 1015 },
      xc(UHV_16) => { 270 , 1016 },
      xc(UHV_20) => { 270 , 1020 },
      xc(UHV_21) => { 270 , 1021 },
      xc(UHV_34) => { 270 , 1034 },
      xc(UHV_36) => { 270 , 1036 },
      xc(UHV_40) => { 270 , 1040 },
      xc(UHV_41) => { 270 , 1041 },
      xc(UHV_42) => { 270 , 1042 },
      xc(UHV_43) => { 270 , 1043 },
      xc(UHV_44) => { 270 , 1044 },
      xc(UHV_45) => { 270 , 1045 },
      xc(UHV_46) => { 270 , 1046 },
      xc(UHV_47) => { 270 , 1047 },
      xc(UHV_48) => { 270 , 1048 },
      xc(UHV_49) => { 270 , 1049 },
      xc(UHV_50) => { 270 , 1050 },
      xc(UHV_51) => { 270 , 1051 },
      xc(UHV_52) => { 270 , 1052 },
      xc(UHV_53) => { 270 , 1053 },
      xc(UHV_54) => { 270 , 1054 },
      xc(UHV_55) => { 270 , 1055 },
      xc(UHV_56) => { 270 , 1056 },
      xc(UHV_57) => { 270 , 1057 },
      xc(UHV_58) => { 270 , 1058 },
      xc(UHV_59) => { 270 , 1059 },
      xc(UHV_60) => { 270 , 1060 },
      xc(UHV_61) => { 270 , 1061 },
      xc(UHV_62) => { 270 , 1062 },
      xc(UHV_63) => { 270 , 1063 },
      xc(UL1_01) => { 131 , 1001 },
      xc(UL1_05) => { 131 , 1005 },
      xc(UL1_06) => { 131 , 1006 },
      xc(UL1_07) => { 131 , 1007 },
      xc(UL1_08) => { 131 , 1008 },
      xc(UL1_09) => { 131 , 1009 },
      xc(UL1_10) => { 131 , 1010 },
      xc(UL1_11) => { 131 , 1011 },
      xc(UL1_116) => { 131 , 1116 },
      xc(UL1_12) => { 131 , 1012 },
      xc(UL1_13) => { 131 , 1013 },
      xc(UL1_14) => { 131 , 1014 },
      xc(UL1_15) => { 131 , 1015 },
      xc(UL1_16) => { 131 , 1016 },
      xc(UL1_17) => { 131 , 1017 },
      xc(UL1_31) => { 131 , 1031 },
      xc(UL1_32) => { 131 , 1032 },
      xc(UL1_33) => { 131 , 1033 },
      xc(UL1_34) => { 131 , 1034 },
      xc(UNW_14) => { 411 , 1014 },
      xc(UNW_21) => { 411 , 1021 },
      xc(UNW_22) => { 411 , 1022 },
      xc(UV0_01) => { 160 , 1001 },
      xc(UV0_05) => { 160 , 1005 },
      xc(UV0_06) => { 160 , 1006 },
      xc(UV0_07) => { 160 , 1007 },
      xc(UV0_08) => { 160 , 1008 },
      xc(UV0_09) => { 160 , 1009 },
      xc(UV0_10) => { 160 , 1010 },
      xc(UV0_11) => { 160 , 1011 },
      xc(UV0_116) => { 160 , 1116 },
      xc(UV0_12) => { 160 , 1012 },
      xc(UV0_13) => { 160 , 1013 },
      xc(UV0_14) => { 160 , 1014 },
      xc(UV0_15) => { 160 , 1015 },
      xc(UV0_16) => { 160 , 1016 },
      xc(UV0_17) => { 160 , 1017 },
      xc(UV0_31) => { 160 , 1031 },
      xc(UV0_32) => { 160 , 1032 },
      xc(UV0_33) => { 160 , 1033 },
      xc(UV0_34) => { 160 , 1034 },
      xc(UV1_01) => { 166 , 1001 },
      xc(UV1_05) => { 166 , 1005 },
      xc(UV1_06) => { 166 , 1006 },
      xc(UV1_07) => { 166 , 1007 },
      xc(UV1_08) => { 166 , 1008 },
      xc(UV1_09) => { 166 , 1009 },
      xc(UV1_10) => { 166 , 1010 },
      xc(UV1_11) => { 166 , 1011 },
      xc(UV1_116) => { 166 , 1116 },
      xc(UV1_12) => { 166 , 1012 },
      xc(UV1_13) => { 166 , 1013 },
      xc(UV1_14) => { 166 , 1014 },
      xc(UV1_15) => { 166 , 1015 },
      xc(UV1_16) => { 166 , 1016 },
      xc(UV1_17) => { 166 , 1017 },
      xc(UV1_31) => { 166 , 1031 },
      xc(UV1_32) => { 166 , 1032 },
      xc(UV1_33) => { 166 , 1033 },
      xc(UV1_34) => { 166 , 1034 },
      xc(UV2_01) => { 167 , 1001 },
      xc(UV2_05) => { 167 , 1005 },
      xc(UV2_06) => { 167 , 1006 },
      xc(UV2_07) => { 167 , 1007 },
      xc(UV2_08) => { 167 , 1008 },
      xc(UV2_09) => { 167 , 1009 },
      xc(UV2_10) => { 167 , 1010 },
      xc(UV2_11) => { 167 , 1011 },
      xc(UV2_116) => { 167 , 1116 },
      xc(UV2_12) => { 167 , 1012 },
      xc(UV2_13) => { 167 , 1013 },
      xc(UV2_14) => { 167 , 1014 },
      xc(UV2_15) => { 167 , 1015 },
      xc(UV2_16) => { 167 , 1016 },
      xc(UV2_17) => { 167 , 1017 },
      xc(UV2_31) => { 167 , 1031 },
      xc(UV2_32) => { 167 , 1032 },
      xc(UV2_33) => { 167 , 1033 },
      xc(UV2_34) => { 167 , 1034 },
      xc(UV3_01) => { 175 , 1001 },
      xc(UV3_05) => { 175 , 1005 },
      xc(UV3_06) => { 175 , 1006 },
      xc(UV3_07) => { 175 , 1007 },
      xc(UV3_08) => { 175 , 1008 },
      xc(UV3_09) => { 175 , 1009 },
      xc(UV3_10) => { 175 , 1010 },
      xc(UV3_11) => { 175 , 1011 },
      xc(UV3_116) => { 175 , 1116 },
      xc(UV3_12) => { 175 , 1012 },
      xc(UV3_13) => { 175 , 1013 },
      xc(UV3_14) => { 175 , 1014 },
      xc(UV3_15) => { 175 , 1015 },
      xc(UV3_16) => { 175 , 1016 },
      xc(UV3_17) => { 175 , 1017 },
      xc(UV3_31) => { 175 , 1031 },
      xc(UV3_32) => { 175 , 1032 },
      xc(UV3_33) => { 175 , 1033 },
      xc(UV3_34) => { 175 , 1034 },
      xc(V0P_02) => { 239 , 1002 },
      xc(V0P_102) => { 239 , 1102 },
      xc(V0T_10) => { 159 , 1010 },
      xc(V0T_11) => { 159 , 1011 },
      xc(V0T_12) => { 159 , 1012 },
      xc(V0T_20) => { 159 , 1020 },
      xc(V0T_21) => { 159 , 1021 },
      xc(V0T_22) => { 159 , 1022 },
      xc(V0_01) => { 56 , 1001 },
      xc(V0_02) => { 56 , 1002 },
      xc(V0_03) => { 56 , 1003 },
      xc(V0_04) => { 56 , 1004 },
      xc(V0_05) => { 56 , 1005 },
      xc(V0_06) => { 56 , 1006 },
      xc(V0_07) => { 56 , 1007 },
      xc(V0_08) => { 56 , 1008 },
      xc(V0_09) => { 56 , 1009 },
      xc(V0_10) => { 56 , 1010 },
      xc(V0_101) => { 56 , 1101 },
      xc(V0_102) => { 56 , 1102 },
      xc(V0_103) => { 56 , 1103 },
      xc(V0_104) => { 56 , 1104 },
      xc(V0_105) => { 56 , 1105 },
      xc(V0_106) => { 56 , 1106 },
      xc(V0_107) => { 56 , 1107 },
      xc(V0_108) => { 56 , 1108 },
      xc(V0_111) => { 56 , 1111 },
      xc(V0_122) => { 56 , 1122 },
      xc(V0_142) => { 56 , 1142 },
      xc(V0_171) => { 56 , 1171 },
      xc(V0_19) => { 56 , 1019 },
      xc(V0_22) => { 56 , 1022 },
      xc(V0_23) => { 56 , 1023 },
      xc(V0_24) => { 56 , 1024 },
      xc(V0_242) => { 56 , 1242 },
      xc(V0_25) => { 56 , 1025 },
      xc(V0_250) => { 56 , 1250 },
      xc(V0_252) => { 56 , 1252 },
      xc(V0_26) => { 56 , 1026 },
      xc(V0_27) => { 56 , 1027 },
      xc(V0_28) => { 56 , 1028 },
      xc(V0_29) => { 56 , 1029 },
      xc(V0_30) => { 56 , 1030 },
      xc(V0_31) => { 56 , 1031 },
      xc(V0_32) => { 56 , 1032 },
      xc(V0_328) => { 56 , 1328 },
      xc(V0_33) => { 56 , 1033 },
      xc(V0_40) => { 56 , 1040 },
      xc(V0_42) => { 56 , 1042 },
      xc(V0_43) => { 56 , 1043 },
      xc(V0_49) => { 56 , 1049 },
      xc(V0_61) => { 56 , 1061 },
      xc(V0_62) => { 56 , 1062 },
      xc(V0_63) => { 56 , 1063 },
      xc(V0_64) => { 56 , 1064 },
      xc(V0_66) => { 56 , 1066 },
      xc(V0_69) => { 56 , 1069 },
      xc(V0_70) => { 56 , 1070 },
      xc(V0_71) => { 56 , 1071 },
      xc(V0_840) => { 56 , 1840 },
      xc(V0_98) => { 56 , 1098 },
      xc(V0_99) => { 56 , 1099 },
      xc(V10_01) => { 53 , 1001 },
      xc(V10_02) => { 53 , 1002 },
      xc(V10_11) => { 53 , 1011 },
      xc(V10_12) => { 53 , 1012 },
      xc(V10_21) => { 53 , 1021 },
      xc(V10_31) => { 53 , 1031 },
      xc(V10_32) => { 53 , 1032 },
      xc(V10_33) => { 53 , 1033 },
      xc(V10_34) => { 53 , 1034 },
      xc(V10_35) => { 53 , 1035 },
      xc(V10_39) => { 53 , 1039 },
      xc(V10_40) => { 53 , 1040 },
      xc(V10_41) => { 53 , 1041 },
      xc(V10_51) => { 53 , 1051 },
      xc(V10_52) => { 53 , 1052 },
      xc(V10_61) => { 53 , 1061 },
      xc(V10_62) => { 53 , 1062 },
      xc(V10_71) => { 53 , 1071 },
      xc(V10_72) => { 53 , 1072 },
      xc(V11_01) => { 57 , 1001 },
      xc(V11_02) => { 57 , 1002 },
      xc(V11_11) => { 57 , 1011 },
      xc(V11_12) => { 57 , 1012 },
      xc(V11_31) => { 57 , 1031 },
      xc(V11_32) => { 57 , 1032 },
      xc(V11_33) => { 57 , 1033 },
      xc(V11_34) => { 57 , 1034 },
      xc(V11_40) => { 57 , 1040 },
      xc(V11_41) => { 57 , 1041 },
      xc(V11_51) => { 57 , 1051 },
      xc(V11_52) => { 57 , 1052 },
      xc(V12_31) => { 61 , 1031 },
      xc(V12_32) => { 61 , 1032 },
      xc(V12_33) => { 61 , 1033 },
      xc(V12_34) => { 61 , 1034 },
      xc(V12_40) => { 61 , 1040 },
      xc(V12_41) => { 61 , 1041 },
      xc(V12_51) => { 61 , 1051 },
      xc(V1H_01) => { 213 , 1001 },
      xc(V1H_02) => { 213 , 1002 },
      xc(V1H_05) => { 213 , 1005 },
      xc(V1H_08) => { 213 , 1008 },
      xc(V1H_09) => { 213 , 1009 },
      xc(V1H_10) => { 213 , 1010 },
      xc(V1H_11) => { 213 , 1011 },
      xc(V1H_12) => { 213 , 1012 },
      xc(V1T_01) => { 313 , 1001 },
      xc(V1T_02) => { 313 , 1002 },
      xc(V1T_03) => { 313 , 1003 },
      xc(V1T_11) => { 313 , 1011 },
      xc(V1T_20) => { 313 , 1020 },
      xc(V1_01) => { 13 , 1001 },
      xc(V1_02) => { 13 , 1002 },
      xc(V1_03) => { 13 , 1003 },
      xc(V1_04) => { 13 , 1004 },
      xc(V1_05) => { 13 , 1005 },
      xc(V1_06) => { 13 , 1006 },
      xc(V1_07) => { 13 , 1007 },
      xc(V1_08) => { 13 , 1008 },
      xc(V1_10) => { 13 , 1010 },
      xc(V1_124) => { 13 , 1124 },
      xc(V1_125) => { 13 , 1125 },
      xc(V1_128) => { 13 , 1128 },
      xc(V1_13) => { 13 , 1013 },
      xc(V1_14) => { 13 , 1014 },
      xc(V1_140) => { 13 , 1140 },
      xc(V1_142) => { 13 , 1142 },
      xc(V1_15) => { 13 , 1015 },
      xc(V1_16) => { 13 , 1016 },
      xc(V1_17) => { 13 , 1017 },
      xc(V1_20) => { 13 , 1020 },
      xc(V1_22) => { 13 , 1022 },
      xc(V1_225) => { 13 , 1225 },
      xc(V1_226) => { 13 , 1226 },
      xc(V1_227) => { 13 , 1227 },
      xc(V1_23) => { 13 , 1023 },
      xc(V1_24) => { 13 , 1024 },
      xc(V1_25) => { 13 , 1025 },
      xc(V1_26) => { 13 , 1026 },
      xc(V1_28) => { 13 , 1028 },
      xc(V1_301) => { 13 , 1301 },
      xc(V1_302) => { 13 , 1302 },
      xc(V1_303) => { 13 , 1303 },
      xc(V1_32) => { 13 , 1032 },
      xc(V1_33) => { 13 , 1033 },
      xc(V1_40) => { 13 , 1040 },
      xc(V1_42) => { 13 , 1042 },
      xc(V1_43) => { 13 , 1043 },
      xc(V1_49) => { 13 , 1049 },
      xc(V1_50) => { 13 , 1050 },
      xc(V1_52) => { 13 , 1052 },
      xc(V1_53) => { 13 , 1053 },
      xc(V1_54) => { 13 , 1054 },
      xc(V1_55) => { 13 , 1055 },
      xc(V1_56) => { 13 , 1056 },
      xc(V1_61) => { 13 , 1061 },
      xc(V1_97) => { 13 , 1097 },
      xc(V1_98) => { 13 , 1098 },
      xc(V2H_01) => { 217 , 1001 },
      xc(V2H_02) => { 217 , 1002 },
      xc(V2H_03) => { 217 , 1003 },
      xc(V2H_04) => { 217 , 1004 },
      xc(V2H_05) => { 217 , 1005 },
      xc(V2H_06) => { 217 , 1006 },
      xc(V2H_07) => { 217 , 1007 },
      xc(V2H_08) => { 217 , 1008 },
      xc(V2H_10) => { 217 , 1010 },
      xc(V2H_11) => { 217 , 1011 },
      xc(V2H_12) => { 217 , 1012 },
      xc(V2H_13) => { 217 , 1013 },
      xc(V2H_14) => { 217 , 1014 },
      xc(V2H_15) => { 217 , 1015 },
      xc(V2H_16) => { 217 , 1016 },
      xc(V2H_20) => { 217 , 1020 },
      xc(V2T_01) => { 317 , 1001 },
      xc(V2T_02) => { 317 , 1002 },
      xc(V2T_03) => { 317 , 1003 },
      xc(V2T_04) => { 317 , 1004 },
      xc(V2T_05) => { 317 , 1005 },
      xc(V2T_06) => { 317 , 1006 },
      xc(V2T_20) => { 317 , 1020 },
      xc(V2_01) => { 17 , 1001 },
      xc(V2_02) => { 17 , 1002 },
      xc(V2_03) => { 17 , 1003 },
      xc(V2_04) => { 17 , 1004 },
      xc(V2_05) => { 17 , 1005 },
      xc(V2_06) => { 17 , 1006 },
      xc(V2_07) => { 17 , 1007 },
      xc(V2_08) => { 17 , 1008 },
      xc(V2_09) => { 17 , 1009 },
      xc(V2_10) => { 17 , 1010 },
      xc(V2_11) => { 17 , 1011 },
      xc(V2_116) => { 17 , 1116 },
      xc(V2_117) => { 17 , 1117 },
      xc(V2_118) => { 17 , 1118 },
      xc(V2_119) => { 17 , 1119 },
      xc(V2_12) => { 17 , 1012 },
      xc(V2_120) => { 17 , 1120 },
      xc(V2_121) => { 17 , 1121 },
      xc(V2_122) => { 17 , 1122 },
      xc(V2_123) => { 17 , 1123 },
      xc(V2_124) => { 17 , 1124 },
      xc(V2_127) => { 17 , 1127 },
      xc(V2_128) => { 17 , 1128 },
      xc(V2_129) => { 17 , 1129 },
      xc(V2_13) => { 17 , 1013 },
      xc(V2_130) => { 17 , 1130 },
      xc(V2_131) => { 17 , 1131 },
      xc(V2_132) => { 17 , 1132 },
      xc(V2_133) => { 17 , 1133 },
      xc(V2_134) => { 17 , 1134 },
      xc(V2_135) => { 17 , 1135 },
      xc(V2_136) => { 17 , 1136 },
      xc(V2_137) => { 17 , 1137 },
      xc(V2_138) => { 17 , 1138 },
      xc(V2_139) => { 17 , 1139 },
      xc(V2_14) => { 17 , 1014 },
      xc(V2_140) => { 17 , 1140 },
      xc(V2_141) => { 17 , 1141 },
      xc(V2_142) => { 17 , 1142 },
      xc(V2_143) => { 17 , 1143 },
      xc(V2_144) => { 17 , 1144 },
      xc(V2_145) => { 17 , 1145 },
      xc(V2_146) => { 17 , 1146 },
      xc(V2_147) => { 17 , 1147 },
      xc(V2_148) => { 17 , 1148 },
      xc(V2_149) => { 17 , 1149 },
      xc(V2_150) => { 17 , 1150 },
      xc(V2_152) => { 17 , 1152 },
      xc(V2_16) => { 17 , 1016 },
      xc(V2_161) => { 17 , 1161 },
      xc(V2_162) => { 17 , 1162 },
      xc(V2_163) => { 17 , 1163 },
      xc(V2_164) => { 17 , 1164 },
      xc(V2_165) => { 17 , 1165 },
      xc(V2_166) => { 17 , 1166 },
      xc(V2_17) => { 17 , 1017 },
      xc(V2_172) => { 17 , 1172 },
      xc(V2_18) => { 17 , 1018 },
      xc(V2_19) => { 17 , 1019 },
      xc(V2_20) => { 17 , 1020 },
      xc(V2_22) => { 17 , 1022 },
      xc(V2_228) => { 17 , 1228 },
      xc(V2_23) => { 17 , 1023 },
      xc(V2_24) => { 17 , 1024 },
      xc(V2_240) => { 17 , 1240 },
      xc(V2_241) => { 17 , 1241 },
      xc(V2_250) => { 17 , 1250 },
      xc(V2_251) => { 17 , 1251 },
      xc(V2_252) => { 17 , 1252 },
      xc(V2_28) => { 17 , 1028 },
      xc(V2_32) => { 17 , 1032 },
      xc(V2_33) => { 17 , 1033 },
      xc(V2_40) => { 17 , 1040 },
      xc(V2_41) => { 17 , 1041 },
      xc(V2_42) => { 17 , 1042 },
      xc(V2_43) => { 17 , 1043 },
      xc(V2_45) => { 17 , 1045 },
      xc(V2_450) => { 17 , 1450 },
      xc(V2_451) => { 17 , 1451 },
      xc(V2_452) => { 17 , 1452 },
      xc(V2_46) => { 17 , 1046 },
      xc(V2_49) => { 17 , 1049 },
      xc(V2_51) => { 17 , 1051 },
      xc(V2_54) => { 17 , 1054 },
      xc(V2_61) => { 17 , 1061 },
      xc(V2_62) => { 17 , 1062 },
      xc(V2_97) => { 17 , 1097 },
      xc(V2_98) => { 17 , 1098 },
      xc(V3H_01) => { 221 , 1001 },
      xc(V3H_02) => { 221 , 1002 },
      xc(V3H_03) => { 221 , 1003 },
      xc(V3H_04) => { 221 , 1004 },
      xc(V3H_05) => { 221 , 1005 },
      xc(V3H_06) => { 221 , 1006 },
      xc(V3H_07) => { 221 , 1007 },
      xc(V3H_08) => { 221 , 1008 },
      xc(V3H_10) => { 221 , 1010 },
      xc(V3H_11) => { 221 , 1011 },
      xc(V3H_12) => { 221 , 1012 },
      xc(V3H_13) => { 221 , 1013 },
      xc(V3H_14) => { 221 , 1014 },
      xc(V3H_15) => { 221 , 1015 },
      xc(V3H_16) => { 221 , 1016 },
      xc(V3H_17) => { 221 , 1017 },
      xc(V3H_18) => { 221 , 1018 },
      xc(V3H_20) => { 221 , 1020 },
      xc(V3T_01) => { 321 , 1001 },
      xc(V3T_02) => { 321 , 1002 },
      xc(V3T_03) => { 321 , 1003 },
      xc(V3T_04) => { 321 , 1004 },
      xc(V3T_05) => { 321 , 1005 },
      xc(V3T_06) => { 321 , 1006 },
      xc(V3T_20) => { 321 , 1020 },
      xc(V3_01) => { 21 , 1001 },
      xc(V3_02) => { 21 , 1002 },
      xc(V3_03) => { 21 , 1003 },
      xc(V3_04) => { 21 , 1004 },
      xc(V3_05) => { 21 , 1005 },
      xc(V3_06) => { 21 , 1006 },
      xc(V3_07) => { 21 , 1007 },
      xc(V3_08) => { 21 , 1008 },
      xc(V3_09) => { 21 , 1009 },
      xc(V3_10) => { 21 , 1010 },
      xc(V3_101) => { 21 , 1101 },
      xc(V3_102) => { 21 , 1102 },
      xc(V3_103) => { 21 , 1103 },
      xc(V3_104) => { 21 , 1104 },
      xc(V3_105) => { 21 , 1105 },
      xc(V3_106) => { 21 , 1106 },
      xc(V3_107) => { 21 , 1107 },
      xc(V3_108) => { 21 , 1108 },
      xc(V3_109) => { 21 , 1109 },
      xc(V3_11) => { 21 , 1011 },
      xc(V3_110) => { 21 , 1110 },
      xc(V3_111) => { 21 , 1111 },
      xc(V3_112) => { 21 , 1112 },
      xc(V3_113) => { 21 , 1113 },
      xc(V3_114) => { 21 , 1114 },
      xc(V3_12) => { 21 , 1012 },
      xc(V3_120) => { 21 , 1120 },
      xc(V3_123) => { 21 , 1123 },
      xc(V3_124) => { 21 , 1124 },
      xc(V3_125) => { 21 , 1125 },
      xc(V3_126) => { 21 , 1126 },
      xc(V3_127) => { 21 , 1127 },
      xc(V3_128) => { 21 , 1128 },
      xc(V3_129) => { 21 , 1129 },
      xc(V3_13) => { 21 , 1013 },
      xc(V3_130) => { 21 , 1130 },
      xc(V3_131) => { 21 , 1131 },
      xc(V3_132) => { 21 , 1132 },
      xc(V3_133) => { 21 , 1133 },
      xc(V3_134) => { 21 , 1134 },
      xc(V3_135) => { 21 , 1135 },
      xc(V3_136) => { 21 , 1136 },
      xc(V3_137) => { 21 , 1137 },
      xc(V3_138) => { 21 , 1138 },
      xc(V3_14) => { 21 , 1014 },
      xc(V3_142) => { 21 , 1142 },
      xc(V3_15) => { 21 , 1015 },
      xc(V3_152) => { 21 , 1152 },
      xc(V3_153) => { 21 , 1153 },
      xc(V3_154) => { 21 , 1154 },
      xc(V3_16) => { 21 , 1016 },
      xc(V3_161) => { 21 , 1161 },
      xc(V3_162) => { 21 , 1162 },
      xc(V3_163) => { 21 , 1163 },
      xc(V3_164) => { 21 , 1164 },
      xc(V3_165) => { 21 , 1165 },
      xc(V3_166) => { 21 , 1166 },
      xc(V3_167) => { 21 , 1167 },
      xc(V3_168) => { 21 , 1168 },
      xc(V3_169) => { 21 , 1169 },
      xc(V3_170) => { 21 , 1170 },
      xc(V3_171) => { 21 , 1171 },
      xc(V3_19) => { 21 , 1019 },
      xc(V3_20) => { 21 , 1020 },
      xc(V3_22) => { 21 , 1022 },
      xc(V3_228) => { 21 , 1228 },
      xc(V3_23) => { 21 , 1023 },
      xc(V3_24) => { 21 , 1024 },
      xc(V3_240) => { 21 , 1240 },
      xc(V3_25) => { 21 , 1025 },
      xc(V3_250) => { 21 , 1250 },
      xc(V3_251) => { 21 , 1251 },
      xc(V3_252) => { 21 , 1252 },
      xc(V3_26) => { 21 , 1026 },
      xc(V3_28) => { 21 , 1028 },
      xc(V3_32) => { 21 , 1032 },
      xc(V3_33) => { 21 , 1033 },
      xc(V3_40) => { 21 , 1040 },
      xc(V3_41) => { 21 , 1041 },
      xc(V3_42) => { 21 , 1042 },
      xc(V3_43) => { 21 , 1043 },
      xc(V3_45) => { 21 , 1045 },
      xc(V3_450) => { 21 , 1450 },
      xc(V3_451) => { 21 , 1451 },
      xc(V3_452) => { 21 , 1452 },
      xc(V3_46) => { 21 , 1046 },
      xc(V3_49) => { 21 , 1049 },
      xc(V3_51) => { 21 , 1051 },
      xc(V3_54) => { 21 , 1054 },
      xc(V3_61) => { 21 , 1061 },
      xc(V3_62) => { 21 , 1062 },
      xc(V3_97) => { 21 , 1097 },
      xc(V3_98) => { 21 , 1098 },
      xc(V4H_01) => { 225 , 1001 },
      xc(V4H_02) => { 225 , 1002 },
      xc(V4H_03) => { 225 , 1003 },
      xc(V4H_04) => { 225 , 1004 },
      xc(V4H_05) => { 225 , 1005 },
      xc(V4H_06) => { 225 , 1006 },
      xc(V4H_07) => { 225 , 1007 },
      xc(V4H_08) => { 225 , 1008 },
      xc(V4H_10) => { 225 , 1010 },
      xc(V4H_11) => { 225 , 1011 },
      xc(V4H_12) => { 225 , 1012 },
      xc(V4H_13) => { 225 , 1013 },
      xc(V4H_14) => { 225 , 1014 },
      xc(V4H_15) => { 225 , 1015 },
      xc(V4H_16) => { 225 , 1016 },
      xc(V4H_20) => { 225 , 1020 },
      xc(V4T_01) => { 325 , 1001 },
      xc(V4T_02) => { 325 , 1002 },
      xc(V4T_03) => { 325 , 1003 },
      xc(V4T_04) => { 325 , 1004 },
      xc(V4T_05) => { 325 , 1005 },
      xc(V4T_06) => { 325 , 1006 },
      xc(V4T_20) => { 325 , 1020 },
      xc(V4_01) => { 25 , 1001 },
      xc(V4_02) => { 25 , 1002 },
      xc(V4_03) => { 25 , 1003 },
      xc(V4_04) => { 25 , 1004 },
      xc(V4_05) => { 25 , 1005 },
      xc(V4_06) => { 25 , 1006 },
      xc(V4_08) => { 25 , 1008 },
      xc(V4_09) => { 25 , 1009 },
      xc(V4_10) => { 25 , 1010 },
      xc(V4_101) => { 25 , 1101 },
      xc(V4_102) => { 25 , 1102 },
      xc(V4_103) => { 25 , 1103 },
      xc(V4_104) => { 25 , 1104 },
      xc(V4_105) => { 25 , 1105 },
      xc(V4_106) => { 25 , 1106 },
      xc(V4_107) => { 25 , 1107 },
      xc(V4_108) => { 25 , 1108 },
      xc(V4_109) => { 25 , 1109 },
      xc(V4_11) => { 25 , 1011 },
      xc(V4_110) => { 25 , 1110 },
      xc(V4_111) => { 25 , 1111 },
      xc(V4_112) => { 25 , 1112 },
      xc(V4_113) => { 25 , 1113 },
      xc(V4_114) => { 25 , 1114 },
      xc(V4_115) => { 25 , 1115 },
      xc(V4_116) => { 25 , 1116 },
      xc(V4_117) => { 25 , 1117 },
      xc(V4_118) => { 25 , 1118 },
      xc(V4_119) => { 25 , 1119 },
      xc(V4_12) => { 25 , 1012 },
      xc(V4_120) => { 25 , 1120 },
      xc(V4_121) => { 25 , 1121 },
      xc(V4_122) => { 25 , 1122 },
      xc(V4_123) => { 25 , 1123 },
      xc(V4_124) => { 25 , 1124 },
      xc(V4_125) => { 25 , 1125 },
      xc(V4_126) => { 25 , 1126 },
      xc(V4_127) => { 25 , 1127 },
      xc(V4_128) => { 25 , 1128 },
      xc(V4_129) => { 25 , 1129 },
      xc(V4_13) => { 25 , 1013 },
      xc(V4_130) => { 25 , 1130 },
      xc(V4_131) => { 25 , 1131 },
      xc(V4_132) => { 25 , 1132 },
      xc(V4_133) => { 25 , 1133 },
      xc(V4_134) => { 25 , 1134 },
      xc(V4_135) => { 25 , 1135 },
      xc(V4_136) => { 25 , 1136 },
      xc(V4_137) => { 25 , 1137 },
      xc(V4_138) => { 25 , 1138 },
      xc(V4_14) => { 25 , 1014 },
      xc(V4_142) => { 25 , 1142 },
      xc(V4_15) => { 25 , 1015 },
      xc(V4_152) => { 25 , 1152 },
      xc(V4_153) => { 25 , 1153 },
      xc(V4_154) => { 25 , 1154 },
      xc(V4_16) => { 25 , 1016 },
      xc(V4_161) => { 25 , 1161 },
      xc(V4_162) => { 25 , 1162 },
      xc(V4_163) => { 25 , 1163 },
      xc(V4_164) => { 25 , 1164 },
      xc(V4_165) => { 25 , 1165 },
      xc(V4_166) => { 25 , 1166 },
      xc(V4_167) => { 25 , 1167 },
      xc(V4_168) => { 25 , 1168 },
      xc(V4_169) => { 25 , 1169 },
      xc(V4_17) => { 25 , 1017 },
      xc(V4_170) => { 25 , 1170 },
      xc(V4_171) => { 25 , 1171 },
      xc(V4_172) => { 25 , 1172 },
      xc(V4_181) => { 25 , 1181 },
      xc(V4_182) => { 25 , 1182 },
      xc(V4_19) => { 25 , 1019 },
      xc(V4_20) => { 25 , 1020 },
      xc(V4_22) => { 25 , 1022 },
      xc(V4_228) => { 25 , 1228 },
      xc(V4_23) => { 25 , 1023 },
      xc(V4_24) => { 25 , 1024 },
      xc(V4_240) => { 25 , 1240 },
      xc(V4_25) => { 25 , 1025 },
      xc(V4_250) => { 25 , 1250 },
      xc(V4_251) => { 25 , 1251 },
      xc(V4_252) => { 25 , 1252 },
      xc(V4_26) => { 25 , 1026 },
      xc(V4_28) => { 25 , 1028 },
      xc(V4_29) => { 25 , 1029 },
      xc(V4_30) => { 25 , 1030 },
      xc(V4_32) => { 25 , 1032 },
      xc(V4_33) => { 25 , 1033 },
      xc(V4_40) => { 25 , 1040 },
      xc(V4_41) => { 25 , 1041 },
      xc(V4_42) => { 25 , 1042 },
      xc(V4_43) => { 25 , 1043 },
      xc(V4_45) => { 25 , 1045 },
      xc(V4_450) => { 25 , 1450 },
      xc(V4_451) => { 25 , 1451 },
      xc(V4_452) => { 25 , 1452 },
      xc(V4_46) => { 25 , 1046 },
      xc(V4_49) => { 25 , 1049 },
      xc(V4_51) => { 25 , 1051 },
      xc(V4_52) => { 25 , 1052 },
      xc(V4_54) => { 25 , 1054 },
      xc(V4_61) => { 25 , 1061 },
      xc(V4_62) => { 25 , 1062 },
      xc(V4_97) => { 25 , 1097 },
      xc(V4_98) => { 25 , 1098 },
      xc(V4err_101) => { 125 , 1101 },
      xc(V4err_113) => { 125 , 1113 },
      xc(V5_01) => { 29 , 1001 },
      xc(V5_02) => { 29 , 1002 },
      xc(V5_03) => { 29 , 1003 },
      xc(V5_04) => { 29 , 1004 },
      xc(V5_05) => { 29 , 1005 },
      xc(V5_06) => { 29 , 1006 },
      xc(V5_07) => { 29 , 1007 },
      xc(V5_08) => { 29 , 1008 },
      xc(V5_09) => { 29 , 1009 },
      xc(V5_10) => { 29 , 1010 },
      xc(V5_101) => { 29 , 1101 },
      xc(V5_102) => { 29 , 1102 },
      xc(V5_103) => { 29 , 1103 },
      xc(V5_104) => { 29 , 1104 },
      xc(V5_105) => { 29 , 1105 },
      xc(V5_106) => { 29 , 1106 },
      xc(V5_107) => { 29 , 1107 },
      xc(V5_108) => { 29 , 1108 },
      xc(V5_109) => { 29 , 1109 },
      xc(V5_11) => { 29 , 1011 },
      xc(V5_110) => { 29 , 1110 },
      xc(V5_111) => { 29 , 1111 },
      xc(V5_112) => { 29 , 1112 },
      xc(V5_113) => { 29 , 1113 },
      xc(V5_114) => { 29 , 1114 },
      xc(V5_115) => { 29 , 1115 },
      xc(V5_116) => { 29 , 1116 },
      xc(V5_117) => { 29 , 1117 },
      xc(V5_118) => { 29 , 1118 },
      xc(V5_12) => { 29 , 1012 },
      xc(V5_124) => { 29 , 1124 },
      xc(V5_128) => { 29 , 1128 },
      xc(V5_13) => { 29 , 1013 },
      xc(V5_14) => { 29 , 1014 },
      xc(V5_15) => { 29 , 1015 },
      xc(V5_152) => { 29 , 1152 },
      xc(V5_153) => { 29 , 1153 },
      xc(V5_154) => { 29 , 1154 },
      xc(V5_16) => { 29 , 1016 },
      xc(V5_161) => { 29 , 1161 },
      xc(V5_162) => { 29 , 1162 },
      xc(V5_163) => { 29 , 1163 },
      xc(V5_164) => { 29 , 1164 },
      xc(V5_165) => { 29 , 1165 },
      xc(V5_166) => { 29 , 1166 },
      xc(V5_167) => { 29 , 1167 },
      xc(V5_168) => { 29 , 1168 },
      xc(V5_169) => { 29 , 1169 },
      xc(V5_170) => { 29 , 1170 },
      xc(V5_171) => { 29 , 1171 },
      xc(V5_172) => { 29 , 1172 },
      xc(V5_181) => { 29 , 1181 },
      xc(V5_182) => { 29 , 1182 },
      xc(V5_19) => { 29 , 1019 },
      xc(V5_22) => { 29 , 1022 },
      xc(V5_23) => { 29 , 1023 },
      xc(V5_24) => { 29 , 1024 },
      xc(V5_240) => { 29 , 1240 },
      xc(V5_241) => { 29 , 1241 },
      xc(V5_25) => { 29 , 1025 },
      xc(V5_26) => { 29 , 1026 },
      xc(V5_28) => { 29 , 1028 },
      xc(V5_29) => { 29 , 1029 },
      xc(V5_30) => { 29 , 1030 },
      xc(V5_32) => { 29 , 1032 },
      xc(V5_33) => { 29 , 1033 },
      xc(V5_40) => { 29 , 1040 },
      xc(V5_41) => { 29 , 1041 },
      xc(V5_42) => { 29 , 1042 },
      xc(V5_49) => { 29 , 1049 },
      xc(V5_51) => { 29 , 1051 },
      xc(V5_52) => { 29 , 1052 },
      xc(V5_54) => { 29 , 1054 },
      xc(V5_61) => { 29 , 1061 },
      xc(V5_62) => { 29 , 1062 },
      xc(V6_01) => { 33 , 1001 },
      xc(V6_02) => { 33 , 1002 },
      xc(V6_03) => { 33 , 1003 },
      xc(V6_04) => { 33 , 1004 },
      xc(V6_05) => { 33 , 1005 },
      xc(V6_06) => { 33 , 1006 },
      xc(V6_07) => { 33 , 1007 },
      xc(V6_08) => { 33 , 1008 },
      xc(V6_09) => { 33 , 1009 },
      xc(V6_10) => { 33 , 1010 },
      xc(V6_101) => { 33 , 1101 },
      xc(V6_102) => { 33 , 1102 },
      xc(V6_103) => { 33 , 1103 },
      xc(V6_104) => { 33 , 1104 },
      xc(V6_105) => { 33 , 1105 },
      xc(V6_106) => { 33 , 1106 },
      xc(V6_107) => { 33 , 1107 },
      xc(V6_108) => { 33 , 1108 },
      xc(V6_109) => { 33 , 1109 },
      xc(V6_11) => { 33 , 1011 },
      xc(V6_110) => { 33 , 1110 },
      xc(V6_117) => { 33 , 1117 },
      xc(V6_118) => { 33 , 1118 },
      xc(V6_12) => { 33 , 1012 },
      xc(V6_128) => { 33 , 1128 },
      xc(V6_13) => { 33 , 1013 },
      xc(V6_14) => { 33 , 1014 },
      xc(V6_15) => { 33 , 1015 },
      xc(V6_16) => { 33 , 1016 },
      xc(V6_17) => { 33 , 1017 },
      xc(V6_18) => { 33 , 1018 },
      xc(V6_19) => { 33 , 1019 },
      xc(V6_20) => { 33 , 1020 },
      xc(V6_22) => { 33 , 1022 },
      xc(V6_23) => { 33 , 1023 },
      xc(V6_24) => { 33 , 1024 },
      xc(V6_240) => { 33 , 1240 },
      xc(V6_25) => { 33 , 1025 },
      xc(V6_27) => { 33 , 1027 },
      xc(V6_28) => { 33 , 1028 },
      xc(V6_29) => { 33 , 1029 },
      xc(V6_30) => { 33 , 1030 },
      xc(V6_31) => { 33 , 1031 },
      xc(V6_32) => { 33 , 1032 },
      xc(V6_33) => { 33 , 1033 },
      xc(V6_40) => { 33 , 1040 },
      xc(V6_41) => { 33 , 1041 },
      xc(V6_48) => { 33 , 1048 },
      xc(V6_49) => { 33 , 1049 },
      xc(V6_51) => { 33 , 1051 },
      xc(V6_54) => { 33 , 1054 },
      xc(V6_61) => { 33 , 1061 },
      xc(V6_92) => { 33 , 1092 },
      xc(V6err_02) => { 133 , 1002 },
      xc(V6err_103) => { 133 , 1103 },
      xc(V6err_104) => { 133 , 1104 },
      xc(V6err_12) => { 133 , 1012 },
      xc(V6err_92) => { 133 , 1092 },
      xc(V7_01) => { 37 , 1001 },
      xc(V7_02) => { 37 , 1002 },
      xc(V7_03) => { 37 , 1003 },
      xc(V7_04) => { 37 , 1004 },
      xc(V7_05) => { 37 , 1005 },
      xc(V7_06) => { 37 , 1006 },
      xc(V7_07) => { 37 , 1007 },
      xc(V7_08) => { 37 , 1008 },
      xc(V7_09) => { 37 , 1009 },
      xc(V7_10) => { 37 , 1010 },
      xc(V7_101) => { 37 , 1101 },
      xc(V7_102) => { 37 , 1102 },
      xc(V7_103) => { 37 , 1103 },
      xc(V7_104) => { 37 , 1104 },
      xc(V7_105) => { 37 , 1105 },
      xc(V7_106) => { 37 , 1106 },
      xc(V7_107) => { 37 , 1107 },
      xc(V7_108) => { 37 , 1108 },
      xc(V7_109) => { 37 , 1109 },
      xc(V7_11) => { 37 , 1011 },
      xc(V7_110) => { 37 , 1110 },
      xc(V7_111) => { 37 , 1111 },
      xc(V7_112) => { 37 , 1112 },
      xc(V7_12) => { 37 , 1012 },
      xc(V7_128) => { 37 , 1128 },
      xc(V7_13) => { 37 , 1013 },
      xc(V7_14) => { 37 , 1014 },
      xc(V7_151) => { 37 , 1151 },
      xc(V7_152) => { 37 , 1152 },
      xc(V7_153) => { 37 , 1153 },
      xc(V7_154) => { 37 , 1154 },
      xc(V7_155) => { 37 , 1155 },
      xc(V7_156) => { 37 , 1156 },
      xc(V7_157) => { 37 , 1157 },
      xc(V7_158) => { 37 , 1158 },
      xc(V7_159) => { 37 , 1159 },
      xc(V7_16) => { 37 , 1016 },
      xc(V7_160) => { 37 , 1160 },
      xc(V7_161) => { 37 , 1161 },
      xc(V7_162) => { 37 , 1162 },
      xc(V7_163) => { 37 , 1163 },
      xc(V7_164) => { 37 , 1164 },
      xc(V7_17) => { 37 , 1017 },
      xc(V7_22) => { 37 , 1022 },
      xc(V7_23) => { 37 , 1023 },
      xc(V7_230) => { 37 , 1230 },
      xc(V7_24) => { 37 , 1024 },
      xc(V7_28) => { 37 , 1028 },
      xc(V7_29) => { 37 , 1029 },
      xc(V7_30) => { 37 , 1030 },
      xc(V7_32) => { 37 , 1032 },
      xc(V7_33) => { 37 , 1033 },
      xc(V7_40) => { 37 , 1040 },
      xc(V7_41) => { 37 , 1041 },
      xc(V7_42) => { 37 , 1042 },
      xc(V7_49) => { 37 , 1049 },
      xc(V7_51) => { 37 , 1051 },
      xc(V7_52) => { 37 , 1052 },
      xc(V7_53) => { 37 , 1053 },
      xc(V7_54) => { 37 , 1054 },
      xc(V7_61) => { 37 , 1061 },
      xc(V7err_02) => { 137 , 1002 },
      xc(V7err_10) => { 137 , 1010 },
      xc(V7err_102) => { 137 , 1102 },
      xc(V7err_151) => { 137 , 1151 },
      xc(V7err_152) => { 137 , 1152 },
      xc(V7err_155) => { 137 , 1155 },
      xc(V7err_156) => { 137 , 1156 },
      xc(V7err_157) => { 137 , 1157 },
      xc(V7err_158) => { 137 , 1158 },
      xc(V8_01) => { 41 , 1001 },
      xc(V8_02) => { 41 , 1002 },
      xc(V8_03) => { 41 , 1003 },
      xc(V8_04) => { 41 , 1004 },
      xc(V8_05) => { 41 , 1005 },
      xc(V8_06) => { 41 , 1006 },
      xc(V8_07) => { 41 , 1007 },
      xc(V8_08) => { 41 , 1008 },
      xc(V8_09) => { 41 , 1009 },
      xc(V8_10) => { 41 , 1010 },
      xc(V8_101) => { 41 , 1101 },
      xc(V8_102) => { 41 , 1102 },
      xc(V8_103) => { 41 , 1103 },
      xc(V8_104) => { 41 , 1104 },
      xc(V8_105) => { 41 , 1105 },
      xc(V8_106) => { 41 , 1106 },
      xc(V8_107) => { 41 , 1107 },
      xc(V8_108) => { 41 , 1108 },
      xc(V8_109) => { 41 , 1109 },
      xc(V8_11) => { 41 , 1011 },
      xc(V8_12) => { 41 , 1012 },
      xc(V8_128) => { 41 , 1128 },
      xc(V8_131) => { 41 , 1131 },
      xc(V8_132) => { 41 , 1132 },
      xc(V8_151) => { 41 , 1151 },
      xc(V8_152) => { 41 , 1152 },
      xc(V8_153) => { 41 , 1153 },
      xc(V8_154) => { 41 , 1154 },
      xc(V8_155) => { 41 , 1155 },
      xc(V8_156) => { 41 , 1156 },
      xc(V8_157) => { 41 , 1157 },
      xc(V8_158) => { 41 , 1158 },
      xc(V8_159) => { 41 , 1159 },
      xc(V8_160) => { 41 , 1160 },
      xc(V8_161) => { 41 , 1161 },
      xc(V8_162) => { 41 , 1162 },
      xc(V8_163) => { 41 , 1163 },
      xc(V8_164) => { 41 , 1164 },
      xc(V8_21) => { 41 , 1021 },
      xc(V8_22) => { 41 , 1022 },
      xc(V8_23) => { 41 , 1023 },
      xc(V8_24) => { 41 , 1024 },
      xc(V8_28) => { 41 , 1028 },
      xc(V8_29) => { 41 , 1029 },
      xc(V8_30) => { 41 , 1030 },
      xc(V8_31) => { 41 , 1031 },
      xc(V8_32) => { 41 , 1032 },
      xc(V8_33) => { 41 , 1033 },
      xc(V8_34) => { 41 , 1034 },
      xc(V8_35) => { 41 , 1035 },
      xc(V8_39) => { 41 , 1039 },
      xc(V8_40) => { 41 , 1040 },
      xc(V8_41) => { 41 , 1041 },
      xc(V8_49) => { 41 , 1049 },
      xc(V8_51) => { 41 , 1051 },
      xc(V8_52) => { 41 , 1052 },
      xc(V8_53) => { 41 , 1053 },
      xc(V8_54) => { 41 , 1054 },
      xc(V8_61) => { 41 , 1061 },
      xc(V8_62) => { 41 , 1062 },
      xc(V8_71) => { 41 , 1071 },
      xc(V8_72) => { 41 , 1072 },
      xc(V8_73) => { 41 , 1073 },
      xc(V8err_01) => { 141 , 1001 },
      xc(V8err_101) => { 141 , 1101 },
      xc(V8err_31) => { 141 , 1031 },
      xc(V8err_32) => { 141 , 1032 },
      xc(V9_01) => { 45 , 1001 },
      xc(V9_02) => { 45 , 1002 },
      xc(V9_101) => { 45 , 1101 },
      xc(V9_11) => { 45 , 1011 },
      xc(V9_12) => { 45 , 1012 },
      xc(V9_131) => { 45 , 1131 },
      xc(V9_132) => { 45 , 1132 },
      xc(V9_153) => { 45 , 1153 },
      xc(V9_21) => { 45 , 1021 },
      xc(V9_31) => { 45 , 1031 },
      xc(V9_32) => { 45 , 1032 },
      xc(V9_33) => { 45 , 1033 },
      xc(V9_34) => { 45 , 1034 },
      xc(V9_35) => { 45 , 1035 },
      xc(V9_39) => { 45 , 1039 },
      xc(V9_40) => { 45 , 1040 },
      xc(V9_41) => { 45 , 1041 },
      xc(V9_51) => { 45 , 1051 },
      xc(V9_52) => { 45 , 1052 },
      xc(V9_53) => { 45 , 1053 },
      xc(V9_61) => { 45 , 1061 },
      xc(V9_62) => { 45 , 1062 },
      xc(V9_71) => { 45 , 1071 },
      xc(V9_72) => { 45 , 1072 },
      xc(V9_73) => { 45 , 1073 },
      xc(VCH_01) => { 303 , 1001 },
      xc(VCH_02) => { 303 , 1002 },
      xc(VCH_03) => { 303 , 1003 },
      xc(VC_01) => { 3 , 1001 },
      xc(VC_02) => { 3 , 1002 },
      xc(VC_03) => { 3 , 1003 },
      xc(VC_04) => { 3 , 1004 },
      xc(VC_05) => { 3 , 1005 },
      xc(VC_06) => { 3 , 1006 },
      xc(VC_07) => { 3 , 1007 },
      xc(VC_08) => { 3 , 1008 },
      xc(VC_09) => { 3 , 1009 },
      xc(VC_10) => { 3 , 1010 },
      xc(VC_11) => { 3 , 1011 },
      xc(VC_12) => { 3 , 1012 },
      xc(VC_134) => { 3 , 1134 },
      xc(VC_139) => { 3 , 1139 },
      xc(VC_19) => { 3 , 1019 },
      xc(VC_22) => { 3 , 1022 },
      xc(VC_23) => { 3 , 1023 },
      xc(VC_24) => { 3 , 1024 },
      xc(VC_26) => { 3 , 1026 },
      xc(VC_30) => { 3 , 1030 },
      xc(VC_31) => { 3 , 1031 },
      xc(VC_32) => { 3 , 1032 },
      xc(VC_33) => { 3 , 1033 },
      xc(VC_34) => { 3 , 1034 },
      xc(VC_35) => { 3 , 1035 },
      xc(VC_36) => { 3 , 1036 },
      xc(VC_37) => { 3 , 1037 },
      xc(VC_38) => { 3 , 1038 },
      xc(VC_39) => { 3 , 1039 },
      xc(VC_40) => { 3 , 1040 },
      xc(VC_41) => { 3 , 1041 },
      xc(VC_42) => { 3 , 1042 },
      xc(VC_43) => { 3 , 1043 },
      xc(VC_44) => { 3 , 1044 },
      xc(VC_46) => { 3 , 1046 },
      xc(VC_47) => { 3 , 1047 },
      xc(VC_48) => { 3 , 1048 },
      xc(VC_49) => { 3 , 1049 },
      xc(VC_51) => { 3 , 1051 },
      xc(VC_61) => { 3 , 1061 },
      xc(VC_70) => { 3 , 1070 },
      xc(VD_07) => { 350 , 1007 },
      xc(VD_08) => { 350 , 1008 },
      xc(VD_09) => { 350 , 1009 },
      xc(VD_10) => { 350 , 1010 },
      xc(VD_11) => { 350 , 1011 },
      xc(VD_17) => { 350 , 1017 },
      xc(VD_19) => { 350 , 1019 },
      xc(VD_20) => { 350 , 1020 },
      xc(VD_21) => { 350 , 1021 },
      xc(VD_27) => { 350 , 1027 },
      xc(VD_28) => { 350 , 1028 },
      xc(VD_29) => { 350 , 1029 },
      xc(VD_30) => { 350 , 1030 },
      xc(VD_31) => { 350 , 1031 },
      xc(VD_57) => { 350 , 1057 },
      xc(VD_58) => { 350 , 1058 },
      xc(VD_59) => { 350 , 1059 },
      xc(VD_60) => { 350 , 1060 },
      xc(VD_61) => { 350 , 1061 },
      xc(XDC_21) => { 505 , 1021 },
      xc(XG_01) => { 232 , 1001 },
      xc(XG_02) => { 232 , 1002 },
      xc(XG_03) => { 232 , 1003 },
      xc(XG_05) => { 232 , 1005 },
      xc(XG_06) => { 232 , 1006 },
      xc(XG_07) => { 232 , 1007 },
      xc(XG_08) => { 232 , 1008 },
      xc(XG_09) => { 232 , 1009 },
      xc(XG_10) => { 232 , 1010 },
      xc(XG_11) => { 232 , 1011 },
      xc(XG_12) => { 232 , 1012 },
      xc(XG_13) => { 232 , 1013 },
      xc(XG_21) => { 232 , 1021 },
      xc(XPL_01) => { 802 , 1001 },
      xc(XPL_02) => { 802 , 1002 }
   };

#include <1273/p1273dx_dr_default.rs>

#endif
