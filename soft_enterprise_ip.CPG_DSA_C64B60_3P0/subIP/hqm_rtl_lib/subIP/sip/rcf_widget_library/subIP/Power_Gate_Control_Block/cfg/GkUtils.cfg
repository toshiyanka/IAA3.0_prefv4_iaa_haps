#------------------------------------------------------------------------------------------------------
##     Package Name: Haswell_Models.pm
##          Project: Haswell/Broadwell
##            Owner: Chancellor Archie (chancellor.archie@intel.com)
##      Description: This package is used to simply define the models, duts, and test list
##                   which are used by the Haswell Model Build tools to create Models.
##
##
##
##   (C) Copyright Intel Corporation, 2008
##   Licensed material --  Program property of Intel Corporation
##   All Rights Reserved
##
##   This program is the property of Intel Corporation and is furnished
##   pursuant to a written license agreement. It may not be used, reproduced,
##   or disclosed to others except in accordance with the terms and conditions
##   of that agreement
##-------------------------------------------------------------------------------------------------------
##-------------------------------------------------------------------------------------------------------
   ##Haswell/Broadwell Model Hierarchy/Dut Configuration
##
##-------------------------------------------------------------------------------------------------------

## Do for common file.
do "GkUtils.hdk.common.cfg";
use lib "/p/hdk/rtl/proj_tools/gkutils_flowGen/latest/gk-utils_command_generator/";
use GK_Utils;
use mock_gui2;

my $GenAceJobsfile = "$ENV{RTL_PROJ_TOOLS}/baseline_tools/sip_tsa/1.02.09/tools/scripts/GenAceJobsfile";

my $site = $ENV{EC_SITE};

#$GkConfig{modelSetupCmd} = "source $ENV{MODEL_ROOT}/env_source";
my $smart_turnin = 0; 

$Models{general_cmds} = [

    {
        'NAME'          => 'Compile_vcs',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME> -1c -CUST <CUST> -1c- -ace_args ace -cc -ace_args- ",
        'GATING'        => 1,
    },

    {
        'NAME'          => 'Compile_verdi',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME>  -1c -CUST <CUST> -1c-  -ace_args  ace -ccod -ace_args-",
        'GATING'        => 1,
    },

    {
        'NAME'          => 'Run_utb_pgcbunit',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME> -1c -CUST <CUST> -1c- -ace_args ace -x -t pgcbunit -en_utb_fpv -ace_args- ",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_vcs" => "Success"},
    },

    {
        'NAME'          => 'Run_utb_ClockDomainController',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME> -1c -CUST <CUST> -1c- -ace_args ace -x -t ClockDomainController -en_utb_fpv -task all_props -ace_args- ",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_vcs" => "Success"},
    },
    
# {
#   'NAME'         => 'Gk_level0',
#   'CMD_TYPE'     => 'jobsfile',
#   'JOBSFILE'     => '<MODEL_ROOT>/GATEKEEPER/NBFeederACE/<JOB_NAME>.tl.jobs',  
#   'CMDS'         => "$GenAceJobsfile simbuild -dut <DUT> -logprefix <JOB_NAME>  -1c -CUST <CUST> -1c-  -ace_args ace -x -tl gk_level0.list -ea -dump_testlist_file <MODEL_ROOT>/GATEKEEPER/NBFeederACE/<JOB_NAME>.tl -ace_args- ",
#   'DEPENDENCY'   => {"Compile_verdi" => "Success"},
# },

    {
        'NAME'          => 'Compile_lintra',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME>  -1c -CUST <CUST> -1c- -ace_args ace -ccolt -mc lintra_tooltb -ace_args-",
        'GATING'        => 1,
    },
 
    {
        'NAME'          => 'Run_lintra_pgcbunit',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME>  -1c -CUST <CUST> -1c- -ace_args ace -sc -t lintra/pgcbunit -ace_args-",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_lintra" => "Success"},
    },

    {
        'NAME'          => 'Run_lintra_ClockDomainController',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME>  -1c -CUST <CUST> -1c- -ace_args ace -sc -t lintra/ClockDomainController -ace_args-",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_lintra" => "Success"},
    },
    
    {
        'NAME'          => 'Compile_sglint',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME> -1c -CUST <CUST> -1c- -s all +s sglint_build -sglint_build \'-ASSIGN -mc=lintra_tooltb\'",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_vcs" => "Success"},
    },
    {
        'NAME'          => 'Run_sglint_pgcbunit',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME> -1c -CUST <CUST> -1c- -s all +s sglint_test -sglint_test \'-t spyglass_lint/pgcbunit\'",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_sglint" => "Success"},
    },


    {
        'NAME'          => 'Run_sglint_ClockDomainController',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME> -1c -CUST <CUST> -1c- -s all +s sglint_test -sglint_test \'-t spyglass_lint/ClockDomainController\'",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_sglint" => "Success"},
    },

    {
        'NAME'          => 'Compile_sgcdc',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME> -1c -CUST <CUST> -1c- -s all +s sgcdc_build -sgcdc_build \'-ASSIGN -mc=cdc_pgcb_collection -vlog_opts \'+define+SVA_OFF+functional\'\'",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_vcs" => "Success", "Run_sglint_pgcbunit" => "Success", "Run_sglint_ClockDomainController" => "Success"},
    },
    {
        'NAME'          => 'Run_sgcdc_pgcbunit',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME> -1c -CUST <CUST> -1c- -s all +s sgcdc_test -sgcdc_test \'-t spyglass_cdc/pgcbunit\'",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_sgcdc" => "Success"},
    },


    {
        'NAME'          => 'Run_sgcdc_ClockDomainController',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME> -1c -CUST <CUST> -1c- -s all +s sgcdc_test -sgcdc_test \'-t spyglass_cdc/ClockDomainController\'",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_sgcdc" => "Success"},
    },



    {
        'NAME'          => 'Compile_CDC',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME>  -1c -CUST <CUST> -1c-  -ace_args ace -ccoz -ASSIGN -mc=cdc_pgcb_collection -ace_args-",
        'GATING'        => 1,
    },

    {
        'NAME'          => 'Run_CDC_pgcbunit',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME>  -1c -CUST <CUST> -1c-  -ace_args ace -xz -t cdc/pgcbunit -nocleanup -nocpmf -ace_args-",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_CDC" => "Success"},
    },

    {
        'NAME'          => 'Run_CDC_ClockDomainController',
        'CMDS'          => "simbuild -dut <DUT> -logprefix <JOB_NAME>  -1c -CUST <CUST> -1c-  -ace_args ace -xz -t cdc/ClockDomainController -nocleanup -nocpmf -ace_args-",
        'GATING'        => 1,
        'DEPENDENCY'    => {"Compile_CDC" => "Success"},
    },

    {
        'NAME'          => "effm",   
        'CMDS'          => "simbuild -dut <DUT> -1c -CUST <CUST> -1c- -logprefix <JOB_NAME> -ace_args ace -emul -compiler_tag=emu -hdl_compiler=effm -ace_args- -nf ",
        'GATING'        => 1,
    },

    {
        'NAME'          => "febe_ip_turnin",
        'CMD_TYPE'      => 'febe',
        'CMDS'          => "-gkturnin -flow ip_turnin -dut <DUT> -1c -CUST <CUST> -1c- -sched nbfeeder -parallel -no_local -s lintra_build -s array_dft_audit -s visa_audit ",
        'GATING'        => 1,
        'DEPENDENCY'    => { "Compile_lintra" => "Success" },
        'NBFLOW'        => 1,
        'NBFLOW_SUBTASK_PREFIX' => 'febe_gkturnin',
        'USE_ALT_FLOWBEE' => 2,
    },

    {
        'NAME'          => "febe_ip_release",
        'CMD_TYPE'      => 'febe',
        'CMDS'          => "-gkturnin -flow ip_release -dut <DUT> -1c -CUST <CUST> -1c- -sched nbfeeder -parallel -no_local -s all +s .lintra_elab +s .build_blocksinfo +s .dc +s .fv",
        'GATING'        => 1,
        'DEPENDENCY'    => { "Compile_lintra" => "Success" },
        'NBFLOW'        => 1,
        'NBFLOW_SUBTASK_PREFIX' => 'febe_gkturnin',
        'USE_ALT_FLOWBEE' => 2,
    },
];

%flow_cfg = (
    filter => {## quanyuan:: not used at the moment
        'pgcb_collection@p1273' => {
            run_tools => [
                "Compile_vcs",
                "Compile_verdi",        
                "Compile_lintra",
                "Run_lintra_pgcbunit",
                "Run_lintra_ClockDomainController",
                #"Gk_level0", 
                "Compile_CDC",
               # "Run_utb_pgcbunit", ## ssing18: Removing it for now due to GK issues
               ## "Run_utb_ClockDomainController", ## ssing18: Removing it for now due to GK issues 
                #"Run_CDC_pgcbunit",
                #"Run_CDC_ClockDomainController",
                #"effm", 
                #"febe_ip_turnin",
            ],
        },
        'pgcb_collection@p1274' => {
            run_tools => [
                "Compile_vcs",
                #"Compile_verdi",                       #ylai4: for filter purpose, no need to run so many checks on p1274
                #"Compile_lintra",
                #"Run_lintra_pgcbunit",
                #"Run_lintra_ClockDomainController",
                #"Gk_level0", 
                #"Compile_CDC",
                #"Run_CDC_pgcbunit",
                #"Run_CDC_ClockDomainController",
                #"febe_ip_turnin",
            ],
        },
    },
    turnin => {
        'pgcb_collection@p1273' => {
            run_tools => [
                "Compile_vcs",
                "Compile_verdi",        
                "Compile_lintra",
                "Run_lintra_pgcbunit",
                "Run_lintra_ClockDomainController",
                #"Gk_level0",                           #ylai4: PGCB doesn't have verif ready yet hence disablinng for now
                
                #Spyglass Lint stages
                "Compile_sglint",
                "Run_sglint_pgcbunit",
                "Run_sglint_ClockDomainController",
                
                #Spyglass CDC Stages
                "Compile_sgcdc",
                "Run_sgcdc_pgcbunit",
                "Run_sgcdc_ClockDomainController",
                
                "Compile_CDC",
                "Run_CDC_pgcbunit",
                "Run_CDC_ClockDomainController",
                "effm", 
                "febe_ip_turnin",
               # "Run_utb_pgcbunit",  ## ssing18: Removing it for now due to GK issues
               ## "Run_utb_ClockDomainController", # ssing18: Removing it for now due to GK issues 
            ],
        },
        'pgcb_collection@p1274' => {
            run_tools => [
                "Compile_vcs",                          #ylai4: despite VCS is process independent, having it to run to ensure gating check on RTL quality
                #"Compile_verdi",                       #ylai4: Verdi is process independent so no need to run again on p1274
                "Compile_lintra",                       #ylai4: despite Lintra is process independent, compilation is required to enable febe lintra-flg later
                #"Run_lintra_pgcbunit",                 #ylai4: Lintra is process independent so no need to run again on p1274
                #"Run_lintra_ClockDomainController",    #ylai4: Lintra is process independent so no need to run again on p1274
                #"Gk_level0",                           #ylai4: PGCB doesn't have verif ready yet hence disablinng for now
                
                #Spyglass Lint stages
                "Compile_sglint",
                "Run_sglint_pgcbunit",
                "Run_sglint_ClockDomainController",
                
                #Spyglass CDC Stages
                "Compile_sgcdc",
                "Run_sgcdc_pgcbunit",
                "Run_sgcdc_ClockDomainController",

                "Compile_CDC",
                "Run_CDC_pgcbunit",
                "Run_CDC_ClockDomainController",
                #"effm",                                #ylai4: EFFM is process independent so no need to run again on p1274
                "febe_ip_turnin",
                "Run_utb_pgcbunit",
                "Run_utb_ClockDomainController", 
            ],
        },
    },
    mock => {
        'pgcb_collection@p1273' => {
            run_tools => [
                "Compile_vcs",
                "Compile_verdi",        
                "Compile_lintra",
                "Run_lintra_pgcbunit",
                "Run_lintra_ClockDomainController",
                #"Gk_level0",                           #ylai4: PGCB doesn't have verif ready yet hence disablinng for now
                
                #Spyglass Lint stages
                "Compile_sglint",
                "Run_sglint_pgcbunit",
                "Run_sglint_ClockDomainController",
                
                #Spyglass CDC Stages
                "Compile_sgcdc",
                "Run_sgcdc_pgcbunit",
                "Run_sgcdc_ClockDomainController",


                "Compile_CDC",
                "Run_CDC_pgcbunit",
                "Run_CDC_ClockDomainController",
                "effm", 
                "febe_ip_turnin",
               # "Run_utb_pgcbunit", ## ssing18: Removing it for now due to GK issues
               # "Run_utb_ClockDomainController", #ssing18: Removing it for now due to GK issues
            ],
        },
        'pgcb_collection@p1274' => {
            run_tools => [
                "Compile_vcs",                          #ylai4: despite VCS is process independent, having it to run to ensure gating check on RTL quality
                #"Compile_verdi",                       #ylai4: Verdi is process independent so no need to run again on p1274
                "Compile_lintra",                       #ylai4: despite Lintra is process independent, compilation is required to enable febe lintra-flg later
                #"Run_lintra_pgcbunit",                 #ylai4: Lintra is process independent so no need to run again on p1274
                #"Run_lintra_ClockDomainController",    #ylai4: Lintra is process independent so no need to run again on p1274
                #"Gk_level0",                           #ylai4: PGCB doesn't have verif ready yet hence disablinng for now
                
                #Spyglass Lint stages
                "Compile_sglint",
                "Run_sglint_pgcbunit",
                "Run_sglint_ClockDomainController",
                
                #Spyglass CDC Stages
                "Compile_sgcdc",
                "Run_sgcdc_pgcbunit",
                "Run_sgcdc_ClockDomainController",

                "Compile_CDC",
                "Run_CDC_pgcbunit",
                "Run_CDC_ClockDomainController",
                #"effm",                                #ylai4: EFFM is process independent so no need to run again on p1274
                "febe_ip_turnin",
                "Run_utb_pgcbunit",
                "Run_utb_ClockDomainController",  
            ], 
        },
    },
    release => {
        'pgcb_collection@p1273' => {
            run_tools => [
                "Compile_vcs",
                "Compile_verdi",        
                "Compile_lintra",
                "Run_lintra_pgcbunit",
                "Run_lintra_ClockDomainController",
                #"Gk_level0",                           #ylai4: PGCB doesn't have verif ready yet hence disablinng for now

                #Spyglass Lint stages
                "Compile_sglint",
                "Run_sglint_pgcbunit",
                "Run_sglint_ClockDomainController",
                
                #Spyglass CDC Stages
                "Compile_sgcdc",
                "Run_sgcdc_pgcbunit",
                "Run_sgcdc_ClockDomainController",

                "Compile_CDC",
                "Run_CDC_pgcbunit",
                "Run_CDC_ClockDomainController",
                "effm", 
                "febe_ip_release",
                #"Run_utb_pgcbunit", ## ssing18: Removing it for now due to GK issues
               # "Run_utb_ClockDomainController", #ssing18: Removing it for now due to GK issues
            ],
        },
        'pgcb_collection@p1274' => {
            run_tools => [
                "Compile_vcs",                          #ylai4: despite VCS is process independent, having it to run to ensure gating check on RTL quality
                #"Compile_verdi",                       #ylai4: Verdi is process independent so no need to run again on p1274
                "Compile_lintra",                       #ylai4: despite Lintra is process independent, compilation is required to enable febe lintra-flg later
                #"Run_lintra_pgcbunit",                 #ylai4: Lintra is process independent so no need to run again on p1274
                #"Run_lintra_ClockDomainController",    #ylai4: Lintra is process independent so no need to run again on p1274
                #"Gk_level0",                           #ylai4: PGCB doesn't have verif ready yet hence disablinng for now
                
                #Spyglass Lint stages
                "Compile_sglint",
                "Run_sglint_pgcbunit",
                "Run_sglint_ClockDomainController",
                
                #Spyglass CDC Stages
                "Compile_sgcdc",
                "Run_sgcdc_pgcbunit",
                "Run_sgcdc_ClockDomainController",

                "Compile_CDC",
                "Run_CDC_pgcbunit",
                "Run_CDC_ClockDomainController",
                #"effm",                                #ylai4: EFFM is process independent so no need to run again on p1274
                "febe_ip_release",
                "Run_utb_pgcbunit",
                "Run_utb_ClockDomainController", 
            ],
        },
    },
);

###########################################################
## %resources
## specify the netbatch parameters.
############################################################
%resource = (
    fm => {
        pgcb_collection => {
            default => {
                nb_qslot => "/EIG/PMC/RTL/pmc_gk",
                nb_class => "SLES11&&2G",
                nb_pool => "fm_critical",
            },
            mock =>{
                nb_qslot => "/EIG/PMC/RTL/pmc",
                nb_class => "SLES11&&2G",
                nb_pool => "fm_normal",
            },
        },
    },
);

my $final_flow = \%flow_cfg;
## MOCK GUI, unremark following section to enable it
if($ENV{GK_EVENTTYPE} eq "mock" && exists $ENV{GK_MOCK_GUI}){
        print "-I- Showing gkUtils mock GUI\n";
        %new_flow_cfg = %{mock_gui2::gkutils_mock_GUI(\%flow_cfg,\%Models)};
        $final_flow = \%new_flow_cfg;
}

@{$Models{general_cmds}} = GK_Utils::regenerateGeneralCmd($final_flow,\%Models,\%resource,$smart_turnin);
