#####################################################################
# Please do not modify any code in this section
#####################################################################
package DutConfig;

use Exporter ();
@ISA    = qw(Exporter);
@EXPORT = qw(%DutConfig);

use strict;
use vars qw(%DutConfig $rtl_4value $rtl_syn $simbuild_mode $useVerona $rtl_emul $rtl_mpp $rtl_cov);

use lib "$ENV{RTL_PROJ_BIN}/perllib";
use ToolConfig;

# require "$ENV{MODEL_ROOT}/cfg/PcodeToolData.pm";

# Set default values for paths
#
my $MODEL_ROOT = exists $ENV{MODEL_ROOT} ? $ENV{MODEL_ROOT} : "";
#$ENV{CORE_CTE_SRC}   = ($MODEL_ROOT ne "") ? $MODEL_ROOT . "/cte/core": "cte/core";
#$ENV{UNCORE_CTE_SRC} = ($MODEL_ROOT ne "") ? $MODEL_ROOT . "/cte/uncore": "cte/uncore";
#$ENV{CTE_SRC}        = ($MODEL_ROOT ne "") ? $MODEL_ROOT . "/cte": "cte";
#$ENV{USIM_SRC}       = ($MODEL_ROOT ne "") ? $MODEL_ROOT . "/ucodetools/src/microsim": "ucodetools/src/microsim";

#$ENV{CENTRAL_USIM_SRC} = $ENV{CENTRAL_ROOT} . "/ucodetools/src/microsim" if (defined $ENV{CENTRAL_ROOT});


#####################################################################
# BuildCfg hash stores the configuration information
# You can modify values as needed
#
# Note that quotes in hash entries need to be escaped with '\'
#
# The compulsory %DutConfig hash entr(y|ies) is|are as follow(s):
# topFub      : This is the module name of the top level hierarchy
#
# The optional %DutConfig hash entries are as follows:
# target      : This is the name of the target RTL simulation
#               model to build. If not defined, the target
#               will be the same as the topFub
# rtlBuildArgs: Default RTLBuild switches to use
# zinCtrl     : Full path to 0-In control file. If not defined, will
#               default to $MODEL_ROOT/toolopts/0in.ctrl
# topCTE      : This is the corresponding top CTE name. If not
#               defined, the CTE build stage will not run
# cteBuildArgs: Default CTE build switches to use
#
# Please see template.cfg for updates to hash entries
#
#
#####################################################################
$useVerona = 0 if(!defined($useVerona));

#require "$MODEL_ROOT/cfg/uncore_te.cfg";
#require "$MODEL_ROOT/cfg/core.cfg";
##### $rtl_4value = 1; # QPI does not yet support 4-value sims
##### $DutConfig::rtl_4value = $rtl_4value;

$DutConfig{topFub} = "sys";

$ENV{DONT_FORCE_GENBUILD}=1;
## TODO Remove when Netlist bug fixed
## nhmpkg level contains tri that currently not supported  
## in Nike netlister

$ENV{CLUSTER_NAME} = 'globalclk' unless exists $ENV{CLUSTER_NAME};
$ENV{CLUSTER_TARGET} = "$ENV{CLUSTER_NAME}";
$ENV{CLUSTER_TARGET} = "part_$ENV{CLUSTER_NAME}" if $rtl_syn;
$ENV{CLUSTER_TARGET} = "emul_$ENV{CLUSTER_NAME}" if $rtl_emul;
$ENV{CLUSTER_TARGET} = "mpp_$ENV{CLUSTER_NAME}" if $rtl_mpp;
$DutConfig{target} = $ENV{CLUSTER_TARGET};
$DutConfig{topCTE} = $ENV{CLUSTER_TARGET};
$DutConfig{rtl_mpp} = $rtl_mpp;

#$DutConfig{NBCLASS}{i386_linux26} = "SLES10_EM64T_32G";
#$DutConfig{NBCLASS}{'x86-64_linux26'} = "SLES10_EM64T_32G";

## Same as RTLMODE in NHM - to make SNB SETUP_ON_64_BITS variable work as -mode 64 in NHM
# TNL - make 64 bit the default uncore mode
#$ENV{SETUP_ON_64BITS} = 1 if $simbuild_mode;
$ENV{SETUP_ON_64BITS} = 1;

# determine type of build (32/64)
my $sys = `/usr/intel/bin/sysname -afs`; 
chomp($sys); 
$sys = "i386_linux26" if ($sys =~ /x86-64/ and ((!exists($ENV{SETUP_ON_64BITS})) or $ENV{SETUP_ON_64BITS} != 1));

##### $DutConfig{skipStages} = ["ucmake", "creg", "ksn" ]; # creg for backwards compatability with old flows
##### push(@{$DutConfig{skipStages}}, ("sotools", "so_nlapp"));
##### push(@{$DutConfig{skipStages}}, ("cama","vericom")) if $rtl_mpp;
##### push(@{$DutConfig{skipStages}}, ("fast_pcode_constants"));

##### $DutConfig{simBuildArgs}  = (($rtl_mpp)? "-rsrcTag mpp_$ENV{CLUSTER_NAME}" : "-rsrcTag $ENV{CLUSTER_NAME}");

##### $DutConfig{rtlBuildArgs}  = " -uncorefull ";
##### $DutConfig{rtlBuildArgs} .= " -power_on_vcs" if $rtl_mpp;
##### $DutConfig{rtlBuildArgs} .= " -vcs -no_cache_model";
# SKX Uncore1: removing qpi bfm and sbo_subst for first build and adding freq. cross
#$DutConfig{rtlBuildArgs} .= " -vcs '-top $DutConfig{topFub}+nhm_inst+sva_checkers+qpi_bfm_pin_intf_dummy+qpiph_dummy+core_subst+sbo_subst+btrs_subst+fivrcoreptr_subst'"; # Needed for vcs 2009.12
#$DutConfig{rtlBuildArgs} .= " -vcs '-top $DutConfig{topFub}+nhm_inst+sva_checkers+core_subst+btrs_subst+fivrcoreptr_subst+qpi_bfm_pin_intf_dummy+ktiph_dummy+fivr_state_dummy+safeuseanalogarray_dummy+dummy_fivr_fcm'"; # Needed for vcs 2009.12
##### $DutConfig{rtlBuildArgs} .= " -vcs '-top $DutConfig{topFub}+nhm_inst+sva_checkers+core_subst+btrs_subst+fivrcoreptr_subst+qpi_bfm_pin_intf_dummy+ktiph_dummy+fivr_state_dummy+dummy_fivr_fcm+safuseanalogarray_dummy+pio_dummy'"; # Needed for vcs 2009.12
##### $DutConfig{rtlBuildArgs} .= " -vcs ${MODEL_ROOT}/src/uncore/common/message/jkt_msg_freq_cross_1_domain.vs";
# SKX end add

# TNL - Remove - causing dft xmls to not be found
#$DutConfig{rtlBuildArgs} .= " -1pkg -4core -dft iscan -dft lcp -dft so -dft clksa -dft noa";
##### $DutConfig{rtlBuildArgs} .= " -1pkg";
##### $DutConfig{rtlBuildArgs} .= " -4value" if $rtl_4value;

##### my $enable_xprop = 0;
##### if ($enable_xprop) {
#####         $DutConfig{rtlBuildArgs} .= " -vcs \"+define+VCS_NATIVE_XPROP\" -vericom \"+define+VCS_NATIVE_XPROP\" " if (!$rtl_syn);
#####         $DutConfig{rtlBuildArgs} .= " -vcs \"-xprop=$ENV{MODEL_ROOT}/cfg/uncoremini_cte_vcs_native_xprop.cfg\" " if (!$rtl_syn);
#####         $DutConfig{rtlBuildArgs} .= " -vcs \"+define+VCS_NATIVE_XPROP_UNI_INFER\" -vericom \"+define+VCS_NATIVE_XPROP_UNI_INFER\" " if (!$rtl_syn);
#####         $DutConfig{rtlBuildArgs} .= " -vcs \"-xprop=unifiedInference\" " if (!$rtl_syn);
##### } else {
#####         $DutConfig{rtlBuildArgs} .= " -vcs \"+define+VAL4_OPTIMIZED\" -vericom \"+define+VAL4_OPTIMIZED\" " if (!$rtl_syn);
##### }
##### $DutConfig{rtlBuildArgs} .= " -vcs +optconfigfile+pe_uncore_cte_config.dat";
##### $DutConfig{rtlBuildArgs} .= " -vcs \"+cli+2 -P $MODEL_ROOT/cfg/uncore_force.tab\"";
##### $DutConfig{rtlBuildArgs} .= " -vcs +define+GSR_SIMIX -vcs -nosimix";
##### 
##### # MDP Workaround until -y and .f directives split in env
##### $DutConfig{rtlBuildArgs} .= " -chef_light '+incdir+$MODEL_ROOT/src/uncore/uniphy' ";
##### $DutConfig{rtlBuildArgs} .= " -chef '+incdir+$MODEL_ROOT/src/uncore/uniphy' ";
##### $DutConfig{rtlBuildArgs} .= " -vcs_common '+incdir+$MODEL_ROOT/src/uncore/uniphy' ";
##### $DutConfig{rtlBuildArgs} .= " -vericom_common '+incdir+$MODEL_ROOT/src/uncore/uniphy' ";
##### $DutConfig{rtlBuildArgs} .= " -genhier '-lira_args \''-y $ENV{MODEL_ROOT}/src/uncore/uniphy\'\'' ";
##### $DutConfig{rtlBuildArgs} .= " -genhier '-lira_args +incdir+$ENV{MODEL_ROOT}/src/uncore/uniphy'";
##### $DutConfig{rtlBuildArgs} .= " -lint '-liraargs +incdir+$ENV{MODEL_ROOT}/src/uncore/uniphy'";
##### $DutConfig{rtlBuildArgs} .= " -lint '-liraargs \'-y $ENV{MODEL_ROOT}/src/uncore/uniphy\''";
##### $DutConfig{rtlBuildArgs} .= " -mapped_nlapp '-lira_args \''-y $ENV{MODEL_ROOT}/src/uncore/uniphy\'\'' ";
##### $DutConfig{rtlBuildArgs} .= " -mapped_nlapp '-lira_args +incdir+$ENV{MODEL_ROOT}/src/uncore/uniphy'";
##### #$DutConfig{rtlBuildArgs} .= " -final_create_shell \"-liraargs '-y $ENV{MODEL_ROOT}/src/uncore/uniphy +incdir+$ENV{MODEL_ROOT}/src/uncore/uniphy -y $ENV{MODEL_ROOT}/src/uncore/uniphy_bdx +incdir+$ENV{MODEL_ROOT}/src/uncore/uniphy_bdx' \" ";
##### $DutConfig{rtlBuildArgs} .= " -final_create_shell \"-liraargs '+incdir+$ENV{MODEL_ROOT}/src/uncore/uniphy +incdir+$ENV{MODEL_ROOT}/src/uncore/uniphy_bdx -y $ENV{MODEL_ROOT}/src/uncore/uniphy_bdx ' \" ";
##### #$DutConfig{rtlBuildArgs} .= " -final_genhier '-lira_args \''-y $ENV{MODEL_ROOT}/src/uncore/uniphy\'\'' ";
##### $DutConfig{rtlBuildArgs} .= " -final_genhier '-lira_args +incdir+$ENV{MODEL_ROOT}/src/uncore/uniphy'";
##### #$DutConfig{rtlBuildArgs} .= " -quick_syn '-lira_args +incdir+$ENV{MODEL_ROOT}/src/uncore/uniphy'";
##### #$DutConfig{rtlBuildArgs} .= " -quick_syn '+incdir+$MODEL_ROOT/src/uncore/uniphy' ";
##### 
##### #added for ktitile
##### $DutConfig{rtlBuildArgs}  .= ' -vcs +define+OC_FASTMODE';
##### $DutConfig{rtlBuildArgs}  .= ' -vericom +define+OC_FASTMODE';
##### 
##### $DutConfig{rtlBuildArgs} .= " -vcs -lmsvtb";
##### $DutConfig{rtlBuildArgs} .= " -vcs -lsla";
##### $DutConfig{rtlBuildArgs} .= " -vcs -luvm";
##### $DutConfig{rtlBuildArgs} .= " -vcs -lsig_cb";
##### $DutConfig{rtlBuildArgs} .= " -vcs -luvmtb";
##### $DutConfig{rtlBuildArgs} .= " -vcs +define+UVM_TB";
##### $DutConfig{rtlBuildArgs} .= " -vcs +define+UVM";
##### $DutConfig{rtlBuildArgs} .= " -vcs +optconfigfile+pe_hamc_cte_config.dat";
##### 
##### my $UVM_PATH            = &ToolConfig_get_tool_path('uvm');
##### my $SAOLA_PATH          = &ToolConfig_get_tool_path('saola');
##### my $APO_FRMWRK_PATH     = &ToolConfig_get_tool_path('apo_frmwrk');
##### my $APO_BFM_PATH        = &ToolConfig_get_tool_path('apo_bfm');
##### my $YAM_UVM_PATH        = &ToolConfig_get_tool_path('yam') ;
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$YAM_UVM_PATH/include";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$YAM_UVM_PATH/include";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$UVM_PATH/src";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$SAOLA_PATH/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$APO_FRMWRK_PATH/apo_utils/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$APO_FRMWRK_PATH/apo_check_base/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$APO_FRMWRK_PATH/apo_dimm_mon/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$APO_FRMWRK_PATH/apo_agent_base/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$APO_FRMWRK_PATH/apo_config/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$APO_BFM_PATH/apo_check_base_iot/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$APO_BFM_PATH/apo_iot_sat_in_agt/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$APO_BFM_PATH/apo_iot_hub_out_agt/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_tb/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_bgf_mon/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_chk_base/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_mc_ac";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_mc_ac/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vcs +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_mc_ac/xmc_mc_ac_iot/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$UVM_PATH/src";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$SAOLA_PATH/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$APO_FRMWRK_PATH/apo_utils/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$APO_FRMWRK_PATH/apo_check_base/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$APO_FRMWRK_PATH/apo_dimm_mon/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$APO_FRMWRK_PATH/apo_agent_base/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$APO_FRMWRK_PATH/apo_config/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$APO_BFM_PATH/apo_check_base_iot/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$APO_BFM_PATH/apo_iot_sat_in_agt/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$APO_BFM_PATH/apo_iot_hub_out_agt/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_tb/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_bgf_mon/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_chk_base/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_mc_ac";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_mc_ac/verilog";
##### $DutConfig{rtlBuildArgs} .= " -vericom +incdir+$ENV{MODEL_ROOT}/cte/uncore/xmc_common/xmc_mc_ac/xmc_mc_ac_iot/verilog";
##### 
##### #$DutConfig{rtlBuildArgs}  .= ' +s msv_gen';
##### #$DutConfig{rtlBuildArgs}  .= ' +s msv_stub';
##### #$DutConfig{rtlBuildArgs}  .= ' -vcs -lmsvtb';
##### $DutConfig{rtlBuildArgs}  .= " -vcs \"+cli+2 -P $MODEL_ROOT/cfg/qpi_force.tab\"";
##### $DutConfig{rtlBuildArgs}  .= " -vcs +optconfigfile+pe_qpi_cte_config.dat";
##### #added for mc
##### $DutConfig{rtlBuildArgs} .= " -dft ddr_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft mc_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -genhier \"-D GLOBAL_FUNCS\"";
##### $DutConfig{rtlBuildArgs} .= " -part_genhier \"-D GLOBAL_FUNCS\"";
##### $DutConfig{rtlBuildArgs} .= " -unmapped_nlapp \"-D GLOBAL_FUNCS\"";
##### $DutConfig{rtlBuildArgs} .= " -unmapped_create_shell \"-D GLOBAL_FUNCS\"";
##### $DutConfig{rtlBuildArgs} .= " -mapped_nlapp \"-D GLOBAL_FUNCS\"";
##### $DutConfig{rtlBuildArgs} .= " -final_create_shell \"-D GLOBAL_FUNCS\"";
##### $DutConfig{rtlBuildArgs} .= " -final_genhier \"-D GLOBAL_FUNCS\"";
##### #$DutConfig{rtlBuildArgs} .= " -dft lcp";
##### $DutConfig{rtlBuildArgs} .= " -1pkg -8core";
##### #JRV$DutConfig{rtlBuildArgs} .= " -dft so -dft iscan -dft lcp";
##### $DutConfig{legacyMppXmlFile} = "uncore_cte_mpp_spec.xml";
##### #FIXME:vgannu: make upf_utils stage read empty files temporarily until upf files are ready
##### $DutConfig{rtlBuildArgs} .= ' -upf_utils "-upf_top src/common/mpp/top_empty.upf -mpp_additional src/common/mpp/mpp_spec.additional.empty.xml"';
##### 
##### # START SECTION - ASHISH TO REVIEW
##### $DutConfig{rtlBuildArgs} .= " -dftovr";
##### $DutConfig{rtlBuildArgs} .= " -dft llc_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft cbo_lcp.xml";
##### ####$DutConfig{rtlBuildArgs} .= " -dft sbo_lcp.xml";
##### ##$DutConfig{rtlBuildArgs} .= " -dft sbo_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft cbo_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft cms_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft cms_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft cbo_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft tgr_sbo_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft rsn_urclk_glbdrv.xml"; 
##### $DutConfig{rtlBuildArgs} .= " -dft rsn_tclk_glbdrv.xml"; 
##### $DutConfig{rtlBuildArgs} .= " -dft rsn_rclk_glbdrv.xml"; 
##### $DutConfig{rtlBuildArgs} .= " -dft m3kti_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft r2pcie_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft cms_lcp.xml";
##### 
##### ## do not change the order of following pcu dft include, they will be reversed by rtltool
##### $DutConfig{rtlBuildArgs} .= " -dft pcu_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft pcu_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft pcu_scub_so.xml";
##### 
##### $DutConfig{rtlBuildArgs} .= " -dft kti_iscan_utc.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft kti_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft kti_lcp.xml"; 
##### $DutConfig{rtlBuildArgs} .= " -dft qio_lcp.xml"; 
##### $DutConfig{rtlBuildArgs} .= " -dft kti_scub_so.xml"; 
##### $DutConfig{rtlBuildArgs} .= " -dft r3qpi_scub_so.xml"; 
##### $DutConfig{rtlBuildArgs} .= " -dft r3csi_iscan.xml"; 
##### $DutConfig{rtlBuildArgs} .= " -dft r3qpi_r2upci_common_iscan.xml";
##### #$DutConfig{rtlBuildArgs} .= " -s dep";
##### #$DutConfig{rtlBuildArgs} .= " +s sotools +s mkch";
##### # END SECTION - ASHISH TO REVIEW
##### #from mc_cte.cfg
##### $DutConfig{rtlBuildArgs} .= " -dftovr";
##### #$DutConfig{rtlBuildArgs} .= " -dft mc_qugclk_glbdrv.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft mc_qclk_glbdrv.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft mc_dclk_glbdrv.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft gioddr2c_gqclk_glbdrv.xml";
##### 
##### # Added this line to make lint run with the correct defines.
##### $DutConfig{rtlBuildArgs} .= " -lint \"-liraargs +define+UNCORE_CTE_CLUSTER\"";
##### #$DutConfig{rtlBuildArgs} .= " +s lint -lint -nofcm -lint -show_waived" if !$rtl_syn;
##### #FIXME: disable lint until it can be safely re-enabled
##### #$DutConfig{rtlBuildArgs} .= " -lint \"-show_waived -cluster=$MODEL_ROOT/cfg/uncoremini_cte_lintra.cfg -liraargs +define+UNCORE_CTE_CLUSTER\"" if !$rtl_syn;
##### $DutConfig{rtlBuildArgs} .= " -lint \"-show_waived\"";
##### 
##### #JRV$DutConfig{rtlBuildArgs} .= " +s hier_info +s genhier";
##### #$DutConfig{rtlBuildArgs} .= " -s ddr_control -s cod -s predc -s plgen";
##### $DutConfig{rtlBuildArgs} .= " -s ddr_control  -s plgen";
##### 
##### #from iio_cte
##### $DutConfig{rtlBuildArgs}  .= ' -vcs +define+CRUCIBLE_IIOTB_CONNECT';
##### $DutConfig{rtlBuildArgs}  .= ' -vericom +define+CRUCIBLE_IIOTB_CONNECT';
##### $DutConfig{rtlBuildArgs}  .= " -vcs \"+cli+2 -P $MODEL_ROOT/cfg/iio_force.tab\"";
##### 
##### #$DutConfig{rtlBuildArgs} .= " -dft ha_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft m2mem_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft mc_iscan.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft ha_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft pio_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft qio_lcp.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft mc_q_lcp.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft mc_d_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft m2mem_lcp.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft ha_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft mc_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft ddr_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft ddr3ch_lcp.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft rsn_scub_so.xml"; # required for cbpmas_ringstop
##### $DutConfig{rtlBuildArgs} .= " -dft r3qpi_scub_so.xml";
##### # IIO DFT
##### $DutConfig{rtlBuildArgs} .= " -dft r2pcie_iscan.xml";
##### 
##### $DutConfig{rtlBuildArgs} .= " -dft ubox_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iiopstack_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iio_reset_glbdrv.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iio_lsclk_glbdrv.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iio_lfugclk_glbdrv.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iio_lfclk_glbdrv.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iio_clkrpt_glbdrv.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iio_clken_glbdrv.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft iio_lf_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iiocs_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iiops_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft ncu_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iiopstack_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iiocstack_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft iims1stack_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft rsn_urclk_glbdrv.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft rsn_tclk_glbdrv.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft rsn_rclk_glbdrv.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft rsn_lcp.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft ha_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft pcu_iscan.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft rsn_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft uboxs_scub_so.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft r2pcie_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft m2pcie_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft mdfx_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft mdfx_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft mdfx_lcp.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft csi_csclk_glbdrv.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft csi_cfugclk_glbdrv.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft csi_cfclk_glbdrv.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft csi_iscan.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft csi_cs_lcp.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft csi_cf_lcp.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft qpi_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft kti_lcp.xml";
##### #no longer need now that we have kti?
##### #$DutConfig{rtlBuildArgs} .= " -dft qpi_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft r3csi_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft r3qpi_r2upci_common_iscan.xml";
##### # CBO DFT
##### $DutConfig{rtlBuildArgs} .= " -dft llc_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft cbo_lcp.xml";
##### ####$DutConfig{rtlBuildArgs} .= " -dft sbo_lcp.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft cms_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft cbo_scub_so.xml";
##### ##$DutConfig{rtlBuildArgs} .= " -dft sbo_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft cbo_iscan.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft tgr_sbo_iscan.xml";
##### # QPI DFT - same as IIO
##### $DutConfig{rtlBuildArgs} .= " -dft r3qpi_scub_so.xml";
##### #$DutConfig{rtlBuildArgs} .= " -dft r2pcie_scub_so.xml";
##### $DutConfig{rtlBuildArgs} .= " -dft m2pcie_scub_so.xml";
##### 
##### ##enable DPI trackers for simulation and emulation
##### #$DutConfig{rtlBuildArgs} .= " -dpi_pcu_uc_tracker" if !$rtl_syn;
##### #$DutConfig{rtlBuildArgs} .= " -dpi_ptracker" if !$rtl_syn;
##### #$DutConfig{rtlBuildArgs} .= " -dpi_pcu_tsc_tracker" if !$rtl_syn;
##### #$DutConfig{rtlBuildArgs} .= " -dpi_pcu_pma_tracker" if !$rtl_syn;
##### 
##### # tyc add for DPI modules for iio sw tracker
##### $DutConfig{rtlBuildArgs} .= " -dpi_iio_sw_tracker" if !$rtl_syn;
##### 
##### # DPI modules   added to get dpi_headers's with Jems
##### $DutConfig{rtlBuildArgs} .= " -dpi_cha_pipe_mon" if !$rtl_syn;
##### $DutConfig{rtlBuildArgs} .= " -dpi_cha_cingr_mon" if !$rtl_syn;
##### $DutConfig{rtlBuildArgs} .= " -dpi_cha_stbf_tracker" if !$rtl_syn;
##### $DutConfig{rtlBuildArgs} .= " -dpi_pcu_pma_tracker" if !$rtl_syn;
##### $DutConfig{rtlBuildArgs} .= " -dpi_pcu_spd_tracker" if !$rtl_syn;
##### $DutConfig{rtlBuildArgs} .= " -dpi_cha_corebo_tracker" if !$rtl_syn;
##### $DutConfig{rtlBuildArgs} .= " -dpi_cha_hapipe_tracker" if !$rtl_syn;
##### 
##### # add INST_ON to chef and vcs if we're in one of the simulation builds
##### $DutConfig{rtlBuildArgs}  .= ' -chef_light " +define+INST_ON " -chef " +define+INST_ON " -vcs " +define+INST_ON " ' if !$rtl_syn;
##### $DutConfig{rtlBuildArgs}  .= ' +s visa -visa " -define INST_ON " ' if !$rtl_syn;
##### 
##### 
##### 
##### #PCU 
##### $DutConfig{rtlBuildArgs} .= " -dft pcu_scub_so.xml";
##### 
##### #$DutConfig{rtlBuildArgs}  .= ' -vcs -lmsvtb';
##### 
##### # uncore_onlyL
##### 


##### $DutConfig{topNetlist} = "sys";
##### $DutConfig{topPHX} = "sys";


################### CTE Build Args #################
# pick up stages from clusters
# cbo and pcu use ctebuild.smap

##### #uncore milestone: remove since pcu_cte is not needed
##### $DutConfig{cteBuildArgs} = "+s cbo_cte +s pcu_cte";
##### #$DutConfig{cteBuildArgs} = "+s cbo_cte";

##### my @stages;
##### # all clusters use an _stages file
##### #uncore milestone: only include clusters we want for now
##### foreach my $cluster ("cbo_cte", "mc_cte", "iio_cte", "kti_cte", "pcu_cte", "opi_model", "uncoremini_cte", $ENV{CLUSTER_NAME}) {
#####   next unless -e "$ENV{MODEL_ROOT}/cfg/${cluster}_stages.cfg";
#####   open(STAGES, "$ENV{MODEL_ROOT}/cfg/${cluster}_stages.cfg");
#####   while(my $line = <STAGES>) {
#####     # pushing this through a hash to remove duplicates
#####     # $stages{$line} = 1;
#####     push @stages, <STAGES>;
#####   }
#####   close STAGES;
##### }
##### eval join('', @stages);
##### 
##### #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##### # Please put all new stages for cteBuildArgs into
##### # uncore_cte_stages.cfg so that full chip can
##### # pick them up automatically
##### #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
##### 
##### #$DutConfig{cteBuildArgs} .= ' +s +bios';
##### #$DutConfig{cteBuildArgs} .= ' +s +bios_reset';
##### 
##### #$DutConfig{crgenTarget} = "../$DutConfig{topCTE}/gen";
##### $DutConfig{cregArgs} .= " +incdir+$ENV{MODEL_ROOT}/target/$ENV{CLUSTER_TARGET}/gen";
##### #$DutConfig{crgenTarget} = "../$ENV{CLUSTER_TARGET}/gen";
##### $DutConfig{cregArgs} .= " -top_xml=uncoremini_cte_creg.xml";
##### #$DutConfig{cregArgs} .= " -fuse_table -crgen_only -cpp";
##### $DutConfig{cregArgs} .= " -crgen_only";
##### 
##### my $boost = &ToolConfig_get_tool_path('boost');
##### $boost .= "/libs/regex/libs/";
##### my $arch = &ToolConfig_get_general_var('ARCHNAME');
##### my $spgcc = &ToolConfig_get_general_var('SPECMAN_GCC');
##### if ($arch =~ /SLES10/) {
#####     if ($arch =~ /x86_64/) {
##### 	if ($spgcc =~ /3\.4\.2/) {
##### 	    $boost .= "sles10_x86_64_gcc3.4.2/deb";	    
##### 	} else {
##### 	    $boost .= "sles10_x86_64_gcc4.2.2/deb";
##### 	}
#####     } else {
##### 	if ($spgcc =~ /3\.4\.2/) {
##### 	    $boost .= "sles10_i686_gcc3.4.2/deb";	    
##### 	} else {
##### 	    $boost .= "sles10_i686_gcc4.2.2/deb";
##### 	}
#####     }
##### } else {
#####     if ($arch =~ /x86_64/) {
##### 	$boost .= "sles9_x86_64_gcc3.4.2/deb";
#####     } else {
##### 	$boost .= "sles9_i686_gcc3.4.2/deb";
#####     }
##### }
##### 
##### ## NN: Commenting out -peconfig option; multiple spec of this option results in only the last file being used.
##### ##     for uncoremini_cte, .dat file is generated based on configDB keys
##### 
$DutConfig{chopVcsArgs}{lcc} = "";
##### #$DutConfig{chopVcsArgs}{lcc} .= "-peconfig subst_cbo_cte.dat";
##### 
$DutConfig{chopVcsArgs}{mcc} = "";
##### #$DutConfig{chopVcsArgs}{mcc} .= "-peconfig subst_cbo_cte.dat";
##### 
$DutConfig{chopVcsArgs}{hcc} = "";
##### #$DutConfig{chopVcsArgs}{hcc} .= "-peconfig subst_cbo_cte.dat";
##### 
$DutConfig{chopVcsArgs}{scc} = "";
##### #$DutConfig{chopVcsArgs}{scc} .= "-peconfig subst_cbo_cte.dat";
##### #$DutConfig{chopVcsArgs}{scc} .= " -peconfig $ENV{MODEL_ROOT}/cfg/kti_cte_scc_kti_nophy_subst.dat";
##### 
##### @{$DutConfig{simLibTools}} = qw( specman ddr_bfm ddrt_bfm hsi_bfm sahara foxsim_sim ultra smbus_bfm);
##### @{$DutConfig{LD_LIBRARY_PATH}} = (
##### #   "$ENV{MODEL_ROOT}/target/$DutConfig{target}/gen",
##### #   "$ENV{MODEL_ROOT}/target/cte/$DutConfig{topCTE}/lib/__ARCHNAME__/__BUILD_TYPE__",
##### #   "$ENV{MODEL_ROOT}/target/cte/$DutConfig{topCTE}",
#####    "$ENV{MODEL_ROOT}/target/cpp/lib/__ARCHNAME__/__BUILD_TYPE__",
#####    "$ENV{MODEL_ROOT}/target/cpp",
#####    "${boost}",
##### );
##### 
##### $DutConfig{cteBuildArgs} .= " IBISTTB_REQUIRED=1 BFM_REQUIRED=1 DISABLE_XSTATE=1 PCODE_GEN=1 CRUCIBLE_REQUIRED=1 CSIPLI=1";
##### $DutConfig{cteBuildArgs} .= " INTELIGEN=1 MULDEF=1 GSR_SIMIX=1";
##### $DutConfig{cteBuildArgs} .= " PCODE_GEN=1";
##### $DutConfig{crucibleBuildArgs} .= "jkt ibisttb"; # gsr can also be chosen.
##### 
##### 
##### #$DutConfig{ucmakeArgs} = "UCODE_COMPILATION_MODE=fc compress=yes cluster";
##### #$DutConfig{ucmaketarget} = "ucode";
##### #$DutConfig{build_level} = "ucode_and_microsim";
##### $DutConfig{ucmakeArgs} = "BUILD_PATHFINDER=YES cluster_pathcheck";
##### $DutConfig{ucmaketarget} = "uncore_cte";
##### $DutConfig{build_level} = "ucode_and_microsim";
##### 
##### $DutConfig{pcmaketarget} = "pcode";
##### $DutConfig{gentarget} = "$ENV{MODEL_ROOT}/target/$DutConfig{topCTE}/gen";
##### $DutConfig{pcmakeArgs} = "-verona" if($useVerona);
##### #$DutConfig{genBuildArgs} = "-uncoremini_cte -outdir $ENV{CLUSTER_TARGET}/gen -target $ENV{CLUSTER_TARGET}/gen";
##### #$DutConfig{extModule} = ["gsrgtpll", "bandcounttop"];
##### $DutConfig{moduletarget} = "modulebuild";
##### $DutConfig{cteRunCfg} = ['sys_cfg_const_s "num_pkg_dut == 1"'];
##### 
##### # Anything in trexDefaults will be added to the trex command line
##### # after the first occurrance of -dut.  This is for all trex commands
##### # both individual runs and in simregress, etc.  This is specific to this
##### # dut.  You can override options w/ values with
##### # later settings of the same option on the command line.  Note that in
##### # order to "turn-off" a simple toggle you will need to use -no_* the
##### # toggle name.  The trex parser should treat a later usage this way as if
##### # the original toggle was not present.  However, to be safe it is
##### # best to only put things here that are really always going to be
##### # defaults.

# ANY CHANGES HERE MUST ALSO CHANGE $MODEL_ROOT/bin/automatic_rerun.pl
$DutConfig{trexDefaults} = "";
# $DutConfig{trexDefaults} .= " -4value 1";
$DutConfig{trexDefaults} .= " -yam_sn -nosimix";
$DutConfig{trexDefaults} .= " -assertFinal";
$DutConfig{trexDefaults} .= " -chop scc";
# if (defined $::opt{m} and ($::opt{m}[0] eq "simrun")) {
#  $DutConfig{trexDefaults} .= " -cb.disable 1";
# }
$DutConfig{trexDefaults} .= " -sim_output_timeout 3600";  # 60 min (30 min til 8/17/2011; too many timeouts)

# Temporary override for testing
# $DutConfig{trexDefaults} .= " -sim_output_timeout 30 -sim_output_timeout_override 30";  # 30 seconds

# locations of regression lists.
# Can be absolute, or relative to pwd, $MODEL_ROOT, or $MODEL_ROOT/regress/<dut>
$DutConfig{regress_dir} = "reglist/uncore_cte";
$DutConfig{regress_l0} = "$DutConfig{regress_dir}/level0.list";
$DutConfig{regress_l1} = "$DutConfig{regress_dir}/level1.list";
$DutConfig{regress_l2} = "$DutConfig{regress_dir}/level2.list";

# Bind gioddr data integrity SVA  
#$DutConfig{BindedAssertions} = ["gioddr_assert_fc.va", "dspio_assert.va","mlc_pic_asser.vs","dcu_assertions.vs", "mob_assertions.vs","meu_ooo_assertions.vs", "dtlb_assertions.vs","routing_assertions.vs", "dcu_2LP_prior_check_assert.vs", "dcu_remove_state_bypass_assert.vs","dcu_2LP_prior_check_st_conf_assert.vs","fv_dcu_FB_top.va","fv_sq_top.va"];
$DutConfig{rtl_stage_timeout}{rtl} = "16h";      
$DutConfig{rtl_stage_timeout}{full_lira} = "12h";


# an array of *.e files to load after the CTE is loaded:
@{$DutConfig{cteRunLoadFiles}} = ();

# arrays of Specman commands and postcmds to execute:
@{$DutConfig{cteRunCmds}} =      ();
@{$DutConfig{cteRunPostCmds}} =  ();

# bnirenbe: added path to specman top 'e' file relative to source directory ( $MODEL_ROOT/cte/uncore ).
# $DutConfig{Specman_Top} = "configs/top";


@{$DutConfig{CteTargetDirs}} = (
        "target/$ENV{CLUSTER_TARGET}/gen",
);

@{$DutConfig{ctePredFiles}}  = (
	"src/uncore/jkt_csiop.pred",
        "src/common/global/gsr_idi.pred"
);
##############################################################################
# Run command files for rtl build during compile
##############################################################################
##### $DutConfig{buildrtl} = [
#####     "src/uncore/mc/mc_buildrtl.cmd",
#####     "src/uncore/iio/iicb4/skx_iicb4_buildrtl.cmd",
#####     "src/uncore/iio/iicommon/skx_iicommon_buildrtl.cmd",
#####     "src/uncore/iio/iimi4/skx/iimi4_buildrtl.cmd",
#####     "src/uncore/iio/iios/skx_iios_buildrtl.cmd",
#####     "src/uncore/iio/iirp4/skx_iirp4_buildrtl.cmd",
#####     "src/uncore/iio/iisln8/skx_iisln8_buildrtl.cmd",
#####     "src/uncore/iio/iisph8/skx_iisph8_buildrtl.cmd",
#####     "src/uncore/iio/iistx8/skx_iistx8_buildrtl.cmd",
#####     "src/uncore/iio/iisws/skx_iisws_buildrtl.cmd",
#####     "src/uncore/iio/iiswn/skx_iiswn_buildrtl.cmd",
#####     "src/uncore/iio/iitln8/skx_iitln8_buildrtl.cmd",
#####     "src/uncore/iio/iitph8/skx_iitph8_buildrtl.cmd",
#####     "src/uncore/iio/iittx8/skx_iittx8_buildrtl.cmd",
#####     "src/uncore/iio/iivt4/skx_iivt4_buildrtl.cmd",
#####     "src/uncore/iio/iioapic/skx/skx_iioapic_buildrtl.cmd",
#####     "src/uncore/jkttb/pcietb/skx/iiotb_build.cmd",
#####     "src/uncore/r2pcie/r2pcie_buildrtl.cmd",
#####     "src/uncore/m3kti/m3kti_buildrtl.cmd",
##### ];
##### 
##### #uncore 1: FIXME - this was added to produce pred files
##### @{$DutConfig{ctePredFiles}}  = (
##### 	"src/uncore/jkt_csiop.pred",
#####         "src/common/gsr_idi.pred"
##### );
##### #end add - FIXME
##### 
##### # List of agents to build at dpi stage of rtlbuild
##### 
##### #$DutConfig{dpi_agents} = ["pcu_uc_tracker", "ptracker", "pcu_tsc_tracker", "pcu_pma_tracker"];
##### 
##### $DutConfig{fusetags} = [
#####     # "src/uncore/mc/mc_fuse_tag", ## emcurtis - commented out by request of Greg Lucas
#####     "target/$DutConfig{target}/gen/iio_fuse_tag",
#####     "src/uncore/ha/ha_fuse_tag",
##### ];
##### 
##### ###########if -emul switch is provided to simbuild, source emul.cfg file
##### if ($rtl_emul)
##### {
#####    require "$ENV{'MODEL_ROOT'}/cfg/emul/emul.cfg";
#####    print STDERR "***I: EMUL: calling emulation config file\n\n";
##### }
##### 
##### ####fub list for quick_syn stage
##### # require "$ENV{'MODEL_ROOT'}/cfg/uncoremini_cte_quicksyn_fub_list.cfg";

require "$ENV{MODEL_ROOT}/cfg/ace/globalclk.cfg";

######################################################################
# Do not remove the following 1
######################################################################
1;

######################################################################
#   T H E   E N D
######################################################################

