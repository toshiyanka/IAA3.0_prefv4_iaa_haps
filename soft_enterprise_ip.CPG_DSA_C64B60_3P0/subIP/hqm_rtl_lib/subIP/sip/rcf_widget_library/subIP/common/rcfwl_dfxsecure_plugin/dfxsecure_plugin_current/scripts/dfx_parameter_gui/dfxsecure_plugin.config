#!/usr/intel/bin/perl
$name dfxsecure_plugin_default
$version 2.3

$prefix DFXSECUREPLUGIN_
$post &removeLastComma('[file]','\/\/', '\/\*', '\*\/')
#***********************************************************
# Define entries
#*****************************************************************
$post &copy1to3('[file]',$[prefix]prefix2_value.'_'.'dfxsecureplugin_param_values.vh');
$post &createNewFile($[prefix]prefix2_value.'_'.'dfxsecureplugin_param_overide.vh');
$post &definesfile($[prefix]prefix2_value.'_'.'DfxSecurePlugin_TbDefines.svh');

$choice anames VISA_GREEN,VISA_RED,VISA_ORANGE,VISA_BLACK

################## File generation ############

$entry default prefix2 string title="Enter your IP Block name" default=MIPI help="Enter the prefix that has to be appended before the file & param" change=&makeUC sep=black

#$outfile dfxsecure_params_include.vh
#$outfile dfxsecure_params_input.vh
$post &removecomments('[file]','dfxsecure_params_include.vh');
$post &removecomments('[file]','dsp_tb_params.vh');

###############UserGuide#################
#$entry default userguide str title="Please enter the binary value number of features bits + 2 bits for visa control in the below respective policy fields, if not it will take default dfxfeature values" sep=black

########## SB Override###########

$entry default use_sb_override bit title="Do you want use Sideband policy override feature" "more=(1-Yes/0-No)" default=0 min=0 help="Enter binary value if you want to enable SB_Override" sep=black

#################Num_featues######################################
$entry default num_features integer title="Enter the number of dfx features to secure.(min=[min]):" default=1 min=1 max=100 change=&checkmaster help="The Default values are prepopluated for each policy." sep=black

############# Polices--- Need to Fix this###############

########### entry for policy 0############
$entry num_features policy0 string title="Enter the DFX Feature Value of POLICY_0 (Security Locked) and Select VISA Security Level" more="(Only Binary for all policies)" default=&checkvalue0(0,0) min=0 warn=&checkbitlength0 choice=anames:VISA_GREEN help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 1############
$entry num_features policy1 string title="Enter the DFX Feature Value of POLICY_1 (Functionality Locked) and Select VISA Security Level" default=&checkvalue0(1,0) min=0  warn=&checkbitlength1 choice=anames:VISA_BLACK help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 2############
$entry num_features policy2 string title="Enter the DFX Feature Value of POLICY_2 (Security Unlocked) and Select VISA Security Level" default=&checkvalue1(2,1) min=0  warn=&checkbitlength2 choice=anames:VISA_RED help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 3############
$entry num_features policy3 string title="Enter the DFX Feature Value of POLICY_3 (Delayed Auth Locked) and Select VISA Security Level"  default=&checkvalue0(3,0) min=0  warn=&checkbitlength3 choice=anames:VISA_GREEN help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 4############
$entry num_features policy4 string title="Enter the DFX Feature Value of POLICY_4 (Intel Unlocked) and Select VISA Security Level"  default=&checkvalue1(4,1) min=0  warn=&checkbitlength4 choice=anames:VISA_RED help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 5############
$entry num_features policy5 string title="Enter the DFX Feature Value of POLICY_5 (OEM Unlocked) and Select VISA Security Level" default=&checkvalue0(5,0) min=1  warn=&checkbitlength5 choice=anames:VISA_ORANGE help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 6############
$entry num_features policy6 string title="Enter the DFX Feature Value of POLICY_6 (enDebug Unlocked) and Select VISA Security Level" default=&checkvalue0(6,0) min=1  warn=&checkbitlength6 choice=anames:VISA_BLACK help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 7############
$entry num_features policy7 string title="Enter the DFX Feature Value of POLICY_7 (InfraRed Unlocked) and Select VISA Security Level" default=&checkvalue1(7,1) min=1  warn=&checkbitlength7  choice=anames:VISA_RED help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 8############
$entry num_features policy8 string title="Enter the DFX Feature Value of POLICY_8 (DRAM Debug Unlocked) and Select VISA Security Level" default=&checkvalue0(8,0) min=1  warn=&checkbitlength8 choice=anames:VISA_ORANGE help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 9############
$entry num_features policy9 string title="Enter the DFX Feature Value of POLICY_9 (User3 Unlocked) and Select VISA Security Level" default=&checkvalue0(9,0) min=1  warn=&checkbitlength9 choice=anames:VISA_ORANGE  help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 10############
$entry num_features policy10 string title="Enter the DFX Feature Value of POLICY_10 (User4 Unlocked) and Select VISA Security Level" default=&checkvalue0(10,0) min=1  warn=&checkbitlength10 choice=anames:VISA_ORANGE  help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 11############
$entry num_features policy11 string title="Enter the DFX Feature Value of POLICY_11 (User5 Unlocked) and Select VISA Security Level" default=&checkvalue0(11,0) min=1  warn=&checkbitlength11 choice=anames:VISA_ORANGE  help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 12############
$entry num_features policy12 string title="Enter the DFX Feature Value of POLICY_12 (User6 Unlocked) and Select VISA Security Level" default=&checkvalue0(12,0) min=1  warn=&checkbitlength12 choice=anames:VISA_ORANGE  help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 13############
$entry num_features policy13 string title="Enter the DFX Feature Value of POLICY_13 (User7 Unlocked) and Select VISA Security Level"  default=&checkvalue0(13,0) min=1  warn=&checkbitlength13 choice=anames:VISA_ORANGE  help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 14############
$entry num_features policy14 string title="Enter the DFX Feature Value of POLICY_14 (User8 Unlocked) and Select VISA Security Level"  default=&checkvalue0(14,0) min=1  warn=&checkbitlength14 choice=anames:VISA_ORANGE  help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

########### entry for policy 15############
$entry num_features policy15 string title="Enter the DFX Feature Value of POLICY_15 (Part Disabled) and Select VISA Security Level"  default=&checkvalue0(15,0) min=1  warn=&checkbitlength15 choice=anames:VISA_BLACK  help="The MSB bits are the DFx features dependent on num_features to secure & last 2 bits are visa_all_dis, visa_customer_dis respectively"

###################
#Params printing section
###################

## NUM OF FEATURES######

$param{dfx_secure} DFX_NUM_OF_FEATURES_TO_SECURE $[prefix]num_features_value

#######SECURE WIDTH####

$condit{dfxsecure} DFX_SECURE_WIDTH "parameter DFX_SECURE_WIDTH = 4,"

####### SB OVERRIDE #########

$param{secure} DFX_USE_SB_OVR  $[prefix]use_sb_override_value

$condit{dfxsecure} VISA_VISA_BLACK "parameter DFX_VISA_BLACK  = 2'b11,"

$condit{dfxsecure} VISA_VISA_GREEN "parameter DFX_VISA_GREEN  = 2'b01,"

$condit{dfxsecure} VISA_VISA_ORANGE "parameter DFX_VISA_ORANGE = 2'b10,"

$condit{dfxsecure} VISA_VISA_RED "parameter DFX_VISA_RED    = 2'b00,"

$condit{dfxearlyboot} DFX_EARLYBOOT_FEATURE_ENABLE &Earlyboot

$condit{dfxsecure} UNCONDITIONAL_PRINTING "parameter [(((DFX_NUM_OF_FEATURES_TO_SECURE + 2) * (2 ** DFX_SECURE_WIDTH)) - 1):0] DFX_SECURE_POLICY_MATRIX = "

$condit{dfxsecure} UNCONDITIONAL_PRINTING_SEMICOLON "{"

$condit{dfxsecure} POLICY15 &printvalue("15 (Part Disabled)",$[prefix]num_features_policy15_value,$[prefix]num_features_policy15_value2,0)
$condit{dfxsecure} POLICY14 &printvalue("14 (User8 Unlocked)",$[prefix]num_features_policy14_value,$[prefix]num_features_policy14_value2,0)
$condit{dfxsecure} POLICY13 &printvalue("13 (User7 Unlocked)",$[prefix]num_features_policy13_value,$[prefix]num_features_policy13_value2,0)
$condit{dfxsecure} POLICY12 &printvalue("12 (User6 Unlocked)",$[prefix]num_features_policy12_value,$[prefix]num_features_policy12_value2,0)
$condit{dfxsecure} POLICY11 &printvalue("11 (User5 Unlocked)",$[prefix]num_features_policy11_value,$[prefix]num_features_policy11_value2,0)
$condit{dfxsecure} POLICY10 &printvalue("10 (User4 Unlocked)",$[prefix]num_features_policy10_value,$[prefix]num_features_policy10_value2,0)
$condit{dfxsecure} POLICY9  &printvalue("9 (User3 Unlocked)",$[prefix]num_features_policy9_value,$[prefix]num_features_policy9_value2,0)
$condit{dfxsecure} POLICY8  &printvalue("8 (DRAM Debug Unlocked)",$[prefix]num_features_policy8_value,$[prefix]num_features_policy8_value2,0)
$condit{dfxsecure} POLICY7  &printvalue("7 (InfraRed Unlocked)",$[prefix]num_features_policy7_value,$[prefix]num_features_policy7_value2,0)
$condit{dfxsecure} POLICY6  &printvalue("6 (enDebug Unlocked)",$[prefix]num_features_policy6_value,$[prefix]num_features_policy6_value2,0)
$condit{dfxsecure} POLICY5  &printvalue("5 (OEM Unlocked)",$[prefix]num_features_policy5_value,$[prefix]num_features_policy5_value2,0)
$condit{dfxsecure} POLICY4  &printvalue("4 (Intel Unlocked)",$[prefix]num_features_policy4_value,$[prefix]num_features_policy4_value2,0)
$condit{dfxsecure} POLICY3  &printvalue("3 (Delayed Auth Locked)",$[prefix]num_features_policy3_value,$[prefix]num_features_policy3_value2,0)
$condit{dfxsecure} POLICY2  &printvalue("2 (Security Unlocked)",$[prefix]num_features_policy2_value,$[prefix]num_features_policy2_value2,0)
$condit{dfxsecure} POLICY1  &printvalue("1 (Functionality Locked)",$[prefix]num_features_policy1_value,$[prefix]num_features_policy1_value2,0)
$condit{dfxsecure} POLICY0  &printvalue("0 (Security Locked)",$[prefix]num_features_policy0_value,$[prefix]num_features_policy0_value2,0)

$condit{dfxsecure} UNCONDITIONAL_PRINTING_BRACKET "}"

#####################
## PERL Subroutines
####################
$lib local_checkvalue
   sub  checkvalue0{
      my ($num,$bit1)=@_;
      my ($cmd, $cnt, $full);
      my $retval=0;
      $cmd='[prefix]num_features_policy' . $num . '_value';
      if($[prefix]num_features_value eq "1"){
         $cnt=($[prefix]num_features_value);
         $full='$' . $cmd . '="' .  $bit1 . '"';
      }else{
         $cnt=($[prefix]num_features_value-1);
         $full='$' . $cmd . '="' . '0' x $cnt . $bit1 . '"';
      }

    eval($full);
   }

   sub  checkvalue1{
      my ($num,$bit1)=@_;
      my ($cmd, $cnt, $full);
      my $retval=0;
      $cmd='[prefix]num_features_policy' . $num . '_value';
      if($[prefix]num_features_value eq "1"){
         $cnt=($[prefix]num_features_value);
         $full='$' . $cmd . '="' .  $bit1 . '"';
      }else{
         $cnt=($[prefix]num_features_value-1);
         $full='$' . $cmd . '="' . '1' x $cnt . $bit1 . '"';
      }

    eval($full);
   }
$end

$lib local_checkmaster
   sub checkmaster{
      &checkvalue0(0,0);
      &checkvalue0(1,0);
      &checkvalue1(2,1);
      &checkvalue0(3,0);
      &checkvalue1(4,1);
      &checkvalue0(5,0);
      &checkvalue0(6,0);
      &checkvalue1(7,1);
      &checkvalue0(8,0);
      &checkvalue0(9,0);
      &checkvalue0(10,0);
      &checkvalue0(11,0);
      &checkvalue0(12,0);
      &checkvalue0(13,0);
      &checkvalue0(14,0);
      &checkvalue0(15,0);
      &checkvalue0(16,0);
   }
$end

###########################################################################################################

####### POLICY0 #########
$lib local_checkbitlength0
   sub checkbitlength0{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy0_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy0_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY1 #########
$lib local_checkbitlength1
   sub checkbitlength1{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy1_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy1_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY2 #########
$lib local_checkbitlength2
   sub checkbitlength2{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy2_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy2_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY3 #########
$lib local_checkbitlength3
   sub checkbitlength3{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy3_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy3_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY4 #########
$lib local_checkbitlength4
   sub checkbitlength4{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy4_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy4_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY5 #########
$lib local_checkbitlength5
   sub checkbitlength5{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy5_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy5_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY6 #########
$lib local_checkbitlength6
   sub checkbitlength6{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy6_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy6_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY7 #########
$lib local_checkbitlength7
   sub checkbitlength7{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy7_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy7_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY8 #########
$lib local_checkbitlength8
   sub checkbitlength8{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy8_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy8_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY9 #########
$lib local_checkbitlength9
   sub checkbitlength9{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy9_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy9_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY10 #########
$lib local_checkbitlength10
   sub checkbitlength10{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy10_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy10_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY11 #########
$lib local_checkbitlength11
   sub checkbitlength11{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy11_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy11_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY12 #########
$lib local_checkbitlength12
   sub checkbitlength12{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy12_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy12_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY13 #########
$lib local_checkbitlength13
   sub checkbitlength13{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy13_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy13_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY14 #########
$lib local_checkbitlength14
   sub checkbitlength14{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy14_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy14_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

####### POLICY15 #########
$lib local_checkbitlength15
   sub checkbitlength15{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy15_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy15_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end

#-------------------------------------
$lib local_printvalue
   sub printvalue{
      my ($num,$cmd,$chk,$default)=@_;
      my $retval=0;
      my $len;
      my $value;
      my $temp;
      eval($cmd);
      if($[prefix]num_features_value eq "1"){
         $len =$[prefix]num_features_value;
      }else{
         $len=$[prefix]num_features_value;
      }
      $temp='0'x $len;
      #printf("debug_temp>$temp\n");
      if ($chk eq VISA_BLACK){
         $value= ",DFX_VISA_BLACK";
      }elsif($chk eq VISA_GREEN){
         $value= ",DFX_VISA_GREEN";
      }elsif($chk eq VISA_ORANGE){
         $value=",DFX_VISA_ORANGE";
      }elsif($chk eq VISA_RED){
         $value=",DFX_VISA_RED";
      }else{
         $value=",DFX_VISA_BLACK";
      }
      #printf("debug>$value\n");
      if($cmd=~m/$temp/){
         if($[prefix]num_features_value eq "1"){
            $retval="{" . $[prefix]num_features_value ."'b$default" . $value . "}" . ",  // Policy_$num";
            #printf("debug_1>len=$len,cmd=$cmd,temp=$temp,num=$num,chk=$chk,default=$default,$retval\n");
         }else{
            $retval="{" . $[prefix]num_features_value . "'b$temp" . $value . "}" .  ",  // Policy_$num";}
            #printf("debug>len=$len,cmd=$cmd,temp=$temp,num=$num,chk=$chk,default=$default,$retval\n");
      }else{
         $retval="{" . $[prefix]num_features_value . "'b$cmd" . $value . "}" .  ",  // Policy_$num";
         #printf("debug1>len=$len,cmd=$cmd,temp=$temp,num=$num,chk=$chk\n");
      }
      return($retval);
   }
$end

#$lib local_checkbitlength
#   sub checkbitlength{
#      printf("i am in sub\n");
#      my ($num)=@_;
#      my $cmd='$' . '[prefix]num_features_policy' . $num . '_value';
#      eval($cmd);
#      printf("cmd=$cmd,$num \n");
#      my $retStat=1;
#      if($cmd=~m/[^01]/){
#         $retStat=0;
#      }else{
#         $retStat=1;
#      }
#      if (length($cmd) ne ($[prefix]num_features_value)){
#         $retStat=0;
#      }
#      return($retStat);
#   }
#$end

######################################generating other 2 files############
$lib copy_one_2_three
   sub copy1to3{
      my ($infile, $outfile)=@_;
      my ($ifh, $ofh);
      open($ofh, "> $outfile");
      &logMessage("Note: Copying file $infile to $outfile");
      open($ifh, $infile);
      while (<$ifh>){
         chomp;
         next if m/^\/\/\s+\$set.*$/;
         next if m/^\/\/\s+\$define.*$/;
         s/\,\s*$/;/;   # swap ending comma with semi-colon
         s/^\}/\};/;
         if ($[prefix]prefix2_value ne ""){
            s/DFX\_/$[prefix]prefix2_value\_.DFX\_/ig;
            s/\.//ig;
         }
         printf($ofh "$_\n");
      }
      close($ifh);
      close($ofh);
   }
$end

$lib local_removecomments
   sub removecomments{
      my ($infile, $outfile)=@_;
      my ($ifh, $ofh);
      open($ofh, "> $outfile");
      &logMessage("Note: Copying file $infile to $outfile");
      open($ifh, $infile);
      while (<$ifh>){
         chomp;
         next if m/^\/\/\s+\$set.*$/;
         next if m/^\/\/\s+\$define.*$/;
         printf($ofh "$_\n");
      }
      close($ifh);
      close($ofh);
   }
$end

$lib createnewfile
   sub createNewFile{
      my ($outfile)=@_;
      my ($ofh);
      &logMessage("Note: Creating new file $outfile");
      open($ofh, "> $outfile");
      print($ofh ".DFX_NUM_OF_FEATURES_TO_SECURE         \($[prefix]prefix2_value"."_DFX_NUM_OF_FEATURES_TO_SECURE\),\n");
      print($ofh ".DFX_SECURE_WIDTH                      \($[prefix]prefix2_value"."_DFX_SECURE_WIDTH\),\n");
      print($ofh ".DFX_USE_SB_OVR                        \($[prefix]prefix2_value"."_DFX_USE_SB_OVR\),\n");
      print($ofh ".DFX_VISA_BLACK                        \($[prefix]prefix2_value"."_DFX_VISA_BLACK\),\n");
      print($ofh ".DFX_VISA_GREEN                        \($[prefix]prefix2_value"."_DFX_VISA_GREEN\),\n");
      print($ofh ".DFX_VISA_ORANGE                       \($[prefix]prefix2_value"."_DFX_VISA_ORANGE\),\n");
      print($ofh ".DFX_VISA_RED                          \($[prefix]prefix2_value"."_DFX_VISA_RED\),\n");
      print($ofh ".DFX_EARLYBOOT_FEATURE_ENABLE          \($[prefix]prefix2_value"."_DFX_EARLYBOOT_FEATURE_ENABLE\),\n");
      print($ofh ".DFX_SECURE_POLICY_MATRIX              \($[prefix]prefix2_value"."_DFX_SECURE_POLICY_MATRIX\)\n");
   }
$end

$lib definesfile
   sub definesfile{
      my ($outfile)=@_;
      my ($ofh);
      &logMessage("Note: Creating new file $outfile");
      open($ofh, "> $outfile");
      print($ofh "\/\/----------------------------------------------------------------------\n");
      print($ofh "\/\/ Intel Proprietary -- Copyright 2015 Intel -- All rights reserved\n");
      print($ofh "\/\/----------------------------------------------------------------------\n");
      print($ofh "\/\/ NOTE: Log history is at end of file.\n");
      print($ofh "\/\/----------------------------------------------------------------------\n");
      print($ofh "\/\/\n");
      print($ofh "\/\/    FILENAME    : DfxSecurePlugin_TbDefines.sv\n");
      print($ofh "\/\/    CREATED BY  : Shivaprashant Bulusu\n");
      print($ofh "\/\/    PROJECT     : DfxSecurePlugin\n");
      print($ofh "\/\/    PURPOSE     : Package file for the ENV\n");
      print($ofh "\/\/    DESCRIPTION : Includes all the files in the ENV\n");
      print($ofh "\/\/----------------------------------------------------------------------\n");
      print($ofh "\n");
      print($ofh "`ifndef INC_DfxSecurePlugin_TbDefines\n");
      print($ofh "`define INC_DfxSecurePlugin_TbDefines\n");
      print($ofh "\n");
      print($ofh "\/\/ DfxSecurePlugin abbreviated to DSP"."\n");
      print($ofh "`ifndef $[prefix]prefix2_value"."_DSP_TB_PARAMS_DECL\n");
      print($ofh "`define $[prefix]prefix2_value"."_DSP_TB_PARAMS_DECL \\\n");
      print($ofh "    parameter \\\n");
      print($ofh "    TB_DFX_NUM_OF_FEATURES_TO_SECURE    = $[prefix]num_features_value".",\\\n");
      print($ofh "    TB_DFX_SECURE_WIDTH                 = 4,\\\n");
      print($ofh "    TB_DFX_USE_SB_OVR                   = $[prefix]use_sb_override_value".",\\\n");
      print($ofh "    TB_CLK_PERIOD                       = 10ns\n");
      print($ofh "`endif\n");
      print($ofh "\n");
      print($ofh "`ifndef $[prefix]prefix2_value"."_DSP_TB_PARAMS_INST\n");
      print($ofh "`define $[prefix]prefix2_value"."_DSP_TB_PARAMS_INST \\\n");
      print($ofh "    .TB_DFX_NUM_OF_FEATURES_TO_SECURE (TB_DFX_NUM_OF_FEATURES_TO_SECURE),\\\n");
      print($ofh "    .TB_DFX_SECURE_WIDTH              (TB_DFX_SECURE_WIDTH),\\\n");
      print($ofh "    .TB_DFX_USE_SB_OVR                (TB_DFX_USE_SB_OVR),\\\n");
      print($ofh "    .TB_CLK_PERIOD                    (TB_CLK_PERIOD)\n");
      print($ofh "`endif\n");
      print($ofh "\n");
      print($ofh "`endif // INC_DfxSecurePlugin_TbDefines\n");

   }
$end

$lib makeUC
   sub makeUC{
      my ($retval);
      $[prefix]prefix2_value=uc($[prefix]prefix2_value);
      $retval=$[prefix]prefix2_value;
      return($retval);
   }
$end

$lib local_Earlyboot
   sub Earlyboot{
      my $retval;
      my $cmd;
      my $temp;
      $temp='0' x $[prefix]num_features_value;
      $cmd='$' . '[prefix]num_features_policy' . '_value';
      eval($cmd);
      $temp=$temp . ",DFX_VISA_GREEN";
      $retval="parameter DFX_EARLYBOOT_FEATURE_ENABLE = " . "{".($[prefix]num_features_value) . "'b$temp},";
      return($retval);
    }
$end

$lib local_checkbitlength16
   sub checkbitlength16{
      my $retStat=1;
      my $binary;
         if($[prefix]num_features_policy16_value=~m/[^01]/){
            $retStat=0;
         }else{
            $retStat=1;
         }
         if (length($[prefix]num_features_policy16_value) ne ($[prefix]num_features_value)){
            $retStat=0;
         }
      return($retStat);
   }
$end
