{
  "ip_type": "SIP",
  "ipconfig": "DFx Secure Plugin_PIC",
  "ips": {
    "DFx Secure Plugin_PIC": {
      "rules": {
        "1.10.a": {
          "algorithm": "The [alias].udf, [alias]_hdl.udf, [alias]_integ.udf and [alias]_local_ivars.udf file must exist somewhere under the 'ace' directory, and automatic reuse must be enabled.\nThe exported libraries should be only [alias]_rtl_lib and [alias]_ti_lib (and possibly [alias]_env_lib and/or other project-specific and unique library types).  It is incredibly rare that an IP truly needs to deliver more than one top-level library of a given type from it's own scope, and such cases generally occur only when the IP in question is actually a collection of IPs - and *most* of these cases should be handled as multiple scopes.\nExport subIP libraries from the appropriate subIP scopes via export -> use.  subIP scopes and libraries must all be uniquified with your own [scope]_ prefix anytime the subIPs are copied locally, to prevent collision with other versions of those subIPs during integration. \nNOTE: This uniquification also includes any shared ivars, such as those related to GenRTL recipes.  \nNOTE: Proper subIP scope and library uniquification is not guaranteed as part of 1.2.a, and must be manually verified. \n\nOptional easy first pass doa method of testing to see if you are properly set up for fully automatic integration:\n1) Create a dummy customer scope named my_cust which includes a single library containing a single module that very simply instantiates your top-level module(s) and/or top-level validation deliverable(s).  Don't try to hook ports up, we just want to use it to see that elaboration is able to correctly find all handoff collaterals, so keep it simple!   \n2) Create a model in this new my_cust scope which does fully automatic reuse of your scope & model.\n$audf{HDLSpec}{my_cust}{models}{cust_model} = {\ntop => \"cust_top\",\nlibs => [\"my_cust_tb_lib\", \"sip_shared_lib\" ], ## sip_shared_lib ONLY if needed by your handoff collateral\nuse => [ \"your_scope:your_handoff_model\" ], \n};\n3) Run \"ace -cc -elab_models\"  on this new my_cust scope.  Elaboration should PASS with no missing definitions of any kind.",
          "attributes": {},
          "background": "Often people assume that just because ace collateral worked for them that means it will also work for their customer.  When their customers get in the habit of hacking an IP's handoff ace collateral instead of filing bugs, the customer view of IP collateral can quickly diverge from the IPP view, which can introduce bugs during handoff.  Customers must be able to directly reuse IPP ace collateral without alteration in order to reduce the risk of handoff-introduced bugs.\n\nCustomers also must be able to inherit handoff ace libraries from all of their subscopes (recursively), and must be able to know at a glance which scope it originated from and the type of collateral each library contains (design vs validation, etc).  \n\nCurrent documentation:\nhttps://securewiki.ith.intel.com/pages/viewpage.action?pageId=336789869#build_and_run-Rule110a\nhttps://intelpedia.intel.com/Efficient_IP_Reuse_with_Ace\n\nThe IP to SOC ACE Setup re-use guidelines and rules are described in the intelpedia link: https://intelpedia.intel.com/Ace:_Efficient_IP_Reuse",
          "category": "Build & Run",
          "description": "Goal is to have ace(or bman) fully-automatic reuse enabled, and independent encapsulation of handoff design (rtl) and validation (ti/env) collaterals.  The handoff collateral should be able to compile for all activities (simulation, emulation, fpga, static checks, synthesis, etc) without manual intervention (editing) by the customer.  \nNOTE: Leaving subIPs in their own scopes, and uniquifying the subIP scopes and libs instead of merging the scopes and libs into your own, makes it faster for you to integrate new versions of your subIPs.\n\nAll IPs need to provide separate compile libraries for design and validation collaterals\nThis means that design and validation collateral should not be mixed within a single library. Likewise, collateral that is not intended for handoff should not be put into the same library as collateral that is intended for handoff. Generally this means that a scope is expected to deliver (only) two libraries, namely:\n- [scope]_rtl_lib contains the IP handoff design collateral (required for HIPs and SIPs, but rarely present in VIPs).\n- [scope]_ti_lib contains the IPs handoff validation and/or test island collateral.  \nNOTE: some teams have additional library types which they expect to be exported, and each library type should have it's own unique [scope]_[type]_lib name.\n- (sometimes) [scope]_env_lib contains additional validation packages, interfaces, and classes.  [scope]_ti_lib should depend upon this library if it exists.  This library should not depend upon [scope]_ti_lib, but may depend on sip_shared_lib or [subscope]_env_lib (or rtl lib) to get packages.\n- (rarely) [scope]_ascot_lib and other unique libs, which appear to be project-specific requirements.  \n\nAll sub_libs of exported libs (recursively) must originate in your own scope and have the same [scope]_ prefix that your exported libs have (aside from $ENV{CTECH_LIB_NAME} if still using ctech 1.0 methodology). NOTE that scope prefix may be lowercase even when scope is upper case, and either exact match or lowercase match is fine.\n\nAll dependent_libs of exported libraries (and dependent_libs of any nested sub_libs of exported libraries) exist or are visible in this scope.  NOTE: dependent_libs may arrive in this scope from a subscope via use (& export use) coming from subscopes, rather than being defined directly in this scope.\n\nThough dependent_libs do NOT need to originate from the same scope, they do still need to be exported when your own scope's exported library(s) depend upon them (with the exception of sip_shared_lib), preferably being exported from their original source scope via export --> use.\n\nExample of use and export -> use:\n$audf{HDLSpec}{$scope}{models}{${scope}_model} = {\n...\nlibs => [your_own_scope's_libs], \nuse => ['subscope_nameA:subscope_modelA','subscope_nameB:subscope_modelB',...],\nexport => { \n    libs => [your_own_scope's_handoff_libs], ## this list is usually a subset of the libs array above... for example a \n                                                                       ## local testbench library and local sip_shared_lib should not appear here\n    use => ['subscope_nameA:subscope_modelA','subscope_nameB:subscope_modelB',...], ## this should be \n                 ## a list similar to what you had above in use, but may have fewer entries if your exported libraries did not depend upon all subscopes\n}\n\n...",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.10.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.10.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: ACE libraries meant for SoC usage defined and exported.   Separate the RTL design and validation libraries.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Goal is to have ace(or bman) fully-automatic reuse enabled, and independent encapsulation of handoff design (rtl) and validation (ti/env) collaterals.  The handoff collateral should be able to compile for all activities (simulation, emulation, fpga, static checks, synthesis, etc) without manual intervention (editing) by the customer.  \n\tNOTE: Leaving subIPs in their own scopes, and uniquifying the subIP scopes and libs instead of merging the scopes and libs into your own, makes it faster for you to integrate new versions of your subIPs.\n\t\n\tAll IPs need to provide separate compile libraries for design and validation collaterals\n\tThis means that design and validation collateral should not be mixed within a single library. Likewise, collateral that is not intended for handoff should not be put into the same library as collateral that is intended for handoff. Generally this means that a scope is expected to deliver (only) two libraries, namely:\n\t- [scope]_rtl_lib contains the IP handoff design collateral (required for HIPs and SIPs, but rarely present in VIPs).\n\t- [scope]_ti_lib contains the IPs handoff validation and/or test island collateral.  \n\tNOTE: some teams have additional library types which they expect to be exported, and each library type should have it's own unique [scope]_[type]_lib name.\n\t- (sometimes) [scope]_env_lib contains additional validation packages, interfaces, and classes.  [scope]_ti_lib should depend upon this library if it exists.  This library should not depend upon [scope]_ti_lib, but may depend on sip_shared_lib or [subscope]_env_lib (or rtl lib) to get packages.\n\t- (rarely) [scope]_ascot_lib and other unique libs, which appear to be project-specific requirements.  \n\t\n\tAll sub_libs of exported libs (recursively) must originate in your own scope and have the same [scope]_ prefix that your exported libs have (aside from $ENV{CTECH_LIB_NAME} if still using ctech 1.0 methodology). NOTE that scope prefix may be lowercase even when scope is upper case, and either exact match or lowercase match is fine.\n\t\n\tAll dependent_libs of exported libraries (and dependent_libs of any nested sub_libs of exported libraries) exist or are visible in this scope.  NOTE: dependent_libs may arrive in this scope from a subscope via use (& export use) coming from subscopes, rather than being defined directly in this scope.\n\t\n\tThough dependent_libs do NOT need to originate from the same scope, they do still need to be exported when your own scope's exported library(s) depend upon them (with the exception of sip_shared_lib), preferably being exported from their original source scope via export --> use.\n\t\n\tExample of use and export -> use:\n\t$audf{HDLSpec}{$scope}{models}{${scope}_model} = {\n\t...\n\tlibs => [your_own_scope's_libs], \n\tuse => ['subscope_nameA:subscope_modelA','subscope_nameB:subscope_modelB',...],\n\texport => { \n\t    libs => [your_own_scope's_handoff_libs], ## this list is usually a subset of the libs array above... for example a \n\t                                                                       ## local testbench library and local sip_shared_lib should not appear here\n\t    use => ['subscope_nameA:subscope_modelA','subscope_nameB:subscope_modelB',...], ## this should be \n\t                 ## a list similar to what you had above in use, but may have fewer entries if your exported libraries did not depend upon all subscopes\n\t}\n\t\n\t...",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: The [alias].udf, [alias]_hdl.udf, [alias]_integ.udf and [alias]_local_ivars.udf file must exist somewhere under the 'ace' directory, and automatic reuse must be enabled.\n\tThe exported libraries should be only [alias]_rtl_lib and [alias]_ti_lib (and possibly [alias]_env_lib and/or other project-specific and unique library types).  It is incredibly rare that an IP truly needs to deliver more than one top-level library of a given type from it's own scope, and such cases generally occur only when the IP in question is actually a collection of IPs - and *most* of these cases should be handled as multiple scopes.\n\tExport subIP libraries from the appropriate subIP scopes via export -> use.  subIP scopes and libraries must all be uniquified with your own [scope]_ prefix anytime the subIPs are copied locally, to prevent collision with other versions of those subIPs during integration. \n\tNOTE: This uniquification also includes any shared ivars, such as those related to GenRTL recipes.  \n\tNOTE: Proper subIP scope and library uniquification is not guaranteed as part of 1.2.a, and must be manually verified. \n\t\n\tOptional easy first pass doa method of testing to see if you are properly set up for fully automatic integration:\n\t1) Create a dummy customer scope named my_cust which includes a single library containing a single module that very simply instantiates your top-level module(s) and/or top-level validation deliverable(s).  Don't try to hook ports up, we just want to use it to see that elaboration is able to correctly find all handoff collaterals, so keep it simple!   \n\t2) Create a model in this new my_cust scope which does fully automatic reuse of your scope & model.\n\t$audf{HDLSpec}{my_cust}{models}{cust_model} = {\n\ttop => \"cust_top\",\n\tlibs => [\"my_cust_tb_lib\", \"sip_shared_lib\" ], ## sip_shared_lib ONLY if needed by your handoff collateral\n\tuse => [ \"your_scope:your_handoff_model\" ], \n\t};\n\t3) Run \"ace -cc -elab_models\"  on this new my_cust scope.  Elaboration should PASS with no missing definitions of any kind.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 1.10.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 1.10.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "ACE libraries meant for SoC usage defined and exported.   Separate the RTL design and validation libraries.",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "1.11.a": {
          "algorithm": "- The [alias].udf, [alias]_hdl.udf, [alias]_integ.udf and [alias]_local_ivars.udf file must exist somewhere under the 'ace' directory, and reusable & nonreuable content must be properly split between these files.\n- Run \"perl -w [udf_file]\" on each handoff udf file - it should pass, with at most no more than a single warning \"Name \"main::audf\" used only once...\"\n- The -post_process_pattern_file hash key must exist (in [scope]_local_ivars.audf).  Extract value from -post_process_pattern_file => default\n   --- okErrors must be found under PATTERNS_DEF in ppfile\n   --- OVM Error and Fatal checks in the PP file must *not* be non-zero\n- search paths should be strictly limited, ideally to a single path per scope (such as $IP_ROOT or $MODEL_ROOT for your own scope).  Search paths should never be added to a scope due to subIP flattening into that scope.",
          "attributes": {},
          "background": "Customers need to be given collateral which is enabled for fully-automatic reuse. \n\nhttps://securewiki.ith.intel.com/pages/viewpage.action?pageId=336789869#build_and_run-Rule111a\nOR https://securewiki.ith.intel.com/x/bQETF -- Then Click on tab Rule 1.11.a\n\nhttps://intelpedia.intel.com/Efficient_IP_Reuse_with_Ace\n\nThe IP to SOC ACE Setup re-use guidelines and rules are described in the intelpedia link: https://intelpedia.intel.com/Ace:_Efficient_IP_Reuse",
          "category": "Build & Run",
          "description": "Checking the re-usability aspects of IP ACE Setup. Currently checking for the presence of 4 mandatory ACE UDF Files as per ACEMWG Group recommendation. The following aspects are being checked as part of this rule:\n1) Handoff UDF contents must be re-usable as-is.\n2) Post Process pattern file must be set, and ovm error and fatal count messages must not waive non-zero results.\n3) Search Paths and relative paths must be properly maintained.\n\n#1 means putting nonreusable settings into nonreusable files, and reusable settings into reusable files.  \n- Reusable files should be static, with no conditional statements, loops, or perl subroutine accesses. \n- Reusable files may use official tool-specific environment variables, such as $ENV{VCS_HOME} and $ENV{OVM_HOME}, but not variables like $ENV{IP_ROOT} and $ENV{ACE_PROJECT}.  Occasionally an IP-specific environment variable is allowed in reusable collateral, but note that this is generally only allowed when that IP is not allowed to be uniquified.\n- IP Config files and other perl packages (such as ace/lib/[scope]_ip.pm) should be used only from acerc files, for the purpose of setting search paths.  They should rarely (if ever) be used from UDF or HDL files, and they should never be used to set environment variables.  If used from udf or hdl files, they must either provide unique variable names specific to the \n- (reusable) [scope]_hdl.udf is for model and library definitions, and sometimes GenRTL recipes (and unique InterfaceVars related to these GenRTL recipes).\n- (reusable) [scope]_integ.udf is for Includes, first to load the [subscope]_integ.udf files from any subIP scopes your reusable collateral depends upon, and then to load your own [scope]_hdl.udf file.  If you do not have ANY subscopes, and guarantee that you never will, then this file is optional.\n- (nonreusable) [scope]_local_ivars.udf is for all changes to ace-provided global settings, such as InterfaceVars.\n- (nonreusable) [scope].udf is for Includes, first to load udf files from any additional subIP scopes your non-reusable collateral, such as [scope]_tb_lib, depends upon, and then to load your own [scope]_integ.udf file, and finally to load your [scope]_local_ivars.udf file and any similar tool-specific settings files.\n- (nonreusable) [scope].acerc file among other things, it defines the relationships between scopes and subscopes, and assigns the search paths to be used for each scope.\n\n#2 means checking that your postsim result is not blindly waiving ovm errors and fatals.\n\n#3 means limiting your scope's search paths, ideally to a single path (your own $IP_ROOT should be your scope's single search path).  \n- Flattening a subIP into your own scope is *not* a valid excuse for adding more search paths to your scope.   If you choose to flatten the subIP into your own scope, then you are committed to updating the hdl files to make the paths relative to your own $IP_ROOT.\n- If you use ace_utils templates, then $ACE_UTILS_ROOT (usually $IP_ROOT/target/$DUT/...) is a valid second search path.  \n- If your IP is visa inserted according to the current visa POR, then you might need 1-2 additional search paths (only one if GenRTL directory lands directly in IP_ROOT, and two if it lands somewhere like IP_ROOT/tools/visa/outputs).  \n- Other than the above exceptions, should be incredibly rare for an IP to need more than one search path.  Worst case if an IP has all of the noted exceptions that IP could have 4 search paths.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.11.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.11.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: ACE collateral exists for the IP, and content is properly split into files meant for SoC integration versus files meant only for IP local usage",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Checking the re-usability aspects of IP ACE Setup. Currently checking for the presence of 4 mandatory ACE UDF Files as per ACEMWG Group recommendation. The following aspects are being checked as part of this rule:\n\t1) Handoff UDF contents must be re-usable as-is.\n\t2) Post Process pattern file must be set, and ovm error and fatal count messages must not waive non-zero results.\n\t3) Search Paths and relative paths must be properly maintained.\n\t\n\t#1 means putting nonreusable settings into nonreusable files, and reusable settings into reusable files.  \n\t- Reusable files should be static, with no conditional statements, loops, or perl subroutine accesses. \n\t- Reusable files may use official tool-specific environment variables, such as $ENV{VCS_HOME} and $ENV{OVM_HOME}, but not variables like $ENV{IP_ROOT} and $ENV{ACE_PROJECT}.  Occasionally an IP-specific environment variable is allowed in reusable collateral, but note that this is generally only allowed when that IP is not allowed to be uniquified.\n\t- IP Config files and other perl packages (such as ace/lib/[scope]_ip.pm) should be used only from acerc files, for the purpose of setting search paths.  They should rarely (if ever) be used from UDF or HDL files, and they should never be used to set environment variables.  If used from udf or hdl files, they must either provide unique variable names specific to the \n\t- (reusable) [scope]_hdl.udf is for model and library definitions, and sometimes GenRTL recipes (and unique InterfaceVars related to these GenRTL recipes).\n\t- (reusable) [scope]_integ.udf is for Includes, first to load the [subscope]_integ.udf files from any subIP scopes your reusable collateral depends upon, and then to load your own [scope]_hdl.udf file.  If you do not have ANY subscopes, and guarantee that you never will, then this file is optional.\n\t- (nonreusable) [scope]_local_ivars.udf is for all changes to ace-provided global settings, such as InterfaceVars.\n\t- (nonreusable) [scope].udf is for Includes, first to load udf files from any additional subIP scopes your non-reusable collateral, such as [scope]_tb_lib, depends upon, and then to load your own [scope]_integ.udf file, and finally to load your [scope]_local_ivars.udf file and any similar tool-specific settings files.\n\t- (nonreusable) [scope].acerc file among other things, it defines the relationships between scopes and subscopes, and assigns the search paths to be used for each scope.\n\t\n\t#2 means checking that your postsim result is not blindly waiving ovm errors and fatals.\n\t\n\t#3 means limiting your scope's search paths, ideally to a single path (your own $IP_ROOT should be your scope's single search path).  \n\t- Flattening a subIP into your own scope is *not* a valid excuse for adding more search paths to your scope.   If you choose to flatten the subIP into your own scope, then you are committed to updating the hdl files to make the paths relative to your own $IP_ROOT.\n\t- If you use ace_utils templates, then $ACE_UTILS_ROOT (usually $IP_ROOT/target/$DUT/...) is a valid second search path.  \n\t- If your IP is visa inserted according to the current visa POR, then you might need 1-2 additional search paths (only one if GenRTL directory lands directly in IP_ROOT, and two if it lands somewhere like IP_ROOT/tools/visa/outputs).  \n\t- Other than the above exceptions, should be incredibly rare for an IP to need more than one search path.  Worst case if an IP has all of the noted exceptions that IP could have 4 search paths.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: - The [alias].udf, [alias]_hdl.udf, [alias]_integ.udf and [alias]_local_ivars.udf file must exist somewhere under the 'ace' directory, and reusable & nonreuable content must be properly split between these files.\n\t- Run \"perl -w [udf_file]\" on each handoff udf file - it should pass, with at most no more than a single warning \"Name \"main::audf\" used only once...\"\n\t- The -post_process_pattern_file hash key must exist (in [scope]_local_ivars.audf).  Extract value from -post_process_pattern_file => default\n\t   --- okErrors must be found under PATTERNS_DEF in ppfile\n\t   --- OVM Error and Fatal checks in the PP file must *not* be non-zero\n\t- search paths should be strictly limited, ideally to a single path per scope (such as $IP_ROOT or $MODEL_ROOT for your own scope).  Search paths should never be added to a scope due to subIP flattening into that scope.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 1.11.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 1.11.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "ACE collateral exists for the IP, and content is properly split into files meant for SoC integration versus files meant only for IP local usage",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "1.12.a": {
          "algorithm": "Locate the UDF files\nMake sure ACE tool version >= 1.77.01 and VCS tool version >= E-2011.03\n\nVerify power_intent hash exists in the handoff model(s): \n$audf{HDLSpec}{*}{models}{*}{power_intent} => { power_top => ... , upf_files => [...] },\nVerify $audf{HDLSpec}{*}{models}{*}{power_intent}{power_top} exists in the handoff model(s)\nCheck the list of UPF files in $audf{HDLSpec}{*}{models}{*}{power_intent}{upf_files} and verify the file(s) actually exist\n\nVerify the following lines exist in your [scope]_local_ivars.udf file:\n- $audf{InterfaceVars}{$ENV{ACE_PROJECT}}{__PROTOTYPES}{import}{LOWPOWER} exists\n- $audf{HDLSpec}{-hdl_compiler}{vcs}{-iniContents} must contain the lines\nUPF:$ENV{VCS_HOME}/[platform]/packages/upf\nLPA:$ENV{VCS_HOME}/[platform]/packages/lpa\n# Note: Allow optional double quotes around these strings\n\nVerify that neither NO_PWR_PINS nor INTEL_NO_PWR_PINS (nor any similar macro related to power-aware design) is passed via the default vlog_opts (in any udf or hdl files).  The POR global macro is INTEL_NO_PWR_PINS, but it should be applied only to the appropriate activities, and should never be applied by default to all tools and activities.",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_Low_Power_Design\nhttps://securewiki.ith.intel.com/display/hdk/RTL+Language+and+SV+Expertise?preview=%2F190677821%2F378995234%2Fglobal_macros_table_v16ww02a.xlsx",
          "category": "Build & Run",
          "description": "Checking the support for power aware simulation in ace infrastructure.\nFollowing conditions must meet for this rule to be passed\n1) Ace Version: 1.77.01 or later must be defined in scripts/toolfile.dat\n2) VCS Version: E-2011.03 or later must be defined in scripts/toolfile.dat\n3) Check for the following constructs in UDF files\n   a) power_intent must be defined under your handoff model(s)\n   b) power_top is specified under power_intent\n   c) upf_files are specified under power_intent; (and the files specified actually exist in those locations)\n\n4) Check for following lines in UDF files\n   a) UPF : $ENV{VCS_HOME}/[platform]/packages/upf OR UPF : $VCS_HOME/[platform]/packages/upf\n   b) LPA : $ENV{VCS_HOME}/[platform]/packages/lpa OR LPA : $VCS_HOME/[platform]/packages/lpa\n\n5) Check for following in UDF files\n   a) Under __PROTOTYPES, Import => [\"\"LOWPOWER\"\"]\"",
          "logRecords": [],
          "name": "ACE support for power aware simulation exists",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "1.14.a": {
          "algorithm": "Locate the VCS log file\nMake sure the log file exists\nMake sure the log file contains 'export SYNOPSYS_SIM_SETUP'\nMake sure the log file does not contain FAIL or EXIT\nVCS directory = rtlrptdir\nVCS log file = acevcslogfile",
          "attributes": {
            "collateral: acevcslogfile": ".//tools/report/dfxsecure_plugin_Compile_vcs.emu.log",
            "key: acevcslogfile": "dfxsecure_plugin_Compile_vcs.emu.log",
            "key: rtlrptdir": ".//tools/report"
          },
          "background": "Often SoC teams find that when they receive the IP release the out-of-box sanity compilation broken due to missing files or setup. This rule is created to atleast just make sure that the IP owner ensures compilation is\nclean before the IP release.\ne.g.,       %> ace -cc\n\nhttps://intelpedia.intel.com/Efficient_IP_Reuse_with_Ace",
          "category": "Build & Run",
          "description": "VCS compilation must pass elaboration on expected model",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.14.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.14.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: VCS compilation must pass elaboration on expected model",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: VCS compilation must pass elaboration on expected model",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Locate the VCS log file\n\tMake sure the log file exists\n\tMake sure the log file contains 'export SYNOPSYS_SIM_SETUP'\n\tMake sure the log file does not contain FAIL or EXIT\n\tVCS directory = rtlrptdir\n\tVCS log file = acevcslogfile",
              "severity": "INFO"
            }
          ],
          "name": "VCS compilation must pass elaboration on expected model",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "1.15.a": {
          "algorithm": "For vericom:\nLocate the Verdi log file\nMake sure the log file exists\nMake sure the log file contains 'export NOVAS_RC'\nMake sure the log file does not contain FAIL or EXIT\nFor ufe:\nLocate the vcs log file\nMake sure the log file exists\nMake sure the log file contains 0 errors\nVerdi directory = verdirptdir\nVerdi log file = aceverdilogfile\nufe directory = ufedir\nufe log file = ufevcslogfile\ncheck vericom = vericom\nvheck ufe = ufe",
          "attributes": {
            "collateral: aceverdilogfile": ".//tools/report/dfxsecure_plugin_Compile_vcs.fpga.log",
            "key: aceverdilogfile": "dfxsecure_plugin_Compile_vcs.fpga.log",
            "key: ufe": "False",
            "key: verdirptdir": ".//tools/report",
            "key: vericom": "True"
          },
          "background": "SoC teams use Verdi for active tracing to debug run time simulations. This was made as POR and IP?s should make sure that the Verdi compilation is clean. The following are few examples to make sure Verdi compilation is clean.\ne.g.,       %> ace -cd\n%> ace -cod\n% > ace -ccd\n%> ace -ccod\n\nhttps://intelpedia.intel.com/Efficient_IP_Reuse_with_Ace",
          "category": "Build & Run",
          "description": "In this rule, the tool should check for any compilation errors for various libraries in the report file generated by ACE using [-cd|-cod|-ccd|-ccod] switches.\nAlgorithm:\n1.\tBy default the tool should check for the presence of the ACE Verdi compilation report under <IP>/tools/reports/<IP>_verdi_comp.log\n2.\tWith a Key override \"aceverdicomplog\" the user can point to a different path of the compilation report file\n3.\tThen tool should check for following error messages:\n* Check for whether this is indeed Verdi report. For this check for \"export NOVAS_RC\" text in the log file\n* Check for library compilation failures. Check for \"FAIL\" text in the log file\n* Check for any gmake errors. Check for \"gmake: .*Error.*\" text in the log file",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.15.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.15.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Vericom/UFE compilation must pass without errors on expected model and Verdi must be able to load the IP design",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: In this rule, the tool should check for any compilation errors for various libraries in the report file generated by ACE using [-cd|-cod|-ccd|-ccod] switches.\n\tAlgorithm:\n\t1.\tBy default the tool should check for the presence of the ACE Verdi compilation report under <IP>/tools/reports/<IP>_verdi_comp.log\n\t2.\tWith a Key override \"aceverdicomplog\" the user can point to a different path of the compilation report file\n\t3.\tThen tool should check for following error messages:\n\t* Check for whether this is indeed Verdi report. For this check for \"export NOVAS_RC\" text in the log file\n\t* Check for library compilation failures. Check for \"FAIL\" text in the log file\n\t* Check for any gmake errors. Check for \"gmake: .*Error.*\" text in the log file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: For vericom:\n\tLocate the Verdi log file\n\tMake sure the log file exists\n\tMake sure the log file contains 'export NOVAS_RC'\n\tMake sure the log file does not contain FAIL or EXIT\n\tFor ufe:\n\tLocate the vcs log file\n\tMake sure the log file exists\n\tMake sure the log file contains 0 errors\n\tVerdi directory = verdirptdir\n\tVerdi log file = aceverdilogfile\n\tufe directory = ufedir\n\tufe log file = ufevcslogfile\n\tcheck vericom = vericom\n\tvheck ufe = ufe",
              "severity": "INFO"
            }
          ],
          "name": "Vericom/UFE compilation must pass without errors on expected model and Verdi must be able to load the IP design",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "1.16.a": {
          "algorithm": "TBD",
          "attributes": {},
          "background": "https://sharepoint.amr.ith.intel.com/sites/SourceDocs/Templates/Forms/AllItems.aspx?RootFolder=%2Fsites%2FSourceDocs%2FTemplates%2FSoft%2DIP%20Customer%20Doc%20Templates&FolderCTID=0x012000066CE86C470AFC40AA58CF791E657E4D&View=%7bD8CD2954-2CAE-4675-A71C-3",
          "category": "Build & Run",
          "description": "Integration Test list is provided, documented in Integration Guide\nOVM test sequences must be reusable",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.16.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.16.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Integration test list containing reusable tests for SoC integration delivered",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Integration Test list is provided, documented in Integration Guide\n\tOVM test sequences must be reusable",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: TBD",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 1.16.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 1.16.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Integration test list containing reusable tests for SoC integration delivered",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "1.19.a": {
          "algorithm": "Mark as PASS if all of the below are true.  Mark FAIL otherwise.\n* sip_shared_lib library is not exported by any model (not even as a uniquified [scope]_sip_shared_lib name).\n* Libraries are exported from your IP's scope via export => libs ONLY if your scope \"owns\" the library name and content.\n* Libraries which your scope defined but which you do not \"own\" are not exported from your scope via export => libs.\n**  Exception is if the libraries are fully uniquified (both library name(s) and all contents).  Once fully uniquified the library contents are considered \"owned\" by your IP.\n* Libraries defined in your IP's subscopes may be exported via export => use => [ \"[subscope]:[model]\", ... ].  \n** These subscopes must also (recursively) pass this check (ie, you do not pass if you export sip_shared_lib from any nested subscope via automatic reuse, nor if any nested subscope exported libs from it's scope that it does not own, etc).",
          "attributes": {},
          "background": "The special library name \"sip_shared_lib\" is used to enable different IPs to create their own local library names in their own scope for this \"unscoped\" VIP ace collateral, without exposing those locally defined library names to their customers.  It should be used with care, and should only include as direct content (or sub_lib content) validation collateral which cannot be directly reused via fully-automatic reuse.  At each IP integration level sip_shared_lib will grow (manually) to contain all content required by the individual subIP sip_shared_lib, but the exact VIP versions and local library names and options used in those libraries may change, and the order that the VIPs are compiled may also change at each integration level.  \n\nAs VAL IPs start being *officially* delivered with correct and complete ace collateral, sip_shared_lib will begin to have fewer sub_libs and more dependent_libs (using the ENABLE_RECURSIVE_DEP_LIBS acerc option).  Please note that Val IP libraries which traditionally have been included within sip_shared_lib will not be allowed to themselves depend upon sip_shared_lib, to prevent recursive dependency loops.   Such Val IP libraries should always expect to be a dependent_lib of sip_shared_lib, to enable compatibility with legacy sip_shared_lib usages.\n\nThe IP to SOC ACE Setup re-use guidelines and rules are described in the intelpedia link: \nhttps://intelpedia.intel.com/Ace:_Efficient_IP_Reuse\nhttps://intelpedia.intel.com/Efficient_IP_Reuse_with_Ace",
          "category": "Build & Run",
          "description": "sip_shared_lib is a library used for collecting \"shared\" validation collaterals, which are generally coming from validation IPs which did not provide complete ace collateral enabling fully automatic reuse.  Your IP's sip_shared_lib should never be exported (even as a uniquified name), and not even if you intend to reuse the exported sip_shared_lib library only in your own local development scopes.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.19.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.19.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Shared validation libraries (sip_shared_lib) not exported in ACE, must be documented in integration guide",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: sip_shared_lib is a library used for collecting \"shared\" validation collaterals, which are generally coming from validation IPs which did not provide complete ace collateral enabling fully automatic reuse.  Your IP's sip_shared_lib should never be exported (even as a uniquified name), and not even if you intend to reuse the exported sip_shared_lib library only in your own local development scopes.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Mark as PASS if all of the below are true.  Mark FAIL otherwise.\n\t* sip_shared_lib library is not exported by any model (not even as a uniquified [scope]_sip_shared_lib name).\n\t* Libraries are exported from your IP's scope via export => libs ONLY if your scope \"owns\" the library name and content.\n\t* Libraries which your scope defined but which you do not \"own\" are not exported from your scope via export => libs.\n\t**  Exception is if the libraries are fully uniquified (both library name(s) and all contents).  Once fully uniquified the library contents are considered \"owned\" by your IP.\n\t* Libraries defined in your IP's subscopes may be exported via export => use => [ \"[subscope]:[model]\", ... ].  \n\t** These subscopes must also (recursively) pass this check (ie, you do not pass if you export sip_shared_lib from any nested subscope via automatic reuse, nor if any nested subscope exported libs from it's scope that it does not own, etc).",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 1.19.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 1.19.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Shared validation libraries (sip_shared_lib) not exported in ACE, must be documented in integration guide",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "1.2.a": {
          "algorithm": "Locate PUNI lintra violations xml file (tools/uniquification/outputs/[alias]_puni_lintra_all_violations.xml)\nVerify the results are clean by parsing xml and verifying that there are no unwaived violations\nMANUALLY confirm that scope and all handoff libraries are uniquified (including all sub_libs, recursively).",
          "attributes": {
            "collateral: punilintraviolationsfile": ".//tools/uniquification/outputs/dfxsecure_plugin_puni_lintra_all_violations.xml",
            "key: punilintraviolationsfile": ".//tools/uniquification/outputs/dfxsecure_plugin_puni_lintra_all_violations.xml"
          },
          "background": "Make sure all RTL files (example: *.v, *.vs and *.sv files) are uniqified in ./src and optional subipdir (as of 15.13.0_p2, also looks in ./source)\nIPs may use subIP method (when necessary until they move to the POR directory structure) to provide additional IP-owned source areas, as well as to provide subIP paths.\nMake sure each file matches the module name (except mapping files such as CTECH map files).\nCTECH mapping files are generally named [alias]_*ctech_map.v (or .sv or .vs)\n\nAll IPs need to be uniquified to avoid collisions at integration.  This uniquification includes all RTL content, but particularly modules, macros, SV interfaces, and packages.  Packages should be used to hold any parameters, typedef, classes, etc that a customer would otherwise be expected to `include from the IP or redefine.\n\nCurrent documentation:\nhttps://securewiki.ith.intel.com/pages/viewpage.action?pageId=336789869#build_and_run-Rule12a\nOR https://securewiki.ith.intel.com/x/bQETF -- Then Click on tab Rule 1.2.a\n\nhttps://securewiki.ith.intel.com/display/hdk/Uniquification+Methodology\nhttps://securewiki.ith.intel.com/download/attachments/191988534/FE-BE%20Uniquification%20Proposal%20WW49.2%2714.pptx?version=1&modificationDate=1431618031953&api=v2",
          "category": "Build & Run",
          "description": "IP RTL and associated collateral must be fully uniquified.\n- Both IP-owned RTL, and subIP-owned RTL, should be uniquified using the same IP prefix.\n- File names must match module names whenever a file contains a single module.\n- No duplication of module names allowed in subIP subdirs and top level IP's RTL.\n- Ideally each IP provides a tools/uniquification/uniquifyme script to enable simple re-uniquification using a proven recipe (to uniquify themselves AND all of their subIP directories).\n- UDF files and libraries (other than sip_shared_lib) should all start with the same [scope]_ prefix.\n\nExceptions:\n- Subsystems which do not add any RTL *can sometimes* be exempt.  Subsystems in this case means a special type of integration SIP which provides NO rtl (or validation) collateral, only collage connectivity instructions.\n- Internal IPs that are not allowed to be uniquified (example: some validation-only IPs like ovm)\n- HIP modules which are delivered as subIPs of SIPs (they should have been uniquified by the HIP provider).\n- HIP modules as subIPs of HIPs when that subIP HIP is on the fab-provided skiplist.\n- External IPs whose licensing prevents uniquification (a single copy of that IP is allowed in a given product).",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.2.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.2.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RTL and related integration collateral must be uniquified.  Includes all subIPs and top level.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: IP RTL and associated collateral must be fully uniquified.\n\t- Both IP-owned RTL, and subIP-owned RTL, should be uniquified using the same IP prefix.\n\t- File names must match module names whenever a file contains a single module.\n\t- No duplication of module names allowed in subIP subdirs and top level IP's RTL.\n\t- Ideally each IP provides a tools/uniquification/uniquifyme script to enable simple re-uniquification using a proven recipe (to uniquify themselves AND all of their subIP directories).\n\t- UDF files and libraries (other than sip_shared_lib) should all start with the same [scope]_ prefix.\n\t\n\tExceptions:\n\t- Subsystems which do not add any RTL *can sometimes* be exempt.  Subsystems in this case means a special type of integration SIP which provides NO rtl (or validation) collateral, only collage connectivity instructions.\n\t- Internal IPs that are not allowed to be uniquified (example: some validation-only IPs like ovm)\n\t- HIP modules which are delivered as subIPs of SIPs (they should have been uniquified by the HIP provider).\n\t- HIP modules as subIPs of HIPs when that subIP HIP is on the fab-provided skiplist.\n\t- External IPs whose licensing prevents uniquification (a single copy of that IP is allowed in a given product).",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Locate PUNI lintra violations xml file (tools/uniquification/outputs/[alias]_puni_lintra_all_violations.xml)\n\tVerify the results are clean by parsing xml and verifying that there are no unwaived violations\n\tMANUALLY confirm that scope and all handoff libraries are uniquified (including all sub_libs, recursively).",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "RTL and related integration collateral must be uniquified.  Includes all subIPs and top level.",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "1.2.b": {
          "algorithm": "",
          "attributes": {},
          "background": "Make sure all RTL files (example: *.v, *.vs and *.sv files) are uniqified in ./src and optional subipdir (as of 15.13.0_p2, also looks in ./source)\nIPs may use subIP method (when necessary until they move to the POR directory structure) to provide additional IP-owned source areas, as well as to provide subIP paths.\nMake sure each file matches the module name (except mapping files such as CTECH map files).\nCTECH mapping files are generally named [alias]_*ctech_map.v (or .sv or .vs)\n\nAll IPs need to be uniquified to avoid collisions at integration.  This uniquification includes all RTL content, but particularly modules, macros, SV interfaces, and packages.  Packages should be used to hold any parameters, typedef, classes, etc that a customer would otherwise be expected to `include from the IP or redefine.\n\nCurrent documentation:\nhttps://securewiki.ith.intel.com/pages/viewpage.action?pageId=336789869#build_and_run-Rule12a\nOR https://securewiki.ith.intel.com/x/bQETF -- Then Click on tab Rule 1.2.a\n\nhttps://securewiki.ith.intel.com/display/hdk/Uniquification+Methodology\nhttps://securewiki.ith.intel.com/download/attachments/191988534/FE-BE%20Uniquification%20Proposal%20WW49.2%2714.pptx?version=1&modificationDate=1431618031953&api=v2",
          "category": "Build & Run",
          "description": "IP RTL and associated collateral must be fully uniquified.\n- Both IP-owned RTL, and subIP-owned RTL, should be uniquified using the same IP prefix.\n- File names must match module names whenever a file contains a single module.\n- No duplication of module names allowed in subIP subdirs and top level IP's RTL.\n- Ideally each IP provides a tools/uniquification/uniquifyme script to enable simple re-uniquification using a proven recipe (to uniquify themselves AND all of their subIP directories).\n- UDF files and libraries (other than sip_shared_lib) should all start with the same [scope]_ prefix.\n\nExceptions:\n- Subsystems which do not add any RTL *can sometimes* be exempt.  Subsystems in this case means a special type of integration SIP which provides NO rtl (or validation) collateral, only collage connectivity instructions.\n- Internal IPs that are not allowed to be uniquified (example: some validation-only IPs like ovm)\n- HIP modules which are delivered as subIPs of SIPs (they should have been uniquified by the HIP provider).\n- HIP modules as subIPs of HIPs when that subIP HIP is on the fab-provided skiplist.\n- External IPs whose licensing prevents uniquification (a single copy of that IP is allowed in a given product).",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.2.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.2.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RTL and related integration collateral must be uniquified.  Includes all subIPs and top level.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: IP RTL and associated collateral must be fully uniquified.\n\t- Both IP-owned RTL, and subIP-owned RTL, should be uniquified using the same IP prefix.\n\t- File names must match module names whenever a file contains a single module.\n\t- No duplication of module names allowed in subIP subdirs and top level IP's RTL.\n\t- Ideally each IP provides a tools/uniquification/uniquifyme script to enable simple re-uniquification using a proven recipe (to uniquify themselves AND all of their subIP directories).\n\t- UDF files and libraries (other than sip_shared_lib) should all start with the same [scope]_ prefix.\n\t\n\tExceptions:\n\t- Subsystems which do not add any RTL *can sometimes* be exempt.  Subsystems in this case means a special type of integration SIP which provides NO rtl (or validation) collateral, only collage connectivity instructions.\n\t- Internal IPs that are not allowed to be uniquified (example: some validation-only IPs like ovm)\n\t- HIP modules which are delivered as subIPs of SIPs (they should have been uniquified by the HIP provider).\n\t- HIP modules as subIPs of HIPs when that subIP HIP is on the fab-provided skiplist.\n\t- External IPs whose licensing prevents uniquification (a single copy of that IP is allowed in a given product).",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 1.2.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 1.2.b pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "RTL and related integration collateral must be uniquified.  Includes all subIPs and top level.",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "1.270.a": {
          "algorithm": "TBD",
          "attributes": {},
          "background": "https://securewiki.ith.intel.com/pages/viewpage.action?pageId=336789869#build_and_run-Rule1270a\nOR https://securewiki.ith.intel.com/x/bQETF -- Then Click on tab Rule 1.270.a\n\nhttps://securewiki.ith.intel.com/display/hdk/Converged+Directory+Structure\nhttps://securewiki.ith.intel.com/display/hdk/Converged+Directory+Structure?preview=/191660818/214106153/Soft%20IP%20Directory%20POR%20WW38%2714.pptx",
          "category": "Build & Run",
          "description": "IP must follow POR directory structure during IP development.  IPs should drop using their development directory structure (they should not try to swizzle file locations at packaging time, as this often breaks something).  \n\nFor more details on the POR directory structure, check the Converged Directory Structure link in the Background.  Summary:\n- Manually coded verilog/vhdl for design lives in src/rtl/[<block>]\n- Manually coded verilog/vhdl for verification lives in verif/tb/...\n- Tool settings and outputs live in tools/<tool_name>/inputs and tools/<tool_name>/outputs respectively",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.270.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.270.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: IP must follow POR directory structure",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: IP must follow POR directory structure during IP development.  IPs should drop using their development directory structure (they should not try to swizzle file locations at packaging time, as this often breaks something).  \n\t\n\tFor more details on the POR directory structure, check the Converged Directory Structure link in the Background.  Summary:\n\t- Manually coded verilog/vhdl for design lives in src/rtl/[<block>]\n\t- Manually coded verilog/vhdl for verification lives in verif/tb/...\n\t- Tool settings and outputs live in tools/<tool_name>/inputs and tools/<tool_name>/outputs respectively",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: TBD",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 1.270.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 1.270.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "IP must follow POR directory structure",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "1.316.a": {
          "algorithm": "Mark PASS if *all* of the below are true.  Mark FAIL otherwise.\na. [scope].acerc file exists inside ace directory with correct content\n* CTECH scope is listed as a direct subscope of your scope in $acerc{SUB_SCOPES}{subscopes}{$ENV{ACE_PROJECT}}\n* CTECH scope is listed with a single search path pointing to an official ctech 2.0+ version in $acerc{SEARCH_PATHS}{CTECH}\n* (if needed) CTECH_EXP scope is listed as a direct subscope of your scope in $acerc{SUB_SCOPES}{subscopes}{$ENV{ACE_PROJECT}}\n* (if needed) CTECH_EXP scope is listed with a single search path pointing to an official ctech 2.0+ version in $acerc{SEARCH_PATHS}{CTECH_EXP}\n* ONLY if ctech 1.0 backward compatability is needed by a subIP that still has sub_lib $ENV{CTECH_LIB_NAME}\n** Verify that $acerc{UDF}, which is a list, has ace/CTECH_hdl.udf.  \n** Verify that ace/CTECH_hdl.udf is the first entry of the list if that is the case.\nb. [scope]_integ.udf  file exists inside ace directory with correct CTECH fully automatic reuse content\n* [scope]_integ.udf has $audf{Includes} (which is a list) which contains:\n** \"CTECH:cfg/ctech/CTECH_hdl.udf\" listed before [scope]_hdl.udf \n** (if needed) \"CTECH_EXP:cfg/ctech_exp/CTECH_EXP_hdl.udf\" listed before [scope]_hdl.udf \nc. file exists inside ace directory with correct CTECH fully automatic reuse content\n* [scope]_hdl.udf gets CTECH_rtl_lib from CTECH scope via fully automatic reuse\n* (if needed) it also gets CTECH_EXP_rtl_lib from CTECH_EXP scope via fully-automatic reuse.\n** $audf{HDLSpec}{[scope]}{models}{[model]}{use} (which is a list) contains:\n*** \"CTECH:CTECH_model\"\n*** (if needed) \"CTECH_EXP:CTECH_EXP_model\"\n** $audf{HDLSpec}{[scope]}{models}{[model]}{export}{use} (which is a list) contains:\n*** \"CTECH:CTECH_model\"\n*** (if needed) \"CTECH_EXP:CTECH_EXP_model\"\n* [scope]_hdl.udf should only refer to $ENV{CTECH_LIB_NAME} if needed for enabling a subIP that is still on ctech 1.0 methodology, and should NOT have this as a sub_lib of any reusable library.\n* [scope]_hdl.udf should not have any hardcoded ctech library definition or reference such as deferred_ctech_lib, CTECH_v_rtl_lib, ctech_rtl_lib, etc\n* Neither udf nor hdl files anywhere in your scope should have incdirs or libdirs or files coming from released ctech. \n** HIPs are allowed to copy and uniquify ctech collaterals, and may included these uniquified ctech files in their libraries, but they MUST have the [hip]_ prefix applied.  \n** SIPs (including SIP wrapper modules around HIPs) should always use official ctech releases via the official CTECH scope.",
          "attributes": {},
          "background": "Make sure the IP is following the current CTECH methodology.\n\nhttps://securewiki.ith.intel.com/display/hdk/CTECH+Library+and+Methodology",
          "category": "Build & Run",
          "description": "Make sure the IP is following the official CTECH 2.0 methodology.",
          "logRecords": [],
          "name": "RTL follows CTECH coding methodology",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "1.360.a": {
          "algorithm": "Locate the VCS log file\nMake sure the log file exists & contains 'export SYNOPSYS_SIM_SETUP'.\nMake sure the log file does not contain FAIL or EXIT.\nVCS log file: aceemulvcslogfile.\nVCS directory: rtlrptdir\nOverride key for Ace Emulation VCS log file = aceemulvcslogfile\n",
          "attributes": {
            "collateral: aceemulvcslogfile": ".//tools/report/Compile_vcs.emu.log",
            "key: aceemulvcslogfile": "Compile_vcs.emu.log",
            "key: rtlrptdir": ".//tools/report"
          },
          "background": "Often SoC teams find that when they receive the IP release the out-of-box sanity compilation broken due to missing files or setup for emulation. This rule is created to at least just make sure that the IP owner ensures Emulation VCS compilation is clean before the IP release.\ne.g.,       %> ace -cc -filter EmulationSim\n",
          "category": "Build & Run",
          "description": "This is VCS Model Build of Emulation RTL. The intent of this rule is to ensure VCS successfully compiles and elaborates on emulation \"view\" of RTL.\n\nACE VCS compilation (using EmulationSim filter) must be clean (log file does not contain FAIL or EXIT.\n\nTo enable emulation view of RTL, add/remove following RTL Global Macros:\nExpected macros: INTEL_EMULATION, INTEL_SIMONLY (equivalent to VCS, used to protect UPF package so must be present), INTEL_NO_PWR_PINS (only if doing power-aware Emulation), INTEL_INST_ON\nDisallowed macros: INTEL_NO_PWR_PINS (if NOT doing power-aware Emulation), INTEL_FPGA, INTEL_DC\n\n\nVisit http://goto/effm for details, OR email effm_support@eclists.intel.com for any questions or help in compliance of this rule.\n\n",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.360.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.360.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Emulation RTL must pass VCS Compile (including Elaboration)",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This is VCS Model Build of Emulation RTL. The intent of this rule is to ensure VCS successfully compiles and elaborates on emulation \"view\" of RTL.\n\t\n\tACE VCS compilation (using EmulationSim filter) must be clean (log file does not contain FAIL or EXIT.\n\t\n\tTo enable emulation view of RTL, add/remove following RTL Global Macros:\n\tExpected macros: INTEL_EMULATION, INTEL_SIMONLY (equivalent to VCS, used to protect UPF package so must be present), INTEL_NO_PWR_PINS (only if doing power-aware Emulation), INTEL_INST_ON\n\tDisallowed macros: INTEL_NO_PWR_PINS (if NOT doing power-aware Emulation), INTEL_FPGA, INTEL_DC\n\t\n\t\n\tVisit http://goto/effm for details, OR email effm_support@eclists.intel.com for any questions or help in compliance of this rule.\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Locate the VCS log file\n\tMake sure the log file exists & contains 'export SYNOPSYS_SIM_SETUP'.\n\tMake sure the log file does not contain FAIL or EXIT.\n\tVCS log file: aceemulvcslogfile.\n\tVCS directory: rtlrptdir\n\tOverride key for Ace Emulation VCS log file = aceemulvcslogfile\n\t",
              "severity": "INFO"
            }
          ],
          "name": "Emulation RTL must pass VCS Compile (including Elaboration)",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "1.360.b": {
          "algorithm": "Expected macros: INTEL_EMULATION, INTEL_SIMONLY (equivalent to VCS, used to protect UPF package so must be present), INTEL_NO_PWR_PINS (only if doing power-aware Emulation), INTEL_INST_ON\nDisallowed macros: INTEL_NO_PWR_PINS (if NOT doing power-aware Emulation), INTEL_FPGA, INTEL_DC\n\n\n",
          "attributes": {},
          "background": "Emulation RTL has too many functional issues leading to delayed model bring up and model quality issues. This functional check works in conjunction with EFFM Compile Checks to improve EFFM Coverage.\nINTEL_EMULATION should guard code that should be visible only when running emulation (whether for emulation-simulation or emulation-synthesis).\nINTEL_SIMONLY should guard code that should be visible when running VCS -and- unified compiler flows (includes some versions of Zebu).\nINTEL_NO_PWR_PINS should guard power pin definitions and routing, and UPF package use & related power-aware logic that depends on UPF package-provided types. When INTEL_NO_PWR_PINS is defined, power pins are not defined as ports in the RTL.\nINTEL_INST_ON should guard synthesizable instrumentation code used for simulation/emulation/fpga",
          "category": "Build & Run",
          "description": "Manually confirming that basic DOA regression(s) pass using the Emulation compiled VCS model.\nCheck macros to confirm that only global macros that are supposed to be set for EmulationSim are set globally (will be added into BuildAudit in the future, but manual for now).\n\nNote: To achieve simulation of emulation RTL you must build a VCS model as specified in Rule 360.a.\n\nVisit http://goto/effm for details, OR email effm_support@eclists.intel.com for any questions or help in compliance of this rule.\n",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.360.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.360.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Emulation RTL must pass basic health tests using VCS Simulation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Manually confirming that basic DOA regression(s) pass using the Emulation compiled VCS model.\n\tCheck macros to confirm that only global macros that are supposed to be set for EmulationSim are set globally (will be added into BuildAudit in the future, but manual for now).\n\t\n\tNote: To achieve simulation of emulation RTL you must build a VCS model as specified in Rule 360.a.\n\t\n\tVisit http://goto/effm for details, OR email effm_support@eclists.intel.com for any questions or help in compliance of this rule.\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Expected macros: INTEL_EMULATION, INTEL_SIMONLY (equivalent to VCS, used to protect UPF package so must be present), INTEL_NO_PWR_PINS (only if doing power-aware Emulation), INTEL_INST_ON\n\tDisallowed macros: INTEL_NO_PWR_PINS (if NOT doing power-aware Emulation), INTEL_FPGA, INTEL_DC\n\t\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 1.360.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 1.360.b pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Emulation RTL must pass basic health tests using VCS Simulation",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "1.361.a": {
          "algorithm": "Locate the VCS log file\nMake sure the log file exists & contains 'export SYNOPSYS_SIM_SETUP'\nMake sure the log file does not contain FAIL or EXIT\nVCS directory: rtlrptdir\nVCS log file: acefpgavcslogfile\nOverride key for Ace VCS FPGA log file = acefpgavcslogfile",
          "attributes": {
            "collateral: acefpgavcslogfile": ".//tools/report/Compile_vcs.fpga.log",
            "key: acefpgavcslogfile": "Compile_vcs.fpga.log",
            "key: rtlrptdir": ".//tools/report"
          },
          "background": "Often SoC teams find that when they receive the IP release the out-of-box sanity compilation broken due to missing files or setup for emulation. This rule is created to at least just make sure that the IP owner ensures FPGA VCS compilation is clean before the IP release.\ne.g.,       %> ace -cc -filter FPGASim\n",
          "category": "Build & Run",
          "description": "This is VCS Model Build of FPGA RTL. The intent of this rule is to ensure VCS successfully compiles and elaborates on FPGA \"view\" of RTL.\n\nACE VCS compilation (using FPGASim filter) must be clean (log file does not contain FAIL or EXIT)\n\nTo enable FPGA view of RTL, add/remove following RTL Global Macros:\nExpected macros: INTEL_FPGA, INTEL_SIMONLY (equivalent to VCS, used to protect UPF package so must be present), INTEL_NO_PWR_PINS (only if doing power-aware Emulation), INTEL_INST_ON\nDisallowed macros: INTEL_NO_PWR_PINS (if NOT doing power-aware Emulation), INTEL_EMULATION, INTEL_DC\n\n\nVisit http://goto/effm for details, OR email effm_support@eclists.intel.com for any questions or help in compliance of this rule.\n\n",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.361.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.361.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: FPGA RTL  must pass VCS Compile (including Elaboration)",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This is VCS Model Build of FPGA RTL. The intent of this rule is to ensure VCS successfully compiles and elaborates on FPGA \"view\" of RTL.\n\t\n\tACE VCS compilation (using FPGASim filter) must be clean (log file does not contain FAIL or EXIT)\n\t\n\tTo enable FPGA view of RTL, add/remove following RTL Global Macros:\n\tExpected macros: INTEL_FPGA, INTEL_SIMONLY (equivalent to VCS, used to protect UPF package so must be present), INTEL_NO_PWR_PINS (only if doing power-aware Emulation), INTEL_INST_ON\n\tDisallowed macros: INTEL_NO_PWR_PINS (if NOT doing power-aware Emulation), INTEL_EMULATION, INTEL_DC\n\t\n\t\n\tVisit http://goto/effm for details, OR email effm_support@eclists.intel.com for any questions or help in compliance of this rule.\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Locate the VCS log file\n\tMake sure the log file exists & contains 'export SYNOPSYS_SIM_SETUP'\n\tMake sure the log file does not contain FAIL or EXIT\n\tVCS directory: rtlrptdir\n\tVCS log file: acefpgavcslogfile\n\tOverride key for Ace VCS FPGA log file = acefpgavcslogfile",
              "severity": "INFO"
            }
          ],
          "name": "FPGA RTL  must pass VCS Compile (including Elaboration)",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "1.361.b": {
          "algorithm": "Expected macros: INTEL_FPGA, INTEL_SIMONLY (equivalent to VCS, used to protect UPF package so must be present), INTEL_NO_PWR_PINS (only if doing power-aware FPGA), INTEL_INST_ON\nDisallowed macros: INTEL_NO_PWR_PINS (if NOT doing power-aware FPGA), INTEL_EMULATION, INTEL_DC\n",
          "attributes": {},
          "background": "FPGA RTL has too many functional issues leading to delayed model bring up and model quality issues. This functional check works in conjunction with EFFM Compile Checks to improve EFFM Coverage.\nINTEL_FPGA should guard code that should be visible only when running FPGA(whether for FPGA-simulation or FPGA-synthesis).\nINTEL_SIMONLY should guard code that should be visible when running VCS -and- unified compiler flows.\nINTEL_NO_PWR_PINS should guard power pin definitions and routing, and UPF package use & related power-aware logic that depends on UPF package-provided types.  When INTEL_NO_PWR_PINS is defined, power pins are not defined as ports in the RTL.\nINTEL_INST_ON should guard synthesizable instrumentation code used for simulation/emulation/fpga\n",
          "category": "Build & Run",
          "description": "Manually confirming that basic DOA regression(s) pass using the FPGA compiled VCS model.\nCheck macros to confirm that only global macros that are supposed to be set for FPGASim are set globally (will be added into BuildAudit in the future, but manual for now.\n\nNote: To achieve simulation of FPGA RTL you must build a VCS model as specified in Rule 361.a.\n\nVisit http://goto/effm for details, OR email effm_support@eclists.intel.com for any questions or help in compliance of this rule.\n",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.361.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.361.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: FPGA RTL must pass basic health tests using VCS Simulation ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Manually confirming that basic DOA regression(s) pass using the FPGA compiled VCS model.\n\tCheck macros to confirm that only global macros that are supposed to be set for FPGASim are set globally (will be added into BuildAudit in the future, but manual for now.\n\t\n\tNote: To achieve simulation of FPGA RTL you must build a VCS model as specified in Rule 361.a.\n\t\n\tVisit http://goto/effm for details, OR email effm_support@eclists.intel.com for any questions or help in compliance of this rule.\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Expected macros: INTEL_FPGA, INTEL_SIMONLY (equivalent to VCS, used to protect UPF package so must be present), INTEL_NO_PWR_PINS (only if doing power-aware FPGA), INTEL_INST_ON\n\tDisallowed macros: INTEL_NO_PWR_PINS (if NOT doing power-aware FPGA), INTEL_EMULATION, INTEL_DC\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 1.361.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 1.361.b pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "FPGA RTL must pass basic health tests using VCS Simulation ",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "1.9.a": {
          "algorithm": "Run datgen tool providing relevant options.\nReturn status is 0 if this MAT compliance checker passes",
          "attributes": {
            "key: aceenvfile": ".//target/dfxsecure_plugin/ADL/mat1.4.10plus.p2_p1274.7/aceroot/tsa/template_gen/cfg/ace/tsa_shell.env",
            "key: datgenmode": "ace",
            "key: datgenversion": "15.03.16",
            "key: dutname": "dfxsecure_plugin",
            "key: matversion": "1.5"
          },
          "background": "If the IP uses a Tool version which is different to the SOC POR and if the IP is released as is then there is a potential issue that may arise if the SOC cannot change their Tool version. Sometimes an IP compiled with one\nTool version can easily break with a different Tool version.\n\nhttps://securewiki.ith.intel.com/pages/viewpage.action?pageId=336789869#build_and_run-Rule19a\nOR https://securewiki.ith.intel.com/x/bQETF -- Then Click on tab Rule 1.9.a\n\nhttp://sip-da.fm.intel.com/siprm/setup/showProjToolVers.php",
          "category": "Build & Run",
          "description": "Checking for Tool versions used in IP are required as per SOC POR. All the Tool versions used in scripts/toolfile.dat are compared with that of SOC ones and flagged if there are any mismatches.SOC tools versions are picked up from mat_versions.yaml file that is available in the HDK environment. IP can have extra tools in their toolfile.dat and can specify N/A against the tool not applicable to them.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 1.9.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (1) Build & Run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 1.9.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Use defined tool versions",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Checking for Tool versions used in IP are required as per SOC POR. All the Tool versions used in scripts/toolfile.dat are compared with that of SOC ones and flagged if there are any mismatches.SOC tools versions are picked up from mat_versions.yaml file that is available in the HDK environment. IP can have extra tools in their toolfile.dat and can specify N/A against the tool not applicable to them.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Run datgen tool providing relevant options.\n\tReturn status is 0 if this MAT compliance checker passes",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Running rule 1.9.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Specified aceenv file ['.//target/dfxsecure_plugin/ADL/mat1.4.10plus.p2_p1274.7/aceroot/tsa/template_gen/cfg/ace/tsa_shell.env'] does not exist",
              "severity": "WARNING"
            },
            {
              "file": "",
              "line": "",
              "msg": "MAT compliance checks pass ",
              "severity": "INFO"
            }
          ],
          "name": "Use defined tool versions",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "10.104.a": {
          "algorithm": "1. Locate the Fishtail run log file. Default is ft_audit.rpt\n2. PASS if one of the following strings found:\nPassing path percentage: 100%\nConstraint Mapping: 100%\nFailing paths: 0\n\nNote: ft_audit.rpt will be generated only from version (and above) ft_rdt 15.2.2 and febe 15.24.4\n\nFAIL if one of the following strings found:\nFatal Error found in log file\nParse Error found, run did not complete\nSDC Execution Error found, run did not complete\nThe top module was not found in the file list\n\n\nOverride key for Fishtail report file = fishtailreport",
          "attributes": {
            "collateral: Fishtail report": ".//tools/fishtail/critical_result_summary.rpt",
            "key: fishtailreport": ".//tools/fishtail/critical_result_summary.rpt"
          },
          "background": "Fishtail is used for verification of timing constraints (SDC files) and is a POR tool for IPs and SoCs. For more information, please refer the link https://dtspedia.intel.com/Fishtail",
          "category": "MCP/FP",
          "description": "IP is required to verify  all Multy Cycle and False paths. This could be checked with Fishtail structural checks ( clock propagation, I/O issues etc) report should be clean.  MCP/ FP verified with Fishtail Formal checks  if they  exist.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 10.104.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (10) MCP/FP",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 10.104.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Fishtail passing ( Structural  , False Path/ Multy Cycle checks) ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: IP is required to verify  all Multy Cycle and False paths. This could be checked with Fishtail structural checks ( clock propagation, I/O issues etc) report should be clean.  MCP/ FP verified with Fishtail Formal checks  if they  exist.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Locate the Fishtail run log file. Default is ft_audit.rpt\n\t2. PASS if one of the following strings found:\n\tPassing path percentage: 100%\n\tConstraint Mapping: 100%\n\tFailing paths: 0\n\t\n\tNote: ft_audit.rpt will be generated only from version (and above) ft_rdt 15.2.2 and febe 15.24.4\n\t\n\tFAIL if one of the following strings found:\n\tFatal Error found in log file\n\tParse Error found, run did not complete\n\tSDC Execution Error found, run did not complete\n\tThe top module was not found in the file list\n\t\n\t\n\tOverride key for Fishtail report file = fishtailreport",
              "severity": "INFO"
            }
          ],
          "name": "Fishtail passing ( Structural  , False Path/ Multy Cycle checks) ",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "10.333.a": {
          "algorithm": "Check that the below mentioned waiver files exists in fishtailwaiverdir and are non empty\n1. waive.sdc\n2. waive.tcl\nOverride key for Fishtail waiver dir = fishtailwaiverdir",
          "attributes": {
            "collateral: Fishtail waiver .sdc": ".//tools/fishtail/waivers/waive.sdc",
            "collateral: Fishtail waiver .tcl": ".//tools/fishtail/waivers/waive.tcl",
            "key: fishtailwaiverdir": ".//tools/fishtail/waivers"
          },
          "background": "Fishtail is used for verification of timing constraints (SDC files) and is a POR tool for IPs and SoCs. For more information, please refer the link https://dtspedia.intel.com/Fishtail",
          "category": "MCP/FP",
          "description": "Fishtail passing waivers file provided",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 10.333.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (10) MCP/FP",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 10.333.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Fishtail passing waivers file provided",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Fishtail passing waivers file provided",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Check that the below mentioned waiver files exists in fishtailwaiverdir and are non empty\n\t1. waive.sdc\n\t2. waive.tcl\n\tOverride key for Fishtail waiver dir = fishtailwaiverdir",
              "severity": "INFO"
            },
            {
              "file": ".//tools/fishtail/waivers/waive.sdc",
              "line": "",
              "msg": "Fishtail waiver file found empty",
              "severity": "WARNING"
            }
          ],
          "name": "Fishtail passing waivers file provided",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "10.417.a": {
          "algorithm": "Review the multi-cycle and false paths defined in the constraint files, ensure that they have not changed from what was delivered in RTL0p8.",
          "attributes": {},
          "background": "At RTL0p8 the design is expected to be fully coded, and the customer (subsystem, SoC, etc.) uses the available collateral to create the complete full chip design and enable all the synthesis and timing flows.  There should be no functional changes in the design from RTL0p8 except for bug fixes.",
          "category": "MCP/FP",
          "description": "The multi-cycle and false paths in the final drop of the design should not change from the \"fully functional\" RTL0p8 drop.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 10.417.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (10) MCP/FP",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 10.417.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: No new MCPs in design",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: The multi-cycle and false paths in the final drop of the design should not change from the \"fully functional\" RTL0p8 drop.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Review the multi-cycle and false paths defined in the constraint files, ensure that they have not changed from what was delivered in RTL0p8.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 10.417.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 10.417.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "No new MCPs in design",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "11.105.a": {
          "algorithm": "1.Details:\na.Verify CR RDL files exist\ni.[rdlcrtop].rdl\n\nb. Verify security.pm file exists\n\nc.Override Tool Keys:\nrdlcrtop           = IP RDL CR Top Name (default=^[ip_cr_top].rdl$)\nrdlsearchpath = IP CR RDL Search Path (default=tools/srdl/cr/srdl)",
          "attributes": {},
          "background": "IPs must make sure that IP RDL quality meets quality requirements, defined in IP PLC and IPDS.\n\nhttps://securewiki.ith.intel.com/display/hdk/Hardware+Design+Kit\n\nSee also: https://dtspedia.intel.com/Nebulon ",
          "category": "RDL",
          "description": "Checks for CR RDL file existence.\n\nThe default release directory for CR RDL files is\n  ./tools/srdl/cr/srdl/[ip_cr_rdl_files].rdl",
          "logRecords": [],
          "name": "[CR] RDL file delivered",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.105.b": {
          "algorithm": "1.\tCheck for the existence of these 3 files - should have minimum 3 from the \"ralsearchpath\" dir\na.\t[rdlcrtop]_ral_env.svh\nb.\t[rdlcrtop]_ral_rtl_monitor.svh\nc.\t*_regs.svh\n\n2.\tOverride Tool Keys:\na.\trdlcrtop => same alias from index 11.105.a\nb.\tralsearchpath = CR RAL Search Path (default= verif/tb/cr/ovm)",
          "attributes": {},
          "background": "IPs must run nebulon and produce ovm files.\n1) These files must be run with current .rdl files found in the include lists of the svh files.\n2) These Released RAL files should not be modified manually\n3) Nebulon Tool Version must be aligned with IP release requirement\nNotes:\nIf IP has been given approval for top level RDL and RAL naming difference,\nThen the following workaround ( | operator for rdlcrtop setting) can be used to passing both 105.a and 105.b  for example: rdlcrtop = [rdltopname] | [raltopname];\n\nhttps://securewiki.ith.intel.com/display/hdk/Hardware+Design+Kit",
          "category": "RDL",
          "description": "Checks for CR RAL existence.\nThe default release directory for CR RAL files is\n./verif/tb/cr/ovm/[ip_cr_ral_files]\n\nCR RAL can be generated from \n    1) CR RDL through Nebulon \n    2) CR OSXML  through OneSource OVM-RAL Generator  (if available)\nNotes:\nIn general, it is required that\n\"IP top level file_naming is consist between RDL and RAL\"\n\nThis implies that IP Top Level RDL file name [rdlcrtop].rdl is\n   the same name as IP Top Level AddressMap=[rdlcrtop] in IP top level RDL,\nwhich Nebulon will generate IP top level RAL file name is as [rdlcrtop]_*",
          "logRecords": [],
          "name": "[CR] RAL files delivered",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.107.a": {
          "algorithm": "1.\tVerify FUSE RDL files exist in the rdlsearchpath\na.\t[rdlfusetop].rdl\n\n2.\tOverride Tool Keys:\na.\t rdlfusetop = IP RDL Fuse Top Name                  (default=^[<ip>_fuse_top].rdl$)\nb.      rdlfusesearchpath = IP Fuse RDL Search Path  (default=\"tools/srdl/fuse/srdl\")",
          "attributes": {},
          "background": "IPs must make sure that IP RDL quality meets quality requirements, defined in IP PLC and IPDS.\n\nThe SoCFuseGen for FUSE RDL Generation can be found in\nhttps://intelpedia.intel.com/SOCFuseGen\n\nHDK Help Link:\nhttps://securewiki.ith.intel.com/display/hdk/Hardware+Design+Kit",
          "category": "RDL",
          "description": "Checks for FUSE RDL file existence.\n   which is defined by Keys:\n      a) rdlfusetop\n      b) rdlfusesearchpath\n\nThe default release directory for Fuse RDL files are\n./tools/srdl/fuse/srdl/[ip_fuse_rdl_files].rdl",
          "logRecords": [],
          "name": "[FUSE] RDL file delivered",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.107.b": {
          "algorithm": "1.\tCheck for the existence of these 5 files - should have all 5 from the falsearchpath dir\na.\t*.csv\nb.\t*.fuse.html\nc.\t*.v\nd.\t*_classes.svh\ne.\t*_env.svh\nf.\t*_fuse.xml\n\n2.\tOverride Tool Keys:\na.\tfalsearchpath = Output fal search path   (default=verif/tb/fal/ovm)",
          "attributes": {},
          "background": "In general,\n  If IP uses SoCFuseGen to generate IP-Fuse Models,\n  Then IP follows following steps :\n     Step_1: Use SoCFuseGen ACES-Fuse to generate IP_Fuse.rdl\n     Step_2: Use SoCFuseGen with\"-soc_wrap\" option or dummy_soc.rdl to generate IP Fuse Models\n             Example Models :\n               * IP Fuse Spec  (CRIF, XML etc)\n               * IP Nebulon-Fuse.rdl\n               * IP Fuse RTL package etc\n               * IP Fuse Misc package\n     Step_3: Use Nebulon with IP Nebulon-Fuse.rdl to generate Fuse RAL Models\n\nSoCFuseGen Help Link:\n   https://intelpedia.intel.com/SOCFuseGen\n\nHDK Help Link:\nhttps://securewiki.ith.intel.com/display/hdk/Hardware+Design+Kit",
          "category": "RDL",
          "description": "Checks for the existence of the FAL files\n   which is located at search path defined by \"Key\"\n     1) falsearchpath\n\nThe default address is\n   ./verif/tb/fal/ovm/\nNotes:\n   IP needs to generate Fuse RAL models and delivered, regardless of specific SoC requires or Not.\n   IP Fuse RAL models are generated from IP Fuse RDL by using Nebulon",
          "logRecords": [],
          "name": "[FUSE] RAL Files Delivered",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.111.a": {
          "algorithm": "Linting tool aligned check:\n1. Nebulon CR RDL QualitChecker Log File (nebulon_[alias]_violations.xml) Exist\n     which is defined by Key: nebuloncheckerxmlfile\n2. Nebulon CR RDL QualitChecker Log File (nebulon_[alias]_violations.xml) contains violations,\n   Then it will check that\na. Waived CR RDLQualityChecker File Exist and Violations are all waived,\n       which is defined by Key: rdlcrcheckxmlfile\nb. IP RDL Waiver File Exist,\n       which is defined by Key: rdlcrcheckerwaiver\n\n and Waiver File Exist an\n\n      exist\n      If it dose contain violations,\n      Then\n\n3. Verify nebulon_[alias]_violations.xml file does not contain any unwaived violations.\n\n4. Override Tool Keys:\na. qtchcrsearchpath (default=tools/srdl/cr/srdl_qc)\nb. nebuloncheckerxmlfile = direct nebulon CR RDLQualityChecker Results\nc. rdlcrcheckerxmlfile =  Waived nebulon CR RDLQualityChecker Result, which is for Lintra runs\nd  rdlcrcheckerwaiver = CR RDL Waiver File\n\nLegacy check:\n1. Verify the base directory <MODEL_ROOT>/tb/verif/output/qualitychecker is present\n2. Verify the nebulon qualitychecker xml file exists. Default=/.*qc.xml/\n3. Run Lintra against qualitychecker result(*.qc.filter). \"PASS\" status is required.\n4. Keys: a. rdlqtchcrsearchpath (default=tb/verif/output/qualitychecker)\nOverride key for Nebulon QualityChecker output Directory = rdlqtchcrsearchpath\nOverride key for Nebulon QualityChecker violations XML file = nebuloncheckerxmlfile",
          "attributes": {},
          "background": "Here is some description how to run Nebulon qualitychecker and Lintra quality check.\n-- nebulon -input toprdl.rdl -out_dir . -qualitychecker\nAfter Nebulon qualitychecker run, there are two output files:\n1. output/qualitychecker/toprdl.qc.log\n2. output/qualitychecker/toprdl.qc.xml\n\nUser need to run the Lintra to check if pass the test.\ncheck this wiki for information on how to do that?\nhttps://dtspedia.intel.com/Nebulon#Nebulon_qualitychecker_Invocation_Switches\n\n1. toprdl.qc.filter\n2. toprdl_violations.xml\n\nUser need to update \"Rule Keys\", if output Directory and Violation File Name are different than default values:\n1.  Override key (rdlqtchcrsearchpath) for Nebulon QualityChecker output Directory = rdlqtchcrsearchpath\n2.  Override key (nebuloncheckerxmfile) for Nebulon QualityChecker violations XML file = nebuloncheckerxmlfile",
          "category": "RDL",
          "description": "IPs must run Nebulon RDLQulaityChecker and Pass with Approved Waiver\nand IP must provide the following files\n1) CR RDL QualityCheck run result without Waiver\n   (Direct Nebulon RDL QualityChecker results)\n   which is defined by Key \"nebuloncheckerxmlfile\"\n2) CR RDL QualityChecker run with Waiver \n    (Results after Filter_Waiver process)\n  which is defined by Key \"rdlcrcheckerxmlfile\"\n3) CR RDL Waiver File\n  which is defined by Key \"rdlcrcheckerwaiver\"\n\nThe default directory for RDL Quality Logs and Waiver Files are stored at the directory\n  ./tools/srdl/cr/srdl_qc/",
          "logRecords": [],
          "name": "[CR] RDL QualityChecker Run and Clean with Optional Waiver",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.112.a": {
          "algorithm": "Linting tool aligned check:\n1. SoCFuseGen Fuse RDL QualitChecker Log File Exist at Fuse RDL QC Log Directory\n          which is defined by Key: rdlfusecheckfile and rdlqtchfusesearchpath\n2. SoCFuseGen Fuse RDL QualitChecker Log File contains No violations\n3. Fuse Chassis Architecture Version is more than 2.10+\n\n4. Override Tool Keys:\na. rdlqtchfusesearchpath (default=tools/srdl/fuse/srdl_qc)\nb. rdlfusecheckerfile = direct SoCFuseGen IPFuseChecker.pl Results",
          "attributes": {},
          "background": "The IP provider is required to run IPFuseCheck for RDL Quality Check provided by SoCFUSEGen.\nThe following step is to invoke SoCFuseGen IPFuseCheck:\n1) setenv SOCFUSEGEN /p/hdk/rtl/proj_tools/socfusegen/latest\n2) $SOCFUSEGEN/bin/IPFuseCheck.pl\nNotes:\nDetailed Help in SoCFuseGen Intelpedia:   \n    https://intelpedia.intel.com/SOCFuseGen",
          "category": "RDL",
          "description": "The IP provider certifies that IP Fuse+Strap RDL Quality (Content and Syntax)\n meets requirements, which includes:\n1) IP Fuse RDL Quality (content and format) has been checked\n      by using SoCFuseGen IPFuseChecker.pl\n\n2) IP Fuse RDL (content) has passed review to make sure\n      the implementation matches the information given in the FUSE+STRAP RDL.\n\nThe default directory for Fuse RDL Quality Logs and Waiver Files are stored at the directory\n./tools/srdl/fuse/srdl_qc/",
          "logRecords": [],
          "name": "[FUSE+STRAP] RDL quality checks run",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.168.a": {
          "algorithm": "Verify that a Fuse RDL files exists.\nRetreive any include files referenced in Fuse RDL file.\nVerify that \"CmplFmt = 1;\" is in every addrmap in the files.\n\nOverride key for \nrdl fuse file = rdlfusetop\nrdl fuse directory = rdlfuse searchpath\nOverride key for rdl file search path = rdlsearchpath\nOverride key for additional fuse rdl file search path = rdlfusesearchpath",
          "attributes": {},
          "background": "Check that the Fuse RDL files adhere to the Completion format by checking\nthat each addrmap contains at most one \"CmplFmt = 1\".",
          "category": "RDL",
          "description": "IP should use the  \"Fuse Pull Completion Message Format\", \nand this should be indicated in the RTL/ system- RDL  file and documentation with\n   \"CmplFmt = 1;\" is in every addrmap in the IP RDL files\n\nWaiver can be granted after approved by Fuse Review",
          "logRecords": [],
          "name": "All IPs should use the 1.0 Fuse Pull Completion Message Format",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "11.262.a": {
          "algorithm": "Linting tool aligned check:\n1. Nebulon TAP RDL QualitChecker Log File (nebulon_[alias]_violations.xml) Exist\nwhich is defined by Key: nebulontapcheckerxmlfile\n2. Nebulon TAP RDL QualitChecker Log File (nebulon_[alias]_violations.xml) contains violations,\nThen it will check that\na. Waived TAP RDLQualityChecker File Exist and Violations are all waived,\nwhich is defined by Key: rdltapcheckxmlfile\nb. IP RDL Waiver File Exist,\nwhich is defined by Key: rdltapcheckerwaiver\n\nand Waiver File Exist an\n\nexist\nIf it dose contain violations,\nThen\n\n3. Verify nebulon_[alias]_violations.xml file does not contain any unwaived violations.\n\n4. Override Tool Keys:\na. rdlqtchtapsearchpath (default=tools/srdl/tap/srdl_qc)\nb. nebulontapcheckerxmlfile = direct nebulon TAP RDLQualityChecker Results",
          "attributes": {},
          "background": "Receiver:  SoC\n                SoC will use these package for TAP Validation and Documentation Review etc.\n    Requirement:  IP\n                IP needs to put the required files in the defined directory defined by this rule.\n                All these files for the RAL package are generated from Nebulon with TAP RDL input\n\nPlease see\n*\tHow to run at Nebulon QualityChecker Wiki\n               https://intelpedia.intel.com/Nebulon#Run_Nebulon_qualitychecker\n*\tNebulon RDLQualityChecker Detail is located at\n               https://ids.intel.com/docs/crm/nebulon/rdlqualitychecker/\n    \nIP has remote TAP Only\n  1) IP needs to mark sTAP is enabled inside IP to run all TAP RDL Related Checker in IPDS\n  2  IP can use \n           TapType = \"reg_only\"   \n           TapInstName = \"xxx_rTDRs\"   \n           name = \"remote TDRs for xxx\"  \n          desc = \"rTDRs to support IPs\" in IP TAP RDL",
          "category": "RDL",
          "description": "IPs must run Nebulon RDLQulaityChecker and Pass with Approved Waiver\nand IP must provide the following files\n1) TAP RDL QualityCheck run result without Waiver\n(Direct Nebulon RDL QualityChecker results)\nwhich is defined by Key \"nebulontapcheckerxmlfile\"\n2) TAP RDL QualityChecker run with Waiver \n(Results after Filter_Waiver process)\nwhich is defined by Key \"rdltapcheckerxmlfile\"\n3) TAP RDL Waiver File\nwhich is defined by Key \"rdltapcheckerwaiver\"\n\nThe default directory for RDL Quality Logs and Waiver Files is\n   ./tools/srdl/tap/srdl_qc/ \n\nEnhanced Nebulon TAP RDL quality check feature is only provided with\n      Nebulon version d17ww30+ \n\nIf Nebulon Tool Version does not provide Auto TAP RDL Quality Check,\nThen Manual TAP RDL Quality Review is Performed by Provider.\nOnly \"Mark\" it Passed, After TAP RDL has Passed Quality Review by Provider.\nNotes:\n   In general, the manual TAP RDL Quality Review needs to check the followings\nas example:\nTAP addrmaps must include the following properties:\n* TapInstName (No Special Character / No Space etc)\n* One or both of the following:\n- TapWithIdcode=true, TapSlvIdCodeValue and TapSlvIdCodeOpc",
          "logRecords": [],
          "name": "[TAP] RDL quality checks run",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.263.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "IP providers are expected to ensure correctness of TAP RDLs at entire TAP CR address space, compared to its Hardware Implementation.\n\nThere is currently no automated way to verify that the delivered TAP RDLs are consistent with the RTL implementation. Runs using IP Verification Environment with TAP BFM is a first order approximation. In particular, special attention must be given by those IPs : \" whose RDLs are not auto-generated from the same source as the RTL \".\n\nProvide log file in tb/verif",
          "category": "RDL",
          "description": "This is a manual check - \nMark as \"DONE\", only after verifying that the \n  RTL is matching TAP RDL description\n\nIn general, IP is required to \n  Step_1: CreateTAL from IP TAP RDL through Nebulon OVM-RAL Generator\n  Step_2: IP uses TAP BFM with TAL to verify RTL is matching with TAP RDL\n  Step_3: review IP Verification status to make sure that\n                  All TAP registers in all address space have been passed verification check\n Notes:\n    It is OK for IPs to use other methods to verify TAP RDL matching RTL",
          "logRecords": [],
          "name": "[TAP] RDL verified against RTL",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "11.271.a": {
          "algorithm": "Linting will only mark \"PASS\", if All 4 Checks meets checking requirements:\n1. CREST CR RDL_vs_RTL Verification Summary Log File (*_rdlvsrtl_summary.txt) Exist\n      which is defined by  Key: rdlvsrtlcheckerfile \n              at location defined by  Key: rdlvsrtlcrsearchpath\n2. CREST CR CRIF_vs_RTL Verification Summary Log File (*_crifvsrtl_summary.txt) Exist\n      which is  at location defined by  Key: rdlvsrtlcrsearchpath\n\n3. Verify CREST CR RDL_vs_RTL  Verification Summary Log File  (*_rdlvsrtl_summary.txt) contains\n    a)   Total_Testable_Target:   <Register_Number>\n           Verify <Register_Number> larger than 1\n    b)    Total Target Tested :    < %_of_Target_Targeted>\n           Verify < %_of_Target_Targeted>   > 90% (for IP)\n    c)  Total Waived Targets:   < %_of_Target_Waived>\n            Verify   < %_of_Target_Waived> < 10%  (for IP)\n    d)  Total Passing Targets:  < %_of_Target_Passed>\n          Verify < %_of_Target_Passed>  = 100% (for IP)\n\n4. Verify CREST CR CRIF_vs_RTL  Verification Summary Log File  (*_crifvsrtl_summary.txt) \n    a)   Validation_Summary:  PASS\n    b)   Total Testable Targets:  < Register_Number>\n           Verify <Register_Number> larger than 1\n\n",
          "attributes": {},
          "background": "1) IP providers are expected to \n      ensure correctness of CR RDLs at entire CR address space\n      compared to its Hardware Implementation.\n\n2) \"CREST\"  is currently automated way to verify that \n          the delivered CR RDLs/RALs are consistent with the RTL implementation.\n     The help wiki on CREST is at\n           https://goto/crest\n\n3) If IP does not use CREST to verify RDL/RAL_vs_RTL, \n        IP providers are expected to ensure correctness of the RDLs.\n        Runs using IP Verification Environment with BFM is a first order approximation.\n         In particular, special attention must be given by those IPs : \n              \" whose RDLs are not auto-generated from the same source as the RTL \".",
          "category": "RDL",
          "description": "IP must run CREST to verify CR RDL/RAL_vs_RTL \nand Lintra Checks CREST Summary Log File to make sure that \nIt has passed Verification Criteria for RDL/RAL_vs_RTL\nNotes:\n1) CR RDL/RAL_vs_RTL QualityCheck run result \n      (Direct CREST Verification Run Summary Log File : *_rdlvsrtl_summary.txt)\n       which is defined by Key \"rdlvsrtlcrcheckerfile\" \n          at location defined by Key \"rdlvsrtlcrsearchpath\"\n2) CR CRIF_vs_RTL QualityCheck run result \n      (Direct CREST CRIF Verification Run Summary Log File: *_crifvsrtl_summary.txt)\n    is also required to be stored \n           at location defined by Key \"rdlvsrtlcrsearchpath\"\n\nThe default directory for RDL_vs_RTL Quality Logs and Waiver Files are stored at the directory\n./verif/tb/cr/ovm/cr_qc/ \n\nIf IP does not use CREST to verify IP RDL_vs_RTL, it is required that\na)   IP provides RDL_vs_RTL Validation Quality Summary Log file, \n        similar to CREST summary LOG file\n  which has following format and Key Words in \"Summary Log File\"\n\n     Overall Summary :\n   ============================\n     Total Testable Targets:  < Register_Number>\n     Total Target Tested :    < %_of_Target_Targeted>\n     Total Passing Targets:  < %_of_Target_Passed>\n     Total Failing Targets:    < %_of_Target_Failed>\n     Total Waived Targets:   < %_of_Target_Waived>\n\nb)   IP provides CRIF_vs_RTL Validation Quality Summary Log file, \n        similar to CREST summary LOG file\n  which has following format and Key Words in \"Summary Log File\"\n\n      CRIF_vs_RTL Validation Summary\n     ===========================\n     Validation Summary:  <Pass / Fail>\n     Total Testable Targets:  < Register_Number>\n     Total Target Tested :    < %_of_Target_Targeted>\n     Total Passing Targets:  < %_of_Target_Passed>\n     Total Failing Targets:    < %_of_Target_Failed>\n     Total Waived Targets:   < %_of_Target_Waived>",
          "logRecords": [],
          "name": "[CR] RDL verified against RTL, using CREST",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.271.b": {
          "algorithm": "",
          "attributes": {},
          "background": "1) IP providers are expected to \n      ensure correctness of CR RDLs at entire CR address space\n      compared to its Hardware Implementation.\n\n2) \"CREST\"  is currently automated way to verify that \n          the delivered CR RDLs/RALs are consistent with the RTL implementation.\n     The help wiki on CREST is at\n           https://goto/crest\n\n3) If IP does not use CREST to verify RDL/RAL_vs_RTL, \n        IP providers are expected to ensure correctness of the RDLs.\n        Runs using IP Verification Environment with BFM is a first order approximation.\n         In particular, special attention must be given by those IPs : \n              \" whose RDLs are not auto-generated from the same source as the RTL \".",
          "category": "RDL",
          "description": "IP must run CREST to verify CR RDL/RAL_vs_RTL \nand Lintra Checks CREST Summary Log File to make sure that \nIt has passed Verification Criteria for RDL/RAL_vs_RTL\nNotes:\n1) CR RDL/RAL_vs_RTL QualityCheck run result \n      (Direct CREST Verification Run Summary Log File : *_rdlvsrtl_summary.txt)\n       which is defined by Key \"rdlvsrtlcrcheckerfile\" \n          at location defined by Key \"rdlvsrtlcrsearchpath\"\n2) CR CRIF_vs_RTL QualityCheck run result \n      (Direct CREST CRIF Verification Run Summary Log File: *_crifvsrtl_summary.txt)\n    is also required to be stored \n           at location defined by Key \"rdlvsrtlcrsearchpath\"\n\nThe default directory for RDL_vs_RTL Quality Logs and Waiver Files are stored at the directory\n./verif/tb/cr/ovm/cr_qc/ \n\nIf IP does not use CREST to verify IP RDL_vs_RTL, it is required that\na)   IP provides RDL_vs_RTL Validation Quality Summary Log file, \n        similar to CREST summary LOG file\n  which has following format and Key Words in \"Summary Log File\"\n\n     Overall Summary :\n   ============================\n     Total Testable Targets:  < Register_Number>\n     Total Target Tested :    < %_of_Target_Targeted>\n     Total Passing Targets:  < %_of_Target_Passed>\n     Total Failing Targets:    < %_of_Target_Failed>\n     Total Waived Targets:   < %_of_Target_Waived>\n\nb)   IP provides CRIF_vs_RTL Validation Quality Summary Log file, \n        similar to CREST summary LOG file\n  which has following format and Key Words in \"Summary Log File\"\n\n      CRIF_vs_RTL Validation Summary\n     ===========================\n     Validation Summary:  <Pass / Fail>\n     Total Testable Targets:  < Register_Number>\n     Total Target Tested :    < %_of_Target_Targeted>\n     Total Passing Targets:  < %_of_Target_Passed>\n     Total Failing Targets:    < %_of_Target_Failed>\n     Total Waived Targets:   < %_of_Target_Waived>",
          "logRecords": [],
          "name": "[CR] RDL verified against RTL, manually",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "11.272.a": {
          "algorithm": "TBD",
          "attributes": {},
          "background": "1) SoCFuseGen/Nebulon-FAL Based Verification Guideline\n   a) SoCFuseGen:  Create SoC-Lite IP Fuse Validation RDL-Collateral:  Nebulon-Fuse.rdl\nhttps://sharepoint.ger.ith.intel.com/sites/PDS_FAST/Arch_Solu/OneSource%20Documents/User%20Documentation/External%20Documents/SOCFuseGen_User_Manual.pdf\n   b) Nebulon-FAL Based Validation\nhttps://dtspedia.intel.com/Nebulon_User%27s_Guide#Generator:_Fuse\nhttp://dts-media2.intel.com/Training_Customer/HDK/Nebulon/index.html\n\nProvide log file of verification run using the fuse emulator BFM.\nNotes:\n1) This Log file is generated during FUSE test simulation run. And any text format is OK.\n2) This log file is used as archived log file to indicate FUSE Based Simulation has been performed and passed QC.",
          "category": "RDL",
          "description": "This is manual Rule Check -- Mark it \"Done\" only when \n1) IP provider certifies that the implementation matches the information given in the RDL\n      at entire FUSE+STRAP address space, which meets both\n\n2) Provide QC log file of verification to indicate FUSE Based Simulation has been performed and passed QC.  The Default Fuse Verification Log file will be located at\n    verif/tb/fuse/ovm/fuse/",
          "logRecords": [],
          "name": "[FUSE+STRAP] RDL verified against RTL",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "11.273.a": {
          "algorithm": "1.\tLintra Verification Details:\n\tVerify the at least 1 TAP RDL file exists (defined by Key: rdltapfile)\n          at location (defines by Key: rdltapsearchpath)\n\n2. Override Tool Keys\nrdltapfile = (default: ^tap.rdl$)  tap RDL Top file\nrdltapsearchpath = (default: tools/srdl/tap/srdl)   TAP RDL Search Path",
          "attributes": {},
          "background": "For IP supports different type of TAP structure, the followings are recommended as IPDS check\n1) For Single TAP RDL IP, [rdltaptop]= IP_TAP_Name\n2) For Multi-TAP RDL IP,  [rdltaptop] can be any one of individual TAP_Name\n\n\nNebulon quality check log file is delivered.\n\nhttps://employeeportal.intel.com/irj/Intel_Foundry_Services/DesignHome?forcedURL=/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RegMgmt.htm",
          "category": "RDL",
          "description": "Checks for TAP RDL file existence.\n\nThe default release directory for TAP RDL files is\n./tools/srdl/tap/srdl/[ip_tap_rdl_files].rdl \n\nNotes:\nIf IP has TAP sub-network with multiple IP TAPs and TOP level RDL wrapper,\nThen the rule should be applied to each individual IP TAP RDL, \nbut the network level RDL addrmap should be skipped.",
          "logRecords": [],
          "name": "[TAP] RDL file delivered",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.273.b": {
          "algorithm": "",
          "attributes": {},
          "background": "TAP RDL Reference can be found in Nebulon_DFx Help :\nhttps://intelpedia.intel.com/Nebulon_for_DFX#Chassis_TAP_Tool\n\nIP needs to generate its assoicated TAP TAL (OVM Model) from Nebulon, based on this TAP RDL as RDL quality sanity check.",
          "category": "RDL",
          "description": "It is Manual Rule Check -- Mark it \"Done\" only if IP TAP RDL has\n1) included ALL TDRs and STF registers\n     Notes:\n       * IP only needs to have TDRs documented in RDL, if no STF regs\n       * IP only needs to have STF documented in RDL, if no TDRs\n2) passed Design/Verification RDL content quality review check",
          "logRecords": [],
          "name": "All TDRs and STF regs documented in RDL",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "11.273.c": {
          "algorithm": "Checks for the existence of these files under \"talsearchpath\"\na. [rdltaptop].tdr\nb. [rdltaptop]_tap_regs.svh or [rdltaptop]_def_tap_regs.svh\nc. dfx.csv\nd. dfx.params\ne. dfx.xls\n\n",
          "attributes": {},
          "background": "It is required that \"IP TAP RAL release file is generated directly from Nebulon Tool without manual modification.\n1) For Single TAP RDL IP, [rdltaptop]= TAP_Top_Name\n2) For Multi-TAP RDL IP, [rdltaptop] can be any one of TAP_Name\n\nThese files are generated by nebulon (note that your project may be using a different nebulon version):\nsource /p/hdk/rtl/cad/?machine_op_version?/dt/nebulon/?tool_version?/bin/setup\n$NEBULON_DIR/bin/nebulon -input .rdl -dfx -out_dir .\n\nReceiver:  SoC\n      SoC will use these package for TAP Validation and Documentation Review etc. Purpose\n    Requirement:  IP needs to put the required files in the defined directory defined by this rule.\n                         All these files for the RAL package are generated from Nebulon with TAP RDL input",
          "category": "RDL",
          "description": "Checks for TAP RAL existence, which is defined by KEY:  \"rdltaptop\"\n  at the location, which is defined by KEY: \"talsearchpath\"\n\nThe default release directory for TAP RAL files is at\n./verif/tb/tap/ovm/[ip_tap_ral_files]\n\nTAP RAL can be generated from \n1) TAP RDL through Nebulon OVM-RAL Generator",
          "logRecords": [],
          "name": "[TAP] RAL files generated and delivered",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.322.a": {
          "algorithm": "",
          "attributes": {},
          "background": "Contact CR_WG, if the requirement is not clear\n     Stanton, Matthew <matthew.stanton@intel.com>\nor  Zou, Yuwen <yuwen.zou@intel.com>",
          "category": "RDL",
          "description": "This is Manual Check Rule for CR RDL Quality Check, which is not covered by CR RDL auto-check rules.\n\nRegister/Field \"Names\"/\"Description\" Requirement \n1) must be\n*\tEasily understood, Clear and unambiguous, Specific and detailed\n*\tRecognizable enough that a person scanning the list can quickly identify the Register or Bit\n*\tDescriptive enough that an external customer can understand them\n*\tTitle Case, which all words must begin with a capital letter\n*\tShould provide enough clarity to define the purpose of the register or bit\n*\tFormatting is mandatory\n*\tCell bit set and clear should be clearly stated as:\n            0 = This action does this\n\n2) must not have\n*\tNames/titles with internal abbreviations that make no sense\n*\tDuplication of Other Register Name\n*\tAcronyms or Code Names\n*\tGrammar/Formatting errors\n*\tTBD*, Contact Person's Name/Email Address etc.\n\nRegister/Field \"IntelRSVD\" Requirement\n*\tMust Specify \"IntelRSVD\" for each register/field defined\n         IntelRSVD = \"True\" Means that Register can not been seen by external customer",
          "logRecords": [],
          "name": "[CR] Proper resgister documentation has been provided",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "11.371.a": {
          "algorithm": "Linting compliance check is performed as follows:\n    It will only marked it \"PASS\", when the following 3 checking steps are Passed\n\n1. Check \"Fuse Definition XML File\" Exist at Fuse RDL Directory\n     which is defined by\n          Key: xmlfusetop\n          Key: rdlfusesearchpath\nNotes:\n       Key \"rdlfusearchpath\" is also used in RDL Rule 11.107.a\n\n2. Check \"SoCFuseGen Fuse RDL QualitChecker Log File\" Exist at Fuse RDL QC Log Directory\n     which is defined by \n           Key: rdlfusecheckfile   \n           Key: rdlqtchfusesearchpath \nNotes:\n    They are the same \"Key\" used in RDL_11.112.a Rule\n\n3. Check Fuse RDL (Content and Format) Quality  \n      SoCFuseGen Fuse RDL QualitChecker Log File contains \n      a) ACETemplate Version is newer than 2.10 (including 2.10 version)\n      b) All Fuse are mapped to Features\n     \n4. Override Tool Keys:\na. rdlqtchfusesearchpath (default=tools/srdl/fuse/srdl_qc)\nb. rdlfusecheckerfile = direct SoCFuseGen IPFuseChecker.pl Results\nc. xmlfusetop (default: *_fuse.xml)\nd. rdlfusesearchpath",
          "attributes": {},
          "background": "The IP provider is required to run IPFuseCheck for RDL Quality Check provided by SoCFUSEGen.\nThe following step is to invoke SoCFuseGen IPFuseCheck:\n1) setenv SOCFUSEGEN /p/hdk/rtl/proj_tools/socfusegen/latest\n2) $SOCFUSEGEN/bin/IPFuseCheck.pl\nNotes:\nDetailed Help in SoCFuseGen Intelpedia: \nhttps://intelpedia.intel.com/SOCFuseGen",
          "category": "RDL",
          "description": "The IP provider certifies that IP Fuse+Strap RDL has been compliant to\n    Fuse-Feature Based Format \nby verifying IP Fuse RDL Quality (content and format) by \n    running SoCFuseGen IPFuseChecker.pl\n\nThe default directory for Fuse RDL Quality Logs and Waiver Files are stored at the directory\n./tools/srdl/fuse/srdl_qc/",
          "logRecords": [],
          "name": "[FUSE+STRAP] Feature Based Fuse Compliance",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.372.a": {
          "algorithm": "TBD",
          "attributes": {},
          "background": "Intel Fuse Overall Tool-Flow-Methodology and Requirement Hub is located at\n    https://sharepoint.amr.ith.intel.com/sites/fuseE2E/SitePages/Home.aspx",
          "category": "RDL",
          "description": "This is Manual Check Rule -- Marked it \"Done\" only after\n1)  IP Fuse+STRAP have been Passed IP Fuse Review Board Review\n2)  Approved for Integration into SoC by  IP Fuse Review Board Review\n3)  Archive IP Fuse Review Board Review Summary and Waiver File located at\n       tools/srdl/fuse/srdl_qc/",
          "logRecords": [],
          "name": "[FUSE+STRAP] Complete IP Fuse Review Board review",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "11.373.a": {
          "algorithm": "Linting check is performed as follows:\nIt will only marked it \"PASS\", when the following checking step is Passed\n\n1. Check \"Fuse RDL Quality Run Log File\" and \"Fuse RDL Review Summary File\" Exist\n    at Fuse RDL QC Directory\nwhich is defined by\nKey: rdlfusecheckerfile   (SoCFuseGen IPFuseChecker.pl Run Summary Log File)\nKey:  fusereviewfile    (Fuse RDL review Board Review Summary File)\nKey: qtchfusesearchpath (Fuse RDL QC Directory) (same Key as Rule RDL_11.112.a)\nThe above KEYs (rdlfusecheckerfile, qtchfusesearchpath) are also used in RDL_11.112.a \n\n2. Override Tool Keys:\na. rdlqtchfusesearchpath (default=tools/srdl/fuse/srdl_qc)\nb. rdlfusecheckerfile = direct SoCFuseGen IPFuseChecker.pl Results\nc. fusereviewfile (default= <IPTop>_statys_summary.xml)\n\nc. xmlfusetop (default: *_fuse.xml)\nd. rdlfusesearchpath",
          "attributes": {},
          "background": "The IP provider is required to run IPFuseCheck for RDL Quality Check provided by SoCFUSEGen.\nThe following step is to invoke SoCFuseGen IPFuseCheck:\n1) setenv SOCFUSEGEN /p/hdk/rtl/proj_tools/socfusegen/latest\n2) $SOCFUSEGEN/bin/IPFuseCheck.pl\nNotes:\nDetailed Help in SoCFuseGen Intelpedia: \nhttps://intelpedia.intel.com/SOCFuseGen",
          "category": "RDL",
          "description": "IP Fuse+Strap RDL Waiver and Quality Validation Log Files \n     1) SoCFuseGen IPFuseChcker.pl Run Log File\n     2) Fuse Review Summary File, \n           which contains official Waiver from Fuse Review Board Review\nhave been delivered at Fuse RDL QC summary directory.\n\nThe default directory for Fuse RDL Quality Logs and Waiver Files are stored at the directory\n./tools/srdl/fuse/srdl_qc/ \nwhich can be over-written by Key:  qtchfusesearchpath (same as Rule RDL_11.112.a)",
          "logRecords": [],
          "name": "[FUSE+STRAP] Waiver/Log Files Delivered",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "11.379.a": {
          "algorithm": "It will only mark the rule as \"PASS\", if the following checks are Passed:\na.Verify that following files exist at location defined by Key:  osxmlsearchparth\n1) ./ReferencedContent directory exists and is Not Empty\n2) ./[osxmlcrtop]/Configurations directory exists and is Not Empty\n3) ./[osxmlcrtop]/ControlResigsters directory exists and in Not Empty\n4) file ./[osxmlcrtop]/ControlRegisters/SaiAgentCollection_SaiAgentCollection.os.xml exists\nAlternatively a file with name pattern SaiAgentCollection_SaiAgentCollection*.os.xml exists under the ./ReferencedContent directory hierarchy\n5) file ./[osxmlcrtop]/ControlRegisters/SaiPolicyCollection_SaiPolicyCollection.os.xml exists\nAlternatively a file with name pattern SaiPolicyCollection_SaiPolicyCollection*.os.xml exists under the ./ReferencedContent directory hierarchy\n\nb. Check for Security File inclusion during Publishing Flow.\n",
          "attributes": {},
          "background": "OneSource General Help Wiki Page is located at:\n     https://dtspedia.intel.com/OneSource\n\nFor OneSource Spec Publishing Flow Help Wiki, it is located at:\n     https://dtspedia.intel.com/OneSource/Publishing_Flow\n\nFor OneSource Native Authoring Flow Help Wiki, it is located at:\n      https://dtspedia.intel.com/OneSource/Mode_of_Work\n      https://dtspedia.intel.com/OneSourceStudio\n      https://dtspedia.intel.com/OneSourceClient",
          "category": "RDL",
          "description": "Checks for CR OneSource files (OSXML) existence in Design Database\nand that they are released as a part of IP Model Release Package,\nfor both CR Spec Publishing and CR Native Authoring using the OneSource Flow.\nNotes:\n     The OneSource RDL Model for CR are created by running OneSource RDL Exporter.\n     \nThe default release directory for CR OneSource files is:\n./tools/oneseource/cr/",
          "logRecords": [],
          "name": "[CR] OneSource Model Release",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.118.a": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {
            "collateral: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
            "key: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary"
          },
          "background": "It will ensure collateral follows RDT-SYN methods for collateral. Also make sure that set_clock_relation|set_clock_groups command does NOT exist in any tcl file except global_cross_clk_groups.tcl\n\nhttp://wiki.ith.intel.com/display/designkits/Synthesis+Constraints+Methodology\n",
          "category": "Phys Design Enabling",
          "description": "Exceptions among clock groups should be described in global_cross_clk_groups.tcl.  Note that the title of 12.118 requires these to exist in _cross_clk_exceptions.tcl. This filename isn't supported, but global_cross_clk_exceptions.tcl is supported by RDT and will be accepted currently.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 12.118.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (12) Phys Design Enabling",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 12.118.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Exceptions among clock groups should be described in global_cross_clk_groups.tcl",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Exceptions among clock groups should be described in global_cross_clk_groups.tcl.  Note that the title of 12.118 requires these to exist in _cross_clk_exceptions.tcl. This filename isn't supported, but global_cross_clk_exceptions.tcl is supported by RDT and will be accepted currently.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n\t2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\n\tFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\n\tOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "running rule 12.118.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Looking for rdtsynsummaryfile: ['.//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary']",
              "severity": "INFO"
            },
            {
              "file": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
              "line": "",
              "msg": "For Rule \"12.118.a\"  and MileStone \"RTL1P0\", the status is \"PASS\" ",
              "severity": "INFO"
            }
          ],
          "name": "Exceptions among clock groups should be described in global_cross_clk_groups.tcl",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.120.a": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {},
          "background": "Make sure only necessary scripts are provided and no other extra or unused scripts exist.\nThis is to avoid overriding of any KIT default scripts\n\nhttps://wiki.ith.intel.com/display/designkits/Synthesis+Quick+Start",
          "category": "Phys Design Enabling",
          "description": "Only required and optional scripts should exist in tools/syn/scripts folder. No other scripts should be present\nRequired scripts: block_setup.tcl rtl_list.tcl clock_uncertainty.tcl <IP_top>_clocks.tcl <IP_top>_io_constraints.tcl\noptional scripts: global_contraints.tcl global_cross_clock_exceptions.tcl <IP_top>_internal_exceptions.tcl <IP_top>_interface_exceptions.tcl <IP_top>_scan_config.tcl PRE.*.tcl POST.*.tcl",
          "logRecords": [],
          "name": "Any custom synthesis flow recipes delivered with IP drop and documented in integration guide.",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.124.a": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile\n",
          "attributes": {
            "collateral: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
            "key: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary"
          },
          "background": "http://wiki.ith.intel.com/display/designkits/PV+Flow+Guide",
          "category": "Phys Design Enabling",
          "description": "Provied in the RDT pre-defined location: http://kits.intel.com/p1273/kits/p1273_1.6.0/container.php?page=syn_flow",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 12.124.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (12) Phys Design Enabling",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 12.124.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Provide timing reports for review and quality checking.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Provied in the RDT pre-defined location: http://kits.intel.com/p1273/kits/p1273_1.6.0/container.php?page=syn_flow",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n\t2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\n\tFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\n\tOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "running rule 12.124.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Looking for rdtsynsummaryfile: ['.//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary']",
              "severity": "INFO"
            },
            {
              "file": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
              "line": "",
              "msg": "For Rule \"12.124.a\"  and MileStone \"RTL1P0\", the status is \"PASS\" ",
              "severity": "INFO"
            }
          ],
          "name": "Provide timing reports for review and quality checking.",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.124.b": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {},
          "background": "http://wiki.ith.intel.com/display/designkits/PV+Flow+Guide",
          "category": "Phys Design Enabling",
          "description": "Timing clean in RDT-SYN to 10% of cycle time for RTL0p5, and effectively timing clean for RTL0p8 and RTL1p0\n\nThis rule is being checked directly in RDT-Syn version 14.4.1 and hence is dependent on the IPP using that version of RDT-Syn. If the IPP has not migrated to that version of RDT-Syn yet, the IPP will have to override the rules to Manual and grade them manually.",
          "logRecords": [],
          "name": "Synthesis results meet timing requirements for drop",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.275.a": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {},
          "background": "Report check_mv_design is run and free of errors.  Warnings and understood and reviewed\n\nhttp://wiki.ith.intel.com/display/designkits/Power+Analysis+Flow+Guide",
          "category": "Phys Design Enabling",
          "description": "Make sure the check_mv design run in DC. No errors or warinings. Waivers could exist and should be documented",
          "logRecords": [],
          "name": "\"check_mv_design\" is run and free of errors.Warnings are understood and reviewed",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "12.275.b": {
          "algorithm": "Locate the block_setup.tcl script in tools/syn/script.\nCheck the block_setup.tcl file to ensure that variable G_UPF is set to \"1\".\nExample: set G_UPF 1 or setvar G_UPF 1\nOverride key for SYN scripts directory = synscriptsdir",
          "attributes": {},
          "background": "RTL hardware design and UPF must be co-developed to enable physical design\n\nhttp://wiki.ith.intel.com/display/designkits/Power+Analysis+Flow+Guide\n\nExternal Tool Dependencies:\nRDTsyn",
          "category": "Phys Design Enabling",
          "description": "check synthesis setup files to ensure that UPF consumption was enabled during run.",
          "logRecords": [],
          "name": "Syn run with UPF enabled",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "12.276.a": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile\n",
          "attributes": {},
          "background": "No missing I/O contsraints, based on check_design report  add to 0.0 if there is a requirement to run DC at that milestone. Default input/output delay should be 70%  and will be changed for specifc pins based on actual budgeting.\n\nhttp://wiki.ith.intel.com/display/designkits/Synthesis+Constraints+Methodology\n\n",
          "category": "Phys Design Enabling",
          "description": "All inputs and outputs have IO delay constraints with correct reference clock",
          "logRecords": [],
          "name": "All inputs and outputs have I/O delay constraints that allocate 70% of guardbanded clock cycle to outside the IP with the correct reference clock",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.277.a": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile\n",
          "attributes": {},
          "background": "http://wiki.ith.intel.com/display/designkits/Synthesis+Constraints+Methodology",
          "category": "Phys Design Enabling",
          "description": "All constriants file exist, follow RDT naming conventions, Clock file and IO constraints file are mandatory and should not be empty.   More RDT guidelines here: TBD",
          "logRecords": [],
          "name": "Provide all physical constraint files",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "12.277.b": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "http://wiki.ith.intel.com/display/designkits/Synthesis+Constraints+Methodology",
          "category": "Phys Design Enabling",
          "description": "All DFX MCOs written and implemented",
          "logRecords": [],
          "name": "All DFX MCOs written and implemented",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "12.277.c": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {},
          "background": "For constraint files, this ensures the SoC can reuse the constraints by modifying variables rather than editing hard coded values.\n\nhttp://wiki.ith.intel.com/display/designkits/Synthesis+Constraints+Methodology",
          "category": "Phys Design Enabling",
          "description": "Checks constraint files for \"-clock\" and ensures the value provided comes from a variable or a tcl return",
          "logRecords": [],
          "name": "Clock name should be a tcl variable and not hard coded in all constraint files.",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "12.277.d": {
          "algorithm": "1.  Check that the master sdc file (defined by key 'mastersdc') exists in IP release path (defined by key 'ipreleasepath')\n2.  Verify that the master sdc file sources the clock constraints sdc file",
          "attributes": {},
          "background": "Constraints in SDC format should be available for SOC reuse using particular naming convention and location. They are generated at  $WARD/fishtail/$block/results/setup/constraints and packaging flow or IP custom script has to copy following list of files to $IP_RELEASE_PATH/constraints\nFile that need to be copied: \nClocks ${ip_name}.clocks.sdc \nClock groups ${ip_name}.clock_groups.sdc \nExceptions ${ip_name}.exceptions.sdc\nCase analysis settings ${ip_name}.case.sdc\nIO Constraints ${ip_name}.io.sdc\n \nFile $ip_name.clocks.sdc is always required. All other files are optional but they should be copied from fishtail output directory for future SOC re-use.  \nZircon will check presence of $ip_name.clocks.sdc in the $IP_RELEASE_PATH/constraints and if other sdc files are present.\nIn addition \"master\" sdc file $i{p_name}.sdc  should be created by packaging flow or SIP custom script.\nThis \"master\" sdc file $i{p_name}.sdc  has to source all available sdc files.\n\nSo , steps are: \nCreate <ip_name>.sdc \nSource the modular sdc files one-by-one (if they exist)\nsource <path>/$i{p_name}.clocks.sdc\nsource <path>/$i{p_name}.clock_groups.sdc\nsource <path>/$i{p_name}.exceptions.sdc\nsource <path>/$i{p_name}.case.sdc\nsource <path>/$i{p_name}.io.sdc \nsource <path>/$i{p_name}.misc.sdc\n\nZircon will check presence of ${ip_name}.sdc in the $IP_RELEASE_PATH/constraints\n\nhttps://securewiki.ith.intel.com/download/attachments/191662763/SIIP%20Constraints%20ww41p4.pptx?version=1&modificationDate=1543480541923&api=v2\n",
          "category": "Phys Design Enabling",
          "description": "Constraints in SDC format should be available for SOC reuse using particular naming convention and location. Set of categorized SDC are generated by Fishtail, $i{p_name}.sdc should be created by packaging flow or custom IP script.",
          "logRecords": [],
          "name": "Fishtail generated categorized SDC files and IP master sdc file delivered",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "12.281.a": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile\n",
          "attributes": {},
          "background": "http://wiki.ith.intel.com/display/designkits/Synthesis+Scan+Methodology",
          "category": "Phys Design Enabling",
          "description": "Checks for the existence of the <IP>_scan_waivers.tcl file (or alternate)",
          "logRecords": [],
          "name": "Any configuration necessary for proper insert_dft run delivered in <design>_scan_config.tcl ",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "12.287.a": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {},
          "background": "http://kits.intel.com/",
          "category": "Phys Design Enabling",
          "description": "All Inputs / Outputs of IP or sub IP which is an APR block should be flopped, any exception to that should be provided in a designated file.\n\nThis rule is being checked directly in RDT-Syn version 14.14.1 and hence is dependent on the IPP using that version of RDT-Syn. If the IPP has not migrated to that version of RDT-Syn yet, the IPP will have to override the rules to Manual and grade them manually.",
          "logRecords": [],
          "name": "All I/Os are flopped",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "12.292.a": {
          "algorithm": "There must be an accurate list of IP port name changes (additions or removals) between each consecutive release",
          "attributes": {},
          "background": "Clearly communicating the IP interface changes leads to faster integration. If the changes are anticipated for final release(1.0), this communication should occur as early as possible before the IP release.\n\nhttp://kits.intel.com",
          "category": "Phys Design Enabling",
          "description": "IP providers must explicitly provide following information in integration guide.\n- Any additional ports or parameters as compared to previous release to SOC.\n- Any deleted ports or parameters as compared to previous release to SOC.\n- Any changes to the names of ports or parameters including case change.\n- Any changes to the underlying description or usage of ports or parameters.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 12.292.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (12) Phys Design Enabling",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 12.292.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Top level port and parameter changes are defined and documented between releases",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: IP providers must explicitly provide following information in integration guide.\n\t- Any additional ports or parameters as compared to previous release to SOC.\n\t- Any deleted ports or parameters as compared to previous release to SOC.\n\t- Any changes to the names of ports or parameters including case change.\n\t- Any changes to the underlying description or usage of ports or parameters.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: There must be an accurate list of IP port name changes (additions or removals) between each consecutive release",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 12.292.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 12.292.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Top level port and parameter changes are defined and documented between releases",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "12.293.a": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {
            "collateral: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
            "key: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary"
          },
          "background": "Ideally IP should target to a superset of requirements of all it's target projects and run synthesis once per process node. IP to publish what parameters  have been used and the result\n\nhttps://wiki.ith.intel.com/display/designkits/Synthesis+Quick+Start",
          "category": "Phys Design Enabling",
          "description": "Do not use current_design command in any of the scripts\n\nThis rule is being checked directly in RDT-Syn version 14.14.1 and hence is dependent on the IPP using that version of RDT-Syn. If the IPP has not migrated to that version of RDT-Syn yet, the IPP will have to override the rules to Manual and grade them manually.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 12.293.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (12) Phys Design Enabling",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 12.293.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: The current_design command or any procedure using current_design does not exist in the constraints",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Do not use current_design command in any of the scripts\n\t\n\tThis rule is being checked directly in RDT-Syn version 14.14.1 and hence is dependent on the IPP using that version of RDT-Syn. If the IPP has not migrated to that version of RDT-Syn yet, the IPP will have to override the rules to Manual and grade them manually.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n\t2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\n\tFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\n\tOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "running rule 12.293.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Looking for rdtsynsummaryfile: ['.//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary']",
              "severity": "INFO"
            },
            {
              "file": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
              "line": "",
              "msg": "For Rule \"12.293.a\"  and MileStone \"RTL1P0\", the status is \"PASS\" ",
              "severity": "INFO"
            }
          ],
          "name": "The current_design command or any procedure using current_design does not exist in the constraints",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.293.b": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {
            "collateral: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
            "key: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary"
          },
          "background": "Guardband and clock uncertainties are in place to ensure IP can still meet timing after process and physical design variation and degradations\n\nhttps://wiki.ith.intel.com/display/designkits/Synthesis+Quick+Start",
          "category": "Phys Design Enabling",
          "description": "RDT-syn run with appropriate PVT (guardband and clock uncertainty)\n\nThis rule is being checked directly in RDT-Syn version 14.14.1 and hence is dependent on the IPP using that version of RDT-Syn. If the IPP has not migrated to that version of RDT-Syn yet, the IPP will have to override the rules to Manual and grade them manually.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 12.293.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (12) Phys Design Enabling",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 12.293.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: IP synthesized per drop at converged PVT/Guardband",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: RDT-syn run with appropriate PVT (guardband and clock uncertainty)\n\t\n\tThis rule is being checked directly in RDT-Syn version 14.14.1 and hence is dependent on the IPP using that version of RDT-Syn. If the IPP has not migrated to that version of RDT-Syn yet, the IPP will have to override the rules to Manual and grade them manually.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n\t2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\n\tFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\n\tOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "running rule 12.293.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Looking for rdtsynsummaryfile: ['.//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary']",
              "severity": "INFO"
            },
            {
              "file": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
              "line": "",
              "msg": "For Rule \"12.293.b\"  and MileStone \"RTL1P0\", the status is \"PASS\" ",
              "severity": "INFO"
            }
          ],
          "name": "IP synthesized per drop at converged PVT/Guardband",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.293.c": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {
            "collateral: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
            "key: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary"
          },
          "background": "RTL hardware design and UPF must be co-developed to enable physical design\n\nhttps://wiki.ith.intel.com/display/designkits/Synthesis+Quick+Start",
          "category": "Phys Design Enabling",
          "description": "block_setup.tcl should contain at least these 2 variables.\nG_DESIGN_NAME and G_LIBRARY_TYPE",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 12.293.c ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (12) Phys Design Enabling",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 12.293.c",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: The block_setup.tcl file is clean",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: block_setup.tcl should contain at least these 2 variables.\n\tG_DESIGN_NAME and G_LIBRARY_TYPE",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n\t2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\n\tFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\n\tOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "running rule 12.293.c",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Looking for rdtsynsummaryfile: ['.//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary']",
              "severity": "INFO"
            },
            {
              "file": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
              "line": "",
              "msg": "For Rule \"12.293.c\"  and MileStone \"RTL1P0\", the status is \"PASS\" ",
              "severity": "INFO"
            }
          ],
          "name": "The block_setup.tcl file is clean",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.293.d": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {
            "collateral: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
            "key: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary"
          },
          "background": "Ensure the rtllist.tcl and RTL provided match RDT-syn collateral\n\nhttps://wiki.ith.intel.com/display/designkits/Synthesis+Quick+Start",
          "category": "Phys Design Enabling",
          "description": "rtllist.tcl matches RTL and netlist\n\nThis rule is being checked directly in RDT-Syn version 14.14.1 and hence is dependent on the IPP using that version of RDT-Syn. If the IPP has not migrated to that version of RDT-Syn yet, the IPP will have to override the rules to Manual and grade them manually.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 12.293.d ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (12) Phys Design Enabling",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 12.293.d",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: rtllist.tcl matches RTL and netlist",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: rtllist.tcl matches RTL and netlist\n\t\n\tThis rule is being checked directly in RDT-Syn version 14.14.1 and hence is dependent on the IPP using that version of RDT-Syn. If the IPP has not migrated to that version of RDT-Syn yet, the IPP will have to override the rules to Manual and grade them manually.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n\t2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\n\tFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\n\tOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "running rule 12.293.d",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Looking for rdtsynsummaryfile: ['.//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary']",
              "severity": "INFO"
            },
            {
              "file": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
              "line": "",
              "msg": "For Rule \"12.293.d\"  and MileStone \"RTL1P0\", the status is \"PASS\" ",
              "severity": "INFO"
            }
          ],
          "name": "rtllist.tcl matches RTL and netlist",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.293.e": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {
            "collateral: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
            "key: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary"
          },
          "background": "https://wiki.ith.intel.com/display/designkits/Synthesis+Quick+Start",
          "category": "Phys Design Enabling",
          "description": "dc.log delivered and is free of errors\n\nThis rule is being checked directly in RDT-Syn version 14.14.1 and hence is dependent on the IPP using that version of RDT-Syn. If the IPP has not migrated to that version of RDT-Syn yet, the IPP will have to override the rules to Manual and grade them manually.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 12.293.e ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (12) Phys Design Enabling",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 12.293.e",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Syn run free of errors",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: dc.log delivered and is free of errors\n\t\n\tThis rule is being checked directly in RDT-Syn version 14.14.1 and hence is dependent on the IPP using that version of RDT-Syn. If the IPP has not migrated to that version of RDT-Syn yet, the IPP will have to override the rules to Manual and grade them manually.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n\t2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\n\tFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\n\tOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "running rule 12.293.e",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Looking for rdtsynsummaryfile: ['.//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary']",
              "severity": "INFO"
            },
            {
              "file": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
              "line": "",
              "msg": "For Rule \"12.293.e\"  and MileStone \"RTL1P0\", the status is \"PASS\" ",
              "severity": "INFO"
            }
          ],
          "name": "Syn run free of errors",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.293.f": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {},
          "background": "All sequential elements are clocked.\n\nhttps://wiki.ith.intel.com/display/designkits/Synthesis+Quick+Start",
          "category": "Phys Design Enabling",
          "description": "Check the design_qor report for any unclocked registers and delivered by the RDT-SYN report.",
          "logRecords": [],
          "name": "No unclocked registers in DC Synthesis results",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.293.g": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {
            "collateral: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
            "key: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary"
          },
          "background": "Ensure design_qor file from the KIT is provided and has content.",
          "category": "Phys Design Enabling",
          "description": "Ensure design_qor file from the KIT is provided and has content.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 12.293.g ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (12) Phys Design Enabling",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 12.293.g",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Gate count numbers provided through design_qor report",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Ensure design_qor file from the KIT is provided and has content.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n\t2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\n\tFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\n\tOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "running rule 12.293.g",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Looking for rdtsynsummaryfile: ['.//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary']",
              "severity": "INFO"
            },
            {
              "file": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
              "line": "",
              "msg": "For Rule \"12.293.g\"  and MileStone \"RTL1P0\", the status is \"PASS\" ",
              "severity": "INFO"
            }
          ],
          "name": "Gate count numbers provided through design_qor report",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "12.294.a": {
          "algorithm": "Check 'Remaining Violations' (RV) and  'Status' for each rule in the summary file. Remaining violations for each rule should be 0, and Status should not be 'FAIL'.",
          "attributes": {},
          "background": "https://wiki.ith.intel.com/display/designkits/Caliber",
          "category": "Phys Design Enabling",
          "description": "Caliber check for all included rules are clean.\n\nCaliber checks run as a part of the Performance Verification package, and is dependent on RDT-Syn runs for input data.  These checks are designed to look for structural issues that must be addressed in RTL.",
          "logRecords": [],
          "name": "Caliber checks passing",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "12.55.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://wiki.ith.intel.com/display/designkits/Synthesis+Quick+Start",
          "category": "Phys Design Enabling",
          "description": "This rule is applicable for memories / RF / PLL  , LDO and similar blocks : timing lib required. List of blocks  part of RDT script .  .  Backend / physical design data is coming from IRR. Provide  IRR IDs as part of the list. Instructions in Integration Guide for physical integration provided.  RDT EBB guidelines here: http://kits.intel.com/p1273/kits/p1273_1.6.0/container.php?page=apr_integration",
          "logRecords": [],
          "name": "HIPS/EBBs correctly instantiated from IRR and synthesized with correct module name in correct process technology",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "12.6.a": {
          "algorithm": "1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\nFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\nOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
          "attributes": {
            "collateral: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
            "key: rdtsynsummaryfile": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary"
          },
          "background": "This can be reused by SoC team for their synthesis. Furthermore, RDT flow would not work without this.\nAlso make sure only the required files are included in rtl_list.tcl file\n\nhttps://wiki.ith.intel.com/display/designkits/Synthesis+Quick+Start",
          "category": "Phys Design Enabling",
          "description": "rtl_list.tcl should exist and the list should not contain any files from verif folder.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 12.6.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (12) Phys Design Enabling",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 12.6.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Filelist for synthesis in RDT format ( filelist, search paths, defines )",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: rtl_list.tcl should exist and the list should not contain any files from verif folder.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Locate RDT-SYN IPDS summary file. Default: syn/reports/[alias].syn_final.ipds.summary\n\t2. Report the run status for this rule as found in the RDT-SYN IPDS summary file.\n\tFor example: 12.124.b is PASS in given milestone in RDT-SYN IPDS summary file then the rule PASSES else FAILS.\n\tOverride key for RDT-SYN IPDS summary file = rdtsynsummaryfile",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "running rule 12.6.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Looking for rdtsynsummaryfile: ['.//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary']",
              "severity": "INFO"
            },
            {
              "file": ".//tools/syn/ADL/dfxsecure_plugin/reports/dfxsecure_plugin.syn_final.ipds.summary",
              "line": "",
              "msg": "For Rule \"12.6.a\"  and MileStone \"RTL1P0\", the status is \"PASS\" ",
              "severity": "INFO"
            }
          ],
          "name": "Filelist for synthesis in RDT format ( filelist, search paths, defines )",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "15.133.a": {
          "algorithm": "Review the HAS for the specific milestone\nEnsure that all functionality for that milestone is implemented in the design",
          "attributes": {},
          "background": "Functionality required per IP milestone is driven by various integration and platform requirements.  The necessary functionality starts with simple connectivity, area and power estimation at RTL0p0 to full functionality, completely verified at RTL1p0.  The mechanism for communicating the actual requirements is the IP level hardware specification, the IP HAS.",
          "category": "Review",
          "description": "Functional RTL is coded per HAS.\nMilestone specific functionality conforms to milestone expectations as detailed in the IP HAS for that milestone",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 15.133.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (15) Review",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 15.133.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: All functionality coded, including DFx, as defined in the appropriate IP HAS",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Functional RTL is coded per HAS.\n\tMilestone specific functionality conforms to milestone expectations as detailed in the IP HAS for that milestone",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Review the HAS for the specific milestone\n\tEnsure that all functionality for that milestone is implemented in the design",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 15.133.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 15.133.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547738320",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "All functionality coded, including DFx, as defined in the appropriate IP HAS",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "15.133.d": {
          "algorithm": "Manual review of IP HAS, STF documentation.\nIf the HAS for the IP specifies STF (Structural Test Fabric) it must be implemented in the design.",
          "attributes": {},
          "background": "Structural Test Fabric (STF) IP is a chassis component.\n\nReference:\n\ngoto/chassis -> IP Generators -> STF IP Generator\n\nURLs: http://goto/chassis -> http://chassis.intel.com/ip_generators.html -> http://chassis.intel.com/stf_ip_gen_recipe.html",
          "category": "Review",
          "description": "All STF (Structural Test Fabric) IPs implemented as per IP HAS.  If the IP HAS does not require STF then this rule does not apply.",
          "logRecords": [],
          "name": "All STF IPs implemented as per HAS",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "15.133.h": {
          "algorithm": "Review the HAS, verify that the design incorporates all expected DFt features\nVerify the test plan includes DFt features\nVerify DFt tests pass",
          "attributes": {},
          "background": "The IP's DFt features documented in the HAS for the specific milestone should be implemented and tested.",
          "category": "Review",
          "description": "DFt features identified in HAS are coded and validated prior to milestone exit\nThe HAS for each milestone is expected to detail what features are required in the design for each milestone.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 15.133.h ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (15) Review",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 15.133.h",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: DFt features in HAS coded and validated",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: DFt features identified in HAS are coded and validated prior to milestone exit\n\tThe HAS for each milestone is expected to detail what features are required in the design for each milestone.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Review the HAS, verify that the design incorporates all expected DFt features\n\tVerify the test plan includes DFt features\n\tVerify DFt tests pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 15.133.h",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 15.133.h pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547738320",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "DFt features in HAS coded and validated",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "15.133.i": {
          "algorithm": "Identify all clocks defined in the HAS\nEnsure all HAS-specified clocks are implemented in the design\nEnsure all clock constraints must reflect the requirements set in the HAS for each milestone",
          "attributes": {},
          "background": "The IP's clocks documented in the HAS for the specific milestone should be implemented and verified.",
          "category": "Review",
          "description": "All clocking requirements reviewed per HAS (HVM, functional)\nThe clock expectations are expected to be reflected in the clock constraints for the design",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 15.133.i ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (15) Review",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 15.133.i",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: All clocking requirements reviewed as per HAS",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: All clocking requirements reviewed per HAS (HVM, functional)\n\tThe clock expectations are expected to be reflected in the clock constraints for the design",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Identify all clocks defined in the HAS\n\tEnsure all HAS-specified clocks are implemented in the design\n\tEnsure all clock constraints must reflect the requirements set in the HAS for each milestone",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 15.133.i",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 15.133.i pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547738320",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "All clocking requirements reviewed as per HAS",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "15.148.a": {
          "algorithm": "The open bugs in HSD-ES must be updated, and documented in IP release notes.  All bugs that may be visible to the SoC (\"SoC impacting bugs\") must be communicated to the SoC and reviewed.",
          "attributes": {},
          "background": "Ideally there would be no bugs during development that would affect functionality or integration at the SoC, and all bugs will be closed by the final drop.  This is never the case, and all bugs that effect the SoC either due to functionality or tool impact (e.g., ability to integrate) must be clearly documented and communicated to the SoC to support managing the design process.",
          "category": "Review",
          "description": "All bugs relating to the IP are expected to be tracked in HSD-ES.\nDuring development (RTL0p3-RTL0p8, including POLO for HIP) any bugs that are expected to affect the SoC must be reviewed with the SoC.\nAt production (RTL1p0/PROD) all remaining bugs must be dispositioned.  This either means they have been fixed or the SoC has agreed to accept any impact the bug might have on silicon.\nThe bug closure rate (how many bugs are closed, how fast,etc.) is expected to be committed during IP3.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 15.148.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (15) Review",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 15.148.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Bugs are tracked, open and SoC impacting bugs reviewed, and bug closure requirements met",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: All bugs relating to the IP are expected to be tracked in HSD-ES.\n\tDuring development (RTL0p3-RTL0p8, including POLO for HIP) any bugs that are expected to affect the SoC must be reviewed with the SoC.\n\tAt production (RTL1p0/PROD) all remaining bugs must be dispositioned.  This either means they have been fixed or the SoC has agreed to accept any impact the bug might have on silicon.\n\tThe bug closure rate (how many bugs are closed, how fast,etc.) is expected to be committed during IP3.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: The open bugs in HSD-ES must be updated, and documented in IP release notes.  All bugs that may be visible to the SoC (\"SoC impacting bugs\") must be communicated to the SoC and reviewed.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 15.148.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 15.148.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547738320",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Bugs are tracked, open and SoC impacting bugs reviewed, and bug closure requirements met",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "15.415.a": {
          "algorithm": "All design collateral, including RTL, tool collateral, etc., must be reviewed with the SoC.",
          "attributes": {},
          "background": "In order to ensure good quality design it is often not sufficient to run a tool and pass a test, the design itself must be reviewed for good practices and overall completeness.  Having a review with the consumer of the IP helps provide a different perspective and can highlight concerns that could affect usability.",
          "category": "Review",
          "description": "The IP must complete a comprehensive review of the design. This includes RTL, design collateral, schematics.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 15.415.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (15) Review",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 15.415.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Complete comprehensive code review",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: The IP must complete a comprehensive review of the design. This includes RTL, design collateral, schematics.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: All design collateral, including RTL, tool collateral, etc., must be reviewed with the SoC.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 15.415.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 15.415.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547738320",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Complete comprehensive code review",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "15.415.c": {
          "algorithm": "",
          "attributes": {},
          "background": "In order to ensure good quality design it is often not sufficient to run a tool and pass a test, the design itself must be reviewed for good practices and overall completeness.  Having a review with the consumer of the IP helps provide a different perspective and can highlight concerns that could affect usability.",
          "category": "Review",
          "description": "At RTL0P0:\nFollow EIP Checklist Template from: http://goto.intel.com/eip_checklist\nLZ reviewed, Ext IP requirements identified and gaps between IP LZ and engineering requirements identified. Follow IP LZ review checklist in EIP Checklist\nIf any special customization needed, SOW with vendor agreed.\nThoroughly map and document under-development Ext IP schedule (including VP model and SW-FW) with SoC and platform schedule (include buffer)\n\n\nAt RTL0P5:\nReview EIP Errata and bug-analysis with external vendors\nComplete thorough review of RTL integration collaterals and test env with vendor as per checklist\n\n\nAt RTL0P8:\nAll applicable feedback from RTL0p5 Integration review incorporated.   \nIf any, review final EIP errata and bug-analysis with external vendors.  \n\n\nAt RTL1P0:\nFinal IP Integration review and sign-off  \nComplete IP Health Indicator Review\n",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 15.415.c ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (15) Review",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 15.415.c",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Complete comprehensive code review: Comply to External IP technical requirements",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: At RTL0P0:\n\tFollow EIP Checklist Template from: http://goto.intel.com/eip_checklist\n\tLZ reviewed, Ext IP requirements identified and gaps between IP LZ and engineering requirements identified. Follow IP LZ review checklist in EIP Checklist\n\tIf any special customization needed, SOW with vendor agreed.\n\tThoroughly map and document under-development Ext IP schedule (including VP model and SW-FW) with SoC and platform schedule (include buffer)\n\t\n\t\n\tAt RTL0P5:\n\tReview EIP Errata and bug-analysis with external vendors\n\tComplete thorough review of RTL integration collaterals and test env with vendor as per checklist\n\t\n\t\n\tAt RTL0P8:\n\tAll applicable feedback from RTL0p5 Integration review incorporated.   \n\tIf any, review final EIP errata and bug-analysis with external vendors.  \n\t\n\t\n\tAt RTL1P0:\n\tFinal IP Integration review and sign-off  \n\tComplete IP Health Indicator Review\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 15.415.c",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 15.415.c pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547738320",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Complete comprehensive code review: Comply to External IP technical requirements",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "15.47.a": {
          "algorithm": "Identify clocks and resets used in the design.\nEnsure that all clocks and resets are positively controlled from the design interface",
          "attributes": {},
          "background": "All clocks and resets must have positive control from an external source.\nEven generated clocks with internal control must be associated with an external clock for positive control of the logic.\nResets must be externally provided to ensure the design can be controlled in the integration context.",
          "category": "Review",
          "description": "The source for all clocks and resets must be external to the design, via an interface.\nEven generated clocks with internal control must be associated with an external clock for positive control of the logic.\nResets must be externally provided to ensure the design can be controlled in the integration context.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 15.47.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (15) Review",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 15.47.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Clocks and resets are defined only in interfaces",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: The source for all clocks and resets must be external to the design, via an interface.\n\tEven generated clocks with internal control must be associated with an external clock for positive control of the logic.\n\tResets must be externally provided to ensure the design can be controlled in the integration context.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Identify clocks and resets used in the design.\n\tEnsure that all clocks and resets are positively controlled from the design interface",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 15.47.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 15.47.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547738320",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Clocks and resets are defined only in interfaces",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "15.47.b": {
          "algorithm": "Identify resets in the design\nVerify reset is being driven by a valid reset signal.",
          "attributes": {},
          "background": "Flip-flops that are not actively reset result in unknown values (\"X\"), which unless cleared during operation can result in unexpected behavior.",
          "category": "Review",
          "description": "Resets used in the design must not be tied to a static value.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 15.47.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (15) Review",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 15.47.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Resets not tied off",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Resets used in the design must not be tied to a static value.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Identify resets in the design\n\tVerify reset is being driven by a valid reset signal.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 15.47.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 15.47.b pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547738320",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Resets not tied off",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "15.47.c": {
          "algorithm": "Identify all clocks and resets used in the design\nVerify clocks are correctly constrained\nVerify resets are actively controlled",
          "attributes": {},
          "background": "When the clocks in a design are not correctly constrained any results (e.g., simulation, synthesis) may be invalid.\nUnconstrained or static resets can result in unknown values (\"X\") being propagated.",
          "category": "Review",
          "description": "100% of clock and reset mechanisms defined",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 15.47.c ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (15) Review",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 15.47.c",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: All Clock and Reset mechanisms defined",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: 100% of clock and reset mechanisms defined",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Identify all clocks and resets used in the design\n\tVerify clocks are correctly constrained\n\tVerify resets are actively controlled",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 15.47.c",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 15.47.c pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547738320",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "All Clock and Reset mechanisms defined",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "15.8.a": {
          "algorithm": "Review IP hierarchy information in DSS.\nIdentify BFM version expected for specific milestone.\nVerify that DSS milestone version is the one downloaded from IRR.",
          "attributes": {},
          "background": "If the IP uses a BFM version or Environment which is different to the SOC POR and if the IP is released as is then there is a potential issue that may arise if the SOC cannot change their BFM version. Sometimes an IP compiled with one\nBFM version can easily break with a different BFM version. Common examples are Shared BFMs like IOSF, AVC Libs etc.\n\nhttps://dtspedia.intel.com/Rtltools/IPDS",
          "category": "Review",
          "description": "Checking for BFM versions and Environment used in IP are required as per SOC POR.\nBFM version information is expected to be found in DSS, and the BFM should be available in IRR.",
          "logRecords": [],
          "name": "Use SOC defined BFM versions",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "17.171.a": {
          "algorithm": "Read the violations xml report and fail if any Fatal or unwaivered Error violations are found.",
          "attributes": {
            "collateral: lintra violation xml": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
            "collateral: spyglass violation xml": ".//tools/spyglass_lint/spyglass_violations_report.xml",
            "key: lintradir": ".//tools/lint/ADL/",
            "key: lintraxmlfile": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
            "key: rtllintlintra": "True",
            "key: rtllintspyglass": "True",
            "key: spyglasslintdir": ".//tools/spyglass_lint/reports",
            "key: spyglasslintxmlfile": ".//tools/spyglass_lint/spyglass_violations_report.xml"
          },
          "background": "The violations reports (xml and textual) should be placed in tools/lint or tools/lint/reports directory for lintra or in tools/spyglass_lint or tools/spyglass_lint/reports directory for spyglass.\nThe reports should not contain Fatal or Error violations, meaning they have to be either fixed in the RTL or waived with a waiver if applicable and approved by SoC.\nThis is to avoid duplicated debugging and efforts between IP provider and SoC team.\nThis also ensures that the provided waivers are complete.",
          "category": "RTL+Lint",
          "description": "Lintra or Spyglass Lint run should be clean of Errors and Fatals.\nThere should not be any unwaived Errors in the violations report\n\nSpyglass violations reports should be delivered with IP in tools/spyglass_lint directory or sub-directory\nLintra violations reports should be delivered with IP in tools/lint directory or sub-directory",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 17.171.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (17) RTL+Lint",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 17.171.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RTL Lint run should be clean of Errors and Fatals",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Lintra or Spyglass Lint run should be clean of Errors and Fatals.\n\tThere should not be any unwaived Errors in the violations report\n\t\n\tSpyglass violations reports should be delivered with IP in tools/spyglass_lint directory or sub-directory\n\tLintra violations reports should be delivered with IP in tools/lint directory or sub-directory",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Read the violations xml report and fail if any Fatal or unwaivered Error violations are found.",
              "severity": "INFO"
            },
            {
              "file": ".//tools/spyglass_lint/spyglass_violations_report.xml",
              "line": "",
              "msg": "Found 0 Fatal violations and 0 unwaived errors ",
              "severity": "INFO"
            }
          ],
          "name": "RTL Lint run should be clean of Errors and Fatals",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "17.172.a": {
          "algorithm": "Read the violations xml report to find the waiver files used.\nVerify these files exist somewhere under [lintradir] for lintra or [spyglasslintdir] for spyglass.\nThere must be at least one waiver file.\n\nOverride key for lintra violations xml report = lintraxmlfile\nOverride key for lintra directory where waivers live = lintradir\nOverride key for SG Lint violations xml report = spyglasslintxmlfile\nOverride key for SG Lint directory where waivers live = spyglasslintxmlfile\nOverride key for paths where global waiver files live = globaldirs",
          "attributes": {
            "collateral: lintra violation xml": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
            "collateral: waiver": "/nfs/iind/disks/dteg_disk008/users/badithya/dteg-dfxsecure_plugin/tools/lint/ADL/dfxsecure_plugin_waivers_w.xml",
            "key: globaldirs": "",
            "key: lintradir": ".//tools/lint/ADL/",
            "key: lintraxmlfile": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
            "key: rtllintlintra": "True",
            "key: rtllintspyglass": "True",
            "key: spyglasslintdir": ".//tools/spyglass_lint/reports",
            "key: spyglasslintxmlfile": ".//tools/spyglass_lint/spyglass_violations_report.xml"
          },
          "background": "Lintra waivers files or directories should be provided in the IP tools/lint directory. \nSG Lint waivers files or directories should be provided in the IP tools/spyglass_lint directory. \nWaiver files should be available for SOC to reproduce the lintra run on the IP.",
          "category": "RTL+Lint",
          "description": "The waiver files should be under tools/spyglass_lint directory or sub-directory for SG Lint and under tools/lint directory or sub-directory for Lintra. \nThe waiver files under globaldirs for global libs like visa are allowed.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 17.172.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (17) RTL+Lint",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 17.172.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RTL Lint waiver files are available in tools/lint directory",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: The waiver files should be under tools/spyglass_lint directory or sub-directory for SG Lint and under tools/lint directory or sub-directory for Lintra. \n\tThe waiver files under globaldirs for global libs like visa are allowed.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Read the violations xml report to find the waiver files used.\n\tVerify these files exist somewhere under [lintradir] for lintra or [spyglasslintdir] for spyglass.\n\tThere must be at least one waiver file.\n\t\n\tOverride key for lintra violations xml report = lintraxmlfile\n\tOverride key for lintra directory where waivers live = lintradir\n\tOverride key for SG Lint violations xml report = spyglasslintxmlfile\n\tOverride key for SG Lint directory where waivers live = spyglasslintxmlfile\n\tOverride key for paths where global waiver files live = globaldirs",
              "severity": "INFO"
            },
            {
              "file": ".//tools/spyglass_lint/spyglass_violations_report.xml",
              "line": "",
              "msg": "Trying to get list of waiver files from spyglass lint xml file",
              "severity": "INFO"
            },
            {
              "file": ".//tools/spyglass_lint/spyglass_violations_report.xml",
              "line": "",
              "msg": "There are no waiver files in Spyglass Lint xml file",
              "severity": "INFO"
            }
          ],
          "name": "RTL Lint waiver files are available in tools/lint directory",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "17.173.a": {
          "algorithm": "LINTRA:\nRead the lintra violations xml report to collect the list of waiver files used.\nExtract file=\"[name]\" from all the waivers.\nMake sure [name] contains an alpha/numeric character\nOverride key for lintra violations xml report = lintraxmlfile\n\n",
          "attributes": {
            "collateral: spyglass violation xml": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
            "collateral: waiver": "/nfs/iind/disks/dteg_disk008/users/badithya/dteg-dfxsecure_plugin/tools/lint/ADL/dfxsecure_plugin_waivers_w.xml",
            "key: globaldirs": "",
            "key: lintradir": ".//tools/lint/ADL/",
            "key: lintraxmlfile": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
            "key: rtllintlintra": "True",
            "key: rtllintspyglass": "True"
          },
          "background": "It is recommended to contain IP-specific strings in the file field of lintra waiver.\nWaiver \"file\" field should contain alpha/numeric chars, but the following values are not accepted - \".*\",   \".*.sv\",  \".*.v\"\nThis is to make sure that all the waivers are reviewed by IP owners and signed-off.",
          "category": "RTL+Lint",
          "description": "Waivers provided by IP should be applied only to that IP.  Avoid applying waivers to all files.\nThis rule is for Lintra only. For Spyglass Lint, grade the rule 17.173.b manually",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 17.173.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (17) RTL+Lint",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 17.173.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RTL Lint waivers should be applicable to the IP only",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Waivers provided by IP should be applied only to that IP.  Avoid applying waivers to all files.\n\tThis rule is for Lintra only. For Spyglass Lint, grade the rule 17.173.b manually",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: LINTRA:\n\tRead the lintra violations xml report to collect the list of waiver files used.\n\tExtract file=\"[name]\" from all the waivers.\n\tMake sure [name] contains an alpha/numeric character\n\tOverride key for lintra violations xml report = lintraxmlfile\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "This rule is applicable for Lintra only. For Spyglass Lint, grade the rule 17.173.b manually",
              "severity": "INFO"
            }
          ],
          "name": "RTL Lint waivers should be applicable to the IP only",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "17.173.b": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "It is recommended to contain IP-specific strings in the file field of lintra waiver.\nWaiver \"file\" field should contain alpha/numeric chars, but the following values are not accepted - \".*\",   \".*.sv\",  \".*.v\"\nThis is to make sure that all the waivers are reviewed by IP owners and signed-off.",
          "category": "RTL+Lint",
          "description": "Waivers provided by IP should be applied only to that IP.  Avoid applying waivers to all files.\nThis rule is for Spyglass Lint only. For Lintra, mark the rule as NA while grading",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 17.173.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (17) RTL+Lint",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 17.173.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RTL Lint waivers should be applicable to the IP only",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Waivers provided by IP should be applied only to that IP.  Avoid applying waivers to all files.\n\tThis rule is for Spyglass Lint only. For Lintra, mark the rule as NA while grading",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Manual check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 17.173.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 17.173.b pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "RTL Lint waivers should be applicable to the IP only",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "17.3.a": {
          "algorithm": "Read the violations xml report to get the waiver_files\nThere must be at least 1 waiver file.\nVerify that each file has the [alias]_ prefix in its name.\n\nOverride key for Lintra Waiver File prefix = lintrawaiverfileprefix\nOverride key for SG Lint Waiver File prefix = spyglasslintwaiverfileprefix\nOverride key for paths where global waiver files live = globaldirs",
          "attributes": {
            "collateral: lintra violation xml": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
            "collateral: waiver": "/nfs/iind/disks/dteg_disk008/users/badithya/dteg-dfxsecure_plugin/tools/lint/ADL/dfxsecure_plugin_waivers_w.xml",
            "key: globaldirs": "",
            "key: lintradir": ".//tools/lint/ADL/",
            "key: lintrawaiverfileprefix": "dfxsecure_plugin_",
            "key: lintraxmlfile": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
            "key: rtllintlintra": "True",
            "key: rtllintspyglass": "True",
            "key: spyglasslintdir": ".//tools/spyglass_lint/reports",
            "key: spyglasslintwaiverfileprefix": "dfxsecure_plugin_",
            "key: spyglasslintxmlfile": ".//tools/spyglass_lint/spyglass_violations_report.xml"
          },
          "background": "If lintra waiver file name from several IP's collide, only one of them will be active, and all others will be ignored at SoC level. Uniquifying them with [ip]_ or [ip_alias]_ prefix is recommended.\n\nSG Lint Waiver file name should be uniquefied with IP prefix to simplify integration.",
          "category": "RTL+Lint",
          "description": "Lintra or Spyglass Lint waiver file name needs to be unique to be reusable as it is at SoC level.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 17.3.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (17) RTL+Lint",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 17.3.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RTL Lint waiver files should be uniquified with IP prefix and delivered with IP",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Lintra or Spyglass Lint waiver file name needs to be unique to be reusable as it is at SoC level.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Read the violations xml report to get the waiver_files\n\tThere must be at least 1 waiver file.\n\tVerify that each file has the [alias]_ prefix in its name.\n\t\n\tOverride key for Lintra Waiver File prefix = lintrawaiverfileprefix\n\tOverride key for SG Lint Waiver File prefix = spyglasslintwaiverfileprefix\n\tOverride key for paths where global waiver files live = globaldirs",
              "severity": "INFO"
            },
            {
              "file": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
              "line": "",
              "msg": "looking up waiver files in .//tools/lint/ADL/dfxsecure_plugin_violations.xml",
              "severity": "INFO"
            },
            {
              "file": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
              "line": "",
              "msg": "checking waiver files ['/nfs/iind/disks/dteg_disk008/users/badithya/dteg-dfxsecure_plugin/tools/lint/ADL/dfxsecure_plugin_waivers_w.xml']",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking that all waiver files start with prefix unique to the ip (prefixes: ['dfxsecure_plugin_'])",
              "severity": "INFO"
            },
            {
              "file": ".//tools/spyglass_lint/spyglass_violations_report.xml",
              "line": "",
              "msg": "looking up waiver files in .//tools/spyglass_lint/spyglass_violations_report.xml",
              "severity": "INFO"
            },
            {
              "file": ".//tools/spyglass_lint/spyglass_violations_report.xml",
              "line": "",
              "msg": "Trying to get list of waiver files from spyglass lint xml file",
              "severity": "INFO"
            },
            {
              "file": ".//tools/spyglass_lint/spyglass_violations_report.xml",
              "line": "",
              "msg": "There are no waiver files in Spyglass Lint xml file",
              "severity": "INFO"
            },
            {
              "file": ".//tools/spyglass_lint/spyglass_violations_report.xml",
              "line": "",
              "msg": "checking waiver files []",
              "severity": "INFO"
            },
            {
              "file": ".//tools/spyglass_lint/spyglass_violations_report.xml",
              "line": "",
              "msg": "Could not find any waiver files.",
              "severity": "INFO"
            }
          ],
          "name": "RTL Lint waiver files should be uniquified with IP prefix and delivered with IP",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "17.3.b": {
          "algorithm": "Read the violations xml report to get the waiver_files\nVerify that none of the file has the time0 in its name.\nif it contains time0, then report the files",
          "attributes": {
            "key: globaldirs": "",
            "key: rtllintlintra": "True",
            "key: rtllintspyglass": "True"
          },
          "background": "",
          "category": "RTL+Lint",
          "description": "SGLint time0 waivers should not exist in RTL1p0, POLO, and PROD.\nThese waivers should be reviewed and the violations they waive should be fixed or waived permanently.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 17.3.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (17) RTL+Lint",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 17.3.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Spyglass Lint time0 waivers should not exist.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: SGLint time0 waivers should not exist in RTL1p0, POLO, and PROD.\n\tThese waivers should be reviewed and the violations they waive should be fixed or waived permanently.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Read the violations xml report to get the waiver_files\n\tVerify that none of the file has the time0 in its name.\n\tif it contains time0, then report the files",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "This rule is not applicable for Lintra. Skipping.",
              "severity": "INFO"
            }
          ],
          "name": "Spyglass Lint time0 waivers should not exist.",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "17.320.a": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "It is important to provide enough information regarding Lintra/SG Lint runs so SOC will be able to reproduce these runs if needed. All the info regarding IP lintra/SG Lint flow should be documented in the IP integration guide",
          "category": "RTL+Lint",
          "description": "IP Lintra or SG Lint run(s) must be reproducible on the same content IP was delivered with, as documented in the integration guide.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 17.320.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (17) RTL+Lint",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 17.320.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: IP RTL Lint run(s) must be reproducible on the same content IP was delivered with, as documented in the integration guide.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: IP Lintra or SG Lint run(s) must be reproducible on the same content IP was delivered with, as documented in the integration guide.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Manual check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 17.320.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 17.320.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "IP RTL Lint run(s) must be reproducible on the same content IP was delivered with, as documented in the integration guide.",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "17.324.a": {
          "algorithm": "LINTRA:\nRead the lintra violations xml report to collect the path of the lintra config file used.\nVerify this file is named LintraSoCConfig.xml or LintraSoCConfig_WF.xml, and comes from\n /p/com/eda/intel/Soc_Lintra_Collaterals/<version>/cfg  or\n $RTL_CAD_ROOT/intel/lintra-rules/<version>/cfg\nRead the lintra violations xml report to collect the path of the lintra config file used.\nVerify this file is named LintraSoCConfig.xml or LintraSoCConfig_WF.xml, and comes from\n /p/com/eda/intel/Soc_Lintra_Collaterals/<version>/cfg  or\n $RTL_CAD_ROOT/intel/lintra-rules/<version>/cfg\nProjects must run lintra with the --report_rules :full:xml cmd line option. The option is available in lintra 14.4 or newer. As a result <top_module>_lintra_rules_report.xml would be generated. The file should be placed in the tool/lint area together with other lintra results.\nUDR should be released with converged_lintra_rules_report.xml which would represent the converged rules set report.\nSpec:\nIf <top_module>_lintra_rules_report.xml exists - use new implementation otherwise run the existing one.\nNew implementation\nFind udr version used - violations report <run_info> udr_version field contains that info.\nThe converged_lintra_rules_report.xml should be found for UDR version 1.07.01 (not yet released) or newer ($RTL_CAD_ROOT/intel/lintra-rules/<udr_version>/cfg/converged_lintra_rules_report.xml or /p/com/eda//intel/Soc_Lintra_Collaterals/<udr_version>/cfg/converged_lintra_rules_report.xml)\nEvery rule present in converged_lintra_rules_report.xml should also be present in <top_module>_lintra_rules_report.xml. For every rule that is not present in <top_module>_lintra_rules_report.xml - report violation\n\nSG Lint:\n- Converged rules report location: parsing ip rules report xml,checking the 'goal file' entry in the xml, the converged rules report xml should be located under the same directory as(real path)directory of 'goal file'. \n - Checking: \n 1. All activated rules in the converged rules report should be listed and activated in the ip rules report. \n 2.All rules that have 'fatal' severity in the converged rules report should have the same severity in the ip rules report. \n 3.All rules that have 'error' severity in the converged rules report should have 'error' or 'fatal' severity in the ip rules report.",
          "attributes": {},
          "background": "Converged Rules Set is a minimum set of rules which all IPs and SoC must run. \n\nLintra:\nThe converged lintra  rules config file is released with lintra UDRs and is called LintraSoCConfig.xml (or LintraSoCConfig_WF.xml - which makes warnings fail)\nThis file is the only one allowed to be used in lintra run, unless you're running \"lintra-rules\" 1.08.02 or newer and adding --report_rules :full:xml to the lintra cmd line. In the later case, a file <IP_top_module>_lintra_rules.xml is generated during lintra run. The file should be accessible by ZQA in the location where violations report is placed. The rule verifies that the rules enabled in the converged rules set are enabled in the configuration IP runs with and the rules severity is the same.\n\nSee the following for generating lintra rule report:\nhttps://dtspedia.intel.com/Lintra_UDR/Lintra_UDR_FAQs#How_to_generate_rules_report_for_IPDS_rule_17.324_.3F\n\n\nSG Lint:\nThe converged rules set is released with the spyglass_lint methodology at HDK: $RTL_PROJ_TOOLS/spyglass_methodology_lint/ and is called SpyglassConvergedLintSOC.spq.\nspyglass_rules_report.xml is generated upon 'set_option generate_rules_report yes' in the spyglass project file.",
          "category": "RTL+Lint",
          "description": "Lintra:\nConverged rules set LintraSoCConfig.xml is released with the \"lintra-rules\" product. The rule verifies that the released file is being used in the lintra run. For newer version of \"lintra-rules\" the rule verifies that the rules enabled in the converged rules set are enabled in the configuration IP runs with and the rules severity is the same\n\nSG Lint:\nThe rules that are enabled in the SG Lint converged rules report are also enabled in the IP rules report and seventies have not been downgraded.",
          "logRecords": [],
          "name": "RTL Lint must be run with the converged rules set",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "17.342.a": {
          "algorithm": "- Open Latch violations report should exist in <MODEL_ROOT>/tools/openlatch dir\n- The violations report file should not contain violations\n- OL Waiver file - waivedSeqPaths.cfg should exist in <MODEL ROOT>/tools/openlatch/config directory\n- OL config files should exist in <MODEL ROOT>/tools/openlatch/config directory: clockRelation.cfg, clocks.cfg, constSig.cfg, freeRunningCLocks.cfg, latchClk.cfg\n\nOverride key for lintra open latch dir = lintraopenlatchdir\nOverride key for lintra open latch config dir = lintraopenlatchconfigdir",
          "attributes": {},
          "background": "Ensure matching behavior between RTL latch simulation and latch behavior on silicon.  0-delay RTL signal propagation through transparent \"open\" latches will allow value changes to reach distant logic instantaneously.  Silicon signal propagation may be greatly delayed, causing drastically different silicon behavior.  OpenLatch check ensures latches are clocked accurately for traditional staged signal propagation through pipe stages.\nFor more info: https://dtspedia.intel.com/Lintra/OpenLatch\nCheat sheet for flow enabling: https://dtspedia.intel.com/Enabling_Open_Latch_Flow",
          "category": "RTL+Lint",
          "description": "Lintra Open Latch check must be run and violations report should be clean",
          "logRecords": [],
          "name": "Lintra Open Latch check must be run and violations report should be clean",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "17.4.a": {
          "algorithm": "Read the lintra violations xml report to get the waiver_files.\nRead each file and look for waiver ids.\nVerify that each id has the [alias]_ prefix or is in the form of a lintra gui generated id (username + 10 digits)\n\n",
          "attributes": {
            "collateral: lintra violation xml": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
            "collateral: waiver": "/nfs/iind/disks/dteg_disk008/users/badithya/dteg-dfxsecure_plugin/tools/lint/ADL/dfxsecure_plugin_waivers_w.xml",
            "key: globaldirs": "",
            "key: lintradir": ".//tools/lint/ADL/",
            "key: lintrawaiverfileprefix": "dfxsecure_plugin_",
            "key: lintraxmlfile": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
            "key: rtllintlintra": "True",
            "key: rtllintspyglass": "True"
          },
          "background": "If the waiver ID from several IPs collide, only one of them will be active, and all others will be ignored at SoC level.\nIf you use lintra GUI to generate waivers you don't need to uniquify them with [ip]_ pre",
          "category": "RTL+Lint",
          "description": "Lintra:\nLintra waiver IDs inside waiver file need to be unique to be reusable as they are at SoC level.\nIf the waiver ID from several IPs collide, only one of them will be active, and all others will be ignored. Lintra GUI generated waiver IDs are unique.\n\nSG Lint:\nThis rule is applicable only to LINTRA. There is no waiver IDs in the spyglass waivers.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 17.4.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (17) RTL+Lint",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 17.4.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RTL Lint waiver ID names are uniquified",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Lintra:\n\tLintra waiver IDs inside waiver file need to be unique to be reusable as they are at SoC level.\n\tIf the waiver ID from several IPs collide, only one of them will be active, and all others will be ignored. Lintra GUI generated waiver IDs are unique.\n\t\n\tSG Lint:\n\tThis rule is applicable only to LINTRA. There is no waiver IDs in the spyglass waivers.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Read the lintra violations xml report to get the waiver_files.\n\tRead each file and look for waiver ids.\n\tVerify that each id has the [alias]_ prefix or is in the form of a lintra gui generated id (username + 10 digits)\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking that all waiver ids are unique",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "All IDs should start with one of the prefixes: ['dfxsecure_plugin_']",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Also checking for duplicated waiver ids",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "GUI generated waivers are OK",
              "severity": "INFO"
            },
            {
              "file": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
              "line": "",
              "msg": "looking up waiver files in .//tools/lint/ADL/dfxsecure_plugin_violations.xml",
              "severity": "INFO"
            },
            {
              "file": ".//tools/lint/ADL/dfxsecure_plugin_violations.xml",
              "line": "",
              "msg": "checking waiver files ['/nfs/iind/disks/dteg_disk008/users/badithya/dteg-dfxsecure_plugin/tools/lint/ADL/dfxsecure_plugin_waivers_w.xml']",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "This rule is not applicable for SG-Lint flow. Skipping.",
              "severity": "INFO"
            }
          ],
          "name": "RTL Lint waiver ID names are uniquified",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "18.295.a": {
          "algorithm": "Zircon checks the RTL drop for the file \"QuestionnaireExport_*.xlsx\" in folder <model_root>/doc. If Zircon finds the file and the file is not 0 bytes, then the rule passes.\n",
          "attributes": {},
          "background": "N/A",
          "category": "Security",
          "description": "Click on the link to complete the SRA: http://questionnaireframework.intel.com/.  Once complete, use the \"Export to Excel\" feature to save the results.  The results need to be saved as \"QuestionnaireExport_*.xlsx\" in the RTL drop under the \"$model_root/doc\".  The wildcard \"*\" should be replaced with the name of the IP.  Zircon will verify if this file exist for compliance.\n\nIf the architecture has changed after the SRA tool was executed, then the SRA tool will need to be executed again so the assessment is performed on the new architectural changes.  Additionally, the results in the \"$model_root/doc\" folder will need to be updated with the new SRA results.",
          "logRecords": [],
          "name": "Security Risk Assessment (SRA) is completed",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "18.296.a": {
          "algorithm": "N/A",
          "attributes": {},
          "background": "N/A",
          "category": "Security",
          "description": "The HAS template has a dedicated section for the security risk assessment results.  The results of the SRA need to be inserted into this section of the HAS.  The templates can be found here: https://sharepoint.amr.ith.intel.com/sites/SourceDocs/Templates/Forms/AllItems.aspx .  If the architectural specification does not have a dedicated section for security, then please create one (copy and paste the security section from the template).",
          "logRecords": [],
          "name": "SRA results have been added to the security section in the IP\"s Architecture Specification (HAS)",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "18.298.a": {
          "algorithm": "Zircon will check the RTL drop for the file \"S1_results_Security_Zircon_Rules_Evidence.txt\" in the \"$model_root/doc\" folder.  Zircon will fail the rule if the following are true:\n-\tThe file does not exist and the rule is not marked N/A.\n-\tThe file does not have the required fields completed.  The required fields are labeled as such in the document.\n-\tThe file does not have acceptance approval (i.e. Acceptance approved: \"yes\")",
          "attributes": {},
          "background": "N/A",
          "category": "Security",
          "description": "S1 of the Security Development Lifecycle (SDL) is the \"Architectural Review\" of the product. For milestone summary and activity list, please visit: https://sp2010.amr.ith.intel.com/sites/sdl/Pages/Lists/Activities.aspx and under \"SDL Milestone\" filter, select \"S1\".\n\nIn order to meet compliance for this rule, please complete the following steps:\n1.\tReview the evidence of the activities listed in the S1 phase of the SDL with your Product Security Assurance Team (PSAT) or your organization's Security Champion (https://sp2010.amr.ith.intel.com/sites/sdl/Pages/Lists/Security-Champion-List.aspx).  If you have difficulties identifying who to contact, please reach out to Dhinesh Manoharan (dhinesh.manoharan@intel.com).\n2.\tPlease document the results of the review in step#1 by completing a governance ticket called \"Security Zircon Rules Evidence Template.txt\" located here: https://sharepoint.amr.ith.intel.com/sites/SourceDocs/Templates/Forms/AllItems.aspx \n3.\tRename the ticket \"S1_results_Security_Zircon_Rules_Evidence.txt\" and save it in the RTL drop under the folder \"$model_root/doc\".  Zircon will verify if this file exists and the mandatory fields are completed for compliance.",
          "logRecords": [],
          "name": "Architecture security review (SDL S1) completed according to the results of the SRA and the security section in the HAS updated accordingly",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "18.300.a": {
          "algorithm": "Zircon will check the RTL drop for the file \"S2_results_Security_Zircon_Rules_Evidence.txt\" in the \"$model_root/doc\" folder.  Zircon will fail the rule if the following are true:\n-\tThe file does not exist and the rule is not marked N/A.\n-\tThe file does not have the required fields completed.  The required fields are labeled as such in the document.\n-\tThe file does not have acceptance approval (i.e. Acceptance approved: \"yes\")",
          "attributes": {},
          "background": "N/A",
          "category": "Security",
          "description": "S2 of the Security Development Lifecycle (SDL) is the \"Design Review\" of the product. For milestone summary and activity list, please visit: https://sp2010.amr.ith.intel.com/sites/sdl/Pages/Lists/Activities.aspx and under \"SDL Milestone\" filter, select \"S2\".\n\nIn order to meet compliance for this rule, please complete the following steps:\n1.\tReview the evidence of the activities listed in the S2 phase of the SDL with your Product Security Assurance Team (PSAT) or your organization's Security Champion (https://sp2010.amr.ith.intel.com/sites/sdl/Pages/Lists/Security-Champion-List.aspx).  If you have difficulties identifying who to contact, please reach out to Dhinesh Manoharan (dhinesh.manoharan@intel.com).\n2.\tPlease document the results of the review in step#1 by completing a governance ticket called \"Security Zircon Rules Evidence Template.txt\" located here: https://sharepoint.amr.ith.intel.com/sites/SourceDocs/Templates/Forms/AllItems.aspx \n3.\tRename the ticket \"S2_results_Security_Zircon_Rules_Evidence.txt\" and save it in the RTL drop under the folder \"$model_root/doc\".  Zircon will verify if this file exists and the mandatory fields are completed for compliance.",
          "logRecords": [],
          "name": "Design security review (SDL S2) completed if required and the Integration Guide updated accordingly. ",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "18.301.a": {
          "algorithm": "Zircon will check the RTL drop for the file \"S3_results_Security_Zircon_Rules_Evidence.txt\" in the \"$model_root/doc\" folder.  Zircon will fail the rule if the following are true:\n-\tThe file does not exist and the rule is not marked N/A.\n-\tThe file does not have the required fields completed.  The required fields are labeled as such in the document.\n-\tThe file does not have acceptance approval (i.e. Acceptance approved: \"yes\")",
          "attributes": {},
          "background": "N/A",
          "category": "Security",
          "description": "S3 of the Security Development Lifecycle (SDL) is the \"Pre-Si Validation\" of the product. For milestone summary and activity list, please visit: https://sp2010.amr.ith.intel.com/sites/sdl/Pages/Lists/Activities.aspx and under \"SDL Milestone\" filter, select \"S3\".\n\nIn order to meet compliance for this rule, please complete the following steps:\n1.\tReview the evidence of the activities listed in the S3 phase of the SDL with your Product Security Assurance Team (PSAT) or your organization's Security Champion (https://sp2010.amr.ith.intel.com/sites/sdl/Pages/Lists/Security-Champion-List.aspx).  If you have difficulties identifying who to contact, please reach out to Dhinesh Manoharan (dhinesh.manoharan@intel.com).\n2.\tPlease document the results of the review in step#1 by completing a governance ticket called \"Security Zircon Rules Evidence Template.txt\" located here: https://sharepoint.amr.ith.intel.com/sites/SourceDocs/Templates/Forms/AllItems.aspx \n3.\tRename the ticket \"S3_results_Security_Zircon_Rules_Evidence.txt\" and save it in the RTL drop under the folder \"$model_root/doc\".  Zircon will verify if this file exists and the mandatory fields are completed for compliance.",
          "logRecords": [],
          "name": "The IP security test plan is completed and executed as required (SDL S3), VerificationReference document updated, and Integration Guide refreshed",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "19.135.a": {
          "algorithm": "This rule can be automated by doing a xprop switch search presence in the vcs elaboration command. \n\nThis xprop feature enabling can be checked by doing a grep  command search in the elaboration log ( this is the pattern of the string in the log file name  *ELAB_MODELS* )  and looking for the -xprop  switch in the vcs elab command path.\n\n\nExample :  this is the path of the elaboration log file \n  /tmp/ip-dfx_dci/target/dci/EBG/aceroot/results/makefiles/vcs/makeLogs/dci_model__ELAB_MODELS__vcs.log \n\n\nCommand  to search : \n\n%  grep -irH \">> vcs\" /tmp/ip-dfx_dci/target/dci/EBG/aceroot/results/makefiles/vcs/makeLogs/dci_model__ELAB_MODELS__vcs.log | grep \"\\-xprop\" --color\n\nThis will retrurn the vcs command  and also search for the \"-xprop\" switch presence.",
          "attributes": {},
          "background": "VCS provides a built-in mechanism for simulating X-propagation, ensuring robust and repeatable reset and runtime behavior.\n\nCommon usage is \"tmerge\" (xmerge is currently considered too pessimistic).\n\nReference:\nhttps://dtspedia.intel.com/XPROP",
          "category": "Simulation",
          "description": "Mark as pass if X-Propagation verification is provided using VCS simulation.  The IP provider needs to enable XPROP on the RTL model (both non power aware and power aware model) and run the DOA test and the Level0 tests through XPROP.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 19.135.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (19) Simulation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 19.135.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: All IP Providers are required to run VCS XPROP ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Mark as pass if X-Propagation verification is provided using VCS simulation.  The IP provider needs to enable XPROP on the RTL model (both non power aware and power aware model) and run the DOA test and the Level0 tests through XPROP.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: This rule can be automated by doing a xprop switch search presence in the vcs elaboration command. \n\t\n\tThis xprop feature enabling can be checked by doing a grep  command search in the elaboration log ( this is the pattern of the string in the log file name  *ELAB_MODELS* )  and looking for the -xprop  switch in the vcs elab command path.\n\t\n\t\n\tExample :  this is the path of the elaboration log file \n\t  /tmp/ip-dfx_dci/target/dci/EBG/aceroot/results/makefiles/vcs/makeLogs/dci_model__ELAB_MODELS__vcs.log \n\t\n\t\n\tCommand  to search : \n\t\n\t%  grep -irH \">> vcs\" /tmp/ip-dfx_dci/target/dci/EBG/aceroot/results/makefiles/vcs/makeLogs/dci_model__ELAB_MODELS__vcs.log | grep \"\\-xprop\" --color\n\t\n\tThis will retrurn the vcs command  and also search for the \"-xprop\" switch presence.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 19.135.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 19.135.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "All IP Providers are required to run VCS XPROP ",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.179.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx",
          "category": "Simulation",
          "description": "Exercise main Intra-IP and Inter-unit CR flows (globals, shadows, snarfed CRs)",
          "logRecords": [],
          "name": "CREG: Satisfy Control Registers verification requirements for RTL0.5",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.179.b": {
          "algorithm": "Manual Rule",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx",
          "category": "Simulation",
          "description": "- IP validation of register attributes for all implemented CRs for all attributes using sla_ral_attr_base_test_seq (customized for IP)\n- Negative and security validation of CRs\n- Validation of register reset values for all implemented CRs using sla_ral_attr_base_test_seq (customized for IP)\n- Functional validation of settings in control registers including access through RAL signal backdoor mechanism (enable register coverage, should hit 100% excluding attr tests)\n",
          "logRecords": [],
          "name": "CREG: Satisfy Control Registers verification requirements for RTL0.8",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.181.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx",
          "category": "Simulation",
          "description": "- Basic IDCODE and BYPASS register testing for TAP\n- IP TAP Network connectivity (if more than one TAP in IP)\n- All supported TAP instructions - shift in all 0s, all 1s, random values (except command register bits)\n- IP DFx security plugin connectivity, policy decode - all values\n- TAP Reset behavior and low power modes\n- IP IDV chain Ctrl/Cnt reset values, connectivity, bypass (if applicable - when IDV chanes does not leave IP)\n",
          "logRecords": [],
          "name": "DFT:  Satisfy Design for Test features verification requirements for RTL0.5",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.181.b": {
          "algorithm": "Manual Check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx\n\n",
          "category": "Simulation",
          "description": "- Reserved opcode testing\n- Validate all security policies (red/green/orange)\n- Testing with prefix bits and pause randomization\n- TAP usage models - validate the effects of writing DRs\n- Testing with likely tclk/blck rations and with tclk/bclk misalignment\n- IP TAP, IR, VISA nets compliance to security policy, default policy during early debug window\n- BSCAN instructions validated with all 1s/0s/toggle (provide reusable sequences)\n",
          "logRecords": [],
          "name": "DFT:  Satisfy Design for Test features verification requirements for RTL0.8",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.181.c": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx",
          "category": "Simulation",
          "description": "- If the IP has a PGCB -  validate the functionality of the PGCB dfx overrides\n- If the IP has a Primary/Sideband endpoint - validate the functionality of the ISM dfx overrides.",
          "logRecords": [],
          "name": "DFV: Satisfy Design for Validation features verification requirements for RTL1.0",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.182.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx",
          "category": "Simulation",
          "description": "- Basic VISA testing using generated visa_validate test\n- Connectivity testing from DFX security plugin to each VISA ULM\n",
          "logRecords": [],
          "name": "DFV: Satisfy Design for Validation features verification requirements for RTL0.5",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.182.b": {
          "algorithm": "Manual Check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx",
          "category": "Simulation",
          "description": "Complete IP-level validation of trigger logic (for applicable IPs that connect to CTB)",
          "logRecords": [],
          "name": "DFV: Satisfy Design for Validation features verification requirements for RTL0.8",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.183.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx\n\nand\n\nhttps://dtspedia.intel.com/Vcsfaq\n\n",
          "category": "Simulation",
          "description": "- Coverage plan should include functional coverage requirements and targets for code coverage (line/branch/etc.).\n- Identify coverage conditions that should be reused at the integration level, and code them in a reusable way, e.g. It is recommended that functional coverage be 1 to 2 levels deep, with subset implemented using synthesizable coverage \"QuickCov\".\n- For code coverage, it is up to the IP to determine the mertices that fits its nature",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 19.183.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (19) Simulation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 19.183.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Coverage plan (including code/functional targets) defined and approved by customers",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: - Coverage plan should include functional coverage requirements and targets for code coverage (line/branch/etc.).\n\t- Identify coverage conditions that should be reused at the integration level, and code them in a reusable way, e.g. It is recommended that functional coverage be 1 to 2 levels deep, with subset implemented using synthesizable coverage \"QuickCov\".\n\t- For code coverage, it is up to the IP to determine the mertices that fits its nature",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: manual check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 19.183.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 19.183.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Coverage plan (including code/functional targets) defined and approved by customers",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.183.b": {
          "algorithm": "currently it is a manual check.  The thing we can automate is to check if the design was run with coverage enabled.\n\nAlgorithm can be set by doing an explicit search (grep) of the existance of \"*.vdb\" directories in the area where \"simv\" executable is created to see if the run was enabled with coverage . Checking for 50% coverage hit can be done only manually looking at the coverage report dashboard data. Checking for 50% coverage hit can be done only manually looking at the coverage report dashboard data. The only way to think of automation of meeting 50% coverage hit score is to grep for the number in the 1st column field under the \"score\" field in the dashboard.html or dashboard.txt file generated by the URG command to match and see if it >= 50 .",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx\n\nand\n\nhttps://dtspedia.intel.com/Vcsfaq",
          "category": "Simulation",
          "description": "- Code coverage numbers are captured straight from VCS.\n- Functional coverage numbers are calculated as follows:\n   % reported by VCS * % of coverage plan implemented\n- test content development reaches % per RTL 0.5 milestone\n- test regression pass rate reaches % per RTL 0.5 milestone",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 19.183.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (19) Simulation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 19.183.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Achieve Quality of Validation 50%",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: - Code coverage numbers are captured straight from VCS.\n\t- Functional coverage numbers are calculated as follows:\n\t   % reported by VCS * % of coverage plan implemented\n\t- test content development reaches % per RTL 0.5 milestone\n\t- test regression pass rate reaches % per RTL 0.5 milestone",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: currently it is a manual check.  The thing we can automate is to check if the design was run with coverage enabled.\n\t\n\tAlgorithm can be set by doing an explicit search (grep) of the existance of \"*.vdb\" directories in the area where \"simv\" executable is created to see if the run was enabled with coverage . Checking for 50% coverage hit can be done only manually looking at the coverage report dashboard data. Checking for 50% coverage hit can be done only manually looking at the coverage report dashboard data. The only way to think of automation of meeting 50% coverage hit score is to grep for the number in the 1st column field under the \"score\" field in the dashboard.html or dashboard.txt file generated by the URG command to match and see if it >= 50 .",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 19.183.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 19.183.b pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Achieve Quality of Validation 50%",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.183.c": {
          "algorithm": "Currently manual rule. But this rule can be automated by doing an explicit search (grep)  of the existance of  \"*.vdb\"  directories in the area where \"simv\"  is created. Checking for 85% coverage hit can be done only manually looking at the coverage report dashboard data. The only way to think of automation of meeting 85% coverage hit score is to grep for the number in the 1st column field  under the \"score\" field in the dashboard.html   or dashboard.txt  file generated by the URG command  to match and see if it  >= 85 .",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx\n\nand\n\nhttps://dtspedia.intel.com/Vcsfaq",
          "category": "Simulation",
          "description": "- Code coverage numbers are captured straight from VCS.\n- Functional coverage numbers are calculated as follows:\n% reported by VCS * % of coverage plan implemented\n- test content development reaches % per RTL 0.8 milestone\n- test regression pass rate reaches % per RTL 0.8 milestone",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 19.183.c ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (19) Simulation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 19.183.c",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Achieve Quality of Validation 85%",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: - Code coverage numbers are captured straight from VCS.\n\t- Functional coverage numbers are calculated as follows:\n\t% reported by VCS * % of coverage plan implemented\n\t- test content development reaches % per RTL 0.8 milestone\n\t- test regression pass rate reaches % per RTL 0.8 milestone",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Currently manual rule. But this rule can be automated by doing an explicit search (grep)  of the existance of  \"*.vdb\"  directories in the area where \"simv\"  is created. Checking for 85% coverage hit can be done only manually looking at the coverage report dashboard data. The only way to think of automation of meeting 85% coverage hit score is to grep for the number in the 1st column field  under the \"score\" field in the dashboard.html   or dashboard.txt  file generated by the URG command  to match and see if it  >= 85 .",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 19.183.c",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 19.183.c pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Achieve Quality of Validation 85%",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.183.d": {
          "algorithm": "currently it is a manual check. The thing we can automate is to check if the design was run with coverage enabled.\n\nAlgorithm can be set by doing an explicit search (grep) of the existance of \"*.vdb\" directories in the area where \"simv\" executable is created to see if the run was enabled with coverage . Checking for 100% coverage hit can be done only manually looking at the coverage report dashboard data. Checking for 100% coverage hit can be done only manually looking at the coverage report dashboard data. The only way to think of automation of meeting 50% coverage hit score is to grep for the number in the 1st column field under the \"score\" field in the dashboard.html or dashboard.txt file generated by the URG command to match and see if it  == 100 .\nKeys:",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx\n\nand\n\nhttps://dtspedia.intel.com/Vcsfaq",
          "category": "Simulation",
          "description": "- Code coverage numbers are captured straight from VCS.\n- Functional coverage numbers are calculated as follows:\n% reported by VCS * % of coverage plan implemented\n- test content development reaches % per RTL 1.0 milestone\n- test regression pass rate reaches % per RTL 1.0 milestone",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 19.183.d ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (19) Simulation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 19.183.d",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Achieve Quality of Validation 100%",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: - Code coverage numbers are captured straight from VCS.\n\t- Functional coverage numbers are calculated as follows:\n\t% reported by VCS * % of coverage plan implemented\n\t- test content development reaches % per RTL 1.0 milestone\n\t- test regression pass rate reaches % per RTL 1.0 milestone",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: currently it is a manual check. The thing we can automate is to check if the design was run with coverage enabled.\n\t\n\tAlgorithm can be set by doing an explicit search (grep) of the existance of \"*.vdb\" directories in the area where \"simv\" executable is created to see if the run was enabled with coverage . Checking for 100% coverage hit can be done only manually looking at the coverage report dashboard data. Checking for 100% coverage hit can be done only manually looking at the coverage report dashboard data. The only way to think of automation of meeting 50% coverage hit score is to grep for the number in the 1st column field under the \"score\" field in the dashboard.html or dashboard.txt file generated by the URG command to match and see if it  == 100 .\n\tKeys:",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 19.183.d",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 19.183.d pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Achieve Quality of Validation 100%",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.184.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx",
          "category": "Simulation",
          "description": "- Functional validation of fuses and straps (exceptions should be noted)\n- Fuse and straps request/transfer on IOSF-SB (excludes hard straps)\n",
          "logRecords": [],
          "name": "FUSE: Satisfy IP Fuses verification requirements for RTL0.5",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.184.b": {
          "algorithm": "Manual Check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx",
          "category": "Simulation",
          "description": "Functional validation of all fuses and straps(no exception)",
          "logRecords": [],
          "name": "FUSE: Satisfy IP Fuses verification requirements for RTL0.8",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.187.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx, referring to the \"Reset\" section for background on this rule.\n\nAt a high level, this rule requires \"basic\" testing (for the stated milestone) with VCS-NLP (\"UPF enabled\"), with x-prop enabled.\n\nRefer to section \"Random Corruption\" in $VCS_HOME/doc/UserGuide/pdf/mvsim_native.pdf for a description of the VCS-NLP facility described in the Description above.\n\nThe \"x-prop\" simulator facility is described in chapter 10 of $VCS_HOME/doc/UserGuide/pdf/vcsmx_ug.pdf.",
          "category": "Simulation",
          "description": "- Reset(include both cold boot and warm reset): Validate with all legal values of power and clock delivery ordering\n- Reset(include both cold boot and warm reset): Validate with all legal values of reset signal ordering (pwrgd_rst, deep_rst, side_rst, prim_rst)\n- Reset(include both cold boot and warm reset): FUSE/STRAP pull, IP_READY messaging tested - including all legal combinations for ordering between each SB end point (if IP has multiple)\n- Reset and CONFIGURATION (behavioral BIOS/Driver config) using only IP interfaces (MINIMAL/NO forces inside the IP) tested with a test that includes traffic\n- Reset acceleration for the reset flow, configuration using {HW defaults, injections/forces} usable by tests that do not care about reset\n- Enable X-PROP and VCS-NLP and simulate reset+ testing: at least 1 test with min forces and 1 test with accelerated reset (both with traffic) passing.\n\n",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 19.187.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (19) Simulation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 19.187.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RESET: Satisfy IP Reset Verification requirements for RTL0.5",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: - Reset(include both cold boot and warm reset): Validate with all legal values of power and clock delivery ordering\n\t- Reset(include both cold boot and warm reset): Validate with all legal values of reset signal ordering (pwrgd_rst, deep_rst, side_rst, prim_rst)\n\t- Reset(include both cold boot and warm reset): FUSE/STRAP pull, IP_READY messaging tested - including all legal combinations for ordering between each SB end point (if IP has multiple)\n\t- Reset and CONFIGURATION (behavioral BIOS/Driver config) using only IP interfaces (MINIMAL/NO forces inside the IP) tested with a test that includes traffic\n\t- Reset acceleration for the reset flow, configuration using {HW defaults, injections/forces} usable by tests that do not care about reset\n\t- Enable X-PROP and VCS-NLP and simulate reset+ testing: at least 1 test with min forces and 1 test with accelerated reset (both with traffic) passing.\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: manual check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 19.187.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 19.187.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "RESET: Satisfy IP Reset Verification requirements for RTL0.5",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.187.b": {
          "algorithm": "",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx\n\n",
          "category": "Simulation",
          "description": "- Reset: Validate Phy flows such as compensation (Icomp/Rcomp) (where applicable)\n- Runtime resets (cold, warm, Sx, partitioned, FLR) with including post-reset traffic exercised\n- DEBUG and SURVIVABILITY features/defeatures enabled (if applicable) (tracing, breakpoints, defeatures, overrides) - 70% exercised\n- Test some supported configuration SKUs (i.e. CSI2/3 lanes, ISP chops, clock ratios, cache sizes) - 70% exercised\n- Complete IP DFx sequences validated for SOC HVM development. HVM mode eg. HBP support & validated.\n- Enable X-PROP and VCS-NLP and simulate reset+ testing: at least 1 test with min forces and 1 test with accelerated reset (both with traffic) passing.\n",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 19.187.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (19) Simulation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 19.187.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RESET: Satisfy IP Reset Verification requirements for RTL0.8",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: - Reset: Validate Phy flows such as compensation (Icomp/Rcomp) (where applicable)\n\t- Runtime resets (cold, warm, Sx, partitioned, FLR) with including post-reset traffic exercised\n\t- DEBUG and SURVIVABILITY features/defeatures enabled (if applicable) (tracing, breakpoints, defeatures, overrides) - 70% exercised\n\t- Test some supported configuration SKUs (i.e. CSI2/3 lanes, ISP chops, clock ratios, cache sizes) - 70% exercised\n\t- Complete IP DFx sequences validated for SOC HVM development. HVM mode eg. HBP support & validated.\n\t- Enable X-PROP and VCS-NLP and simulate reset+ testing: at least 1 test with min forces and 1 test with accelerated reset (both with traffic) passing.\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 19.187.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 19.187.b pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "RESET: Satisfy IP Reset Verification requirements for RTL0.8",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.187.c": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx",
          "category": "Simulation",
          "description": "- X-INIT/X-PROP reset+ testing with UPF for power aware simulation (-pa_random_corrupt X): all tests passing with both {min_forces,  accelerated} reset\n- Runtime  resets (cold, warm, partitioned, FLR) with including post-reset traffic (fully exercised)\n- DEBUG and SURVIVABILITY features/defeatures enabled (if applicable) (tracing, breakpoints, defeatures, overrides) - fully exercised\n- Test all supported configuration SKUs (i.e. CSI2/3 lanes, ISP chops, clock ratios, cache sizes) - fully exercised\n",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 19.187.c ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (19) Simulation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 19.187.c",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RESET: Satisfy IP Reset Verification requirements for RTL1.0",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: - X-INIT/X-PROP reset+ testing with UPF for power aware simulation (-pa_random_corrupt X): all tests passing with both {min_forces,  accelerated} reset\n\t- Runtime  resets (cold, warm, partitioned, FLR) with including post-reset traffic (fully exercised)\n\t- DEBUG and SURVIVABILITY features/defeatures enabled (if applicable) (tracing, breakpoints, defeatures, overrides) - fully exercised\n\t- Test all supported configuration SKUs (i.e. CSI2/3 lanes, ISP chops, clock ratios, cache sizes) - fully exercised\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Manual check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 19.187.c",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 19.187.c pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "RESET: Satisfy IP Reset Verification requirements for RTL1.0",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.191.a": {
          "algorithm": "Manual Check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx\n\nRefer to the Chassis Specification for complete details.",
          "category": "Simulation",
          "description": "Basic Chassis-defined PGCB power-gating flows (Hardware-Autonomous Power Gating (\"HAPG\"), Software Initiated Power Gating, etc.) exercised. \nIP basic internal power management state (D0i3/D3hot/D3cold, core C state, GT RC6 / display DC6, device low power link state etc) exercised with basic flow functional. D0i3/D3 PCE Register and D0i3/D3 D0i3C register exercised.  Hardware Autonomous Power Gating (HAPG) basic entry and exit exercised. Hardware Autonomous Power Gating (HAPG) local power gating exercised. DSLDO/LDO basic config register read/write exercised. DSLDO/LD0 basic interface exercised.  HIP accessible flow exercised\n\n",
          "logRecords": [],
          "name": "VCS-NLP Power aware Simulation per Simulation Checklist for RTL0.5",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.191.b": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx",
          "category": "Simulation",
          "description": "- IP basic D0i3/D3hot/D3cold entry/exit\n- Hardware Autonomous Power Gating (HAPG) basic entry and exit\n- Hardware Autonomous Power Gating (HAPG) wake events\n- Hardware Autonomous Power Gating (HAPG) local power gating\n- D0i3/D3hot/D3cold entry/exit\n- D0i3/D3 PCE Register\n- D0i3/D3 D0i3C register\n- S0ix basic entry exit\n- S0ix entry/exit with different IP configurations, with all possible wake conditions, and with aborts\n- DSLDO/LDO basic config register read/write\n- DSLDO/LD0 basic interface\n- Complete testing of custom or non-standard interface with PMU/PUNIT, if applicable.  (Any interface that is not via PGCB's, Reset, LDO, Hammock Harbor, HIP/PHY control.)\n- Complete testing of peer-to-peer PM related interaction, if applicable.  (Any IP to IP interaction needed for PM that does not involve the PMU/PUNIT)\n- HIP: basic HAPG entry/exit, HIP accessible flow\n- HIP: S0ix flow\n- Latency Tolerantly Report (LTR) - basic latency reporting__\n- Running IP traffic before and after power management flow\n- Other advanced power management features (GV, Save / restore, thermal, etc)\n",
          "logRecords": [],
          "name": "POWER: Satisfy Power Verification requirements for RTL0.8",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.191.c": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "http://goto/sip_method --> verification --> IPDSSimulationTraining.pptx",
          "category": "Simulation",
          "description": "- D0i3/D3 entry/exit/abort corner cases\n- D0i3/D3 wake signal priority\n- D0i3/D3 power gate request while power gated\n- D0i3/D3 basic IP inaccessible entry/exit flow\n- Save/restore with non-reset data values\n- HIP: HAPG Entry w/ abort/corner case\n- HIP: non-reset data coverage\n- HIP: inaccessible flow\n- HIP: PMC Power Gate Control Override\n",
          "logRecords": [],
          "name": "POWER: Satisfy Power Verification requirements for RTL1.0",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.331.a": {
          "algorithm": "Start with IP level netlist generated during synthesis.\nProvide pointer to Verilog descriptions of the standard cell library associated with netlist, create ACE HDL.\nCreate GLS library in ACE udf file setup\nCreate GLS ACE model, replacing RTL with netlist",
          "attributes": {},
          "background": "See the \"GLS setup\" section of:\n\nhttps://wiki.ith.intel.com/download/attachments/848534964/GLS%20-SIIP1.0.pptx?version=2&modificationDate=1521570527393&api=v2",
          "category": "Simulation",
          "description": "All IP Providers are required to run unit-delay functional GLS to ensure the IP is GLS friendly.  This includes identifying and removing (or guarding with a macro) cross module references (spy signals) and forces.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 19.331.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (19) Simulation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 19.331.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: All IP Providers are required to run functional GLS",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: All IP Providers are required to run unit-delay functional GLS to ensure the IP is GLS friendly.  This includes identifying and removing (or guarding with a macro) cross module references (spy signals) and forces.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Start with IP level netlist generated during synthesis.\n\tProvide pointer to Verilog descriptions of the standard cell library associated with netlist, create ACE HDL.\n\tCreate GLS library in ACE udf file setup\n\tCreate GLS ACE model, replacing RTL with netlist",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 19.331.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 19.331.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "All IP Providers are required to run functional GLS",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "19.369.a": {
          "algorithm": "Parse the CTECH simulation log file and examine the log for message 'CTECH_METAFLOP' displayed by the CTECH cells.\n\nOverride key for CTECH simulation log = ctechsimulationlog",
          "attributes": {},
          "background": "",
          "category": "Simulation",
          "description": "IP must run the regression using the standard CTECH_LIB with the double sync meta-stability model enabled with N+1/-1 mode.\nIP should supply the plusarg +CTECH_LIB_META_DISPLAY for one or more tests, run such tests, and provide a test's simulation log to ZirconQA\nIP needs to supply +CTECH_LIB_META_DISPLAY as part of simv_args in the local_ivars.udf file to generate the collateral that the rule is looking for",
          "logRecords": [],
          "name": "IP must run the regression using the standard CTECH_LIB with the double sync meta-stability model enabled with N+1/-1 mode",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "2.309.a": {
          "algorithm": "For QuestaCDC:\n\n1.Locate the CDC run log files (*_run.log). There must be at least 1 found.\na.This log can also be zipped (.log.gz, .log.bz2).\n2.Locate the CDC report file (cdc.rpt)\na.This report can also be zipped (.rpt.gz, .rpt.bz2).\n3.Locate the cdc_setting.rpt file\na.This report can also be zipped (.rpt.gz, .rpt.bz2).\nFor QuestaCDC-CFM:\n1.Locate top level CDC file (exactly 1 file) - key: cdctopfile\na.File name = cdc_hier_ctrl_[alias].v\nFor QuestaCDC=HDM:\n1.Locate HCDC dump file (hcdc_*.hierdb)\n2.Locate HCDC tcl file (hcdc_*.tcl)\n3.Locate HCDC report file (hcdc.rpt)\na.This report can also be zipped (.rpt.gz, .rpt.bz2)\n\nFor Spyglass-CDC:\n1. Locate the Spyglass-CDC report file (CDC-detailed-report.rpt)\na. This report can also be zipped (.rpt.gz, .rpt.bz2).\n2. Locate the Spyglass-CDC abstract model (*_cdc_abstract.sgdc)\n\n\nOverride key for running QuestaCDC = cdcquesta\nOverride key for running QuestaCDC-CFM = cdcquestacfm\nOverride key for running QuestaCDC-HDM = cdcquestahdm\nOverride key for CDC report directory = cdcdir\nOverride key for CDC top level file = cdctopfile\nOverride key for running SpyglassCDC = cdcspyglass\nOverride key for Spyglass CDC directory = cdcdirspyglass",
          "attributes": {
            "collateral: cdcdir": ".//tools/cdc/ADL/reports/cdc_run.log, .//tools/cdc/ADL/reports/cdc.rpt, .//tools/cdc/ADL/reports/cdc_setting.rpt, .//tools/cdc/ADL/reports/hcdc_dfxsecure_plugin.hierdb, .//tools/cdc/ADL/reports/hcdc_dfxsecure_plugin.tcl, .//tools/cdc/ADL/reports/hcdc.rpt, .//tools/spyglass_cdc/reports/dfxsecure_plugin_DFX_EARLYBOOT_FEATURE_ENABLE_1_DFX_NUM_O_1_cdc_abstract.sgdc, .//tools/spyglass_cdc/reports/dfxsecure_plugin_DFX_EARLYBOOT_FEATURE_ENABLE__dnc__DFX_N_2_cdc_abstract.sgdc, .//tools/spyglass_cdc/reports/dfxsecure_plugin_cdc_abstract.sgdc, .//tools/spyglass_cdc/reports/CDC-detailed-report.rpt",
            "collateral: cdctopfile": ".//tools/cdc/ADL/reports/cdc_hier_ctrl_dfxsecure_plugin.v",
            "key: cdcdir": ".//tools/cdc/ADL/reports",
            "key: cdcdirspyglass": ".//tools/spyglass_cdc/reports/",
            "key: cdcquesta": "True",
            "key: cdcquestacfm": "True",
            "key: cdcquestahdm": "True",
            "key: cdcspyglass": "True",
            "key: cdctopfile": "cdc_hier_ctrl_dfxsecure_plugin.v"
          },
          "background": "This is rules that combined 4 rules from previous CDC version for rules 2.21a, 2.24.a, 2.32.b,2.36.a.",
          "category": "CDC",
          "description": "For QuestaCDC:\n\n1.\tCDC CFM exist.\na. The CFM must have exact 1 top level file (cdc_hier_ctrl_[alias].v) locate in CDC directory. (tools/cdc)\n2.\tCDC_run.log file must exist.\n3.\tCDC report (cdc.rpt) must exist.\n4.\tCheck CDC setting report (cdc_settings.rpt) must exist.\n\nFor Spyglass-CDC:\n\n1. Spyglass-CDC abstract model must exist. The file name of abstract model would be as *_cdc_abstract.sgdc\n2. Spyglass-CDC report file exist (CDC-detailed-report.rpt).",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.309.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.309.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDC input/output collateral delivered ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: For QuestaCDC:\n\t\n\t1.\tCDC CFM exist.\n\ta. The CFM must have exact 1 top level file (cdc_hier_ctrl_[alias].v) locate in CDC directory. (tools/cdc)\n\t2.\tCDC_run.log file must exist.\n\t3.\tCDC report (cdc.rpt) must exist.\n\t4.\tCheck CDC setting report (cdc_settings.rpt) must exist.\n\t\n\tFor Spyglass-CDC:\n\t\n\t1. Spyglass-CDC abstract model must exist. The file name of abstract model would be as *_cdc_abstract.sgdc\n\t2. Spyglass-CDC report file exist (CDC-detailed-report.rpt).",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: For QuestaCDC:\n\t\n\t1.Locate the CDC run log files (*_run.log). There must be at least 1 found.\n\ta.This log can also be zipped (.log.gz, .log.bz2).\n\t2.Locate the CDC report file (cdc.rpt)\n\ta.This report can also be zipped (.rpt.gz, .rpt.bz2).\n\t3.Locate the cdc_setting.rpt file\n\ta.This report can also be zipped (.rpt.gz, .rpt.bz2).\n\tFor QuestaCDC-CFM:\n\t1.Locate top level CDC file (exactly 1 file) - key: cdctopfile\n\ta.File name = cdc_hier_ctrl_[alias].v\n\tFor QuestaCDC=HDM:\n\t1.Locate HCDC dump file (hcdc_*.hierdb)\n\t2.Locate HCDC tcl file (hcdc_*.tcl)\n\t3.Locate HCDC report file (hcdc.rpt)\n\ta.This report can also be zipped (.rpt.gz, .rpt.bz2)\n\t\n\tFor Spyglass-CDC:\n\t1. Locate the Spyglass-CDC report file (CDC-detailed-report.rpt)\n\ta. This report can also be zipped (.rpt.gz, .rpt.bz2).\n\t2. Locate the Spyglass-CDC abstract model (*_cdc_abstract.sgdc)\n\t\n\t\n\tOverride key for running QuestaCDC = cdcquesta\n\tOverride key for running QuestaCDC-CFM = cdcquestacfm\n\tOverride key for running QuestaCDC-HDM = cdcquestahdm\n\tOverride key for CDC report directory = cdcdir\n\tOverride key for CDC top level file = cdctopfile\n\tOverride key for running SpyglassCDC = cdcspyglass\n\tOverride key for Spyglass CDC directory = cdcdirspyglass",
              "severity": "INFO"
            }
          ],
          "name": "CDC input/output collateral delivered ",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "2.310.a": {
          "algorithm": "Locate the CdcLint violations xml file (tools/cdcLint/[alias]_violations.xml for QuestaCDC and tools/cdcLint/cdclint_violations_sgcdc.xml for Spyglass-CDC)\nVerify the results are clean by parsing xml and verifying there are no unwaived violations.\n\nList of CDC checks can be found at:\nhttps://intelpedia.intel.com/Clock_Domain_Crossing/onda_cdc\n\n",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "After running CDC, you need to run cdcLint to verify the completeness of the CDC run.  The output will be a file called tools/cdcLint/[alias]_violations.xml.  This file will be used to determine the success or failure of the CDC run.  There is also a textual [alias]_violations.out file.\nFor more info on how to enable cdc:\nhttps://dtspedia.intel.com/Clock_Domain_Crossing\n\nFor more info on how to enable cdclint:\nhttps://dtspedia.intel.com/CDC_Lint",
          "category": "CDC",
          "description": "Check results of CdcLint run for CDC",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.310.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.310.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint has been run",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Check results of CdcLint run for CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Locate the CdcLint violations xml file (tools/cdcLint/[alias]_violations.xml for QuestaCDC and tools/cdcLint/cdclint_violations_sgcdc.xml for Spyglass-CDC)\n\tVerify the results are clean by parsing xml and verifying there are no unwaived violations.\n\t\n\tList of CDC checks can be found at:\n\thttps://intelpedia.intel.com/Clock_Domain_Crossing/onda_cdc\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint has been run",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "2.382.a": {
          "algorithm": "Make sure cdc_run.log not contain:\n'\\\\bcdc-3\\\\b'           => { \"rule_id\" => \"ClockConstantAtTop\",\n'\\\\bcdc-9\\\\b'           => { \"rule_id\" => \"ModelDifferentClockGroupMismatch\",",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "These rules used to be subsets of the CDClint rule, cdc_109\nThe output of CDClint run will be a file called tools/cdcLint/[alias]_violations.xml. This file will be used to determine the success or failure of the CDC run. There is also a textual [alias]_violations.out file. Please make sure warning flag by questa tools being review and fix. If error expected please waive the violations. Here the method to waive violation in cdclint using GUI:\nhttps://dtspedia.intel.com/CDC_Lint#Launching_CDCLint_GUI",
          "category": "CDC",
          "description": "This rule includes any CDClint rule having to do with clocks which are classified as \"Error.\"  These rules have a CDClint \"group\" classification of CDClint_ClockError.  Any CDClint rule having the CDClint_ClockError designation will be included in the zircon 2.382a rule bucket.\n\nCurrently, the following rules are designated as CDClint_ClockError:\n <ul>\n<li>ClockConstantAtTop</li>\n   <ul><li>cdc_run.log error: netlist-61: Block clock not connected to a clock at top level</li>\n          <li>cdc_run.log error: cdc-3: Not expecting port to be a clock</li>\n          <li>cdc_run.log error: hcdc-3: Non-clock port was inferred or specified as a clock port during block-level hierarchical analysis</li>\n          <li>cdc_run.log error: hcdc-48: Constant port was inferred or specified as a clock port during block-level hierarchical analysis.</li>\n          <li>cdc_run.log error: hcdc-49: Stable port was inferred or specified as a clock port during block-level hierarchical analysis.</li>\n   </ul>\n<li>ModelDifferentClockGroupMismatch</li>\n   <ul><li>cdc_run.log error: cdc-9: Not expecting clocks to belong to same group</li>\n          <li>cdc_run.log error: hcdc-18: Not expecting clocks to be in same group</li>\n   </ul>\n</ul>",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.382.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.382.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint - Resolve Clock Errors",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This rule includes any CDClint rule having to do with clocks which are classified as \"Error.\"  These rules have a CDClint \"group\" classification of CDClint_ClockError.  Any CDClint rule having the CDClint_ClockError designation will be included in the zircon 2.382a rule bucket.\n\t\n\tCurrently, the following rules are designated as CDClint_ClockError:\n\t <ul>\n\t<li>ClockConstantAtTop</li>\n\t   <ul><li>cdc_run.log error: netlist-61: Block clock not connected to a clock at top level</li>\n\t          <li>cdc_run.log error: cdc-3: Not expecting port to be a clock</li>\n\t          <li>cdc_run.log error: hcdc-3: Non-clock port was inferred or specified as a clock port during block-level hierarchical analysis</li>\n\t          <li>cdc_run.log error: hcdc-48: Constant port was inferred or specified as a clock port during block-level hierarchical analysis.</li>\n\t          <li>cdc_run.log error: hcdc-49: Stable port was inferred or specified as a clock port during block-level hierarchical analysis.</li>\n\t   </ul>\n\t<li>ModelDifferentClockGroupMismatch</li>\n\t   <ul><li>cdc_run.log error: cdc-9: Not expecting clocks to belong to same group</li>\n\t          <li>cdc_run.log error: hcdc-18: Not expecting clocks to be in same group</li>\n\t   </ul>\n\t</ul>",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Make sure cdc_run.log not contain:\n\t'\\\\bcdc-3\\\\b'           => { \"rule_id\" => \"ClockConstantAtTop\",\n\t'\\\\bcdc-9\\\\b'           => { \"rule_id\" => \"ModelDifferentClockGroupMismatch\",",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint - Resolve Clock Errors",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "2.383.a": {
          "algorithm": "Make sure cdc.rpt not contain:\n'\\\\bIgnored\\\\s+:\\\\s*\\\\((\\\\d+)\\\\)'                           => { \"rule_id\" => \"IgnoredClocks\",\n'\\\\bInferred\\\\s+:\\\\s*\\\\((\\\\d+)\\\\)'                          => { \"rule_id\" => \"InferredClocks\"\n\nMake sure cdc_run.log not contain:\n'\\\\bcdc-4\\\\b'           => { \"rule_id\" => \"ModelClockMissing\",\n'\\\\bcdc-4\\\\b'           => { \"rule_id\" => \"ModelClockMissing\",\n'\\\\bhcdc-2\\\\b'          => { \"rule_id\" => \"ModelClockMissing\",\n'\\\\bcdc-5\\\\b'           => { \"rule_id\" => \"ModelSameClockGroupMismatch\",\n'\\\\bnetlist-56\\\\b'      => { \"rule_id\" => \"ModelSameClockGroupMismatch\",\n'\\\\bhcdc-4\\\\b'          => { \"rule_id\" => \"ModelSameClockGroupMismatch\",",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "These rules used to be subsets of the CDClint rule cdc_106, cdc_109\nThe output of CDClint run will be a file called tools/cdcLint/[alias]_violations.xml. This file will be used to determine the success or failure of the CDC run. There is also a textual [alias]_violations.out file. Please fix the warnings flag by tools and make sure the violations rule id not exist in tools/cdcLint/[alias]_violations.xml. Fatal cannot be waive.",
          "category": "CDC",
          "description": "This rule includes any CDClint rule having to do with clocks which are classified as \"Fatal.\"  These rules have a CDClint \"group\" designation of CDClint_ClockFatal.  Any CDClint rule having the CDClint_ClockFatal designation will be included in the zircon 2.383.a rule bucket.\nCurrently, the following rules are designated as CDClint_ClockFatal:\n<ul>\n<li>IgnoredClocks</li>\n<ul><li>cdc.rpt error: \"Found X *Ignored\"</li></ul>\n<li>InferredClocks</li>\n<ul><li>cdc.rpt error: \"Found X *Inferred\"</li></ul>\n<li>ModelClockMissing</li>\n<ul><li>cdc_run.log error: netlist-58: Block port not defined as a clock in block control file.</li>\n       <li>cdc_run.log error: cdc-4: Expecting port to be a clock</li></ul>\n<li>ModelSameClockGroupMismatch</li>\n<ul><li>cdc_run.log error: cdc-5: Expecting clocks to belong to same group</li></ul>\n</ul>",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.383.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.383.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint - Resolve Clock Fatals",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This rule includes any CDClint rule having to do with clocks which are classified as \"Fatal.\"  These rules have a CDClint \"group\" designation of CDClint_ClockFatal.  Any CDClint rule having the CDClint_ClockFatal designation will be included in the zircon 2.383.a rule bucket.\n\tCurrently, the following rules are designated as CDClint_ClockFatal:\n\t<ul>\n\t<li>IgnoredClocks</li>\n\t<ul><li>cdc.rpt error: \"Found X *Ignored\"</li></ul>\n\t<li>InferredClocks</li>\n\t<ul><li>cdc.rpt error: \"Found X *Inferred\"</li></ul>\n\t<li>ModelClockMissing</li>\n\t<ul><li>cdc_run.log error: netlist-58: Block port not defined as a clock in block control file.</li>\n\t       <li>cdc_run.log error: cdc-4: Expecting port to be a clock</li></ul>\n\t<li>ModelSameClockGroupMismatch</li>\n\t<ul><li>cdc_run.log error: cdc-5: Expecting clocks to belong to same group</li></ul>\n\t</ul>",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Make sure cdc.rpt not contain:\n\t'\\\\bIgnored\\\\s+:\\\\s*\\\\((\\\\d+)\\\\)'                           => { \"rule_id\" => \"IgnoredClocks\",\n\t'\\\\bInferred\\\\s+:\\\\s*\\\\((\\\\d+)\\\\)'                          => { \"rule_id\" => \"InferredClocks\"\n\t\n\tMake sure cdc_run.log not contain:\n\t'\\\\bcdc-4\\\\b'           => { \"rule_id\" => \"ModelClockMissing\",\n\t'\\\\bcdc-4\\\\b'           => { \"rule_id\" => \"ModelClockMissing\",\n\t'\\\\bhcdc-2\\\\b'          => { \"rule_id\" => \"ModelClockMissing\",\n\t'\\\\bcdc-5\\\\b'           => { \"rule_id\" => \"ModelSameClockGroupMismatch\",\n\t'\\\\bnetlist-56\\\\b'      => { \"rule_id\" => \"ModelSameClockGroupMismatch\",\n\t'\\\\bhcdc-4\\\\b'          => { \"rule_id\" => \"ModelSameClockGroupMismatch\",",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint - Resolve Clock Fatals",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "2.384.a": {
          "algorithm": "Make sure cdc.rpt not contain:\n'\\\\s*Violations\\\\s*\\\\((\\\\d+)\\\\)'                            => { \"rule_id\" => \"CDCViolations\",\n'\\\\s*Cautions\\\\s*\\\\((\\\\d+)\\\\)'                              => { \"rule_id\" => \"CDCCautions\",",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "These rules used to be subsets of the CDClint rule cdc_107\nPlease make sure there are no violation and caution from cdc run.",
          "category": "CDC",
          "description": "This rule includes any CDClint rule having to do with actual CDC violations which have not yet been converged.  These are classified as \"Fatal\" and have a \"group\" classification of CDClint_ConvergenceFatal.  Any CDClint rule having the CDClint_ConvergenceFatal designation will be included in the zircon 2.384.a rule bucket.\nCurrently, the following rules are designated as CDClint_ConvergenceFatal:\n<ul>\n<li>CDCcautions</li>\n<ul><li>cdc.rpt error: \"Found X *Cautions\"</li></ul>\n<li>CDCviolations</li>\n<ul><li>cdc.rpt error: \"Found X *Violations\"</li></ul>\n</ul>",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.384.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.384.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint - Resolve CDC Convergence Fatals",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This rule includes any CDClint rule having to do with actual CDC violations which have not yet been converged.  These are classified as \"Fatal\" and have a \"group\" classification of CDClint_ConvergenceFatal.  Any CDClint rule having the CDClint_ConvergenceFatal designation will be included in the zircon 2.384.a rule bucket.\n\tCurrently, the following rules are designated as CDClint_ConvergenceFatal:\n\t<ul>\n\t<li>CDCcautions</li>\n\t<ul><li>cdc.rpt error: \"Found X *Cautions\"</li></ul>\n\t<li>CDCviolations</li>\n\t<ul><li>cdc.rpt error: \"Found X *Violations\"</li></ul>\n\t</ul>",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Make sure cdc.rpt not contain:\n\t'\\\\s*Violations\\\\s*\\\\((\\\\d+)\\\\)'                            => { \"rule_id\" => \"CDCViolations\",\n\t'\\\\s*Cautions\\\\s*\\\\((\\\\d+)\\\\)'                              => { \"rule_id\" => \"CDCCautions\",",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint - Resolve CDC Convergence Fatals",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "2.385.a": {
          "algorithm": "Make sure cdc_run.log not contain:\n'\\\\bparser-47\\\\b'       => { \"rule_id\" => \"MissingModuleRTL\",\n'\\\\bparser-290\\\\b'      => { \"rule_id\" => \"MultipleWritePortsOnMemory\",\n'\\\\belaboration-502\\\\b' => { \"rule_id\" => \"RTLCodingError\",\n'\\\\belaboration-510\\\\b' => { \"rule_id\" => \"RTLCodingError\",\n'\\\\belaboration-506\\\\b' => { \"rule_id\" => \"RTLCodingError\",\n'\\\\belaboration-504\\\\b' => { \"rule_id\" => \"RTLCodingError\",\n'\\\\bparser-48\\\\b'       => { \"rule_id\" => \"UnsupportedConstructInRTL\",",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "These rules used to be subsets of the CDClint rule cdc_107\nThe output of CDClint run will be a file called tools/cdcLint/[alias]_violations.xml. This file will be used to determine the success or failure of the CDC run. There is also a textual [alias]_violations.out file. Please fix the design issue and make sure there are no related rule violations in tools/cdcLint/[alias]_violations.xml.",
          "category": "CDC",
          "description": "This rule includes any CDClint rule having to do with elaboration problems and are classified as \"Fatal.\"  These rules have a CDClint \"group\" designation of CDClint_ElaborationFatal.  Any CDClint rule having the CDClint_ElaborationFatal designation will be included in the zircon 2.385.a rule bucket.\nCurrently, the following rules are designated as CDClint_ElaborationFatal:\n<ul>\n<li>MissingModuleRTL</li>\n   <ul><li>cdc_run.log error: parser-47: Unresolved module</li></ul>\n<li>MultipleWritePortsOnMemory</li>\n   <ul><li>cdc_run.log error: parser-290: Too many write ports on memory.</li></ul>\n<li>RTLCodingError</li>\n   <ul><li>cdc_run.log error: elaboration-502: Incorrect coding style for asynchronous reset inference.</li>\n          <li>cdc_run.log error: elaboration-504: Mixed blocking and non-blocking assignments for a variable.</li>\n          <li>cdc_run.log error: elaboration-506: Cannot unroll 'for' statement</li>\n          <li>cdc_run.log error: elaboration-509: Function recursion is not supported</li>\n          <li>cdc_run.log error: elaboration-515: Variable is assigned in multiple 'always' statements</li>\n          <li>cdc_run.log error: elaboration-527: Blocking assignments that have a delay in a non-clocked 'always' statement are not supported.</li>\n          <li>cdc_run.log error: elaboration-531: Verilog 'assign'/'deassign' statements are not supported.</li>\n          <li>cdc_run.log error: elaboration-534: Sliced memories are not supported.</li>\n          <li>cdc_run.log error: elaboration-538: Unknown system task.</li>\n          <li>cdc_run.log error: elaboration-539: User-defined primitives are not supported.</li>\n          <li>cdc_run.log error: elaboration-542: Verilog 'wait' statements are not supported.</li>\n          <li>cdc_run.log error: elaboration-547: Cannot unroll 'for' statement</li>\n          <li>cdc_run.log error: elaboration-552: VHDL wait only supported for clock definitions.</li>\n          <li>cdc_run.log error: elaboration-565: Function recursion exceeds recursion threshold.</li>\n          <li>cdc_run.log error: elaboration-568: Could not determine the clocking event for '$past'.</li>\n          <li>cdc_run.log error: elaboration-569: Could not determine the number of ticks for '$past'.</li>\n          <li>cdc_run.log error: elaboration-801: Illegal bit-part-select-array.</li>\n          <li>cdc_run.log error: elaboration-803: Multi-dimensional array is not supported.</li>\n          <li>cdc_run.log error: elaboration-814: Hierarchical functions are not supported.</li></ul>\n<li>UnsupportedConstructInRTL</li>\n   <ul><li>cdc_run.log error: parser-48: Unsupported construct.</li></ul>\n<li>VoptError</li>\n   <ul><li>cdc_run.log error: parser-284: Vopt error.  The compiler prints the source code location and a vopt message and then terminates.</li></ul>\n</ul>",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.385.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.385.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint - Resolve Elaboration Fatals",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This rule includes any CDClint rule having to do with elaboration problems and are classified as \"Fatal.\"  These rules have a CDClint \"group\" designation of CDClint_ElaborationFatal.  Any CDClint rule having the CDClint_ElaborationFatal designation will be included in the zircon 2.385.a rule bucket.\n\tCurrently, the following rules are designated as CDClint_ElaborationFatal:\n\t<ul>\n\t<li>MissingModuleRTL</li>\n\t   <ul><li>cdc_run.log error: parser-47: Unresolved module</li></ul>\n\t<li>MultipleWritePortsOnMemory</li>\n\t   <ul><li>cdc_run.log error: parser-290: Too many write ports on memory.</li></ul>\n\t<li>RTLCodingError</li>\n\t   <ul><li>cdc_run.log error: elaboration-502: Incorrect coding style for asynchronous reset inference.</li>\n\t          <li>cdc_run.log error: elaboration-504: Mixed blocking and non-blocking assignments for a variable.</li>\n\t          <li>cdc_run.log error: elaboration-506: Cannot unroll 'for' statement</li>\n\t          <li>cdc_run.log error: elaboration-509: Function recursion is not supported</li>\n\t          <li>cdc_run.log error: elaboration-515: Variable is assigned in multiple 'always' statements</li>\n\t          <li>cdc_run.log error: elaboration-527: Blocking assignments that have a delay in a non-clocked 'always' statement are not supported.</li>\n\t          <li>cdc_run.log error: elaboration-531: Verilog 'assign'/'deassign' statements are not supported.</li>\n\t          <li>cdc_run.log error: elaboration-534: Sliced memories are not supported.</li>\n\t          <li>cdc_run.log error: elaboration-538: Unknown system task.</li>\n\t          <li>cdc_run.log error: elaboration-539: User-defined primitives are not supported.</li>\n\t          <li>cdc_run.log error: elaboration-542: Verilog 'wait' statements are not supported.</li>\n\t          <li>cdc_run.log error: elaboration-547: Cannot unroll 'for' statement</li>\n\t          <li>cdc_run.log error: elaboration-552: VHDL wait only supported for clock definitions.</li>\n\t          <li>cdc_run.log error: elaboration-565: Function recursion exceeds recursion threshold.</li>\n\t          <li>cdc_run.log error: elaboration-568: Could not determine the clocking event for '$past'.</li>\n\t          <li>cdc_run.log error: elaboration-569: Could not determine the number of ticks for '$past'.</li>\n\t          <li>cdc_run.log error: elaboration-801: Illegal bit-part-select-array.</li>\n\t          <li>cdc_run.log error: elaboration-803: Multi-dimensional array is not supported.</li>\n\t          <li>cdc_run.log error: elaboration-814: Hierarchical functions are not supported.</li></ul>\n\t<li>UnsupportedConstructInRTL</li>\n\t   <ul><li>cdc_run.log error: parser-48: Unsupported construct.</li></ul>\n\t<li>VoptError</li>\n\t   <ul><li>cdc_run.log error: parser-284: Vopt error.  The compiler prints the source code location and a vopt message and then terminates.</li></ul>\n\t</ul>",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Make sure cdc_run.log not contain:\n\t'\\\\bparser-47\\\\b'       => { \"rule_id\" => \"MissingModuleRTL\",\n\t'\\\\bparser-290\\\\b'      => { \"rule_id\" => \"MultipleWritePortsOnMemory\",\n\t'\\\\belaboration-502\\\\b' => { \"rule_id\" => \"RTLCodingError\",\n\t'\\\\belaboration-510\\\\b' => { \"rule_id\" => \"RTLCodingError\",\n\t'\\\\belaboration-506\\\\b' => { \"rule_id\" => \"RTLCodingError\",\n\t'\\\\belaboration-504\\\\b' => { \"rule_id\" => \"RTLCodingError\",\n\t'\\\\bparser-48\\\\b'       => { \"rule_id\" => \"UnsupportedConstructInRTL\",",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint - Resolve Elaboration Fatals",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "2.386.a": {
          "algorithm": "Make sure cdc_run.log not contain:\n'\\\\bhcdc-36\\\\b'         => { \"rule_id\" => \"HDMOverride\",\n'\\\\bcdc-2\\\\b'           => { \"rule_id\" => \"ModelConstantMismatch\",\n'\\\\bnetlist-60\\\\b'      => { \"rule_id\" => \"ModelConstantMismatch\",\n'\\\\bnetlist-70\\\\b'      => { \"rule_id\" => \"ModelConstantMismatch\",\n'\\\\bhcdc-13\\\\b'         => { \"rule_id\" => \"ModelConstantMismatch\",\n'\\\\bhcdc-14\\\\b'         => { \"rule_id\" => \"ModelStableMismatch\",\n'\\\\bhcdc-20\\\\b'         => { \"rule_id\" => \"TopStableMismatch\",\n\nMake sure HDM/CFM file not contain:\n'\\\\-ignore\\\\b'                    => { \"rule_id\" => \"ModelPortIgnore\",\n'\\\\-virtual\\\\b'                   => { \"rule_id\" => \"ModelVirtualClock\",",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "These rules used to be subsets of the CDClint rule cdc_109, cdc_116 (ModelVirtualClock), cdc_120 (ModelPortIgnore)",
          "category": "CDC",
          "description": "This rule includes any CDClint rule having to do with problems in the abstract model representation of the design, and that have a severity of \"Error.\"  These rules have a CDClint \"group\" designation of CDClint_ModelError.  Any CDClint rule having the CDClint_ModelError designation will be included in the zircon 2.386.a rule bucket.\nCurrently, the following rules are designated as CDClint_ModelError:\n<ul>\n<li>DuplicateConstantDirective</li>\n<ul><li>cdc_run.log error: directive-299: Duplicate constants for signal</li></ul>\n<li>DuplicatePortDirective</li>\n<ul><li>cdc_run.log error: directive-320: Multiple clock domains defined for port</li></ul>\n<li>HDMOverride</li>\n<ul><li>cdc_run.log error: hcdc-36: Directive will override hierdb information</li></ul>\n<li>ModelClockIgnoreMismatch</li>\n<ul><li>cdc_run.log error: hcdc-17: Clock -ignore constraint mismatch between block and top run.</li>\n<li>cdc_run.log error: cdc-7: Clock -ignore constraint mismatch between block and top run.</li></ul>\n<li>ModelConstantMismatch</li>\n<ul><li>cdc_run.log error: hcdc-13: Inconsistent constant values between block and top run</li>\n<li>cdc_run.log error: cdc-2: Inconsistent constant values between block and top run</li>\n<li>cdc_run.log error: netlist-60: Block port is an inconsistent constant value at block and top level</li>\n<li>cdc_run.log error: netlist-70: Block port is an inconsistent constant value at block and top level</li></ul>\n<li>ModelPortIgnore</li>\n<ul><li>CFM/HDM abstract: Found inferred \"-ignore\" definition in the interface description </li></ul>\n<li>ModelStableMismatch</li>\n<ul><li>cdc_run.log error: hcdc-14: Block port was stable in block run, but it is not stable or constant in top run.</li>\n<li>cdc_run.log error: netlist-57: \"same\" clock constraint is inconsistent between the block and top run</li></ul>\n<li>ModelVirtualClock</li>\n<ul><li>CFM/HDM abstract: Found inferred \"-virtual\" definition in the interface description </li></ul>\n<li>TopStableMismatch</li>\n<ul><li>cdc_run.log error: hcdc-20: Block port is stable in top run, but it was not stable or constant in block run.</li></ul>\n</ul>",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.386.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.386.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint - Resolve Model Errors",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This rule includes any CDClint rule having to do with problems in the abstract model representation of the design, and that have a severity of \"Error.\"  These rules have a CDClint \"group\" designation of CDClint_ModelError.  Any CDClint rule having the CDClint_ModelError designation will be included in the zircon 2.386.a rule bucket.\n\tCurrently, the following rules are designated as CDClint_ModelError:\n\t<ul>\n\t<li>DuplicateConstantDirective</li>\n\t<ul><li>cdc_run.log error: directive-299: Duplicate constants for signal</li></ul>\n\t<li>DuplicatePortDirective</li>\n\t<ul><li>cdc_run.log error: directive-320: Multiple clock domains defined for port</li></ul>\n\t<li>HDMOverride</li>\n\t<ul><li>cdc_run.log error: hcdc-36: Directive will override hierdb information</li></ul>\n\t<li>ModelClockIgnoreMismatch</li>\n\t<ul><li>cdc_run.log error: hcdc-17: Clock -ignore constraint mismatch between block and top run.</li>\n\t<li>cdc_run.log error: cdc-7: Clock -ignore constraint mismatch between block and top run.</li></ul>\n\t<li>ModelConstantMismatch</li>\n\t<ul><li>cdc_run.log error: hcdc-13: Inconsistent constant values between block and top run</li>\n\t<li>cdc_run.log error: cdc-2: Inconsistent constant values between block and top run</li>\n\t<li>cdc_run.log error: netlist-60: Block port is an inconsistent constant value at block and top level</li>\n\t<li>cdc_run.log error: netlist-70: Block port is an inconsistent constant value at block and top level</li></ul>\n\t<li>ModelPortIgnore</li>\n\t<ul><li>CFM/HDM abstract: Found inferred \"-ignore\" definition in the interface description </li></ul>\n\t<li>ModelStableMismatch</li>\n\t<ul><li>cdc_run.log error: hcdc-14: Block port was stable in block run, but it is not stable or constant in top run.</li>\n\t<li>cdc_run.log error: netlist-57: \"same\" clock constraint is inconsistent between the block and top run</li></ul>\n\t<li>ModelVirtualClock</li>\n\t<ul><li>CFM/HDM abstract: Found inferred \"-virtual\" definition in the interface description </li></ul>\n\t<li>TopStableMismatch</li>\n\t<ul><li>cdc_run.log error: hcdc-20: Block port is stable in top run, but it was not stable or constant in block run.</li></ul>\n\t</ul>",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Make sure cdc_run.log not contain:\n\t'\\\\bhcdc-36\\\\b'         => { \"rule_id\" => \"HDMOverride\",\n\t'\\\\bcdc-2\\\\b'           => { \"rule_id\" => \"ModelConstantMismatch\",\n\t'\\\\bnetlist-60\\\\b'      => { \"rule_id\" => \"ModelConstantMismatch\",\n\t'\\\\bnetlist-70\\\\b'      => { \"rule_id\" => \"ModelConstantMismatch\",\n\t'\\\\bhcdc-13\\\\b'         => { \"rule_id\" => \"ModelConstantMismatch\",\n\t'\\\\bhcdc-14\\\\b'         => { \"rule_id\" => \"ModelStableMismatch\",\n\t'\\\\bhcdc-20\\\\b'         => { \"rule_id\" => \"TopStableMismatch\",\n\t\n\tMake sure HDM/CFM file not contain:\n\t'\\\\-ignore\\\\b'                    => { \"rule_id\" => \"ModelPortIgnore\",\n\t'\\\\-virtual\\\\b'                   => { \"rule_id\" => \"ModelVirtualClock\",",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint - Resolve Model Errors",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "2.387.a": {
          "algorithm": "Make sure CFM file contain:\n'^\\\\bendmodule\\\\b'       => {\"rule_id\" => \"MissingEndmoduleInCFM\",\n\nMake sure CFM/HDM file not contain:\n'\\\\bINFERRED_CONFLICT\\\\b'         => {\"rule_id\" => \"InferredConflict\",\n'\\\\bmultiple_clocks\\\\b'           => { \"rule_id\" => \"ModelMultipleClocks\",\n'\\\\bnosync\\\\b'                    => { \"rule_id\" => \"ModelNoSync\",\n\nMake sure cdc_run.log not contain:\n'\\\\bhcdc-1\\\\b'          => { \"rule_id\" => \"ModelInferredConflict\",\n'\\\\bnetlist-86\\\\b'      => { \"rule_id\" => \"ModelInferredConflict\",\n'\\\\bnetlist-44\\\\b'      => { \"rule_id\" => \"ModelMissingDefinition\",",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "These rules used to be subsets of the CDClint rule cdc_114, cdc_102 (InferredConflict), cdc_103 (InferredConflict), cdc_113 (ModelMissingDefinition)",
          "category": "CDC",
          "description": "This rule includes any CDClint rule having to do with problems in the abstract model representation of the design, and that have a severity of \"Fatal.\"  These rules have a CDClint \"group\" designation of CDClint_ModelFatal.  Any CDClint rule having the CDClint_ModelFatal designation will be included in the zircon 2.387.a rule bucket.\nCurrently, the following rules are designated as CDClint_ModelFatal:\n<ul>\n<li>InferredConflict</li>\n<ul><li>CFM/HDM abstract: Found INFERRED_CONFLICT definition in the interface description</li></ul> \n<li>MissingEndModuleInCFM</li>\n<ul><li>CFM abstract: Did not find \"endmodule\" definition in the interface description</li></ul>\n<li>ModelInferredConflict</li>\n<ul><li>cdc_run.log error: netlist-86: User-specified and inferred hierarchical port constraints conflict</li>\n<li>cdc_run.log error: hcdc-1: User-specified and inferred hierarchical port constraints conflict</li></ul>\n<li>ModelMissingDefinition</li>\n<ul><li>cdc_run.log error: netlist-44: Incomplete input/output specifications for port</li></ul>\n<li>ModelMultipleClocks</li>\n<ul><li>CFM/HDM abstract: Found multiple_clocks definition in the interface description </li></ul>\n<li>ModelNoSync</li>\n<ul><li>CFM/HDM abstract: Found no_sync definition in the interface description </li></ul>\n<li>ModelUsesInferredClock</li>\n<ul><li>CFM/HDM abstract: Found inferred clock definition (-group 0in_hier_int_*) in the interface description</li></ul> \n<li>ModelUsesInternalClock</li>\n<ul><li>CFM/HDM abstract: Found internal clock definition (period in the clock name: -clock *.*) in the interface description </li></ul>\n<li>ModuleSetsReset</li>\n<ul><li>CFM/HDM abstract: Found set_reset definition in the interface description </li></ul>\n</ul>",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.387.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.387.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint - Resolve Model Fatals",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This rule includes any CDClint rule having to do with problems in the abstract model representation of the design, and that have a severity of \"Fatal.\"  These rules have a CDClint \"group\" designation of CDClint_ModelFatal.  Any CDClint rule having the CDClint_ModelFatal designation will be included in the zircon 2.387.a rule bucket.\n\tCurrently, the following rules are designated as CDClint_ModelFatal:\n\t<ul>\n\t<li>InferredConflict</li>\n\t<ul><li>CFM/HDM abstract: Found INFERRED_CONFLICT definition in the interface description</li></ul> \n\t<li>MissingEndModuleInCFM</li>\n\t<ul><li>CFM abstract: Did not find \"endmodule\" definition in the interface description</li></ul>\n\t<li>ModelInferredConflict</li>\n\t<ul><li>cdc_run.log error: netlist-86: User-specified and inferred hierarchical port constraints conflict</li>\n\t<li>cdc_run.log error: hcdc-1: User-specified and inferred hierarchical port constraints conflict</li></ul>\n\t<li>ModelMissingDefinition</li>\n\t<ul><li>cdc_run.log error: netlist-44: Incomplete input/output specifications for port</li></ul>\n\t<li>ModelMultipleClocks</li>\n\t<ul><li>CFM/HDM abstract: Found multiple_clocks definition in the interface description </li></ul>\n\t<li>ModelNoSync</li>\n\t<ul><li>CFM/HDM abstract: Found no_sync definition in the interface description </li></ul>\n\t<li>ModelUsesInferredClock</li>\n\t<ul><li>CFM/HDM abstract: Found inferred clock definition (-group 0in_hier_int_*) in the interface description</li></ul> \n\t<li>ModelUsesInternalClock</li>\n\t<ul><li>CFM/HDM abstract: Found internal clock definition (period in the clock name: -clock *.*) in the interface description </li></ul>\n\t<li>ModuleSetsReset</li>\n\t<ul><li>CFM/HDM abstract: Found set_reset definition in the interface description </li></ul>\n\t</ul>",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Make sure CFM file contain:\n\t'^\\\\bendmodule\\\\b'       => {\"rule_id\" => \"MissingEndmoduleInCFM\",\n\t\n\tMake sure CFM/HDM file not contain:\n\t'\\\\bINFERRED_CONFLICT\\\\b'         => {\"rule_id\" => \"InferredConflict\",\n\t'\\\\bmultiple_clocks\\\\b'           => { \"rule_id\" => \"ModelMultipleClocks\",\n\t'\\\\bnosync\\\\b'                    => { \"rule_id\" => \"ModelNoSync\",\n\t\n\tMake sure cdc_run.log not contain:\n\t'\\\\bhcdc-1\\\\b'          => { \"rule_id\" => \"ModelInferredConflict\",\n\t'\\\\bnetlist-86\\\\b'      => { \"rule_id\" => \"ModelInferredConflict\",\n\t'\\\\bnetlist-44\\\\b'      => { \"rule_id\" => \"ModelMissingDefinition\",",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint - Resolve Model Fatals",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "2.388.a": {
          "algorithm": "Make sure cdc_run.log not have:\n'\\\\bnetlist-80\\\\b'      => { \"rule_id\" => \"MissingDomainInference\",\n'\\\\bhdl-41\\\\b'          => { \"rule_id\" => \"MultipleClocksOnPin\",\n'\\\\bnetlist-85\\\\b'      => { \"rule_id\" => \"ResetSpecMismatch\",",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "These rules used to be subsets of the CDClint rule cdc_113",
          "category": "CDC",
          "description": "This rule includes any CDClint rule having to do with problems in the CDC run, and that have a severity of \"Fatal.\"  These rules have a CDClint \"group\" designation of CDClint_RunFatal.  Any CDClint rule having the CDClint_RunFatal designation will be included in the zircon 2.388.a rule bucket.\nCurrently, the following rules are designated as CDClint_RunFatal:\n<ul>\n<li>MissingDomainInference</li>\n<ul><li>cdc_run.log error: netlist-80: Inferencing failed for primary port in the block (Clock domain for the port of a hierarchical CDC block cannot be inferred and is not specified in the [manually- or automatically-generated] hierarchical constraints file for the block)</li></ul>\n<li>MultipleClocksOnPin</li>\n<ul><li>cdc_run.log error: hdl-41: Primary port connects to multiple clock domains</li></ul>\n<li>ResetSpecMismatch</li>\n<ul><li>cdc_run.log error: netlist-85: Synchronous/asynchronous conflict between user and inferred reset</li></ul>\n</ul>",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.388.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.388.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint - Resolve Run Fatals",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This rule includes any CDClint rule having to do with problems in the CDC run, and that have a severity of \"Fatal.\"  These rules have a CDClint \"group\" designation of CDClint_RunFatal.  Any CDClint rule having the CDClint_RunFatal designation will be included in the zircon 2.388.a rule bucket.\n\tCurrently, the following rules are designated as CDClint_RunFatal:\n\t<ul>\n\t<li>MissingDomainInference</li>\n\t<ul><li>cdc_run.log error: netlist-80: Inferencing failed for primary port in the block (Clock domain for the port of a hierarchical CDC block cannot be inferred and is not specified in the [manually- or automatically-generated] hierarchical constraints file for the block)</li></ul>\n\t<li>MultipleClocksOnPin</li>\n\t<ul><li>cdc_run.log error: hdl-41: Primary port connects to multiple clock domains</li></ul>\n\t<li>ResetSpecMismatch</li>\n\t<ul><li>cdc_run.log error: netlist-85: Synchronous/asynchronous conflict between user and inferred reset</li></ul>\n\t</ul>",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Make sure cdc_run.log not have:\n\t'\\\\bnetlist-80\\\\b'      => { \"rule_id\" => \"MissingDomainInference\",\n\t'\\\\bhdl-41\\\\b'          => { \"rule_id\" => \"MultipleClocksOnPin\",\n\t'\\\\bnetlist-85\\\\b'      => { \"rule_id\" => \"ResetSpecMismatch\",",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint - Resolve Run Fatals",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "2.389.a": {
          "algorithm": "Make sure cdc_run.log not contain:\n'\\\\bcommand-6\\\\b'       => { \"rule_id\" => \"CommandError\",\n'\\\\bcommand-7\\\\b'       => { \"rule_id\" => \"CommandError\",\n'\\\\bhcdc-11\\\\b'         => { \"rule_id\" => \"HDMParameterMismatch\",",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "These rules used to be the CDClint rule cdc_101 (HierModelSanity), cdc_107 (CDCreportFileSanity), cdc_109(CommandError), cdc_113(HDMparameterMismatch), cdc_108 (LogFileSanity) , cdc_110 (CDCsettingFileSanity), cdc_118 (InvalidToolVersion)",
          "category": "CDC",
          "description": "This rule includes any CDClint rule having to do with problems indicating that the CDC run did not complete.  These rules have a CDClint \"group\" designation of CDClint_RunSanity.  Any CDClint rule having the CDClint_RunSanity designation will be included in the zircon 2.389.a rule bucket.\nCurrently, the following rules are designated as CDClint_RunSanity:\n<ul>\n<li>CDCreportFileSanity</li>\n<ul><li>Problem with cdc.rpt[.gz|.gz2]  file:</li>\n<ul><li>File is missing</li>\n<li>File is empty or unreadable</li>\n<li>More than one cdc_run.log file was found in the work area</li></ul>\n<li>cdc.rpt error: Missing \"Inferred\" summary section\n<li>cdc.rpt error: Missing \"Ignored\" summary section\n<li>cdc.rpt error: Missing \"Cautions\" summary section\n<li>cdc.rpt error: Missing \"Violations\" summary section</li></ul></ul>\n<li>CommandError</li>\n<ul><li>cdc_run.log: command-6: Missing argument value: The value for the command line argument is not specified</li>\n<li>cdc_run.log: command-7: Illegal argument: Incorrect option is used on the command line or in a global directive</li></ul>\n<li>HDMparameterMismatch</li>\n<ul><li>cdc_run.log: hcdc-11: No matching hierdb found for the module: hierarchical block instance was created using a parameter set that does not match the parameters used for the current top-level analysis</li></ul>\n<li>HierModelSanity</li>\n<ul><li>Problem with CFM or HDM (cdc_hier_ctrl_${block}.v[.gz|.gz2]  or hcdc_${block}.tcl[.gz|.gz2]) file:</li>\n<ul><li>File is missing</li>\n<li>File is empty or unreadable</li>\n<li>More than one CFM or HDM file was found in the work area</li></ul></ul>\n<li>IncrementalRun</li>\n<ul><li>cdc_run.log: Log file shows that this was an \"Incremental\" run</li></ul>\n<li>LogFileSanity</li>\n<ul><li>Problem with cdc_run.log[.gz|.gz2]  file:</li>\n<ul><li>File is missing</li>\n<li>File is empty or unreadable</li>\n<li>More than one cdc_run.log file was found in the work area</li></ul></ul>\n<li>CDCsettingFileSanity</li>\n<ul><li>Problem with cdc_setting.rpt[.gz|.gz2] file:</li>\n<ul><li>File is missing</li>\n<li>File is empty or unreadable</li>\n<li>More than one cdc_setting.rpt file was found in the work area</li></ul></ul>\n<li>InvalidToolVersion</li>\n<ul><li>The version of the current CDC tool is out of date and not POR</li></ul>\n</ul>",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.389.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.389.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint - Resolve Run Sanity Issues",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This rule includes any CDClint rule having to do with problems indicating that the CDC run did not complete.  These rules have a CDClint \"group\" designation of CDClint_RunSanity.  Any CDClint rule having the CDClint_RunSanity designation will be included in the zircon 2.389.a rule bucket.\n\tCurrently, the following rules are designated as CDClint_RunSanity:\n\t<ul>\n\t<li>CDCreportFileSanity</li>\n\t<ul><li>Problem with cdc.rpt[.gz|.gz2]  file:</li>\n\t<ul><li>File is missing</li>\n\t<li>File is empty or unreadable</li>\n\t<li>More than one cdc_run.log file was found in the work area</li></ul>\n\t<li>cdc.rpt error: Missing \"Inferred\" summary section\n\t<li>cdc.rpt error: Missing \"Ignored\" summary section\n\t<li>cdc.rpt error: Missing \"Cautions\" summary section\n\t<li>cdc.rpt error: Missing \"Violations\" summary section</li></ul></ul>\n\t<li>CommandError</li>\n\t<ul><li>cdc_run.log: command-6: Missing argument value: The value for the command line argument is not specified</li>\n\t<li>cdc_run.log: command-7: Illegal argument: Incorrect option is used on the command line or in a global directive</li></ul>\n\t<li>HDMparameterMismatch</li>\n\t<ul><li>cdc_run.log: hcdc-11: No matching hierdb found for the module: hierarchical block instance was created using a parameter set that does not match the parameters used for the current top-level analysis</li></ul>\n\t<li>HierModelSanity</li>\n\t<ul><li>Problem with CFM or HDM (cdc_hier_ctrl_${block}.v[.gz|.gz2]  or hcdc_${block}.tcl[.gz|.gz2]) file:</li>\n\t<ul><li>File is missing</li>\n\t<li>File is empty or unreadable</li>\n\t<li>More than one CFM or HDM file was found in the work area</li></ul></ul>\n\t<li>IncrementalRun</li>\n\t<ul><li>cdc_run.log: Log file shows that this was an \"Incremental\" run</li></ul>\n\t<li>LogFileSanity</li>\n\t<ul><li>Problem with cdc_run.log[.gz|.gz2]  file:</li>\n\t<ul><li>File is missing</li>\n\t<li>File is empty or unreadable</li>\n\t<li>More than one cdc_run.log file was found in the work area</li></ul></ul>\n\t<li>CDCsettingFileSanity</li>\n\t<ul><li>Problem with cdc_setting.rpt[.gz|.gz2] file:</li>\n\t<ul><li>File is missing</li>\n\t<li>File is empty or unreadable</li>\n\t<li>More than one cdc_setting.rpt file was found in the work area</li></ul></ul>\n\t<li>InvalidToolVersion</li>\n\t<ul><li>The version of the current CDC tool is out of date and not POR</li></ul>\n\t</ul>",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Make sure cdc_run.log not contain:\n\t'\\\\bcommand-6\\\\b'       => { \"rule_id\" => \"CommandError\",\n\t'\\\\bcommand-7\\\\b'       => { \"rule_id\" => \"CommandError\",\n\t'\\\\bhcdc-11\\\\b'         => { \"rule_id\" => \"HDMParameterMismatch\",",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint - Resolve Run Sanity Issues",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "2.390.a": {
          "algorithm": "Make sure cdc_setting.rpt does not contain:\n'cdc reconvergence off'                                    => {\"rule_id\" => \"BadReconvergenceSettings\",\n'cdc synchronizer custom \\\\S+'                             => { \"rule_id\" => \"CustomSynchronizerUsed\",\n'netlist constant propagation -enable'                     => {\"rule_id\" => \"FatalMissingSetting\",\n'cdc preference .*-enable_internal_resets'                 => {\"rule_id\" => \"FatalMissingSetting\",\n'cdc preference .*-filtered_report'                        => {\"rule_id\" => \"FatalMissingSetting\",\n'cdc preference .*-conflict_check'                         => {\"rule_id\" => \"FatalMissingSetting\",\n'cdc reconvergence on'                                     => {\"rule_id\" => \"FatalMissingSetting\",\n'^\\\\s*fifo\\\\s+evaluation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalFifoSeverityChange\",\n'^\\\\s*fifo_memory_ptr_mismatch\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalFifoSeverityChange\",\n'^\\\\s*fifo_ptr_no_sync\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalFifoSeverityChange\",\n'^\\\\s*async_reset_no_sync\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalMissingSyncSeverityChange\",\n'^\\\\s*custom_sync_mismatch\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalMissingSyncSeverityChange\",\n'^\\\\s*custom_sync_mismatch_with_crossing\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalMissingSyncSeverityChange\",\n'^\\\\s*multi_bits\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalMissingSyncSeverityChange\",\n'^\\\\s*no_sync\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalMissingSyncSeverityChange\",\n'^\\\\s*dff_sync_combo_clk\\\\s+[violation,caution]+\\\\s+yes\\\\b' => {\"rule_id\" => \"IllegalSchemeSeverityDegradation\",\n'^\\\\s*bus_dff_sync_combo_clk\\\\s+[violation,caution]+\\\\s+yes\\\\b' => {\"rule_id\" => \"IllegalSchemeSeverityDegradation\",\n'cdc report scheme two_dff -severity violation'            => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n'cdc report scheme bus_two_dff -severity violation'        => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n'cdc report scheme pulse_sync -severity violation'         => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n'cdc report scheme two_dff_phase -severity violation'      => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n'cdc report scheme bus_two_dff_phase -severity violation'  => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n'cdc report scheme shift_reg -severity violation'          => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n'cdc report scheme async_reset -severity violation'        => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n'cdc report scheme four_latch -severity violation'         => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n'cdc report scheme bus_four_latch -severity violation'     => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n'\\\\-virtual\\\\b'                                            => { \"rule_id\" => \"UserVirtualClock\",\n'^\\\\s*dmux\\\\S*\\\\s+[violation,caution]+\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalDmuxSeverityChange\",\n'^\\\\s*multi_sync_mux_select\\\\s+[violation,caution]+\\\\s+yes\\\\b' => {\"rule_id\" => \"IllegalDmuxSeverityChange\",",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "These rules used to be subsets of the CDClint rule cdc_111, cdc_112, cdc_115. cdc_117, cdc_119\nThe setup in cdc_setting.rpt should be coming from cdc_global.tcl from intelcdc releases:\n /p/hdk/rtl/proj_tools/cdc/master/<intelcdc version>/prototype/cdc_global.tcl\n\nCdclint will ensure the setting for cdc run correct and expected coming from cdc_global.tcl.",
          "category": "CDC",
          "description": "This rule includes any CDClint rule having to do with problems properly setting up the CDC run to provide valid results.  These rules have a CDClint \"group\" designation of CDClint_SettingFatal.  Any CDClint rule having the CDClint_SettingFatal designation will be included in the zircon 2.390.a rule bucket.\nCurrently, the following rules are designated as CDClint_SettingFatal:\n<ul>\n<li>BadReconvergenceSettings</li>\n<ul><li>cdc_setting.rpt: Found \"cdc reconvergence off\" in settings</li></ul>\n<li>CustomSynchronizerUsed</li>\n<ul><li>cdc_setting.rpt: Found an illegal custom synchronizer setting: \"cdc synchronizer custom\"</li></ul>\n<li>FatalMissingSetting</li>\n<ul><li>cdc_setting.rpt: Couldn't find required setting, \"cdc preference\"</li></ul>\n<li>IllegalConstantPropagation</li>\n<ul><li>cdc_setting.rpt: Found illegal \"-reset\" flag when setting constant propagation:\n<b>Example</b>: netlist constant propagation -reset -enable</li></ul>\n<li>IllegalFifoSeverityChange</li>\n<ul><li>cdc_setting.rpt: Missing at least one of these FIFO settings:</li>\n<ul><li>fifo evaluation yes</li>\n<li>fifo_memory_ptr_mismatch violation yes</li>\n<li>fifo_ptr_no_sync violation yes</li></ul></ul>\n<li>IllegalMissingSyncSeverityChange</li>\n<ul><li>cdc_setting.rpt: Found at least one illegal sync setting:</li>\n<ul><li>async_reset_no_sync violation yes</li>\n<li>custom_sync_mismatch violation yes</li>\n<li>custom_sync_mismatch_with_crossing violation yes</li>\n<li>multi_bits violation yes</li>\n<li>no_sync violation yes</li></ul></ul>\n<li>IllegalSchemeSeverityDegradation</li>\n<ul><li>cdc_setting.rpt: Found at least one severity degradation:</li>\n<ul><li>cdc report crossing -scheme two_dff -severity waived</li>\n<li>cdc report crossing -scheme bus_two_dff -severity waived</li>\n<li>cdc report scheme two_dff -severity waived</li>\n<li>cdc report scheme bus_two_dff -severity waived</li>\n<li>cdc report scheme pulse_sync -severity waived</li>\n<li>cdc report scheme two_dff_phase -severity waived</li>\n<li>cdc report scheme bus_two_dff_phase -severity waived</li>\n<li>cdc report scheme shift_reg -severity waived</li>\n<li>cdc report scheme async_reset -severity waived</li>\n<li>cdc report scheme four_latch -severity waived</li>\n<li>cdc report scheme bus_four_latch -severity waived</li></ul></ul>\n<li>MissingSchemeSeverityElevation</li>\n<ul><li>cdc_setting.rpt: Missing at least one of the following required settings:</li>\n<ul><li>two_dff violation yes</li>\n<li>bus_two_dff violation yes</li>\n<li>pulse_sync violation yes</li>\n<li>two_dff_phase violation yes</li>\n<li>bus_two_dff_phase violation yes</li>\n<li>shift_reg violation yes</li>\n<li>bus_shift_reg violation yes</li>\n<li>async_reset violation yes</li>\n<li>four_latch violation yes</li>\n<li>bus_four_latch violation yes</li>\n<li>dff_sync_gated_clk violation yes</li>\n<li>dff_sync_combo_clk violation yes</li>\n<li>bus_dff_sync_gated_clk violation yes</li>\n<li>bus_dff_sync_combo_clk violation yes</li></ul></ul>\n<li>UserPortIgnore</li>\n<ul><li>cdc_setting.rpt: Found illegal \"-ignore\" flag in port domain command</li></ul>\n<li>UserVirtualClock</li>\n<ul><li>cdc_setting.rpt: Found illegal \"-virtual\" flag in clock setting</li></ul>\n<li>IllegalDmuxSeverityChange </li>\n<ul><li>cdc_setting.rpt: Found at least one illegal D-Mux setting:</li>\n<ul><li>*dmux caution|violation yes</li>\n<li>multi_sync_mux_select caution|violation yes</li></ul></ul>\n</ul>",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.390.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.390.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint - Resolve Setting Fatals",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This rule includes any CDClint rule having to do with problems properly setting up the CDC run to provide valid results.  These rules have a CDClint \"group\" designation of CDClint_SettingFatal.  Any CDClint rule having the CDClint_SettingFatal designation will be included in the zircon 2.390.a rule bucket.\n\tCurrently, the following rules are designated as CDClint_SettingFatal:\n\t<ul>\n\t<li>BadReconvergenceSettings</li>\n\t<ul><li>cdc_setting.rpt: Found \"cdc reconvergence off\" in settings</li></ul>\n\t<li>CustomSynchronizerUsed</li>\n\t<ul><li>cdc_setting.rpt: Found an illegal custom synchronizer setting: \"cdc synchronizer custom\"</li></ul>\n\t<li>FatalMissingSetting</li>\n\t<ul><li>cdc_setting.rpt: Couldn't find required setting, \"cdc preference\"</li></ul>\n\t<li>IllegalConstantPropagation</li>\n\t<ul><li>cdc_setting.rpt: Found illegal \"-reset\" flag when setting constant propagation:\n\t<b>Example</b>: netlist constant propagation -reset -enable</li></ul>\n\t<li>IllegalFifoSeverityChange</li>\n\t<ul><li>cdc_setting.rpt: Missing at least one of these FIFO settings:</li>\n\t<ul><li>fifo evaluation yes</li>\n\t<li>fifo_memory_ptr_mismatch violation yes</li>\n\t<li>fifo_ptr_no_sync violation yes</li></ul></ul>\n\t<li>IllegalMissingSyncSeverityChange</li>\n\t<ul><li>cdc_setting.rpt: Found at least one illegal sync setting:</li>\n\t<ul><li>async_reset_no_sync violation yes</li>\n\t<li>custom_sync_mismatch violation yes</li>\n\t<li>custom_sync_mismatch_with_crossing violation yes</li>\n\t<li>multi_bits violation yes</li>\n\t<li>no_sync violation yes</li></ul></ul>\n\t<li>IllegalSchemeSeverityDegradation</li>\n\t<ul><li>cdc_setting.rpt: Found at least one severity degradation:</li>\n\t<ul><li>cdc report crossing -scheme two_dff -severity waived</li>\n\t<li>cdc report crossing -scheme bus_two_dff -severity waived</li>\n\t<li>cdc report scheme two_dff -severity waived</li>\n\t<li>cdc report scheme bus_two_dff -severity waived</li>\n\t<li>cdc report scheme pulse_sync -severity waived</li>\n\t<li>cdc report scheme two_dff_phase -severity waived</li>\n\t<li>cdc report scheme bus_two_dff_phase -severity waived</li>\n\t<li>cdc report scheme shift_reg -severity waived</li>\n\t<li>cdc report scheme async_reset -severity waived</li>\n\t<li>cdc report scheme four_latch -severity waived</li>\n\t<li>cdc report scheme bus_four_latch -severity waived</li></ul></ul>\n\t<li>MissingSchemeSeverityElevation</li>\n\t<ul><li>cdc_setting.rpt: Missing at least one of the following required settings:</li>\n\t<ul><li>two_dff violation yes</li>\n\t<li>bus_two_dff violation yes</li>\n\t<li>pulse_sync violation yes</li>\n\t<li>two_dff_phase violation yes</li>\n\t<li>bus_two_dff_phase violation yes</li>\n\t<li>shift_reg violation yes</li>\n\t<li>bus_shift_reg violation yes</li>\n\t<li>async_reset violation yes</li>\n\t<li>four_latch violation yes</li>\n\t<li>bus_four_latch violation yes</li>\n\t<li>dff_sync_gated_clk violation yes</li>\n\t<li>dff_sync_combo_clk violation yes</li>\n\t<li>bus_dff_sync_gated_clk violation yes</li>\n\t<li>bus_dff_sync_combo_clk violation yes</li></ul></ul>\n\t<li>UserPortIgnore</li>\n\t<ul><li>cdc_setting.rpt: Found illegal \"-ignore\" flag in port domain command</li></ul>\n\t<li>UserVirtualClock</li>\n\t<ul><li>cdc_setting.rpt: Found illegal \"-virtual\" flag in clock setting</li></ul>\n\t<li>IllegalDmuxSeverityChange </li>\n\t<ul><li>cdc_setting.rpt: Found at least one illegal D-Mux setting:</li>\n\t<ul><li>*dmux caution|violation yes</li>\n\t<li>multi_sync_mux_select caution|violation yes</li></ul></ul>\n\t</ul>",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Make sure cdc_setting.rpt does not contain:\n\t'cdc reconvergence off'                                    => {\"rule_id\" => \"BadReconvergenceSettings\",\n\t'cdc synchronizer custom \\\\S+'                             => { \"rule_id\" => \"CustomSynchronizerUsed\",\n\t'netlist constant propagation -enable'                     => {\"rule_id\" => \"FatalMissingSetting\",\n\t'cdc preference .*-enable_internal_resets'                 => {\"rule_id\" => \"FatalMissingSetting\",\n\t'cdc preference .*-filtered_report'                        => {\"rule_id\" => \"FatalMissingSetting\",\n\t'cdc preference .*-conflict_check'                         => {\"rule_id\" => \"FatalMissingSetting\",\n\t'cdc reconvergence on'                                     => {\"rule_id\" => \"FatalMissingSetting\",\n\t'^\\\\s*fifo\\\\s+evaluation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalFifoSeverityChange\",\n\t'^\\\\s*fifo_memory_ptr_mismatch\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalFifoSeverityChange\",\n\t'^\\\\s*fifo_ptr_no_sync\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalFifoSeverityChange\",\n\t'^\\\\s*async_reset_no_sync\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalMissingSyncSeverityChange\",\n\t'^\\\\s*custom_sync_mismatch\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalMissingSyncSeverityChange\",\n\t'^\\\\s*custom_sync_mismatch_with_crossing\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalMissingSyncSeverityChange\",\n\t'^\\\\s*multi_bits\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalMissingSyncSeverityChange\",\n\t'^\\\\s*no_sync\\\\s+violation\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalMissingSyncSeverityChange\",\n\t'^\\\\s*dff_sync_combo_clk\\\\s+[violation,caution]+\\\\s+yes\\\\b' => {\"rule_id\" => \"IllegalSchemeSeverityDegradation\",\n\t'^\\\\s*bus_dff_sync_combo_clk\\\\s+[violation,caution]+\\\\s+yes\\\\b' => {\"rule_id\" => \"IllegalSchemeSeverityDegradation\",\n\t'cdc report scheme two_dff -severity violation'            => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n\t'cdc report scheme bus_two_dff -severity violation'        => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n\t'cdc report scheme pulse_sync -severity violation'         => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n\t'cdc report scheme two_dff_phase -severity violation'      => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n\t'cdc report scheme bus_two_dff_phase -severity violation'  => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n\t'cdc report scheme shift_reg -severity violation'          => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n\t'cdc report scheme async_reset -severity violation'        => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n\t'cdc report scheme four_latch -severity violation'         => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n\t'cdc report scheme bus_four_latch -severity violation'     => {\"rule_id\" => \"MissingSchemeSeverityElevation\",\n\t'\\\\-virtual\\\\b'                                            => { \"rule_id\" => \"UserVirtualClock\",\n\t'^\\\\s*dmux\\\\S*\\\\s+[violation,caution]+\\\\s+yes\\\\b'                  => {\"rule_id\" => \"IllegalDmuxSeverityChange\",\n\t'^\\\\s*multi_sync_mux_select\\\\s+[violation,caution]+\\\\s+yes\\\\b' => {\"rule_id\" => \"IllegalDmuxSeverityChange\",",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint - Resolve Setting Fatals",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "2.391.a": {
          "algorithm": "Make sure cdc_setting.rpt contain:\n''cdc report crossing.*\\\\s+-severity\\\\s+waived(?!.*(-comment)(\\\\s+\\\\S+.*)).*' => { \"rule_id\" => \"WaiverMissingMessage\",\ncdc report crossing(\\\\s+(?!-scheme)(\\\\S+))*\\\\s+-severity\\\\s+waived(\\\\s+(?!-scheme)(\\\\S+))*' => { \"rule_id\" => \"WaiverMissingScheme\",\n'cdc report crossing(?!.*(-from.*-to|-to.*-through)).*\\\\s+-severity\\\\s+waived.*' => { \"rule_id\" => \"WaiverTooBroad\",\n'cdc report crossing(.*-from \\\\* |.*-to \\\\* |.*-from\\\\s+\\\\S+\\\\s+-through \\\\{ \\\\* \\\\}|(?!.*-from).*-to\\\\s+\\\\S+\\\\s+-through \\\\{ \\\\* \\\\}).*\\\\s+-severity\\\\s+waived.*\n' => { \"rule_id\" => \"WaiverTooBroad\",",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "The request coming from CDC WG to ensure correct waiver define by CDC user and avoid unintentional path being waive. The detail request:\nhttps://hsdes.intel.com/appstore/article/#/1504513784",
          "category": "CDC",
          "description": "This rule includes any CDClint rule having to do with problems in waiver definitions.  These rules have a CDClint \"group\" designation of CDClint_WaiverFatal.  Any CDClint rule having the CDClint_WaiverFatal designation will be included in the zircon 2.391.a rule bucket.\nCurrently, the following rules are designated as CDClint_WaiverFatal:\n<ul>\n<li>WaiverMissingMessage</li>\n<ul><li>cdc_setting.rpt: waiver should be define with message, \"cdc report crossing -comment\"</li></ul>\n<li>WaiverMissingScheme</li>\n<ul><li>cdc_setting.rpt: waiver should be define with scheme, \"cdc report crossing -scheme\"</li></ul>\n<li>WaiverTooBroad</li>\n<ul><li>cdc_setting.rpt: waiver should not be define using wildcard * only, \"cdc report crossing -from *\"</li></ul>\n<ul><li>cdc_setting.rpt: waiver should be define with pairing attribute for path </li></ul>\n</ul>",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.391.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.391.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint - Resolve Waiver Fatals",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This rule includes any CDClint rule having to do with problems in waiver definitions.  These rules have a CDClint \"group\" designation of CDClint_WaiverFatal.  Any CDClint rule having the CDClint_WaiverFatal designation will be included in the zircon 2.391.a rule bucket.\n\tCurrently, the following rules are designated as CDClint_WaiverFatal:\n\t<ul>\n\t<li>WaiverMissingMessage</li>\n\t<ul><li>cdc_setting.rpt: waiver should be define with message, \"cdc report crossing -comment\"</li></ul>\n\t<li>WaiverMissingScheme</li>\n\t<ul><li>cdc_setting.rpt: waiver should be define with scheme, \"cdc report crossing -scheme\"</li></ul>\n\t<li>WaiverTooBroad</li>\n\t<ul><li>cdc_setting.rpt: waiver should not be define using wildcard * only, \"cdc report crossing -from *\"</li></ul>\n\t<ul><li>cdc_setting.rpt: waiver should be define with pairing attribute for path </li></ul>\n\t</ul>",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Make sure cdc_setting.rpt contain:\n\t''cdc report crossing.*\\\\s+-severity\\\\s+waived(?!.*(-comment)(\\\\s+\\\\S+.*)).*' => { \"rule_id\" => \"WaiverMissingMessage\",\n\tcdc report crossing(\\\\s+(?!-scheme)(\\\\S+))*\\\\s+-severity\\\\s+waived(\\\\s+(?!-scheme)(\\\\S+))*' => { \"rule_id\" => \"WaiverMissingScheme\",\n\t'cdc report crossing(?!.*(-from.*-to|-to.*-through)).*\\\\s+-severity\\\\s+waived.*' => { \"rule_id\" => \"WaiverTooBroad\",\n\t'cdc report crossing(.*-from \\\\* |.*-to \\\\* |.*-from\\\\s+\\\\S+\\\\s+-through \\\\{ \\\\* \\\\}|(?!.*-from).*-to\\\\s+\\\\S+\\\\s+-through \\\\{ \\\\* \\\\}).*\\\\s+-severity\\\\s+waived.*\n\t' => { \"rule_id\" => \"WaiverTooBroad\",",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint - Resolve Waiver Fatals",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "2.392.a": {
          "algorithm": "",
          "attributes": {
            "collateral: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "collateral: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdclintviolationsfile": ".//tools/cdcLint/dfxsecure_plugin_violations.xml",
            "key: cdclintviolationsfilespyglass": ".//tools/cdcLint/dfxsecure_plugin_violations_sgcdc.xml",
            "key: cdcquesta": "True",
            "key: cdcspyglass": "True"
          },
          "background": "",
          "category": "CDC",
          "description": "Anything flagged by this rule are violations found in CDClint, but they are not currently recognized by Zircon so it doesn't know where they should be classified.  These violations need to be resolved, but in addition to addressing them, please let your CDC representative know about them so that the handshake between Zircon/CDClint can be updated to do proper classification.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 2.392.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (2) CDC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 2.392.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: CDCLint - Resolve Unrecognized violations",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Anything flagged by this rule are violations found in CDClint, but they are not currently recognized by Zircon so it doesn't know where they should be classified.  These violations need to be resolved, but in addition to addressing them, please let your CDC representative know about them so that the handshake between Zircon/CDClint can be updated to do proper classification.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "There are no violations in xml file",
              "severity": "INFO"
            }
          ],
          "name": "CDCLint - Resolve Unrecognized violations",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "20.197.a": {
          "algorithm": "",
          "attributes": {},
          "background": "https://securewiki.ith.intel.com/download/attachments/191990190/OVM%20UVM%20Coding%20Rules%20%26%20Guidelines.pdf",
          "category": "SV TB",
          "description": "Must deliver verification collateral that conforms to latest \"OVM/UVM Testbench Coding \nRules & Guidelines\"  document",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.197.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.197.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Delivered verification collateral conforms to guidelines in OVM VIP Conformance Checklist",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Must deliver verification collateral that conforms to latest \"OVM/UVM Testbench Coding \n\tRules & Guidelines\"  document",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.197.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.197.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Delivered verification collateral conforms to guidelines in OVM VIP Conformance Checklist",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "20.198.a": {
          "algorithm": "",
          "attributes": {},
          "background": "https://securewiki.ith.intel.com/download/attachments/191990293/Saola%20Compliance%20Checklist.xlsx\n\nFor further information on checklist-related items, refer to the Saola User Guide documentation on the HDK Flow Wiki:\nhttps://securewiki.ith.intel.com/display/hdk/SoC+Testbench+Class+Library#tool-Documentation",
          "category": "SV TB",
          "description": "Must deliver verification collateral that conforms to latest \"Saola Testbench Compliance\" checklist",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.198.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.198.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Delivered verification collateral conforms to guidelines in Saola Compliance Checklist",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Must deliver verification collateral that conforms to latest \"Saola Testbench Compliance\" checklist",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.198.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.198.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Delivered verification collateral conforms to guidelines in Saola Compliance Checklist",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "20.199.a": {
          "algorithm": "",
          "attributes": {},
          "background": "Saola Testbench Integration User Guide (refer to section 15: Virtual Interface Management with Test Islands\")\n\nhttps://securewiki.ith.intel.com/download/attachments/191990293/Saola%20Testbench%20Integration%20Guide.pdf",
          "category": "SV TB",
          "description": "Must deliver verification collateral that conforms to latest \"Test Island\" reuse methodology as defined in the Saola Testbench Integration Guide",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.199.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.199.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Delivered verification collateral conforms to guidelines in Test Island Compliance Checklist",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Must deliver verification collateral that conforms to latest \"Test Island\" reuse methodology as defined in the Saola Testbench Integration Guide",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.199.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.199.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Delivered verification collateral conforms to guidelines in Test Island Compliance Checklist",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "20.200.a": {
          "algorithm": "Find all \"force\" statements in the design, ensure they are contained only in the test bench not in the design itself.",
          "attributes": {},
          "background": "Forcing a signal to a value creates a conflict with actual silicon, where the force can bypass actual functionality.  A force must be kept only in the test bench to allow control.  \n\nA force is also not synthesizable, which might result in RTL simulation showing one result but simulation on the netlist (GLS) and in silicon can have a different result",
          "category": "SV TB",
          "description": "A \"force\", setting a value on a node in the design during simulation, must only be used to provide necessary functionality during test, providing internal context only when absolutely necessary.  For example at the IP level if DFx is not hooked up, if a power state is not completely configurable it may be necessary to \"force\" the appropriate internal state.\n\nTo ensure successful IP integration these forces must be isolated to the test bench to allow the integrator (e.g., the SoC) control over internal state via external stimulus.\n\nIP must be functional without forcing internal RTL signals. Any forces used in the design is for validation stimulus ONLY.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.200.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.200.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Disallow forces except in test bench",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: A \"force\", setting a value on a node in the design during simulation, must only be used to provide necessary functionality during test, providing internal context only when absolutely necessary.  For example at the IP level if DFx is not hooked up, if a power state is not completely configurable it may be necessary to \"force\" the appropriate internal state.\n\t\n\tTo ensure successful IP integration these forces must be isolated to the test bench to allow the integrator (e.g., the SoC) control over internal state via external stimulus.\n\t\n\tIP must be functional without forcing internal RTL signals. Any forces used in the design is for validation stimulus ONLY.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Find all \"force\" statements in the design, ensure they are contained only in the test bench not in the design itself.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.200.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.200.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Disallow forces except in test bench",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "20.212.a": {
          "algorithm": "TBD",
          "attributes": {},
          "background": "https://dtspedia.intel.com/System_Verilog_for_Test_Benches_%28SVTB%29",
          "category": "SV TB",
          "description": "Must provide Test list with integration tests for USE CASE testing delivered or IP reusable sequences  validated and delivered to SOC for features/conditions described from HAS (For example, configurations, traffic, power management flows etc).",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.212.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.212.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Must provide Test list with integration tests for USE CASE testing delivered",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Must provide Test list with integration tests for USE CASE testing delivered or IP reusable sequences  validated and delivered to SOC for features/conditions described from HAS (For example, configurations, traffic, power management flows etc).",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: TBD",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.212.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.212.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Must provide Test list with integration tests for USE CASE testing delivered",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "20.212.b": {
          "algorithm": "1. Key provided is directory or a report file\n2 .Check if directory or file exists\n3. KEY: svtbusecase\na.Default: none\n",
          "attributes": {
            "collateral: svtbusecase": ".//verif/tb",
            "key: svtbusecase": ".//verif/tb"
          },
          "background": "The point of a high power test is that for power estimation there needs to be a test specifically designed to run at the highest possible activity factor.\nThis can be used for SoC power budgeting.\n\nAlso a reusable test should be provided that can be used for performance (data throughput, etc.)\n\nFor use case scenarios, this normal reusable integration and functional tests only based on test plan that be ported to SoC level for reuse and not\nIncluding tests that are specific to IP testing and not relevant to SoC integration.\n\nhttps://dtspedia.intel.com/System_Verilog_for_Test_Benches_%28SVTB%29\n",
          "category": "SV TB",
          "description": "Key provided is a pointer to a directory or file for integration tests for use case testing delivered.  This is a two part requirement, the manual check through ZQA should remain and provide quality checking.  The auto part (this part) should be added to enable the IP to enter in file, directory locations, etc.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.212.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.212.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Must provide USE CASE test(s)",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Key provided is a pointer to a directory or file for integration tests for use case testing delivered.  This is a two part requirement, the manual check through ZQA should remain and provide quality checking.  The auto part (this part) should be added to enable the IP to enter in file, directory locations, etc.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Key provided is directory or a report file\n\t2 .Check if directory or file exists\n\t3. KEY: svtbusecase\n\ta.Default: none\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "key 'svtbusecase' points to a non-empty file or a non-empty directory. rule PASS",
              "severity": "INFO"
            }
          ],
          "name": "Must provide USE CASE test(s)",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "20.213.a": {
          "algorithm": "TBD",
          "attributes": {},
          "background": "https://dtspedia.intel.com/System_Verilog_for_Test_Benches_%28SVTB%29",
          "category": "SV TB",
          "description": "Must provide Test list with integration tests for use in PERFORMANCE analysis",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.213.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.213.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Must provide Test list with integration tests for use in PERFORMANCE analysis ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Must provide Test list with integration tests for use in PERFORMANCE analysis",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: TBD",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.213.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.213.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Must provide Test list with integration tests for use in PERFORMANCE analysis ",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "20.213.b": {
          "algorithm": "1. Key provided is directory or a report file\n2  Check if directory or file exists\n3. KEY: svtbperformance\n   a.Default: none\n",
          "attributes": {
            "collateral: svtbperformance": ".//verif/tb",
            "key: svtbperformance": ".//verif/tb"
          },
          "background": "The point of a high power test is that for power estimation there needs to be a test specifically designed to run at the highest possible activity factor.\nThis can be used for SoC power budgeting.\n\nAlso a reusable test should be provided that can be used for performance (data throughput, etc.)\n\nFor use case scenarios, this normal reusable integration and functional tests only based on test plan that be ported to SoC level for reuse and not\nIncluding tests that are specific to IP testing and not relevant to SoC integration.\n\nhttps://dtspedia.intel.com/System_Verilog_for_Test_Benches_%28SVTB%29\n\n\n",
          "category": "SV TB",
          "description": "This is a two part requirement, the manual check through ZQA should remain and provide quality checking.  The auto part (this part) should be added to enable the IP to enter in file, directory locations, etc.\nKey provided is a pointer to a directory or file for integration tests for use in performance analysis for reference.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.213.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.213.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Must provide Performance test(s)",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This is a two part requirement, the manual check through ZQA should remain and provide quality checking.  The auto part (this part) should be added to enable the IP to enter in file, directory locations, etc.\n\tKey provided is a pointer to a directory or file for integration tests for use in performance analysis for reference.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Key provided is directory or a report file\n\t2  Check if directory or file exists\n\t3. KEY: svtbperformance\n\t   a.Default: none\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "key 'svtbperformance' points to a non-empty file or a non-empty directory. rule PASS",
              "severity": "INFO"
            }
          ],
          "name": "Must provide Performance test(s)",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "20.226.a": {
          "algorithm": "Not Applicable",
          "attributes": {},
          "background": "https://dtspedia.intel.com/System_Verilog_for_Test_Benches_%28SVTB%29",
          "category": "SV TB",
          "description": "Stand alone integratoin test provided or IP level reuseable sequences validated and delivered to SOC for SOC integration. Instructions on setup the test and a script to run it provided",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.226.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.226.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Stand alone integration test (data flow, connectivity)",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Stand alone integratoin test provided or IP level reuseable sequences validated and delivered to SOC for SOC integration. Instructions on setup the test and a script to run it provided",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Not Applicable",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.226.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.226.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Stand alone integration test (data flow, connectivity)",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "20.226.b": {
          "algorithm": "1.Key provided is directory or a report file\n2.Check if directory or file exists\n\n",
          "attributes": {
            "collateral: svtbstandalone": ".//verif/tests/",
            "key: svtbstandalone": ".//verif/tests/"
          },
          "background": "Provide test list, directory or .svh file for reference for stand alone integration test\n\nhttps://dtspedia.intel.com/System_Verilog_for_Test_Benches_%28SVTB%29",
          "category": "SV TB",
          "description": "Key provided is a pointer to a directory or file for stand alone integration test.  This is a two part requirement, the manual check through ZQA should remain and provide quality checking.  The auto part (this part) should be added to enable the IP to enter in file, directory locations, etc.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.226.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.226.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Directory or file for reference of stand alone integration test",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Key provided is a pointer to a directory or file for stand alone integration test.  This is a two part requirement, the manual check through ZQA should remain and provide quality checking.  The auto part (this part) should be added to enable the IP to enter in file, directory locations, etc.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1.Key provided is directory or a report file\n\t2.Check if directory or file exists\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "key 'svtbstandalone' points to a non-empty file or a non-empty directory. rule PASS",
              "severity": "INFO"
            }
          ],
          "name": "Directory or file for reference of stand alone integration test",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "20.231.a": {
          "algorithm": "Starting from verif/tb, locate all files with .sv or .svh\nVerify '(ovm|uvm)_scoreboard' or '(ovm|uvm)_component' exists in a file\nIf the scoreboard/component does not exist, then\nVerify CheckerData/*/*/scripts is define in UDF\n-and-\nVerify CheckerData/*/*/scripts/-error_if_not_found not 0\nOverride key for OVM test bench directory = ovmtbdir\nOverride key for ACE directory = acedir\nOverride key for ACE UDF file = aceudffiles",
          "attributes": {},
          "background": "The IP should have a re-usable end-to-end scoreboarding. Currently two approaches are in Use, run-time scoreboarding and post-processing scoreboarding. The QA tool currently checks for run-time scoreboard. If no run-time\nscoreboard is found then the tool will try to find if any Post Processing checker is registered in any of the ACE UDF Files. If it does not find any then it will flag a failure.\n\nhttps://dtspedia.intel.com/System_Verilog_for_Test_Benches_%28SVTB%29",
          "category": "SV TB",
          "description": "Checking for presence of End-to-End ScoreBoarding",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.231.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.231.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: The IP should have a re-usable scoreboard (Runtime or Post-Processing)",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Checking for presence of End-to-End ScoreBoarding",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Starting from verif/tb, locate all files with .sv or .svh\n\tVerify '(ovm|uvm)_scoreboard' or '(ovm|uvm)_component' exists in a file\n\tIf the scoreboard/component does not exist, then\n\tVerify CheckerData/*/*/scripts is define in UDF\n\t-and-\n\tVerify CheckerData/*/*/scripts/-error_if_not_found not 0\n\tOverride key for OVM test bench directory = ovmtbdir\n\tOverride key for ACE directory = acedir\n\tOverride key for ACE UDF file = aceudffiles",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.231.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.231.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "The IP should have a re-usable scoreboard (Runtime or Post-Processing)",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "20.232.a": {
          "algorithm": "Define min of 10 unique, found critical signals in an external file (scripts/critical_sig.dat)\n  File format:\n  ; comment\n  <filename>, <interface>, <signal>\n  Note: The file name relative to $IP_ROOT\nEach critical signal must have an assert",
          "attributes": {},
          "background": "https://dtspedia.intel.com/System_Verilog_for_Test_Benches_%28SVTB%29",
          "category": "SV TB",
          "description": "IP delivers validated scoreboards, assertions and assertion control as part of the VIP .",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.232.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.232.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: VIP scoreboards, assertions",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: IP delivers validated scoreboards, assertions and assertion control as part of the VIP .",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Define min of 10 unique, found critical signals in an external file (scripts/critical_sig.dat)\n\t  File format:\n\t  ; comment\n\t  <filename>, <interface>, <signal>\n\t  Note: The file name relative to $IP_ROOT\n\tEach critical signal must have an assert",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.232.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.232.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "VIP scoreboards, assertions",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "20.267.a": {
          "algorithm": "Not Applicable",
          "attributes": {},
          "background": "Provide file or directory for error waivers and disable calls\n\nhttps://dtspedia.intel.com/System_Verilog_for_Test_Benches_%28SVTB%29",
          "category": "SV TB",
          "description": "Key provided is a pointer to a directory or file for error waivers and disable calls.  This is a two part requirement, the manual check through ZQA should remain and provide quality checking.  The auto part (this part) should be added to enable the IP to enter in file, directory locations, etc.\n  Since There is no  POR specific common ?waiver directory? for all IPs to adhere to -  Recommended post processing waiver under ace (cfg) directory,  and simulation runtime waivers under validation env. ( env)\n",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.267.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.267.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: All the error waivers and disable calls are in one place",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Key provided is a pointer to a directory or file for error waivers and disable calls.  This is a two part requirement, the manual check through ZQA should remain and provide quality checking.  The auto part (this part) should be added to enable the IP to enter in file, directory locations, etc.\n\t  Since There is no  POR specific common ?waiver directory? for all IPs to adhere to -  Recommended post processing waiver under ace (cfg) directory,  and simulation runtime waivers under validation env. ( env)\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Not Applicable",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.267.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.267.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "All the error waivers and disable calls are in one place",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "20.267.b": {
          "algorithm": "1.Key provided is directory or a report file\n2.Check if directory or file exists\n\nOverride key for a directory or single file for error waivers and disable calls = svtbwaiversanddisable",
          "attributes": {
            "collateral: svtbwaiversanddisable": ".//ace/dfxsecure_plugin_postsim.pp",
            "key: svtbwaiversanddisable": ".//ace/dfxsecure_plugin_postsim.pp"
          },
          "background": "https://dtspedia.intel.com/System_Verilog_for_Test_Benches_%28SVTB%29",
          "category": "SV TB",
          "description": "Key provided is a pointer to a directory or file for error waivers and disable calls.  This is a two part requirement, the manual check through ZQA should remain and provide quality checking.  The auto part (this part) should be added to enable the IP to enter in file, directory locations, etc.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.267.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.267.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Directory or single file for error waivers and disable calls",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Key provided is a pointer to a directory or file for error waivers and disable calls.  This is a two part requirement, the manual check through ZQA should remain and provide quality checking.  The auto part (this part) should be added to enable the IP to enter in file, directory locations, etc.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1.Key provided is directory or a report file\n\t2.Check if directory or file exists\n\t\n\tOverride key for a directory or single file for error waivers and disable calls = svtbwaiversanddisable",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "key 'svtbwaiversanddisable' points to a non-empty file or a non-empty directory. rule PASS",
              "severity": "INFO"
            }
          ],
          "name": "Directory or single file for error waivers and disable calls",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "20.343.a": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "Ensures consistent behavior of register field default/reset and read/write access and SAI handling between spec (RDL/Onesource), RTL, and the testbench.",
          "category": "SV TB",
          "description": "1) IP must run Saola Generic attribute RAL sequence for Functional Register testing.  \n2) IP must run Saola Generic attribute RAL sequence for Register Security (SAI) testing.\n\nPlease refer to detailed description and examples  on use model of Saola Generic attribute RAL sequence in the Saola Verification & Test User Guide (section 7.7.5 \"Using Register Attribute Test Sequence\") at:\n\nhttps://securewiki.ith.intel.com/download/attachments/191990293/Saola%20Test%20and%20Validation%20Guide.pdf",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.343.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.343.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: 1) IP must run Saola Generic attribute RAL sequence for Functional Register testing.  2) IP must run Saola Generic attribute RAL sequence for Register Security (SAI) testing.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: 1) IP must run Saola Generic attribute RAL sequence for Functional Register testing.  \n\t2) IP must run Saola Generic attribute RAL sequence for Register Security (SAI) testing.\n\t\n\tPlease refer to detailed description and examples  on use model of Saola Generic attribute RAL sequence in the Saola Verification & Test User Guide (section 7.7.5 \"Using Register Attribute Test Sequence\") at:\n\t\n\thttps://securewiki.ith.intel.com/download/attachments/191990293/Saola%20Test%20and%20Validation%20Guide.pdf",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Manual check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.343.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.343.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "1) IP must run Saola Generic attribute RAL sequence for Functional Register testing.  2) IP must run Saola Generic attribute RAL sequence for Register Security (SAI) testing.",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "20.414.a": {
          "algorithm": "1. Check if xvm_pkg is imported in the setup\n\n2. Check if every run_test() function in every test's run_test() task is called with xvm_pkg:: as prefix and appropriate arguments (refer to  the description section) are passed.\n\n3. Verify all OVM/UVM components adhere to the following rules:\n\n[a].  All the sub-class types from ovm_component should always call \"super.build()\" method inside their respective \"build()\" methods, otherwise, parent-child hierarchy is broken for XVM and will run into an issue of a component being built more than once.\nAll the sub-class types from uvm_component should always call \"super.build_phase(phase)\" method inside their respective \"build_phase()\" methods, otherwise, parent-child hierarchy is broken for XVM and will run into an issue of a component being built more than once.\n\n[b]. No creation of any ovm_component types inside \"connect()\" method of another component --  they should be created in \"build()\", otherwise XVM will run the risk of advancing the phases incorrectly for that component and eventually crash at the end with a null-phase being executed.\n\n[c]. Any virtual class methods from base class that is overridden at the sub-class should call \"super.<method>()\", to ensure that OVM and UVM phases are run in sync with each other. The risk of not following this practice leads to OVM and UVM phases to go out of sync with unexpected behavior and results.",
          "attributes": {},
          "background": "XVM User Guide: https://securewiki.ith.intel.com/download/attachments/191990190/XVM%20User%20Guide.pdf\n\nWhat is XVM?\n\nXVM is an Intel methodology to allow OVM and UVM packages to be compiled together into a single simulation model\n\nIt preserves the separate OVM and UVM factories, configurations and APIs to integrate OVM / UVM VIPs together, while providing relevant hooks for --\n\na. OVM / UVM mixed sub-component instantiations\nb. OVM / UVM simulation phase synchronizations\nc. TLM port and export connections across OVM / UVM transactions\nd. Building and executing OVM / UVM layered sequences\ne. Mixing of OVM / UVM nested objects' field automation functions\n\n\nWhere are the sources compiled from --\n\nAlways use common installations --\n/p/com/eda/intel/xvm/<version>\n/p/hdk/rtl/cad/<platform>/intel/xvm/<version>\n\ncompile xvm_pkg.sv ONCE\n\nNote than one should compile ovm_pkg.sv and uvm_pkg.sv prior to the xvm_pkg.sv\n\nOther documentation --\n\n$XVM_HOME/docs/index.html",
          "category": "SV TB",
          "description": "Always use common installations --\n/p/com/eda/intel/xvm/<version>\n/p/hdk/rtl/cad/<platform>/intel/xvm/<version>\n\ncompile xvm_pkg.sv ONCE\n\nNote than one should compile ovm_pkg.sv and uvm_pkg.sv prior to the xvm_pkg.sv\n\nImport \"xvm_pkg\" into your testbench programs / modules / packages along with OVM and UVM\nimport uvm_pkg::*;\nimport ovm_pkg::*;\nimport xvm_pkg::*;\n\nUse (optional) XVM macros definitions\n`include \"xvm_macros.svh\"\n\n\nIn the test case --\n\nXVM manages OVM and UVM test --\nYour IP test/program block may already have:\n run_test()\n\nOR\n\novm_pkg::run_test();\n\nOR\n\nuvm_pkg::run_test();\n\n**Replace the above line with \n\n  xvm_pkg::run_test()\n\nwhich has the format of:\n   xvm_pkg::run_test(string ovm_test, string uvm_test, eop_e run_eop_policy)    \n\n\nSpecify _either_   ovm_test or uvm_test argument\n\nrun_eop_policy controls whether OVM or UVM or BOTH controls end_of_phase_flag. This optional argument may have one of the following values --\n  EOP_OVM\n  EOP_UVM\n  EOP_BOTH",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 20.414.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (20) SV TB",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 20.414.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Delivered verification collateral must support XVM",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Always use common installations --\n\t/p/com/eda/intel/xvm/<version>\n\t/p/hdk/rtl/cad/<platform>/intel/xvm/<version>\n\t\n\tcompile xvm_pkg.sv ONCE\n\t\n\tNote than one should compile ovm_pkg.sv and uvm_pkg.sv prior to the xvm_pkg.sv\n\t\n\tImport \"xvm_pkg\" into your testbench programs / modules / packages along with OVM and UVM\n\timport uvm_pkg::*;\n\timport ovm_pkg::*;\n\timport xvm_pkg::*;\n\t\n\tUse (optional) XVM macros definitions\n\t`include \"xvm_macros.svh\"\n\t\n\t\n\tIn the test case --\n\t\n\tXVM manages OVM and UVM test --\n\tYour IP test/program block may already have:\n\t run_test()\n\t\n\tOR\n\t\n\tovm_pkg::run_test();\n\t\n\tOR\n\t\n\tuvm_pkg::run_test();\n\t\n\t**Replace the above line with \n\t\n\t  xvm_pkg::run_test()\n\t\n\twhich has the format of:\n\t   xvm_pkg::run_test(string ovm_test, string uvm_test, eop_e run_eop_policy)    \n\t\n\t\n\tSpecify _either_   ovm_test or uvm_test argument\n\t\n\trun_eop_policy controls whether OVM or UVM or BOTH controls end_of_phase_flag. This optional argument may have one of the following values --\n\t  EOP_OVM\n\t  EOP_UVM\n\t  EOP_BOTH",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Check if xvm_pkg is imported in the setup\n\t\n\t2. Check if every run_test() function in every test's run_test() task is called with xvm_pkg:: as prefix and appropriate arguments (refer to  the description section) are passed.\n\t\n\t3. Verify all OVM/UVM components adhere to the following rules:\n\t\n\t[a].  All the sub-class types from ovm_component should always call \"super.build()\" method inside their respective \"build()\" methods, otherwise, parent-child hierarchy is broken for XVM and will run into an issue of a component being built more than once.\n\tAll the sub-class types from uvm_component should always call \"super.build_phase(phase)\" method inside their respective \"build_phase()\" methods, otherwise, parent-child hierarchy is broken for XVM and will run into an issue of a component being built more than once.\n\t\n\t[b]. No creation of any ovm_component types inside \"connect()\" method of another component --  they should be created in \"build()\", otherwise XVM will run the risk of advancing the phases incorrectly for that component and eventually crash at the end with a null-phase being executed.\n\t\n\t[c]. Any virtual class methods from base class that is overridden at the sub-class should call \"super.<method>()\", to ensure that OVM and UVM phases are run in sync with each other. The risk of not following this practice leads to OVM and UVM phases to go out of sync with unexpected behavior and results.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 20.414.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 20.414.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Delivered verification collateral must support XVM",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.176.a": {
          "algorithm": "1. Verify that Lintra/Spyglass Lint violations xml file exists. \n2. Verify the violation ID 70603 does not exist in the violations xml file.\n3. Locate the Lintra rules report and verify that rule ID 70603 is active.",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications\n\nLintra: https://dtspedia.intel.com/Lintra\nLintra rules: https://ids.intel.com/docs/crm/lintra/13x/lintra_errors_crm_frame.html\n\nSee the following for generating lintra rule report:\nhttps://dtspedia.intel.com/Lintra_UDR/Lintra_UDR_FAQs#How_to_generate_rules_report_for_IPDS_rule_17.324_.3F\n",
          "category": "VISA",
          "description": "Clocks should not be added to the network as data to the network. If it is a must then it must be noted that the clock will only give an indication that it is alive or dead and cannot be used for measuring frequency.The clock will be marked as a false path.  This is a manual review of the scan tools reports.",
          "logRecords": [],
          "name": "Clocks should not be added to the network as data to the network. If it is a must, then it must be noted that the clock will only give an indication that it is alive or dead and cannot be used for measuring frequency. The clock will be marked as a false path. ",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "21.233.a": {
          "algorithm": "1. Verify the Visa Lint violations xml file exists. This file is generated by Visa Lint tool (part of VISA tool suite).\n2. Verify the violation ID 1007 does not exist in the Visa Lint violations xml file.",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications#233",
          "category": "VISA",
          "description": "All observed signals that expose fuse data, must have security classification of Intel only (Red).",
          "logRecords": [],
          "name": "Security classification of observed signals must adhere to guidelines in the VISA Integration Guide \"security classification\"",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.235.b": {
          "algorithm": "Check for the existence of <IP_ROOT>/tools/visa/<alias>.sig.visa\nThe location and filename should be a key\nThe file should not be of zero length\nThis file feeds downstream ZQA checks\n",
          "attributes": {},
          "background": " https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications",
          "category": "VISA",
          "description": "Check for the existence of the .sig.visa file in the <IP_ROOT>/tools/visa/<alias>.sig.visa\nThe location and file name should be a key\n.visa file should not be zero sized",
          "logRecords": [],
          "name": "Deliver RTL without VISA inserted, while providing all collaterals required for insertion, as per the standard flow. Run the VISA insertion flow, and pass resulting RTL through back-end flows to verify that area, timing and power requirements are met",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.237.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications#237",
          "category": "VISA",
          "description": "Add VISA control registers of all ULMs in power gated domains, to the state retention list in the IP's UPF file",
          "logRecords": [],
          "name": "For VISA ULMs in power-gated domains, provide a mechansim for reconfiguring the ULM\"s control registers after power-down events.  This mechanism can be state-retention or reliance on Visa controller replay.",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.238.a": {
          "algorithm": "1. Verify that Lintra/Spyglass Lint violations xml file exists. \n2. Verify the violation ID 70608 does not exist in the Lintra violations xml file.\n3. Locate the Lintra rules report and verify that rule ID 70608 is active.",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications#238\n\nLintra: https://dtspedia.intel.com/Lintra\nLintra rules: https://ids.intel.com/docs/crm/lintra/13x/lintra_errors_crm_frame.html\n\nSee the following for generating lintra rule report:\nhttps://dtspedia.intel.com/Lintra_UDR/Lintra_UDR_FAQs#How_to_generate_rules_report_for_IPDS_rule_17.324_.3F\n",
          "category": "VISA",
          "description": "Maximum 2 output lanes per ULM (num_output_lanes=2 or 1)",
          "logRecords": [],
          "name": "Signal count, lane count, mux count, and other budget items must adhere to guidelines in the VISA Integration Guide \"budget rules\"",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "21.239.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications#239",
          "category": "VISA",
          "description": "VISA routes from power gated domain (PGD) to always on (AON) domain should be isolated. Signals are driven by ULM outputs ports: lane_out and ss_clk_out, as well as (if standard 252 is waived) xbar_out and xbar_ss_clk_out",
          "logRecords": [],
          "name": "VISA routes from power gated domain (PGD) to always on (AON) domain should be isolated. Signals are driven by ULM outputs ports: lane_out and ss_clk_out, as well as (if standard 252 is waived) xbar_out and xbar_ss_clk_out",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.240.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications#240",
          "category": "VISA",
          "description": "In fact, the serial configuration clock should not be gated, period. This clock is seldom active - only during a VISA register write, and for 30 to 40 cycles afterwards - the VISA controller takes care of that. Any additional gating will achieve very little, and may cause the VISA serial configuration mechanism to fail.\n",
          "logRecords": [],
          "name": "Do not gate the VISA serial configuration clock (fvisa_serstrb)",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.243.a": {
          "algorithm": "1. Verify the Visa Lint violations xml file exists. This file is generated by Visa Lint tool (part of VISA tool suite).\n2. Verify the violation ID 3001 does not exist in the Visa Lint violations xml file.",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications#243",
          "category": "VISA",
          "description": "Check for the existence of the .sig file in the <IP_ROOT>/tools/visa/<alias>.sig\nThe location and file name should be a key\n.sig file should not be zero sized",
          "logRecords": [],
          "name": "Visa top [alias].sig file must exists",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "21.243.b": {
          "algorithm": "1. Verify the Visa Lint violations xml file exists. This file is generated by Visa Lint tool (part of VISA tool suite).\n2. Verify the violation ID 3002 does not exist in the Visa Lint violations xml file.",
          "attributes": {},
          "background": "To ensure the complete sig file is delivered for VISA insertion and validation\nZQA rule request: IPDS index 243 - rule children sig files\n\nhttps://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications",
          "category": "VISA",
          "description": "Check for the existence of all included sig files from top level sig file: <IP>/tools/visa/<IP>.sig",
          "logRecords": [],
          "name": "All included children sig file(s) must exist",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "21.245.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications#245",
          "category": "VISA",
          "description": "Before releasing, you should successfully complete the simulation of the test bench generated by visa_validate. By reusable, the intention is that the SoC team, when reinserting VISA in the IP, can rerun the validation, with the IP as a top level block (not that the test needs to be integrated into the SoC environment). This means that if you used a custom template file (using the --template_file option), you should make it available to the SoC team as part of your drop, and record the fact that you used it (providing a README file describing how visa_validate was invoked, or simply a shell script). In the future, this will be integrated into the VISA insertion flow.\n\nFor HIPs, where VISA 1 muxes are inserted, and registers are controlled by CRI, the validation should be done against a VISA 2 spec, with all ULMs appearing to be ones with serial configurations. This includes assignment of visa_unit_id and reg_start_index to all ULMs, so that integration will be possible. Additionally, since some addi",
          "logRecords": [],
          "name": "Ensure visa_validate-generated test is reusable, and tests are passing",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.246.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications",
          "category": "VISA",
          "description": "Follow IOSF naming convention for VISA interface signals\n",
          "logRecords": [],
          "name": "Follow IOSF naming convention for VISA interface signals",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.247.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications",
          "category": "VISA",
          "description": "The DFX security plugin is not a part of the VISA specification. VISA security is verified assuming the ULM inputs all_disable and customer_disable are driven properly. It is up to the IP supplier to provide a test showing that these two signals (for all of the block's ULMs) are driven as per the DFX security plugin's specification.",
          "logRecords": [],
          "name": "Reusable connectivity test (connectivity from DFX security plugin to each VISA ULM)",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.250.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications",
          "category": "VISA",
          "description": "No power domain mixing per output lane per ULM",
          "logRecords": [],
          "name": "No power domain mixing per output lane per ULM",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.251.a": {
          "algorithm": "1. Verify that Lintra/Spyglass Lint violations xml file exists.\n2. Verify the violation ID 70600 and 70602 does not exist in the violations xml file.\n3. Locate the Lintra rules report and verify that rule ID 70600 and 70602 are active.",
          "attributes": {},
          "background": "This help to speed up post-silicon debug and understanding.  To pass large sets of signals between blocks in the design, use structures and refer to the structure members in the SIG file.  Do not use generic names such as visa[99:0].  Do not put RF or SRAM on VISA.\n\nhttps://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications#251\nhttps://dtspedia.intel.com/Visa_IT/Signal_file_format#Writing_sigfile_for_struct_signals\n\nLintra: https://dtspedia.intel.com/Lintra\nLintra rules: https://ids.intel.com/docs/crm/lintra/13x/lintra_errors_crm_frame.html\n\nSee the following for generating lintra rule report:\nhttps://dtspedia.intel.com/Lintra_UDR/Lintra_UDR_FAQs#How_to_generate_rules_report_for_IPDS_rule_17.324_.3F\n",
          "category": "VISA",
          "description": "All VISA signals given in the SIG file must have meaningful names",
          "logRecords": [],
          "name": "Don\"t use VISA to probe wide vectors or structures. In particular, no register files, sram, or wide anonymous DFx vectors",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "21.252.a": {
          "algorithm": "1. Verify that Lintra/Spyglass Lint violations xml file exists.\n2. Verify the violation ID 70609 does not exist in the violations xml file.\n3. Locate the Lintra rules report and verify that rule ID 70609 is active.",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications\n\nLintra: https://dtspedia.intel.com/Lintra\nLintra rules: https://ids.intel.com/docs/crm/lintra/13x/lintra_errors_crm_frame.html\n\nSee the following for generating lintra rule report:\nhttps://dtspedia.intel.com/Lintra_UDR/Lintra_UDR_FAQs#How_to_generate_rules_report_for_IPDS_rule_17.324_.3F\n",
          "category": "VISA",
          "description": "Verify the visa [alias]_top.sig.visa exists somewhere under tools/visa\nParse the .visa file and verify that:\nNo visa output xbar at ULM\n\n",
          "logRecords": [],
          "name": "No visa xbar at ULM - review with visa architects if needed",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "21.255.a": {
          "algorithm": "1. Verify that Lintra/Spyglass Lint violations xml file exists.\n2. Verify the violation ID 70601 does not exist in the violations xml file.\n3. Locate the Lintra rules report and verify that rule ID 70601 is active.",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications\n\nLintra: https://dtspedia.intel.com/Lintra\nLintra rules: https://ids.intel.com/docs/crm/lintra/13x/lintra_errors_crm_frame.html\n\nSee the following for generating lintra rule report:\nhttps://dtspedia.intel.com/Lintra_UDR/Lintra_UDR_FAQs#How_to_generate_rules_report_for_IPDS_rule_17.324_.3F\n",
          "category": "VISA",
          "description": "ULMs should not contain signals from other IPs. If a signal (or set of signals) must be used they must be flopped (to meet timing) before they enter the network. All data inputs to the ULM must be driven from sequential inside the unit itself",
          "logRecords": [],
          "name": "ULMs should not contain signals from other IPs. If a signal (or set of signals) must be used, they must be flopped (to meet timing) before they enter the network. All data inputs to the ULM must be driven from sequentials inside the unit itself",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "21.256.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications",
          "category": "VISA",
          "description": "Docunment and justify any areas of the design where VISA is not inserted, and explain Post Si approach for these areas",
          "logRecords": [],
          "name": "Review set of observed signals to ensure it covers the requirement of silicon debug, HVM and performance monitoring.  See the VISA Integration Guide for recommendations.",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.256.b": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "Any special requirements on VISA from HVM or debug teams will be recorded in the IP HAS\n\nhttps://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications",
          "category": "VISA",
          "description": "HVM and debug team requirements for VISA signals included as per HAS",
          "logRecords": [],
          "name": "HVM/debug signal requirements",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "21.336.a": {
          "algorithm": "1. Verify the Visa Lint violations xml file exists. This file is generated by Visa Lint tool (part of VISA tool suite).\n2. Verify the Visa Lint violations xml file is clean (no unwaived violations)",
          "attributes": {},
          "background": "https://dtspedia.intel.com/Visa_IT/Soft_IP_standard_flow/Standards_clarifications#251",
          "category": "VISA",
          "description": "VisaLint must be run",
          "logRecords": [],
          "name": "VISA Lint must be run and is clean",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "21.341.a": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "For faster clocks than the CLM/Aggregator frequency there are 2 methods of handling this.\n1.  Clock step-down enabled, with appropriate step-down factor within the ULMs in the IPs.  This can only be done at the IP level.\n2.  VISA can be put on DTF through a PLM with a sync gasket to the DVP.  the DVP will then connect up to the DTF backbone.  This can be implemented at either the IP level or at the SoC level.  Note:  if the IP does not implement Step-down or DVP, then the SoC has no choice but to connect it to the DTF backbone for visibilty.",
          "category": "VISA",
          "description": "VISA source clocks cannot be faster than the VISA common clock of the CLM (a.k.a. North Peak clock).",
          "logRecords": [],
          "name": "VISA source clocks cannot be faster than the VISA common clock of the CLM (a.k.a. North Peak clock). Faster clocks need to be routed through ULMs with clock step-down enabled, with appropriate step-down factor.",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "24.211.a": {
          "algorithm": "1.Key provided is directory or a report file\n2.Check if directory or file exists",
          "attributes": {},
          "background": "The point of a high power test is that for power estimation there needs to be a test specifically designed to run at the highest possible activity factor.\nThis can be used for SoC power budgeting.\n\nAlso a reusable test should be provided that can be used for performance (data throughput, etc.)\n\nFor use case scenarios, this normal reusable integration and functional tests only based on test plan that be ported to SoC level for reuse and not\nIncluding tests that are specific to IP testing and not relevant to SoC integration.\n\nhttps://dtspedia.intel.com/System_Verilog_for_Test_Benches_%28SVTB%29\nACCESS Link:\nhttps://securewiki.ith.intel.com/display/hdk/ACCESS%3A+Power+State+Time+Window+Identification",
          "category": "Power",
          "description": "Key Power modes identified: accessible, active_interface, active_idle, deep_idle & virus.\nIPs to have tests defined for each of the above power modes and simulations run.\nSequences from this run needs to be delivered to SoC.\nFSDB needs to be generated for the power modes either using VCS NLP or through ACCESS. ACCESS internally calls VCS NLP and generates FSDB for specific timing window with high activity.\nTests to have full coverage of pre-defined IP power modes as documented in PLC.\n\nDifferent IP scenario modes and its details.\nAccessible mode : Lowest power state of the IP, power gates are engaged (only the AON is powered)\nDeep Idle : several cycle exit latency, clock req is low\nActive Idle : No exit latency, interface are idle, Clock req is up, power gates are up.\nActive : per interface back to back traffic, bi-directional, configurable BW for 2 points, steady state of 2K cycles, POR power management configuration(clock gating enabled). Clock gating as Por'ed and not disabled.This should give the active max, the configuration to half B would allow boubles between traffic and can help with understanding how power scales with BW.\nVirus : Worst case stress and full utilization",
          "logRecords": [],
          "name": "Tests to have full coverage of pre-defined IP power modes as documented in PLC",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "24.351.a": {
          "algorithm": "[alias]_power_summary.rpt must exist under tools/power directory and must not be empty\n\n",
          "attributes": {},
          "background": "Outcome of Power Roll-up Working group to generate Power reports requested by SoC teams of the milestone.\nhttps://securewiki.ith.intel.com/display/hdk/RTL+Power+Estimation\nhttps://securewiki.ith.intel.com/display/hdk/Power+Template+Automation",
          "category": "Power",
          "description": "Deliver power template with per rail state-based IP power numbers; template version 3.0\nApproved as part of TFM. Power templates are automatically generated by RDT and Power Artist flows (Starving_Artist).\nPower estimation generation must be done using PowerArtist for SIP and Primetime-PX for HIP with reporting following converged SIP/HIP power templates.\nFor Core and GT .blz files are delivered directly to the SoC team.\nFor SIPs, if the starving artist(flow around PowerArtist tool) generates Power Template file we can mark this rule as Met/Fulfilled.\nFor HIPs, if the template is generated by PRISM / PrimetimePX and delivered along with HIP collaterals, we can mark this rule as Met/Fulfilled.\n** ZQA Rule Revision to Look for Correct Template File Naming Convention is WIP",
          "logRecords": [],
          "name": "IP drop meets power targets per delivery milestone",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "24.352.a": {
          "algorithm": "1.\tLook for <ip>.power.csv under \"tools/power\" directory. Applicable to SIPs & HIPs\n2.\tEnsure size of the file is not zero bytes\n3.\tNo negative integers in the power template\n4.\tCheck for few mandatory fields to be populated in the template\na.\tIPName | IPType | Voltage_V | LeakagePower_W | DynamicPower_W | TotalPower_W\n5.\tSample template available at: /p/hdk/rtl/proj_tools/power_templates/cds/latest/PowerTemplates_Rev3\\ 0.xlsx\n6.     Compare IP power csv with SoC provided target file per milestone. Target to actual data should match and fails otherwise\n\nOverride key for Power directory = powerdir\nOverride key for Power CSV file = powercsv",
          "attributes": {},
          "background": "Outcome of Power Roll-up Working group to generate Power reports in specific template.\nhttps://securewiki.ith.intel.com/display/hdk/RTL+Power+Estimation\nhttps://securewiki.ith.intel.com/display/hdk/Power+Template+Automation",
          "category": "Power",
          "description": "Deliver power template with per rail state-based IP power numbers; template version 3.0\nApproved as part of TFM. Power templates are automatically generated by RDT and Power Artist flows (Starving_Artist).\nPower estimation generation must be done using PowerArtist for SIP and Primetime-PX for HIP with reporting following converged SIP/HIP power templates.\nFor Core and GT .blz files are delivered directly to the SoC team.\nFor SIPs, if the starving artist(flow around PowerArtist tool) generates Power Template file we can mark this rule as Met/Fulfilled.\nFor HIPs, if the template is generated by PRISM / PrimetimePX and delivered along with HIP collaterals, we can mark this rule as Met/Fulfilled.\n** ZQA Rule Revision to Look for Correct Template File Naming Convention is WIP",
          "logRecords": [],
          "name": "IP delivers power data based on converged template and drop meets power targets per delivery milestone. SIPs (RTL stage) uses PowerArtist which HIPs (netlist stage) use PrimetimePX to deliver this common template",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "24.352.b": {
          "algorithm": "Looks for power directory under tools and checks if all reports as the keys below are generated and the content is non-zero",
          "attributes": {},
          "background": "power.csv is the converged template define by the VT from PEG Power Tech Forum and generated through a post script from RDT-Power flows.\nCompressed_cell_power report is generated by PTPX\nCGE/Hier/Rollup files are required for power analysis and will be used by SoC teams",
          "category": "Power",
          "description": "Power reports aid in understanding the collaterals, run conditions, status of run and also in any debug. Apart from PTPX/PA generated reports, custom reports are generated through scripts parsing tool output as required for power analysis.\n\nStarvingArtist does not generate any of the powercell, powercgi, powerhier and powerrollcsv reports.\nPTPX generates the powercell, powercgi, powerhier and powerrollcsv reports.\nPacific generates the powercgi, powerhier and powerrollcsv reports. Pacific uses \"xparams_set_generate_compressed_cell_power 1\" to generate powercell report. It is not extensively tested, hence optional for ZQA.",
          "logRecords": [],
          "name": "Deliver pre-defined custom power reports",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "26.131.a": {
          "algorithm": "There must be atleast one *.swl or *.awl file under tools/spyglasslp/*\nOverride key for spyglasslp directory = spyglasslpdir\nAll spyglasslp/VC-LP waiver files are unique\nThere must be at least 1 waiver file with extention .swl or .awl under tools/spyglasslp. Do not include exclude list.\nOverride key for spyglasslp directory = spyglasslpdir\nOverride key for spyglasslp waiver prefix = spyglasslpwaiverprefix\nNo convention followed for vclp waiver file. (*.tcl). Configure key vclpwaiverfile to specify vclp waiver file.",
          "attributes": {},
          "background": "If the waiver file name from several IP's collide, only one of them will be active, and all others will be ignored at SoC level.\nUniquifying them with [ip]_ prefix is recommended.\nFurther details available at https://intelpedia.intel.com/SoC_RTL_Low_Power_Check",
          "category": "Power Intent",
          "description": "Spyglass/VC-LP waiver file name needs to be unique to be reusable as it is at SoC level\nIPP is recommended to use Spyglass GUI to generate waiver file(S) including the name (uniquified)\nThe directories spyglass_spysch and .SG_SaveRestoreDB are excluded from the waiver file search.\nChecks whether at least one *.swl or *.awl is available. The directories spyglass_spysch and .SG_SaveRestoreDB are excluded from the file search.\nwaiver.swl or waiver.awl must exist to Pass this rule (IP Provider/owner needs to generate an empty waiver file if there is no violation)",
          "logRecords": [],
          "name": "FE(RTL) - LP Lint waiver files must exist and are uniquified with [ip]_ prefix",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "26.131.b": {
          "algorithm": "For Spyglass-LP\nmoresimple.rpt must exist under tools/spyglasslp/*. Also, this report must be clean meaning this report must not contain: Error or Fatal or Syntax. Non-waived Errors are flagged. Errors under Waived are not considered as FAIL.\nsummary.rpt is an optional file\n\nFor VC-LP\n\"uncompressed.rpt\" must exist under tools/vclp/ or tools/vclp/reports/.",
          "attributes": {},
          "background": "SoC team can use this as a reference whether the waivers provided by IP's are good and complete. Further details available at https://intelpedia.intel.com/SoC_RTL_Low_Power_Check",
          "category": "Power Intent",
          "description": "For Spyglass: \nChecks whether Spyglass run results or reports are provided and are clean.\nmoresimple.rpt must exist under tools/spyglasslp/ or tools/spyglasslp/reports/. Search path can be overridden by key spyglasslpdir.\nsummary.rpt is an optional file.\nThe directories spyglass_spysch and .SG_SaveRestoreDB are excluded from the file search.\nAlso, these reports must be clean meaning these reports must not contain: Error or Fatal or Syntax. Errors listed under Waived are not considered as FAIL.\nAlso, these reports must contain string: \"Non-BuiltIn -> Goal=lp_fe/power_verif_noninstr\".\nACE-Spyglass: The option \"current_methodology\" is ended with \"methodology\":\nset_option current_methodology /<path>/methodology\nUsers then can specify LP goal as \"lp_fe/power_verif_noninstr\"\nSpyglass Standalone: The script \"/p/com/flows/spyglass_methodology/1.1.0/scripts/run_spyglass_rtl.pl\", originally created for LP, has option \"current_methodology\" ended with \"lp_fe/\"\nFor VC-LP:\n\"uncompressed.rpt\" must exist under tools/vclp/ or tools/vclp/reports/.",
          "logRecords": [],
          "name": "FE(RTL) - LP Lint report files must exist and are clean",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "26.306.a": {
          "algorithm": "TBD",
          "attributes": {},
          "background": "At RTL 0p0, we need skeleton UPF as mentioned in the description. It would help SoC to plan Rail hook-up and number of Power domains being created with respect to HIP / SIP.\n\nhttps://intelpedia.intel.com/SoC_Low_Power_Design",
          "category": "Power Intent",
          "description": "1. A power domain must have one element\n2. Nesting is allowed only if parent domain is at least 2X (gate count) of nested Power domain",
          "logRecords": [],
          "name": "UPF requirements met - Loading, port names, Power State Table, Power Domain and Isolation/Retention/Level Shifter Strategies",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "26.306.b": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "It is extension of Rule 306.a, the description has some of them listed to make UPF as complete.\n\nhttps://intelpedia.intel.com/SoC_Low_Power_Design",
          "category": "Power Intent",
          "description": "It is extension of Rule 306.a, for 0p3 onwards the UPF has to be complete. Some of the details are,\n\n1. Strategies defined (like isolation / level shifter / retention / Power switch)\n2. Requires isolation for all outputs of internally gated Power domain\n3. Primary supply for PD defined\n",
          "logRecords": [],
          "name": "UPF file(s) are appropriate for SoC",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "26.306.c": {
          "algorithm": "1.InspectUPF log file must exists. Default path is :tools/upf. Default log file is: inspect.log\n2.InspectUPF log file must be clean. The line must not start with '-E-'.\n",
          "attributes": {},
          "background": "Checks UPF quality for items not checked by Spyglass-LP\n\nhttps://intelpedia.intel.com/SoC_Low_Power_Design",
          "category": "Power Intent",
          "description": "RDT flow disallow usage of certain UPF commands , due to insufficient support through the implementation and verification flow. The subset of commands is described in the UPF_master_list https://intelpedia.intel.com/images/7/71/UPF_commands_Master_list_ww47.xlsx\nhttps://intelpedia.intel.com/SoC_Low_Power_Design#Quick_Links_on_UPF_Tools.2FFlow.2FMethodology. Disallowed commands will be flagged by InspectUPF.\nhttp://chassis.intel.com/inspect_upf.html - Check this page for usage example.\nUsage: -verbose and tee to log file.\nPass: There shouldn't be any Error \"\"-E-\"\" and for Warnings \"\"-W-\"\" needs to be reviewed.\nMark as pass if InspectUPF report is clean\n",
          "logRecords": [],
          "name": "inspectUPF run and is clean",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "26.306.d": {
          "algorithm": "",
          "attributes": {},
          "background": "During implementation, while merging multiple IPs to a partition, there are challenges for design convergence. If a Power domain has single element defined, the interaction with other Power domains are handled/buffered effectively and improves design closure time.",
          "category": "Power Intent",
          "description": "1. A power domain must have one element\n2. Nesting is allowed only if parent domain is at least 2X (gate count) of nested Power domain",
          "logRecords": [],
          "name": "UPF requirements met",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "26.312.a": {
          "algorithm": "TBD",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_Low_Power_Design\n\nTemplates are available in the following link,\n\nhttps://intelpedia.intel.com/SoC_Low_Power_Design#Quick_Links_on_UPF_Tools.2FFlow.2FMethodology\n\n",
          "category": "Power Intent",
          "description": " 1. UPF file\n 2. .lib file for HIPs with Power Intent, UPF, and BMOD\n 3. Specific location (SIP: tools/upf HIP: rtl/upf)\n 4. UPF and .lib consistency, BMOD(not synthesizable, top level)\n 5. Variable defined/used as part of UPF  (Variables used in UPF file has to be defined in the same file / IP config file as per template.upf)",
          "logRecords": [],
          "name": "All Power intent Collaterals Exist and consistent with each other",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "3.327.a": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "http://chassis.intel.com/clk_integ.html",
          "category": "Collage",
          "description": "Define IP Clock Pins along with their properties in the IP build script. These properties are defined for all RTL clock pins.\n\nShould have following command in builder script:\n\nUsage: collage_create_ip_clock [-port ] [-pin ] [-clk_min_freq 10] -clk_max_freq 10 [-clk_type FUNC_CLK][-master_clock_reference_name ][-master_clock_source_pin ][-reference_clock_name ] [-is_early_clock][-needs_contention_clearning][-factor ] [-is_var_port] [-non_scannable]\n\nExample: collage_create_ip_clock -port \"clk1\" -clk_type IOSFSB_CLK -clk_max_freq 200M -clk_min_freq 200M\n-port: is for ports at ip boundary.\n-pin: internal pins for ip.\n-clk_type: can be one of IOSFPRICLK, IOSFSBCLK, FUNC_CLK, PLLREF_CLK, XOSC_CLK, ROSC_CLK, RTC_CLK, DFX_CLK, AMBA_PRI_CLK, APB_CLK\n",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 3.327.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (3) Collage",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 3.327.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Define IP Clock Pins along with their properties in the IP build script",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Define IP Clock Pins along with their properties in the IP build script. These properties are defined for all RTL clock pins.\n\t\n\tShould have following command in builder script:\n\t\n\tUsage: collage_create_ip_clock [-port ] [-pin ] [-clk_min_freq 10] -clk_max_freq 10 [-clk_type FUNC_CLK][-master_clock_reference_name ][-master_clock_source_pin ][-reference_clock_name ] [-is_early_clock][-needs_contention_clearning][-factor ] [-is_var_port] [-non_scannable]\n\t\n\tExample: collage_create_ip_clock -port \"clk1\" -clk_type IOSFSB_CLK -clk_max_freq 200M -clk_min_freq 200M\n\t-port: is for ports at ip boundary.\n\t-pin: internal pins for ip.\n\t-clk_type: can be one of IOSFPRICLK, IOSFSBCLK, FUNC_CLK, PLLREF_CLK, XOSC_CLK, ROSC_CLK, RTC_CLK, DFX_CLK, AMBA_PRI_CLK, APB_CLK\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Manual check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 3.327.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 3.327.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Define IP Clock Pins along with their properties in the IP build script",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "3.328.a": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "https://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm\n\n",
          "category": "Collage",
          "description": "Define Interface to clock association in the IP build script on IOSF Primary/Sideband and Clock REQ/ACK Interfaces. Make sure you have following commands in builder script:\ncollage_set_interface_clocks -ifc_inst_name <ifc_inst_name> -clocks \"<architectural_clock_name clock_name\"\nExample: collage_set_interface_clocks -ifc_inst_name port1 -clocks \"SIDE_CLK side_clk\"\nSIDE_CLK is architectural clock name and side_clk is RTL port name on the IP.\nArchitecture clock names:\nIOSF::SB --> SIDE_CLK\nIOSF::Primary --> PRIM_CLK\nCLOCK_REQ_ACK --> CLK\n\n\n\n",
          "logRecords": [],
          "name": "Define Interface to clock association in the IP build script on IOSF Primary/Sideband Power and Clock REQ/ACK Interfaces",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "3.44.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://soco.intel.com/message/5296920#5296920",
          "category": "Collage",
          "description": "CoreKit checked against the RTL to match all pin names and directions. Please make sure corekit is always regenerated every time there is \"ANY\" change in RTL or new IP drop. The following Collage Utility could be used to check this check : compare_corekits.tcl  . IPP to run the builder script at the time of upload and compare to the uploaded / released corekit. Provide compare_corekits report . Details on how to run compare_corekit in the collage user guide in this link: https://soco.intel.com/message/5296920#5296920",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 3.44.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (3) Collage",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 3.44.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: coreKit consistent with the RTL",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: CoreKit checked against the RTL to match all pin names and directions. Please make sure corekit is always regenerated every time there is \"ANY\" change in RTL or new IP drop. The following Collage Utility could be used to check this check : compare_corekits.tcl  . IPP to run the builder script at the time of upload and compare to the uploaded / released corekit. Provide compare_corekits report . Details on how to run compare_corekit in the collage user guide in this link: https://soco.intel.com/message/5296920#5296920",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: manual check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 3.44.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 3.44.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "coreKit consistent with the RTL",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "3.48.a": {
          "algorithm": "Verify the file tools/collage/builder.[alias].tcl exists\nAllow for multiple builder files\nMake sure there are exactly the correct number of files\nIf there are multiple items defined by a single regular expression, use the format:\n<count>:<regExp>\n",
          "attributes": {
            "collateral: collagebldscrfile": ".//tools/collage/build/builder.dfxsecure_plugin.tcl",
            "key: collagebldscrdir": ".//tools/collage/build",
            "key: collagebldscrfile": "builder.dfxsecure_plugin.tcl"
          },
          "background": "https://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "Checks whether collage builder script(s) is (are) provided as collateral",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 3.48.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (3) Collage",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 3.48.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Collage builder script",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Checks whether collage builder script(s) is (are) provided as collateral",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Verify the file tools/collage/builder.[alias].tcl exists\n\tAllow for multiple builder files\n\tMake sure there are exactly the correct number of files\n\tIf there are multiple items defined by a single regular expression, use the format:\n\t<count>:<regExp>\n\t",
              "severity": "INFO"
            }
          ],
          "name": "Collage builder script",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "3.49.a": {
          "algorithm": "Verify the file tools/collage/[alias].build.summary exists\nAllow for multiple summary files\nVerify the exact number of files are found\nIf there are multiple items defined by a single regular expression, use the format:\n<count>:<regExp>\n",
          "attributes": {
            "collateral: collagesumrptfile": ".//tools/collage/10nm/reports/dfxsecure_plugin.build.summary",
            "key: collagedir": ".//tools/collage/10nm/reports/",
            "key: collagesumrptfile": "dfxsecure_plugin.build.summary"
          },
          "background": "SoC team use this as a reference to check the completeness of IP's collage collaterals\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "Checks whether collage build summary(s) is (are) provided as collateral",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 3.49.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (3) Collage",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 3.49.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Collage summary report",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Checks whether collage build summary(s) is (are) provided as collateral",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Verify the file tools/collage/[alias].build.summary exists\n\tAllow for multiple summary files\n\tVerify the exact number of files are found\n\tIf there are multiple items defined by a single regular expression, use the format:\n\t<count>:<regExp>\n\t",
              "severity": "INFO"
            }
          ],
          "name": "Collage summary report",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.50.a": {
          "algorithm": "Verify the file tools/collage/[alias].build.warning exists\nAllow for multiple warning files\nIf there are multiple items defined by a single regular expression, use the format:\n<count>:<regExp>\n",
          "attributes": {
            "collateral: collagewarnrptfile": ".//tools/collage/10nm/reports/dfxsecure_plugin.build.warning",
            "key: collagedir": ".//tools/collage/10nm/reports/",
            "key: collagewarnrptfile": "dfxsecure_plugin.build.warning"
          },
          "background": "SoC team use this as a reference to check the completeness of IP's collage collaterals\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "Checks whether collage build warning(s) is (are) provided as collateral",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 3.50.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (3) Collage",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 3.50.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Collage warning report",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Checks whether collage build warning(s) is (are) provided as collateral",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Verify the file tools/collage/[alias].build.warning exists\n\tAllow for multiple warning files\n\tIf there are multiple items defined by a single regular expression, use the format:\n\t<count>:<regExp>\n\t",
              "severity": "INFO"
            }
          ],
          "name": "Collage warning report",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.a": {
          "algorithm": "Verify collage build.summary is generated with proper reporting of the collage interface name along with IOSF interface version\nVerify existence of InterfaceDefn & InterfaceVer matching string \"IOSF::DFX::IDV\" and \"3.0\" or higher in tools/collage/reports/[alias].build.summary\nFor each matching interface instances, InterfaceLink for the following ports cannot be open (i.e. adhoc):\nFor IDV version 3.0:\nIDVDISABLE\nIDVFREQA\nIDVFREQB\nIDVPULSE\nIDVTCLK\nIDVTCTRL\nIDVTD\nIDVTRES\nFor IDV version 4.0:\nIDVEVENTOUT\nIDVCAPTURE\nIDVUPDATE\nIDVSHIFT\n",
          "attributes": {},
          "background": "Ensure for IDV logic connects to the IOSF IDV standard interface for connections\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "Verify the existence of the IDV instance of the IOSF interface and completes connections to the \"must have ports\"",
          "logRecords": [],
          "name": "Ensure IDV logic connects to the IOSF IDV standard interface",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.b": {
          "algorithm": "Verify the collage build.summary report is generated with the proper reporting of the collage interface name along with IOSF interface version\nVerify using the standard interface by parsing build.summary file for the following message:\nUnder \"-Report : InterfaceInstance\" look for:\nInterfaceDefn : IOSF::DFX::JTAG\nInterfaceVer  : 1.0\nFor each matching interface instances, InterfaceLink for the following ports cannot be open (i.e. adhoc):\nATAP_TDO\nFTAP_TCK\nFTAP_TDI\nFTAP_TMS\nFTAP_TRST_B\n",
          "attributes": {},
          "background": "Ensure for JTAG logic connects to the IOSF JTAG standard interface for connections\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "Ensure for JTAG logic connects to the IOSF JTAG standard interface for connections",
          "logRecords": [],
          "name": "Ensure JTAG logic connects to the IOSF JTAG standard interface",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.c": {
          "algorithm": "Verify the existence of the SCAN instance of the IOSF interface and completes connections to the \"must have ports\"\nVerify existence of InterfaceDefn & InterfaceVer matching string \"IOSF::DFX::SCAN\" and \"2.2\" or higher in tools/collage/reports/[alias].build.summary\nFor atleast one matching interface instance, InterfaceLink for the following ports cannot be open (i.e. adhoc):\nFSCAN_CLKUNGATE\nFSCAN_CLKUNGATE_SYN\nFSCAN_MODE\nFSCAN_SHIFTEN",
          "attributes": {},
          "background": "Ensure for SCAN logic connects to the IOSF SCAN standard interface for connections\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "Verify the existence of the SCAN instance of the IOSF interface and completes connections to the \"must have ports\"",
          "logRecords": [],
          "name": "At least one SCAN interface pins must be mapped to Collage IOSF SCAN standard interface in CoreKit",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.d": {
          "algorithm": "Verify the collage build.summary report is generated with the proper reporting of the collage interface name along with IOSF interface version\nVerify using the standard interfaces by parsing build.summary file for the following message:\nFor \"VISA\" instance: Under \"-Report : InterfaceInstance\" look for:\nInterfaceDefn : IOSF::DFX::VISA\nInterfaceVer : 1.0\nFor \"VISA_CFG\" instance: Under \"-Report : InterfaceInstance\" look for:\nInterfaceDefn : IOSF::DFX::VISA_CFG\nInterfaceVer : 1.0\nVerify the key these ports are NOT open in the \"interface link\" details of the interface instance:\na. VISA\ni. VISA_CLK\nii. VISA_DBG_LANE\nb. VISA_CFG\ni. VISA_FRAME\nii. VISA_SERDATA\niii. VISA_SERSTB",
          "attributes": {},
          "background": "Ensure for VISA logic connects to the IOSF VISA standard interface for connections\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "Verify the existence of the VISA instance of the IOSF interface and completes connections to the \"must have ports\"",
          "logRecords": [],
          "name": "VISA interface pins must be mapped to Collage IOSF VISA standard interface in CoreKit",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.e": {
          "algorithm": "Verify the existence of the ISM instance of the IOSF interface and completes connections to the \"must have ports\"\nVerify existence of InterfaceDefn matches \"IOSF::DFX::ISM\" & InterfaceVer matches \"1.0\" in tools/collage/reports/[alias].build.summary\nFor each matching interface instances, InterfaceLink for the following ports cannot be open (i.e. adhoc):\nJTA_CLKGATE_OVRD\nJTA_FORCE_CLKREQ\nJTA_FORCE_CREDITREQ\nJTA_FORCE_IDLE\nJTA_FORCE_NOTIDLE",
          "attributes": {},
          "background": "ISM interface pins must be mapped to Collage IOSF ISM standard interface in CoreKit\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "Verify the existence of the ISM instance of the IOSF interface and completes connections to the \"must have ports\"",
          "logRecords": [],
          "name": "ISM interface pins must be mapped to Collage IOSF ISM standard interface in CoreKit",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.f": {
          "algorithm": "Verify the collage build.summary report is generated with the proper reporting of the collage interface name along with IOSF interface version\nVerify using the standard interfaces by parsing build.summary file for the following message:\nFor \"MBIST_WTAP\" instance: Under \"-Report : InterfaceInstance\" look for:\nInterfaceDefn : IOSF::DFX::MBIST_WTAP\nInterfaceVer : 2.0\nFor \"MBIST_CTRL\" instance: Under \"-Report : InterfaceInstance\" look for:\nInterfaceDefn : IOSF::DFX::MBIST_CTRL\nInterfaceVer : 2.0\nFor \"cabist_cms_engine\" instance: Under \"-Report: InterfaceInstance\" look for:\nInterfaceDefn : DFX::CABIST::ENGINE\nInterfaceVer: 0.1\nVerify the key these ports are NOT open in the \"interface link\" details of the interface instance:\na. MBIST_WTAP\ni. LV_CaptureWR\nii. LV_EnableWR\niii. LV_SelectWIR\niv. LV_ShiftWR\nv. LV_UpdateWR\nvi. LV_WRCK\nvii. LV_WRSTN\nviii.LV_WSI\nix. LV_WSO\nb. MBIST_CTRL\ni. LV_TM\nc. cabist_cms_engine\nNONE - No port check implemented as per spec",
          "attributes": {},
          "background": "Ensure for DFXSECUREPLUGIN logic connects to the IOSF VISA standard interface for connections\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "Verify the existence of the DFXSECUREPLUGIN instance of the IOSF interface and completes connections to the \"must have ports\"",
          "logRecords": [],
          "name": "MBIST interface pins must be mapped to Collage IOSF MBIST standard interface in CoreKit",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.g": {
          "algorithm": "Verify the existence of the RTDR instance of the IOSF interface and completes connections to the \"must have ports\".\nVerify existence of InterfaceDefn matches \"IOSF::DFX::RTDR_BUSSED_0\" , \"IOSF::DFX::RTDR_CTRL\" & InterfaceVer matches \"1.5\" in tools/collage/reports/[alias].build.summary\nFor each matching \"IOSF::DFX::RTDR_BUSSED_0\" interface instances, InterfaceLink for the following ports cannot be open (i.e. adhoc):\nRTDR_CAPTURE\nRTDR_IRDEC\nRTDR_SHIFT\nRTDR_TDI\nRTDR_TDO\nRTDR_UPDATE\n",
          "attributes": {},
          "background": "RTDR interface pins must be mapped to Collage IOSF RTDR standard interface in Corekit\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm\n\n",
          "category": "Collage",
          "description": "Verify the existence of the RTDR instance of the IOSF interface and completes connections to the \"must have ports\"",
          "logRecords": [],
          "name": "RTDR interface pins must be mapped to Collage IOSF RTDR standard interface in CoreKit",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.h": {
          "algorithm": "Verify the collage build.summary report is generated with the proper reporting of the collage interface name along with IOSF interface version\nVerify using the standard interface by parsing build.summary file for the following message:\nUnder \"-Report : InterfaceInstance\" look for:\nInterfaceDefn : IOSF::DFX::DFXSECURE_PLUGIN\nInterfaceVer : 1.0\nFor each matching interface instances, InterfaceLink for the following ports cannot be open (i.e. adhoc):\nDFX_SECURE_POLICY\nEARLYBOOT_EXIT\nPOLICY_UPDATE",
          "attributes": {
            "collateral: collagesumrptfile": ".//tools/collage/10nm/reports/dfxsecure_plugin.build.summary",
            "key: collagedir": ".//tools/collage/10nm/reports/",
            "key: collagesumrptfile": "dfxsecure_plugin.build.summary"
          },
          "background": "Ensure for DFXSECUREPLUGIN logic connects to the IOSF VISA standard interface for connections\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "Verify the existence of the DFXSECUREPLUGIN instance of the IOSF interface and completes connections to the \"must have ports\"",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 3.51.h ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (3) Collage",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 3.51.h",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: DFXSECUREPLUGIN interface pins must be mapped to Collage IOSF DFXSECUREPLUGIN standard interface in CoreKit",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Verify the existence of the DFXSECUREPLUGIN instance of the IOSF interface and completes connections to the \"must have ports\"",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Verify the collage build.summary report is generated with the proper reporting of the collage interface name along with IOSF interface version\n\tVerify using the standard interface by parsing build.summary file for the following message:\n\tUnder \"-Report : InterfaceInstance\" look for:\n\tInterfaceDefn : IOSF::DFX::DFXSECURE_PLUGIN\n\tInterfaceVer : 1.0\n\tFor each matching interface instances, InterfaceLink for the following ports cannot be open (i.e. adhoc):\n\tDFX_SECURE_POLICY\n\tEARLYBOOT_EXIT\n\tPOLICY_UPDATE",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Running rule 3.51.h",
              "severity": "INFO"
            },
            {
              "file": ".//tools/collage/10nm/reports/dfxsecure_plugin.build.summary",
              "line": "",
              "msg": "Interface Definition IOSF::DFX::DFXSECURE_PLUGIN found for the interface iosf_dfx_dfxsecure_plugin",
              "severity": "INFO"
            },
            {
              "file": ".//tools/collage/10nm/reports/dfxsecure_plugin.build.summary",
              "line": "",
              "msg": "For the interface iosf_dfx_dfxsecure_plugin with interface definition IOSF::DFX::DFXSECURE_PLUGIN , interface Version is 1.0",
              "severity": "INFO"
            },
            {
              "file": ".//tools/collage/10nm/reports/dfxsecure_plugin.build.summary",
              "line": "",
              "msg": "No Adhoc connections found for the interface iosf_dfx_dfxsecure_plugin",
              "severity": "INFO"
            }
          ],
          "name": "DFXSECUREPLUGIN interface pins must be mapped to Collage IOSF DFXSECUREPLUGIN standard interface in CoreKit",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.i": {
          "algorithm": "Verify the collage build.summary report is generated with the proper reporting of the collage interface name along with IOSF interface version\nVerify using the standard interface by parsing build.summary file for the following messages:\na. Under \"-Report : InterfaceInstance\" look for these instances:\n\ni. IOSF Primary\n1. InterfaceDefn : IOSF::Primary\n2. InterfaceVer : 1.1.prec or 1.2\nNo open port check\n\nii. IOSF Primary Power\n1. InterfaceDefn : IOSF::Primary::Power\n2. InterfaceVer : 1.1.prec or 1.2\nVerify that NO ports are open for these interfaces under the \"interface link\" details of the interface instance\n\niii. IOSF Primary Clock\n1. InterfaceDefn : IOSF::Primary::Clock\n2. InterfaceVer : 1.1.prec or 1.2\nVerify that NO ports are open for these interfaces under the \"interface link\" details of the interface instance\n\niv. IOSF Primary Reset\n1. InterfaceDefn : IOSF::Primary::Reset\n2. InterfaceVer : 1.1.prec or 1.2\nVerify that PRIM_RST_B port is connected under the \"interface link\" details of this interface instance\n\nv. IOSF Primary Pok\n1. InterfaceDefn : IOSF::Primary::Pok\n2. InterfaceVer : 1.1.prec or 1.2\nVerify that NO ports are open for these interfaces under the \"interface link\" details of the interface instance",
          "attributes": {},
          "background": "To reduce amount of adhoc connections\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "IOSF Primary pins must be mapped to the Collage IOSF Primary standard interfaces in the Corekit: IOSF Primary, IOSF Primary Power, IOSF Primary Clock, IOSF Primary Reset, IOSF Primary Pok",
          "logRecords": [],
          "name": "IOSF Primary pins must be mapped to Collage IOSF Primary standard interfaces in the Corekit",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.j": {
          "algorithm": "Verify the collage build.summary report is generated with the proper reporting of the collage interface name along with IOSF interface version\nVerify using the standard interface by parsing build.summary file for the following messages:\na. Under \"-Report : InterfaceInstance\" look for these instances:\ni. IOSF Primary\n1. InterfaceDefn : IOSF::SB\n2. InterfaceVer : 1.1.prec or 1.2\nii. IOSF Primary Power\n1. InterfaceDefn : IOSF::SB::Power\n2. InterfaceVer : 1.1.prec or 1.2\niii. IOSF Primary Clock\n1. InterfaceDefn : IOSF::SB::Clock\n2. InterfaceVer : 1.1.prec or 1.2\niv. IOSF Primary Reset\n1. InterfaceDefn : IOSF::SB::Reset\n2. InterfaceVer : 1.1.prec or 1.2\nv. IOSF Primary Pok (OPTIONAL)\n1. InterfaceDefn : IOSF::SB::Pok\n2. InterfaceVer : 1.1.prec or 1.2\nFor all of these interfaces excluding IOSF::SB, verify that NO ports are open under the \"interface link\" details of the interface instance",
          "attributes": {},
          "background": "To reduce amount of adhoc connections\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "IOSF Sideband pins must be mapped to the Collage IOSF Sideband standard interfaces in the Corekit: IOSF Sideband, IOSF Sideband Power, IOSF Sideband Clock, IOSF Sideband Reset, IOSF Sideband Pok",
          "logRecords": [],
          "name": "IOSF Sideband pins must be mapped to Collage IOSF Sideband standard interfaces in the Corekit",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.k": {
          "algorithm": "Verify the collage build.summary report is generated with the proper reporting of the collage interface name along with IOSF interface version\nVerify using the standard interfaces by parsing build.summary file for the following message:\nUnder \"-Report : InterfaceInstance\" look for:\nInterfaceDefn : PND2::IDI or CONV::IDI\nNO InterfaceVer Check",
          "attributes": {},
          "background": "To reduce the amount of adhoc connections.\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm",
          "category": "Collage",
          "description": "IDI pins must be mapped to Collage IDI standard interface in the Corekit for IP not using IOSF Primary.",
          "logRecords": [],
          "name": "IDI pins must be mapped to Collage IDI standard interface in the Corekit",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "3.51.l": {
          "algorithm": "Verify the collage build.summary report is generated from 2.1.p12 version of collage with the proper reporting of the collage interface name along with IOSF interface version\nVerify using the standard interfaces by parsing build.summary file for the following message:\nFor \"Power_Gating\" instance: Under \"-Report : InterfaceInstance\" look for:\nInterfaceDefn : Power_Gating\nInterfaceVer : 1.0\nFor \"Fabric_Power_Gating\" instance: Under \"-Report : InterfaceInstance\" look for:\nInterfaceDefn : Fabric_Power_Gating\nInterfaceVer : 1.0\n\nVerify the key these ports are NOT open in the \"interface link\" details of the interface instance:\na. Power_Gating\ni. PG_ACK_B\nii. PG_REQ_B\nb. Fabric_Power_Gating\n<waiting for spec>\n",
          "attributes": {},
          "background": "Ensure the PGCB connection is using the Collage Standard Interface for Power_Gating.\n\nhttps://ifs.intel.com/irj/go/km/docs/documents/Intel%20Content/Solutions/Portal/TMG%20Storefront/SOC/FrontEnd/RTL-Int.htm\n\n",
          "category": "Collage",
          "description": "Verify the existence of the PGCB connection is using the Collage Standard Interface for Power_Gating or Fabric_Power_Gating.",
          "logRecords": [],
          "name": "PGCB interface pins must be mapped to Collage Power_Gating standard interface in CoreKit",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "4.167.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check",
          "category": "DFt",
          "description": "Generated clocks should be avaiable as top level pins for DFT / Scan implementation",
          "logRecords": [],
          "name": "[SCAN] - Internally derived clocks pulled to top level with IOSF (Pre_clk, Post_clk) compliant naming",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "4.265.a": {
          "algorithm": "Linting tool aligned check:\n1. Verify the ScanAudit violations xml exist. This file is generated by ScanAudit linting tool available in HDK 1.2.0.\n2. Verify the violation Id 10001, 10002 and 10003 doesn't exist in the ScanAudit violations xml file.\n\n",
          "attributes": {},
          "background": "SoC team can reuse this for their Spyglass run.\n\nhttps://intelpedia.intel.com/SWAT_Training#ISAF-SpyGlass_DFT\n\nScanAudit Linting Engine details:\nhttps://dtspedia.intel.com/ScanAudit",
          "category": "DFt",
          "description": "Checks whether at least one *.swl,*.prj and *.sgdc Spyglass DFT files are provided. The directories spyglass_spysch and .SG_SaveRestoreDB are excluded from the file search.\nwaiver.swl must exist to Pass this rule (IPP can generate empty file if tool is not configured to create this file)",
          "logRecords": [],
          "name": "[SCAN] Spyglass DFT waiver files must exist",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "4.265.b": {
          "algorithm": "Linting tool aligned check:\n1. Verify the ScanAudit violations xml exist. This file is generated by ScanAudit linting tool available in HDK 1.2.0.\n2. Verify the violation Id 10004, 10005 and 10006 doesn't exist in the ScanAudit violations xml file.\n\n",
          "attributes": {},
          "background": "SoC team can use this as a reference whether the waivers provided by IP's are good and complete\n\nhttps://intelpedia.intel.com/SWAT_Training#ISAF-SpyGlass_DFT\n\nScanAudit Linting Engine details:\nhttps://dtspedia.intel.com/ScanAudit",
          "category": "DFt",
          "description": "Checks whether moresimple.rpt and spyglass.log Spyglass DFT run results or reports are provided.\nsummary.rpt is an optional file.\nSearch path can be overridden by key spyglassdftdir.\nThe directories spyglass_spysch and .SG_SaveRestoreDB are excluded from the file search.\nACE-Spyglass: Generates both \"summary.rpt\" and \"moresimple.rpt\" by default.\nSpyglass Standalone: Users may have their own scripts that generate only default \"moresimple.rpt\" file.\nThe RTL script released for Standalone under /p/com/ area actually has both \"summary.rpt\" and \"moresimple.rpt\" generated. The latest one is at:\n/p/com/flows/spyglass_methodology/1.1.0/scripts/run_spyglass_rtl.pl\nOptionally, if IPP decide to stay with their own script, then they need to modify their scripts, or their .prj project file to generate both summary and moresimple reports:\nset_option report {moresimple summary}",
          "logRecords": [],
          "name": "[SCAN] Spyglass DFT report files must exist",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "4.265.c": {
          "algorithm": "Linting tool aligned check:\n1. Verify the ScanAudit violations xml exist. This file is generated by ScanAudit linting tool available in HDK 1.2.0.\n2. Verify the violation Id 10007 doesn't exist in the ScanAudit violations xml file.\n\n",
          "attributes": {},
          "background": "If the waiver file name from several IP's collide, only one of them will be active, and all others will be ignored at SoC level.\nUniquifying them with [ip]_ prefix is recommended\n\nhttps://intelpedia.intel.com/SWAT_Training#ISAF-SpyGlass_DFT\n\nScanAudit Linting Engine details:\nhttps://dtspedia.intel.com/ScanAudit",
          "category": "DFt",
          "description": "Spyglass waiver file name needs to be unique to be reusable as it is at SoC level\nIPP is recommended to use Spyglass GUI to generate waiver file(S) including the name (uniquified)\nThe directories spyglass_spysch and .SG_SaveRestoreDB are excluded from the waiver file search.",
          "logRecords": [],
          "name": "[SCAN] Spyglass DFT waiver files must exist and are uniquified with [ip]_ prefix",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "4.265.d": {
          "algorithm": "Linting tool aligned check:\n1. Verify the ScanAudit violations xml exist. This file is generated by ScanAudit linting tool available in HDK 1.2.0.\n2. Verify the violation Id 10008 and 10009 doesn't exist in the ScanAudit violations xml file.\n\n",
          "attributes": {},
          "background": "SoC team can use this as a reference whether the waivers provided by IP's are good and complete\n\nhttps://intelpedia.intel.com/SWAT_Training#ISAF-SpyGlass_DFT\n\nScanAudit Linting Engine details:\nhttps://dtspedia.intel.com/ScanAudit",
          "category": "DFt",
          "description": "Checks whether Spyglass run results or reports are provided and are clean.\nThis rule checks: moresimple.rpt must exist under tools/spyglassdft/ or tools/spyglassdft/reports/. Search path can be overridden by key spyglassdftdir.\nsummary.rpt is an optional file.\nThe directories spyglass_spysch and .SG_SaveRestoreDB are excluded from the file search.\nAlso, these reports must be clean meaning these reports must not contain: Error or Fatal or Syntax",
          "logRecords": [],
          "name": "[SCAN] Spyglass DFT report files must exist and are clean",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "4.315.a": {
          "algorithm": "The IP info file should be checked into $MODEL_ROOT/tools/spyglassdft/<block>.ip_info or $MODEL_ROOT/tools/spyglassdft/<facet>/<block>.ip_info.  There must be one and only one IP info file per unit/unit configuration",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check\nSee IP_info_Use_Model video in the \"ISAF SpyGlass DFT Specific Documentation & References\" section of the above link.",
          "category": "DFt",
          "description": "The purpose of the ip_info file is to provide a key set of scan information and BKMs for an IP in a standardized format. The ip_info file is a text file that provides all the information needed to properly constrain an IP block for scan DRC and insertion. It is the single source file that is translated to create the scan constraints for all tools used in the ISAF and SAGE flows, which helps to provide consistency of results. This includes SpyGlass, DC shell, and Fastscan/TestKompress. The input constraint files for these tools are translated directly from the ip_info file. The ip_info file is a requirement and each IP must have one (and only one) ip_info file. It is checked into the repository along with the corresponding RTL.The IP Info file will be generated by the sgdft package step of the ISAF spyglass dft flow.\nThe IP info file should be checked into \"$MODEL_ROOT/tools/spyglassdft/<block>.ip_info\" or \"$MODEL_ROOT/tools/spyglassdft/<facet>/<block>.ip_info:..",
          "logRecords": [],
          "name": "IP Info file provided (generated with use of ISAF flow)",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "4.323.a": {
          "algorithm": "checks  synthesis log for an INFO-MSG containing \"scan configuration file\" to determine the configuration file name.\nchecks the configuration tcl file found above for \"Created by\" and \"ISAF flow\".\nSee scanaudit lintra rule 10021",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check\nSee the scan insertion forum for questions\nhttps://sharepoint.amr.ith.intel.com/sites/SoCDFX/Lists/Scan%20Insertion%20Forum/AllItems.aspx",
          "category": "DFt",
          "description": "Checks that the scan insertion process is based on a scan configuration generated by ISAF (Spyglass DFT) flow. This helps consistency between Spyglass DFT, Insertion rates in DC and SAGE (ATPG) results.",
          "logRecords": [],
          "name": "[SCAN] scan insertion (DC) based on scan config",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "4.325.a": {
          "algorithm": "1. Verify that Lintra/Spyglass Lint violations xml file exists.\n2. Verify the violation IDs ['54005', '54006', '54007', '54009'] do not exist in the violations xml file.\n3. Locate the Lintra rules report and verify that rule IDs ['54005', '54006', '54007', '54009'] are active.",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check\n\nArrayDftAudit Linting Engine details:\nhttps://dtspedia.intel.com/ArrayDftAudit\n\nIf IP is using legacy flow (non-HDK 1.2.0), then migrate this rule to Manual and self grade. Automation is available only for HDK ver 1.2.0 and later",
          "category": "DFt",
          "description": "[Array] BIST_WRAPPER (CO-LOCATION_WRAPPER) must contain all required Array DFx Chassis input/output signals and interface must be connected all the way to IP TOP",
          "logRecords": [],
          "name": "[Array] BIST_WRAPPER (CO-LOCATION_WRAPPER) must contain all required Array DFx Chassis input/output signals and interface must be connected all the way to IP TOP",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "4.326.a": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check",
          "category": "DFt",
          "description": "[Array] If IP has Memories, MBIST_WTAP/MBIST_CTRL collage standard interface must be used",
          "logRecords": [],
          "name": "[Array] If IP has Memories, MBIST_WTAP/MBIST_CTRL collage standard interface must be used",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.337.a": {
          "algorithm": "1. Verify the ScanAudit violations xml exist. This file is generated by ScanAudit linting tool available in HDK 1.2.0.\n",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check\n\nScanAudit Linting Engine details:\nhttps://dtspedia.intel.com/ScanAudit",
          "category": "DFt",
          "description": "ScanAudit checks IPDS rules pertaining to ISAF (Spyglass), RDTSyn (Scan insertion), SAGE (ATPG)for correctness and PLC compliance. Checks include compliance on 4.57a, 4.65a/b, 4.67, 4.265 and 4.315.",
          "logRecords": [],
          "name": "Scan Audit must be run and is clean",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "4.338.a": {
          "algorithm": "1. Verify the ArrayDftAudit violations xml exist. This file is generated by ArrayDftAudit linting tool available in HDK 1.2.0.\n",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check\n\nArrayDftAudit Linting Engine details:\nhttps://dtspedia.intel.com/ArrayDftAudit",
          "category": "DFt",
          "description": "ArrayDftAudit must be run",
          "logRecords": [],
          "name": "Array DFT Audit must be run and is clean",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "4.57.a": {
          "algorithm": "1.Check under <IP_ROOT>/tools/atpg\na. Or <IP_ROOT>/tools/ATPG\n2.Find every 'stuck' report\na. /.*stuck.*.rpt/\nb. /.*stuck.*.report/\nc. /*.stuck.*.*/\n3.Make sure each file is not zero sized (they can be gzipped)\nNote: Searching recursively under atpg directory\nNOTE: Scan Audit rule 4.337 does RTL1.0 coverage check.",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check\nhttp://goto.intel.com/sage for documentation\nhttp://goto.intel.com/sage/video for training videos\nhttp://goto/scan click on \"coverage Requirements\" tab for current coverage ramp plan",
          "category": "DFt",
          "description": "[SCAN] ATPG run and is clean\nIdeally accomplish this within HDK using the SAGE flow.\nRTL 1.0 requirement is 99% stuck-at and 95% at-speed (99/95). Old (97/85)\nThis goal is essential to maintaining our outgoing product quality on 14nm and beyond. Past test quality is no longer sufficient to screen current defect density and systematic defects levels from our customers.\nLine of sight to goals is needed at RTL0.8, goal to be met at RTL1.0 close.",
          "logRecords": [],
          "name": "[SCAN] SAGE (ATPG) run and meets PLC test coverage milestone targets",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "4.61.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "Resets must be overiden by Scan control for correct DFT test execution , Spyglass DFT rule may added.\"\nSee the \"resets\" section of the \"Scan Design Guide for IP's\" at this link https://wiki.ith.intel.com/display/SoCSCAN/Home#Navdeck-IP\n\nhttps://intelpedia.intel.com/SoC_RTL_DFT_Check",
          "category": "DFt",
          "description": "Check if all resets are bypass by a scan control. \nIt is OK if the reset used by the IP is also bypassed\n\nSpyglass DFT check development in progress, expected mid 2018.",
          "logRecords": [],
          "name": "[SCAN] - Internal component (ctech) MUX added for scan control of all resets and mux output must be active low reset",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.62.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check\nBSDL file checker http://orstdewebdev01.amr.corp.intel.com/BSDLChecker/BsdlChecker.aspx",
          "category": "DFt",
          "description": "BSDL file must be checked via the BSDL Checker(link below)and included in each IP Drop or Hotfix.\nStandard location phy/bsdl directory.\n\nVerify that File delivered",
          "logRecords": [],
          "name": "[BSCAN] - DFT BSDL file for boundary scan delivered",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.63.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check\nhttp://dft.intel.com\n",
          "category": "DFt",
          "description": "This is DFV requirement : Example trigger sequences(s) or test(s) should exist in Integration Guide. SoC will leverage this programming information in the IP-level test/sequence to exercise top level connectivity\nSPF or OVM formats are supported. Should be compatible to IP level environment.",
          "logRecords": [],
          "name": "[TAP] - Sample trigger SEQUENCE(s)/TEST(s) delivered (for IPs connected to CTBs)",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.65.a": {
          "algorithm": "1. Verify the ScanAudit violations xml exist. This file is generated by ScanAudit linting tool available in HDK 1.2.0.\n2. Verify the violation Id 10010 doesn't exist in the ScanAudit violations xml file.\n\n",
          "attributes": {},
          "background": "ScanAudit Linting Engine details:\nhttps://dtspedia.intel.com/ScanAudit",
          "category": "DFt",
          "description": "If SCAN is inserted [G_DESIGN_NAME].final.dft_coverage or [G_DESIGN_NAME].syn_final.dft_coverage should be available in reports folder.",
          "logRecords": [],
          "name": "[SCAN] - Quality: Insertion rate reported by DC is included in reports",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "4.65.b": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check",
          "category": "DFt",
          "description": "Scan coverage reported by SAGE (ATPG) meets HAS documented requirement",
          "logRecords": [],
          "name": "[SCAN] - Insertion rate meets PLC documented requirement",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "4.66.a": {
          "algorithm": "Follows\n1.\tFind the netlist <IP_ROOT>/tools/syn\na.\tLook recursively for the netlist:\ni.\t<block>.syn_final.vg\nii.\tCan be gzipped\n2.\tCheck for the existence of this line:\na.\t/^\\s*module\\s+\\S*dfx.*secure.*plugin/i\n3.\tMust contain this line or fail\n",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check",
          "category": "DFt",
          "description": "Collage check to ensure in build contains interface and check the netlist for module",
          "logRecords": [],
          "name": "[SECURITY] Secure plugin instantiated as part of the IP deliverable",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "4.67.a": {
          "algorithm": "Linting tool aligned check:\n1. Verify the ScanAudit violations xml exist. This file is generated by ScanAudit linting tool available in HDK 1.2.0.\n2. Verify the violation Id 10011 doesn't exist in the ScanAudit violations xml file.\n\n",
          "attributes": {},
          "background": "ScanAudit Linting Engine details:\nhttps://dtspedia.intel.com/ScanAudit",
          "category": "DFt",
          "description": "If SCAN insertion is supported ,  do the scan insertion using <IP_top>_scan_config.tcl",
          "logRecords": [],
          "name": "[SCAN] - Standard scan config file used",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "4.68.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check",
          "category": "DFt",
          "description": "Verify instances exist.",
          "logRecords": [],
          "name": "sTAPs instantiated",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.68.b": {
          "algorithm": "Algorithm for manual rule",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check\nhttp://dft.intel.com",
          "category": "DFt",
          "description": "An IP-block may present up to two TAP ports on its interface. If a greater number of TAPs is required the IP must implement a tap network",
          "logRecords": [],
          "name": "IP has no more than 2 STAPs unless it implements a tap sub-network",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.68.d": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "Self-explanatory; Applies to both Tap and TAP Link.\nPrivate TDR require proper security classification IF IP has sub-network it must provide security classification.\nhttp://dft.intel.com",
          "category": "DFt",
          "description": "IP must  apply the proper security classification to the user defined opcodes for TAP.\n",
          "logRecords": [],
          "name": "IP TAP opcode security classification",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.68.f": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "Reset needs to happen asynchronously without any clock.  Should not be qualified with any clock\nApplies to Tap and Tap link.",
          "category": "DFt",
          "description": "IP does not synchronize the TAP resets namely fdfx_powergood and ftap_trst_b",
          "logRecords": [],
          "name": "IP does not synchronize the TAP (FSM) resets (Tap registers can be reset)",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.68.g": {
          "algorithm": "",
          "attributes": {},
          "background": "Reserved for BSCAN as per TAP HAS (JTAG Spec)",
          "category": "DFt",
          "description": "User defined opcodes shall not be between 0x00 to 0x2F\nSOC TAP HAS reserves this range of opcodes for commonly used registers. (Boundary scan, Hierarch control, etc)",
          "logRecords": [],
          "name": "User defined opcodes shall not be between 0x00 to 0x2F, or an opcode of all 1\"s (ex oxff for 8 bit IR)",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.68.h": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "As per TAP HAS",
          "category": "DFt",
          "description": "Opcode made up of all 1s shall decode to BYPASS or not be defined explicitly for any instruction",
          "logRecords": [],
          "name": "Opcode made up of all 1s shall decode to BYPASS",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.69.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check",
          "category": "DFt",
          "description": "IDCODE exist as input to the design. IDCODE of this IP will be given by the SoC",
          "logRecords": [],
          "name": "[TAP] The TAP slvidcode 32-bit bus must be brought out and correctly defined at IP interface",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.70.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check",
          "category": "DFt",
          "description": "Tests enabled to read slvidcode of all taps. Tests for read/write operations  to all supported Tap registers. These tests are likely already part of IP test suite.",
          "logRecords": [],
          "name": "[TAP] Validate TAP integration by a test for reading Slvidcode of TAP",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.71.a": {
          "algorithm": "manual check",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_RTL_DFT_Check",
          "category": "DFt",
          "description": "All TAP IR/DR registers are captured in SystemRDL . The file is provided . Mark as pass after reviewing IP HAS and DfX documentation and verify that all registers are captured.\nIf IP contains more than one TAP, then one RDL file per tap and one file which specifies the connectivity shall be provided.",
          "logRecords": [],
          "name": "TAP IR/DR Information documented in System RDL",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.71.b": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "Self-explanatory",
          "category": "DFt",
          "description": "TAP system RDL includes all IR/DR information and instance name",
          "logRecords": [],
          "name": "RDL includes IR/DR information and instance name",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "4.90.a": {
          "algorithm": "1. Find integration guide\n     a.\tThis is already a check in ZQA use that same algorithm (index 83)\n2. Parse the integration guide\n3. Under section 7 of the integration guide\n     a.\tBetween section 7 Physical Integration and section 8\n       i. There should be content that is not white-space",
          "attributes": {},
          "background": "Enable integration into SoC by providing integration details of arrays\n\nhttps://sharepoint.amr.ith.intel.com/sites/SourceDocs/DevCorn/BKMs/Forms/AllItems.aspx?RootFolder=%2Fsites%2FSourceDocs%2FDevCorn%2FBKMs%2FRelease%20BKMs&FolderCTID=0x0120000F195D69EEC364409622FA27C742B737&View=%7bA26A6EC1-349A-4E4D-8336-E1559A8D8F5A%7d",
          "category": "DFt",
          "description": "Reads integration guide and ensures section 7 \"Physical Integration\" has documentation on TAP",
          "logRecords": [],
          "name": "[Array] Provide following array details for IP: -Array type and # of instances -Functional usage of array (how many bits are used) -Highest functional clock freq of arrays -Array floorplan details -Array security requirements -IP power draw limitations for array testing",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "5.304.a": {
          "algorithm": "TBD",
          "attributes": {},
          "background": "https://intelpedia.intel.com/SoC_Low_Power_Design",
          "category": "Documentation",
          "description": "Check Integration Guide for connections of power enable chain, i.e., the physical topology guidelines of connections of power enables between different HIP ( RF/ Analog  / Memories)\n\nIt has to be documented in the Power HAS and the Integration Guide.",
          "logRecords": [],
          "name": "Any requirements for EBB : RF/ROM/SRAM power enable connections are documented in Integration Guide.",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "5.416.a": {
          "algorithm": "The IP and SoC must schedule a MAS review prior to the final IP drop (RTL1p0 for SIP, PROD for HIP).",
          "attributes": {},
          "background": "It is common to have an IP delivery that the SoC is not aware of all the implications of decisions made during IP development.  A MAS review provides the opportunity to understand the IP implementation.",
          "category": "Documentation",
          "description": "The IP MAS must be reviewed with the IP design team and the SoC (the customer) to verify all the necessary information is both available and understood.  It also provides a forum to discuss accuracy and completeness.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 5.416.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (5) Documentation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 5.416.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Complete comprehensive MAS review",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: The IP MAS must be reviewed with the IP design team and the SoC (the customer) to verify all the necessary information is both available and understood.  It also provides a forum to discuss accuracy and completeness.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: The IP and SoC must schedule a MAS review prior to the final IP drop (RTL1p0 for SIP, PROD for HIP).",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 5.416.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 5.416.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Complete comprehensive MAS review",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "5.419.a": {
          "algorithm": "Create the IP META file using http://ipmetadata.amr.corp.intel.com/.\n\nThis file can then be provided with the IP, and available via http://ipmetadata.amr.corp.intel.com/#/reference_List",
          "attributes": {},
          "background": "An SoC must understand the IOSF environment (ports, timing, etc.) that an IP is using in order to support clean integration.  It also provides information that affects the SoC design.",
          "category": "Documentation",
          "description": "In order to document the IOSF information for an IP (Description, Parameters, Req Signals, Cmd Signals, etc.), a json file must be generated to capture this information in an executable form.  This provides a single document that can be referenced to understand the IP's IOSF environment.",
          "logRecords": [],
          "name": "IP META files delivered to support configuration for fabric: http://ipmetadata.amr.corp.intel.com/",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "5.420.a": {
          "algorithm": "Create an IP specific metadata file from GPIO Metadata Template download link:\nhttp://goto.intel.com/GPIOMetadataTem\n \nExample of Metadata template \nhttp://goto.intel.com/GPIOMetadataTemEx",
          "attributes": {},
          "background": "Metadata describes the native IP GPIO function pins information such as function name, direction, de-select value, electrical control signals, such as termination and etc.  \n\nUse metadata to reduce manual configuration process -> reduce human errors.  Also reduces integration manual port mapping -> improve integration TPT and reduce integration bugs.",
          "category": "Documentation",
          "description": "To reduce manual entry and avoid errors, a GPIO metadata file is used to capture all GPIO information.",
          "logRecords": [],
          "name": "IP META files delivered to support configuration for GPIO: http://goto.intel.com/GPIOMetadataTem",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "5.79.a": {
          "algorithm": "Manual Check",
          "attributes": {},
          "background": "Ensure TAP is documented to enable quick integration into SoC TAP network\n\nIntegration Guide template is found here:\nhttps://sharepoint.amr.ith.intel.com/sites/SourceDocs/Templates/Forms/AllItems.aspx\n",
          "category": "Documentation",
          "description": "Reads Integration Guide and ensures Chapter 8 \"Integration Test Plan\" contains documentation on TAP.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 5.79.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (5) Documentation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 5.79.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Detailed flow description for TAP usage model testing related to IP that cannot be validated at IP level and needs SoC-level testing ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Reads Integration Guide and ensures Chapter 8 \"Integration Test Plan\" contains documentation on TAP.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Manual Check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 5.79.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 5.79.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Detailed flow description for TAP usage model testing related to IP that cannot be validated at IP level and needs SoC-level testing ",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "5.81.a": {
          "algorithm": "read pbj.txt from [docdir]\npbj.txt indicates if HAS is missing or incomplete.\n",
          "attributes": {
            "collateral: pbj.txt": ".//doc/pbj.txt",
            "key: docdir": ".//doc"
          },
          "background": "Templates are found here:\nhttps://sharepoint.amr.ith.intel.com/sites/SourceDocs/Templates/Forms/AllItems.aspx\n\n",
          "category": "Documentation",
          "description": "Reads the pbj.txt file and examines HAS status.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 5.81.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (5) Documentation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 5.81.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: HAS delivered with next milestone content, follows template",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Reads the pbj.txt file and examines HAS status.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: read pbj.txt from [docdir]\n\tpbj.txt indicates if HAS is missing or incomplete.\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "INFO - Ensure HAS source file follows the standard template ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Requirement - IP HAS source file must exist in central repository",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Requirement - Compare the major headings ",
              "severity": "INFO"
            },
            {
              "file": ".//doc/pbj.txt",
              "line": "",
              "msg": "Skipping the check as the team does not have any Specs QA support",
              "severity": "WARNING"
            }
          ],
          "name": "HAS delivered with next milestone content, follows template",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "5.83.a": {
          "algorithm": "read pbj.txt from [docdir]\npbj.txt indicates if Integration Guide is missing or incomplete.\n",
          "attributes": {
            "collateral: pbj.txt": ".//doc/pbj.txt",
            "key: docdir": ".//doc"
          },
          "background": "Ensure the Integration Guide template has been followed\n\nhttps://sharepoint.amr.ith.intel.com/sites/SourceDocs/Templates",
          "category": "Documentation",
          "description": "Reads the pbj.txt file and examines Integration Guide status",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 5.83.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (5) Documentation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 5.83.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Integration Guide delivered, follows template",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Reads the pbj.txt file and examines Integration Guide status",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: read pbj.txt from [docdir]\n\tpbj.txt indicates if Integration Guide is missing or incomplete.\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "INFO - Ensure integrationGuide source file follows the template given",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Requirement -IP integrationGuide source file must exist in PDF format under doc folder",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Requirement -Compare the major headings from sections 1-8",
              "severity": "INFO"
            },
            {
              "file": ".//doc/pbj.txt",
              "line": "",
              "msg": "Skipping the check as the team does not have any Specs QA support",
              "severity": "WARNING"
            }
          ],
          "name": "Integration Guide delivered, follows template",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "5.83.b": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "Self-explanatory",
          "category": "Documentation",
          "description": "IP to document any specific consideration regarding TAP integration at SoC level in IP Integration Guide.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 5.83.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (5) Documentation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 5.83.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: TAP integration special considerations documented in Integration Guide",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: IP to document any specific consideration regarding TAP integration at SoC level in IP Integration Guide.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Manual check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 5.83.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 5.83.b pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "TAP integration special considerations documented in Integration Guide",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "5.86.a": {
          "algorithm": "read pbj.txt from [docdir]\npbj.txt indicates if pbj.txt is valid.\n",
          "attributes": {},
          "background": "The documentation process is defined by Susann Flowers.\n",
          "category": "Documentation",
          "description": "Reads the pbj.txt file and examines indicators for internal consistency.",
          "logRecords": [],
          "name": "Must use the required documentation process",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "5.88.a": {
          "algorithm": "read pbj.txt from [docdir]\npbj.txt indicates if Product Brief is missing or incomplete.\n",
          "attributes": {
            "collateral: pbj.txt": ".//doc/pbj.txt",
            "key: docdir": ".//doc"
          },
          "background": "Product Brief template is found here:\n\nhttps://sharepoint.amr.ith.intel.com/sites/SourceDocs/Templates/Forms/AllItems.aspx\n",
          "category": "Documentation",
          "description": "Reads the pbj.txt file and examines Product Brief status.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 5.88.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (5) Documentation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 5.88.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Product Brief delivered, follows template",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Reads the pbj.txt file and examines Product Brief status.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: read pbj.txt from [docdir]\n\tpbj.txt indicates if Product Brief is missing or incomplete.\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Ensure Product Brief follows the standard template",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "IP Product Brief source file must exist in central repository",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Compare the major headings",
              "severity": "INFO"
            },
            {
              "file": ".//doc/pbj.txt",
              "line": "",
              "msg": "Skipping the check as the team does not have any Specs QA support",
              "severity": "WARNING"
            }
          ],
          "name": "Product Brief delivered, follows template",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "5.91.a": {
          "algorithm": "Manual Check",
          "attributes": {},
          "background": "The documents are defined by Susann Flowers.\n",
          "category": "Documentation",
          "description": "The Release Notes document must exist for all releases\nThis file must exist in the correct directory\nThis file must use the correct naming convention\nThis file must be of type PDF\nThis file must have sufficient size",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 5.91.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (5) Documentation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 5.91.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Release notes exist",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: The Release Notes document must exist for all releases\n\tThis file must exist in the correct directory\n\tThis file must use the correct naming convention\n\tThis file must be of type PDF\n\tThis file must have sufficient size",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Manual Check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 5.91.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 5.91.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Release notes exist",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "5.93.a": {
          "algorithm": "Manual Check",
          "attributes": {},
          "background": "See template area in SharePoint for an optional Excel spreadsheet signal list template:\n\nhttps://sharepoint.amr.ith.intel.com/sites/SourceDocs/Templates/Forms/AllItems.aspx\n",
          "category": "Documentation",
          "description": "Mark as passed post review of port list for top level of IP. List delivered as part of Integration Guide, HAS, or as a separate spreadsheet.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 5.93.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (5) Documentation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 5.93.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Top level port list complete",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Mark as passed post review of port list for top level of IP. List delivered as part of Integration Guide, HAS, or as a separate spreadsheet.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Manual Check",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 5.93.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 5.93.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Top level port list complete",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "5.94.a": {
          "algorithm": "read pbj.txt from [docdir]\npbj.txt indicates if Verification Plan is missing or incomplete.\n",
          "attributes": {
            "collateral: pbj.txt": ".//doc/pbj.txt",
            "key: docdir": ".//doc"
          },
          "background": "Ensure the Verification Plan follows the template located here:\n\nhttps://sharepoint.amr.ith.intel.com/sites/SourceDocs/Templates/",
          "category": "Documentation",
          "description": "The Verification Plan document must exist and follow standard template.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 5.94.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (5) Documentation",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 5.94.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Verification Plan delivered, follows template",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: The Verification Plan document must exist and follow standard template.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: read pbj.txt from [docdir]\n\tpbj.txt indicates if Verification Plan is missing or incomplete.\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "INFO - Ensure Verification Plan Reference follows the standard template",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Requirement - IP Verification Plan Reference source file must exist in central doc repository",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Requirement - Compare the major headings",
              "severity": "INFO"
            },
            {
              "file": ".//doc/pbj.txt",
              "line": "",
              "msg": "Skipping the check as the team does not have any Specs QA support",
              "severity": "WARNING"
            }
          ],
          "name": "Verification Plan delivered, follows template",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "5.94.b": {
          "algorithm": "Manual check",
          "attributes": {},
          "background": "Pre-silicon software (PSS features are documented in HAS. Verification Plan describes support for those PSS features.",
          "category": "Documentation",
          "description": "Support for pre-silicon software (PSS) features documented in Verification Plan per HAS",
          "logRecords": [],
          "name": "Support for pre-silicon software (PSS) features documented in Verification Plan",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.314.a": {
          "algorithm": "Search for emul_build_soc_status.log: <IP_ROOT>/tools/emul/emul_build_soc_status.log\nSearch for this text in emul_build_soc_status.log: CHECK_FPGA PASSED\n\n, Search for <IP_ROOT>/tools/emul/CHECK_FPGA.log\nSearch for this text in CHECK_FPGA.log \"return status \"\nRequire at least one match, require last one to end in 0\n",
          "attributes": {
            "collateral: emulfpgalog": ".//tools/emulation/ADL/CHECK_FPGA.log",
            "collateral: emullog": ".//tools/emulation/ADL/emul_build_soc_status.log",
            "key: emuldir": ".//tools/emulation/ADL/",
            "key: emulfpgalog": "CHECK_FPGA.log",
            "key: emullog": "emul_build_soc_status.log"
          },
          "background": "Produce FPGA clean IPs to improve FPGA Model Quality & TAT to boost PSS Validation velocity.\n\nProvide the log file for how FPGA EFFM Check was run.",
          "category": "Emulation/FPGA",
          "description": "This is EFFM Compile Check of FPGA RTL & UPF. Check required for FPGA-based HW/SW Co-Validation.\n\nTo enable FPGA view of RTL, add/remove following RTL Global Macros:\nExpected macros: INTEL_FPGA, INTEL_NO_PWR_PINS (UPF Check only), INTEL_INST_ON\nDisallowed macros: INTEL_SIMONLY, INTEL_NO_PWR_PINS (if NOT doing UPF), INTEL_EMULATION, INTEL_DC\n\nTo run the check:\n1. Make sure you correctly tag all RTL as \"fpga/nonfpga\".\n2. Use following cmd to launch the check:\nace -emul -emul_run_flow CHECK_FPGA -emul_filter FPGA\n\nNOTE: Both RTL & UPF Compile check is a single run. Zircon captures RTL check status from this run into Rule 314.a and UPF check status is captured in other Rule 314.e\n\nVisit http://goto/effm, OR email effm_support@eclists.intel.com for more info.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 6.314.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (6) Emulation/FPGA",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 6.314.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RTL related collaterals must pass FPGA checks",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This is EFFM Compile Check of FPGA RTL & UPF. Check required for FPGA-based HW/SW Co-Validation.\n\t\n\tTo enable FPGA view of RTL, add/remove following RTL Global Macros:\n\tExpected macros: INTEL_FPGA, INTEL_NO_PWR_PINS (UPF Check only), INTEL_INST_ON\n\tDisallowed macros: INTEL_SIMONLY, INTEL_NO_PWR_PINS (if NOT doing UPF), INTEL_EMULATION, INTEL_DC\n\t\n\tTo run the check:\n\t1. Make sure you correctly tag all RTL as \"fpga/nonfpga\".\n\t2. Use following cmd to launch the check:\n\tace -emul -emul_run_flow CHECK_FPGA -emul_filter FPGA\n\t\n\tNOTE: Both RTL & UPF Compile check is a single run. Zircon captures RTL check status from this run into Rule 314.a and UPF check status is captured in other Rule 314.e\n\t\n\tVisit http://goto/effm, OR email effm_support@eclists.intel.com for more info.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Search for emul_build_soc_status.log: <IP_ROOT>/tools/emul/emul_build_soc_status.log\n\tSearch for this text in emul_build_soc_status.log: CHECK_FPGA PASSED\n\t\n\t, Search for <IP_ROOT>/tools/emul/CHECK_FPGA.log\n\tSearch for this text in CHECK_FPGA.log \"return status \"\n\tRequire at least one match, require last one to end in 0\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Running rule 6.314.a",
              "severity": "INFO"
            },
            {
              "file": ".//tools/emulation/ADL/emul_build_soc_status.log",
              "line": "",
              "msg": "Found pattern ^.*\\s*CHECK_FPGA\\s+PASSED in file ",
              "severity": "INFO"
            },
            {
              "file": ".//tools/emulation/ADL/CHECK_FPGA.log",
              "line": "",
              "msg": "Found pattern ^\\s*return\\s+status\\s+0\\s*$ in file ",
              "severity": "INFO"
            }
          ],
          "name": "RTL related collaterals must pass FPGA checks",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "6.314.e": {
          "algorithm": "Search for \"effm_status.log\": ./tools/emul/effm_status.log\nChecks \"effm_status.log\" for message \"CHECK_FPGA PASSED\"\nSearch for message \"CHECK_FPGA_UPF PASSED\" in effm_status.log",
          "attributes": {},
          "background": "Produce FPGA clean IPs to improve FPGA Model Quality & TAT to boost PSS Validation velocity.\n\nProvide the log file for how FPGA EFFM Check was run.",
          "category": "Emulation/FPGA",
          "description": "This is EFFM Compile Check of FPGA RTL & UPF. Check required for FPGA-based PM Validation.\n\nTo enable FPGA view of RTL, add/remove following RTL Global Macros:\nExpected macros: INTEL_FPGA, INTEL_NO_PWR_PINS, INTEL_INST_ON\n\nTo run the check:\n1. UPF check requires minimum EFFM Design Kit Version 2016.15 and up.\n2. Make sure you correctly tag all RTL as \"fpga/nonfpga\".\n3. Make sure you use \"__FPGA\" label for Emulation-specific content in UPF file.\n4. Make sure UPF Files are included either thru \"power_intent\" hash in model udf file.\n5. Use following cmd to launch the check:\nace -emul -emul_run_flow CHECK_FPGA -emul_filter FPGA\n\nNOTE: Both RTL & UPF Compile check is a single run. Zircon captures RTL check status from this run into Rule 95.a and UPF check status is captured in other Rule 95.e\n\nVisit http://goto/effm, OR email effm_support@eclists.intel.com for more info.",
          "logRecords": [],
          "name": "UPF and related collaterals must pass FPGA checks",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "6.321.a": {
          "algorithm": "1. Search for \"CHECK_VELOCE.log\": <IP_ROOT>/tools/emul/CHECK_VELOCE.log\n2. Check the end of the log file contains \"return status 0\"\n<IP_ROOT>/tools/emul/emul_build_soc_status.log\n1. Search for \"emul_build_soc_status.log\":\n2. Search for message \"CHECK_VELOCE PASSED\" in emul_build_soc_status.log\n",
          "attributes": {
            "collateral: emullog": ".//tools/emulation/ADL/emul_build_soc_status.log",
            "collateral: emulvelocelog": ".//tools/emulation/ADL/CHECK_VELOCE.log",
            "key: emuldir": ".//tools/emulation/ADL/",
            "key: emullog": "emul_build_soc_status.log",
            "key: emulvelocelog": "CHECK_VELOCE.log"
          },
          "background": "Produce Emulation clean IPs to improve Veloce Emulation Model Quality & TAT to boost PSS Validation velocity.\n\nProvide the log file for how Veloce EFFM Check was run.\n",
          "category": "Emulation/FPGA",
          "description": "This is EFFM Compile Check of Emulation RTL. The intent of this rule is to ensure Veloce successfully compile, elaborate and synthesize Emulation \"view\" of RTL.\n\nTo enable emulation view of RTL, add/remove following RTL Global Macros:\nExpected macros: INTEL_EMULATION, INTEL_NO_PWR_PINS (only if doing UPF Check), INTEL_INST_ON\nDisallowed macros: INTEL_SIMONLY, INTEL_NO_PWR_PINS (if NOT doing UPF), INTEL_FPGA, INTEL_DC\n\nTo run the check:\n1. Make sure you correctly tag all RTL as \"emu/nonemu\".\n2. Use following cmd to launch the check:\nace -emul -emul_run_flow CHECK_VELOCE -emul_filter Emulation\n\nNOTE: Both RTL & UPF Compile check is a single run. Zircon captures RTL check status from this run into Rule 321.a and UPF check status is captured in other Rule 321.e\n\nVisit http://goto/effm for details, OR email effm_support@eclists.intel.com for any questions or help in compliance of this rule.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 6.321.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (6) Emulation/FPGA",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 6.321.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RTL and related collaterals must pass Veloce Emulation Checks.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This is EFFM Compile Check of Emulation RTL. The intent of this rule is to ensure Veloce successfully compile, elaborate and synthesize Emulation \"view\" of RTL.\n\t\n\tTo enable emulation view of RTL, add/remove following RTL Global Macros:\n\tExpected macros: INTEL_EMULATION, INTEL_NO_PWR_PINS (only if doing UPF Check), INTEL_INST_ON\n\tDisallowed macros: INTEL_SIMONLY, INTEL_NO_PWR_PINS (if NOT doing UPF), INTEL_FPGA, INTEL_DC\n\t\n\tTo run the check:\n\t1. Make sure you correctly tag all RTL as \"emu/nonemu\".\n\t2. Use following cmd to launch the check:\n\tace -emul -emul_run_flow CHECK_VELOCE -emul_filter Emulation\n\t\n\tNOTE: Both RTL & UPF Compile check is a single run. Zircon captures RTL check status from this run into Rule 321.a and UPF check status is captured in other Rule 321.e\n\t\n\tVisit http://goto/effm for details, OR email effm_support@eclists.intel.com for any questions or help in compliance of this rule.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. Search for \"CHECK_VELOCE.log\": <IP_ROOT>/tools/emul/CHECK_VELOCE.log\n\t2. Check the end of the log file contains \"return status 0\"\n\t<IP_ROOT>/tools/emul/emul_build_soc_status.log\n\t1. Search for \"emul_build_soc_status.log\":\n\t2. Search for message \"CHECK_VELOCE PASSED\" in emul_build_soc_status.log\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Running rule 6.321.a",
              "severity": "INFO"
            },
            {
              "file": ".//tools/emulation/ADL/emul_build_soc_status.log",
              "line": "",
              "msg": "Found pattern ^.*\\s*CHECK_VELOCE\\s+PASSED in file ",
              "severity": "INFO"
            },
            {
              "file": ".//tools/emulation/ADL/CHECK_VELOCE.log",
              "line": "",
              "msg": "Found pattern ^\\s*return\\s+status\\s+0\\s*$ in file ",
              "severity": "INFO"
            }
          ],
          "name": "RTL and related collaterals must pass Veloce Emulation Checks.",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "6.321.e": {
          "algorithm": "Search for \"effm_status.log\": ./tools/emul/effm_status.log\nChecks \"effm_status.log\" for message \"CHECK_VELOCE PASSED\"\nSearch for message \"CHECK_VELOCE_UPF PASSED\" in effm_status.log",
          "attributes": {},
          "background": "Produce Emulation clean IPs to improve FC Veloce Emulation Model Quality & TAT to boost PSS Validation & PM Validation velocity.\n\nProvide the log file for how Veloce EFFM Check was run.",
          "category": "Emulation/FPGA",
          "description": "This is EFFM Compile Check of Emulation RTL & UPF for Veloce. Check required for Emulation-based PM Validation.\n\nTo enable emulation view of RTL, add/remove following RTL Global Macros:\nExpected macros: INTEL_EMULATION, INTEL_NO_PWR_PINS (only if doing UPF Check), INTEL_INST_ON\n\nTo run the check:\n1. UPF check requires minimum EFFM Design Kit Version 2016.15 and up.\n2. Make sure you correctly tag all RTL as \"emu/nonemu\".\n3. Make sure you use \"__EMU\" label for Emulation-specific content in UPF file.\n4. Make sure UPF Files are included either thru \"power_intent\" hash in model udf file.\n5. Use following cmd to launch the check:\nace -emul -emul_run_flow CHECK_ZSE -emul_filter Emulation\n\nNOTE: Both RTL & UPF Compile check is a single run. Zircon captures RTL check status from this run into Rule 95.a and UPF check status is captured in other Rule 95.e\n\nVisit http://goto/effm, OR email effm_support@eclists.intel.com for more info.",
          "logRecords": [],
          "name": "UPF and related collaterals must pass Veloce Emulation Checks.",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "6.418.a": {
          "algorithm": "This is a manual check (not implemented in Zircon). To comply with this rule, user must ensure that following related items in design are checked:  \n1. ONLY approved global RTL macros must be used to guard EBB RTL for emulation and FPGA models:  INTEL_EMULATION | INTEL_FPGA.  \n\n2. ONLY approved global UPF macros must be used to include/exclude UPF for emulation and FPGA:  __EMULATION | __FPGA   (note 2 underscores as prefix)\n\n2. All analogic logic in EBBs must be excluded using the global macros listed above.\n\n3. Provided UPF must match RTL design hierarchy. Use approved global RTL and UPF macros to include/exclude RTL or UPF respectively. \n\n4. For all PLLs, Oscillators, and dividers in design, you must instantiate emu_clk_xxxx (_pll | _osc | _div primitives. This primitives are provided as part of EFFM global installation.  This RTL must be guarded by INTEL_EMULATION.  See EFFM Clocking Methodology on http://goto/effm ==> Guidelines\n\n5. For all memories in design provide a high-level, abstract, process agnostic memory model. Guarding is only required if this RTL code is meant only for Emulation | FPGA.  \n\n6. For all PHYs a gasket must be instantiated at parallel PCS pipe with all digital logic included. \n\nEBBs are single biggest causes of model bugs and model TAT (and TI paranoia) \nUnder any doubt/confusion, please contact effm_support@eclists.intel.com for assistance and to review the models before IRR drop.\n\nAll EBB RTL must pass compile checks for Zebu/Veloce and Functional Build and Run checks.",
          "attributes": {},
          "background": "EBBs are custom logic portions of silicon that are not synthesized. Typically a abstract/behavioral RTL model is created to model the digital functionality of EBBs in Simulation. These RTL descriptions do not lend itself to correct behavior on Emulation & FPGA platforms leading to severe functional issues. This directly impacts quality and TAT of Pre-Si Prototyping Models. \n\nIt's a win-win to identify these EBBs upfront and model it right, first-time by original RTL designers. We understand RTL designers may not have the expertise to create accurate models for Emulation. Therefore, EFFM Wiki provides templates, guidelines and code examples and expert guidance (if required).",
          "category": "Emulation/FPGA",
          "description": "EBBs (aka BMODs) are custom logic portions of design that are not synthesized for silicon. Typically a abstract/behavioral RTL model is created to model the digital functionality of EBBs in Simulation, Emulation & FPGA platforms. Typical examples of EBBs are Memory (RAM, CAMS, Caches), PLLs, PHY, etc. \n\nDue to complexity and number of different types of EBBs, its difficult to provide a general recommendation. A series of guidelines, templates and modeling assistance is available for different types of EBBs. Please visit http://goto/effm ==> Guidelines ==> EBB Guidelines  \n\nClocking EBBs must instantiate emu_clk primitives to correctly model clock behavior. \nMemory EBBs must be written in ways that allow Emulation & FPGA Compilers to infer BRAM resources. EFFM_Summary_Report.log may identify such memories.",
          "logRecords": [],
          "name": "A high-level (process agnostic) model must be provided for RTL Memories, EBBs (Embedded Black Boxes) or BMODs that is EFFM Compile and Functional clean and be accurately inferred by Emulation & FPGA Tools",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.423.a": {
          "algorithm": "",
          "attributes": {},
          "background": "",
          "category": "Emulation/FPGA",
          "description": "",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 6.423.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (6) Emulation/FPGA",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 6.423.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: FPGA friendly support in design(e.g pipelining, data path widening ..) to enable @speed E2E interop with test chips/HSIO PHY (as applicable).",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 6.423.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 6.423.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "FPGA friendly support in design(e.g pipelining, data path widening ..) to enable @speed E2E interop with test chips/HSIO PHY (as applicable).",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.424.a": {
          "algorithm": "",
          "attributes": {},
          "background": "",
          "category": "Emulation/FPGA",
          "description": "",
          "logRecords": [],
          "name": "IP Design (SIP and PHY Logic) is EFFM compliant  including UPF support.",
          "priority": "Showstopper",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.425.a": {
          "algorithm": "",
          "attributes": {},
          "background": "",
          "category": "Emulation/FPGA",
          "description": "",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 6.425.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (6) Emulation/FPGA",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 6.425.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Automated Build flow supported for Emulation/FPGA for build 'On Demand'.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 6.425.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 6.425.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Automated Build flow supported for Emulation/FPGA for build \"On Demand\".",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.426.a": {
          "algorithm": "",
          "attributes": {},
          "background": "",
          "category": "Emulation/FPGA",
          "description": "",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 6.426.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (6) Emulation/FPGA",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 6.426.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: PCR based Tagging mechanism Implemented to trigger FPGA/mSLE model builds when PCR is implemented in the Design Repo",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 6.426.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 6.426.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "PCR based Tagging mechanism Implemented to trigger FPGA/mSLE model builds when PCR is implemented in the Design Repo",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.427.a": {
          "algorithm": "",
          "attributes": {},
          "background": "",
          "category": "Emulation/FPGA",
          "description": "",
          "logRecords": [],
          "name": "Process agnostic Memory/EBB models provided by Design teams that are easily inferred by Emulation and FPGA tools",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.428.a": {
          "algorithm": "",
          "attributes": {},
          "background": "",
          "category": "Emulation/FPGA",
          "description": "",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 6.428.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (6) Emulation/FPGA",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 6.428.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: FPGA Friendly Clocking Scheme(ability to run at lower speeds - 1/10-1/20th of Si)",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 6.428.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 6.428.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700818",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "FPGA Friendly Clocking Scheme(ability to run at lower speeds - 1/10-1/20th of Si)",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.429.a": {
          "algorithm": "",
          "attributes": {},
          "background": "",
          "category": "Emulation/FPGA",
          "description": "",
          "logRecords": [],
          "name": "No Latches in the design and minimize # of combi levels (Need to close on threshold and EDA tool to flag exception). ",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.430.a": {
          "algorithm": "",
          "attributes": {},
          "background": "",
          "category": "Emulation/FPGA",
          "description": "",
          "logRecords": [],
          "name": "Emulation/FPGA Config supported in Design GK repo for continuous integration including UPF support.",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.431.a": {
          "algorithm": "",
          "attributes": {},
          "background": "",
          "category": "Emulation/FPGA",
          "description": "",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 6.431.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (6) Emulation/FPGA",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 6.431.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Clock Grouping/constraints Documentation from Design",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 6.431.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 6.431.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "Clock Grouping/constraints Documentation from Design",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.432.a": {
          "algorithm": "",
          "attributes": {},
          "background": "",
          "category": "Emulation/FPGA",
          "description": "",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 6.432.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (6) Emulation/FPGA",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 6.432.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: FPGA CTECH cell for FLOP elements not supported in FPGA (e.g FLOPs with both Async Set and Reset)",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Manual",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking Manual Rule 6.432.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Manual Rule 6.432.a pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Graded by badithya on 1547700819",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Comment: ",
              "severity": "INFO"
            }
          ],
          "name": "FPGA CTECH cell for FLOP elements not supported in FPGA (e.g FLOPs with both Async Set and Reset)",
          "priority": "Medium",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "6.95.a": {
          "algorithm": "Search for \"emul_build_soc_status.log\": <IP_ROOT>/tools/emul/emul_build_soc_status.log\nSearch for message \"CHECK_ZSE PASSED\" in emul_build_soc_status.log\n<IP_ROOT>/tools/emul/CHECK_ZSE.log\nSearch for message \"return status 0\" in CHECK_SZE.log\nOverride key for Emulation directory = emuldir\nOverride key for Emulation log = emullog, Search for \"CHECK_ZSE.log\":\n",
          "attributes": {
            "collateral: emullog": ".//tools/emulation/ADL/emul_build_soc_status.log",
            "collateral: emulzselog": ".//tools/emulation/ADL/CHECK_ZSE.log",
            "key: emuldir": ".//tools/emulation/ADL/",
            "key: emullog": "emul_build_soc_status.log",
            "key: emulzselog": "CHECK_ZSE.log"
          },
          "background": "Produce Emulation clean IPs to improve FC Zebu Server Emulation Model Quality & TAT to boost PSS Validation & PM Validation velocity.\n\nProvide the log file for how Zebu EFFM Check was run.",
          "category": "Emulation/FPGA",
          "description": "This is EFFM Compile Check of Emulation RTL. The intent of this rule is to ensure Zebu successfully compile, elaborate and synthesize Emulation \"view\" of RTL.\n\nTo enable emulation view of RTL, add/remove following RTL Global Macros:\nExpected macros: INTEL_EMULATION, INTEL_NO_PWR_PINS (only if doing power-aware Emulation UPF Check), INTEL_INST_ON\nDisallowed macros: INTEL_SIMONLY, INTEL_NO_PWR_PINS (if NOT doing power-aware Emulation), INTEL_FPGA, INTEL_DC\n\nTo run the check:\n1. Make sure you correctly tag all RTL as \"emu/nonemu\".\n2. Use following cmd to launch the check:\nace -emul -emul_run_flow CHECK_ZSE -emul_filter Emulation\n\nNOTE: Both RTL & UPF Compile check is a single run. Zircon captures RTL check status from this run into Rule 95.a and UPF check status is captured in other Rule 95.e\n\nNOTE: Both RTL & UPF Compile check is a single run. Zircon captures RTL check status from this run into Rule 95.a and UPF check status is captured in other R",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 6.95.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (6) Emulation/FPGA",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 6.95.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: RTL and related collaterals must pass Zebu Emulation Checks",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: This is EFFM Compile Check of Emulation RTL. The intent of this rule is to ensure Zebu successfully compile, elaborate and synthesize Emulation \"view\" of RTL.\n\t\n\tTo enable emulation view of RTL, add/remove following RTL Global Macros:\n\tExpected macros: INTEL_EMULATION, INTEL_NO_PWR_PINS (only if doing power-aware Emulation UPF Check), INTEL_INST_ON\n\tDisallowed macros: INTEL_SIMONLY, INTEL_NO_PWR_PINS (if NOT doing power-aware Emulation), INTEL_FPGA, INTEL_DC\n\t\n\tTo run the check:\n\t1. Make sure you correctly tag all RTL as \"emu/nonemu\".\n\t2. Use following cmd to launch the check:\n\tace -emul -emul_run_flow CHECK_ZSE -emul_filter Emulation\n\t\n\tNOTE: Both RTL & UPF Compile check is a single run. Zircon captures RTL check status from this run into Rule 95.a and UPF check status is captured in other Rule 95.e\n\t\n\tNOTE: Both RTL & UPF Compile check is a single run. Zircon captures RTL check status from this run into Rule 95.a and UPF check status is captured in other R",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Search for \"emul_build_soc_status.log\": <IP_ROOT>/tools/emul/emul_build_soc_status.log\n\tSearch for message \"CHECK_ZSE PASSED\" in emul_build_soc_status.log\n\t<IP_ROOT>/tools/emul/CHECK_ZSE.log\n\tSearch for message \"return status 0\" in CHECK_SZE.log\n\tOverride key for Emulation directory = emuldir\n\tOverride key for Emulation log = emullog, Search for \"CHECK_ZSE.log\":\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Running rule 6.95.a",
              "severity": "INFO"
            },
            {
              "file": ".//tools/emulation/ADL/emul_build_soc_status.log",
              "line": "",
              "msg": "Found pattern ^.*\\s*CHECK_ZSE\\s+PASSED in file ",
              "severity": "INFO"
            },
            {
              "file": ".//tools/emulation/ADL/CHECK_ZSE.log",
              "line": "",
              "msg": "Found pattern ^\\s*return\\s+status\\s+0\\s*$ in file ",
              "severity": "INFO"
            }
          ],
          "name": "RTL and related collaterals must pass Zebu Emulation Checks",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "6.95.e": {
          "algorithm": "Search for \"effm_status.log\": ./tools/emul/effm_status.log\nSearch for message \"CHECK_ZSE PASSED\" in effm_status.log\nSearch for message \"CHECK_ZSE_UPF PASSED\" in effm_status.log\n\nOverride key for effm status log file = effmstatuslog",
          "attributes": {},
          "background": "Produce Emulation clean IPs to improve FC Zebu Server Emulation Model Quality & TAT to boost PSS Validation & PM Validation velocity.\n\nProvide the log file for how Zebu EFFM Check was run.",
          "category": "Emulation/FPGA",
          "description": "This is EFFM Compile Check of Emulation RTL & UPF for Zebu. Check required for Emulation-based PM Validation.\n\nTo enable emulation view of RTL, add/remove following RTL Global Macros:\nExpected macros: INTEL_EMULATION, INTEL_NO_PWR_PINS (only if doing UPF Check), INTEL_INST_ON\n\nTo run the check:\n1. UPF check requires minimum EFFM Design Kit Version 2016.15 and up.\n2. Make sure you correctly tag all RTL as \"emu/nonemu\".\n3. Make sure you use \"__EMU\" label for Emulation-specific content in UPF file.\n4. Make sure UPF Files are included either thru \"power_intent\" hash in model udf file.\n5. Use following cmd to launch the check:\nace -emul -emul_run_flow CHECK_ZSE -emul_filter Emulation\n\nNOTE: Both RTL & UPF Compile check is a single run. Zircon captures RTL check status from this run into Rule 95.a and UPF check status is captured in other Rule 95.e\n\nVisit http://goto/effm, OR email effm_support@eclists.intel.com for more info.",
          "logRecords": [],
          "name": "UPF and related collaterals must pass Zebu emulation checks",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "6.97.a": {
          "algorithm": "Manual Check.",
          "attributes": {},
          "background": "For more info on Emulation/FPGA Friendly Modeling, please, visit: http://goto/effm\n\nFor further questions, contact:effm_support@eclists.intel.com",
          "category": "Emulation/FPGA",
          "description": "Ensure that Emulation-FPGA specific FW (applicable to IP with microcontrollers) version is validated and in sync with released RTL.\nThe goal is to eliminate functional model issues due to disparity between RTL and FW versions.",
          "logRecords": [],
          "name": "Ensure that Emulation-FPGA specific HEX ROM FirmWare file (applicable to IP with microcontrollers) version is validated and in sync with released RTL",
          "priority": "High",
          "status": "NOT GRADED",
          "type": "Manual"
        },
        "7.100.a": {
          "algorithm": "The LEC constraint file must exist somewhere under [lecdir]/*.do\nFor RDT_FEV flow, the rule looks for FEV_dofile.tcl under lecdir\nAllow zipped files\n",
          "attributes": {
            "collateral: LEC constraint": ".//tools/fev/ADP/dfxsecure_plugin/FEV_dofile.tcl",
            "key: lecdir": ".//tools/fev/ADP/dfxsecure_plugin/"
          },
          "background": "SoC team can reuse this for their LEC run if necessary.\nIf users have run RDT_FEV then copy the FEV_dofile.tcl to 'lecdir'\nIf users have run other FEV flow then copy *.do file to 'lecdir'",
          "category": "FEV",
          "description": "Checks whether LEC constraints/run scripts provided.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 7.100.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (7) FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 7.100.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: FEV scripts and constraints in the dofile are matching the log file",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Checks whether LEC constraints/run scripts provided.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: The LEC constraint file must exist somewhere under [lecdir]/*.do\n\tFor RDT_FEV flow, the rule looks for FEV_dofile.tcl under lecdir\n\tAllow zipped files\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checking the existence of LEC contraint file under lecdir",
              "severity": "INFO"
            }
          ],
          "name": "FEV scripts and constraints in the dofile are matching the log file",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "7.101.a": {
          "algorithm": "Check that LEC log file (lec.log) exists under logs in LEC directory ('lecdir'/logs). Check that this log file doesn't have 'set undriven signal'\nCheck that summary report (*summary.rpt) exists under reports in LEC directory ('lecdir'/reports). Check that this report doesn't have 'Undriven signal :TIE(0|1)'\n",
          "attributes": {
            "collateral: FEV lec.log": ".//tools/fev/ADP/dfxsecure_plugin//logs/lec.log",
            "collateral: FEV report": ".//tools/fev/ADP/dfxsecure_plugin//reports/dfxsecure_plugin.summary.rpt",
            "key: lecdir": ".//tools/fev/ADP/dfxsecure_plugin/"
          },
          "background": "Ensure LEC run results did not use 'set undriven to constant' commands.\n\nIf users have run RDT_FEV then copy the FEV_dofile.tcl to 'lecdir'\nIf users have run other FEV flow then copy *.do file to 'lecdir'",
          "category": "FEV",
          "description": "Check do file for 'set undriven to constant'.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 7.101.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (7) FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 7.101.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: FEV LEC run not using 'set undriven to constant'",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Check do file for 'set undriven to constant'.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Check that LEC log file (lec.log) exists under logs in LEC directory ('lecdir'/logs). Check that this log file doesn't have 'set undriven signal'\n\tCheck that summary report (*summary.rpt) exists under reports in LEC directory ('lecdir'/reports). Check that this report doesn't have 'Undriven signal :TIE(0|1)'\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Ensure FEV LEC run not using 'set undriven to constant",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Ensure command'set undriven 0|1' does not exists in FEV lec.log file",
              "severity": "INFO"
            },
            {
              "file": ".//tools/fev/ADP/dfxsecure_plugin//logs/lec.log",
              "line": "",
              "msg": "Pattern 'Command:\\s*(vpx)*\\s+set\\s+undriven\\s+signal\\s+' not found in file ",
              "severity": "INFO"
            },
            {
              "file": ".//tools/fev/ADP/dfxsecure_plugin//reports/dfxsecure_plugin.summary.rpt",
              "line": "",
              "msg": "Pattern 'Undriven\\s*signal\\s*:\\s*TIE(0|1)' not found in file ",
              "severity": "INFO"
            }
          ],
          "name": "FEV LEC run not using \"set undriven to constant\"",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "7.101.b": {
          "algorithm": "Check that LEC log file (lec.log) exists under logs in LEC directory ('lecdir'/logs). Check that this log file doesn't have 'add tied signal'\n\n",
          "attributes": {
            "collateral: FEV lec.log": ".//tools/fev/ADP/dfxsecure_plugin//logs/lec.log",
            "key: lecdir": ".//tools/fev/ADP/dfxsecure_plugin/"
          },
          "background": "Ensure LEC run results did not use set undriven to constant commands.\n\nIf users have run RDT_FEV then copy the lec.log file to 'lecdir'/logs AND copy the fev/reports/[alias].summary.rpt into [lecdir]/reports dir.\n\nIf users have run other FEV flow then please create tools/fev/logs & put the lec.log file there AND create a file named [alias].summary.rpt having output of \"report environment\" command and put the file in tools/fev/reports.",
          "category": "FEV",
          "description": "Check run log files for 'add tied signal'",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 7.101.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (7) FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 7.101.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: LEC did not tie anything to constant",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Check run log files for 'add tied signal'",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Check that LEC log file (lec.log) exists under logs in LEC directory ('lecdir'/logs). Check that this log file doesn't have 'add tied signal'\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Ensure LEC did not tie anything to constant",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Ensure command'add tied signal 0|1' does not exists in FEV lec.log file",
              "severity": "INFO"
            },
            {
              "file": ".//tools/fev/ADP/dfxsecure_plugin//logs/lec.log",
              "line": "",
              "msg": "Pattern 'Command:\\s*(vpx)*\\s+add\\s+tied\\s+signal\\s+' not found in file ",
              "severity": "INFO"
            }
          ],
          "name": "LEC did not tie anything to constant",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "7.102.a": {
          "algorithm": "Look for zmapped report (*zmapped.rpt) file under  reports in LEC dir (\"lecdir/reports\").\nCheck for '[G|R]' and report the undriven signals.  The rule will fail if undriven signals found.\n\n",
          "attributes": {
            "collateral: lecundrptfile": ".//tools/fev/ADP/dfxsecure_plugin/reports/dfxsecure_plugin.zmapped.rpt",
            "key: lecdir": ".//tools/fev/ADP/dfxsecure_plugin/",
            "key: lecundrptfile": ".//tools/fev/ADP/dfxsecure_plugin/reports/dfxsecure_plugin.zmapped.rpt"
          },
          "background": "Undriven / Unconnected are generally not allowed and will fail the FEV run ( as well as an electrical issue)\nIf users have run fev using rdt_fev flow, then copy the reports directory in the tools/fev directory.\n\nIf users have run other FEV flow then copy the undriven report file to 'lecdir' with name ^[alias]_undriven.rpt OR Override the default value for key lecundrptfile to point to the undriven report file.",
          "category": "FEV",
          "description": "There should be no undriven nets/pins in the design.\nIf they exist, need to be documented and explained/justified",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 7.102.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (7) FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 7.102.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: No undriven pins/nets are allowed",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: There should be no undriven nets/pins in the design.\n\tIf they exist, need to be documented and explained/justified",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Look for zmapped report (*zmapped.rpt) file under  reports in LEC dir (\"lecdir/reports\").\n\tCheck for '[G|R]' and report the undriven signals.  The rule will fail if undriven signals found.\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Checks for the existence of undriven pins/nets",
              "severity": "INFO"
            },
            {
              "file": ".//tools/fev/ADP/dfxsecure_plugin/reports/dfxsecure_plugin.zmapped.rpt",
              "line": "",
              "msg": "LEC report file found",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Pattern Mapped points:\\s+SYSTEM\\s+class\\s+ found in files .//tools/fev/ADP/dfxsecure_plugin/reports/dfxsecure_plugin.zmapped.rpt",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "No undriven pins/nets found in zmapped report file .//tools/fev/ADP/dfxsecure_plugin/reports/dfxsecure_plugin.zmapped.rpt",
              "severity": "INFO"
            }
          ],
          "name": "No undriven pins/nets are allowed",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "7.274.a": {
          "algorithm": "Check that LEC log file (lec.log) exists under logs in LEC directory ('lecdir'/logs). \nIn the LEC log file, check that the below mentioned defines are not used for read library and read design. \n'DC/SYN/SYNTH/SYNTHESIS/INTEL_DC/INTEL_SYNTHESIS/INTHEL_SYNTH/INTEL_SYN/'\n\n",
          "attributes": {
            "collateral: FEV lec.log": ".//tools/fev/ADP/dfxsecure_plugin//logs/lec.log",
            "key: lecdir": ".//tools/fev/ADP/dfxsecure_plugin/"
          },
          "background": "FEV LEC run not allowed with +define+DC\n\nIf users have run RDT_FEV then copy the FEV_dofile.tcl to 'lecdir'\nIf users have run other FEV flow then copy *.do file to 'lecdir'",
          "category": "FEV",
          "description": "Check LEC run log file for usage of +define+DC",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 7.274.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (7) FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 7.274.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Do not specify \"+define+DC\" for FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Check LEC run log file for usage of +define+DC",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Check that LEC log file (lec.log) exists under logs in LEC directory ('lecdir'/logs). \n\tIn the LEC log file, check that the below mentioned defines are not used for read library and read design. \n\t'DC/SYN/SYNTH/SYNTHESIS/INTEL_DC/INTEL_SYNTHESIS/INTHEL_SYNTH/INTEL_SYN/'\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "DC \\s*read([_|\\s*])design\\s*.*-define\\s*(\\bDC\\b|SYN|SYNTH|SYNTHESIS|INTEL_DC|INTEL_SYN|INTEL_SYNTH|INTEL_SYNTHESIS) is not defined in read design calls in files ['.//tools/fev/ADP/dfxsecure_plugin//logs/lec.log']",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "DC \\s*read([_|\\s*])library\\s*.*-define\\s*(\\bDC\\b|SYN|SYNTH|SYNTHESIS|INTEL_DC|INTEL_SYN|INTEL_SYNTH|INTEL_SYNTHESIS) is not defined in read design calls in files ['.//tools/fev/ADP/dfxsecure_plugin//logs/lec.log']",
              "severity": "INFO"
            }
          ],
          "name": "Do not specify \"+define+DC\" for FEV",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "7.274.b": {
          "algorithm": "Check that LEC log file (lec.log) exists under logs in LEC directory ('lecdir'/logs). \nIn this LEC log file, check that 'set directive on' is not present.\n\n",
          "attributes": {
            "collateral: lec.log": ".//tools/fev/ADP/dfxsecure_plugin//logs/lec.log",
            "key: lecdir": ".//tools/fev/ADP/dfxsecure_plugin/"
          },
          "background": "Check that IPs have not defined SYNTH or SYNTHESIS directives for their equivalence runs\n\nIf users have run fev using rdt_fev flow, then copy the logs directory in the tools/fev directory.\nIf users have used other FEV flows then please create tools/fev/logs & put the lec.log file there.\n\nIf users have run RDT_FEV then copy the FEV_dofile.tcl to 'lecdir'\nIf users have run other FEV flow then copy *.do file to 'lecdir'",
          "category": "FEV",
          "description": "SYNTH and SYNTHESIS not defined for FEV",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 7.274.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (7) FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 7.274.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Do not specify \"set directive on\" for FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Showstopper",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: SYNTH and SYNTHESIS not defined for FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Check that LEC log file (lec.log) exists under logs in LEC directory ('lecdir'/logs). \n\tIn this LEC log file, check that 'set directive on' is not present.\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Pattern \\s*set\\s*directive\\s*on is not defined in lec.log file ['.//tools/fev/ADP/dfxsecure_plugin//logs/lec.log']",
              "severity": "INFO"
            }
          ],
          "name": "Do not specify \"set directive on\" for FEV",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "7.308.a": {
          "algorithm": "Check that LEC log file (lec.log) exists under logs in LEC directory ('lecdir'/logs) and parse the log file.\n\nIf using Native UPF: (presence of command : set lowpower option -native_1801)\nThe below mentioned commands are expected:\n1. Command: set lowpower option -native_1801 \n2. Command: read power intent .*-golden.*-insert_isolation\nOR\nCommand: read power intent .*-insert_isolation .*-golden\n3. Command: read power intent.*-revised \n\nIf using non-Native UPF: (lack of command : set lowpower option -native_1801)\nThe below mentioned commands are expected:\n1. Command: read power intent .* -golden\n2. Command: read power intent.* -revised\n3. Command: commit power intent.*-insert_isolation.*-golden\nOR \nCommand: commit power intent.*-golden.*-insert_isolation\n",
          "attributes": {},
          "background": "The purpose of this rule is to check that IPs have included UPF in the FEV runs\n\nIf users have run fev using rdt_fev flow, then copy the logs directory in the tools/fev directory.\nIf users have used other FEV flows then please create tools/fev/logs & put the lec.log file there.",
          "category": "FEV",
          "description": "FEV run with UPF",
          "logRecords": [],
          "name": "FEV must be run with UPF",
          "priority": "Showstopper",
          "status": "PASS",
          "type": "Auto"
        },
        "7.348.a": {
          "algorithm": "Check that LEC log file (lec.log) exists under logs in LEC directory ('lecdir'/logs). \nCheck that the below mentioned pattern exists in this LEC log file. \n'read*design*-functiondefault z*-golden*' log file\n",
          "attributes": {
            "collateral: lec.log": ".//tools/fev/ADP/dfxsecure_plugin/logs/lec.log",
            "key: lecdir": ".//tools/fev/ADP/dfxsecure_plugin/"
          },
          "background": "The purpose of this rule is to make sure that the RTL is written properly by initializing all the functions. In RTL, you can explicitly mention if a function should be static so that synthesis also can synthesize this as static function. Otherwise all functions are synthesized as AUTOMATIC and there could be differences in Simulation vs synthesis. This rule attempts to catch those mismatches.\nRdt_fev is enhanced to support this.",
          "category": "FEV",
          "description": "To align with the Simulation behavior, we use this option '-functiondefault Z' during reading golden design so that this could specify the return value of unspecified or incompletely specified functions.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 7.348.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (7) FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 7.348.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: Golden side compilation should use -functiondefault Z during read design command",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: Medium",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: To align with the Simulation behavior, we use this option '-functiondefault Z' during reading golden design so that this could specify the return value of unspecified or incompletely specified functions.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Check that LEC log file (lec.log) exists under logs in LEC directory ('lecdir'/logs). \n\tCheck that the below mentioned pattern exists in this LEC log file. \n\t'read*design*-functiondefault z*-golden*' log file\n\t",
              "severity": "INFO"
            },
            {
              "file": ".//tools/fev/ADP/dfxsecure_plugin/logs/lec.log",
              "line": "",
              "msg": "Pattern ('\\\\s*read([_|\\\\s*])design\\\\s*.*-functiondefault\\\\s*(z|Z)\\\\s*.*-golden\\\\s*', '\\\\s*read([_|\\\\s*])design\\\\s*.*-golden\\\\s*.*-functiondefault\\\\s*(z|Z)\\\\s*') is defined in lec.log file ",
              "severity": "INFO"
            }
          ],
          "name": "Golden side compilation should use -functiondefault Z during read design command",
          "priority": "Medium",
          "status": "PASS",
          "type": "Auto"
        },
        "7.98.a": {
          "algorithm": "1. The LEC report file with extention .rpt must exist somewhere under 'lecdir' or 'lecdir'/reports\nThere must be exactly one report file found\nIf the lecrptfile key is defined, it will be use, otherwise a search will be conducted starting with the directory defined by the lecdir key.\nAllow zipped files\n",
          "attributes": {
            "collateral: lecrptfile": ".//tools/fev/ADP/dfxsecure_plugin/reports/dfxsecure_plugin.summary.rpt",
            "key: lecdir": ".//tools/fev/ADP/dfxsecure_plugin/",
            "key: lecrptfile": ".//tools/fev/ADP/dfxsecure_plugin/reports/dfxsecure_plugin.summary.rpt"
          },
          "background": "SoC team can use this as a reference whether the LEC has been run for this IP.\n\nIf users have run fev using rdt_fev flow, then copy the reports directory in the 'lecdir' directory.\nRename the tools/fev/reports/[alias].summary.rpt to tools/fev/reports/[alias].rpt file\nOR\nOverride the default value for key lecrptfile to point to 'tools/fev/reports/[alias].summary.rpt'\n\nIf the users run FEV through some other flow, then copy the report file to 'lecdir' with name *.rpt AND\nOverride the default value for key lecrptfile to point to that file.\n",
          "category": "FEV",
          "description": "Checks whether LEC run result is provided.",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 7.98.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (7) FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 7.98.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: LEC reports must exist",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Checks whether LEC run result is provided.",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: 1. The LEC report file with extention .rpt must exist somewhere under 'lecdir' or 'lecdir'/reports\n\tThere must be exactly one report file found\n\tIf the lecrptfile key is defined, it will be use, otherwise a search will be conducted starting with the directory defined by the lecdir key.\n\tAllow zipped files\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Ensure LEC run result is provided",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Check whether report file with extension .rpt exist somewhere under 'lecdir' or lecdir/reports",
              "severity": "INFO"
            },
            {
              "file": ".//tools/fev/ADP/dfxsecure_plugin/reports/dfxsecure_plugin.summary.rpt",
              "line": "",
              "msg": "LEC report file found",
              "severity": "INFO"
            }
          ],
          "name": "LEC reports must exist",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "7.98.b": {
          "algorithm": "Check for existence of $IP_ROOT/[lecdir]/logs/lec.log\ndefault: $IP_ROOT/tools/fev/logs/lec.log\na.Can probably be gzipped\nb.Can be a soft link to another file\n",
          "attributes": {
            "collateral: lec.log": ".//tools/fev/ADP/dfxsecure_plugin//logs/lec.log",
            "key: lecdir": ".//tools/fev/ADP/dfxsecure_plugin/"
          },
          "background": "Provide lec.log so downstream rules can check the quality of the FEV run\nIPDS index 98\n\nIf users have run fev using rdt_fev flow, then copy the logs directory in the tools/fev directory.\nIf users have used other FEV flows then please create tools/fev/logs & put the lec.log file there.",
          "category": "FEV",
          "description": "FEV lec.log file exists",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 7.98.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (7) FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 7.98.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: FEV lec.log file must exists",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: FEV lec.log file exists",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Check for existence of $IP_ROOT/[lecdir]/logs/lec.log\n\tdefault: $IP_ROOT/tools/fev/logs/lec.log\n\ta.Can probably be gzipped\n\tb.Can be a soft link to another file\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Ensure FEV lec.log is present ",
              "severity": "INFO"
            }
          ],
          "name": "FEV lec.log file must exists",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "7.99.a": {
          "algorithm": "Check that fevaudit.xml exists under reports in LEC directory ('lecdir'/reports) and the VALUE for 'Equiv Verif Status' is 'Pass'\n",
          "attributes": {
            "collateral: FEV audit": ".//tools/fev/ADP/dfxsecure_plugin//reports/fevaudit.xml",
            "key: lecdir": ".//tools/fev/ADP/dfxsecure_plugin/"
          },
          "background": "If users have run fev using rdt_fev flow, then copy the reports directory in the tools/fev directory.\n",
          "category": "FEV",
          "description": "LEC report should be clean with no non-equivalent/abort/not-compared points",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 7.99.a ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (7) FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 7.99.a",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: LEC must be clean at the level of synthesis",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: LEC report should be clean with no non-equivalent/abort/not-compared points",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Check that fevaudit.xml exists under reports in LEC directory ('lecdir'/reports) and the VALUE for 'Equiv Verif Status' is 'Pass'\n\t",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "Value is Pass",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "FEV is clean at the level of synthesis",
              "severity": "INFO"
            }
          ],
          "name": "LEC must be clean at the level of synthesis",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        },
        "7.99.b": {
          "algorithm": "Check that fevaudit.xml exists under reports in LEC directory ('lecdir'/reports) and the block name is the top block name.\n\n",
          "attributes": {
            "collateral: FEV audit": ".//tools/fev/ADP/dfxsecure_plugin/reports/fevaudit.xml",
            "key: lecdir": ".//tools/fev/ADP/dfxsecure_plugin/",
            "key: topblockname": "dfxsecure_plugin"
          },
          "background": "Check LEC.log to ensure run met minimum requirements for check enabling",
          "category": "FEV",
          "description": "Check the LEC.log to ensure *either* RDT-FEV was used OR both of the following messages exist:\na. tcl_set_command_name_echo\nb. report_environment",
          "logRecords": [
            {
              "file": "",
              "line": "",
              "msg": "          Rule: 7.99.b ",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Category: (7) FEV",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Name: 7.99.b",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#          Rule: LEC must run at the level of synthesis",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Rule Type: Auto",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#      Priority: High",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#   Description: Check the LEC.log to ensure *either* RDT-FEV was used OR both of the following messages exist:\n\ta. tcl_set_command_name_echo\n\tb. report_environment",
              "severity": "INFO"
            },
            {
              "file": "",
              "line": "",
              "msg": "#     Algorithm: Check that fevaudit.xml exists under reports in LEC directory ('lecdir'/reports) and the block name is the top block name.\n\t\n\t",
              "severity": "INFO"
            },
            {
              "file": ".//tools/fev/ADP/dfxsecure_plugin/reports/fevaudit.xml",
              "line": "",
              "msg": "LEC is run at the level of synthesis (dfxsecure_plugin)",
              "severity": "INFO"
            }
          ],
          "name": "LEC must run at the level of synthesis",
          "priority": "High",
          "status": "PASS",
          "type": "Auto"
        }
      }
    }
  },
  "milestone": "RTL1P0",
  "modelRoot": "./",
  "project": ""
}