#!/usr/intel/bin/perl
#####################################################################
#
# This file stores the configuration information for building
# the RTL simulator and CTE, etc.
#
# Copyright (c) 2010 Intel Corporation
# Intel Confidential
#
# Archive information:
#       $Author: mcchides@plxc5664.pdx.intel.com $
#       $Date: $
#       $Revision: $
#
#####################################################################

#####################################################################
# Please do not modify any code in this section
#####################################################################

package DutConfig;
use strict;
use warnings;

BEGIN {
#    if(!defined($ENV{CDC_UTILS})) {
#        $ENV{CDC_UTILS} = &ToolConfig::ToolConfig_get_tool_path('run_cdc');
#    }
}

our %template_hash;
our %DutConfig;

#####################################################################
#                       START: ACE env script
#####################################################################


## emulation toools setup
my $emu_tools_setenv_str = "";
# $emu_tools_setenv_str .= "setenv EMU_SIM_XTORS_TO_COMPILE \"".&ToolConfig::ToolConfig_get_tool_var("emu","SIM_XTORS_TO_COMPILE")."\"\n";
# $DutConfig::template_hash{'soc.env'}{emu_tools_env} = $emu_tools_setenv_str;

# $ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_ip_config_templates}{"cfg/ace/lib/emu_xtors.pm"} =
#     $ENV{MODEL_ROOT}."/cfg/ace/templates/emu_xtors.pm.template";

#$ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_env_templates}{"cfg/ace/soc_common.env"} =
#    $ENV{MODEL_ROOT}."/cfg/ace/templates/soc.env.template";

if ($DutConfig{target} eq "dfx") {
$ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_env_templates}{"cfg/ace/$DutConfig{target}_common.env"} =
    $ENV{MODEL_ROOT}."/cfg/ace/templates/$DutConfig{target}.env.template";
}	

#####################################################################
#                       END: ACE env script 
#####################################################################

#####################################################################
#                       START: ACE IP_Config script
#####################################################################

use vars qw (@exclude_file_list);
@exclude_file_list = ();

# $ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_ip_config_templates}{"cfg/ace/lib/soc_ip.pm"} =
#    $ENV{MODEL_ROOT}."/cfg/ace/templates/soc_ip.pm.template";

$ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_sitedef_files}{"sitedef/siteDef"} = `$ENV{RTL_PROJ_BIN}/sitedefGen.pl -ver $ENV{MODEL_ROOT} -dump`;
$ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_ip_root_links}{common}{cpu} = "$ENV{MODEL_ROOT}";

#####################################################################
#                       END: ACE IP_Config script
#####################################################################
print "DEBUG: DutConfig target is $DutConfig{target}\n";
# $ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_ip_root_links}{runtime} = {
#     "results/chf" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/chf",
#     "results/vcs_lib" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/vcs_lib",
#     "results/vh" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/vh",
#     "results/target" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/target",
#     "results/fox2sim" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/fox2sim",
#     "results/flow_chk" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/flow_chk",
#     "results/gen" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/gen",
#     "results/jem" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/jem",
#     "results/quickcov" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/quickcov",
#     "results/jemsw" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/jemsw",
#     "results/emu_xtor" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/emu_xtor",
#     "cpu/target" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/cpu/target",
#     "results/.enable_hierdump" => "$ENV{MODEL_ROOT}/target/$DutConfig{target}/aceroot/results/.enable_hierdump",
# };

sub set_additional_common_ace_ip_root_links {
    my ($dut_focus) = shift;

    my @link_files = ();
    my @exclude_files = ();
    push @exclude_files, @exclude_file_list;
    push @exclude_files, "cfg/ace/cdc.udf";
    push @exclude_files, "cfg/ace/soc.env";
    push @exclude_files, "cfg/ace/lib/soc_ip.pm";
    push @exclude_files, "cpu/target";
    push @exclude_files, "shared_ctl_regs/target";
    push @exclude_files, "results/";

    if (defined $dut_focus && $dut_focus eq "cci") {
        push @exclude_files, "target/";
    }
    push @exclude_files, "cfg/tool_config_override.pm";

    opendir(DIR, $ENV{MODEL_ROOT});
    my @dirs = readdir(DIR);
    closedir(DIR);
    foreach my $dir (@dirs) {
        next if ($dir =~ m/^\./);
        gatherFilePaths($dir, \@link_files, @exclude_files);
    }

    foreach my $file (@link_files) {
      print "DEBUG: set_additional_common_ace_ip_root_links: common file=$ENV{MODEL_ROOT}/$file\n";
      $ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_ip_root_links}{common}{$file} = "$ENV{MODEL_ROOT}/$file";
    }

}

sub gatherFilePaths {
    my ($path, $pathsRef, @exclude) = @_;
    return if(!-e "$ENV{MODEL_ROOT}/$path");
    if($#exclude < 0) {
        push @$pathsRef, $path;
        return;
    }
    my @path_matches = grep {m:$path/:} @exclude;
    if($#path_matches < 0) {
        push @$pathsRef, $path;
        return;
    }
    opendir(DIR, "$ENV{MODEL_ROOT}/$path");
    my @content = readdir(DIR);
    closedir(DIR);
    my @dirs = grep {(-d "$ENV{MODEL_ROOT}/$path/$_") && ($_ !~ /^\.$/) && ($_ !~ /^\.\.$/)} @content;
    my @files = grep {!-d "$ENV{MODEL_ROOT}/$path/$_" } @content;
    foreach my $dir (@dirs) {
        my @matches = grep {m:$path/$dir/:} @exclude;
        gatherFilePaths("$path/$dir", $pathsRef, @matches);
    }
    foreach my $file (@files) {
        my @matches = grep {m:$path/$file$:} @exclude;
        if($#matches < 0) {
            push @$pathsRef, "$path/$file";
        }
    }
}

$DutConfig{TrexSkipCompressFiles} = "aceroot/cfg/ace/".$DutConfig{target}.".env aceroot/cfg/ace/lib/soc_ip.pm aceroot/cfg/ace/common.env aceroot/cfg/ace/soc_common.env aceroot/sitedef/siteDef cfg/tool_config_override.pm aceroot/cfg/ace/lib/emu_xtors.pm";

1;
