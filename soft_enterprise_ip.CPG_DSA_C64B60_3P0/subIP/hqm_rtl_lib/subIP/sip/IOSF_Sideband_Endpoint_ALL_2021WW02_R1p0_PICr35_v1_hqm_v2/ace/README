ace/README

To run ace for Endpoint:
-----------------------
No need to follow steps 1, 2 and 2a for released Endpoint
1. Clone svc repo

   git clone ip-iosf-sideban-rtl my_clone

2. Change directory to my_clone

   cd my_clone

2a. get sideband_vc

   cd my_clone/verif/sim
   source ../../unsupported/scripts/get_vc.csh

3. Source the ace setup script from the top of the repo
   For Released Endpoint : Users will have to update sbc_map.sv file 
   source ace/setup_ep 

4. The setup script sets env variable IOSF_SVC_ROOT and runs scripts/sourceme.csh.

5. Now you should be able to use the whole ace language. Refer to step 6 below.
 
To run ace for Router:
---------------------
No need to follow steps 1, 2 and 2a for released Router
For released Router, avoid steps 1, 2 & 2a
For Released Endpoint : Users will have to update sbc_map.sv file 
1. Clone SBC Router repo

   git clone ip-iosf-sideban-rtl my_clone

2. Change directory to my_clone

   cd my_clone

2a. get sideband_vc

   cd my_clone/verif/sim
   source ../../unsupported/scripts/get_vc.csh

3. The setup script sets env variable IOSF_SVC_ROOT and runs scripts/setup.
 
4. Source the ace setup script from the top of the repo

   %source ace/setup_rtr <network_name> 
   For Ex: ace/setup_rtr lv0_sbr_async_cfg_18

5. Now you should be able to use the whole ace language. Here are some
   basics:

ace -cc    # clean compile: rm results dir; then execute ace -c  
ace -c     # compile model
ace -c -x  # compile model and run default test
ace -x     # run default pkg::test

ace -x -t <test_name> -tp <test package name>  # run specific test in pkg

# pass extra arguments to simulator
ace -x -t <test_name> -tp <test_pacakge name> -simv_args "+OVM_VERBOSITY=OVM_LOW"

ace -x -rr mini   # run mini-regression test list
ace -x -rr nb     # run full regression test list in netbatch

ace -c -prescript_args switch1,switch2 

ace -sh -nb       # show netbatch env
ace -sh -nbmon    # show netbatch gui env

# Debug and Help
#---------------
# dump a hash into a file with full paths to all files being used 
# for <model name>.  Also provide info on all compile switches for 
# each library
ace -dump_rtl -dump_rtl_entity M:IOSF_Pfabric

ace -x -dump_options_and_quit  # ?

ace -show_udfs          ## show UDF files being used
ace -show_models        ## show all defined models in ace
ace -show_search_path
ace -show_test_search_path
ace -show_show

ace -sh <switch> -hv 4  ## show help on a <switch>
ace -sh "*test*" -hv 4  ## show help on all switches matching "*test*"
ace -sh -dump_rtl -hv 4
ace -sh -dump_rtl_entity
ace -sh -test_in_model -hv 4
ace -sh -enable_prescripts
ace -sh -rr -noenable_prescripts -hv 4
ace -sh -vlog_opts

find . -type f | grep "rtl\/common\/DW_gray2bin.v" 

# Seed 
ace -t testname -seed 2000     ## run same test with seec=2000 

6. To delete simulation files, user can use following command
   source ace/clean

7. To delete generates tb files, user can use following command
   NOTE: Please do not use this for released router
   ./ace/clean_rtr_tb --ipxact_file verif/tests/networks/<xml file name>

8. For gls, update ace/iosf_sbc_rtr_gls.hdl file and provide
   correct vlog_file for netlist, bydefault it uses p1269, if
   netlist is generated by p1271, use iosf_sbc_rtr_gls_1271.hdl file
   to run tests for gls, provide -gls option at compile/run time
   ex: ace -cc -gls
   ex: ace -x -gls
