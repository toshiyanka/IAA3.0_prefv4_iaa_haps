//----------------------------------------------------------------------------------------
// Intel Proprietary -- Copyright 2016 Intel -- All rights reserved
//----------------------------------------------------------------------------------------
// NOTE: Log history is at end of file.
//----------------------------------------------------------------------------------------
//
//    FILENAME    : stap_params_include.inc
//    DESIGNER    : Sunjiv Sachan
//    PROJECT     : sTAP
//    PURPOSE     : sTAP RTL Parameters
//    VERSION     : 2013WW35_R1.5.2
//    DESCRIPTION :
//       This is a RTL parameter file. Please refer IG for more details.
//----------------------------------------------------------------------------------------
//    PARAMETERS  :
//
//    STAP_SIZE_OF_EACH_INSTRUCTION
//       This parameter specifies the width of instruction register in STAP.
//
//    STAP_ENABLE_TDO_POS_EDGE
//       There is one exception to this rule for a re-time TAP. A re-time TAP
//       may output TDO to be clocked on the rising edge of TCK. This can only
//       be applied at a Region DFx Unit or a Cluster DFx Unitâ€™s level of hierarchy. 
//       If this parameter is high TDO is flopped on the rising edge of TCK
//       else if this parameter is LOW TDO is flopped on the falling edge of TCK.
//
//    STAP_ENABLE_BSCAN
//       This parameter enables the Bounday scan operation in sTAP. Unlike CLTAP, this
//       feature is optional in sTAP
//
//    STAP_NUMBER_OF_MANDATORY_REGISTERS
//       This parameter specifies the number of mandatory registers in STAP.
//       This is not a user definable parameter and its value is fixed to either 2 or 12,
//       as BYPASS, IDCODE are the real mandatory registers, but Boundary Scan Registers
//       also get added if BSCAN is enabled in STAP. All other registers are optional.
//
//    STAP_SECURE_GREEN
//       Opcdes that are visible to all customers. Like SLVIDCODE, BYPASS, BSCAN.
//
//    STAP_SECURE_ORANGE
//       Opcdes that are visible to selected customers.
//
//    STAP_SECURE_RED
//       Opcdes that are visible only to Intel.
//
//    STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK
//       This parameter specifies the number of TAPs that could be present
//       in a TAP NETWORK. This includes the number of STAPs that become part of
//       TAP NETWORK on a STAP
//       This parameter specifies the width of register atap_secsel and tapc_select
//
//    STAP_DFX_SECURE_POLICY_SELECTREG
//       This parameter determines the policy settings of TAPs on Network.
//
//    STAP_ENABLE_TAPC_REMOVE
//       This is a 1-bit DR opcode that will enable the TAP TDI input to pass-thru
//       this TAP to the TAP.7 network. It will gate the internal TDI and TMS signals
//       to the FSM/logic block to logic 1. It will not even add the
//       one clock delay like BYPASS.
//
//    STAP_NUMBER_OF_WTAPS_IN_NETWORK
//       This parameter specifies the number of WTAPs that could be present in a
//       WTAP NETWORK on a STAP
//       This parameter specifies the width of register atap_wtapnw_selectwir.
//
//    STAP_WTAP_NETWORK_ONE_FOR_SERIES_ZERO_FOR_PARALLEL
//       This parameter will help us to identify whether the WTAPs on
//       a WTAP NETWORK are connected serially or parallely. Also this helps in
//       generation of necessary control signals for serial or parallel
//       stitching of WTAPs in the WTAP NETWORK
//
//    STAP_ENABLE_WTAP_CTRL_POS_EDGE
//       This parameter specifies when WTAP is enabled then to use the control
//       signals like stap_fsm_capture_dr and stap_fsm_shift_dr on positive edge clk
//       if this parameter is one or negative edge clk if paramater is zero.
//
//    STAP_NUMBER_OF_REMOTE_TEST_DATA_REGISTERS
//       This parameter specifies the number of User-Defined Remote TEST DATA
//       Registers that the sTAP needs to generate address decode and controls for.
//
//    STAP_ENABLE_RTDR_PROG_RST
//       This parameter specifies the programmable reset option for RTDRs. If the
//       value of this parameter is set to one, then the TAPC_RTDRRSTSEL  &
//       TAPC_TDRRSTEN registers comes into existance. The user has to program
//       which register has the programmable reset option by writing 1 to the
//       corresponding bit position for each of the RTDRs in TAPC_RTDRRSTSEL
//       register. Which programmable reset is applicable would be decided by the
//       value programmed on TAPC_TDRRSTEN register.
//
//    STAP_RTDR_IS_BUSSED
//       This parameter specifies whether the User-Defined Remote TEST DATA Registers
//       related pins are bussed or not.
//
//    STAP_NUMBER_OF_TEST_DATA_REGISTERS
//       This parameter specifies the number of User-Defined Optional TEST DATA
//       Registers that are present in the STAP
//
//    STAP_ENABLE_ITDR_PROG_RST
//       This parameter specifies the programmable reset option for ITDRs. If the
//       value of this parameter is set to one, then the TAPC_ITDRRSTSEL  &
//       TAPC_TDRRSTEN registers comes into existance. The user has to program
//       which register has the programmable reset option by writing 1 to the
//       corresponding bit position for each of the iTDRs in TAPC_ITDRRSTSEL
//       register. Which programmable reset is applicable would be decided by the
//       value programmed on TAPC_TDRRSTEN register.
//
//    STAP_TOTAL_WIDTH_OF_TEST_DATA_REGISTERS
//       This parameter specifies the combined total widths of all the User-Defined Optional
//       TEST DATA Registers that are present in the STAP
//
//    STAP_NUMBER_OF_TOTAL_REGISTERS
//       This is local parameter used to calculate the total number of register
//       that could be present in STAP
//
//    STAP_INSTRUCTION_FOR_DATA_REGISTERS
//       This parameter provides the instruction opcode for all the registers
//       (mandatory + optional) that are present in the STAP
//
//    STAP_NUMBER_OF_BITS_FOR_SLICE
//       This parameter is used as a reference to generate and identify widths of
//       all the register in STAP. This is not a user definable parameter and its
//       value is fixed at 16.
//
//    STAP_SIZE_OF_EACH_TEST_DATA_REGISTER
//       This parameter provides the width of each User-Defined Optional
//       TEST DATA Registers
//
//    STAP_MSB_VALUES_OF_TEST_DATA_REGISTERS
//       This parameter provides the MSB bit position for each of the User-Defined
//       Optional TEST DATA Registers
//
//    STAP_LSB_VALUES_OF_TEST_DATA_REGISTERS
//       This parameter provides the LSB bit position for each of the User-Defined
//       Optional TEST DATA Registers
//
//    STAP_RESET_VALUES_OF_TEST_DATA_REGISTERS
//       This parameter provides the RESET values for each of the User-Defined
//       Optional TEST DATA Registers
//----------------------------------------------------------------------------------------

