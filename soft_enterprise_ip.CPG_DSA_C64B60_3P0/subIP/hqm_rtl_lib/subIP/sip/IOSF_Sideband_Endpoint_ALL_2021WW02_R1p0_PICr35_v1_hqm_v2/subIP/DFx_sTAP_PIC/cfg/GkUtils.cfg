#-------------------------------------------------------------------------------------------------------
##     Package Name: Haswell_Models.pm
##          Project: Haswell/Broadwell
##            Owner: Chancellor Archie (chancellor.archie@intel.com)
##      Description: This package is used to simply define the models, duts, and test list
##                   which are used by the Haswell Model Build tools to create Models.
##
##
##
##   (C) Copyright Intel Corporation, 2008
##   Licensed material --  Program property of Intel Corporation
##   All Rights Reserved
##
##   This program is the property of Intel Corporation and is furnished
##   pursuant to a written license agreement. It may not be used, reproduced,
##   or disclosed to others except in accordance with the terms and conditions
##   of that agreement
##-------------------------------------------------------------------------------------------------------
##-------------------------------------------------------------------------------------------------------
##   Haswell/Broadwell Model Hierarchy/Dut Configuration
##
##-------------------------------------------------------------------------------------------------------

## Do for common file.
do "GkUtils.hdk.common.cfg";
#use lib "/p/ccgda/FE/tools/gk-utils_command_generator/latest/";
use lib "/p/hdk/rtl/proj_tools/gkutils_flowGen/latest/gk-utils_command_generator/";
use GK_Utils;

my $site = $ENV{EC_SITE};

#$GkConfig{modelSetupCmd} = "source $ENV{MODEL_ROOT}/env_source";
my $smart_turnin = 1; 

$Models{general_cmds} = [
    {

        'NAME'         => 'build',
        'CMDS'         => "simbuild -dut <DUT> -logprefix <JOB_NAME> -ace_args ace -cc -ace_args- -nf",
    },

    {

        'NAME'         => 'lintra_build',
        'CMDS'         => "simbuild -dut <DUT> -logprefix <JOB_NAME> -ace_args  ace -ccolt -ASSIGN -mc=stap_lint_model -lira_compile_opts \'-mfcu\' -lintra_exe_opts \'-r 50514  -r 60088  -r 68094 -r 68099 -r 68000\' -ace_args- -nf",
        'DEPENDENCY'   => {"build" => "Success"},
    },

    

    {

        'NAME'         => 'lintra_run',
        'CMDS'         => "simbuild -dut <DUT> -logprefix <JOB_NAME> -ace_args ace -sc -t lintra/stap -trsd lintra_RTL -lintra_exe_opts \'-r 50514  -r 60088  -r 68094 -r 68099 -r 68000\' -ace_args- -nf",
        'DEPENDENCY'   => {"lintra_build" => "Success"},
    },

     {

        'NAME'         => 'lintra_svtb',
        'CMDS'         => "simbuild -dut <DUT> -logprefix <JOB_NAME> -ace_args source tools/svtb_lintra/run_svtb_lintra pwa_svtb -ace_args- -nf",
        'DEPENDENCY'   => {"lintra_run" => "Success"},
    },


    {

        'NAME'         => 'simbuild_CDC',
        'CMDS'         => "simbuild -dut <DUT> -logprefix <JOB_NAME> -ace_args source $ENV{MODEL_ROOT}/tools/cdc/run_qcdc -ace_args- -nf",
        'DEPENDENCY'   => {"build" => "Success"},
    },

    {

        'NAME'         => 'simbuild_collage',
        'CMDS'         => "simbuild -dut <DUT> -logprefix <JOB_NAME> -s all +s collage -nf ",
        'DEPENDENCY'   => {"build" => "Success"},
    },

    {

        'NAME'         => 'DOA',
        'CMDS'         => "simbuild -dut <DUT> -logprefix <JOB_NAME> -ace_args ace -x -ace_args- -nf",
        'DEPENDENCY'   => {"build" => "Success"},
    },

    {
        'NAME'         => 'zircon_check',
        'ENV_ARGS'     => "source $ENV{MODEL_ROOT}/tools/zirconqa/run_zircon",
        'CMDS'         => "perl $ENV{MODEL_ROOT}/scripts/zircon_score_check.pl",
    },
#    {

#        'LIST'         => 'exi_sanity.list',
#        'NAME'         => 'DOA',
#        #'CMDS'         => "verif/tests/exi_sanity.list -C <NBCLASS> -ace -trex -ace_args -simv_args +EQMONITOR_OFF -ace_args- -disable_triage -trex- -save",
#        'CMDS'         => "verif/tests/exi_sanity.list -C \"<NBCLASS>\" -ace -trex -ace_args -mcrd $ENV{MODEL_ROOT}/target/dci/CNP/aceroot/results -ace_args- -disable_triage -trex- -save",
#        'CMD_TYPE'  => 'simregress',
#        'DEPENDENCY'   => {"build" => "Success"},
#    },

#    {
        
#        'LIST'         => 'qual_testlist.list',
#        'NAME'         => 'DOA_E2E',
#        'CMDS'         => "verif/testlists/qual_testlist.list -C \"<NBCLASS>\" -ace -trex -ace_args -vlog_opts +define+PDMI_E2EPAR -simv_args +EQMONITOR_OFF -ace_args- -disable_triage -trex- -save",
#        'DEPENDENCY'   => {"compile_E2E" => "Success"},
#    },

    {
        NAME     => 'febe_ip_turnin',
        CMD_TYPE => 'febe',
        CMDS     => '-dut <DUT> -s all +s build_blocksinfo +s lintra_build +s lintra_elab +s gen_collateral +s dc',
        #CMDS     => '-gkturnin -flow ip_turnin -sched nbfeeder -parallel -dut <DUT> -no_local',
        NBFLOW   => 1,
        NBFLOW_SUBTASK_PREFIX => 'febe_gkturnin',
        USE_ALT_FLOWBEE => 2,
        DEPENDENCY => {"lintra_run" => "Success"},
    },

    {
        NAME     => 'febe_ip_fev',
        CMD_TYPE => 'febe',
        #CMDS     => '-flow ip_turnin -gkturnin -s lintra_build -sched nbfeeder -parallel -dut <DUT> -no_local',
        CMDS     => '-gkturnin -s all +s fv -sched nbfeeder -parallel -dut <DUT> -no_local',
        #CMDS     => '-flow ip_turnin -gkturnin -s all +s lintra_build +s .lintra_elab +s spyglass_build +s .spyglass_lp +s .sgdft +s .dc +s .fv +s .caliber -sched nbfeeder -parallel -dut <DUT> -no_local',
        NBFLOW   => 1,
        NBFLOW_SUBTASK_PREFIX => 'febe_gkturnin',
        USE_ALT_FLOWBEE => 2,
        DEPENDENCY => {"lintra_run" => "Success"},
    },



    {
        NAME     => 'febe_ip_release',
        CMD_TYPE => 'febe',
        #CMDS     => '-gkturnin -s lintra_build -sched nbfeeder -parallel -dut <DUT> -no_local',
        #CMDS     => '-gkturnin -s all +s lintra_build +s .lintra_elab +s spyglass_build +s .spyglass_lp +s .sgdft +s .dc +s .fv +s .caliber -sched nbfeeder -parallel -dut <DUT> -no_local',
        CMDS     => '-gkturnin -s lintra_build -sched nbfeeder -parallel -dut <DUT> -no_local',
        NBFLOW   => 1,
        NBFLOW_SUBTASK_PREFIX => 'febe_gkturnin',
        USE_ALT_FLOWBEE => 2,
        DEPENDENCY => {"lintra_run" => "Success"},
    },

    ];



%flow_cfg = (
    filter => {
        stap => {
            run_tools => [
                "build",
                "simbuild_collage",
                "lintra_build",
                "lintra_run",
                "DOA",
            ],
        },

    },
    turnin => {
       stap => {
            run_tools => [
             "build",
                #"simbuild_collage",
                "lintra_build",
                "lintra_run",
                  #"lintra_svtb",
                #"zircon_check",
                "DOA",
                #"febe_ip_turnin",
            ],
        },

    },
      mock => {
        stap => {
            run_tools => [
                "build",
                "lintra_build",
                "lintra_run",
                "zircon_check",
                #"lintra_svtb",
                "DOA",
            ],
        },

    },
    release => {
        stap => {
            run_tools => [
              "build",
                "simbuild_collage",
                "lintra_build",
                "lintra_run",
                "zircon_check",
                #"lintra_svtb",
                "DOA",        
                "febe_ip_release",  
            ],
        },
    },
);

##############################################################
### %resources
### specify the netbatch parameters.
###############################################################
#%resource = (
#    iind => {
#        stap => {
#            default => {
#                nb_qslot => "/EIG/INFRA-BA/RTL/GK_showstopper",
#                nb_class => "SLES11_4G_nosusp",
#                nb_pool => "iind_critical",
#                #nb_exec_limits => "720m:900m",
#            },
#            mock =>{
#                nb_qslot => "/EIG/INFRA-BA/RTL/DFX",
#                nb_pool => "iind_normal",
#            },
#        },
#    },
#
#);


@{$Models{general_cmds}} = GK_Utils::regenerateGeneralCmd(\%flow_cfg,\%Models,\%resource,$smart_turnin);
