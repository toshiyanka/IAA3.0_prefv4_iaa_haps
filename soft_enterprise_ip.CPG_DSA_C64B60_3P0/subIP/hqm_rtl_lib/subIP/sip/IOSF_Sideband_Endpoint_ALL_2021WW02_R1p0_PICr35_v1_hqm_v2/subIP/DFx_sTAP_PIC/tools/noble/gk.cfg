#!/usr/intel/bin/perl

print "- Info : Please Wait...reading in config file\n";
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);

our (%tools_cfg,%flow_cfg,%resource,$env_source_run_script,$dep_template);

$env_source_run_script = "$ENV{IP_ROOT}/tools/noble/env_source_run.csh";
$dep_template = "$ENV{IP_ROOT}/tools/noble/gk.dep";

my $current_site = "png";
   $current_site = $ENV{SITE} if(defined $ENV{SITE} && $ENV{SITE} ne "");

###############################################################
## %tools_cfg
## specify configuration for each noble tools. 
## Valid options : 
##  1.cmdline - `command lines that are executable for the tool.
##  2.netbatch - specify the tool to run on netbatch. [optional] 
##  3.template - specify the command line template file for the tool. [optional]
##  4.bits
##  5.force_pass - force the particular tool to pass at the end of the noble execution
## example :
##      %tools_cfg = (
##          toolA => {
##              cmdline => "ace -g -cc",
##              netbatch => 0,                 
##              template => "acereg.cmdline", 
##        bits => "32",
##              force_pass => 1,            ### Force the toolA to pass ###             
##          },
##      ),
##############################################################

%tools_cfg = (
    build => {
        #cmdline => "simbuild -dut stap -ace_args ace -g -egc -cc -ace_args- -nf",
        cmdline => "simbuild -dut stap -ace_args ace -cc -ace_args- -nf",
        netbatch => 1,
        nb_exec_limits => "30m:60m",

    },

    lintra_build  => {
        cmdline => "simbuild -dut stap -ace_args ace -ccolt -ASSIGN -mc=stap_lint_model -lira_compile_opts -mfcu -lintra_exe_opts ' -r 50514 -r 60088 -r 68094 -r 68099' -ace_args- -nf",
        netbatch => 1,
        nb_exec_limits => "120m:200m",
    },

    lintra_run  => {
        cmdline => "simbuild -dut stap -ace_args ace -sc -t lintra/stap -lintra_exe_opts ' -r 50514 -r 60088 -r 68094 -r 68099' -trsd lintra_RTL -ace_args- -nf",
        netbatch => 1,
        nb_exec_limits => "120m:200m",
    },

    DOA => {
        cmdline => "simbuild -dut stap -ace_args ace -x -ace_args- -nf",
        netbatch => 1,
        #template => "simbuild_acereg_gk.cmdline",
        nb_exec_limits => "120m:200m",
    },

    LEVEL0 => {
        cmdline => "simbuild -dut stap -ace_args acereg -x -tl level0.list -nocheck_model -nospinner -ace_args- -nf",
        netbatch => 1,
        template => "simbuild_acereg_gk.cmdline",
        nb_exec_limits => "120m:200m",
    },

    simbuild_collage => {
        cmdline => "simbuild -dut stap -s all +s collage",
        netbatch => 1,
        #template => "simbuild_acereg_gk.cmdline",
        nb_exec_limits => "120m:200m",
    },
 
    febe_ip_turnin => {
        #cmdline => "febe -dut stap -flow ip_turnin -s lintra_build -parallel -sched nbfeeder -no_local",
        cmdline => "febe -dut stap -flow ip_turnin -s lintra_build",
        netbatch => 1,
        nb_exec_limits => "120m:200m",
    },

    febe_ip_release => {
        #cmdline => "febe -dut stap -s lintra_build -parallel -sched nbfeeder -no_local",
        cmdline => "febe -dut stap -s lintra_build",
        netbatch => 1,
        nb_exec_limits => "240m:360m",
    },

);

###############################################################
## %flow_cfg
## specify all aliases for a tool or groups of tools.
## example : 
##      %flow_cfg = (
##          alias_name => {
##              soc_variation => {
##                  run_tools => [
##                      toolA:bits 
##                  ],
##                  tools_cfg => {
##                      toolA => {
##                          ## over-write configuration of toolA ##
##                      }
##                  }
##              }
##          },
##      ),
##############################################################
%flow_cfg = (
    filter => {
        CNPLP => {
            run_tools =>[
                "build",  ### over-write the bits to 64 for csme when run build step
                #"DOA",        
            ],
        },
    },   # end for filter

    integrate => {
        CNPLP => {
            run_tools =>[
                "build",
                "simbuild_collage",
                "lintra_build",
                "lintra_run",
                "DOA",        
                #"LEVEL0",        
                "febe_ip_turnin",        
            ],
        },
    },   # end for integrate

    release => {
        CNPLP => {
            run_tools =>[
                "build",
                "simbuild_collage",
                "lintra_build",
                "lintra_run",
                "DOA",        
                #"LEVEL0",        
                "febe_ip_release",        
            ],
        },
    },  # end for release
);

##########################################################
## %resources
## specify the netbatch parameters.
###########################################################
%resource = (
    iind => {  
        #nb_pool  => "BLR_VP",
        nb_pool  => "iind_critical",
        #nb_pool  => "iind_critical",
        #nb_qslot => "/EIG/INFRA-BA/RTL/DFX",
        nb_qslot => "/EIG/INFRA-BA/RTL/GK_showstopper",
        nb_class => "SLES11_4G_nosusp",
        nb_exec_limits => "400m:900m", 
    },
);

##&stage_exception("lintra",2);
print "- Info : Done read in config file...\n\n";

sub stage_exception{
    @abbr = qw(Sunday Monday Tuesday Wednesday Thursday Friday Saturday);
    
    ($remove_tool, $day_of_week) = @_; 
         foreach my $stage (sort keys %flow_cfg){
             foreach my $variation (sort keys %{$flow_cfg{$stage}}){      
                if(exists $flow_cfg{$stage}{$variation}{run_tools}){
                    @tools = @{$flow_cfg{$stage}{$variation}{run_tools}};
                        foreach my $index (0..$#tools){      
                            if (($tools[$index] eq $remove_tool ) && ($wday == $day_of_week)){
                                print "Warning : $remove_tool should not execute on $abbr[$wday].\n";
                                delete $tools[$index];

                            }
                            #if ((exists $flow_cfg{$stage} ) && ($wday == $day_of_week)){
                            #    print "Warning : $stage should not execute on $abbr[$wday].\n";
                            #    delete($flow_cfg{$stage});
                            #}
                        }
                    delete($flow_cfg{$stage}{$variation}{run_tools});
                    @tools = grep defined, @tools;
                    @{$flow_cfg{$stage}{$variation}{run_tools}} = @tools;
                 }

            }
            
        }
}
