
module stap_fsm ( ftap_tms, ftap_tck, powergood_rst_trst_b, tapc_remove, 
        stap_fsm_tlrs, stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr, 
        stap_selectwir, stap_selectwir_neg, sn_fwtap_capturewr, 
        sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b, 
        stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg, 
        stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr, 
        stap_fsm_update_dr );
  input ftap_tms, ftap_tck, powergood_rst_trst_b, tapc_remove;
  output stap_fsm_tlrs, stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr,
         stap_selectwir, stap_selectwir_neg, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b,
         stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg,
         stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr;
  wire   state_ps_14_0, state_ps_13_0, state_ps_12_0, state_ps_9_0,
         state_ps_6_0, state_ps_2_0, tms_bit_3_0, tms_bit_2_0, tms_bit_1_0,
         tms_bit_0_0, N424, N425, N426, N427, N429, N430, N431, N432, N433,
         N434, N435, N436, N437, N438, N439, N440, N441, N442, N443, N444, n1,
         n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58,
         n59, n60, n61, n62, n69;
  assign sn_fwtap_rti = 1'b0;
  assign sn_fwtap_wrst_b = 1'b1;
  assign sn_fwtap_updatewr = 1'b0;
  assign sn_fwtap_shiftwr = 1'b0;
  assign sn_fwtap_capturewr = 1'b0;
  assign stap_selectwir_neg = 1'b0;
  assign stap_selectwir = 1'b0;

  d04fyn8fld0a5 stap_fsm_shift_ir_neg_reg ( .d(stap_fsm_shift_ir), .clkb(
        ftap_tck), .rb(n69), .psb(1'b1), .o(stap_fsm_shift_ir_neg) );
  d04fyn03ld0a5 tms_bit_reg_3 ( .d(N427), .clk(ftap_tck), .rb(n69), .o(
        tms_bit_3_0) );
  d04fyn03ld0a5 tms_bit_reg_2 ( .d(N426), .clk(ftap_tck), .rb(n69), .o(
        tms_bit_2_0) );
  d04fyn03ld0a5 tms_bit_reg_0 ( .d(N424), .clk(ftap_tck), .rb(n69), .o(
        tms_bit_0_0) );
  d04fyn03ld0a5 tms_bit_reg_1 ( .d(N425), .clk(ftap_tck), .rb(n69), .o(
        tms_bit_1_0) );
  d04fyn03ld0a5 state_ps_reg_6 ( .d(N435), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_6_0) );
  d04fyn03ld0a5 state_ps_reg_7 ( .d(N436), .clk(ftap_tck), .rb(n69), .o(
        stap_fsm_e2dr) );
  d04fyn03ld0a5 state_ps_reg_8 ( .d(N437), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_update_dr) );
  d04fyn03ld0a5 state_ps_reg_1 ( .d(N430), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_rti) );
  d04fyn03ld0a5 state_ps_reg_13 ( .d(N442), .clk(ftap_tck), .rb(n69), .o(
        state_ps_13_0) );
  d04fyn03ld0a5 state_ps_reg_3 ( .d(N432), .clk(ftap_tck), .rb(n69), .o(
        stap_fsm_capture_dr) );
  d04fyn03ld0a5 state_ps_reg_2 ( .d(N431), .clk(ftap_tck), .rb(n69), .o(
        state_ps_2_0) );
  d04fyn03ld0a5 state_ps_reg_5 ( .d(N434), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_e1dr) );
  d04fyn03ld0a5 state_ps_reg_14 ( .d(N443), .clk(ftap_tck), .rb(n69), .o(
        state_ps_14_0) );
  d04fyn03ld0a5 state_ps_reg_9 ( .d(N438), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_9_0) );
  d04fyn03ld0a5 state_ps_reg_12 ( .d(N441), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_12_0) );
  d04fyn03ld0a5 state_ps_reg_10 ( .d(N439), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_capture_ir) );
  d04fyn03ld0a5 state_ps_reg_4 ( .d(N433), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_shift_dr) );
  d04fyn0cld0c0 state_ps_reg_0 ( .d(N429), .clk(ftap_tck), .psb(
        powergood_rst_trst_b), .o(stap_fsm_tlrs) );
  d04fyn03ld0a5 state_ps_reg_11 ( .d(N440), .clk(ftap_tck), .rb(n69), .o(
        stap_fsm_shift_ir) );
  d04fyf03ld0e0 state_ps_reg_15 ( .d(N444), .clk(ftap_tck), .rb(n69), .o(
        stap_fsm_update_ir) );
  d04bfn00lnub5 syn_3 ( .a(powergood_rst_trst_b), .o(n69) );
  d04non03ln0b0 syn_4 ( .a(state_ps_9_0), .b(stap_fsm_capture_ir), .c(n24), 
        .o1(n1) );
  d04nan02ln0a5 syn_5 ( .a(state_ps_14_0), .b(n1), .o1(n26) );
  d04non03ln0b0 syn_6 ( .a(stap_fsm_update_ir), .b(n3), .c(state_ps_6_0), .o1(
        n11) );
  d04non03ln0b0 syn_7 ( .a(stap_fsm_shift_dr), .b(stap_fsm_e1dr), .c(n29), 
        .o1(n2) );
  d04nan02ln0a5 syn_8 ( .a(state_ps_2_0), .b(n2), .o1(n50) );
  d04nob02ln0b0 syn_15 ( .a(tms_bit_1_0), .b(stap_fsm_tlrs), .out(N426) );
  d04nob02ln0b0 syn_16 ( .a(tms_bit_0_0), .b(stap_fsm_tlrs), .out(N425) );
  d04nob02ln0b0 syn_17 ( .a(tms_bit_2_0), .b(stap_fsm_tlrs), .out(N427) );
  d04non02ln0b0 syn_18 ( .a(tapc_remove), .b(ftap_tms), .o1(n57) );
  d04non02ln0b0 syn_19 ( .a(n57), .b(stap_fsm_tlrs), .o1(N424) );
  d04inn20ln0b0 syn_20 ( .a(stap_fsm_e2dr), .o1(n7) );
  d04inn20ln0b0 syn_21 ( .a(stap_fsm_update_dr), .o1(n30) );
  d04non03ln0b0 syn_22 ( .a(state_ps_2_0), .b(stap_fsm_e1dr), .c(
        stap_fsm_shift_dr), .o1(n35) );
  d04inn20ln0b0 syn_23 ( .a(stap_fsm_capture_dr), .o1(n28) );
  d04nan02ln0b0 syn_24 ( .a(n35), .b(n28), .o1(n8) );
  d04inn00ln0a5 syn_25 ( .a(n8), .o1(n32) );
  d04nan03ln0b0 syn_26 ( .a(n7), .b(n30), .c(n32), .o1(n3) );
  d04non03ln0b0 syn_27 ( .a(stap_fsm_tlrs), .b(state_ps_12_0), .c(
        stap_fsm_shift_ir), .o1(n17) );
  d04non03ln0b0 syn_28 ( .a(stap_fsm_capture_ir), .b(state_ps_9_0), .c(
        state_ps_14_0), .o1(n13) );
  d04nan02ln0b0 syn_29 ( .a(n17), .b(n13), .o1(n4) );
  d04non02ln0b0 syn_30 ( .a(state_ps_13_0), .b(n4), .o1(n10) );
  d04inn20ln0b0 syn_31 ( .a(stap_fsm_rti), .o1(n12) );
  d04nan02ln0b0 syn_32 ( .a(n10), .b(n12), .o1(n6) );
  d04non02ln0b0 syn_33 ( .a(n3), .b(n6), .o1(n15) );
  d04nab03ln0b0 syn_34 ( .a(stap_fsm_update_ir), .b(state_ps_6_0), .c(n15), 
        .out(n41) );
  d04inn20ln0b0 syn_35 ( .a(n57), .o1(n59) );
  d04nan04ln0b0 syn_36 ( .a(tms_bit_0_0), .b(tms_bit_3_0), .c(tms_bit_2_0), 
        .d(tms_bit_1_0), .o1(n56) );
  d04nan02ln0b0 syn_37 ( .a(n59), .b(n56), .o1(n39) );
  d04non02ln0b0 syn_38 ( .a(n41), .b(n39), .o1(N436) );
  d04inn00ln0a5 syn_39 ( .a(n4), .o1(n5) );
  d04nan04ln0b0 syn_40 ( .a(state_ps_13_0), .b(n11), .c(n5), .d(n12), .o1(n44)
         );
  d04non02ln0b0 syn_41 ( .a(n44), .b(n39), .o1(N443) );
  d04non03ln0b0 syn_42 ( .a(state_ps_6_0), .b(stap_fsm_update_ir), .c(n6), 
        .o1(n31) );
  d04nan02ln0b0 syn_43 ( .a(n31), .b(n7), .o1(n27) );
  d04non03ln0b0 syn_44 ( .a(n8), .b(n30), .c(n27), .o1(n9) );
  d04cak04ln0b0 syn_45 ( .a(stap_fsm_rti), .b(n11), .c(n10), .d(n9), .o1(n52)
         );
  d04non02ln0b0 syn_46 ( .a(state_ps_12_0), .b(stap_fsm_shift_ir), .o1(n14) );
  d04nab03ln0b0 syn_47 ( .a(state_ps_13_0), .b(n12), .c(n11), .out(n18) );
  d04nob02ln0b0 syn_48 ( .a(n13), .b(n18), .out(n16) );
  d04nan03ln0b0 syn_49 ( .a(stap_fsm_tlrs), .b(n14), .c(n16), .o1(n54) );
  d04nab03ln0b0 syn_50 ( .a(state_ps_6_0), .b(stap_fsm_update_ir), .c(n15), 
        .out(n43) );
  d04cak04ln0b0 syn_51 ( .a(n52), .b(n54), .c(n43), .d(n59), .o1(N430) );
  d04cak01ln0b0 syn_52 ( .a(n52), .b(n43), .c(n39), .o1(N431) );
  d04nab02lnsb0 syn_53 ( .a(stap_fsm_tlrs), .b(n16), .out(n19) );
  d04inn20ln0b0 syn_54 ( .a(stap_fsm_shift_ir), .o1(n20) );
  d04nab03ln0b0 syn_55 ( .a(n19), .b(n20), .c(state_ps_12_0), .out(n25) );
  d04cak01ln0b0 syn_56 ( .a(n25), .b(n44), .c(n59), .o1(N442) );
  d04nab02ln0b0 syn_57 ( .a(n18), .b(n17), .out(n24) );
  d04non02ln0b0 syn_58 ( .a(state_ps_14_0), .b(n24), .o1(n23) );
  d04nab03ln0b0 syn_59 ( .a(stap_fsm_capture_ir), .b(state_ps_9_0), .c(n23), 
        .out(n55) );
  d04non02ln0b0 syn_60 ( .a(n59), .b(n55), .o1(N439) );
  d04inn20ln0b0 syn_61 ( .a(state_ps_9_0), .o1(n22) );
  d04non03ln0b0 syn_62 ( .a(state_ps_12_0), .b(n20), .c(n19), .o1(n21) );
  d04cak04ln0b0 syn_63 ( .a(stap_fsm_capture_ir), .b(n23), .c(n22), .d(n21), 
        .o1(n53) );
  d04cak01ln0b0 syn_64 ( .a(n53), .b(n26), .c(n59), .o1(N440) );
  d04ann02lnsb5 syn_65 ( .a(n26), .b(n25), .o(n46) );
  d04non02ln0b0 syn_66 ( .a(n46), .b(n39), .o1(N444) );
  d04non02ln0b0 syn_67 ( .a(n53), .b(n39), .o1(N441) );
  d04non02ln0b0 syn_68 ( .a(stap_fsm_update_dr), .b(n27), .o1(n34) );
  d04nan02ln0b0 syn_69 ( .a(n34), .b(n28), .o1(n29) );
  d04non02ln0b0 syn_70 ( .a(n59), .b(n50), .o1(N432) );
  d04non02ln0b0 syn_71 ( .a(n50), .b(n39), .o1(N438) );
  d04non02ln0b0 syn_72 ( .a(state_ps_2_0), .b(n29), .o1(n33) );
  d04inn20ln0b0 syn_73 ( .a(stap_fsm_shift_dr), .o1(n38) );
  d04nan03ln0b0 syn_74 ( .a(stap_fsm_e1dr), .b(n33), .c(n38), .o1(n42) );
  d04cak01ln0b0 syn_75 ( .a(n42), .b(n41), .c(n59), .o1(N435) );
  d04nan04ln0b0 syn_76 ( .a(stap_fsm_e2dr), .b(n32), .c(n31), .d(n30), .o1(n45) );
  d04cak01ln0b0 syn_77 ( .a(n42), .b(n45), .c(n39), .o1(N437) );
  d04inn00ln0a5 syn_78 ( .a(n33), .o1(n37) );
  d04nan03ln0b0 syn_79 ( .a(stap_fsm_capture_dr), .b(n35), .c(n34), .o1(n36)
         );
  d04con04ln0b0 syn_80 ( .b(stap_fsm_e1dr), .c(n38), .d(n37), .a(n36), .o1(n48) );
  d04inn20ln0b0 syn_81 ( .a(n48), .o1(n40) );
  d04cak01ln0b0 syn_82 ( .a(n40), .b(n45), .c(n59), .o1(N433) );
  d04non02ln0b0 syn_83 ( .a(n40), .b(n39), .o1(N434) );
  d04nan02ln0a5 syn_84 ( .a(n42), .b(n41), .o1(n49) );
  d04nan04ln0b0 syn_85 ( .a(n46), .b(n45), .c(n44), .d(n43), .o1(n47) );
  d04non03ln0b0 syn_86 ( .a(n49), .b(n48), .c(n47), .o1(n51) );
  d04nan04ln0b0 syn_87 ( .a(n53), .b(n52), .c(n51), .d(n50), .o1(n62) );
  d04nan02ln0b0 syn_88 ( .a(n55), .b(n54), .o1(n61) );
  d04non02ln0b0 syn_89 ( .a(n57), .b(n56), .o1(n58) );
  d04cak01ln0b0 syn_90 ( .a(n59), .b(n61), .c(n58), .o1(n60) );
  d04con01ln0b0 syn_91 ( .b(n62), .c(n61), .a(n60), .o1(N429) );
endmodule


module stap_irreg ( stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir, 
        stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b, 
        stap_irreg_ireg, stap_irreg_ireg_nxt, stap_irreg_serial_out, 
        stap_irreg_shift_reg );
  output [7:0] stap_irreg_ireg;
  output [7:0] stap_irreg_ireg_nxt;
  output [7:0] stap_irreg_shift_reg;
  input stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir,
         stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b;
  output stap_irreg_serial_out;
  wire   N10, n1, n2, n3, n4, n5, n6, n7, n8, n9, n100, n11, n12, n13, n14,
         n15, n16, n17, n18, n19, n20, n23, n25, n27, n29, n31, n33, n35, n37,
         n38, n39, n40, n41, n42, n43, n44, n45, n21, n47;

  d04con03ln0b0 syn_14 ( .a(n13), .b(n100), .c(n14), .d(n15), .o1(n39) );
  d04con03ln0b0 syn_16 ( .a(n13), .b(n15), .c(n14), .d(n16), .o1(n40) );
  d04con03ln0b0 syn_18 ( .a(n13), .b(n16), .c(n14), .d(n17), .o1(n41) );
  d04con03ln0b0 syn_20 ( .a(n13), .b(n17), .c(n14), .d(n18), .o1(n42) );
  d04con03ln0b0 syn_22 ( .a(n13), .b(n18), .c(n14), .d(n19), .o1(n43) );
  d04con03ln0b0 syn_24 ( .a(n20), .b(n14), .c(n13), .d(n19), .o1(n44) );
  d04fyn8fld0a5 stap_irreg_ireg_reg_2 ( .d(n27), .clkb(ftap_tck), .rb(1'b1), 
        .psb(n47), .o(stap_irreg_ireg[2]) );
  d04fyn03ld0a5 shift_reg_reg_3 ( .d(n41), .clk(ftap_tck), .rb(n47), .o(
        stap_irreg_shift_reg[3]) );
  d04fyn03ld0a5 shift_reg_reg_2 ( .d(n40), .clk(ftap_tck), .rb(n47), .o(
        stap_irreg_shift_reg[2]) );
  d04fyn03ld0a5 shift_reg_reg_7 ( .d(n45), .clk(ftap_tck), .rb(n47), .o(
        stap_irreg_shift_reg[7]) );
  d04fyn03ld0a5 shift_reg_reg_1 ( .d(n39), .clk(ftap_tck), .rb(n47), .o(
        stap_irreg_shift_reg[1]) );
  d04fyn03ld0a5 shift_reg_reg_6 ( .d(n44), .clk(ftap_tck), .rb(n47), .o(
        stap_irreg_shift_reg[6]) );
  d04fyn03ld0a5 shift_reg_reg_4 ( .d(n42), .clk(ftap_tck), .rb(n47), .o(
        stap_irreg_shift_reg[4]) );
  d04fyn03ld0a5 shift_reg_reg_5 ( .d(n43), .clk(ftap_tck), .rb(n47), .o(
        stap_irreg_shift_reg[5]) );
  d04fyn0cld0c0 shift_reg_reg_0 ( .d(n38), .clk(ftap_tck), .psb(n47), .o(
        stap_irreg_serial_out) );
  d04nan02ln0b0 syn_5 ( .a(n3), .b(n4), .o1(n27) );
  d04nan02ln0b0 syn_6 ( .a(n5), .b(n4), .o1(n29) );
  d04non02ln0b0 syn_10 ( .a(stap_fsm_tlrs), .b(n8), .o1(n35) );
  d04non02ln0b0 syn_11 ( .a(stap_fsm_tlrs), .b(n9), .o1(n37) );
  d04non02ln0b0 syn_8 ( .a(stap_fsm_tlrs), .b(n6), .o1(n31) );
  d04non02ln0b0 syn_3 ( .a(stap_fsm_tlrs), .b(n1), .o1(n23) );
  d04non02ln0b0 syn_4 ( .a(stap_fsm_tlrs), .b(n2), .o1(n25) );
  d04non02ln0b0 syn_9 ( .a(stap_fsm_tlrs), .b(n7), .o1(n33) );
  d04orn02lnsb5 syn_27 ( .a(N10), .b(stap_fsm_shift_ir), .o(n13) );
  d04cob13ln0b0 syn_26 ( .a(ftap_tdi), .b(n14), .c(n20), .d(n13), .out(n45) );
  d04cak01ln0b0 syn_13 ( .a(stap_irreg_serial_out), .b(n11), .c(N10), .o1(n12)
         );
  d04con01ln0b0 syn_12 ( .b(n100), .c(n11), .a(n12), .o1(n38) );
  d04orn02ln0b5 syn_29 ( .a(N10), .b(n11), .o(n14) );
  d04fyn8fld0b0 stap_irreg_ireg_reg_7 ( .d(n37), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[7]) );
  d04fyn8fld0b0 stap_irreg_ireg_reg_4 ( .d(n31), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[4]) );
  d04fyn8fld0b0 stap_irreg_ireg_reg_0 ( .d(n23), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[0]) );
  d04fyn8fld0b0 stap_irreg_ireg_reg_5 ( .d(n33), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[5]) );
  d04fyn8fld0b0 stap_irreg_ireg_reg_6 ( .d(n35), .clkb(ftap_tck), .rb(n47), 
        .psb(1'b1), .o(stap_irreg_ireg[6]) );
  d04fyn8fld0b0 stap_irreg_ireg_reg_1 ( .d(n25), .clkb(ftap_tck), .rb(n47), 
        .psb(1'b1), .o(stap_irreg_ireg[1]) );
  d04fyn8fld0b0 stap_irreg_ireg_reg_3 ( .d(n29), .clkb(ftap_tck), .rb(1'b1), 
        .psb(n47), .o(stap_irreg_ireg[3]) );
  d04inn20ln0b0 syn_7 ( .a(stap_fsm_shift_ir), .o1(n11) );
  d04bfn00lnub5 syn_15 ( .a(powergood_rst_trst_b), .o(n47) );
  d04inn20ln0b0 syn_31 ( .a(stap_irreg_shift_reg[7]), .o1(n20) );
  d04inn20ln0b0 syn_32 ( .a(stap_irreg_shift_reg[1]), .o1(n100) );
  d04inn20ln0b0 syn_33 ( .a(stap_irreg_shift_reg[3]), .o1(n16) );
  d04inn20ln0b0 syn_34 ( .a(stap_irreg_shift_reg[2]), .o1(n15) );
  d04inn20ln0b0 syn_35 ( .a(stap_irreg_shift_reg[6]), .o1(n19) );
  d04inn20ln0b0 syn_36 ( .a(stap_irreg_shift_reg[5]), .o1(n18) );
  d04inn20ln0b0 syn_37 ( .a(stap_irreg_shift_reg[4]), .o1(n17) );
  d04orn02lnsb5 syn_38 ( .a(stap_fsm_capture_ir), .b(stap_fsm_tlrs), .o(N10)
         );
  d04inn20ln0b0 syn_39 ( .a(stap_fsm_tlrs), .o1(n4) );
  d04inn20ln0d0 syn_40 ( .a(stap_fsm_update_ir), .o1(n21) );
  d04can03ln0b0 syn_41 ( .a(stap_fsm_update_ir), .b(stap_irreg_shift_reg[1]), 
        .c(n21), .d(stap_irreg_ireg[1]), .o1(n2) );
  d04inn20ln0b0 syn_42 ( .a(n2), .o1(stap_irreg_ireg_nxt[1]) );
  d04can03ln0b0 syn_43 ( .a(stap_fsm_update_ir), .b(stap_irreg_shift_reg[2]), 
        .c(n21), .d(stap_irreg_ireg[2]), .o1(n3) );
  d04inn20ln0b0 syn_44 ( .a(n3), .o1(stap_irreg_ireg_nxt[2]) );
  d04can03ln0b0 syn_45 ( .a(stap_fsm_update_ir), .b(stap_irreg_serial_out), 
        .c(n21), .d(stap_irreg_ireg[0]), .o1(n1) );
  d04inn20ln0b0 syn_46 ( .a(n1), .o1(stap_irreg_ireg_nxt[0]) );
  d04can03ln0b0 syn_47 ( .a(stap_fsm_update_ir), .b(stap_irreg_shift_reg[7]), 
        .c(n21), .d(stap_irreg_ireg[7]), .o1(n9) );
  d04inn20ln0b0 syn_48 ( .a(n9), .o1(stap_irreg_ireg_nxt[7]) );
  d04can03ln0b0 syn_49 ( .a(stap_fsm_update_ir), .b(stap_irreg_shift_reg[6]), 
        .c(n21), .d(stap_irreg_ireg[6]), .o1(n8) );
  d04inn20ln0b0 syn_50 ( .a(n8), .o1(stap_irreg_ireg_nxt[6]) );
  d04can03ln0b0 syn_51 ( .a(stap_fsm_update_ir), .b(stap_irreg_shift_reg[5]), 
        .c(n21), .d(stap_irreg_ireg[5]), .o1(n7) );
  d04inn20ln0b0 syn_52 ( .a(n7), .o1(stap_irreg_ireg_nxt[5]) );
  d04can03ln0b0 syn_53 ( .a(stap_fsm_update_ir), .b(stap_irreg_shift_reg[3]), 
        .c(n21), .d(stap_irreg_ireg[3]), .o1(n5) );
  d04inn20ln0b0 syn_54 ( .a(n5), .o1(stap_irreg_ireg_nxt[3]) );
  d04can03ln0b0 syn_55 ( .a(stap_fsm_update_ir), .b(stap_irreg_shift_reg[4]), 
        .c(n21), .d(stap_irreg_ireg[4]), .o1(n6) );
  d04inn20ln0b0 syn_56 ( .a(n6), .o1(stap_irreg_ireg_nxt[4]) );
  d04bfn00ln0a5 syn_57 ( .a(stap_irreg_serial_out), .o(stap_irreg_shift_reg[0]) );
endmodule


module stap_decoder_1 ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n1, n2, n3;

  d04non03ln0b0 syn_2 ( .a(feature_red_en), .b(feature_orange_en), .c(
        feature_green_en), .o1(n3) );
  d04nan04ln0b0 syn_3 ( .a(stap_irreg_ireg[4]), .b(stap_irreg_ireg[3]), .c(
        stap_irreg_ireg[5]), .d(stap_irreg_ireg[6]), .o1(n2) );
  d04nan04ln0b0 syn_4 ( .a(stap_irreg_ireg[7]), .b(stap_irreg_ireg[0]), .c(
        stap_irreg_ireg[2]), .d(stap_irreg_ireg[1]), .o1(n1) );
  d04non03ln0b0 syn_5 ( .a(n3), .b(n2), .c(n1), .o1(decoder_drselect) );
endmodule


module stap_decoder_0 ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n1, n2, n3, n4;

  d04non03ln0b0 syn_2 ( .a(stap_irreg_ireg[4]), .b(stap_irreg_ireg[6]), .c(
        stap_irreg_ireg[5]), .o1(n1) );
  d04nan03ln0b0 syn_3 ( .a(n1), .b(stap_irreg_ireg[2]), .c(stap_irreg_ireg[3]), 
        .o1(n2) );
  d04non02ln0b0 syn_4 ( .a(stap_irreg_ireg[7]), .b(n2), .o1(n3) );
  d04con04ln0b0 syn_5 ( .b(feature_red_en), .c(feature_orange_en), .d(
        feature_green_en), .a(n3), .o1(n4) );
  d04non03ln0b5 syn_6 ( .a(stap_irreg_ireg[0]), .b(stap_irreg_ireg[1]), .c(n4), 
        .o1(decoder_drselect) );
endmodule


module stap_irdecoder ( powergood_rst_trst_b, stap_irreg_ireg, 
        stap_irreg_ireg_nxt, ftap_tck, feature_green_en, feature_orange_en, 
        feature_red_en, stap_irdecoder_drselect, stap_and_all_bits_irreg );
  input [7:0] stap_irreg_ireg;
  input [7:0] stap_irreg_ireg_nxt;
  output [1:0] stap_irdecoder_drselect;
  input powergood_rst_trst_b, ftap_tck, feature_green_en, feature_orange_en,
         feature_red_en;
  output stap_and_all_bits_irreg;
  wire   decoder_drselect_1_0, decoder_drselect_0_0, N3, n2, n4, n1, n30, n5,
         n6;

  stap_decoder_1 generate_decoder_0_i_stap_decoder ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect_0_0), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  stap_decoder_0 generate_decoder_1_i_stap_decoder ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect_1_0), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  d04orn02lnsb5 syn_3 ( .a(N3), .b(decoder_drselect_0_0), .o(n2) );
  d04nob02ln0b0 syn_4 ( .a(decoder_drselect_1_0), .b(N3), .out(n4) );
  d04fyn8fld0b0 stap_irdecoder_drselect_reg_1 ( .d(n4), .clkb(ftap_tck), .rb(
        1'b1), .psb(powergood_rst_trst_b), .o(stap_irdecoder_drselect[1]) );
  d04fyn8fld5c0 stap_irdecoder_drselect_reg_0 ( .d(n2), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irdecoder_drselect[0]) );
  d04nan04ln0b0 syn_5 ( .a(stap_irreg_ireg_nxt[4]), .b(stap_irreg_ireg_nxt[5]), 
        .c(stap_irreg_ireg_nxt[6]), .d(stap_irreg_ireg_nxt[7]), .o1(n1) );
  d04nan04ln0b0 syn_6 ( .a(stap_irreg_ireg_nxt[0]), .b(stap_irreg_ireg_nxt[1]), 
        .c(stap_irreg_ireg_nxt[2]), .d(stap_irreg_ireg_nxt[3]), .o1(n30) );
  d04con03ln0b0 syn_7 ( .a(decoder_drselect_0_0), .b(decoder_drselect_1_0), 
        .c(n1), .d(n30), .o1(N3) );
  d04nan04ln0b0 syn_10 ( .a(stap_irreg_ireg[2]), .b(stap_irreg_ireg[3]), .c(
        stap_irreg_ireg[0]), .d(stap_irreg_ireg[1]), .o1(n6) );
  d04nan04ln0b0 syn_11 ( .a(stap_irreg_ireg[6]), .b(stap_irreg_ireg[7]), .c(
        stap_irreg_ireg[4]), .d(stap_irreg_ireg[5]), .o1(n5) );
  d04non02ln0b0 syn_12 ( .a(n6), .b(n5), .o1(stap_and_all_bits_irreg) );
endmodule


module stap_drreg ( stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, 
        fdfx_powergood, powergood_rst_trst_b, stap_fsm_capture_dr, 
        stap_fsm_shift_dr, stap_fsm_update_dr, stap_selectwir, ftap_slvidcode, 
        stap_irdecoder_drselect, tdr_data_in, tdr_data_out, 
        sftapnw_ftap_secsel, tapc_select, feature_green_en, feature_orange_en, 
        feature_red_en, tapc_wtap_sel, tapc_remove, stap_drreg_tdo, 
        stap_and_all_bits_irreg, rtdr_tap_tdo, tap_rtdr_tdi, tap_rtdr_capture, 
        tap_rtdr_shift, tap_rtdr_update, tap_rtdr_irdec, tap_rtdr_selectir, 
        tap_rtdr_powergood, tap_rtdr_rti, tap_rtdr_prog_rst_b, stap_fsm_rti );
  input [31:0] ftap_slvidcode;
  input [1:0] stap_irdecoder_drselect;
  input [0:0] tdr_data_in;
  output [0:0] tdr_data_out;
  output [0:0] sftapnw_ftap_secsel;
  output [1:0] tapc_select;
  output [0:0] tapc_wtap_sel;
  output [1:0] stap_drreg_tdo;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  input stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, fdfx_powergood,
         powergood_rst_trst_b, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr, stap_selectwir, feature_green_en,
         feature_orange_en, feature_red_en, stap_and_all_bits_irreg,
         stap_fsm_rti;
  output tapc_remove, tap_rtdr_selectir, tap_rtdr_powergood, tap_rtdr_rti;
  wire   bypass_reg, reset_pulse0, reset_pulse1, slvidcode_reg_31_0,
         slvidcode_reg_30_0, slvidcode_reg_29_0, slvidcode_reg_28_0,
         slvidcode_reg_27_0, slvidcode_reg_26_0, slvidcode_reg_25_0,
         slvidcode_reg_24_0, slvidcode_reg_23_0, slvidcode_reg_22_0,
         slvidcode_reg_21_0, slvidcode_reg_20_0, slvidcode_reg_19_0,
         slvidcode_reg_18_0, slvidcode_reg_17_0, slvidcode_reg_16_0,
         slvidcode_reg_15_0, slvidcode_reg_14_0, slvidcode_reg_13_0,
         slvidcode_reg_12_0, slvidcode_reg_11_0, slvidcode_reg_10_0,
         slvidcode_reg_9_0, slvidcode_reg_8_0, slvidcode_reg_7_0,
         slvidcode_reg_6_0, slvidcode_reg_5_0, slvidcode_reg_4_0,
         slvidcode_reg_3_0, slvidcode_reg_2_0, slvidcode_reg_1_0, N62, n1, n2,
         n3, n5, n6, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54,
         n55, n56, n57, n58, n59, n60, n61, n620, n63, n64, n65, n66, n67, n68,
         n69, n70, n71, n72, n73, n74, n75, n4, n7, n8, n9, n10, n11, n12, n13,
         n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27,
         n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41,
         n42, n43, n76, n91, n92;
  assign tap_rtdr_rti = 1'b0;
  assign tap_rtdr_prog_rst_b[0] = 1'b1;
  assign tap_rtdr_powergood = 1'b1;
  assign tap_rtdr_selectir = 1'b0;
  assign tap_rtdr_irdec[0] = 1'b0;
  assign tap_rtdr_update[0] = 1'b0;
  assign tap_rtdr_shift[0] = 1'b0;
  assign tap_rtdr_capture[0] = 1'b0;
  assign tap_rtdr_tdi[0] = 1'b1;
  assign tapc_remove = 1'b0;
  assign tapc_wtap_sel[0] = 1'b0;
  assign tapc_select[1] = 1'b0;
  assign tapc_select[0] = 1'b0;
  assign sftapnw_ftap_secsel[0] = 1'b0;
  assign tdr_data_out[0] = 1'b0;

  d04fyn03ld0a5 slvidcode_reg_reg_2 ( .d(n74), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_2_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_15 ( .d(n61), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_15_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_14 ( .d(n620), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_14_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_13 ( .d(n63), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_13_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_12 ( .d(n64), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_12_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_11 ( .d(n65), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_11_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_10 ( .d(n66), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_10_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_9 ( .d(n67), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_9_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_8 ( .d(n68), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_8_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_7 ( .d(n69), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_7_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_6 ( .d(n70), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_6_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_5 ( .d(n71), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_5_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_4 ( .d(n72), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_4_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_3 ( .d(n73), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_3_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_31 ( .d(n45), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_31_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_30 ( .d(n46), .clk(ftap_tck), .rb(n91), .o(
        slvidcode_reg_30_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_29 ( .d(n47), .clk(ftap_tck), .rb(n91), .o(
        slvidcode_reg_29_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_28 ( .d(n48), .clk(ftap_tck), .rb(n91), .o(
        slvidcode_reg_28_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_27 ( .d(n49), .clk(ftap_tck), .rb(n91), .o(
        slvidcode_reg_27_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_26 ( .d(n50), .clk(ftap_tck), .rb(n91), .o(
        slvidcode_reg_26_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_25 ( .d(n51), .clk(ftap_tck), .rb(n91), .o(
        slvidcode_reg_25_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_24 ( .d(n52), .clk(ftap_tck), .rb(n91), .o(
        slvidcode_reg_24_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_23 ( .d(n53), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_23_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_22 ( .d(n54), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_22_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_21 ( .d(n55), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_21_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_20 ( .d(n56), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_20_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_19 ( .d(n57), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_19_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_18 ( .d(n58), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_18_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_17 ( .d(n59), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_17_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_16 ( .d(n60), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_16_0) );
  d04fyn03ld0a5 slvidcode_reg_reg_1 ( .d(n44), .clk(ftap_tck), .rb(n92), .o(
        slvidcode_reg_1_0) );
  d04fyn03ld0a5 reset_pulse1_reg ( .d(reset_pulse0), .clk(ftap_tck), .rb(n92), 
        .o(reset_pulse1) );
  d04fyn03ld0a5 reset_pulse0_reg ( .d(1'b1), .clk(ftap_tck), .rb(n91), .o(
        reset_pulse0) );
  d04fyn0cld0c0 slvidcode_reg_reg_0 ( .d(n1), .clk(ftap_tck), .psb(n92), .o(
        stap_drreg_tdo[1]) );
  d04fyn03ld0a5 bypass_reg_reg ( .d(n2), .clk(ftap_tck), .rb(n92), .o(
        bypass_reg) );
  d04nan03ln0b0 syn_3 ( .a(n3), .b(n6), .c(n5), .o1(n1) );
  d04nob02ln0b0 syn_4 ( .a(n75), .b(N62), .out(n2) );
  d04non02ln0c0 syn_5 ( .a(n22), .b(n76), .o1(n9) );
  d04nan02ln0b0 syn_6 ( .a(n6), .b(n5), .o1(n22) );
  d04non02lnse0 syn_7 ( .a(n9), .b(n22), .o1(n42) );
  d04can16ln0b0 syn_8 ( .a(n43), .b(ftap_slvidcode[1]), .c(n41), .d(
        slvidcode_reg_2_0), .e(slvidcode_reg_1_0), .f(n42), .o1(n4) );
  d04inn00ln0a5 syn_9 ( .a(n4), .o1(n44) );
  d04inn20ln0b0 syn_24 ( .a(reset_pulse1), .o1(n7) );
  d04cak01ln0b0 syn_25 ( .a(reset_pulse0), .b(n7), .c(stap_fsm_tlrs), .o1(n6)
         );
  d04nan02lnsd5 syn_26 ( .a(stap_irdecoder_drselect[1]), .b(
        stap_fsm_capture_dr), .o1(n5) );
  d04bfn01ln0d0 syn_27 ( .a(powergood_rst_trst_b), .o(n92) );
  d04bfn00ln0a5 syn_28 ( .a(powergood_rst_trst_b), .o(n91) );
  d04nan02ln0b0 syn_29 ( .a(stap_fsm_shift_dr), .b(stap_irdecoder_drselect[0]), 
        .o1(n8) );
  d04mtk22ln0a5 syn_30 ( .d2(ftap_tdi), .d1(bypass_reg), .s(n8), .o(n75) );
  d04bfn00lnsc0 syn_31 ( .a(n22), .o(n43) );
  d04nan02ln0b0 syn_32 ( .a(stap_irdecoder_drselect[1]), .b(stap_fsm_shift_dr), 
        .o1(n76) );
  d04bfn00lnsc0 syn_33 ( .a(n9), .o(n41) );
  d04can16lnsb0 syn_34 ( .a(n43), .b(ftap_slvidcode[14]), .c(n41), .d(
        slvidcode_reg_15_0), .e(slvidcode_reg_14_0), .f(n42), .o1(n10) );
  d04inn20ln0b0 syn_35 ( .a(n10), .o1(n620) );
  d04can16lnsb0 syn_36 ( .a(n43), .b(ftap_slvidcode[10]), .c(n41), .d(
        slvidcode_reg_11_0), .e(slvidcode_reg_10_0), .f(n42), .o1(n11) );
  d04inn20ln0b0 syn_37 ( .a(n11), .o1(n66) );
  d04can16lnsb0 syn_38 ( .a(n43), .b(ftap_slvidcode[12]), .c(n41), .d(
        slvidcode_reg_13_0), .e(slvidcode_reg_12_0), .f(n42), .o1(n12) );
  d04inn20ln0b0 syn_39 ( .a(n12), .o1(n64) );
  d04can16lnsb0 syn_40 ( .a(n43), .b(ftap_slvidcode[11]), .c(n41), .d(
        slvidcode_reg_12_0), .e(slvidcode_reg_11_0), .f(n42), .o1(n13) );
  d04inn20ln0b0 syn_41 ( .a(n13), .o1(n65) );
  d04can16lnsb0 syn_42 ( .a(n43), .b(ftap_slvidcode[7]), .c(n41), .d(
        slvidcode_reg_8_0), .e(slvidcode_reg_7_0), .f(n42), .o1(n14) );
  d04inn20ln0b0 syn_43 ( .a(n14), .o1(n69) );
  d04can16lnsb0 syn_44 ( .a(n43), .b(ftap_slvidcode[13]), .c(n41), .d(
        slvidcode_reg_14_0), .e(slvidcode_reg_13_0), .f(n42), .o1(n15) );
  d04inn20ln0b0 syn_45 ( .a(n15), .o1(n63) );
  d04can16lnsb0 syn_46 ( .a(n22), .b(ftap_slvidcode[4]), .c(n41), .d(
        slvidcode_reg_5_0), .e(slvidcode_reg_4_0), .f(n42), .o1(n16) );
  d04inn20ln0b0 syn_47 ( .a(n16), .o1(n72) );
  d04can16lnsb0 syn_48 ( .a(n43), .b(ftap_slvidcode[6]), .c(n41), .d(
        slvidcode_reg_7_0), .e(slvidcode_reg_6_0), .f(n42), .o1(n17) );
  d04inn20ln0b0 syn_49 ( .a(n17), .o1(n70) );
  d04can16lnsb0 syn_50 ( .a(n43), .b(ftap_slvidcode[8]), .c(n41), .d(
        slvidcode_reg_9_0), .e(slvidcode_reg_8_0), .f(n42), .o1(n18) );
  d04inn20ln0b0 syn_51 ( .a(n18), .o1(n68) );
  d04can16lnsb0 syn_52 ( .a(n22), .b(ftap_slvidcode[3]), .c(n41), .d(
        slvidcode_reg_4_0), .e(slvidcode_reg_3_0), .f(n42), .o1(n19) );
  d04inn20ln0b0 syn_53 ( .a(n19), .o1(n73) );
  d04can16lnsb0 syn_54 ( .a(n43), .b(ftap_slvidcode[9]), .c(n41), .d(
        slvidcode_reg_10_0), .e(slvidcode_reg_9_0), .f(n42), .o1(n20) );
  d04inn20ln0b0 syn_55 ( .a(n20), .o1(n67) );
  d04can16lnsb0 syn_56 ( .a(n22), .b(ftap_slvidcode[5]), .c(n41), .d(
        slvidcode_reg_6_0), .e(slvidcode_reg_5_0), .f(n42), .o1(n21) );
  d04inn20ln0b0 syn_57 ( .a(n21), .o1(n71) );
  d04can16lnsb0 syn_58 ( .a(n22), .b(ftap_slvidcode[2]), .c(n41), .d(
        slvidcode_reg_3_0), .e(slvidcode_reg_2_0), .f(n42), .o1(n23) );
  d04inn20ln0b0 syn_59 ( .a(n23), .o1(n74) );
  d04can16lnsb0 syn_60 ( .a(n43), .b(ftap_slvidcode[31]), .c(n41), .d(ftap_tdi), .e(slvidcode_reg_31_0), .f(n42), .o1(n24) );
  d04inn20ln0b0 syn_61 ( .a(n24), .o1(n45) );
  d04can16lnsb0 syn_62 ( .a(n43), .b(ftap_slvidcode[18]), .c(n41), .d(
        slvidcode_reg_19_0), .e(slvidcode_reg_18_0), .f(n42), .o1(n25) );
  d04inn20ln0b0 syn_63 ( .a(n25), .o1(n58) );
  d04can16lnsb0 syn_64 ( .a(n43), .b(ftap_slvidcode[16]), .c(n41), .d(
        slvidcode_reg_17_0), .e(slvidcode_reg_16_0), .f(n42), .o1(n26) );
  d04inn20ln0b0 syn_65 ( .a(n26), .o1(n60) );
  d04can16lnsb0 syn_66 ( .a(n43), .b(ftap_slvidcode[23]), .c(n41), .d(
        slvidcode_reg_24_0), .e(slvidcode_reg_23_0), .f(n42), .o1(n27) );
  d04inn20ln0b0 syn_67 ( .a(n27), .o1(n53) );
  d04can16lnsb0 syn_68 ( .a(n43), .b(ftap_slvidcode[17]), .c(n41), .d(
        slvidcode_reg_18_0), .e(slvidcode_reg_17_0), .f(n42), .o1(n28) );
  d04inn20ln0b0 syn_69 ( .a(n28), .o1(n59) );
  d04can16lnsb0 syn_70 ( .a(n43), .b(ftap_slvidcode[20]), .c(n41), .d(
        slvidcode_reg_21_0), .e(slvidcode_reg_20_0), .f(n42), .o1(n29) );
  d04inn20ln0b0 syn_71 ( .a(n29), .o1(n56) );
  d04can16lnsb0 syn_72 ( .a(n43), .b(ftap_slvidcode[15]), .c(n41), .d(
        slvidcode_reg_16_0), .e(slvidcode_reg_15_0), .f(n42), .o1(n30) );
  d04inn20ln0b0 syn_73 ( .a(n30), .o1(n61) );
  d04can16lnsb0 syn_74 ( .a(n43), .b(ftap_slvidcode[22]), .c(n41), .d(
        slvidcode_reg_23_0), .e(slvidcode_reg_22_0), .f(n42), .o1(n31) );
  d04inn20ln0b0 syn_75 ( .a(n31), .o1(n54) );
  d04can16lnsb0 syn_76 ( .a(n43), .b(ftap_slvidcode[19]), .c(n41), .d(
        slvidcode_reg_20_0), .e(slvidcode_reg_19_0), .f(n42), .o1(n32) );
  d04inn20ln0b0 syn_77 ( .a(n32), .o1(n57) );
  d04can16lnsb0 syn_78 ( .a(n43), .b(ftap_slvidcode[21]), .c(n41), .d(
        slvidcode_reg_22_0), .e(slvidcode_reg_21_0), .f(n42), .o1(n33) );
  d04inn20ln0b0 syn_79 ( .a(n33), .o1(n55) );
  d04can16lnsb0 syn_80 ( .a(n43), .b(ftap_slvidcode[30]), .c(n41), .d(
        slvidcode_reg_31_0), .e(slvidcode_reg_30_0), .f(n42), .o1(n34) );
  d04inn20ln0b0 syn_81 ( .a(n34), .o1(n46) );
  d04can16lnsb0 syn_82 ( .a(n43), .b(ftap_slvidcode[26]), .c(n41), .d(
        slvidcode_reg_27_0), .e(slvidcode_reg_26_0), .f(n42), .o1(n35) );
  d04inn20ln0b0 syn_83 ( .a(n35), .o1(n50) );
  d04can16lnsb0 syn_84 ( .a(n43), .b(ftap_slvidcode[27]), .c(n41), .d(
        slvidcode_reg_28_0), .e(slvidcode_reg_27_0), .f(n42), .o1(n36) );
  d04inn20ln0b0 syn_85 ( .a(n36), .o1(n49) );
  d04can16lnsb0 syn_86 ( .a(n43), .b(ftap_slvidcode[25]), .c(n41), .d(
        slvidcode_reg_26_0), .e(slvidcode_reg_25_0), .f(n42), .o1(n37) );
  d04inn20ln0b0 syn_87 ( .a(n37), .o1(n51) );
  d04can16lnsb0 syn_88 ( .a(n43), .b(ftap_slvidcode[29]), .c(n41), .d(
        slvidcode_reg_30_0), .e(slvidcode_reg_29_0), .f(n42), .o1(n38) );
  d04inn20ln0b0 syn_89 ( .a(n38), .o1(n47) );
  d04can16lnsb0 syn_90 ( .a(n43), .b(ftap_slvidcode[28]), .c(n41), .d(
        slvidcode_reg_29_0), .e(slvidcode_reg_28_0), .f(n42), .o1(n39) );
  d04inn20ln0b0 syn_91 ( .a(n39), .o1(n48) );
  d04can16lnsb0 syn_92 ( .a(n43), .b(ftap_slvidcode[24]), .c(n41), .d(
        slvidcode_reg_25_0), .e(slvidcode_reg_24_0), .f(n42), .o1(n40) );
  d04inn20ln0b0 syn_93 ( .a(n40), .o1(n52) );
  d04aon01ln0b0 syn_94 ( .a(stap_fsm_capture_dr), .b(
        stap_irdecoder_drselect[0]), .c(stap_fsm_tlrs), .o(N62) );
  d04oan01ln0b0 syn_95 ( .b(stap_irdecoder_drselect[0]), .c(
        stap_and_all_bits_irreg), .a(bypass_reg), .o(stap_drreg_tdo[0]) );
  d04cab13ln0b0 syn_98 ( .c(n76), .d(stap_drreg_tdo[1]), .a(n76), .b(
        slvidcode_reg_1_0), .out(n3) );
endmodule


module stap_tdomux ( stap_drreg_tdo, stap_fsm_shift_dr, stap_fsm_shift_ir, 
        stap_irdecoder_drselect, stap_irreg_serial_out, stap_fsm_tlrs, 
        ftap_tck, powergood_rst_trst_b, stap_mux_tdo, stap_tdomux_tdoen );
  input [1:0] stap_drreg_tdo;
  input [1:0] stap_irdecoder_drselect;
  input stap_fsm_shift_dr, stap_fsm_shift_ir, stap_irreg_serial_out,
         stap_fsm_tlrs, ftap_tck, powergood_rst_trst_b;
  output stap_mux_tdo, stap_tdomux_tdoen;
  wire   stap_mux_tdo_int, stap_mux_tdo_preflop_int, n1, n3, n5, n9, n2, n4,
         n6, n7;

  d04nob02ln0b0 syn_4 ( .a(n9), .b(stap_fsm_tlrs), .out(n5) );
  d04non02ln0b0 syn_3 ( .a(stap_fsm_tlrs), .b(n1), .o1(n3) );
  d04mtk22ln0a5 i_stap_ctech_lib_mux_2to1_tdo_posedge_i_ctech_lib_mux_2to1_ctech_lib_dcszo ( 
        .d2(stap_mux_tdo_int), .d1(stap_mux_tdo_preflop_int), .s(1'b0), .o(
        stap_mux_tdo) );
  d04fyn8fld0b0 stap_tdomux_tdoen_reg ( .d(n3), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_tdomux_tdoen) );
  d04fyn8fld0b0 stap_mux_tdo_int_reg ( .d(n5), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_mux_tdo_int) );
  d04can03ln0b0 syn_7 ( .a(stap_drreg_tdo[0]), .b(stap_irdecoder_drselect[0]), 
        .c(stap_drreg_tdo[1]), .d(stap_irdecoder_drselect[1]), .o1(n4) );
  d04nan02ln0b0 syn_8 ( .a(stap_fsm_shift_ir), .b(stap_irreg_serial_out), .o1(
        n2) );
  d04con01ln0b0 syn_9 ( .b(n4), .c(stap_fsm_shift_ir), .a(n2), .o1(n7) );
  d04nab03ln0b0 syn_10 ( .a(stap_fsm_tlrs), .b(powergood_rst_trst_b), .c(n7), 
        .out(n6) );
  d04inn20ln0b0 syn_11 ( .a(n6), .o1(stap_mux_tdo_preflop_int) );
  d04non02ln0b0 syn_12 ( .a(stap_fsm_shift_dr), .b(stap_fsm_shift_ir), .o1(n1)
         );
  d04mtk22ln0a5 syn_13 ( .d2(n7), .d1(stap_mux_tdo_int), .s(n1), .o(n9) );
endmodule


module stap_glue ( ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi, 
        stap_tdomux_tdoen, sntapnw_atap_tdo_en, pre_tdo, powergood_rst_trst_b, 
        atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms, 
        ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, atapsslv_tdoen, 
        sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b, 
        sntapnw_ftap_tdi2, sntapnw_atap_tdo2, sntapnw_atap_tdo2_en, 
        sn_fwtap_wrck, stap_mux_tdo, tapc_select, tapc_wtap_sel, tapc_remove, 
        stap_wtapnw_tdo );
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [1:0] tapc_select;
  input [0:0] tapc_wtap_sel;
  input ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi,
         stap_tdomux_tdoen, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms,
         ftapsslv_trst_b, ftapsslv_tdi, sntapnw_atap_tdo2, stap_mux_tdo,
         tapc_remove, stap_wtapnw_tdo;
  output pre_tdo, powergood_rst_trst_b, atap_tdoen, sntapnw_ftap_tck,
         sntapnw_ftap_tms, sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo,
         atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2,
         sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sn_fwtap_wrck;

  assign sntapnw_ftap_trst_b = 1'b1;
  assign sn_fwtap_wrck = 1'b0;
  assign sntapnw_ftap_tdi = 1'b0;
  assign sntapnw_ftap_tms = 1'b1;
  assign sntapnw_ftap_tck = 1'b0;

  d04gbf00ld0c0 i_stap_ctech_lib_clk_buf_tck2_i_ctech_lib_clk_buf_ctech_lib_dcszo ( 
        .clk(ftapsslv_tck), .clkout(sntapnw_ftap_tck2) );
  d04ann02ln0b5 i_stap_ctech_lib_dq_i_ctech_lib_dq_ctech_lib_dcszo ( .a(
        ftap_trst_b), .b(fdfx_powergood), .o(powergood_rst_trst_b) );
  d04bfn00ln0a5 syn_6 ( .a(ftapsslv_trst_b), .o(sntapnw_ftap_trst2_b) );
  d04bfn00ln0a5 syn_7 ( .a(sntapnw_atap_tdo2), .o(atapsslv_tdo) );
  d04bfn00ln0a5 syn_8 ( .a(ftapsslv_tdi), .o(sntapnw_ftap_tdi2) );
  d04bfn00ln0a5 syn_9 ( .a(ftapsslv_tms), .o(sntapnw_ftap_tms2) );
  d04bfn00ln0a5 syn_10 ( .a(sntapnw_atap_tdo2_en[0]), .o(atapsslv_tdoen) );
  d04mtk22ln0a5 syn_11 ( .d2(stap_tdomux_tdoen), .d1(sntapnw_atap_tdo_en[0]), 
        .s(tapc_remove), .o(atap_tdoen) );
  d04bfn00ln0a5 syn_12 ( .a(stap_mux_tdo), .o(pre_tdo) );
endmodule


module stap_dfxsecure_plugin ( fdfx_powergood, fdfx_secure_policy, 
        fdfx_earlyboot_exit, fdfx_policy_update, dfxsecure_feature_en, 
        visa_all_dis, visa_customer_dis, sb_policy_ovr_value, 
        oem_secure_policy );
  input [3:0] fdfx_secure_policy;
  output [2:0] dfxsecure_feature_en;
  input [4:0] sb_policy_ovr_value;
  input [3:0] oem_secure_policy;
  input fdfx_powergood, fdfx_earlyboot_exit, fdfx_policy_update;
  output visa_all_dis, visa_customer_dis;
  wire   dfxsecure_feature_lch_3_0, dfxsecure_feature_lch_2_0,
         dfxsecure_feature_lch_1_0, dfxsecure_feature_lch_0_0, n1, n2, n3, n4,
         n5;
  assign visa_customer_dis = 1'b1;
  assign visa_all_dis = 1'b1;

  d04lyn0fld5c0 dfxsecure_feature_lch_reg_0 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[0]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_0_0) );
  d04lyn0fld5c0 dfxsecure_feature_lch_reg_2 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[2]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_2_0) );
  d04lyn0fld5c0 dfxsecure_feature_lch_reg_1 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[1]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_1_0) );
  d04lyn0fld5c0 dfxsecure_feature_lch_reg_3 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[3]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_3_0) );
  d04nob02ln0b0 syn_5 ( .a(dfxsecure_feature_lch_1_0), .b(
        dfxsecure_feature_lch_0_0), .out(n2) );
  d04ann02ln0b5 syn_6 ( .a(dfxsecure_feature_lch_0_0), .b(
        dfxsecure_feature_lch_2_0), .o(n4) );
  d04inn20ln0b0 syn_7 ( .a(fdfx_earlyboot_exit), .o1(n1) );
  d04cak04ln0b0 syn_8 ( .a(dfxsecure_feature_lch_1_0), .b(
        dfxsecure_feature_lch_3_0), .c(n4), .d(n1), .o1(n3) );
  d04con04ln0b0 syn_9 ( .b(dfxsecure_feature_lch_3_0), .c(
        dfxsecure_feature_lch_2_0), .d(n2), .a(n3), .o1(
        dfxsecure_feature_en[0]) );
  d04oan01ln0b0 syn_10 ( .b(dfxsecure_feature_lch_3_0), .c(n4), .a(n3), .o(
        dfxsecure_feature_en[1]) );
  d04con01ln0b0 syn_11 ( .b(dfxsecure_feature_lch_1_0), .c(
        dfxsecure_feature_lch_2_0), .a(fdfx_earlyboot_exit), .o1(n5) );
  d04non03ln0b0 syn_12 ( .a(dfxsecure_feature_lch_3_0), .b(
        dfxsecure_feature_lch_0_0), .c(n5), .o1(dfxsecure_feature_en[2]) );
endmodule


module stap ( ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, ftap_slvidcode, 
        atap_tdo, atap_tdoen, fdfx_powergood, tdr_data_out, tdr_data_in, 
        fdfx_secure_policy, fdfx_earlyboot_exit, fdfx_policy_update, 
        sftapnw_ftap_secsel, sftapnw_ftap_enabletdo, sftapnw_ftap_enabletap, 
        sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, sntapnw_atap_tdo_en, ftapsslv_tck, 
        ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, 
        atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2, 
        sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sntapnw_atap_tdo2, 
        sntapnw_atap_tdo2_en, sn_fwtap_wrck, sn_fwtap_wrst_b, 
        sn_fwtap_capturewr, sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, 
        sn_fwtap_selectwir, sn_awtap_wso, sn_fwtap_wsi, stap_fbscan_tck, 
        stap_abscan_tdo, stap_fbscan_capturedr, stap_fbscan_shiftdr, 
        stap_fbscan_updatedr, stap_fbscan_updatedr_clk, stap_fbscan_runbist_en, 
        stap_fbscan_highz, stap_fbscan_extogen, stap_fbscan_intest_mode, 
        stap_fbscan_chainen, stap_fbscan_mode, stap_fbscan_extogsig_b, 
        stap_fbscan_d6init, stap_fbscan_d6actestsig_b, stap_fbscan_d6select, 
        rtdr_tap_tdo, tap_rtdr_irdec, tap_rtdr_prog_rst_b, tap_rtdr_tdi, 
        tap_rtdr_capture, tap_rtdr_shift, tap_rtdr_update, tap_rtdr_tck, 
        tap_rtdr_powergood, tap_rtdr_selectir, tap_rtdr_rti );
  input [31:0] ftap_slvidcode;
  output [0:0] tdr_data_out;
  input [0:0] tdr_data_in;
  input [3:0] fdfx_secure_policy;
  output [0:0] sftapnw_ftap_secsel;
  output [0:0] sftapnw_ftap_enabletdo;
  output [0:0] sftapnw_ftap_enabletap;
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [0:0] sn_awtap_wso;
  output [0:0] sn_fwtap_wsi;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  input ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, fdfx_powergood,
         fdfx_earlyboot_exit, fdfx_policy_update, sntapnw_atap_tdo,
         ftapsslv_tck, ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi,
         sntapnw_atap_tdo2, stap_abscan_tdo;
  output atap_tdo, atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms,
         sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo, atapsslv_tdoen,
         sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b,
         sntapnw_ftap_tdi2, sn_fwtap_wrck, sn_fwtap_wrst_b, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_selectwir,
         stap_fbscan_tck, stap_fbscan_capturedr, stap_fbscan_shiftdr,
         stap_fbscan_updatedr, stap_fbscan_updatedr_clk,
         stap_fbscan_runbist_en, stap_fbscan_highz, stap_fbscan_extogen,
         stap_fbscan_intest_mode, stap_fbscan_chainen, stap_fbscan_mode,
         stap_fbscan_extogsig_b, stap_fbscan_d6init, stap_fbscan_d6actestsig_b,
         stap_fbscan_d6select, tap_rtdr_tck, tap_rtdr_powergood,
         tap_rtdr_selectir, tap_rtdr_rti;
  wire   powergood_rst_trst_b, tapc_remove, stap_fsm_tlrs, stap_fsm_rti,
         stap_selectwir, stap_fsm_capture_ir, stap_fsm_shift_ir,
         stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr, stap_irreg_ireg_7_0, stap_irreg_ireg_6_0,
         stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0,
         stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0,
         stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0,
         stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0,
         stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0,
         stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0,
         stap_irreg_serial_out, stap_irdecoder_drselect_1_0,
         stap_irdecoder_drselect_0_0, stap_and_all_bits_irreg,
         dfxsecure_feature_en_2_0, dfxsecure_feature_en_1_0,
         dfxsecure_feature_en_0_0, tapc_select_1_0, tapc_select_0_0,
         tapc_wtap_sel_0_0, stap_drreg_tdo_1_0, stap_drreg_tdo_0_0,
         stap_mux_tdo, stap_tdomux_tdoen, n22, SYNOPSYS_UNCONNECTED_1,
         SYNOPSYS_UNCONNECTED_2, SYNOPSYS_UNCONNECTED_3,
         SYNOPSYS_UNCONNECTED_4, SYNOPSYS_UNCONNECTED_5,
         SYNOPSYS_UNCONNECTED_6, SYNOPSYS_UNCONNECTED_7,
         SYNOPSYS_UNCONNECTED_8, SYNOPSYS_UNCONNECTED_9,
         SYNOPSYS_UNCONNECTED_10, SYNOPSYS_UNCONNECTED_11,
         SYNOPSYS_UNCONNECTED_12, SYNOPSYS_UNCONNECTED_13,
         SYNOPSYS_UNCONNECTED_14;
  assign stap_fbscan_d6select = 1'b0;
  assign stap_fbscan_d6actestsig_b = 1'b1;
  assign stap_fbscan_d6init = 1'b0;
  assign stap_fbscan_extogsig_b = 1'b1;
  assign stap_fbscan_mode = 1'b0;
  assign stap_fbscan_chainen = 1'b0;
  assign stap_fbscan_intest_mode = 1'b0;
  assign stap_fbscan_extogen = 1'b0;
  assign stap_fbscan_highz = 1'b0;
  assign stap_fbscan_runbist_en = 1'b0;
  assign stap_fbscan_updatedr_clk = 1'b0;
  assign stap_fbscan_updatedr = 1'b0;
  assign stap_fbscan_shiftdr = 1'b0;
  assign stap_fbscan_capturedr = 1'b0;
  assign stap_fbscan_tck = 1'b0;
  assign sn_fwtap_wsi[0] = 1'b1;
  assign sn_fwtap_selectwir = 1'b0;
  assign sftapnw_ftap_enabletap[0] = 1'b0;
  assign sftapnw_ftap_enabletdo[0] = 1'b0;

  stap_fsm i_stap_fsm ( .ftap_tms(ftap_tms), .ftap_tck(ftap_tck), 
        .powergood_rst_trst_b(n22), .tapc_remove(tapc_remove), .stap_fsm_tlrs(
        stap_fsm_tlrs), .stap_fsm_rti(stap_fsm_rti), .stap_fsm_e1dr(
        SYNOPSYS_UNCONNECTED_1), .stap_fsm_e2dr(SYNOPSYS_UNCONNECTED_2), 
        .stap_selectwir(stap_selectwir), .stap_selectwir_neg(
        SYNOPSYS_UNCONNECTED_3), .sn_fwtap_capturewr(sn_fwtap_capturewr), 
        .sn_fwtap_shiftwr(sn_fwtap_shiftwr), .sn_fwtap_updatewr(
        sn_fwtap_updatewr), .sn_fwtap_rti(sn_fwtap_rti), .sn_fwtap_wrst_b(
        sn_fwtap_wrst_b), .stap_fsm_capture_ir(stap_fsm_capture_ir), 
        .stap_fsm_shift_ir(stap_fsm_shift_ir), .stap_fsm_shift_ir_neg(
        SYNOPSYS_UNCONNECTED_4), .stap_fsm_update_ir(stap_fsm_update_ir), 
        .stap_fsm_capture_dr(stap_fsm_capture_dr), .stap_fsm_shift_dr(
        stap_fsm_shift_dr), .stap_fsm_update_dr(stap_fsm_update_dr) );
  stap_irreg i_stap_irreg ( .stap_fsm_tlrs(stap_fsm_tlrs), 
        .stap_fsm_capture_ir(stap_fsm_capture_ir), .stap_fsm_shift_ir(
        stap_fsm_shift_ir), .stap_fsm_update_ir(stap_fsm_update_ir), 
        .ftap_tdi(ftap_tdi), .ftap_tck(ftap_tck), .powergood_rst_trst_b(n22), 
        .stap_irreg_ireg({stap_irreg_ireg_7_0, stap_irreg_ireg_6_0, 
        stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0, 
        stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0}), 
        .stap_irreg_ireg_nxt({stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0, 
        stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0, 
        stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0, 
        stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0}), 
        .stap_irreg_serial_out(stap_irreg_serial_out), .stap_irreg_shift_reg({
        SYNOPSYS_UNCONNECTED_5, SYNOPSYS_UNCONNECTED_6, SYNOPSYS_UNCONNECTED_7, 
        SYNOPSYS_UNCONNECTED_8, SYNOPSYS_UNCONNECTED_9, 
        SYNOPSYS_UNCONNECTED_10, SYNOPSYS_UNCONNECTED_11, 
        SYNOPSYS_UNCONNECTED_12}) );
  stap_irdecoder i_stap_irdecoder ( .powergood_rst_trst_b(n22), 
        .stap_irreg_ireg({stap_irreg_ireg_7_0, stap_irreg_ireg_6_0, 
        stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0, 
        stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0}), 
        .stap_irreg_ireg_nxt({stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0, 
        stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0, 
        stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0, 
        stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0}), .ftap_tck(ftap_tck), .feature_green_en(dfxsecure_feature_en_0_0), .feature_orange_en(
        dfxsecure_feature_en_1_0), .feature_red_en(dfxsecure_feature_en_2_0), 
        .stap_irdecoder_drselect({stap_irdecoder_drselect_1_0, 
        stap_irdecoder_drselect_0_0}), .stap_and_all_bits_irreg(
        stap_and_all_bits_irreg) );
  stap_drreg i_stap_drreg ( .stap_fsm_tlrs(stap_fsm_tlrs), .ftap_tdi(ftap_tdi), 
        .ftap_tck(ftap_tck), .ftap_trst_b(ftap_trst_b), .fdfx_powergood(
        fdfx_powergood), .powergood_rst_trst_b(n22), .stap_fsm_capture_dr(
        stap_fsm_capture_dr), .stap_fsm_shift_dr(stap_fsm_shift_dr), 
        .stap_fsm_update_dr(stap_fsm_update_dr), .stap_selectwir(
        stap_selectwir), .ftap_slvidcode(ftap_slvidcode), 
        .stap_irdecoder_drselect({stap_irdecoder_drselect_1_0, 
        stap_irdecoder_drselect_0_0}), .tdr_data_in(tdr_data_in[0]), 
        .tdr_data_out(tdr_data_out[0]), .sftapnw_ftap_secsel(
        sftapnw_ftap_secsel[0]), .tapc_select({tapc_select_1_0, 
        tapc_select_0_0}), .feature_green_en(dfxsecure_feature_en_0_0), 
        .feature_orange_en(dfxsecure_feature_en_1_0), .feature_red_en(
        dfxsecure_feature_en_2_0), .tapc_wtap_sel(tapc_wtap_sel_0_0), 
        .tapc_remove(tapc_remove), .stap_drreg_tdo({stap_drreg_tdo_1_0, 
        stap_drreg_tdo_0_0}), .stap_and_all_bits_irreg(stap_and_all_bits_irreg), .rtdr_tap_tdo(rtdr_tap_tdo[0]), .tap_rtdr_tdi(tap_rtdr_tdi[0]), 
        .tap_rtdr_capture(tap_rtdr_capture[0]), .tap_rtdr_shift(
        tap_rtdr_shift[0]), .tap_rtdr_update(tap_rtdr_update[0]), 
        .tap_rtdr_irdec(tap_rtdr_irdec[0]), .tap_rtdr_selectir(
        tap_rtdr_selectir), .tap_rtdr_powergood(tap_rtdr_powergood), 
        .tap_rtdr_rti(tap_rtdr_rti), .tap_rtdr_prog_rst_b(
        tap_rtdr_prog_rst_b[0]), .stap_fsm_rti(stap_fsm_rti) );
  stap_tdomux i_stap_tdomux ( .stap_drreg_tdo({stap_drreg_tdo_1_0, 
        stap_drreg_tdo_0_0}), .stap_fsm_shift_dr(stap_fsm_shift_dr), 
        .stap_fsm_shift_ir(stap_fsm_shift_ir), .stap_irdecoder_drselect({
        stap_irdecoder_drselect_1_0, stap_irdecoder_drselect_0_0}), 
        .stap_irreg_serial_out(stap_irreg_serial_out), .stap_fsm_tlrs(
        stap_fsm_tlrs), .ftap_tck(ftap_tck), .powergood_rst_trst_b(n22), 
        .stap_mux_tdo(stap_mux_tdo), .stap_tdomux_tdoen(stap_tdomux_tdoen) );
  stap_glue i_stap_glue ( .ftap_tck(ftap_tck), .ftap_tms(ftap_tms), 
        .ftap_trst_b(ftap_trst_b), .fdfx_powergood(fdfx_powergood), .ftap_tdi(
        ftap_tdi), .stap_tdomux_tdoen(stap_tdomux_tdoen), 
        .sntapnw_atap_tdo_en(sntapnw_atap_tdo_en[0]), .pre_tdo(atap_tdo), 
        .powergood_rst_trst_b(powergood_rst_trst_b), .atap_tdoen(atap_tdoen), 
        .sntapnw_ftap_tck(sntapnw_ftap_tck), .sntapnw_ftap_tms(
        sntapnw_ftap_tms), .sntapnw_ftap_trst_b(sntapnw_ftap_trst_b), 
        .sntapnw_ftap_tdi(sntapnw_ftap_tdi), .sntapnw_atap_tdo(
        sntapnw_atap_tdo), .ftapsslv_tck(ftapsslv_tck), .ftapsslv_tms(
        ftapsslv_tms), .ftapsslv_trst_b(ftapsslv_trst_b), .ftapsslv_tdi(
        ftapsslv_tdi), .atapsslv_tdo(atapsslv_tdo), .atapsslv_tdoen(
        atapsslv_tdoen), .sntapnw_ftap_tck2(sntapnw_ftap_tck2), 
        .sntapnw_ftap_tms2(sntapnw_ftap_tms2), .sntapnw_ftap_trst2_b(
        sntapnw_ftap_trst2_b), .sntapnw_ftap_tdi2(sntapnw_ftap_tdi2), 
        .sntapnw_atap_tdo2(sntapnw_atap_tdo2), .sntapnw_atap_tdo2_en(
        sntapnw_atap_tdo2_en[0]), .sn_fwtap_wrck(sn_fwtap_wrck), 
        .stap_mux_tdo(stap_mux_tdo), .tapc_select({tapc_select_1_0, 
        tapc_select_0_0}), .tapc_wtap_sel(tapc_wtap_sel_0_0), .tapc_remove(
        tapc_remove), .stap_wtapnw_tdo(1'b1) );
  stap_dfxsecure_plugin i_stap_dfxsecure_plugin ( .fdfx_powergood(
        fdfx_powergood), .fdfx_secure_policy(fdfx_secure_policy), 
        .fdfx_earlyboot_exit(fdfx_earlyboot_exit), .fdfx_policy_update(
        fdfx_policy_update), .dfxsecure_feature_en({dfxsecure_feature_en_2_0, 
        dfxsecure_feature_en_1_0, dfxsecure_feature_en_0_0}), .visa_all_dis(
        SYNOPSYS_UNCONNECTED_13), .visa_customer_dis(SYNOPSYS_UNCONNECTED_14), 
        .sb_policy_ovr_value({1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), 
        .oem_secure_policy({1'b0, 1'b0, 1'b0, 1'b0}) );
  d04gbf00ld0c0 i_stap_ctech_lib_clk_buf_rtdr_i_ctech_lib_clk_buf_ctech_lib_dcszo ( 
        .clk(ftap_tck), .clkout(tap_rtdr_tck) );
  d04bfn00ln0d0 syn_24 ( .a(powergood_rst_trst_b), .o(n22) );
endmodule

