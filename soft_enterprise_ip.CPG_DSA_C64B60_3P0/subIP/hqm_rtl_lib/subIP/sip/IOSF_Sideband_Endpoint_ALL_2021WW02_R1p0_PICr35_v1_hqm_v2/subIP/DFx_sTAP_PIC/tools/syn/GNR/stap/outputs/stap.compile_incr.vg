
module stap_fsm ( ftap_tms, ftap_tck, powergood_rst_trst_b, tapc_remove, 
        stap_fsm_tlrs, stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr, 
        stap_selectwir, stap_selectwir_neg, sn_fwtap_capturewr, 
        sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b, 
        stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg, 
        stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr, 
        stap_fsm_update_dr );
  input ftap_tms, ftap_tck, powergood_rst_trst_b, tapc_remove;
  output stap_fsm_tlrs, stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr,
         stap_selectwir, stap_selectwir_neg, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b,
         stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg,
         stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr;
  wire   state_ps_14_0, state_ps_13_0, state_ps_12_0, state_ps_9_0,
         state_ps_6_0, state_ps_2_0, tms_bit_3_0, tms_bit_2_0, tms_bit_1_0,
         tms_bit_0_0, N424, N425, N426, N427, N429, N430, N431, N432, N433,
         N434, N435, N436, N437, N438, N439, N440, N441, N442, N443, N444, n1,
         n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58,
         n65;

  e05fyn08fan1d01x5 stap_fsm_shift_ir_neg_reg ( .d(stap_fsm_shift_ir), .clkb(
        ftap_tck), .rb(n65), .psb(1'b1), .o(stap_fsm_shift_ir_neg) );
  e05nor004an1n01x5 syn_4 ( .a(stap_fsm_tlrs), .b(state_ps_9_0), .c(
        state_ps_13_0), .d(n20), .o1(n1) );
  e05and002an2n01x5 syn_5 ( .a(state_ps_14_0), .b(n1), .o(n38) );
  e05inv000an1n01x5 syn_6 ( .a(n50), .o1(n2) );
  e05aoi012an1n01x5 syn_7 ( .b(n51), .c(n2), .a(n57), .o1(N441) );
  e05bfn000an1n04x5 syn_14 ( .a(powergood_rst_trst_b), .o(n65) );
  e05nonb02an2n01x5 syn_15 ( .a(tms_bit_0_0), .b(stap_fsm_tlrs), .out0(N425)
         );
  e05nonb02an2n01x5 syn_16 ( .a(tms_bit_1_0), .b(stap_fsm_tlrs), .out0(N426)
         );
  e05nonb02an2n01x5 syn_17 ( .a(tms_bit_2_0), .b(stap_fsm_tlrs), .out0(N427)
         );
  e05nor002an1n01x5 syn_18 ( .a(stap_fsm_shift_ir), .b(state_ps_12_0), .o1(n4)
         );
  e05nor003an1n01x5 syn_19 ( .a(state_ps_2_0), .b(stap_fsm_shift_dr), .c(
        stap_fsm_e1dr), .o1(n8) );
  e05nor003an1n01x5 syn_20 ( .a(stap_fsm_rti), .b(state_ps_6_0), .c(
        stap_fsm_e2dr), .o1(n3) );
  e05nand02an2n01x5 syn_21 ( .a(n8), .b(n3), .o1(n25) );
  e05nor002an1n01x5 syn_22 ( .a(stap_fsm_capture_dr), .b(n25), .o1(n11) );
  e05nor002an2n01x5 syn_23 ( .a(stap_fsm_update_ir), .b(stap_fsm_update_dr), 
        .o1(n9) );
  e05nand02an2n01x5 syn_24 ( .a(n11), .b(n9), .o1(n15) );
  e05nor002an2n01x5 syn_25 ( .a(stap_fsm_capture_ir), .b(n15), .o1(n6) );
  e05nand02an2n01x5 syn_26 ( .a(n4), .b(n6), .o1(n20) );
  e05nor002an2n01x5 syn_27 ( .a(state_ps_14_0), .b(n20), .o1(n31) );
  e05nanb02an1n01x5 syn_28 ( .a(state_ps_13_0), .b(n31), .out0(n5) );
  e05nonb03an1n01x5 syn_29 ( .a(state_ps_9_0), .b(stap_fsm_tlrs), .c(n5), 
        .out0(n37) );
  e05nonb03an1n01x5 syn_30 ( .a(stap_fsm_tlrs), .b(state_ps_9_0), .c(n5), 
        .out0(n42) );
  e05nor002an1n01x5 syn_31 ( .a(n37), .b(n42), .o1(n36) );
  e05nor004an2n01x5 syn_34 ( .a(stap_fsm_tlrs), .b(state_ps_9_0), .c(
        state_ps_13_0), .d(state_ps_14_0), .o1(n7) );
  e05nand02an2n01x5 syn_35 ( .a(n6), .b(n7), .o1(n19) );
  e05nonb03an1n01x5 syn_36 ( .a(stap_fsm_shift_ir), .b(state_ps_12_0), .c(n19), 
        .out0(n50) );
  e05inv000an1n01x5 syn_37 ( .a(n9), .o1(n24) );
  e05nonb03an1n01x5 syn_38 ( .a(n7), .b(stap_fsm_shift_ir), .c(state_ps_12_0), 
        .out0(n14) );
  e05nanb02an1n01x5 syn_39 ( .a(stap_fsm_capture_ir), .b(n14), .out0(n23) );
  e05nor043an1n01x5 syn_40 ( .a(stap_fsm_capture_dr), .b(n24), .c(n23), .o1(
        n16) );
  e05nand02an2n01x5 syn_41 ( .a(n8), .b(n16), .o1(n13) );
  e05nor003an1n01x5 syn_42 ( .a(state_ps_6_0), .b(stap_fsm_e2dr), .c(n13), 
        .o1(n12) );
  e05aoi112an1n01x5 syn_43 ( .c(stap_fsm_update_dr), .d(stap_fsm_update_ir), 
        .a(n9), .b(n23), .o1(n10) );
  e05aoi022an1n01x5 syn_44 ( .a(stap_fsm_rti), .b(n12), .c(n11), .d(n10), .o1(
        n54) );
  e05nor002an2n01x5 syn_45 ( .a(stap_fsm_rti), .b(n13), .o1(n22) );
  e05nanb03an2n01x5 syn_46 ( .a(stap_fsm_e2dr), .b(state_ps_6_0), .c(n22), 
        .out0(n52) );
  e05nanb03an2n01x5 syn_47 ( .a(n15), .b(stap_fsm_capture_ir), .c(n14), .out0(
        n51) );
  e05nor002an1n01x5 syn_48 ( .a(stap_fsm_shift_dr), .b(stap_fsm_e1dr), .o1(n18) );
  e05inv000an1n01x5 syn_49 ( .a(n16), .o1(n17) );
  e05nor004an2n01x5 syn_50 ( .a(stap_fsm_rti), .b(state_ps_6_0), .c(
        stap_fsm_e2dr), .d(n17), .o1(n21) );
  e05nand03an2n01x5 syn_51 ( .a(state_ps_2_0), .b(n18), .c(n21), .o1(n53) );
  e05nonb03an1n01x5 syn_53 ( .a(state_ps_12_0), .b(stap_fsm_shift_ir), .c(n19), 
        .out0(n44) );
  e05nor002an1n01x5 syn_54 ( .a(n44), .b(n38), .o1(n49) );
  e05nonb02an2n01x5 syn_55 ( .a(n21), .b(state_ps_2_0), .out0(n29) );
  e05nanb03an2n01x5 syn_56 ( .a(stap_fsm_shift_dr), .b(n29), .c(stap_fsm_e1dr), 
        .out0(n41) );
  e05nanb03an2n01x5 syn_57 ( .a(state_ps_6_0), .b(n22), .c(stap_fsm_e2dr), 
        .out0(n40) );
  e05and002an2n01x5 syn_58 ( .a(n41), .b(n40), .o(n58) );
  e05inv000an1n01x5 syn_59 ( .a(stap_fsm_e1dr), .o1(n28) );
  e05inv000an1n01x5 syn_60 ( .a(stap_fsm_capture_dr), .o1(n26) );
  e05nor004an2n01x5 syn_61 ( .a(n26), .b(n25), .c(n24), .d(n23), .o1(n27) );
  e05aoi013an1n01x5 syn_62 ( .b(stap_fsm_shift_dr), .c(n29), .d(n28), .a(n27), 
        .o1(n55) );
  e05nor002an1n01x5 syn_63 ( .a(stap_fsm_tlrs), .b(state_ps_9_0), .o1(n30) );
  e05nand03an2n01x5 syn_64 ( .a(state_ps_13_0), .b(n31), .c(n30), .o1(n56) );
  e05nor003an2n01x5 syn_66 ( .a(n50), .b(n33), .c(n32), .o1(n34) );
  e05nand02an2n01x5 syn_67 ( .a(n36), .b(n34), .o1(n35) );
  e05aoai13an1n01x5 syn_68 ( .b(n36), .c(n47), .d(n46), .a(n35), .o1(N429) );
  e05and002an1n01x5 syn_69 ( .a(n37), .b(n46), .o(N439) );
  e05nor002an1n01x5 syn_70 ( .a(n38), .b(n50), .o1(n39) );
  e05aoi012an2n01x5 syn_71 ( .b(n39), .c(n51), .a(n48), .o1(N440) );
  e05aoi012an2n01x5 syn_72 ( .b(n55), .c(n40), .a(n48), .o1(N433) );
  e05aoi012an2n01x5 syn_73 ( .b(n41), .c(n52), .a(n48), .o1(N435) );
  e05inv000an1n01x5 syn_74 ( .a(n42), .o1(n43) );
  e05aoi012an2n01x5 syn_75 ( .b(n54), .c(n43), .a(n48), .o1(N430) );
  e05inv000an1n01x5 syn_76 ( .a(n44), .o1(n45) );
  e05aoi012an2n01x5 syn_77 ( .b(n45), .c(n56), .a(n48), .o1(N442) );
  e05nor002an1n01x5 syn_78 ( .a(n46), .b(stap_fsm_tlrs), .o1(N424) );
  e05nor002an1n01x5 syn_79 ( .a(n48), .b(n53), .o1(N432) );
  e05nor002an1n01x5 syn_81 ( .a(n49), .b(n57), .o1(N444) );
  e05nor002an1n01x5 syn_82 ( .a(n52), .b(n57), .o1(N436) );
  e05nor002an1n01x5 syn_83 ( .a(n53), .b(n57), .o1(N438) );
  e05nor002an1n01x5 syn_84 ( .a(n54), .b(n57), .o1(N431) );
  e05nor002an1n01x5 syn_85 ( .a(n55), .b(n57), .o1(N434) );
  e05nor002an1n01x5 syn_86 ( .a(n56), .b(n57), .o1(N443) );
  e05nor002an1n01x5 syn_87 ( .a(n58), .b(n57), .o1(N437) );
  e05fyn003an1n01x5 tms_bit_reg_1 ( .d(N425), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(tms_bit_1_0) );
  e05fyn003an1n01x5 tms_bit_reg_2 ( .d(N426), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(tms_bit_2_0) );
  e05fyn003an1n01x5 tms_bit_reg_3 ( .d(N427), .clk(ftap_tck), .rb(n65), .o(
        tms_bit_3_0) );
  e05fyn003an1n01x5 tms_bit_reg_0 ( .d(N424), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(tms_bit_0_0) );
  e05fyn003an1n01x5 state_ps_reg_10 ( .d(N439), .clk(ftap_tck), .rb(n65), .o(
        stap_fsm_capture_ir) );
  e05fyn003an1n01x5 state_ps_reg_3 ( .d(N432), .clk(ftap_tck), .rb(n65), .o(
        stap_fsm_capture_dr) );
  e05fyn003an1n01x5 state_ps_reg_11 ( .d(N440), .clk(ftap_tck), .rb(n65), .o(
        stap_fsm_shift_ir) );
  e05fyn003an1n01x5 state_ps_reg_4 ( .d(N433), .clk(ftap_tck), .rb(n65), .o(
        stap_fsm_shift_dr) );
  e05fyn003an1n01x5 state_ps_reg_6 ( .d(N435), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_6_0) );
  e05fyn003an1n01x5 state_ps_reg_1 ( .d(N430), .clk(ftap_tck), .rb(n65), .o(
        stap_fsm_rti) );
  e05fyn003an1n01x5 state_ps_reg_13 ( .d(N442), .clk(ftap_tck), .rb(n65), .o(
        state_ps_13_0) );
  e05fyn003an1n01x5 state_ps_reg_15 ( .d(N444), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_update_ir) );
  e05fyn003an1n01x5 state_ps_reg_9 ( .d(N438), .clk(ftap_tck), .rb(n65), .o(
        state_ps_9_0) );
  e05fyn003an1n01x5 state_ps_reg_7 ( .d(N436), .clk(ftap_tck), .rb(n65), .o(
        stap_fsm_e2dr) );
  e05fyn003an1n01x5 state_ps_reg_8 ( .d(N437), .clk(ftap_tck), .rb(n65), .o(
        stap_fsm_update_dr) );
  e05fyn003an1n01x5 state_ps_reg_2 ( .d(N431), .clk(ftap_tck), .rb(n65), .o(
        state_ps_2_0) );
  e05fyn003an1n01x5 state_ps_reg_5 ( .d(N434), .clk(ftap_tck), .rb(n65), .o(
        stap_fsm_e1dr) );
  e05fyn003an1n01x5 state_ps_reg_14 ( .d(N443), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_14_0) );
  e05fyn003an1n01x5 state_ps_reg_12 ( .d(N441), .clk(ftap_tck), .rb(n65), .o(
        state_ps_12_0) );
  e05fyn00can2d02x5 state_ps_reg_0 ( .d(N429), .clk(ftap_tck), .psb(n65), .o(
        stap_fsm_tlrs) );
  e05inv000an1n01x5 syn_inc_3 ( .a(1'b0), .o1(sn_fwtap_wrst_b) );
  e05inv000an1n01x5 syn_inc_5 ( .a(1'b1), .o1(sn_fwtap_rti) );
  e05inv000an1n01x5 syn_inc_7 ( .a(1'b1), .o1(sn_fwtap_updatewr) );
  e05inv000an1n01x5 syn_inc_9 ( .a(1'b1), .o1(sn_fwtap_shiftwr) );
  e05inv000an1n01x5 syn_inc_11 ( .a(1'b1), .o1(sn_fwtap_capturewr) );
  e05inv000an1n01x5 syn_inc_13 ( .a(1'b1), .o1(stap_selectwir_neg) );
  e05inv000an1n01x5 syn_inc_15 ( .a(1'b1), .o1(stap_selectwir) );
  e05nand22an2n01x5 syn_inc_17 ( .a(n48), .b(n47), .o1(n57) );
  e05inv000an2n01x5 syn_inc_18 ( .a(n46), .o1(n48) );
  e05nand24an2n01x5 syn_inc_19 ( .a(n49), .b(n58), .c(n55), .d(n56), .o1(n32)
         );
  e05nand24an2n01x5 syn_inc_20 ( .a(n54), .b(n52), .c(n51), .d(n53), .o1(n33)
         );
  e05nand24an2n01x5 syn_inc_21 ( .a(tms_bit_2_0), .b(tms_bit_1_0), .c(
        tms_bit_0_0), .d(tms_bit_3_0), .o1(n47) );
  e05nor002an1n01x5 syn_inc_22 ( .a(tapc_remove), .b(ftap_tms), .o1(n46) );
endmodule


module stap_irreg ( stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir, 
        stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b, 
        stap_irreg_ireg, stap_irreg_ireg_nxt, stap_irreg_serial_out, 
        stap_irreg_shift_reg );
  output [7:0] stap_irreg_ireg;
  output [7:0] stap_irreg_ireg_nxt;
  output [7:0] stap_irreg_shift_reg;
  input stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir,
         stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b;
  output stap_irreg_serial_out;
  wire   N10, n1, n2, n3, n4, n5, n6, n7, n8, n9, n100, n11, n13, n15, n17,
         n19, n21, n23, n25, n27, n28, n29, n30, n31, n32, n33, n34, n35, n45,
         n12, n14, n16, n20;

  e05obai22an2n01x5 syn_18 ( .a(stap_irreg_shift_reg[7]), .b(n5), .c(n100), 
        .d(n4), .out0(n34) );
  e05orn002an2n01x5 syn_5 ( .a(stap_fsm_tlrs), .b(stap_irreg_ireg_nxt[2]), .o(
        n17) );
  e05orn002an2n01x5 syn_6 ( .a(stap_fsm_tlrs), .b(stap_irreg_ireg_nxt[3]), .o(
        n19) );
  e05nonb02an2n01x5 syn_3 ( .a(stap_irreg_ireg_nxt[0]), .b(stap_fsm_tlrs), 
        .out0(n13) );
  e05nonb02an2n01x5 syn_10 ( .a(stap_irreg_ireg_nxt[7]), .b(stap_fsm_tlrs), 
        .out0(n27) );
  e05nonb02an2n01x5 syn_8 ( .a(stap_irreg_ireg_nxt[5]), .b(stap_fsm_tlrs), 
        .out0(n23) );
  e05nonb02an2n01x5 syn_9 ( .a(stap_irreg_ireg_nxt[6]), .b(stap_fsm_tlrs), 
        .out0(n25) );
  e05nonb02an2n01x5 syn_4 ( .a(stap_irreg_ireg_nxt[1]), .b(stap_fsm_tlrs), 
        .out0(n15) );
  e05nonb02an2n01x5 syn_7 ( .a(stap_irreg_ireg_nxt[4]), .b(stap_fsm_tlrs), 
        .out0(n21) );
  e05and002an1n01x5 syn_22 ( .a(n45), .b(n11), .o(n35) );
  e05nand02an2n01x5 syn_21 ( .a(stap_fsm_shift_ir), .b(n11), .o1(n5) );
  e05oai022an1n01x5 syn_17 ( .a(n100), .b(n5), .c(n4), .d(n9), .o1(n33) );
  e05oai022an1n01x5 syn_16 ( .a(n4), .b(n8), .c(n5), .d(n9), .o1(n32) );
  e05oai022an1n01x5 syn_15 ( .a(n4), .b(n7), .c(n5), .d(n8), .o1(n31) );
  e05oai022an1n01x5 syn_13 ( .a(n4), .b(n1), .c(n5), .d(n6), .o1(n29) );
  e05oai022an1n01x5 syn_14 ( .a(n4), .b(n6), .c(n5), .d(n7), .o1(n30) );
  e05aoi012an1n01x5 syn_12 ( .b(stap_irreg_serial_out), .c(n2), .a(N10), .o1(
        n3) );
  e05oai012an1n01x5 syn_11 ( .b(n1), .c(n2), .a(n3), .o1(n28) );
  e05nand02an2n01x5 syn_19 ( .a(n11), .b(n2), .o1(n4) );
  e05inv000an1n01x5 syn_20 ( .a(n11), .o1(N10) );
  e05inv000an1n01x5 syn_23 ( .a(stap_fsm_update_ir), .o1(n16) );
  e05oai022an1n01x5 syn_24 ( .a(n16), .b(stap_irreg_shift_reg[7]), .c(
        stap_irreg_ireg[7]), .d(stap_fsm_update_ir), .o1(n12) );
  e05oai022an1n01x5 syn_26 ( .a(n16), .b(stap_irreg_serial_out), .c(
        stap_irreg_ireg[0]), .d(stap_fsm_update_ir), .o1(n14) );
  e05nor002an2n01x5 syn_28 ( .a(stap_fsm_tlrs), .b(stap_fsm_capture_ir), .o1(
        n11) );
  e05bfn000an1n04x5 syn_29 ( .a(powergood_rst_trst_b), .o(n20) );
  e05mtni22an2n01x5 syn_30 ( .b(stap_irreg_shift_reg[7]), .a(ftap_tdi), .sa(
        stap_fsm_shift_ir), .o(n45) );
  e05inv000an1n01x5 syn_31 ( .a(stap_irreg_shift_reg[1]), .o1(n1) );
  e05inv000an1n01x5 syn_33 ( .a(stap_irreg_shift_reg[2]), .o1(n6) );
  e05inv000an1n01x5 syn_35 ( .a(stap_irreg_shift_reg[6]), .o1(n100) );
  e05inv000an1n01x5 syn_37 ( .a(stap_irreg_shift_reg[5]), .o1(n9) );
  e05inv000an1n01x5 syn_39 ( .a(stap_irreg_shift_reg[3]), .o1(n7) );
  e05inv000an1n01x5 syn_41 ( .a(stap_irreg_shift_reg[4]), .o1(n8) );
  e05bfn001an1n01x5 syn_43 ( .a(stap_irreg_serial_out), .o(
        stap_irreg_shift_reg[0]) );
  e05inv000an1n01x5 syn_45 ( .a(stap_fsm_shift_ir), .o1(n2) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_7 ( .d(n27), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[7]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_5 ( .d(n23), .clkb(ftap_tck), .rb(n20), 
        .psb(1'b1), .o(stap_irreg_ireg[5]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_6 ( .d(n25), .clkb(ftap_tck), .rb(n20), 
        .psb(1'b1), .o(stap_irreg_ireg[6]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_0 ( .d(n13), .clkb(ftap_tck), .rb(n20), 
        .psb(1'b1), .o(stap_irreg_ireg[0]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_4 ( .d(n21), .clkb(ftap_tck), .rb(n20), 
        .psb(1'b1), .o(stap_irreg_ireg[4]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_1 ( .d(n15), .clkb(ftap_tck), .rb(n20), 
        .psb(1'b1), .o(stap_irreg_ireg[1]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_3 ( .d(n19), .clkb(ftap_tck), .rb(1'b1), .psb(n20), .o(stap_irreg_ireg[3]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_2 ( .d(n17), .clkb(ftap_tck), .rb(1'b1), .psb(n20), .o(stap_irreg_ireg[2]) );
  e05fyn00can2d01x5 shift_reg_reg_0 ( .d(n28), .clk(ftap_tck), .psb(n20), .o(
        stap_irreg_serial_out) );
  e05fyn003an1n01x5 shift_reg_reg_6 ( .d(n34), .clk(ftap_tck), .rb(n20), .o(
        stap_irreg_shift_reg[6]) );
  e05fyn003an1n01x5 shift_reg_reg_5 ( .d(n33), .clk(ftap_tck), .rb(n20), .o(
        stap_irreg_shift_reg[5]) );
  e05fyn003an1n01x5 shift_reg_reg_4 ( .d(n32), .clk(ftap_tck), .rb(n20), .o(
        stap_irreg_shift_reg[4]) );
  e05fyn003an1n01x5 shift_reg_reg_3 ( .d(n31), .clk(ftap_tck), .rb(n20), .o(
        stap_irreg_shift_reg[3]) );
  e05fyn003an1n01x5 shift_reg_reg_2 ( .d(n30), .clk(ftap_tck), .rb(n20), .o(
        stap_irreg_shift_reg[2]) );
  e05fyn003an1n01x5 shift_reg_reg_1 ( .d(n29), .clk(ftap_tck), .rb(n20), .o(
        stap_irreg_shift_reg[1]) );
  e05fyn003an1n01x5 shift_reg_reg_7 ( .d(n35), .clk(ftap_tck), .rb(n20), .o(
        stap_irreg_shift_reg[7]) );
  e05aboi22an1n01x5 syn_inc_3 ( .c(stap_fsm_update_ir), .d(n6), .a(
        stap_irreg_ireg[2]), .b(n16), .out0(stap_irreg_ireg_nxt[2]) );
  e05aboi22an1n01x5 syn_inc_4 ( .c(stap_fsm_update_ir), .d(n7), .a(
        stap_irreg_ireg[3]), .b(n16), .out0(stap_irreg_ireg_nxt[3]) );
  e05aboi22an1n01x5 syn_inc_5 ( .c(stap_fsm_update_ir), .d(n1), .a(
        stap_irreg_ireg[1]), .b(n16), .out0(stap_irreg_ireg_nxt[1]) );
  e05aboi22an1n01x5 syn_inc_6 ( .c(stap_fsm_update_ir), .d(n8), .a(
        stap_irreg_ireg[4]), .b(n16), .out0(stap_irreg_ireg_nxt[4]) );
  e05inv000an2n01x5 syn_inc_7 ( .a(n14), .o1(stap_irreg_ireg_nxt[0]) );
  e05aboi22an1n01x5 syn_inc_8 ( .c(stap_fsm_update_ir), .d(n100), .a(
        stap_irreg_ireg[6]), .b(n16), .out0(stap_irreg_ireg_nxt[6]) );
  e05aboi22an1n01x5 syn_inc_9 ( .c(stap_fsm_update_ir), .d(n9), .a(
        stap_irreg_ireg[5]), .b(n16), .out0(stap_irreg_ireg_nxt[5]) );
  e05inv000an2n01x5 syn_inc_10 ( .a(n12), .o1(stap_irreg_ireg_nxt[7]) );
endmodule


module stap_decoder_1 ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n1, n2, n3;

  e05nor043an2n01x5 syn_inc_2 ( .a(n3), .b(n2), .c(n1), .o1(decoder_drselect)
         );
  e05nor043an2n01x5 syn_inc_3 ( .a(feature_red_en), .b(feature_orange_en), .c(
        feature_green_en), .o1(n3) );
  e05nand24an2n01x5 syn_inc_4 ( .a(stap_irreg_ireg[4]), .b(stap_irreg_ireg[3]), 
        .c(stap_irreg_ireg[5]), .d(stap_irreg_ireg[6]), .o1(n2) );
  e05nand24an2n01x5 syn_inc_5 ( .a(stap_irreg_ireg[7]), .b(stap_irreg_ireg[0]), 
        .c(stap_irreg_ireg[2]), .d(stap_irreg_ireg[1]), .o1(n1) );
endmodule


module stap_decoder_0 ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n1, n2, n3;

  e05nor004an1n01x5 syn_3 ( .a(stap_irreg_ireg[7]), .b(stap_irreg_ireg[4]), 
        .c(stap_irreg_ireg[6]), .d(stap_irreg_ireg[5]), .o1(n1) );
  e05nor004an2n01x5 syn_inc_2 ( .a(n3), .b(stap_irreg_ireg[0]), .c(
        stap_irreg_ireg[1]), .d(n2), .o1(decoder_drselect) );
  e05nor043an2n01x5 syn_inc_3 ( .a(feature_red_en), .b(feature_orange_en), .c(
        feature_green_en), .o1(n3) );
  e05nand03an2n01x5 syn_inc_4 ( .a(stap_irreg_ireg[2]), .b(stap_irreg_ireg[3]), 
        .c(n1), .o1(n2) );
endmodule


module stap_irdecoder ( powergood_rst_trst_b, stap_irreg_ireg, 
        stap_irreg_ireg_nxt, ftap_tck, feature_green_en, feature_orange_en, 
        feature_red_en, stap_isol_en_b, stap_irdecoder_drselect, 
        tap_swcomp_active, stap_and_all_bits_irreg );
  input [7:0] stap_irreg_ireg;
  input [7:0] stap_irreg_ireg_nxt;
  output [1:0] stap_irdecoder_drselect;
  input powergood_rst_trst_b, ftap_tck, feature_green_en, feature_orange_en,
         feature_red_en, stap_isol_en_b;
  output tap_swcomp_active, stap_and_all_bits_irreg;
  wire   decoder_drselect_1_0, decoder_drselect_0_0, N3, n2, n4, n1, n30, n5,
         n6;

  e05orn002an2n01x5 syn_3 ( .a(N3), .b(decoder_drselect_0_0), .o(n2) );
  e05nonb02an2n01x5 syn_4 ( .a(decoder_drselect_1_0), .b(N3), .out0(n4) );
  e05nor002an2n01x5 syn_12 ( .a(n6), .b(n5), .o1(stap_and_all_bits_irreg) );
  stap_decoder_1 generate_decoder_0_i_stap_decoder ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect_0_0), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  stap_decoder_0 generate_decoder_1_i_stap_decoder ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect_1_0), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  e05fyn08fan2d01x5 stap_irdecoder_drselect_reg_0 ( .d(n2), .clkb(ftap_tck), 
        .rb(powergood_rst_trst_b), .psb(1'b1), .o(stap_irdecoder_drselect[0])
         );
  e05fyn08fan2d01x5 stap_irdecoder_drselect_reg_1 ( .d(n4), .clkb(ftap_tck), 
        .rb(1'b1), .psb(powergood_rst_trst_b), .o(stap_irdecoder_drselect[1])
         );
  e05inv000an1n01x5 syn_inc_3 ( .a(1'b0), .o1(tap_swcomp_active) );
  e05oai022an1n01x5 syn_inc_5 ( .a(decoder_drselect_0_0), .b(
        decoder_drselect_1_0), .c(n30), .d(n1), .o1(N3) );
  e05nand24an2n01x5 syn_inc_6 ( .a(stap_irreg_ireg_nxt[7]), .b(
        stap_irreg_ireg_nxt[6]), .c(stap_irreg_ireg_nxt[5]), .d(
        stap_irreg_ireg_nxt[4]), .o1(n1) );
  e05nand24an2n01x5 syn_inc_7 ( .a(stap_irreg_ireg_nxt[3]), .b(
        stap_irreg_ireg_nxt[2]), .c(stap_irreg_ireg_nxt[1]), .d(
        stap_irreg_ireg_nxt[0]), .o1(n30) );
  e05nand24an2n01x5 syn_inc_8 ( .a(stap_irreg_ireg[6]), .b(stap_irreg_ireg[7]), 
        .c(stap_irreg_ireg[4]), .d(stap_irreg_ireg[5]), .o1(n5) );
  e05nand24an2n01x5 syn_inc_9 ( .a(stap_irreg_ireg[2]), .b(stap_irreg_ireg[3]), 
        .c(stap_irreg_ireg[0]), .d(stap_irreg_ireg[1]), .o1(n6) );
endmodule


module stap_drreg ( stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, 
        fdfx_powergood, powergood_rst_trst_b, stap_fsm_capture_dr, 
        stap_fsm_shift_dr, stap_fsm_update_dr, stap_selectwir, ftap_slvidcode, 
        stap_irdecoder_drselect, tdr_data_in, tdr_data_out, 
        sftapnw_ftap_secsel, tapc_select, feature_green_en, feature_orange_en, 
        feature_red_en, tapc_wtap_sel, tapc_remove, stap_drreg_tdo, 
        swcompctrl_tdo, swcompstat_tdo, stap_and_all_bits_irreg, rtdr_tap_tdo, 
        tap_rtdr_tdi, tap_rtdr_capture, tap_rtdr_shift, tap_rtdr_update, 
        tap_rtdr_irdec, tap_rtdr_selectir, tap_rtdr_powergood, tap_rtdr_rti, 
        tap_rtdr_prog_rst_b, stap_fsm_rti );
  input [31:0] ftap_slvidcode;
  input [1:0] stap_irdecoder_drselect;
  input [0:0] tdr_data_in;
  output [0:0] tdr_data_out;
  output [0:0] sftapnw_ftap_secsel;
  output [1:0] tapc_select;
  output [0:0] tapc_wtap_sel;
  output [1:0] stap_drreg_tdo;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  input stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, fdfx_powergood,
         powergood_rst_trst_b, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr, stap_selectwir, feature_green_en,
         feature_orange_en, feature_red_en, swcompctrl_tdo, swcompstat_tdo,
         stap_and_all_bits_irreg, stap_fsm_rti;
  output tapc_remove, tap_rtdr_selectir, tap_rtdr_powergood, tap_rtdr_rti;
  wire   bypass_reg, reset_pulse0, reset_pulse1, slvidcode_reg_31_0,
         slvidcode_reg_30_0, slvidcode_reg_29_0, slvidcode_reg_28_0,
         slvidcode_reg_27_0, slvidcode_reg_26_0, slvidcode_reg_25_0,
         slvidcode_reg_24_0, slvidcode_reg_23_0, slvidcode_reg_22_0,
         slvidcode_reg_21_0, slvidcode_reg_20_0, slvidcode_reg_19_0,
         slvidcode_reg_18_0, slvidcode_reg_17_0, slvidcode_reg_16_0,
         slvidcode_reg_15_0, slvidcode_reg_14_0, slvidcode_reg_13_0,
         slvidcode_reg_12_0, slvidcode_reg_11_0, slvidcode_reg_10_0,
         slvidcode_reg_9_0, slvidcode_reg_8_0, slvidcode_reg_7_0,
         slvidcode_reg_6_0, slvidcode_reg_5_0, slvidcode_reg_4_0,
         slvidcode_reg_3_0, slvidcode_reg_2_0, slvidcode_reg_1_0, N62, N63, n1,
         n2, n3, n5, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54,
         n55, n56, n57, n58, n59, n60, n61, n620, n630, n64, n65, n66, n67,
         n68, n69, n70, n71, n72, n73, n74, n75, n4, n6, n7, n8, n9, n10, n11,
         n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25,
         n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39,
         n40, n41, n42, n89;

  e05nonb02an2n01x5 syn_4 ( .a(n75), .b(N62), .out0(n2) );
  e05nanb03an2n01x5 syn_3 ( .a(N63), .b(n3), .c(n5), .out0(n1) );
  e05inv040an2n01x3 syn_19 ( .a(reset_pulse0), .o1(n4) );
  e05inv000an1n01x5 syn_20 ( .a(stap_fsm_tlrs), .o1(n6) );
  e05nand22an2n01x5 syn_22 ( .a(stap_irdecoder_drselect[1]), .b(
        stap_fsm_capture_dr), .o1(n5) );
  e05bfn000an1n04x5 syn_23 ( .a(powergood_rst_trst_b), .o(n89) );
  e05aob012an1n01x5 syn_24 ( .b(stap_fsm_capture_dr), .c(
        stap_irdecoder_drselect[0]), .a(n6), .o(N62) );
  e05nand22an2n01x5 syn_25 ( .a(stap_fsm_shift_dr), .b(
        stap_irdecoder_drselect[0]), .o1(n7) );
  e05nand22an2n01x5 syn_28 ( .a(stap_irdecoder_drselect[1]), .b(
        stap_fsm_shift_dr), .o1(n8) );
  e05nanb02an1n04x5 syn_31 ( .a(N63), .b(n5), .out0(n41) );
  e05aoi222an1n01x5 syn_34 ( .a(n41), .b(ftap_slvidcode[2]), .c(n39), .d(
        slvidcode_reg_3_0), .e(slvidcode_reg_2_0), .f(n40), .o1(n9) );
  e05inv000an1n01x5 syn_35 ( .a(n9), .o1(n74) );
  e05aoi222an1n01x5 syn_36 ( .a(n41), .b(ftap_slvidcode[3]), .c(n39), .d(
        slvidcode_reg_4_0), .e(slvidcode_reg_3_0), .f(n40), .o1(n10) );
  e05inv000an1n01x5 syn_37 ( .a(n10), .o1(n73) );
  e05aoi222an1n01x5 syn_38 ( .a(n41), .b(ftap_slvidcode[4]), .c(n39), .d(
        slvidcode_reg_5_0), .e(slvidcode_reg_4_0), .f(n40), .o1(n11) );
  e05inv000an1n01x5 syn_39 ( .a(n11), .o1(n72) );
  e05aoi222an1n01x5 syn_40 ( .a(n41), .b(ftap_slvidcode[5]), .c(n39), .d(
        slvidcode_reg_6_0), .e(slvidcode_reg_5_0), .f(n40), .o1(n12) );
  e05inv000an1n01x5 syn_41 ( .a(n12), .o1(n71) );
  e05aoi222an1n01x5 syn_42 ( .a(n41), .b(ftap_slvidcode[6]), .c(n39), .d(
        slvidcode_reg_7_0), .e(slvidcode_reg_6_0), .f(n40), .o1(n13) );
  e05inv000an1n01x5 syn_43 ( .a(n13), .o1(n70) );
  e05aoi222an1n01x5 syn_44 ( .a(n41), .b(ftap_slvidcode[7]), .c(n39), .d(
        slvidcode_reg_8_0), .e(slvidcode_reg_7_0), .f(n40), .o1(n14) );
  e05inv000an1n01x5 syn_45 ( .a(n14), .o1(n69) );
  e05aoi222an1n01x5 syn_46 ( .a(n41), .b(ftap_slvidcode[8]), .c(n39), .d(
        slvidcode_reg_9_0), .e(slvidcode_reg_8_0), .f(n40), .o1(n15) );
  e05inv000an1n01x5 syn_47 ( .a(n15), .o1(n68) );
  e05aoi222an1n01x5 syn_48 ( .a(n41), .b(ftap_slvidcode[9]), .c(n39), .d(
        slvidcode_reg_10_0), .e(slvidcode_reg_9_0), .f(n40), .o1(n16) );
  e05inv000an1n01x5 syn_49 ( .a(n16), .o1(n67) );
  e05aoi222an1n01x5 syn_50 ( .a(n41), .b(ftap_slvidcode[10]), .c(n39), .d(
        slvidcode_reg_11_0), .e(slvidcode_reg_10_0), .f(n40), .o1(n17) );
  e05inv000an1n01x5 syn_51 ( .a(n17), .o1(n66) );
  e05aoi222an1n01x5 syn_52 ( .a(n41), .b(ftap_slvidcode[11]), .c(n39), .d(
        slvidcode_reg_12_0), .e(slvidcode_reg_11_0), .f(n40), .o1(n18) );
  e05inv000an1n01x5 syn_53 ( .a(n18), .o1(n65) );
  e05aoi222an1n01x5 syn_54 ( .a(n41), .b(ftap_slvidcode[12]), .c(n39), .d(
        slvidcode_reg_13_0), .e(slvidcode_reg_12_0), .f(n40), .o1(n19) );
  e05inv000an1n01x5 syn_55 ( .a(n19), .o1(n64) );
  e05aoi222an1n01x5 syn_56 ( .a(n41), .b(ftap_slvidcode[13]), .c(n39), .d(
        slvidcode_reg_14_0), .e(slvidcode_reg_13_0), .f(n40), .o1(n20) );
  e05inv000an1n01x5 syn_57 ( .a(n20), .o1(n630) );
  e05aoi222an1n01x5 syn_58 ( .a(n41), .b(ftap_slvidcode[14]), .c(n39), .d(
        slvidcode_reg_15_0), .e(slvidcode_reg_14_0), .f(n40), .o1(n21) );
  e05inv000an1n01x5 syn_59 ( .a(n21), .o1(n620) );
  e05aoi222an1n01x5 syn_60 ( .a(n41), .b(ftap_slvidcode[15]), .c(n39), .d(
        slvidcode_reg_16_0), .e(slvidcode_reg_15_0), .f(n40), .o1(n22) );
  e05inv000an1n01x5 syn_61 ( .a(n22), .o1(n61) );
  e05aoi222an1n01x5 syn_62 ( .a(n41), .b(ftap_slvidcode[16]), .c(n39), .d(
        slvidcode_reg_17_0), .e(slvidcode_reg_16_0), .f(n40), .o1(n23) );
  e05inv000an1n01x5 syn_63 ( .a(n23), .o1(n60) );
  e05aoi222an1n01x5 syn_64 ( .a(n41), .b(ftap_slvidcode[17]), .c(n39), .d(
        slvidcode_reg_18_0), .e(slvidcode_reg_17_0), .f(n40), .o1(n24) );
  e05inv000an1n01x5 syn_65 ( .a(n24), .o1(n59) );
  e05aoi222an1n01x5 syn_66 ( .a(n41), .b(ftap_slvidcode[18]), .c(n39), .d(
        slvidcode_reg_19_0), .e(slvidcode_reg_18_0), .f(n40), .o1(n25) );
  e05inv000an1n01x5 syn_67 ( .a(n25), .o1(n58) );
  e05aoi222an1n01x5 syn_68 ( .a(n41), .b(ftap_slvidcode[19]), .c(n39), .d(
        slvidcode_reg_20_0), .e(slvidcode_reg_19_0), .f(n40), .o1(n26) );
  e05inv000an1n01x5 syn_69 ( .a(n26), .o1(n57) );
  e05aoi222an1n01x5 syn_70 ( .a(n41), .b(ftap_slvidcode[20]), .c(n39), .d(
        slvidcode_reg_21_0), .e(slvidcode_reg_20_0), .f(n40), .o1(n27) );
  e05inv000an1n01x5 syn_71 ( .a(n27), .o1(n56) );
  e05aoi222an1n01x5 syn_72 ( .a(n41), .b(ftap_slvidcode[21]), .c(n39), .d(
        slvidcode_reg_22_0), .e(slvidcode_reg_21_0), .f(n40), .o1(n28) );
  e05inv000an1n01x5 syn_73 ( .a(n28), .o1(n55) );
  e05aoi222an1n01x5 syn_74 ( .a(n41), .b(ftap_slvidcode[22]), .c(n39), .d(
        slvidcode_reg_23_0), .e(slvidcode_reg_22_0), .f(n40), .o1(n29) );
  e05inv000an1n01x5 syn_75 ( .a(n29), .o1(n54) );
  e05aoi222an1n01x5 syn_76 ( .a(n41), .b(ftap_slvidcode[23]), .c(n39), .d(
        slvidcode_reg_24_0), .e(slvidcode_reg_23_0), .f(n40), .o1(n30) );
  e05inv000an1n01x5 syn_77 ( .a(n30), .o1(n53) );
  e05aoi222an1n01x5 syn_78 ( .a(n41), .b(ftap_slvidcode[24]), .c(n39), .d(
        slvidcode_reg_25_0), .e(slvidcode_reg_24_0), .f(n40), .o1(n31) );
  e05inv000an1n01x5 syn_79 ( .a(n31), .o1(n52) );
  e05aoi222an1n01x5 syn_80 ( .a(n41), .b(ftap_slvidcode[25]), .c(n39), .d(
        slvidcode_reg_26_0), .e(slvidcode_reg_25_0), .f(n40), .o1(n32) );
  e05inv000an1n01x5 syn_81 ( .a(n32), .o1(n51) );
  e05aoi222an1n01x5 syn_82 ( .a(n41), .b(ftap_slvidcode[26]), .c(n39), .d(
        slvidcode_reg_27_0), .e(slvidcode_reg_26_0), .f(n40), .o1(n33) );
  e05inv000an1n01x5 syn_83 ( .a(n33), .o1(n50) );
  e05aoi222an1n01x5 syn_84 ( .a(n41), .b(ftap_slvidcode[27]), .c(n39), .d(
        slvidcode_reg_28_0), .e(slvidcode_reg_27_0), .f(n40), .o1(n34) );
  e05inv000an1n01x5 syn_85 ( .a(n34), .o1(n49) );
  e05aoi222an1n01x5 syn_86 ( .a(n41), .b(ftap_slvidcode[28]), .c(n39), .d(
        slvidcode_reg_29_0), .e(slvidcode_reg_28_0), .f(n40), .o1(n35) );
  e05inv000an1n01x5 syn_87 ( .a(n35), .o1(n48) );
  e05aoi222an1n01x5 syn_88 ( .a(n41), .b(ftap_slvidcode[29]), .c(n39), .d(
        slvidcode_reg_30_0), .e(slvidcode_reg_29_0), .f(n40), .o1(n36) );
  e05inv000an1n01x5 syn_89 ( .a(n36), .o1(n47) );
  e05aoi222an1n01x5 syn_90 ( .a(n41), .b(ftap_slvidcode[30]), .c(n39), .d(
        slvidcode_reg_31_0), .e(slvidcode_reg_30_0), .f(n40), .o1(n37) );
  e05inv000an1n01x5 syn_91 ( .a(n37), .o1(n46) );
  e05aoi222an1n01x5 syn_92 ( .a(n41), .b(ftap_slvidcode[31]), .c(n39), .d(
        ftap_tdi), .e(slvidcode_reg_31_0), .f(n40), .o1(n38) );
  e05inv000an1n01x5 syn_93 ( .a(n38), .o1(n45) );
  e05aoi222an1n01x5 syn_94 ( .a(n41), .b(ftap_slvidcode[1]), .c(n40), .d(
        slvidcode_reg_1_0), .e(slvidcode_reg_2_0), .f(n39), .o1(n42) );
  e05inv000an1n01x5 syn_95 ( .a(n42), .o1(n44) );
  e05fyn00can2d01x5 slvidcode_reg_reg_0 ( .d(n1), .clk(ftap_tck), .psb(
        powergood_rst_trst_b), .o(stap_drreg_tdo[1]) );
  e05fyn003an1n01x5 bypass_reg_reg ( .d(n2), .clk(ftap_tck), .rb(n89), .o(
        bypass_reg) );
  e05fyn003an1n01x5 reset_pulse1_reg ( .d(reset_pulse0), .clk(ftap_tck), .rb(
        n89), .o(reset_pulse1) );
  e05fyn003an1n01x5 slvidcode_reg_reg_1 ( .d(n44), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_1_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_30 ( .d(n46), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_30_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_29 ( .d(n47), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_29_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_28 ( .d(n48), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_28_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_27 ( .d(n49), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_27_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_26 ( .d(n50), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_26_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_25 ( .d(n51), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_25_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_24 ( .d(n52), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_24_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_23 ( .d(n53), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_23_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_22 ( .d(n54), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_22_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_21 ( .d(n55), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_21_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_20 ( .d(n56), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_20_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_19 ( .d(n57), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_19_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_18 ( .d(n58), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_18_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_17 ( .d(n59), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_17_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_16 ( .d(n60), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_16_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_15 ( .d(n61), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_15_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_14 ( .d(n620), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_14_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_13 ( .d(n630), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_13_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_12 ( .d(n64), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_12_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_11 ( .d(n65), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_11_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_10 ( .d(n66), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_10_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_9 ( .d(n67), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_9_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_8 ( .d(n68), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_8_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_7 ( .d(n69), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_7_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_6 ( .d(n70), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_6_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_5 ( .d(n71), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_5_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_4 ( .d(n72), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_4_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_3 ( .d(n73), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_3_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_2 ( .d(n74), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_2_0) );
  e05fyn003an1n01x5 slvidcode_reg_reg_31 ( .d(n45), .clk(ftap_tck), .rb(n89), 
        .o(slvidcode_reg_31_0) );
  e05fyn003an2n01x5 reset_pulse0_reg ( .d(1'b1), .clk(ftap_tck), .rb(n89), .o(
        reset_pulse0) );
  e05oai012an1n01x5 syn_inc_3 ( .b(reset_pulse1), .c(n4), .a(n6), .o1(N63) );
  e05inv000an1n01x5 syn_inc_4 ( .a(1'b0), .o1(tap_rtdr_prog_rst_b[0]) );
  e05inv000an1n01x5 syn_inc_6 ( .a(1'b1), .o1(tap_rtdr_rti) );
  e05inv000an1n01x5 syn_inc_8 ( .a(1'b0), .o1(tap_rtdr_powergood) );
  e05inv000an1n01x5 syn_inc_10 ( .a(1'b1), .o1(tap_rtdr_selectir) );
  e05inv000an1n01x5 syn_inc_12 ( .a(1'b1), .o1(tap_rtdr_irdec[0]) );
  e05inv000an1n01x5 syn_inc_14 ( .a(1'b1), .o1(tap_rtdr_update[0]) );
  e05inv000an1n01x5 syn_inc_16 ( .a(1'b1), .o1(tap_rtdr_shift[0]) );
  e05inv000an1n01x5 syn_inc_18 ( .a(1'b1), .o1(tap_rtdr_capture[0]) );
  e05inv000an1n01x5 syn_inc_20 ( .a(1'b0), .o1(tap_rtdr_tdi[0]) );
  e05inv000an1n01x5 syn_inc_22 ( .a(1'b1), .o1(tapc_remove) );
  e05inv000an1n01x5 syn_inc_24 ( .a(1'b1), .o1(tapc_wtap_sel[0]) );
  e05inv000an1n01x5 syn_inc_26 ( .a(1'b1), .o1(tapc_select[0]) );
  e05inv000an1n01x5 syn_inc_28 ( .a(1'b1), .o1(tapc_select[1]) );
  e05inv000an1n01x5 syn_inc_30 ( .a(1'b1), .o1(sftapnw_ftap_secsel[0]) );
  e05inv000an1n01x5 syn_inc_32 ( .a(1'b1), .o1(tdr_data_out[0]) );
  e05oa0012an2n01x5 syn_inc_34 ( .b(stap_irdecoder_drselect[0]), .c(
        stap_and_all_bits_irreg), .a(bypass_reg), .o(stap_drreg_tdo[0]) );
  e05nor042an1n02x5 syn_inc_35 ( .a(n41), .b(n8), .o1(n39) );
  e05nor042an1n02x5 syn_inc_36 ( .a(n39), .b(n41), .o1(n40) );
  e05mtni22an1n01x5 syn_inc_37 ( .b(ftap_tdi), .a(bypass_reg), .sa(n7), .o(n75) );
  e05aboi22an1n01x5 syn_inc_38 ( .c(stap_drreg_tdo[1]), .d(n8), .a(n8), .b(
        slvidcode_reg_1_0), .out0(n3) );
endmodule


module stap_tdomux ( stap_drreg_tdo, stap_fsm_shift_dr, stap_fsm_shift_ir, 
        stap_irdecoder_drselect, stap_irreg_serial_out, stap_fsm_tlrs, 
        ftap_tck, powergood_rst_trst_b, swcomp_stap_post_tdo, 
        tap_swcomp_active, stap_mux_tdo, tdo_dr, stap_tdomux_tdoen );
  input [1:0] stap_drreg_tdo;
  input [1:0] stap_irdecoder_drselect;
  input stap_fsm_shift_dr, stap_fsm_shift_ir, stap_irreg_serial_out,
         stap_fsm_tlrs, ftap_tck, powergood_rst_trst_b, swcomp_stap_post_tdo,
         tap_swcomp_active;
  output stap_mux_tdo, tdo_dr, stap_tdomux_tdoen;
  wire   stap_mux_tdo_int, stap_mux_tdo_preflop_int, n2, n4, n6, n8, n1, n5,
         n7;

  e05nor002an1n01x5 syn_3 ( .a(stap_fsm_tlrs), .b(n6), .o1(n2) );
  e05nonb02an2n01x5 syn_4 ( .a(n8), .b(stap_fsm_tlrs), .out0(n4) );
  e05aboi22an1n01x5 syn_5 ( .c(n1), .d(n6), .a(n6), .b(n7), .out0(n8) );
  e05inv000an1n01x5 syn_6 ( .a(stap_mux_tdo_int), .o1(n1) );
  e05nonb03an1n01x5 syn_12 ( .a(powergood_rst_trst_b), .b(n7), .c(
        stap_fsm_tlrs), .out0(stap_mux_tdo_preflop_int) );
  e05fyn08fan2d01x5 stap_tdomux_tdoen_reg ( .d(n2), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_tdomux_tdoen) );
  e05fyn08fan2d01x5 stap_mux_tdo_int_reg ( .d(n4), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_mux_tdo_int) );
  e05mtni22an2n01x5 i_stap_ctech_lib_mux_2to1_tdo_posedge_i_ctech_lib_mux_2to1_ctech_lib_mux_2to1_dcszo1 ( 
        .b(stap_mux_tdo_int), .a(stap_mux_tdo_preflop_int), .sa(1'b0), .o(
        stap_mux_tdo) );
  e05aboi22an1n01x5 syn_inc_3 ( .c(stap_fsm_shift_ir), .d(
        stap_irreg_serial_out), .a(stap_fsm_shift_ir), .b(n5), .out0(n7) );
  e05mtni22an1n01x5 syn_inc_4 ( .b(swcomp_stap_post_tdo), .a(tdo_dr), .sa(
        tap_swcomp_active), .o(n5) );
  e05ao0022an2n01x5 syn_inc_5 ( .a(stap_drreg_tdo[0]), .b(
        stap_irdecoder_drselect[0]), .c(stap_drreg_tdo[1]), .d(
        stap_irdecoder_drselect[1]), .o(tdo_dr) );
  e05nor002an1n01x5 syn_inc_6 ( .a(stap_fsm_shift_ir), .b(stap_fsm_shift_dr), 
        .o1(n6) );
endmodule


module stap_glue ( ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi, 
        stap_tdomux_tdoen, sntapnw_atap_tdo_en, pre_tdo, powergood_rst_trst_b, 
        atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms, 
        ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, atapsslv_tdoen, 
        sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b, 
        sntapnw_ftap_tdi2, sntapnw_atap_tdo2, sntapnw_atap_tdo2_en, 
        sn_fwtap_wrck, stap_mux_tdo, tapc_select, tapc_wtap_sel, tapc_remove, 
        stap_wtapnw_tdo );
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [1:0] tapc_select;
  input [0:0] tapc_wtap_sel;
  input ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi,
         stap_tdomux_tdoen, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms,
         ftapsslv_trst_b, ftapsslv_tdi, sntapnw_atap_tdo2, stap_mux_tdo,
         tapc_remove, stap_wtapnw_tdo;
  output pre_tdo, powergood_rst_trst_b, atap_tdoen, sntapnw_ftap_tck,
         sntapnw_ftap_tms, sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo,
         atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2,
         sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sn_fwtap_wrck;


  e05cbf000an1d02x5 i_stap_ctech_lib_clk_buf_tck2_i_ctech_lib_clk_buf_ctech_lib_clk_buf_dcszo1 ( 
        .clk(ftapsslv_tck), .clkout(sntapnw_ftap_tck2) );
  e05and002an2n01x5 i_stap_ctech_lib_dq_i_ctech_lib_dq_ctech_lib_dq_dcszo1 ( 
        .a(ftap_trst_b), .b(fdfx_powergood), .o(powergood_rst_trst_b) );
  e05bfn001an1n01x5 syn_6 ( .a(ftapsslv_trst_b), .o(sntapnw_ftap_trst2_b) );
  e05bfn001an1n01x5 syn_7 ( .a(sntapnw_atap_tdo2), .o(atapsslv_tdo) );
  e05bfn001an1n01x5 syn_8 ( .a(ftapsslv_tms), .o(sntapnw_ftap_tms2) );
  e05bfn001an1n01x5 syn_9 ( .a(ftapsslv_tdi), .o(sntapnw_ftap_tdi2) );
  e05bfn001an1n01x5 syn_10 ( .a(sntapnw_atap_tdo2_en[0]), .o(atapsslv_tdoen)
         );
  e05bfn001an1n01x5 syn_12 ( .a(stap_mux_tdo), .o(pre_tdo) );
  e05inv000an1n01x5 syn_inc_3 ( .a(1'b1), .o1(sn_fwtap_wrck) );
  e05inv000an1n01x5 syn_inc_5 ( .a(1'b1), .o1(sntapnw_ftap_tdi) );
  e05inv000an1n01x5 syn_inc_7 ( .a(1'b0), .o1(sntapnw_ftap_trst_b) );
  e05inv000an1n01x5 syn_inc_9 ( .a(1'b0), .o1(sntapnw_ftap_tms) );
  e05inv000an1n01x5 syn_inc_11 ( .a(1'b1), .o1(sntapnw_ftap_tck) );
  e05mtni22an2n01x5 syn_inc_13 ( .b(stap_tdomux_tdoen), .a(
        sntapnw_atap_tdo_en[0]), .sa(tapc_remove), .o(atap_tdoen) );
endmodule


module stap_dfxsecure_plugin ( fdfx_powergood, fdfx_secure_policy, 
        fdfx_earlyboot_exit, fdfx_policy_update, dfxsecure_feature_en, 
        visa_all_dis, visa_customer_dis, sb_policy_ovr_value, 
        oem_secure_policy );
  input [3:0] fdfx_secure_policy;
  output [2:0] dfxsecure_feature_en;
  input [4:0] sb_policy_ovr_value;
  input [3:0] oem_secure_policy;
  input fdfx_powergood, fdfx_earlyboot_exit, fdfx_policy_update;
  output visa_all_dis, visa_customer_dis;
  wire   dfxsecure_feature_lch_3_0, dfxsecure_feature_lch_2_0,
         dfxsecure_feature_lch_1_0, dfxsecure_feature_lch_0_0, n1, n2, n3, n4,
         n5;

  e05nonb02an1n01x5 syn_5 ( .a(dfxsecure_feature_lch_1_0), .b(
        dfxsecure_feature_lch_0_0), .out0(n2) );
  e05and002an2n01x5 syn_6 ( .a(dfxsecure_feature_lch_0_0), .b(
        dfxsecure_feature_lch_2_0), .o(n4) );
  e05inv000an1n01x5 syn_7 ( .a(fdfx_earlyboot_exit), .o1(n1) );
  e05aoi013an1n01x5 syn_8 ( .b(dfxsecure_feature_lch_1_0), .c(
        dfxsecure_feature_lch_3_0), .d(n4), .a(n1), .o1(n3) );
  e05oai013an1n01x5 syn_9 ( .b(dfxsecure_feature_lch_3_0), .c(
        dfxsecure_feature_lch_2_0), .d(n2), .a(n3), .o1(
        dfxsecure_feature_en[0]) );
  e05oa0012an2n01x5 syn_10 ( .b(dfxsecure_feature_lch_3_0), .c(n4), .a(n3), 
        .o(dfxsecure_feature_en[1]) );
  e05oai012an1n01x5 syn_11 ( .b(dfxsecure_feature_lch_1_0), .c(
        dfxsecure_feature_lch_2_0), .a(fdfx_earlyboot_exit), .o1(n5) );
  e05nor003an2n01x5 syn_12 ( .a(dfxsecure_feature_lch_3_0), .b(
        dfxsecure_feature_lch_0_0), .c(n5), .o1(dfxsecure_feature_en[2]) );
  e05lan00fan2n01x5 dfxsecure_feature_lch_reg_3 ( .clk(fdfx_policy_update), 
        .psb(1'b1), .d(fdfx_secure_policy[3]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_3_0) );
  e05lan00fan2n01x5 dfxsecure_feature_lch_reg_0 ( .clk(fdfx_policy_update), 
        .psb(1'b1), .d(fdfx_secure_policy[0]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_0_0) );
  e05lan00fan2n01x5 dfxsecure_feature_lch_reg_1 ( .clk(fdfx_policy_update), 
        .psb(1'b1), .d(fdfx_secure_policy[1]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_1_0) );
  e05lan00fan2n01x5 dfxsecure_feature_lch_reg_2 ( .clk(fdfx_policy_update), 
        .psb(1'b1), .d(fdfx_secure_policy[2]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_2_0) );
  e05inv000an1n01x5 syn_inc_3 ( .a(1'b0), .o1(visa_customer_dis) );
  e05inv000an1n01x5 syn_inc_5 ( .a(1'b0), .o1(visa_all_dis) );
endmodule


module stap ( ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, ftap_slvidcode, 
        atap_tdo, atap_tdoen, fdfx_powergood, tdr_data_out, tdr_data_in, 
        fdfx_secure_policy, fdfx_earlyboot_exit, fdfx_policy_update, 
        sftapnw_ftap_secsel, sftapnw_ftap_enabletdo, sftapnw_ftap_enabletap, 
        sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, sntapnw_atap_tdo_en, ftapsslv_tck, 
        ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, 
        atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2, 
        sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sntapnw_atap_tdo2, 
        sntapnw_atap_tdo2_en, sn_fwtap_wrck, sn_fwtap_wrst_b, 
        sn_fwtap_capturewr, sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, 
        sn_fwtap_selectwir, sn_awtap_wso, sn_fwtap_wsi, stap_fbscan_tck, 
        stap_abscan_tdo, stap_fbscan_capturedr, stap_fbscan_shiftdr, 
        stap_fbscan_updatedr, stap_fbscan_updatedr_clk, stap_fbscan_runbist_en, 
        stap_fbscan_highz, stap_fbscan_extogen, stap_fbscan_intest_mode, 
        stap_fbscan_chainen, stap_fbscan_mode, stap_fbscan_extogsig_b, 
        stap_fbscan_d6init, stap_fbscan_d6actestsig_b, stap_fbscan_d6select, 
        rtdr_tap_tdo, tap_rtdr_irdec, tap_rtdr_prog_rst_b, tap_rtdr_tdi, 
        tap_rtdr_capture, tap_rtdr_shift, tap_rtdr_update, tap_rtdr_tck, 
        tap_rtdr_powergood, tap_rtdr_selectir, tap_rtdr_rti, stap_isol_en_b );
  input [31:0] ftap_slvidcode;
  output [0:0] tdr_data_out;
  input [0:0] tdr_data_in;
  input [3:0] fdfx_secure_policy;
  output [0:0] sftapnw_ftap_secsel;
  output [0:0] sftapnw_ftap_enabletdo;
  output [0:0] sftapnw_ftap_enabletap;
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [0:0] sn_awtap_wso;
  output [0:0] sn_fwtap_wsi;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  input ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, fdfx_powergood,
         fdfx_earlyboot_exit, fdfx_policy_update, sntapnw_atap_tdo,
         ftapsslv_tck, ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi,
         sntapnw_atap_tdo2, stap_abscan_tdo, stap_isol_en_b;
  output atap_tdo, atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms,
         sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo, atapsslv_tdoen,
         sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b,
         sntapnw_ftap_tdi2, sn_fwtap_wrck, sn_fwtap_wrst_b, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_selectwir,
         stap_fbscan_tck, stap_fbscan_capturedr, stap_fbscan_shiftdr,
         stap_fbscan_updatedr, stap_fbscan_updatedr_clk,
         stap_fbscan_runbist_en, stap_fbscan_highz, stap_fbscan_extogen,
         stap_fbscan_intest_mode, stap_fbscan_chainen, stap_fbscan_mode,
         stap_fbscan_extogsig_b, stap_fbscan_d6init, stap_fbscan_d6actestsig_b,
         stap_fbscan_d6select, tap_rtdr_tck, tap_rtdr_powergood,
         tap_rtdr_selectir, tap_rtdr_rti;
  wire   powergood_rst_trst_b, tapc_remove, stap_fsm_tlrs, stap_fsm_rti,
         stap_selectwir, stap_fsm_capture_ir, stap_fsm_shift_ir,
         stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr, stap_irreg_ireg_7_0, stap_irreg_ireg_6_0,
         stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0,
         stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0,
         stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0,
         stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0,
         stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0,
         stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0,
         stap_irreg_serial_out, stap_irdecoder_drselect_1_0,
         stap_irdecoder_drselect_0_0, stap_and_all_bits_irreg,
         tap_swcomp_active, dfxsecure_feature_en_2_0, dfxsecure_feature_en_1_0,
         dfxsecure_feature_en_0_0, tapc_select_1_0, tapc_select_0_0,
         tapc_wtap_sel_0_0, stap_drreg_tdo_1_0, stap_drreg_tdo_0_0,
         stap_mux_tdo, stap_tdomux_tdoen, n22, SYNOPSYS_UNCONNECTED_1,
         SYNOPSYS_UNCONNECTED_2, SYNOPSYS_UNCONNECTED_3,
         SYNOPSYS_UNCONNECTED_4, SYNOPSYS_UNCONNECTED_5,
         SYNOPSYS_UNCONNECTED_6, SYNOPSYS_UNCONNECTED_7,
         SYNOPSYS_UNCONNECTED_8, SYNOPSYS_UNCONNECTED_9,
         SYNOPSYS_UNCONNECTED_10, SYNOPSYS_UNCONNECTED_11,
         SYNOPSYS_UNCONNECTED_12, SYNOPSYS_UNCONNECTED_13,
         SYNOPSYS_UNCONNECTED_14, SYNOPSYS_UNCONNECTED_15;

  e05cbf000an1d02x5 i_stap_ctech_lib_clk_buf_rtdr_i_ctech_lib_clk_buf_ctech_lib_clk_buf_dcszo1 ( 
        .clk(ftap_tck), .clkout(tap_rtdr_tck) );
  e05bfn000an1n04x5 syn_24 ( .a(powergood_rst_trst_b), .o(n22) );
  stap_fsm i_stap_fsm ( .ftap_tms(ftap_tms), .ftap_tck(ftap_tck), 
        .powergood_rst_trst_b(n22), .tapc_remove(tapc_remove), .stap_fsm_tlrs(
        stap_fsm_tlrs), .stap_fsm_rti(stap_fsm_rti), .stap_fsm_e1dr(
        SYNOPSYS_UNCONNECTED_1), .stap_fsm_e2dr(SYNOPSYS_UNCONNECTED_2), 
        .stap_selectwir(stap_selectwir), .stap_selectwir_neg(
        SYNOPSYS_UNCONNECTED_3), .sn_fwtap_capturewr(sn_fwtap_capturewr), 
        .sn_fwtap_shiftwr(sn_fwtap_shiftwr), .sn_fwtap_updatewr(
        sn_fwtap_updatewr), .sn_fwtap_rti(sn_fwtap_rti), .sn_fwtap_wrst_b(
        sn_fwtap_wrst_b), .stap_fsm_capture_ir(stap_fsm_capture_ir), 
        .stap_fsm_shift_ir(stap_fsm_shift_ir), .stap_fsm_shift_ir_neg(
        SYNOPSYS_UNCONNECTED_4), .stap_fsm_update_ir(stap_fsm_update_ir), 
        .stap_fsm_capture_dr(stap_fsm_capture_dr), .stap_fsm_shift_dr(
        stap_fsm_shift_dr), .stap_fsm_update_dr(stap_fsm_update_dr) );
  stap_irreg i_stap_irreg ( .stap_fsm_tlrs(stap_fsm_tlrs), 
        .stap_fsm_capture_ir(stap_fsm_capture_ir), .stap_fsm_shift_ir(
        stap_fsm_shift_ir), .stap_fsm_update_ir(stap_fsm_update_ir), 
        .ftap_tdi(ftap_tdi), .ftap_tck(ftap_tck), .powergood_rst_trst_b(n22), 
        .stap_irreg_ireg({stap_irreg_ireg_7_0, stap_irreg_ireg_6_0, 
        stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0, 
        stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0}), 
        .stap_irreg_ireg_nxt({stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0, 
        stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0, 
        stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0, 
        stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0}), 
        .stap_irreg_serial_out(stap_irreg_serial_out), .stap_irreg_shift_reg({
        SYNOPSYS_UNCONNECTED_5, SYNOPSYS_UNCONNECTED_6, SYNOPSYS_UNCONNECTED_7, 
        SYNOPSYS_UNCONNECTED_8, SYNOPSYS_UNCONNECTED_9, 
        SYNOPSYS_UNCONNECTED_10, SYNOPSYS_UNCONNECTED_11, 
        SYNOPSYS_UNCONNECTED_12}) );
  stap_irdecoder i_stap_irdecoder ( .powergood_rst_trst_b(n22), 
        .stap_irreg_ireg({stap_irreg_ireg_7_0, stap_irreg_ireg_6_0, 
        stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0, 
        stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0}), 
        .stap_irreg_ireg_nxt({stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0, 
        stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0, 
        stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0, 
        stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0}), .ftap_tck(ftap_tck), .feature_green_en(dfxsecure_feature_en_0_0), .feature_orange_en(
        dfxsecure_feature_en_1_0), .feature_red_en(dfxsecure_feature_en_2_0), 
        .stap_isol_en_b(stap_isol_en_b), .stap_irdecoder_drselect({
        stap_irdecoder_drselect_1_0, stap_irdecoder_drselect_0_0}), 
        .tap_swcomp_active(tap_swcomp_active), .stap_and_all_bits_irreg(
        stap_and_all_bits_irreg) );
  stap_drreg i_stap_drreg ( .stap_fsm_tlrs(stap_fsm_tlrs), .ftap_tdi(ftap_tdi), 
        .ftap_tck(ftap_tck), .ftap_trst_b(ftap_trst_b), .fdfx_powergood(
        fdfx_powergood), .powergood_rst_trst_b(n22), .stap_fsm_capture_dr(
        stap_fsm_capture_dr), .stap_fsm_shift_dr(stap_fsm_shift_dr), 
        .stap_fsm_update_dr(stap_fsm_update_dr), .stap_selectwir(
        stap_selectwir), .ftap_slvidcode(ftap_slvidcode), 
        .stap_irdecoder_drselect({stap_irdecoder_drselect_1_0, 
        stap_irdecoder_drselect_0_0}), .tdr_data_in(tdr_data_in[0]), 
        .tdr_data_out(tdr_data_out[0]), .sftapnw_ftap_secsel(
        sftapnw_ftap_secsel[0]), .tapc_select({tapc_select_1_0, 
        tapc_select_0_0}), .feature_green_en(dfxsecure_feature_en_0_0), 
        .feature_orange_en(dfxsecure_feature_en_1_0), .feature_red_en(
        dfxsecure_feature_en_2_0), .tapc_wtap_sel(tapc_wtap_sel_0_0), 
        .tapc_remove(tapc_remove), .stap_drreg_tdo({stap_drreg_tdo_1_0, 
        stap_drreg_tdo_0_0}), .swcompctrl_tdo(1'b0), .swcompstat_tdo(1'b0), 
        .stap_and_all_bits_irreg(stap_and_all_bits_irreg), .rtdr_tap_tdo(
        rtdr_tap_tdo[0]), .tap_rtdr_tdi(tap_rtdr_tdi[0]), .tap_rtdr_capture(
        tap_rtdr_capture[0]), .tap_rtdr_shift(tap_rtdr_shift[0]), 
        .tap_rtdr_update(tap_rtdr_update[0]), .tap_rtdr_irdec(
        tap_rtdr_irdec[0]), .tap_rtdr_selectir(tap_rtdr_selectir), 
        .tap_rtdr_powergood(tap_rtdr_powergood), .tap_rtdr_rti(tap_rtdr_rti), 
        .tap_rtdr_prog_rst_b(tap_rtdr_prog_rst_b[0]), .stap_fsm_rti(
        stap_fsm_rti) );
  stap_tdomux i_stap_tdomux ( .stap_drreg_tdo({stap_drreg_tdo_1_0, 
        stap_drreg_tdo_0_0}), .stap_fsm_shift_dr(stap_fsm_shift_dr), 
        .stap_fsm_shift_ir(stap_fsm_shift_ir), .stap_irdecoder_drselect({
        stap_irdecoder_drselect_1_0, stap_irdecoder_drselect_0_0}), 
        .stap_irreg_serial_out(stap_irreg_serial_out), .stap_fsm_tlrs(
        stap_fsm_tlrs), .ftap_tck(ftap_tck), .powergood_rst_trst_b(n22), 
        .swcomp_stap_post_tdo(1'b0), .tap_swcomp_active(tap_swcomp_active), 
        .stap_mux_tdo(stap_mux_tdo), .tdo_dr(SYNOPSYS_UNCONNECTED_13), 
        .stap_tdomux_tdoen(stap_tdomux_tdoen) );
  stap_glue i_stap_glue ( .ftap_tck(ftap_tck), .ftap_tms(ftap_tms), 
        .ftap_trst_b(ftap_trst_b), .fdfx_powergood(fdfx_powergood), .ftap_tdi(
        ftap_tdi), .stap_tdomux_tdoen(stap_tdomux_tdoen), 
        .sntapnw_atap_tdo_en(sntapnw_atap_tdo_en[0]), .pre_tdo(atap_tdo), 
        .powergood_rst_trst_b(powergood_rst_trst_b), .atap_tdoen(atap_tdoen), 
        .sntapnw_ftap_tck(sntapnw_ftap_tck), .sntapnw_ftap_tms(
        sntapnw_ftap_tms), .sntapnw_ftap_trst_b(sntapnw_ftap_trst_b), 
        .sntapnw_ftap_tdi(sntapnw_ftap_tdi), .sntapnw_atap_tdo(
        sntapnw_atap_tdo), .ftapsslv_tck(ftapsslv_tck), .ftapsslv_tms(
        ftapsslv_tms), .ftapsslv_trst_b(ftapsslv_trst_b), .ftapsslv_tdi(
        ftapsslv_tdi), .atapsslv_tdo(atapsslv_tdo), .atapsslv_tdoen(
        atapsslv_tdoen), .sntapnw_ftap_tck2(sntapnw_ftap_tck2), 
        .sntapnw_ftap_tms2(sntapnw_ftap_tms2), .sntapnw_ftap_trst2_b(
        sntapnw_ftap_trst2_b), .sntapnw_ftap_tdi2(sntapnw_ftap_tdi2), 
        .sntapnw_atap_tdo2(sntapnw_atap_tdo2), .sntapnw_atap_tdo2_en(
        sntapnw_atap_tdo2_en[0]), .sn_fwtap_wrck(sn_fwtap_wrck), 
        .stap_mux_tdo(stap_mux_tdo), .tapc_select({tapc_select_1_0, 
        tapc_select_0_0}), .tapc_wtap_sel(tapc_wtap_sel_0_0), .tapc_remove(
        tapc_remove), .stap_wtapnw_tdo(1'b1) );
  stap_dfxsecure_plugin i_stap_dfxsecure_plugin ( .fdfx_powergood(
        fdfx_powergood), .fdfx_secure_policy(fdfx_secure_policy), 
        .fdfx_earlyboot_exit(fdfx_earlyboot_exit), .fdfx_policy_update(
        fdfx_policy_update), .dfxsecure_feature_en({dfxsecure_feature_en_2_0, 
        dfxsecure_feature_en_1_0, dfxsecure_feature_en_0_0}), .visa_all_dis(
        SYNOPSYS_UNCONNECTED_14), .visa_customer_dis(SYNOPSYS_UNCONNECTED_15), 
        .sb_policy_ovr_value({1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), 
        .oem_secure_policy({1'b0, 1'b0, 1'b0, 1'b0}) );
  e05inv000an1n01x5 syn_inc_5 ( .a(1'b1), .o1(stap_fbscan_d6select) );
  e05inv000an1n01x5 syn_inc_7 ( .a(1'b0), .o1(stap_fbscan_d6actestsig_b) );
  e05inv000an1n01x5 syn_inc_9 ( .a(1'b1), .o1(stap_fbscan_d6init) );
  e05inv000an1n01x5 syn_inc_11 ( .a(1'b0), .o1(stap_fbscan_extogsig_b) );
  e05inv000an1n01x5 syn_inc_13 ( .a(1'b1), .o1(stap_fbscan_mode) );
  e05inv000an1n01x5 syn_inc_15 ( .a(1'b1), .o1(stap_fbscan_chainen) );
  e05inv000an1n01x5 syn_inc_17 ( .a(1'b1), .o1(stap_fbscan_intest_mode) );
  e05inv000an1n01x5 syn_inc_19 ( .a(1'b1), .o1(stap_fbscan_extogen) );
  e05inv000an1n01x5 syn_inc_21 ( .a(1'b1), .o1(stap_fbscan_highz) );
  e05inv000an1n01x5 syn_inc_23 ( .a(1'b1), .o1(stap_fbscan_runbist_en) );
  e05inv000an1n01x5 syn_inc_25 ( .a(1'b1), .o1(stap_fbscan_updatedr_clk) );
  e05inv000an1n01x5 syn_inc_27 ( .a(1'b1), .o1(stap_fbscan_updatedr) );
  e05inv000an1n01x5 syn_inc_29 ( .a(1'b1), .o1(stap_fbscan_shiftdr) );
  e05inv000an1n01x5 syn_inc_31 ( .a(1'b1), .o1(stap_fbscan_capturedr) );
  e05inv000an1n01x5 syn_inc_33 ( .a(1'b1), .o1(stap_fbscan_tck) );
  e05inv000an1n01x5 syn_inc_35 ( .a(1'b0), .o1(sn_fwtap_wsi[0]) );
  e05inv000an1n01x5 syn_inc_37 ( .a(1'b1), .o1(sn_fwtap_selectwir) );
  e05inv000an1n01x5 syn_inc_39 ( .a(1'b1), .o1(sftapnw_ftap_enabletap[0]) );
  e05inv000an1n01x5 syn_inc_41 ( .a(1'b1), .o1(sftapnw_ftap_enabletdo[0]) );
endmodule

