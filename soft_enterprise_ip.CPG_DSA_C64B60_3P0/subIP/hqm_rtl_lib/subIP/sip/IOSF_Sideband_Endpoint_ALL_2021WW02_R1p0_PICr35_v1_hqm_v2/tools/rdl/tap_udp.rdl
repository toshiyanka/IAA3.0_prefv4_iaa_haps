<% if ($TAP_UDP) { 
   } else {
   $TAP_UDP = 1;
%>

//------------------------------------------------------------------------------
// User Defined Properties (UDP) Library
//
// This contains all of the UDPs that are used globally throughout all register
// descriptions.  UDP should not be declared anywhere else.
//
// Updated by mwiznero 05/21/2013
// This version of TAP UDP is aligned to phase2 of the TAP SystemRDL / Nebulon format
//   where we are incorporating similar functionality that Haswell implmented.
//   First release of phase 2 UDP in ww15.
//   Reviewed, updated, and added UDPs in ww19 through ww21.
//
// Updated by mwiznero 12/13/2013
//
//
//
//
//
//------------------------------------------------------------------------------

///////////////////////////////////// Properties aligned to the address map which means the TAP

property TapIpName  {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapInstName {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapSlvIdNum {
    component = addrmap;
    type      = number;
    default   = 0;
};
property TapModuleName {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapMiscUserText {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapPowerName {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapSlvIdPowerNum {
    component = addrmap;
    type      = number;
    default   = 0;
};
property TapRegionName {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapSlvIdRegionNum {
    component = addrmap;
    type      = number;
    default   = 0;
};
property TapIsBoundaryScan {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property TapIsRmtDrBussed {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property TapIsRemovable {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property TapPowerGoodSignal {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapIsIntDrPrgReset {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property TapIsRmtDrPrgReset {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property TapIrCaptureValue {
    component = addrmap | reg;
    type      = number;
    default   = 1;                       //changed default from 0x01 to 1
};
property TapTckParkValue {
    component = addrmap;
    type      = number;
    default   = "";
};
property TapVersion {
    component = addrmap;
    type      = number;
    default   = 0;
};
property TapSecurityLevel {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapIsTertiaryPort {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property TapTertiaryPortName {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapSlvIdCodeInfo  {
    component = addrmap;
    type      = number;
    default   = 0;
};
property TapNetworkMasterID {
    component = addrmap;
    type      = number;
    default   = 0;
};
property TapSlvIdCodeValue {            
    component = addrmap;
    type      = number;
    default   = 0;
};
property TapSlvIdCodeSignal {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapSlvIdCodeOpcode {
    component = addrmap;
    type      = number;
    default   = 0;
};
property TapIdCodeValue {
    component = addrmap;
    type      = number;
    default   = 0;
};
property TapNumWtaps {
    component = addrmap;
    type      = number;
    default   = 0;
};
property WtapIsPosTck { 
    component = addrmap;
    type      = boolean;
    default   = false;
};
property WtapIsInSeries {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property WtapWithSlvIdCode {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property TapExiAgentNum {
    component = addrmap;
    type      = number;
    default   = 0;
};
property TapIsParent {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property TapRmtDrSignalPrefix {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapRtlPath  {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapNetworkID  {
    component = addrmap;
    type      = number;
    default   = 0;
};

////////////////////////////////////// Properties for TAP network
property TAP_Control {
    component = field;
    type      = string;
    default   = "";
};
property TAP_SChain_Next {
    component = field;
    type      = string;
    default   = "";
};
 
// ================================= New TAP address map properties for post-nebulon rev2.06 (rev2.07p3?)

property TapMaxFreq  {
    component = addrmap;
    type      = number;
    default   = 0;
}; 
property TapType {
    component = addrmap;
    type      = string;
    default   = "";
};
property TapIsWtap {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property TapNetworkIpName {
    component = field;
    type      = string;
    default   = "";
};
property TapIpPortName {
    component = field;
    type      = string;
    default   = "";
};
property TapIsPosTckTdo {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property TapIsNotFullOpcodeSpec {
    component = addrmap;
    type      = boolean;
    default   = false;
};
property TapGroupName {
    component = field;
    type      = string;
    default   = "";
};


////////////////////////////////////// Properties aligned to a TAP Register

property TapTotalNumRegBits {
    component = reg;
    type      = number;
    default   = 0;
};
property TapShiftRegLength {
    component = reg;
    type      = number;
    default   = 0;
};
property TapOpcodeSecurityLevel {
  component = reg;
  type = string;
  default = "";
};
property TapOpcodeEngageType {
    component = reg;
    type      = string;
    default   = "";
};
property TapIsNotFullOpcodeSpec {
    component = reg;
    type      = boolean;
    default   = false;
};

property TapRegResetType {
    component = reg;
    type      = string;
    default   = "";
};
property TapShadowSleepState {
    component = reg;
    type      = string;
    default   = "";
};
property TapShadowRestoreState {
    component = reg;
    type      = string;
    default   = "";
};
property TapIsDrRemote {
    component = reg;
    type      = boolean;
    default   = false;
};
property TapDrIsBypass {
    component = reg;
    type      = boolean;
    default   = false;
};
property TapDrIsFixedSize {
    component = reg;
    type      = boolean;
    default   = true;
};
property ChopID {
    component = addrmap | reg | field;
    type      = string;
    default   = "";
};
property TapShadowSignal {
    component = reg | field;
    type      = string;
    default   = "";
};
property TapRcvrSignal {
    component = reg | field;
    type      = string;
    default   = "";
};
property TapPriSignal {
    component = reg | field;
    type      = string;
    default   = "";
};
property TapUseSignalID {
    component = reg | field;
    type      = boolean;
    default   = false;
};
property TapDrImplStatus {
    component = reg;
    type      = string;
    default   = "";
};
property RegOpcode {
    component = reg;
    type      = number;
    default   = 0;
};
//
// ================================= New TAP register properties for post-nebulon rev2.06
//
property TapRegClockDomain {
    component = reg;
    type      = string;
    default   = "";
};



/////////////////////////////////// Properties aligned to a TAP Bit field properties
property AccessType {
    component = field; 
    type      = string;
    default   = "";
};
property TapFieldSliceID {
    component = field; 
    type      = string;
    default   = "";
};
property TapFieldIsVarSize {
    component = field; 
    type      = boolean;
    default   = false;
};
property TapWrEnField {
    component = field; 
    type      = string;
    default   = "";
};
property TapWrEnPolarity {
    component = field; 
    type      = number;
    default   = 1;
};
property TapFieldIsNoInit {
    component = field; 
    type      = boolean;
    default   = false;
};
property TapFieldTemplate  { 
    component = field; 
    type      = string;
    default   = "";
};



<% }; %>
