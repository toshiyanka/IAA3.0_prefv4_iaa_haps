#!/bin/echo "Must source me, can not run just as is"
#-*- shell-script -*-              For EMACS -- lets formatting happen

# this file generated by {.$tool.} from the perl template:
# {.$source.}

echo "rcfwl.env: DATE =" `/bin/date`
## Update path to include the best ever scripts
setenv EC_ENV_ROOT /usr/intel/common/pkgs/eclogin/1.0
alias gcc '{.&ToolConfig::ToolConfig_get_general_var("GCC_PATH").}/gcc'
alias modpath 'set modpath=(\!*); source $EC_ENV_ROOT/bin/modpath; unset modpath'

if (! $?GK_build ) then
    setenv REPO_ROOT `pwd`
else
    setenv REPO_ROOT ${GK_build}
endif

if (! $?PCS_REPO_FOCUS ) then
    setenv PCS_REPO_FOCUS rcf_widget_library
endif

if (! $?DUT ) then
    setenv DUT rcfwl 
endif

if (! $?SA_PROJECT ) then
    setenv SA_PROJECT srvr10nm
endif
if (! $?PUNIT_PROJECT ) then
    setenv PUNIT_PROJECT srvr10nm
endif

#TODO: PCS_REPO_ROOT and SOC_ROOT are needed here until all references are removed from the model
setenv PCS_REPO_ROOT $REPO_ROOT
setenv DFX_COLLAGE_OUTPUT $REPO_ROOT/IPs/dfx_pcs/rtl
setenv RTL_ROOT {.$ENV{RTL_ROOT}.}
setenv RTL_PROJ_TOOLS {.$ENV{RTL_PROJ_TOOLS}.}
setenv SOC_ROOT $REPO_ROOT

##vgaddam added to fix the ucmake infinite loop issue
modpath  -d  /usr/intel/bin
modpath  -b /usr/bin /usr/intel/bin

#setenv ACE_SAVED_COMPILE_RESULTS $REPO_ROOT/results
##Make PSETUP working


setenv PSETUP_BASEDIR  /p/com/env/psetup/5.3
setenv PSETUP_SITE_DEF $REPO_ROOT/sitedef/siteDef
echo PSETUP_SITE_DEF $REPO_ROOT/sitedef/siteDef
##### To uncomment this you have to change the delimiters from [] back to the normal ones
##### setenv PSETUP_TOOLRC   [&ToolConfig::ToolConfig_get_tool_path("toolrc")]
##### echo PSETUP_TOOLRC   [&ToolConfig::ToolConfig_get_tool_path("toolrc")]
alias  tsetup "source $PSETUP_BASEDIR/bin/setupTool"


## ACE setup
##############################
#setenv ACE_RC $REL/ace/sc.acerc # from REL only. need to setenv in case of local changes!

echo "Focusing on $PCS_REPO_FOCUS dut=$DUT"
echo "REPO_ROOT is $REPO_ROOT"

setenv ACE_RC $REPO_ROOT/cfg/rcfwl.acerc # acerc is hardcoded to simplify setup
# setenv ACE_LIB_PATH &ToolConfig::ToolConfig_get_tool_path('ace_lib')
setenv ACE_ENG $REPO_ROOT
setenv ACE_PROJECT hqm_rcfwl
setenv ACE_PWA_DIR
setenv TMP /netbatch
setenv ACE_RTL_SIM vcs
setenv ACE_EXPER_HDL_USE_FLAG_REFS 1

## gentools
#setenv USER_ITOOLS $REPO_ROOT/.itools
setenv PROJECT_ITOOLS {.$ENV{RTL_PROJ_BIN}.}/setup_tools/project_itools

# set PROJECT
setenv PROJECT rcfwl

#Tools versions
#probably

# Declare all of the environment variables that ToolConfig (ToolData.pm) calls for
# for all of the declared subtools.
# Do this instead of calling tsetup.
{.
"# Starting the loop for each rcfwl subscope\n";
.}
{.
  use lib "$ENV{RTL_PROJ_BIN}/perllib";
  use ToolConfig;
  my @subscopes = ToolConfig_get_tool_var('ipconfig/hqm_rcfwl','SUB_SCOPES');
  #push @subscopes, "rcfwl";
  foreach my $ss ( @subscopes ) {
    $OUT .= "# next subscope $ss\n";
    my $env_hash = ToolConfig_get_tool_env_var("ipconfig/$ss",undef);
    foreach my $env_var (keys %$env_hash) {
      # The Text::Template utility uses $OUT as a special output variable
      $OUT .= "setenv $env_var $env_hash->{$env_var}\n";
    }
  }
.}

{.
"# End of rcfwl subscopes\n";
.}


unsetenv VCS_HOME
tsetup vcs {.&ToolConfig::ToolConfig_get_tool_version("vcs").}
tsetup ace {.&ToolConfig::ToolConfig_get_tool_version("ace").}
echo "Done Running tsetup ace"
setenv ACE_HOME {.&ToolConfig::ToolConfig_get_tool_path("ace").}
### tsetup verdi3 &ToolConfig::ToolConfig_get_tool_version("verdi3")
### tsetup spyglass &ToolConfig::ToolConfig_get_tool_version("spyglass")
### setenv SPYGLASS_VER &ToolConfig::ToolConfig_get_tool_version("spyglass")
### tsetup ovm 2.1.1_2
### tsetup saola &ToolConfig::ToolConfig_get_tool_version("saola")
### tsetup designcompiler &ToolConfig::ToolConfig_get_tool_version("designcompiler")


# Commenting out, I don't think we need it, and removing the delimiters too
# tsetup zeroin &ToolConfig::ToolConfig_get_tool_version("zeroin")

# DEBUG comment out
# modpath -q -n 1 -v  MGLS_LICENSE_FILE /p/wlv/tools/lic/mentor.lic

# DEBUG temporarily commenting out
# tsetup lintra {.&ToolConfig::ToolConfig_get_tool_version("lintra").}

setenv LINTRA_VER {.&ToolConfig::ToolConfig_get_tool_version("lintra").}
setenv LINTRARULES "comment out &ToolConfig::ToolConfig_get_tool_path('lintra-rules')"

# DEBUG temporarily commenting out
# tsetup lira {.&ToolConfig::ToolConfig_get_tool_version("lira").}

setenv LIRA_VER {.&ToolConfig::ToolConfig_get_tool_version("lira").}


##VERDI SETUP
# Following env FLAT_ALL_ARRAYS is for Siloti in SV environments
setenv FLAT_ALL_ARRAYS 1
#  For ISSUE SPS0210266 mismatch with VCS in psf genblocks
setenv NOVAS_VCSRULE_GENBLK 1
# Env required because of mismatch between KDB and dumper in 2010.07 stream with unnamed blocks.  To be fixed in 2010.10.  Then default will be 1.
setenv NOVAS_FSDB_UBLK_MODE 1
# env for Siloti 4-byte compression
setenv FSDB_ENV_ENABLE_VAR_VC_COUNT 0
# setenv NOVAS_FSDB_PARALLEL 1
setenv NOVAS_FSDB_NO_REAL 1

# DEBUG temporarily commenting out
# tsetup blueprint {.&ToolConfig::ToolConfig_get_tool_version("blueprint").}

# DEBUG temporarily commenting out
# tsetup nebulon {.&ToolConfig::ToolConfig_get_tool_version("nebulon").}

setenv NEBULON_VER {.&ToolConfig::ToolConfig_get_tool_version("nebulon").}

# env for socfuseegn tool
#setenv SOCFUSEGEN  {.&ToolConfig::ToolConfig_get_tool_path('socfusegen').}
setenv SOCFUSEGEN_VAR  {.&ToolConfig::ToolConfig_get_tool_path('socfusegen').}

# DVT ; hmangat
### tsetup dvt &ToolConfig::ToolConfig_get_tool_version("dvt")
# setenv DVTLMD_LICENSE_FILE {.`getLf amiq/dvt`.}

modpath -q -f -n 1 $REPO_ROOT/bin

# modpath -q -n 1 -v PERLLIB "$REPO_ROOT/ace/lib"
# Instead we moved MODEL/ace/lib into MODEL/cfg/ace
modpath -q -n 1 -v PERLLIB "$REPO_ROOT/cfg/ace/lib"

## LM_PROJECT is set in rtl.rc for BXT; DO NOT override in this file
## setenv LM_PROJECT CCDO-BXT

# DEBUG commenting out this /p/wlv file
# source /p/wlv/tools/post_setup_pcs

unlimit stacksize

setenv ACEREG_LOG 1

#DC Script ENV
setenv NO_HOME_AREA_LINK '1'

# for DW in spyglass:
# (SYNOPSYS was not defined, so skip)
# setenv SPYGLASS_DC_PATH $SYNOPSYS


##NB WASH. TODO: canavaro removed for now until long term NB solution defined
#setenv NB_WASH_GROUPS umgidc,wlv
#setenv NB_WASH_ENABLED




## CPU related env - from vikranth
# setenv RTL_PROJ_BIN $REPO_ROOT/perllib/rtl_proj_bin
setenv ACE_CPU pcs
setenv USE_VERDI3 1


# License files should now be automatically set when "tsetup <TOOL> <VERSION>" is executed
## sitedef tool info is generated via entry in cfg/RTLToolData.pm
## If tools are missing license, create proper RTLToolData entry and add tsetup line
## OLD
###########################################
## a solution to avoid TurnIn on each licnse change
#if ( -d /p/wlv/tools/lic/ ) then
#        echo -n "Settings licenses /p/wlv/tools/lic/ "
#        foreach env (`/bin/ls /p/wlv/tools/lic/*lic | awk -F\/ '{print $NF}' | awk -F\. '{print $1}' | sort -u`)
#                echo -n " ${env} "
#                foreach lic (`/bin/ls -1r /p/wlv/tools/lic/${env}* `)
#                        echo -n "."
#                        modpath -q -n 1 -v ${env} ${lic}
#                end
#        end
#        echo " done"
#endif
#TODO - AG License file for atrenta was not correct
#setenv ATRENTA_LICENSE_FILE 7595@plxs0405.pdx.intel.com
## LM_PROJECT is set in rtl.rc for BXT; DO NOT override in this file
## setenv LM_PROJECT VLV_IDC
#setenv UC_TOOLS /p/wlv/tools/uc_tools/v1.4_12ww50
setenv DT_CAD_TOOLS {.$ENV{RTL_CAD_ROOT}.}/dt
setenv PROJ_TOOLS {.$ENV{RTL_PROJ_TOOLS}.}
setenv TB_CONFIG_FILE $REPO_ROOT/$PCS_REPO_FOCUS/verif/tb/env/${DUT}_cfg

setenv ACE_TRANSLATOR_BLOCK_UNKNOWNS 0
# jrgover - This kludge is required due to GLM cpu taking over the simbuild env. - see "CPU related env" above
# create an alias and env vars for pcode_tools.pl
# This allows pcode_tools and it's called subtools to use the original ToolConfig environment
if (! $?TC_RESTORE_MODEL_ROOT ) then
   setenv TC_RESTORE_MODEL_ROOT {.$ENV{MODEL_ROOT}.}
   setenv TC_RESTORE_RTL_PROJ_BIN {.$ENV{RTL_PROJ_BIN}.}
   setenv TC_RESTORE_PROJECT {.$ENV{PROJECT}.}
   setenv TC_RESTORE_RTL_CAD_ROOT {.$ENV{RTL_CAD_ROOT}.}
endif
alias fox2run '$REPO_ROOT/ace/bin/tc_restore.pl $REPO_ROOT/punit/verif/tb/foxcode/bin/fox2run'
alias simbuild '$REPO_ROOT/ace/bin/tc_restore.pl $TC_RESTORE_RTL_PROJ_BIN/simbuild'
alias simregress '$REPO_ROOT/ace/bin/tc_restore.pl $TC_RESTORE_RTL_PROJ_BIN/simregress'
alias pcode_tools.pl '$REPO_ROOT/ace/bin/tc_restore.pl $REPO_ROOT/ace/bin/pcode_tools.pl'
#setenv MODEL_ROOT $REPO_ROOT/cpu
if ( ! $?FE2BE_ROOT ) then
      setenv MODEL_ROOT $REPO_ROOT
endif
### needed for Chef  ###

#setenv RTL_CAD_ROOT /nfs/site/eda/group/SYSNAME/socenv/
setenv RTL_CAD_ROOT /p/hdk/rtl/cad/x86-64_linux26

## indicates to mlm subrepo that quickcov should be enabled
## jabesset - Yael will re-enable this, i can't get it to work
## because i dont know how to get simbuild to generate an 
## empty version of mlm_coverage_empty in target/source/soc/boxes!
## setenv QUICKCOV_ENABLED 1

# if ( ! $?JEM_COV_SAMPLE_CLK ) then
#   setenv JEM_COV_SAMPLE_CLK pcs_tb_top.simclk.oscclk.clkout
# endif
# setenv JEM "comment out &ToolConfig::ToolConfig_get_tool_path('jem')"
setenv VUNIT_HOME "I think we do not need for srvr10nm but here is what it was: &ToolConfig::ToolConfig_get_tool_path('vunit')"
# if ($?LD_LIBRARY_PATH) then
#   setenv LD_LIBRARY_PATH $JEM/lib:$LD_LIBRARY_PATH
# else
#   setenv LD_LIBRARY_PATH $JEM/lib
# endif

### Cadence Vipcat tool suite setup ###
# tsetup vipcat "Commenting out like this: &ToolConfig::ToolConfig_get_tool_version("vipcat") -roam -bits 64"
setenv DENALI_LICENSE_QUEUE_TIMEOUT 60
setenv DENALI_LICENSE_QUEUE_RETRY_DELAY 180
### Enable license queuing for VIP licenses
setenv  LICENSE_QUEUEING  yes

# FIXME: Remove following two lines if not needed
setenv cpu `sysname -cpu`
setenv NB_DEFAULT_QSLOT /gatekeeper

# for getting local ace_vericom.pl
modpath -q -d $REPO_ROOT/bin
modpath -q -n 1 $REPO_ROOT/bin
modpath -q -n 1 $REPO_ROOT/bin/ace_hacks

## WHY WAS PCS DOING THIS??unsetenv SOC_ROOT

cd $REPO_ROOT

##### this block related to git hooks is sometimes problematic for certain settings of
##### shell variables certain users have, and it appears to exist only to hack git control files,
##### which we don't want to do anyway, so I am commenting it out.
##### This should be removed or commented out in all repos.
##### echo "-1\n"
##### set owner = `/bin/ls -l ../cfg/.gitignore | awk '{print $3}'`
##### echo "0\n"
##### if ("$owner" == $USER) then
#####   rm -rf .git/hooks
#####   ln -fs ../.git_hooks .git/hooks
##### endif

#for cpu - from vikranth
set path = ($REPO_ROOT/bin $path)

if ( $?VTBIN ) then
      set vt_bin = ${VTBIN}
      set mpath
      foreach spath ($path)
         if ($spath !~ $vt_bin) then
            set mpath = ($mpath $spath)
         endif
       end
        set path = ($vt_bin $mpath)
endif
unset vt_bin

setenv FE_ROOT /p/socenv/cents/projects/da_projects/glm/fe/


## CPU related env - from vikranth
# setenv RTL_PROJ_BIN $REPO_ROOT/perllib/rtl_proj_bin
setenv ACE_CPU pcs

set path = ($REPO_ROOT/bin $path)
if ( $?VTBIN ) then
      set vt_bin = ${VTBIN}
      set mpath
      foreach spath ($path)
         if ($spath !~ $vt_bin) then
            set mpath = ($mpath $spath)
         endif
       end
        set path = ($vt_bin $mpath)
endif
unset vt_bin

### end CPU related env - from vikranth
#################

#DEBUG comment out
# set clone_is = `git remote -v | grep fetch | awk '{print $2}'`
############# Begin: making the '?' alias #############################################
set alias_str="#############################################################################@# You are running srvr10nm environment @# 	PROJECT ............... $PROJECT"
    if ( $?PCS_REPO_FOCUS ) then
		set alias_str=`echo "$alias_str @#   MODEL .................. $PCS_REPO_FOCUS"`
    endif
    if ( $?IP_RELEASE ) then
	set alias_str=`echo "$alias_str@#   IP_RELEASE ............. $IP_RELEASE"`
    endif
		if ( $?RTLMODELS ) then
  set alias_str=`echo "$alias_str @#   RTL MODELS ............. $RTLMODELS"`
		endif
#DEBUG comment out
#		if ( $?clone_is ) then
#  set alias_str=`echo "$alias_str @#   CLONED MODEL ........... $clone_is"`
#		endif

		if ( $?REPO_ROOT ) then
  set alias_str=`echo "$alias_str @#   REPO ROOT .............. $REPO_ROOT"`
		endif
		if ( $?SETUP_STRING ) then
  set alias_str=`echo "$alias_str @# To restore this setup run:@ $SETUP_STRING"`
		endif
    #calcualte which core/uncore models the central root is synced with
    #set alias_str = `echo "$alias_str@# Central Model is in sync with: "`
    #set parent_repos =  `/bin/cat $RTLMODELS/GATEKEEPER/CONTAINED_MODELS | /bin/egrep -i "core|fc" `
    #set parent_repos =  `unalias cwdcmd; unalias cd; cd $CENTRAL_ROOT ; bk listreleases | grep -i core `
    #set alias_str = `echo "$alias_str $parent_repos@#"`

    #set alias_str=`echo "$alias_str@#        To restore this setup run:@$SETUP_STR"`

	    set alias_str = `echo "$alias_str@#############################################################################"`

alias ? 'echo $alias_str | tr @ \\n'
echo $alias_str | tr '@' '\n'
#setenv VISAROOT {.$ENV{RTL_PROJ_TOOLS}.}/visa/2.15.m1
##### setenv VISAROOT &ToolConfig::ToolConfig_get_tool_path("visait")
#tsetup VisaIT &ToolConfig::ToolConfig_get_tool_version("visait")
#tsetup visait &ToolConfig::ToolConfig_get_tool_version("visait")
##### setenv VISA_RTL $VISAROOT/rtl


## MPP
setenv PAR_UPF_INSTALL_DIR $REPO_ROOT/src/soc/upf/par

##CTECH
#setenv CTECH_LIB_NAME CTECH_v_rtl_lib
# This facilitates the ctech sub-lib methodology to work
## jabesset - Denis's ACE fix for HSD #1012764284
setenv ACE_TOPSCOPE_SUBLIBDEF_OVR 1

setenv ACE_TOOL_LOGDIR $REPO_ROOT

# Verdi setup for rtldebug
if ( $?RTLDEBUG ) then
  unsetenv VERDI_HOME
  setenv SNPSLMD_LICENSE_FILE {.`getLf novas/verdi`.}
  setenv NOVAS_IDLE_LICENSE_CHECKBACK {.&ToolConfig::ToolConfig_get_tool_env_var("verdi","NOVAS_IDLE_LICENSE_CHECKBACK").}
  setenv NOVAS_IDLE_LICENSE_CHECKBACK_SILENCE {.&ToolConfig::ToolConfig_get_tool_env_var("verdi","NOVAS_IDLE_LICENSE_CHECKBACK_SILENCE").}
  #tsetup verdi3 {.&ToolConfig::ToolConfig_get_tool_version("verdi").}
  setenv VERDI_HOME {.&ToolConfig::ToolConfig_get_tool_path("verdi").}
  setenv PATH ${PATH}:${VERDI_HOME}/bin
endif

tsetup verdi3 {.&ToolConfig::ToolConfig_get_tool_version("verdi").} 
