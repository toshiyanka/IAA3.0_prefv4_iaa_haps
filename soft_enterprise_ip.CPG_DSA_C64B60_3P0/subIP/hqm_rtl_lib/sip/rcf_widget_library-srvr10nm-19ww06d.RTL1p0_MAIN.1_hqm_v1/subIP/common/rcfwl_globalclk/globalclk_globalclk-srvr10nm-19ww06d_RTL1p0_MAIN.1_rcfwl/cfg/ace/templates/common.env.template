#!/bin/csh -f
#
# this file generated by {.$tool.} from the perl template:
# {.$source.}
#
# This file, when sourced, sets up the common ace environment
#

# Verdi setup for rtldebug
unsetenv VERDI_HOME
setenv SNPSLMD_LICENSE_FILE {.`getLf novas/verdi`.}
setenv NOVAS_IDLE_LICENSE_CHECKBACK {.&ToolConfig::ToolConfig_get_tool_env_var("verdi","NOVAS_IDLE_LICENSE_CHECKBACK").}
setenv NOVAS_IDLE_LICENSE_CHECKBACK_SILENCE {.&ToolConfig::ToolConfig_get_tool_env_var("verdi","NOVAS_IDLE_LICENSE_CHECKBACK_SILENCE").}
tsetup verdi {.&ToolConfig::ToolConfig_get_tool_version("verdi").}
setenv VERDI_HOME {.&ToolConfig::ToolConfig_get_tool_path("verdi").}
setenv PATH ${PATH}:${VERDI_HOME}/bin

setenv MODEL_ROOT     {.$ENV{MODEL_ROOT}.}
setenv REPO_ROOT      `pwd`
setenv PROJ_ROOT      {.$ENV{PROJ_ROOT}.}

setenv IP_MODELS      {.$ENV{IP_MODELS}.}
setenv IP_RELEASES    {.$ENV{IP_RELEASES}.}
setenv IP_RELEASE     {.$ENV{IP_RELEASE}.}
setenv HIP_RELEASE    {.$ENV{HIP_RELEASE}.}


setenv LM_PROJECT     {.$ENV{LM_PROJECT}.}
setenv PROJECT_ITOOLS {.$ENV{PROJECT_ITOOLS}.}
setenv RTL_PROJ_TOOLS {.$ENV{RTL_PROJ_TOOLS}.}
setenv RTL_PROJ_BIN   {.$ENV{RTL_PROJ_BIN}.}
setenv IMC_RELEASE    /p/hdk/rtl/imc_ccdo/ip_release

setenv VISAROOT {.&ToolConfig::ToolConfig_get_tool_path("visait").}
setenv VISA_RTL  $VISAROOT/rtl

setenv PSETUP_SITE_DEF $REPO_ROOT/sitedef/siteDef
echo PSETUP_SITE_DEF $REPO_ROOT/sitedef/siteDef
##### setenv PSETUP_TOOLRC   {.&ToolConfig::ToolConfig_get_tool_path("toolrc").}
##### echo PSETUP_TOOLRC   {.&ToolConfig::ToolConfig_get_tool_path("toolrc").}
source $REPO_ROOT/common/ace/common/common.env

if ( ! $?EC_ENV_ROOT) setenv EC_ENV_ROOT /usr/intel/common/pkgs/eclogin/1.0
alias modpath 'set modpath=(\!*); source $EC_ENV_ROOT/bin/modpath; unset modpath'

setenv TARGET_ROOT  {.$ENV{TARGET_ROOT}.}

setenv CLUSTER_NAME {.$ENV{CLUSTER_NAME}.}
setenv MODEL_TO_COMPILE {.$ENV{MODEL_TO_COMPILE}.}
setenv ACE_PWA_DIR {.$DutConfig::template_hash{ace_pwa_dir}.}
setenv REPO_ACE_ROOT $REPO_ROOT/{.$DutConfig::template_hash{repo_scope}.}
source $REPO_ROOT/common/ace/common/pristine_paths.env
{.$DutConfig::template_hash{emulation_env}.}
{.$DutConfig::template_hash{ssa_env_config}.}

{.$DutConfig::template_hash{rtl_cad_root}.}

# This allows tools and any called subtools to use the original ToolConfig environment
if (! $?TC_RESTORE_MODEL_ROOT ) then
   setenv TC_RESTORE_MODEL_ROOT {.$ENV{MODEL_ROOT}.}
   setenv TC_RESTORE_RTL_PROJ_BIN {.$ENV{RTL_PROJ_BIN}.}
   setenv TC_RESTORE_PROJECT {.$ENV{PROJECT}.}
   setenv TC_RESTORE_RTL_CAD_ROOT {.$ENV{RTL_CAD_ROOT}.}
endif

source {.$DutConfig::template_hash{ace_env_file}.}

{.$DutConfig::template_hash{ace_rc}.}
# defined $ENV{JEM_COV_SAMPLE_CLK} ? "setenv JEM_COV_SAMPLE_CLK $ENV{JEM_COV_SAMPLE_CLK}" : ""
# setenv JEM "commented out &ToolConfig::ToolConfig_get_tool_path('jem')"
# setenv  LD_LIBRARY_PATH ${JEM}/lib:${LD_LIBRARY_PATH}

modpath -q -d -f ${REPO_ACE_ROOT}/bin
modpath -q -d -f $REPO_COMMON_ROOT/bin
modpath -n 1 ${REPO_ACE_ROOT}/bin
modpath -n 2 $REPO_COMMON_ROOT/bin

# Work around segmentation fault issue in library compilation
unlimit

{.$DutConfig::template_hash{soc_ace_rc_content}.}

