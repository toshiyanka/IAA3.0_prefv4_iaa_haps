#!/usr/intel/bin/perl -w

package main;

use strict;
use Getopt::Long;
use Term::ANSIColor; # Import for output coloring
use Term::ANSIColor qw(:constants); # o/p coloring constants

# Set Print Constants
use constant PRINT_ERROR => BOLD, WHITE, ON_RED,   "runFullConfig -E-", RESET, " ";
use constant PRINT_INFO  => BOLD, WHITE, ON_GREEN, "runFullConfig -I-", RESET, " ";

my $toolname = "runFullConfig";
my $confName;
my $dynamo;
my $puni_prefix     = "";
my $gen_extra_tests = 0;
my $endpoint;
my $debug = 0;
my $result = GetOptions( "config=s"        => \$confName,
                         "dynamo"          => \$dynamo,
                         "puni_prefix=s"   => \$puni_prefix,
                         "gen_extra_tests" => \$gen_extra_tests,
                         "endpoint"        => \$endpoint,
                         "debug!"          => \$debug,
                         );

$ENV{SB_ACE_FLOW}=1;

if( $endpoint ) {
   # Generating Sideband Endpoint Configurations
   if( system("./runClean") ) {
      print PRINT_ERROR, "runClean returned a non-zero exit status.\n";
      exit( 1 ); 
   }

   if( $gen_extra_tests ) {
      my $cmdline = "../../ace/iosf_sbc_ep_pre_script -gen_csv ../../source/cfg/endpoint/csv/gen_random_";
      foreach my $iter ( 1 ... 3 ) {
         if( system("${cmdline}${iter}.csv") ) {
            print PRINT_ERROR, "Problem calling iosf_sbc_ep_pre_script\n";
         }
      }
   }


   open( SBEARRAY, '>sbe.array' ) or die "runFullConfig -E- Failed to open sbe.array --- $!\n";
   print SBEARRAY "SIP_COMP_NAME";

   opendir ( my $dh, "../../source/cfg/endpoint/csv/" )
         or die "runFullConfig -E- Failed to open directory of CSV files";

   my @filelist = ();

   while (my $file = readdir $dh) {
      if( $file !~ /do_not_run/ && $file =~ /(.*)\.csv$/ ) {
         push( @filelist, $1 );
      } elsif( $file !~ /^(\.|\.\.)$/ ) {
         print PRINT_INFO, "Ignoring the file $file in the configuration directory\n";
      }
   }

   foreach my $csv ( sort( @filelist ) ) {
      print SBEARRAY " $csv,";
      my $cmdline = "runConfig";
      if( $debug ) {
         $cmdline = "$cmdline -debug";
      }
      $cmdline = "$cmdline -config IOSF_Sideband_Endpoint -component \'$csv\' -puni_prefix \'${puni_prefix}\' -dyn_opt nonDyn";
      if( system($cmdline) ) {
         close( SBEARRAY );
         print PRINT_ERROR, "Problem calling runConfig for sbendpoint\n";
         exit( 1 );
      }
   }

   open( SBERUNALL, '>../../tools/runAll' ) or die "runFullConfig -E- Failed to open runAll --- $!\n";
   print SBERUNALL "#!/bin/tcsh -f\n";
   print SBERUNALL "setenv SIP_CONF_NAME IOSF_Sideband_Endpoint\n";
   print SBERUNALL "setenv PUNI_PREFIX $puni_prefix\n";
   print SBERUNALL "setenv DYN_OPT nonDyn\n";
   print SBERUNALL "cd ../scripts/qa/\n";
   print SBERUNALL "runFlow\n";
   close( SBERUNALL );
   system( "chmod +x ../../tools/runAll" );

   close( SBEARRAY );

} else {
   # Generating Sideband Router Configurations
   if( !$confName ) {
      print PRINT_ERROR, "-config argument not defined.\n";
      exit( 1 );
   }
   
   # Running Clean, should generate the sbr.array
   # JESSE: Dependencies on env variables do not exist. Need to figure out if we want this set here anymore.
   $ENV{SIP_CONF_NAME} = $confName;
   if ($dynamo) {
      $ENV{DYN_OPT} = "Dyn";
   } else {
      $ENV{DYN_OPT} = "nonDyn";
   }
   $ENV{PUNI_PREFIX} = $puni_prefix;
   
   if( system("./runClean") ) {
      print PRINT_ERROR, "runClean returned a non-zero exit status.\n";
      exit( 1 ); 
   }
   if( system("./get_compName.pl -conf=${confName}") ) {
      print PRINT_ERROR, "get_comp_Name returned a non-zero exit status.\n";
      exit( 1 ); 
   }

   # Running RTL generation Script
   chdir( "../../verif/sim" );
   exit( 1 ) if( system("make clean") );
   if ($dynamo) {
      exit( 1 ) if( system("make rtl NETWORK=$confName XML2CSV_OPTIONS=--collage_testbench SBCCFG_OPTIONS=-dynamo") );
      exit( 1 ) if( system("make cmpltimeparser_$confName NETWORK=$confName") );
   } else {
      exit( 1 ) if( system("make rtl NETWORK=$confName") );
   }
   
   
   # Moving the RTL Files
   exit( 1 ) if( system("find ../../verif/tb/top_tb/$confName -mindepth 1 -maxdepth 1 -name \"*.sv\" -and -not -name \"tb_*\" -exec mv {} \"../../source/rtl/iosfsbc/router/\" \\;") );
   # Moving the VISA Files
   exit( 1 ) if( system("mkdir -p ../../tools/visa/router" ) );
   exit( 1 ) if( system("find ../../verif/tb/top_tb/$confName -mindepth 1 -maxdepth 1 -name \"*visa.cfg\"  -exec mv {} \"../../tools/visa/router\" \\;") );
   # Moving the RDL Files
   exit( 1 ) if( system("find ../../verif/tb/top_tb/$confName -mindepth 1 -maxdepth 1 -name \"*tap.rdl\"  -exec mv {} \"../../tools/rdl\" \\;") );  
   # Move the hdkcfg files
   # exit( 1 ) if( system("find ../../verif/tb/top_tb/$confName -mindepth 1 -maxdepth 1 -name \"hdkcfg.txt\"  -exec mv {} \"../../unsupported/export\" \\;") );
   exit( 1 ) if( system("find ../../verif/tb/top_tb/$confName -mindepth 1 -maxdepth 1 -name \"hdkcfg_p1274.txt\"  -exec mv {} \"../../unsupported/export\" \\;") );
   exit( 1 ) if( system("find ../../verif/tb/top_tb/$confName -mindepth 1 -maxdepth 1 -name \"hdkcfg_n7.txt\"  -exec mv {} \"../../unsupported/export\" \\;") );
   exit( 1 ) if( system("find ../../verif/tb/top_tb/$confName -mindepth 1 -maxdepth 1 -name \"hdkcfg_n6.txt\"  -exec mv {} \"../../unsupported/export\" \\;") );
   exit( 1 ) if( system("find ../../verif/tb/top_tb/$confName -mindepth 1 -maxdepth 1 -name \"hdkcfg_p1273.txt\"  -exec mv {} \"../../unsupported/export\" \\;") );
   exit( 1 ) if( system("find ../../verif/tb/top_tb/$confName -mindepth 1 -maxdepth 1 -name \"hdkcfg_s14nm.txt\"  -exec mv {} \"../../unsupported/export\" \\;") );
   exit( 1 ) if( system("find ../../verif/tb/top_tb/$confName -mindepth 1 -maxdepth 1 -name \"hdkcfg_p1222.txt\"  -exec mv {} \"../../unsupported/export\" \\;") );

   # Running parseXml
   chdir( "../../unsupported/export" );
   if ($dynamo) {
      my $prefix = $puni_prefix;
      if( $prefix =~ m/(.*)_+$/ ) {
         $prefix = $1;
      }
      if( system("parseXml -ipxact_file ../../verif/tests/networks/$confName.xml -prefix $prefix -dynamo") ) { 
         print PRINT_ERROR, "parseXml terminated with non-zero exit status\n";
         exit( 1 ); 
      }
   } else {
      if( system("parseXml -ipxact_file ../../verif/tests/networks/$confName.xml") ) {
         print PRINT_ERROR, "parseXml terminated with non-zero exit status\n";
         exit( 1 ); 
      }
   }
   chdir( "../../scripts/qa" );
   
   print PRINT_INFO, "Finished running parseXML\n";

   open( CSV, "<", "sbr.array" ) or die $!;
   while( <CSV> ) {
      my $line = $_;
      next if( $line =~ /^;/ );
      if( $line =~ /(?<=SIP_COMP_NAME )(.*)/ ) {
         my @list = split(/,/, $1);
         foreach my $rtr (@list) {
            $rtr =~ s/^\s+|\s+$//g;
            next if( length($rtr) == 0 );
            $ENV{SIP_COMP_NAME} = $rtr; # Removed depency on environment variables, remove if not needed
            my $cmdline = "runConfig";
            if( $debug ) {
               $cmdline = "$cmdline -debug";
            }
            $cmdline = "$cmdline -config '${confName}' -component '${rtr}' -puni_prefix '${puni_prefix}' -dyn_opt";
            if( $dynamo ) {
               $cmdline = "$cmdline Dyn";
            } else {
               $cmdline = "$cmdline nonDyn";
            }
            if( system($cmdline) ) {
               print PRINT_ERROR, "Problem calling $cmdline\n";
               exit( 1 ); 
            }
         }
      } else {
         print PRINT_ERROR, "network has no routers.\n";
         exit( 1 );
      }
   }

   open( SBRRUNALL, '>../../tools/runAll' ) or die "runFullConfig -E- Failed to open runAll --- $!\n";
   print SBRRUNALL "#!/bin/tcsh -f\n";
   print SBRRUNALL "setenv SIP_CONF_NAME ${confName}\n";
   print SBRRUNALL "setenv PUNI_PREFIX ${puni_prefix}\n";
   if( $dynamo ) {
      print SBRRUNALL "setenv DYN_OPT Dyn\n";
   } else {
      print SBRRUNALL "setenv DYN_OPT nonDyn\n";
   }
   print SBRRUNALL "cd ../scripts/qa/\n";
   print SBRRUNALL "runFlow\n";
   close( SBRRUNALL );
   system( "chmod +x ../../tools/runAll" );

   close( SBEARRAY );
}

# Put clean-up tasks in the END block so taht runFullConfig "always" cleans after itself
END {
   if( !$endpoint ) {
      my $exitstatuscode = $?;
       exit( 1 ) if( system("mv ../../tools/upf/router ../../tools/upf/router_upf1p0") );
       exit( 1 ) if( system("cp -r ../../tools/upf/router_upf2p0 ../../tools/upf/router") );
      #exit( 1 ) if( system("cp -r ../../tools/upf/router ../../tools/upf/router_upf1p0") );
      print PRINT_INFO, "Cleaning ../../unsupported/export/\n";
      system ("/usr/bin/find ../../unsupported/export/ -maxdepth 1 -name \"*_run_*\" -exec /bin/rm -f {} \\;");
      system ("/usr/bin/find ../../unsupported/export/ -maxdepth 1 -name \"*.tcl\" -exec /bin/rm -f {} \\;");
      system ("/usr/bin/find ../../unsupported/export/ -maxdepth 1 -name \"*.stcl\" -exec /bin/rm -f {} \\;");
      system ("/usr/bin/find ../../unsupported/export/ -maxdepth 1 -name \"*.list\" -exec /bin/rm -f {} \\;");
      system ("/usr/bin/find ../../unsupported/export/ -maxdepth 1 -name \"*.do\" -exec /bin/rm -f {} \\;");
      system ("/usr/bin/find ../../unsupported/export/ -maxdepth 1 -name \"*internal.dofile\" -exec /bin/rm -f {} \\;");
      system ("/usr/bin/find ../../unsupported/export/ -maxdepth 1 -name \"*.prj\" -exec /bin/rm -f {} \\;");
      system ("/usr/bin/find ../../unsupported/export/ -maxdepth 1 -name \"*.sgdc\" -exec /bin/rm -f {} \\;");
      system ("/usr/bin/find ../../unsupported/export/ -maxdepth 1 -name \"*setup_synthesis\" -exec /bin/rm -f {} \\;");
      system ("/usr/bin/find ../../unsupported/export/ -maxdepth 1 -name \"iosf_sbc_rtr.hdl\" -exec /bin/rm -f {} \\;");
      system("rm ../../unsupported/export/finalized");
      print PRINT_INFO, "Finished cleaning ../../unsupported/export/\n";
      $? = $exitstatuscode;
   }
}


