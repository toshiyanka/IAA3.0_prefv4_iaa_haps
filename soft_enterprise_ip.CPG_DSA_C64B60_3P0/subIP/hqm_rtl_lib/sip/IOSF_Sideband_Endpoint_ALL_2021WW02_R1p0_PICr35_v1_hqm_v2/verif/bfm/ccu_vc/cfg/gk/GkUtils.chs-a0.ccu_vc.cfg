##-------------------------------------------------------------------------------------------------------
##     Package Name: GkUtils.HDK.Base.cfg 
##          Project: HDK
##            Owners: Gregory Burkhart 
##      Description: This package is used to simply define the models, duts, and test list
##                   which are used by the Haswell Model Build tools to create Models. 
##                      
## 
## 
##   (C) Copyright Intel Corporation, 2014
##   Licensed material --  Program property of Intel Corporation
##   All Rights Reserved
##  
##   This program is the property of Intel Corporation and is furnished
##   pursuant to a written license agreement. It may not be used, reproduced,
##   or disclosed to others except in accordance with the terms and conditions
##   of that agreement
##-------------------------------------------------------------------------------------------------------
##-------------------------------------------------------------------------------------------------------
##   gatekeeper_utils pipeline jobs configuration file. 
##
##-------------------------------------------------------------------------------------------------------
my $myDUT = 'ccu_vc';

## Do for common file.
do "GkUtils.hdk.common.cfg";

#Settings below borrowed from standard SBX setup
#the event-type defines the NB Pool. turnin/filter/release are critical; rest normal
if (defined $ENV{EC_SITE}) {
   if ($ENV{EC_SITE} eq 'sc') {
       if (defined $ENV{GK_EVENTTYPE}) {
           if ($ENV{GK_EVENTTYPE} eq 'turnin') {
              $ENV{NBPOOL_FOR_SLE} = "sc_critical_gk";
              $ENV{NBQSLOT_FOR_SLE} = "/hpg/lkf/b/mb/release";
           }
           elsif ($ENV{GK_EVENTTYPE} eq 'filter') {
              $ENV{NBPOOL_FOR_SLE} = "sc_critical_gk";
              $ENV{NBQSLOT_FOR_SLE} = "/hpg/lkf/b/mb/release";
           }
           elsif ($ENV{GK_EVENTTYPE} eq 'mock') {
               $ENV{NBPOOL_FOR_SLE} = "sc_normal";
               $ENV{NBQSLOT_FOR_SLE} = "/hpg/lkf/emu/work";
           }
           elsif ($ENV{GK_EVENTTYPE} eq 'release') {
               $ENV{NBPOOL_FOR_SLE} = "sc_critical_gk";
               $ENV{NBQSLOT_FOR_SLE} = "/hpg/lkf/b/mb/release";
           }
           else {
               $ENV{NBPOOL_FOR_SLE} = "sc_normal";
               $ENV{NBQSLOT_FOR_SLE} = "/hpg/lkf/emu/work";
           }
        }
        else {
               $ENV{NBPOOL_FOR_SLE} = "sc_normal";
               $ENV{NBQSLOT_FOR_SLE} = "/hpg/lkf/emu/work";
        }
   }
}
#Above code is for seeding a project, but for Sandbox usage we always point to our netbatch resources
$ENV{NBPOOL_FOR_SLE} = "sc_normal";
$ENV{NBQSLOT_FOR_SLE} = "/EIG/IPE/RTL/sim";
# Default nbclass, exclude slower machines for turnins
my $nbclass_default = ${$Models{netbatch}{'all'}{$ENV{GK_EVENTTYPE}}}[1] || "SLES11&&6G&&!WESTMERE&&!IVYBRIDGE";
$nbclass_default =~ s/(\&\&\d+G\b|\b\d+G\&\&)//; #remove the memory size so that it can be specified here


push @{$Models{general_cmds}},
    ##Basic simbuild+vcs compile & elab
    {
    NAME         => 'COMP_ELAB',
    CMDS         => "simbuild -dut $myDUT -s all +s vcs_build",
    NBCLASS      => "$nbclass_default&&2G",
    EVENTS       => ['filter', 'turnin', 'mock'],
    #JOB_WORK_DIR => '<MODEL_ROOT>',
    #JOB_PRE_EXEC => $cfg_common{general_pre_exec},
    #DEPENDENCY   => {"<DUT>_build" => "Success",},
    #JOB_TYPE     => 'build',
    GATING       => '1',
    };
    
push @{$Models{general_cmds}},
    #At least ONE command must run during "release", or the release is marked as "defective"
    {
    'NAME'         => 'NOOP',
    'CMDS'         => 'sleep 1',
    'EVENTS'     => ['RELEASE'],
    },
