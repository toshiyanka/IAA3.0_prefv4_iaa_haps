#!/usr/intel/bin/perl
$name stap_default
$version 2.3

$prefix STAP_

$choice anames GREEN,RED,ORANGE

;*****************************************************************
; Define entries
;*****************************************************************
$post &removeLastComma('[file]','\/\/', '\/\*', '\*\/')

$entry default prefix2 string title="Enter IP Name:" default=MIPI help="Enter the prefix that has to be appended before the file & param" sep=black

$post &copy1to3('[file]',$[prefix]prefix2_value.'_'.'sTAP_soc_param_values.inc')

$post &create_instancefile($[prefix]prefix2_value.'_'.'sTAP_soc_instance.sv')
#$post &createNewFile($[prefix]secondfile_value);
$post &createNewFile($[prefix]prefix2_value.'_'.'sTAP_soc_param_overide.inc')


$outfile stap_params_include.inc

################## File generation ############
#
#######################################################
$entry default clk integer  title="Enter CLOCK period:" default=10000 min=1000 max=1000000 more="(in ps)"  help="Enter the clock freq of stap" sep=black

$entry default ir_regsize   integer  title="Size of Instruction Register (integer value):" default=8 min=8 max=100  help="Enter the IR register size in integer" sep=black comm=yes

## TDO on posedge/Re-Time tap
$entry default tdo_posedge  rbit   title="Do you want to enable TDO to change on posedge(Re-time)?" default=0  help="Enter 1 or 0 depending on to enable TDO on posedge or not" sep=black comm=yes 
## Bscan
$entry tdo_posedge en_bscan  bit   title="Do you have BOUNDRY SCAN REGISTERS?" default=0 help="Enter Yes or No depending on to enable BSCAN or not(If RE-TIME IS \n ENABLED this param is set to 0)" sep=black comm=yes  
### TAPNW 

$entry  tdo_posedge entapnw bit title="Do you want to enable Tap Network?" default=0 min=0 max=99  help="0-No,1-YES to enable TAPNW" sep=black comm=yes 

$entry entapnw nooftaps integer title="Enter the number of Slave TAPS" more="(Press Update)" default=0 min=0 max=99 var=Cnt Cnt=100 help="enter number of taps"

$entry nooftaps addresstaps choice_anames title="Enter Network Security level for sTAP$CntIndex:" default=GREEN help="Enter security level. red,green,orange for TAPS"

   
######TAPC REMOVE ########

$entry entapnw en_tapc_remove  bit  title="Do you want to enable TAPC REMOVE LOGIC?" default=0  help="enter 0 not enabling 1 for enabling"  sep=black


##### Wtap ###################
$entry  tdo_posedge enwtap bit title="Do you want to enable WTAPNW?" default=0 min=0 max=100 help="0-No,1-YES to enable WTAPNW" sep=black comm=yes 

$entry  enwtap num_wtap  integer   title="Number of WTAPS in  WTAP network?" more="(Press calc)" default=0 min=0 max=100  help="Enter integer value of number of wtaps network needed should be >0" 

$entry  num_wtap serial_or_parallel_wtap  bit   title="Is this a SERIAL WTAP network?" more="(0-parallel(No)/1-Series(Yes))" default=0  help="Enter YES for serial and NO for parallel" 

$entry  num_wtap wtap_ctrl_pos_edge  bit   title="Which Edge do you want Wtap Control signals?" more="(0-NegEdge(No)/1-PosEdge(Yes))" default=0  help="0-Neg Edge/1-POS edge" sep=black
 

###########Remote Test Data #################
$entry default enremotetestdata bit title = "Do you want to enable REMOTE TEST DATA REGISTERS(RTDR)?" default =0 help="enter 0 not enabling 1 for enabling" sep = black

$entry enremotetestdata numofremotetestdatareg integer title = "Enter the NUMBER OF  REMOTE TEST DATA REGISTERS" "more=(Press calc)" default =0 min =0 max= 99 var=Cnt cnt=100  help="Enter the number of remote test data registers"

$entry numofremotetestdatareg addressremotetestdatareg string title="Enter address of RTDR$CntIndex:" warn=&opcodecheck choice=anames:RED more="(Press Update)"  change=&makeUC default="" 

$entry enremotetestdata prg_rst_rtdr bit title="Do you want Programmable Reset Enabled for RTDRs?" default=0 min=0 max=1 sep=black

$entry enremotetestdata bussed_rtdr bit title="Do you want RTDR control signals to be Bussed?" default=0 min=0 max=1 sep=black

#$entry numofremotetestdatareg clkdomain bit title = "On what clock domain do you want REMOTE TEST DATA REGISTER$CntIndex?" default=0 help="Enter 0 for TCK & 1 for ASYNC" sep=black 


#####################Test Data reg#################
$entry default entestdataregister  bit   title="Do you want to enable INTERNAL TDR's?" default=0 help="Enter 0 OR 1 for enabling or disabling"

#$entry entestdataregister testdataregsize integer title = "Enter the TOTAL SIZE OF ALL TEST DATA REGISTERS:" more="(excluding remote test data reg)" help="enter the test data reg size so that summation of  total width with the size should match"
 

$entry entestdataregister numoftestdatareg integer title = "Enter the NUM OF TEST DATA REGISTERS" more="(Press calc)" default=0 min=0 max=99 var=mycnt cnt=100 help="Enter the number of remote test data registers" 

$entry entestdataregister prg_rst_itdr bit title="Do you want Programmable Reset Enabled for ITDRs?" default=0 min=0 max=1 sep=black

$entry numoftestdatareg addresstestdatareg string title="Enter address of TEST_DATA_REG$mycntIndex:" more=" (HEX)" choice=anames:RED change=&UC help="Info:address should be in HEX" 

$entry numoftestdatareg sizetestdatareg integer title="Enter width of TEST_DATA_REG$mycntIndex:" default=0 min=0 help="Info:total size of test data registers should be equal to sum of widths"

$entry numoftestdatareg resettestdatareg string title="Enter reset value of TEST_DATA_REG$mycntIndex:" more=" (HEX)" change=&makeUCreset default=0  help="Info:Enter reset value 1 OR 0"

#$entry numoftestdatareg capturedrtestdatareg string title="In CaptureDR, shiftout value of TEST_DATA_REG$mycntIndex:" more="(Per bit, 1-tdrdatain, 0-tdrdataout)" change=&makeUCcapturedr default=0  


##################################################################
#PRAMS DISPLAY
##################################################################

$param{irsize} STAP_SIZE_OF_EACH_INSTRUCTION $[prefix]ir_regsize_value

$param{irsize} STAP_ENABLE_TDO_POS_EDGE $[prefix]tdo_posedge_value

## Bscan params #######

$param{bscan} STAP_ENABLE_BSCAN $[prefix]tdo_posedge_en_bscan_value

$param{bscan} STAP_NUMBER_OF_MANDATORY_REGISTERS &calcMandreg

## Secure params #######
$condit{secure} OPCODE_SECURE_PRINT "parameter STAP_SECURE_GREEN  = 2'b00,\nparameter STAP_SECURE_ORANGE = 2'b01,\nparameter STAP_SECURE_RED    = 2'b10,"

## TAPNW ########## 

$param{tapnw} STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK ($[prefix]tdo_posedge_entapnw_value==1)?$[prefix]tdo_posedge_entapnw_nooftaps_value:0

$condit{tapnw} STAP_OPCODE "parameter [((2 * ((STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK == 0) ? 1 : STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK)) - 1) : 0] STAP_DFX_SECURE_POLICY_SELECTREG = {"
$condit{tapnw} DFX_SECURE &printsecureparams  
$condit{tapnw} DFX_SECURE_OPCODE "},"

$param{tapnw} STAP_ENABLE_TAPC_REMOVE   $[prefix]tdo_posedge_entapnw_en_tapc_remove_value

#########Wtap#########

$param{wtap} STAP_NUMBER_OF_WTAPS_IN_NETWORK ($[prefix]tdo_posedge_enwtap_value==1)?$[prefix]tdo_posedge_enwtap_num_wtap_value:0

$param{wtap} STAP_WTAP_NETWORK_ONE_FOR_SERIES_ZERO_FOR_PARALLEL $[prefix]tdo_posedge_enwtap_num_wtap_serial_or_parallel_wtap_value

$param{wtap} STAP_ENABLE_WTAP_CTRL_POS_EDGE ($[prefix]tdo_posedge_enwtap_value==0)?0:$[prefix]tdo_posedge_enwtap_num_wtap_wtap_ctrl_pos_edge_value

##########Remote test data############

$param{remotetest} STAP_NUMBER_OF_REMOTE_TEST_DATA_REGISTERS ($[prefix]enremotetestdata_numofremotetestdatareg_value>0)?$[prefix]enremotetestdata_numofremotetestdatareg_value:0

$param{remotetest} STAP_ENABLE_RTDR_PROG_RST $[prefix]enremotetestdata_prg_rst_rtdr_value

$param{remotetest} STAP_RTDR_IS_BUSSED ($[prefix]enremotetestdata_numofremotetestdatareg_value<=1)?0:$[prefix]enremotetestdata_bussed_rtdr_value

#############Test Data reg #############
$param{testdata} STAP_NUMBER_OF_TEST_DATA_REGISTERS ($[prefix]entestdataregister_value==0)?0:$[prefix]entestdataregister_numoftestdatareg_value

$param{testdata} STAP_ENABLE_ITDR_PROG_RST $[prefix]entestdataregister_prg_rst_itdr_value

$param{testdata} STAP_TOTAL_WIDTH_OF_TEST_DATA_REGISTERS &calcsum

$param{total} STAP_NUMBER_OF_TOTAL_REGISTERS &cal_num_total_reg


######### condit printing###############
$condit{common} OPCODES_DYNAMIC "parameter [(((STAP_SIZE_OF_EACH_INSTRUCTION + 2) * STAP_NUMBER_OF_TOTAL_REGISTERS) - 1):0] STAP_INSTRUCTION_FOR_DATA_REGISTERS = {"
#### RTDR 
#$for i 99 0
#$condit OPCODE_ADDR_RTDR[i] ($[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg[i]_value==0)?'ignore':$[prefix]ir_regsize_value."'h$[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg[i]_value, //Opcode for RTDR[i]"
$condit{common} OPCODE_ADDR_RTDR &printaddrRTDR
 ### TDR
#$for i 99 0
#$condit OPCODE_ADDR_TDR[i] ($[prefix]entestdataregister_numoftestdatareg_addresstestdatareg[i]_value==0)?'ignore':$[prefix]ir_regsize_value."'h$[prefix]entestdataregister_numoftestdatareg_addresstestdatareg[i]_value SECURE_ , //Opcode for TDR[i]"
$condit{common} OPCODE_ADDR_TDR &printTDRaddr
### Position of TDRRST
#$condit OPCODE_TDRRST $[prefix]ir_regsize_value."'h15, //Opcode for TDRRST"

$condit{common} TAPC_RTDRRSTSEL ($[prefix]enremotetestdata_prg_rst_rtdr_value==1 )?("{" .  $[prefix]ir_regsize_value."'h17, STAP_SECURE_GREEN},  //Opcode for TAPC_RTDRRSTSEL"):'ignore' 

$condit{common} TAPC_ITDRRSTSEL ($[prefix]entestdataregister_prg_rst_itdr_value==1 )?("{" .  $[prefix]ir_regsize_value."'h16, STAP_SECURE_GREEN},  //Opcode for TAPC_ITDRRSTSEL"):'ignore' 


$condit{common} TAPC_TDRRSTEN ($[prefix]enremotetestdata_prg_rst_rtdr_value || $[prefix]entestdataregister_prg_rst_itdr_value)?("{" .  $[prefix]ir_regsize_value."'h15, STAP_SECURE_GREEN},  //Opcode for TAPC_TDRRSTEN"):'ignore' 

#TAPC remove
$condit{common} OPCODE_TAPC_REMOVE ($[prefix]tdo_posedge_entapnw_en_tapc_remove_value==1)?("{" . $[prefix]ir_regsize_value."'h14, STAP_SECURE_GREEN},  //Opcode for TAPC_REMOVE"):'ignore'

#Wtap
$condit{common} OPCODE_WTAP ($[prefix]tdo_posedge_enwtap_value==1)?("{" . $[prefix]ir_regsize_value."'h13, STAP_SECURE_ORANGE}, //Opcode for TAPC_WTAP_SEL"):'ignore'

### tapnw
$condit{common} OPCODE_TAPNW ($[prefix]tdo_posedge_entapnw_value==1)?("{" . $[prefix]ir_regsize_value."'h10, STAP_SECURE_ORANGE}, //Opcode for TAPC_SEC_SEL"):'ignore'


### Bscan related

$condit{common} OPCODE_WTAP_SEL ($[prefix]tdo_posedge_en_bscan_value==1)?("{" . $[prefix]ir_regsize_value."'h0D, STAP_SECURE_GREEN},  //Opcode for EXTEST_TOGGLE"):'ignore'

$condit{common} OPCODE_RUNBIST ($[prefix]tdo_posedge_en_bscan_value==1)?("{" . $[prefix]ir_regsize_value."'h07, STAP_SECURE_GREEN},  //Opcode for RUNBIST"):'ignore'

$condit{common} OPCODE_INTEST ($[prefix]tdo_posedge_en_bscan_value==1)?("{" . $[prefix]ir_regsize_value."'h06, STAP_SECURE_GREEN},  //Opcode for INTEST"):'ignore'

$condit{common} OPCODE_CLAMP ($[prefix]tdo_posedge_en_bscan_value==1)?("{" . $[prefix]ir_regsize_value."'h04, STAP_SECURE_GREEN},  //Opcode for CLAMP"):'ignore'

$condit{common} OPCODE_PRELOAD ($[prefix]tdo_posedge_en_bscan_value==1)?("{" . $[prefix]ir_regsize_value."'h03, STAP_SECURE_GREEN},  //Opcode for PRELOAD"):'ignore'

$condit{common} OPCODE_CLTAPC_SELECT_OVR ($[prefix]tdo_posedge_entapnw_nooftaps_value>0)?("{" . $[prefix]ir_regsize_value."'h11, STAP_SECURE_GREEN},  //Opcode for TAPC_SELECT"):'ignore'

$condit{common} OPCODE_EXTEST_TRAIN ($[prefix]tdo_posedge_en_bscan_value==1)?("{" . $[prefix]ir_regsize_value."'h0F, STAP_SECURE_GREEN},  //Opcode for EXTEXT_TRAIN"):'ignore'

$condit{common} OPCODE_EXTEST_PULSE ($[prefix]tdo_posedge_en_bscan_value==1)?("{" . $[prefix]ir_regsize_value."'h0E, STAP_SECURE_GREEN},  //Opcode for EXTEXT_PULSE"):'ignore'

$condit{common} OPCODE_SLVIDCODE "{" . $[prefix]ir_regsize_value."'h0C, STAP_SECURE_GREEN},	//Opcode for SLVIDCODE"

$condit{common} OPCODE_EXTEST ($[prefix]tdo_posedge_en_bscan_en_extest_value==1)?("{" . $[prefix]ir_regsize_value."'h09, STAP_SECURE_GREEN},  //Opcode for EXTEXT"):'ignore'

$condit{common} OPCODE_HIGHZ ($[prefix]tdo_posedge_en_bscan_value==1)?("{" . $[prefix]ir_regsize_value."'h08, STAP_SECURE_GREEN},  //Opcode for HIGHZ"):'ignore'

$condit{common} OPCODE_SAMPLE_PRELOAD ($[prefix]tdo_posedge_en_bscan_en_preload_value==1)?("{" . $[prefix]ir_regsize_value."'h01, STAP_SECURE_GREEN},  //Opcode for SAMPLE/PRELOAD"):'ignore'

### mandatory printing



$condit{common} OPCODE_EXTEST ($[prefix]tdo_posedge_en_bscan_value==1)?("{" . $[prefix]ir_regsize_value."'h09, STAP_SECURE_GREEN},  //Opcode for EXTEXT"):'ignore'

$condit{common} OPCODE_HIGHZ ($[prefix]tdo_posedge_en_bscan_value==1)?("{" . $[prefix]ir_regsize_value."'h08, STAP_SECURE_GREEN},  //Opcode for HIGHZ"):'ignore'

$condit{common} OPCODE_SAMPLE_PRELOAD ($[prefix]tdo_posedge_en_bscan_value==1)?("{" . $[prefix]ir_regsize_value."'h01, STAP_SECURE_GREEN},  //Opcode for SAMPLE/PRELOAD"):'ignore'

#$condit OPCODE_INSTRUCTION "{STAP_SIZE_OF_EACH_INSTRUCTION{1'b0}}, //Opcode of RSVD 0"

$condit{common} OPCODE_INSTRUCTION_ADDRESS "{{STAP_SIZE_OF_EACH_INSTRUCTION{1'b1}}, STAP_SECURE_GREEN}  //Opcode for BYPASS"

$condit{common} OPCODE_IR_SEMICOLON "},"

$condit{common} OPCODE_SLICE "parameter STAP_NUMBER_OF_BITS_FOR_SLICE = 16,"

## Width TDR

$condit{common} OPCODE_BITS_SLICE "parameter [((STAP_NUMBER_OF_BITS_FOR_SLICE * ((STAP_NUMBER_OF_TEST_DATA_REGISTERS == 0) ? 1 : STAP_NUMBER_OF_TEST_DATA_REGISTERS)) - 1):0] STAP_SIZE_OF_EACH_TEST_DATA_REGISTER = {"

$condit{common} OPCODE_BITS_SLICE_VALUE ($[prefix]entestdataregister_value==0)?"16'd0":'ignore'

$condit{common} OPCODE_WIDTH_VALUE &CALC_WIDTH_TDR

$condit{common} OPCODE_SEMICOLON "},"

## TDR MSB

$condit{common} OPCODE_BITS_SLICE_MSB "parameter [((STAP_NUMBER_OF_BITS_FOR_SLICE * ((STAP_NUMBER_OF_TEST_DATA_REGISTERS == 0) ? 1 : STAP_NUMBER_OF_TEST_DATA_REGISTERS)) - 1):0] STAP_MSB_VALUES_OF_TEST_DATA_REGISTERS = {"

$condit{common} OPCODE_BITS_SLICE_MSB_VALUE ($[prefix]entestdataregister_value==0)?"16'd0":'ignore'
$condit{common} OPCODE_MSB_TEST_DATA &CALC_TEST_MSB

$condit{common} OPCODE_BITS_SLICE_MSB_SEMICOLON "},"

## TDR LSB

$condit{common} OPCODE_BITS_SLICE_LSB "parameter [((STAP_NUMBER_OF_BITS_FOR_SLICE * ((STAP_NUMBER_OF_TEST_DATA_REGISTERS == 0) ? 1 : STAP_NUMBER_OF_TEST_DATA_REGISTERS)) - 1):0] STAP_LSB_VALUES_OF_TEST_DATA_REGISTERS = {"

$condit{common} OPCODE_BITS_SLICE_LSB_VALUE ($[prefix]entestdataregister_value==0)?"16'd0":'ignore'

$condit{common} OPCODE_LSB_TEST_DATA &CALC_TEST_LSB

$condit{common} OPCODE_BITS_SLICE_LSB_SEMICOLON "},"

## TDR Reset

$condit{common} OPCODE_TOTAL_WIDTH "parameter [(((STAP_TOTAL_WIDTH_OF_TEST_DATA_REGISTERS == 0) ? 1 : STAP_TOTAL_WIDTH_OF_TEST_DATA_REGISTERS) - 1):0] STAP_RESET_VALUES_OF_TEST_DATA_REGISTERS = {"

$condit{common} OPCODE_TOTAL_TEST_DATA_VALUE ($[prefix]entestdataregister_value==0)?"1'b0":'ignore'

$condit{common} OPCODE_RESET_TDR &CALC_RESET

$condit{common} OPCODE_TOTAL_WIDTH_SEMICOLON "}"

### TDR CApture DR

#$condit{common} OPCODE_TOTAL_TEST_DATA "parameter [(((STAP_TOTAL_WIDTH_OF_TEST_DATA_REGISTERS == 0) ? 1 : STAP_TOTAL_WIDTH_OF_TEST_DATA_REGISTERS) - 1):0] STAP_BIT_ONE_FOR_TDRDATAIN_ZERO_FOR_TDRDATAOUT = {"

#$condit{common} OPCODE_TOTAL_TEST_DATA__CAPTUREVALUE ($[prefix]entestdataregister_value==0)?"1'b0":'ignore'

#$condit{common} OPCODE_CAPTURE_DR &CALC_CAPTURE_DR_REG

#$condit{common} OPCODE_TOTAL_TEST_DATA_SEMICOLON "}"


############ Library Functions ##################
### Lib function for mandatory reg
$lib
   sub calcMandreg {
   my ($retVal)=0;
   $[prefix]tdo_posedge_en_bscan_mand_reg_value=($[prefix]tdo_posedge_en_bscan_value==1)?12:2;
   $retVal=$[prefix]tdo_posedge_en_bscan_mand_reg_value;
 return($retVal);

}

$end



## lib for printing TAPS secure

$lib local_printsecureparams
   sub printsecureparams{
   my ($i,$val,$retval);
if ($[prefix]tdo_posedge_entapnw_nooftaps_value==0){
  $retval="STAP_SECURE_GREEN, //Network Security for TAP0";
}else{

   for ($i=$[prefix]tdo_posedge_entapnw_nooftaps_value-1;$i>=0;$i--){
   $val= '[prefix]tdo_posedge_entapnw_nooftaps_addresstaps' . $i .'_value';
   $retval.='
' . "STAP_SECURE_" . "$$val, //Network Security for TAP$i";
   }
}
return($retval);
}
$end 


$lib local_printTDRaddr
  sub printTDRaddr {
   my ($i,$val,$retval,$val2);
   for ($i=$[prefix]entestdataregister_numoftestdatareg_value-1;$i>=0;$i--){
   $val2= '[prefix]entestdataregister_numoftestdatareg_addresstestdatareg' . $i .'_value2';
   $val= '[prefix]entestdataregister_numoftestdatareg_addresstestdatareg' . $i .'_value';
   $retval.='
' . "{" . "$[prefix]ir_regsize_value" . "'h" . "$$val" . "," . " STAP_SECURE_" . "$$val2" . "}, //Opcode for iTDR$i";
   }

return($retval);
}
$end 

$lib local_printaddr
  sub printaddrRTDR {
   my ($i,$val,$retval,$val2);
   for ($i=$[prefix]enremotetestdata_numofremotetestdatareg_value-1;$i>=0;$i--){
   $val2= '[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg' . $i .'_value2';
   $val= '[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg' . $i .'_value';
   $retval.='
' . "{" . "$[prefix]ir_regsize_value" . "'h" . "$$val" . "," . " STAP_SECURE_" . "$$val2" . "}, //Opcode for RTDR$i";
   }

return($retval);
}
$end 

## Lib function for total num of reg
$lib
  sub cal_num_total_reg{
my $retval=0;

$retval=$[prefix]tdo_posedge_en_bscan_mand_reg_value+
(($[prefix]tdo_posedge_entapnw_value==0)?0:2)+
(($[prefix]tdo_posedge_enwtap_num_wtap_value==0)?0:1)+
$[prefix]tdo_posedge_entapnw_en_tapc_remove_value+
$[prefix]enremotetestdata_numofremotetestdatareg_value+
$[prefix]entestdataregister_numoftestdatareg_value+
(($[prefix]enremotetestdata_prg_rst_rtdr_value && $[prefix]entestdataregister_prg_rst_itdr_value) ? 3 : $[prefix]enremotetestdata_prg_rst_rtdr_value ? 2 : $[prefix]entestdataregister_prg_rst_itdr_value ? 2 : 0) ;
return($retval);
}
$end 

## Lib function for width check in TDR  
  $lib local_calcsum 
    sub calcsum {
    my $str;
    my $total=0;
    my $retStat;

  for ($i=0; $i<=$[prefix]entestdataregister_numoftestdatareg_value-1; $i++) {
      $str='[prefix]entestdataregister_numoftestdatareg_sizetestdatareg' . $i . '_value';
      $total+=$$str;
    }
   $retStat=$total; 
  return($retStat);
 
  }
$end
 

$lib local_CALC_WIDTH_TDR
  sub CALC_WIDTH_TDR{
  my $retval="";
  my $WIDTH_value;
  my $tmp=0;

 for (my $i=$[prefix]entestdataregister_numoftestdatareg_value-1;$i>=0;$i--){
  $WIDTH_value='[prefix]entestdataregister_numoftestdatareg_sizetestdatareg' . $i . '_value';
  $tmp=$$WIDTH_value;
  if ($retval eq "") {
      $retval="16'd$tmp, //Width of iTDR $i";
  }
  else {
      $retval.='
' . "16'd$tmp, //Width of iTDR $i";
  }

}

return($retval);
}
$end

$lib CALC_TEST_MSB
 sub CALC_TEST_MSB {

my $retval="";
my $MSB_value;
my ($total,$str);
 for ($i=0; $i<=$[prefix]entestdataregister_numoftestdatareg_value-1; $i++) {
      $str='[prefix]entestdataregister_numoftestdatareg_sizetestdatareg' . $i . '_value';
      $total+=$$str;
    }

my $tmp=$total;
my $MSB_final;
for(my $i=$[prefix]entestdataregister_numoftestdatareg_value-1;$i>=0;$i--){
  $MSB_value='[prefix]entestdataregister_numoftestdatareg_sizetestdatareg' . $i . '_value';
  $MSB_final=$tmp -1;
   $tmp-=$$MSB_value;
  
  if ($retval eq "") {
      $retval="16'd$MSB_final, //MSB Value of iTDR $i";
  }
  else {
      $retval.='
' . "16'd$MSB_final, //MSB Value of iTDR $i";
  }
 }

return($retval);
}
$end

$lib CALC_TEST_LSB
 sub CALC_TEST_LSB {

my $retval="";
my $LSB_value;
my ($total,$str);
 for ($i=0; $i<=$[prefix]entestdataregister_numoftestdatareg_value-1; $i++) {
      $str='[prefix]entestdataregister_numoftestdatareg_sizetestdatareg' . $i . '_value';
      $total+=$$str;
    }

my $tmp=$total;
my $LSB_final;

for (my $i=$[prefix]entestdataregister_numoftestdatareg_value-1;$i>=0;$i--){
  $LSB_value='[prefix]entestdataregister_numoftestdatareg_sizetestdatareg' . $i . '_value';

  $LSB_final=$tmp - $$LSB_value;

  $tmp-=$$LSB_value;
  if ($retval eq "") {
      $retval="16'd$LSB_final, //LSB Value of iTDR $i";
  }
  else {
      $retval.='
' . "16'd$LSB_final,  //LSB Value of iTDR $i";
  }

}
return($retval);
}
$end

$lib CALC_RESET 
 sub CALC_RESET {
   my $retval;
   my $reset_val=0;
   my $width_val=0;
 for (my $i=$[prefix]entestdataregister_numoftestdatareg_value-1;$i>=0;$i--){
#for (my $i=1;$i<=$[prefix]entestdataregister_numoftestdatareg_value;$i++#){
    $reset_val='[prefix]entestdataregister_numoftestdatareg_resettestdatareg' . $i . '_value';
    $width_val='[prefix]entestdataregister_numoftestdatareg_sizetestdatareg' . $i . '_value';
  #$retval=$$reset_val;
 if ($retval eq "") {
      $retval="$$width_val" . "'h$$reset_val, //Reset Value of iTDR $i";
  }
  else {
      $retval.='
' . "$$width_val" . "'h$$reset_val, //Reset Value of iTDR $i";
  }

}
return($retval);
}
$end

#$lib CALC_CAPTURE_DR_REG
#sub CALC_CAPTURE_DR_REG {
# my $retval;
# my $capture_dr_val;
# for (my $i=$[prefix]entestdataregister_numoftestdatareg_value-1;$i>=0;$i--){
#
#    $capture_dr_val='[prefix]entestdataregister_numoftestdatareg_capturedrtestdatareg' . $i . '_value';
#     $width_val='[prefix]entestdataregister_numoftestdatareg_sizetestdatareg' . $i . '_value';
#
#  if ($retval eq "") {
#      $retval="$$width_val" . "'h$$capture_dr_val, //Corresponding bit is RO when its value is 1 else RW - during CaptureDR of TDR $i";
#  }
#  else {
#      $retval.='
#' . "$$width_val" . "'h$$capture_dr_val, //Corresponding bit is RO when its value is 1 else RW - during CaptureDR of TDR $i";
#  }
#
#}
#return($retval);
#}
#$end

### Upper case subroutines

$lib local_makeUC
  sub makeUC {
    my ($i, $str);

    for ($i=0; $i<=$[prefix]en_test_data_num_of_remote_test_data_reg_value-1; $i++) {
      $str='[prefix]en_test_data_num_of_remote_test_data_reg_address_remote_test_data_reg' . $i . '_value';
      $$str=uc($$str);
    }

  }
$end

$lib local_opcodecheck
 sub opcodecheck {
  my ($val)=@_;
  my $retStat=1;

$display='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg' . $i . '_display';


#if ( $$display && $$str eq "" && $$str < 30){
if ( $val > 0 && $val < 30){
    $retStat=0;
    }

return($retStat,"Address must be greater than or equal to 30");
}
$end

$lib local_makeUCreset
  sub makeUCreset {
    my ($i, $str);

    for ($i=0; $i<=$[prefix]entestdataregister_numoftestdatareg_value-1; $i++) {
      $str='[prefix]entestdataregister_numoftestdatareg_resettestdatareg' . $i . '_value';
      $$str=uc($$str);
    }

  }
$end

#$lib local_makeUCcapturedr
#  sub makeUCcapturedr {
#    my ($i, $str);
#
#    for ($i=0; $i<=$[prefix]entestdataregister_numoftestdatareg_value; $i++) {
#      $str='[prefix]entestdataregister_numoftestdatareg_capturedrtestdatareg' . $i . '_value';
#      $$str=uc($$str);
#    }
#
#  }
#$end

$lib local_UC
  sub UC {
    my ($i, $str);

    for ($i=0; $i<=$[prefix]entestdataregister_numoftestdatareg_value-1; $i++) {
      $str='[prefix]entestdataregister_numoftestdatareg_addresstestdatareg' . $i . '_value';
      $$str=uc($$str);
    }

  }
$end

$lib copy_one_2_three
sub copy1to3 {
  my ($infile, $outfile)=@_;
  my ($ifh, $ofh);

  open($ofh, "> $outfile");
  &logMessage("Note: Copying file $infile to $outfile");
  open($ifh, $infile);
  while (<$ifh>) {
    chomp;
    s/\,\s*$/;/;   # swap ending comma with semi-colon
    s/^};/}/;  ##last line with semicolon
    s/^}/};/;

    if ($[prefix]prefix2_value ne "") {
     
      s/STAP\_/$[prefix]prefix2_value\_.STAP\_/ig;
      #s/SECURE\_GREEN/$[prefix]prefix2_value\_.SECURE\_GREEN/ig;
      #s/SECURE\_ORANGE/$[prefix]prefix2_value\_.SECURE\_ORANGE/ig;
      #s/SECURE\_RED/$[prefix]prefix2_value\_.SECURE\_RED/ig;
      s/\.//ig;  
      
    }
    printf($ofh "$_\n");
  }
  close($ifh);
  close($ofh);
}
$end

$lib createnewfile
sub createNewFile {
  my ($outfile)=@_;
  my ($ofh);

  &logMessage("Note: Creating new file $outfile");
  open($ofh, "> $outfile");
  
print($ofh ".STAP_SIZE_OF_EACH_INSTRUCTION                      \($[prefix]prefix2_value"."_STAP_SIZE_OF_EACH_INSTRUCTION\),\n");

print($ofh ".STAP_ENABLE_TDO_POS_EDGE                           \($[prefix]prefix2_value"."_STAP_ENABLE_TDO_POS_EDGE\),\n");
print($ofh ".STAP_ENABLE_BSCAN                                  \($[prefix]prefix2_value"."_STAP_ENABLE_BSCAN\),\n");
print($ofh ".STAP_NUMBER_OF_MANDATORY_REGISTERS                 \($[prefix]prefix2_value"."_STAP_NUMBER_OF_MANDATORY_REGISTERS\),\n");

print($ofh ".STAP_SECURE_GREEN                                  \($[prefix]prefix2_value"."_STAP_SECURE_GREEN\),\n");
print($ofh ".STAP_SECURE_ORANGE                                 \($[prefix]prefix2_value"."_STAP_SECURE_ORANGE\),\n");
print($ofh ".STAP_SECURE_RED                                    \($[prefix]prefix2_value"."_STAP_SECURE_RED\),\n");

print($ofh ".STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK                 \($[prefix]prefix2_value"."_STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK\),\n");
print($ofh ".STAP_DFX_SECURE_POLICY_SELECTREG                   \($[prefix]prefix2_value"."_STAP_DFX_SECURE_POLICY_SELECTREG\),\n");
print($ofh ".STAP_ENABLE_TAPC_REMOVE                            \($[prefix]prefix2_value"."_STAP_ENABLE_TAPC_REMOVE\),\n");

print($ofh ".STAP_NUMBER_OF_WTAPS_IN_NETWORK                    \($[prefix]prefix2_value"."_STAP_NUMBER_OF_WTAPS_IN_NETWORK\),\n");
print($ofh ".STAP_WTAP_NETWORK_ONE_FOR_SERIES_ZERO_FOR_PARALLEL \($[prefix]prefix2_value"."_STAP_WTAP_NETWORK_ONE_FOR_SERIES_ZERO_FOR_PARALLEL\),\n");   
print($ofh ".STAP_ENABLE_WTAP_CTRL_POS_EDGE                     \($[prefix]prefix2_value"."_STAP_ENABLE_WTAP_CTRL_POS_EDGE\),\n");

print($ofh ".STAP_NUMBER_OF_REMOTE_TEST_DATA_REGISTERS          \($[prefix]prefix2_value"."_STAP_NUMBER_OF_REMOTE_TEST_DATA_REGISTERS\),\n");
print($ofh ".STAP_ENABLE_RTDR_PROG_RST                          \($[prefix]prefix2_value"."_STAP_ENABLE_RTDR_PROG_RST\),\n");
print($ofh ".STAP_RTDR_IS_BUSSED                                \($[prefix]prefix2_value"."_STAP_RTDR_IS_BUSSED\),\n");

print($ofh ".STAP_NUMBER_OF_TEST_DATA_REGISTERS                 \($[prefix]prefix2_value"."_STAP_NUMBER_OF_TEST_DATA_REGISTERS\),\n");
print($ofh ".STAP_TOTAL_WIDTH_OF_TEST_DATA_REGISTERS            \($[prefix]prefix2_value"."_STAP_TOTAL_WIDTH_OF_TEST_DATA_REGISTERS\),\n");
print($ofh ".STAP_ENABLE_ITDR_PROG_RST                          \($[prefix]prefix2_value"."_STAP_ENABLE_ITDR_PROG_RST\),\n");

print($ofh ".STAP_NUMBER_OF_TOTAL_REGISTERS                     \($[prefix]prefix2_value"."_STAP_NUMBER_OF_TOTAL_REGISTERS\),\n");

print($ofh ".STAP_INSTRUCTION_FOR_DATA_REGISTERS                \($[prefix]prefix2_value"."_STAP_INSTRUCTION_FOR_DATA_REGISTERS\),\n");
print($ofh ".STAP_NUMBER_OF_BITS_FOR_SLICE                      \($[prefix]prefix2_value"."_STAP_NUMBER_OF_BITS_FOR_SLICE\),\n");
print($ofh ".STAP_SIZE_OF_EACH_TEST_DATA_REGISTER               \($[prefix]prefix2_value"."_STAP_SIZE_OF_EACH_TEST_DATA_REGISTER\),\n");
print($ofh ".STAP_MSB_VALUES_OF_TEST_DATA_REGISTERS             \($[prefix]prefix2_value"."_STAP_MSB_VALUES_OF_TEST_DATA_REGISTERS\),\n");
print($ofh ".STAP_LSB_VALUES_OF_TEST_DATA_REGISTERS             \($[prefix]prefix2_value"."_STAP_LSB_VALUES_OF_TEST_DATA_REGISTERS\),\n");
print($ofh ".STAP_RESET_VALUES_OF_TEST_DATA_REGISTERS           \($[prefix]prefix2_value"."_STAP_RESET_VALUES_OF_TEST_DATA_REGISTERS\)\n");

  close($ofh);

}
$end



$lib create_instancefile
sub create_instancefile {
my ($output_instance_file)= @_ ;
#printf("debug>$output_instance_file \n");
open(my $instance_file,">$output_instance_file");
&logMessage("Note: Creating new file $output_instance_file");
print $instance_file "//----------------------------------------------------------------------\n";
print $instance_file "// Intel Proprietary -- Copyright 2016 Intel -- All rights reserved\n";
print $instance_file "//----------------------------------------------------------------------\n";
print $instance_file "// NOTE: Log history is at end of file.\n";
print $instance_file "//----------------------------------------------------------------------\n";
print $instance_file "//\n";
print $instance_file "//    FILENAME    : stap_instance.sv\n";
print $instance_file "//    DESIGNER    : Sunjiv Sachan\n";
print $instance_file "//    PROJECT     : Instance of sTAP\n";
print $instance_file "//    STAP VERSION: 1.5.2\n";
print $instance_file "//\n";
print $instance_file "//    PURPOSE     : To instantiate sTAP Top Level\n";
print $instance_file "//    DESCRIPTION :\n";
print $instance_file "//       This is top module which instantiates the sTAP Top Level.\n";
print $instance_file "//----------------------------------------------------------------------\n";
print $instance_file "\n";
print $instance_file "// Parameters\n";
my $include_file=$[prefix]prefix2_value.'_'.'sTAP_soc_param_values.inc';
print $instance_file "`include \"$include_file\"\n";
print $instance_file "\n";
print $instance_file "module stap_instance\n";
print $instance_file "   (\n";
print $instance_file "   // // -----------------------------------------------------------------\n";
print $instance_file "   // // Primary JTAG ports\n";
print $instance_file "   // // -----------------------------------------------------------------\n";
print $instance_file "   input  logic        ftap_tck,\n";
print $instance_file "   input  logic        ftap_tms,\n";
print $instance_file "   input  logic        ftap_trst_b,\n";
print $instance_file "   input  logic        ftap_tdi,\n";
print $instance_file "   input  logic [31:0] ftap_slvidcode,\n";
print $instance_file "   output logic        atap_tdo,\n";
print $instance_file "   output logic        atap_tdoen,\n";
print $instance_file "   input  logic        fdfx_powergood,\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // Parallel ports of optional data registers\n";
print $instance_file "   // -----------------------------------------------------------------\n";

if($[prefix]entestdataregister_numoftestdatareg_value == 0)
{
  printf ($instance_file "   output logic        tdr_data_out,\n");
}
else
{
for (my $i = $[prefix]entestdataregister_numoftestdatareg_value-1 ; $i >= 0; $i--)
   {
          print $instance_file "  output logic [";
          my $temp='[prefix]entestdataregister_numoftestdatareg_sizetestdatareg' . $i . '_value';
          my $temp_address='[prefix]entestdataregister_numoftestdatareg_addresstestdatareg' . $i . '_value' ;
         print $instance_file $$temp - 1, ":" ;
         print $instance_file  0, "] ";
         print $instance_file "tdr_data_out_", $$temp_address  ,",\n"
         
   }
}

my $total_tdr=&calcsum;
#printf("Debug>$total_tdr \n");
if ($total_tdr == 0)
{
   printf instance_file "   input  logic        tdr_data_in,\n";
}
else
{
   
for (my $i = $[prefix]entestdataregister_numoftestdatareg_value-1 ; $i >= 0; $i--)
   {
          print $instance_file "  input logic [";
          my $temp='[prefix]entestdataregister_numoftestdatareg_sizetestdatareg' . $i . '_value';
          my $temp_address='[prefix]entestdataregister_numoftestdatareg_addresstestdatareg' . $i . '_value' ;
         print $instance_file $$temp - 1, ":" ;
         print $instance_file  0, "] ";
         print $instance_file "tdr_data_in_", $$temp_address , ",\n"
         
   }

}
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // DFX Secure signals\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   input  logic [3:0] fdfx_secure_policy,\n";
print $instance_file "   input  logic       fdfx_earlyboot_exit,\n";
print $instance_file "   input  logic       fdfx_policy_update,\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // Control signals to 0.7 TAPNetwork\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   output logic [(((${[prefix]prefix2_value}_STAP_ENABLE_TDO_POS_EDGE == 1) ? 1 : (${[prefix]prefix2_value}_STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK == 0) ? 1 : ${[prefix]prefix2_value}_STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK) - 1):0] sftapnw_ftap_secsel,\n";
print $instance_file "   output logic [(((${[prefix]prefix2_value}_STAP_ENABLE_TDO_POS_EDGE == 1) ? 1 : (${[prefix]prefix2_value}_STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK == 0) ? 1 : ${[prefix]prefix2_value}_STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK) - 1):0] sftapnw_ftap_enabletdo,\n";
print $instance_file "   output logic [(((${[prefix]prefix2_value}_STAP_ENABLE_TDO_POS_EDGE == 1) ? 1 : (${[prefix]prefix2_value}_STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK == 0) ? 1 : ${[prefix]prefix2_value}_STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK) - 1):0] sftapnw_ftap_enabletap,\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // Primary JTAG ports to 0.7 TAPNetwork\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   output logic                                                 sntapnw_ftap_tck,\n";
print $instance_file "   output logic                                                 sntapnw_ftap_tms,\n";
print $instance_file "   output logic                                                 sntapnw_ftap_trst_b,\n";
print $instance_file "   output logic                                                 sntapnw_ftap_tdi,\n";
print $instance_file "   input  logic                                                 sntapnw_atap_tdo,\n";
print $instance_file "   input  logic [(((${[prefix]prefix2_value}_STAP_ENABLE_TDO_POS_EDGE == 1) ? 1 : (${[prefix]prefix2_value}_STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK == 0) ? 1 : ${[prefix]prefix2_value}_STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK) - 1):0] sntapnw_atap_tdo_en,\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // Secondary JTAG ports\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   input  logic ftapsslv_tck,\n";
print $instance_file "   input  logic ftapsslv_tms,\n";
print $instance_file "   input  logic ftapsslv_trst_b,\n";
print $instance_file "   input  logic ftapsslv_tdi,\n";
print $instance_file "   output logic atapsslv_tdo,\n";
print $instance_file "   output logic atapsslv_tdoen,\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // Secondary JTAG ports to 0.7 TAPNetwork\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   output logic                                                 sntapnw_ftap_tck2,\n";
print $instance_file "   output logic                                                 sntapnw_ftap_tms2,\n";
print $instance_file "   output logic                                                 sntapnw_ftap_trst2_b,\n";
print $instance_file "   output logic                                                 sntapnw_ftap_tdi2,\n";
print $instance_file "   input  logic                                                 sntapnw_atap_tdo2,\n";
print $instance_file "   input  logic [(((${[prefix]prefix2_value}_STAP_ENABLE_TDO_POS_EDGE == 1) ? 1 : (${[prefix]prefix2_value}_STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK == 0) ? 1 : ${[prefix]prefix2_value}_STAP_NUMBER_OF_TAPS_IN_TAP_NETWORK) - 1):0] sntapnw_atap_tdo2_en,\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // Control Signals common to WTAP/WTAP Network\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   output logic sn_fwtap_wrck,\n";
print $instance_file "   output logic sn_fwtap_wrst_b,\n";
print $instance_file "   output logic sn_fwtap_capturewr,\n";
print $instance_file "   output logic sn_fwtap_shiftwr,\n";
print $instance_file "   output logic sn_fwtap_updatewr,\n";
print $instance_file "   output logic sn_fwtap_rti,\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // Control Signals only to WTAP Network\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   output logic                                              sn_fwtap_selectwir,\n";
print $instance_file "   input  logic [(((${[prefix]prefix2_value}_STAP_ENABLE_TDO_POS_EDGE == 1) ? 1 : (${[prefix]prefix2_value}_STAP_NUMBER_OF_WTAPS_IN_NETWORK == 0) ? 1 : (${[prefix]prefix2_value}_STAP_WTAP_NETWORK_ONE_FOR_SERIES_ZERO_FOR_PARALLEL == 1) ? 1 : ${[prefix]prefix2_value}_STAP_NUMBER_OF_WTAPS_IN_NETWORK)- 1):0] sn_awtap_wso,\n";
print $instance_file "   output logic [(((${[prefix]prefix2_value}_STAP_ENABLE_TDO_POS_EDGE == 1) ? 1 : (${[prefix]prefix2_value}_STAP_NUMBER_OF_WTAPS_IN_NETWORK == 0) ? 1 : (${[prefix]prefix2_value}_STAP_WTAP_NETWORK_ONE_FOR_SERIES_ZERO_FOR_PARALLEL == 1) ? 1 : ${[prefix]prefix2_value}_STAP_NUMBER_OF_WTAPS_IN_NETWORK) - 1):0] sn_fwtap_wsi,\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // Boundary Scan Signals\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // Control Signals from fsm\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   output logic stap_fbscan_tck,\n";
print $instance_file "   input  logic stap_abscan_tdo,\n";
print $instance_file "   output logic stap_fbscan_capturedr,\n";
print $instance_file "   output logic stap_fbscan_shiftdr,\n";
print $instance_file "   output logic stap_fbscan_updatedr,\n";
print $instance_file "   output logic stap_fbscan_updatedr_clk,\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // Instructions\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   output logic stap_fbscan_runbist_en,\n";
print $instance_file "   output logic stap_fbscan_highz,\n";
print $instance_file "   output logic stap_fbscan_extogen,\n";
print $instance_file "   output logic stap_fbscan_intest_mode,\n";
print $instance_file "   output logic stap_fbscan_chainen,\n";
print $instance_file "   output logic stap_fbscan_mode,\n";
print $instance_file "   output logic stap_fbscan_extogsig_b,\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // 1149.6 AC mode\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   output logic stap_fbscan_d6init,\n";
print $instance_file "   output logic stap_fbscan_d6actestsig_b,\n";
print $instance_file "   output logic stap_fbscan_d6select,\n";
print $instance_file "   // -----------------------------------------------------------------\n";
print $instance_file "   // Remote Test data register\n";
print $instance_file "   // -----------------------------------------------------------------\n";

## RTDR section



if($[prefix]enremotetestdata_numofremotetestdatareg_value==0){
     print $instance_file "   input  logic                                                           rtdr_tap_tdo", ",\n";
}
else
{
   for (my $i=$[prefix]enremotetestdata_numofremotetestdatareg_value-1; $i >= 0; $i--)
   {
       my $temp_address ='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg' . $i . '_value';
      print $instance_file "   input  logic                                                           rtdr_tap_tdo_", $$temp_address, ",\n";
   }
}

if ($[prefix]enremotetestdata_numofremotetestdatareg_value == 0)
{
   print $instance_file "   output logic                                                           tap_rtdr_irdec", ",\n";
}
else
{
   for ($i = $[prefix]enremotetestdata_numofremotetestdatareg_value - 1; $i >= 0; $i--)
   {
       my $temp_address ='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg' . $i . '_value';
      print $instance_file "   output logic tap_rtdr_irdec_", $$temp_address , ",\n";
   }
}


if ($[prefix]enremotetestdata_numofremotetestdatareg_value == 0)
{
   print $instance_file "   output logic                                                           tap_rtdr_prog_rst_b", ",\n";
}
else
{
   for ($i = $[prefix]enremotetestdata_numofremotetestdatareg_value - 1; $i >= 0; $i--)
   {
       my $temp_address ='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg' . $i . '_value';
      print $instance_file "   output logic                                                           tap_rtdr_prog_rst_b_", $$temp_address , ",\n";
   }
}

if ($[prefix]enremotetestdata_bussed_rtdr_value == 0)
{
   print $instance_file "   output logic                                                           tap_rtdr_tdi", ",\n";
}
else
{
   for ($i = $[prefix]enremotetestdata_numofremotetestdatareg_value - 1; $i >= 0; $i--)
   {
       my $temp_address ='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg' . $i . '_value';
       print $instance_file "   output logic                                                           tap_rtdr_tdi_", $$temp_address , ",\n";
   }
}

if ($[prefix]enremotetestdata_bussed_rtdr_value == 0)
{
   print $instance_file "   output logic                                                           tap_rtdr_capture", ",\n";
}
else
{
   for ($i = $[prefix]enremotetestdata_numofremotetestdatareg_value - 1; $i >= 0; $i--)
   {
       my $temp_address ='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg' . $i . '_value';
      print $instance_file "   output logic                                                           tap_rtdr_capture_", $$temp_address , ",\n";
   }
 }

if ($[prefix]enremotetestdata_bussed_rtdr_value == 0)
{
   print $instance_file "   output logic                                                           tap_rtdr_shift", ",\n";
}
else
{
   for ($i = $[prefix]enremotetestdata_numofremotetestdatareg_value - 1; $i >= 0; $i--)
   {
       my $temp_address ='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg' . $i . '_value';
      print $instance_file "   output logic                                                           tap_rtdr_shift_", $$temp_address , ",\n";
   }

}

if ($[prefix]enremotetestdata_bussed_rtdr_value == 0)
{
   print $instance_file "   output logic                                                           tap_rtdr_update", ",\n";
}
else
{
   for ($i = $[prefix]enremotetestdata_numofremotetestdatareg_value - 1; $i >= 0; $i--)
   {
       my $temp_address ='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg' . $i . '_value';
      print $instance_file "   output logic                                                           tap_rtdr_update_", $$temp_address , ",\n";
   }

 }

print $instance_file "   output logic                                                           tap_rtdr_tck,\n";
print $instance_file "   output logic                                                           tap_rtdr_powergood,\n";
print $instance_file "   output logic                                                           tap_rtdr_selectir,\n";
print $instance_file "   output logic                                                           tap_rtdr_rti\n";
print $instance_file "   );\n";
print $instance_file "\n";
print $instance_file "    //sTAP Top Instance\n";
print $instance_file "   stap #(";
print $instance_file "`include \"${[prefix]prefix2_value}_sTAP_soc_param_overide.inc\"";
print $instance_file ")\n";
print $instance_file "   stap_inst (\n";
print $instance_file "              //Primary JTAG ports\n";
print $instance_file "              .ftap_tck                  (ftap_tck),\n";
print $instance_file "              .ftap_tms                  (ftap_tms),\n";
print $instance_file "              .ftap_trst_b               (ftap_trst_b),\n";
print $instance_file "              .ftap_tdi                  (ftap_tdi),\n";
print $instance_file "              .ftap_slvidcode            (ftap_slvidcode),\n";
print $instance_file "              .atap_tdo                  (atap_tdo),\n";
print $instance_file "              .atap_tdoen                (atap_tdoen),\n";
print $instance_file "              .fdfx_powergood            (fdfx_powergood),\n";
print $instance_file "\n";          
print $instance_file "              //Parallel ports of optional data registers\n";
# For TDR                           
                                    
if ($[prefix]entestdataregister_numoftestdatareg_value== 0)
{                                   
   print $instance_file "              .tdr_data_out              (tdr_data_out),\n";
}                                   
else                                
{                                   
   print $instance_file "              .tdr_data_out              ({";
   for ($i =$[prefix]entestdataregister_numoftestdatareg_value-1; $i >= 0; $i--)
   {                                
      if ($i == 0)                  
      {                             
                                    
        my $temp_address='[prefix]entestdataregister_numoftestdatareg_addresstestdatareg'. $i .'_value';
         print $instance_file "tdr_data_out_", $$temp_address ;
      }                             
      else                          
      {                             
           my $temp_address='[prefix]entestdataregister_numoftestdatareg_addresstestdatareg'. $i .'_value';
         print $instance_file "tdr_data_out_", $$temp_address, ",";
      }                             
   }
 print $instance_file "}),\n";

}                                   

if ($[prefix]entestdataregister_numoftestdatareg_value== 0)
{                                   
   print $instance_file "              .tdr_data_in               (tdr_data_in),\n";
}                                   
else                                
{                                   
   print $instance_file "              .tdr_data_in               ({";
   for ($i =$[prefix]entestdataregister_numoftestdatareg_value-1; $i >= 0; $i--)
   {                                
      if ($i == 0)                  
      {                             
                                    
        my $temp_address='[prefix]entestdataregister_numoftestdatareg_addresstestdatareg'. $i .'_value';
         print $instance_file "tdr_data_in_", $$temp_address ;
      }                             
      else                          
      {                             
           my $temp_address='[prefix]entestdataregister_numoftestdatareg_addresstestdatareg'. $i .'_value';
         print $instance_file "tdr_data_in_", $$temp_address, ",";
      }                             
   }                                
} 



print $instance_file "}),\n";       
                                    
print $instance_file "\n";          
print $instance_file "              //Lock signals\n";
print $instance_file "              .fdfx_secure_policy        (fdfx_secure_policy),\n";
print $instance_file "              .fdfx_earlyboot_exit       (fdfx_earlyboot_exit),\n";
print $instance_file "              .fdfx_policy_update        (fdfx_policy_update),\n";
print $instance_file "\n";          
print $instance_file "              //Control signals to Slave TAPNetwork\n";
print $instance_file "              .sftapnw_ftap_secsel       (sftapnw_ftap_secsel),\n";
print $instance_file "              .sftapnw_ftap_enabletdo    (sftapnw_ftap_enabletdo),\n";
print $instance_file "              .sftapnw_ftap_enabletap    (sftapnw_ftap_enabletap),\n";
print $instance_file "\n";          
print $instance_file "              //Primary JTAG ports to Slave TAPNetwork\n";
print $instance_file "              .sntapnw_ftap_tck          (sntapnw_ftap_tck),\n";
print $instance_file "              .sntapnw_ftap_tms          (sntapnw_ftap_tms),\n";
print $instance_file "              .sntapnw_ftap_trst_b       (sntapnw_ftap_trst_b),\n";
print $instance_file "              .sntapnw_ftap_tdi          (sntapnw_ftap_tdi),\n";
print $instance_file "              .sntapnw_atap_tdo          (sntapnw_atap_tdo),\n";
print $instance_file "              .sntapnw_atap_tdo_en       (sntapnw_atap_tdo_en),\n";
print $instance_file "\n";          
print $instance_file "              //Secondary JTAG Ports\n";
print $instance_file "              .ftapsslv_tck              (ftapsslv_tck),\n";
print $instance_file "              .ftapsslv_tms              (ftapsslv_tms),\n";
print $instance_file "              .ftapsslv_trst_b           (ftapsslv_trst_b),\n";
print $instance_file "              .ftapsslv_tdi              (ftapsslv_tdi),\n";
print $instance_file "              .atapsslv_tdo              (atapsslv_tdo),\n";
print $instance_file "              .atapsslv_tdoen            (atapsslv_tdoen),\n";
print $instance_file "\n";          
print $instance_file "              //Secondary JTAG ports to Slave TAPNetwork\n";
print $instance_file "              .sntapnw_ftap_tck2         (sntapnw_ftap_tck2),\n";
print $instance_file "              .sntapnw_ftap_tms2         (sntapnw_ftap_tms2),\n";
print $instance_file "              .sntapnw_ftap_trst2_b      (sntapnw_ftap_trst2_b),\n";
print $instance_file "              .sntapnw_ftap_tdi2         (sntapnw_ftap_tdi2),\n";
print $instance_file "              .sntapnw_atap_tdo2         (sntapnw_atap_tdo2),\n";
print $instance_file "              .sntapnw_atap_tdo2_en      (sntapnw_atap_tdo2_en),\n";
print $instance_file "\n";          
print $instance_file "              //Control Signals  common to WTAP/WTAP Network\n";
print $instance_file "              .sn_fwtap_wrck             (sn_fwtap_wrck),\n";
print $instance_file "              .sn_fwtap_wrst_b           (sn_fwtap_wrst_b),\n";
print $instance_file "              .sn_fwtap_capturewr        (sn_fwtap_capturewr),\n";
print $instance_file "              .sn_fwtap_shiftwr          (sn_fwtap_shiftwr),\n";
print $instance_file "              .sn_fwtap_updatewr         (sn_fwtap_updatewr),\n";
print $instance_file "              .sn_fwtap_rti              (sn_fwtap_rti),\n";
print $instance_file "\n";          
print $instance_file "              //Control Signals only to WTAP Network\n";
print $instance_file "              .sn_fwtap_selectwir        (sn_fwtap_selectwir),\n";
print $instance_file "              .sn_awtap_wso              (sn_awtap_wso),\n";
print $instance_file "              .sn_fwtap_wsi              (sn_fwtap_wsi),\n";
print $instance_file "\n";          
print $instance_file "              //Boundary Scan Signals\n";
print $instance_file "\n";          
print $instance_file "              //Control Signals from fsm\n";
print $instance_file "              .stap_fbscan_tck           (stap_fbscan_tck),\n";
print $instance_file "              .stap_abscan_tdo           (stap_abscan_tdo),\n";
print $instance_file "              .stap_fbscan_capturedr     (stap_fbscan_capturedr),\n";
print $instance_file "              .stap_fbscan_shiftdr       (stap_fbscan_shiftdr),\n";
print $instance_file "              .stap_fbscan_updatedr      (stap_fbscan_updatedr),\n";
print $instance_file "              .stap_fbscan_updatedr_clk  (stap_fbscan_updatedr_clk),\n";
print $instance_file "\n";          
print $instance_file "              //Instructions\n";
print $instance_file "              .stap_fbscan_runbist_en    (stap_fbscan_runbist_en),\n";
print $instance_file "              .stap_fbscan_highz         (stap_fbscan_highz),\n";
print $instance_file "              .stap_fbscan_extogen       (stap_fbscan_extogen),\n";
print $instance_file "              .stap_fbscan_intest_mode   (stap_fbscan_intest_mode),\n";
print $instance_file "              .stap_fbscan_chainen       (stap_fbscan_chainen),\n";
print $instance_file "              .stap_fbscan_mode          (stap_fbscan_mode),\n";
print $instance_file "              .stap_fbscan_extogsig_b    (stap_fbscan_extogsig_b),\n";
print $instance_file "\n";          
print $instance_file "              //1149.6 AC mode\n";
print $instance_file "              .stap_fbscan_d6init        (stap_fbscan_d6init),\n";
print $instance_file "              .stap_fbscan_d6actestsig_b (stap_fbscan_d6actestsig_b),\n";
print $instance_file "              .stap_fbscan_d6select      (stap_fbscan_d6select),\n";
print $instance_file "\n";          
print $instance_file "              //Remote Test Data Register pins\n";
                                    
if ($[prefix]enremotetestdata_numofremotetestdatareg_value== 0)
{                                   
   print $instance_file "              .rtdr_tap_tdo              (rtdr_tap_tdo),\n";
}                                   
else                                
{                                   
   print $instance_file "              .rtdr_tap_tdo              ({";
  for ($i =$[prefix]enremotetestdata_numofremotetestdatareg_value-1; $i >= 0; $i--)
   {                                
      if ($i == 0)                  
      {                             
                                    
        my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "rtdr_tap_tdo_", $$temp_address;
      }                             
      else                          
      {                             
           my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "rtdr_tap_tdo_", $$temp_address, ",";
      }                             
   }
print $instance_file "}),\n";
}                                   
                                    
       
                                    
# For remote TDR                    
                   
                                    
if ($[prefix]enremotetestdata_bussed_rtdr_value == 0)
{                                   
   print $instance_file "              .tap_rtdr_tdi              (tap_rtdr_tdi),\n";
}                                   
else                                
{                                   
   print $instance_file "              .rtdr_tap_tdi              ({";
                                    
 for ($i =$[prefix]enremotetestdata_numofremotetestdatareg_value-1; $i >= 0; $i--)
   {                                
      if ($i == 0)                  
      {                             
                                    
        my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "rtdr_tap_tdi_", $$temp_address;
      }                             
      else                          
      {                             
           my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "rtdr_tap_tdi_", $$temp_address, ",";
      }                             
                                    
                                    
}                                   
                                    
     print $instance_file "}),\n";  
}                                   
                                    
if ($[prefix]enremotetestdata_bussed_rtdr_value == 0)
{                                   
   print $instance_file "              .tap_rtdr_capture          (tap_rtdr_capture),\n";
}                                   
else                                
{                                   
   print $instance_file "              .tap_rtdr_capture          ({";
                                    
 for ($i =$[prefix]enremotetestdata_numofremotetestdatareg_value-1; $i >= 0; $i--)
   {                                
      if ($i == 0)                  
      {

        my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "tap_rtdr_capture_", $$temp_address;
      }
      else
      {
           my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "tap_rtdr_capture_", $$temp_address, ",";
      }


}

     print $instance_file "}),\n";
}

if ($[prefix]enremotetestdata_bussed_rtdr_value == 0)
{
   print $instance_file "              .tap_rtdr_shift            (tap_rtdr_shift),\n";
}
else
{
   print $instance_file "              .tap_rtdr_shift            ({";

 for ($i =$[prefix]enremotetestdata_numofremotetestdatareg_value-1; $i >= 0; $i--)
   {
      if ($i == 0)
      {

        my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "tap_rtdr_shift_", $$temp_address;
      }
      else
      {
           my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "tap_rtdr_shift_", $$temp_address, ",";
      }


}
 print $instance_file "}),\n";
}


if ($[prefix]enremotetestdata_bussed_rtdr_value == 0)
{
   print $instance_file "              .tap_rtdr_update           (tap_rtdr_update),\n";
}
else
{
   print $instance_file "              .tap_rtdr_update           ({";

 for ($i =$[prefix]enremotetestdata_numofremotetestdatareg_value-1; $i >= 0; $i--)
   {
      if ($i == 0)
      {

        my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "tap_rtdr_update_", $$temp_address;
      }
      else
      {
           my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "tap_rtdr_update_", $$temp_address, ",";
      }


    
}
 print $instance_file "}),\n";
}
print $instance_file "              .tap_rtdr_selectir         (tap_rtdr_selectir),\n";
print $instance_file "              .tap_rtdr_powergood        (tap_rtdr_powergood),\n";

if ($[prefix]enremotetestdata_numofremotetestdatareg_value == 0)
{
   print $instance_file "              .tap_rtdr_irdec            (tap_rtdr_irdec),\n";
}
else
{
   print $instance_file "              .tap_rtdr_irdec            ({";

 for ($i =$[prefix]enremotetestdata_numofremotetestdatareg_value-1; $i >= 0; $i--)
   {
      if ($i == 0)
      {

        my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "tap_rtdr_irdec_", $$temp_address;
      }
      else
      {
           my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "tap_rtdr_irdec_", $$temp_address, ",";
      }

}
 print $instance_file "}),\n";
}
print $instance_file "              .tap_rtdr_tck              (tap_rtdr_tck),\n";
print $instance_file "              .tap_rtdr_rti              (tap_rtdr_rti),\n";


if ($[prefix]enremotetestdata_numofremotetestdatareg_value == 0)
{
   print $instance_file "              .tap_rtdr_prog_rst_b       (tap_rtdr_prog_rst_b)\n";
}
else
{
   print $instance_file "              .tap_rtdr_prog_rst_b       ({";

 for ($i =$[prefix]enremotetestdata_numofremotetestdatareg_value-1; $i >= 0; $i--)
   {
      if ($i == 0)
      {

        my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "tap_rtdr_prog_rst_b_", $$temp_address;
      }
      else
      {
           my $temp_address='[prefix]enremotetestdata_numofremotetestdatareg_addressremotetestdatareg'. $i .'_value';
         print $instance_file "tap_rtdr_prog_rst_b_", $$temp_address, ",";
      }


    
}
 print $instance_file "})\n";
}

print $instance_file "             );\n";
print $instance_file "\n";
print $instance_file "endmodule\n";


close($instance_file);
##
}#subroutine end
$end
#
