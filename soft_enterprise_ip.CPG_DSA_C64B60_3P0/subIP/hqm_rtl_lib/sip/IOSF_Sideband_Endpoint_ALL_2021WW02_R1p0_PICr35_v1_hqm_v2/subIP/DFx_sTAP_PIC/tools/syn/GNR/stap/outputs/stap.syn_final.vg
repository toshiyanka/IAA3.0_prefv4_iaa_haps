/////////////////////////////////////////////////////////////
// Created by: Synopsys DC Ultra(TM) in topographical mode
// Version   : M-2016.12-SP5-1
// Date      : Fri Jul 27 10:53:33 2018
// Netlist generated using set_compile_spg_mode ICC command enabled,
// which affects timing. Enable set_compile_spg_mode ICC in the flow.
/////////////////////////////////////////////////////////////


module stap_fsm ( ftap_tms, ftap_tck, powergood_rst_trst_b, 
        suppress_update_capture_reg, stap_irreg_ireg, tapc_remove, 
        stap_fsm_tlrs, stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr, 
        stap_selectwir, stap_selectwir_neg, sn_fwtap_capturewr, 
        sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b, 
        stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg, 
        stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr, 
        stap_fsm_update_dr );
  input [1:0] suppress_update_capture_reg;
  input [7:0] stap_irreg_ireg;
  input ftap_tms, ftap_tck, powergood_rst_trst_b, tapc_remove;
  output stap_fsm_tlrs, stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr,
         stap_selectwir, stap_selectwir_neg, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b,
         stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg,
         stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr;
  wire   state_ps_14_0, state_ps_13_0, state_ps_12_0, state_ps_9_0, n5, n4,
         state_ps_6_0, n3, state_ps_2_0, n2, tms_bit_3_0, tms_bit_2_0,
         tms_bit_1_0, tms_bit_0_0, N468, N469, N470, N471, N473, N474, N475,
         N476, N477, N478, N479, N480, N481, N482, N483, N484, N485, N486,
         N487, N488, n6, n7, n8, n10, n12, n13, n14, n15, n16, n17, n19, n20,
         n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n32, n33, n34, n35,
         n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49,
         n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63,
         n64, n65, n66, n67, n70, n71, n72, n73;

  e05and002an1n01x5 syn_4 ( .a(tms_bit_1_0), .b(n71), .o(N470) );
  e05and002an1n01x5 syn_5 ( .a(tms_bit_0_0), .b(n71), .o(N469) );
  e05and002an1n01x5 syn_6 ( .a(tms_bit_2_0), .b(n71), .o(N471) );
  e05nor003an2n01x5 syn_9 ( .a(stap_fsm_shift_dr), .b(n4), .c(n3), .o1(n8) );
  e05nor044an2n01x3 syn_10 ( .a(n5), .b(n2), .c(state_ps_2_0), .d(
        stap_fsm_capture_dr), .o1(n16) );
  e05nand22an1n02x5 syn_11 ( .a(n8), .b(n16), .o1(n17) );
  e05nor002an2n01x5 syn_12 ( .a(state_ps_6_0), .b(n17), .o1(n24) );
  e05nand22an1n02x5 syn_14 ( .a(n24), .b(n70), .o1(n38) );
  e05nor002an2n01x5 syn_15 ( .a(stap_fsm_capture_ir), .b(n38), .o1(n13) );
  e05nor002an2n01x5 syn_16 ( .a(state_ps_12_0), .b(state_ps_14_0), .o1(n6) );
  e05nand22an1n02x5 syn_17 ( .a(n13), .b(n6), .o1(n10) );
  e05nor003an2n01x5 syn_18 ( .a(stap_fsm_tlrs), .b(state_ps_13_0), .c(
        stap_fsm_shift_ir), .o1(n7) );
  e05nanb03an1n02x3 syn_19 ( .a(n10), .b(state_ps_9_0), .c(n7), .out0(n49) );
  e05nor002an2n01x5 syn_20 ( .a(ftap_tms), .b(n49), .o1(N483) );
  e05nonb02an1n01x7 syn_21 ( .a(n7), .b(state_ps_9_0), .out0(n12) );
  e05nonb03an2n02x5 syn_22 ( .a(n12), .b(state_ps_12_0), .c(state_ps_14_0), 
        .out0(n37) );
  e05nonb02an1n01x7 syn_23 ( .a(n37), .b(stap_fsm_capture_ir), .out0(n23) );
  e05nonb03an2n02x5 syn_24 ( .a(n23), .b(state_ps_6_0), .c(stap_fsm_update_ir), 
        .out0(n15) );
  e05nor002an2n01x5 syn_28 ( .a(ftap_tms), .b(n60), .o1(N476) );
  e05nonb02an1n01x7 syn_29 ( .a(ftap_tms), .b(stap_fsm_tlrs), .out0(N468) );
  e05nor002an2n01x5 syn_30 ( .a(state_ps_9_0), .b(n10), .o1(n29) );
  e05nand22an1n02x5 syn_31 ( .a(n29), .b(n71), .o1(n40) );
  e05inv020an2n02x5 syn_32 ( .a(stap_fsm_shift_ir), .o1(n41) );
  e05nanb03an1n02x3 syn_33 ( .a(n40), .b(state_ps_13_0), .c(n41), .out0(n64)
         );
  e05nand22an1n02x5 syn_34 ( .a(n13), .b(n12), .o1(n42) );
  e05nonb03an2n02x5 syn_35 ( .a(state_ps_12_0), .b(state_ps_14_0), .c(n42), 
        .out0(n46) );
  e05inv020an2n02x5 syn_36 ( .a(n46), .o1(n14) );
  e05aoi012an2n01x5 syn_37 ( .b(n64), .c(n14), .a(ftap_tms), .o1(N486) );
  e05nor002an2n01x5 syn_39 ( .a(stap_fsm_shift_dr), .b(n32), .o1(n36) );
  e05nanb03an1n02x3 syn_40 ( .a(n4), .b(n3), .c(n36), .out0(n45) );
  e05inv020an2n02x5 syn_41 ( .a(n17), .o1(n19) );
  e05nand24an2n02x5 syn_42 ( .a(n19), .b(state_ps_6_0), .c(n23), .d(n70), .o1(
        n62) );
  e05aoi012an2n01x5 syn_43 ( .b(n45), .c(n62), .a(ftap_tms), .o1(N479) );
  e05inv020an2n02x5 syn_44 ( .a(n5), .o1(n21) );
  e05orn002an1n01x5 syn_45 ( .a(state_ps_2_0), .b(n20), .o(n25) );
  e05nor044an2n01x3 syn_46 ( .a(stap_fsm_capture_dr), .b(n2), .c(n21), .d(n25), 
        .o1(n22) );
  e05aoi013an1n01x5 syn_47 ( .b(n24), .c(stap_fsm_update_ir), .d(n23), .a(n22), 
        .o1(n27) );
  e05nor002an2n01x5 syn_48 ( .a(n25), .b(n5), .o1(n30) );
  e05inv020an2n02x5 syn_49 ( .a(stap_fsm_capture_dr), .o1(n35) );
  e05nand23an1n02x5 syn_50 ( .a(n2), .b(n30), .c(n35), .o1(n26) );
  e05nand22an1n02x5 syn_51 ( .a(n27), .b(n26), .o1(n50) );
  e05inv020an2n02x5 syn_52 ( .a(n50), .o1(n59) );
  e05nor002an2n01x5 syn_53 ( .a(state_ps_13_0), .b(stap_fsm_shift_ir), .o1(n28) );
  e05nand23an1n02x5 syn_54 ( .a(stap_fsm_tlrs), .b(n29), .c(n28), .o1(n48) );
  e05aoi012an2n01x5 syn_55 ( .b(n59), .c(n48), .a(ftap_tms), .o1(N474) );
  e05inv020an2n02x5 syn_56 ( .a(n30), .o1(n34) );
  e05oai013an1n01x5 syn_59 ( .b(n2), .c(n35), .d(n34), .a(n33), .o1(n51) );
  e05inv020an2n02x5 syn_60 ( .a(n51), .o1(n61) );
  e05nanb03an1n02x3 syn_61 ( .a(n3), .b(n4), .c(n36), .out0(n44) );
  e05aoi012an2n01x5 syn_62 ( .b(n61), .c(n44), .a(ftap_tms), .o1(N477) );
  e05nanb03an1n02x3 syn_63 ( .a(n38), .b(stap_fsm_capture_ir), .c(n37), .out0(
        n39) );
  e05oai013an1n01x5 syn_64 ( .b(state_ps_13_0), .c(n41), .d(n40), .a(n39), 
        .o1(n52) );
  e05inv020an2n02x5 syn_65 ( .a(n52), .o1(n63) );
  e05nonb03an2n02x5 syn_66 ( .a(state_ps_14_0), .b(state_ps_12_0), .c(n42), 
        .out0(n47) );
  e05inv020an2n02x5 syn_67 ( .a(n47), .o1(n43) );
  e05aoi012an2n01x5 syn_68 ( .b(n63), .c(n43), .a(ftap_tms), .o1(N484) );
  e05inv020an2n02x5 syn_69 ( .a(n64), .o1(n57) );
  e05nand22an1n02x5 syn_70 ( .a(n45), .b(n44), .o1(n67) );
  e05nor002an2n01x5 syn_71 ( .a(n47), .b(n46), .o1(n65) );
  e05nand22an1n02x5 syn_72 ( .a(n49), .b(n48), .o1(n54) );
  e05nor044an2n01x3 syn_73 ( .a(n52), .b(n51), .c(n54), .d(n50), .o1(n53) );
  e05nand24an2n02x5 syn_74 ( .a(n65), .b(n53), .c(n62), .d(n60), .o1(n56) );
  e05and004an1n02x7 syn_75 ( .a(tms_bit_2_0), .b(tms_bit_1_0), .c(tms_bit_0_0), 
        .d(tms_bit_3_0), .o(n58) );
  e05oai012an2n02x3 syn_76 ( .b(n58), .c(n54), .a(ftap_tms), .o1(n55) );
  e05oai013an1n01x5 syn_77 ( .b(n57), .c(n67), .d(n56), .a(n55), .o1(N473) );
  e05nanb02an2n02x3 syn_78 ( .a(n58), .b(ftap_tms), .out0(n66) );
  e05nor002an2n01x5 syn_79 ( .a(n59), .b(n66), .o1(N475) );
  e05nor002an2n01x5 syn_80 ( .a(n60), .b(n66), .o1(N482) );
  e05nor002an2n01x5 syn_81 ( .a(n61), .b(n66), .o1(N478) );
  e05nor002an2n01x5 syn_82 ( .a(n62), .b(n66), .o1(N480) );
  e05nor002an2n01x5 syn_83 ( .a(n63), .b(n66), .o1(N485) );
  e05nor002an2n01x5 syn_84 ( .a(n64), .b(n66), .o1(N487) );
  e05nor002an2n01x5 syn_85 ( .a(n65), .b(n66), .o1(N488) );
  e05nonb02an1n01x7 syn_86 ( .a(n67), .b(n66), .out0(N481) );
  e05inv020an2n02x5 syn_3 ( .a(stap_fsm_update_ir), .o1(n70) );
  e05inv020an2n02x5 syn_7 ( .a(stap_fsm_tlrs), .o1(n71) );
  e05fyn003an2n01x5 tms_bit_reg_2 ( .d(N470), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(tms_bit_2_0) );
  e05fyn003an2n01x5 tms_bit_reg_3 ( .d(N471), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(tms_bit_3_0) );
  e05fyn003an2n01x5 tms_bit_reg_1 ( .d(N469), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(tms_bit_1_0) );
  e05fyn003an2n01x5 tms_bit_reg_0 ( .d(N468), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(tms_bit_0_0) );
  e05fyn003an2n01x5 state_ps_reg_6 ( .d(N479), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_6_0) );
  e05fyn003an2n01x5 state_ps_reg_10 ( .d(N483), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_capture_ir) );
  e05fyn003an2n01x5 state_ps_reg_12 ( .d(N485), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_12_0) );
  e05fyn003an2n01x5 state_ps_reg_14 ( .d(N487), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_14_0) );
  e05fyn003an2n01x5 state_ps_reg_7 ( .d(N480), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n4) );
  e05fyn003an2n01x5 state_ps_reg_5 ( .d(N478), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n3) );
  e05fyn003an2n01x5 state_ps_reg_8 ( .d(N481), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n5) );
  e05fyn003an2n01x5 state_ps_reg_2 ( .d(N475), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_2_0) );
  e05fyn003an2n01x5 state_ps_reg_1 ( .d(N474), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n2) );
  e05fyn003an2n01x5 state_ps_reg_9 ( .d(N482), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_9_0) );
  e05fyn003an2n01x5 state_ps_reg_3 ( .d(N476), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_capture_dr) );
  e05fyn003an2n01x5 state_ps_reg_13 ( .d(N486), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_13_0) );
  e05fyn00can1d02x5 state_ps_reg_0 ( .d(N473), .clk(ftap_tck), .psb(
        powergood_rst_trst_b), .o(stap_fsm_tlrs) );
  e05fyn003an2n01x5 state_ps_reg_4 ( .d(N477), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_shift_dr) );
  e05fyn003an2n01x5 state_ps_reg_11 ( .d(N484), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_shift_ir) );
  e05fyn003an2n01x5 state_ps_reg_15 ( .d(N488), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_update_ir) );
  e05nand02an1n01x5 syn_inc_3 ( .a(state_ps_2_0), .b(n72), .o1(n60) );
  e05nor004an1n01x5 syn_inc_4 ( .a(n5), .b(stap_fsm_capture_dr), .c(n2), .d(
        n20), .o1(n72) );
  e05nand02an1n01x5 syn_inc_5 ( .a(n15), .b(n8), .o1(n20) );
  e05nand02an1n01x5 syn_inc_6 ( .a(stap_fsm_shift_dr), .b(n73), .o1(n33) );
  e05nor003an1n01x5 syn_inc_7 ( .a(n3), .b(n4), .c(n32), .o1(n73) );
  e05nand02an1n01x5 syn_inc_8 ( .a(n15), .b(n16), .o1(n32) );
endmodule


module stap_irreg ( stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir, 
        stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b, 
        stap_irreg_ireg, stap_irreg_ireg_nxt, stap_irreg_serial_out, 
        stap_irreg_shift_reg );
  output [7:0] stap_irreg_ireg;
  output [7:0] stap_irreg_ireg_nxt;
  output [7:0] stap_irreg_shift_reg;
  input stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir,
         stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b;
  output stap_irreg_serial_out;
  wire   n1, n2, n3, n4, n5, n6, n7, N10, n8, n9, n100, n11, n12, n13, n14,
         n15, n16, n17, n18, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n45, n19, n37, n41;

  e05orn002an1n01x5 syn_4 ( .a(stap_fsm_tlrs), .b(stap_irreg_ireg_nxt[3]), .o(
        n22) );
  e05orn002an1n01x5 syn_3 ( .a(stap_fsm_tlrs), .b(stap_irreg_ireg_nxt[2]), .o(
        n21) );
  e05nand22an1n02x5 syn_19 ( .a(n12), .b(n8), .o1(n11) );
  e05nonb02an1n01x7 syn_9 ( .a(stap_irreg_ireg_nxt[6]), .b(stap_fsm_tlrs), 
        .out0(n27) );
  e05nonb02an1n01x7 syn_6 ( .a(stap_irreg_ireg_nxt[1]), .b(stap_fsm_tlrs), 
        .out0(n24) );
  e05nonb02an1n01x7 syn_7 ( .a(stap_irreg_ireg_nxt[4]), .b(stap_fsm_tlrs), 
        .out0(n25) );
  e05nonb02an1n01x7 syn_8 ( .a(stap_irreg_ireg_nxt[5]), .b(stap_fsm_tlrs), 
        .out0(n26) );
  e05nonb02an1n01x7 syn_5 ( .a(stap_irreg_ireg_nxt[0]), .b(stap_fsm_tlrs), 
        .out0(n23) );
  e05nonb02an1n01x7 syn_10 ( .a(stap_irreg_ireg_nxt[7]), .b(stap_fsm_tlrs), 
        .out0(n28) );
  e05and002an1n01x5 syn_22 ( .a(n45), .b(n12), .o(n36) );
  e05nand22an1n02x5 syn_21 ( .a(stap_fsm_shift_ir), .b(n12), .o1(n100) );
  e05obai22an2n01x5 syn_18 ( .a(n1), .b(n100), .c(n18), .d(n11), .out0(n35) );
  e05oai022an2n02x3 syn_16 ( .a(n17), .b(n100), .c(n16), .d(n11), .o1(n33) );
  e05oai022an2n02x3 syn_17 ( .a(n18), .b(n100), .c(n17), .d(n11), .o1(n34) );
  e05oai022an2n02x3 syn_14 ( .a(n15), .b(n100), .c(n14), .d(n11), .o1(n31) );
  e05oai022an2n02x3 syn_15 ( .a(n16), .b(n100), .c(n15), .d(n11), .o1(n32) );
  e05oai022an2n02x3 syn_13 ( .a(n14), .b(n100), .c(n13), .d(n11), .o1(n30) );
  e05aoi012an2n01x5 syn_12 ( .b(stap_irreg_serial_out), .c(n8), .a(N10), .o1(
        n9) );
  e05oai012an2n02x3 syn_11 ( .b(n13), .c(n8), .a(n9), .o1(n29) );
  e05nor002an2n01x5 syn_20 ( .a(stap_fsm_tlrs), .b(stap_fsm_capture_ir), .o1(
        n12) );
  e05inv020an2n02x5 syn_23 ( .a(n12), .o1(N10) );
  e05inv020an2n02x5 syn_24 ( .a(stap_fsm_shift_ir), .o1(n8) );
  e05mtni22an2n01x5 syn_25 ( .b(n1), .a(ftap_tdi), .sa(stap_fsm_shift_ir), .o(
        n45) );
  e05inv020an2n02x5 syn_26 ( .a(n7), .o1(n13) );
  e05aboi22an1n01x5 syn_28 ( .c(stap_fsm_update_ir), .d(n13), .a(
        stap_irreg_ireg[1]), .b(n41), .out0(stap_irreg_ireg_nxt[1]) );
  e05inv020an2n02x5 syn_29 ( .a(n6), .o1(n14) );
  e05aboi22an1n01x5 syn_30 ( .c(stap_fsm_update_ir), .d(n14), .a(
        stap_irreg_ireg[2]), .b(n41), .out0(stap_irreg_ireg_nxt[2]) );
  e05oai022an2n02x3 syn_31 ( .a(n41), .b(stap_irreg_serial_out), .c(
        stap_irreg_ireg[0]), .d(stap_fsm_update_ir), .o1(n19) );
  e05inv020an2n02x5 syn_32 ( .a(n19), .o1(stap_irreg_ireg_nxt[0]) );
  e05oai022an2n02x3 syn_33 ( .a(n41), .b(n1), .c(stap_irreg_ireg[7]), .d(
        stap_fsm_update_ir), .o1(n37) );
  e05inv020an2n02x5 syn_34 ( .a(n37), .o1(stap_irreg_ireg_nxt[7]) );
  e05inv020an2n02x5 syn_35 ( .a(n2), .o1(n18) );
  e05aboi22an1n01x5 syn_36 ( .c(stap_fsm_update_ir), .d(n18), .a(
        stap_irreg_ireg[6]), .b(n41), .out0(stap_irreg_ireg_nxt[6]) );
  e05inv020an2n02x5 syn_37 ( .a(n3), .o1(n17) );
  e05aboi22an1n01x5 syn_38 ( .c(stap_fsm_update_ir), .d(n17), .a(
        stap_irreg_ireg[5]), .b(n41), .out0(stap_irreg_ireg_nxt[5]) );
  e05inv020an2n02x5 syn_39 ( .a(n5), .o1(n15) );
  e05aboi22an1n01x5 syn_40 ( .c(stap_fsm_update_ir), .d(n15), .a(
        stap_irreg_ireg[3]), .b(n41), .out0(stap_irreg_ireg_nxt[3]) );
  e05inv020an2n02x5 syn_41 ( .a(n4), .o1(n16) );
  e05aboi22an1n01x5 syn_42 ( .c(stap_fsm_update_ir), .d(n16), .a(
        stap_irreg_ireg[4]), .b(n41), .out0(stap_irreg_ireg_nxt[4]) );
  e05inv020an2n02x5 syn_27 ( .a(stap_fsm_update_ir), .o1(n41) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_2 ( .d(n21), .clkb(ftap_tck), .rb(1'b1), .psb(powergood_rst_trst_b), .o(stap_irreg_ireg[2]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_3 ( .d(n22), .clkb(ftap_tck), .rb(1'b1), .psb(powergood_rst_trst_b), .o(stap_irreg_ireg[3]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_0 ( .d(n23), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[0]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_1 ( .d(n24), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[1]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_4 ( .d(n25), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[4]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_5 ( .d(n26), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[5]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_6 ( .d(n27), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[6]) );
  e05fyn08fan2d01x5 stap_irreg_ireg_reg_7 ( .d(n28), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[7]) );
  e05fyn00can1d01x5 shift_reg_reg_0 ( .d(n29), .clk(ftap_tck), .psb(
        powergood_rst_trst_b), .o(stap_irreg_serial_out) );
  e05fyn003an2n01x5 shift_reg_reg_1 ( .d(n30), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n7) );
  e05fyn003an2n01x5 shift_reg_reg_3 ( .d(n32), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n5) );
  e05fyn003an2n01x5 shift_reg_reg_2 ( .d(n31), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n6) );
  e05fyn003an2n01x5 shift_reg_reg_4 ( .d(n33), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n4) );
  e05fyn003an2n01x5 shift_reg_reg_7 ( .d(n36), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n1) );
  e05fyn003an2n01x5 shift_reg_reg_5 ( .d(n34), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n3) );
  e05fyn003an2n01x5 shift_reg_reg_6 ( .d(n35), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n2) );
endmodule


module stap_decoder ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n4, n5, n6;

  e05nor003an2n01x5 syn_2 ( .a(feature_green_en), .b(feature_orange_en), .c(
        feature_red_en), .o1(n6) );
  e05nand24an2n02x5 syn_3 ( .a(stap_irreg_ireg[4]), .b(stap_irreg_ireg[3]), 
        .c(stap_irreg_ireg[5]), .d(stap_irreg_ireg[6]), .o1(n5) );
  e05nand24an2n02x5 syn_4 ( .a(stap_irreg_ireg[7]), .b(stap_irreg_ireg[0]), 
        .c(stap_irreg_ireg[2]), .d(stap_irreg_ireg[1]), .o1(n4) );
  e05nor003an2n01x5 syn_5 ( .a(n6), .b(n5), .c(n4), .o1(decoder_drselect) );
endmodule


module stap_decoder_0 ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n4, n5, n6;

  e05nor003an2n01x5 syn_2 ( .a(feature_green_en), .b(feature_orange_en), .c(
        feature_red_en), .o1(n6) );
  e05nor044an2n01x3 syn_3 ( .a(stap_irreg_ireg[7]), .b(stap_irreg_ireg[4]), 
        .c(stap_irreg_ireg[6]), .d(stap_irreg_ireg[5]), .o1(n4) );
  e05nand23an1n02x5 syn_4 ( .a(stap_irreg_ireg[3]), .b(stap_irreg_ireg[2]), 
        .c(n4), .o1(n5) );
  e05nor004an1n02x5 syn_5 ( .a(n6), .b(stap_irreg_ireg[0]), .c(
        stap_irreg_ireg[1]), .d(n5), .o1(decoder_drselect) );
endmodule


module stap_irdecoder ( powergood_rst_trst_b, stap_irreg_ireg, 
        stap_irreg_ireg_nxt, ftap_tck, feature_green_en, feature_orange_en, 
        feature_red_en, stap_isol_en_b, stap_irdecoder_drselect, 
        tap_swcomp_active, stap_and_all_bits_irreg );
  input [7:0] stap_irreg_ireg;
  input [7:0] stap_irreg_ireg_nxt;
  output [1:0] stap_irdecoder_drselect;
  input powergood_rst_trst_b, ftap_tck, feature_green_en, feature_orange_en,
         feature_red_en, stap_isol_en_b;
  output tap_swcomp_active, stap_and_all_bits_irreg;
  wire   decoder_drselect_1_0, decoder_drselect_0_0, N3, n6, n7, n1, n2, n30,
         n4;

  stap_decoder generate_decoder_0_i_stap_decoder ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect_0_0), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  stap_decoder_0 generate_decoder_1_i_stap_decoder ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect_1_0), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  e05orn002an1n01x5 syn_3 ( .a(N3), .b(decoder_drselect_0_0), .o(n6) );
  e05nonb02an1n01x7 syn_4 ( .a(decoder_drselect_1_0), .b(N3), .out0(n7) );
  e05nand24an2n02x5 syn_5 ( .a(stap_irreg_ireg_nxt[3]), .b(
        stap_irreg_ireg_nxt[2]), .c(stap_irreg_ireg_nxt[1]), .d(
        stap_irreg_ireg_nxt[0]), .o1(n2) );
  e05nand24an2n02x5 syn_6 ( .a(stap_irreg_ireg_nxt[7]), .b(
        stap_irreg_ireg_nxt[6]), .c(stap_irreg_ireg_nxt[5]), .d(
        stap_irreg_ireg_nxt[4]), .o1(n1) );
  e05oai022an2n02x3 syn_7 ( .a(decoder_drselect_0_0), .b(decoder_drselect_1_0), 
        .c(n2), .d(n1), .o1(N3) );
  e05nand24an2n02x5 syn_8 ( .a(stap_irreg_ireg[2]), .b(stap_irreg_ireg[3]), 
        .c(stap_irreg_ireg[0]), .d(stap_irreg_ireg[1]), .o1(n4) );
  e05nand24an2n02x5 syn_9 ( .a(stap_irreg_ireg[6]), .b(stap_irreg_ireg[7]), 
        .c(stap_irreg_ireg[4]), .d(stap_irreg_ireg[5]), .o1(n30) );
  e05nor002an2n01x5 syn_10 ( .a(n4), .b(n30), .o1(stap_and_all_bits_irreg) );
  e05fyn08fan2d01x5 stap_irdecoder_drselect_reg_0 ( .d(n6), .clkb(ftap_tck), 
        .rb(powergood_rst_trst_b), .psb(1'b1), .o(stap_irdecoder_drselect[0])
         );
  e05fyn08fan2d01x5 stap_irdecoder_drselect_reg_1 ( .d(n7), .clkb(ftap_tck), 
        .rb(1'b1), .psb(powergood_rst_trst_b), .o(stap_irdecoder_drselect[1])
         );
endmodule


module stap_drreg ( stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, 
        fdfx_powergood, powergood_rst_trst_b, stap_fsm_capture_dr, 
        stap_fsm_shift_dr, stap_fsm_update_dr, stap_selectwir, ftap_slvidcode, 
        stap_irdecoder_drselect, tdr_data_in, tdr_data_out, 
        sftapnw_ftap_secsel, tapc_select, feature_green_en, feature_orange_en, 
        feature_red_en, tapc_wtap_sel, tapc_remove, stap_drreg_tdo, 
        swcompctrl_tdo, swcompstat_tdo, stap_and_all_bits_irreg, rtdr_tap_tdo, 
        tap_rtdr_tdi, tap_rtdr_capture, tap_rtdr_shift, tap_rtdr_update, 
        tap_rtdr_irdec, tap_rtdr_selectir, tap_rtdr_powergood, tap_rtdr_rti, 
        tap_rtdr_prog_rst_b, suppress_update_capture_reg, stap_fsm_rti );
  input [31:0] ftap_slvidcode;
  input [1:0] stap_irdecoder_drselect;
  input [0:0] tdr_data_in;
  output [0:0] tdr_data_out;
  output [0:0] sftapnw_ftap_secsel;
  output [1:0] tapc_select;
  output [0:0] tapc_wtap_sel;
  output [1:0] stap_drreg_tdo;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  output [1:0] suppress_update_capture_reg;
  input stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, fdfx_powergood,
         powergood_rst_trst_b, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr, stap_selectwir, feature_green_en,
         feature_orange_en, feature_red_en, swcompctrl_tdo, swcompstat_tdo,
         stap_and_all_bits_irreg, stap_fsm_rti;
  output tapc_remove, tap_rtdr_selectir, tap_rtdr_powergood, tap_rtdr_rti;
  wire   bypass_reg, reset_pulse0, reset_pulse1, slvidcode_reg_31_0,
         slvidcode_reg_30_0, slvidcode_reg_29_0, slvidcode_reg_28_0,
         slvidcode_reg_27_0, slvidcode_reg_26_0, slvidcode_reg_25_0,
         slvidcode_reg_24_0, slvidcode_reg_23_0, slvidcode_reg_22_0,
         slvidcode_reg_21_0, slvidcode_reg_20_0, slvidcode_reg_19_0,
         slvidcode_reg_18_0, slvidcode_reg_17_0, slvidcode_reg_16_0,
         slvidcode_reg_15_0, slvidcode_reg_14_0, slvidcode_reg_13_0,
         slvidcode_reg_12_0, slvidcode_reg_11_0, slvidcode_reg_10_0,
         slvidcode_reg_9_0, slvidcode_reg_8_0, slvidcode_reg_7_0,
         slvidcode_reg_6_0, slvidcode_reg_5_0, slvidcode_reg_4_0,
         slvidcode_reg_3_0, slvidcode_reg_2_0, slvidcode_reg_1_0, N65, N66, n1,
         n3, n41, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54,
         n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n650, n660, n67,
         n68, n69, n70, n71, n72, n73, n74, n75, n2, n5, n6, n7, n8, n9, n10,
         n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25,
         n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n38, n39, n40,
         n77, n81, n86, n87;

  e05nonb02an1n01x7 syn_4 ( .a(n75), .b(N65), .out0(n43) );
  e05nanb03an1n02x3 syn_3 ( .a(N66), .b(n1), .c(n3), .out0(n41) );
  e05aob012an1n01x5 syn_9 ( .b(stap_fsm_capture_dr), .c(
        stap_irdecoder_drselect[0]), .a(n86), .o(N65) );
  e05nand22an1n02x5 syn_10 ( .a(stap_fsm_shift_dr), .b(
        stap_irdecoder_drselect[0]), .o1(n2) );
  e05mtni22an2n01x5 syn_11 ( .b(ftap_tdi), .a(bypass_reg), .sa(n2), .o(n75) );
  e05nand22an1n02x5 syn_12 ( .a(stap_irdecoder_drselect[1]), .b(
        stap_fsm_shift_dr), .o1(n6) );
  e05aboi22an1n01x5 syn_13 ( .c(stap_drreg_tdo[1]), .d(n6), .a(n6), .b(
        slvidcode_reg_1_0), .out0(n1) );
  e05inv020an2n02x5 syn_14 ( .a(reset_pulse0), .o1(n5) );
  e05oai012an2n02x3 syn_15 ( .b(reset_pulse1), .c(n5), .a(n86), .o1(N66) );
  e05nand22an1n02x5 syn_16 ( .a(stap_irdecoder_drselect[1]), .b(
        stap_fsm_capture_dr), .o1(n3) );
  e05aoi222an1n01x5 syn_23 ( .a(n13), .b(ftap_slvidcode[1]), .c(n16), .d(
        slvidcode_reg_1_0), .e(slvidcode_reg_2_0), .f(n14), .o1(n7) );
  e05inv020an2n02x5 syn_24 ( .a(n7), .o1(n44) );
  e05aoi222an1n01x5 syn_25 ( .a(n13), .b(ftap_slvidcode[30]), .c(n14), .d(
        slvidcode_reg_31_0), .e(slvidcode_reg_30_0), .f(n16), .o1(n8) );
  e05inv020an2n02x5 syn_26 ( .a(n8), .o1(n46) );
  e05aoi222an1n01x5 syn_27 ( .a(n13), .b(ftap_slvidcode[31]), .c(n14), .d(
        ftap_tdi), .e(slvidcode_reg_31_0), .f(n16), .o1(n9) );
  e05inv020an2n02x5 syn_28 ( .a(n9), .o1(n45) );
  e05aoi222an1n01x5 syn_29 ( .a(n13), .b(ftap_slvidcode[29]), .c(n14), .d(
        slvidcode_reg_30_0), .e(slvidcode_reg_29_0), .f(n16), .o1(n10) );
  e05inv020an2n02x5 syn_30 ( .a(n10), .o1(n47) );
  e05aoi222an1n01x5 syn_31 ( .a(n13), .b(ftap_slvidcode[28]), .c(n14), .d(
        slvidcode_reg_29_0), .e(slvidcode_reg_28_0), .f(n16), .o1(n12) );
  e05inv020an2n02x5 syn_32 ( .a(n12), .o1(n48) );
  e05aoi222an1n01x5 syn_36 ( .a(n13), .b(ftap_slvidcode[12]), .c(n14), .d(
        slvidcode_reg_13_0), .e(slvidcode_reg_12_0), .f(n16), .o1(n15) );
  e05inv020an2n02x5 syn_37 ( .a(n15), .o1(n64) );
  e05aoi222an1n01x5 syn_39 ( .a(n13), .b(ftap_slvidcode[22]), .c(n14), .d(
        slvidcode_reg_23_0), .e(slvidcode_reg_22_0), .f(n16), .o1(n17) );
  e05inv020an2n02x5 syn_40 ( .a(n17), .o1(n54) );
  e05aoi222an1n01x5 syn_41 ( .a(n13), .b(ftap_slvidcode[6]), .c(n14), .d(
        slvidcode_reg_7_0), .e(slvidcode_reg_6_0), .f(n16), .o1(n18) );
  e05inv020an2n02x5 syn_42 ( .a(n18), .o1(n70) );
  e05aoi222an1n01x5 syn_43 ( .a(n13), .b(ftap_slvidcode[10]), .c(n14), .d(
        slvidcode_reg_11_0), .e(slvidcode_reg_10_0), .f(n16), .o1(n19) );
  e05inv020an2n02x5 syn_44 ( .a(n19), .o1(n660) );
  e05aoi222an1n01x5 syn_45 ( .a(n13), .b(ftap_slvidcode[9]), .c(n14), .d(
        slvidcode_reg_10_0), .e(slvidcode_reg_9_0), .f(n16), .o1(n20) );
  e05inv020an2n02x5 syn_46 ( .a(n20), .o1(n67) );
  e05aoi222an1n01x5 syn_47 ( .a(n13), .b(ftap_slvidcode[24]), .c(n14), .d(
        slvidcode_reg_25_0), .e(slvidcode_reg_24_0), .f(n16), .o1(n21) );
  e05inv020an2n02x5 syn_48 ( .a(n21), .o1(n52) );
  e05aoi222an1n01x5 syn_49 ( .a(n13), .b(ftap_slvidcode[8]), .c(n14), .d(
        slvidcode_reg_9_0), .e(slvidcode_reg_8_0), .f(n16), .o1(n22) );
  e05inv020an2n02x5 syn_50 ( .a(n22), .o1(n68) );
  e05aoi222an1n01x5 syn_51 ( .a(n13), .b(ftap_slvidcode[20]), .c(n14), .d(
        slvidcode_reg_21_0), .e(slvidcode_reg_20_0), .f(n16), .o1(n23) );
  e05inv020an2n02x5 syn_52 ( .a(n23), .o1(n56) );
  e05aoi222an1n01x5 syn_53 ( .a(n13), .b(ftap_slvidcode[11]), .c(n14), .d(
        slvidcode_reg_12_0), .e(slvidcode_reg_11_0), .f(n16), .o1(n24) );
  e05inv020an2n02x5 syn_54 ( .a(n24), .o1(n650) );
  e05aoi222an1n01x5 syn_55 ( .a(n13), .b(ftap_slvidcode[5]), .c(n14), .d(
        slvidcode_reg_6_0), .e(slvidcode_reg_5_0), .f(n16), .o1(n25) );
  e05inv020an2n02x5 syn_56 ( .a(n25), .o1(n71) );
  e05aoi222an1n01x5 syn_57 ( .a(n13), .b(ftap_slvidcode[4]), .c(n14), .d(
        slvidcode_reg_5_0), .e(slvidcode_reg_4_0), .f(n16), .o1(n26) );
  e05inv020an2n02x5 syn_58 ( .a(n26), .o1(n72) );
  e05aoi222an1n01x5 syn_59 ( .a(n13), .b(ftap_slvidcode[25]), .c(n14), .d(
        slvidcode_reg_26_0), .e(slvidcode_reg_25_0), .f(n16), .o1(n27) );
  e05inv020an2n02x5 syn_60 ( .a(n27), .o1(n51) );
  e05aoi222an1n01x5 syn_61 ( .a(n13), .b(ftap_slvidcode[7]), .c(n14), .d(
        slvidcode_reg_8_0), .e(slvidcode_reg_7_0), .f(n16), .o1(n28) );
  e05inv020an2n02x5 syn_62 ( .a(n28), .o1(n69) );
  e05aoi222an1n01x5 syn_63 ( .a(n13), .b(ftap_slvidcode[26]), .c(n14), .d(
        slvidcode_reg_27_0), .e(slvidcode_reg_26_0), .f(n16), .o1(n29) );
  e05inv020an2n02x5 syn_64 ( .a(n29), .o1(n50) );
  e05aoi222an1n01x5 syn_65 ( .a(n13), .b(ftap_slvidcode[16]), .c(n14), .d(
        slvidcode_reg_17_0), .e(slvidcode_reg_16_0), .f(n16), .o1(n30) );
  e05inv020an2n02x5 syn_66 ( .a(n30), .o1(n60) );
  e05aoi222an1n01x5 syn_67 ( .a(n13), .b(ftap_slvidcode[23]), .c(n14), .d(
        slvidcode_reg_24_0), .e(slvidcode_reg_23_0), .f(n16), .o1(n31) );
  e05inv020an2n02x5 syn_68 ( .a(n31), .o1(n53) );
  e05aoi222an1n01x5 syn_69 ( .a(n13), .b(ftap_slvidcode[21]), .c(n14), .d(
        slvidcode_reg_22_0), .e(slvidcode_reg_21_0), .f(n16), .o1(n32) );
  e05inv020an2n02x5 syn_70 ( .a(n32), .o1(n55) );
  e05aoi222an1n01x5 syn_71 ( .a(n13), .b(ftap_slvidcode[19]), .c(n14), .d(
        slvidcode_reg_20_0), .e(slvidcode_reg_19_0), .f(n16), .o1(n33) );
  e05inv020an2n02x5 syn_72 ( .a(n33), .o1(n57) );
  e05aoi222an1n01x5 syn_73 ( .a(n13), .b(ftap_slvidcode[27]), .c(n14), .d(
        slvidcode_reg_28_0), .e(slvidcode_reg_27_0), .f(n16), .o1(n34) );
  e05inv020an2n02x5 syn_74 ( .a(n34), .o1(n49) );
  e05aoi222an1n01x5 syn_75 ( .a(n13), .b(ftap_slvidcode[15]), .c(n14), .d(
        slvidcode_reg_16_0), .e(slvidcode_reg_15_0), .f(n16), .o1(n35) );
  e05inv020an2n02x5 syn_76 ( .a(n35), .o1(n61) );
  e05aoi222an1n01x5 syn_77 ( .a(n13), .b(ftap_slvidcode[17]), .c(n14), .d(
        slvidcode_reg_18_0), .e(slvidcode_reg_17_0), .f(n16), .o1(n36) );
  e05inv020an2n02x5 syn_78 ( .a(n36), .o1(n59) );
  e05aoi222an1n01x5 syn_79 ( .a(n13), .b(ftap_slvidcode[18]), .c(n14), .d(
        slvidcode_reg_19_0), .e(slvidcode_reg_18_0), .f(n16), .o1(n38) );
  e05inv020an2n02x5 syn_80 ( .a(n38), .o1(n58) );
  e05aoi222an1n01x5 syn_81 ( .a(n13), .b(ftap_slvidcode[3]), .c(n14), .d(
        slvidcode_reg_4_0), .e(slvidcode_reg_3_0), .f(n16), .o1(n39) );
  e05inv020an2n02x5 syn_82 ( .a(n39), .o1(n73) );
  e05aoi222an1n01x5 syn_83 ( .a(n13), .b(ftap_slvidcode[14]), .c(n14), .d(
        slvidcode_reg_15_0), .e(slvidcode_reg_14_0), .f(n16), .o1(n40) );
  e05inv020an2n02x5 syn_84 ( .a(n40), .o1(n62) );
  e05aoi222an1n01x5 syn_85 ( .a(n13), .b(ftap_slvidcode[13]), .c(n14), .d(
        slvidcode_reg_14_0), .e(slvidcode_reg_13_0), .f(n16), .o1(n77) );
  e05inv020an2n02x5 syn_86 ( .a(n77), .o1(n63) );
  e05aoi222an1n01x5 syn_87 ( .a(n13), .b(ftap_slvidcode[2]), .c(n14), .d(
        slvidcode_reg_3_0), .e(slvidcode_reg_2_0), .f(n16), .o1(n81) );
  e05inv020an2n02x5 syn_88 ( .a(n81), .o1(n74) );
  e05oa0012an1n01x5 syn_89 ( .b(stap_irdecoder_drselect[0]), .c(
        stap_and_all_bits_irreg), .a(bypass_reg), .o(stap_drreg_tdo[0]) );
  e05nor002an2d05x5 syn_19 ( .a(n13), .b(n6), .o1(n14) );
  e05inv020an2n02x5 syn_5 ( .a(stap_fsm_tlrs), .o1(n86) );
  e05fyn003an2n01x5 slvidcode_reg_reg_21 ( .d(n55), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_21_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_12 ( .d(n64), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_12_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_9 ( .d(n67), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_9_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_29 ( .d(n47), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_29_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_22 ( .d(n54), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_22_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_17 ( .d(n59), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_17_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_20 ( .d(n56), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_20_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_11 ( .d(n650), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_11_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_19 ( .d(n57), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_19_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_25 ( .d(n51), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_25_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_28 ( .d(n48), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_28_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_8 ( .d(n68), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_8_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_24 ( .d(n52), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_24_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_10 ( .d(n660), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_10_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_6 ( .d(n70), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_6_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_26 ( .d(n50), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_26_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_1 ( .d(n44), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_1_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_30 ( .d(n46), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_30_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_23 ( .d(n53), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_23_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_18 ( .d(n58), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_18_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_16 ( .d(n60), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_16_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_2 ( .d(n74), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_2_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_27 ( .d(n49), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_27_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_13 ( .d(n63), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_13_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_7 ( .d(n69), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_7_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_5 ( .d(n71), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_5_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_3 ( .d(n73), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_3_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_31 ( .d(n45), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_31_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_4 ( .d(n72), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_4_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_15 ( .d(n61), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_15_0) );
  e05fyn003an2n01x5 slvidcode_reg_reg_14 ( .d(n62), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_14_0) );
  e05fyn003an2n01x5 reset_pulse1_reg ( .d(reset_pulse0), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(reset_pulse1) );
  e05fyn003an2n01x5 reset_pulse0_reg ( .d(1'b1), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(reset_pulse0) );
  e05fyn00can1d01x5 slvidcode_reg_reg_0 ( .d(n41), .clk(ftap_tck), .psb(
        powergood_rst_trst_b), .o(stap_drreg_tdo[1]) );
  e05fyn003an2n01x5 bypass_reg_reg ( .d(n43), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(bypass_reg) );
  e05nor002an2d05x5 syn_21 ( .a(n14), .b(n13), .o1(n16) );
  e05inv000an1n01x5 syn_inc_3 ( .a(n3), .o1(n87) );
  e05orn002an2n04x5 syn_inc_4 ( .a(N66), .b(n87), .o(n13) );
endmodule


module stap_tdomux ( stap_drreg_tdo, stap_fsm_shift_dr, stap_fsm_shift_ir, 
        stap_irdecoder_drselect, stap_irreg_serial_out, stap_fsm_tlrs, 
        ftap_tck, powergood_rst_trst_b, swcomp_stap_post_tdo, 
        tap_swcomp_active, stap_mux_tdo, tdo_dr, stap_tdomux_tdoen );
  input [1:0] stap_drreg_tdo;
  input [1:0] stap_irdecoder_drselect;
  input stap_fsm_shift_dr, stap_fsm_shift_ir, stap_irreg_serial_out,
         stap_fsm_tlrs, ftap_tck, powergood_rst_trst_b, swcomp_stap_post_tdo,
         tap_swcomp_active;
  output stap_mux_tdo, tdo_dr, stap_tdomux_tdoen;
  wire   stap_mux_tdo_int, stap_mux_tdo_preflop_int, n3, n6, n7, n8, n4, n9,
         n10;

  e05nonb02an1n01x7 syn_4 ( .a(n8), .b(stap_fsm_tlrs), .out0(n7) );
  e05nor002an2n01x5 syn_3 ( .a(n3), .b(stap_fsm_tlrs), .o1(n6) );
  e05nor002an2n01x5 syn_5 ( .a(stap_fsm_shift_ir), .b(stap_fsm_shift_dr), .o1(
        n3) );
  e05inv020an2n02x5 syn_6 ( .a(stap_mux_tdo_int), .o1(n9) );
  e05aoi022an1n02x3 syn_7 ( .a(stap_drreg_tdo[0]), .b(
        stap_irdecoder_drselect[0]), .c(stap_drreg_tdo[1]), .d(
        stap_irdecoder_drselect[1]), .o1(n4) );
  e05mtnb22an2n01x5 syn_8 ( .b(n4), .a(stap_irreg_serial_out), .sa(
        stap_fsm_shift_ir), .out0(n10) );
  e05aboi22an1n01x5 syn_9 ( .c(n9), .d(n3), .a(n3), .b(n10), .out0(n8) );
  e05nonb03an2n02x5 syn_10 ( .a(powergood_rst_trst_b), .b(stap_fsm_tlrs), .c(
        n10), .out0(stap_mux_tdo_preflop_int) );
  e05fyn08fan2d01x5 stap_tdomux_tdoen_reg ( .d(n6), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_tdomux_tdoen) );
  e05fyn08fan2d01x5 stap_mux_tdo_int_reg ( .d(n7), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_mux_tdo_int) );
  e05mtni22an2n01x5 i_stap_ctech_lib_mux_2to1_tdo_posedge_i_ctech_lib_mux_2to1_ctech_lib_mux_2to1_dcszo ( 
        .b(stap_mux_tdo_int), .a(stap_mux_tdo_preflop_int), .sa(1'b0), .o(
        stap_mux_tdo) );
endmodule


module stap_glue ( ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi, 
        stap_tdomux_tdoen, sntapnw_atap_tdo_en, pre_tdo, powergood_rst_trst_b, 
        atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms, 
        ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, atapsslv_tdoen, 
        sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b, 
        sntapnw_ftap_tdi2, sntapnw_atap_tdo2, sntapnw_atap_tdo2_en, 
        sn_fwtap_wrck, stap_mux_tdo, tapc_select, tapc_wtap_sel, tapc_remove, 
        stap_wtapnw_tdo );
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [1:0] tapc_select;
  input [0:0] tapc_wtap_sel;
  input ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi,
         stap_tdomux_tdoen, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms,
         ftapsslv_trst_b, ftapsslv_tdi, sntapnw_atap_tdo2, stap_mux_tdo,
         tapc_remove, stap_wtapnw_tdo;
  output pre_tdo, powergood_rst_trst_b, atap_tdoen, sntapnw_ftap_tck,
         sntapnw_ftap_tms, sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo,
         atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2,
         sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sn_fwtap_wrck;


  e05cbf000an1d02x5 i_stap_ctech_lib_clk_buf_tck2_i_ctech_lib_clk_buf_ctech_lib_clk_buf_dcszo ( 
        .clk(ftapsslv_tck), .clkout(sntapnw_ftap_tck2) );
  e05bfn001an1n01x5 syn_3 ( .a(stap_mux_tdo), .o(pre_tdo) );
  e05bfn001an1n01x5 syn_4 ( .a(stap_tdomux_tdoen), .o(atap_tdoen) );
  e05bfn001an1n01x5 syn_5 ( .a(ftapsslv_tms), .o(sntapnw_ftap_tms2) );
  e05bfn001an1n01x5 syn_6 ( .a(ftapsslv_trst_b), .o(sntapnw_ftap_trst2_b) );
  e05bfn001an1n01x5 syn_7 ( .a(ftapsslv_tdi), .o(sntapnw_ftap_tdi2) );
  e05bfn001an1n01x5 syn_8 ( .a(sntapnw_atap_tdo2), .o(atapsslv_tdo) );
  e05bfn001an1n01x5 syn_9 ( .a(sntapnw_atap_tdo2_en[0]), .o(atapsslv_tdoen) );
  e05and002an1n02x5 i_stap_ctech_lib_dq_i_ctech_lib_dq_ctech_lib_dq_dcszo ( 
        .a(ftap_trst_b), .b(fdfx_powergood), .o(powergood_rst_trst_b) );
endmodule


module stap_dfxsecure_plugin ( fdfx_powergood, fdfx_secure_policy, 
        fdfx_earlyboot_exit, fdfx_policy_update, dfxsecure_feature_en, 
        visa_all_dis, visa_customer_dis, sb_policy_ovr_value, 
        oem_secure_policy );
  input [3:0] fdfx_secure_policy;
  output [2:0] dfxsecure_feature_en;
  input [4:0] sb_policy_ovr_value;
  input [3:0] oem_secure_policy;
  input fdfx_powergood, fdfx_earlyboot_exit, fdfx_policy_update;
  output visa_all_dis, visa_customer_dis;
  wire   dfxsecure_feature_lch_3_0, dfxsecure_feature_lch_2_0,
         dfxsecure_feature_lch_1_0, dfxsecure_feature_lch_0_0, n6, n7, n8, n9,
         n10, n11, n12, n13, n14, n15, n16, n17;

  e05inv020an2n02x5 syn_3 ( .a(dfxsecure_feature_lch_0_0), .o1(n12) );
  e05inv020an2n02x5 syn_4 ( .a(fdfx_earlyboot_exit), .o1(n14) );
  e05nor003an2n01x5 syn_5 ( .a(dfxsecure_feature_lch_1_0), .b(n12), .c(n14), 
        .o1(n6) );
  e05nand22an1n02x5 syn_6 ( .a(dfxsecure_feature_lch_3_0), .b(n6), .o1(n8) );
  e05inv020an2n02x5 syn_7 ( .a(dfxsecure_feature_lch_1_0), .o1(n13) );
  e05nand22an1n02x5 syn_8 ( .a(dfxsecure_feature_lch_0_0), .b(n13), .o1(n11)
         );
  e05nor002an2n01x5 syn_9 ( .a(dfxsecure_feature_lch_0_0), .b(n13), .o1(n17)
         );
  e05aoai13an2n01x7 syn_10 ( .b(dfxsecure_feature_lch_2_0), .c(n11), .d(n17), 
        .a(fdfx_earlyboot_exit), .o1(n7) );
  e05oai022an2n02x3 syn_11 ( .a(n8), .b(dfxsecure_feature_lch_2_0), .c(
        dfxsecure_feature_lch_3_0), .d(n7), .o1(dfxsecure_feature_en[2]) );
  e05inv020an2n02x5 syn_12 ( .a(dfxsecure_feature_lch_2_0), .o1(n10) );
  e05aoai13an2n01x7 syn_13 ( .b(dfxsecure_feature_lch_1_0), .c(n10), .d(n12), 
        .a(dfxsecure_feature_lch_3_0), .o1(n9) );
  e05oaoi13an2n01x5 syn_14 ( .b(n11), .c(n10), .a(n9), .d(n14), .o1(
        dfxsecure_feature_en[1]) );
  e05nor002an2n01x5 syn_15 ( .a(n13), .b(n12), .o1(n15) );
  e05aoi013an1n01x5 syn_16 ( .b(dfxsecure_feature_lch_2_0), .c(
        dfxsecure_feature_lch_3_0), .d(n15), .a(n14), .o1(n16) );
  e05oai013an1n01x5 syn_17 ( .b(dfxsecure_feature_lch_2_0), .c(
        dfxsecure_feature_lch_3_0), .d(n17), .a(n16), .o1(
        dfxsecure_feature_en[0]) );
  e05lan00fan2n01x5 dfxsecure_feature_lch_reg_0 ( .clk(fdfx_policy_update), 
        .psb(1'b1), .d(fdfx_secure_policy[0]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_0_0) );
  e05lan00fan2n01x5 dfxsecure_feature_lch_reg_1 ( .clk(fdfx_policy_update), 
        .psb(1'b1), .d(fdfx_secure_policy[1]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_1_0) );
  e05lan00fan2n01x5 dfxsecure_feature_lch_reg_3 ( .clk(fdfx_policy_update), 
        .psb(1'b1), .d(fdfx_secure_policy[3]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_3_0) );
  e05lan00fan2n01x5 dfxsecure_feature_lch_reg_2 ( .clk(fdfx_policy_update), 
        .psb(1'b1), .d(fdfx_secure_policy[2]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_2_0) );
endmodule


module stap ( ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, ftap_slvidcode, 
        atap_tdo, atap_tdoen, fdfx_powergood, tdr_data_out, tdr_data_in, 
        fdfx_secure_policy, fdfx_earlyboot_exit, fdfx_policy_update, 
        sftapnw_ftap_secsel, sftapnw_ftap_enabletdo, sftapnw_ftap_enabletap, 
        sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, sntapnw_atap_tdo_en, ftapsslv_tck, 
        ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, 
        atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2, 
        sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sntapnw_atap_tdo2, 
        sntapnw_atap_tdo2_en, sn_fwtap_wrck, sn_fwtap_wrst_b, 
        sn_fwtap_capturewr, sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, 
        sn_fwtap_selectwir, sn_awtap_wso, sn_fwtap_wsi, stap_fbscan_tck, 
        stap_abscan_tdo, stap_fbscan_capturedr, stap_fbscan_shiftdr, 
        stap_fbscan_updatedr, stap_fbscan_updatedr_clk, stap_fbscan_runbist_en, 
        stap_fbscan_highz, stap_fbscan_extogen, stap_fbscan_intest_mode, 
        stap_fbscan_chainen, stap_fbscan_mode, stap_fbscan_extogsig_b, 
        stap_fsm_tlrs, ftap_pwrdomain_rst_b, stap_fbscan_d6init, 
        stap_fbscan_d6actestsig_b, stap_fbscan_d6select, rtdr_tap_tdo, 
        tap_rtdr_irdec, tap_rtdr_prog_rst_b, tap_rtdr_tdi, tap_rtdr_capture, 
        tap_rtdr_shift, tap_rtdr_update, tap_rtdr_tck, tap_rtdr_powergood, 
        tap_rtdr_selectir, tap_rtdr_rti, stap_isol_en_b );
  input [31:0] ftap_slvidcode;
  output [0:0] tdr_data_out;
  input [0:0] tdr_data_in;
  input [3:0] fdfx_secure_policy;
  output [0:0] sftapnw_ftap_secsel;
  output [0:0] sftapnw_ftap_enabletdo;
  output [0:0] sftapnw_ftap_enabletap;
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [0:0] sn_awtap_wso;
  output [0:0] sn_fwtap_wsi;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  input ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, fdfx_powergood,
         fdfx_earlyboot_exit, fdfx_policy_update, sntapnw_atap_tdo,
         ftapsslv_tck, ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi,
         sntapnw_atap_tdo2, stap_abscan_tdo, ftap_pwrdomain_rst_b,
         stap_isol_en_b;
  output atap_tdo, atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms,
         sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo, atapsslv_tdoen,
         sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b,
         sntapnw_ftap_tdi2, sn_fwtap_wrck, sn_fwtap_wrst_b, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_selectwir,
         stap_fbscan_tck, stap_fbscan_capturedr, stap_fbscan_shiftdr,
         stap_fbscan_updatedr, stap_fbscan_updatedr_clk,
         stap_fbscan_runbist_en, stap_fbscan_highz, stap_fbscan_extogen,
         stap_fbscan_intest_mode, stap_fbscan_chainen, stap_fbscan_mode,
         stap_fbscan_extogsig_b, stap_fsm_tlrs, stap_fbscan_d6init,
         stap_fbscan_d6actestsig_b, stap_fbscan_d6select, tap_rtdr_tck,
         tap_rtdr_powergood, tap_rtdr_selectir, tap_rtdr_rti;
  wire   powergood_rst_trst_b, stap_irreg_ireg_7_0, stap_irreg_ireg_6_0,
         stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0,
         stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0,
         stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_update_ir,
         stap_fsm_capture_dr, stap_fsm_shift_dr, stap_irreg_ireg_nxt_7_0,
         stap_irreg_ireg_nxt_6_0, stap_irreg_ireg_nxt_5_0,
         stap_irreg_ireg_nxt_4_0, stap_irreg_ireg_nxt_3_0,
         stap_irreg_ireg_nxt_2_0, stap_irreg_ireg_nxt_1_0,
         stap_irreg_ireg_nxt_0_0, stap_irreg_serial_out,
         stap_irdecoder_drselect_1_0, stap_irdecoder_drselect_0_0,
         stap_and_all_bits_irreg, dfxsecure_feature_en_2_0,
         dfxsecure_feature_en_1_0, dfxsecure_feature_en_0_0,
         stap_drreg_tdo_1_0, stap_drreg_tdo_0_0, stap_mux_tdo,
         stap_tdomux_tdoen, n52, n53, n54, n55, SYNOPSYS_UNCONNECTED_1,
         SYNOPSYS_UNCONNECTED_2, SYNOPSYS_UNCONNECTED_3,
         SYNOPSYS_UNCONNECTED_4, SYNOPSYS_UNCONNECTED_5,
         SYNOPSYS_UNCONNECTED_6, SYNOPSYS_UNCONNECTED_7,
         SYNOPSYS_UNCONNECTED_8, SYNOPSYS_UNCONNECTED_9,
         SYNOPSYS_UNCONNECTED_10, SYNOPSYS_UNCONNECTED_11,
         SYNOPSYS_UNCONNECTED_12, SYNOPSYS_UNCONNECTED_13,
         SYNOPSYS_UNCONNECTED_14, SYNOPSYS_UNCONNECTED_15,
         SYNOPSYS_UNCONNECTED_16, SYNOPSYS_UNCONNECTED_17,
         SYNOPSYS_UNCONNECTED_18, SYNOPSYS_UNCONNECTED_19,
         SYNOPSYS_UNCONNECTED_20, SYNOPSYS_UNCONNECTED_21,
         SYNOPSYS_UNCONNECTED_22, SYNOPSYS_UNCONNECTED_23,
         SYNOPSYS_UNCONNECTED_24, SYNOPSYS_UNCONNECTED_25,
         SYNOPSYS_UNCONNECTED_26, SYNOPSYS_UNCONNECTED_27,
         SYNOPSYS_UNCONNECTED_28, SYNOPSYS_UNCONNECTED_29,
         SYNOPSYS_UNCONNECTED_30, SYNOPSYS_UNCONNECTED_31,
         SYNOPSYS_UNCONNECTED_32, SYNOPSYS_UNCONNECTED_33,
         SYNOPSYS_UNCONNECTED_34, SYNOPSYS_UNCONNECTED_35,
         SYNOPSYS_UNCONNECTED_36, SYNOPSYS_UNCONNECTED_37,
         SYNOPSYS_UNCONNECTED_38, SYNOPSYS_UNCONNECTED_39,
         SYNOPSYS_UNCONNECTED_40, SYNOPSYS_UNCONNECTED_41,
         SYNOPSYS_UNCONNECTED_42, SYNOPSYS_UNCONNECTED_43,
         SYNOPSYS_UNCONNECTED_44, SYNOPSYS_UNCONNECTED_45,
         SYNOPSYS_UNCONNECTED_46;
  assign tap_rtdr_rti = 1'b0;
  assign tap_rtdr_selectir = 1'b0;
  assign tap_rtdr_powergood = 1'b1;
  assign tap_rtdr_update[0] = 1'b0;
  assign tap_rtdr_shift[0] = 1'b0;
  assign tap_rtdr_capture[0] = 1'b0;
  assign tap_rtdr_tdi[0] = 1'b1;
  assign tap_rtdr_prog_rst_b[0] = 1'b1;
  assign tap_rtdr_irdec[0] = 1'b0;
  assign stap_fbscan_d6select = 1'b0;
  assign stap_fbscan_d6actestsig_b = 1'b1;
  assign stap_fbscan_d6init = 1'b0;
  assign stap_fbscan_extogsig_b = 1'b1;
  assign stap_fbscan_mode = 1'b0;
  assign stap_fbscan_chainen = 1'b0;
  assign stap_fbscan_intest_mode = 1'b0;
  assign stap_fbscan_extogen = 1'b0;
  assign stap_fbscan_highz = 1'b0;
  assign stap_fbscan_runbist_en = 1'b0;
  assign stap_fbscan_updatedr_clk = 1'b0;
  assign stap_fbscan_updatedr = 1'b0;
  assign stap_fbscan_shiftdr = 1'b0;
  assign stap_fbscan_capturedr = 1'b0;
  assign stap_fbscan_tck = 1'b0;
  assign sn_fwtap_wsi[0] = 1'b1;
  assign sn_fwtap_selectwir = 1'b0;
  assign sn_fwtap_rti = 1'b0;
  assign sn_fwtap_updatewr = 1'b0;
  assign sn_fwtap_shiftwr = 1'b0;
  assign sn_fwtap_capturewr = 1'b0;
  assign sn_fwtap_wrst_b = 1'b1;
  assign sn_fwtap_wrck = 1'b0;
  assign sntapnw_ftap_tdi = 1'b0;
  assign sntapnw_ftap_trst_b = 1'b1;
  assign sntapnw_ftap_tms = 1'b1;
  assign sntapnw_ftap_tck = 1'b0;
  assign sftapnw_ftap_enabletap[0] = 1'b0;
  assign sftapnw_ftap_enabletdo[0] = 1'b0;
  assign sftapnw_ftap_secsel[0] = 1'b0;
  assign tdr_data_out[0] = 1'b0;

  stap_fsm i_stap_fsm ( .ftap_tms(ftap_tms), .ftap_tck(ftap_tck), 
        .powergood_rst_trst_b(n53), .suppress_update_capture_reg({1'b0, 1'b0}), 
        .stap_irreg_ireg({1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), 
        .tapc_remove(1'b0), .stap_fsm_tlrs(stap_fsm_tlrs), .stap_fsm_rti(
        SYNOPSYS_UNCONNECTED_1), .stap_fsm_e1dr(SYNOPSYS_UNCONNECTED_2), 
        .stap_fsm_e2dr(SYNOPSYS_UNCONNECTED_3), .stap_selectwir(
        SYNOPSYS_UNCONNECTED_4), .stap_selectwir_neg(SYNOPSYS_UNCONNECTED_5), 
        .sn_fwtap_capturewr(SYNOPSYS_UNCONNECTED_6), .sn_fwtap_shiftwr(
        SYNOPSYS_UNCONNECTED_7), .sn_fwtap_updatewr(SYNOPSYS_UNCONNECTED_8), 
        .sn_fwtap_rti(SYNOPSYS_UNCONNECTED_9), .sn_fwtap_wrst_b(
        SYNOPSYS_UNCONNECTED_10), .stap_fsm_capture_ir(stap_fsm_capture_ir), 
        .stap_fsm_shift_ir(stap_fsm_shift_ir), .stap_fsm_shift_ir_neg(
        SYNOPSYS_UNCONNECTED_11), .stap_fsm_update_ir(stap_fsm_update_ir), 
        .stap_fsm_capture_dr(stap_fsm_capture_dr), .stap_fsm_shift_dr(
        stap_fsm_shift_dr), .stap_fsm_update_dr(SYNOPSYS_UNCONNECTED_12) );
  stap_irreg i_stap_irreg ( .stap_fsm_tlrs(stap_fsm_tlrs), 
        .stap_fsm_capture_ir(stap_fsm_capture_ir), .stap_fsm_shift_ir(
        stap_fsm_shift_ir), .stap_fsm_update_ir(stap_fsm_update_ir), 
        .ftap_tdi(ftap_tdi), .ftap_tck(ftap_tck), .powergood_rst_trst_b(n54), 
        .stap_irreg_ireg({stap_irreg_ireg_7_0, stap_irreg_ireg_6_0, 
        stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0, 
        stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0}), 
        .stap_irreg_ireg_nxt({stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0, 
        stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0, 
        stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0, 
        stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0}), 
        .stap_irreg_serial_out(stap_irreg_serial_out), .stap_irreg_shift_reg({
        SYNOPSYS_UNCONNECTED_13, SYNOPSYS_UNCONNECTED_14, 
        SYNOPSYS_UNCONNECTED_15, SYNOPSYS_UNCONNECTED_16, 
        SYNOPSYS_UNCONNECTED_17, SYNOPSYS_UNCONNECTED_18, 
        SYNOPSYS_UNCONNECTED_19, SYNOPSYS_UNCONNECTED_20}) );
  stap_irdecoder i_stap_irdecoder ( .powergood_rst_trst_b(n52), 
        .stap_irreg_ireg({stap_irreg_ireg_7_0, stap_irreg_ireg_6_0, 
        stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0, 
        stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0}), 
        .stap_irreg_ireg_nxt({stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0, 
        stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0, 
        stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0, 
        stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0}), .ftap_tck(ftap_tck), .feature_green_en(dfxsecure_feature_en_0_0), .feature_orange_en(
        dfxsecure_feature_en_1_0), .feature_red_en(dfxsecure_feature_en_2_0), 
        .stap_isol_en_b(1'b0), .stap_irdecoder_drselect({
        stap_irdecoder_drselect_1_0, stap_irdecoder_drselect_0_0}), 
        .tap_swcomp_active(SYNOPSYS_UNCONNECTED_21), .stap_and_all_bits_irreg(
        stap_and_all_bits_irreg) );
  stap_drreg i_stap_drreg ( .stap_fsm_tlrs(stap_fsm_tlrs), .ftap_tdi(ftap_tdi), 
        .ftap_tck(ftap_tck), .ftap_trst_b(1'b0), .fdfx_powergood(1'b0), 
        .powergood_rst_trst_b(n55), .stap_fsm_capture_dr(stap_fsm_capture_dr), 
        .stap_fsm_shift_dr(stap_fsm_shift_dr), .stap_fsm_update_dr(1'b0), 
        .stap_selectwir(1'b0), .ftap_slvidcode({ftap_slvidcode[31:1], 1'b0}), 
        .stap_irdecoder_drselect({stap_irdecoder_drselect_1_0, 
        stap_irdecoder_drselect_0_0}), .tdr_data_in(1'b0), .tdr_data_out(
        SYNOPSYS_UNCONNECTED_22), .sftapnw_ftap_secsel(SYNOPSYS_UNCONNECTED_23), .tapc_select({SYNOPSYS_UNCONNECTED_24, SYNOPSYS_UNCONNECTED_25}), 
        .feature_green_en(1'b0), .feature_orange_en(1'b0), .feature_red_en(
        1'b0), .tapc_wtap_sel(SYNOPSYS_UNCONNECTED_26), .tapc_remove(
        SYNOPSYS_UNCONNECTED_27), .stap_drreg_tdo({stap_drreg_tdo_1_0, 
        stap_drreg_tdo_0_0}), .swcompctrl_tdo(1'b0), .swcompstat_tdo(1'b0), 
        .stap_and_all_bits_irreg(stap_and_all_bits_irreg), .rtdr_tap_tdo(1'b0), 
        .tap_rtdr_tdi(SYNOPSYS_UNCONNECTED_28), .tap_rtdr_capture(
        SYNOPSYS_UNCONNECTED_29), .tap_rtdr_shift(SYNOPSYS_UNCONNECTED_30), 
        .tap_rtdr_update(SYNOPSYS_UNCONNECTED_31), .tap_rtdr_irdec(
        SYNOPSYS_UNCONNECTED_32), .tap_rtdr_selectir(SYNOPSYS_UNCONNECTED_33), 
        .tap_rtdr_powergood(SYNOPSYS_UNCONNECTED_34), .tap_rtdr_rti(
        SYNOPSYS_UNCONNECTED_35), .tap_rtdr_prog_rst_b(SYNOPSYS_UNCONNECTED_36), .suppress_update_capture_reg({SYNOPSYS_UNCONNECTED_37, 
        SYNOPSYS_UNCONNECTED_38}), .stap_fsm_rti(1'b0) );
  stap_tdomux i_stap_tdomux ( .stap_drreg_tdo({stap_drreg_tdo_1_0, 
        stap_drreg_tdo_0_0}), .stap_fsm_shift_dr(stap_fsm_shift_dr), 
        .stap_fsm_shift_ir(stap_fsm_shift_ir), .stap_irdecoder_drselect({
        stap_irdecoder_drselect_1_0, stap_irdecoder_drselect_0_0}), 
        .stap_irreg_serial_out(stap_irreg_serial_out), .stap_fsm_tlrs(
        stap_fsm_tlrs), .ftap_tck(ftap_tck), .powergood_rst_trst_b(
        powergood_rst_trst_b), .swcomp_stap_post_tdo(1'b0), 
        .tap_swcomp_active(1'b1), .stap_mux_tdo(stap_mux_tdo), .tdo_dr(
        SYNOPSYS_UNCONNECTED_39), .stap_tdomux_tdoen(stap_tdomux_tdoen) );
  stap_glue i_stap_glue ( .ftap_tck(ftap_tck), .ftap_tms(1'b0), .ftap_trst_b(
        ftap_trst_b), .fdfx_powergood(fdfx_powergood), .ftap_tdi(1'b0), 
        .stap_tdomux_tdoen(stap_tdomux_tdoen), .sntapnw_atap_tdo_en(1'b0), 
        .pre_tdo(atap_tdo), .powergood_rst_trst_b(powergood_rst_trst_b), 
        .atap_tdoen(atap_tdoen), .sntapnw_ftap_tck(SYNOPSYS_UNCONNECTED_40), 
        .sntapnw_ftap_tms(SYNOPSYS_UNCONNECTED_41), .sntapnw_ftap_trst_b(
        SYNOPSYS_UNCONNECTED_42), .sntapnw_ftap_tdi(SYNOPSYS_UNCONNECTED_43), 
        .sntapnw_atap_tdo(1'b0), .ftapsslv_tck(ftapsslv_tck), .ftapsslv_tms(
        ftapsslv_tms), .ftapsslv_trst_b(ftapsslv_trst_b), .ftapsslv_tdi(
        ftapsslv_tdi), .atapsslv_tdo(atapsslv_tdo), .atapsslv_tdoen(
        atapsslv_tdoen), .sntapnw_ftap_tck2(sntapnw_ftap_tck2), 
        .sntapnw_ftap_tms2(sntapnw_ftap_tms2), .sntapnw_ftap_trst2_b(
        sntapnw_ftap_trst2_b), .sntapnw_ftap_tdi2(sntapnw_ftap_tdi2), 
        .sntapnw_atap_tdo2(sntapnw_atap_tdo2), .sntapnw_atap_tdo2_en(
        sntapnw_atap_tdo2_en[0]), .sn_fwtap_wrck(SYNOPSYS_UNCONNECTED_44), 
        .stap_mux_tdo(stap_mux_tdo), .tapc_select({1'b0, 1'b0}), 
        .tapc_wtap_sel(1'b0), .tapc_remove(1'b0), .stap_wtapnw_tdo(1'b1) );
  stap_dfxsecure_plugin i_stap_dfxsecure_plugin ( .fdfx_powergood(
        fdfx_powergood), .fdfx_secure_policy(fdfx_secure_policy), 
        .fdfx_earlyboot_exit(fdfx_earlyboot_exit), .fdfx_policy_update(
        fdfx_policy_update), .dfxsecure_feature_en({dfxsecure_feature_en_2_0, 
        dfxsecure_feature_en_1_0, dfxsecure_feature_en_0_0}), .visa_all_dis(
        SYNOPSYS_UNCONNECTED_45), .visa_customer_dis(SYNOPSYS_UNCONNECTED_46), 
        .sb_policy_ovr_value({1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), 
        .oem_secure_policy({1'b0, 1'b0, 1'b0, 1'b0}) );
  e05cbf000an1d02x5 i_stap_ctech_lib_clk_buf_rtdr_i_ctech_lib_clk_buf_ctech_lib_clk_buf_dcszo ( 
        .clk(ftap_tck), .clkout(tap_rtdr_tck) );
  e05bfn001an1n01x5 syn_31 ( .a(powergood_rst_trst_b), .o(n52) );
  e05bfn000an1n04x5 syn_32 ( .a(powergood_rst_trst_b), .o(n53) );
  e05bfn000an1n04x5 syn_33 ( .a(powergood_rst_trst_b), .o(n54) );
  e05bfn000an2n06x5 syn_34 ( .a(powergood_rst_trst_b), .o(n55) );
endmodule

