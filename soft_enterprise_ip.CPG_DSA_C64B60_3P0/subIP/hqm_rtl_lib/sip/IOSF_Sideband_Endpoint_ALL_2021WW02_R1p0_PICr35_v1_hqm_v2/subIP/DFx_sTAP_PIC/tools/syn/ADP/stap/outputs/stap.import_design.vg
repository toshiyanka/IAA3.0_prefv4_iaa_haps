
module ctech_lib_clk_buf ( clk, clkout );
  input clk;
  output clkout;


  d04gbf00ld0c0 ctech_lib_dcszo ( .clk(clk), .clkout(clkout) );
endmodule


module stap_ctech_lib_clk_buf ( clk, clkout );
  input clk;
  output clkout;


  ctech_lib_clk_buf i_ctech_lib_clk_buf ( .clk(clk), .clkout(clkout) );
endmodule


module stap_fsm ( ftap_tms, ftap_tck, powergood_rst_trst_b, tapc_remove, 
        stap_fsm_tlrs, stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr, 
        stap_selectwir, stap_selectwir_neg, sn_fwtap_capturewr, 
        sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b, 
        stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg, 
        stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr, 
        stap_fsm_update_dr );
  input ftap_tms, ftap_tck, powergood_rst_trst_b, tapc_remove;
  output stap_fsm_tlrs, stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr,
         stap_selectwir, stap_selectwir_neg, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b,
         stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg,
         stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr;
  wire   N0, N1, N2, N3, N4, N5, N6, N7, N8, N9, N10, N11, N12, N13, N14, N15,
         N16, N17, N18, N19, N20, N21, N22, N23, N24, N25, N26, N27, N28, N29,
         N30, N31, N32, N33, N34, N35, N36, N37, N38, N39, N40, N41, N42, N43,
         N44, N45, N46, N47, N48, N49, N50, N51, N52, N53, N54, N55, N56, N57,
         N58, N59, N60, N61, N62, N63, N64, N65, N66, N67, N68, N69, N70, N71,
         N72, N73, N74, N75, N76, N77, N78, N79, N80, N81, N82, N83, N84, N85,
         N86, N87, N88, N89, N90, N91, N92, N93, N94, N95, N96, N97, N98, N99,
         N100, N101, N102, N103, N104, N105, N106, N107, N108, N109, N110,
         N111, N112, N113, N114, N115, N116, N117, N118, N119, N120, N121,
         N122, N123, N124, N125, N126, N127, N128, N129, N130, N131, N132,
         N133, N134, N135, N136, N137, N138, N139, N140, N141, N142, N143,
         N144, N145, N146, N147, N148, N149, N150, N151, N152, N153, N154,
         N155, N156, N157, N158, N159, N160, N161, N162, N163, N164, N165,
         N166, N167, N168, N169, N170, N171, N172, N173, N174, N175, N176,
         N177, N178, N179, N180, N181, N182, N183, N184, N185, N186, N187,
         N188, N189, N190, N191, N192, N193, N194, N195, N196, N197, N198,
         N199, N200, N201, N202, N203, N204, N205, N206, N207, N208, N209,
         N210, N211, N212, N213, N214, N215, N216, N217, N218, N219, N220,
         N221, N222, N223, N224, N225, N226, N227, N228, N229, N230, N231,
         N232, N233, N234, N235, N236, N237, N238, N239, N240, N241, N242,
         N243, N244, N245, N246, N247, N248, N249, N250, N251, N252, N253,
         N254, N255, N256, N257, N258, N259, N260, N261, N262, N263, N264,
         N265, N266, N267, N268, N269, N270, N271, N272, N273, N274, N275,
         N276, N277, N278, N279, N280, N281, N282, N283, N284, N285, N286,
         N287, N288, N289, N290, N291, N292, N293, N294, N295, N296, N297,
         N298, N299, N300, N301, N302, N303, N304, N305, N306, N307, N308,
         N309, N310, N311, N312, N313, N314, N315, N316, N317, N318, N319,
         N320, N321, N322, N323, N324, N325, arc_tlrs_ruti, N326,
         arc_ruti_sdrs, N327, N328, N329, N330, N331, N332, N333, N334, N335,
         N336, N337, N338, N339, N340, N341, N342, N343, N344, N345, N346,
         N347, N348, N349, N350, N351, N352, N353, N354, arc_shdr_e1dr, N355,
         N356, N357, N358, N359, N360, N361, N362, N363, N364, arc_padr_e2dr,
         N365, N366, N367, N368, N369, N370, N371, N372, N373, N374, N375,
         N376, N377, N378, N379, N380, N381, N382, N383, N384, N385, N386,
         N387, N388, N389, N390, N391, N392, arc_shir_e1ir, N393, N394, N395,
         N396, N397, N398, N399, N400, N401, N402, arc_pair_e2ir, N403, N404,
         N405, N406, N407, N408, N409, N410, N411, N412, N413, N414, N415,
         N416, N417, N418, N419, N420, N421, N422, ftap_tms_internal, N423,
         N424, N425, N426, N427, soft_reset, N428, N429, N430, N431, N432,
         N433, N434, N435, N436, N437, N438, N439, N440, N441, N442, N443,
         N444, N445, N446, N447, N448, N449, N450, N451, N452, N453, N454,
         N455, N456, N457, N458, N459, N460, N461, N462, N463, N464, N465,
         N466, N467, N468, N469, N470, N471, N472, N473, N474, N475, N476,
         N477, N478, N479, N480, N481, N482, N483, N484, N485, N486, N487,
         N488, N489, N490, N491;
  wire   [15:0] state_ps;
  wire   [15:0] state_ns;
  wire   [1:0] sdrs_cadr_or_sirs;
  wire   [1:0] sirs_cair_or_tlrs;
  wire   [1:0] cadr_shdr_or_e1dr;
  wire   [1:0] e1dr_padr_or_updr;
  wire   [1:0] e2dr_shdr_or_updr;
  wire   [1:0] updr_ruti_or_sdrs;
  wire   [1:0] cair_shir_or_e1ir;
  wire   [1:0] e1ir_pair_or_upir;
  wire   [1:0] e2ir_shir_or_upir;
  wire   [1:0] upir_ruti_or_sdrs;
  wire   [3:0] tms_bit;
  assign sn_fwtap_wrst_b = 1'b1;
  assign sn_fwtap_shiftwr = 1'b0;
  assign sn_fwtap_capturewr = 1'b0;
  assign sn_fwtap_updatewr = 1'b0;
  assign sn_fwtap_rti = 1'b0;
  assign stap_selectwir_neg = 1'b0;
  assign stap_selectwir = 1'b0;
  assign stap_fsm_update_ir = state_ps[15];
  assign stap_fsm_shift_ir = state_ps[11];
  assign stap_fsm_capture_ir = state_ps[10];
  assign stap_fsm_update_dr = state_ps[8];
  assign stap_fsm_e2dr = state_ps[7];
  assign stap_fsm_e1dr = state_ps[5];
  assign stap_fsm_shift_dr = state_ps[4];
  assign stap_fsm_capture_dr = state_ps[3];
  assign stap_fsm_rti = state_ps[1];
  assign stap_fsm_tlrs = state_ps[0];

  GTECH_OR2 C23 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N39) );
  GTECH_OR2 C24 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N40) );
  GTECH_OR2 C25 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N41) );
  GTECH_OR2 C26 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N42) );
  GTECH_OR2 C27 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N43) );
  GTECH_OR2 C28 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N44) );
  GTECH_OR2 C29 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N45) );
  GTECH_OR2 C30 ( .A(state_ps[1]), .B(N38), .Z(N46) );
  GTECH_OR2 C31 ( .A(N39), .B(N40), .Z(N47) );
  GTECH_OR2 C32 ( .A(N41), .B(N42), .Z(N48) );
  GTECH_OR2 C33 ( .A(N43), .B(N44), .Z(N49) );
  GTECH_OR2 C34 ( .A(N45), .B(N46), .Z(N50) );
  GTECH_OR2 C35 ( .A(N47), .B(N48), .Z(N51) );
  GTECH_OR2 C36 ( .A(N49), .B(N50), .Z(N52) );
  GTECH_OR2 C37 ( .A(N51), .B(N52), .Z(N53) );
  GTECH_OR2 C40 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N56) );
  GTECH_OR2 C41 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N57) );
  GTECH_OR2 C42 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N58) );
  GTECH_OR2 C43 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N59) );
  GTECH_OR2 C44 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N60) );
  GTECH_OR2 C45 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N61) );
  GTECH_OR2 C46 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N62) );
  GTECH_OR2 C47 ( .A(N55), .B(state_ps[0]), .Z(N63) );
  GTECH_OR2 C48 ( .A(N56), .B(N57), .Z(N64) );
  GTECH_OR2 C49 ( .A(N58), .B(N59), .Z(N65) );
  GTECH_OR2 C50 ( .A(N60), .B(N61), .Z(N66) );
  GTECH_OR2 C51 ( .A(N62), .B(N63), .Z(N67) );
  GTECH_OR2 C52 ( .A(N64), .B(N65), .Z(N68) );
  GTECH_OR2 C53 ( .A(N66), .B(N67), .Z(N69) );
  GTECH_OR2 C54 ( .A(N68), .B(N69), .Z(N70) );
  GTECH_OR2 C57 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N73) );
  GTECH_OR2 C58 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N74) );
  GTECH_OR2 C59 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N75) );
  GTECH_OR2 C60 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N76) );
  GTECH_OR2 C61 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N77) );
  GTECH_OR2 C62 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N78) );
  GTECH_OR2 C63 ( .A(state_ps[3]), .B(N72), .Z(N79) );
  GTECH_OR2 C64 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N80) );
  GTECH_OR2 C65 ( .A(N73), .B(N74), .Z(N81) );
  GTECH_OR2 C66 ( .A(N75), .B(N76), .Z(N82) );
  GTECH_OR2 C67 ( .A(N77), .B(N78), .Z(N83) );
  GTECH_OR2 C68 ( .A(N79), .B(N80), .Z(N84) );
  GTECH_OR2 C69 ( .A(N81), .B(N82), .Z(N85) );
  GTECH_OR2 C70 ( .A(N83), .B(N84), .Z(N86) );
  GTECH_OR2 C71 ( .A(N85), .B(N86), .Z(N87) );
  GTECH_OR2 C74 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N90) );
  GTECH_OR2 C75 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N91) );
  GTECH_OR2 C76 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N92) );
  GTECH_OR2 C77 ( .A(N89), .B(state_ps[8]), .Z(N93) );
  GTECH_OR2 C78 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N94) );
  GTECH_OR2 C79 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N95) );
  GTECH_OR2 C80 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N96) );
  GTECH_OR2 C81 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N97) );
  GTECH_OR2 C82 ( .A(N90), .B(N91), .Z(N98) );
  GTECH_OR2 C83 ( .A(N92), .B(N93), .Z(N99) );
  GTECH_OR2 C84 ( .A(N94), .B(N95), .Z(N100) );
  GTECH_OR2 C85 ( .A(N96), .B(N97), .Z(N101) );
  GTECH_OR2 C86 ( .A(N98), .B(N99), .Z(N102) );
  GTECH_OR2 C87 ( .A(N100), .B(N101), .Z(N103) );
  GTECH_OR2 C88 ( .A(N102), .B(N103), .Z(N104) );
  GTECH_OR2 C91 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N107) );
  GTECH_OR2 C92 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N108) );
  GTECH_OR2 C93 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N109) );
  GTECH_OR2 C94 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N110) );
  GTECH_OR2 C95 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N111) );
  GTECH_OR2 C96 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N112) );
  GTECH_OR2 C97 ( .A(N106), .B(state_ps[2]), .Z(N113) );
  GTECH_OR2 C98 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N114) );
  GTECH_OR2 C99 ( .A(N107), .B(N108), .Z(N115) );
  GTECH_OR2 C100 ( .A(N109), .B(N110), .Z(N116) );
  GTECH_OR2 C101 ( .A(N111), .B(N112), .Z(N117) );
  GTECH_OR2 C102 ( .A(N113), .B(N114), .Z(N118) );
  GTECH_OR2 C103 ( .A(N115), .B(N116), .Z(N119) );
  GTECH_OR2 C104 ( .A(N117), .B(N118), .Z(N120) );
  GTECH_OR2 C105 ( .A(N119), .B(N120), .Z(N121) );
  GTECH_OR2 C108 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N124) );
  GTECH_OR2 C109 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N125) );
  GTECH_OR2 C110 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N126) );
  GTECH_OR2 C111 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N127) );
  GTECH_OR2 C112 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N128) );
  GTECH_OR2 C113 ( .A(state_ps[5]), .B(N123), .Z(N129) );
  GTECH_OR2 C114 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N130) );
  GTECH_OR2 C115 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N131) );
  GTECH_OR2 C116 ( .A(N124), .B(N125), .Z(N132) );
  GTECH_OR2 C117 ( .A(N126), .B(N127), .Z(N133) );
  GTECH_OR2 C118 ( .A(N128), .B(N129), .Z(N134) );
  GTECH_OR2 C119 ( .A(N130), .B(N131), .Z(N135) );
  GTECH_OR2 C120 ( .A(N132), .B(N133), .Z(N136) );
  GTECH_OR2 C121 ( .A(N134), .B(N135), .Z(N137) );
  GTECH_OR2 C122 ( .A(N136), .B(N137), .Z(N138) );
  GTECH_OR2 C125 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N141) );
  GTECH_OR2 C126 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N142) );
  GTECH_OR2 C127 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N143) );
  GTECH_OR2 C128 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N144) );
  GTECH_OR2 C129 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N145) );
  GTECH_OR2 C130 ( .A(N140), .B(state_ps[4]), .Z(N146) );
  GTECH_OR2 C131 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N147) );
  GTECH_OR2 C132 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N148) );
  GTECH_OR2 C133 ( .A(N141), .B(N142), .Z(N149) );
  GTECH_OR2 C134 ( .A(N143), .B(N144), .Z(N150) );
  GTECH_OR2 C135 ( .A(N145), .B(N146), .Z(N151) );
  GTECH_OR2 C136 ( .A(N147), .B(N148), .Z(N152) );
  GTECH_OR2 C137 ( .A(N149), .B(N150), .Z(N153) );
  GTECH_OR2 C138 ( .A(N151), .B(N152), .Z(N154) );
  GTECH_OR2 C139 ( .A(N153), .B(N154), .Z(N155) );
  GTECH_OR2 C142 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N158) );
  GTECH_OR2 C143 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N159) );
  GTECH_OR2 C144 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N160) );
  GTECH_OR2 C145 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N161) );
  GTECH_OR2 C146 ( .A(state_ps[7]), .B(N157), .Z(N162) );
  GTECH_OR2 C147 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N163) );
  GTECH_OR2 C148 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N164) );
  GTECH_OR2 C149 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N165) );
  GTECH_OR2 C150 ( .A(N158), .B(N159), .Z(N166) );
  GTECH_OR2 C151 ( .A(N160), .B(N161), .Z(N167) );
  GTECH_OR2 C152 ( .A(N162), .B(N163), .Z(N168) );
  GTECH_OR2 C153 ( .A(N164), .B(N165), .Z(N169) );
  GTECH_OR2 C154 ( .A(N166), .B(N167), .Z(N170) );
  GTECH_OR2 C155 ( .A(N168), .B(N169), .Z(N171) );
  GTECH_OR2 C156 ( .A(N170), .B(N171), .Z(N172) );
  GTECH_OR2 C159 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N175) );
  GTECH_OR2 C160 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N176) );
  GTECH_OR2 C161 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N177) );
  GTECH_OR2 C162 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N178) );
  GTECH_OR2 C163 ( .A(N174), .B(state_ps[6]), .Z(N179) );
  GTECH_OR2 C164 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N180) );
  GTECH_OR2 C165 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N181) );
  GTECH_OR2 C166 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N182) );
  GTECH_OR2 C167 ( .A(N175), .B(N176), .Z(N183) );
  GTECH_OR2 C168 ( .A(N177), .B(N178), .Z(N184) );
  GTECH_OR2 C169 ( .A(N179), .B(N180), .Z(N185) );
  GTECH_OR2 C170 ( .A(N181), .B(N182), .Z(N186) );
  GTECH_OR2 C171 ( .A(N183), .B(N184), .Z(N187) );
  GTECH_OR2 C172 ( .A(N185), .B(N186), .Z(N188) );
  GTECH_OR2 C173 ( .A(N187), .B(N188), .Z(N189) );
  GTECH_OR2 C176 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N192) );
  GTECH_OR2 C177 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N193) );
  GTECH_OR2 C178 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N194) );
  GTECH_OR2 C179 ( .A(state_ps[9]), .B(N191), .Z(N195) );
  GTECH_OR2 C180 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N196) );
  GTECH_OR2 C181 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N197) );
  GTECH_OR2 C182 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N198) );
  GTECH_OR2 C183 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N199) );
  GTECH_OR2 C184 ( .A(N192), .B(N193), .Z(N200) );
  GTECH_OR2 C185 ( .A(N194), .B(N195), .Z(N201) );
  GTECH_OR2 C186 ( .A(N196), .B(N197), .Z(N202) );
  GTECH_OR2 C187 ( .A(N198), .B(N199), .Z(N203) );
  GTECH_OR2 C188 ( .A(N200), .B(N201), .Z(N204) );
  GTECH_OR2 C189 ( .A(N202), .B(N203), .Z(N205) );
  GTECH_OR2 C190 ( .A(N204), .B(N205), .Z(N206) );
  GTECH_OR2 C193 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N209) );
  GTECH_OR2 C194 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N210) );
  GTECH_OR2 C195 ( .A(state_ps[11]), .B(N208), .Z(N211) );
  GTECH_OR2 C196 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N212) );
  GTECH_OR2 C197 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N213) );
  GTECH_OR2 C198 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N214) );
  GTECH_OR2 C199 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N215) );
  GTECH_OR2 C200 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N216) );
  GTECH_OR2 C201 ( .A(N209), .B(N210), .Z(N217) );
  GTECH_OR2 C202 ( .A(N211), .B(N212), .Z(N218) );
  GTECH_OR2 C203 ( .A(N213), .B(N214), .Z(N219) );
  GTECH_OR2 C204 ( .A(N215), .B(N216), .Z(N220) );
  GTECH_OR2 C205 ( .A(N217), .B(N218), .Z(N221) );
  GTECH_OR2 C206 ( .A(N219), .B(N220), .Z(N222) );
  GTECH_OR2 C207 ( .A(N221), .B(N222), .Z(N223) );
  GTECH_OR2 C210 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N226) );
  GTECH_OR2 C211 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N227) );
  GTECH_OR2 C212 ( .A(N225), .B(state_ps[10]), .Z(N228) );
  GTECH_OR2 C213 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N229) );
  GTECH_OR2 C214 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N230) );
  GTECH_OR2 C215 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N231) );
  GTECH_OR2 C216 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N232) );
  GTECH_OR2 C217 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N233) );
  GTECH_OR2 C218 ( .A(N226), .B(N227), .Z(N234) );
  GTECH_OR2 C219 ( .A(N228), .B(N229), .Z(N235) );
  GTECH_OR2 C220 ( .A(N230), .B(N231), .Z(N236) );
  GTECH_OR2 C221 ( .A(N232), .B(N233), .Z(N237) );
  GTECH_OR2 C222 ( .A(N234), .B(N235), .Z(N238) );
  GTECH_OR2 C223 ( .A(N236), .B(N237), .Z(N239) );
  GTECH_OR2 C224 ( .A(N238), .B(N239), .Z(N240) );
  GTECH_OR2 C227 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N243) );
  GTECH_OR2 C228 ( .A(state_ps[13]), .B(N242), .Z(N244) );
  GTECH_OR2 C229 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N245) );
  GTECH_OR2 C230 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N246) );
  GTECH_OR2 C231 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N247) );
  GTECH_OR2 C232 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N248) );
  GTECH_OR2 C233 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N249) );
  GTECH_OR2 C234 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N250) );
  GTECH_OR2 C235 ( .A(N243), .B(N244), .Z(N251) );
  GTECH_OR2 C236 ( .A(N245), .B(N246), .Z(N252) );
  GTECH_OR2 C237 ( .A(N247), .B(N248), .Z(N253) );
  GTECH_OR2 C238 ( .A(N249), .B(N250), .Z(N254) );
  GTECH_OR2 C239 ( .A(N251), .B(N252), .Z(N255) );
  GTECH_OR2 C240 ( .A(N253), .B(N254), .Z(N256) );
  GTECH_OR2 C241 ( .A(N255), .B(N256), .Z(N257) );
  GTECH_OR2 C244 ( .A(state_ps[15]), .B(state_ps[14]), .Z(N260) );
  GTECH_OR2 C245 ( .A(N259), .B(state_ps[12]), .Z(N261) );
  GTECH_OR2 C246 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N262) );
  GTECH_OR2 C247 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N263) );
  GTECH_OR2 C248 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N264) );
  GTECH_OR2 C249 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N265) );
  GTECH_OR2 C250 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N266) );
  GTECH_OR2 C251 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N267) );
  GTECH_OR2 C252 ( .A(N260), .B(N261), .Z(N268) );
  GTECH_OR2 C253 ( .A(N262), .B(N263), .Z(N269) );
  GTECH_OR2 C254 ( .A(N264), .B(N265), .Z(N270) );
  GTECH_OR2 C255 ( .A(N266), .B(N267), .Z(N271) );
  GTECH_OR2 C256 ( .A(N268), .B(N269), .Z(N272) );
  GTECH_OR2 C257 ( .A(N270), .B(N271), .Z(N273) );
  GTECH_OR2 C258 ( .A(N272), .B(N273), .Z(N274) );
  GTECH_OR2 C261 ( .A(state_ps[15]), .B(N276), .Z(N277) );
  GTECH_OR2 C262 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N278) );
  GTECH_OR2 C263 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N279) );
  GTECH_OR2 C264 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N280) );
  GTECH_OR2 C265 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N281) );
  GTECH_OR2 C266 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N282) );
  GTECH_OR2 C267 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N283) );
  GTECH_OR2 C268 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N284) );
  GTECH_OR2 C269 ( .A(N277), .B(N278), .Z(N285) );
  GTECH_OR2 C270 ( .A(N279), .B(N280), .Z(N286) );
  GTECH_OR2 C271 ( .A(N281), .B(N282), .Z(N287) );
  GTECH_OR2 C272 ( .A(N283), .B(N284), .Z(N288) );
  GTECH_OR2 C273 ( .A(N285), .B(N286), .Z(N289) );
  GTECH_OR2 C274 ( .A(N287), .B(N288), .Z(N290) );
  GTECH_OR2 C275 ( .A(N289), .B(N290), .Z(N291) );
  GTECH_OR2 C278 ( .A(N293), .B(state_ps[14]), .Z(N294) );
  GTECH_OR2 C279 ( .A(state_ps[13]), .B(state_ps[12]), .Z(N295) );
  GTECH_OR2 C280 ( .A(state_ps[11]), .B(state_ps[10]), .Z(N296) );
  GTECH_OR2 C281 ( .A(state_ps[9]), .B(state_ps[8]), .Z(N297) );
  GTECH_OR2 C282 ( .A(state_ps[7]), .B(state_ps[6]), .Z(N298) );
  GTECH_OR2 C283 ( .A(state_ps[5]), .B(state_ps[4]), .Z(N299) );
  GTECH_OR2 C284 ( .A(state_ps[3]), .B(state_ps[2]), .Z(N300) );
  GTECH_OR2 C285 ( .A(state_ps[1]), .B(state_ps[0]), .Z(N301) );
  GTECH_OR2 C286 ( .A(N294), .B(N295), .Z(N302) );
  GTECH_OR2 C287 ( .A(N296), .B(N297), .Z(N303) );
  GTECH_OR2 C288 ( .A(N298), .B(N299), .Z(N304) );
  GTECH_OR2 C289 ( .A(N300), .B(N301), .Z(N305) );
  GTECH_OR2 C290 ( .A(N302), .B(N303), .Z(N306) );
  GTECH_OR2 C291 ( .A(N304), .B(N305), .Z(N307) );
  GTECH_OR2 C292 ( .A(N306), .B(N307), .Z(N308) );
  GTECH_OR2 C344 ( .A(sdrs_cadr_or_sirs[1]), .B(N328), .Z(N329) );
  GTECH_OR2 C347 ( .A(N331), .B(sdrs_cadr_or_sirs[0]), .Z(N332) );
  GTECH_AND2 C349 ( .A(sdrs_cadr_or_sirs[1]), .B(sdrs_cadr_or_sirs[0]), .Z(
        N334) );
  GTECH_AND2 C352 ( .A(N331), .B(N328), .Z(N335) );
  GTECH_OR2 C365 ( .A(sirs_cair_or_tlrs[1]), .B(N337), .Z(N338) );
  GTECH_OR2 C368 ( .A(N340), .B(sirs_cair_or_tlrs[0]), .Z(N341) );
  GTECH_AND2 C370 ( .A(sirs_cair_or_tlrs[1]), .B(sirs_cair_or_tlrs[0]), .Z(
        N343) );
  GTECH_AND2 C373 ( .A(N340), .B(N337), .Z(N344) );
  GTECH_OR2 C386 ( .A(cadr_shdr_or_e1dr[1]), .B(N346), .Z(N347) );
  GTECH_OR2 C389 ( .A(N349), .B(cadr_shdr_or_e1dr[0]), .Z(N350) );
  GTECH_AND2 C391 ( .A(cadr_shdr_or_e1dr[1]), .B(cadr_shdr_or_e1dr[0]), .Z(
        N352) );
  GTECH_AND2 C394 ( .A(N349), .B(N346), .Z(N353) );
  GTECH_OR2 C415 ( .A(e1dr_padr_or_updr[1]), .B(N356), .Z(N357) );
  GTECH_OR2 C418 ( .A(N359), .B(e1dr_padr_or_updr[0]), .Z(N360) );
  GTECH_AND2 C420 ( .A(e1dr_padr_or_updr[1]), .B(e1dr_padr_or_updr[0]), .Z(
        N362) );
  GTECH_AND2 C423 ( .A(N359), .B(N356), .Z(N363) );
  GTECH_OR2 C444 ( .A(e2dr_shdr_or_updr[1]), .B(N366), .Z(N367) );
  GTECH_OR2 C447 ( .A(N369), .B(e2dr_shdr_or_updr[0]), .Z(N370) );
  GTECH_AND2 C449 ( .A(e2dr_shdr_or_updr[1]), .B(e2dr_shdr_or_updr[0]), .Z(
        N372) );
  GTECH_AND2 C452 ( .A(N369), .B(N366), .Z(N373) );
  GTECH_OR2 C465 ( .A(updr_ruti_or_sdrs[1]), .B(N375), .Z(N376) );
  GTECH_OR2 C468 ( .A(N378), .B(updr_ruti_or_sdrs[0]), .Z(N379) );
  GTECH_AND2 C470 ( .A(updr_ruti_or_sdrs[1]), .B(updr_ruti_or_sdrs[0]), .Z(
        N381) );
  GTECH_AND2 C473 ( .A(N378), .B(N375), .Z(N382) );
  GTECH_OR2 C486 ( .A(cair_shir_or_e1ir[1]), .B(N384), .Z(N385) );
  GTECH_OR2 C489 ( .A(N387), .B(cair_shir_or_e1ir[0]), .Z(N388) );
  GTECH_AND2 C491 ( .A(cair_shir_or_e1ir[1]), .B(cair_shir_or_e1ir[0]), .Z(
        N390) );
  GTECH_AND2 C494 ( .A(N387), .B(N384), .Z(N391) );
  GTECH_OR2 C515 ( .A(e1ir_pair_or_upir[1]), .B(N394), .Z(N395) );
  GTECH_OR2 C518 ( .A(N397), .B(e1ir_pair_or_upir[0]), .Z(N398) );
  GTECH_AND2 C520 ( .A(e1ir_pair_or_upir[1]), .B(e1ir_pair_or_upir[0]), .Z(
        N400) );
  GTECH_AND2 C523 ( .A(N397), .B(N394), .Z(N401) );
  GTECH_OR2 C544 ( .A(e2ir_shir_or_upir[1]), .B(N404), .Z(N405) );
  GTECH_OR2 C547 ( .A(N407), .B(e2ir_shir_or_upir[0]), .Z(N408) );
  GTECH_AND2 C549 ( .A(e2ir_shir_or_upir[1]), .B(e2ir_shir_or_upir[0]), .Z(
        N410) );
  GTECH_AND2 C552 ( .A(N407), .B(N404), .Z(N411) );
  GTECH_OR2 C565 ( .A(upir_ruti_or_sdrs[1]), .B(N413), .Z(N414) );
  GTECH_OR2 C568 ( .A(N416), .B(upir_ruti_or_sdrs[0]), .Z(N417) );
  GTECH_AND2 C570 ( .A(upir_ruti_or_sdrs[1]), .B(upir_ruti_or_sdrs[0]), .Z(
        N419) );
  GTECH_AND2 C573 ( .A(N416), .B(N413), .Z(N420) );
  \**SEQGEN**  \tms_bit_reg[3]  ( .clear(N423), .preset(1'b0), .next_state(
        N427), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        tms_bit[3]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \tms_bit_reg[2]  ( .clear(N423), .preset(1'b0), .next_state(
        N426), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        tms_bit[2]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \tms_bit_reg[1]  ( .clear(N423), .preset(1'b0), .next_state(
        N425), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        tms_bit[1]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \tms_bit_reg[0]  ( .clear(N423), .preset(1'b0), .next_state(
        N424), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        tms_bit[0]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[15]  ( .clear(N423), .preset(1'b0), .next_state(
        N444), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[15]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[14]  ( .clear(N423), .preset(1'b0), .next_state(
        N443), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[14]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[13]  ( .clear(N423), .preset(1'b0), .next_state(
        N442), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[13]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[12]  ( .clear(N423), .preset(1'b0), .next_state(
        N441), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[12]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[11]  ( .clear(N423), .preset(1'b0), .next_state(
        N440), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[11]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[10]  ( .clear(N423), .preset(1'b0), .next_state(
        N439), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[10]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[9]  ( .clear(N423), .preset(1'b0), .next_state(
        N438), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[9]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[8]  ( .clear(N423), .preset(1'b0), .next_state(
        N437), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[8]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[7]  ( .clear(N423), .preset(1'b0), .next_state(
        N436), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[7]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[6]  ( .clear(N423), .preset(1'b0), .next_state(
        N435), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[6]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[5]  ( .clear(N423), .preset(1'b0), .next_state(
        N434), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[5]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[4]  ( .clear(N423), .preset(1'b0), .next_state(
        N433), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[4]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[3]  ( .clear(N423), .preset(1'b0), .next_state(
        N432), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[3]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[2]  ( .clear(N423), .preset(1'b0), .next_state(
        N431), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[2]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[1]  ( .clear(N423), .preset(1'b0), .next_state(
        N430), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[1]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \state_ps_reg[0]  ( .clear(1'b0), .preset(N423), .next_state(
        N429), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        state_ps[0]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  stap_fsm_shift_ir_neg_reg ( .clear(N423), .preset(1'b0), 
        .next_state(state_ps[11]), .clocked_on(N445), .data_in(1'b0), .enable(
        1'b0), .Q(stap_fsm_shift_ir_neg), .QN(), .synch_clear(1'b0), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(1'b1) );
  GTECH_OR5 C784 ( .A(N71), .B(N88), .C(N122), .D(N139), .E(N156), .Z(N446) );
  GTECH_OR5 C785 ( .A(N173), .B(N190), .C(N207), .D(N224), .E(N241), .Z(N447)
         );
  GTECH_OR4 C786 ( .A(N258), .B(N275), .C(N292), .D(N309), .Z(N448) );
  GTECH_OR3 C787 ( .A(N446), .B(N447), .C(N448), .Z(N449) );
  GTECH_OR5 C789 ( .A(N88), .B(N105), .C(N122), .D(N139), .E(N156), .Z(N450)
         );
  GTECH_OR5 C790 ( .A(N173), .B(N190), .C(N224), .D(N241), .E(N258), .Z(N451)
         );
  GTECH_OR3 C791 ( .A(N275), .B(N292), .C(N325), .Z(N452) );
  GTECH_OR3 C792 ( .A(N450), .B(N451), .C(N452), .Z(N453) );
  GTECH_OR5 C794 ( .A(N54), .B(N105), .C(N122), .D(N139), .E(N156), .Z(N454)
         );
  GTECH_OR3 C797 ( .A(N454), .B(N451), .C(N452), .Z(N455) );
  GTECH_OR5 C799 ( .A(N54), .B(N71), .C(N105), .D(N139), .E(N156), .Z(N456) );
  GTECH_OR5 C801 ( .A(N258), .B(N275), .C(N292), .D(N309), .E(N325), .Z(N457)
         );
  GTECH_OR3 C802 ( .A(N456), .B(N447), .C(N457), .Z(N458) );
  GTECH_OR5 C804 ( .A(N54), .B(N71), .C(N88), .D(N105), .E(N156), .Z(N459) );
  GTECH_OR5 C805 ( .A(N173), .B(N207), .C(N224), .D(N241), .E(N258), .Z(N460)
         );
  GTECH_OR4 C806 ( .A(N275), .B(N292), .C(N309), .D(N325), .Z(N461) );
  GTECH_OR3 C807 ( .A(N459), .B(N460), .C(N461), .Z(N462) );
  GTECH_OR5 C809 ( .A(N54), .B(N71), .C(N88), .D(N105), .E(N173), .Z(N463) );
  GTECH_OR5 C810 ( .A(N190), .B(N207), .C(N224), .D(N241), .E(N258), .Z(N464)
         );
  GTECH_OR3 C812 ( .A(N463), .B(N464), .C(N461), .Z(N465) );
  GTECH_OR5 C814 ( .A(N54), .B(N71), .C(N88), .D(N105), .E(N122), .Z(N466) );
  GTECH_OR5 C815 ( .A(N139), .B(N190), .C(N207), .D(N224), .E(N241), .Z(N467)
         );
  GTECH_OR3 C817 ( .A(N466), .B(N467), .C(N457), .Z(N468) );
  GTECH_OR5 C820 ( .A(N139), .B(N156), .C(N207), .D(N224), .E(N241), .Z(N469)
         );
  GTECH_OR3 C822 ( .A(N466), .B(N469), .C(N457), .Z(N470) );
  GTECH_OR5 C825 ( .A(N139), .B(N173), .C(N224), .D(N241), .E(N258), .Z(N471)
         );
  GTECH_OR3 C827 ( .A(N466), .B(N471), .C(N461), .Z(N472) );
  GTECH_OR5 C829 ( .A(N54), .B(N71), .C(N122), .D(N139), .E(N156), .Z(N473) );
  GTECH_OR3 C832 ( .A(N473), .B(N447), .C(N457), .Z(N474) );
  GTECH_OR5 C834 ( .A(N54), .B(N71), .C(N88), .D(N122), .E(N139), .Z(N475) );
  GTECH_OR5 C835 ( .A(N156), .B(N173), .C(N190), .D(N207), .E(N241), .Z(N476)
         );
  GTECH_OR3 C837 ( .A(N475), .B(N476), .C(N457), .Z(N477) );
  GTECH_OR5 C840 ( .A(N139), .B(N156), .C(N173), .D(N190), .E(N207), .Z(N478)
         );
  GTECH_OR4 C841 ( .A(N258), .B(N275), .C(N309), .D(N325), .Z(N479) );
  GTECH_OR3 C842 ( .A(N466), .B(N478), .C(N479), .Z(N480) );
  GTECH_OR3 C847 ( .A(N466), .B(N478), .C(N461), .Z(N481) );
  GTECH_OR5 C851 ( .A(N224), .B(N241), .C(N292), .D(N309), .E(N325), .Z(N482)
         );
  GTECH_OR3 C852 ( .A(N466), .B(N478), .C(N482), .Z(N483) );
  GTECH_OR5 C856 ( .A(N224), .B(N241), .C(N258), .D(N309), .E(N325), .Z(N484)
         );
  GTECH_OR3 C857 ( .A(N466), .B(N478), .C(N484), .Z(N485) );
  GTECH_OR4 C861 ( .A(N224), .B(N241), .C(N275), .D(N325), .Z(N486) );
  GTECH_OR3 C862 ( .A(N466), .B(N478), .C(N486), .Z(N487) );
  SELECT_OP C864 ( .DATA1(N326), .DATA2(1'b0), .DATA3(N339), .DATA4(1'b1), 
        .CONTROL1(N0), .CONTROL2(N1), .CONTROL3(N2), .CONTROL4(N325), .Z(
        state_ns[0]) );
  GTECH_BUF B_0 ( .A(N54), .Z(N0) );
  GTECH_BUF B_1 ( .A(N449), .Z(N1) );
  GTECH_BUF B_2 ( .A(N105), .Z(N2) );
  SELECT_OP C865 ( .DATA1(arc_tlrs_ruti), .DATA2(N327), .DATA3(1'b0), .DATA4(
        N380), .DATA5(N418), .CONTROL1(N0), .CONTROL2(N3), .CONTROL3(N4), 
        .CONTROL4(N5), .CONTROL5(N6), .Z(state_ns[1]) );
  GTECH_BUF B_3 ( .A(N71), .Z(N3) );
  GTECH_BUF B_4 ( .A(N453), .Z(N4) );
  GTECH_BUF B_5 ( .A(N207), .Z(N5) );
  GTECH_BUF B_6 ( .A(N309), .Z(N6) );
  SELECT_OP C866 ( .DATA1(1'b0), .DATA2(arc_ruti_sdrs), .DATA3(N336), .DATA4(
        N377), .DATA5(N415), .CONTROL1(N7), .CONTROL2(N3), .CONTROL3(N8), 
        .CONTROL4(N5), .CONTROL5(N6), .Z(state_ns[2]) );
  GTECH_BUF B_7 ( .A(N455), .Z(N7) );
  GTECH_BUF B_8 ( .A(N88), .Z(N8) );
  SELECT_OP C867 ( .DATA1(1'b0), .DATA2(N333), .DATA3(N354), .CONTROL1(N9), 
        .CONTROL2(N8), .CONTROL3(N10), .Z(state_ns[3]) );
  GTECH_BUF B_9 ( .A(N458), .Z(N9) );
  GTECH_BUF B_10 ( .A(N122), .Z(N10) );
  SELECT_OP C868 ( .DATA1(1'b0), .DATA2(N351), .DATA3(N355), .DATA4(N371), 
        .CONTROL1(N11), .CONTROL2(N10), .CONTROL3(N12), .CONTROL4(N13), .Z(
        state_ns[4]) );
  GTECH_BUF B_11 ( .A(N462), .Z(N11) );
  GTECH_BUF B_12 ( .A(N139), .Z(N12) );
  GTECH_BUF B_13 ( .A(N190), .Z(N13) );
  SELECT_OP C869 ( .DATA1(1'b0), .DATA2(N348), .DATA3(arc_shdr_e1dr), .DATA4(
        N364), .CONTROL1(N14), .CONTROL2(N10), .CONTROL3(N12), .CONTROL4(N15), 
        .Z(state_ns[5]) );
  GTECH_BUF B_14 ( .A(N465), .Z(N14) );
  GTECH_BUF B_15 ( .A(N156), .Z(N15) );
  SELECT_OP C870 ( .DATA1(1'b0), .DATA2(N361), .DATA3(N365), .CONTROL1(N16), 
        .CONTROL2(N15), .CONTROL3(N17), .Z(state_ns[6]) );
  GTECH_BUF B_16 ( .A(N468), .Z(N16) );
  GTECH_BUF B_17 ( .A(N173), .Z(N17) );
  SELECT_OP C871 ( .DATA1(1'b0), .DATA2(arc_padr_e2dr), .DATA3(N374), 
        .CONTROL1(N18), .CONTROL2(N17), .CONTROL3(N13), .Z(state_ns[7]) );
  GTECH_BUF B_18 ( .A(N470), .Z(N18) );
  SELECT_OP C872 ( .DATA1(1'b0), .DATA2(N358), .DATA3(N368), .DATA4(N383), 
        .CONTROL1(N19), .CONTROL2(N15), .CONTROL3(N13), .CONTROL4(N5), .Z(
        state_ns[8]) );
  GTECH_BUF B_19 ( .A(N472), .Z(N19) );
  SELECT_OP C873 ( .DATA1(1'b0), .DATA2(N330), .DATA3(N345), .CONTROL1(N20), 
        .CONTROL2(N8), .CONTROL3(N2), .Z(state_ns[9]) );
  GTECH_BUF B_20 ( .A(N474), .Z(N20) );
  SELECT_OP C874 ( .DATA1(1'b0), .DATA2(N342), .DATA3(N392), .CONTROL1(N21), 
        .CONTROL2(N2), .CONTROL3(N22), .Z(state_ns[10]) );
  GTECH_BUF B_21 ( .A(N477), .Z(N21) );
  GTECH_BUF B_22 ( .A(N224), .Z(N22) );
  SELECT_OP C875 ( .DATA1(1'b0), .DATA2(N389), .DATA3(N393), .DATA4(N409), 
        .CONTROL1(N23), .CONTROL2(N22), .CONTROL3(N24), .CONTROL4(N25), .Z(
        state_ns[11]) );
  GTECH_BUF B_23 ( .A(N480), .Z(N23) );
  GTECH_BUF B_24 ( .A(N241), .Z(N24) );
  GTECH_BUF B_25 ( .A(N292), .Z(N25) );
  SELECT_OP C876 ( .DATA1(1'b0), .DATA2(N386), .DATA3(arc_shir_e1ir), .DATA4(
        N402), .CONTROL1(N26), .CONTROL2(N22), .CONTROL3(N24), .CONTROL4(N27), 
        .Z(state_ns[12]) );
  GTECH_BUF B_26 ( .A(N481), .Z(N26) );
  GTECH_BUF B_27 ( .A(N258), .Z(N27) );
  SELECT_OP C877 ( .DATA1(1'b0), .DATA2(N399), .DATA3(N403), .CONTROL1(N28), 
        .CONTROL2(N27), .CONTROL3(N29), .Z(state_ns[13]) );
  GTECH_BUF B_28 ( .A(N483), .Z(N28) );
  GTECH_BUF B_29 ( .A(N275), .Z(N29) );
  SELECT_OP C878 ( .DATA1(1'b0), .DATA2(arc_pair_e2ir), .DATA3(N412), 
        .CONTROL1(N30), .CONTROL2(N29), .CONTROL3(N25), .Z(state_ns[14]) );
  GTECH_BUF B_30 ( .A(N485), .Z(N30) );
  SELECT_OP C879 ( .DATA1(1'b0), .DATA2(N396), .DATA3(N406), .DATA4(N421), 
        .CONTROL1(N31), .CONTROL2(N27), .CONTROL3(N25), .CONTROL4(N6), .Z(
        state_ns[15]) );
  GTECH_BUF B_31 ( .A(N487), .Z(N31) );
  SELECT_OP C880 ( .DATA1(1'b1), .DATA2(ftap_tms), .CONTROL1(N32), .CONTROL2(
        N33), .Z(ftap_tms_internal) );
  GTECH_BUF B_32 ( .A(tapc_remove), .Z(N32) );
  GTECH_BUF B_33 ( .A(N422), .Z(N33) );
  SELECT_OP C881 ( .DATA1({1'b0, 1'b0, 1'b0, 1'b0}), .DATA2({tms_bit[2:0], 
        ftap_tms_internal}), .CONTROL1(N34), .CONTROL2(N35), .Z({N427, N426, 
        N425, N424}) );
  GTECH_BUF B_34 ( .A(state_ps[0]), .Z(N34) );
  GTECH_BUF B_35 ( .A(N38), .Z(N35) );
  SELECT_OP C882 ( .DATA1({1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 
        1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1}), .DATA2(state_ns), 
        .CONTROL1(N36), .CONTROL2(N37), .Z({N444, N443, N442, N441, N440, N439, 
        N438, N437, N436, N435, N434, N433, N432, N431, N430, N429}) );
  GTECH_BUF B_36 ( .A(soft_reset), .Z(N36) );
  GTECH_BUF B_37 ( .A(N428), .Z(N37) );
  GTECH_NOT I_0 ( .A(state_ps[0]), .Z(N38) );
  GTECH_NOT I_1 ( .A(N53), .Z(N54) );
  GTECH_NOT I_2 ( .A(state_ps[1]), .Z(N55) );
  GTECH_NOT I_3 ( .A(N70), .Z(N71) );
  GTECH_NOT I_4 ( .A(state_ps[2]), .Z(N72) );
  GTECH_NOT I_5 ( .A(N87), .Z(N88) );
  GTECH_NOT I_6 ( .A(state_ps[9]), .Z(N89) );
  GTECH_NOT I_7 ( .A(N104), .Z(N105) );
  GTECH_NOT I_8 ( .A(state_ps[3]), .Z(N106) );
  GTECH_NOT I_9 ( .A(N121), .Z(N122) );
  GTECH_NOT I_10 ( .A(state_ps[4]), .Z(N123) );
  GTECH_NOT I_11 ( .A(N138), .Z(N139) );
  GTECH_NOT I_12 ( .A(state_ps[5]), .Z(N140) );
  GTECH_NOT I_13 ( .A(N155), .Z(N156) );
  GTECH_NOT I_14 ( .A(state_ps[6]), .Z(N157) );
  GTECH_NOT I_15 ( .A(N172), .Z(N173) );
  GTECH_NOT I_16 ( .A(state_ps[7]), .Z(N174) );
  GTECH_NOT I_17 ( .A(N189), .Z(N190) );
  GTECH_NOT I_18 ( .A(state_ps[8]), .Z(N191) );
  GTECH_NOT I_19 ( .A(N206), .Z(N207) );
  GTECH_NOT I_20 ( .A(state_ps[10]), .Z(N208) );
  GTECH_NOT I_21 ( .A(N223), .Z(N224) );
  GTECH_NOT I_22 ( .A(state_ps[11]), .Z(N225) );
  GTECH_NOT I_23 ( .A(N240), .Z(N241) );
  GTECH_NOT I_24 ( .A(state_ps[12]), .Z(N242) );
  GTECH_NOT I_25 ( .A(N257), .Z(N258) );
  GTECH_NOT I_26 ( .A(state_ps[13]), .Z(N259) );
  GTECH_NOT I_27 ( .A(N274), .Z(N275) );
  GTECH_NOT I_28 ( .A(state_ps[14]), .Z(N276) );
  GTECH_NOT I_29 ( .A(N291), .Z(N292) );
  GTECH_NOT I_30 ( .A(state_ps[15]), .Z(N293) );
  GTECH_NOT I_31 ( .A(N308), .Z(N309) );
  GTECH_OR2 C933 ( .A(N71), .B(N54), .Z(N310) );
  GTECH_OR2 C934 ( .A(N88), .B(N310), .Z(N311) );
  GTECH_OR2 C935 ( .A(N105), .B(N311), .Z(N312) );
  GTECH_OR2 C936 ( .A(N122), .B(N312), .Z(N313) );
  GTECH_OR2 C937 ( .A(N139), .B(N313), .Z(N314) );
  GTECH_OR2 C938 ( .A(N156), .B(N314), .Z(N315) );
  GTECH_OR2 C939 ( .A(N173), .B(N315), .Z(N316) );
  GTECH_OR2 C940 ( .A(N190), .B(N316), .Z(N317) );
  GTECH_OR2 C941 ( .A(N207), .B(N317), .Z(N318) );
  GTECH_OR2 C942 ( .A(N224), .B(N318), .Z(N319) );
  GTECH_OR2 C943 ( .A(N241), .B(N319), .Z(N320) );
  GTECH_OR2 C944 ( .A(N258), .B(N320), .Z(N321) );
  GTECH_OR2 C945 ( .A(N275), .B(N321), .Z(N322) );
  GTECH_OR2 C946 ( .A(N292), .B(N322), .Z(N323) );
  GTECH_OR2 C947 ( .A(N309), .B(N323), .Z(N324) );
  GTECH_NOT I_32 ( .A(N324), .Z(N325) );
  GTECH_NOT I_33 ( .A(arc_tlrs_ruti), .Z(N326) );
  GTECH_NOT I_34 ( .A(arc_ruti_sdrs), .Z(N327) );
  GTECH_NOT I_35 ( .A(sdrs_cadr_or_sirs[0]), .Z(N328) );
  GTECH_NOT I_36 ( .A(N329), .Z(N330) );
  GTECH_NOT I_37 ( .A(sdrs_cadr_or_sirs[1]), .Z(N331) );
  GTECH_NOT I_38 ( .A(N332), .Z(N333) );
  GTECH_OR2 C961 ( .A(N334), .B(N335), .Z(N336) );
  GTECH_NOT I_39 ( .A(sirs_cair_or_tlrs[0]), .Z(N337) );
  GTECH_NOT I_40 ( .A(N338), .Z(N339) );
  GTECH_NOT I_41 ( .A(sirs_cair_or_tlrs[1]), .Z(N340) );
  GTECH_NOT I_42 ( .A(N341), .Z(N342) );
  GTECH_OR2 C971 ( .A(N343), .B(N344), .Z(N345) );
  GTECH_NOT I_43 ( .A(cadr_shdr_or_e1dr[0]), .Z(N346) );
  GTECH_NOT I_44 ( .A(N347), .Z(N348) );
  GTECH_NOT I_45 ( .A(cadr_shdr_or_e1dr[1]), .Z(N349) );
  GTECH_NOT I_46 ( .A(N350), .Z(N351) );
  GTECH_OR2 C981 ( .A(N352), .B(N353), .Z(N354) );
  GTECH_NOT I_47 ( .A(arc_shdr_e1dr), .Z(N355) );
  GTECH_NOT I_48 ( .A(e1dr_padr_or_updr[0]), .Z(N356) );
  GTECH_NOT I_49 ( .A(N357), .Z(N358) );
  GTECH_NOT I_50 ( .A(e1dr_padr_or_updr[1]), .Z(N359) );
  GTECH_NOT I_51 ( .A(N360), .Z(N361) );
  GTECH_OR2 C994 ( .A(N362), .B(N363), .Z(N364) );
  GTECH_NOT I_52 ( .A(arc_padr_e2dr), .Z(N365) );
  GTECH_NOT I_53 ( .A(e2dr_shdr_or_updr[0]), .Z(N366) );
  GTECH_NOT I_54 ( .A(N367), .Z(N368) );
  GTECH_NOT I_55 ( .A(e2dr_shdr_or_updr[1]), .Z(N369) );
  GTECH_NOT I_56 ( .A(N370), .Z(N371) );
  GTECH_OR2 C1007 ( .A(N372), .B(N373), .Z(N374) );
  GTECH_NOT I_57 ( .A(updr_ruti_or_sdrs[0]), .Z(N375) );
  GTECH_NOT I_58 ( .A(N376), .Z(N377) );
  GTECH_NOT I_59 ( .A(updr_ruti_or_sdrs[1]), .Z(N378) );
  GTECH_NOT I_60 ( .A(N379), .Z(N380) );
  GTECH_OR2 C1017 ( .A(N381), .B(N382), .Z(N383) );
  GTECH_NOT I_61 ( .A(cair_shir_or_e1ir[0]), .Z(N384) );
  GTECH_NOT I_62 ( .A(N385), .Z(N386) );
  GTECH_NOT I_63 ( .A(cair_shir_or_e1ir[1]), .Z(N387) );
  GTECH_NOT I_64 ( .A(N388), .Z(N389) );
  GTECH_OR2 C1027 ( .A(N390), .B(N391), .Z(N392) );
  GTECH_NOT I_65 ( .A(arc_shir_e1ir), .Z(N393) );
  GTECH_NOT I_66 ( .A(e1ir_pair_or_upir[0]), .Z(N394) );
  GTECH_NOT I_67 ( .A(N395), .Z(N396) );
  GTECH_NOT I_68 ( .A(e1ir_pair_or_upir[1]), .Z(N397) );
  GTECH_NOT I_69 ( .A(N398), .Z(N399) );
  GTECH_OR2 C1040 ( .A(N400), .B(N401), .Z(N402) );
  GTECH_NOT I_70 ( .A(arc_pair_e2ir), .Z(N403) );
  GTECH_NOT I_71 ( .A(e2ir_shir_or_upir[0]), .Z(N404) );
  GTECH_NOT I_72 ( .A(N405), .Z(N406) );
  GTECH_NOT I_73 ( .A(e2ir_shir_or_upir[1]), .Z(N407) );
  GTECH_NOT I_74 ( .A(N408), .Z(N409) );
  GTECH_OR2 C1053 ( .A(N410), .B(N411), .Z(N412) );
  GTECH_NOT I_75 ( .A(upir_ruti_or_sdrs[0]), .Z(N413) );
  GTECH_NOT I_76 ( .A(N414), .Z(N415) );
  GTECH_NOT I_77 ( .A(upir_ruti_or_sdrs[1]), .Z(N416) );
  GTECH_NOT I_78 ( .A(N417), .Z(N418) );
  GTECH_OR2 C1063 ( .A(N419), .B(N420), .Z(N421) );
  GTECH_NOT I_79 ( .A(tapc_remove), .Z(N422) );
  GTECH_AND2 C1070 ( .A(N488), .B(state_ps[0]), .Z(arc_tlrs_ruti) );
  GTECH_NOT I_80 ( .A(ftap_tms_internal), .Z(N488) );
  GTECH_AND2 C1072 ( .A(ftap_tms_internal), .B(state_ps[1]), .Z(arc_ruti_sdrs)
         );
  GTECH_AND2 C1073 ( .A(N488), .B(state_ps[2]), .Z(sdrs_cadr_or_sirs[1]) );
  GTECH_AND2 C1075 ( .A(N488), .B(state_ps[3]), .Z(cadr_shdr_or_e1dr[1]) );
  GTECH_AND2 C1077 ( .A(ftap_tms_internal), .B(state_ps[4]), .Z(arc_shdr_e1dr)
         );
  GTECH_AND2 C1078 ( .A(N488), .B(state_ps[5]), .Z(e1dr_padr_or_updr[1]) );
  GTECH_AND2 C1080 ( .A(ftap_tms_internal), .B(state_ps[6]), .Z(arc_padr_e2dr)
         );
  GTECH_AND2 C1081 ( .A(ftap_tms_internal), .B(state_ps[7]), .Z(
        e2dr_shdr_or_updr[0]) );
  GTECH_AND2 C1082 ( .A(ftap_tms_internal), .B(state_ps[5]), .Z(
        e1dr_padr_or_updr[0]) );
  GTECH_AND2 C1083 ( .A(N488), .B(state_ps[7]), .Z(e2dr_shdr_or_updr[1]) );
  GTECH_AND2 C1085 ( .A(ftap_tms_internal), .B(state_ps[3]), .Z(
        cadr_shdr_or_e1dr[0]) );
  GTECH_AND2 C1086 ( .A(ftap_tms_internal), .B(state_ps[8]), .Z(
        updr_ruti_or_sdrs[0]) );
  GTECH_AND2 C1087 ( .A(N488), .B(state_ps[8]), .Z(updr_ruti_or_sdrs[1]) );
  GTECH_AND2 C1089 ( .A(ftap_tms_internal), .B(state_ps[2]), .Z(
        sdrs_cadr_or_sirs[0]) );
  GTECH_AND2 C1090 ( .A(N488), .B(state_ps[9]), .Z(sirs_cair_or_tlrs[1]) );
  GTECH_AND2 C1092 ( .A(N488), .B(state_ps[10]), .Z(cair_shir_or_e1ir[1]) );
  GTECH_AND2 C1094 ( .A(ftap_tms_internal), .B(state_ps[11]), .Z(arc_shir_e1ir) );
  GTECH_AND2 C1095 ( .A(N488), .B(state_ps[12]), .Z(e1ir_pair_or_upir[1]) );
  GTECH_AND2 C1097 ( .A(ftap_tms_internal), .B(state_ps[13]), .Z(arc_pair_e2ir) );
  GTECH_AND2 C1098 ( .A(ftap_tms_internal), .B(state_ps[14]), .Z(
        e2ir_shir_or_upir[0]) );
  GTECH_AND2 C1099 ( .A(ftap_tms_internal), .B(state_ps[12]), .Z(
        e1ir_pair_or_upir[0]) );
  GTECH_AND2 C1100 ( .A(N488), .B(state_ps[14]), .Z(e2ir_shir_or_upir[1]) );
  GTECH_AND2 C1102 ( .A(ftap_tms_internal), .B(state_ps[10]), .Z(
        cair_shir_or_e1ir[0]) );
  GTECH_AND2 C1103 ( .A(ftap_tms_internal), .B(state_ps[15]), .Z(
        upir_ruti_or_sdrs[0]) );
  GTECH_AND2 C1104 ( .A(N488), .B(state_ps[15]), .Z(upir_ruti_or_sdrs[1]) );
  GTECH_AND2 C1106 ( .A(ftap_tms_internal), .B(state_ps[9]), .Z(
        sirs_cair_or_tlrs[0]) );
  GTECH_NOT I_81 ( .A(powergood_rst_trst_b), .Z(N423) );
  GTECH_AND2 C1111 ( .A(N491), .B(ftap_tms_internal), .Z(soft_reset) );
  GTECH_AND2 C1112 ( .A(N490), .B(tms_bit[0]), .Z(N491) );
  GTECH_AND2 C1113 ( .A(N489), .B(tms_bit[1]), .Z(N490) );
  GTECH_AND2 C1114 ( .A(tms_bit[3]), .B(tms_bit[2]), .Z(N489) );
  GTECH_NOT I_82 ( .A(soft_reset), .Z(N428) );
  GTECH_NOT I_83 ( .A(ftap_tck), .Z(N445) );
endmodule


module stap_irreg ( stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir, 
        stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b, 
        stap_irreg_ireg, stap_irreg_ireg_nxt, stap_irreg_serial_out, 
        stap_irreg_shift_reg );
  output [7:0] stap_irreg_ireg;
  output [7:0] stap_irreg_ireg_nxt;
  output [7:0] stap_irreg_shift_reg;
  input stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir,
         stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b;
  output stap_irreg_serial_out;
  wire   N0, N1, N2, N3, N4, N5, N6, N7, N8, N9, N10;
  assign stap_irreg_serial_out = stap_irreg_shift_reg[0];

  \**SEQGEN**  \shift_reg_reg[7]  ( .clear(N3), .preset(1'b0), .next_state(
        ftap_tdi), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        stap_irreg_shift_reg[7]), .QN(), .synch_clear(N10), .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(N5) );
  \**SEQGEN**  \shift_reg_reg[6]  ( .clear(N3), .preset(1'b0), .next_state(
        stap_irreg_shift_reg[7]), .clocked_on(ftap_tck), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_shift_reg[6]), .QN(), .synch_clear(N10), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(N5) );
  \**SEQGEN**  \shift_reg_reg[5]  ( .clear(N3), .preset(1'b0), .next_state(
        stap_irreg_shift_reg[6]), .clocked_on(ftap_tck), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_shift_reg[5]), .QN(), .synch_clear(N10), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(N5) );
  \**SEQGEN**  \shift_reg_reg[4]  ( .clear(N3), .preset(1'b0), .next_state(
        stap_irreg_shift_reg[5]), .clocked_on(ftap_tck), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_shift_reg[4]), .QN(), .synch_clear(N10), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(N5) );
  \**SEQGEN**  \shift_reg_reg[3]  ( .clear(N3), .preset(1'b0), .next_state(
        stap_irreg_shift_reg[4]), .clocked_on(ftap_tck), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_shift_reg[3]), .QN(), .synch_clear(N10), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(N5) );
  \**SEQGEN**  \shift_reg_reg[2]  ( .clear(N3), .preset(1'b0), .next_state(
        stap_irreg_shift_reg[3]), .clocked_on(ftap_tck), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_shift_reg[2]), .QN(), .synch_clear(N10), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(N5) );
  \**SEQGEN**  \shift_reg_reg[1]  ( .clear(N3), .preset(1'b0), .next_state(
        stap_irreg_shift_reg[2]), .clocked_on(ftap_tck), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_shift_reg[1]), .QN(), .synch_clear(N10), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(N5) );
  \**SEQGEN**  \shift_reg_reg[0]  ( .clear(1'b0), .preset(N3), .next_state(
        stap_irreg_shift_reg[1]), .clocked_on(ftap_tck), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_shift_reg[0]), .QN(), .synch_clear(1'b0), 
        .synch_preset(N10), .synch_toggle(1'b0), .synch_enable(N5) );
  \**SEQGEN**  \stap_irreg_ireg_reg[7]  ( .clear(N3), .preset(1'b0), 
        .next_state(stap_irreg_shift_reg[7]), .clocked_on(N6), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_ireg[7]), .QN(), .synch_clear(
        stap_fsm_tlrs), .synch_preset(1'b0), .synch_toggle(1'b0), 
        .synch_enable(N8) );
  \**SEQGEN**  \stap_irreg_ireg_reg[6]  ( .clear(N3), .preset(1'b0), 
        .next_state(stap_irreg_shift_reg[6]), .clocked_on(N6), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_ireg[6]), .QN(), .synch_clear(
        stap_fsm_tlrs), .synch_preset(1'b0), .synch_toggle(1'b0), 
        .synch_enable(N8) );
  \**SEQGEN**  \stap_irreg_ireg_reg[5]  ( .clear(N3), .preset(1'b0), 
        .next_state(stap_irreg_shift_reg[5]), .clocked_on(N6), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_ireg[5]), .QN(), .synch_clear(
        stap_fsm_tlrs), .synch_preset(1'b0), .synch_toggle(1'b0), 
        .synch_enable(N8) );
  \**SEQGEN**  \stap_irreg_ireg_reg[4]  ( .clear(N3), .preset(1'b0), 
        .next_state(stap_irreg_shift_reg[4]), .clocked_on(N6), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_ireg[4]), .QN(), .synch_clear(
        stap_fsm_tlrs), .synch_preset(1'b0), .synch_toggle(1'b0), 
        .synch_enable(N8) );
  \**SEQGEN**  \stap_irreg_ireg_reg[3]  ( .clear(1'b0), .preset(N3), 
        .next_state(stap_irreg_shift_reg[3]), .clocked_on(N6), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_ireg[3]), .QN(), .synch_clear(1'b0), 
        .synch_preset(stap_fsm_tlrs), .synch_toggle(1'b0), .synch_enable(N8)
         );
  \**SEQGEN**  \stap_irreg_ireg_reg[2]  ( .clear(1'b0), .preset(N3), 
        .next_state(stap_irreg_shift_reg[2]), .clocked_on(N6), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_ireg[2]), .QN(), .synch_clear(1'b0), 
        .synch_preset(stap_fsm_tlrs), .synch_toggle(1'b0), .synch_enable(N8)
         );
  \**SEQGEN**  \stap_irreg_ireg_reg[1]  ( .clear(N3), .preset(1'b0), 
        .next_state(stap_irreg_shift_reg[1]), .clocked_on(N6), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_ireg[1]), .QN(), .synch_clear(
        stap_fsm_tlrs), .synch_preset(1'b0), .synch_toggle(1'b0), 
        .synch_enable(N8) );
  \**SEQGEN**  \stap_irreg_ireg_reg[0]  ( .clear(N3), .preset(1'b0), 
        .next_state(stap_irreg_shift_reg[0]), .clocked_on(N6), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irreg_ireg[0]), .QN(), .synch_clear(
        stap_fsm_tlrs), .synch_preset(1'b0), .synch_toggle(1'b0), 
        .synch_enable(N8) );
  GTECH_OR2 C122 ( .A(stap_fsm_tlrs), .B(stap_fsm_capture_ir), .Z(N10) );
  SELECT_OP C147 ( .DATA1(1'b1), .DATA2(1'b0), .CONTROL1(N0), .CONTROL2(N4), 
        .Z(N5) );
  GTECH_BUF B_0 ( .A(stap_fsm_shift_ir), .Z(N0) );
  SELECT_OP C148 ( .DATA1(1'b1), .DATA2(1'b0), .CONTROL1(N1), .CONTROL2(N7), 
        .Z(N8) );
  GTECH_BUF B_1 ( .A(stap_fsm_update_ir), .Z(N1) );
  SELECT_OP C149 ( .DATA1(stap_irreg_shift_reg), .DATA2(stap_irreg_ireg), 
        .CONTROL1(N1), .CONTROL2(N2), .Z(stap_irreg_ireg_nxt) );
  GTECH_BUF B_2 ( .A(N9), .Z(N2) );
  GTECH_NOT I_0 ( .A(powergood_rst_trst_b), .Z(N3) );
  GTECH_NOT I_1 ( .A(stap_fsm_shift_ir), .Z(N4) );
  GTECH_NOT I_2 ( .A(ftap_tck), .Z(N6) );
  GTECH_NOT I_3 ( .A(stap_fsm_update_ir), .Z(N7) );
  GTECH_NOT I_4 ( .A(stap_fsm_update_ir), .Z(N9) );
endmodule


module stap_decoder_1 ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   N0, N1, N2, N3, N4, N5, N6, N7, green_en, ornage_en, N8, N9, N10, N11,
         N12, N13, N14, N15, N16, N17, N18, N19, N20, N21, N22, N23;

  GTECH_AND2 C14 ( .A(N8), .B(N8), .Z(N9) );
  GTECH_AND2 C59 ( .A(stap_irreg_ireg[6]), .B(stap_irreg_ireg[7]), .Z(N16) );
  GTECH_AND2 C60 ( .A(stap_irreg_ireg[5]), .B(N16), .Z(N17) );
  GTECH_AND2 C61 ( .A(stap_irreg_ireg[4]), .B(N17), .Z(N18) );
  GTECH_AND2 C62 ( .A(stap_irreg_ireg[3]), .B(N18), .Z(N19) );
  GTECH_AND2 C63 ( .A(stap_irreg_ireg[2]), .B(N19), .Z(N20) );
  GTECH_AND2 C64 ( .A(stap_irreg_ireg[1]), .B(N20), .Z(N21) );
  GTECH_AND2 C65 ( .A(stap_irreg_ireg[0]), .B(N21), .Z(N22) );
  SELECT_OP C80 ( .DATA1(N22), .DATA2(1'b0), .CONTROL1(N0), .CONTROL2(N1), .Z(
        N11) );
  GTECH_BUF B_0 ( .A(feature_red_en), .Z(N0) );
  GTECH_BUF B_1 ( .A(N10), .Z(N1) );
  SELECT_OP C81 ( .DATA1(N22), .DATA2(1'b0), .CONTROL1(N2), .CONTROL2(N3), .Z(
        N13) );
  GTECH_BUF B_2 ( .A(ornage_en), .Z(N2) );
  GTECH_BUF B_3 ( .A(N12), .Z(N3) );
  SELECT_OP C82 ( .DATA1(N22), .DATA2(1'b0), .CONTROL1(N4), .CONTROL2(N5), .Z(
        N15) );
  GTECH_BUF B_4 ( .A(green_en), .Z(N4) );
  GTECH_BUF B_5 ( .A(N14), .Z(N5) );
  SELECT_OP C83 ( .DATA1(N11), .DATA2(N13), .DATA3(N15), .DATA4(1'b0), 
        .CONTROL1(N6), .CONTROL2(N6), .CONTROL3(N7), .CONTROL4(N6), .Z(
        decoder_drselect) );
  GTECH_BUF B_6 ( .A(1'b0), .Z(N6) );
  GTECH_BUF B_7 ( .A(N9), .Z(N7) );
  GTECH_OR2 C86 ( .A(N23), .B(feature_red_en), .Z(green_en) );
  GTECH_OR2 C87 ( .A(feature_green_en), .B(feature_orange_en), .Z(N23) );
  GTECH_OR2 C88 ( .A(feature_orange_en), .B(feature_red_en), .Z(ornage_en) );
  GTECH_NOT I_0 ( .A(1'b0), .Z(N8) );
  GTECH_NOT I_1 ( .A(feature_red_en), .Z(N10) );
  GTECH_NOT I_2 ( .A(ornage_en), .Z(N12) );
  GTECH_NOT I_3 ( .A(green_en), .Z(N14) );
endmodule


module stap_decoder_0 ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   N0, N1, N2, N3, N4, N5, N6, N7, green_en, ornage_en, N8, N9, N10, N11,
         N12, N13, N14, N15, N16, N17, N18, N19, N20, N21, N22, N23, N24, N25,
         N26;

  GTECH_AND2 C14 ( .A(N8), .B(N8), .Z(N9) );
  GTECH_NOT I_0 ( .A(stap_irreg_ireg[3]), .Z(N16) );
  GTECH_NOT I_1 ( .A(stap_irreg_ireg[2]), .Z(N17) );
  GTECH_OR2 C61 ( .A(stap_irreg_ireg[6]), .B(stap_irreg_ireg[7]), .Z(N18) );
  GTECH_OR2 C62 ( .A(stap_irreg_ireg[5]), .B(N18), .Z(N19) );
  GTECH_OR2 C63 ( .A(stap_irreg_ireg[4]), .B(N19), .Z(N20) );
  GTECH_OR2 C64 ( .A(N16), .B(N20), .Z(N21) );
  GTECH_OR2 C65 ( .A(N17), .B(N21), .Z(N22) );
  GTECH_OR2 C66 ( .A(stap_irreg_ireg[1]), .B(N22), .Z(N23) );
  GTECH_OR2 C67 ( .A(stap_irreg_ireg[0]), .B(N23), .Z(N24) );
  GTECH_NOT I_2 ( .A(N24), .Z(N25) );
  SELECT_OP C89 ( .DATA1(N25), .DATA2(1'b0), .CONTROL1(N0), .CONTROL2(N1), .Z(
        N11) );
  GTECH_BUF B_0 ( .A(feature_red_en), .Z(N0) );
  GTECH_BUF B_1 ( .A(N10), .Z(N1) );
  SELECT_OP C90 ( .DATA1(N25), .DATA2(1'b0), .CONTROL1(N2), .CONTROL2(N3), .Z(
        N13) );
  GTECH_BUF B_2 ( .A(ornage_en), .Z(N2) );
  GTECH_BUF B_3 ( .A(N12), .Z(N3) );
  SELECT_OP C91 ( .DATA1(N25), .DATA2(1'b0), .CONTROL1(N4), .CONTROL2(N5), .Z(
        N15) );
  GTECH_BUF B_4 ( .A(green_en), .Z(N4) );
  GTECH_BUF B_5 ( .A(N14), .Z(N5) );
  SELECT_OP C92 ( .DATA1(N11), .DATA2(N13), .DATA3(N15), .DATA4(1'b0), 
        .CONTROL1(N6), .CONTROL2(N6), .CONTROL3(N7), .CONTROL4(N6), .Z(
        decoder_drselect) );
  GTECH_BUF B_6 ( .A(1'b0), .Z(N6) );
  GTECH_BUF B_7 ( .A(N9), .Z(N7) );
  GTECH_OR2 C95 ( .A(N26), .B(feature_red_en), .Z(green_en) );
  GTECH_OR2 C96 ( .A(feature_green_en), .B(feature_orange_en), .Z(N26) );
  GTECH_OR2 C97 ( .A(feature_orange_en), .B(feature_red_en), .Z(ornage_en) );
  GTECH_NOT I_3 ( .A(1'b0), .Z(N8) );
  GTECH_NOT I_4 ( .A(feature_red_en), .Z(N10) );
  GTECH_NOT I_5 ( .A(ornage_en), .Z(N12) );
  GTECH_NOT I_6 ( .A(green_en), .Z(N14) );
endmodule


module stap_irdecoder ( powergood_rst_trst_b, stap_irreg_ireg, 
        stap_irreg_ireg_nxt, ftap_tck, feature_green_en, feature_orange_en, 
        feature_red_en, stap_irdecoder_drselect, stap_and_all_bits_irreg );
  input [7:0] stap_irreg_ireg;
  input [7:0] stap_irreg_ireg_nxt;
  output [1:0] stap_irdecoder_drselect;
  input powergood_rst_trst_b, ftap_tck, feature_green_en, feature_orange_en,
         feature_red_en;
  output stap_and_all_bits_irreg;
  wire   N0, N1, and_all_bits_irreg_nxt, N2, N3, N4, N5, N6, N7, N8, N9, N10,
         N11, N12, N13, N14, N15, N16, N17;
  wire   [1:0] decoder_drselect;

  stap_decoder_1 \generate_decoder[0].i_stap_decoder  ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect[0]), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  stap_decoder_0 \generate_decoder[1].i_stap_decoder  ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect[1]), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  \**SEQGEN**  \stap_irdecoder_drselect_reg[1]  ( .clear(1'b0), .preset(N0), 
        .next_state(decoder_drselect[1]), .clocked_on(N1), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irdecoder_drselect[1]), .QN(), .synch_clear(N2), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  \stap_irdecoder_drselect_reg[0]  ( .clear(N0), .preset(1'b0), 
        .next_state(decoder_drselect[0]), .clocked_on(N1), .data_in(1'b0), 
        .enable(1'b0), .Q(stap_irdecoder_drselect[0]), .QN(), .synch_clear(
        1'b0), .synch_preset(N3), .synch_toggle(1'b0), .synch_enable(1'b1) );
  GTECH_OR2 C36 ( .A(and_all_bits_irreg_nxt), .B(N5), .Z(N2) );
  GTECH_OR2 C37 ( .A(and_all_bits_irreg_nxt), .B(N5), .Z(N3) );
  GTECH_OR2 C39 ( .A(decoder_drselect[0]), .B(decoder_drselect[1]), .Z(N4) );
  GTECH_NOT I_0 ( .A(N4), .Z(N5) );
  GTECH_NOT I_1 ( .A(powergood_rst_trst_b), .Z(N0) );
  GTECH_NOT I_2 ( .A(ftap_tck), .Z(N1) );
  GTECH_AND2 C45 ( .A(N11), .B(stap_irreg_ireg[0]), .Z(stap_and_all_bits_irreg) );
  GTECH_AND2 C46 ( .A(N10), .B(stap_irreg_ireg[1]), .Z(N11) );
  GTECH_AND2 C47 ( .A(N9), .B(stap_irreg_ireg[2]), .Z(N10) );
  GTECH_AND2 C48 ( .A(N8), .B(stap_irreg_ireg[3]), .Z(N9) );
  GTECH_AND2 C49 ( .A(N7), .B(stap_irreg_ireg[4]), .Z(N8) );
  GTECH_AND2 C50 ( .A(N6), .B(stap_irreg_ireg[5]), .Z(N7) );
  GTECH_AND2 C51 ( .A(stap_irreg_ireg[7]), .B(stap_irreg_ireg[6]), .Z(N6) );
  GTECH_AND2 C52 ( .A(N17), .B(stap_irreg_ireg_nxt[0]), .Z(
        and_all_bits_irreg_nxt) );
  GTECH_AND2 C53 ( .A(N16), .B(stap_irreg_ireg_nxt[1]), .Z(N17) );
  GTECH_AND2 C54 ( .A(N15), .B(stap_irreg_ireg_nxt[2]), .Z(N16) );
  GTECH_AND2 C55 ( .A(N14), .B(stap_irreg_ireg_nxt[3]), .Z(N15) );
  GTECH_AND2 C56 ( .A(N13), .B(stap_irreg_ireg_nxt[4]), .Z(N14) );
  GTECH_AND2 C57 ( .A(N12), .B(stap_irreg_ireg_nxt[5]), .Z(N13) );
  GTECH_AND2 C58 ( .A(stap_irreg_ireg_nxt[7]), .B(stap_irreg_ireg_nxt[6]), .Z(
        N12) );
endmodule


module stap_drreg ( stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, 
        fdfx_powergood, powergood_rst_trst_b, stap_fsm_capture_dr, 
        stap_fsm_shift_dr, stap_fsm_update_dr, stap_selectwir, ftap_slvidcode, 
        stap_irdecoder_drselect, tdr_data_in, tdr_data_out, 
        sftapnw_ftap_secsel, tapc_select, feature_green_en, feature_orange_en, 
        feature_red_en, tapc_wtap_sel, tapc_remove, stap_drreg_tdo, 
        stap_and_all_bits_irreg, rtdr_tap_tdo, tap_rtdr_tdi, tap_rtdr_capture, 
        tap_rtdr_shift, tap_rtdr_update, tap_rtdr_irdec, tap_rtdr_selectir, 
        tap_rtdr_powergood, tap_rtdr_rti, tap_rtdr_prog_rst_b, stap_fsm_rti );
  input [31:0] ftap_slvidcode;
  input [1:0] stap_irdecoder_drselect;
  input [0:0] tdr_data_in;
  output [0:0] tdr_data_out;
  output [0:0] sftapnw_ftap_secsel;
  output [1:0] tapc_select;
  output [0:0] tapc_wtap_sel;
  output [1:0] stap_drreg_tdo;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  input stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, fdfx_powergood,
         powergood_rst_trst_b, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr, stap_selectwir, feature_green_en,
         feature_orange_en, feature_red_en, stap_and_all_bits_irreg,
         stap_fsm_rti;
  output tapc_remove, tap_rtdr_selectir, tap_rtdr_powergood, tap_rtdr_rti;
  wire   N0, N1, N2, N3, N4, N5, N6, bypass_reg, N7, N8, N9, N10, N11, N12,
         N13, N14, reset_pulse0, reset_pulse1, reset_pulse, N15, N16, N17, N18,
         N19, N20, N21, N22, N23, N24, N25, N26, N28, N29, N30, N31, N34, N35,
         N36, N37, N38, N39, N40, N41, N42, N43, N44, N45, N46, N47, N48, N49,
         N50, N51, N52, N53, N54, N55, N56, N57, N58, N59, N60, N61, N62, N27,
         N32, N33, N63, N64, N65, N66, N67;
  wire   [31:1] slvidcode_reg;
  assign tap_rtdr_prog_rst_b[0] = 1'b1;
  assign tap_rtdr_powergood = 1'b1;
  assign tap_rtdr_tdi[0] = 1'b1;
  assign tapc_select[1] = 1'b0;
  assign tapc_select[0] = 1'b0;
  assign tap_rtdr_irdec[0] = 1'b0;
  assign tap_rtdr_rti = 1'b0;
  assign tap_rtdr_selectir = 1'b0;
  assign tap_rtdr_update[0] = 1'b0;
  assign tap_rtdr_shift[0] = 1'b0;
  assign tap_rtdr_capture[0] = 1'b0;
  assign tdr_data_out[0] = 1'b0;
  assign tapc_remove = 1'b0;
  assign tapc_wtap_sel[0] = 1'b0;
  assign sftapnw_ftap_secsel[0] = 1'b0;

  \**SEQGEN**  bypass_reg_reg ( .clear(N6), .preset(1'b0), .next_state(
        ftap_tdi), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(
        bypass_reg), .QN(), .synch_clear(N62), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N10) );
  \**SEQGEN**  reset_pulse1_reg ( .clear(N6), .preset(1'b0), .next_state(
        reset_pulse0), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(reset_pulse1), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(1'b1) );
  \**SEQGEN**  reset_pulse0_reg ( .clear(N6), .preset(1'b0), .next_state(1'b1), 
        .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), .Q(reset_pulse0), 
        .QN(), .synch_clear(1'b0), .synch_preset(1'b0), .synch_toggle(1'b0), 
        .synch_enable(1'b1) );
  \**SEQGEN**  \slvidcode_reg_reg[31]  ( .clear(N6), .preset(1'b0), 
        .next_state(N53), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[31]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[30]  ( .clear(N6), .preset(1'b0), 
        .next_state(N52), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[30]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[29]  ( .clear(N6), .preset(1'b0), 
        .next_state(N51), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[29]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[28]  ( .clear(N6), .preset(1'b0), 
        .next_state(N50), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[28]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[27]  ( .clear(N6), .preset(1'b0), 
        .next_state(N49), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[27]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[26]  ( .clear(N6), .preset(1'b0), 
        .next_state(N48), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[26]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[25]  ( .clear(N6), .preset(1'b0), 
        .next_state(N47), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[25]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[24]  ( .clear(N6), .preset(1'b0), 
        .next_state(N46), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[24]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[23]  ( .clear(N6), .preset(1'b0), 
        .next_state(N45), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[23]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[22]  ( .clear(N6), .preset(1'b0), 
        .next_state(N44), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[22]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[21]  ( .clear(N6), .preset(1'b0), 
        .next_state(N43), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[21]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[20]  ( .clear(N6), .preset(1'b0), 
        .next_state(N42), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[20]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[19]  ( .clear(N6), .preset(1'b0), 
        .next_state(N41), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[19]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[18]  ( .clear(N6), .preset(1'b0), 
        .next_state(N40), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[18]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[17]  ( .clear(N6), .preset(1'b0), 
        .next_state(N39), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[17]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[16]  ( .clear(N6), .preset(1'b0), 
        .next_state(N38), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[16]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[15]  ( .clear(N6), .preset(1'b0), 
        .next_state(N37), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[15]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[14]  ( .clear(N6), .preset(1'b0), 
        .next_state(N36), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[14]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[13]  ( .clear(N6), .preset(1'b0), 
        .next_state(N35), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[13]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[12]  ( .clear(N6), .preset(1'b0), 
        .next_state(N34), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[12]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[11]  ( .clear(N6), .preset(1'b0), 
        .next_state(N31), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[11]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[10]  ( .clear(N6), .preset(1'b0), 
        .next_state(N30), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[10]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[9]  ( .clear(N6), .preset(1'b0), 
        .next_state(N29), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[9]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[8]  ( .clear(N6), .preset(1'b0), 
        .next_state(N28), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[8]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[7]  ( .clear(N6), .preset(1'b0), 
        .next_state(N26), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[7]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[6]  ( .clear(N6), .preset(1'b0), 
        .next_state(N25), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[6]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[5]  ( .clear(N6), .preset(1'b0), 
        .next_state(N24), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[5]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[4]  ( .clear(N6), .preset(1'b0), 
        .next_state(N23), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[4]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[3]  ( .clear(N6), .preset(1'b0), 
        .next_state(N22), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[3]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[2]  ( .clear(N6), .preset(1'b0), 
        .next_state(N21), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[2]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[1]  ( .clear(N6), .preset(1'b0), 
        .next_state(N20), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(slvidcode_reg[1]), .QN(), .synch_clear(1'b0), .synch_preset(1'b0), 
        .synch_toggle(1'b0), .synch_enable(N19) );
  \**SEQGEN**  \slvidcode_reg_reg[0]  ( .clear(1'b0), .preset(N6), 
        .next_state(N18), .clocked_on(ftap_tck), .data_in(1'b0), .enable(1'b0), 
        .Q(stap_drreg_tdo[1]), .QN(), .synch_clear(1'b0), .synch_preset(N63), 
        .synch_toggle(1'b0), .synch_enable(N17) );
  GTECH_OR2 C232 ( .A(stap_fsm_tlrs), .B(N7), .Z(N62) );
  GTECH_OR2 C233 ( .A(reset_pulse), .B(stap_fsm_tlrs), .Z(N63) );
  GTECH_OR2 C235 ( .A(stap_and_all_bits_irreg), .B(N14), .Z(N64) );
  GTECH_OR2 C240 ( .A(N15), .B(N27), .Z(N65) );
  GTECH_OR4 C242 ( .A(reset_pulse), .B(N55), .C(N58), .D(N61), .Z(N19) );
  GTECH_OR3 C244 ( .A(reset_pulse), .B(N55), .C(N58), .Z(N66) );
  GTECH_NOT I_0 ( .A(N8), .Z(N9) );
  GTECH_AND2 C367 ( .A(stap_irdecoder_drselect[0]), .B(stap_fsm_shift_dr), .Z(
        N8) );
  SELECT_OP C368 ( .DATA1(1'b1), .DATA2(1'b0), .CONTROL1(N0), .CONTROL2(N1), 
        .Z(N10) );
  GTECH_BUF B_0 ( .A(N8), .Z(N0) );
  GTECH_BUF B_1 ( .A(N9), .Z(N1) );
  SELECT_OP C369 ( .DATA1(bypass_reg), .DATA2(1'b0), .CONTROL1(N2), .CONTROL2(
        N12), .Z(stap_drreg_tdo[0]) );
  GTECH_BUF B_2 ( .A(N64), .Z(N2) );
  SELECT_OP C370 ( .DATA1(1'b1), .DATA2(1'b0), .CONTROL1(N3), .CONTROL2(N33), 
        .Z(N17) );
  GTECH_BUF B_3 ( .A(N65), .Z(N3) );
  SELECT_OP C371 ( .DATA1(1'b1), .DATA2(slvidcode_reg[1]), .CONTROL1(N4), 
        .CONTROL2(N27), .Z(N18) );
  GTECH_BUF B_4 ( .A(N15), .Z(N4) );
  SELECT_OP C372 ( .DATA1(ftap_slvidcode[31:1]), .DATA2({ftap_tdi, 
        slvidcode_reg[31:2]}), .CONTROL1(N5), .CONTROL2(N61), .Z({N53, N52, 
        N51, N50, N49, N48, N47, N46, N45, N44, N43, N42, N41, N40, N39, N38, 
        N37, N36, N35, N34, N31, N30, N29, N28, N26, N25, N24, N23, N22, N21, 
        N20}) );
  GTECH_BUF B_5 ( .A(N66), .Z(N5) );
  GTECH_NOT I_1 ( .A(powergood_rst_trst_b), .Z(N6) );
  GTECH_AND2 C376 ( .A(stap_fsm_capture_dr), .B(stap_irdecoder_drselect[0]), 
        .Z(N7) );
  GTECH_OR2 C379 ( .A(stap_irdecoder_drselect[0]), .B(stap_and_all_bits_irreg), 
        .Z(N11) );
  GTECH_NOT I_2 ( .A(N11), .Z(N12) );
  GTECH_NOT I_3 ( .A(stap_and_all_bits_irreg), .Z(N13) );
  GTECH_AND2 C382 ( .A(stap_irdecoder_drselect[0]), .B(N13), .Z(N14) );
  GTECH_AND2 C383 ( .A(reset_pulse0), .B(N67), .Z(reset_pulse) );
  GTECH_NOT I_4 ( .A(reset_pulse1), .Z(N67) );
  GTECH_AND2 C385 ( .A(stap_fsm_capture_dr), .B(stap_irdecoder_drselect[1]), 
        .Z(N15) );
  GTECH_AND2 C386 ( .A(stap_fsm_shift_dr), .B(stap_irdecoder_drselect[1]), .Z(
        N16) );
  GTECH_NOT I_5 ( .A(reset_pulse), .Z(N54) );
  GTECH_AND2 C392 ( .A(stap_fsm_tlrs), .B(N54), .Z(N55) );
  GTECH_NOT I_6 ( .A(stap_fsm_tlrs), .Z(N56) );
  GTECH_AND2 C394 ( .A(N54), .B(N56), .Z(N57) );
  GTECH_AND2 C395 ( .A(N15), .B(N57), .Z(N58) );
  GTECH_NOT I_7 ( .A(N15), .Z(N59) );
  GTECH_AND2 C397 ( .A(N57), .B(N59), .Z(N60) );
  GTECH_AND2 C398 ( .A(N16), .B(N60), .Z(N61) );
  GTECH_AND2 C399 ( .A(N16), .B(N59), .Z(N27) );
  GTECH_OR2 C400 ( .A(N16), .B(N15), .Z(N32) );
  GTECH_NOT I_8 ( .A(N32), .Z(N33) );
endmodule


module ctech_lib_mux_2to1 ( d1, d2, s, o );
  input d1, d2, s;
  output o;


  d04mbn22ld0c7 ctech_lib_dcszo ( .d2(d2), .d1(d1), .s(s), .o(o) );
endmodule


module stap_ctech_lib_mux_2to1 ( d1, d2, s, o );
  input d1, d2, s;
  output o;


  ctech_lib_mux_2to1 i_ctech_lib_mux_2to1 ( .d1(d1), .d2(d2), .s(s), .o(o) );
endmodule


module stap_tdomux ( stap_drreg_tdo, stap_fsm_shift_dr, stap_fsm_shift_ir, 
        stap_irdecoder_drselect, stap_irreg_serial_out, stap_fsm_tlrs, 
        ftap_tck, powergood_rst_trst_b, stap_mux_tdo, stap_tdomux_tdoen );
  input [1:0] stap_drreg_tdo;
  input [1:0] stap_irdecoder_drselect;
  input stap_fsm_shift_dr, stap_fsm_shift_ir, stap_irreg_serial_out,
         stap_fsm_tlrs, ftap_tck, powergood_rst_trst_b;
  output stap_mux_tdo, stap_tdomux_tdoen;
  wire   N0, N1, N2, N3, N4, N5, N6, tdo_dr, N7, stap_mux_tdo_preflop, N8,
         stap_mux_tdo_int, N9, N10, N11, N12, N13, N14,
         stap_mux_tdo_preflop_int, N15, N16, N17;
  wire   [1:0] internal_mux_out;

  \**SEQGEN**  stap_mux_tdo_int_reg ( .clear(N8), .preset(1'b0), .next_state(
        stap_mux_tdo_preflop), .clocked_on(N9), .data_in(1'b0), .enable(1'b0), 
        .Q(stap_mux_tdo_int), .QN(), .synch_clear(stap_fsm_tlrs), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(N12) );
  stap_ctech_lib_mux_2to1 i_stap_ctech_lib_mux_2to1_tdo_posedge ( .d1(
        stap_mux_tdo_preflop_int), .d2(stap_mux_tdo_int), .s(1'b0), .o(
        stap_mux_tdo) );
  \**SEQGEN**  stap_tdomux_tdoen_reg ( .clear(N8), .preset(1'b0), .next_state(
        N16), .clocked_on(N9), .data_in(1'b0), .enable(1'b0), .Q(
        stap_tdomux_tdoen), .QN(), .synch_clear(stap_fsm_tlrs), .synch_preset(
        1'b0), .synch_toggle(1'b0), .synch_enable(1'b1) );
  GTECH_OR2 C67 ( .A(N8), .B(N15), .Z(N17) );
  GTECH_AND2 C69 ( .A(N0), .B(N1), .Z(N11) );
  GTECH_NOT I_0 ( .A(stap_fsm_shift_dr), .Z(N0) );
  GTECH_NOT I_1 ( .A(stap_fsm_shift_ir), .Z(N1) );
  GTECH_NOT I_2 ( .A(N11), .Z(N10) );
  SELECT_OP C71 ( .DATA1(stap_irreg_serial_out), .DATA2(tdo_dr), .CONTROL1(N2), 
        .CONTROL2(N3), .Z(stap_mux_tdo_preflop) );
  GTECH_BUF B_0 ( .A(stap_fsm_shift_ir), .Z(N2) );
  GTECH_BUF B_1 ( .A(N7), .Z(N3) );
  SELECT_OP C72 ( .DATA1(1'b1), .DATA2(1'b0), .CONTROL1(N4), .CONTROL2(N5), 
        .Z(N12) );
  GTECH_BUF B_2 ( .A(N10), .Z(N4) );
  GTECH_BUF B_3 ( .A(N11), .Z(N5) );
  SELECT_OP C73 ( .DATA1(1'b0), .DATA2(stap_mux_tdo_preflop), .CONTROL1(N6), 
        .CONTROL2(N14), .Z(stap_mux_tdo_preflop_int) );
  GTECH_BUF B_4 ( .A(N17), .Z(N6) );
  GTECH_AND2 C76 ( .A(stap_irdecoder_drselect[1]), .B(stap_drreg_tdo[1]), .Z(
        internal_mux_out[1]) );
  GTECH_AND2 C77 ( .A(stap_irdecoder_drselect[0]), .B(stap_drreg_tdo[0]), .Z(
        internal_mux_out[0]) );
  GTECH_OR2 C78 ( .A(internal_mux_out[1]), .B(internal_mux_out[0]), .Z(tdo_dr)
         );
  GTECH_NOT I_3 ( .A(stap_fsm_shift_ir), .Z(N7) );
  GTECH_NOT I_4 ( .A(powergood_rst_trst_b), .Z(N8) );
  GTECH_NOT I_5 ( .A(ftap_tck), .Z(N9) );
  GTECH_OR2 C86 ( .A(stap_fsm_tlrs), .B(N8), .Z(N13) );
  GTECH_NOT I_6 ( .A(N13), .Z(N14) );
  GTECH_AND2 C89 ( .A(stap_fsm_tlrs), .B(powergood_rst_trst_b), .Z(N15) );
  GTECH_OR2 C90 ( .A(stap_fsm_shift_ir), .B(stap_fsm_shift_dr), .Z(N16) );
endmodule


module ctech_lib_dq ( a, b, o );
  input a, b;
  output o;


  d04ann02ln0b0 ctech_lib_dcszo ( .a(a), .b(b), .o(o) );
endmodule


module stap_ctech_lib_dq ( a, b, o );
  input a, b;
  output o;


  ctech_lib_dq i_ctech_lib_dq ( .a(a), .b(b), .o(o) );
endmodule


module stap_glue ( ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi, 
        stap_tdomux_tdoen, sntapnw_atap_tdo_en, pre_tdo, powergood_rst_trst_b, 
        atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms, 
        ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, atapsslv_tdoen, 
        sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b, 
        sntapnw_ftap_tdi2, sntapnw_atap_tdo2, sntapnw_atap_tdo2_en, 
        sn_fwtap_wrck, stap_mux_tdo, tapc_select, tapc_wtap_sel, tapc_remove, 
        stap_wtapnw_tdo );
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [1:0] tapc_select;
  input [0:0] tapc_wtap_sel;
  input ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi,
         stap_tdomux_tdoen, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms,
         ftapsslv_trst_b, ftapsslv_tdi, sntapnw_atap_tdo2, stap_mux_tdo,
         tapc_remove, stap_wtapnw_tdo;
  output pre_tdo, powergood_rst_trst_b, atap_tdoen, sntapnw_ftap_tck,
         sntapnw_ftap_tms, sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo,
         atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2,
         sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sn_fwtap_wrck;
  wire   N0, N1, pre_tdo, atapsslv_tdo, sntapnw_ftap_tms2,
         sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, N2;
  assign sntapnw_ftap_trst_b = 1'b1;
  assign sntapnw_ftap_tms = 1'b1;
  assign sntapnw_ftap_tck = 1'b0;
  assign sntapnw_ftap_tdi = 1'b0;
  assign sn_fwtap_wrck = 1'b0;
  assign pre_tdo = stap_mux_tdo;
  assign atapsslv_tdo = sntapnw_atap_tdo2;
  assign sntapnw_ftap_tms2 = ftapsslv_tms;
  assign sntapnw_ftap_trst2_b = ftapsslv_trst_b;
  assign sntapnw_ftap_tdi2 = ftapsslv_tdi;
  assign atapsslv_tdoen = sntapnw_atap_tdo2_en[0];

  stap_ctech_lib_clk_buf i_stap_ctech_lib_clk_buf_tck2 ( .clk(ftapsslv_tck), 
        .clkout(sntapnw_ftap_tck2) );
  stap_ctech_lib_dq i_stap_ctech_lib_dq ( .a(ftap_trst_b), .b(fdfx_powergood), 
        .o(powergood_rst_trst_b) );
  SELECT_OP C12 ( .DATA1(sntapnw_atap_tdo_en[0]), .DATA2(stap_tdomux_tdoen), 
        .CONTROL1(N0), .CONTROL2(N1), .Z(atap_tdoen) );
  GTECH_BUF B_0 ( .A(tapc_remove), .Z(N0) );
  GTECH_BUF B_1 ( .A(N2), .Z(N1) );
  GTECH_NOT I_0 ( .A(tapc_remove), .Z(N2) );
endmodule


module stap_dfxsecure_plugin ( fdfx_powergood, fdfx_secure_policy, 
        fdfx_earlyboot_exit, fdfx_policy_update, dfxsecure_feature_en, 
        visa_all_dis, visa_customer_dis, sb_policy_ovr_value, 
        oem_secure_policy );
  input [3:0] fdfx_secure_policy;
  output [2:0] dfxsecure_feature_en;
  input [4:0] sb_policy_ovr_value;
  input [3:0] oem_secure_policy;
  input fdfx_powergood, fdfx_earlyboot_exit, fdfx_policy_update;
  output visa_all_dis, visa_customer_dis;
  wire   N0, N1, N2, N3, N4, N5, N6, N7, N8, N9, N10, N11, N12, N13, N14, N15,
         N16, N17, N18, N19, N20, N21, N22, N23, N24, N25, N26, N27, N28, N29,
         N30, N31, N32, N33, N34, N35;
  wire   [4:0] dfxsecure_feature_mux;
  wire   [3:0] dfxsecure_feature_lch;
  wire   [4:2] dfxsecure_feature_int;

  \**SEQGEN**  \dfxsecure_feature_lch_reg[3]  ( .clear(N6), .preset(1'b0), 
        .next_state(1'b0), .clocked_on(1'b0), .data_in(fdfx_secure_policy[3]), 
        .enable(N8), .Q(dfxsecure_feature_lch[3]), .QN(), .synch_clear(1'b0), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(1'b0) );
  \**SEQGEN**  \dfxsecure_feature_lch_reg[2]  ( .clear(N6), .preset(1'b0), 
        .next_state(1'b0), .clocked_on(1'b0), .data_in(fdfx_secure_policy[2]), 
        .enable(N8), .Q(dfxsecure_feature_lch[2]), .QN(), .synch_clear(1'b0), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(1'b0) );
  \**SEQGEN**  \dfxsecure_feature_lch_reg[1]  ( .clear(N6), .preset(1'b0), 
        .next_state(1'b0), .clocked_on(1'b0), .data_in(fdfx_secure_policy[1]), 
        .enable(N8), .Q(dfxsecure_feature_lch[1]), .QN(), .synch_clear(1'b0), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(1'b0) );
  \**SEQGEN**  \dfxsecure_feature_lch_reg[0]  ( .clear(N6), .preset(1'b0), 
        .next_state(1'b0), .clocked_on(1'b0), .data_in(fdfx_secure_policy[0]), 
        .enable(N8), .Q(dfxsecure_feature_lch[0]), .QN(), .synch_clear(1'b0), 
        .synch_preset(1'b0), .synch_toggle(1'b0), .synch_enable(1'b0) );
  GTECH_AND2 C64 ( .A(N9), .B(dfxsecure_feature_lch[2]), .Z(N11) );
  GTECH_AND2 C65 ( .A(N11), .B(N10), .Z(N12) );
  GTECH_AND2 C68 ( .A(N9), .B(dfxsecure_feature_lch[1]), .Z(N13) );
  GTECH_AND2 C69 ( .A(N13), .B(N10), .Z(N14) );
  GTECH_AND2 C77 ( .A(N9), .B(dfxsecure_feature_lch[2]), .Z(N16) );
  GTECH_AND2 C78 ( .A(N16), .B(dfxsecure_feature_lch[0]), .Z(N17) );
  GTECH_AND2 C80 ( .A(dfxsecure_feature_lch[3]), .B(N18), .Z(N19) );
  GTECH_AND2 C82 ( .A(dfxsecure_feature_lch[3]), .B(N10), .Z(N20) );
  GTECH_AND2 C84 ( .A(dfxsecure_feature_lch[3]), .B(N21), .Z(N22) );
  GTECH_AND2 C91 ( .A(dfxsecure_feature_lch[3]), .B(dfxsecure_feature_lch[2]), 
        .Z(N24) );
  GTECH_AND2 C92 ( .A(dfxsecure_feature_lch[1]), .B(dfxsecure_feature_lch[0]), 
        .Z(N25) );
  GTECH_AND2 C93 ( .A(N24), .B(N25), .Z(N26) );
  GTECH_AND2 C97 ( .A(N9), .B(N18), .Z(N27) );
  GTECH_AND2 C98 ( .A(N27), .B(N21), .Z(N28) );
  GTECH_AND2 C101 ( .A(N9), .B(N18), .Z(N29) );
  GTECH_AND2 C102 ( .A(N29), .B(dfxsecure_feature_lch[0]), .Z(N30) );
  GTECH_NOT I_0 ( .A(fdfx_earlyboot_exit), .Z(N32) );
  SELECT_OP C117 ( .DATA1(1'b1), .DATA2(dfxsecure_feature_mux[0]), .CONTROL1(
        N0), .CONTROL2(N1), .Z(visa_customer_dis) );
  GTECH_BUF B_0 ( .A(N32), .Z(N0) );
  GTECH_BUF B_1 ( .A(fdfx_earlyboot_exit), .Z(N1) );
  SELECT_OP C118 ( .DATA1(1'b1), .DATA2(dfxsecure_feature_mux[1]), .CONTROL1(
        N0), .CONTROL2(N1), .Z(visa_all_dis) );
  SELECT_OP C119 ( .DATA1({1'b0, 1'b0, 1'b1}), .DATA2(
        dfxsecure_feature_mux[4:2]), .CONTROL1(N0), .CONTROL2(N1), .Z(
        dfxsecure_feature_en) );
  SELECT_OP C120 ( .DATA1(sb_policy_ovr_value), .DATA2({dfxsecure_feature_int, 
        1'b1, 1'b1}), .CONTROL1(N2), .CONTROL2(N3), .Z(dfxsecure_feature_mux)
         );
  GTECH_BUF B_2 ( .A(1'b0), .Z(N2) );
  GTECH_BUF B_3 ( .A(N5), .Z(N3) );
  SELECT_OP C121 ( .DATA1(1'b1), .DATA2(1'b0), .CONTROL1(N4), .CONTROL2(N7), 
        .Z(N8) );
  GTECH_BUF B_4 ( .A(fdfx_policy_update), .Z(N4) );
  GTECH_NOT I_1 ( .A(1'b0), .Z(N5) );
  GTECH_NOT I_2 ( .A(fdfx_powergood), .Z(N6) );
  GTECH_NOT I_3 ( .A(fdfx_policy_update), .Z(N7) );
  GTECH_NOT I_4 ( .A(dfxsecure_feature_lch[3]), .Z(N9) );
  GTECH_NOT I_5 ( .A(dfxsecure_feature_lch[0]), .Z(N10) );
  GTECH_OR2 C136 ( .A(N12), .B(N14), .Z(N15) );
  GTECH_BUF B_5 ( .A(N15), .Z(dfxsecure_feature_int[4]) );
  GTECH_NOT I_6 ( .A(dfxsecure_feature_lch[2]), .Z(N18) );
  GTECH_NOT I_7 ( .A(dfxsecure_feature_lch[1]), .Z(N21) );
  GTECH_OR2 C142 ( .A(N17), .B(N34), .Z(N23) );
  GTECH_OR2 C143 ( .A(N19), .B(N33), .Z(N34) );
  GTECH_OR2 C144 ( .A(N20), .B(N22), .Z(N33) );
  GTECH_BUF B_6 ( .A(N23), .Z(dfxsecure_feature_int[3]) );
  GTECH_OR2 C151 ( .A(N26), .B(N35), .Z(N31) );
  GTECH_OR2 C152 ( .A(N28), .B(N30), .Z(N35) );
  GTECH_BUF B_7 ( .A(N31), .Z(dfxsecure_feature_int[2]) );
endmodule


module stap ( ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, ftap_slvidcode, 
        atap_tdo, atap_tdoen, fdfx_powergood, tdr_data_out, tdr_data_in, 
        fdfx_secure_policy, fdfx_earlyboot_exit, fdfx_policy_update, 
        sftapnw_ftap_secsel, sftapnw_ftap_enabletdo, sftapnw_ftap_enabletap, 
        sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, sntapnw_atap_tdo_en, ftapsslv_tck, 
        ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, 
        atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2, 
        sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sntapnw_atap_tdo2, 
        sntapnw_atap_tdo2_en, sn_fwtap_wrck, sn_fwtap_wrst_b, 
        sn_fwtap_capturewr, sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, 
        sn_fwtap_selectwir, sn_awtap_wso, sn_fwtap_wsi, stap_fbscan_tck, 
        stap_abscan_tdo, stap_fbscan_capturedr, stap_fbscan_shiftdr, 
        stap_fbscan_updatedr, stap_fbscan_updatedr_clk, stap_fbscan_runbist_en, 
        stap_fbscan_highz, stap_fbscan_extogen, stap_fbscan_intest_mode, 
        stap_fbscan_chainen, stap_fbscan_mode, stap_fbscan_extogsig_b, 
        stap_fbscan_d6init, stap_fbscan_d6actestsig_b, stap_fbscan_d6select, 
        rtdr_tap_tdo, tap_rtdr_irdec, tap_rtdr_prog_rst_b, tap_rtdr_tdi, 
        tap_rtdr_capture, tap_rtdr_shift, tap_rtdr_update, tap_rtdr_tck, 
        tap_rtdr_powergood, tap_rtdr_selectir, tap_rtdr_rti );
  input [31:0] ftap_slvidcode;
  output [0:0] tdr_data_out;
  input [0:0] tdr_data_in;
  input [3:0] fdfx_secure_policy;
  output [0:0] sftapnw_ftap_secsel;
  output [0:0] sftapnw_ftap_enabletdo;
  output [0:0] sftapnw_ftap_enabletap;
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [0:0] sn_awtap_wso;
  output [0:0] sn_fwtap_wsi;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  input ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, fdfx_powergood,
         fdfx_earlyboot_exit, fdfx_policy_update, sntapnw_atap_tdo,
         ftapsslv_tck, ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi,
         sntapnw_atap_tdo2, stap_abscan_tdo;
  output atap_tdo, atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms,
         sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo, atapsslv_tdoen,
         sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b,
         sntapnw_ftap_tdi2, sn_fwtap_wrck, sn_fwtap_wrst_b, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_selectwir,
         stap_fbscan_tck, stap_fbscan_capturedr, stap_fbscan_shiftdr,
         stap_fbscan_updatedr, stap_fbscan_updatedr_clk,
         stap_fbscan_runbist_en, stap_fbscan_highz, stap_fbscan_extogen,
         stap_fbscan_intest_mode, stap_fbscan_chainen, stap_fbscan_mode,
         stap_fbscan_extogsig_b, stap_fbscan_d6init, stap_fbscan_d6actestsig_b,
         stap_fbscan_d6select, tap_rtdr_tck, tap_rtdr_powergood,
         tap_rtdr_selectir, tap_rtdr_rti;
  wire   powergood_rst_trst_b, tapc_remove, stap_fsm_tlrs, stap_fsm_rti,
         stap_fsm_e1dr, stap_fsm_e2dr, stap_selectwir, stap_selectwir_neg,
         stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg,
         stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr, stap_irreg_serial_out, stap_and_all_bits_irreg,
         stap_mux_tdo, stap_tdomux_tdoen, visa_all_dis, visa_customer_dis;
  wire   [7:0] stap_irreg_ireg;
  wire   [7:0] stap_irreg_ireg_nxt;
  wire   [7:0] stap_irreg_shift_reg;
  wire   [1:0] stap_irdecoder_drselect;
  wire   [2:0] dfxsecure_feature_en;
  wire   [1:0] tapc_select;
  wire   [0:0] tapc_wtap_sel;
  wire   [1:0] stap_drreg_tdo;
  assign stap_fbscan_d6actestsig_b = 1'b1;
  assign stap_fbscan_extogsig_b = 1'b1;
  assign sn_fwtap_wsi[0] = 1'b1;
  assign stap_fbscan_d6select = 1'b0;
  assign stap_fbscan_d6init = 1'b0;
  assign stap_fbscan_mode = 1'b0;
  assign stap_fbscan_chainen = 1'b0;
  assign stap_fbscan_intest_mode = 1'b0;
  assign stap_fbscan_extogen = 1'b0;
  assign stap_fbscan_highz = 1'b0;
  assign stap_fbscan_runbist_en = 1'b0;
  assign stap_fbscan_updatedr_clk = 1'b0;
  assign stap_fbscan_updatedr = 1'b0;
  assign stap_fbscan_shiftdr = 1'b0;
  assign stap_fbscan_capturedr = 1'b0;
  assign stap_fbscan_tck = 1'b0;
  assign sn_fwtap_selectwir = 1'b0;
  assign sftapnw_ftap_enabletap[0] = 1'b0;
  assign sftapnw_ftap_enabletdo[0] = 1'b0;

  stap_ctech_lib_clk_buf i_stap_ctech_lib_clk_buf_rtdr ( .clk(ftap_tck), 
        .clkout(tap_rtdr_tck) );
  stap_fsm i_stap_fsm ( .ftap_tms(ftap_tms), .ftap_tck(ftap_tck), 
        .powergood_rst_trst_b(powergood_rst_trst_b), .tapc_remove(tapc_remove), 
        .stap_fsm_tlrs(stap_fsm_tlrs), .stap_fsm_rti(stap_fsm_rti), 
        .stap_fsm_e1dr(stap_fsm_e1dr), .stap_fsm_e2dr(stap_fsm_e2dr), 
        .stap_selectwir(stap_selectwir), .stap_selectwir_neg(
        stap_selectwir_neg), .sn_fwtap_capturewr(sn_fwtap_capturewr), 
        .sn_fwtap_shiftwr(sn_fwtap_shiftwr), .sn_fwtap_updatewr(
        sn_fwtap_updatewr), .sn_fwtap_rti(sn_fwtap_rti), .sn_fwtap_wrst_b(
        sn_fwtap_wrst_b), .stap_fsm_capture_ir(stap_fsm_capture_ir), 
        .stap_fsm_shift_ir(stap_fsm_shift_ir), .stap_fsm_shift_ir_neg(
        stap_fsm_shift_ir_neg), .stap_fsm_update_ir(stap_fsm_update_ir), 
        .stap_fsm_capture_dr(stap_fsm_capture_dr), .stap_fsm_shift_dr(
        stap_fsm_shift_dr), .stap_fsm_update_dr(stap_fsm_update_dr) );
  stap_irreg i_stap_irreg ( .stap_fsm_tlrs(stap_fsm_tlrs), 
        .stap_fsm_capture_ir(stap_fsm_capture_ir), .stap_fsm_shift_ir(
        stap_fsm_shift_ir), .stap_fsm_update_ir(stap_fsm_update_ir), 
        .ftap_tdi(ftap_tdi), .ftap_tck(ftap_tck), .powergood_rst_trst_b(
        powergood_rst_trst_b), .stap_irreg_ireg(stap_irreg_ireg), 
        .stap_irreg_ireg_nxt(stap_irreg_ireg_nxt), .stap_irreg_serial_out(
        stap_irreg_serial_out), .stap_irreg_shift_reg(stap_irreg_shift_reg) );
  stap_irdecoder i_stap_irdecoder ( .powergood_rst_trst_b(powergood_rst_trst_b), .stap_irreg_ireg(stap_irreg_ireg), .stap_irreg_ireg_nxt(stap_irreg_ireg_nxt), 
        .ftap_tck(ftap_tck), .feature_green_en(dfxsecure_feature_en[0]), 
        .feature_orange_en(dfxsecure_feature_en[1]), .feature_red_en(
        dfxsecure_feature_en[2]), .stap_irdecoder_drselect(
        stap_irdecoder_drselect), .stap_and_all_bits_irreg(
        stap_and_all_bits_irreg) );
  stap_drreg i_stap_drreg ( .stap_fsm_tlrs(stap_fsm_tlrs), .ftap_tdi(ftap_tdi), 
        .ftap_tck(ftap_tck), .ftap_trst_b(ftap_trst_b), .fdfx_powergood(
        fdfx_powergood), .powergood_rst_trst_b(powergood_rst_trst_b), 
        .stap_fsm_capture_dr(stap_fsm_capture_dr), .stap_fsm_shift_dr(
        stap_fsm_shift_dr), .stap_fsm_update_dr(stap_fsm_update_dr), 
        .stap_selectwir(stap_selectwir), .ftap_slvidcode(ftap_slvidcode), 
        .stap_irdecoder_drselect(stap_irdecoder_drselect), .tdr_data_in(
        tdr_data_in[0]), .tdr_data_out(tdr_data_out[0]), .sftapnw_ftap_secsel(
        sftapnw_ftap_secsel[0]), .tapc_select(tapc_select), .feature_green_en(
        dfxsecure_feature_en[0]), .feature_orange_en(dfxsecure_feature_en[1]), 
        .feature_red_en(dfxsecure_feature_en[2]), .tapc_wtap_sel(
        tapc_wtap_sel[0]), .tapc_remove(tapc_remove), .stap_drreg_tdo(
        stap_drreg_tdo), .stap_and_all_bits_irreg(stap_and_all_bits_irreg), 
        .rtdr_tap_tdo(rtdr_tap_tdo[0]), .tap_rtdr_tdi(tap_rtdr_tdi[0]), 
        .tap_rtdr_capture(tap_rtdr_capture[0]), .tap_rtdr_shift(
        tap_rtdr_shift[0]), .tap_rtdr_update(tap_rtdr_update[0]), 
        .tap_rtdr_irdec(tap_rtdr_irdec[0]), .tap_rtdr_selectir(
        tap_rtdr_selectir), .tap_rtdr_powergood(tap_rtdr_powergood), 
        .tap_rtdr_rti(tap_rtdr_rti), .tap_rtdr_prog_rst_b(
        tap_rtdr_prog_rst_b[0]), .stap_fsm_rti(stap_fsm_rti) );
  stap_tdomux i_stap_tdomux ( .stap_drreg_tdo(stap_drreg_tdo), 
        .stap_fsm_shift_dr(stap_fsm_shift_dr), .stap_fsm_shift_ir(
        stap_fsm_shift_ir), .stap_irdecoder_drselect(stap_irdecoder_drselect), 
        .stap_irreg_serial_out(stap_irreg_serial_out), .stap_fsm_tlrs(
        stap_fsm_tlrs), .ftap_tck(ftap_tck), .powergood_rst_trst_b(
        powergood_rst_trst_b), .stap_mux_tdo(stap_mux_tdo), 
        .stap_tdomux_tdoen(stap_tdomux_tdoen) );
  stap_glue i_stap_glue ( .ftap_tck(ftap_tck), .ftap_tms(ftap_tms), 
        .ftap_trst_b(ftap_trst_b), .fdfx_powergood(fdfx_powergood), .ftap_tdi(
        ftap_tdi), .stap_tdomux_tdoen(stap_tdomux_tdoen), 
        .sntapnw_atap_tdo_en(sntapnw_atap_tdo_en[0]), .pre_tdo(atap_tdo), 
        .powergood_rst_trst_b(powergood_rst_trst_b), .atap_tdoen(atap_tdoen), 
        .sntapnw_ftap_tck(sntapnw_ftap_tck), .sntapnw_ftap_tms(
        sntapnw_ftap_tms), .sntapnw_ftap_trst_b(sntapnw_ftap_trst_b), 
        .sntapnw_ftap_tdi(sntapnw_ftap_tdi), .sntapnw_atap_tdo(
        sntapnw_atap_tdo), .ftapsslv_tck(ftapsslv_tck), .ftapsslv_tms(
        ftapsslv_tms), .ftapsslv_trst_b(ftapsslv_trst_b), .ftapsslv_tdi(
        ftapsslv_tdi), .atapsslv_tdo(atapsslv_tdo), .atapsslv_tdoen(
        atapsslv_tdoen), .sntapnw_ftap_tck2(sntapnw_ftap_tck2), 
        .sntapnw_ftap_tms2(sntapnw_ftap_tms2), .sntapnw_ftap_trst2_b(
        sntapnw_ftap_trst2_b), .sntapnw_ftap_tdi2(sntapnw_ftap_tdi2), 
        .sntapnw_atap_tdo2(sntapnw_atap_tdo2), .sntapnw_atap_tdo2_en(
        sntapnw_atap_tdo2_en[0]), .sn_fwtap_wrck(sn_fwtap_wrck), 
        .stap_mux_tdo(stap_mux_tdo), .tapc_select(tapc_select), 
        .tapc_wtap_sel(tapc_wtap_sel[0]), .tapc_remove(tapc_remove), 
        .stap_wtapnw_tdo(1'b1) );
  stap_dfxsecure_plugin i_stap_dfxsecure_plugin ( .fdfx_powergood(
        fdfx_powergood), .fdfx_secure_policy(fdfx_secure_policy), 
        .fdfx_earlyboot_exit(fdfx_earlyboot_exit), .fdfx_policy_update(
        fdfx_policy_update), .dfxsecure_feature_en(dfxsecure_feature_en), 
        .visa_all_dis(visa_all_dis), .visa_customer_dis(visa_customer_dis), 
        .sb_policy_ovr_value({1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), 
        .oem_secure_policy({1'b0, 1'b0, 1'b0, 1'b0}) );
endmodule

