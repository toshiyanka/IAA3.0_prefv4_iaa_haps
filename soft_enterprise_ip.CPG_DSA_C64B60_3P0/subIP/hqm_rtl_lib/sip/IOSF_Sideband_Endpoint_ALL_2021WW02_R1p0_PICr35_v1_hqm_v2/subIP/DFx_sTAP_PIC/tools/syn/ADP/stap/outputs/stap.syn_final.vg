/////////////////////////////////////////////////////////////
// Created by: Synopsys DC Ultra(TM) in topographical mode
// Version   : L-2016.03-SP3
// Date      : Fri Nov 10 21:07:11 2017
/////////////////////////////////////////////////////////////


module stap_fsm ( ftap_tms, ftap_tck, powergood_rst_trst_b, tapc_remove, 
        stap_fsm_tlrs, stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr, 
        stap_selectwir, stap_selectwir_neg, sn_fwtap_capturewr, 
        sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b, 
        stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg, 
        stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr, 
        stap_fsm_update_dr );
  input ftap_tms, ftap_tck, powergood_rst_trst_b, tapc_remove;
  output stap_fsm_tlrs, stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr,
         stap_selectwir, stap_selectwir_neg, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b,
         stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg,
         stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr;
  wire   state_ps_14_0, state_ps_13_0, state_ps_12_0, state_ps_9_0,
         state_ps_6_0, n3, state_ps_2_0, n2, tms_bit_3_0, tms_bit_2_0,
         tms_bit_1_0, tms_bit_0_0, N468, N469, N470, N471, N473, N474, N475,
         N476, N477, N478, N479, N480, N481, N482, N483, N484, N485, N486,
         N487, N488, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n44, n45,
         n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59,
         n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n75;

  d04fyn0cld0c0 state_ps_reg_0 ( .d(N473), .clk(ftap_tck), .psb(
        powergood_rst_trst_b), .o(stap_fsm_tlrs) );
  d04nob02ln0b0 syn_3 ( .a(tms_bit_0_0), .b(stap_fsm_tlrs), .out(N469) );
  d04nob02ln0b0 syn_4 ( .a(tms_bit_1_0), .b(stap_fsm_tlrs), .out(N470) );
  d04nob02ln0b0 syn_5 ( .a(tms_bit_2_0), .b(stap_fsm_tlrs), .out(N471) );
  d04inn20ln0b0 syn_8 ( .a(n3), .o1(n32) );
  d04nan02ln0b0 syn_9 ( .a(stap_fsm_e2dr), .b(n32), .o1(n41) );
  d04kok01ln0b0 syn_10 ( .b(stap_fsm_e2dr), .c(n32), .a(n41), .d(state_ps_6_0), 
        .o1(n57) );
  d04orn03ln0a5 syn_11 ( .a(state_ps_2_0), .b(n2), .c(stap_fsm_capture_dr), 
        .o(n5) );
  d04non02ln0b0 syn_12 ( .a(stap_fsm_update_ir), .b(stap_fsm_update_dr), .o1(
        n19) );
  d04non03lnsb0 syn_13 ( .a(state_ps_13_0), .b(state_ps_12_0), .c(
        state_ps_14_0), .o1(n12) );
  d04inn20ln0b0 syn_15 ( .a(state_ps_9_0), .o1(n4) );
  d04inn20ln0b0 syn_16 ( .a(stap_fsm_shift_ir), .o1(n13) );
  d04nan04ln0b0 syn_17 ( .a(n12), .b(n75), .c(n4), .d(n13), .o1(n15) );
  d04non02ln0b0 syn_18 ( .a(stap_fsm_capture_ir), .b(n15), .o1(n23) );
  d04nan02ln0b0 syn_19 ( .a(n19), .b(n23), .o1(n9) );
  d04non02ln0b0 syn_20 ( .a(n5), .b(n9), .o1(n33) );
  d04nab02lnsb0 syn_21 ( .a(stap_fsm_shift_dr), .b(n33), .out(n38) );
  d04nan04ln0b0 syn_22 ( .a(tms_bit_0_0), .b(tms_bit_3_0), .c(tms_bit_2_0), 
        .d(tms_bit_1_0), .o1(n7) );
  d04nan02ln0b0 syn_23 ( .a(ftap_tms), .b(n7), .o1(n70) );
  d04nob03ln0b0 syn_24 ( .a(n57), .b(n38), .c(n70), .out(N481) );
  d04inn20ln0b0 syn_25 ( .a(stap_fsm_e2dr), .o1(n28) );
  d04nan03lnsb0 syn_26 ( .a(n28), .b(n32), .c(state_ps_6_0), .o1(n49) );
  d04non03lnsb0 syn_27 ( .a(n38), .b(n49), .c(n70), .o1(N480) );
  d04non03lnsb0 syn_28 ( .a(stap_fsm_e2dr), .b(state_ps_6_0), .c(n3), .o1(n34)
         );
  d04inn20ln0b0 syn_29 ( .a(n34), .o1(n10) );
  d04non03lnsb0 syn_30 ( .a(stap_fsm_shift_dr), .b(n5), .c(n10), .o1(n17) );
  d04nan02ln0b0 syn_31 ( .a(n19), .b(n17), .o1(n14) );
  d04non03lnsb0 syn_32 ( .a(stap_fsm_capture_ir), .b(stap_fsm_tlrs), .c(n14), 
        .o1(n6) );
  d04nan04ln0b0 syn_33 ( .a(state_ps_9_0), .b(n12), .c(n6), .d(n13), .o1(n62)
         );
  d04non02ln0b0 syn_34 ( .a(ftap_tms), .b(n62), .o1(N483) );
  d04inn20ln0b0 syn_35 ( .a(ftap_tms), .o1(n29) );
  d04non02ln0b0 syn_36 ( .a(stap_fsm_tlrs), .b(n29), .o1(N468) );
  d04non02ln0b0 syn_37 ( .a(n29), .b(n7), .o1(n63) );
  d04non03lnsb0 syn_38 ( .a(stap_fsm_capture_ir), .b(state_ps_9_0), .c(n14), 
        .o1(n11) );
  d04nan02ln0b0 syn_39 ( .a(n11), .b(n13), .o1(n25) );
  d04non02ln0b0 syn_40 ( .a(state_ps_13_0), .b(n25), .o1(n44) );
  d04nan02ln0b0 syn_41 ( .a(N468), .b(n44), .o1(n8) );
  d04inn20ln0b0 syn_42 ( .a(state_ps_14_0), .o1(n47) );
  d04non02ln0b0 syn_43 ( .a(state_ps_12_0), .b(n47), .o1(n42) );
  d04cak01lnsb0 syn_44 ( .a(state_ps_12_0), .b(n47), .c(n42), .o1(n61) );
  d04non03lnsb0 syn_45 ( .a(n63), .b(n8), .c(n61), .o1(N488) );
  d04non03lnsb0 syn_46 ( .a(stap_fsm_shift_dr), .b(n10), .c(n9), .o1(n20) );
  d04nab02lnsb0 syn_47 ( .a(n2), .b(n20), .out(n36) );
  d04inn20ln0b0 syn_48 ( .a(stap_fsm_capture_dr), .o1(n37) );
  d04nab03ln0b0 syn_49 ( .a(n36), .b(state_ps_2_0), .c(n37), .out(n52) );
  d04non02ln0b0 syn_50 ( .a(n52), .b(n70), .o1(N482) );
  d04non02ln0b0 syn_51 ( .a(ftap_tms), .b(n52), .o1(N476) );
  d04nan02ln0b0 syn_52 ( .a(n12), .b(n11), .o1(n16) );
  d04non03lnsb0 syn_53 ( .a(stap_fsm_tlrs), .b(n13), .c(n16), .o1(n69) );
  d04nob03ln0b0 syn_54 ( .a(stap_fsm_capture_ir), .b(n15), .c(n14), .out(n50)
         );
  d04non02ln0b0 syn_55 ( .a(n69), .b(n50), .o1(n45) );
  d04non02ln0b0 syn_56 ( .a(n45), .b(n70), .o1(N485) );
  d04non03lnsb0 syn_57 ( .a(stap_fsm_shift_ir), .b(n75), .c(n16), .o1(n65) );
  d04inn20ln0b0 syn_58 ( .a(n17), .o1(n18) );
  d04cak02ln0b0 syn_59 ( .a(stap_fsm_update_dr), .b(stap_fsm_update_ir), .c(
        n19), .d(n18), .o1(n24) );
  d04non02ln0b0 syn_60 ( .a(state_ps_2_0), .b(stap_fsm_capture_dr), .o1(n21)
         );
  d04nan03lnsb0 syn_61 ( .a(n2), .b(n21), .c(n20), .o1(n22) );
  d04aon11ln0b0 syn_62 ( .a(n24), .b(n23), .c(n22), .o(n71) );
  d04non02ln0b0 syn_63 ( .a(n65), .b(n71), .o1(n59) );
  d04non02ln0b0 syn_64 ( .a(ftap_tms), .b(n59), .o1(N474) );
  d04non02ln0b0 syn_65 ( .a(state_ps_12_0), .b(state_ps_14_0), .o1(n27) );
  d04inn20ln0b0 syn_66 ( .a(n25), .o1(n26) );
  d04nan04ln0b0 syn_67 ( .a(state_ps_13_0), .b(n27), .c(n26), .d(n75), .o1(n53) );
  d04non02ln0b0 syn_68 ( .a(n53), .b(n70), .o1(N487) );
  d04nan02ln0b0 syn_69 ( .a(state_ps_6_0), .b(n32), .o1(n31) );
  d04inn20ln0b0 syn_70 ( .a(n38), .o1(n55) );
  d04nan03lnsb0 syn_71 ( .a(n55), .b(n29), .c(n28), .o1(n30) );
  d04kok01ln0b0 syn_72 ( .b(state_ps_6_0), .c(n32), .a(n31), .d(n30), .o1(N479) );
  d04nan03lnsb0 syn_73 ( .a(stap_fsm_shift_dr), .b(n34), .c(n33), .o1(n35) );
  d04con04ln0b0 syn_74 ( .b(state_ps_2_0), .c(n37), .d(n36), .a(n35), .o1(n68)
         );
  d04inn20ln0b0 syn_75 ( .a(n68), .o1(n39) );
  d04non02ln0b0 syn_76 ( .a(n39), .b(n70), .o1(N478) );
  d04orn02ln0b0 syn_77 ( .a(state_ps_6_0), .b(n38), .o(n40) );
  d04kok01ln0b0 syn_78 ( .b(n41), .c(n40), .a(n39), .d(ftap_tms), .o1(N477) );
  d04inn20ln0b0 syn_79 ( .a(n42), .o1(n46) );
  d04nan02ln0b0 syn_80 ( .a(n44), .b(n75), .o1(n60) );
  d04kok01ln0b0 syn_81 ( .b(n46), .c(n60), .a(n45), .d(ftap_tms), .o1(N484) );
  d04nan02ln0b0 syn_82 ( .a(state_ps_12_0), .b(n47), .o1(n48) );
  d04kok01ln0b0 syn_83 ( .b(n48), .c(n60), .a(n53), .d(ftap_tms), .o1(N486) );
  d04inn20ln0b0 syn_84 ( .a(n49), .o1(n56) );
  d04inn20ln0b0 syn_85 ( .a(n50), .o1(n51) );
  d04nan04ln0b0 syn_86 ( .a(n53), .b(n52), .c(n51), .d(n62), .o1(n54) );
  d04kok01ln0b0 syn_87 ( .b(n57), .c(n56), .a(n55), .d(n54), .o1(n58) );
  d04con02ln0b0 syn_88 ( .c(n61), .d(n60), .a(n59), .b(n58), .o1(n67) );
  d04inn20ln0b0 syn_89 ( .a(n62), .o1(n64) );
  d04kok01ln0b0 syn_90 ( .b(n65), .c(n64), .a(ftap_tms), .d(n63), .o1(n66) );
  d04con04ln0b0 syn_91 ( .b(n69), .c(n68), .d(n67), .a(n66), .o1(N473) );
  d04nob02ln0b0 syn_92 ( .a(n71), .b(n70), .out(N475) );
  d04inn20ln0b0 syn_6 ( .a(stap_fsm_tlrs), .o1(n75) );
  d04fyn0fld0a5 tms_bit_reg_3 ( .d(N471), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(tms_bit_3_0) );
  d04fyn0fld0a5 tms_bit_reg_1 ( .d(N469), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(tms_bit_1_0) );
  d04fyn0fld0a5 tms_bit_reg_0 ( .d(N468), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(tms_bit_0_0) );
  d04fyn0fld0a5 tms_bit_reg_2 ( .d(N470), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(tms_bit_2_0) );
  d04fyn0fld0a5 state_ps_reg_10 ( .d(N483), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_fsm_capture_ir) );
  d04fyn0fld0a5 state_ps_reg_1 ( .d(N474), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(n2) );
  d04fyn0fld0a5 state_ps_reg_2 ( .d(N475), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(state_ps_2_0) );
  d04fyn0fld0a5 state_ps_reg_9 ( .d(N482), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(state_ps_9_0) );
  d04fyn0fld0a5 state_ps_reg_5 ( .d(N478), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(n3) );
  d04fyn0fld0a5 state_ps_reg_6 ( .d(N479), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(state_ps_6_0) );
  d04fyn0fld0a5 state_ps_reg_13 ( .d(N486), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(state_ps_13_0) );
  d04fyn0fld0a5 state_ps_reg_14 ( .d(N487), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(state_ps_14_0) );
  d04fyn0fld0a5 state_ps_reg_7 ( .d(N480), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_fsm_e2dr) );
  d04fyn0fld0a5 state_ps_reg_12 ( .d(N485), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(state_ps_12_0) );
  d04fyn0fld0a5 state_ps_reg_3 ( .d(N476), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_fsm_capture_dr) );
  d04fyn0fld0a5 state_ps_reg_4 ( .d(N477), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_fsm_shift_dr) );
  d04fyn0fld0a5 state_ps_reg_11 ( .d(N484), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_fsm_shift_ir) );
  d04fyn0fld0a5 state_ps_reg_8 ( .d(N481), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_fsm_update_dr) );
  d04fyn0fld0a5 state_ps_reg_15 ( .d(N488), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_fsm_update_ir) );
endmodule


module stap_irreg ( stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir, 
        stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b, 
        stap_irreg_ireg, stap_irreg_ireg_nxt, stap_irreg_serial_out, 
        stap_irreg_shift_reg );
  output [7:0] stap_irreg_ireg;
  output [7:0] stap_irreg_ireg_nxt;
  output [7:0] stap_irreg_shift_reg;
  input stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir,
         stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b;
  output stap_irreg_serial_out;
  wire   n1, n2, n3, n4, n5, n6, n7, N10, n8, n100, n11, n12, n13, n14, n15,
         n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n30, n31,
         n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45,
         n52, n53;

  d04fyn8fld0a5 stap_irreg_ireg_reg_0 ( .d(n32), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[0]) );
  d04non02ln0b0 syn_6 ( .a(stap_fsm_tlrs), .b(n11), .o1(n32) );
  d04non02ln0b0 syn_10 ( .a(stap_fsm_tlrs), .b(n15), .o1(n36) );
  d04non02ln0b0 syn_8 ( .a(stap_fsm_tlrs), .b(n13), .o1(n34) );
  d04non02ln0b0 syn_7 ( .a(stap_fsm_tlrs), .b(n12), .o1(n33) );
  d04non02ln0b0 syn_11 ( .a(stap_fsm_tlrs), .b(n16), .o1(n37) );
  d04nan02ln0b0 syn_4 ( .a(n100), .b(n53), .o1(n31) );
  d04nan02ln0b0 syn_3 ( .a(n8), .b(n53), .o1(n30) );
  d04non02ln0b0 syn_9 ( .a(stap_fsm_tlrs), .b(n14), .o1(n35) );
  d04orn02ln0b0 syn_27 ( .a(N10), .b(stap_fsm_shift_ir), .o(n20) );
  d04orn02ln0b0 syn_29 ( .a(N10), .b(n18), .o(n21) );
  d04con03ln0b0 syn_20 ( .a(n20), .b(n24), .c(n21), .d(n25), .o1(n42) );
  d04con03ln0b0 syn_18 ( .a(n20), .b(n23), .c(n21), .d(n24), .o1(n41) );
  d04con03ln0b0 syn_22 ( .a(n20), .b(n25), .c(n21), .d(n26), .o1(n43) );
  d04con03ln0b0 syn_16 ( .a(n20), .b(n22), .c(n21), .d(n23), .o1(n40) );
  d04con03ln0b0 syn_14 ( .a(n20), .b(n17), .c(n21), .d(n22), .o1(n39) );
  d04con03ln0b0 syn_24 ( .a(n27), .b(n21), .c(n20), .d(n26), .o1(n44) );
  d04cob13ln0b0 syn_26 ( .a(ftap_tdi), .b(n21), .c(n27), .d(n20), .out(n45) );
  d04cak01lnsb0 syn_13 ( .a(stap_irreg_serial_out), .b(n18), .c(N10), .o1(n19)
         );
  d04con01ln0b0 syn_12 ( .b(n17), .c(n18), .a(n19), .o1(n38) );
  d04inn20ln0b0 syn_23 ( .a(n1), .o1(n27) );
  d04inn20ln0b0 syn_25 ( .a(n7), .o1(n17) );
  d04inn20ln0b0 syn_28 ( .a(n6), .o1(n22) );
  d04inn20ln0b0 syn_30 ( .a(n2), .o1(n26) );
  d04inn20ln0b0 syn_31 ( .a(n5), .o1(n23) );
  d04inn20ln0b0 syn_32 ( .a(n3), .o1(n25) );
  d04inn20ln0b0 syn_33 ( .a(stap_fsm_shift_ir), .o1(n18) );
  d04inn20ln0b0 syn_34 ( .a(n4), .o1(n24) );
  d04orn02ln0b0 syn_35 ( .a(stap_fsm_capture_ir), .b(stap_fsm_tlrs), .o(N10)
         );
  d04can03lnsb0 syn_39 ( .a(stap_fsm_update_ir), .b(n1), .c(n52), .d(
        stap_irreg_ireg[7]), .o1(n16) );
  d04inn20ln0b0 syn_40 ( .a(n16), .o1(stap_irreg_ireg_nxt[7]) );
  d04can03lnsb0 syn_41 ( .a(stap_fsm_update_ir), .b(stap_irreg_serial_out), 
        .c(n52), .d(stap_irreg_ireg[0]), .o1(n11) );
  d04inn20ln0b0 syn_42 ( .a(n11), .o1(stap_irreg_ireg_nxt[0]) );
  d04can03lnsb0 syn_43 ( .a(stap_fsm_update_ir), .b(n3), .c(n52), .d(
        stap_irreg_ireg[5]), .o1(n14) );
  d04inn20ln0b0 syn_44 ( .a(n14), .o1(stap_irreg_ireg_nxt[5]) );
  d04can03lnsb0 syn_45 ( .a(stap_fsm_update_ir), .b(n4), .c(n52), .d(
        stap_irreg_ireg[4]), .o1(n13) );
  d04inn20ln0b0 syn_46 ( .a(n13), .o1(stap_irreg_ireg_nxt[4]) );
  d04can03lnsb0 syn_47 ( .a(stap_fsm_update_ir), .b(n2), .c(n52), .d(
        stap_irreg_ireg[6]), .o1(n15) );
  d04inn20ln0b0 syn_48 ( .a(n15), .o1(stap_irreg_ireg_nxt[6]) );
  d04can03lnsb0 syn_49 ( .a(stap_fsm_update_ir), .b(n5), .c(n52), .d(
        stap_irreg_ireg[3]), .o1(n100) );
  d04inn20ln0b0 syn_50 ( .a(n100), .o1(stap_irreg_ireg_nxt[3]) );
  d04can03lnsb0 syn_51 ( .a(stap_fsm_update_ir), .b(n6), .c(n52), .d(
        stap_irreg_ireg[2]), .o1(n8) );
  d04inn20ln0b0 syn_52 ( .a(n8), .o1(stap_irreg_ireg_nxt[2]) );
  d04can03lnsb0 syn_53 ( .a(stap_fsm_update_ir), .b(n7), .c(n52), .d(
        stap_irreg_ireg[1]), .o1(n12) );
  d04inn20ln0b0 syn_54 ( .a(n12), .o1(stap_irreg_ireg_nxt[1]) );
  d04inn20ln0b0 syn_37 ( .a(stap_fsm_tlrs), .o1(n53) );
  d04fyn0fld0a5 shift_reg_reg_1 ( .d(n39), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(n7) );
  d04fyn0fld0a5 shift_reg_reg_2 ( .d(n40), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(n6) );
  d04fyn0cld0a5 shift_reg_reg_0 ( .d(n38), .clk(ftap_tck), .psb(
        powergood_rst_trst_b), .o(stap_irreg_serial_out) );
  d04fyn0fld0a5 shift_reg_reg_7 ( .d(n45), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(n1) );
  d04fyn0fld0a5 shift_reg_reg_3 ( .d(n41), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(n5) );
  d04fyn0fld0a5 shift_reg_reg_6 ( .d(n44), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(n2) );
  d04fyn0fld0a5 shift_reg_reg_4 ( .d(n42), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(n4) );
  d04fyn0fld0a5 shift_reg_reg_5 ( .d(n43), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(n3) );
  d04fyn8fld0a5 stap_irreg_ireg_reg_6 ( .d(n36), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[6]) );
  d04fyn8fld0a5 stap_irreg_ireg_reg_2 ( .d(n30), .clkb(ftap_tck), .rb(1'b1), 
        .psb(powergood_rst_trst_b), .o(stap_irreg_ireg[2]) );
  d04fyn8fld0a5 stap_irreg_ireg_reg_7 ( .d(n37), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[7]) );
  d04fyn8fld0a5 stap_irreg_ireg_reg_1 ( .d(n33), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[1]) );
  d04fyn8fld0a5 stap_irreg_ireg_reg_5 ( .d(n35), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[5]) );
  d04fyn8fld0a5 stap_irreg_ireg_reg_3 ( .d(n31), .clkb(ftap_tck), .rb(1'b1), 
        .psb(powergood_rst_trst_b), .o(stap_irreg_ireg[3]) );
  d04fyn8fld0a5 stap_irreg_ireg_reg_4 ( .d(n34), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[4]) );
  d04inn20ln0b0 syn_36 ( .a(stap_fsm_update_ir), .o1(n52) );
endmodule


module stap_decoder_3 ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n4, n5, n6;

  d04non03lnsb0 syn_2 ( .a(feature_green_en), .b(feature_orange_en), .c(
        feature_red_en), .o1(n6) );
  d04nan04ln0b0 syn_3 ( .a(stap_irreg_ireg[4]), .b(stap_irreg_ireg[3]), .c(
        stap_irreg_ireg[5]), .d(stap_irreg_ireg[6]), .o1(n5) );
  d04nan04ln0b0 syn_4 ( .a(stap_irreg_ireg[7]), .b(stap_irreg_ireg[0]), .c(
        stap_irreg_ireg[2]), .d(stap_irreg_ireg[1]), .o1(n4) );
  d04non03lnsb0 syn_5 ( .a(n6), .b(n5), .c(n4), .o1(decoder_drselect) );
endmodule


module stap_decoder_0 ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n4, n5, n6, n7;

  d04non03lnsb0 syn_2 ( .a(stap_irreg_ireg[4]), .b(stap_irreg_ireg[6]), .c(
        stap_irreg_ireg[5]), .o1(n4) );
  d04nan03lnsb0 syn_3 ( .a(n4), .b(stap_irreg_ireg[3]), .c(stap_irreg_ireg[2]), 
        .o1(n5) );
  d04non02ln0b0 syn_4 ( .a(n5), .b(stap_irreg_ireg[7]), .o1(n6) );
  d04con04ln0b0 syn_5 ( .b(feature_green_en), .c(feature_orange_en), .d(
        feature_red_en), .a(n6), .o1(n7) );
  d04non03lnsb0 syn_6 ( .a(stap_irreg_ireg[0]), .b(stap_irreg_ireg[1]), .c(n7), 
        .o1(decoder_drselect) );
endmodule


module stap_decoder_1 ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n4, n5, n6, n7;

  d04non03lnsb0 syn_2 ( .a(stap_irreg_ireg[3]), .b(stap_irreg_ireg[6]), .c(
        stap_irreg_ireg[4]), .o1(n4) );
  d04nan02ln0b0 syn_3 ( .a(n4), .b(stap_irreg_ireg[5]), .o1(n5) );
  d04non03lnsb0 syn_4 ( .a(stap_irreg_ireg[2]), .b(n5), .c(stap_irreg_ireg[7]), 
        .o1(n6) );
  d04con04ln0b0 syn_5 ( .b(feature_green_en), .c(feature_orange_en), .d(
        feature_red_en), .a(n6), .o1(n7) );
  d04non03lnsb0 syn_6 ( .a(stap_irreg_ireg[0]), .b(stap_irreg_ireg[1]), .c(n7), 
        .o1(decoder_drselect) );
endmodule


module stap_decoder_2 ( stap_irreg_ireg, decoder_drselect, feature_green_en, 
        feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n4, n5, n6, n7;

  d04non03lnsb0 syn_2 ( .a(stap_irreg_ireg[3]), .b(stap_irreg_ireg[6]), .c(
        stap_irreg_ireg[4]), .o1(n4) );
  d04nan03lnsb0 syn_3 ( .a(n4), .b(stap_irreg_ireg[5]), .c(stap_irreg_ireg[0]), 
        .o1(n5) );
  d04non02ln0b0 syn_4 ( .a(n5), .b(stap_irreg_ireg[7]), .o1(n6) );
  d04con04ln0b0 syn_5 ( .b(feature_green_en), .c(feature_orange_en), .d(
        feature_red_en), .a(n6), .o1(n7) );
  d04non03lnsb0 syn_6 ( .a(stap_irreg_ireg[1]), .b(stap_irreg_ireg[2]), .c(n7), 
        .o1(decoder_drselect) );
endmodule


module stap_irdecoder ( powergood_rst_trst_b, stap_irreg_ireg, 
        stap_irreg_ireg_nxt, ftap_tck, feature_green_en, feature_orange_en, 
        feature_red_en, stap_isol_en_b, stap_irdecoder_drselect, 
        tap_swcomp_active, stap_and_all_bits_irreg );
  input [7:0] stap_irreg_ireg;
  input [7:0] stap_irreg_ireg_nxt;
  output [3:0] stap_irdecoder_drselect;
  input powergood_rst_trst_b, ftap_tck, feature_green_en, feature_orange_en,
         feature_red_en, stap_isol_en_b;
  output tap_swcomp_active, stap_and_all_bits_irreg;
  wire   decoder_drselect_3_0, decoder_drselect_2_0, decoder_drselect_1_0,
         decoder_drselect_0_0, irdecoder_drselect_nxt_3_0,
         irdecoder_drselect_nxt_2_0, irdecoder_drselect_nxt_1_0,
         irdecoder_drselect_nxt_0_0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,
         n11, n12;

  stap_decoder_3 generate_decoder_0_i_stap_decoder ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect_0_0), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  stap_decoder_0 generate_decoder_1_i_stap_decoder ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect_1_0), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  stap_decoder_1 generate_decoder_2_i_stap_decoder ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect_2_0), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  stap_decoder_2 generate_decoder_3_i_stap_decoder ( .stap_irreg_ireg(
        stap_irreg_ireg_nxt), .decoder_drselect(decoder_drselect_3_0), 
        .feature_green_en(feature_green_en), .feature_orange_en(
        feature_orange_en), .feature_red_en(feature_red_en) );
  d04fyn8fld0a5 stap_irdecoder_drselect_reg_3 ( .d(irdecoder_drselect_nxt_3_0), 
        .clkb(ftap_tck), .rb(powergood_rst_trst_b), .psb(1'b1), .o(
        stap_irdecoder_drselect[3]) );
  d04fyn8fld0a5 stap_irdecoder_drselect_reg_2 ( .d(irdecoder_drselect_nxt_2_0), 
        .clkb(ftap_tck), .rb(powergood_rst_trst_b), .psb(1'b1), .o(
        stap_irdecoder_drselect[2]) );
  d04fyn8fld0a5 stap_irdecoder_drselect_reg_0 ( .d(irdecoder_drselect_nxt_0_0), 
        .clkb(ftap_tck), .rb(powergood_rst_trst_b), .psb(1'b1), .o(
        stap_irdecoder_drselect[0]) );
  d04fyn8fld0a5 stap_irdecoder_drselect_reg_1 ( .d(irdecoder_drselect_nxt_1_0), 
        .clkb(ftap_tck), .rb(1'b1), .psb(powergood_rst_trst_b), .o(
        stap_irdecoder_drselect[1]) );
  d04orn02ln0b0 syn_5 ( .a(stap_irreg_ireg[1]), .b(stap_irreg_ireg[2]), .o(n2)
         );
  d04inn20ln0b0 syn_7 ( .a(stap_irreg_ireg[6]), .o1(n4) );
  d04nan04ln0b0 syn_10 ( .a(stap_irreg_ireg_nxt[7]), .b(stap_irreg_ireg_nxt[6]), .c(stap_irreg_ireg_nxt[5]), .d(stap_irreg_ireg_nxt[4]), .o1(n7) );
  d04nan04ln0b0 syn_11 ( .a(stap_irreg_ireg_nxt[3]), .b(stap_irreg_ireg_nxt[2]), .c(stap_irreg_ireg_nxt[1]), .d(stap_irreg_ireg_nxt[0]), .o1(n6) );
  d04con03ln0b0 syn_12 ( .a(stap_isol_en_b), .b(n8), .c(n7), .d(n6), .o1(n9)
         );
  d04nob02ln0b0 syn_13 ( .a(decoder_drselect_3_0), .b(n9), .out(
        irdecoder_drselect_nxt_3_0) );
  d04nob02ln0b0 syn_14 ( .a(decoder_drselect_2_0), .b(n9), .out(
        irdecoder_drselect_nxt_2_0) );
  d04nob02ln0b0 syn_15 ( .a(decoder_drselect_1_0), .b(n9), .out(
        irdecoder_drselect_nxt_1_0) );
  d04inn20ln0b0 syn_16 ( .a(decoder_drselect_0_0), .o1(n10) );
  d04con04ln0b0 syn_17 ( .b(irdecoder_drselect_nxt_3_0), .c(
        irdecoder_drselect_nxt_2_0), .d(irdecoder_drselect_nxt_1_0), .a(n10), 
        .o1(irdecoder_drselect_nxt_0_0) );
  d04nan04ln0b0 syn_18 ( .a(stap_irreg_ireg[7]), .b(stap_irreg_ireg[5]), .c(
        stap_irreg_ireg[6]), .d(stap_irreg_ireg[0]), .o1(n12) );
  d04nan04ln0b0 syn_19 ( .a(stap_irreg_ireg[1]), .b(stap_irreg_ireg[2]), .c(
        stap_irreg_ireg[3]), .d(stap_irreg_ireg[4]), .o1(n11) );
  d04non02ln0b0 syn_20 ( .a(n12), .b(n11), .o1(stap_and_all_bits_irreg) );
  d04non02ln0c0 syn_3 ( .a(stap_irreg_ireg[7]), .b(stap_irreg_ireg[3]), .o1(n1) );
  d04nab03ln0c0 syn_4 ( .a(stap_irreg_ireg[4]), .b(n1), .c(stap_irreg_ireg[5]), 
        .out(n3) );
  d04non02ld0c7 syn_6 ( .a(n3), .b(n2), .o1(n5) );
  d04nan02ln0d5 syn_8 ( .a(n5), .b(n4), .o1(n8) );
  d04nan02ld0e0 syn_9 ( .a(n8), .b(stap_isol_en_b), .o1(tap_swcomp_active) );
endmodule


module stap_drreg ( stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, 
        fdfx_powergood, powergood_rst_trst_b, stap_fsm_capture_dr, 
        stap_fsm_shift_dr, stap_fsm_update_dr, stap_selectwir, ftap_slvidcode, 
        stap_irdecoder_drselect, tdr_data_in, tdr_data_out, 
        sftapnw_ftap_secsel, tapc_select, feature_green_en, feature_orange_en, 
        feature_red_en, tapc_wtap_sel, tapc_remove, stap_drreg_tdo, 
        swcompctrl_tdo, swcompstat_tdo, stap_and_all_bits_irreg, rtdr_tap_tdo, 
        tap_rtdr_tdi, tap_rtdr_capture, tap_rtdr_shift, tap_rtdr_update, 
        tap_rtdr_irdec, tap_rtdr_selectir, tap_rtdr_powergood, tap_rtdr_rti, 
        tap_rtdr_prog_rst_b, stap_fsm_rti );
  input [31:0] ftap_slvidcode;
  input [3:0] stap_irdecoder_drselect;
  input [0:0] tdr_data_in;
  output [0:0] tdr_data_out;
  output [0:0] sftapnw_ftap_secsel;
  output [1:0] tapc_select;
  output [0:0] tapc_wtap_sel;
  output [3:0] stap_drreg_tdo;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  input stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, fdfx_powergood,
         powergood_rst_trst_b, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr, stap_selectwir, feature_green_en,
         feature_orange_en, feature_red_en, swcompctrl_tdo, swcompstat_tdo,
         stap_and_all_bits_irreg, stap_fsm_rti;
  output tapc_remove, tap_rtdr_selectir, tap_rtdr_powergood, tap_rtdr_rti;
  wire   bypass_reg, reset_pulse0, reset_pulse1, slvidcode_reg_31_0,
         slvidcode_reg_30_0, slvidcode_reg_29_0, slvidcode_reg_28_0,
         slvidcode_reg_27_0, slvidcode_reg_26_0, slvidcode_reg_25_0,
         slvidcode_reg_24_0, slvidcode_reg_23_0, slvidcode_reg_22_0,
         slvidcode_reg_21_0, slvidcode_reg_20_0, slvidcode_reg_19_0,
         slvidcode_reg_18_0, slvidcode_reg_17_0, slvidcode_reg_16_0,
         slvidcode_reg_15_0, slvidcode_reg_14_0, slvidcode_reg_13_0,
         slvidcode_reg_12_0, slvidcode_reg_11_0, slvidcode_reg_10_0,
         slvidcode_reg_9_0, slvidcode_reg_8_0, slvidcode_reg_7_0,
         slvidcode_reg_6_0, slvidcode_reg_5_0, slvidcode_reg_4_0,
         slvidcode_reg_3_0, slvidcode_reg_2_0, slvidcode_reg_1_0, N65, n1, n3,
         n4, n41, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54,
         n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n650, n66, n67, n68,
         n69, n70, n71, n72, n73, n74, n75, n5, n6, n7, n8, n9, n10, n11, n12,
         n14, n15, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28,
         n30, n31, n32, n33, n34, n35, n37, n38, n39, n40, n42, n76, n77, n78,
         n81, n85;

  d04nob02ln0b0 syn_4 ( .a(n75), .b(N65), .out(n43) );
  d04nan03lnsb0 syn_3 ( .a(n1), .b(n4), .c(n3), .o1(n41) );
  d04nan02ln0b0 syn_12 ( .a(stap_irdecoder_drselect[1]), .b(stap_fsm_shift_dr), 
        .o1(n8) );
  d04cab13ln0b0 syn_13 ( .c(n8), .d(stap_drreg_tdo[1]), .a(n8), .b(
        slvidcode_reg_1_0), .out(n1) );
  d04ann02ln0a5 syn_14 ( .a(stap_fsm_shift_dr), .b(stap_irdecoder_drselect[0]), 
        .o(n6) );
  d04mtk22ln0a5 syn_15 ( .d2(bypass_reg), .d1(ftap_tdi), .s(n6), .o(n75) );
  d04inn20ln0b0 syn_16 ( .a(reset_pulse1), .o1(n7) );
  d04cak01lnsb0 syn_17 ( .a(reset_pulse0), .b(n7), .c(stap_fsm_tlrs), .o1(n4)
         );
  d04nan02ln0b0 syn_18 ( .a(stap_irdecoder_drselect[1]), .b(
        stap_fsm_capture_dr), .o1(n3) );
  d04can16lnsb0 syn_25 ( .a(n31), .b(ftap_slvidcode[3]), .c(n18), .d(
        slvidcode_reg_4_0), .e(slvidcode_reg_3_0), .f(n32), .o1(n9) );
  d04inn20ln0b0 syn_26 ( .a(n9), .o1(n73) );
  d04can16lnsb0 syn_27 ( .a(n31), .b(ftap_slvidcode[5]), .c(n18), .d(
        slvidcode_reg_6_0), .e(slvidcode_reg_5_0), .f(n32), .o1(n10) );
  d04inn20ln0b0 syn_28 ( .a(n10), .o1(n71) );
  d04can16lnsb0 syn_29 ( .a(n31), .b(ftap_slvidcode[4]), .c(n18), .d(
        slvidcode_reg_5_0), .e(slvidcode_reg_4_0), .f(n32), .o1(n11) );
  d04inn20ln0b0 syn_30 ( .a(n11), .o1(n72) );
  d04can16lnsb0 syn_31 ( .a(n31), .b(ftap_slvidcode[6]), .c(n18), .d(
        slvidcode_reg_7_0), .e(slvidcode_reg_6_0), .f(n32), .o1(n12) );
  d04inn20ln0b0 syn_32 ( .a(n12), .o1(n70) );
  d04can16lnsb0 syn_33 ( .a(n31), .b(ftap_slvidcode[2]), .c(n18), .d(
        slvidcode_reg_3_0), .e(slvidcode_reg_2_0), .f(n32), .o1(n14) );
  d04inn20ln0b0 syn_34 ( .a(n14), .o1(n74) );
  d04can16lnsb0 syn_37 ( .a(n31), .b(ftap_slvidcode[8]), .c(n18), .d(
        slvidcode_reg_9_0), .e(slvidcode_reg_8_0), .f(n32), .o1(n15) );
  d04inn20ln0b0 syn_38 ( .a(n15), .o1(n68) );
  d04can16lnsb0 syn_39 ( .a(n31), .b(ftap_slvidcode[7]), .c(n18), .d(
        slvidcode_reg_8_0), .e(slvidcode_reg_7_0), .f(n32), .o1(n17) );
  d04inn20ln0b0 syn_40 ( .a(n17), .o1(n69) );
  d04can16lnsb0 syn_43 ( .a(n31), .b(ftap_slvidcode[19]), .c(n18), .d(
        slvidcode_reg_20_0), .e(slvidcode_reg_19_0), .f(n32), .o1(n19) );
  d04inn20ln0b0 syn_44 ( .a(n19), .o1(n57) );
  d04can16lnsb0 syn_45 ( .a(n31), .b(ftap_slvidcode[15]), .c(n18), .d(
        slvidcode_reg_16_0), .e(slvidcode_reg_15_0), .f(n32), .o1(n20) );
  d04inn20ln0b0 syn_46 ( .a(n20), .o1(n61) );
  d04can16lnsb0 syn_47 ( .a(n31), .b(ftap_slvidcode[11]), .c(n18), .d(
        slvidcode_reg_12_0), .e(slvidcode_reg_11_0), .f(n32), .o1(n21) );
  d04inn20ln0b0 syn_48 ( .a(n21), .o1(n650) );
  d04can16lnsb0 syn_49 ( .a(n31), .b(ftap_slvidcode[16]), .c(n18), .d(
        slvidcode_reg_17_0), .e(slvidcode_reg_16_0), .f(n32), .o1(n22) );
  d04inn20ln0b0 syn_50 ( .a(n22), .o1(n60) );
  d04can16lnsb0 syn_51 ( .a(n31), .b(ftap_slvidcode[13]), .c(n18), .d(
        slvidcode_reg_14_0), .e(slvidcode_reg_13_0), .f(n32), .o1(n23) );
  d04inn20ln0b0 syn_52 ( .a(n23), .o1(n63) );
  d04can16lnsb0 syn_53 ( .a(n31), .b(ftap_slvidcode[17]), .c(n18), .d(
        slvidcode_reg_18_0), .e(slvidcode_reg_17_0), .f(n32), .o1(n24) );
  d04inn20ln0b0 syn_54 ( .a(n24), .o1(n59) );
  d04can16lnsb0 syn_55 ( .a(n31), .b(ftap_slvidcode[10]), .c(n18), .d(
        slvidcode_reg_11_0), .e(slvidcode_reg_10_0), .f(n32), .o1(n25) );
  d04inn20ln0b0 syn_56 ( .a(n25), .o1(n66) );
  d04can16lnsb0 syn_57 ( .a(n31), .b(ftap_slvidcode[9]), .c(n18), .d(
        slvidcode_reg_10_0), .e(slvidcode_reg_9_0), .f(n32), .o1(n26) );
  d04inn20ln0b0 syn_58 ( .a(n26), .o1(n67) );
  d04can16lnsb0 syn_59 ( .a(n31), .b(ftap_slvidcode[14]), .c(n18), .d(
        slvidcode_reg_15_0), .e(slvidcode_reg_14_0), .f(n32), .o1(n27) );
  d04inn20ln0b0 syn_60 ( .a(n27), .o1(n62) );
  d04can16lnsb0 syn_61 ( .a(n31), .b(ftap_slvidcode[18]), .c(n18), .d(
        slvidcode_reg_19_0), .e(slvidcode_reg_18_0), .f(n32), .o1(n28) );
  d04inn20ln0b0 syn_62 ( .a(n28), .o1(n58) );
  d04can16lnsb0 syn_63 ( .a(n31), .b(ftap_slvidcode[12]), .c(n18), .d(
        slvidcode_reg_13_0), .e(slvidcode_reg_12_0), .f(n32), .o1(n30) );
  d04inn20ln0b0 syn_64 ( .a(n30), .o1(n64) );
  d04can16lnsb0 syn_67 ( .a(n31), .b(ftap_slvidcode[21]), .c(n18), .d(
        slvidcode_reg_22_0), .e(slvidcode_reg_21_0), .f(n32), .o1(n33) );
  d04inn20ln0b0 syn_68 ( .a(n33), .o1(n55) );
  d04can16lnsb0 syn_69 ( .a(n31), .b(ftap_slvidcode[20]), .c(n18), .d(
        slvidcode_reg_21_0), .e(slvidcode_reg_20_0), .f(n32), .o1(n34) );
  d04inn20ln0b0 syn_70 ( .a(n34), .o1(n56) );
  d04can16lnsb0 syn_71 ( .a(n31), .b(ftap_slvidcode[22]), .c(n18), .d(
        slvidcode_reg_23_0), .e(slvidcode_reg_22_0), .f(n32), .o1(n35) );
  d04inn20ln0b0 syn_72 ( .a(n35), .o1(n54) );
  d04can16lnsb0 syn_73 ( .a(n31), .b(ftap_slvidcode[24]), .c(n18), .d(
        slvidcode_reg_25_0), .e(slvidcode_reg_24_0), .f(n32), .o1(n37) );
  d04inn20ln0b0 syn_74 ( .a(n37), .o1(n52) );
  d04can16lnsb0 syn_75 ( .a(n31), .b(ftap_slvidcode[23]), .c(n18), .d(
        slvidcode_reg_24_0), .e(slvidcode_reg_23_0), .f(n32), .o1(n38) );
  d04inn20ln0b0 syn_76 ( .a(n38), .o1(n53) );
  d04can16lnsb0 syn_77 ( .a(n31), .b(ftap_slvidcode[25]), .c(n18), .d(
        slvidcode_reg_26_0), .e(slvidcode_reg_25_0), .f(n32), .o1(n39) );
  d04inn20ln0b0 syn_78 ( .a(n39), .o1(n51) );
  d04can16lnsb0 syn_79 ( .a(n31), .b(ftap_slvidcode[27]), .c(n18), .d(
        slvidcode_reg_28_0), .e(slvidcode_reg_27_0), .f(n32), .o1(n40) );
  d04inn20ln0b0 syn_80 ( .a(n40), .o1(n49) );
  d04can16lnsb0 syn_81 ( .a(n31), .b(ftap_slvidcode[26]), .c(n18), .d(
        slvidcode_reg_27_0), .e(slvidcode_reg_26_0), .f(n32), .o1(n42) );
  d04inn20ln0b0 syn_82 ( .a(n42), .o1(n50) );
  d04can16lnsb0 syn_83 ( .a(n31), .b(ftap_slvidcode[28]), .c(n18), .d(
        slvidcode_reg_29_0), .e(slvidcode_reg_28_0), .f(n32), .o1(n76) );
  d04inn20ln0b0 syn_84 ( .a(n76), .o1(n48) );
  d04can16lnsb0 syn_85 ( .a(n31), .b(ftap_slvidcode[30]), .c(n18), .d(
        slvidcode_reg_31_0), .e(slvidcode_reg_30_0), .f(n32), .o1(n77) );
  d04inn20ln0b0 syn_86 ( .a(n77), .o1(n46) );
  d04can16lnsb0 syn_87 ( .a(n31), .b(ftap_slvidcode[29]), .c(n18), .d(
        slvidcode_reg_30_0), .e(slvidcode_reg_29_0), .f(n32), .o1(n78) );
  d04inn20ln0b0 syn_88 ( .a(n78), .o1(n47) );
  d04can16lnsb0 syn_89 ( .a(n31), .b(ftap_slvidcode[31]), .c(n18), .d(ftap_tdi), .e(slvidcode_reg_31_0), .f(n32), .o1(n81) );
  d04inn20ln0b0 syn_90 ( .a(n81), .o1(n45) );
  d04can16lnsb0 syn_91 ( .a(n31), .b(ftap_slvidcode[1]), .c(n32), .d(
        slvidcode_reg_1_0), .e(slvidcode_reg_2_0), .f(n18), .o1(n85) );
  d04inn20ln0b0 syn_92 ( .a(n85), .o1(n44) );
  d04aon01ln0b0 syn_93 ( .a(stap_fsm_capture_dr), .b(
        stap_irdecoder_drselect[0]), .c(stap_fsm_tlrs), .o(N65) );
  d04oan01ln0b0 syn_94 ( .b(stap_irdecoder_drselect[0]), .c(
        stap_and_all_bits_irreg), .a(bypass_reg), .o(stap_drreg_tdo[0]) );
  d04fyn0fld0a5 slvidcode_reg_reg_2 ( .d(n74), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_2_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_17 ( .d(n59), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_17_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_21 ( .d(n55), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_21_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_24 ( .d(n52), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_24_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_29 ( .d(n47), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_29_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_20 ( .d(n56), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_20_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_8 ( .d(n68), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_8_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_11 ( .d(n650), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_11_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_15 ( .d(n61), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_15_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_22 ( .d(n54), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_22_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_7 ( .d(n69), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_7_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_30 ( .d(n46), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_30_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_14 ( .d(n62), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_14_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_31 ( .d(n45), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_31_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_16 ( .d(n60), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_16_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_18 ( .d(n58), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_18_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_10 ( .d(n66), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_10_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_25 ( .d(n51), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_25_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_19 ( .d(n57), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_19_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_9 ( .d(n67), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_9_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_28 ( .d(n48), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_28_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_3 ( .d(n73), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_3_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_26 ( .d(n50), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_26_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_23 ( .d(n53), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_23_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_27 ( .d(n49), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_27_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_5 ( .d(n71), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_5_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_6 ( .d(n70), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_6_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_4 ( .d(n72), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_4_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_12 ( .d(n64), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_12_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_13 ( .d(n63), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_13_0) );
  d04fyn0fld0a5 slvidcode_reg_reg_1 ( .d(n44), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(slvidcode_reg_1_0) );
  d04fyn0fld0a5 reset_pulse0_reg ( .d(1'b1), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(reset_pulse0) );
  d04fyn0fld0a5 reset_pulse1_reg ( .d(reset_pulse0), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(reset_pulse1) );
  d04fyn0cld0a5 slvidcode_reg_reg_0 ( .d(n41), .clk(ftap_tck), .psb(
        powergood_rst_trst_b), .o(stap_drreg_tdo[1]) );
  d04fyn0fld0a5 bypass_reg_reg ( .d(n43), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(bypass_reg) );
  d04nan02ld0c7 syn_19 ( .a(n4), .b(n3), .o1(n31) );
  d04non02ld0c7 syn_23 ( .a(n18), .b(n31), .o1(n32) );
  d04inn20ln0b0 syn_7 ( .a(swcompctrl_tdo), .o1(n5) );
  d04bfn00ln0a5 syn_5 ( .a(swcompstat_tdo), .o(stap_drreg_tdo[3]) );
  d04inn20ln0b0 syn_8 ( .a(n5), .o1(stap_drreg_tdo[2]) );
  d04non02ld0c7 syn_21 ( .a(n31), .b(n8), .o1(n18) );
endmodule


module stap_tdomux ( stap_drreg_tdo, stap_fsm_shift_dr, stap_fsm_shift_ir, 
        stap_irdecoder_drselect, stap_irreg_serial_out, stap_fsm_tlrs, 
        ftap_tck, powergood_rst_trst_b, swcomp_stap_post_tdo, 
        tap_swcomp_active, stap_mux_tdo, tdo_dr, stap_tdomux_tdoen );
  input [3:0] stap_drreg_tdo;
  input [3:0] stap_irdecoder_drselect;
  input stap_fsm_shift_dr, stap_fsm_shift_ir, stap_irreg_serial_out,
         stap_fsm_tlrs, ftap_tck, powergood_rst_trst_b, swcomp_stap_post_tdo,
         tap_swcomp_active;
  output stap_mux_tdo, tdo_dr, stap_tdomux_tdoen;
  wire   stap_mux_tdo_int, stap_mux_tdo_preflop_int, n6, n9, n10, n11, n1, n2,
         n3, n4, n5, n7, n12, n13;

  d04fyn8fld0a5 stap_tdomux_tdoen_reg ( .d(n9), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_tdomux_tdoen) );
  d04mtk22ln0a5 i_stap_ctech_lib_mux_2to1_tdo_posedge_i_ctech_lib_mux_2to1_ctech_lib_mux_2to1_dcszo1 ( 
        .d2(stap_mux_tdo_int), .d1(stap_mux_tdo_preflop_int), .s(1'b0), .o(
        stap_mux_tdo) );
  d04non02ln0b0 syn_3 ( .a(n6), .b(stap_fsm_tlrs), .o1(n9) );
  d04can03lnsb0 syn_6 ( .a(stap_drreg_tdo[0]), .b(stap_irdecoder_drselect[0]), 
        .c(stap_drreg_tdo[1]), .d(stap_irdecoder_drselect[1]), .o1(n1) );
  d04inn20ln0b0 syn_8 ( .a(tdo_dr), .o1(n4) );
  d04cak02ld0c7 syn_10 ( .a(tap_swcomp_active), .b(n4), .c(stap_fsm_shift_ir), 
        .d(n3), .o1(n5) );
  d04nob03ln0b0 syn_12 ( .a(powergood_rst_trst_b), .b(stap_fsm_tlrs), .c(n12), 
        .out(stap_mux_tdo_preflop_int) );
  d04non02ln0b0 syn_13 ( .a(stap_fsm_shift_ir), .b(stap_fsm_shift_dr), .o1(n6)
         );
  d04nan02ln0b0 syn_14 ( .a(n6), .b(stap_mux_tdo_int), .o1(n7) );
  d04can03ld0c7 syn_5 ( .a(stap_drreg_tdo[2]), .b(stap_irdecoder_drselect[2]), 
        .c(stap_drreg_tdo[3]), .d(stap_irdecoder_drselect[3]), .o1(n2) );
  d04nob02ln0b0 syn_4 ( .a(n11), .b(stap_fsm_tlrs), .out(n10) );
  d04non02ln0c0 syn_9 ( .a(swcomp_stap_post_tdo), .b(tap_swcomp_active), .o1(
        n3) );
  d04con01ln0b0 syn_15 ( .b(n12), .c(n6), .a(n7), .o1(n11) );
  d04nob02ln0b5 syn_11 ( .a(n13), .b(n5), .out(n12) );
  d04nan02ln0b0 syn_18 ( .a(stap_irreg_serial_out), .b(stap_fsm_shift_ir), 
        .o1(n13) );
  d04fyn8fld0a5 stap_mux_tdo_int_reg ( .d(n10), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_mux_tdo_int) );
  d04nan02ln0c0 syn_7 ( .a(n2), .b(n1), .o1(tdo_dr) );
endmodule


module stap_glue ( ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi, 
        stap_tdomux_tdoen, sntapnw_atap_tdo_en, pre_tdo, powergood_rst_trst_b, 
        atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms, 
        ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, atapsslv_tdoen, 
        sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b, 
        sntapnw_ftap_tdi2, sntapnw_atap_tdo2, sntapnw_atap_tdo2_en, 
        sn_fwtap_wrck, stap_mux_tdo, tapc_select, tapc_wtap_sel, tapc_remove, 
        stap_wtapnw_tdo );
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [1:0] tapc_select;
  input [0:0] tapc_wtap_sel;
  input ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi,
         stap_tdomux_tdoen, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms,
         ftapsslv_trst_b, ftapsslv_tdi, sntapnw_atap_tdo2, stap_mux_tdo,
         tapc_remove, stap_wtapnw_tdo;
  output pre_tdo, powergood_rst_trst_b, atap_tdoen, sntapnw_ftap_tck,
         sntapnw_ftap_tms, sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo,
         atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2,
         sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sn_fwtap_wrck;
  wire   n5, n9;

  d04gbf00ld0c0 i_stap_ctech_lib_clk_buf_tck2_i_ctech_lib_clk_buf_ctech_lib_clk_buf_dcszo1 ( 
        .clk(ftapsslv_tck), .clkout(sntapnw_ftap_tck2) );
  d04ann02lnsb5 i_stap_ctech_lib_dq_i_ctech_lib_dq_ctech_lib_dq_dcszo1 ( .a(
        ftap_trst_b), .b(fdfx_powergood), .o(powergood_rst_trst_b) );
  d04inn20ln0b0 syn_7 ( .a(n9), .o1(sntapnw_ftap_tms2) );
  d04inn20ln0b0 syn_8 ( .a(ftapsslv_tms), .o1(n9) );
  d04inn20ln0b0 syn_11 ( .a(n5), .o1(sntapnw_ftap_tdi2) );
  d04inn20ln0b0 syn_12 ( .a(ftapsslv_tdi), .o1(n5) );
  d04bfn00ln0a5 syn_3 ( .a(sntapnw_atap_tdo2_en[0]), .o(atapsslv_tdoen) );
  d04bfn00ln0a5 syn_4 ( .a(ftapsslv_trst_b), .o(sntapnw_ftap_trst2_b) );
  d04bfn00ln0a5 syn_5 ( .a(sntapnw_atap_tdo2), .o(atapsslv_tdo) );
  d04bfn00ln0a5 syn_6 ( .a(stap_mux_tdo), .o(pre_tdo) );
  d04bfn00ln0a5 syn_9 ( .a(stap_tdomux_tdoen), .o(atap_tdoen) );
endmodule


module stap_dfxsecure_plugin ( fdfx_powergood, fdfx_secure_policy, 
        fdfx_earlyboot_exit, fdfx_policy_update, dfxsecure_feature_en, 
        visa_all_dis, visa_customer_dis, sb_policy_ovr_value, 
        oem_secure_policy );
  input [3:0] fdfx_secure_policy;
  output [2:0] dfxsecure_feature_en;
  input [4:0] sb_policy_ovr_value;
  input [3:0] oem_secure_policy;
  input fdfx_powergood, fdfx_earlyboot_exit, fdfx_policy_update;
  output visa_all_dis, visa_customer_dis;
  wire   dfxsecure_feature_lch_3_0, dfxsecure_feature_lch_2_0,
         dfxsecure_feature_lch_1_0, dfxsecure_feature_lch_0_0, n6, n7, n8, n9,
         n10, n11, n12;

  d04inn20ln0b0 syn_3 ( .a(dfxsecure_feature_lch_0_0), .o1(n6) );
  d04ann02ln0a5 syn_4 ( .a(dfxsecure_feature_lch_1_0), .b(n6), .o(n12) );
  d04kok01ln0b0 syn_5 ( .b(dfxsecure_feature_lch_1_0), .c(n6), .a(
        dfxsecure_feature_lch_2_0), .d(n12), .o1(n7) );
  d04inn20ln0b0 syn_6 ( .a(fdfx_earlyboot_exit), .o1(n9) );
  d04non03lnsb0 syn_7 ( .a(dfxsecure_feature_lch_3_0), .b(n7), .c(n9), .o1(
        dfxsecure_feature_en[2]) );
  d04ann02ln0a5 syn_8 ( .a(dfxsecure_feature_lch_2_0), .b(
        dfxsecure_feature_lch_0_0), .o(n10) );
  d04non02ln0b0 syn_9 ( .a(dfxsecure_feature_lch_3_0), .b(n10), .o1(n8) );
  d04cak02ln0b0 syn_10 ( .a(n10), .b(dfxsecure_feature_lch_1_0), .c(n9), .d(n8), .o1(dfxsecure_feature_en[1]) );
  d04cak04ln0b0 syn_11 ( .a(dfxsecure_feature_lch_3_0), .b(
        dfxsecure_feature_lch_1_0), .c(n10), .d(n9), .o1(n11) );
  d04con04ln0b0 syn_12 ( .b(dfxsecure_feature_lch_2_0), .c(
        dfxsecure_feature_lch_3_0), .d(n12), .a(n11), .o1(
        dfxsecure_feature_en[0]) );
  d04lyn0fld0a5 dfxsecure_feature_lch_reg_0 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[0]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_0_0) );
  d04lyn0fld0a5 dfxsecure_feature_lch_reg_2 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[2]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_2_0) );
  d04lyn0fld0a5 dfxsecure_feature_lch_reg_1 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[1]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_1_0) );
  d04lyn0fld0a5 dfxsecure_feature_lch_reg_3 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[3]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_3_0) );
endmodule


module stap_tapswcomp ( jtclk, jtrst_b, tdi, test_logic_reset, capture_dr, 
        shift_dr, exit2_dr, tap_swcomp_active, cmplim_hi, cmplim_lo, 
        cmplim_mask, cmp_mirror_sel, cmp_tdo_sel, cmp_tdo_forcelo, cmpen_main, 
        cmpsel_signed, cmpsel_sgnmag, cmpen_le_limhi, cmpen_ge_limlo, 
        cmpen_blk_multi_fail, cmp_firstfail_cnt, cmp_sticky_fail_hi, 
        cmp_sticky_fail_lo, tdo );
  input [9:0] cmplim_hi;
  input [9:0] cmplim_lo;
  input [9:0] cmplim_mask;
  output [7:0] cmp_firstfail_cnt;
  input jtclk, jtrst_b, tdi, test_logic_reset, capture_dr, shift_dr, exit2_dr,
         tap_swcomp_active, cmp_mirror_sel, cmp_tdo_sel, cmp_tdo_forcelo,
         cmpen_main, cmpsel_signed, cmpsel_sgnmag, cmpen_le_limhi,
         cmpen_ge_limlo, cmpen_blk_multi_fail;
  output cmp_sticky_fail_hi, cmp_sticky_fail_lo, tdo;
  wire   serial_windowreg_9_0, serial_windowreg_8_0, serial_windowreg_7_0,
         serial_windowreg_6_0, serial_windowreg_5_0, serial_windowreg_4_0,
         serial_windowreg_3_0, serial_windowreg_2_0, serial_windowreg_1_0,
         serial_windowreg_0_0, N22, N159, N166, N167, N168, N169, N170, N171,
         N172, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14,
         n195, n196, n197, n198, n199, n200, n201, n202, n203, n204, n205,
         n206, n207, n208, n209, n210, n211, n212, n15, n16, n17, n18, n21,
         n220, n23, n25, n27, n28, n29, n31, n32, n36, n37, n39, n41, n42, n43,
         n44, n45, n46, n47, n48, n49, n50, n51, n53, n54, n55, n56, n57, n58,
         n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n70, n71, n72, n73,
         n75, n76, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89,
         n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n101, n102, n103,
         n105, n106, n107, n108, n109, n111, n112, n113, n114, n115, n116,
         n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127,
         n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138,
         n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149,
         n151, n152, n153, n154, n155, n156, n157, n158, n1590, n160, n161,
         n162, n163, n164, n165, n1660, n1670, n1680, n1690, n1700, n1710,
         n1720, n173, n174, n175, n176, n177, n178, n180, n181, n184, n185,
         n186, n187, n188, n189, n190, n191, n192, n213, n214, n215, n216,
         n217, n218, n221, n222, n224, n225, n226, n227, n228, n229, n230,
         n231, n232, n233, n234, n235, n236, n237, n238, n239, n240, n241,
         n242, n244, n246, n247, n248, n249, n250, n251, n252, n253, n254,
         n255, n256, n257, n258, n259, n260, n261, n262, n263, n264, n265,
         n266, n267, n268, n269, n270, n271, n272, n273, n274, n275, n276,
         n277, n278, n279, n280, n281, n282, n283, n284, n285, n286, n287,
         n288, n289, n290, n291, n292, n293, n294, n295, n296, n297, n298,
         n299, n300, n301, n302, n303, n304, n305, n306, n307, n308, n310,
         n311, n312, n313, n314, n316, n317, n318, n319, n320, n321, n322,
         n323, n324, n325, n326, n327, n328, n329, n330, n331, n333, n334,
         n335, n336, n337, n338, n339, n340, n341, n342, n343, n344, n345,
         n346, n347, n348, n349, n350, n351, n352, n353, n354, n355, n357,
         n358, n359, n360, n361, n362, n363, n364, n365, n366, n367, n368,
         n369, n370, n372, n373, n374, n375, n376, n377, n378, n379, n380;

  d04aon11ln0b0 syn_3 ( .a(serial_windowreg_1_0), .b(n1), .c(n2), .o(n195) );
  d04aon11ln0b0 syn_5 ( .a(serial_windowreg_3_0), .b(n1), .c(n3), .o(n196) );
  d04aon11ln0b0 syn_7 ( .a(serial_windowreg_4_0), .b(n1), .c(n4), .o(n197) );
  d04aon11ln0b0 syn_9 ( .a(serial_windowreg_6_0), .b(n1), .c(n5), .o(n198) );
  d04aon11ln0b0 syn_11 ( .a(serial_windowreg_7_0), .b(n1), .c(n6), .o(n199) );
  d04aon11ln0b0 syn_13 ( .a(serial_windowreg_8_0), .b(n1), .c(n7), .o(n200) );
  d04aon03lnsa5 syn_19 ( .a(n10), .b(cmp_firstfail_cnt[4]), .c(n11), .d(N169), 
        .o(n205) );
  d04aon03lnsa5 syn_20 ( .a(n10), .b(cmp_firstfail_cnt[5]), .c(n11), .d(N170), 
        .o(n206) );
  d04aon03lnsa5 syn_18 ( .a(n10), .b(cmp_firstfail_cnt[3]), .c(n11), .d(N168), 
        .o(n204) );
  d04aon03lnsa5 syn_21 ( .a(n10), .b(cmp_firstfail_cnt[6]), .c(n11), .d(N171), 
        .o(n207) );
  d04aon03lnsa5 syn_17 ( .a(n10), .b(cmp_firstfail_cnt[2]), .c(n11), .d(N167), 
        .o(n203) );
  d04aon03lnsa5 syn_22 ( .a(n10), .b(cmp_firstfail_cnt[7]), .c(n11), .d(N172), 
        .o(n208) );
  d04aon03lnsa5 syn_16 ( .a(n10), .b(cmp_firstfail_cnt[1]), .c(n11), .d(N166), 
        .o(n202) );
  d04non02ln0b0 syn_33 ( .a(N22), .b(n14), .o1(n12) );
  d04non02ln0b0 syn_31 ( .a(N22), .b(n1), .o1(n13) );
  d04aon03lnsa5 syn_30 ( .a(serial_windowreg_9_0), .b(n12), .c(n13), .d(tdi), 
        .o(n212) );
  d04aon03lnsa5 syn_29 ( .a(n12), .b(serial_windowreg_5_0), .c(n13), .d(
        serial_windowreg_6_0), .o(n211) );
  d04aon03lnsa5 syn_28 ( .a(n12), .b(serial_windowreg_2_0), .c(n13), .d(
        serial_windowreg_3_0), .o(n210) );
  d04aon03lnsa5 syn_27 ( .a(n12), .b(serial_windowreg_0_0), .c(n13), .d(
        serial_windowreg_1_0), .o(n209) );
  d04cak01lnsb0 syn_6 ( .a(serial_windowreg_4_0), .b(n14), .c(N22), .o1(n3) );
  d04cak01lnsb0 syn_12 ( .a(serial_windowreg_8_0), .b(n14), .c(N22), .o1(n6)
         );
  d04cak01lnsb0 syn_8 ( .a(serial_windowreg_5_0), .b(n14), .c(N22), .o1(n4) );
  d04cak01lnsb0 syn_4 ( .a(serial_windowreg_2_0), .b(n14), .c(N22), .o1(n2) );
  d04cak01lnsb0 syn_14 ( .a(serial_windowreg_9_0), .b(n14), .c(N22), .o1(n7)
         );
  d04cak01lnsb0 syn_10 ( .a(serial_windowreg_7_0), .b(n14), .c(N22), .o1(n5)
         );
  d04fyn0fld5e0 cmp_firstfail_cnt_reg_5 ( .d(n206), .clk(jtclk), .rb(jtrst_b), 
        .psb(1'b1), .o(cmp_firstfail_cnt[5]) );
  d04fyn0fld5e0 cmp_firstfail_cnt_reg_4 ( .d(n205), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(cmp_firstfail_cnt[4]) );
  d04fyn0fld5e0 cmp_firstfail_cnt_reg_7 ( .d(n208), .clk(jtclk), .rb(jtrst_b), 
        .psb(1'b1), .o(cmp_firstfail_cnt[7]) );
  d04fyn0fld5e0 cmp_firstfail_cnt_reg_6 ( .d(n207), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(cmp_firstfail_cnt[6]) );
  d04fyn0fld5e0 cmp_firstfail_cnt_reg_3 ( .d(n204), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(cmp_firstfail_cnt[3]) );
  d04fyn0fld5e0 cmp_firstfail_cnt_reg_2 ( .d(n203), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(cmp_firstfail_cnt[2]) );
  d04fyn0fld5e0 cmp_firstfail_cnt_reg_0 ( .d(n201), .clk(jtclk), .rb(jtrst_b), 
        .psb(1'b1), .o(cmp_firstfail_cnt[0]) );
  d04cab13ldsb5 syn_15 ( .c(n8), .d(cmp_firstfail_cnt[0]), .a(
        cmp_firstfail_cnt[0]), .b(n9), .out(n201) );
  d04nan02ln0b0 syn_24 ( .a(tap_swcomp_active), .b(exit2_dr), .o1(n15) );
  d04nab02ln0c0 syn_25 ( .a(test_logic_reset), .b(n15), .out(n323) );
  d04inn20ln0b0 syn_26 ( .a(cmpen_ge_limlo), .o1(n338) );
  d04inn20ln0b0 syn_34 ( .a(serial_windowreg_3_0), .o1(n16) );
  d04mkn22ld0e5 syn_35 ( .d2(n16), .d1(serial_windowreg_6_0), .s(
        cmp_mirror_sel), .out(n1710) );
  d04inn20ln0b0 syn_37 ( .a(serial_windowreg_2_0), .o1(n17) );
  d04inn20ln0b0 syn_39 ( .a(serial_windowreg_7_0), .o1(n18) );
  d04non02ln0b3 syn_48 ( .a(cmplim_mask[0]), .b(cmplim_mask[3]), .o1(n45) );
  d04inn20ln0b0 syn_50 ( .a(n67), .o1(n27) );
  d04inn20ln0b0 syn_52 ( .a(serial_windowreg_9_0), .o1(n23) );
  d04inn20ln0b0 syn_56 ( .a(serial_windowreg_4_0), .o1(n25) );
  d04nab02lnsb0 syn_61 ( .a(n42), .b(n1720), .out(n93) );
  d04inn20ln0b0 syn_66 ( .a(serial_windowreg_1_0), .o1(n31) );
  d04inn20ln0b0 syn_69 ( .a(n128), .o1(n39) );
  d04non02ld0c7 syn_75 ( .a(n231), .b(n228), .o1(n237) );
  d04nan02ln0b0 syn_76 ( .a(cmplim_mask[0]), .b(cmplim_mask[1]), .o1(n51) );
  d04nan02ln0b0 syn_77 ( .a(n186), .b(n51), .o1(n161) );
  d04inn20ln0b0 syn_80 ( .a(serial_windowreg_7_0), .o1(n36) );
  d04cak02ld0c7 syn_84 ( .a(n39), .b(n125), .c(n237), .d(n158), .o1(n49) );
  d04inn20ln0b0 syn_85 ( .a(serial_windowreg_6_0), .o1(n41) );
  d04non02ln0b0 syn_88 ( .a(n45), .b(n42), .o1(n43) );
  d04nan02ln0b0 syn_89 ( .a(n1720), .b(n43), .o1(n78) );
  d04inn20ln0b0 syn_90 ( .a(serial_windowreg_4_0), .o1(n44) );
  d04mkn22ln0d0 syn_91 ( .d2(n44), .d1(serial_windowreg_5_0), .s(
        cmp_mirror_sel), .out(n79) );
  d04nan02ln0b0 syn_92 ( .a(n45), .b(n55), .o1(n46) );
  d04inn20ln0b0 syn_97 ( .a(n51), .o1(n54) );
  d04inn00ln0b5 syn_105 ( .a(n231), .o1(n230) );
  d04inn20ln0b0 syn_106 ( .a(serial_windowreg_9_0), .o1(n61) );
  d04nan02ln0b0 syn_113 ( .a(n186), .b(cmplim_mask[1]), .o1(n65) );
  d04nan02ln0b0 syn_115 ( .a(n66), .b(cmplim_mask[3]), .o1(n68) );
  d04nob02ln0b0 syn_120 ( .a(cmpsel_sgnmag), .b(n358), .out(n108) );
  d04nab02lnsb0 syn_122 ( .a(cmpsel_sgnmag), .b(cmpsel_signed), .out(n175) );
  d04inn20ln0b0 syn_123 ( .a(n175), .o1(n76) );
  d04inn20ln0b0 syn_127 ( .a(n78), .o1(n87) );
  d04inn20ln0b0 syn_131 ( .a(n56), .o1(n95) );
  d04nan02ln0b0 syn_134 ( .a(n1710), .b(n81), .o1(n83) );
  d04non02ln0c0 syn_136 ( .a(n83), .b(n1660), .o1(n221) );
  d04cxo02ln0a5 syn_140 ( .clk1(n116), .clk2(n115), .clkout(n86) );
  d04inn20ln0b0 syn_148 ( .a(n93), .o1(n99) );
  d04nan02ln0b0 syn_150 ( .a(n94), .b(n221), .o1(n96) );
  d04cxo02ln0a5 syn_151 ( .clk1(n96), .clk2(n95), .clkout(n97) );
  d04inn20ln0b0 syn_152 ( .a(n97), .o1(n98) );
  d04nan03lnsb0 syn_154 ( .a(n132), .b(cmpsel_signed), .c(n99), .o1(n101) );
  d04kok01ln0b0 syn_155 ( .b(cmplim_mask[5]), .c(cmpsel_signed), .a(n101), .d(
        n56), .o1(n102) );
  d04non02ld0c7 syn_156 ( .a(n103), .b(n102), .o1(n303) );
  d04inn20ln0b0 syn_158 ( .a(cmplim_lo[7]), .o1(n122) );
  d04inn20ln0b0 syn_161 ( .a(n175), .o1(n236) );
  d04nan02ln0b0 syn_162 ( .a(n236), .b(n378), .o1(n106) );
  d04kok01ln0b0 syn_164 ( .b(cmpsel_signed), .c(cmplim_mask[7]), .a(n106), .d(
        n126), .o1(n107) );
  d04inn20ln0b0 syn_165 ( .a(n107), .o1(n113) );
  d04inn20ln0b0 syn_166 ( .a(n108), .o1(n109) );
  d04inn20ln0b0 syn_173 ( .a(n126), .o1(n117) );
  d04xnb02ln0a5 syn_174 ( .a(n127), .b(n117), .out(n118) );
  d04inn20ln0b0 syn_182 ( .a(n125), .o1(n135) );
  d04inn20ln0b0 syn_185 ( .a(n128), .o1(n129) );
  d04xnb02ln0a5 syn_187 ( .a(n130), .b(n133), .out(n131) );
  d04orn02ln0b0 syn_190 ( .a(cmplim_mask[8]), .b(cmpsel_signed), .o(n134) );
  d04inn00ln0b5 syn_192 ( .a(n136), .o1(n137) );
  d04inn20ln0b0 syn_198 ( .a(n143), .o1(n145) );
  d04nan03lnsb0 syn_199 ( .a(n145), .b(n378), .c(n144), .o1(n146) );
  d04non03lnsb0 syn_202 ( .a(n143), .b(cmpsel_signed), .c(cmplim_mask[9]), 
        .o1(n151) );
  d04inn20ln0b0 syn_204 ( .a(cmplim_lo[9]), .o1(n152) );
  d04non02ln0b0 syn_208 ( .a(n274), .b(cmplim_lo[8]), .o1(n153) );
  d04inn20ln0b0 syn_211 ( .a(n158), .o1(n160) );
  d04non02ln0b0 syn_212 ( .a(cmplim_mask[2]), .b(cmpsel_signed), .o1(n157) );
  d04cab13ln0b0 syn_213 ( .c(n158), .d(n236), .a(n81), .b(n157), .out(n1590)
         );
  d04con01ln0b0 syn_214 ( .b(n160), .c(n235), .a(n1590), .o1(n164) );
  d04inn20ln0b0 syn_215 ( .a(n161), .o1(n162) );
  d04inn20ln0b0 syn_219 ( .a(n1660), .o1(n178) );
  d04inn20ln0b0 syn_220 ( .a(n81), .o1(n1670) );
  d04non02ln0b3 syn_222 ( .a(n247), .b(n1680), .o1(n1690) );
  d04non02ld0c7 syn_223 ( .a(n1700), .b(n1690), .o1(n296) );
  d04inn20ln0b0 syn_224 ( .a(n1710), .o1(n185) );
  d04nan02ln0b0 syn_225 ( .a(n1720), .b(cmpsel_signed), .o1(n173) );
  d04non02ln0b0 syn_226 ( .a(n174), .b(n173), .o1(n177) );
  d04con03ln0b0 syn_227 ( .a(n175), .b(n186), .c(cmplim_mask[3]), .d(
        cmpsel_signed), .o1(n176) );
  d04non02ln0b0 syn_228 ( .a(n177), .b(n176), .o1(n184) );
  d04nan02ln0b0 syn_229 ( .a(n81), .b(n178), .o1(n181) );
  d04non02ldsf0 syn_235 ( .a(n189), .b(n188), .o1(n297) );
  d04nan02ln0c0 syn_237 ( .a(n297), .b(cmplim_lo[3]), .o1(n253) );
  d04inn20ln0b0 syn_238 ( .a(n190), .o1(n213) );
  d04inn20ln0b0 syn_239 ( .a(n213), .o1(n191) );
  d04nan02ln0b0 syn_240 ( .a(n229), .b(n191), .o1(n218) );
  d04inn20ln0b0 syn_241 ( .a(n94), .o1(n192) );
  d04nan02ln0b0 syn_242 ( .a(n213), .b(n192), .o1(n215) );
  d04cab13ln0b0 syn_244 ( .c(n213), .d(n236), .a(cmplim_mask[4]), .b(n358), 
        .out(n214) );
  d04xnb02ln0a5 syn_249 ( .a(n221), .b(n94), .out(n222) );
  d04non02ln0b3 syn_250 ( .a(n247), .b(n222), .o1(n224) );
  d04non02ld0c7 syn_251 ( .a(n225), .b(n224), .o1(n298) );
  d04xnb02ln0a5 syn_255 ( .a(n364), .b(n230), .out(n233) );
  d04non03lnsb0 syn_256 ( .a(n231), .b(cmplim_mask[1]), .c(cmpsel_signed), 
        .o1(n232) );
  d04nab02ln0c0 syn_258 ( .a(n236), .b(n235), .out(n242) );
  d04nan02ln0b0 syn_259 ( .a(n242), .b(n237), .o1(n238) );
  d04nan03ld0d7 syn_260 ( .a(n240), .b(n239), .c(n238), .o1(n288) );
  d04inn20ln0b0 syn_261 ( .a(cmplim_lo[1]), .o1(n241) );
  d04nan02ln0b0 syn_264 ( .a(n244), .b(n358), .o1(n246) );
  d04cak04ld0d7 syn_265 ( .a(n248), .b(n247), .c(n246), .d(n364), .o1(n289) );
  d04inn20ln0b0 syn_266 ( .a(n289), .o1(n249) );
  d04nan04ld0e0 syn_271 ( .a(n253), .b(n254), .c(n252), .d(n251), .o1(n259) );
  d04nan02ln0b0 syn_272 ( .a(n298), .b(cmplim_lo[4]), .o1(n255) );
  d04con01ln0b0 syn_276 ( .b(n262), .c(cmplim_lo[9]), .a(n261), .o1(n337) );
  d04nan02ln0b0 syn_277 ( .a(cmpen_le_limhi), .b(cmplim_hi[9]), .o1(n266) );
  d04inn20ln0b0 syn_278 ( .a(exit2_dr), .o1(n264) );
  d04inn20ln0b0 syn_279 ( .a(cmp_sticky_fail_hi), .o1(n263) );
  d04nab02lnsb0 syn_280 ( .a(cmp_sticky_fail_lo), .b(n263), .out(n325) );
  d04nob03ln0b0 syn_281 ( .a(cmpen_main), .b(n264), .c(n325), .out(n265) );
  d04con01ln0b0 syn_282 ( .b(n266), .c(n321), .a(n265), .o1(n267) );
  d04cak01lnsb0 syn_283 ( .a(n337), .b(cmpen_ge_limlo), .c(n267), .o1(n268) );
  d04inn20ln0b0 syn_286 ( .a(cmplim_hi[9]), .o1(n328) );
  d04inn20ln0b0 syn_288 ( .a(cmpen_le_limhi), .o1(n270) );
  d04non02ln0b0 syn_289 ( .a(n322), .b(n270), .o1(n285) );
  d04inn20ln0b0 syn_290 ( .a(cmplim_hi[7]), .o1(n271) );
  d04inn20ln0b0 syn_292 ( .a(cmplim_hi[8]), .o1(n272) );
  d04nab02ln0c0 syn_293 ( .a(n272), .b(n274), .out(n278) );
  d04nan02ln0b0 syn_294 ( .a(n276), .b(cmplim_hi[6]), .o1(n275) );
  d04nan03ld0d7 syn_298 ( .a(n280), .b(n279), .c(n278), .o1(n307) );
  d04nan02ln0b0 syn_300 ( .a(n282), .b(n328), .o1(n283) );
  d04inn20ln0b0 syn_304 ( .a(cmplim_hi[1]), .o1(n286) );
  d04nab03ln0b0 syn_305 ( .a(cmplim_hi[0]), .b(n289), .c(n286), .out(n292) );
  d04inn00ln0b5 syn_307 ( .a(n302), .o1(n291) );
  d04inn20ln0b0 syn_308 ( .a(cmplim_hi[0]), .o1(n287) );
  d04nan03lnsb0 syn_309 ( .a(n288), .b(n289), .c(n287), .o1(n290) );
  d04con03ln0b0 syn_311 ( .a(cmplim_hi[1]), .b(n293), .c(cmplim_hi[2]), .d(
        n296), .o1(n294) );
  d04non03ld0d0 syn_312 ( .a(n295), .b(n300), .c(n294), .o1(n312) );
  d04can03ld0b3 syn_313 ( .a(n297), .b(cmplim_hi[3]), .c(n296), .d(
        cmplim_hi[2]), .o1(n301) );
  d04can03ld0b3 syn_314 ( .a(n303), .b(cmplim_hi[5]), .c(n298), .d(
        cmplim_hi[4]), .o1(n299) );
  d04non02ln0b0 syn_316 ( .a(n303), .b(cmplim_hi[5]), .o1(n304) );
  d04inn20ln0b0 syn_317 ( .a(n304), .o1(n308) );
  d04non02ldsf0 syn_326 ( .a(n317), .b(n323), .o1(n11) );
  d04inn20ln0b0 syn_327 ( .a(n323), .o1(n344) );
  d04inn20ln0b0 syn_328 ( .a(n318), .o1(n319) );
  d04con01ln0b0 syn_330 ( .b(n322), .c(n329), .a(n321), .o1(n331) );
  d04inn20ln0b0 syn_331 ( .a(cmpen_le_limhi), .o1(n327) );
  d04nan02ln0b0 syn_332 ( .a(cmpen_main), .b(exit2_dr), .o1(n324) );
  d04cak02ln0b0 syn_333 ( .a(cmpen_blk_multi_fail), .b(n325), .c(n324), .d(
        n323), .o1(n343) );
  d04inn20ln0b0 syn_334 ( .a(n343), .o1(n326) );
  d04con03ln0b0 syn_339 ( .a(cmpen_main), .b(cmp_tdo_sel), .c(shift_dr), .d(
        capture_dr), .o1(n1) );
  d04inn20ln0b0 syn_340 ( .a(n1), .o1(n14) );
  d04non02ln0b0 syn_341 ( .a(cmpen_main), .b(cmp_tdo_sel), .o1(n333) );
  d04nob03ln0b0 syn_342 ( .a(capture_dr), .b(shift_dr), .c(n333), .out(N22) );
  d04nan02ln0b0 syn_344 ( .a(cmp_tdo_sel), .b(n336), .o1(n334) );
  d04cab13ln0b0 syn_345 ( .c(n334), .d(tdi), .a(n334), .b(serial_windowreg_0_0), .out(n335) );
  d04cak01lnsb0 syn_346 ( .a(cmp_tdo_forcelo), .b(n336), .c(n335), .o1(tdo) );
  d04inn20ln0b0 syn_347 ( .a(n337), .o1(n339) );
  d04aon03lnsa5 syn_349 ( .a(n344), .b(cmp_sticky_fail_lo), .c(n343), .d(n342), 
        .o(N159) );
  d04inn20ln0b0 syn_350 ( .a(cmp_firstfail_cnt[7]), .o1(n345) );
  d04ann03ln0b0 syn_351 ( .a(cmp_firstfail_cnt[0]), .b(cmp_firstfail_cnt[1]), 
        .c(cmp_firstfail_cnt[2]), .o(n348) );
  d04nan02ln0b0 syn_352 ( .a(n348), .b(cmp_firstfail_cnt[3]), .o1(n354) );
  d04inn20ln0b0 syn_353 ( .a(cmp_firstfail_cnt[4]), .o1(n353) );
  d04non02ln0b0 syn_354 ( .a(n354), .b(n353), .o1(n352) );
  d04inn20ln0b0 syn_355 ( .a(n352), .o1(n351) );
  d04inn20ln0b0 syn_356 ( .a(cmp_firstfail_cnt[5]), .o1(n350) );
  d04non02ln0b0 syn_357 ( .a(n351), .b(n350), .o1(n349) );
  d04nan02ln0b0 syn_358 ( .a(n349), .b(cmp_firstfail_cnt[6]), .o1(n347) );
  d04cab13ln0b0 syn_359 ( .c(n345), .d(n347), .a(n347), .b(
        cmp_firstfail_cnt[7]), .out(N172) );
  d04nan02ln0b0 syn_360 ( .a(cmp_firstfail_cnt[0]), .b(cmp_firstfail_cnt[1]), 
        .o1(n355) );
  d04inn20ln0b0 syn_361 ( .a(cmp_firstfail_cnt[2]), .o1(n346) );
  d04cak01lnsb0 syn_362 ( .a(n355), .b(n346), .c(n348), .o1(N167) );
  d04oan01ln0b0 syn_363 ( .b(n349), .c(cmp_firstfail_cnt[6]), .a(n347), .o(
        N171) );
  d04oan01ln0b0 syn_364 ( .b(n348), .c(cmp_firstfail_cnt[3]), .a(n354), .o(
        N168) );
  d04cak01lnsb0 syn_365 ( .a(n351), .b(n350), .c(n349), .o1(N170) );
  d04cak01lnsb0 syn_366 ( .a(n354), .b(n353), .c(n352), .o1(N169) );
  d04inn20ln0b0 syn_367 ( .a(n10), .o1(n8) );
  d04oan01ln0b0 syn_368 ( .b(cmp_firstfail_cnt[0]), .c(cmp_firstfail_cnt[1]), 
        .a(n355), .o(N166) );
  d04inn00ln0b3 syn_36 ( .a(cmplim_mask[3]), .o1(n357) );
  d04inn20ln0b0 syn_119 ( .a(cmpsel_signed), .o1(n358) );
  d04fyn0fld0a5 cmp_sticky_fail_lo_reg ( .d(N159), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(cmp_sticky_fail_lo) );
  d04fyn0fld0a5 serial_windowreg_reg_4 ( .d(n197), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(serial_windowreg_4_0) );
  d04fyn0fld0a5 serial_windowreg_reg_3 ( .d(n196), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(serial_windowreg_3_0) );
  d04fyn0fld0a5 serial_windowreg_reg_6 ( .d(n198), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(serial_windowreg_6_0) );
  d04fyn0fld0a5 serial_windowreg_reg_5 ( .d(n211), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(serial_windowreg_5_0) );
  d04fyn0fld0a5 serial_windowreg_reg_2 ( .d(n210), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(serial_windowreg_2_0) );
  d04fyn0fld0a5 serial_windowreg_reg_1 ( .d(n195), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(serial_windowreg_1_0) );
  d04fyn0fld0a5 serial_windowreg_reg_7 ( .d(n199), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(serial_windowreg_7_0) );
  d04fyn0fld0a5 serial_windowreg_reg_9 ( .d(n212), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(serial_windowreg_9_0) );
  d04fyn0fld0a5 serial_windowreg_reg_8 ( .d(n200), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(serial_windowreg_8_0) );
  d04fyn0fld0a5 serial_windowreg_reg_0 ( .d(n209), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(serial_windowreg_0_0) );
  d04fyn0fld5e0 cmp_firstfail_cnt_reg_1 ( .d(n202), .clk(jtclk), .rb(jtrst_b), 
        .psb(1'b1), .o(cmp_firstfail_cnt[1]) );
  d04nan02ln0c0 syn_188 ( .a(n131), .b(n234), .o1(n138) );
  d04con03ld0c7 syn_236 ( .a(cmplim_lo[2]), .b(n296), .c(cmplim_lo[3]), .d(
        n297), .o1(n227) );
  d04cob13ld0d7 syn_232 ( .a(n185), .b(n184), .c(n359), .d(n247), .out(n189)
         );
  d04inn00ld0f7 syn_126 ( .a(n229), .o1(n148) );
  d04nan02ln0b6 syn_157 ( .a(n303), .b(cmplim_lo[5]), .o1(n123) );
  d04bfn00lnud5 syn_218 ( .a(n165), .o(n247) );
  d04nan02ln0b6 syn_270 ( .a(n296), .b(cmplim_lo[2]), .o1(n251) );
  d04nan02ln0c0 syn_216 ( .a(n229), .b(n162), .o1(n163) );
  d04nan02ln0c0 syn_301 ( .a(n284), .b(n283), .o1(n318) );
  d04con03ld0c7 syn_297 ( .a(cmplim_hi[7]), .b(n277), .c(cmplim_hi[6]), .d(
        n276), .o1(n280) );
  d04cak01ld0f5 syn_180 ( .a(n124), .b(n123), .c(n142), .o1(n258) );
  d04nan03ld0b7 syn_267 ( .a(n250), .b(cmplim_lo[0]), .c(n249), .o1(n254) );
  d04nan02ln0b6 syn_93 ( .a(n1720), .b(n46), .o1(n190) );
  d04nan02ln0c0 syn_49 ( .a(n62), .b(n45), .o1(n67) );
  d04nob02ld0f5 syn_194 ( .a(n140), .b(n139), .out(n274) );
  d04inn00ln0b5 syn_268 ( .a(n288), .o1(n293) );
  d04cak02ln0b0 syn_274 ( .a(n260), .b(n259), .c(n257), .d(n258), .o1(n340) );
  d04non03ld0g0 syn_146 ( .a(n92), .b(n91), .c(n90), .o1(n276) );
  d04nab02ldsd3 syn_46 ( .a(cmplim_mask[2]), .b(n55), .out(n144) );
  d04inn00ld0f7 syn_45 ( .a(cmplim_mask[1]), .o1(n55) );
  d04nan02ln0b0 syn_108 ( .a(n62), .b(n376), .o1(n63) );
  d04nob02ld0d3 syn_142 ( .a(n86), .b(n247), .out(n91) );
  d04cob13ld0d7 syn_179 ( .a(n122), .b(n363), .c(cmplim_lo[6]), .d(n276), 
        .out(n142) );
  d04non02ln0c0 syn_252 ( .a(n298), .b(cmplim_lo[4]), .o1(n226) );
  d04nan02ln0b0 syn_247 ( .a(n218), .b(n217), .o1(n225) );
  d04nan02ln0c0 syn_98 ( .a(n357), .b(cmplim_mask[2]), .o1(n53) );
  d04nan03lnsb0 syn_275 ( .a(n273), .b(n321), .c(cmplim_lo[9]), .o1(n261) );
  d04nan02ld0c7 syn_189 ( .a(n132), .b(cmpsel_signed), .o1(n147) );
  d04nan02ln0c0 syn_176 ( .a(n234), .b(n118), .o1(n119) );
  d04nab02ln0c0 syn_291 ( .a(n271), .b(n277), .out(n279) );
  d04con01ld0c7 syn_321 ( .b(n311), .c(n312), .a(n310), .o1(n320) );
  d04non02ln0c0 syn_303 ( .a(n298), .b(cmplim_hi[4]), .o1(n300) );
  d04mkn22ld0e5 syn_107 ( .d2(n61), .d1(serial_windowreg_0_0), .s(
        cmp_mirror_sel), .out(n143) );
  d04can03ld0c7 syn_195 ( .a(cmplim_lo[7]), .b(n277), .c(n274), .d(
        cmplim_lo[8]), .o1(n256) );
  d04nan02ld0c7 syn_160 ( .a(n229), .b(n357), .o1(n114) );
  d04nan02ln0c0 syn_233 ( .a(n229), .b(n186), .o1(n187) );
  d04non02ln0c0 syn_306 ( .a(n297), .b(cmplim_hi[3]), .o1(n302) );
  d04inn00ln0b5 syn_175 ( .a(n165), .o1(n234) );
  d04nan02ln0c0 syn_273 ( .a(n256), .b(n255), .o1(n257) );
  d04nab02ln0c0 syn_217 ( .a(n164), .b(n163), .out(n1700) );
  d04nan03lnsb0 syn_103 ( .a(n85), .b(cmplim_mask[1]), .c(n244), .o1(n57) );
  d04nan02ln0c0 syn_184 ( .a(n127), .b(n126), .o1(n130) );
  d04nan02ld0c7 syn_193 ( .a(n138), .b(n137), .o1(n139) );
  d04nan02ln0c0 syn_137 ( .a(n84), .b(n221), .o1(n116) );
  d04cak04ld0d7 syn_296 ( .a(n278), .b(n279), .c(n275), .d(n305), .o1(n281) );
  d04kok01ln0c0 syn_145 ( .b(cmplim_mask[6]), .c(cmpsel_signed), .a(n89), .d(
        n88), .o1(n90) );
  d04con03ln0b0 syn_207 ( .a(cmplim_lo[9]), .b(n273), .c(n152), .d(n321), .o1(
        n154) );
  d04nan03ld0e0 syn_121 ( .a(n174), .b(n75), .c(n108), .o1(n165) );
  d04nan03ld0e0 syn_171 ( .a(n114), .b(n113), .c(n112), .o1(n121) );
  d04non02ldsf0 syn_178 ( .a(n121), .b(n120), .o1(n277) );
  d04nan02ln0c0 syn_170 ( .a(n111), .b(n378), .o1(n112) );
  d04inn20ln0b0 syn_338 ( .a(n11), .o1(n9) );
  d04inn20ln0b0 syn_186 ( .a(n129), .o1(n133) );
  d04nan02ln0c0 syn_38 ( .a(cmp_mirror_sel), .b(n17), .o1(n220) );
  d04nan02ln0c0 syn_67 ( .a(cmp_mirror_sel), .b(n31), .o1(n32) );
  d04inn00ln0b5 syn_47 ( .a(n144), .o1(n62) );
  d04con03ld0c7 syn_94 ( .a(n88), .b(n78), .c(n79), .d(n190), .o1(n47) );
  d04cak01ld0c7 syn_99 ( .a(n105), .b(n54), .c(n53), .o1(n60) );
  d04con03ln0b0 syn_44 ( .a(n186), .b(n1710), .c(n357), .d(n105), .o1(n29) );
  d04con01lnsc0 syn_110 ( .b(cmplim_mask[3]), .c(n230), .a(n64), .o1(n73) );
  d04cxo02ln0a5 syn_221 ( .clk1(n178), .clk2(n1670), .clkout(n1680) );
  d04non02ln0c0 syn_63 ( .a(n29), .b(n28), .o1(n50) );
  d04non02ln0c0 syn_169 ( .a(n235), .b(n126), .o1(n111) );
  d04con03ln0c0 syn_245 ( .a(n215), .b(n235), .c(n214), .d(n94), .o1(n216) );
  d04kok01ln0c0 syn_191 ( .b(n135), .c(n147), .a(n134), .d(n133), .o1(n136) );
  d04inn20ln0b0 syn_246 ( .a(n216), .o1(n217) );
  d04cak01ld0c5 syn_257 ( .a(n234), .b(n233), .c(n232), .o1(n239) );
  d04inn00ln0b5 syn_177 ( .a(n119), .o1(n120) );
  d04inn20ln0b0 syn_285 ( .a(n273), .o1(n269) );
  d04con04ld0b7 syn_315 ( .b(n302), .c(n300), .d(n301), .a(n299), .o1(n311) );
  d04cak02ld0c7 syn_335 ( .a(n329), .b(n328), .c(n327), .d(n326), .o1(n330) );
  d04cak01ld0c5 syn_114 ( .a(n81), .b(n71), .c(n65), .o1(n70) );
  d04nob02ln0b5 syn_83 ( .a(n161), .b(n81), .out(n158) );
  d04inn00ln0b5 syn_95 ( .a(n47), .o1(n48) );
  d04nan02ln0c0 syn_135 ( .a(n231), .b(n82), .o1(n1660) );
  d04bfn00ln0b5 syn_163 ( .a(n105), .o(n126) );
  d04con03ld0c7 syn_62 ( .a(n27), .b(n364), .c(n56), .d(n93), .o1(n28) );
  d04non02ld0c7 syn_128 ( .a(n148), .b(n87), .o1(n92) );
  d04non02ln0b0 syn_287 ( .a(n269), .b(n328), .o1(n322) );
  d04inn20ln0b0 syn_318 ( .a(n305), .o1(n306) );
  d04nan02ld0c7 syn_40 ( .a(n369), .b(n368), .o1(n367) );
  d04inn20ln0b0 syn_53 ( .a(n23), .o1(n361) );
  d04nob02ld0d3 syn_54 ( .a(n306), .b(n362), .out(n310) );
  d04xnb02ln0a5 syn_57 ( .a(n181), .b(n185), .out(n359) );
  d04aon03lnsa5 syn_58 ( .a(n344), .b(cmp_sticky_fail_hi), .c(n331), .d(n330), 
        .o(n360) );
  d04non02ld0c7 syn_72 ( .a(n121), .b(n120), .o1(n363) );
  d04inn00ln0b5 syn_73 ( .a(n373), .o1(n369) );
  d04con01ld0i5 syn_78 ( .b(cmp_mirror_sel), .c(serial_windowreg_1_0), .a(n370), .o1(n231) );
  d04nan02ln0c0 syn_79 ( .a(n320), .b(n313), .o1(n314) );
  d04nan02ld0e0 syn_86 ( .a(n165), .b(n365), .o1(n229) );
  d04nan02ln0c0 syn_87 ( .a(n174), .b(n76), .o1(n365) );
  d04nan03ld0e0 syn_104 ( .a(n314), .b(n268), .c(n367), .o1(n317) );
  d04non02ld0c7 syn_116 ( .a(n341), .b(n338), .o1(n368) );
  d04nan03ld0e0 syn_124 ( .a(n372), .b(n73), .c(n72), .o1(n174) );
  d04nan04ld0e0 syn_125 ( .a(n59), .b(n57), .c(n58), .d(n60), .o1(n372) );
  d04mkn22ln0d0 syn_133 ( .d2(n41), .d1(serial_windowreg_3_0), .s(
        cmp_mirror_sel), .out(n85) );
  d04cak02ld0c7 syn_149 ( .a(n260), .b(n259), .c(n257), .d(n258), .o1(n373) );
  d04non02ln0d5 syn_159 ( .a(n116), .b(n115), .o1(n127) );
  d04bfn00lduk0 syn_172 ( .a(cmplim_mask[0]), .o(n376) );
  d04kok01ld0d0 syn_243 ( .b(n71), .c(n180), .a(n70), .d(n379), .o1(n72) );
  d04con03ld0c7 syn_248 ( .a(n128), .b(n68), .c(n82), .d(n67), .o1(n379) );
  d04inn20ln0b0 syn_167 ( .a(cmplim_hi[8]), .o1(n374) );
  d04inn20ln0b0 syn_343 ( .a(tap_swcomp_active), .o1(n336) );
  d04inn00ln0b5 syn_205 ( .a(n282), .o1(n262) );
  d04inn20ln0b0 syn_263 ( .a(n242), .o1(n248) );
  d04cak01ld0d0 syn_253 ( .a(n227), .b(n253), .c(n226), .o1(n260) );
  d04nan03ld0d7 syn_96 ( .a(n48), .b(n49), .c(n50), .o1(n75) );
  d04nab02ld0f5 syn_324 ( .a(n323), .b(n317), .out(n316) );
  d04cob13ld0d7 syn_168 ( .a(n374), .b(n274), .c(cmplim_hi[9]), .d(n273), 
        .out(n305) );
  d04nan02ln0c0 syn_41 ( .a(n307), .b(n308), .o1(n362) );
  d04non02ln0c0 syn_209 ( .a(n154), .b(n153), .o1(n155) );
  d04con03ld0d7 syn_153 ( .a(n148), .b(n99), .c(n247), .d(n98), .o1(n103) );
  d04con01ld0c7 syn_210 ( .b(n258), .c(n156), .a(n155), .o1(n341) );
  d04nan02ln0b0 syn_254 ( .a(n228), .b(n229), .o1(n240) );
  d04nan02ln0c0 syn_206 ( .a(n262), .b(cmpsel_signed), .o1(n321) );
  d04non02ln0d5 syn_203 ( .a(n282), .b(n151), .o1(n273) );
  d04fyn0fld5b0 cmp_sticky_fail_hi_reg ( .d(n360), .clk(jtclk), .rb(n380), 
        .psb(1'b1), .o(cmp_sticky_fail_hi) );
  d04nan02ld0c7 syn_299 ( .a(n307), .b(n281), .o1(n284) );
  d04inn00ld0f7 syn_325 ( .a(n316), .o1(n10) );
  d04inn00ln0b5 syn_51 ( .a(cmp_mirror_sel), .o1(n366) );
  d04nab02ln0c0 syn_117 ( .a(serial_windowreg_8_0), .b(cmp_mirror_sel), .out(
        n370) );
  d04nab02ld0f5 syn_65 ( .a(n361), .b(cmp_mirror_sel), .out(n375) );
  d04nan02ln0c0 syn_81 ( .a(cmp_mirror_sel), .b(n36), .o1(n37) );
  d04nan02ln0c0 syn_230 ( .a(cmp_mirror_sel), .b(n25), .o1(n377) );
  d04nan02ln0b0 syn_42 ( .a(n366), .b(n18), .o1(n21) );
  d04non02ln0c0 syn_70 ( .a(n144), .b(n376), .o1(n66) );
  d04non02ln0b0 syn_59 ( .a(cmplim_mask[3]), .b(cmplim_mask[1]), .o1(n42) );
  d04con01ld0d7 syn_141 ( .b(cmp_mirror_sel), .c(serial_windowreg_0_0), .a(
        n375), .o1(n82) );
  d04bfn00ln0b5 syn_129 ( .a(n79), .o(n94) );
  d04con01ld0c7 syn_197 ( .b(cmp_mirror_sel), .c(serial_windowreg_5_0), .a(
        n377), .o1(n56) );
  d04con01ld0d7 syn_82 ( .b(cmp_mirror_sel), .c(serial_windowreg_2_0), .a(n37), 
        .o1(n81) );
  d04nan02ln0c0 syn_43 ( .a(n21), .b(n220), .o1(n105) );
  d04inn20ln0c0 syn_60 ( .a(n186), .o1(n1720) );
  d04inn20ln0b0 syn_100 ( .a(n376), .o1(n244) );
  d04con01ld0c7 syn_68 ( .b(cmp_mirror_sel), .c(serial_windowreg_8_0), .a(n32), 
        .o1(n128) );
  d04inn20ln0b0 syn_111 ( .a(n376), .o1(n71) );
  d04bfn00ln0a5 syn_231 ( .a(cmplim_mask[3]), .o(n378) );
  d04bfn00ln0b5 syn_55 ( .a(n82), .o(n364) );
  d04non02ldsf0 syn_32 ( .a(cmplim_mask[2]), .b(cmplim_mask[3]), .o1(n186) );
  d04nan03lnsb0 syn_101 ( .a(n79), .b(n244), .c(n55), .o1(n59) );
  d04bfn00ln0b5 syn_138 ( .a(n85), .o(n88) );
  d04inn20ln0b0 syn_130 ( .a(n94), .o1(n80) );
  d04non02ld0c7 syn_74 ( .a(n1720), .b(cmplim_mask[1]), .o1(n228) );
  d04inn20ln0b0 syn_112 ( .a(n1710), .o1(n180) );
  d04cak01ln0b5 syn_109 ( .a(n143), .b(n378), .c(n63), .o1(n64) );
  d04nan03lnuc0 syn_102 ( .a(n56), .b(n376), .c(n55), .o1(n58) );
  d04non02ln0c0 syn_132 ( .a(n80), .b(n95), .o1(n84) );
  d04non02ln0b0 syn_71 ( .a(n66), .b(n357), .o1(n125) );
  d04inn20ln0b0 syn_139 ( .a(n88), .o1(n115) );
  d04nan02ln0d5 syn_143 ( .a(n174), .b(cmpsel_sgnmag), .o1(n132) );
  d04orn02ld0c5 syn_64 ( .a(n174), .b(n109), .o(n235) );
  d04non02ln0b3 syn_200 ( .a(n147), .b(n146), .o1(n149) );
  d04nan03lnuc0 syn_144 ( .a(n132), .b(cmpsel_signed), .c(n87), .o1(n89) );
  d04nab02ldsd3 syn_201 ( .a(n149), .b(n148), .out(n282) );
  d04nan02ln0b0 syn_183 ( .a(n229), .b(n135), .o1(n140) );
  d04inn20ln0b0 syn_234 ( .a(n187), .o1(n188) );
  d04nan02ln0b0 syn_262 ( .a(n288), .b(n241), .o1(n250) );
  d04nan02ln0b0 syn_269 ( .a(n293), .b(cmplim_lo[1]), .o1(n252) );
  d04non02ln0b0 syn_181 ( .a(n303), .b(cmplim_lo[5]), .o1(n141) );
  d04nan02ln0b0 syn_147 ( .a(n276), .b(cmplim_lo[6]), .o1(n124) );
  d04con01ld0c7 syn_196 ( .b(n142), .c(n141), .a(n256), .o1(n156) );
  d04nan03lnuc0 syn_310 ( .a(n291), .b(n292), .c(n290), .o1(n295) );
  d04nob02ld0d3 syn_302 ( .a(n285), .b(n318), .out(n313) );
  d04nan02ln0b0 syn_329 ( .a(n320), .b(n319), .o1(n329) );
  d04kok01ln0b0 syn_348 ( .b(n340), .c(n341), .a(n339), .d(n338), .o1(n342) );
  d04bfn00ln0c5 syn_inc_3 ( .a(jtrst_b), .o(n380) );
endmodule


module stap_tapswcompreg ( jtclk, jpwrgood_rst_b, tdi, capture, shift, update, 
        enable, cmp_firstfail_cnt, cmp_sticky_fail_hi, cmp_sticky_fail_lo, 
        cmplim_hi, cmplim_lo, cmplim_mask, cmp_mirror_sel, cmp_tdo_sel, 
        cmp_tdo_forcelo, cmpen_main, cmpsel_signed, cmpsel_sgnmag, 
        cmpen_le_limhi, cmpen_ge_limlo, cmpen_blk_multi_fail, tdoctrl, tdostat
 );
  input [7:0] cmp_firstfail_cnt;
  output [9:0] cmplim_hi;
  output [9:0] cmplim_lo;
  output [9:0] cmplim_mask;
  input jtclk, jpwrgood_rst_b, tdi, capture, shift, update, enable,
         cmp_sticky_fail_hi, cmp_sticky_fail_lo;
  output cmp_mirror_sel, cmp_tdo_sel, cmp_tdo_forcelo, cmpen_main,
         cmpsel_signed, cmpsel_sgnmag, cmpen_le_limhi, cmpen_ge_limlo,
         cmpen_blk_multi_fail, tdoctrl, tdostat;
  wire   serialdata_42_0, serialdata_41_0, serialdata_40_0, serialdata_39_0,
         serialdata_38_0, serialdata_37_0, serialdata_36_0, serialdata_35_0,
         serialdata_34_0, serialdata_33_0, serialdata_32_0, serialdata_31_0,
         serialdata_30_0, serialdata_29_0, serialdata_28_0, serialdata_27_0,
         serialdata_26_0, serialdata_25_0, serialdata_24_0, serialdata_23_0,
         serialdata_22_0, serialdata_21_0, serialdata_20_0, serialdata_19_0,
         serialdata_18_0, serialdata_17_0, serialdata_16_0, serialdata_15_0,
         serialdata_14_0, serialdata_13_0, serialdata_12_0, serialdata_11_0,
         serialdata_10_0, serialdata_9_0, serialdata_8_0, serialdata_7_0,
         serialdata_6_0, serialdata_5_0, serialdata_4_0, serialdata_3_0,
         serialdata_2_0, serialdata_1_0, statusdata_42_0, statusdata_41_0,
         statusdata_40_0, statusdata_39_0, statusdata_38_0, statusdata_37_0,
         statusdata_36_0, statusdata_35_0, statusdata_34_0, statusdata_33_0,
         statusdata_32_0, statusdata_31_0, statusdata_30_0, statusdata_29_0,
         statusdata_28_0, statusdata_27_0, statusdata_26_0, statusdata_25_0,
         statusdata_24_0, statusdata_23_0, statusdata_22_0, statusdata_21_0,
         statusdata_20_0, statusdata_19_0, statusdata_18_0, statusdata_17_0,
         statusdata_16_0, statusdata_15_0, statusdata_14_0, statusdata_13_0,
         statusdata_12_0, statusdata_11_0, statusdata_10_0, statusdata_9_0,
         statusdata_8_0, statusdata_7_0, statusdata_6_0, statusdata_5_0,
         statusdata_4_0, statusdata_3_0, statusdata_2_0, statusdata_1_0,
         pdata_regval_12_0, pdata_regval_11_0, pdata_regval_1, pdata_regval_0,
         n213, n215, n217, n219, n221, n223, n225, n227, n229, n231, n233,
         n235, n237, n239, n241, n243, n245, n247, n249, n251, n253, n255,
         n257, n259, n261, n263, n265, n267, n269, n271, n273, n275, n277,
         n279, n281, n283, n285, n287, n289, n291, n293, n295, n296, n297,
         n298, n299, n300, n301, n302, n303, n304, n305, n306, n307, n308,
         n309, n310, n311, n312, n313, n314, n315, n316, n317, n318, n319,
         n320, n321, n322, n323, n324, n325, n326, n327, n328, n329, n330,
         n331, n332, n333, n334, n335, n336, n337, n338, n339, n340, n341,
         n342, n343, n344, n345, n346, n347, n348, n349, n350, n351, n352,
         n353, n354, n355, n356, n357, n358, n359, n360, n361, n362, n363,
         n364, n365, n366, n367, n368, n369, n370, n371, n372, n373, n374,
         n375, n376, n377, n378, n379, n380, n381, n1, n4, n5, n6, n7, n8, n9,
         n11, n12, n13, n14, n15, n16, n17, n18, n20, n21, n24, n25, n27, n28,
         n29, n31, n32, n34, n36, n37, n39, n40, n41, n42, n43, n44, n45, n46,
         n47, n48, n49, n50, n51, n52, n53, n55, n56, n57, n58, n59, n60, n61,
         n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75,
         n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n88, n89, n90, n91,
         n92, n93, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105,
         n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116,
         n117, n118, n119, n120, n121, n122, n123, n124, n128, n129, n130,
         n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141,
         n142, n143, n144, n145, n146, n149, n152, n153, n155, n156, n158,
         n159, n160, n161, n162, n163, n164, n167, n168, n169, n171, n175,
         n176, n180, n184, n185, n186, n189, n190, n191, n192, n193, n194,
         n195, n196, n197, n198, n199, n200, n201, n202, n203, n204, n205,
         n206, n207, n208, n209, n211, n212, n216, n218, n220;

  d04fyn8fld5e0 pdata_regval_reg_15 ( .d(n239), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmplim_mask[2]) );
  d04fyn8fld5e0 pdata_regval_reg_14 ( .d(n237), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmplim_mask[1]) );
  d04fyn8fld5e0 pdata_regval_reg_13 ( .d(n235), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmplim_mask[0]) );
  d04fyn8fld0a5 pdata_regval_reg_0 ( .d(tdoctrl), .clkb(jtclk), .rb(n189), 
        .psb(1'b1), .o(pdata_regval_0) );
  d04fyn8fld0a5 pdata_regval_reg_1 ( .d(n295), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(pdata_regval_1) );
  d04fyn8fld0a5 pdata_regval_reg_12 ( .d(n233), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(pdata_regval_12_0) );
  d04fyn8fld0a5 pdata_regval_reg_11 ( .d(n231), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(pdata_regval_11_0) );
  d04fyn8fld0a5 pdata_regval_reg_5 ( .d(n219), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmp_tdo_forcelo) );
  d04fyn8fld0a5 pdata_regval_reg_8 ( .d(n225), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmpen_blk_multi_fail) );
  d04fyn8fld0a5 pdata_regval_reg_2 ( .d(n213), .clkb(jtclk), .rb(n190), .psb(
        1'b1), .o(cmpen_ge_limlo) );
  d04fyn8fld0a5 pdata_regval_reg_39 ( .d(n287), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmplim_hi[6]) );
  d04fyn8fld0a5 pdata_regval_reg_3 ( .d(n215), .clkb(jtclk), .rb(n191), .psb(
        1'b1), .o(cmpen_le_limhi) );
  d04fyn8fld0a5 pdata_regval_reg_40 ( .d(n289), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmplim_hi[7]) );
  d04fyn8fld0a5 pdata_regval_reg_41 ( .d(n291), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmplim_hi[8]) );
  d04fyn8fld0a5 pdata_regval_reg_42 ( .d(n293), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmplim_hi[9]) );
  d04fyn8fld0a5 pdata_regval_reg_37 ( .d(n283), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmplim_hi[4]) );
  d04fyn8fld0a5 pdata_regval_reg_38 ( .d(n285), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmplim_hi[5]) );
  d04fyn8fld0a5 pdata_regval_reg_35 ( .d(n279), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmplim_hi[2]) );
  d04fyn8fld0a5 pdata_regval_reg_27 ( .d(n263), .clkb(jtclk), .rb(n191), .psb(
        1'b1), .o(cmplim_lo[4]) );
  d04fyn8fld0a5 pdata_regval_reg_33 ( .d(n275), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmplim_hi[0]) );
  d04fyn8fld0a5 pdata_regval_reg_31 ( .d(n271), .clkb(jtclk), .rb(n190), .psb(
        1'b1), .o(cmplim_lo[8]) );
  d04fyn8fld0a5 pdata_regval_reg_36 ( .d(n281), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmplim_hi[3]) );
  d04fyn8fld0a5 pdata_regval_reg_23 ( .d(n255), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmplim_lo[0]) );
  d04fyn8fld0a5 pdata_regval_reg_34 ( .d(n277), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmplim_hi[1]) );
  d04fyn8fld0a5 pdata_regval_reg_32 ( .d(n273), .clkb(jtclk), .rb(n191), .psb(
        1'b1), .o(cmplim_lo[9]) );
  d04fyn8fld0a5 pdata_regval_reg_28 ( .d(n265), .clkb(jtclk), .rb(n190), .psb(
        1'b1), .o(cmplim_lo[5]) );
  d04fyn8fld0a5 pdata_regval_reg_30 ( .d(n269), .clkb(jtclk), .rb(n190), .psb(
        1'b1), .o(cmplim_lo[7]) );
  d04fyn8fld0a5 pdata_regval_reg_25 ( .d(n259), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmplim_lo[2]) );
  d04fyn8fld0a5 pdata_regval_reg_22 ( .d(n253), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmplim_mask[9]) );
  d04fyn8fld0a5 pdata_regval_reg_26 ( .d(n261), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmplim_lo[3]) );
  d04fyn8fld0a5 pdata_regval_reg_24 ( .d(n257), .clkb(jtclk), .rb(n190), .psb(
        1'b1), .o(cmplim_lo[1]) );
  d04fyn8fld0a5 pdata_regval_reg_6 ( .d(n221), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmp_tdo_sel) );
  d04fyn8fld0a5 pdata_regval_reg_18 ( .d(n245), .clkb(jtclk), .rb(n191), .psb(
        1'b1), .o(cmplim_mask[5]) );
  d04fyn8fld0a5 pdata_regval_reg_4 ( .d(n217), .clkb(jtclk), .rb(
        jpwrgood_rst_b), .psb(1'b1), .o(cmpen_main) );
  d04fyn8fld0a5 pdata_regval_reg_19 ( .d(n247), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmplim_mask[6]) );
  d04fyn8fld0a5 pdata_regval_reg_21 ( .d(n251), .clkb(jtclk), .rb(n190), .psb(
        1'b1), .o(cmplim_mask[8]) );
  d04fyn8fld0a5 pdata_regval_reg_17 ( .d(n243), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmplim_mask[4]) );
  d04fyn8fld0a5 pdata_regval_reg_20 ( .d(n249), .clkb(jtclk), .rb(n190), .psb(
        1'b1), .o(cmplim_mask[7]) );
  d04inn20ln0b0 syn_5 ( .a(serialdata_9_0), .o1(n32) );
  d04inn20ln0b0 syn_15 ( .a(serialdata_8_0), .o1(n48) );
  d04inn20ln0b0 syn_17 ( .a(cmpen_blk_multi_fail), .o1(n47) );
  d04con03ln0b0 syn_18 ( .a(n48), .b(n208), .c(n197), .d(n47), .o1(n4) );
  d04inn20ln0b0 syn_19 ( .a(n4), .o1(n5) );
  d04con01ln0b0 syn_20 ( .b(n32), .c(n27), .a(n5), .o1(n330) );
  d04inn20ln0b0 syn_21 ( .a(serialdata_10_0), .o1(n36) );
  d04inn20ln0b0 syn_22 ( .a(cmpsel_sgnmag), .o1(n31) );
  d04con03ln0b0 syn_23 ( .a(n32), .b(n208), .c(n197), .d(n31), .o1(n6) );
  d04inn20ln0b0 syn_24 ( .a(n6), .o1(n7) );
  d04con01ln0b0 syn_25 ( .b(n36), .c(n27), .a(n7), .o1(n329) );
  d04inn20ln0b0 syn_26 ( .a(serialdata_3_0), .o1(n40) );
  d04inn20ln0b0 syn_27 ( .a(serialdata_2_0), .o1(n42) );
  d04inn20ln0b0 syn_28 ( .a(cmpen_ge_limlo), .o1(n41) );
  d04con03ln0b0 syn_29 ( .a(n42), .b(n208), .c(n197), .d(n41), .o1(n8) );
  d04inn20ln0b0 syn_30 ( .a(n8), .o1(n9) );
  d04con01ln0b0 syn_31 ( .b(n40), .c(n27), .a(n9), .o1(n336) );
  d04inn20ln0b0 syn_33 ( .a(serialdata_4_0), .o1(n44) );
  d04inn20ln0b0 syn_34 ( .a(cmpen_le_limhi), .o1(n39) );
  d04con03ln0b0 syn_35 ( .a(n44), .b(n27), .c(n195), .d(n39), .o1(n11) );
  d04con01ln0b0 syn_37 ( .b(n40), .c(n205), .a(n12), .o1(n335) );
  d04inn20ln0b0 syn_38 ( .a(serialdata_5_0), .o1(n50) );
  d04inn20ln0b0 syn_39 ( .a(cmpen_main), .o1(n43) );
  d04con03ln0b0 syn_40 ( .a(n50), .b(n27), .c(n197), .d(n43), .o1(n13) );
  d04con01ln0b0 syn_42 ( .b(n44), .c(n205), .a(n14), .o1(n334) );
  d04inn20ln0b0 syn_43 ( .a(serialdata_6_0), .o1(n46) );
  d04inn20ln0b0 syn_44 ( .a(cmp_tdo_forcelo), .o1(n49) );
  d04con03ln0b0 syn_45 ( .a(n46), .b(n27), .c(n195), .d(n49), .o1(n15) );
  d04con01ln0b0 syn_47 ( .b(n50), .c(n205), .a(n16), .o1(n333) );
  d04inn20ln0b0 syn_48 ( .a(serialdata_7_0), .o1(n34) );
  d04inn20ln0b0 syn_49 ( .a(cmp_tdo_sel), .o1(n45) );
  d04con03ln0b0 syn_50 ( .a(n34), .b(n27), .c(n195), .d(n45), .o1(n17) );
  d04con01ln0b0 syn_52 ( .b(n46), .c(n205), .a(n18), .o1(n332) );
  d04con03ln0b0 syn_55 ( .a(n48), .b(n27), .c(n195), .d(n193), .o1(n20) );
  d04con01ln0b0 syn_57 ( .b(n34), .c(n205), .a(n21), .o1(n331) );
  d04inn20ln0b0 syn_58 ( .a(serialdata_11_0), .o1(n52) );
  d04con03ln0b0 syn_60 ( .a(n52), .b(n27), .c(n197), .d(n194), .o1(n24) );
  d04con01ln0b0 syn_62 ( .b(n36), .c(n208), .a(n25), .o1(n328) );
  d04can16lnsb0 syn_67 ( .a(serialdata_13_0), .b(n216), .c(pdata_regval_12_0), 
        .d(n196), .e(serialdata_12_0), .f(n204), .o1(n28) );
  d04inn20ln0b0 syn_68 ( .a(n28), .o1(n326) );
  d04inn20ln0b0 syn_70 ( .a(pdata_regval_1), .o1(n29) );
  d04nan02ln0b0 syn_71 ( .a(n186), .b(serialdata_1_0), .o1(n37) );
  d04con01ln0b0 syn_73 ( .b(n186), .c(n29), .a(n200), .o1(n295) );
  d04aon03lnsa5 syn_75 ( .a(cmplim_mask[0]), .b(n202), .c(n203), .d(
        serialdata_13_0), .o(n235) );
  d04aon03lnsa5 syn_76 ( .a(n203), .b(serialdata_15_0), .c(n202), .d(
        cmplim_mask[2]), .o(n239) );
  d04bfn00ln0a5 syn_77 ( .a(cmplim_mask[1]), .o(n60) );
  d04aon03lnsa5 syn_78 ( .a(n203), .b(serialdata_14_0), .c(n202), .d(n60), .o(
        n237) );
  d04aon03lnsa5 syn_79 ( .a(n203), .b(serialdata_16_0), .c(n202), .d(
        cmplim_mask[3]), .o(n241) );
  d04aon03lnsa5 syn_80 ( .a(n203), .b(serialdata_17_0), .c(n202), .d(
        cmplim_mask[4]), .o(n243) );
  d04nan02ln0b0 syn_81 ( .a(n186), .b(serialdata_12_0), .o1(n184) );
  d04can03lnsb0 syn_83 ( .a(n199), .b(n32), .c(n31), .d(n184), .o1(n227) );
  d04can03lnsb0 syn_84 ( .a(n199), .b(n34), .c(n193), .d(n184), .o1(n223) );
  d04can03lnsb0 syn_85 ( .a(n199), .b(n36), .c(n194), .d(n184), .o1(n229) );
  d04aon03lnsa5 syn_88 ( .a(n201), .b(serialdata_23_0), .c(n200), .d(
        cmplim_lo[0]), .o(n255) );
  d04aon03lnsa5 syn_89 ( .a(n201), .b(serialdata_24_0), .c(n200), .d(
        cmplim_lo[1]), .o(n257) );
  d04aon03lnsa5 syn_90 ( .a(n201), .b(serialdata_28_0), .c(n200), .d(
        cmplim_lo[5]), .o(n265) );
  d04aon03lnsa5 syn_91 ( .a(n201), .b(serialdata_27_0), .c(n200), .d(
        cmplim_lo[4]), .o(n263) );
  d04aon03lnsa5 syn_92 ( .a(n201), .b(serialdata_29_0), .c(n200), .d(
        cmplim_lo[6]), .o(n267) );
  d04aon03lnsa5 syn_93 ( .a(n201), .b(serialdata_25_0), .c(n200), .d(
        cmplim_lo[2]), .o(n259) );
  d04aon03lnsa5 syn_94 ( .a(n201), .b(serialdata_26_0), .c(n200), .d(
        cmplim_lo[3]), .o(n261) );
  d04aon03lnsa5 syn_97 ( .a(n201), .b(serialdata_33_0), .c(n200), .d(
        cmplim_hi[0]), .o(n275) );
  d04aon03lnsa5 syn_98 ( .a(n201), .b(serialdata_30_0), .c(n200), .d(
        cmplim_lo[7]), .o(n269) );
  d04aon03lnsa5 syn_99 ( .a(n203), .b(serialdata_39_0), .c(n202), .d(
        cmplim_hi[6]), .o(n287) );
  d04aon03lnsa5 syn_100 ( .a(n201), .b(serialdata_40_0), .c(n200), .d(
        cmplim_hi[7]), .o(n289) );
  d04aon03lnsa5 syn_101 ( .a(n203), .b(serialdata_41_0), .c(n202), .d(
        cmplim_hi[8]), .o(n291) );
  d04aon03lnsa5 syn_102 ( .a(n203), .b(serialdata_34_0), .c(n202), .d(
        cmplim_hi[1]), .o(n277) );
  d04aon03lnsa5 syn_103 ( .a(n203), .b(serialdata_36_0), .c(n202), .d(
        cmplim_hi[3]), .o(n281) );
  d04aon03lnsa5 syn_104 ( .a(n203), .b(serialdata_38_0), .c(n202), .d(
        cmplim_hi[5]), .o(n285) );
  d04aon03lnsa5 syn_105 ( .a(n203), .b(serialdata_37_0), .c(n202), .d(
        cmplim_hi[4]), .o(n283) );
  d04aon03lnsa5 syn_106 ( .a(n201), .b(serialdata_31_0), .c(n200), .d(
        cmplim_lo[8]), .o(n271) );
  d04aon03lnsa5 syn_107 ( .a(n203), .b(serialdata_35_0), .c(n202), .d(
        cmplim_hi[2]), .o(n279) );
  d04aon03lnsa5 syn_108 ( .a(n203), .b(serialdata_42_0), .c(n202), .d(
        cmplim_hi[9]), .o(n293) );
  d04aon03lnsa5 syn_109 ( .a(n201), .b(serialdata_32_0), .c(n200), .d(
        cmplim_lo[9]), .o(n273) );
  d04can03lnsb0 syn_110 ( .a(n199), .b(n40), .c(n39), .d(n184), .o1(n215) );
  d04can03lnsb0 syn_111 ( .a(n199), .b(n42), .c(n41), .d(n184), .o1(n213) );
  d04can03lnsb0 syn_112 ( .a(n199), .b(n44), .c(n43), .d(n184), .o1(n217) );
  d04can03lnsb0 syn_113 ( .a(n199), .b(n46), .c(n45), .d(n184), .o1(n221) );
  d04can03lnsb0 syn_114 ( .a(n199), .b(n48), .c(n47), .d(n184), .o1(n225) );
  d04can03lnsb0 syn_115 ( .a(n199), .b(n50), .c(n49), .d(n184), .o1(n219) );
  d04inn20ln0b0 syn_116 ( .a(pdata_regval_11_0), .o1(n51) );
  d04can03lnsb0 syn_117 ( .a(n199), .b(n52), .c(n51), .d(n184), .o1(n231) );
  d04aon11ln0b0 syn_121 ( .a(n204), .b(serialdata_42_0), .c(n53), .o(n296) );
  d04aon11ln0b0 syn_122 ( .a(n204), .b(statusdata_42_0), .c(n53), .o(n339) );
  d04can03lnsb0 syn_125 ( .a(n209), .b(statusdata_18_0), .c(n216), .d(
        statusdata_19_0), .o1(n55) );
  d04nan02ln0b0 syn_127 ( .a(n196), .b(cmplim_mask[5]), .o1(n70) );
  d04nan02ln0b0 syn_128 ( .a(n55), .b(n70), .o1(n363) );
  d04can03lnsb0 syn_129 ( .a(n209), .b(statusdata_16_0), .c(n216), .d(
        statusdata_17_0), .o1(n56) );
  d04nan02ln0b0 syn_130 ( .a(n198), .b(cmplim_mask[3]), .o1(n68) );
  d04nan02ln0b0 syn_131 ( .a(n56), .b(n68), .o1(n365) );
  d04can03lnsb0 syn_132 ( .a(n209), .b(statusdata_22_0), .c(n211), .d(
        statusdata_23_0), .o1(n57) );
  d04nan02ln0b0 syn_133 ( .a(n196), .b(cmplim_mask[9]), .o1(n77) );
  d04nan02ln0b0 syn_134 ( .a(n57), .b(n77), .o1(n359) );
  d04can03lnsb0 syn_135 ( .a(n209), .b(statusdata_15_0), .c(n216), .d(
        statusdata_16_0), .o1(n58) );
  d04nan02ln0b0 syn_136 ( .a(n198), .b(cmplim_mask[2]), .o1(n66) );
  d04nan02ln0b0 syn_137 ( .a(n58), .b(n66), .o1(n366) );
  d04can03lnsb0 syn_138 ( .a(n209), .b(statusdata_19_0), .c(n216), .d(
        statusdata_20_0), .o1(n59) );
  d04nan02ln0b0 syn_139 ( .a(n196), .b(cmplim_mask[6]), .o1(n72) );
  d04nan02ln0b0 syn_140 ( .a(n59), .b(n72), .o1(n362) );
  d04can03lnsb0 syn_141 ( .a(n209), .b(statusdata_14_0), .c(n216), .d(
        statusdata_15_0), .o1(n61) );
  d04nan02ln0b0 syn_142 ( .a(n196), .b(n60), .o1(n64) );
  d04nan02ln0b0 syn_143 ( .a(n61), .b(n64), .o1(n367) );
  d04can03lnsb0 syn_144 ( .a(n209), .b(statusdata_20_0), .c(n216), .d(
        statusdata_21_0), .o1(n62) );
  d04nan02ln0b0 syn_145 ( .a(n196), .b(cmplim_mask[7]), .o1(n74) );
  d04nan02ln0b0 syn_146 ( .a(n62), .b(n74), .o1(n361) );
  d04can03lnsb0 syn_147 ( .a(n204), .b(statusdata_13_0), .c(n216), .d(
        statusdata_14_0), .o1(n63) );
  d04nan02ln0b0 syn_148 ( .a(n196), .b(cmplim_mask[0]), .o1(n92) );
  d04nan02ln0b0 syn_149 ( .a(n63), .b(n92), .o1(n368) );
  d04can03lnsb0 syn_151 ( .a(n204), .b(serialdata_14_0), .c(n216), .d(
        serialdata_15_0), .o1(n65) );
  d04nan02ln0b0 syn_152 ( .a(n65), .b(n64), .o1(n324) );
  d04can03lnsb0 syn_153 ( .a(n204), .b(serialdata_15_0), .c(n216), .d(
        serialdata_16_0), .o1(n67) );
  d04nan02ln0b0 syn_154 ( .a(n67), .b(n66), .o1(n323) );
  d04can03lnsb0 syn_156 ( .a(n204), .b(serialdata_16_0), .c(n211), .d(
        serialdata_17_0), .o1(n69) );
  d04nan02ln0b0 syn_157 ( .a(n69), .b(n68), .o1(n322) );
  d04can03lnsb0 syn_158 ( .a(n207), .b(serialdata_18_0), .c(n211), .d(
        serialdata_19_0), .o1(n71) );
  d04nan02ln0b0 syn_159 ( .a(n71), .b(n70), .o1(n320) );
  d04can03lnsb0 syn_160 ( .a(n204), .b(serialdata_19_0), .c(n211), .d(
        serialdata_20_0), .o1(n73) );
  d04nan02ln0b0 syn_161 ( .a(n73), .b(n72), .o1(n319) );
  d04can03lnsb0 syn_163 ( .a(n207), .b(serialdata_20_0), .c(n211), .d(
        serialdata_21_0), .o1(n75) );
  d04nan02ln0b0 syn_164 ( .a(n75), .b(n74), .o1(n318) );
  d04can03lnsb0 syn_165 ( .a(n207), .b(serialdata_21_0), .c(n211), .d(
        serialdata_22_0), .o1(n76) );
  d04nan02ln0b0 syn_166 ( .a(n196), .b(cmplim_mask[8]), .o1(n101) );
  d04nan02ln0b0 syn_167 ( .a(n76), .b(n101), .o1(n317) );
  d04can03lnsb0 syn_168 ( .a(n207), .b(serialdata_22_0), .c(n211), .d(
        serialdata_23_0), .o1(n78) );
  d04nan02ln0b0 syn_169 ( .a(n78), .b(n77), .o1(n316) );
  d04can03lnsb0 syn_170 ( .a(n207), .b(serialdata_23_0), .c(n211), .d(
        serialdata_24_0), .o1(n79) );
  d04nan02ln0b0 syn_171 ( .a(n198), .b(cmplim_lo[0]), .o1(n95) );
  d04nan02ln0b0 syn_172 ( .a(n79), .b(n95), .o1(n315) );
  d04can03lnsb0 syn_173 ( .a(n207), .b(serialdata_24_0), .c(n211), .d(
        serialdata_25_0), .o1(n80) );
  d04nan02ln0b0 syn_174 ( .a(n198), .b(cmplim_lo[1]), .o1(n99) );
  d04nan02ln0b0 syn_175 ( .a(n80), .b(n99), .o1(n314) );
  d04can03lnsb0 syn_176 ( .a(n207), .b(serialdata_25_0), .c(n211), .d(
        serialdata_26_0), .o1(n81) );
  d04nan02ln0b0 syn_177 ( .a(n198), .b(cmplim_lo[2]), .o1(n111) );
  d04nan02ln0b0 syn_178 ( .a(n81), .b(n111), .o1(n313) );
  d04can03lnsb0 syn_179 ( .a(n204), .b(serialdata_17_0), .c(n211), .d(
        serialdata_18_0), .o1(n82) );
  d04nan02ln0b0 syn_180 ( .a(n196), .b(cmplim_mask[4]), .o1(n97) );
  d04nan02ln0b0 syn_181 ( .a(n82), .b(n97), .o1(n321) );
  d04can03lnsb0 syn_182 ( .a(n207), .b(serialdata_26_0), .c(n211), .d(
        serialdata_27_0), .o1(n83) );
  d04nan02ln0b0 syn_183 ( .a(n198), .b(cmplim_lo[3]), .o1(n103) );
  d04nan02ln0b0 syn_184 ( .a(n83), .b(n103), .o1(n312) );
  d04can03lnsb0 syn_185 ( .a(n207), .b(serialdata_27_0), .c(n211), .d(
        serialdata_28_0), .o1(n84) );
  d04nan02ln0b0 syn_186 ( .a(n198), .b(cmplim_lo[4]), .o1(n105) );
  d04nan02ln0b0 syn_187 ( .a(n84), .b(n105), .o1(n311) );
  d04can03lnsb0 syn_188 ( .a(n207), .b(serialdata_28_0), .c(n211), .d(
        serialdata_29_0), .o1(n85) );
  d04nan02ln0b0 syn_189 ( .a(n198), .b(cmplim_lo[5]), .o1(n116) );
  d04nan02ln0b0 syn_190 ( .a(n85), .b(n116), .o1(n310) );
  d04can03lnsb0 syn_191 ( .a(n207), .b(serialdata_29_0), .c(n211), .d(
        serialdata_30_0), .o1(n88) );
  d04nan02ln0b0 syn_192 ( .a(n198), .b(cmplim_lo[6]), .o1(n109) );
  d04nan02ln0b0 syn_193 ( .a(n88), .b(n109), .o1(n309) );
  d04can03lnsb0 syn_195 ( .a(n204), .b(serialdata_41_0), .c(n211), .d(
        serialdata_42_0), .o1(n89) );
  d04nan02ln0b0 syn_196 ( .a(n196), .b(cmplim_hi[8]), .o1(n107) );
  d04nan02ln0b0 syn_197 ( .a(n89), .b(n107), .o1(n297) );
  d04can03lnsb0 syn_198 ( .a(n207), .b(serialdata_31_0), .c(n211), .d(
        serialdata_32_0), .o1(n90) );
  d04nan02ln0b0 syn_199 ( .a(n198), .b(cmplim_lo[8]), .o1(n114) );
  d04nan02ln0b0 syn_200 ( .a(n90), .b(n114), .o1(n307) );
  d04can03lnsb0 syn_201 ( .a(n204), .b(tdoctrl), .c(n216), .d(serialdata_1_0), 
        .o1(n91) );
  d04nan02ln0b0 syn_202 ( .a(n196), .b(pdata_regval_0), .o1(n155) );
  d04nan02ln0b0 syn_203 ( .a(n91), .b(n155), .o1(n338) );
  d04can03lnsb0 syn_204 ( .a(n204), .b(serialdata_13_0), .c(n216), .d(
        serialdata_14_0), .o1(n93) );
  d04nan02ln0b0 syn_205 ( .a(n93), .b(n92), .o1(n325) );
  d04can03lnsb0 syn_207 ( .a(n209), .b(statusdata_23_0), .c(n211), .d(
        statusdata_24_0), .o1(n96) );
  d04nan02ln0b0 syn_208 ( .a(n96), .b(n95), .o1(n358) );
  d04can03lnsb0 syn_209 ( .a(n209), .b(statusdata_17_0), .c(n216), .d(
        statusdata_18_0), .o1(n98) );
  d04nan02ln0b0 syn_210 ( .a(n98), .b(n97), .o1(n364) );
  d04can03lnsb0 syn_211 ( .a(n209), .b(statusdata_24_0), .c(n211), .d(
        statusdata_25_0), .o1(n100) );
  d04nan02ln0b0 syn_212 ( .a(n100), .b(n99), .o1(n357) );
  d04can03lnsb0 syn_213 ( .a(n209), .b(statusdata_21_0), .c(n216), .d(
        statusdata_22_0), .o1(n102) );
  d04nan02ln0b0 syn_214 ( .a(n102), .b(n101), .o1(n360) );
  d04can03lnsb0 syn_216 ( .a(n209), .b(statusdata_26_0), .c(n216), .d(
        statusdata_27_0), .o1(n104) );
  d04nan02ln0b0 syn_217 ( .a(n104), .b(n103), .o1(n355) );
  d04can03lnsb0 syn_218 ( .a(n209), .b(statusdata_27_0), .c(n211), .d(
        statusdata_28_0), .o1(n106) );
  d04nan02ln0b0 syn_219 ( .a(n106), .b(n105), .o1(n354) );
  d04can03lnsb0 syn_220 ( .a(n204), .b(statusdata_41_0), .c(n216), .d(
        statusdata_42_0), .o1(n108) );
  d04nan02ln0b0 syn_221 ( .a(n108), .b(n107), .o1(n340) );
  d04can03lnsb0 syn_222 ( .a(n207), .b(statusdata_29_0), .c(n211), .d(
        statusdata_30_0), .o1(n110) );
  d04nan02ln0b0 syn_223 ( .a(n110), .b(n109), .o1(n352) );
  d04can03lnsb0 syn_224 ( .a(n209), .b(statusdata_25_0), .c(n216), .d(
        statusdata_26_0), .o1(n112) );
  d04nan02ln0b0 syn_225 ( .a(n112), .b(n111), .o1(n356) );
  d04can03lnsb0 syn_226 ( .a(n209), .b(statusdata_40_0), .c(n216), .d(
        statusdata_41_0), .o1(n113) );
  d04nan02ln0b0 syn_227 ( .a(n198), .b(cmplim_hi[7]), .o1(n143) );
  d04nan02ln0b0 syn_228 ( .a(n113), .b(n143), .o1(n341) );
  d04can03lnsb0 syn_229 ( .a(n207), .b(statusdata_31_0), .c(n211), .d(
        statusdata_32_0), .o1(n115) );
  d04nan02ln0b0 syn_230 ( .a(n115), .b(n114), .o1(n350) );
  d04can03lnsb0 syn_231 ( .a(n207), .b(statusdata_28_0), .c(n211), .d(
        statusdata_29_0), .o1(n117) );
  d04nan02ln0b0 syn_232 ( .a(n117), .b(n116), .o1(n353) );
  d04can03lnsb0 syn_233 ( .a(n207), .b(statusdata_30_0), .c(n211), .d(
        statusdata_31_0), .o1(n118) );
  d04nan02ln0b0 syn_234 ( .a(n198), .b(cmplim_lo[7]), .o1(n131) );
  d04nan02ln0b0 syn_235 ( .a(n118), .b(n131), .o1(n351) );
  d04can03lnsb0 syn_236 ( .a(n207), .b(statusdata_33_0), .c(n211), .d(
        statusdata_34_0), .o1(n119) );
  d04nan02ln0b0 syn_237 ( .a(n198), .b(cmplim_hi[0]), .o1(n137) );
  d04nan02ln0b0 syn_238 ( .a(n119), .b(n137), .o1(n348) );
  d04can03lnsb0 syn_239 ( .a(n209), .b(statusdata_34_0), .c(n216), .d(
        statusdata_35_0), .o1(n120) );
  d04nan02ln0b0 syn_240 ( .a(n196), .b(cmplim_hi[1]), .o1(n139) );
  d04nan02ln0b0 syn_241 ( .a(n120), .b(n139), .o1(n347) );
  d04can03lnsb0 syn_242 ( .a(n209), .b(statusdata_35_0), .c(n216), .d(
        statusdata_36_0), .o1(n121) );
  d04nan02ln0b0 syn_243 ( .a(n196), .b(cmplim_hi[2]), .o1(n133) );
  d04nan02ln0b0 syn_244 ( .a(n121), .b(n133), .o1(n346) );
  d04can03lnsb0 syn_245 ( .a(n209), .b(statusdata_36_0), .c(n216), .d(
        statusdata_37_0), .o1(n122) );
  d04nan02ln0b0 syn_246 ( .a(n196), .b(cmplim_hi[3]), .o1(n135) );
  d04nan02ln0b0 syn_247 ( .a(n122), .b(n135), .o1(n345) );
  d04can03lnsb0 syn_248 ( .a(n209), .b(statusdata_37_0), .c(n216), .d(
        statusdata_38_0), .o1(n123) );
  d04nan02ln0b0 syn_249 ( .a(n196), .b(cmplim_hi[4]), .o1(n145) );
  d04nan02ln0b0 syn_250 ( .a(n123), .b(n145), .o1(n344) );
  d04can03lnsb0 syn_251 ( .a(n209), .b(statusdata_38_0), .c(n216), .d(
        statusdata_39_0), .o1(n124) );
  d04nan02ln0b0 syn_252 ( .a(n196), .b(cmplim_hi[5]), .o1(n141) );
  d04nan02ln0b0 syn_253 ( .a(n124), .b(n141), .o1(n343) );
  d04can03lnsb0 syn_254 ( .a(n209), .b(statusdata_39_0), .c(n216), .d(
        statusdata_40_0), .o1(n128) );
  d04nan02ln0b0 syn_255 ( .a(n196), .b(cmplim_hi[6]), .o1(n129) );
  d04nan02ln0b0 syn_256 ( .a(n128), .b(n129), .o1(n342) );
  d04can03lnsb0 syn_257 ( .a(n204), .b(serialdata_39_0), .c(n216), .d(
        serialdata_40_0), .o1(n130) );
  d04nan02ln0b0 syn_258 ( .a(n130), .b(n129), .o1(n299) );
  d04can03lnsb0 syn_259 ( .a(n207), .b(serialdata_30_0), .c(n211), .d(
        serialdata_31_0), .o1(n132) );
  d04nan02ln0b0 syn_260 ( .a(n132), .b(n131), .o1(n308) );
  d04can03lnsb0 syn_261 ( .a(n204), .b(serialdata_35_0), .c(n216), .d(
        serialdata_36_0), .o1(n134) );
  d04nan02ln0b0 syn_262 ( .a(n134), .b(n133), .o1(n303) );
  d04can03lnsb0 syn_263 ( .a(n204), .b(serialdata_36_0), .c(n216), .d(
        serialdata_37_0), .o1(n136) );
  d04nan02ln0b0 syn_264 ( .a(n136), .b(n135), .o1(n302) );
  d04can03lnsb0 syn_265 ( .a(n207), .b(serialdata_33_0), .c(n211), .d(
        serialdata_34_0), .o1(n138) );
  d04nan02ln0b0 syn_266 ( .a(n138), .b(n137), .o1(n305) );
  d04can03lnsb0 syn_267 ( .a(n204), .b(serialdata_34_0), .c(n216), .d(
        serialdata_35_0), .o1(n140) );
  d04nan02ln0b0 syn_268 ( .a(n140), .b(n139), .o1(n304) );
  d04can03lnsb0 syn_269 ( .a(n204), .b(serialdata_38_0), .c(n216), .d(
        serialdata_39_0), .o1(n142) );
  d04nan02ln0b0 syn_270 ( .a(n142), .b(n141), .o1(n300) );
  d04can03lnsb0 syn_271 ( .a(n207), .b(serialdata_40_0), .c(n211), .d(
        serialdata_41_0), .o1(n144) );
  d04nan02ln0b0 syn_272 ( .a(n144), .b(n143), .o1(n298) );
  d04can03lnsb0 syn_273 ( .a(n204), .b(serialdata_37_0), .c(n216), .d(
        serialdata_38_0), .o1(n146) );
  d04nan02ln0b0 syn_274 ( .a(n146), .b(n145), .o1(n301) );
  d04can03lnsb0 syn_275 ( .a(n207), .b(serialdata_32_0), .c(n211), .d(
        serialdata_33_0), .o1(n149) );
  d04nan02ln0b0 syn_276 ( .a(n198), .b(cmplim_lo[9]), .o1(n152) );
  d04nan02ln0b0 syn_277 ( .a(n149), .b(n152), .o1(n306) );
  d04can03lnsb0 syn_278 ( .a(n207), .b(statusdata_32_0), .c(n211), .d(
        statusdata_33_0), .o1(n153) );
  d04nan02ln0b0 syn_279 ( .a(n153), .b(n152), .o1(n349) );
  d04can03lnsb0 syn_280 ( .a(n204), .b(tdostat), .c(n216), .d(statusdata_1_0), 
        .o1(n156) );
  d04nan02ln0b0 syn_281 ( .a(n156), .b(n155), .o1(n381) );
  d04can16lnsb0 syn_283 ( .a(n198), .b(cmp_sticky_fail_hi), .c(n206), .d(
        statusdata_3_0), .e(n212), .f(statusdata_4_0), .o1(n158) );
  d04inn20ln0b0 syn_284 ( .a(n158), .o1(n378) );
  d04can16lnsb0 syn_285 ( .a(n198), .b(cmp_firstfail_cnt[4]), .c(n206), .d(
        statusdata_8_0), .e(n212), .f(statusdata_9_0), .o1(n159) );
  d04inn20ln0b0 syn_286 ( .a(n159), .o1(n373) );
  d04can16lnsb0 syn_287 ( .a(n198), .b(cmp_sticky_fail_lo), .c(n206), .d(
        statusdata_2_0), .e(n212), .f(statusdata_3_0), .o1(n160) );
  d04inn20ln0b0 syn_288 ( .a(n160), .o1(n379) );
  d04can16lnsb0 syn_289 ( .a(n198), .b(cmp_firstfail_cnt[2]), .c(n206), .d(
        statusdata_6_0), .e(n212), .f(statusdata_7_0), .o1(n161) );
  d04inn20ln0b0 syn_290 ( .a(n161), .o1(n375) );
  d04can16lnsb0 syn_291 ( .a(n198), .b(cmp_firstfail_cnt[0]), .c(n206), .d(
        statusdata_4_0), .e(n212), .f(statusdata_5_0), .o1(n162) );
  d04inn20ln0b0 syn_292 ( .a(n162), .o1(n377) );
  d04can16lnsb0 syn_293 ( .a(n198), .b(cmp_firstfail_cnt[1]), .c(n206), .d(
        statusdata_5_0), .e(n212), .f(statusdata_6_0), .o1(n163) );
  d04inn20ln0b0 syn_294 ( .a(n163), .o1(n376) );
  d04can16lnsb0 syn_295 ( .a(n198), .b(cmp_firstfail_cnt[3]), .c(n206), .d(
        statusdata_7_0), .e(n212), .f(statusdata_8_0), .o1(n164) );
  d04inn20ln0b0 syn_296 ( .a(n164), .o1(n374) );
  d04can16lnsb0 syn_297 ( .a(n198), .b(n199), .c(n207), .d(statusdata_1_0), 
        .e(n211), .f(statusdata_2_0), .o1(n167) );
  d04inn20ln0b0 syn_298 ( .a(n167), .o1(n380) );
  d04can16lnsb0 syn_299 ( .a(n198), .b(cmp_firstfail_cnt[5]), .c(n206), .d(
        statusdata_9_0), .e(n212), .f(statusdata_10_0), .o1(n168) );
  d04inn20ln0b0 syn_300 ( .a(n168), .o1(n372) );
  d04can16lnsb0 syn_301 ( .a(n198), .b(cmp_firstfail_cnt[6]), .c(n206), .d(
        statusdata_10_0), .e(n212), .f(statusdata_11_0), .o1(n169) );
  d04inn20ln0b0 syn_302 ( .a(n169), .o1(n371) );
  d04can16lnsb0 syn_303 ( .a(n198), .b(cmp_firstfail_cnt[7]), .c(n206), .d(
        statusdata_11_0), .e(n212), .f(statusdata_12_0), .o1(n171) );
  d04inn20ln0b0 syn_304 ( .a(n171), .o1(n370) );
  d04can16lnsb0 syn_305 ( .a(n196), .b(n203), .c(n204), .d(statusdata_12_0), 
        .e(n216), .f(statusdata_13_0), .o1(n175) );
  d04inn20ln0b0 syn_306 ( .a(n175), .o1(n369) );
  d04can16lnsb0 syn_307 ( .a(serialdata_2_0), .b(n211), .c(pdata_regval_1), 
        .d(n198), .e(serialdata_1_0), .f(n207), .o1(n176) );
  d04inn20ln0b0 syn_308 ( .a(n176), .o1(n337) );
  d04can16lnsb0 syn_309 ( .a(serialdata_12_0), .b(n216), .c(pdata_regval_11_0), 
        .d(n196), .e(serialdata_11_0), .f(n204), .o1(n180) );
  d04inn20ln0b0 syn_310 ( .a(n180), .o1(n327) );
  d04aon03lnsa5 syn_311 ( .a(n201), .b(serialdata_21_0), .c(n200), .d(
        cmplim_mask[8]), .o(n251) );
  d04aon03lnsa5 syn_312 ( .a(n201), .b(serialdata_18_0), .c(n200), .d(
        cmplim_mask[5]), .o(n245) );
  d04aon03lnsa5 syn_313 ( .a(n201), .b(serialdata_19_0), .c(n200), .d(
        cmplim_mask[6]), .o(n247) );
  d04aon03lnsa5 syn_314 ( .a(n201), .b(serialdata_20_0), .c(n200), .d(
        cmplim_mask[7]), .o(n249) );
  d04aon03lnsa5 syn_315 ( .a(n201), .b(serialdata_22_0), .c(n200), .d(
        cmplim_mask[9]), .o(n253) );
  d04inn20ln0b0 syn_316 ( .a(pdata_regval_12_0), .o1(n185) );
  d04con01ln0b0 syn_317 ( .b(n186), .c(n185), .a(n184), .o1(n233) );
  d04cak01ln0b5 syn_10 ( .a(enable), .b(shift), .c(n198), .o1(n1) );
  d04bfn00ln0c5 syn_9 ( .a(jpwrgood_rst_b), .o(n191) );
  d04inn20ln0b0 syn_12 ( .a(n220), .o1(n193) );
  d04inn20ln0b0 syn_14 ( .a(cmpsel_signed), .o1(n194) );
  d04inn20ln0b0 syn_59 ( .a(n184), .o1(n199) );
  d04inn20ln0b0 syn_74 ( .a(n204), .o1(n205) );
  d04fyn8fld0a5 pdata_regval_reg_29 ( .d(n267), .clkb(jtclk), .rb(n190), .psb(
        1'b1), .o(cmplim_lo[6]) );
  d04fyn8fld0a5 pdata_regval_reg_9 ( .d(n227), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmpsel_sgnmag) );
  d04fyn8fld5e0 pdata_regval_reg_16 ( .d(n241), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmplim_mask[3]) );
  d04fyn8fld5c0 pdata_regval_reg_7 ( .d(n223), .clkb(jtclk), .rb(n192), .psb(
        1'b1), .o(cmp_mirror_sel) );
  d04inn20ln0b0 syn_61 ( .a(n24), .o1(n25) );
  d04inn20ln0b0 syn_56 ( .a(n20), .o1(n21) );
  d04inn20ln0b0 syn_51 ( .a(n17), .o1(n18) );
  d04inn20ln0b0 syn_36 ( .a(n11), .o1(n12) );
  d04inn20ln0b0 syn_46 ( .a(n15), .o1(n16) );
  d04inn20ln0b0 syn_41 ( .a(n13), .o1(n14) );
  d04bfn00ln0a5 syn_82 ( .a(n1), .o(n206) );
  d04bfn00ln0b5 syn_72 ( .a(n1), .o(n204) );
  d04bfn00ln0b5 syn_95 ( .a(n1), .o(n209) );
  d04bfn00lduk0 syn_86 ( .a(n1), .o(n207) );
  d04inn00ln0b5 syn_32 ( .a(n195), .o1(n196) );
  d04inn00ld0f7 syn_87 ( .a(n207), .o1(n208) );
  d04inn00ln0b5 syn_119 ( .a(n27), .o1(n212) );
  d04inn00lnud0 syn_124 ( .a(n27), .o1(n216) );
  d04bfn00ln0a5 syn_6 ( .a(cmp_mirror_sel), .o(n220) );
  d04inn20ln0b0 syn_123 ( .a(capture), .o1(n218) );
  d04bfn00ld0c7 syn_7 ( .a(jpwrgood_rst_b), .o(n189) );
  d04bfn00ld0c7 syn_8 ( .a(jpwrgood_rst_b), .o(n190) );
  d04fyn0fld0a5 statusdata_reg_20 ( .d(n361), .clk(jtclk), .rb(jpwrgood_rst_b), 
        .psb(1'b1), .o(statusdata_20_0) );
  d04fyn0fld0a5 statusdata_reg_33 ( .d(n348), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(statusdata_33_0) );
  d04fyn0fld0a5 statusdata_reg_29 ( .d(n352), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(statusdata_29_0) );
  d04fyn0fld0a5 statusdata_reg_36 ( .d(n345), .clk(jtclk), .rb(jpwrgood_rst_b), 
        .psb(1'b1), .o(statusdata_36_0) );
  d04fyn0fld0a5 statusdata_reg_38 ( .d(n343), .clk(jtclk), .rb(jpwrgood_rst_b), 
        .psb(1'b1), .o(statusdata_38_0) );
  d04fyn0fld0a5 statusdata_reg_26 ( .d(n355), .clk(jtclk), .rb(jpwrgood_rst_b), 
        .psb(1'b1), .o(statusdata_26_0) );
  d04fyn0fld0a5 statusdata_reg_16 ( .d(n365), .clk(jtclk), .rb(jpwrgood_rst_b), 
        .psb(1'b1), .o(statusdata_16_0) );
  d04fyn0fld0a5 statusdata_reg_35 ( .d(n346), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_35_0) );
  d04fyn0fld0a5 statusdata_reg_40 ( .d(n341), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_40_0) );
  d04fyn0fld0a5 statusdata_reg_15 ( .d(n366), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_15_0) );
  d04fyn0fld0a5 statusdata_reg_19 ( .d(n362), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_19_0) );
  d04fyn0fld0a5 statusdata_reg_39 ( .d(n342), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_39_0) );
  d04fyn0fld0a5 statusdata_reg_14 ( .d(n367), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_14_0) );
  d04fyn0fld0a5 statusdata_reg_18 ( .d(n363), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_18_0) );
  d04fyn0fld0a5 statusdata_reg_25 ( .d(n356), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_25_0) );
  d04fyn0fld0a5 statusdata_reg_37 ( .d(n344), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_37_0) );
  d04fyn0fld0a5 statusdata_reg_41 ( .d(n340), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_41_0) );
  d04fyn0fld0a5 statusdata_reg_24 ( .d(n357), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_24_0) );
  d04fyn0fld0a5 statusdata_reg_28 ( .d(n353), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(statusdata_28_0) );
  d04fyn0fld0a5 statusdata_reg_22 ( .d(n359), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_22_0) );
  d04fyn0fld0a5 statusdata_reg_4 ( .d(n377), .clk(jtclk), .rb(n191), .psb(1'b1), .o(statusdata_4_0) );
  d04fyn0fld0a5 statusdata_reg_27 ( .d(n354), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_27_0) );
  d04fyn0fld0a5 statusdata_reg_42 ( .d(n339), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(statusdata_42_0) );
  d04fyn0fld0a5 statusdata_reg_3 ( .d(n378), .clk(jtclk), .rb(n191), .psb(1'b1), .o(statusdata_3_0) );
  d04fyn0fld0a5 statusdata_reg_30 ( .d(n351), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(statusdata_30_0) );
  d04fyn0fld0a5 statusdata_reg_32 ( .d(n349), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(statusdata_32_0) );
  d04fyn0fld0a5 statusdata_reg_10 ( .d(n371), .clk(jtclk), .rb(n191), .psb(
        1'b1), .o(statusdata_10_0) );
  d04fyn0fld0a5 statusdata_reg_11 ( .d(n370), .clk(jtclk), .rb(n191), .psb(
        1'b1), .o(statusdata_11_0) );
  d04fyn0fld0a5 statusdata_reg_21 ( .d(n360), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_21_0) );
  d04fyn0fld0a5 statusdata_reg_5 ( .d(n376), .clk(jtclk), .rb(n191), .psb(1'b1), .o(statusdata_5_0) );
  d04fyn0fld0a5 statusdata_reg_7 ( .d(n374), .clk(jtclk), .rb(n191), .psb(1'b1), .o(statusdata_7_0) );
  d04fyn0fld0a5 statusdata_reg_13 ( .d(n368), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_13_0) );
  d04fyn0fld0a5 statusdata_reg_17 ( .d(n364), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_17_0) );
  d04fyn0fld0a5 statusdata_reg_9 ( .d(n372), .clk(jtclk), .rb(n191), .psb(1'b1), .o(statusdata_9_0) );
  d04fyn0fld0a5 statusdata_reg_23 ( .d(n358), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(statusdata_23_0) );
  d04fyn0fld0a5 statusdata_reg_8 ( .d(n373), .clk(jtclk), .rb(n191), .psb(1'b1), .o(statusdata_8_0) );
  d04fyn0fld0a5 statusdata_reg_6 ( .d(n375), .clk(jtclk), .rb(n191), .psb(1'b1), .o(statusdata_6_0) );
  d04fyn0fld0a5 statusdata_reg_31 ( .d(n350), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(statusdata_31_0) );
  d04fyn0fld0a5 statusdata_reg_34 ( .d(n347), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(statusdata_34_0) );
  d04fyn0fld0a5 statusdata_reg_2 ( .d(n379), .clk(jtclk), .rb(n191), .psb(1'b1), .o(statusdata_2_0) );
  d04fyn0fld0a5 statusdata_reg_1 ( .d(n380), .clk(jtclk), .rb(n192), .psb(1'b1), .o(statusdata_1_0) );
  d04fyn0fld0a5 statusdata_reg_12 ( .d(n369), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(statusdata_12_0) );
  d04fyn0fld0a5 serialdata_reg_14 ( .d(n324), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(serialdata_14_0) );
  d04fyn0fld0a5 serialdata_reg_13 ( .d(n325), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(serialdata_13_0) );
  d04fyn0fld0a5 serialdata_reg_16 ( .d(n322), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(serialdata_16_0) );
  d04fyn0fld0a5 serialdata_reg_15 ( .d(n323), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(serialdata_15_0) );
  d04fyn0fld0a5 serialdata_reg_29 ( .d(n309), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_29_0) );
  d04fyn0fld0a5 serialdata_reg_28 ( .d(n310), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_28_0) );
  d04fyn0fld0a5 serialdata_reg_17 ( .d(n321), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(serialdata_17_0) );
  d04fyn0fld0a5 serialdata_reg_22 ( .d(n316), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_22_0) );
  d04fyn0fld0a5 serialdata_reg_30 ( .d(n308), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_30_0) );
  d04fyn0fld0a5 serialdata_reg_36 ( .d(n302), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(serialdata_36_0) );
  d04fyn0fld0a5 serialdata_reg_38 ( .d(n300), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(serialdata_38_0) );
  d04fyn0fld0a5 serialdata_reg_35 ( .d(n303), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(serialdata_35_0) );
  d04fyn0fld0a5 serialdata_reg_41 ( .d(n297), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(serialdata_41_0) );
  d04fyn0fld0a5 serialdata_reg_19 ( .d(n319), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(serialdata_19_0) );
  d04fyn0fld0a5 serialdata_reg_9 ( .d(n329), .clk(jtclk), .rb(n192), .psb(1'b1), .o(serialdata_9_0) );
  d04fyn0fld0a5 serialdata_reg_31 ( .d(n307), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_31_0) );
  d04fyn0fld0a5 serialdata_reg_33 ( .d(n305), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_33_0) );
  d04fyn0fld0a5 serialdata_reg_39 ( .d(n299), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(serialdata_39_0) );
  d04fyn0fld0a5 serialdata_reg_20 ( .d(n318), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(serialdata_20_0) );
  d04fyn0fld0a5 serialdata_reg_24 ( .d(n314), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(serialdata_24_0) );
  d04fyn0fld0a5 serialdata_reg_21 ( .d(n317), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(serialdata_21_0) );
  d04fyn0fld0a5 serialdata_reg_37 ( .d(n301), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(serialdata_37_0) );
  d04fyn0fld0a5 serialdata_reg_25 ( .d(n313), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_25_0) );
  d04fyn0fld0a5 serialdata_reg_23 ( .d(n315), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_23_0) );
  d04fyn0fld0a5 serialdata_reg_10 ( .d(n328), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_10_0) );
  d04fyn0fld0a5 serialdata_reg_6 ( .d(n332), .clk(jtclk), .rb(n192), .psb(1'b1), .o(serialdata_6_0) );
  d04fyn0fld0a5 serialdata_reg_7 ( .d(n331), .clk(jtclk), .rb(n192), .psb(1'b1), .o(serialdata_7_0) );
  d04fyn0fld0a5 serialdata_reg_2 ( .d(n336), .clk(jtclk), .rb(n192), .psb(1'b1), .o(serialdata_2_0) );
  d04fyn0fld0a5 serialdata_reg_11 ( .d(n327), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(serialdata_11_0) );
  d04fyn0fld0a5 serialdata_reg_3 ( .d(n335), .clk(jtclk), .rb(n192), .psb(1'b1), .o(serialdata_3_0) );
  d04fyn0fld0a5 serialdata_reg_8 ( .d(n330), .clk(jtclk), .rb(n192), .psb(1'b1), .o(serialdata_8_0) );
  d04fyn0fld0a5 serialdata_reg_26 ( .d(n312), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_26_0) );
  d04fyn0fld0a5 serialdata_reg_27 ( .d(n311), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_27_0) );
  d04fyn0fld0a5 serialdata_reg_18 ( .d(n320), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_18_0) );
  d04fyn0fld0a5 serialdata_reg_32 ( .d(n306), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_32_0) );
  d04fyn0fld0a5 serialdata_reg_40 ( .d(n298), .clk(jtclk), .rb(n190), .psb(
        1'b1), .o(serialdata_40_0) );
  d04fyn0fld0a5 serialdata_reg_42 ( .d(n296), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(serialdata_42_0) );
  d04fyn0fld0a5 serialdata_reg_34 ( .d(n304), .clk(jtclk), .rb(n189), .psb(
        1'b1), .o(serialdata_34_0) );
  d04fyn0fld0a5 serialdata_reg_4 ( .d(n334), .clk(jtclk), .rb(n192), .psb(1'b1), .o(serialdata_4_0) );
  d04fyn0fld0a5 serialdata_reg_5 ( .d(n333), .clk(jtclk), .rb(n192), .psb(1'b1), .o(serialdata_5_0) );
  d04fyn0fld0a5 serialdata_reg_1 ( .d(n337), .clk(jtclk), .rb(n190), .psb(1'b1), .o(serialdata_1_0) );
  d04fyn0fld0a5 serialdata_reg_12 ( .d(n326), .clk(jtclk), .rb(n192), .psb(
        1'b1), .o(serialdata_12_0) );
  d04fyn0fld0a5 statusdata_reg_0 ( .d(n381), .clk(jtclk), .rb(n189), .psb(1'b1), .o(tdostat) );
  d04fyn0fld0a5 serialdata_reg_0 ( .d(n338), .clk(jtclk), .rb(n189), .psb(1'b1), .o(tdoctrl) );
  d04inn00ld0f7 syn_54 ( .a(n197), .o1(n198) );
  d04fyn8fld0c0 pdata_regval_reg_10 ( .d(n229), .clkb(jtclk), .rb(n190), .psb(
        1'b1), .o(cmpsel_signed) );
  d04bfn00ld0c7 syn_11 ( .a(jpwrgood_rst_b), .o(n192) );
  d04nab02ln0f0 syn_53 ( .a(n218), .b(enable), .out(n197) );
  d04ann02lnsb5 syn_69 ( .a(enable), .b(update), .o(n186) );
  d04bfn00ln0a5 syn_65 ( .a(n37), .o(n202) );
  d04bfn00ln0a5 syn_16 ( .a(n197), .o(n195) );
  d04nab02ld0i0 syn_13 ( .a(n198), .b(n208), .out(n27) );
  d04bfn00ln0a5 syn_63 ( .a(n37), .o(n200) );
  d04inn20ln0b0 syn_66 ( .a(n202), .o1(n203) );
  d04inn00lnud0 syn_118 ( .a(n27), .o1(n211) );
  d04can03lnsb0 syn_120 ( .a(n196), .b(cmplim_hi[9]), .c(n216), .d(tdi), .o1(
        n53) );
  d04inn20ln0b0 syn_64 ( .a(n200), .o1(n201) );
endmodule


module stap_swcomp_rtdr ( stap_fsm_tlrs, ftap_tck, ftap_tdi, fdfx_powergood, 
        powergood_rst_trst_b, stap_fsm_capture_dr, stap_fsm_shift_dr, 
        stap_fsm_update_dr, stap_fsm_e2dr, stap_swcomp_pre_tdo, 
        tap_swcomp_active, swcomp_stap_post_tdo, swcompctrl_tdo, 
        swcompstat_tdo, iso );
  input stap_fsm_tlrs, ftap_tck, ftap_tdi, fdfx_powergood,
         powergood_rst_trst_b, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr, stap_fsm_e2dr, stap_swcomp_pre_tdo,
         tap_swcomp_active, iso;
  output swcomp_stap_post_tdo, swcompctrl_tdo, swcompstat_tdo;
  wire   n1, n2, n3, cmplim_hi_9_0, cmplim_hi_8_0, cmplim_hi_7_0,
         cmplim_hi_6_0, cmplim_hi_5_0, cmplim_hi_4_0, cmplim_hi_3_0,
         cmplim_hi_2_0, cmplim_hi_1_0, cmplim_hi_0_0, cmplim_lo_9_0,
         cmplim_lo_8_0, cmplim_lo_7_0, cmplim_lo_6_0, cmplim_lo_5_0,
         cmplim_lo_4_0, cmplim_lo_3_0, cmplim_lo_2_0, cmplim_lo_1_0,
         cmplim_lo_0_0, cmplim_mask_9_0, cmplim_mask_8_0, cmplim_mask_7_0,
         cmplim_mask_6_0, cmplim_mask_5_0, cmplim_mask_4_0, cmplim_mask_3_0,
         cmplim_mask_2_0, cmplim_mask_1_0, cmplim_mask_0_0, cmp_mirror_sel,
         cmp_tdo_sel, cmp_tdo_forcelo, cmpen_main, cmpsel_signed,
         cmpsel_sgnmag, cmpen_le_limhi, cmpen_ge_limlo, cmpen_blk_multi_fail,
         cmp_firstfail_cnt_7_0, cmp_firstfail_cnt_6_0, cmp_firstfail_cnt_5_0,
         cmp_firstfail_cnt_4_0, cmp_firstfail_cnt_3_0, cmp_firstfail_cnt_2_0,
         cmp_firstfail_cnt_1_0, cmp_firstfail_cnt_0_0, cmp_sticky_fail_hi,
         cmp_sticky_fail_lo, n4, n5;

  stap_tapswcomp i_stap_tapswcomp ( .jtclk(ftap_tck), .jtrst_b(
        powergood_rst_trst_b), .tdi(stap_swcomp_pre_tdo), .test_logic_reset(
        stap_fsm_tlrs), .capture_dr(stap_fsm_capture_dr), .shift_dr(
        stap_fsm_shift_dr), .exit2_dr(stap_fsm_e2dr), .tap_swcomp_active(
        tap_swcomp_active), .cmplim_hi({cmplim_hi_9_0, cmplim_hi_8_0, 
        cmplim_hi_7_0, cmplim_hi_6_0, cmplim_hi_5_0, cmplim_hi_4_0, 
        cmplim_hi_3_0, cmplim_hi_2_0, cmplim_hi_1_0, cmplim_hi_0_0}), 
        .cmplim_lo({cmplim_lo_9_0, cmplim_lo_8_0, cmplim_lo_7_0, cmplim_lo_6_0, 
        cmplim_lo_5_0, cmplim_lo_4_0, cmplim_lo_3_0, cmplim_lo_2_0, 
        cmplim_lo_1_0, cmplim_lo_0_0}), .cmplim_mask({cmplim_mask_9_0, 
        cmplim_mask_8_0, cmplim_mask_7_0, cmplim_mask_6_0, cmplim_mask_5_0, 
        cmplim_mask_4_0, cmplim_mask_3_0, cmplim_mask_2_0, cmplim_mask_1_0, 
        cmplim_mask_0_0}), .cmp_mirror_sel(n5), .cmp_tdo_sel(cmp_tdo_sel), 
        .cmp_tdo_forcelo(cmp_tdo_forcelo), .cmpen_main(cmpen_main), 
        .cmpsel_signed(cmpsel_signed), .cmpsel_sgnmag(cmpsel_sgnmag), 
        .cmpen_le_limhi(cmpen_le_limhi), .cmpen_ge_limlo(cmpen_ge_limlo), 
        .cmpen_blk_multi_fail(cmpen_blk_multi_fail), .cmp_firstfail_cnt({
        cmp_firstfail_cnt_7_0, cmp_firstfail_cnt_6_0, cmp_firstfail_cnt_5_0, 
        cmp_firstfail_cnt_4_0, cmp_firstfail_cnt_3_0, cmp_firstfail_cnt_2_0, 
        cmp_firstfail_cnt_1_0, cmp_firstfail_cnt_0_0}), .cmp_sticky_fail_hi(
        cmp_sticky_fail_hi), .cmp_sticky_fail_lo(cmp_sticky_fail_lo), .tdo(n1)
         );
  stap_tapswcompreg i_stap_tapswcompreg ( .jtclk(ftap_tck), .jpwrgood_rst_b(n4), .tdi(ftap_tdi), .capture(stap_fsm_capture_dr), .shift(stap_fsm_shift_dr), 
        .update(stap_fsm_update_dr), .enable(tap_swcomp_active), 
        .cmp_firstfail_cnt({cmp_firstfail_cnt_7_0, cmp_firstfail_cnt_6_0, 
        cmp_firstfail_cnt_5_0, cmp_firstfail_cnt_4_0, cmp_firstfail_cnt_3_0, 
        cmp_firstfail_cnt_2_0, cmp_firstfail_cnt_1_0, cmp_firstfail_cnt_0_0}), 
        .cmp_sticky_fail_hi(cmp_sticky_fail_hi), .cmp_sticky_fail_lo(
        cmp_sticky_fail_lo), .cmplim_hi({cmplim_hi_9_0, cmplim_hi_8_0, 
        cmplim_hi_7_0, cmplim_hi_6_0, cmplim_hi_5_0, cmplim_hi_4_0, 
        cmplim_hi_3_0, cmplim_hi_2_0, cmplim_hi_1_0, cmplim_hi_0_0}), 
        .cmplim_lo({cmplim_lo_9_0, cmplim_lo_8_0, cmplim_lo_7_0, cmplim_lo_6_0, 
        cmplim_lo_5_0, cmplim_lo_4_0, cmplim_lo_3_0, cmplim_lo_2_0, 
        cmplim_lo_1_0, cmplim_lo_0_0}), .cmplim_mask({cmplim_mask_9_0, 
        cmplim_mask_8_0, cmplim_mask_7_0, cmplim_mask_6_0, cmplim_mask_5_0, 
        cmplim_mask_4_0, cmplim_mask_3_0, cmplim_mask_2_0, cmplim_mask_1_0, 
        cmplim_mask_0_0}), .cmp_mirror_sel(cmp_mirror_sel), .cmp_tdo_sel(
        cmp_tdo_sel), .cmp_tdo_forcelo(cmp_tdo_forcelo), .cmpen_main(
        cmpen_main), .cmpsel_signed(cmpsel_signed), .cmpsel_sgnmag(
        cmpsel_sgnmag), .cmpen_le_limhi(cmpen_le_limhi), .cmpen_ge_limlo(
        cmpen_ge_limlo), .cmpen_blk_multi_fail(cmpen_blk_multi_fail), 
        .tdoctrl(n2), .tdostat(n3) );
  d04sca00ld0b0 snps_pd_stap_VNN__i_from_vccsa_to_outputs_snps_swcompstat_tdo__UPF_ISO ( 
        .a(n3), .en(iso), .o(swcompstat_tdo) ); //synopsys isolation_upf i_from_vccsa_to_outputs+pd_stap_VNN
  d04sca00ld0b0 snps_pd_stap_VNN__i_from_vccsa_to_outputs_snps_swcompctrl_tdo__UPF_ISO ( 
        .a(n2), .en(iso), .o(swcompctrl_tdo) ); //synopsys isolation_upf i_from_vccsa_to_outputs+pd_stap_VNN
  d04sca00ld0b0 snps_pd_stap_VNN__i_from_vccsa_to_outputs_snps_swcomp_stap_post_tdo__UPF_ISO ( 
        .a(n1), .en(iso), .o(swcomp_stap_post_tdo) ); //synopsys isolation_upf i_from_vccsa_to_outputs+pd_stap_VNN
  d04bfn00lduk0 syn_2 ( .a(cmp_mirror_sel), .o(n5) );
  d04bfn00ld0c7 syn_1 ( .a(fdfx_powergood), .o(n4) );
endmodule


module stap ( ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, ftap_slvidcode, 
        atap_tdo, atap_tdoen, fdfx_powergood, tdr_data_out, tdr_data_in, 
        fdfx_secure_policy, fdfx_earlyboot_exit, fdfx_policy_update, 
        sftapnw_ftap_secsel, sftapnw_ftap_enabletdo, sftapnw_ftap_enabletap, 
        sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, sntapnw_atap_tdo_en, ftapsslv_tck, 
        ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, 
        atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2, 
        sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sntapnw_atap_tdo2, 
        sntapnw_atap_tdo2_en, sn_fwtap_wrck, sn_fwtap_wrst_b, 
        sn_fwtap_capturewr, sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, 
        sn_fwtap_selectwir, sn_awtap_wso, sn_fwtap_wsi, stap_fbscan_tck, 
        stap_abscan_tdo, stap_fbscan_capturedr, stap_fbscan_shiftdr, 
        stap_fbscan_updatedr, stap_fbscan_updatedr_clk, stap_fbscan_runbist_en, 
        stap_fbscan_highz, stap_fbscan_extogen, stap_fbscan_intest_mode, 
        stap_fbscan_chainen, stap_fbscan_mode, stap_fbscan_extogsig_b, 
        stap_fsm_tlrs, ftap_pwrdomain_rst_b, stap_fbscan_d6init, 
        stap_fbscan_d6actestsig_b, stap_fbscan_d6select, rtdr_tap_tdo, 
        tap_rtdr_irdec, tap_rtdr_prog_rst_b, tap_rtdr_tdi, tap_rtdr_capture, 
        tap_rtdr_shift, tap_rtdr_update, tap_rtdr_tck, tap_rtdr_powergood, 
        tap_rtdr_selectir, tap_rtdr_rti, stap_isol_en_b );
  input [31:0] ftap_slvidcode;
  output [0:0] tdr_data_out;
  input [0:0] tdr_data_in;
  input [3:0] fdfx_secure_policy;
  output [0:0] sftapnw_ftap_secsel;
  output [0:0] sftapnw_ftap_enabletdo;
  output [0:0] sftapnw_ftap_enabletap;
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [0:0] sn_awtap_wso;
  output [0:0] sn_fwtap_wsi;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  input ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, fdfx_powergood,
         fdfx_earlyboot_exit, fdfx_policy_update, sntapnw_atap_tdo,
         ftapsslv_tck, ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi,
         sntapnw_atap_tdo2, stap_abscan_tdo, ftap_pwrdomain_rst_b,
         stap_isol_en_b;
  output atap_tdo, atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms,
         sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo, atapsslv_tdoen,
         sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b,
         sntapnw_ftap_tdi2, sn_fwtap_wrck, sn_fwtap_wrst_b, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_selectwir,
         stap_fbscan_tck, stap_fbscan_capturedr, stap_fbscan_shiftdr,
         stap_fbscan_updatedr, stap_fbscan_updatedr_clk,
         stap_fbscan_runbist_en, stap_fbscan_highz, stap_fbscan_extogen,
         stap_fbscan_intest_mode, stap_fbscan_chainen, stap_fbscan_mode,
         stap_fbscan_extogsig_b, stap_fsm_tlrs, stap_fbscan_d6init,
         stap_fbscan_d6actestsig_b, stap_fbscan_d6select, tap_rtdr_tck,
         tap_rtdr_powergood, tap_rtdr_selectir, tap_rtdr_rti;
  wire   powergood_rst_trst_b, stap_fsm_e2dr, stap_fsm_capture_ir,
         stap_fsm_shift_ir, stap_fsm_update_ir, stap_fsm_capture_dr,
         stap_fsm_shift_dr, stap_fsm_update_dr, stap_irreg_ireg_7_0,
         stap_irreg_ireg_6_0, stap_irreg_ireg_5_0, stap_irreg_ireg_4_0,
         stap_irreg_ireg_3_0, stap_irreg_ireg_2_0, stap_irreg_ireg_1_0,
         stap_irreg_ireg_0_0, stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0,
         stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0,
         stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0,
         stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0,
         stap_irreg_serial_out, stap_irdecoder_drselect_3_0,
         stap_irdecoder_drselect_2_0, stap_irdecoder_drselect_1_0,
         stap_irdecoder_drselect_0_0, stap_and_all_bits_irreg,
         tap_swcomp_active, dfxsecure_feature_en_2_0, dfxsecure_feature_en_1_0,
         dfxsecure_feature_en_0_0, stap_drreg_tdo_3_0, stap_drreg_tdo_2_0,
         stap_drreg_tdo_1_0, stap_drreg_tdo_0_0, swcompctrl_tdo,
         swcompstat_tdo, swcomp_stap_post_tdo, stap_mux_tdo, tdo_dr,
         stap_tdomux_tdoen, n_2_net_0, n21, n22, n65, SYNOPSYS_UNCONNECTED_1,
         SYNOPSYS_UNCONNECTED_2, SYNOPSYS_UNCONNECTED_3,
         SYNOPSYS_UNCONNECTED_4, SYNOPSYS_UNCONNECTED_5,
         SYNOPSYS_UNCONNECTED_6, SYNOPSYS_UNCONNECTED_7,
         SYNOPSYS_UNCONNECTED_8, SYNOPSYS_UNCONNECTED_9,
         SYNOPSYS_UNCONNECTED_10, SYNOPSYS_UNCONNECTED_11,
         SYNOPSYS_UNCONNECTED_12, SYNOPSYS_UNCONNECTED_13,
         SYNOPSYS_UNCONNECTED_14, SYNOPSYS_UNCONNECTED_15,
         SYNOPSYS_UNCONNECTED_16, SYNOPSYS_UNCONNECTED_17,
         SYNOPSYS_UNCONNECTED_18, SYNOPSYS_UNCONNECTED_19,
         SYNOPSYS_UNCONNECTED_20, SYNOPSYS_UNCONNECTED_21,
         SYNOPSYS_UNCONNECTED_22, SYNOPSYS_UNCONNECTED_23,
         SYNOPSYS_UNCONNECTED_24, SYNOPSYS_UNCONNECTED_25,
         SYNOPSYS_UNCONNECTED_26, SYNOPSYS_UNCONNECTED_27,
         SYNOPSYS_UNCONNECTED_28, SYNOPSYS_UNCONNECTED_29,
         SYNOPSYS_UNCONNECTED_30, SYNOPSYS_UNCONNECTED_31,
         SYNOPSYS_UNCONNECTED_32, SYNOPSYS_UNCONNECTED_33,
         SYNOPSYS_UNCONNECTED_34, SYNOPSYS_UNCONNECTED_35,
         SYNOPSYS_UNCONNECTED_36, SYNOPSYS_UNCONNECTED_37,
         SYNOPSYS_UNCONNECTED_38, SYNOPSYS_UNCONNECTED_39,
         SYNOPSYS_UNCONNECTED_40;
  assign tap_rtdr_rti = 1'b0;
  assign tap_rtdr_selectir = 1'b0;
  assign tap_rtdr_powergood = 1'b1;
  assign tap_rtdr_update[0] = 1'b0;
  assign tap_rtdr_shift[0] = 1'b0;
  assign tap_rtdr_capture[0] = 1'b0;
  assign tap_rtdr_tdi[0] = 1'b1;
  assign tap_rtdr_prog_rst_b[0] = 1'b1;
  assign tap_rtdr_irdec[0] = 1'b0;
  assign stap_fbscan_d6select = 1'b0;
  assign stap_fbscan_d6actestsig_b = 1'b1;
  assign stap_fbscan_d6init = 1'b0;
  assign stap_fbscan_extogsig_b = 1'b1;
  assign stap_fbscan_mode = 1'b0;
  assign stap_fbscan_chainen = 1'b0;
  assign stap_fbscan_intest_mode = 1'b0;
  assign stap_fbscan_extogen = 1'b0;
  assign stap_fbscan_highz = 1'b0;
  assign stap_fbscan_runbist_en = 1'b0;
  assign stap_fbscan_updatedr_clk = 1'b0;
  assign stap_fbscan_updatedr = 1'b0;
  assign stap_fbscan_shiftdr = 1'b0;
  assign stap_fbscan_capturedr = 1'b0;
  assign stap_fbscan_tck = 1'b0;
  assign sn_fwtap_wsi[0] = 1'b1;
  assign sn_fwtap_selectwir = 1'b0;
  assign sn_fwtap_rti = 1'b0;
  assign sn_fwtap_updatewr = 1'b0;
  assign sn_fwtap_shiftwr = 1'b0;
  assign sn_fwtap_capturewr = 1'b0;
  assign sn_fwtap_wrst_b = 1'b1;
  assign sn_fwtap_wrck = 1'b0;
  assign sntapnw_ftap_tdi = 1'b0;
  assign sntapnw_ftap_trst_b = 1'b1;
  assign sntapnw_ftap_tms = 1'b1;
  assign sntapnw_ftap_tck = 1'b0;
  assign sftapnw_ftap_enabletap[0] = 1'b0;
  assign sftapnw_ftap_enabletdo[0] = 1'b0;
  assign sftapnw_ftap_secsel[0] = 1'b0;
  assign tdr_data_out[0] = 1'b0;

  stap_fsm i_stap_fsm ( .ftap_tms(ftap_tms), .ftap_tck(ftap_tck), 
        .powergood_rst_trst_b(n65), .tapc_remove(1'b0), .stap_fsm_tlrs(
        stap_fsm_tlrs), .stap_fsm_rti(SYNOPSYS_UNCONNECTED_1), .stap_fsm_e1dr(
        SYNOPSYS_UNCONNECTED_2), .stap_fsm_e2dr(stap_fsm_e2dr), 
        .stap_selectwir(SYNOPSYS_UNCONNECTED_3), .stap_selectwir_neg(
        SYNOPSYS_UNCONNECTED_4), .sn_fwtap_capturewr(SYNOPSYS_UNCONNECTED_5), 
        .sn_fwtap_shiftwr(SYNOPSYS_UNCONNECTED_6), .sn_fwtap_updatewr(
        SYNOPSYS_UNCONNECTED_7), .sn_fwtap_rti(SYNOPSYS_UNCONNECTED_8), 
        .sn_fwtap_wrst_b(SYNOPSYS_UNCONNECTED_9), .stap_fsm_capture_ir(
        stap_fsm_capture_ir), .stap_fsm_shift_ir(stap_fsm_shift_ir), 
        .stap_fsm_shift_ir_neg(SYNOPSYS_UNCONNECTED_10), .stap_fsm_update_ir(
        stap_fsm_update_ir), .stap_fsm_capture_dr(stap_fsm_capture_dr), 
        .stap_fsm_shift_dr(stap_fsm_shift_dr), .stap_fsm_update_dr(
        stap_fsm_update_dr) );
  stap_irreg i_stap_irreg ( .stap_fsm_tlrs(stap_fsm_tlrs), 
        .stap_fsm_capture_ir(stap_fsm_capture_ir), .stap_fsm_shift_ir(
        stap_fsm_shift_ir), .stap_fsm_update_ir(stap_fsm_update_ir), 
        .ftap_tdi(ftap_tdi), .ftap_tck(ftap_tck), .powergood_rst_trst_b(n65), 
        .stap_irreg_ireg({stap_irreg_ireg_7_0, stap_irreg_ireg_6_0, 
        stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0, 
        stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0}), 
        .stap_irreg_ireg_nxt({stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0, 
        stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0, 
        stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0, 
        stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0}), 
        .stap_irreg_serial_out(stap_irreg_serial_out), .stap_irreg_shift_reg({
        SYNOPSYS_UNCONNECTED_11, SYNOPSYS_UNCONNECTED_12, 
        SYNOPSYS_UNCONNECTED_13, SYNOPSYS_UNCONNECTED_14, 
        SYNOPSYS_UNCONNECTED_15, SYNOPSYS_UNCONNECTED_16, 
        SYNOPSYS_UNCONNECTED_17, SYNOPSYS_UNCONNECTED_18}) );
  stap_irdecoder i_stap_irdecoder ( .powergood_rst_trst_b(powergood_rst_trst_b), .stap_irreg_ireg({stap_irreg_ireg_7_0, stap_irreg_ireg_6_0, 
        stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0, 
        stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0}), 
        .stap_irreg_ireg_nxt({stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0, 
        stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0, 
        stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0, 
        stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0}), .ftap_tck(ftap_tck), .feature_green_en(dfxsecure_feature_en_0_0), .feature_orange_en(
        dfxsecure_feature_en_1_0), .feature_red_en(dfxsecure_feature_en_2_0), 
        .stap_isol_en_b(stap_isol_en_b), .stap_irdecoder_drselect({
        stap_irdecoder_drselect_3_0, stap_irdecoder_drselect_2_0, 
        stap_irdecoder_drselect_1_0, stap_irdecoder_drselect_0_0}), 
        .tap_swcomp_active(tap_swcomp_active), .stap_and_all_bits_irreg(
        stap_and_all_bits_irreg) );
  stap_drreg i_stap_drreg ( .stap_fsm_tlrs(stap_fsm_tlrs), .ftap_tdi(ftap_tdi), 
        .ftap_tck(ftap_tck), .ftap_trst_b(1'b0), .fdfx_powergood(1'b0), 
        .powergood_rst_trst_b(n21), .stap_fsm_capture_dr(stap_fsm_capture_dr), 
        .stap_fsm_shift_dr(stap_fsm_shift_dr), .stap_fsm_update_dr(1'b0), 
        .stap_selectwir(1'b0), .ftap_slvidcode({ftap_slvidcode[31:1], 1'b0}), 
        .stap_irdecoder_drselect({1'b0, 1'b0, stap_irdecoder_drselect_1_0, 
        stap_irdecoder_drselect_0_0}), .tdr_data_in(1'b0), .tdr_data_out(
        SYNOPSYS_UNCONNECTED_19), .sftapnw_ftap_secsel(SYNOPSYS_UNCONNECTED_20), .tapc_select({SYNOPSYS_UNCONNECTED_21, SYNOPSYS_UNCONNECTED_22}), 
        .feature_green_en(1'b0), .feature_orange_en(1'b0), .feature_red_en(
        1'b0), .tapc_wtap_sel(SYNOPSYS_UNCONNECTED_23), .tapc_remove(
        SYNOPSYS_UNCONNECTED_24), .stap_drreg_tdo({stap_drreg_tdo_3_0, 
        stap_drreg_tdo_2_0, stap_drreg_tdo_1_0, stap_drreg_tdo_0_0}), 
        .swcompctrl_tdo(swcompctrl_tdo), .swcompstat_tdo(swcompstat_tdo), 
        .stap_and_all_bits_irreg(stap_and_all_bits_irreg), .rtdr_tap_tdo(1'b0), 
        .tap_rtdr_tdi(SYNOPSYS_UNCONNECTED_25), .tap_rtdr_capture(
        SYNOPSYS_UNCONNECTED_26), .tap_rtdr_shift(SYNOPSYS_UNCONNECTED_27), 
        .tap_rtdr_update(SYNOPSYS_UNCONNECTED_28), .tap_rtdr_irdec(
        SYNOPSYS_UNCONNECTED_29), .tap_rtdr_selectir(SYNOPSYS_UNCONNECTED_30), 
        .tap_rtdr_powergood(SYNOPSYS_UNCONNECTED_31), .tap_rtdr_rti(
        SYNOPSYS_UNCONNECTED_32), .tap_rtdr_prog_rst_b(SYNOPSYS_UNCONNECTED_33), .stap_fsm_rti(1'b0) );
  stap_tdomux i_stap_tdomux ( .stap_drreg_tdo({stap_drreg_tdo_3_0, 
        stap_drreg_tdo_2_0, stap_drreg_tdo_1_0, stap_drreg_tdo_0_0}), 
        .stap_fsm_shift_dr(stap_fsm_shift_dr), .stap_fsm_shift_ir(
        stap_fsm_shift_ir), .stap_irdecoder_drselect({
        stap_irdecoder_drselect_3_0, stap_irdecoder_drselect_2_0, 
        stap_irdecoder_drselect_1_0, stap_irdecoder_drselect_0_0}), 
        .stap_irreg_serial_out(stap_irreg_serial_out), .stap_fsm_tlrs(
        stap_fsm_tlrs), .ftap_tck(ftap_tck), .powergood_rst_trst_b(
        powergood_rst_trst_b), .swcomp_stap_post_tdo(swcomp_stap_post_tdo), 
        .tap_swcomp_active(tap_swcomp_active), .stap_mux_tdo(stap_mux_tdo), 
        .tdo_dr(tdo_dr), .stap_tdomux_tdoen(stap_tdomux_tdoen) );
  stap_glue i_stap_glue ( .ftap_tck(ftap_tck), .ftap_tms(1'b0), .ftap_trst_b(
        ftap_trst_b), .fdfx_powergood(fdfx_powergood), .ftap_tdi(1'b0), 
        .stap_tdomux_tdoen(stap_tdomux_tdoen), .sntapnw_atap_tdo_en(1'b0), 
        .pre_tdo(atap_tdo), .powergood_rst_trst_b(powergood_rst_trst_b), 
        .atap_tdoen(atap_tdoen), .sntapnw_ftap_tck(SYNOPSYS_UNCONNECTED_34), 
        .sntapnw_ftap_tms(SYNOPSYS_UNCONNECTED_35), .sntapnw_ftap_trst_b(
        SYNOPSYS_UNCONNECTED_36), .sntapnw_ftap_tdi(SYNOPSYS_UNCONNECTED_37), 
        .sntapnw_atap_tdo(1'b0), .ftapsslv_tck(ftapsslv_tck), .ftapsslv_tms(
        ftapsslv_tms), .ftapsslv_trst_b(ftapsslv_trst_b), .ftapsslv_tdi(
        ftapsslv_tdi), .atapsslv_tdo(atapsslv_tdo), .atapsslv_tdoen(
        atapsslv_tdoen), .sntapnw_ftap_tck2(sntapnw_ftap_tck2), 
        .sntapnw_ftap_tms2(sntapnw_ftap_tms2), .sntapnw_ftap_trst2_b(
        sntapnw_ftap_trst2_b), .sntapnw_ftap_tdi2(sntapnw_ftap_tdi2), 
        .sntapnw_atap_tdo2(sntapnw_atap_tdo2), .sntapnw_atap_tdo2_en(
        sntapnw_atap_tdo2_en[0]), .sn_fwtap_wrck(SYNOPSYS_UNCONNECTED_38), 
        .stap_mux_tdo(stap_mux_tdo), .tapc_select({1'b0, 1'b0}), 
        .tapc_wtap_sel(1'b0), .tapc_remove(1'b0), .stap_wtapnw_tdo(1'b1) );
  stap_dfxsecure_plugin i_stap_dfxsecure_plugin ( .fdfx_powergood(
        fdfx_powergood), .fdfx_secure_policy(fdfx_secure_policy), 
        .fdfx_earlyboot_exit(fdfx_earlyboot_exit), .fdfx_policy_update(
        fdfx_policy_update), .dfxsecure_feature_en({dfxsecure_feature_en_2_0, 
        dfxsecure_feature_en_1_0, dfxsecure_feature_en_0_0}), .visa_all_dis(
        SYNOPSYS_UNCONNECTED_39), .visa_customer_dis(SYNOPSYS_UNCONNECTED_40), 
        .sb_policy_ovr_value({1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), 
        .oem_secure_policy({1'b0, 1'b0, 1'b0, 1'b0}) );
  stap_swcomp_rtdr generate_stap_swcomp_rtdr_i_stap_swcomp_rtdr ( 
        .stap_fsm_tlrs(stap_fsm_tlrs), .ftap_tck(ftap_tck), .ftap_tdi(ftap_tdi), .fdfx_powergood(fdfx_powergood), .powergood_rst_trst_b(n_2_net_0), 
        .stap_fsm_capture_dr(stap_fsm_capture_dr), .stap_fsm_shift_dr(
        stap_fsm_shift_dr), .stap_fsm_update_dr(stap_fsm_update_dr), 
        .stap_fsm_e2dr(stap_fsm_e2dr), .stap_swcomp_pre_tdo(tdo_dr), 
        .tap_swcomp_active(tap_swcomp_active), .swcomp_stap_post_tdo(
        swcomp_stap_post_tdo), .swcompctrl_tdo(swcompctrl_tdo), 
        .swcompstat_tdo(swcompstat_tdo), .iso(stap_isol_en_b) );
  d04gbf00ld0c0 i_stap_ctech_lib_clk_buf_rtdr_i_ctech_lib_clk_buf_ctech_lib_clk_buf_dcszo1 ( 
        .clk(ftap_tck), .clkout(tap_rtdr_tck) );
  d04ann02ln0a5 syn_6 ( .a(ftap_pwrdomain_rst_b), .b(powergood_rst_trst_b), 
        .o(n_2_net_0) );
  d04bfn00ln0a5 syn_10 ( .a(powergood_rst_trst_b), .o(n22) );
  d04bfn00ld0c7 syn_9 ( .a(powergood_rst_trst_b), .o(n21) );
  d04bfn00ld0c7 syn_inc_46 ( .a(n22), .o(n65) );
endmodule

