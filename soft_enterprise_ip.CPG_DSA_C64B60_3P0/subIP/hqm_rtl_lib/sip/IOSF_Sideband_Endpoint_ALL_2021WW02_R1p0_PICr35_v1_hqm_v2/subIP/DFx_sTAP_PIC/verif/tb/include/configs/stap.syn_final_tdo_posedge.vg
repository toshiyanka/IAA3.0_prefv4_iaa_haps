
module stap_sipstap_ctech_clkbf_0 ( in_clk, o_clk );
  input in_clk;
  output o_clk;


  d04gbc00wd0e0 o_clk_i0_dcszo ( .clk(in_clk), .clkout(o_clk) );
endmodule



    module stap_stap_stap_glue_GLUE_STAP_ENABLE_TAP_NETWORK0_GLUE_STAP_ENABLE_WTAP_NETWORK0_GLUE_STAP_NUMBER_OF_TAPS1_GLUE_STAP_NUMBER_OF_WTAPS1_GLUE_STAP_SIZE_OF_EACH_INSTRUCTION8_GLUE_STAP_WTAP_COMMON_LOGIC0_G_0_0 ( 
        ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi, 
        stap_tdomux_tdoen, sntapnw_atap_tdo_en, pre_tdo, powergood_rst_trst_b, 
        atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms, 
        ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, atapsslv_tdoen, 
        sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b, 
        sntapnw_ftap_tdi2, sntapnw_atap_tdo2, sntapnw_atap_tdo2_en, 
        sn_fwtap_wrck, stap_mux_tdo, tapc_select, tapc_wtap_sel, tapc_remove, 
        stap_wtapnw_tdo );
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [1:0] tapc_select;
  input [0:0] tapc_wtap_sel;
  input ftap_tck, ftap_tms, ftap_trst_b, fdfx_powergood, ftap_tdi,
         stap_tdomux_tdoen, sntapnw_atap_tdo, ftapsslv_tck, ftapsslv_tms,
         ftapsslv_trst_b, ftapsslv_tdi, sntapnw_atap_tdo2, stap_mux_tdo,
         tapc_remove, stap_wtapnw_tdo;
  output pre_tdo, powergood_rst_trst_b, atap_tdoen, sntapnw_ftap_tck,
         sntapnw_ftap_tms, sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo,
         atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2,
         sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sn_fwtap_wrck;
  wire   pre_tdo, n1, n14, n15, n17, n19, n21, n23;
  assign pre_tdo = stap_mux_tdo;

  d04gbc00wd0e0 i_sipstap_ctech_clkbf_tck2_o_clk_i0_dcszo ( .clk(ftapsslv_tck), 
        .clkout(sntapnw_ftap_tck2) );
  d04aon11wn0b0 U5 ( .a(tapc_remove), .b(sntapnw_atap_tdo_en[0]), .c(n1), .o(
        atap_tdoen) );
  d04nab02wn0b0 U6 ( .a(tapc_remove), .b(stap_tdomux_tdoen), .out(n1) );
  d04inn20wn0b0 U23 ( .a(n15), .o1(atapsslv_tdoen) );
  d04inn20wn0b0 U24 ( .a(n19), .o1(sntapnw_ftap_tdi2) );
  d04inn20wn0b0 U10 ( .a(1'b1), .o1(sn_fwtap_wrck) );
  d04inn20wn0b0 U12 ( .a(1'b1), .o1(sntapnw_ftap_tdi) );
  d04inn20wn0b0 U14 ( .a(1'b0), .o1(sntapnw_ftap_trst_b) );
  d04inn20wn0b0 U16 ( .a(1'b0), .o1(sntapnw_ftap_tms) );
  d04inn20wn0b0 U30 ( .a(1'b1), .o1(sntapnw_ftap_tck) );
  d04nob02wd0f5 U27 ( .a(fdfx_powergood), .b(n14), .out(powergood_rst_trst_b)
         );
  d04inn00wd0f7 U20 ( .a(ftapsslv_trst_b), .o1(n21) );
  d04inn00wd0i0 U26 ( .a(ftap_trst_b), .o1(n14) );
  d04inn00wd0f7 U17 ( .a(sntapnw_atap_tdo2), .o1(n17) );
  d04inn20wn0e0 U28 ( .a(ftapsslv_tdi), .o1(n19) );
  d04inn00wd0f7 U18 ( .a(ftapsslv_tms), .o1(n23) );
  d04inn00wn0b5 U25 ( .a(n17), .o1(atapsslv_tdo) );
  d04inn00wn0b5 U22 ( .a(n23), .o1(sntapnw_ftap_tms2) );
  d04inn00wn0b5 U21 ( .a(n21), .o1(sntapnw_ftap_trst2_b) );
  d04inn20wn0e0 U19 ( .a(sntapnw_atap_tdo2_en[0]), .o1(n15) );
endmodule


module stap_stap_dfxsecure_plugin_3_4_0_3_1_2_0_07_3ad6b5ad6b59d733cce7_1 ( 
        fdfx_powergood, fdfx_secure_policy, fdfx_earlyboot_exit, 
        fdfx_policy_update, dfxsecure_feature_en, visa_all_dis, 
        visa_customer_dis, sb_policy_ovr_value, oem_secure_policy );
  input [3:0] fdfx_secure_policy;
  output [2:0] dfxsecure_feature_en;
  input [4:0] sb_policy_ovr_value;
  input [3:0] oem_secure_policy;
  input fdfx_powergood, fdfx_earlyboot_exit, fdfx_policy_update;
  output visa_all_dis, visa_customer_dis;
  wire   dfxsecure_feature_lch_3_0, dfxsecure_feature_lch_2_0,
         dfxsecure_feature_lch_1_0, dfxsecure_feature_lch_0_0, n1, n2, n4, n6,
         n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n21;

  d04lyn0fwd0b0 dfxsecure_feature_lch_reg_0 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[0]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_0_0) );
  d04lyn0fwd0b0 dfxsecure_feature_lch_reg_3 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[3]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_3_0) );
  d04lyn0fwd0b0 dfxsecure_feature_lch_reg_2 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[2]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_2_0) );
  d04lyn0fwd0b0 dfxsecure_feature_lch_reg_1 ( .clk(fdfx_policy_update), .psb(
        1'b1), .d(fdfx_secure_policy[1]), .rb(fdfx_powergood), .o(
        dfxsecure_feature_lch_1_0) );
  d04nan04wn0b0 U12 ( .a(dfxsecure_feature_lch_2_0), .b(
        dfxsecure_feature_lch_1_0), .c(n7), .d(n12), .o1(n8) );
  d04nan02wn0b0 U13 ( .a(dfxsecure_feature_lch_3_0), .b(n15), .o1(n7) );
  d04kok01wn0b0 U14 ( .b(dfxsecure_feature_lch_3_0), .c(
        dfxsecure_feature_lch_1_0), .a(n12), .d(dfxsecure_feature_lch_2_0), 
        .o1(n9) );
  d04nan02wn0b0 U15 ( .a(dfxsecure_feature_lch_3_0), .b(n10), .o1(n11) );
  d04nan03wn0b0 U16 ( .a(dfxsecure_feature_lch_0_0), .b(
        dfxsecure_feature_lch_1_0), .c(dfxsecure_feature_lch_2_0), .o1(n10) );
  d04nan02wn0b0 U17 ( .a(dfxsecure_feature_lch_0_0), .b(n14), .o1(n12) );
  d04inn20wn0b0 U18 ( .a(dfxsecure_feature_lch_2_0), .o1(n13) );
  d04inn20wn0b0 U19 ( .a(dfxsecure_feature_lch_3_0), .o1(n14) );
  d04inn20wn0b0 U20 ( .a(dfxsecure_feature_lch_0_0), .o1(n15) );
  d04xob02wn0a5 U21 ( .a(dfxsecure_feature_lch_2_0), .b(
        dfxsecure_feature_lch_1_0), .out(n16) );
  d04nob02wn0b0 U9 ( .a(n8), .b(n9), .out(n4) );
  d04nan02wn0d5 U8 ( .a(fdfx_earlyboot_exit), .b(n4), .o1(
        dfxsecure_feature_en[0]) );
  d04inn00wd0i0 U6 ( .a(fdfx_earlyboot_exit), .o1(n2) );
  d04non02wd0h5 U4 ( .a(n2), .b(n6), .o1(dfxsecure_feature_en[2]) );
  d04non02wd0h5 U3 ( .a(n1), .b(n21), .o1(dfxsecure_feature_en[1]) );
  d04nan03wn0e0 U11 ( .a(n16), .b(n14), .c(n15), .o1(n6) );
  d04oan01wn0b5 U25 ( .b(n13), .c(n12), .a(n11), .o(n21) );
  d04inn40wd0n5 U5 ( .a(fdfx_earlyboot_exit), .o1(n1) );
endmodule



    module stap_stap_fsm_FSM_STAP_ENABLE_TAP_NETWORK0_FSM_STAP_WTAP_COMMON_LOGIC0_FSM_STAP_ENABLE_WTAP_CTRL_POS_EDGE0_FSM_STAP_ENABLE_REMOTE_TEST_DATA_REGISTERS0_1 ( 
        ftap_tms, ftap_tck, powergood_rst_trst_b, tapc_remove, stap_fsm_tlrs, 
        stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr, stap_selectwir, 
        stap_selectwir_neg, sn_fwtap_capturewr, sn_fwtap_shiftwr, 
        sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b, stap_fsm_capture_ir, 
        stap_fsm_shift_ir, stap_fsm_shift_ir_neg, stap_fsm_update_ir, 
        stap_fsm_capture_dr, stap_fsm_shift_dr, stap_fsm_update_dr );
  input ftap_tms, ftap_tck, powergood_rst_trst_b, tapc_remove;
  output stap_fsm_tlrs, stap_fsm_rti, stap_fsm_e1dr, stap_fsm_e2dr,
         stap_selectwir, stap_selectwir_neg, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_wrst_b,
         stap_fsm_capture_ir, stap_fsm_shift_ir, stap_fsm_shift_ir_neg,
         stap_fsm_update_ir, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr;
  wire   state_ps_14_0, state_ps_13_0, state_ps_12_0, state_ps_9_0, n89, n88,
         state_ps_6_0, n87, state_ps_2_0, n86, tms_bit_3_0, tms_bit_2_0,
         tms_bit_1_0, tms_bit_0_0, N393, N394, N395, N396, N398, N399, N400,
         N401, N402, N403, N404, N405, N406, N407, N408, N409, N410, N411,
         N412, N413, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20,
         n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34,
         n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48,
         n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n105;

  d04fyn03wd0b0 tms_bit_reg_0 ( .d(N393), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(tms_bit_0_0) );
  d04fyn03wd0b0 tms_bit_reg_3 ( .d(N396), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(tms_bit_3_0) );
  d04fyn03wd0b0 tms_bit_reg_2 ( .d(N395), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(tms_bit_2_0) );
  d04fyn03wd0b0 tms_bit_reg_1 ( .d(N394), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(tms_bit_1_0) );
  d04fyn03wd0b0 state_ps_reg_9 ( .d(N407), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_9_0) );
  d04fyn03wd0b0 state_ps_reg_10 ( .d(N408), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_capture_ir) );
  d04fyn03wd0b0 state_ps_reg_2 ( .d(N400), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_2_0) );
  d04fyn03wd0b0 state_ps_reg_8 ( .d(N406), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n89) );
  d04fyn03wd0b0 state_ps_reg_6 ( .d(N404), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_6_0) );
  d04fyn03wd0b0 state_ps_reg_1 ( .d(N399), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n86) );
  d04fyn03wd0b0 state_ps_reg_5 ( .d(N403), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n87) );
  d04fyn03wd0b0 state_ps_reg_7 ( .d(N405), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(n88) );
  d04fyn03wd0b0 state_ps_reg_3 ( .d(N401), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_capture_dr) );
  d04fyn03wd0b0 state_ps_reg_13 ( .d(N411), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_13_0) );
  d04fyn03wd0b0 state_ps_reg_12 ( .d(N410), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_12_0) );
  d04fyn03wd0b0 state_ps_reg_14 ( .d(N412), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(state_ps_14_0) );
  d04fyn03wd0b0 state_ps_reg_15 ( .d(N413), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_update_ir) );
  d04fyn03wd0b0 state_ps_reg_11 ( .d(N409), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_shift_ir) );
  d04fyn03wd0b0 state_ps_reg_4 ( .d(N402), .clk(ftap_tck), .rb(
        powergood_rst_trst_b), .o(stap_fsm_shift_dr) );
  d04nob02wn0b0 U10 ( .a(tms_bit_0_0), .b(stap_fsm_tlrs), .out(N394) );
  d04nob02wn0b0 U11 ( .a(tms_bit_1_0), .b(stap_fsm_tlrs), .out(N395) );
  d04nob02wn0b0 U12 ( .a(tms_bit_2_0), .b(stap_fsm_tlrs), .out(N396) );
  d04non02wn0b0 U14 ( .a(n45), .b(n37), .o1(N401) );
  d04non02wn0b0 U15 ( .a(n45), .b(n38), .o1(N408) );
  d04cak01wn0b0 U16 ( .a(n19), .b(n18), .c(n45), .o1(N399) );
  d04kok01wn0b0 U17 ( .b(n58), .c(n56), .a(n46), .d(n45), .o1(N409) );
  d04kok01wn0b0 U18 ( .b(state_ps_13_0), .c(n48), .a(n52), .d(n47), .o1(N411)
         );
  d04con03wn0b0 U19 ( .a(n29), .b(n45), .c(n36), .d(n32), .o1(N402) );
  d04con03wn0b0 U20 ( .a(n45), .b(n33), .c(n32), .d(n35), .o1(N404) );
  d04nab02wn0b0 U21 ( .a(n34), .b(n53), .out(n32) );
  d04nab03wn0b0 U22 ( .a(n10), .b(stap_fsm_tlrs), .c(n50), .out(n18) );
  d04nab03wn0b0 U23 ( .a(stap_fsm_capture_ir), .b(state_ps_9_0), .c(n44), 
        .out(n38) );
  d04non02wn0b0 U24 ( .a(n59), .b(n33), .o1(N405) );
  d04nab03wn0b0 U25 ( .a(n31), .b(state_ps_6_0), .c(n30), .out(n33) );
  d04non02wn0b0 U26 ( .a(n59), .b(n37), .o1(N407) );
  d04nan04wn0b0 U27 ( .a(state_ps_2_0), .b(n22), .c(n21), .d(n20), .o1(n37) );
  d04non02wn0b0 U28 ( .a(n29), .b(n59), .o1(N403) );
  d04cak04wn0b0 U29 ( .a(n28), .b(stap_fsm_shift_dr), .c(n27), .d(n26), .o1(
        n29) );
  d04non03wn0b0 U30 ( .a(state_ps_6_0), .b(n30), .c(n31), .o1(n26) );
  d04nab02wn0b0 U31 ( .a(n86), .b(n25), .out(n31) );
  d04inn20wn0b0 U32 ( .a(stap_fsm_capture_dr), .o1(n30) );
  d04non02wn0b0 U33 ( .a(n87), .b(n88), .o1(n27) );
  d04non02wn0b0 U34 ( .a(n19), .b(n59), .o1(N400) );
  d04cak04wn0b0 U35 ( .a(n17), .b(n86), .c(n25), .d(n16), .o1(n19) );
  d04cak02wn0b0 U36 ( .a(stap_fsm_update_ir), .b(n89), .c(state_ps_2_0), .d(
        n15), .o1(n16) );
  d04nab03wn0b0 U37 ( .a(n22), .b(n21), .c(n20), .out(n15) );
  d04non02wn0b0 U38 ( .a(stap_fsm_update_ir), .b(n89), .o1(n22) );
  d04non02wn0b0 U39 ( .a(n23), .b(n14), .o1(n25) );
  d04non02wn0b0 U40 ( .a(state_ps_6_0), .b(stap_fsm_capture_dr), .o1(n17) );
  d04non02wn0b0 U41 ( .a(n46), .b(n59), .o1(N410) );
  d04cak04wn0b0 U42 ( .a(stap_fsm_capture_ir), .b(n44), .c(n43), .d(n42), .o1(
        n46) );
  d04nob03wn0b0 U43 ( .a(n41), .b(n40), .c(n39), .out(n42) );
  d04inn20wn0b0 U44 ( .a(state_ps_9_0), .o1(n43) );
  d04non02wn0b0 U45 ( .a(n12), .b(n9), .o1(n44) );
  d04non03wn0b0 U46 ( .a(n59), .b(n52), .c(n51), .o1(N412) );
  d04nan03wn0b0 U47 ( .a(n50), .b(n105), .c(n54), .o1(n51) );
  d04nan02wn0b0 U48 ( .a(state_ps_13_0), .b(n48), .o1(n52) );
  d04cak02wn0b0 U49 ( .a(n36), .b(n35), .c(n34), .d(n59), .o1(N406) );
  d04nab02wn0b0 U50 ( .a(stap_fsm_shift_dr), .b(n28), .out(n34) );
  d04non02wn0b0 U51 ( .a(n24), .b(n23), .o1(n28) );
  d04nan02wn0b0 U52 ( .a(n13), .b(n21), .o1(n23) );
  d04non03wn0b0 U53 ( .a(stap_fsm_capture_ir), .b(state_ps_9_0), .c(n12), .o1(
        n21) );
  d04nan02wn0b0 U54 ( .a(n41), .b(n40), .o1(n12) );
  d04inn20wn0b0 U55 ( .a(stap_fsm_shift_ir), .o1(n40) );
  d04non02wn0b0 U56 ( .a(stap_fsm_tlrs), .b(n10), .o1(n41) );
  d04nab02wn0b0 U57 ( .a(n88), .b(n87), .out(n35) );
  d04nab02wn0b0 U58 ( .a(n87), .b(n88), .out(n36) );
  d04kok01wn0b0 U59 ( .b(n59), .c(n58), .a(n57), .d(n56), .o1(N413) );
  d04nab02wn0b0 U60 ( .a(state_ps_13_0), .b(n50), .out(n56) );
  d04non02wn0b0 U61 ( .a(stap_fsm_shift_ir), .b(n39), .o1(n50) );
  d04nan02wn0b0 U62 ( .a(n13), .b(n20), .o1(n9) );
  d04non02wn0b0 U63 ( .a(n24), .b(n14), .o1(n20) );
  d04non03wn0b0 U64 ( .a(state_ps_2_0), .b(stap_fsm_update_ir), .c(n89), .o1(
        n13) );
  d04inn20wn0b0 U65 ( .a(state_ps_14_0), .o1(n54) );
  d04non02wn0b0 U66 ( .a(n53), .b(stap_fsm_tlrs), .o1(N393) );
  d04nan03wn0b0 U67 ( .a(state_ps_14_0), .b(n105), .c(n48), .o1(n58) );
  d04inn20wn0b0 U68 ( .a(state_ps_12_0), .o1(n48) );
  d04nan02wn0b0 U70 ( .a(n45), .b(n55), .o1(n59) );
  d04nab03wn0b0 U71 ( .a(n11), .b(tms_bit_0_0), .c(n45), .out(n55) );
  d04nan03wn0b0 U72 ( .a(tms_bit_3_0), .b(tms_bit_2_0), .c(tms_bit_1_0), .o1(
        n11) );
  d04inn20wn0b0 U73 ( .a(n53), .o1(n45) );
  d04orn03wn0a5 U75 ( .a(state_ps_13_0), .b(state_ps_12_0), .c(state_ps_14_0), 
        .o(n10) );
  d04orn03wn0a5 U76 ( .a(state_ps_6_0), .b(n86), .c(stap_fsm_capture_dr), .o(
        n24) );
  d04orn03wn0a5 U77 ( .a(stap_fsm_shift_dr), .b(n87), .c(n88), .o(n14) );
  d04orn03wn0a5 U78 ( .a(n9), .b(stap_fsm_capture_ir), .c(state_ps_9_0), .o(
        n39) );
  d04kak01wn0b0 U79 ( .b(n38), .c(n18), .d(n53), .a(n55), .o1(N398) );
  d04nan04wn0b0 U80 ( .a(n53), .b(n50), .c(n54), .d(n105), .o1(n47) );
  d04nan04wn0b0 U81 ( .a(state_ps_12_0), .b(N393), .c(n55), .d(n54), .o1(n57)
         );
  d04fyn0cwd0a5 state_ps_reg_0 ( .d(N398), .clk(ftap_tck), .psb(
        powergood_rst_trst_b), .o(stap_fsm_tlrs) );
  d04non02wn0b0 U74 ( .a(tapc_remove), .b(ftap_tms), .o1(n53) );
  d04inn20wn0b0 U13 ( .a(1'b0), .o1(sn_fwtap_wrst_b) );
  d04inn20wn0b0 U83 ( .a(1'b1), .o1(sn_fwtap_rti) );
  d04inn20wn0b0 U85 ( .a(1'b1), .o1(sn_fwtap_updatewr) );
  d04inn20wn0b0 U87 ( .a(1'b1), .o1(sn_fwtap_shiftwr) );
  d04inn20wn0b0 U89 ( .a(1'b1), .o1(sn_fwtap_capturewr) );
  d04inn20wn0b0 U7 ( .a(stap_fsm_tlrs), .o1(n105) );
endmodule



    module stap_SNPS_CLOCK_GATE_HIGH_stap_stap_irreg_IRREG_STAP_SIZE_OF_EACH_INSTRUCTION8_IRREG_STAP_MINIMUM_SIZEOF_INSTRUCTION8_0_0 ( 
        CLK, EN, ENCLK, TE );
  input CLK, EN, TE;
  output ENCLK;


  d04cgc01wd0b0 latch ( .clk(CLK), .en(EN), .te(TE), .clkout(ENCLK) );
endmodule



    module stap_stap_irreg_IRREG_STAP_SIZE_OF_EACH_INSTRUCTION8_IRREG_STAP_MINIMUM_SIZEOF_INSTRUCTION8_1 ( 
        stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir, 
        stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b, 
        stap_irreg_ireg, stap_irreg_ireg_nxt, stap_irreg_serial_out, 
        stap_irreg_shift_reg );
  output [7:0] stap_irreg_ireg;
  output [7:0] stap_irreg_ireg_nxt;
  output [7:0] stap_irreg_shift_reg;
  input stap_fsm_tlrs, stap_fsm_capture_ir, stap_fsm_shift_ir,
         stap_fsm_update_ir, ftap_tdi, ftap_tck, powergood_rst_trst_b;
  output stap_irreg_serial_out;
  wire   n49, n51, n52, n53, n54, n55, n56, N5, N6, N7, N8, N9, N10, N11, N12,
         N13, net306, n29, n30, n31, n32, n33, n34, n35, n36, n110, n120, n130,
         n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27,
         n28, n37, n39, n40, n41, n42, n57, n59, n61;

  stap_SNPS_CLOCK_GATE_HIGH_stap_stap_irreg_IRREG_STAP_SIZE_OF_EACH_INSTRUCTION8_IRREG_STAP_MINIMUM_SIZEOF_INSTRUCTION8_0_0 clk_gate_shift_reg_reg_7 ( 
        .CLK(ftap_tck), .EN(N5), .ENCLK(net306), .TE(1'b0) );
  d04fyn8fwd0b0 stap_irreg_ireg_reg_7 ( .d(n36), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[7]) );
  d04fyn8fwd0b0 stap_irreg_ireg_reg_6 ( .d(n35), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[6]) );
  d04fyn8fwd0b0 stap_irreg_ireg_reg_5 ( .d(n34), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[5]) );
  d04fyn8fwd0b0 stap_irreg_ireg_reg_4 ( .d(n33), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[4]) );
  d04fyn8fwd0b0 stap_irreg_ireg_reg_0 ( .d(n29), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[0]) );
  d04fyn03wd0b0 shift_reg_reg_2 ( .d(N8), .clk(net306), .rb(n61), .o(n55) );
  d04fyn03wd0b0 shift_reg_reg_3 ( .d(N9), .clk(net306), .rb(n61), .o(n54) );
  d04fyn03wd0b0 shift_reg_reg_1 ( .d(N7), .clk(net306), .rb(n61), .o(n56) );
  d04fyn03wd0b0 shift_reg_reg_4 ( .d(N10), .clk(net306), .rb(n61), .o(n53) );
  d04fyn03wd0b0 shift_reg_reg_6 ( .d(N12), .clk(net306), .rb(n61), .o(n51) );
  d04fyn03wd0b0 shift_reg_reg_5 ( .d(N11), .clk(net306), .rb(n61), .o(n52) );
  d04fyn03wd0b0 shift_reg_reg_7 ( .d(N13), .clk(net306), .rb(n61), .o(n49) );
  d04fyn8fwd0b0 stap_irreg_ireg_reg_2 ( .d(n31), .clkb(ftap_tck), .rb(1'b1), 
        .psb(powergood_rst_trst_b), .o(stap_irreg_ireg[2]) );
  d04fyn8fwd0b0 stap_irreg_ireg_reg_1 ( .d(n30), .clkb(ftap_tck), .rb(
        powergood_rst_trst_b), .psb(1'b1), .o(stap_irreg_ireg[1]) );
  d04fyn0cwd0a5 shift_reg_reg_0 ( .d(N6), .clk(net306), .psb(n61), .o(
        stap_irreg_serial_out) );
  d04fyn8fwd0b0 stap_irreg_ireg_reg_3 ( .d(n32), .clkb(ftap_tck), .rb(1'b1), 
        .psb(powergood_rst_trst_b), .o(stap_irreg_ireg[3]) );
  d04nan02wn0b0 U11 ( .a(n14), .b(n40), .o1(N6) );
  d04nan02wn0b0 U12 ( .a(stap_fsm_shift_ir), .b(n56), .o1(n14) );
  d04non02wn0b0 U13 ( .a(n120), .b(n41), .o1(N11) );
  d04inn20wn0b0 U14 ( .a(n51), .o1(n120) );
  d04non02wn0b0 U15 ( .a(n130), .b(n41), .o1(N10) );
  d04inn20wn0b0 U16 ( .a(n52), .o1(n130) );
  d04non02wn0b0 U17 ( .a(n110), .b(n41), .o1(N12) );
  d04inn20wn0b0 U18 ( .a(n49), .o1(n110) );
  d04non02wn0b0 U19 ( .a(n41), .b(n42), .o1(N9) );
  d04inn20wn0b0 U20 ( .a(n53), .o1(n42) );
  d04nob02wn0b0 U21 ( .a(n55), .b(n41), .out(N7) );
  d04nob02wn0b0 U22 ( .a(n54), .b(n41), .out(N8) );
  d04nan02wn0b0 U23 ( .a(n40), .b(n41), .o1(N5) );
  d04orn02wn0b0 U24 ( .a(stap_irreg_ireg_nxt[2]), .b(n59), .o(n31) );
  d04orn02wn0b0 U25 ( .a(stap_irreg_ireg_nxt[3]), .b(n59), .o(n32) );
  d04aon11wn0b0 U26 ( .a(n37), .b(n51), .c(n25), .o(n35) );
  d04nan02wn0b0 U27 ( .a(stap_irreg_ireg[6]), .b(n27), .o1(n25) );
  d04aon11wn0b0 U28 ( .a(n37), .b(n56), .c(n17), .o(n30) );
  d04nan02wn0b0 U29 ( .a(stap_irreg_ireg[1]), .b(n27), .o1(n17) );
  d04aon11wn0b0 U30 ( .a(n37), .b(n52), .c(n23), .o(n34) );
  d04nan02wn0b0 U31 ( .a(stap_irreg_ireg[5]), .b(n27), .o1(n23) );
  d04aon11wn0b0 U32 ( .a(n37), .b(n53), .c(n21), .o(n33) );
  d04nan02wn0b0 U33 ( .a(stap_irreg_ireg[4]), .b(n27), .o1(n21) );
  d04aon11wn0b0 U34 ( .a(n37), .b(n49), .c(n28), .o(n36) );
  d04nan02wn0b0 U35 ( .a(stap_irreg_ireg[7]), .b(n27), .o1(n28) );
  d04aon11wn0b0 U36 ( .a(stap_irreg_serial_out), .b(n37), .c(n15), .o(n29) );
  d04nan02wn0b0 U37 ( .a(stap_irreg_ireg[0]), .b(n27), .o1(n15) );
  d04non02wn0b0 U38 ( .a(n59), .b(stap_fsm_update_ir), .o1(n27) );
  d04non02wn0b0 U39 ( .a(n57), .b(n59), .o1(n37) );
  d04nob02wn0b0 U40 ( .a(ftap_tdi), .b(n41), .out(N13) );
  d04nan02wn0b0 U41 ( .a(n40), .b(stap_fsm_shift_ir), .o1(n41) );
  d04non02wn0b0 U42 ( .a(n59), .b(stap_fsm_capture_ir), .o1(n40) );
  d04aon11wn0b0 U44 ( .a(n56), .b(stap_fsm_update_ir), .c(n18), .o(
        stap_irreg_ireg_nxt[1]) );
  d04nan02wn0b0 U45 ( .a(stap_irreg_ireg[1]), .b(n57), .o1(n18) );
  d04aon11wn0b0 U46 ( .a(stap_fsm_update_ir), .b(stap_irreg_serial_out), .c(
        n16), .o(stap_irreg_ireg_nxt[0]) );
  d04nan02wn0b0 U47 ( .a(stap_irreg_ireg[0]), .b(n57), .o1(n16) );
  d04aon11wn0b0 U48 ( .a(stap_fsm_update_ir), .b(n54), .c(n20), .o(
        stap_irreg_ireg_nxt[3]) );
  d04nan02wn0b0 U49 ( .a(stap_irreg_ireg[3]), .b(n57), .o1(n20) );
  d04aon11wn0b0 U50 ( .a(stap_fsm_update_ir), .b(n55), .c(n19), .o(
        stap_irreg_ireg_nxt[2]) );
  d04nan02wn0b0 U51 ( .a(stap_irreg_ireg[2]), .b(n57), .o1(n19) );
  d04aon11wn0b0 U52 ( .a(n49), .b(stap_fsm_update_ir), .c(n39), .o(
        stap_irreg_ireg_nxt[7]) );
  d04nan02wn0b0 U53 ( .a(stap_irreg_ireg[7]), .b(n57), .o1(n39) );
  d04aon11wn0b0 U54 ( .a(n52), .b(stap_fsm_update_ir), .c(n24), .o(
        stap_irreg_ireg_nxt[5]) );
  d04nan02wn0b0 U55 ( .a(stap_irreg_ireg[5]), .b(n57), .o1(n24) );
  d04aon11wn0b0 U56 ( .a(n51), .b(stap_fsm_update_ir), .c(n26), .o(
        stap_irreg_ireg_nxt[6]) );
  d04nan02wn0b0 U57 ( .a(stap_irreg_ireg[6]), .b(n57), .o1(n26) );
  d04aon11wn0b0 U58 ( .a(n53), .b(stap_fsm_update_ir), .c(n22), .o(
        stap_irreg_ireg_nxt[4]) );
  d04nan02wn0b0 U59 ( .a(stap_irreg_ireg[4]), .b(n57), .o1(n22) );
  d04bfn00wn0a5 U10 ( .a(stap_fsm_tlrs), .o(n59) );
  d04inn20wn0b0 U60 ( .a(stap_fsm_update_ir), .o1(n57) );
  d04bfn00wd0b5 U63 ( .a(powergood_rst_trst_b), .o(n61) );
endmodule


module stap_stap_decoder_ff_8_0_0_1_2_1 ( stap_irreg_ireg, decoder_drselect, 
        feature_green_en, feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n2, n3, n4, n5, n6;

  d04non02wn0b0 U6 ( .a(n5), .b(n4), .o1(n6) );
  d04nan04wn0b0 U7 ( .a(stap_irreg_ireg[2]), .b(stap_irreg_ireg[0]), .c(
        stap_irreg_ireg[7]), .d(stap_irreg_ireg[1]), .o1(n4) );
  d04nan04wn0b0 U8 ( .a(stap_irreg_ireg[4]), .b(stap_irreg_ireg[5]), .c(
        stap_irreg_ireg[3]), .d(stap_irreg_ireg[6]), .o1(n5) );
  d04inn20wn0c0 U4 ( .a(feature_orange_en), .o1(n2) );
  d04cab11wn0d0 U3 ( .a(n3), .b(n2), .c(n6), .out(decoder_drselect) );
  d04non02wn0e0 U2 ( .a(feature_red_en), .b(feature_green_en), .o1(n3) );
endmodule


module stap_stap_decoder_0c_8_0_0_1_2_1 ( stap_irreg_ireg, decoder_drselect, 
        feature_green_en, feature_orange_en, feature_red_en );
  input [7:0] stap_irreg_ireg;
  input feature_green_en, feature_orange_en, feature_red_en;
  output decoder_drselect;
  wire   n2, n3, n4, n5, n7, n8;

  d04non03wn0b0 U7 ( .a(n4), .b(stap_irreg_ireg[0]), .c(stap_irreg_ireg[1]), 
        .o1(n5) );
  d04nab03wn0b0 U8 ( .a(stap_irreg_ireg[7]), .b(stap_irreg_ireg[2]), .c(
        stap_irreg_ireg[3]), .out(n4) );
  d04non03wn0b0 U9 ( .a(stap_irreg_ireg[4]), .b(stap_irreg_ireg[6]), .c(
        stap_irreg_ireg[5]), .o1(n7) );
  d04ann02wn0a5 U3 ( .a(n7), .b(n5), .o(n8) );
  d04non02wd0f5 U5 ( .a(feature_green_en), .b(feature_orange_en), .o1(n3) );
  d04cab11wn0f0 U4 ( .a(n3), .b(n2), .c(n8), .out(decoder_drselect) );
  d04inn20wn0e0 U2 ( .a(feature_red_en), .o1(n2) );
endmodule


module stap_stap_irdecoder_8_2_0c3fc_04_8_0_0_1_2_1 ( powergood_rst_trst_b, 
        stap_irreg_ireg, stap_irreg_ireg_nxt, ftap_tck, feature_green_en, 
        feature_orange_en, feature_red_en, stap_irdecoder_drselect, 
        stap_and_all_bits_irreg );
  input [7:0] stap_irreg_ireg;
  input [7:0] stap_irreg_ireg_nxt;
  output [1:0] stap_irdecoder_drselect;
  input powergood_rst_trst_b, ftap_tck, feature_green_en, feature_orange_en,
         feature_red_en;
  output stap_and_all_bits_irreg;
  wire   decoder_drselect_1_0, decoder_drselect_0_0,
         irdecoder_drselect_nxt_0_0, n1, n3, n4, n5, n6, n7, n8, n10, n12;

  stap_stap_decoder_ff_8_0_0_1_2_1 generate_decoder_0_i_stap_decoder ( 
        .stap_irreg_ireg(stap_irreg_ireg_nxt), .decoder_drselect(
        decoder_drselect_0_0), .feature_green_en(feature_green_en), 
        .feature_orange_en(feature_orange_en), .feature_red_en(feature_red_en)
         );
  stap_stap_decoder_0c_8_0_0_1_2_1 generate_decoder_1_i_stap_decoder ( 
        .stap_irreg_ireg(stap_irreg_ireg_nxt), .decoder_drselect(
        decoder_drselect_1_0), .feature_green_en(feature_green_en), 
        .feature_orange_en(feature_orange_en), .feature_red_en(feature_red_en)
         );
  d04nab03wn0c0 U5 ( .a(decoder_drselect_0_0), .b(decoder_drselect_1_0), .c(n1), .out(irdecoder_drselect_nxt_0_0) );
  d04inn20wn0b0 U6 ( .a(n7), .o1(n1) );
  d04nan04wn0b0 U7 ( .a(stap_irreg_ireg_nxt[3]), .b(stap_irreg_ireg_nxt[0]), 
        .c(stap_irreg_ireg_nxt[2]), .d(stap_irreg_ireg_nxt[7]), .o1(n5) );
  d04nan04wn0b0 U8 ( .a(stap_irreg_ireg_nxt[5]), .b(stap_irreg_ireg_nxt[4]), 
        .c(stap_irreg_ireg_nxt[1]), .d(stap_irreg_ireg_nxt[6]), .o1(n6) );
  d04non02wn0b0 U9 ( .a(n4), .b(n3), .o1(stap_and_all_bits_irreg) );
  d04nan04wn0b0 U10 ( .a(stap_irreg_ireg[1]), .b(stap_irreg_ireg[0]), .c(
        stap_irreg_ireg[5]), .d(stap_irreg_ireg[4]), .o1(n3) );
  d04nan04wn0b0 U11 ( .a(stap_irreg_ireg[3]), .b(stap_irreg_ireg[2]), .c(
        stap_irreg_ireg[7]), .d(stap_irreg_ireg[6]), .o1(n4) );
  d04fyn8fwd0b0 stap_irdecoder_drselect_reg_0 ( .d(irdecoder_drselect_nxt_0_0), 
        .clkb(ftap_tck), .rb(powergood_rst_trst_b), .psb(1'b1), .o(
        stap_irdecoder_drselect[0]) );
  d04fyn8fwd0b0 stap_irdecoder_drselect_reg_1 ( .d(n8), .clkb(ftap_tck), .rb(
        1'b1), .psb(powergood_rst_trst_b), .o(stap_irdecoder_drselect[1]) );
  d04nan02wn0c0 U3 ( .a(decoder_drselect_1_0), .b(n10), .o1(n12) );
  d04inn00wn0b5 U4 ( .a(n7), .o1(n10) );
  d04non02wd0c7 U13 ( .a(n6), .b(n5), .o1(n7) );
  d04inn00wn0b5 U15 ( .a(n12), .o1(n8) );
endmodule



    module stap_SNPS_CLOCK_GATE_HIGH_stap_stap_drreg_0_0_0_32_2_2_16_1_0000_0000_0000_0_0_1_1_1_0_0_0_0_0_0_0_0_0_0_2_0_0_0_0_1_1_0_0_0_0_1_2_0_0 ( 
        CLK, EN, ENCLK, TE );
  input CLK, EN, TE;
  output ENCLK;


  d04cgc01wd0b0 latch ( .clk(CLK), .en(EN), .te(TE), .clkout(ENCLK) );
endmodule



    module stap_stap_drreg_0_0_0_32_2_2_16_1_0000_0000_0000_0_0_1_1_1_0_0_0_0_0_0_0_0_0_0_2_0_0_0_0_1_1_0_0_0_0_1_2_1 ( 
        stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, fdfx_powergood, 
        powergood_rst_trst_b, stap_fsm_capture_dr, stap_fsm_shift_dr, 
        stap_fsm_update_dr, stap_selectwir, ftap_slvidcode, 
        stap_irdecoder_drselect, tdr_data_in, tdr_data_out, 
        sftapnw_ftap_secsel, tapc_select, feature_green_en, feature_orange_en, 
        feature_red_en, tapc_wtap_sel, tapc_remove, stap_drreg_tdo, 
        stap_and_all_bits_irreg, rtdr_tap_tdo, tap_rtdr_tdi, tap_rtdr_capture, 
        tap_rtdr_shift, tap_rtdr_update, tap_rtdr_irdec, tap_rtdr_selectir, 
        tap_rtdr_powergood, tap_rtdr_rti, tap_rtdr_prog_rst_b, stap_fsm_rti );
  input [31:0] ftap_slvidcode;
  input [1:0] stap_irdecoder_drselect;
  input [0:0] tdr_data_in;
  output [0:0] tdr_data_out;
  output [0:0] sftapnw_ftap_secsel;
  output [1:0] tapc_select;
  output [0:0] tapc_wtap_sel;
  output [1:0] stap_drreg_tdo;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  input stap_fsm_tlrs, ftap_tdi, ftap_tck, ftap_trst_b, fdfx_powergood,
         powergood_rst_trst_b, stap_fsm_capture_dr, stap_fsm_shift_dr,
         stap_fsm_update_dr, stap_selectwir, feature_green_en,
         feature_orange_en, feature_red_en, stap_and_all_bits_irreg,
         stap_fsm_rti;
  output tapc_remove, tap_rtdr_selectir, tap_rtdr_powergood, tap_rtdr_rti;
  wire   bypass_reg, reset_pulse0, reset_pulse1, slvidcode_reg_31_0,
         slvidcode_reg_30_0, slvidcode_reg_29_0, slvidcode_reg_28_0,
         slvidcode_reg_27_0, slvidcode_reg_26_0, slvidcode_reg_25_0,
         slvidcode_reg_24_0, slvidcode_reg_23_0, slvidcode_reg_22_0,
         slvidcode_reg_21_0, slvidcode_reg_20_0, slvidcode_reg_19_0,
         slvidcode_reg_18_0, slvidcode_reg_17_0, slvidcode_reg_16_0,
         slvidcode_reg_15_0, slvidcode_reg_14_0, slvidcode_reg_13_0,
         slvidcode_reg_12_0, slvidcode_reg_11_0, slvidcode_reg_10_0,
         slvidcode_reg_9_0, slvidcode_reg_8_0, slvidcode_reg_7_0,
         slvidcode_reg_6_0, slvidcode_reg_5_0, slvidcode_reg_4_0,
         slvidcode_reg_3_0, slvidcode_reg_2_0, slvidcode_reg_1_0, N19, N20,
         N21, N22, N23, N24, N25, N26, N27, N28, N29, N30, N31, N32, N33, N34,
         N35, N36, N37, N38, N39, N40, N41, N42, N43, N44, N45, N46, N47, N48,
         N49, N50, N51, net285, n10, n12, n13, n14, n16, n17, n18, n200, n210,
         n115, n116, n118;

  stap_SNPS_CLOCK_GATE_HIGH_stap_stap_drreg_0_0_0_32_2_2_16_1_0000_0000_0000_0_0_1_1_1_0_0_0_0_0_0_0_0_0_0_2_0_0_0_0_1_1_0_0_0_0_1_2_0_0 clk_gate_slvidcode_reg_reg_31 ( 
        .CLK(ftap_tck), .EN(N19), .ENCLK(net285), .TE(1'b0) );
  d04fyn03wd0b0 slvidcode_reg_reg_1 ( .d(N21), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_1_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_31 ( .d(N51), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_31_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_30 ( .d(N50), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_30_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_29 ( .d(N49), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_29_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_28 ( .d(N48), .clk(net285), .rb(n116), .o(
        slvidcode_reg_28_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_27 ( .d(N47), .clk(net285), .rb(n116), .o(
        slvidcode_reg_27_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_26 ( .d(N46), .clk(net285), .rb(n116), .o(
        slvidcode_reg_26_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_25 ( .d(N45), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_25_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_24 ( .d(N44), .clk(net285), .rb(n116), .o(
        slvidcode_reg_24_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_23 ( .d(N43), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_23_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_22 ( .d(N42), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_22_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_21 ( .d(N41), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_21_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_20 ( .d(N40), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_20_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_19 ( .d(N39), .clk(net285), .rb(n116), .o(
        slvidcode_reg_19_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_18 ( .d(N38), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_18_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_17 ( .d(N37), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_17_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_16 ( .d(N36), .clk(net285), .rb(n116), .o(
        slvidcode_reg_16_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_15 ( .d(N35), .clk(net285), .rb(n116), .o(
        slvidcode_reg_15_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_14 ( .d(N34), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_14_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_13 ( .d(N33), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_13_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_12 ( .d(N32), .clk(net285), .rb(n116), .o(
        slvidcode_reg_12_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_11 ( .d(N31), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_11_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_10 ( .d(N30), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_10_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_9 ( .d(N29), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_9_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_8 ( .d(N28), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_8_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_7 ( .d(N27), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_7_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_6 ( .d(N26), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_6_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_5 ( .d(N25), .clk(net285), .rb(n116), .o(
        slvidcode_reg_5_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_4 ( .d(N24), .clk(net285), .rb(n116), .o(
        slvidcode_reg_4_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_3 ( .d(N23), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_3_0) );
  d04fyn03wd0b0 slvidcode_reg_reg_2 ( .d(N22), .clk(net285), .rb(
        powergood_rst_trst_b), .o(slvidcode_reg_2_0) );
  d04fyn03wd0b0 reset_pulse0_reg ( .d(1'b1), .clk(ftap_tck), .rb(n116), .o(
        reset_pulse0) );
  d04fyn03wd0b0 bypass_reg_reg ( .d(n10), .clk(ftap_tck), .rb(n116), .o(
        bypass_reg) );
  d04fyn03wd0b0 reset_pulse1_reg ( .d(reset_pulse0), .clk(ftap_tck), .rb(n116), 
        .o(reset_pulse1) );
  d04aon11wn0b0 U4 ( .a(n18), .b(slvidcode_reg_1_0), .c(n17), .o(N20) );
  d04orn02wn0b0 U5 ( .a(n18), .b(n118), .o(N19) );
  d04nan02wn0b0 U6 ( .a(n14), .b(n13), .o1(n10) );
  d04nan02wn0b0 U7 ( .a(bypass_reg), .b(n200), .o1(n13) );
  d04kok01wn0b0 U8 ( .b(stap_fsm_capture_dr), .c(stap_fsm_shift_dr), .a(
        stap_irdecoder_drselect[0]), .d(stap_fsm_tlrs), .o1(n200) );
  d04nan02wn0b0 U9 ( .a(ftap_tdi), .b(n12), .o1(n14) );
  d04nab03wn0b0 U14 ( .a(stap_fsm_capture_dr), .b(n115), .c(stap_fsm_shift_dr), 
        .out(n210) );
  d04inn20wn0b0 U15 ( .a(stap_fsm_tlrs), .o1(n115) );
  d04nob02wn0b0 U22 ( .a(stap_irdecoder_drselect[0]), .b(n210), .out(n12) );
  d04cak02wn0b0 U24 ( .a(stap_fsm_capture_dr), .b(stap_irdecoder_drselect[1]), 
        .c(stap_fsm_tlrs), .d(n16), .o1(n17) );
  d04nob02wn0b0 U25 ( .a(reset_pulse0), .b(reset_pulse1), .out(n16) );
  d04oan01wn0b0 U26 ( .b(stap_and_all_bits_irreg), .c(
        stap_irdecoder_drselect[0]), .a(bypass_reg), .o(stap_drreg_tdo[0]) );
  d04aon03wn0a5 U27 ( .a(slvidcode_reg_2_0), .b(n18), .c(ftap_slvidcode[1]), 
        .d(n118), .o(N21) );
  d04aon03wn0a5 U28 ( .a(slvidcode_reg_3_0), .b(n18), .c(ftap_slvidcode[2]), 
        .d(n118), .o(N22) );
  d04aon03wn0a5 U29 ( .a(slvidcode_reg_4_0), .b(n18), .c(ftap_slvidcode[3]), 
        .d(n118), .o(N23) );
  d04aon03wn0a5 U30 ( .a(slvidcode_reg_5_0), .b(n18), .c(ftap_slvidcode[4]), 
        .d(n118), .o(N24) );
  d04aon03wn0a5 U31 ( .a(slvidcode_reg_6_0), .b(n18), .c(ftap_slvidcode[5]), 
        .d(n118), .o(N25) );
  d04aon03wn0a5 U32 ( .a(slvidcode_reg_7_0), .b(n18), .c(ftap_slvidcode[6]), 
        .d(n118), .o(N26) );
  d04aon03wn0a5 U33 ( .a(slvidcode_reg_8_0), .b(n18), .c(ftap_slvidcode[7]), 
        .d(n118), .o(N27) );
  d04aon03wn0a5 U34 ( .a(slvidcode_reg_9_0), .b(n18), .c(ftap_slvidcode[8]), 
        .d(n118), .o(N28) );
  d04aon03wn0a5 U35 ( .a(slvidcode_reg_10_0), .b(n18), .c(ftap_slvidcode[9]), 
        .d(n118), .o(N29) );
  d04aon03wn0a5 U36 ( .a(slvidcode_reg_11_0), .b(n18), .c(ftap_slvidcode[10]), 
        .d(n118), .o(N30) );
  d04aon03wn0a5 U37 ( .a(slvidcode_reg_12_0), .b(n18), .c(ftap_slvidcode[11]), 
        .d(n118), .o(N31) );
  d04aon03wn0a5 U38 ( .a(slvidcode_reg_13_0), .b(n18), .c(ftap_slvidcode[12]), 
        .d(n118), .o(N32) );
  d04aon03wn0a5 U39 ( .a(slvidcode_reg_14_0), .b(n18), .c(ftap_slvidcode[13]), 
        .d(n118), .o(N33) );
  d04aon03wn0a5 U40 ( .a(slvidcode_reg_15_0), .b(n18), .c(ftap_slvidcode[14]), 
        .d(n118), .o(N34) );
  d04aon03wn0a5 U41 ( .a(slvidcode_reg_16_0), .b(n18), .c(ftap_slvidcode[15]), 
        .d(n118), .o(N35) );
  d04aon03wn0a5 U42 ( .a(slvidcode_reg_17_0), .b(n18), .c(ftap_slvidcode[16]), 
        .d(n118), .o(N36) );
  d04aon03wn0a5 U43 ( .a(slvidcode_reg_18_0), .b(n18), .c(ftap_slvidcode[17]), 
        .d(n118), .o(N37) );
  d04aon03wn0a5 U44 ( .a(slvidcode_reg_19_0), .b(n18), .c(ftap_slvidcode[18]), 
        .d(n118), .o(N38) );
  d04aon03wn0a5 U45 ( .a(slvidcode_reg_20_0), .b(n18), .c(ftap_slvidcode[19]), 
        .d(n118), .o(N39) );
  d04aon03wn0a5 U46 ( .a(slvidcode_reg_21_0), .b(n18), .c(ftap_slvidcode[20]), 
        .d(n118), .o(N40) );
  d04aon03wn0a5 U47 ( .a(slvidcode_reg_22_0), .b(n18), .c(ftap_slvidcode[21]), 
        .d(n118), .o(N41) );
  d04aon03wn0a5 U48 ( .a(slvidcode_reg_23_0), .b(n18), .c(ftap_slvidcode[22]), 
        .d(n118), .o(N42) );
  d04aon03wn0a5 U49 ( .a(slvidcode_reg_24_0), .b(n18), .c(ftap_slvidcode[23]), 
        .d(n118), .o(N43) );
  d04aon03wn0a5 U50 ( .a(slvidcode_reg_25_0), .b(n18), .c(ftap_slvidcode[24]), 
        .d(n118), .o(N44) );
  d04aon03wn0a5 U51 ( .a(slvidcode_reg_26_0), .b(n18), .c(ftap_slvidcode[25]), 
        .d(n118), .o(N45) );
  d04aon03wn0a5 U52 ( .a(slvidcode_reg_27_0), .b(n18), .c(ftap_slvidcode[26]), 
        .d(n118), .o(N46) );
  d04aon03wn0a5 U53 ( .a(slvidcode_reg_28_0), .b(n18), .c(ftap_slvidcode[27]), 
        .d(n118), .o(N47) );
  d04aon03wn0a5 U54 ( .a(slvidcode_reg_29_0), .b(n18), .c(ftap_slvidcode[28]), 
        .d(n118), .o(N48) );
  d04aon03wn0a5 U55 ( .a(slvidcode_reg_30_0), .b(n18), .c(ftap_slvidcode[29]), 
        .d(n118), .o(N49) );
  d04aon03wn0a5 U56 ( .a(slvidcode_reg_31_0), .b(n18), .c(ftap_slvidcode[30]), 
        .d(n118), .o(N50) );
  d04aon03wn0a5 U57 ( .a(ftap_slvidcode[31]), .b(n118), .c(ftap_tdi), .d(n18), 
        .o(N51) );
  d04nob03wd0k5 U23 ( .a(stap_irdecoder_drselect[1]), .b(n16), .c(n210), .out(
        n18) );
  d04fyn0cwd0a5 slvidcode_reg_reg_0 ( .d(N20), .clk(net285), .psb(
        powergood_rst_trst_b), .o(stap_drreg_tdo[1]) );
  d04inn20wn0b0 U64 ( .a(1'b0), .o1(tap_rtdr_prog_rst_b[0]) );
  d04inn20wn0b0 U66 ( .a(1'b1), .o1(tap_rtdr_rti) );
  d04inn20wn0b0 U68 ( .a(1'b0), .o1(tap_rtdr_powergood) );
  d04inn20wn0b0 U70 ( .a(1'b1), .o1(tap_rtdr_selectir) );
  d04inn20wn0b0 U72 ( .a(1'b1), .o1(tap_rtdr_irdec[0]) );
  d04inn20wn0b0 U74 ( .a(1'b1), .o1(tap_rtdr_update[0]) );
  d04inn20wn0b0 U76 ( .a(1'b1), .o1(tap_rtdr_shift[0]) );
  d04inn20wn0b0 U78 ( .a(1'b1), .o1(tap_rtdr_capture[0]) );
  d04inn20wn0b0 U80 ( .a(1'b0), .o1(tap_rtdr_tdi[0]) );
  d04inn20wn0b0 U83 ( .a(1'b1), .o1(tapc_remove) );
  d04inn20wn0b0 U85 ( .a(1'b1), .o1(tapc_wtap_sel[0]) );
  d04inn20wn0b0 U87 ( .a(1'b1), .o1(tapc_select[0]) );
  d04inn20wn0b0 U89 ( .a(1'b1), .o1(tapc_select[1]) );
  d04inn20wn0b0 U91 ( .a(1'b1), .o1(sftapnw_ftap_secsel[0]) );
  d04inn20wn0b0 U93 ( .a(1'b1), .o1(tdr_data_out[0]) );
  d04inn00wn0b5 U13 ( .a(n17), .o1(n118) );
  d04bfn00wn0c5 U12 ( .a(powergood_rst_trst_b), .o(n116) );
endmodule



    module stap_stap_tdomux_TDOMUX_STAP_NUMBER_OF_TOTAL_REGISTERS2_STAP_ENABLE_TDO_POS_EDGE1_1 ( 
        stap_drreg_tdo, stap_fsm_shift_dr, stap_fsm_shift_ir, 
        stap_irdecoder_drselect, stap_irreg_serial_out, stap_fsm_tlrs, 
        ftap_tck, powergood_rst_trst_b, stap_mux_tdo, stap_tdomux_tdoen );
  input [1:0] stap_drreg_tdo;
  input [1:0] stap_irdecoder_drselect;
  input stap_fsm_shift_dr, stap_fsm_shift_ir, stap_irreg_serial_out,
         stap_fsm_tlrs, ftap_tck, powergood_rst_trst_b;
  output stap_mux_tdo, stap_tdomux_tdoen;
  wire   stap_mux_tdo_int, stap_mux_tdo_preflop_int, n8, n3, n4, n5, n6, n7,
         n10, n11, n13, n14, n15, n17, n19, n20, n21;

  d04gmx22wd0c0 i_sipstap_ctech_clockmux_tdo_posedge_clk2to1mux_outclk_ckmux1_dcszo ( 
        .clk2(stap_mux_tdo_int), .clk1(stap_mux_tdo_preflop_int), .s(1'b1), 
        .clkout(stap_mux_tdo) );
  d04fyn8fwd0b0 stap_tdomux_tdoen_reg ( .d(n15), .clkb(ftap_tck), .rb(n20), 
        .psb(1'b1), .o(stap_tdomux_tdoen) );
  d04fyn8fwd0b0 stap_mux_tdo_int_reg ( .d(n8), .clkb(ftap_tck), .rb(n20), 
        .psb(1'b1), .o(stap_mux_tdo_int) );
  d04nan02wn0b0 U7 ( .a(n11), .b(n10), .o1(n8) );
  d04nan03wn0b0 U8 ( .a(stap_mux_tdo_int), .b(n7), .c(n19), .o1(n10) );
  d04nan02wn0b0 U9 ( .a(n13), .b(n15), .o1(n11) );
  d04non02wn0b0 U10 ( .a(n7), .b(stap_fsm_tlrs), .o1(n15) );
  d04non02wn0b0 U11 ( .a(stap_fsm_shift_ir), .b(stap_fsm_shift_dr), .o1(n7) );
  d04inn20wn0b0 U13 ( .a(stap_fsm_tlrs), .o1(n19) );
  d04non02wn0b0 U14 ( .a(n5), .b(stap_irreg_serial_out), .o1(n3) );
  d04nan02wn0b0 U15 ( .a(stap_irdecoder_drselect[0]), .b(stap_drreg_tdo[0]), 
        .o1(n4) );
  d04inn20wn0b0 U16 ( .a(stap_fsm_shift_ir), .o1(n5) );
  d04nan02wn0b0 U17 ( .a(stap_drreg_tdo[1]), .b(stap_irdecoder_drselect[1]), 
        .o1(n6) );
  d04inn00wn0b5 U12 ( .a(n14), .o1(stap_mux_tdo_preflop_int) );
  d04cak04wd0d7 U5 ( .a(n6), .b(n5), .c(n4), .d(n3), .o1(n13) );
  d04nan02wn0c0 U19 ( .a(n13), .b(n19), .o1(n17) );
  d04bfn00wd0b5 U4 ( .a(powergood_rst_trst_b), .o(n20) );
  d04inn20wn0d0 U6 ( .a(n17), .o1(n21) );
  d04nan02wn0c0 U20 ( .a(powergood_rst_trst_b), .b(n21), .o1(n14) );
endmodule


module stap ( ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, ftap_slvidcode, 
        atap_tdo, atap_tdoen, fdfx_powergood, tdr_data_out, tdr_data_in, 
        fdfx_secure_policy, fdfx_earlyboot_exit, fdfx_policy_update, 
        sftapnw_ftap_secsel, sftapnw_ftap_enabletdo, sftapnw_ftap_enabletap, 
        sntapnw_ftap_tck, sntapnw_ftap_tms, sntapnw_ftap_trst_b, 
        sntapnw_ftap_tdi, sntapnw_atap_tdo, sntapnw_atap_tdo_en, ftapsslv_tck, 
        ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi, atapsslv_tdo, 
        atapsslv_tdoen, sntapnw_ftap_tck2, sntapnw_ftap_tms2, 
        sntapnw_ftap_trst2_b, sntapnw_ftap_tdi2, sntapnw_atap_tdo2, 
        sntapnw_atap_tdo2_en, sn_fwtap_wrck, sn_fwtap_wrst_b, 
        sn_fwtap_capturewr, sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, 
        sn_fwtap_selectwir, sn_awtap_wso, sn_fwtap_wsi, stap_fbscan_tck, 
        stap_abscan_tdo, stap_fbscan_capturedr, stap_fbscan_shiftdr, 
        stap_fbscan_updatedr, stap_fbscan_updatedr_clk, stap_fbscan_runbist_en, 
        stap_fbscan_highz, stap_fbscan_extogen, stap_fbscan_intest_mode, 
        stap_fbscan_chainen, stap_fbscan_mode, stap_fbscan_extogsig_b, 
        stap_fbscan_d6init, stap_fbscan_d6actestsig_b, stap_fbscan_d6select, 
        rtdr_tap_tdo, tap_rtdr_irdec, tap_rtdr_prog_rst_b, tap_rtdr_tdi, 
        tap_rtdr_capture, tap_rtdr_shift, tap_rtdr_update, tap_rtdr_tck, 
        tap_rtdr_powergood, tap_rtdr_selectir, tap_rtdr_rti );
  input [31:0] ftap_slvidcode;
  output [0:0] tdr_data_out;
  input [0:0] tdr_data_in;
  input [3:0] fdfx_secure_policy;
  output [0:0] sftapnw_ftap_secsel;
  output [0:0] sftapnw_ftap_enabletdo;
  output [0:0] sftapnw_ftap_enabletap;
  input [0:0] sntapnw_atap_tdo_en;
  input [0:0] sntapnw_atap_tdo2_en;
  input [0:0] sn_awtap_wso;
  output [0:0] sn_fwtap_wsi;
  input [0:0] rtdr_tap_tdo;
  output [0:0] tap_rtdr_irdec;
  output [0:0] tap_rtdr_prog_rst_b;
  output [0:0] tap_rtdr_tdi;
  output [0:0] tap_rtdr_capture;
  output [0:0] tap_rtdr_shift;
  output [0:0] tap_rtdr_update;
  input ftap_tck, ftap_tms, ftap_trst_b, ftap_tdi, fdfx_powergood,
         fdfx_earlyboot_exit, fdfx_policy_update, sntapnw_atap_tdo,
         ftapsslv_tck, ftapsslv_tms, ftapsslv_trst_b, ftapsslv_tdi,
         sntapnw_atap_tdo2, stap_abscan_tdo;
  output atap_tdo, atap_tdoen, sntapnw_ftap_tck, sntapnw_ftap_tms,
         sntapnw_ftap_trst_b, sntapnw_ftap_tdi, atapsslv_tdo, atapsslv_tdoen,
         sntapnw_ftap_tck2, sntapnw_ftap_tms2, sntapnw_ftap_trst2_b,
         sntapnw_ftap_tdi2, sn_fwtap_wrck, sn_fwtap_wrst_b, sn_fwtap_capturewr,
         sn_fwtap_shiftwr, sn_fwtap_updatewr, sn_fwtap_rti, sn_fwtap_selectwir,
         stap_fbscan_tck, stap_fbscan_capturedr, stap_fbscan_shiftdr,
         stap_fbscan_updatedr, stap_fbscan_updatedr_clk,
         stap_fbscan_runbist_en, stap_fbscan_highz, stap_fbscan_extogen,
         stap_fbscan_intest_mode, stap_fbscan_chainen, stap_fbscan_mode,
         stap_fbscan_extogsig_b, stap_fbscan_d6init, stap_fbscan_d6actestsig_b,
         stap_fbscan_d6select, tap_rtdr_tck, tap_rtdr_powergood,
         tap_rtdr_selectir, tap_rtdr_rti;
  wire   powergood_rst_trst_b, tapc_remove, stap_fsm_tlrs, stap_fsm_capture_ir,
         stap_fsm_shift_ir, stap_fsm_update_ir, stap_fsm_capture_dr,
         stap_fsm_shift_dr, stap_irreg_ireg_7_0, stap_irreg_ireg_6_0,
         stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, stap_irreg_ireg_3_0,
         stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, stap_irreg_ireg_0_0,
         stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0,
         stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0,
         stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0,
         stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0,
         stap_irreg_serial_out, stap_irdecoder_drselect_1_0,
         stap_irdecoder_drselect_0_0, stap_and_all_bits_irreg,
         dfxsecure_feature_en_2_0, dfxsecure_feature_en_1_0,
         dfxsecure_feature_en_0_0, tapc_select_1_0, tapc_select_0_0,
         tapc_wtap_sel_0_0, stap_drreg_tdo_1_0, stap_drreg_tdo_0_0,
         stap_mux_tdo, stap_tdomux_tdoen, n4, n48, n141, n142, n143, n144,
         n145, n146, SYNOPSYS_UNCONNECTED_1, SYNOPSYS_UNCONNECTED_2,
         SYNOPSYS_UNCONNECTED_3, SYNOPSYS_UNCONNECTED_4,
         SYNOPSYS_UNCONNECTED_5, SYNOPSYS_UNCONNECTED_6,
         SYNOPSYS_UNCONNECTED_7, SYNOPSYS_UNCONNECTED_8,
         SYNOPSYS_UNCONNECTED_9, SYNOPSYS_UNCONNECTED_10,
         SYNOPSYS_UNCONNECTED_11, SYNOPSYS_UNCONNECTED_12,
         SYNOPSYS_UNCONNECTED_13, SYNOPSYS_UNCONNECTED_14,
         SYNOPSYS_UNCONNECTED_15, SYNOPSYS_UNCONNECTED_16,
         SYNOPSYS_UNCONNECTED_17;

  stap_sipstap_ctech_clkbf_0 i_sipstap_ctech_clkbf_rtdr ( .in_clk(ftap_tck), 
        .o_clk(tap_rtdr_tck) );
  stap_stap_fsm_FSM_STAP_ENABLE_TAP_NETWORK0_FSM_STAP_WTAP_COMMON_LOGIC0_FSM_STAP_ENABLE_WTAP_CTRL_POS_EDGE0_FSM_STAP_ENABLE_REMOTE_TEST_DATA_REGISTERS0_1 i_stap_fsm ( 
        .ftap_tms(ftap_tms), .ftap_tck(n4), .powergood_rst_trst_b(n144), 
        .tapc_remove(tapc_remove), .stap_fsm_tlrs(stap_fsm_tlrs), 
        .stap_fsm_rti(SYNOPSYS_UNCONNECTED_1), .stap_fsm_e1dr(
        SYNOPSYS_UNCONNECTED_2), .stap_fsm_e2dr(SYNOPSYS_UNCONNECTED_3), 
        .stap_selectwir(SYNOPSYS_UNCONNECTED_4), .stap_selectwir_neg(
        SYNOPSYS_UNCONNECTED_5), .sn_fwtap_capturewr(sn_fwtap_capturewr), 
        .sn_fwtap_shiftwr(sn_fwtap_shiftwr), .sn_fwtap_updatewr(
        sn_fwtap_updatewr), .sn_fwtap_rti(sn_fwtap_rti), .sn_fwtap_wrst_b(
        sn_fwtap_wrst_b), .stap_fsm_capture_ir(stap_fsm_capture_ir), 
        .stap_fsm_shift_ir(stap_fsm_shift_ir), .stap_fsm_shift_ir_neg(
        SYNOPSYS_UNCONNECTED_6), .stap_fsm_update_ir(stap_fsm_update_ir), 
        .stap_fsm_capture_dr(stap_fsm_capture_dr), .stap_fsm_shift_dr(
        stap_fsm_shift_dr), .stap_fsm_update_dr(SYNOPSYS_UNCONNECTED_7) );
  stap_stap_irreg_IRREG_STAP_SIZE_OF_EACH_INSTRUCTION8_IRREG_STAP_MINIMUM_SIZEOF_INSTRUCTION8_1 i_stap_irreg ( 
        .stap_fsm_tlrs(stap_fsm_tlrs), .stap_fsm_capture_ir(
        stap_fsm_capture_ir), .stap_fsm_shift_ir(stap_fsm_shift_ir), 
        .stap_fsm_update_ir(stap_fsm_update_ir), .ftap_tdi(ftap_tdi), 
        .ftap_tck(n4), .powergood_rst_trst_b(n143), .stap_irreg_ireg({
        stap_irreg_ireg_7_0, stap_irreg_ireg_6_0, stap_irreg_ireg_5_0, 
        stap_irreg_ireg_4_0, stap_irreg_ireg_3_0, stap_irreg_ireg_2_0, 
        stap_irreg_ireg_1_0, stap_irreg_ireg_0_0}), .stap_irreg_ireg_nxt({
        stap_irreg_ireg_nxt_7_0, stap_irreg_ireg_nxt_6_0, 
        stap_irreg_ireg_nxt_5_0, stap_irreg_ireg_nxt_4_0, 
        stap_irreg_ireg_nxt_3_0, stap_irreg_ireg_nxt_2_0, 
        stap_irreg_ireg_nxt_1_0, stap_irreg_ireg_nxt_0_0}), 
        .stap_irreg_serial_out(stap_irreg_serial_out), .stap_irreg_shift_reg({
        SYNOPSYS_UNCONNECTED_8, SYNOPSYS_UNCONNECTED_9, 
        SYNOPSYS_UNCONNECTED_10, SYNOPSYS_UNCONNECTED_11, 
        SYNOPSYS_UNCONNECTED_12, SYNOPSYS_UNCONNECTED_13, 
        SYNOPSYS_UNCONNECTED_14, SYNOPSYS_UNCONNECTED_15}) );
  stap_stap_irdecoder_8_2_0c3fc_04_8_0_0_1_2_1 i_stap_irdecoder ( 
        .powergood_rst_trst_b(n145), .stap_irreg_ireg({stap_irreg_ireg_7_0, 
        stap_irreg_ireg_6_0, stap_irreg_ireg_5_0, stap_irreg_ireg_4_0, 
        stap_irreg_ireg_3_0, stap_irreg_ireg_2_0, stap_irreg_ireg_1_0, 
        stap_irreg_ireg_0_0}), .stap_irreg_ireg_nxt({stap_irreg_ireg_nxt_7_0, 
        stap_irreg_ireg_nxt_6_0, stap_irreg_ireg_nxt_5_0, 
        stap_irreg_ireg_nxt_4_0, stap_irreg_ireg_nxt_3_0, 
        stap_irreg_ireg_nxt_2_0, stap_irreg_ireg_nxt_1_0, 
        stap_irreg_ireg_nxt_0_0}), .ftap_tck(n4), .feature_green_en(
        dfxsecure_feature_en_0_0), .feature_orange_en(dfxsecure_feature_en_1_0), .feature_red_en(dfxsecure_feature_en_2_0), .stap_irdecoder_drselect({
        stap_irdecoder_drselect_1_0, stap_irdecoder_drselect_0_0}), 
        .stap_and_all_bits_irreg(stap_and_all_bits_irreg) );
  stap_stap_drreg_0_0_0_32_2_2_16_1_0000_0000_0000_0_0_1_1_1_0_0_0_0_0_0_0_0_0_0_2_0_0_0_0_1_1_0_0_0_0_1_2_1 i_stap_drreg ( 
        .stap_fsm_tlrs(stap_fsm_tlrs), .ftap_tdi(ftap_tdi), .ftap_tck(n4), 
        .ftap_trst_b(1'b0), .fdfx_powergood(1'b0), .powergood_rst_trst_b(n144), 
        .stap_fsm_capture_dr(stap_fsm_capture_dr), .stap_fsm_shift_dr(
        stap_fsm_shift_dr), .stap_fsm_update_dr(1'b0), .stap_selectwir(1'b0), 
        .ftap_slvidcode({ftap_slvidcode[31:1], 1'b0}), 
        .stap_irdecoder_drselect({stap_irdecoder_drselect_1_0, 
        stap_irdecoder_drselect_0_0}), .tdr_data_in(1'b0), .tdr_data_out(
        tdr_data_out[0]), .sftapnw_ftap_secsel(sftapnw_ftap_secsel[0]), 
        .tapc_select({tapc_select_1_0, tapc_select_0_0}), .feature_green_en(
        1'b0), .feature_orange_en(1'b0), .feature_red_en(1'b0), 
        .tapc_wtap_sel(tapc_wtap_sel_0_0), .tapc_remove(tapc_remove), 
        .stap_drreg_tdo({stap_drreg_tdo_1_0, stap_drreg_tdo_0_0}), 
        .stap_and_all_bits_irreg(stap_and_all_bits_irreg), .rtdr_tap_tdo(1'b0), 
        .tap_rtdr_tdi(tap_rtdr_tdi[0]), .tap_rtdr_capture(tap_rtdr_capture[0]), 
        .tap_rtdr_shift(tap_rtdr_shift[0]), .tap_rtdr_update(
        tap_rtdr_update[0]), .tap_rtdr_irdec(tap_rtdr_irdec[0]), 
        .tap_rtdr_selectir(tap_rtdr_selectir), .tap_rtdr_powergood(
        tap_rtdr_powergood), .tap_rtdr_rti(tap_rtdr_rti), 
        .tap_rtdr_prog_rst_b(tap_rtdr_prog_rst_b[0]), .stap_fsm_rti(1'b0) );
  stap_stap_tdomux_TDOMUX_STAP_NUMBER_OF_TOTAL_REGISTERS2_STAP_ENABLE_TDO_POS_EDGE1_1 i_stap_tdomux ( 
        .stap_drreg_tdo({stap_drreg_tdo_1_0, stap_drreg_tdo_0_0}), 
        .stap_fsm_shift_dr(stap_fsm_shift_dr), .stap_fsm_shift_ir(
        stap_fsm_shift_ir), .stap_irdecoder_drselect({
        stap_irdecoder_drselect_1_0, stap_irdecoder_drselect_0_0}), 
        .stap_irreg_serial_out(stap_irreg_serial_out), .stap_fsm_tlrs(
        stap_fsm_tlrs), .ftap_tck(n4), .powergood_rst_trst_b(
        powergood_rst_trst_b), .stap_mux_tdo(stap_mux_tdo), 
        .stap_tdomux_tdoen(stap_tdomux_tdoen) );
  stap_stap_stap_glue_GLUE_STAP_ENABLE_TAP_NETWORK0_GLUE_STAP_ENABLE_WTAP_NETWORK0_GLUE_STAP_NUMBER_OF_TAPS1_GLUE_STAP_NUMBER_OF_WTAPS1_GLUE_STAP_SIZE_OF_EACH_INSTRUCTION8_GLUE_STAP_WTAP_COMMON_LOGIC0_G_0_0 i_stap_glue ( 
        .ftap_tck(1'b0), .ftap_tms(1'b0), .ftap_trst_b(ftap_trst_b), 
        .fdfx_powergood(fdfx_powergood), .ftap_tdi(1'b0), .stap_tdomux_tdoen(
        stap_tdomux_tdoen), .sntapnw_atap_tdo_en(sntapnw_atap_tdo_en[0]), 
        .pre_tdo(atap_tdo), .powergood_rst_trst_b(powergood_rst_trst_b), 
        .atap_tdoen(atap_tdoen), .sntapnw_ftap_tck(sntapnw_ftap_tck), 
        .sntapnw_ftap_tms(sntapnw_ftap_tms), .sntapnw_ftap_trst_b(
        sntapnw_ftap_trst_b), .sntapnw_ftap_tdi(sntapnw_ftap_tdi), 
        .sntapnw_atap_tdo(1'b0), .ftapsslv_tck(ftapsslv_tck), .ftapsslv_tms(
        ftapsslv_tms), .ftapsslv_trst_b(ftapsslv_trst_b), .ftapsslv_tdi(
        ftapsslv_tdi), .atapsslv_tdo(atapsslv_tdo), .atapsslv_tdoen(
        atapsslv_tdoen), .sntapnw_ftap_tck2(sntapnw_ftap_tck2), 
        .sntapnw_ftap_tms2(sntapnw_ftap_tms2), .sntapnw_ftap_trst2_b(
        sntapnw_ftap_trst2_b), .sntapnw_ftap_tdi2(sntapnw_ftap_tdi2), 
        .sntapnw_atap_tdo2(sntapnw_atap_tdo2), .sntapnw_atap_tdo2_en(
        sntapnw_atap_tdo2_en[0]), .sn_fwtap_wrck(sn_fwtap_wrck), 
        .stap_mux_tdo(stap_mux_tdo), .tapc_select({tapc_select_1_0, 
        tapc_select_0_0}), .tapc_wtap_sel(tapc_wtap_sel_0_0), .tapc_remove(
        tapc_remove), .stap_wtapnw_tdo(1'b1) );
  stap_stap_dfxsecure_plugin_3_4_0_3_1_2_0_07_3ad6b5ad6b59d733cce7_1 i_stap_dfxsecure_plugin ( 
        .fdfx_powergood(n48), .fdfx_secure_policy(fdfx_secure_policy), 
        .fdfx_earlyboot_exit(fdfx_earlyboot_exit), .fdfx_policy_update(
        fdfx_policy_update), .dfxsecure_feature_en({dfxsecure_feature_en_2_0, 
        dfxsecure_feature_en_1_0, dfxsecure_feature_en_0_0}), .visa_all_dis(
        SYNOPSYS_UNCONNECTED_16), .visa_customer_dis(SYNOPSYS_UNCONNECTED_17), 
        .sb_policy_ovr_value({1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), 
        .oem_secure_policy({1'b0, 1'b0, 1'b0, 1'b0}) );
  d04bfn00wd0b5 U8 ( .a(ftap_tck), .o(n4) );
  d04bfn00wn0a5 U49 ( .a(fdfx_powergood), .o(n48) );
  d04inn20wn0b0 U40 ( .a(1'b1), .o1(stap_fbscan_d6select) );
  d04inn20wn0b0 U42 ( .a(1'b0), .o1(stap_fbscan_d6actestsig_b) );
  d04inn20wn0b0 U44 ( .a(1'b1), .o1(stap_fbscan_d6init) );
  d04inn20wn0b0 U51 ( .a(1'b0), .o1(stap_fbscan_extogsig_b) );
  d04inn20wn0b0 U53 ( .a(1'b1), .o1(stap_fbscan_mode) );
  d04inn20wn0b0 U55 ( .a(1'b1), .o1(stap_fbscan_chainen) );
  d04inn20wn0b0 U57 ( .a(1'b1), .o1(stap_fbscan_intest_mode) );
  d04inn20wn0b0 U59 ( .a(1'b1), .o1(stap_fbscan_extogen) );
  d04inn20wn0b0 U61 ( .a(1'b1), .o1(stap_fbscan_highz) );
  d04inn20wn0b0 U63 ( .a(1'b1), .o1(stap_fbscan_runbist_en) );
  d04inn20wn0b0 U65 ( .a(1'b1), .o1(stap_fbscan_updatedr_clk) );
  d04inn20wn0b0 U67 ( .a(1'b1), .o1(stap_fbscan_updatedr) );
  d04inn20wn0b0 U69 ( .a(1'b1), .o1(stap_fbscan_shiftdr) );
  d04inn20wn0b0 U71 ( .a(1'b1), .o1(stap_fbscan_capturedr) );
  d04inn20wn0b0 U73 ( .a(1'b1), .o1(stap_fbscan_tck) );
  d04inn20wn0b0 U75 ( .a(1'b0), .o1(sn_fwtap_wsi[0]) );
  d04inn20wn0b0 U77 ( .a(1'b1), .o1(sn_fwtap_selectwir) );
  d04inn20wn0b0 U79 ( .a(1'b1), .o1(sftapnw_ftap_enabletap[0]) );
  d04inn20wn0b0 U81 ( .a(1'b1), .o1(sftapnw_ftap_enabletdo[0]) );
  d04bfn00wd0c7 U5 ( .a(n146), .o(n143) );
  d04bfn00wd0b5 U6 ( .a(n145), .o(n141) );
  d04bfn00wn0a5 U7 ( .a(n141), .o(n142) );
  d04bfn00wd0b5 U9 ( .a(powergood_rst_trst_b), .o(n146) );
  d04bfn00wd0i0 U10 ( .a(n142), .o(n144) );
  d04bfn00wn0d5 U11 ( .a(n146), .o(n145) );
endmodule

