#!/bin/echo "Must source me, can not run just as is"
#-*- shell-script -*-              For EMACS -- lets formatting happen

# this file generated by {.$tool.} from the perl template:
# {.$source.}

echo "soc.env: DATE =" `/bin/date`
alias gcc '{.&ToolConfig::ToolConfig_get_general_var("GCC_PATH").}/gcc'

if (! $?GK_build ) then
    setenv REPO_ROOT `pwd`
else
    setenv REPO_ROOT ${GK_build}
endif

if (! $?REPO_FOCUS) then
    setenv REPO_FOCUS stap 
endif

echo "Setting REPO_ROOT to $REPO_ROOT"

setenv IP_ROOT $REPO_ROOT
echo "Setting IP_ROOT to $IP_ROOT"
set CUST = '{.&ToolConfig::ToolConfig_get_general_var("CUST").}'
setenv CUSTOMER $CUST
echo "CUSTOMER is $CUSTOMER"

setenv SGLINT_MODEL_ROOT $cwd

##############################
##### Begin Env Vars from SIP Custom_Pre script
##############################
echo "setting IP_ROOT as $IP_ROOT"
setenv SIP_PROJECT dfx
setenv PROJECT_BASE ${IP_ROOT}
setenv SNPS_USE_NOVAS_HOME 1
#For Ace
setenv ACE_PROJECT  stap
setenv ACE_ENG ${REPO_ROOT}
setenv ACE_PWA_DIR "" 

setenv ACE_RC       ${PROJECT_BASE}/ace/$ACE_PROJECT.acerc


#For compilation
setenv LIB_AREA     ${PROJECT_BASE}/verif/lib
setenv GCC_LIB_VER gcc-4.2.2_64

#For subIP
setenv DFXSECURE_PLUGIN_VER ${IP_ROOT}/subIP/DfxSecurePlugin
setenv JTAG_BFM_VER   /p/cdft/dteg/bfms/jtag_bfm/dteg-jtag_bfm
setenv GENERATED_FILES_FOR_JTAGBFM ${IP_ROOT}/verif/ctt_files/rev0612/sTAP_IP_Standalone

#For Ctech Methodology
setenv CTECH_LIB_NAME CTECH_v_rtl_lib
#echo "which CUSTOMER: $CUSTOMER\n"
setenv GENERATED_FILES_FOR_CONVERGED_JTAGBFM ${JTAG_BFM_VER}/verif/tb/Converged_JtagBfm/Converged_SampleTests/tap_files

##############################
##### End Env Vars from PNG Custom_Pre script
##############################


##############################
## Begin Tools Env
##############################
##Make TSETUP working
echo PSETUP_SITE_DEF $REPO_ROOT/sitedef/siteDef
echo PSETUP_TOOLRC {.&ToolConfig::ToolConfig_get_tool_path("toolrc").}
#alias tsetup "source $PSETUP_BASEDIR/bin/setupTool"
setenv RTL_ROOT {.$ENV{RTL_ROOT}.}
setenv RTL_PROJ_TOOLS {.$ENV{RTL_PROJ_TOOLS}.}


# GCC
setenv GCC_LIB_VER      gcc

#tsetup ace               {.&ToolConfig::ToolConfig_get_tool_version("ace").}
#tsetup blueprint         {.&ToolConfig::ToolConfig_get_tool_version("blueprint").}
##tsetup collage           {.&ToolConfig::ToolConfig_get_tool_version("collage").}
#tsetup conformal         {.&ToolConfig::ToolConfig_get_tool_version("conformal").}
#tsetup coretools         {.&ToolConfig::ToolConfig_get_tool_version("coretools").}
#tsetup designcompiler    {.&ToolConfig::ToolConfig_get_tool_version("designcompiler").}
#tsetup dvt               {.&ToolConfig::ToolConfig_get_tool_version("dvt").}
#tsetup lira              {.&ToolConfig::ToolConfig_get_tool_version("lira").}
#tsetup memorymodeler     {.&ToolConfig::ToolConfig_get_tool_version("memorymodeler").}
#tsetup nebulon           {.&ToolConfig::ToolConfig_get_tool_version("nebulon").}
#tsetup ovm               {.&ToolConfig::ToolConfig_get_tool_version("ovm").}
#tsetup questaCDC         {.&ToolConfig::ToolConfig_get_tool_version("questacdc").}
#tsetup saola             {.&ToolConfig::ToolConfig_get_tool_version("saola").}
#tsetup isaf              {.&ToolConfig::ToolConfig_get_tool_version("isaf").}
#tsetup spyglass          {.&ToolConfig::ToolConfig_get_tool_version("spyglass").}
#tsetup vcsmx             {.&ToolConfig::ToolConfig_get_tool_version("vcsmx").}
#tsetup verdi3            {.&ToolConfig::ToolConfig_get_tool_version("verdi3").}
#tsetup VisaIT            {.&ToolConfig::ToolConfig_get_tool_version("visait").}
#tsetup VisaFlow          {.&ToolConfig::ToolConfig_get_tool_version("visaflow").}
#tsetup lintra            {.&ToolConfig::ToolConfig_get_tool_version("lintra").}
#   
#tsetup tessent            {.&ToolConfig::ToolConfig_get_tool_version("tessent").}
#
#tsetup zircon            {.&ToolConfig::ToolConfig_get_tool_version("zirconqa").}
   
setenv VG_GNU_LIBDIR lib64
setenv KIT_PATH         {.&ToolConfig::ToolConfig_get_general_var("KIT_PATH").}
setenv PROCESS          {.&ToolConfig::ToolConfig_get_general_var("PROCESS").}
setenv PROCESS_NAME     {.&ToolConfig::ToolConfig_get_general_var("PROCESS_NAME").}

##LINTRA
setenv LINTRA_VER       {.&ToolConfig::ToolConfig_get_tool_version("lintra").}
setenv LIRA_VER         {.&ToolConfig::ToolConfig_get_tool_version("lira").}

setenv LINTRARULES      {.&ToolConfig::ToolConfig_get_tool_path("lintra-rules").}
setenv LINTRA           {.&ToolConfig::ToolConfig_get_tool_path("lintra").}

#CDC
setenv CDC_RULES        {.&ToolConfig::ToolConfig_get_tool_path("intelcdc").}
setenv CDC_VER          {.&ToolConfig::ToolConfig_get_tool_version("questacdc").}

##SPG
setenv SPG_LP_RULES     {.&ToolConfig::ToolConfig_get_tool_path("spyglass_methodology").}/lp_fe
setenv SPG_DFT_RULES    {.&ToolConfig::ToolConfig_get_tool_path("spyglass_methodology").}/dft
setenv SPYGLASS_VER     {.&ToolConfig::ToolConfig_get_tool_version("spyglass").}
setenv SPYGLASS_DC_PATH {.&ToolConfig::ToolConfig_get_tool_path("designcompiler").}
setenv CHASSIS_ROOT     {.&ToolConfig::ToolConfig_get_tool_path("chassis").}
setenv CTECH_LIBRARY    {.&ToolConfig::ToolConfig_get_tool_path("ctech").}

## CTECH Library
#set vt_type = {.&ToolConfig::get_facet(VT_TYPE).}
#if ($vt_type == "") then
#    setenv CTECH_LIB_NAME  CTECH_v_rtl_lib
#else
#    setenv CTECH_LIB_NAME  CTECH_p1273_d04_{.&ToolConfig::get_facet(VT_TYPE).}_rtl_lib
#endif

##############################
## End Tools Env
##############################
#---------------------------------------------------
# EFFM vars
#---------------------------------------------------
setenv EMUL_CFG_DIR $REPO_ROOT/ace/effm_flows
setenv EMUL_TOOLS_DIR {.&ToolConfig::ToolConfig_get_tool_path("effm").}/effm_tools
setenv EMUL_RESULTS_DIR $REPO_ROOT/results/emul 
setenv PATH ${EMUL_TOOLS_DIR}:${PATH}
setenv SYNPLIFY_VERSION {.&ToolConfig::ToolConfig_get_tool_version("effm").}
#tsetup synplifypro $SYNPLIFY_VERSION
##############################
##### Begin Env Vars from SIP Custom_Post script
##############################
echo "\n\nTools setup done...\n\n"
set machineOS=`uname`
set machineCPU=`uname -p`
if ($machineOS == "Linux") then
    if ($machineCPU == "x86_64") then
        setenv LD_LIBRARY_PATH ${VCS_HOME}/suse64/lib:$LD_LIBRARY_PATH
    else
        setenv LD_LIBRARY_PATH ${VCS_HOME}/suse32/lib:$LD_LIBRARY_PATH
    endif
else
    echo ""
    echo "$machineOS is not officially supported for sims. Please login to an HP or Linux machine."
    echo ""
    echo ""
    exit(1)
endif

alias tsetup  'source /p/com/env/psetup/prod/bin/setupTool'

#source $IP_ROOT/ace/emulation/emulation.env

cd $PROJECT_BASE

echo "----------------------------------------------------------"
echo "Environment variables for $ACE_PROJECT....."
echo "----------------------------------------------------------"
echo "ACE_PROJECT:           $ACE_PROJECT"
echo "PROJECT_BASE:          $PROJECT_BASE"
echo "ACE_ENG:               $ACE_ENG"
echo "ACE_RC:                $ACE_RC"

echo "LIB_AREA:              $LIB_AREA"
#echo "NBPOOL:                $NBPOOL"
#echo "NBQSLOT:               $NBQSLOT"
#echo "NBCLASS:               $NBCLASS "
echo "----------------------------------------------------------"

#setenv CDC_FLOW_RELEASE v20141105
#setenv CDC_PREFERENCE_BIT_RECON FALSE



##############################
##### End Env Vars from PNG Custom_Post script
##############################

echo "#########################  limit size of stack BEFORE unlimit command ######################\n"
limit 
unlimit 
echo "#########################  limit size of stack AFTER unlimit command ######################\n"
limit 
echo "\n> Done ip-stap setup script"
