#-------------------------------------------------------------------------------------------------------
##     Package Name: Haswell_Models.pm
##          Project: Haswell/Broadwell
##            Owner: Chancellor Archie (chancellor.archie@intel.com)
##      Description: This package is used to simply define the models, duts, and test list
##                   which are used by the Haswell Model Build tools to create Models.
##
##
##
##   (C) Copyright Intel Corporation, 2008
##   Licensed material --  Program property of Intel Corporation
##   All Rights Reserved
##
##   This program is the property of Intel Corporation and is furnished
##   pursuant to a written license agreement. It may not be used, reproduced,
##   or disclosed to others except in accordance with the terms and conditions
##   of that agreement
##-------------------------------------------------------------------------------------------------------
##-------------------------------------------------------------------------------------------------------
##   Haswell/Broadwell Model Hierarchy/Dut Configuration
##
##-------------------------------------------------------------------------------------------------------
## Do for common file.
do "GkUtils.hdk.common.cfg";
#use lib "/p/hdk/rtl/proj_tools/gkutils_flowGen/15.02.06/gk-utils_command_generator/";
use lib "/p/hdk/rtl/proj_tools/gkutils_flowGen/15.02.52/gk-utils_command_generator/";
use GK_Utils;

use vars qw($override @ace_compile_defaults @ace_sim_defaults %TaskConfig);

my $site = $ENV{EC_SITE};
$ENV{NB_POOLS} =  "FM,-sc_linux6";
my $psf2disk = "/nfs/fm/disks/fm_fabric_00007";
$admin = 'psf2admin';
$toolDir = "$psf2disk/psf2_tools_release/latest";
## HDK script for creating jobs file
$GenAceJobsfile = "$toolDir/GenAceJobsfile";
$TaskConfig{'GK_POST_PROCESS_SCRIPT'} = "$toolDir/check_false_fail.pl";

$TaskConfig{$CLUST}{$STEP}{'initial_project_setup'} = [
    'set path = ( /usr/intel/bin /usr/local/bin /bin /usr/bin . $path )',
    'source /p/hdk/rtl/hdk.rc -cfg sip -reentrant',
    'setenv LM_PROJECT EIG_FABRIC', # duplicate but has no effect in acereg jobs
    'set backslash_quote', # backslashes (`\') always quote `\', `'', and `"' in shell scripts
    ];

@ace_compile_defaults = (
#        "-nbjob_opts --post-exec,$TaskConfig{'GK_POST_PROCESS_SCRIPT'}",
);
@ace_sim_defaults = (
#        "-nbjob_opts --post-exec,$TaskConfig{'GK_POST_PROCESS_SCRIPT'}",
        '-pct',
        '-nouse_simple_testlog_names',
        '-simv_args +OVM_VERBOSITY=OVM_NONE',
        '-rtt',
        '-quiet', # --> Vlad says to not do this as debug becomes difficult. But disk space becomes an issue
      #  '-nb_submit_delay 60',  #--> Vlad mentioned this doesn't do anything
        '-nb_max_num_jobs 500',
        '-nb_max_num_wait 100',
);



my $washgroups = "fabric,soc,dk1273,soc73,siphdk,socenv,hdk10nm";

my $aceregAws = "$toolDir/acereg_hdk_wp.csh";
my $smart_turnin = 0;
my $CUST="p1274";
my $TOOLSET="mat1.6.1.p2";
my $sbe_results;
my $vc_repo='/p/sip/proj/sbr/central_repos/ip-iosf-sideband-vc';
$sbr_dynamo_repo='/p/sip/proj/sbr/central_repos/ip-dynamo';
#my $cust="s14nm";
my $toolset = "mat1.6.1.p2";

BEGIN
{
    $REPO_ROOT = `/p/sip/git/wrapper/latest/git ROOT`;
    chomp $REPO_ROOT;
    unshift @INC, "$REPO_ROOT/cfg";

    $ENV{IP_ROOT}=$REPO_ROOT;
    $ENV{REPO_ROOT} = $ENV{IP_ROOT};
}

# Initial setup requirements for the clone
{
    # get the VC bfm
    my $sideband_vc = "$REPO_ROOT/verif/bfm/sideband_vc";
    if(-d $sideband_vc) {
        info("Skip cloning SVC as it already exists: $sideband_vc");
    }
    else {
      info('Cloning SVC from head of repo');
        my @cmd=('git','clone',$vc_repo,$sideband_vc);
        sys_fatal_call(@cmd);
    }
}


#-------------------------------------------------------------------------------
# Common sub for making system call and returning the exit code.
#    command must be passed in as an array
#-------------------------------------------------------------------------------
sub system_call {
    my @cmd = @_;
    
    info("Executing: @cmd");
    my $rc = system(@cmd);
    if ($rc) {
        return $rc;
    } else {
        return 0;
    }
}

#-------------------------------------------------------------------------------
# When calling system commands with this sub, if non-zero return code, 
#     the program will print an error and terminate
#-------------------------------------------------------------------------------
sub sys_fatal_call {
    my @cmd = @_;
    if(system_call(@cmd)) {
        exit_on_failure('Previous command execution failed!! (command: ' . "@cmd" . ')');
    } else {
        info('Execution was successful');
    }
}


#-------------------------------------------------------------------------------
# ------------- sbe custom configs ---------------------------------------------
#-------------------------------------------------------------------------------


my $ep_cfgs="$REPO_ROOT/verif/tests/ep_cfgs";
opendir (my $dh, $ep_cfgs) || die "Can't opendir $ep_cfgs: $!";
@sbe_cust_configs=grep { !/^\./ && -f "$ep_cfgs/$_" } readdir($dh);
#print " @sbe_cust_configs\n";
@sbe_cust_configs2= splice(@sbe_cust_configs, 45);
#print " @sbe_cust_configs2\n";
closedir $dh;

my $SBE_CFG = uc (@sbe_cust_configs2[0]);
my $sbe_results="$REPO_ROOT/target/results/${SBE_CFG}";
my $sbe_regress = getCustRegress($SBE_CFG);


#-------------------------------------------------------------------------------
# ------------- sbr custom configs ---------------------------------------------
#-------------------------------------------------------------------------------

my @line=`/bin/grep '^[ ]*set[ ]*tmp_CFGS[ ]*=[ ]*".*"' $REPO_ROOT/unsupported/scripts/sb_regress`;
        print "### @line \n";
        print "##### Regress configs here ####  \n" ;
        foreach my $line (@line) {
            if ($line=~/tmp_CFGS\s*=\s*"(.*)"/) {
                if ($1 eq "") {next};
                @sbr_custom_configs = split(/ /,$1);
                #print "@sbr_custom_configs \n";
                #print "sbr custom configs here \n" ;
                @sbr_custom_configs2= splice(@sbr_custom_configs, 17);
                #print "@sbr_custom_configs2 \n";
                #print "sbr custom configs2 here \n" ;
                last;
            }
        }

my $SBR_CFG = @sbr_custom_configs2[0] ;
my $sbr_compile = getsbrCompile(${SBR_CFG});
my $sbr_regress = getsbrRegress(${SBR_CFG});
my $corekit = buildcorekit();

#-------------------------------------------------------------------------------
# ------------- sbr dynamo installation ---------------------------------------------
#-------------------------------------------------------------------------------

$dynamo_scripts="$REPO_ROOT/COREKIT/IOSF_Sideband_Fabric_Compiler_ALL_2019WW36/scripts"; # needs to be here since REPO_ROOT isn't defined until now
$dynamo_clone="$REPO_ROOT/subIP/ip-dynamo"; # needs to be here since REPO_ROOT isn't defined until now
{
    $ENV{IP_ROOT}=$REPO_ROOT;

    # get the Dynamo repo clone
    if(-d $dynamo_clone) {
        info("Skip cloning dynamo repo as it already exists: $dynamo_clone");
    }
    else {
        info('Cloning dynamo repo from head of repo');
        my @cmd=('git','clone',$sbr_dynamo_repo,$dynamo_clone);
        sys_fatal_call(@cmd);

    }

    # create the gen directory if needed. This is where all new cfgs are generated
    mkdir "$REPO_ROOT/gen" if (!-d "$REPO_ROOT/gen");

}


# Regression testlists
my %testlists = (
    'mock'      => 'prod',
    'turnin'    => 'checkin',
    'release'   => 'prod',
);


################################################################
## $Models{general_cmds} -SBE & SBR
## specify configuration for each tools.
###############################################################

$Models{general_cmds} = [
                                       ############################------SBE------####################################
    {
        'NAME'           => 'SBE_compile',
        'CMDS'           => "simbuild -dut sbe -1c -cust $CUST -toolset $TOOLSET -1c- -logprefix <JOB_NAME> -ace_args -command \"ace @ace_compile_defaults -cc -noegc -regr -config ${SBE_CFG} -cust_cfg -results $sbe_results\" -ace_args- -nf",
        'JOB_POST_EXEC'  => "$toolDir/check_false_fail.pl",
        'JOB_ENV_SET'    => {
            'NB_WASH_GROUPS' => $washgroups,
            'NB_WASH_ENABLED' => '1',
        },
    },

    {
        'NAME'           => 'SBE_simulation',
        'DEPENDENCY'     => {"SBE_compile" => "Success"},
        'CMD_TYPE'       => 'jobsfile',
        'CREATE_DIR'     => "<MODEL_ROOT>/GATEKEEPER/NBFeederACE/${sbe_regress}",
        'JOBSFILE'       => "<MODEL_ROOT>/GATEKEEPER/NBFeederACE/${sbe_regress}/${sbe_regress}.jobs",
        'CMDS'           => "$GenAceJobsfile -dut sbe -cust $CUST -toolset $TOOLSET -logprefix $sbe_regress -post_exec $TaskConfig{'GK_POST_PROCESS_SCRIPT'} -aws $aceregAws -ace_command \"setenv LM_PROJECT EIG_FABRIC; ace @ace_sim_defaults -x -tl $REPO_ROOT/ace/iosf_sbc_ep_gk.list -results $sbe_results -dump_testlist_file $REPO_ROOT/GATEKEEPER/NBFeederACE/$sbe_regress/$sbe_regress \" ",
        'JOB_POST_EXEC'  => "$toolDir/check_false_fail.pl",
        'JOB_ENV_SET'    => {
            'NB_WASH_GROUPS' => $washgroups,
            'NB_WASH_ENABLED' => '1',
        },
    },


                                      ############################-------SBR-------###################################

    {
        'NAME'           => 'SBR_corekit',
        'ENV_ARGS'       => 'setenv DYNAMO_SCRIPTS_DIR <MODEL_ROOT>/subIP/ip-dynamo/scripts && rm -rf <MODEL_ROOT>/COREKIT && mkdir <MODEL_ROOT>/COREKIT||exit 1', 
        'CMDS'           => "simbuild -dut sbr -q -1c -CUST $CUST -toolset $toolset -1c- -logprefix $corekit -ace_args -command 'cd <MODEL_ROOT>/COREKIT && /usr/intel/bin/perl <MODEL_ROOT>/subIP/ip-dynamo/scripts/Builder.pl -force_repo ip-sbr -sbr1p0 -cust_repos ${REPO_ROOT} && rm -f <MODEL_ROOT>/COREKIT/*.tar.gz' -ace_args- -nf||exit 1",
        'JOB_POST_EXEC'  => "$toolDir/check_false_fail.pl",
    },

    {
        'NAME'           => 'SBR_dynamo',
        'DEPENDENCY'     => {"SBR_corekit" => "Success"},
        'ENV_ARGS'       => 'cd <MODEL_ROOT>/subIP/ip-dynamo;source scripts/setup -ft;setenv IN_DYNAMO_REPO 0;cd <MODEL_ROOT>/COREKIT/IOSF_Sideband_Fabric*;setenv DYNAMO_SCRIPTS_DIR <MODEL_ROOT>/COREKIT/IOSF_Sideband_Fabric*/scripts;'."cd $REPO_ROOT/gen;/bin/rm -rf ${SBR_CFG};/bin/mkdir ${SBR_CFG};cd ${SBR_CFG}",
        'CMDS'           =>
        "<MODEL_ROOT>/unsupported/scripts/hdk/run_dynamo.csh $CUST $toolset ${SBR_CFG} || exit 1",
        'JOB_POST_EXEC'  => "$toolDir/check_false_fail.pl",
    },

    {
        'NAME'           => 'SBR_compile',
        'DEPENDENCY'     => {"SBR_dynamo" => "Success"},
        'ENV_ARGS'       => "cd <MODEL_ROOT>/gen/${SBR_CFG}/workspace/sideband_network;source scripts/setup -x rtr_default -ft",

        'CMDS'           => "simbuild -dut sbr -1c -cust $CUST -toolset $toolset -1c- -logprefix $sbr_compile -ace_args -command \'ace @ace_compile_defaults -cc -pwr -vcs_setenv CTECH_LIB_NAME \$CTECH_SIM_LIB_NAME\' -ace_args- -nf",
        'JOB_POST_EXEC'  => "$toolDir/check_false_fail.pl",
        'JOB_ENV_SET'    => {
            'NB_WASH_GROUPS' => $washgroups,
            'NB_WASH_ENABLED' => '1',
        },
    },

    {
        'NAME'           => 'SBR_simulation',
        'DEPENDENCY'     => {"SBR_compile" => "Success"},
        'CMD_TYPE'       => 'jobsfile',
        'CREATE_DIR'     => "<MODEL_ROOT>/GATEKEEPER/NBFeederACE/${sbr_regress}",
        'JOBSFILE'       => "<MODEL_ROOT>/GATEKEEPER/NBFeederACE/${sbr_regress}/${sbr_regress}.jobs",
        'ENV_ARGS'       => "cd <MODEL_ROOT>/gen/${SBR_CFG}/workspace/sideband_network;source scripts/setup -x rtr_default -ft",
        'CMDS'           => "$GenAceJobsfile -dut sbr -cust $CUST -toolset $toolset -ver <MODEL_ROOT>/gen/${SBR_CFG}/workspace/sideband_network -logprefix $sbr_regress -post_exec $TaskConfig{'GK_POST_PROCESS_SCRIPT'} -aws $aceregAws -ace_command \"setenv LM_PROJECT EIG_FABRIC; ace @ace_sim_defaults -x -tl $REPO_ROOT/ace/iosf_sbc_rtr_gk.list -dump_testlist_file $REPO_ROOT/GATEKEEPER/NBFeederACE/$sbr_regress/$sbr_regress \" ",
        'JOB_ENV_SET'    => {
            'NB_WASH_GROUPS' => $washgroups,
            'NB_WASH_ENABLED' => '1',
        },
    },

];


sub getCustRegress {
    my ($cfg)=@_;
    return "${cfg}_regress";
}

sub getsbrCompile {
    my ($cfg)=@_;
    return "${cfg}_compile";
}

sub getsbrRegress {
    my ($cfg)=@_;
    return "${cfg}_regress";
}

sub buildcorekit {
    return "corekit";
}


###############################################################
## %flow_cfg-SBE & SBR
## specify all aliases for a tool or groups of tools.,
##############################################################

%flow_cfg;
$flow_cfg{turnin}{default}{run_tools}  = ['SBE_compile','SBE_simulation','SBR_corekit','SBR_dynamo','SBR_compile','SBR_simulation'];
$flow_cfg{mock}{default}{run_tools}    = ['SBE_compile','SBE_simulation','SBR_corekit','SBR_dynamo','SBR_compile','SBR_simulation'];
$flow_cfg{release}{default}{run_tools} = ['SBE_compile','SBE_simulation','SBR_corekit','SBR_dynamo','SBR_compile','SBR_simulation'];


#############################################################
## %resources
## specify the netbatch parameters.
##############################################################

%resource;
$resource{fm}{'*'}{default}{nb_qslot} = '/EIG/FABRIC/RTL/psf2_gk';
$resource{fm}{'*'}{default}{nb_class} = 'SLES11&&2G&&tFDS>1000';
$resource{fm}{'*'}{default}{nb_pool} = 'fm_critical';
$resource{fm}{'*'}{default}{nb_exec_limits} = '115m:120m';
$resource{fm}{'*'}{mock}{nb_qslot} = '/EIG/FABRIC/RTL/psf2';
$resource{fm}{'*'}{mock}{nb_pool} = 'fm_normal';
$resource{fm}{'*'}{mock}{nb_exec_limits} = '115m:120m';

############# Please do not make change to below code. If you has any doubt on below portion, please contact DA  ##############
@{$Models{general_cmds}} = GK_Utils::regenerateGeneralCmd(\%flow_cfg,\%Models,\%resource,$smart_turnin);

### override requeue behavior(to gate anything between 0 ~ -10000  and false failure job)
my $default_autoreq =  ("on-job-finish" .
   " '( ( ExitStatus < 0 && ExitStatus > -10000 ) && ExitStatus != -7 && ExitStatus != -8 && ExitStatus != -9" .
   " && ExitStatus != -10 && ExitStatus != -11 && ExitStatus != -305 && ExitStatus != -316" .
   " && ExitStatus != -1001 && ExitStatus != -3002 && ExitStatus != -3017 && ExitStatus != -3023" .
   " ):Requeue(2)," .
   " ( ExitStatus == -1001 ):Requeue(1)," .
   " (CustomAttributes=~\"False-Fail\" && CustomAttributes=~\"Queue1\"):Requeue(1)," .
   " (CustomAttributes=~\"False-Fail\" && CustomAttributes=~\"Queue2\"):Requeue(2)'"
);

foreach my $general_cmd (@{$Models{general_cmds}}) {
        $general_cmd->{AUTO_REQ} = $default_autoreq;
}

#################################################################################

1;
