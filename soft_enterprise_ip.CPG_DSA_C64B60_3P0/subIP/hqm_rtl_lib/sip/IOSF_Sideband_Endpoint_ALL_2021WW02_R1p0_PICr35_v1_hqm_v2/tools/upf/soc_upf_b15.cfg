## -------------------------------------------------------------------
## soc_upf.cfg file will have SOC specific configuration information
## Information in this file will be overridden by SOC based on SoC requirements
##
## NOTE: Keep usage of TCL to set <> <>
## Not all TCL constructs supported across the tool suite
##
## Collage UPF:
## Some of the variables picked are from Collage UPF generation usage. 
## Used here to smooth the integration process
## -------------------------------------------------------------------

## -------------------------------------------------------------------------
## Use below variable to provide the path to UPF.
## This path to be modified by SoC team as needed
## -------------------------------------------------------------------------
#set <IP_NAME>_UPF_ROOT_DIR <>
## set CSME_KVM_UPF_ROOT_DIR $::env(MODEL_ROOT)/tools/csme_kvm/upf

## -------------------------------------------------------------------------
## Supply, Ground and SRAM voltage ports. 
## This information will be configured by SoC team as needed
## -------------------------------------------------------------------------
set SOC_SUPPLY_PORT vccpwell_lv
set AON_SUPPLY_PORT vnnaon
set DSW_SUPPLY_PORT vccdsw_1p0
set RTC_SUPPLY_PORT vccrtcwell1p5_hv
set SOC_GROUND_PORT vss
set SOC_SRAM_PORT   vccd_1p0

## -------------------------------------------------------------------------
## Power Switch port names have to match the process.
## All ports need to be parameterized for SoC to provide process specific names
## IP's also need to pick specific names that match with IP synthesis
## TBD: RF UPF also have similar variables used. Using a different name to differentiate
## Might want to combine the names to be consistent
## All RF cells also have a power switch embedded inside them
## -------------------------------------------------------------------------
set PS_CELL                  "b15psbf20bl1d86x5"
set PS_CELL_UNGATED_IN       "vcc_in"
set PS_CELL_GATED_OUT        "gtdout"
set PS_CELL_ENABLE           "a"
set PS_CELL_ACK              "o"
set PS_DUAL_STAGE_CELL_UNGATED_IN         vcc_in
set PS_DUAL_STAGE_CELL_DUAL_STAGE_GATED_OUT        gtdout
set PS_DUAL_STAGE_CELL_ENABLE_1           a
set PS_DUAL_STAGE_CELL_ENABLE_2           b
set PS_DUAL_STAGE_CELL_ACK_1              aout
set PS_DUAL_STAGE_CELL_ACK_2              bout
set PS_DUAL_STAGE_CELL                    b15psbf20bl1d86x5

## -------------------------------------------------------------------------
## SoC level shifter threshold value
## -------------------------------------------------------------------------
set LS_HIGH_TO_LOW_THRESHOLD 0.05
set LS_LOW_TO_HIGH_THRESHOLD 0.05
set LS_BOTH_THRESHOLD        0.05


## -------------------------------------------------------------------------
## SoC to re-map retention cells as required
## IP's can choose to get the retention cell list from SoC and map for DC runs
## Not relevant for VCS-NLP/Spyglass-LP runs 
## -------------------------------------------------------------------------
set SOC_RETENTION_CELL_MAP {soc_retain}
#set SOC_RETENTION_CELL_MAP {d04frn00* d04frn03* d04frn0c* d04frn43* d04frt00* d04frt03* d04frt0c* d04frt43* d04lrk00* d04lrk03* d04lrk0c*}
set SOC_RETENTION_CELL_MAP   { b15fpnr00a*  b15fpyr00a*  b15fqnr03a* b15fqnr0ca*  b15fqyr03a*  b15fqyr0ca*  b15lrn003a*  b15lrn00ca* }

set SOC_DOUBLESYNC_RETENTION_CELL_MAP {}

## -------------------------------------------------------------------------
## Location of Isolation cells customized per SoC requirements
## Location - parent for SPT
## -------------------------------------------------------------------------
set SOC_ISOLATION_CELL_LOCATION parent

## -------------------------------------------------------------------------
## SoC to re-map isolation cell mapping as required
set FW_OR_CELL               b15psor*
set FW_AND_CELL              b15psan*
set FW_CLOCK_CELL            b15clb0a2al1n02x5
set FW_CLK_OR_CELL           b15cpsor2al1d04x5
set FW_CLK_AND_CELL          b15cpsan*

## -------------------------------------------------------------------------
## SoC to re-map level shifter cells as required
## -------------------------------------------------------------------------
set LS_LH_AND_S_CELL         ""
set LS_LH_AND_D_CELL         ""
set LS_HL_AND_S_CELL         ""
set LS_HL_AND_D_CELL         ""
set LS_LH_OR_S_CELL          ""
set LS_LH_OR_D_CELL          ""
set LS_HL_OR_S_CELL          ""
set LS_HL_OR_D_CELL          ""
set LS_LH_BUF_S_CELL         "b15sg00d0bl1d04x5"
set LS_LH_BUF_D_CELL         "b15sg00ndal1d02x5"
set LS_HL_BUF_S_CELL         ""
set LS_HL_BUF_D_CELL         ""
set LS_LH_CLK_S_CELL         ""
set LS_LH_CLK_D_CELL         "b15csb0d0al1d16x5"
set LS_HL_CLK_S_CELL         ""
set LS_HL_CLK_D_CELL         ""

## -------------------------------------------------------------------------
## Set the voltage values of power domains in use for IP
## These values could change per SoC project
## NOTE: The voltage values could be changed by SoC.
## SoC will use these variables to change the voltages, if required
## -------------------------------------------------------------------------
set SOC_SUPPLY_NOM   "0.65"
set DSW_SUPPLY_NOM   "1.0"
set RTC_SUPPLY_NOM   "1.11"
set GND_SUPPLY_NOM   "0.0"
set SRAM_SUPPLY_NOM  "1.0"
set SOC_SUPPLY_MAX   1.15
set SOC_SUPPLY_MIN   0.65
set SOC_SUPPLY_NOM   $::env(SIP_LIBRARY_VOLTAGE)
set GND_SUPPLY_NOM   "0.0"

if { 1 } { 

### Set global configs for tool/flow identification 
set __SYN 0
set __SIM 0
set __ERC 0
set __EMU 0
set __FEV 0
set __UPF_EXTENSION 0

if { [info exists ::synopsys_program_name] || [info exists ::env(SYN_UPF)] || [info exists ::env(POWERARTIST_RUN)] } {
   if { $::synopsys_program_name == "dc_shell" || \
        $::synopsys_program_name == "de_shell" || \
        $::synopsys_program_name == "icc_shell" || \
        $::synopsys_program_name == "pt_shell" } {
        set __SYN 1
   } elseif { $::synopsys_program_name == "vcs" } {
        set __SIM 1
        set ::env(ENABLE_NLP_RUN) 1
   } elseif { $::synopsys_program_name == "vsi" } {
        set __ERC 1
   }
} elseif { [info exists ::upf_tool] && $::upf_tool == "MVSIM_NATIVE" } {
    set __SIM 1
    set ::env(ENABLE_NLP_RUN) 1
}
if { [info exists ::VELOCE_RTLC_UPF_FLOW] || \
     [info exists ::env(EMULATION_UPF)] } {
     set __EMU 1
     set __SIM 1
}
if { [info exists ::env(SPYGLASS_LP_RUN)] || \
     [info exists ::env(SPYGLASS_RUN)] || \
     [info exists ::env(SPG_RUNNING_SPYGLASS_IN_BATCH_CONSOLE)] } {
     set __ERC 1
     set ::env(ENABLE_SLP_RUN) 1
}
if { ([array exists ::lec_cmd_array] && [array exists ::ntcl_ccd_cmd_array]) || \
      [info exists ::env(CONFORMAL_RUN)] } {
     set __FEV 1
}
if { [info exists ::upf_extension] && $::upf_extension } {
     set __UPF_EXTENSION 1
}

}
