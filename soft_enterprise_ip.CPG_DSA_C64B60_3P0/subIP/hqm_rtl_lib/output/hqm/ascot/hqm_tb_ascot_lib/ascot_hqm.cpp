//
// !! this code was automatically generated by ascot -- do not modify
//
#include <ascotsimopt.hpp>
using namespace std;
namespace ascot {

static const VlogControlExpr controlExpressions[] = {
    {0, 0, "&{!{_plusarg_value_2},u_hqm.powergood_rst_b,u_hqm.power_present_in_vcccfn}"},
    {1, 0, "&{!{_plusarg_value_2},u_hqm.powergood_rst_b,u_hqm.power_present_in_vcccfn}"},
    {2, 0, "&{!{_plusarg_value_2},u_hqm.powergood_rst_b,u_hqm.power_present_in_vcccfn,|{!{_plusarg_value_3},u_hqm.i_hqm_sip.hqm_sip_aon_wrap.i_hqm_master.i_hqm_master_core.i_hqm_pm_unit.pgcb_isol_en_b}}"},
};
static const VlogClockExpression clockExpressions[] = {
};
static const VlogArgExpression plusargExpressions[] = {
    {1,"+hqm_SVA_OFF"},
    {2,"+assertoff"},
    {0,"+SVA_OFF"},
    {3,"+HQM_PA_RANDOM_CORRUPT"},
};

static int controlCondition_0(ControlBlock &); // u_hqm
static int controlCondition_1(ControlBlock &); // u_hqm.i_hqm_sip.hqm_sip_aon_wrap
static int controlCondition_2(ControlBlock &); // u_hqm.i_hqm_sip.hqm_sip_gated_wrap

static void signalCallbackSetup_0(ControlBlock &control){
    if (_debug > 0) {
       vpi_printf((PLI_BYTE8*)"%%DEBUG ASCOT> at %g: value of signal 'u_hqm.powergood_rst_b' (%s) changed. New value is %s\n",getRealSimTime(),control.getSignalName(0),getValueName(control.getSignalValue(0)));
    }
    control.scheduleControl(0);
    control.scheduleControl(1);
    control.scheduleControl(2);
}
static void signalCallbackSetup_1(ControlBlock &control){
    if (_debug > 0) {
       vpi_printf((PLI_BYTE8*)"%%DEBUG ASCOT> at %g: value of signal 'u_hqm.power_present_in_vcccfn' (%s) changed. New value is %s\n",getRealSimTime(),control.getSignalName(1),getValueName(control.getSignalValue(1)));
    }
    control.scheduleControl(0);
    control.scheduleControl(1);
    control.scheduleControl(2);
}
static void signalCallbackSetup_2(ControlBlock &control){
    if (_debug > 0) {
       vpi_printf((PLI_BYTE8*)"%%DEBUG ASCOT> at %g: value of signal 'u_hqm.i_hqm_sip.hqm_sip_aon_wrap.i_hqm_master.i_hqm_master_core.i_hqm_pm_unit.pgcb_isol_en_b' (%s) changed. New value is %s\n",getRealSimTime(),control.getSignalName(2),getValueName(control.getSignalValue(2)));
    }
    control.scheduleControl(2);
}
static void globalSvaEnableCallback(ControlBlock &control){
    control.scheduleControl(0);
    control.scheduleControl(1);
    control.scheduleControl(2);
}
static int ascotMain_hqm() {
    ControlBlock *control = new ControlBlock();
    _debug = debugEnvSet();
    if (_debug > 0) vpi_printf((PLI_BYTE8*)"%%DEBUG ASCOT> initializing hqm\n");
    useAssertOff =  false;
    useVmod = true;
    ipMod = true;
    control->initInstances(3);
    control->setupControl(0, "u_hqm", instance, &controlCondition_0, initOff, 0);
    control->setupControl(1, "u_hqm.i_hqm_sip.hqm_sip_aon_wrap", instance, &controlCondition_1, initOff, 0);
    control->setupControl(2, "u_hqm.i_hqm_sip.hqm_sip_gated_wrap", instance, &controlCondition_2, initOff, 0);
    control->setupSvactlDump("hqm", controlExpressions);
    control->setupGlobalControl(&globalSvaEnableCallback);
    control->initSignals(3);
    control->setupSignal(0, "u_hqm.powergood_rst_b", &signalCallbackSetup_0);
    control->setupSignal(1, "u_hqm.power_present_in_vcccfn", &signalCallbackSetup_1);
    control->setupSignal(2, "u_hqm.i_hqm_sip.hqm_sip_aon_wrap.i_hqm_master.i_hqm_master_core.i_hqm_pm_unit.pgcb_isol_en_b", &signalCallbackSetup_2);
    control->initArgs(4);
    control->setupArg(1, "+hqm_SVA_OFF");
    control->setupArg(2, "+hqm+assertoff");
    control->setupArg(0, "+SVA_OFF");
    control->setupArg(3, "+hqm+HQM_PA_RANDOM_CORRUPT");
    control->finalize();
}
static int controlCondition_1(ControlBlock &control) { // u_hqm.i_hqm_sip.hqm_sip_aon_wrap
    if (_debug > 0) {
        vpi_printf((PLI_BYTE8*)"%%DEBUG ASCOT> at %g: controlling instance 'u_hqm.i_hqm_sip.hqm_sip_aon_wrap' (%s), level=%d\n", getRealSimTime(), control.ipInstName.c_str(), control.getControlLevel(1));
    }
    int condition = evalAnd(2, control.isSvaEnabled(), (
        evalAnd(3,
          evalNot(
            control.getArgValue(2/*+assertoff*/)),
          control.getSignalValue(0/*u_hqm.powergood_rst_b*/),
          control.getSignalValue(1/*u_hqm.power_present_in_vcccfn*/))));
    if (_debug > 0) {
        vpi_printf((PLI_BYTE8*)"%%DEBUG ASCOT>    = control value is '%s'\n",  getValueName(condition));
    }
    return condition;
}
static int controlCondition_2(ControlBlock &control) { // u_hqm.i_hqm_sip.hqm_sip_gated_wrap
    if (_debug > 0) {
        vpi_printf((PLI_BYTE8*)"%%DEBUG ASCOT> at %g: controlling instance 'u_hqm.i_hqm_sip.hqm_sip_gated_wrap' (%s), level=%d\n", getRealSimTime(), control.ipInstName.c_str(), control.getControlLevel(2));
    }
    int condition = evalAnd(2, control.isSvaEnabled(), (
        evalAnd(4,
          evalNot(
            control.getArgValue(2/*+assertoff*/)),
          control.getSignalValue(0/*u_hqm.powergood_rst_b*/),
          control.getSignalValue(1/*u_hqm.power_present_in_vcccfn*/),
          evalOr(2,
            evalNot(
              control.getArgValue(3/*+HQM_PA_RANDOM_CORRUPT*/)),
            control.getSignalValue(2/*u_hqm.i_hqm_sip.hqm_sip_aon_wrap.i_hqm_master.i_hqm_master_core.i_hqm_pm_unit.pgcb_isol_en_b*/)))));
    if (_debug > 0) {
        vpi_printf((PLI_BYTE8*)"%%DEBUG ASCOT>    = control value is '%s'\n",  getValueName(condition));
    }
    return condition;
}
static int controlCondition_0(ControlBlock &control) { // u_hqm
    if (_debug > 0) {
        vpi_printf((PLI_BYTE8*)"%%DEBUG ASCOT> at %g: controlling instance 'u_hqm' (%s), level=%d\n", getRealSimTime(), control.ipInstName.c_str(), control.getControlLevel(0));
    }
    int condition = evalAnd(2, control.isSvaEnabled(), (
        evalAnd(3,
          evalNot(
            control.getArgValue(2/*+assertoff*/)),
          control.getSignalValue(0/*u_hqm.powergood_rst_b*/),
          control.getSignalValue(1/*u_hqm.power_present_in_vcccfn*/))));
    if (_debug > 0) {
        vpi_printf((PLI_BYTE8*)"%%DEBUG ASCOT>    = control value is '%s'\n",  getValueName(condition));
    }
    return condition;
}
static const char *registrationName = registerMainFunction("hqm", &ascotMain_hqm);
} // namespace 
