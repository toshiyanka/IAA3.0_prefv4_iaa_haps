<% use security; %>
<% my %Security_Props = security::GetSecurityInfo(); %>

<% use hqm_params; %>

enum hqm_enum_cq_isr_en {
        disable      = 2'h0 { desc = "Disable interrupt for this CQ."; };
        msi          = 2'h1 { desc = "Enable MSI interrupt for this CQ."; };
        msix         = 2'h2 { desc = "Enable MSI-X interrupt for this CQ."; };
        ai           = 2'h3 { desc = "Enable AI interrupt for this CQ."; };
};

  reg hqm_system_unit_version_r {
        donttest = true ;
        Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
        Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
        Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
  HqmClassification="DEBUG_ONLY_REG_NA_1";
        IntelRsvd=false;
        name = "Cfg Unit Version";
        desc = "contains unit version for the hqm_system unit (for fpga use)";
        regwidth = 32;
        shared;
        field { name = "Unit version";desc = "unit version number"; AccessType = "RO"; PowerWell="vcccfn_gated"; IntelRsvd=false;} UNIT_VERSION[31:24] = 8'h01;
  } ;

regfile hqm_system_vf_dir_prodport_valid_rf {
        reg vf_dir_vpp_v_r {
  HqmClassification="CONFIG_VIRT_MEM_VFPP_1536";

                name = "Vf Dir Vpp V";
                desc = "VF Directed VPP Valid is used to determine whether the VF producer port for an HCW enqueued to HQM is valid or not.
                        [p]If set to a 1 the VPP is valid, if set to 0 the VPP is invalid.";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Vpp V"; desc = "Virtual Producer Port Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VPP_V [0:0] = 1'h0;
        };

        vf_dir_vpp_v_r             VF_DIR_VPP_V         @0x00;

};

regfile hqm_system_vf_dir_prodport_xlations_rf {
        reg vf_dir_vpp2pp_r {
  HqmClassification="CONFIG_VIRT_MEM_VFPP_1536";
                name = "Vf Dir Vpp2pp";
                desc = "VF Directed VPP to PP translation.
                        [p]When an HCW is received for a VF producer port the Virtual Producer Port (VPP) number
                        is used to look up the physical Producer Port (PP) the HCW is to be enqueued with.";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Pp"; desc = "Producer Port";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } PP [<%=$hqm_params::DIR_PORT_WIDTH-1%>:0] = <%=$hqm_params::DIR_PORT_WIDTH%>'h00;
        };

        vf_dir_vpp2pp_r            VF_DIR_VPP2PP        @0x00;

};

regfile hqm_system_vf_ldb_prodport_valid_rf {
        reg vf_ldb_vpp_v_r {
  HqmClassification="CONFIG_VIRT_MEM_VFPP_1024";
                name = "Vf Ldb Vpp V";
                desc = "VF Load Balanced VPP Valid is used to determine whether the VF producer port for an HCW enqueued to HQM is valid or not.
                        [p]If set to a 1 the VPP is valid, if set to 0 the VPP is invalid.";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Vpp V"; desc = "Virtual Producer Port Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VPP_V [0:0] = 1'h0;
        };

        vf_ldb_vpp_v_r             VF_LDB_VPP_V         @0x00;

};

regfile hqm_system_vf_ldb_prodport_xlations_rf {
        reg vf_ldb_vpp2pp_r {
  HqmClassification="CONFIG_VIRT_MEM_VFPP_1024";

                name = "Vf Ldb Vpp2pp";
                desc = "VF Load Balanced VPP to PP translation.
                        [p]When an HCW is received for a VF producer port the Virtual Producer Port (VPP) number
                        is used to look up the physical Producer Port (PP) the HCW is to be enqueued with.";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Pp"; desc = "Producer Port";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } PP [<%=$hqm_params::LDB_PORT_WIDTH-1%>:0] = <%=$hqm_params::LDB_PORT_WIDTH%>'h00;
        };

        vf_ldb_vpp2pp_r            VF_LDB_VPP2PP        @0x00;

};

regfile hqm_system_vf_dir_vqid_valid_rf {
        reg vf_dir_vqid_v_r {
  HqmClassification="CONFIG_VIRT_MEM_VFQID_1536";
                name = "Vf Dir Vqid V";
                desc = "VF Directed VQID Valid is used to determine whether the Virtual QID (VQID) received with an HCW enqueued to HQM through a VF producer port is valid or not.
                        [p]If set to a 1 the VQID is valid, if set to 0 the VQID is invalid.";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Vqid V"; desc = "Virtual Queue ID Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VQID_V [0:0] = 1'h0;
        };

        vf_dir_vqid_v_r            VF_DIR_VQID_V        @0x00;

};

regfile hqm_system_vf_dir_qid_xlations_rf {
        reg vf_dir_vqid2qid_r {
  HqmClassification="CONFIG_VIRT_MEM_VFQID_1536";
                name = "Vf Dir Vqid2qid";
                desc = "VF Directed VQID to QID translation.
                        [p]When an HCW is received for a VF producer port the Virtual QID (VQID) number
                        is used to look up the physical QID (QID) the HCW is to be enqueued to.";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Qid"; desc = "Queue ID";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } QID [<%=$hqm_params::DIR_QID_WIDTH-1%>:0] = <%=$hqm_params::DIR_QID_WIDTH%>'h00;
        };

        vf_dir_vqid2qid_r            VF_DIR_VQID2QID        @0x00;
};

regfile hqm_system_vf_ldb_vqid_valid_rf {
        reg vf_ldb_vqid_v_r {
  HqmClassification="CONFIG_VIRT_MEM_VFQID_512";
                name = "Vf Ldb Vqid V";
                desc = "VF Load Balanced VQID Valid is used to determine whether the Virtual QID (VQID) received with an HCW enqueued to HQM through a VF producer port is valid or not.
                        [p]If set to a 1 the VQID is valid, if set to 0 the VQID is invalid.";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Vqid V"; desc = "Virtual Queue ID Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VQID_V [0:0] = 1'h0;
        };

        vf_ldb_vqid_v_r            VF_LDB_VQID_V        @0x00;

};

regfile hqm_system_vf_ldb_qid_xlations_rf {
        reg vf_ldb_vqid2qid_r {
  HqmClassification="CONFIG_VIRT_MEM_VFQID_512";
                name = "Vf Ldb Vqid2qid";
                desc = "VF Load Balanced VQID to QID translation.
                        [p]When an HCW is received for a VF producer port the Virtual QID (VQID) number
                        is used to look up the physical QID (QID) the HCW is to be enqueued to.";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Qid"; desc = "Queue ID";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } QID [<%=$hqm_params::LDB_QID_WIDTH-1%>:0] = <%=$hqm_params::LDB_QID_WIDTH%>'h00;
        };

        vf_ldb_vqid2qid_r            VF_LDB_VQID2QID        @0x00;
};

regfile hqm_system_ldb_qid2vqid_rf {
        reg ldb_qid2vqid_r {
  HqmClassification="CONFIG_VIRT_MEM_QID_32";
                name = "Ldb Qid2vqid";
                desc = "Load Balanced QID to VQID
                        [p]This is used to translate from a physical QID to a VQID, as needed by HQM.";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Vqid"; desc = "Virtual Queue ID";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VQID [<%=$hqm_params::LDB_QID_WIDTH-1%>:0] = <%=$hqm_params::LDB_QID_WIDTH%>'h00;
        };

        ldb_qid2vqid_r            LDB_QID2VQID        @0x00;
};

regfile hqm_system_ldb_vas_qid_valid_rf {
        reg ldb_vasqid_v_r {
  HqmClassification="CONFIG_VIRT_MEM_VASQID_1024";
                name = "Ldb Vasqid V";
                desc = "VAS Load Balanced QID Valid";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Vasqid V"; desc = "VAS Load Balanced Queue ID Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VASQID_V [0:0] = 1'h0;
        };

        ldb_vasqid_v_r                  LDB_VASQID_V            @0x00;
};

regfile hqm_system_dir_vas_qid_valid_rf {
        reg dir_vasqid_v_r {
  HqmClassification="CONFIG_VIRT_MEM_VASQID_3072";
                name = "Dir Vasqid V";
                desc = "VAS Directed QID Valid";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Vasqid V"; desc = "VAS Directed Queue ID Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VASQID_V [0:0] = 1'h0;
        };

        dir_vasqid_v_r                  DIR_VASQID_V            @0x00;

};

regfile hqm_system_ldb_port_provisioning_rf {

        reg ldb_cq_addr_l_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ldb Cq Addr L";
                desc = "Load Balanced Consumer Queue Address LS";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Addr L"; desc = "Consumer Queue Address[31:6]";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } ADDR_L [31:6] = 26'h0000000;
        };

        reg ldb_cq_addr_u_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ldb Cq Addr U";
                desc = "Load Balanced Consumer Queue Address MS";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Addr U"; desc = "Consumer Queue Address[63:32]";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } ADDR_U [31:0] = 32'h00000000;
        };

        reg ldb_pp2vas_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ldb Pp2vas";
                desc = "Load Balanced Producer Port VAS";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Vas"; desc = "Virtual Address Space";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VAS [<%=$hqm_params::VAS_WIDTH-1%>:0] = <%=$hqm_params::VAS_WIDTH%>'h00;
        };

        reg ldb_pp2vdev_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ldb Pp2vdev";
                desc = "PF Load Balanced PP To Vdev";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Vdev"; desc = "Virtual Device";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VDEV[3:0] = 4'h0;
        };

        reg ldb_pp_v_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ldb Pp V";
                desc = "PF Load Balanced PP Valid";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Pp V"; desc = "Producer Port Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } PP_V [0:0] = 1'h0;
        };

        reg ldb_cq2vf_pf_ro_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ldb Cq2vf Pf Ro";
                desc = "Load Balanced Consumer Queue VF or PF and RO";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Ro"; desc = "Consumer Queue relaxed ordering enable";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } RO [5:5] = 1'h0;
                field { name = "Is Pf"; desc = "Consumer Queue owned by PF";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } IS_PF [4:4] = 1'h0;
                field { name = "Vf"; desc = "Consumer Queue owned by this VF";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VF [3:0] = 4'h0;
        };

        reg ldb_cq_isr_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ldb Cq Isr";
                desc = "Load Balanced Consumer Queue ISR Control Register";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "En Code"; desc = "Interrupt enable code - 0: disabled, 1: MSI (if VF), 2: MSI-X (if PF), 3: IMS";
                        PowerWell="vcccfn_gated"; AccessType = "RW"; encode=hqm_enum_cq_isr_en;
                      } EN_CODE [11:10] = 2'h0;
                field { name = "Vf"; desc = "VF index with which this CQ is associated.  For IMS interrupts, the lower 2b of this
                                field is used to specify the upper 2b of the 8b IMS vector number.";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VF [9:6] = 4'h0;
                field { name = "Vector"; desc = "IMS, MSI or MSI-X interrupt vector to use for this CQ.  In the MSI-X case,
                                a fixed value of 1 is added to this value to produce the actual MSI-X vector and, if
                                in compressed mode (MSIX_MODE is set to 1), the MSI-X vector used is fixed to 1
                                regardless of the setting of this field.  For IMS interrupts, this is the lower 6 bits of the 8b
                                IMS vector number.";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VECTOR [5:0] = 6'h00;
        };

        reg ldb_cq_pasid_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ldb Cq Pasid";
                desc = "Load Balanced CQ PASID";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Fmt2"; desc = "Valid indication for this Consumer Queue's Physical Address Space ID";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } FMT2 [22:22] = 1'h0;
                field { name = "Priv Req"; desc = "If set, privileged mode is requested for this Consumer Queue";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                      } PRIV_REQ [21:21] = 1'h0;
                field { name = "Exe Req"; desc = "If set, execute permission is requested for this Consumer Queue";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                      } EXE_REQ [20:20] = 1'h0;
                field { name = "Pasid"; desc = "Consumer Queue's Physical Address Space ID";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } PASID [19:0] = 20'h00000;
        };

        reg ldb_pp_rob_v_r {
                HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Dir Pp Rob Valid";
                desc = "Load Balanced Producer Port Reorder Buffer Valid";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Rob Valid"; desc = "Reorder Buffer Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } ROB_V [0:0] = 1'h0;
        };

        ldb_cq_addr_l_r                 LDB_CQ_ADDR_L           @0x00;
        ldb_cq_addr_u_r                 LDB_CQ_ADDR_U           @0x04;
        ldb_pp2vas_r                    LDB_PP2VAS              @0x08;
        ldb_pp2vdev_r                   HQM_LDB_PP2VDEV         @0x0c;  // Not handcoded so uniquify defines generated
        ldb_pp_v_r                      LDB_PP_V                @0x10;
        ldb_cq2vf_pf_ro_r               LDB_CQ2VF_PF_RO         @0x14;
        ldb_cq_isr_r                    LDB_CQ_ISR              @0x18;
        ldb_cq_pasid_r                  LDB_CQ_PASID            @0x1c;
        ldb_pp_rob_v_r                  LDB_PP_ROB_V            @0x20;

};

regfile hqm_system_dir_port_provisioning_rf {

        reg dir_cq_addr_l_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Dir Cq Addr L";
                desc = "Directed Consumer Queue Address LS";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Addr L"; desc = "Consumer Queue Address[31:6]";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } ADDR_L [31:6] = 26'h0000000;
        };

        reg dir_cq_addr_u_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Dir Cq Addr U";
                desc = "Directed Consumer Queue Address MS";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Addr U"; desc = "Consumer Queue Address[63:32]";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } ADDR_U [31:0] = 32'h00000000;
        };

        reg dir_pp2vas_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Dir Pp2vas";
                desc = "Directed Producer Port VAS";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Vas"; desc = "Virtual Address Space";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VAS [<%=$hqm_params::VAS_WIDTH-1%>:0] = <%=$hqm_params::VAS_WIDTH%>'h00;
        };

        reg dir_pp2vdev_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Dir Pp2vdev";
                desc = "PF Directed PP To Vdev";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Vdev"; desc = "Virtual Device";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VDEV[3:0] = 4'h0;
        };

        reg dir_pp_v_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Dir Pp V";
                desc = "PF Directed VPP Valid and Must Be Data Mover Register";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Pp V";  desc = "Producer port valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } PP_V  [0:0] = 1'h0;
        };

        reg dir_cq2vf_pf_ro_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Dir Cq2vf Pf Ro";
                desc = "Directed Consumer Queue VF or PF and Ro";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Ro"; desc = "Consumer Queue relaxed ordering enable";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } RO [5:5] = 1'h0;
                field { name = "Is Pf"; desc = "Consumer Queue owned by PF";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } IS_PF [4:4] = 1'h0;
                field { name = "Vf"; desc = "Consumer Queue owned by this VF";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VF [3:0] = 4'h0;
        };

        reg dir_cq_isr_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Dir Cq Isr";
                desc = "Directed Consumer Queue ISR Control Register";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "En Code"; desc = "Interrupt enable code - 0: disabled, 1: MSI (if VF), 2: MSI-X (if PF), 3: IMS";
                        PowerWell="vcccfn_gated"; AccessType = "RW"; encode=hqm_enum_cq_isr_en;
                      } EN_CODE [11:10] = 2'h0;
                field { name = "Vf"; desc = "VF index with which this CQ is associated.  For IMS interrupts, the lower 2b of this
                                field is used to specify the upper 2b of the 8b IMS vector number.";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VF [9:6] = 4'h0;
                field { name = "Vector"; desc = "IMS, MSI or MSI-X interrupt vector to use for this CQ.  In the MSI-X case,
                                a fixed value of 1 is added to this value to produce the actual MSI-X vector and, if
                                in compressed mode (MSIX_MODE is set to 1), the MSI-X vector used is fixed to 1
                                regardless of the setting of this field.  For IMS interrupts, this is the lower 6 bits of the 8b
                                IMS vector number.";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } VECTOR [5:0] = 6'h00;
        };

        reg dir_cq_pasid_r {
  HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Dir Cq Pasid";
                desc = "Directed CQ PASID";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Fmt2"; desc = "Valid indication for this Consumer Queue's Physical Address Space ID";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } FMT2 [22:22] = 1'h0;
                field { name = "Priv Req"; desc = "If set, privileged mode is requested for this Consumer Queue";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                      } PRIV_REQ [21:21] = 1'h0;
                field { name = "Exe Req"; desc = "If set, execute permission is requested for this Consumer Queue";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                      } EXE_REQ [20:20] = 1'h0;
                field { name = "Pasid"; desc = "Consumer Queue's Physical Address Space ID";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } PASID [19:0] = 20'h00000;
        };

        reg dir_cq_fmt_r {
                HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Dir Cq Fmt";
                desc = "Directed Consumer Queue Format";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Keep Pf Ppid"; desc = "Do not virtualize ppid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } KEEP_PF_PPID [0:0] = 1'h0;
        };

        reg dir_pp_rob_v_r {
                HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Dir Pp Rob Valid";
                desc = "Directed Producer Port Reorder Buffer Valid";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Rob Valid"; desc = "Reorder Buffer Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } ROB_V [0:0] = 1'h0;
        };

        dir_cq_addr_l_r                 DIR_CQ_ADDR_L           @0x00;
        dir_cq_addr_u_r                 DIR_CQ_ADDR_U           @0x04;
        dir_pp2vas_r                    DIR_PP2VAS              @0x08;
        dir_pp2vdev_r                   HQM_DIR_PP2VDEV         @0x0c;  // Not handcoded so uniquify defines generated
        dir_pp_v_r                      DIR_PP_V                @0x10;
        dir_cq2vf_pf_ro_r               DIR_CQ2VF_PF_RO         @0x14;
        dir_cq_isr_r                    DIR_CQ_ISR              @0x18;
        dir_cq_pasid_r                  DIR_CQ_PASID            @0x1c;
        dir_cq_fmt_r                    DIR_CQ_FMT              @0x20;
        dir_pp_rob_v_r                  DIR_PP_ROB_V            @0x24;
};

regfile hqm_system_ims_provisioning_rf {

        reg ai_addr_l_r {
                HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ims Addr Lower";
                desc = "IMS Address 31:2";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Ims Addr Lower"; desc = "IMS Address 31:2";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } IMS_ADDR_L [31:2] = 30'h00000000;
        };

        reg ai_addr_u_r {
                HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ims Addr Upper";
                desc = "IMS Address 63:32";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Ims Addr Upper"; desc = "IMS Address 63:32";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } IMS_ADDR_U [31:0] = 32'h00000000;
        };

        reg ai_data_r {
                HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ims Data";
                desc = "IMS Data";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Ims Data"; desc = "IMS Data";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } IMS_DATA [31:0] = 32'h00000000;
        };

        reg ai_ctrl_r {
                HqmClassification="CONFIG_VIRT_MEM_PP_64";
                name = "Ims Ctrl";
                desc = "IMS Control";
                regwidth = 32;
                shared;
                HandCoded=false;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Ims Pending"; desc = "IMS Pending";
                        PowerWell="vcccfn_gated"; AccessType = "RO/V";
                        ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL%ARRAY_IDX_STR%.IMS_PEND";
                      } IMS_PEND [1:1] = 1'h0;
                field { name = "Ims Mask"; desc = "IMS Mask";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                        ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.AI_CTRL%ARRAY_IDX_STR%.IMS_MASK";
                      } IMS_MASK [0:0] = 1'h0;
        };

        ai_addr_l_r                     AI_ADDR_L               @0x0;
        ai_addr_u_r                     AI_ADDR_U               @0x4;
        ai_data_r                       AI_DATA                 @0x8;
        ai_ctrl_r                       AI_CTRL                 @0xc;
};

regfile hqm_system_ldb_qid_cfg_rf {

        reg ldb_qid_v_r {
  HqmClassification="CONFIG_VIRT_MEM_QID_32";
                name = "Ldb Qid V";
                desc = "Load Balanced Queue ID Valid";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Qid V"; desc = "Queue ID Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } QID_V [0:0] = 1'h0;
        };

        reg ldb_qid_its_r {
  HqmClassification="CONFIG_VIRT_MEM_QID_32";
                name = "Ldb Qid Its";
                desc = "Load Balanced QID Insert Timestamp";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Qid Its"; desc = "Load Balanced Queue ID Insert Timestamp";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } QID_ITS [0:0] = 1'h0;
        };

        reg ldb_qid_cfg_v_r {
  HqmClassification="CONFIG_VIRT_MEM_QID_32";
                name = "Ldb Qid Cfg V";
                desc = "Load Balanced Queue ID Configuration Valid";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Sn Cfg V"; desc = "SN Configuration Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } SN_CFG_V [0:0] = 1'h0;
                field { name = "Fid Cfg V"; desc = "FID Configuration Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } FID_CFG_V [1:1] = 1'h0;
                field { name = "Ao Cfg V"; desc = "Atomic/Ordered Configuration Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } AO_CFG_V [2:2] = 1'h0;
        };

        ldb_qid_v_r                     LDB_QID_V               @0x00;
        ldb_qid_its_r                   LDB_QID_ITS             @0x04;
        ldb_qid_cfg_v_r                 LDB_QID_CFG_V           @0x08;

};

regfile hqm_system_dir_qid_cfg_rf {
        reg dir_qid_v_r {
  HqmClassification="CONFIG_VIRT_MEM_QID_96";
                name = "Dir Qid V";
                desc = "Directed Queue ID Valid";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Qid V"; desc = "Queue ID Valid";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } QID_V [0:0] = 1'h0;
        };

        reg dir_qid_its_r {
  HqmClassification="CONFIG_VIRT_MEM_QID_96";
                name = "Dir Qid Its";
                desc = "Directed QID Insert Timestamp";
                regwidth = 32;
                shared;
                HandCoded=true;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Qid Its"; desc = "Directed Queue ID Insert Timestamp";
                        PowerWell="vcccfn_gated"; AccessType = "RW";
                      } QID_ITS [0:0] = 1'h0;
        };

        dir_qid_v_r                     DIR_QID_V               @0x00;
        dir_qid_its_r                   DIR_QID_ITS             @0x04;

};

reg fifo_status_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Fifo Status";
    desc = "FIFO Status";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;

    field { name = "Depth";   desc = "Current FIFO depth";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } DEPTH   [31:8] = 24'h000000;
    field { name = "Full";    desc = "FIFO is full";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } FULL    [7:7]  = 1'b0;
    field { name = "Afull";   desc = "FIFO is at or above high watermark";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } AFULL   [6:6]  = 1'b0;
    field { name = "Rsvd5";   desc = "Reserved";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } RSVD5   [5:5]  = 1'b0;
    field { name = "Empty";   desc = "FIFO is empty";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } EMPTY   [4:4]  = 1'b1;
    field { name = "Rsvd32";  desc = "Reserved";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } RSVD32  [3:2]  = 2'h0;
    field { name = "Ovrflow"; desc = "FIFO overflow detected";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
          } OVRFLOW [1:1]  = 1'b0;
    field { name = "Undflow"; desc = "FIFO underflow detected";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
          } UNDFLOW [0:0]  = 1'b0;
};

reg fifo_status_dc_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Fifo Status";
    desc = "FIFO Status";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;

    field { name = "Depth";   desc = "Current FIFO depth";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } DEPTH   [31:8] = 24'h000000;
    field { name = "Full";    desc = "FIFO is full";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } FULL    [7:7]  = 1'b0;
    field { name = "Afull";   desc = "FIFO is at or above high watermark";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } AFULL   [6:6]  = 1'b0;
    field { name = "Aempty";  desc = "FIFO is at or below low watermark";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } AEMPTY  [5:5]  = 1'b1;
    field { name = "Empty";   desc = "FIFO is empty";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } EMPTY   [4:4]  = 1'b1;
    field { name = "Rsvd32";  desc = "Reserved";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } RSVD32  [3:2]  = 2'h0;
    field { name = "Ovrflow"; desc = "FIFO overflow detected";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
          } OVRFLOW [1:1]  = 1'b0;
    field { name = "Undflow"; desc = "FIFO underflow detected";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
          } UNDFLOW [0:0]  = 1'b0;
};

reg alarm_db_status_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Alarm Db Status";
    desc = "Alarm Block Double Buffer Status";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;

    field { name = "Msix Db Ready"; desc = "Current ready input";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.MSIX_DB_READY";
          } MSIX_DB_READY [6:6]   = 1'h0;
    field { name = "Msix Db Depth"; desc = "Current DB depth";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.MSIX_DB_DEPTH";
          } MSIX_DB_DEPTH [5:4]   = 2'h0;
    field { name = "Sys Db Ready";  desc = "Current ready input";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.SYS_DB_READY";
          } SYS_DB_READY  [2:2]   = 1'h0;
    field { name = "Sys Db Depth";  desc = "Current DB depth";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_DB_STATUS.SYS_DB_DEPTH";
          } SYS_DB_DEPTH  [1:0]   = 2'h0;
};

reg ingress_db_status_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Ingress Db Status";
    desc = "Ingress Block Double Buffer Status";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;

    field { name = "Hcw Enq Db Ready";  desc = "Current ready input";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_DB_READY";
          } HCW_ENQ_DB_READY  [6:6]   = 1'h0;
    field { name = "Hcw Enq Db Depth";  desc = "Current DB depth";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_DB_DEPTH";
          } HCW_ENQ_DB_DEPTH  [5:4]   = 2'h0;
    field { name = "Hcw Enq W Db Ready";  desc = "Current ready input";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_W_DB_READY";
          } HCW_ENQ_W_DB_READY  [2:2]   = 1'h1;
    field { name = "Hcw Enq W Db Depth";  desc = "Current DB depth";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_DB_STATUS.HCW_ENQ_W_DB_DEPTH";
          } HCW_ENQ_W_DB_DEPTH  [1:0]   = 2'h0;
};

reg egress_db_status_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Egress Db Status";
    desc = "Egress Block Double Buffer Status";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;

    field { name = "Phdr Db Ready";    desc = "Current ready input";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PHDR_DB_READY";
          } PHDR_DB_READY         [18:18]   = 1'h1; 
    field { name = "Phdr Db Depth";    desc = "Current DB depth";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PHDR_DB_DEPTH";
          } PHDR_DB_DEPTH         [17:16]   = 2'h0;
    field { name = "Pdata Ms Db Ready";    desc = "Current ready input";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_MS_DB_READY";
          } PDATA_MS_DB_READY     [14:14]   = 1'h1; 
    field { name = "Pdata Ms Db Depth";    desc = "Current DB depth";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_MS_DB_DEPTH";
          } PDATA_MS_DB_DEPTH     [13:12]   = 2'h0;
    field { name = "Pdata Ls Db Ready";    desc = "Current ready input";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_LS_DB_READY";
          } PDATA_LS_DB_READY     [10:10]   = 1'h1; 
    field { name = "Pdata Ls Db Depth";    desc = "Current DB depth";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.PDATA_LS_DB_DEPTH";
          } PDATA_LS_DB_DEPTH     [9:8]   = 2'h0;
    field { name = "CQ Occ Db Ready";    desc = "Current ready input";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.CQ_OCC_DB_READY";
          } CQ_OCC_DB_READY       [6:6]   = 1'h1; 
    field { name = "CQ Occ Db Depth";    desc = "Current DB depth";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.CQ_OCC_DB_DEPTH";
          } CQ_OCC_DB_DEPTH       [5:4]   = 2'h0;
    field { name = "Hcw Sched Db Ready";    desc = "Current ready input";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.HCW_SCHED_DB_READY";
          } HCW_SCHED_DB_READY    [2:2]   = 1'h0; // reset not 1 because need valid data first
    field { name = "Hcw Sched Db Depth";    desc = "Current DB depth";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal     = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_DB_STATUS.HCW_SCHED_DB_DEPTH";
          } HCW_SCHED_DB_DEPTH    [1:0]   = 2'h0;
};

reg hcw_enq_fifo_ctl_r {
  HqmClassification="CONFIG_REG_NA_1";
    name = "Hcw Enq Fifo Ctl";
    desc = "Non-default settings may cause UNDEFINED behavior. HCW Enqueue FIFO Control";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name = "High Wm"; desc = "High watermark";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_ENQ_FIFO_CTL.HIGH_WM";
          } HIGH_WM [8:0] = 9'd254;
};

reg sch_out_fifo_ctl_r {
  HqmClassification="CONFIG_REG_NA_1";
    name = "Sch Out Fifo Ctl";
    desc = "Non-default settings may cause UNDEFINED behavior. Schedule Output FIFO Control";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name = "High Wm"; desc = "High watermark";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SCH_OUT_FIFO_CTL.HIGH_WM";
          } HIGH_WM [7:0] = 8'd127;
};

reg sif_alarm_fifo_ctl_r {
  HqmClassification="CONFIG_REG_NA_1";
    name = "Sif Alarm Fifo Ctl";
    desc = "Non-default settings may cause UNDEFINED behavior. SIF Alarm FIFO Control";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name = "High Wm"; desc = "High watermark";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SIF_ALARM_FIFO_CTL.HIGH_WM";
          } HIGH_WM [0:0] = 1'b1;
};

reg ecc_ctl_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Ecc Ctl";
    desc = "Non-default settings may cause UNDEFINED behavior. ECC Control";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;
    donttest = true;

    field { name = "Inj Sb Ecc Wbuf W1 Ms"; desc = "A rising edge on this bit causes a single bit ECC error on the MS 64b
            of the next word1 read from the write buffer";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W1_MS";
          } INJ_SB_ECC_WBUF_W1_MS [23:23] = 1'h0;
    field { name = "Inj Mb Ecc Wbuf W1 Ms"; desc = "A rising edge on this bit causes a multiple bit ECC error on the MS 64b
            of the next word1 read from the write buffer";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W1_MS";
          } INJ_MB_ECC_WBUF_W1_MS [22:22] = 1'h0;
    field { name = "Inj Sb Ecc Wbuf W1 Ls"; desc = "A rising edge on this bit causes a single bit ECC error on the LS 64b
            of the next word1 read from the write buffer";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W1_LS";
          } INJ_SB_ECC_WBUF_W1_LS [21:21] = 1'h0;
    field { name = "Inj Mb Ecc Wbuf W1 Ls"; desc = "A rising edge on this bit causes a multiple bit ECC error on the LS 64b
            of the next word1 read from the write buffer";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W1_LS";
          } INJ_MB_ECC_WBUF_W1_LS [20:20] = 1'h0;
    field { name = "Inj Sb Ecc Wbuf W0 Ms"; desc = "A rising edge on this bit causes a single bit ECC error on the MS 64b
            of the next word0 read from the write buffer";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W0_MS";
          } INJ_SB_ECC_WBUF_W0_MS [19:19] = 1'h0;
    field { name = "Inj Mb Ecc Wbuf W0 Ms"; desc = "A rising edge on this bit causes a multiple bit ECC error on the MS 64b
            of the next word0 read from the write buffer";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W0_MS";
          } INJ_MB_ECC_WBUF_W0_MS [18:18] = 1'h0;
    field { name = "Inj Sb Ecc Wbuf W0 Ls"; desc = "A rising edge on this bit causes a single bit ECC error on the LS 64b
            of the next word0 read from the write buffer";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_WBUF_W0_LS";
          } INJ_SB_ECC_WBUF_W0_LS [17:17] = 1'h0;
    field { name = "Inj Mb Ecc Wbuf W0 Ls"; desc = "A rising edge on this bit causes a multiple bit ECC error on the LS 64b
            of the next word0 read from the write buffer";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_WBUF_W0_LS";
          } INJ_MB_ECC_WBUF_W0_LS [16:16] = 1'h0;
    field { name = "Inj Sb Ecc Hcw Enq Ms"; desc = "A rising edge on this bit causes a single bit ECC error on the MS 64b
            of the next HCW enqueue";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_HCW_ENQ_MS";
          } INJ_SB_ECC_HCW_ENQ_MS [15:15] = 1'h0;
    field { name = "Inj Mb Ecc Hcw Enq Ms"; desc = "A rising edge on this bit causes a multiple bit ECC error on the MS 64b
            of the next HCW enqueue";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_HCW_ENQ_MS";
          } INJ_MB_ECC_HCW_ENQ_MS [14:14] = 1'h0;
    field { name = "Inj Sb Ecc Hcw Enq Ls"; desc = "A rising edge on this bit causes a single bit ECC error on the LS 64b
            of the next HCW enqueue";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_SB_ECC_HCW_ENQ_LS";
          } INJ_SB_ECC_HCW_ENQ_LS [13:13] = 1'h0;
    field { name = "Inj Mb Ecc Hcw Enq Ls"; desc = "A rising edge on this bit causes a multiple bit ECC error on the LS 64b
            of the next HCW enqueue";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.INJ_MB_ECC_HCW_ENQ_LS";
          } INJ_MB_ECC_HCW_ENQ_LS [12:12] = 1'h0;
    field { name = "Write Bad Lut Mb Ecc"; desc = "If set, LUT writes will insert a multiple bit ECC error.  Note that some LUTs are packed so multiple entries occupy a single memory location and, in order to update an entry, a RMW must be done.  If you force bad ECC into the memory location and then attempt to write good ECC over the bad, the read portion of the RMW will see an ECC error and be reported.  Since the ECC is shared across multiple entries in the same LUT location (1 set of ECC bits per memory location, multiple data entries per memory location), to correct bad ECC you would need to rewrite all entries in that memory location (because you do not know which entry is actually bad) and the first of those writes (which are all RMWs) would see the ECC error on the read.";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.WRITE_BAD_MB_ECC";
          } WRITE_BAD_MB_ECC [5:5] = 1'h0;
    field { name = "Write Bad Lut Sb Ecc"; desc = "If set, LUT writes will insert a single bit ECC error.  Note that some LUTs are packed so multiple entries occupy a single memory location and, in order to update an entry, a RMW must be done.  If you force bad ECC into the memory location and then attempt to write good ECC over the bad, the read portion of the RMW will see an ECC error and be reported.  Since the ECC is shared across multiple entries in the same LUT location (1 set of ECC bits per memory location, multiple data entries per memory location), to correct bad ECC you would need to rewrite all entries in that memory location (because you do not know which entry is actually bad) and the first of those writes (which are all RMWs) would see the ECC error on the read.";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.WRITE_BAD_SB_ECC";
          } WRITE_BAD_SB_ECC [4:4] = 1'h0;
    field { name = "Lut Ecc Enable"; desc = "Enable SECDED ECC checks on LUT reads";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.LUT_ECC_ENABLE";
          } LUT_ECC_ENABLE [3:3] = 1'h1;
    field { name = "Sch Wb Ecc Enable"; desc = "Enable SECDED ECC checks on schedule write buffer memories";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.SCH_WB_ECC_ENABLE";
          } SCH_WB_ECC_ENABLE [2:2] = 1'h1;
    field { name = "Hcw Enq Ecc Enable"; desc = "Enable SECDED ECC checks on HCW enqueue datapaths";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ECC_CTL.HCW_ENQ_ECC_ENABLE";
          } HCW_ENQ_ECC_ENABLE [1:1] = 1'h1;
};

reg parity_ctl_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Parity Ctl";
    desc = "Non-default settings may cause UNDEFINED behavior. Parity Control";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;
    donttest = true;

    field { name = "Inj Par Err Sch Int"; desc = "A rising edge on this bit causes a parity error on the next scheduled interrupt write request";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_INT";
          } INJ_PAR_ERR_SCH_INT [19:19] = 1'h0;
    field { name = "Egress Int Par Off"; desc = "Disable parity checking on egress interrupt pipeline data";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.EGRESS_INT_PAR_OFF";
          } EGRESS_INT_PAR_OFF [18:18] = 1'h0;
    field { name = "Inj Res Err Int Pipeline"; desc = "A rising edge on this bit causes a residue error on the next WB interrupt pipeline entry";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_RES_ERR_INT";
          } INJ_RES_ERR_INT [17:17] = 1'h0;
    field { name = "Inj Par Err Int Pipeline"; desc = "A rising edge on this bit causes a parity error on the next WB interrupt pipeline entry";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_INT";
          } INJ_PAR_ERR_INT [16:16] = 1'h0;
    field { name = "Inj Res Err Sch Pipeline"; desc = "A rising edge on this bit causes a residue error on the next WB sch pipeline entry";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_RES_ERR_SCH";
          } INJ_RES_ERR_SCH [15:15] = 1'h0;
    field { name = "Inj Par Err Sch Pipeline"; desc = "A rising edge on this bit causes a parity error on the next WB sch pipeline entry";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH";
          } INJ_PAR_ERR_SCH [14:14] = 1'h0;
    field { name = "Inj Par Err Sch Pipeline"; desc = "A rising edge on this bit causes a parity error on the next egress scheduled HCW write pipeline data";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_PL";
          } INJ_PAR_ERR_SCH_PL [13:13] = 1'h0;
    field { name = "Inj Res Err Sch Req"; desc = "A rising edge on this bit causes a residue error on the next egress scheduled HCW write CQ address";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_RES_ERR_SCH_REQ";
          } INJ_RES_ERR_SCH_REQ [12:12] = 1'h0;
    field { name = "Write Buffer Res Off"; desc = "Disable residue checking in write buffer logic";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.WBUF_RES_OFF";
          } WBUF_RES_OFF [11:11] = 1'h0;
    field { name = "Egress Res Off"; desc = "Disable residue checking in egress logic";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.EGRESS_RES_OFF";
          } EGRESS_RES_OFF [10:10] = 1'h0;
    field { name = "Inj Par Err VF Synd"; desc = "A rising edge on this bit causes a parity error on the next VF alarm syndrome read";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_VF_SYND";
          } INJ_PAR_ERR_VF_SYND [9:9] = 1'h0;
    field { name = "Inj Par Err Sch Out"; desc = "A rising edge on this bit causes a parity error on the next sch_out FIFO entry";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_OUT";
          } INJ_PAR_ERR_SCH_OUT [8:8] = 1'h0;
    field { name = "Inj Par Err Hcw Port"; desc = "A rising edge on this bit causes a parity error on the port info of the next HCW";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_HCW_PORT";
          } INJ_PAR_ERR_HCW_PORT [7:7] = 1'h0;
    field { name = "Inj Par Err Sch Req"; desc = "A rising edge on this bit causes a parity error on the next scheduled HCW write request";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_REQ";
          } INJ_PAR_ERR_SCH_REQ [6:6] = 1'h0;
    field { name = "Inj Par Err Sch Data"; desc = "A rising edge on this bit causes a parity error on the next scheduled HCW write data";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INJ_PAR_ERR_SCH_DATA";
          } INJ_PAR_ERR_SCH_DATA [5:5] = 1'h0;
    field { name = "Write Buffer Par Off"; desc = "Disable parity checking on write buffer sch_out FIFO";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.WBUF_PAR_OFF";
          } WBUF_PAR_OFF [4:4] = 1'h0;
    field { name = "Ingress Par Off"; desc = "Disable parity checking on ingress memories";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.INGRESS_PAR_OFF";
          } INGRESS_PAR_OFF [3:3] = 1'h0;
    field { name = "Egress Par Off"; desc = "Disable parity checking on egress memories";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.EGRESS_PAR_OFF";
          } EGRESS_PAR_OFF [2:2] = 1'h0;
    field { name = "Alarm Par Off"; desc = "Disable parity checking on alarm memories";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.ALARM_PAR_OFF";
          } ALARM_PAR_OFF [1:1] = 1'h0;
    field { name = "Write Bad Parity"; desc = "When set, configuration writes will write bad parity into the memories.   Note that some LUTs are packed so multiple entries occupy a single memory location and, in order to update an entry, a RMW must be done.  If you force bad parity into the memory location and then attempt to write good parity over the bad, the read portion of the RMW will see a parity error and be reported.  Since the parity is shared across multiple entries in the same LUT location (1 parity bit per memory location, multiple data entries per memory location), to correct bad parity you would need to rewrite all entries in that memory location (because you do not know which entry is actually bad) and the first of those writes (which are all RMWs) would see the parity error on the read.";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.PARITY_CTL.WRITE_BAD_PARITY";
          } WRITE_BAD_PARITY [0:0] = 1'h0;
};

enum enum_rtype {
   alarm_specific = 2'h0 { desc = "Syndrome is alarm specific information."; };
   cq_or_pp       = 2'h1 { desc = "Syndrome is consumer queue or producer port."; };
   qid            = 2'h2 { desc = "Syndrome is queue ID."; };
   vas            = 2'h3 { desc = "Syndrome is vas ID."; };
};

reg alarm_hw_synd_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Alarm Hw Synd";
    desc = "Alarm Hardware Syndrome";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Valid"; desc = "Syndrome MORE, VF_PF_MB, CWD and ALARM bits are valid.  If ALARM bit is set, the rest of the fields
                                    also contain valid information associated with the alarm.";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_v_q";
          } VALID [31:31] = 1'h0;
    field { name = "More"; desc = "More than 1 of any interrupt type was received";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_more_q";
          } MORE [30:30] = 1'h0;
    field { name = "Source"; desc = "0: hqm_system, 1: hqm_core, 2:sif";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[29:26]";
          } SOURCE [29:26] = 4'h0;
    field { name = "Unit"; desc = "Reporting unit within source. hqm_system(0:ingress 1:alarms) hqm_core(1:sys 2:aqed 3:ap 4:chp 5:dp 6:qed 7:nalb 8:rop 9:lsp 10:mstr) sif(0:alarms)";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[25:22]";
          } UNIT [25:22] = 4'h0;
    field { name = "Aid"; desc = "The Alarm ID indicates the type of alarm, indicating how to interpret VF and syndrome fields.";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[21:16]";
          } AID [21:16] = 6'h00;
    field { name = "Class"; desc = "0:Info 1:Correctable 2:Uncorrectable";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[15:14]";
          } CLS [15:14] = 2'h0;
    field { name = "Rsvd0"; desc = "Reserved normally.  For the ingress ECC or parity error cases only, this bit holds the is_ldb indication for the PP";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[13:13]";
          } RSVD0 [13:13] = 1'h0;
    field { name = "Vf_Pf_Mb"; desc = "VF to PF service interrupt (includes mailbox and flr service requests)";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[12:12]";
          } VF_PF_MB [12:12] = 1'h0;
    field { name = "Cwd"; desc = "Watchdog interrupt";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[11:11]";
          } CWD [11:11] = 1'h0;
    field { name = "Alarm"; desc = "Alarm interrupt";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[10:10]";
          } ALARM [10:10] = 1'h0;
    field { name = "Rtype"; desc = "Syndrome type"; encode=enum_rtype;
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[9:8]";
          } RTYPE [9:8] = 2'h0;
    field { name = "Syndrome"; desc = "Alarm specific syndrome";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_hw_synd_q[7:0]";
          } SYNDROME [7:0] = 8'h00;
};

regfile alarm_pf_synd_rf {

  reg alarm_pf_synd0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Alarm Pf Synd0";
    desc = "Alarm Ingress Syndrome0";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Valid"; desc = "Syndrome information is valid";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_v_q";
          } VALID [31:31] = 1'h0;
    field { name = "More"; desc = "More than 1 alarm was received";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_more_q";
          } MORE [30:30] = 1'h0;
    field { name = "Source"; desc = "0: hqm_system, 1: hqm_core, 2:sif";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[29:26]";
          } SOURCE [29:26] = 4'h0;
    field { name = "Unit"; desc = "Reporting unit within source. hqm_system(0:ingress 1:alarms) hqm_core(1:sys 2:aqed 3:ap 4:chp 5:dp 6:qed 7:nalb 8:rop 9:lsp 10:mstr) sif(0:alarms)";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[25:22]";
          } UNIT [25:22] = 4'h0;
    field { name = "Aid"; desc = "The Alarm ID indicates the type of alarm, indicating how to interpret VF and syndrome fields.";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[21:16]";
          } AID [21:16] = 6'h00;
    field { name = "Class"; desc = "0:Info 1:Correctable 2:Uncorrectable";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[15:14]";
          } CLS [15:14] = 2'h0;
    field { name = "Is Ldb"; desc = "Producer port was load balanced";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[13:13]";
          } IS_LDB [13:13] = 1'h0;
    field { name = "Rtype"; desc = "Syndrome type"; encode=enum_rtype;
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[9:8]";
          } RTYPE [9:8] = 2'h0;
    field { name = "Syndrome"; desc = "Alarm specific syndrome";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[7:0]";
          } SYNDROME [7:0] = 8'h00;
  };

  reg alarm_pf_synd1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Alarm Pf Synd1";
    desc = "Alarm Ingress Syndrome1";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Msg Type"; desc = "Message type";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[61:59]";
          } MSG_TYPE [31:29] = 3'h0;
    field { name = "Qpri"; desc = "Queue priority";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[58:56]";
          } QPRI [28:26] = 3'h0;
    field { name = "Qtype"; desc = "Queue type (0: atm, 1: uno, 2:ord, 3:dir)";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[55:54]";
          } QTYPE [25:24] = 2'h0;
    field { name = "Qid"; desc = "Queue ID";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[53:46]";
          } QID [23:16] = 8'h00;
    field { name = "Dsi"; desc = "DSI";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[45:30]";
          } DSI [15:0] = 16'h0000;
  };

  reg alarm_pf_synd2_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Alarm Pf Synd2";
    desc = "Alarm Ingress Syndrome2";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Dsi Error"; desc = "DSI error indication";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[91:91]";
          } DSI_ERROR [29:29] = 1'h0;
    field { name = "Cq Int Rearm"; desc = "Rearm CQ occupancy interrupt";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[90:90]";
          } CQ_INT_REARM [28:28] = 1'h0;
    field { name = "Qe Valid"; desc = "QE valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[89:89]";
          } QE_VALID [27:27] = 1'h0;
    field { name = "Qe Orsp"; desc = "QE response";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[88:88]";
          } QE_ORSP [26:26] = 1'h0;
    field { name = "Qe Uhl"; desc = "QE completion";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[87:87]";
          } QE_UHL [25:25] = 1'h0;
    field { name = "Cq Pop"; desc = "Pop CQ";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[86:86]";
          } CQ_POP [24:24] = 1'h0;
    field { name = "Debug"; desc = "Debug information";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[85:79]";
          } DEBUG [23:17] = 7'h00;
    field { name = "Meas"; desc = "Measure";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[78:78]";
          } MEAS [16:16] = 1'h0;
    field { name = "Lock Id"; desc = "Lock ID";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.alarm_pf_synd_q[77:62]";
          } LOCK_ID [15:0] = 16'h0000;
  };

  alarm_pf_synd0_r     ALARM_PF_SYND0     @0x00;
  alarm_pf_synd1_r     ALARM_PF_SYND1     @0x04;
  alarm_pf_synd2_r     ALARM_PF_SYND2     @0x08;

};

regfile alarm_vf_synd_rf {

  reg alarm_vf_synd0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_16";
    name = "Alarm Vf Synd0";
    desc = "Alarm Syndrome0";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Valid"; desc = "Syndrome information is valid";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
          } VALID [31:31] = 1'h0;
    field { name = "More"; desc = "More than 1 alarm was received";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
          } MORE [30:30] = 1'h0;
    field { name = "Source"; desc = "0: hqm_system, 1: hqm_core, 2:sif";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } SOURCE [29:26] = 4'h0;
    field { name = "Unit"; desc = "Reporting unit within source. hqm_system(0:ingress 1:alarms) hqm_core(1:sys 2:aqed 3:ap 4:chp 5:dp 6:qed 7:nalb 8:rop 9:lsp 10:mstr) sif(0:alarms)";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } UNIT [25:22] = 4'h0;
    field { name = "Aid"; desc = "Alarm ID";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } AID [21:16] = 6'h00;
    field { name = "Class"; desc = "0:Info 1:Correctable 2:Uncorrectable";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } CLS [15:14] = 2'h0;
    field { name = "Is Ldb"; desc = "Virtual producer port was load balanced";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } IS_LDB [13:13] = 1'h0;
    field { name = "Vf Synd2 Parity"; desc = "Even Parity on vf_synd2 register";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } VF_SYND2_PARITY [12:12] = 1'h0;
    field { name = "Vf Synd1 Parity"; desc = "Even Parity on vf_synd1 register";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } VF_SYND1_PARITY [11:11] = 1'h0;
    field { name = "Vf Synd0 Parity"; desc = "Even Parity on vf_synd0 register";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } VF_SYND0_PARITY [10:10] = 1'h0;
    field { name = "Rtype"; desc = "Syndrome type"; encode=enum_rtype;
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } RTYPE [9:8] = 2'h0;
    field { name = "Syndrome"; desc = "Alarm specific syndrome";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } SYNDROME [7:0] = 8'h00;
  };

  reg alarm_vf_synd1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_16";
    name = "Alarm Vf Synd1";
    desc = "Alarm Syndrome1 - Only valid on ingress alarms";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Msg Type"; desc = "Message type";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } MSG_TYPE [31:29] = 3'h0;
    field { name = "Qpri"; desc = "Queue priority";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } QPRI [28:26] = 3'h0;
    field { name = "Qtype"; desc = "Queue type (0: atm, 1: uno, 2:ord, 3:dir)";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } QTYPE [25:24] = 2'h0;
    field { name = "Qid"; desc = "Queue ID";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } QID [23:16] = 8'h00;
    field { name = "Dsi"; desc = "DSI";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } DSI [15:0] = 16'h0000;
  };

  reg alarm_vf_synd2_r {
  HqmClassification="DEBUG_ONLY_REG_NA_16";
    name = "Alarm Vf Synd2";
    desc = "Alarm Syndrome2 - Only valid on ingress alarms";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Hqmrsvd"; desc = "HQM reserved";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } HQMRSVD [31:30] = 2'h0;
    field { name = "Dsi Error"; desc = "DSI error indication";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } DSI_ERROR [29:29] = 1'h0;
    field { name = "Isz"; desc = "Isz";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } ISZ [28:28] = 1'h0;
    field { name = "Qe Valid"; desc = "QE valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } QE_VALID [27:27] = 1'h0;
    field { name = "Qe Orsp"; desc = "QE response";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } QE_ORSP [26:26] = 1'h0;
    field { name = "Qe Uhl"; desc = "QE completion";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } QE_UHL [25:25] = 1'h0;
    field { name = "Cq Pop"; desc = "Pop CQ";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } CQ_POP [24:24] = 1'h0;
    field { name = "Debug"; desc = "Debug information";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } DEBUG [23:16] = 8'h00;
    field { name = "Lock Id"; desc = "Lock ID";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
          } LOCK_ID [15:0] = 16'h0000;
  };

  alarm_vf_synd0_r     ALARM_VF_SYND0     @0x00;
  alarm_vf_synd1_r     ALARM_VF_SYND1     @0x04;
  alarm_vf_synd2_r     ALARM_VF_SYND2     @0x08;

};

reg ingress_lut_err_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Ingress Lut Err";
    desc = "Ingress LUT Error. These bits are sticky.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="port_perr";                  desc="Parity error on HCW port info";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.PORT_PERR";
          } PORT_PERR                  [19:19] = 1'h0;
    field { name="vf_dir_vpp2pp_mb_ecc_err";   desc="MB ECC error in vf_dir_vpp2pp";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VPP2PP_MB_ECC_ERR";
          } VF_DIR_VPP2PP_MB_ECC_ERR   [18:18] = 1'h0;
    field { name="vf_ldb_vpp2pp_perr";         desc="Parity error in vf_ldb_vpp2pp";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VPP2PP_PERR";
          } VF_LDB_VPP2PP_PERR         [17:17] = 1'h0;
    field { name="vf_dir_vpp_v_perr";          desc="Parity error in vf_dir_vpp_v";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VPP_V_PERR";
          } VF_DIR_VPP_V_PERR          [16:16] = 1'h0;
    field { name="vf_ldb_vpp_v_perr";          desc="Parity error in vf_ldb_vpp_v";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VPP_V_PERR";
          } VF_LDB_VPP_V_PERR          [15:15] = 1'h0;
    field { name="dir_pp_v_perr";              desc="Parity error in dir_pp_v";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_PP_V_PERR";
          } DIR_PP_V_PERR              [14:14] = 1'h0;
    field { name="ldb_pp_v_perr";              desc="Parity error in ldb_pp_v";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_PP_V_PERR";
          } LDB_PP_V_PERR              [13:13] = 1'h0;
    field { name="vf_dir_vqid2qid_mb_ecc_err"; desc="MB ECC error in vf_dir_vqid2qid";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VQID2QID_MB_ECC_ERR";
          } VF_DIR_VQID2QID_MB_ECC_ERR [12:12] = 1'h0;
    field { name="vf_ldb_vqid2qid_mb_ecc_err"; desc="MB ECC error in vf_ldb_vqid2qid";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VQID2QID_MB_ECC_ERR";
          } VF_LDB_VQID2QID_MB_ECC_ERR [11:11] = 1'h0;
    field { name="vf_dir_vqid_v_perr";         desc="Parity error in vf_dir_vqid_v";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_DIR_VQID_V_PERR";
          } VF_DIR_VQID_V_PERR         [10:10] = 1'h0;
    field { name="vf_ldb_vqid_v_perr";         desc="Parity error in vf_ldb_vqid_v";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.VF_LDB_VQID_V_PERR";
          } VF_LDB_VQID_V_PERR         [ 9: 9] = 1'h0;
    field { name="ldb_qid_its_perr";           desc="Parity error in ldb_qid_its";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_QID_ITS_PERR";
          } LDB_QID_ITS_PERR           [ 8: 8] = 1'h0;
    field { name="dir_qid_its_perr";           desc="Parity error in dir_qid_its";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_QID_ITS_PERR";
          } DIR_QID_ITS_PERR           [ 7: 7] = 1'h0;
    field { name="dir_qid_v_perr";             desc="Parity error in dir_qid_v";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_QID_V_PERR";
          } DIR_QID_V_PERR             [ 6: 6] = 1'h0;
    field { name="ldb_qid_v_perr";             desc="Parity error in ldb_qid_v";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_QID_V_PERR";
          } LDB_QID_V_PERR             [ 5: 5] = 1'h0;
    field { name="ldb_vasqid_v_perr";          desc="Parity error in ldb_vasqid_v";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_VASQID_V_PERR";
          } LDB_VASQID_V_PERR          [ 4: 4] = 1'h0;
    field { name="dir_vasqid_v_perr";          desc="Parity error in dir_vasqid_v";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_VASQID_V_PERR";
          } DIR_VASQID_V_PERR          [ 3: 3] = 1'h0;
    field { name="ldb_pp2vas_perr";            desc="Parity error in ldb_pp2vas";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_PP2VAS_PERR";
          } LDB_PP2VAS_PERR            [ 2: 2] = 1'h0;
    field { name="dir_pp2vas_perr";            desc="Parity error in dir_pp2vas";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.DIR_PP2VAS_PERR";
          } DIR_PP2VAS_PERR            [ 1: 1] = 1'h0;
    field { name="ldb_qid_cfg_v_perr";         desc="Parity error in ldb_qid_cfg_v";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_LUT_ERR.LDB_QID_CFG_V_PERR";
          } LDB_QID_CFG_V_PERR         [ 0: 0] = 1'h0;
};

reg egress_lut_err_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Egress Lut err";
    desc = "Egress LUT Error. These bits are sticky.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="sch_int_pl_perr";      desc="Parity error on sched interrupt pipeline data";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_INT_PL_PERR";
          } SCH_INT_PL_PERR      [14:14] = 1'h0;
    field { name="sch_req_pl_perr";      desc="Parity error on sched request pipeline data";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_REQ_PL_PERR";
          } SCH_REQ_PL_PERR      [13:13] = 1'h0;
    field { name="sch_req_rerr";         desc="Residue error on sched request CQ address";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_REQ_RERR";
          } SCH_REQ_RERR         [12:12] = 1'h0;
    field { name="sch_req_perr";         desc="Parity error on sched request";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_REQ_PERR";
          } SCH_REQ_PERR         [11:11] = 1'h0;
    field { name="sch_data_perr";        desc="Parity error on sched data";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.SCH_DATA_PERR";
          } SCH_DATA_PERR        [10:10] = 1'h0;
    field { name="ldb_qid2vqid_perr";    desc="Parity error in ldb_qid2vqid";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_QID2VQID_PERR";
          } LDB_QID2VQID_PERR    [ 9: 9] = 1'h0;
    field { name="ldb_cq_pasid_perr";    desc="Parity error in ldb_cq_pasid";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ_PASID_PERR";
          } LDB_CQ_PASID_PERR    [ 8: 8] = 1'h0;
    field { name="ldb_cq_addr_l_perr";   desc="Parity error in ldb_cq_addr_l";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ_ADDR_L_PERR";
          } LDB_CQ_ADDR_L_PERR   [ 7: 7] = 1'h0;
    field { name="ldb_cq_addr_u_perr";   desc="Parity error in ldb_cq_addr_u";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ_ADDR_U_PERR";
          } LDB_CQ_ADDR_U_PERR   [ 6: 6] = 1'h0;
    field { name="ldb_cq2vf_pf_ro_perr"; desc="Parity error in ldb_cq2vf_pf_ro";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.LDB_CQ2VF_PF_RO_PERR";
          } LDB_CQ2VF_PF_RO_PERR [ 5: 5] = 1'h0;
    field { name="dir_cq_pasid_perr";    desc="Parity error in dir_cq_pasid";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_PASID_PERR";
          } DIR_CQ_PASID_PERR    [ 4: 4] = 1'h0;
    field { name="dir_cq_addr_l_perr";   desc="Parity error in dir_cq_addr_l";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_ADDR_L_PERR";
          } DIR_CQ_ADDR_L_PERR   [ 3: 3] = 1'h0;
    field { name="dir_cq_addr_u_perr";   desc="Parity error in dir_cq_addr_u";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_ADDR_U_PERR";
          } DIR_CQ_ADDR_U_PERR   [ 2: 2] = 1'h0;
    field { name="dir_cq2vf_pf_ro_perr"; desc="Parity error in dir_cq2vf_pf_ro";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ2VF_PF_RO_PERR";
          } DIR_CQ2VF_PF_RO_PERR [ 1: 1] = 1'h0;
    field { name="dir_cq_fmt_perr";      desc="Parity error in dir_cq_fmt";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_LUT_ERR.DIR_CQ_FMT_PERR";
          } DIR_CQ_FMT_PERR      [ 0: 0] = 1'h0;
};

reg alarm_lut_perr_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Alarm Lut Perr";
    desc = "Alarm LUT Parity Error. These bits are sticky.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="vf_synd_perr";        desc="Parity error in vf_synd0";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.VF_SYND_PERR";
          } VF_SYND_PERR      [12:12] = 1'h0;
    field { name="msix_tbl_w3_perr";    desc="Parity error in msix_tbl_w3";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W3_PERR";
          } MSIX_TBL_W3_PERR  [11:11] = 1'h0;
    field { name="msix_tbl_w2_perr";    desc="Parity error in msix_tbl_w2";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W2_PERR";
          } MSIX_TBL_W2_PERR  [10:10] = 1'h0;
    field { name="msix_tbl_w1_perr";    desc="Parity error in msix_tbl_w1";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W1_PERR";
          } MSIX_TBL_W1_PERR    [9:9] = 1'h0;
    field { name="msix_tbl_w0_perr";    desc="Parity error in msix_tbl_w0";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.MSIX_TBL_W0_PERR";
          } MSIX_TBL_W0_PERR    [8:8] = 1'h0;
    field { name="ldb_cq_ai_data_perr"; desc="Parity error in ldb_cq_ai_data (this memory is used to store the ai_data for IMS vectors 96-159)";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_AI_DATA_PERR";
          } LDB_CQ_AI_DATA_PERR [7:7] = 1'h0;
    field { name="dir_cq_ai_data_perr"; desc="Parity error in dir_cq_ai_data (this memory is used to store the ai_data for IMS vectors 0-95)";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_AI_DATA_PERR";
          } DIR_CQ_AI_DATA_PERR [6:6] = 1'h0;
    field { name="ldb_cq_ai_addr_u_perr"; desc="Parity error in ldb_cq_ai_addr_u (this memory is used to store the ai_addr_u for IMS vectors 96-159)";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_AI_ADDR_U_PERR";
          } LDB_CQ_AI_ADDR_U_PERR [5:5] = 1'h0;
    field { name="ldb_cq_ai_addr_l_perr"; desc="Parity error in ldb_cq_ai_addr_l (this memory is used to store the ai_addr_l for IMS vectors 96-159)";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_AI_ADDR_L_PERR";
          } LDB_CQ_AI_ADDR_L_PERR [4:4] = 1'h0;
    field { name="dir_cq_ai_addr_u_perr"; desc="Parity error in dir_cq_ai_addr_u (this memory is used to store the ai_addr_u for IMS vectors 0-95)";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_AI_ADDR_U_PERR";
          } DIR_CQ_AI_ADDR_U_PERR [3:3] = 1'h0;
    field { name="dir_cq_ai_addr_l_perr"; desc="Parity error in dir_cq_ai_addr_l (this memory is used to store the ai_addr_l for IMS vectors 0-95)";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_AI_ADDR_L_PERR";
          } DIR_CQ_AI_ADDR_L_PERR [2:2] = 1'h0;
    field { name="ldb_cq_isr_perr";     desc="Parity error in ldb_cq_isr";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.LDB_CQ_ISR_PERR";
          } LDB_CQ_ISR_PERR     [1:1] = 1'h0;
    field { name="dir_cq_isr_perr";     desc="Parity error in dir_cq_isr";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_LUT_PERR.DIR_CQ_ISR_PERR";
          } DIR_CQ_ISR_PERR     [0:0] = 1'h0;
};

reg ingress_alarm_enable_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Ingress Alarm Enable";
    desc = "Ingress Alarm Enable - Enables generating errors for the following ingress error conditions";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="illegal_ldb_qid";  desc="Enable illegal load balanced qid cfg alarm (sn or fid inconsistency) on ingress HCWs";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_LDB_QID_CFG";
          } ILLEGAL_LDB_QID_CFG [5:5] = 1'h0;
    field { name="disabled_qid";     desc="Enable disabled qid resource alarm (disabled qid, or disabled vasqid) on ingress HCWs";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.DISABLED_QID";
          } DISABLED_QID        [4:4] = 1'h0;
    field { name="illegal_qid";      desc="Enable illegal qid alarm on ingress HCWs";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_QID";
          } ILLEGAL_QID         [3:3] = 1'h0;
    field { name="illegal_pasid";   desc="Enable illegal pasid alarm on ingress HCWs";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_PASID";
          } ILLEGAL_PASID       [2:2] = 1'h0;
    field { name="illegal_pp";       desc="Enable illegal pp or pasid alarm on ingress HCWs";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_PP";
          } ILLEGAL_PP          [1:1] = 1'h0;
    field { name="illegal_hcw";      desc="Enable illegal HCW alarm (illegal command or qid greater than 127) on ingress HCWs";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_ALARM_ENABLE.ILLEGAL_HCW";
          } ILLEGAL_HCW         [0:0] = 1'h0;
};

reg sys_alarm_int_enable_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Sys Alarm Int Enable";
    desc = "Non-default settings may cause UNDEFINED behavior. System Alarm Interrupt Enable - Enables reporting interrupts for the following individual system errors";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="rf_ipar_error";             desc="Enable rf_ipar_error";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.RF_IPAR_ERROR";
          } RF_IPAR_ERROR           [11:11] = 1'b1;
    field { name="alarm_int_err";             desc="Enable alarm_int_err";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.ALARM_INT_ERR";
          } ALARM_INT_ERR           [10:10] = 1'b1;
    field { name="sch_wb_perr";               desc="Enable sch_wb_perr";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.SCH_WB_PERR";
          } SCH_WB_PERR             [9:9] = 1'b1;
    field { name="fifo_overflow";             desc="Enable fifo_overflow";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.FIFO_OVERFLOW";
          } FIFO_OVERFLOW           [8:8] = 1'b1;
    field { name="fifo_underflow";            desc="Enable fifo_underflow";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.FIFO_UNDERFLOW";
          } FIFO_UNDERFLOW          [7:7] = 1'b1;
    field { name="sch_sm_error";              desc="Enable sch_sm_error";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.SCH_SM_ERROR";
          } SCH_SM_ERROR            [6:6] = 1'b1;
    field { name="pf_to_vf_isr_pend_error";   desc="Enable pf_to_vf_isr_pend_error";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.PF_TO_VF_ISR_PEND_ERROR";
          } PF_TO_VF_ISR_PEND_ERROR [5:5] = 1'b1;
    field { name="vf_to_pf_isr_pend_error";   desc="Enable vf_to_pf_isr_pend_error";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.VF_TO_PF_ISR_PEND_ERROR";
          } VF_TO_PF_ISR_PEND_ERROR [4:4] = 1'b1;
    field { name="alarm_perr";                desc="Enable alarm_perr";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.ALARM_PERR";
          } ALARM_PERR              [3:3] = 1'b1;
    field { name="egress_perr";               desc="Enable egress_perr";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.EGRESS_PERR";
          } EGRESS_PERR             [2:2] = 1'b1;
    field { name="ingress_perr";              desc="Enable ingress_perr";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.INGRESS_PERR";
          } INGRESS_PERR            [1:1] = 1'b1;
    field { name="cq_addr_overflow_error";    desc="Enable cq_addr_overflow_error";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_INT_ENABLE.CQ_ADDR_OVERFLOW_ERROR";
          } CQ_ADDR_OVERFLOW_ERROR  [0:0] = 1'b1;
};

reg sys_alarm_mb_ecc_int_enable_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Sys Alarm Mb Ecc Int Enable";
    desc = "Non-default settings may cause UNDEFINED behavior. System Alarm Multiple Bit ECC Interrupt Enable - Enables reporting interrupts for the following individual system ECC errors";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="ingress_mb_ecc_error_2";  desc="Enable ingress_mb_ecc_error_2";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_2";
          } INGRESS_MB_ECC_ERROR_2  [ 7: 7] = 1'b1;
    field { name="ingress_mb_ecc_error_1";  desc="Enable ingress_mb_ecc_error_1";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_1";
          } INGRESS_MB_ECC_ERROR_1  [ 6: 6] = 1'b1;
    field { name="ingress_mb_ecc_error_0";  desc="Enable ingress_mb_ecc_error_0";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_0";
          } INGRESS_MB_ECC_ERROR_0  [ 5: 5] = 1'b1;
    field { name="system_csr_mb_ecc_error"; desc="Enable system_csr_mb_ecc_error";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SYSTEM_CSR_MB_ECC_ERROR";
          } SYSTEM_CSR_MB_ECC_ERROR [ 4: 4] = 1'b1;
    field { name="sch_wb_mb_ecc_error_3";   desc="Enable sch_wb_mb_ecc_error_3";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_3";
          } SCH_WB_MB_ECC_ERROR_3   [ 3: 3] = 1'b1;
    field { name="sch_wb_mb_ecc_error_2";   desc="Enable sch_wb_mb_ecc_error_2";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_2";
          } SCH_WB_MB_ECC_ERROR_2   [ 2: 2] = 1'b1;
    field { name="sch_wb_mb_ecc_error_1";   desc="Enable sch_wb_mb_ecc_error_1";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_1";
          } SCH_WB_MB_ECC_ERROR_1   [ 1: 1] = 1'b1;
    field { name="sch_wb_mb_ecc_error_0";   desc="Enable sch_wb_mb_ecc_error_0";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_0";
          } SCH_WB_MB_ECC_ERROR_0   [ 0: 0] = 1'b1;
};

reg sys_alarm_sb_ecc_int_enable_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Sys Alarm Sb Ecc Int Enable";
    desc = "Non-default settings may cause UNDEFINED behavior. System Alarm Single Bit ECC Interrupt Enable - Enables reporting interrupts for the following individual system ECC errors";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="ingress_sb_ecc_error_4";  desc="Enable ingress_sb_ecc_error_4";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_4";
          } INGRESS_SB_ECC_ERROR_4  [ 9: 9] = 1'b0;
    field { name="ingress_sb_ecc_error_3";  desc="Enable ingress_sb_ecc_error_3";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_3";
          } INGRESS_SB_ECC_ERROR_3  [ 8: 8] = 1'b0;
    field { name="ingress_sb_ecc_error_2";  desc="Enable ingress_sb_ecc_error_2";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_2";
          } INGRESS_SB_ECC_ERROR_2  [ 7: 7] = 1'b0;
    field { name="ingress_sb_ecc_error_1";  desc="Enable ingress_sb_ecc_error_1";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_1";
          } INGRESS_SB_ECC_ERROR_1  [ 6: 6] = 1'b0;
    field { name="ingress_sb_ecc_error_0";  desc="Enable ingress_sb_ecc_error_0";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_0";
          } INGRESS_SB_ECC_ERROR_0  [ 5: 5] = 1'b0;
    field { name="system_csr_sb_ecc_error"; desc="Enable system_csr_sb_ecc_error";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SYSTEM_CSR_SB_ECC_ERROR";
          } SYSTEM_CSR_SB_ECC_ERROR [ 4: 4] = 1'b0;
    field { name="sch_wb_sb_ecc_error_3";   desc="Enable sch_wb_sb_ecc_error_3";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_3";
          } SCH_WB_SB_ECC_ERROR_3   [ 3: 3] = 1'b0;
    field { name="sch_wb_sb_ecc_error_2";   desc="Enable sch_wb_sb_ecc_error_2";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_2";
          } SCH_WB_SB_ECC_ERROR_2   [ 2: 2] = 1'b0;
    field { name="sch_wb_sb_ecc_error_1";   desc="Enable sch_wb_sb_ecc_error_1";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_1";
          } SCH_WB_SB_ECC_ERROR_1   [ 1: 1] = 1'b0;
    field { name="sch_wb_sb_ecc_error_0";   desc="Enable sch_wb_sb_ecc_error_0";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_0";
          } SCH_WB_SB_ECC_ERROR_0   [ 0: 0] = 1'b0;
};

reg write_buffer_ctl_r {
  HqmClassification="CONFIG_REG_NA_1";
    name = "Write Buffer Ctl";
    desc = "Non-default settings may cause UNDEFINED behavior. Write Buffer Control";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;
    donttest = true;

    field { name="early_dir_int";      desc="If set, allows the sending of a DIR CQ occupancy interrupt potentially before any
                                             data for that CQ has been written.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.EARLY_DIR_INT";
          } EARLY_DIR_INT[19:19] = 1'h0;
    field { name="sch_rate_limit";     desc="If a bit is set, the corresponding write buffer pipeline level must not be valid before a
                                             new HCW can be sent into the pipeline";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.SCH_RATE_LIMIT";
          } SCH_RATE_LIMIT[18:16] = 3'h0;
    field { name="enable_debug";       desc="If set, allow read of interface debug data";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.ENABLE_DEBUG";
          } ENABLE_DEBUG[8:8] = 1'h0;
    field { name="single_step_msi";    desc="A leading edge on this bit unmasks the msi/msi-x write request for 1 cycle, if masked.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.SINGLE_STEP_MSI";
          } SINGLE_STEP_MSI [7:7] = 1'b0;
    field { name="single_step_sch";    desc="A leading edge on this bit unmasks the scheduled HCW write request for 1 cycle, if masked.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.SINGLE_STEP_SCH";
          } SINGLE_STEP_SCH [6:6] = 1'b0;
    field { name="arb_msi_mask";       desc="If set, mask msi/msi-x write requests to the arbiter.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.ARB_MSI_MASK";
          } ARB_MSI_MASK [5:5] = 1'b0;
    field { name="arb_sch_mask";       desc="If set, mask scheduled HCW write requests to the arbiter.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.ARB_SCH_MASK";
          } ARB_SCH_MASK [4:4] = 1'b0;
    field { name="ignore_ldb_wb_v"; desc="do not use ldb_wb0_v, ldb_wb1_v and/or ldb_wb2_v to force a error_pad.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.IGNORE_LDB_WB_V";
          } IGNORE_LDB_WB_V[3:3] = 1'b0;
    field { name="hold_sch_sm";        desc="If set, hold the schedule state machine in IDLE.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.HOLD_SCH_SM";
          } HOLD_SCH_SM[2:2] = 1'b0;
    field { name="write_single_beats"; desc="Only write out single HCWs/QEs (16B) at a time.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.WRITE_SINGLE_BEATS";
          } WRITE_SINGLE_BEATS[1:1] = 1'b0;
    field { name="ignore_dir_wb_v"; desc="do not use dir_wb0_v, dir_wb1_v and/or dir_wb2_v to force a error_pad.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WRITE_BUFFER_CTL.IGNORE_DIR_WB_V";
          } IGNORE_DIR_WB_V[0:0] = 1'b0;
};

reg alarm_ctl_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Alarm Ctl";
    desc = "Non-default settings may cause UNDEFINED behavior. Alarm Control";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name="disable_cwd_alarms";  desc="Disable (hold) alarms from CQ watchdog.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_CWD_ALARMS";
          } DISABLE_CWD_ALARMS[3:3] = 1'h0;
    field { name="disable_sys_alarms";  desc="Disable (hold) alarms from hqm_system.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_SYS_ALARMS";
          } DISABLE_SYS_ALARMS[2:2] = 1'h0;
    field { name="disable_sif_alarms"; desc="Disable (hold) alarms from hqm_sif.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_SIF_ALARMS";
          } DISABLE_SIF_ALARMS[1:1] = 1'h0;
    field { name="disable_hqm_alarms";  desc="Disable (hold) alarms from hqm_core.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_CTL.DISABLE_HQM_ALARMS";
          } DISABLE_HQM_ALARMS[0:0] = 1'h0;
};

enum enum_smon_function {
   mode00 = 3'h0 { desc = "Free running function. Trigger to accumulate the value into the engine SMON_COUNT when an event is valid."; };
   mode01 = 3'h1 { desc = "Free running function. Trigger to accumulate a fixed value of 1 into the engine SMON_COUNT when an event is valid."; };
   mode02 = 3'h2 { desc = "Max function. Trigger to update max value when an event is valid and larger than the current value stored in the engine SMON_COUNT."; };
   mode03 = 3'h3 { desc = "Timestamp First Mode. Capture the timer value on the first occurance of an event. Need to write CONTROL01 to reset"; };
   mode04 = 3'h4 { desc = "Timestamp Mode. Capture the timer value on every occurance of an event. "; };
};

enum enum_smon_function_compare {
   mode00 = 1'h0 { desc = "Compare mode disabled"; };
   mode01 = 1'h1 { desc = "Compare mode enabled"; };
};

enum enum_smon_prescale {
   mode00 = 5'h00 { desc = "Increment timer every      1 clock"; };
   mode01 = 5'h01 { desc = "Increment timer every      2 clocks"; };
   mode02 = 5'h02 { desc = "Increment timer every      4 clocks"; };
   mode03 = 5'h03 { desc = "Increment timer every      8 clocks"; };
   mode04 = 5'h04 { desc = "Increment timer every     16 clocks"; };
   mode05 = 5'h05 { desc = "Increment timer every     32 clocks"; };
   mode06 = 5'h06 { desc = "Increment timer every     64 clocks"; };
   mode07 = 5'h07 { desc = "Increment timer every    128 clocks"; };
   mode08 = 5'h08 { desc = "Increment timer every    256 clocks"; };
   mode09 = 5'h09 { desc = "Increment timer every    512 clocks"; };
   mode10 = 5'h0a { desc = "Increment timer every   1024 clocks"; };
   mode11 = 5'h0b { desc = "Increment timer every   2048 clocks"; };
   mode12 = 5'h0c { desc = "Increment timer every   4096 clocks"; };
   mode13 = 5'h0d { desc = "Increment timer every   8192 clocks"; };
   mode14 = 5'h0e { desc = "Increment timer every  16384 clocks"; };
   mode15 = 5'h0f { desc = "Increment timer every  32768 clocks"; };
   mode16 = 5'h10 { desc = "Increment timer every  65536 clocks"; };
   mode17 = 5'h11 { desc = "Increment timer every 131072 clocks"; };
   mode18 = 5'h12 { desc = "Increment timer every 262144 clocks"; };
   mode19 = 5'h13 { desc = "Increment timer every 524288 clocks"; };
};

enum enum_smon_mode {
   mode00 = 4'h0 { desc = "Independant Mode. SMON0_COUNT & SMON1_COUNT operate independantly as their function is configured."; };
   mode01 = 4'h1 { desc = "Average Latency Mode. SMON0 trigger starts timer & SMON1 trigger stops timer. SMON0_COUNT accumulates occurances and SMON1_COUNT accumulates timer values. For multiple stop for a single start, accumulate  start_to_stop1,  start_to_stop1stop2 ..."; };
   mode02 = 4'h2 { desc = "MinMax Latency Mode,. SMON0 trigger starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the minimum timer value and SMON1_COUNT maintains the maximum timer value"; };
   mode03 = 4'h3 { desc = "Average Mode.   SMON0 trigger increments SMON0_COUNT and the value is accumulated in SMON1_COUNT. SMON1 events are disabled."; };
   mode04 = 4'h4 { desc = "Average Lantecy Mode 2. same as mode01, but only accumulate the first start_to_stop1 if there are multiple stop for each start"; };
   mode05 = 4'h5 { desc = "Average Latency Mode 3. same as mode01, but accumualte the incremental start_to_stop1, stop1_to_stop2... if there are multiple stop for each start"; };
};

enum enum_smon_event {
   event34 = 8'd34 { desc="Write buffer SCH CLR drops; comp=CQ"; };
   event33 = 8'd33 { desc="Write buffer SCH SM drops; comp=CQ"; };
   event32 = 8'd32 { desc="FIFO afulls; MUST use mask; comp={[6]=hcw_enq, [5]=hcw_sch, [4]=sch_out, [3]=cfg_rx, [2]=cwdi_rx, [1]=hqm_alarm_rx, [0]=sif_alarm}"; };
   event31 = 8'd31 { desc="Coalesced wbuf writes - Set when sch write beat is coalesced into previous write"; };
   event30 = 8'd30 { desc="Clocks hqm is idle"; };
   event29 = 8'd29 { desc="TI Posted header backpressure"; };
   event28 = 8'd28 { desc="TI Posted data backpressure"; };
   event27 = 8'd27 { desc="CQ Occ ints egress->wbuf; comp={[6]=is_ldb, [5:0]=cq}"; };
   event26 = 8'd26 { desc="MSI/MSI-X ints; comp=data"; };
   event25 = 8'd25 { desc="CSR SB ECC errors"; };
   event24 = 8'd24 { desc="CSR MB ECC errors"; };
   event23 = 8'd23 { desc="WBUF SB ECC errors; comp={[3]=255:192, [2]=191:128, [1]=127:64, [0]=63:0}"; };
   event22 = 8'd22 { desc="WBUF MB ECC errors; comp={[3]=255:192, [2]=191:128, [1]=127:64, [0]=63:0}"; };
   event21 = 8'd21 { desc="INGRESS SB ECC errors; comp={[4]=hcw[127:64], [3]=hcw[63:0], [2]=ldb_vqid2qid, [1]=dir_vqid2qid, [0]=dir_vpp2pp}"; };
   event20 = 8'd20 { desc="INGRESS MB ECC errors; comp={[2]=ldb_vqid2qid, [1]=dir_vqid2qid, [0]=dir_vpp2pp}"; };
   event19 = 8'd19 { desc="DB input stalls; MUST use mask; comp={[4]=cq_occ [3]=hcw_sched, [2]=ims_msix, [1]=sys_alarm, [0]=hcw_enq}"; };
   event18 = 8'd18 { desc="DB output stalls; MUST use mask; comp={[4]=cq_occ [3]=hcw_sched, [2]=ims_msix, [1]=sys_alarm, [0]=hcw_enq}"; };
   event17 = 8'd17 { desc="DB output takens (using input takens for output DBs); MUST use mask; comp={[4]=cq_occ [3]=hcw_sched, [2]=ims_msix, [1]=sys_alarm, [0]=hcw_enq}"; }; 
   event16 = 8'd16 { desc="egress->wbuf hcw sched; comp={[31]=pasidtlp[22], [30:28]=pasidtlp[2:0], [28]=is_ldb [27]=ro, [26]=is_ldb [25:20]=cq [19:18]=wbo, [17:16]=cq_wptr[1:0], [15]=error, [14]=ro, [13:10]=vf, [9]=is_pf [8]=hcw_v, [7]=int_v, [6]=int_d.is_ldb, [5:0]=int_d.cq"; };
   event15 = 8'd15 { desc="ingress alarms; comp={[12]=is_pf_port, [11]=is_ldb_port, [10:7]=vf, [6:0]=vpp}"; };
   event14 = 8'd14 { desc="ingress alarms; comp=hcw[127:96]"; };
   event13 = 8'd13 { desc="ingress alarms; comp=hcw[95:64]"; };
   event12 = 8'd12 { desc="ims_msix writes"; };
   event11 = 8'd11 { desc="cq wd alarms; comp={[7]=is_ldb, [6:0]=cq}"; };
   event10 = 8'd10 { desc="sif alarms; comp={[24:21]=unit, [20:15]=aid, [14:13]=cls, [12:10]=msix_map, [9:8]=rtype, [7:0]=rid}"; };
   event9  = 8'd9  { desc="hqm_core alarms; comp={[24:21]=unit, [20:15]=aid, [14:13]=cls, [12:10]=msix_map, [9:8]=rtype, [7:0]=rid}"; };
   event8  = 8'd8  { desc="system alarms; comp={[24:21]=unit, [20:15]=aid, [14:13]=cls, [12:10]=msix_map, [9:8]=rtype, [7:0]=rid}"; };
   event7  = 8'd7  { desc="hqm_core cq_occ alarm ints; comp={[7]=is_ldb, [6:0]=cq}"; };
   event6  = 8'd6  { desc="wbuf->mstr; val=num_hcws; comp={[21:19]=num_hcws, [18]=invalid, [17]=ro, [16:12]=len, [11]=cq_v, [10]=cq_ldb, [9:6]=cq, [3:2]=tc_sel, [1:0]=src (1=sch, 2=msix, 3=ai)}"; };
   event5  = 8'd5  { desc="hqm_core->egress hcw sched; val=bytes; comp=hcw[127:96]"; };
   event4  = 8'd4  { desc="hqm_core->egress hcw sched; val=bytes; comp=hcw[95:64]"; };
   event3  = 8'd3  { desc="hqm_core->egress hcw sched; comp={[30]=par, [29]=spare, [28]=cq_is_ldb, [27:26]=cong_mgmt, [25:24]=wbo,
                           [23]=ign_cq_depth, [22:10]=cq_wptr, [9:2]=cq, [1:0]=hcw_par}"; };
   event2  = 8'd2  { desc="ingress->hqm_core hcw enq; val=bytes; comp=hcw[127:96]"; };
   event1  = 8'd1  { desc="ingress->hqm_core hcw enq; val=bytes; comp=hcw[95:64]"; };
   event0  = 8'd0  { desc="ingress->hqm_core hcw enq; comp={[27:26]=hcw_par, [25]=par, [24]=cl, [23:19]=vas [18]=pp_is_ldb, [17:10]=pp,
                           [17:10]=pp, [9]=qe_is_ldb, [8:1]=qid, [0]=ins_ts}"; };
};

enum enum_perf_smon_event {
   SIF_HCW_out = 8'd1 { desc="wbuf->SIF HCWs"; };
   SIF_HCW_in  = 8'd0 { desc="SIF->ingress HCWs"; };
};

regfile perf_smon_rf {

 reg perf_smon_configuration0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Perf Aw Smon Configuration0";
    desc = "SMON Configuration0: This is used to configure the operation of the 2 internal counters in the SMON";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;
    donttest = true;

    field { name="version";                  desc="Version";
            PowerWell="vcccfn_gated"; AccessType="RO";
            ValRTLSignal = "NoSignal";
          } VERSION[31:30] = 2'h1;
    field { name="timer_prescale";           desc="Timer prescale"; encode=enum_smon_prescale;
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[28:24]";
          } TIMER_PRESCALE[28:24] = 5'h00;
    field { name="stattimerovfl";            desc="A value of '1' signifies timer overflow, or timer>maxvalue.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[22:22]";
          } STATTIMEROVFL[22:22] = 1'h0;
    field { name="inttimerovfl";             desc="Configure to interrupt on timer overflow or timer>maxvalue";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[21:21]";
          } INTTIMEROVFL[21:21] = 1'h0;
    field { name="stoptimerovfl";            desc="Configure to stop on timer overflow or timer>maxvalue";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[20:20]";
          } STOPTIMEROVFL[20:20] = 1'h0;
    field { name="statcounter1ovfl";         desc="A value of '1' signifies counter1 overflow.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[19:19]";
          } STATCOUNTER1OVFL[19:19] = 1'h0;
    field { name="statcounter0ovfl";         desc="A value of '1' signifies counter0 overflow.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[18:18]";
          } STATCOUNTER0OVFL[18:18] = 1'h0;
    field { name="intcounterovfl";           desc="Configure to interupt on counter0 or counter1 overflow";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[17:17]";
          } INTCOUNTEROVFL[17:17] = 1'h0;
    field { name="stopcounterovfl";          desc="Configure to stop on counter0 or counter1 overflow";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[16:16]";
          } STOPCOUNTEROVFL[16:16] = 1'h0;
    field { name="smon_mode";                desc="SMON mode"; encode=enum_smon_mode;
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[15:12]";
          } SMON_MODE[15:12]=4'h0;
    field { name="smon1_function_compare";   desc="SMON1 function compare"; encode=enum_smon_function_compare;
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[11:11]";
          } SMON1_FUNCTION_COMPARE[11:11]=1'h0;
    field { name="smon1_function";           desc="SMON1 function"; encode=enum_smon_function;
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[10:8]";
          } SMON1_FUNCTION[10:8]=3'h0;
    field { name="smon0_function_compare";   desc="SMON0 function compare"; encode=enum_smon_function_compare;
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[7:7]";
          } SMON0_FUNCTION_COMPARE[7:7]=1'h0;
    field { name="smon0_function";           desc="SMON0 function"; encode=enum_smon_function;
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[6:4]";
          } SMON0_FUNCTION[6:4]=3'h0;
    field { name="smon_enable";              desc="Enable the SMON counters";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg0_q[0:0]";
          } SMON_ENABLE[0:0] = 1'h0;
 };

 reg perf_smon_configuration1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Perf Aw Smon Configuration1";
    desc = "SMON Configuration1: This is used to configure the operation of the 2 internal counters in the SMON";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="rsvd"; desc="Reserved";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg1_q[31:16]";
          } RSVD[31:16] = 16'h0000;
    field { name="mode1"; desc="Select input signal for SMON1 engine"; encode=enum_perf_smon_event;
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg1_q[15:8]";
          } MODE1[15:8] = 8'h00;
    field { name="mode0"; desc="Select input signal for SMON0 engine"; encode=enum_perf_smon_event;
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cfg1_q[7:0]";
          } MODE0[ 7:0] = 8'h00;
 };

 reg perf_smon_compare0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Perf Aw Smon Compare0";
    desc = "SMON Compare0: This is the compare register in the SMON0 engine used with the compare function";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="compare0"; desc="Compare0 value";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_comp0_q[31:0]";
          } COMPARE0[31:0] = 32'h00000000;
 };

 reg perf_smon_compare1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Perf Aw Smon Compare1";
    desc = "SMON Compare1: This is the compare register in the SMON1 engine used with the compare function";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="compare1"; desc="Compare1 value";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_comp1_q[31:0]";
          } COMPARE1[31:0] = 32'h00000000;
 };

 reg perf_smon_activitycounter0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Perf Aw Smon Activitycounter0";
    desc = "SMON Counter0: This is the first counter in SMON configured to count events by the SMON configuration register";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="counter0"; desc="Counter0 value";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cnt0_q[31:0]";
          } COUNTER0[31:0] = 32'h00000000;
 };

 reg perf_smon_activitycounter1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Perf Aw Smon Activitycounter1";
    desc = "SMON Counter1: This is the second counter in SMON configured to count events by the SMON configuration register";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="counter1"; desc="Counter1 value";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_cnt1_q[31:0]";
          } COUNTER1[31:0] = 32'h00000000;
 };

 reg perf_smon_timer_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Perf Aw Smon Timer";
    desc = "SMON Timer: This is the SMON timer, it is a running counter configured with a prescale parameter in the configuration register. The maxvalue is used to terminate counting.";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="timer_val"; desc="Timer value";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_timer_q[31:0]";
          } TIMER_VAL[31:0] = 32'h00000000;
 };

 reg perf_smon_maximum_timer_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Perf Aw Smon Maximum Timer";
    desc = "SMON Maximum Timer: This is the timer maxvalue used to provide a value to terminate counting.";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="maxvalue"; desc="Maximum timer value";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_maxval_q[31:0]";
          } MAXVALUE[31:0] = 32'h00000000;
 };

 reg perf_smon_comp_mask0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Perf Aw Smon Comp Mask0";
    desc = "SMON Compare Mask0: This value is ANDed with the SMON's compare 0 values before they are compared.";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="comp_mask0"; desc="Compare Mask0";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_mask0_q[31:0]";
          } COMP_MASK0[31:0] = 32'hffffffff;
 };

 reg perf_smon_comp_mask1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Perf Aw Smon Comp Mask1";
    desc = "SMON Compare Mask1: This value is ANDed with the SMON's compare 1 values before they are compared.";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="comp_mask1"; desc="Compare Mask1";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_smon2.reg_smon_mask1_q[31:0]";
          } COMP_MASK1[31:0] = 32'hffffffff;
 };

 perf_smon_configuration0_r       PERF_SMON_CONFIGURATION0      @0x00;
 perf_smon_configuration1_r       PERF_SMON_CONFIGURATION1      @0x04;
 perf_smon_compare0_r             PERF_SMON_COMPARE0            @0x08;
 perf_smon_compare1_r             PERF_SMON_COMPARE1            @0x0c;
 perf_smon_activitycounter0_r     PERF_SMON_ACTIVITYCOUNTER0    @0x10;
 perf_smon_activitycounter1_r     PERF_SMON_ACTIVITYCOUNTER1    @0x14;
 perf_smon_timer_r                PERF_SMON_TIMER               @0x18;
 perf_smon_maximum_timer_r        PERF_SMON_MAXIMUM_TIMER       @0x1c;
 perf_smon_comp_mask0_r           PERF_SMON_COMP_MASK0          @0x20;
 perf_smon_comp_mask1_r           PERF_SMON_COMP_MASK1          @0x24;

};

regfile system_aw_smon_rf {

 reg system_aw_smon_configuration0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_2";
    name = "System Aw Smon Configuration0";
    desc = "Non-default settings may cause UNDEFINED behavior. SMON Configuration0: This is used to configure the operation of the 2 internal counters in the SMON";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;
    donttest = true;

    field { name="version";                  desc="Version";
            PowerWell="vcccfn_gated"; AccessType="RO";
            ValRTLSignal = "NoSignal";
          } VERSION[31:30] = 2'h1;
    field { name="timer_prescale";           desc="Timer prescale"; encode=enum_smon_prescale;
            PowerWell="vcccfn_gated"; AccessType="RW";
          } TIMER_PRESCALE[28:24] = 5'h00;
    field { name="stattimerovfl";            desc="A value of '1' signifies timer overflow, or timer>maxvalue.";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } STATTIMEROVFL[22:22] = 1'h0;
    field { name="inttimerovfl";             desc="Configure to interrupt on timer overflow or timer>maxvalue";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } INTTIMEROVFL[21:21] = 1'h0;
    field { name="stoptimerovfl";            desc="Configure to stop on timer overflow or timer>maxvalue";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } STOPTIMEROVFL[20:20] = 1'h0;
    field { name="statcounter1ovfl";         desc="A value of '1' signifies counter1 overflow.";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } STATCOUNTER1OVFL[19:19] = 1'h0;
    field { name="statcounter0ovfl";         desc="A value of '1' signifies counter0 overflow.";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } STATCOUNTER0OVFL[18:18] = 1'h0;
    field { name="intcounterovfl";           desc="Configure to interupt on counter0 or counter1 overflow";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } INTCOUNTEROVFL[17:17] = 1'h0;
    field { name="stopcounterovfl";          desc="Configure to stop on counter0 or counter1 overflow";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } STOPCOUNTEROVFL[16:16] = 1'h0;
    field { name="smon_mode";                desc="SMON mode"; encode=enum_smon_mode;
            PowerWell="vcccfn_gated"; AccessType="RW";
          } SMON_MODE[15:12]=4'h0;
    field { name="smon1_function_compare";   desc="SMON1 function compare"; encode=enum_smon_function_compare;
            PowerWell="vcccfn_gated"; AccessType="RW";
          } SMON1_FUNCTION_COMPARE[11:11]=1'h0;
    field { name="smon1_function";           desc="SMON1 function"; encode=enum_smon_function;
            PowerWell="vcccfn_gated"; AccessType="RW";
          } SMON1_FUNCTION[10:8]=3'h0;
    field { name="smon0_function_compare";   desc="SMON0 function compare"; encode=enum_smon_function_compare;
            PowerWell="vcccfn_gated"; AccessType="RW";
          } SMON0_FUNCTION_COMPARE[7:7]=1'h0;
    field { name="smon0_function";           desc="SMON0 function"; encode=enum_smon_function;
            PowerWell="vcccfn_gated"; AccessType="RW";
          } SMON0_FUNCTION[6:4]=3'h0;
    field { name="smon_enable";              desc="Enable the SMON counters";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } SMON_ENABLE[0:0] = 1'h0;
 };


 reg system_aw_smon_configuration1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_2";
    name = "System Aw Smon Configuration1";
    desc = "Non-default settings may cause UNDEFINED behavior. SMON Configuration1: This is used to configure the operation of the 2 internal counters in the SMON";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name="rsvd"; desc="Reserved";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } RSVD[31:16] = 16'h0000;
    field { name="mode1"; desc="Select input signal for SMON1 engine"; encode=enum_smon_event;
            PowerWell="vcccfn_gated"; AccessType="RW";
          } MODE1[15:8] = 8'h00;
    field { name="mode0"; desc="Select input signal for SMON0 engine"; encode=enum_smon_event;
            PowerWell="vcccfn_gated"; AccessType="RW";
          } MODE0[ 7:0] = 8'h00;
 };

 reg system_aw_smon_compare0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_2";
    name = "System Aw Smon Compare0";
    desc = "Non-default settings may cause UNDEFINED behavior. SMON Compare0: This is the compare register in the SMON0 engine used with the compare function";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name="compare0"; desc="Compare0 value";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } COMPARE0[31:0] = 32'h00000000;
 };

 reg system_aw_smon_compare1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_2";
    name = "System Aw Smon Compare1";
    desc = "Non-default settings may cause UNDEFINED behavior. SMON Compare1: This is the compare register in the SMON1 engine used with the compare function";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name="compare1"; desc="Compare1 value";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } COMPARE1[31:0] = 32'h00000000;
 };

 reg system_aw_smon_activitycounter0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_2";
    name = "System Aw Smon Activitycounter0";
    desc = "Non-default settings may cause UNDEFINED behavior. SMON Counter0: This is the first counter in SMON configured to count events by the SMON configuration register";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name="counter0"; desc="Counter0 value";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } COUNTER0[31:0] = 32'h00000000;
 };

 reg system_aw_smon_activitycounter1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_2";
    name = "System Aw Smon Activitycounter1";
    desc = "Non-default settings may cause UNDEFINED behavior. SMON Counter1: This is the second counter in SMON configured to count events by the SMON configuration register";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name="counter1"; desc="Counter1 value";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } COUNTER1[31:0] = 32'h00000000;
 };

 reg system_aw_smon_timer_r {
  HqmClassification="DEBUG_ONLY_REG_NA_2";
    name = "System Aw Smon Timer";
    desc = "Non-default settings may cause UNDEFINED behavior. SMON Timer: This is the SMON timer, it is a running counter configured with a prescale parameter in the configuration register. The maxvalue is used to terminate counting.";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name="timer_val"; desc="Timer value";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } TIMER_VAL[31:0] = 32'h00000000;
 };

 reg system_aw_smon_maximum_timer_r {
  HqmClassification="DEBUG_ONLY_REG_NA_2";
    name = "System Aw Smon Maximum Timer";
    desc = "Non-default settings may cause UNDEFINED behavior. SMON Maximum Timer: This is the timer maxvalue used to provide a value to terminate counting.";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name="maxvalue"; desc="Maximum timer value";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } MAXVALUE[31:0] = 32'h00000000;
 };

 reg system_aw_smon_comp_mask0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_2";
    name = "System Aw Smon Comp Mask0";
    desc = "Non-default settings may cause UNDEFINED behavior. SMON Compare Mask0: This value is ANDed with the SMON's compare 0 values before they are compared.";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name="comp_mask0"; desc="Compare Mask0";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } COMP_MASK0[31:0] = 32'hffffffff;
 };

 reg system_aw_smon_comp_mask1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_2";
    name = "System Aw Smon Comp Mask1";
    desc = "Non-default settings may cause UNDEFINED behavior. SMON Compare Mask1: This value is ANDed with the SMON's compare 1 values before they are compared.";
    regwidth = 32;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;

    field { name="comp_mask1"; desc="Compare Mask1";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } COMP_MASK1[31:0] = 32'hffffffff;
 };

 system_aw_smon_configuration0_r       AW_SMON_CONFIGURATION0      @0x00;
 system_aw_smon_configuration1_r       AW_SMON_CONFIGURATION1      @0x04;
 system_aw_smon_compare0_r             AW_SMON_COMPARE0            @0x08;
 system_aw_smon_compare1_r             AW_SMON_COMPARE1            @0x0c;
 system_aw_smon_activitycounter0_r     AW_SMON_ACTIVITYCOUNTER0    @0x10;
 system_aw_smon_activitycounter1_r     AW_SMON_ACTIVITYCOUNTER1    @0x14;
 system_aw_smon_timer_r                AW_SMON_TIMER               @0x18;
 system_aw_smon_maximum_timer_r        AW_SMON_MAXIMUM_TIMER       @0x1c;
 system_aw_smon_comp_mask0_r           AW_SMON_COMP_MASK0          @0x20;
 system_aw_smon_comp_mask1_r           AW_SMON_COMP_MASK1          @0x24;

};

reg sys_idle_status_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Sys Idle Status";
    desc = "System Idle Status";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;
    donttest = true;    // not all bits necessarily idle when accessing

    field { name = "Pba Idle";  desc = "Bits are set in the MSI-X or IMS pending vectors, indicating interrupts are not idle";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.PBA_IDLE";
          } PBA_IDLE [5:5] = 1'b1;
    field { name = "Int Idle";       desc = "Interrupt idle";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.INT_IDLE";
          } INT_IDLE [4:4] = 1'b1;
    field { name = "Alarm Idle";     desc = "Alarm idle";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.ALARM_IDLE";
          } ALARM_IDLE [3:3] = 1'b1;
    field { name = "Wbuf Idle";      desc = "Write buffer idle";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.WBUF_IDLE";
          } WBUF_IDLE [2:2] = 1'b1;
    field { name = "Egress Idle";    desc = "Egress idle";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.EGRESS_IDLE";
          } EGRESS_IDLE [1:1] = 1'b1;
    field { name = "Ingress Idle";   desc = "Ingress idle";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.SYS_IDLE_STATUS.INGRESS_IDLE";
          } INGRESS_IDLE [0:0] = 1'b1;
};

reg alarm_status_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Alarm Status";
    desc = "Alarm Status";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;

    field { name = "Ims P2 V";    desc = "IMS pipeline stage 2 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.IMS_P2_V";
          } IMS_P2_V      [8:8] = 1'b0;
    field { name = "Ims P1 V";    desc = "IMS pipeline stage 1 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.IMS_P1_V";
          } IMS_P1_V      [7:7] = 1'b0;
    field { name = "Ims P0 V";    desc = "IMS pipeline stage 0 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.IMS_P0_V";
          } IMS_P0_V      [6:6] = 1'b0;
    field { name = "Msix P2 V";   desc = "MSI-X pipeline stage 2 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.MSIX_P2_V";
          } MSIX_P2_V   [5:5] = 1'b0;
    field { name = "Msix P1 V";   desc = "MSI-X pipeline stage 1 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.MSIX_P1_V";
          } MSIX_P1_V   [4:4] = 1'b0;
    field { name = "Msix P0 V";   desc = "MSI-X pipeline stage 0 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.MSIX_P0_V";
          } MSIX_P0_V   [3:3] = 1'b0;
    field { name = "Cq Occ P2 V"; desc = "CQ occupancy pipeline stage 2 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.CQ_OCC_P2_V";
          } CQ_OCC_P2_V [2:2] = 1'b0;
    field { name = "Cq Occ P1 V"; desc = "CQ occupancy pipeline stage 1 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.CQ_OCC_P1_V";
          } CQ_OCC_P1_V [1:1] = 1'b0;
    field { name = "Cq Occ P0 V"; desc = "CQ occupancy pipeline stage 0 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_STATUS.CQ_OCC_P0_V";
          } CQ_OCC_P0_V [0:0] = 1'b0;
};

reg ingress_status_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Ingress Status";
    desc = "Ingress Status";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;

    field { name = "P8 V";   desc = "Pipeline stage 8 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P8_V";
          } P8_V [8:8] = 1'b0;
    field { name = "P7 V";   desc = "Pipeline stage 7 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P7_V";
          } P7_V [7:7] = 1'b0;
    field { name = "P6 V";   desc = "Pipeline stage 6 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P6_V";
          } P6_V [6:6] = 1'b0;
    field { name = "P5 V";   desc = "Pipeline stage 5 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P5_V";
          } P5_V [5:5] = 1'b0;
    field { name = "P4 V";   desc = "Pipeline stage 4 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P4_V";
          } P4_V [4:4] = 1'b0;
    field { name = "P3 V";   desc = "Pipeline stage 3 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P3_V";
          } P3_V [3:3] = 1'b0;
    field { name = "P2 V";   desc = "Pipeline stage 2 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P2_V";
          } P2_V [2:2] = 1'b0;
    field { name = "P1 V";   desc = "Pipeline stage 1 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P1_V";
          } P1_V [1:1] = 1'b0;
    field { name = "P0 V";   desc = "Pipeline stage 0 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_STATUS.P0_V";
          } P0_V [0:0] = 1'b0;
};

reg egress_status_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Egress Status";
    desc = "Egress Status";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;
    donttest = true;    // Some of these values are not reset and have Xs when read. It is okay to not not do a reset test of this register.

    field { name = "P5 Hcw V";       desc = "SCH output has HCW valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.P5_HCW_V";
          } P5_HCW_V  [7:7] = 1'b0;
    field { name = "P5 Int V";       desc = "SCH output has interrupt valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.P5_INT_V";
          } P5_INT_V  [6:6] = 1'b0;
    field { name = "Sch P5 V";       desc = "SCH pipeline stage 5 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P5_V";
          } SCH_P5_V  [5:5] = 1'b0;
    field { name = "Sch P4 V";       desc = "SCH pipeline stage 4 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P4_V";
          } SCH_P4_V  [4:4] = 1'b0;
    field { name = "Sch P3 V";       desc = "SCH pipeline stage 3 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P3_V";
          } SCH_P3_V  [3:3] = 1'b0;
    field { name = "Sch P2 V";       desc = "SCH pipeline stage 2 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P2_V";
          } SCH_P2_V  [2:2] = 1'b0;
    field { name = "Sch P1 V";       desc = "SCH pipeline stage 1 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P1_V";
          } SCH_P1_V  [1:1] = 1'b0;
    field { name = "Sch P0 V";       desc = "SCH pipeline stage 0 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_STATUS.SCH_P0_V";
          } SCH_P0_V  [0:0] = 1'b0;
};

reg wbuf_status_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Wbuf Status";
    desc = "Write Buffer Status";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;
    donttest = true;    // not all fields know at reset

    field { name = "Sch P2 Sop";    desc = "Bottom of pipeline start of packet";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_SOP";
          } SCH_P2_SOP     [26:26] = 1'h0;
    field { name = "Sch P2 Int V";  desc = "Bottom of pipeline interrupt valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_INT_V";
          } SCH_P2_INT_V   [25:25] = 1'h0;
    field { name = "Sch P2 Data V"; desc = "Bottom of pipeline data valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_DATA_V";
          } SCH_P2_DATA_V  [24:24] = 1'h0;
    field { name = "Sch P2 Hdr V";  desc = "Bottom of pipeline header valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_HDR_V";
          } SCH_P2_HDR_V   [23:23] = 1'h0;
    field { name = "Sch Sm State";  desc = "SCH output state machine state";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_SM_STATE";
          } SCH_SM_STATE   [22:18] = 5'h1;
    field { name = "Pd Fifo Afull"; desc = "Posted data FIFO alomost full";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.PD_FIFO_AFULL";
          } PD_FIFO_AFULL  [17:17] = 1'b0;
    field { name = "Ph Fifo Afull"; desc = "Posted header FIFO alomost full";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.PH_FIFO_AFULL";
          } PH_FIFO_AFULL  [16:16] = 1'b0;
    field { name = "Sch Cq";        desc = "SCH input CQ               ";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_CQ";
          } SCH_CQ         [15: 8] = 8'h00;
    field { name = "Sch Beat";      desc = "SCH input beat number";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_BEAT";
          } SCH_BEAT       [ 7: 6] = 2'h0;
    field { name = "Sch Ldb";       desc = "SCH input is load balanced";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_LDB";
          } SCH_LDB        [ 5: 5] = 1'b0;
    field { name = "Sch Hcw V";     desc = "SCH input HCW valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_HCW_V";
          } SCH_HCW_V      [ 4: 4] = 1'b0;
    field { name = "Sch Int V";     desc = "SCH input interrupt valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_INT_V";
          } SCH_INT_V      [ 3: 3] = 1'b0;
    field { name = "Sch P2 V";      desc = "SCH pipeline stage 2 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P2_V";
          } SCH_P2_V       [ 2: 2] = 1'b0;
    field { name = "Sch P1 V";      desc = "SCH pipeline stage 1 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P1_V";
          } SCH_P1_V       [ 1: 1] = 1'b0;
    field { name = "Sch P0 V";      desc = "SCH pipeline stage 0 valid";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS.SCH_P0_V";
          } SCH_P0_V       [ 0: 0] = 1'b0;
};

reg wbuf_status2_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Wbuf Status2";
    desc = "Write Buffer Status2";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;
    donttest = true;    // not all fields know at reset

    field { name = "Opt In Prog Cq";  desc = "DIR CQ currently being optimized";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_IN_PROG_CQ";
          } OPT_IN_PROG_CQ [ <%=$hqm_params::DIR_CQ_WIDTH+10%> : 11] = <%=$hqm_params::DIR_CQ_WIDTH%>'h0;
    field { name = "Opt In Prog";     desc = "DIR CQ optimization in progress";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_IN_PROG";
          } OPT_IN_PROG     [10:10] = 1'b0;
    field { name = "Opt Err";         desc = "DIR CQ optimization error";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_ERR";
          } OPT_ERR         [ 9: 9] = 1'b0;
    field { name = "Opt Data Valid";  desc = "DIR CQ optimization data beat valid state";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.OPT_DATA_VALID";
          } OPT_DATA_VALID  [ 8: 5] = 4'h0;
    field { name = "Cq Occ Int Busy"; desc = "CQ occupancy interrupt busy";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.CQ_OCC_INT_BUSY";
          } CQ_OCC_INT_BUSY [ 4: 4] = 1'b0;
    field { name = "Arb Hold";        desc = "Arbiter hold";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.ARB_HOLD";
          } ARB_HOLD        [ 3: 3] = 1'b0;
    field { name = "Arb Winner";      desc = "Arbiter winner";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.ARB_WINNER";
          } ARB_WINNER      [ 2: 2] = 1'b0;
    field { name = "Arb Reqs";        desc = "Arbiter requests";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_STATUS2.ARB_REQS";
          } ARB_REQS        [ 1: 0] = 2'h0;
};

reg wbuf_debug_r {
  HqmClassification="STATUS_REG_NA_1";
    name = "Wbuf Debug";
    desc = "Write Buffer Debug";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;
    donttest = true;    // not all fields know at reset

    field { name = "Sch P2 Hdr Q Beats"; desc = "sch_p2_hdr_q_beats";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_BEATS";
          } SCH_P2_HDR_Q_BEATS     [28:26] = 3'h0;
    field { name = "Sch P2 Hdr Q Ldb";     desc = "sch_p2_hdr_q_ldb";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_LDB";
          } SCH_P2_HDR_Q_LDB       [25:25] = 1'b0;
    field { name = "Sch P2 Hdr Q Is PF";   desc = "sch_p2_hdr_q_is_pf";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_IS_PF";
          } SCH_P2_HDR_Q_IS_PF     [24:24] = 1'b0;
    field { name = "Sch P2 HDR Q VF";      desc = "sch_p2_hdr_q_vf";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_VF";
          } SCH_P2_HDR_Q_VF        [23:20] = 4'h0;
    field { name = "Sch P2 Hold";          desc = "sch_p2_hold";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HOLD";
          } SCH_P2_HOLD            [19:19] = 1'b0;
    field { name = "Sch P2 Load";          desc = "sch_p2_load";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_LOAD";
          } SCH_P2_LOAD            [18:18] = 1'b0;
    field { name = "Sch P2 V Q";           desc = "sch_p2_v_q";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_V_Q";
          } SCH_P2_V_Q             [17:17] = 1'b0;
    field { name = "Sch P2 Hdr Q Data V";  desc = "sch_p2_hdr_q_data_v";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_DATA_V";
          } SCH_P2_HDR_Q_DATA_V    [16:16] = 1'b0;
    field { name = "Sch P2 Hdr Q Int V";   desc = "sch_p2_hdr_q_int_v";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_INT_V";
          } SCH_P2_HDR_Q_INT_V     [15:15] = 1'b0;
    field { name = "Sch P2 Hdr Q Sop";     desc = "sch_p2_hdr_q_sop";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_SOP";
          } SCH_P2_HDR_Q_SOP       [14:14] = 1'b0;
    field { name = "Sch P2 Hdr Q Eop";     desc = "sch_p2_hdr_q_eop";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_P2_HDR_Q_EOP";
          } SCH_P2_HDR_Q_EOP       [13:13] = 1'b0;
    field { name = "Sch Hdr V";            desc = "sch_hdr_v";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_HDR_V";
          } SCH_HDR_V              [12:12] = 1'b0;
    field { name = "Sch Data V";           desc = "sch_data_v";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_DATA_V";
          } SCH_DATA_V             [11:11] = 1'b0;
    field { name = "Sch Data First";       desc = "sch_data_first";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_DATA_FIRST";
          } SCH_DATA_FIRST         [10:10] = 1'b0;
    field { name = "Sch Data Last";        desc = "sch_data_last";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_DATA_LAST";
          } SCH_DATA_LAST          [9:9] = 1'b0;
    field { name = "Cq Occ Int Busy";      desc = "cq_occ_int_busy";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.CQ_OCC_INT_BUSY";
          } CQ_OCC_INT_BUSY        [8:8] = 1'b0;
    field { name = "Phdr Fifo Afull Q";    desc = "phdr_fifo_afull_q";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.PHDR_FIFO_AFULL_Q";
          } PHDR_FIFO_AFULL_Q      [7:7] = 1'b0;
    field { name = "Pdata Fifo Afull Q";   desc = "pdata_fifo_afull_q";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.PDATA_FIFO_AFULL_Q";
          } PDATA_FIFO_AFULL_Q     [6:6] = 1'b0;
    field { name = "Ims Msix Arb Req";     desc = "ims_msix_arb_req";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.MSI_MSIX_ARB_REQ";
          } MSI_MSIX_ARB_REQ       [5:5] = 1'b0;
    field { name = "Sch Arb Req";          desc = "sch_arb_req";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.SCH_ARB_REQ";
          } SCH_ARB_REQ            [4:4] = 1'b0;
    field { name = "Arb Winner V";         desc = "arb_winner_v";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_WINNER_V";
          } ARB_WINNER_V           [3:3] = 1'b0;
    field { name = "Arb Winner";           desc = "arb_winner";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_WINNER";
          } ARB_WINNER             [2:2] = 1'b0;
    field { name = "Arb Hold Q";           desc = "arb_hold_q";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_HOLD_Q";
          } ARB_HOLD_Q             [1:1] = 1'b0;
    field { name = "Arb Winner Q";         desc = "arb_winner_q";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.WBUF_DEBUG.ARB_WINNER_Q";
          } ARB_WINNER_Q           [0:0] = 1'b0;
};

regfile hqm_system_attributes_rf {
        reg total_vf_r {
  HqmClassification="CONFIG_REG_NA_1";
                name = "Total Vf";
                desc = "Total VF";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Total Vf";
                        desc = "Total VF";
                        ParamRST = "TOTAL_VF_PARAM";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                        ValRTLSignal = "NoSignal"; } TOTAL_VF [31:0] = 32'd<%=$hqm_params::TOTAL_VF%>;
        };

        reg total_vas_r {
  HqmClassification="CONFIG_REG_NA_1";
                name = "Total Vas";
                desc = "Total VAS";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Total Vas";
                        desc = "Total VAS";
                        ParamRST = "TOTAL_VAS_PARAM";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                        ValRTLSignal = "NoSignal"; } TOTAL_VAS [31:0] = 32'd<%=$hqm_params::TOTAX_VAS%>;
        };

        reg total_ldb_ports_r {
  HqmClassification="CONFIG_REG_NA_1";
                name = "Total Ldb Ports";
                desc = "Total load balanced ports";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Total Ldb Ports";
                        desc = "Total load balanced ports";
                        ParamRST = "TOTAL_LDB_PORTS_PARAM";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                        ValRTLSignal = "NoSignal"; } TOTAL_LDB_PORTS [31:0] = 32'd<%=$hqm_params::TOTAL_LDB_PORTS%>;
        };

        reg total_dir_ports_r {
  HqmClassification="CONFIG_REG_NA_1";
                name = "Total Dir Ports";
                desc = "Total directed ports";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Total Dir Ports";
                        desc = "Total directed ports";
                        ParamRST = "TOTAL_DIR_PORTS_PARAM";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                        ValRTLSignal = "NoSignal"; } TOTAL_DIR_PORTS [31:0] = 32'd<%=$hqm_params::TOTAL_DIR_PORTS%>;
        };

        reg total_ldb_qid_r {
  HqmClassification="CONFIG_REG_NA_1";
                name = "Total Ldb Qid";
                desc = "Total load balanced qid";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Total Ldb Qid";
                        desc = "Total load balanced qid";
                        ParamRST = "TOTAL_LDB_QID_PARAM";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                        ValRTLSignal = "NoSignal"; } TOTAL_LDB_QID [31:0] = 32'd<%=$hqm_params::TOTAL_LDB_QID%>;
        };

        reg total_dir_qid_r {
  HqmClassification="CONFIG_REG_NA_1";
                name = "Total Dir Qid";
                desc = "Total directed qid";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Total Dir Qid";
                        desc = "Total directed qid";
                        ParamRST = "TOTAL_DIR_QID_PARAM";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                        ValRTLSignal = "NoSignal"; } TOTAL_DIR_QID [31:0] = 32'd<%=$hqm_params::TOTAL_DIR_QID%>;
        };

        reg total_credits_r {
  HqmClassification="CONFIG_REG_NA_1";
                name = "Total Credits";
                desc = "Total credits";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Total Credits";
                        desc = "Total credits";
                        ParamRST = "TOTAL_CREDITS_PARAM";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                        ValRTLSignal = "NoSignal"; } TOTAL_CREDITS [31:0] = 32'd<%=$hqm_params::TOTAL_CREDITS%>;
        };

        reg total_sn_regions_r {
  HqmClassification="CONFIG_REG_NA_1";
                name = "Total Sn Regions";
                desc = "Total sn regions";
                regwidth = 32;
                shared;
                Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
                Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
                Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
                IntelRsvd = false;

                field { name = "Group";
                        desc = "Total number of re-ordering function resources supported";
                        ParamRST = "TOTAL_SN_GROUP_PARAM";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                        ValRTLSignal = "NoSignal"; } GROUP[23:16] = 8'd<%=$hqm_params::TOTAL_SN_REGIONS_GROUP%>;
                field { name = "Slot";
                        desc = "Total number of slots within each group for the re-ordering control state for the QID.";
                        ParamRST = "TOTAL_SN_SLOT_PARAM";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                        ValRTLSignal = "NoSignal"; } SLOT[15:8]     = 8'd<%=$hqm_params::TOTAL_SN_REGIONS_SLOT%>;
                field { name = "Mode";
                        desc = "Number of QIDs and QID/SN assigned the slot. 0:16/64; 1:8/128; 2:4/256; 3:2/512; 4: 1/1024; 5-7:RSVD";
                        ParamRST = "TOTAL_SN_MODE_PARAM";
                        PowerWell="vcccfn_gated"; AccessType = "RO";
                        ValRTLSignal = "NoSignal"; } MODE[7:0]      = 8'd<%=$hqm_params::TOTAL_SN_REGIONS_MODE%>;
        };

        total_credits_r                 TOTAL_CREDITS           @0x000;

        total_ldb_qid_r                 TOTAL_LDB_QID           @0x004;

        total_dir_qid_r                 TOTAL_DIR_QID           @0x008;

        total_ldb_ports_r               TOTAL_LDB_PORTS         @0x00c;

        total_dir_ports_r               TOTAL_DIR_PORTS         @0x010;

        total_vas_r                     TOTAL_VAS               @0x014;

        total_sn_regions_r              TOTAL_SN_REGIONS        @0x018;

        total_vf_r                      TOTAL_VF                @0x01c;

};

reg msix_mode_r {
  HqmClassification="CONFIG_REG_NA_1";
    name = "Msix Mode";
    desc = "MSI-X Mode Register. Select normal or compressed CQ occupancy interrupt MSI-X handling.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "ims_polling"; desc = "IMS Polling Mode - If set, IMS interrupts are in polling mode, where the IMS writes
                    are sent to the programmed 64b address in the ai_addr_u/ai_addr_l IMS address registers and the pasid is set
                    to bits 31:12 of the ai_data IMS data register.  If not set, the IMS writes are to the address formed by
                    {12'hfee, ai_addr_l[19:2], 2'h0} and the pasid is forced to 0.";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_MODE.IMS_POLLING";
          } IMS_POLLING [1:1] = 1'h0;
    field { name = "Mode"; desc = "MSI-X Compressed Mode - 0=Utilize 64 CQ occupancy interrupts, 1=All CQ occupancy interrupts compressed to MSI-X 1";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_MODE.MODE";
          } MODE [0:0] = 1'h0;
};

reg msix_ack_r {
  HqmClassification="RUNTIMEARCHSTATE_REG_NA_1";
    name = "Msix Ack";
    desc = "MSI-X Acknowledge Register.  Bits are set when the associated MSI-X is sent out and can be cleared by software.
            If the msix_#_passthrough bit is not set but the msix_#_ack bit is set for the associated MSI-X, that MSI-X will
            not be sent out again until the msix_#_ack bit is cleared or the msix_#_passthrough bit is set. MSIX_1_ACK is only
            used when MSI-X Mode is set to compressed mode (MODE==1)";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Msix_1 Ack"; desc = "MSI-X 1 sent out and not yet acknowledged.";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_ACK.MSIX_1_ACK";
          } MSIX_1_ACK [1:1] = 1'b0;
    field { name = "Msix_0 Ack"; desc = "MSI-X 0 sent out and not yet acknowledged.";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_ACK.MSIX_0_ACK";
          } MSIX_0_ACK [0:0] = 1'b0;
};

reg msix_passthrough_r {
  HqmClassification="CONFIG_REG_NA_1";
    name = "Msix Passthrough";
    desc = "MSI-X Passthrough Register.  If a bit is set, the msix_#_ack bit will not prevent another MSI-X from being generated. MSIX_1_PASSTHRU is only
            used when MSI-X Mode is set to compressed mode (MODE==1)";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Msix_1 Passthru"; desc = "MSI-X 1 not masked by msix_1_ack.";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PASSTHROUGH.MSIX_1_PASSTHRU";
          } MSIX_1_PASSTHRU [1:1] = 1'b0;
    field { name = "Msix_0 Passthru"; desc = "MSI-X 0 not masked by msix_0_ack.";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PASSTHROUGH.MSIX_0_PASSTHRU";
          } MSIX_0_PASSTHRU [0:0] = 1'b0;
};

reg alarm_err_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Alarm Err";
    desc = "Alarm Errors.  These sticky bits are set when the associated error is valid and are only cleared by software.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="rob_error";    desc="Reordering buffer error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.ROB_ERROR";
          } ROB_ERROR    [10:10]=1'b0;
    field { name="rf_ipar_error";    desc="RF interleaved parity error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.RF_IPAR_ERROR";
          } RF_IPAR_ERROR    [9:9]=1'b0;
    field { name="alarm_int_err";    desc="Alarm interrupt data parity error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.ALARM_INT_ERR";
          } ALARM_INT_ERR    [8:8]=1'b0;
    field { name="sch_wb_perr";      desc="Schedule HCW wbuf parity error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.SCH_WB_PERR";
          } SCH_WB_PERR      [7:7]=1'b0;
    field { name="fifo_overflow";    desc="FIFO overflow";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.FIFO_OVERFLOW";
          } FIFO_OVERFLOW    [6:6]=1'b0;
    field { name="fifo_underflow";   desc="FIFO underflow";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.FIFO_UNDERFLOW";
          } FIFO_UNDERFLOW   [5:5]=1'b0;
    field { name="sch_sm_err";       desc="Schedule HCW state machine error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.SCH_SM_ERR";
          } SCH_SM_ERR       [4:4]=1'b0;
    field { name="alarm_perr";       desc="Alarm LUT parity error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.ALARM_PERR";
          } ALARM_PERR       [3:3]=1'b0;
    field { name="egress_perr";      desc="Egress LUT, pptr, or sch par err";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.EGRESS_PERR";
          } EGRESS_PERR      [2:2]=1'b0;
    field { name="ingress_perr";     desc="Ingress LUT parity error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.INGRESS_PERR";
          } INGRESS_PERR     [1:1]=1'b0;
    field { name="cq_addr_overflow"; desc="Scheduled HCW address overflow";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_ERR.CQ_ADDR_OVERFLOW";
          } CQ_ADDR_OVERFLOW [0:0]=1'b0;
};

reg alarm_mb_ecc_err_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Alarm Mb Ecc Err";
    desc = "Alarm Multiple Bit ECC Errors.  These sticky bits are set when the associated error is valid and are only cleared by software.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="ingress_mb_ecc_err2"; desc="Ingress ldb_vqid2qid LUT multiple bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR2";
          } INGRESS_MB_ECC_ERR2 [ 6: 6]=1'b0;
    field { name="ingress_mb_ecc_err1"; desc="Ingress dir_vqid2qid LUT multiple bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR1";
          } INGRESS_MB_ECC_ERR1 [ 5: 5]=1'b0;
    field { name="ingress_mb_ecc_err0"; desc="Ingress dir_vpp2pp LUT multiple bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR0";
          } INGRESS_MB_ECC_ERR0 [ 4: 4]=1'b0;
    field { name="wb_mb_ecc_err3";  desc="Scheduled HCW WB1 [127:64] multiple bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR3";
          } WB_DIR_MB_ECC_ERR3   [ 3: 3]=1'b0;
    field { name="wb_mb_ecc_err2";  desc="Scheduled HCW WB1 [63:0] multiple bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR2";
          } WB_DIR_MB_ECC_ERR2   [ 2: 2]=1'b0;
    field { name="wb_mb_ecc_err1";  desc="Scheduled HCW WB0 [127:64] multiple bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR1";
          } WB_DIR_MB_ECC_ERR1   [ 1: 1]=1'b0;
    field { name="wb_mb_ecc_err0";  desc="Scheduled HCW WB0 [63:0] multiple bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR0";
          } WB_DIR_MB_ECC_ERR0   [ 0: 0]=1'b0;
};

reg alarm_sb_ecc_err_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Alarm Sb Ecc Err";
    desc = "Alarm Single Bit ECC Errors.  These sticky bits are set when the associated error is valid and are only cleared by software. The CSR and Ingress
    error bits could be used as indications to software to rewrite those lookup tables to correct a persistent single-bit error.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name="ingress_sb_ecc_err4"; desc="Ingress HCW [127:64] single bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR4";
          } INGRESS_SB_ECC_ERR4 [ 8: 8]=1'b0;
    field { name="ingress_sb_ecc_err3"; desc="Ingress HCW [63:0] single bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR3";
          } INGRESS_SB_ECC_ERR3 [ 7: 7]=1'b0;
    field { name="ingress_sb_ecc_err2"; desc="Ingress ldb_vqid2qid LUT single bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR2";
          } INGRESS_SB_ECC_ERR2 [ 6: 6]=1'b0;
    field { name="ingress_sb_ecc_err1"; desc="Ingress dir_vqid2qid LUT single bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR1";
          } INGRESS_SB_ECC_ERR1 [ 5: 5]=1'b0;
    field { name="ingress_sb_ecc_err0"; desc="Ingress dir_vpp2pp LUT single bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR0";
          } INGRESS_SB_ECC_ERR0 [ 4: 4]=1'b0;
    field { name="wb_sb_ecc_err3";  desc="Scheduled HCW WB1 [127:64] single bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR3";
          } WB_DIR_SB_ECC_ERR3  [ 3: 3]=1'b0;
    field { name="wb_sb_ecc_err2";  desc="Scheduled HCW WB1 [63:0] single bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR2";
          } WB_DIR_SB_ECC_ERR2  [ 2: 2]=1'b0;
    field { name="wb_sb_ecc_err1";  desc="Scheduled HCW WB0 [127:64] single bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR1";
          } WB_DIR_SB_ECC_ERR1  [ 1: 1]=1'b0;
    field { name="wb_sb_ecc_err0";  desc="Scheduled HCW WB0 [63:0] single bit ECC error";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR0";
          } WB_DIR_SB_ECC_ERR0  [ 0: 0]=1'b0;
};

reg msix_pba_31_0_clear_r {
  HqmClassification="RUNTIMEARCHSTATE_REG_NA_1";
    name = "Msi-x Pba_31_0 Clear";
    desc = "MSI-X PBA Clear Register.  If a bit is set, the associated MSI-X PBA register bit is cleared.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    <% for ($i=0; $i<=31; $i++) { %>
    field { name = "Msi-x Pba[<%=$i%>] Clear"; desc = "MSI-X PBA[<%=$i%>] clear.";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_31_0_CLEAR.MSIX_PBA_<%=$i%>_CLEAR";
          } MSIX_PBA_<%=$i%>_CLEAR [<%=$i%>:<%=$i%>] = 1'b0;
    <% } %>
};

reg msix_pba_63_32_clear_r {
  HqmClassification="RUNTIMEARCHSTATE_REG_NA_1";
    name = "Msi-x Pba_63_32 Clear";
    desc = "MSI-X PBA Clear Register.  If a bit is set, the associated MSI-X PBA register bit is cleared.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    <% for ($i=32; $i<=63; $i++) { %>
    field { name = "Msi-x Pba[<%=$i%>] Clear"; desc = "MSI-X PBA[<%=$i%>] clear.";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_63_32_CLEAR.MSIX_PBA_<%=$i%>_CLEAR";
          } MSIX_PBA_<%=$i%>_CLEAR [<%=$i-32%>:<%=$i-32%>] = 1'b0;
    <% } %>
};

reg msix_pba_64_clear_r {
  HqmClassification="RUNTIMEARCHSTATE_REG_NA_1";
    name = "Msi-x Pba_64 Clear";
    desc = "MSI-X PBA Clear Register.  If a bit is set, the associated MSI-X PBA register bit is cleared.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    <% for ($i=64; $i<=64; $i++) { %>
    field { name = "Msi-x Pba[<%=$i%>] Clear"; desc = "MSI-X PBA[<%=$i%>] clear.";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_PBA_64_CLEAR.MSIX_PBA_<%=$i%>_CLEAR";
          } MSIX_PBA_<%=$i%>_CLEAR [<%=$i-64%>:<%=$i-64%>] = 1'b0;
    <% } %>
};

reg cq_31_0_occ_int_status_r {
  HqmClassification="RUNTIMEARCHSTATE_REG_NA_1";
    name = "Cq 31 To 0 Occupancy Interrupt Status";
    desc = "CQ 31 To 0 Occupancy Interrupt Status. These sticky bits are set when the associated CQ occupancy interrupt is detected and cleared by software.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    <% for ($i=0; $i<=31; $i++) { %>
    field { name = "CQ <%=$i%> Occupancy Interrupt Status"; desc = "CQ <%=$i%> occupancy interrupt pending.";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_31_0_OCC_INT_STATUS.CQ_<%=$i%>_OCC_INT";
          } CQ_<%=$i%>_OCC_INT [<%=$i%>:<%=$i%>] = 1'b0;
    <% } %>
};

reg cq_63_32_occ_int_status_r {
  HqmClassification="RUNTIMEARCHSTATE_REG_NA_1";
    name = "Cq 63 To 32 Occupancy Interrupt Status";
    desc = "CQ 63 To 32 Occupancy Interrupt Status. These sticky bits are set when the associated CQ occupancy interrupt is detected and cleared by software.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    <% for ($i=32; $i<=63; $i++) { %>
    field { name = "CQ <%=$i%> Occupancy Interrupt Status"; desc = "CQ <%=$i%> occupancy interrupt pending.";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.DIR_CQ_63_32_OCC_INT_STATUS.CQ_<%=$i%>_OCC_INT";
          } CQ_<%=$i%>_OCC_INT [<%=$i-32%>:<%=$i-32%>] = 1'b0;
    <% } %>
};

reg msix_31_0_synd_r {
  HqmClassification="RUNTIMEARCHSTATE_REG_NA_1";
    name = "Msi-x 31-0 Syndrome";
    desc = "MSI-X 31-0 Syndrome Register.  These sticky bits are set when the associated MSI-X write is sent out and cleared by software.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    <% for ($i=0; $i<=31; $i++) { %>
    field { name = "Msi-x <%=$i%> Sent"; desc = "MSI-X <%=$i%> was sent.";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_31_0_SYND.MSIX_<%=$i%>_SENT";
          } MSIX_<%=$i%>_SENT [<%=$i%>:<%=$i%>] = 1'b0;
    <% } %>
};

reg msix_63_32_synd_r {
  HqmClassification="RUNTIMEARCHSTATE_REG_NA_1";
    name = "Msi-x 63-32 Syndrome";
    desc = "MSI-X 63-32 Syndrome Register.  These sticky bits are set when the associated MSI-X write is sent out and cleared by software.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    <% for ($i=32; $i<=63; $i++) { %>
    field { name = "Msi-x <%=$i%> Sent"; desc = "MSI-X <%=$i%> was sent.";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_63_32_SYND.MSIX_<%=$i%>_SENT";
          } MSIX_<%=$i%>_SENT [<%=$i-32%>:<%=$i-32%>] = 1'b0;
    <% } %>
};

reg msix_64_synd_r {
  HqmClassification="RUNTIMEARCHSTATE_REG_NA_1";
    name = "Msi-x 64 Syndrome";
    desc = "MSI-X 64 Syndrome Register.  These sticky bits are set when the associated MSI-X write is sent out and cleared by software.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    <% for ($i=64; $i<=64; $i++) { %>
    field { name = "Msi-x <%=$i%> Sent"; desc = "MSI-X <%=$i%> was sent.";
            PowerWell="vcccfn_gated"; AccessType = "RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.MSIX_64_SYND.MSIX_<%=$i%>_SENT";
          } MSIX_<%=$i%>_SENT [<%=$i-64%>:<%=$i-64%>] = 1'b0;
    <% } %>
};

reg hqm_system_cnt_ctl_r {
  HqmClassification="CONFIG_REG_NA_1";
    name = "Hqm System Cnt Ctl";
    desc = "System Counter Control";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Cnt Clrv"; desc = "Value to which each bit of the hqm_system counters is cleared";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_CTL.CNT_CLRV";
          } CNT_CLRV [1:1] = 1'b0;
    field { name = "Cnt Clr"; desc = "When set clears all hqm_system counters";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_CTL.CNT_CLR";
          } CNT_CLR [0:0] = 1'b0;
};

<% for ($i=0; $i<=21; $i++) { %>
reg hqm_system_cnt_<%=$i%>_r {
  HqmClassification="STATISTICS_REG_NA_1";
    name = "Hqm System Cnt_<%=$i%>";
    desc = "Counter";
    regwidth = 32;
    diag_reg=true;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;
    donttest = true;

    field { name = "Cnt"; desc = "Count";
            PowerWell="vcccfn_gated"; AccessType = "RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_SYSTEM_CNT_<%=$i%>.CNT";
          } CNT [31:0] = 32'h00000000;
};
<% } %>

reg unexp_cmpl_synd0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Unexp Cmpl Synd0";
    desc = "Unexpected completion syndrome 0";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;

    field { name="bus";   desc="Bus ID";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.UNEXP_CMPL_SYND0.BUS";
          } BUS   [31:24]=8'h00;
    field { name="func";  desc="Function ID";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.UNEXP_CMPL_SYND0.FUNC";
          } FUNC  [23:16]=8'h00;
    field { name="reqid"; desc="Requestor ID";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.UNEXP_CMPL_SYND0.REQID";
          } REQID [15: 0]=16'h0000;
};

reg unexp_cmpl_synd1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Unexp Cmpl Synd1";
    desc = "Unexpected completion syndrome 1";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;

    field { name="ud_func"; desc="Undefined function";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.UNEXP_CMPL_SYND1.UD_FUNC";
          } UD_FUNC [13:13]=1'b0;
    field { name="cnten";   desc="Cmpl counter enable";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.UNEXP_CMPL_SYND1.CNTEN";
          } CNTEN   [12:12]=1'b0;
    field { name="d3hot";   desc="D3 hot power state";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.UNEXP_CMPL_SYND1.D3HOT";
          } D3HOT   [11:11]=1'b0;
    field { name="code";    desc="Code";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.UNEXP_CMPL_SYND1.CODE";
          } CODE    [10: 8]=3'h0;
    field { name="tag";     desc="Tag";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.UNEXP_CMPL_SYND1.TAG";
          } TAG     [ 7: 0]=8'h00;
};

reg hqm_hw_agitate_control_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Hqm Hw Agitate Control";
    desc = "Non-default settings may cause UNDEFINED behavior. Hardware agitate control register";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;
    donttest = true;

    field { name="ctrl"; desc="Agitate Control - mode dependent";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } CTRL[31:2]  = 30'h00000000;
    field { name="mode"; desc="Agitate Mode - 0=off, 1=Mode 1, 2=Mode 2, 3=Mode 3 (if supported)";
            PowerWell="vcccfn_gated"; AccessType="RW";
          } MODE[1:0]   = 2'b00;
};

reg egress_ctl_r {
  HqmClassification="SURVIVE_REG_NA_1";
    name = "Egress Ctl";
    desc = "Non-default settings may cause UNDEFINED behavior. Egress Control Register";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;
    donttest = true;

    field { name="sch_rate_limit";    desc="If a bit is set, the corresponding schedule pipeline level must not be valid before a
                                     new HCW can be enqueued into the pipeline";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.EGRESS_CTL.SCH_RATE_LIMIT";
          } SCH_RATE_LIMIT[6:0] = 7'h00;
};

reg ingress_ctl_r {
  HqmClassification="CONFIG_REG_NA_1";
    name = "Ingress Ctl";
    desc = "Non-default settings may cause UNDEFINED behavior. Ingress Control Register";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = false;
    donttest = true;

    field { name="enq_rate_limit";     desc="If a bit is set, the corresponding ingress pipeline level must not be valid before a
                                      new HCW can be enqueued into the pipeline";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.ENQ_RATE_LIMIT";
          } ENQ_RATE_LIMIT    [17:8] = 10'h000;
    field { name="enable_debug";       desc="If set, allow read of interface debug data";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.ENABLE_DEBUG";
          } ENABLE_DEBUG      [4:4] = 1'h0;
    field { name="single_step_hcw_w";  desc="A leading edge on this bit sends a single held hcw enqueue request to hqm_core.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.SINGLE_STEP_HCW_W";
          } SINGLE_STEP_HCW_W [3:3] = 1'b0;
    field { name="single_step_enq";    desc="A leading edge on this bit sends a single held RI HCW to the ingress.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.SINGLE_STEP_ENQ";
          } SINGLE_STEP_ENQ   [2:2] = 1'b0;
    field { name="hold_hcw_w";         desc="If set, hold hcw enqueue requests before sending to hqm_core.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.HOLD_HCW_W";
          } HOLD_HCW_W        [1:1] = 1'b0;
    field { name="hold_hcw_enq";       desc="If set, hold HCW enqueues from the RI at top of ingress pipeline.";
            PowerWell="vcccfn_gated"; AccessType="RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.INGRESS_CTL.HOLD_HCW_ENQ";
          } HOLD_HCW_ENQ      [0:0] = 1'b0;
};

reg phdr_debug_0_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Phdr Debug_0";
    desc = "Posted Header Debug 0 Register.  Unless the enable_debug bit is set in the write_buffer_ctl reg, reads of this register will return zeros.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;
    donttest = true;

    field { name="addr_31_2"; desc="Address[31:2]";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_0.ADDR_31_2";
          } ADDR_31_2[31:2] = 30'h00000000;
    field { name="tc_sel"; desc="Traffic Class Select";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_0.TC_SEL";
          } TC_SEL[1:0] = 2'h0;
};

reg phdr_debug_1_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Phdr Debug_1";
    desc = "Posted Header Debug 1 Register.  Unless the enable_debug bit is set in the write_buffer_ctl reg, reads of this register will return zeros.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;
    donttest = true;

    field { name="addr_63_32"; desc="Address[63:32]";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_1.ADDR_63_32";
          } ADDR_63_32[31:0] = 32'h00000000;
};

reg phdr_debug_2_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Phdr Debug_2";
    desc = "Posted Header Debug 2 Register.  Unless the enable_debug bit is set in the write_buffer_ctl reg, reads of this register will return zeros.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;
    donttest = true;

    field { name="invalid";  desc="Invalidate";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.INVALID";
          } INVALID  [19:19] = 1'b0;
    field { name="ro";  desc="Relaxed ordering";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.RO";
          } RO  [18:18] = 1'b0;
    field { name="cq_v"; desc="CQ or CQ interrupt write valid";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.CQ_V";
          } CQ_V     [17:17] = 1'b0;
    field { name="cq_ldb"; desc="For non-alarm writes, the CQ associated with the write is load balanced";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.LDB";
          } LDB      [16:16] = 1'b0;
    field { name="cq";  desc="For non-alarm writes, the CQ associated with the write";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.CQ";
          } CQ       [15:10] = 6'h00;
    field { name="num_hcws"; desc="For CQ writes, the number of new HCWs present in the write";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.NUM_HCWS";
          } NUM_HCWS [ 9: 7] = 3'h0;
    field { name="src";      desc="Source: 0=sch, 1=msi, 2=msi-x, 3=ai";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.SRC";
          } SRC      [ 6: 5] = 2'h0;
    field { name="length"; desc="Length in DWs";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.TI_PHDR_DEBUG_2.LENGTH";
          } LENGTH [ 4: 0] = 5'h00;
};

reg pdata_debug_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Pdata Debug";
    desc = "Posted Data Debug Register.  Unless the enable_debug bit is set in the write_buffer_ctl reg, reads of this register will return zeros.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;
    donttest = true;

    field { name="data"; desc="Data word";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_PDATA_DEBUG%ARRAY_IDX_STR%.DATA";
          } DATA[31:0] = 32'h00000000;
};

reg hcw_data_debug_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Hcw Data Debug";
    desc = "HCW Data Debug Register.  Unless the enable_debug bit is set in the
            ingress_ctl reg, reads of this register will return zeros.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;
    donttest = true;

    field { name="data"; desc="Data word";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HQM_HCW_DATA_DEBUG%ARRAY_IDX_STR%.DATA";
          } DATA[31:0] = 32'h00000000;
};

reg hcw_req_debug_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Hcw Req Debug";
    desc = "HCW Request Debug Register.  Unless the enable_debug bit is set in the
            ingress_ctl reg, reads of this register will return zeros.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;
    donttest = true;

    field { name="parity";   desc="Parity";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.PARITY";
          } PARITY    [25:25] = 1'b0;
    field { name="ao_v";   desc="Atomic/Ordered LDB QID combination valid";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.AO_V";
          } AO_V      [24:24] = 1'b0;
    field { name="insert_ts"; desc="CHP to add 16b TS delta to HCW";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.INSERT_TS";
          } INSERT_TS [23:23] = 1'b0;
    field { name="qe_is_ldb"; desc="Queue is load balanced";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.QE_IS_LDB";
          } QE_IS_LDB [22:22] = 1'b0;
    field { name="pp_is_ldb"; desc="Port is load balanced";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.PP_IS_LDB";
          } PP_IS_LDB [21:21] = 1'b0;
    field { name="vas";      desc="VAS";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.VAS";
          } VAS       [20:16] = 5'h00;
    field { name="qid";      desc="Queue ID";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.QID";
          } QID       [15: 8] = 8'h00;
    field { name="pp";       desc="Producer port";
            PowerWell="vcccfn_gated"; AccessType="RO/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.HCW_REQ_DEBUG.PP";
          } PP        [ 7: 0] = 8'h00;
};

<% for ($i=0; $i<=1; $i++) { %>
reg sbe_cnt_<%=$i%>_r {
  HqmClassification="STATISTICS_REG_NA_1";
    name = "Sbe Cnt_<%=$i%>";
    desc = "Counter";
    regwidth = 32;
    diag_reg=true;
    shared;
    HandCoded=true;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Cnt"; desc = "Count";
            PowerWell="vcccfn_gated"; AccessType = "RW/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_alarm.sbe_cnt_q[<%=($i*32)+31%>:<%=$i*32%>]"; 
          } CNT [31:0] = 32'h00000000;
};
<% } %>

regfile hqm_wb_dir_cq_state_rf {
  reg wb_dir_cq_state_r {
    HqmClassification="CONFIG_VIRT_MEM_PP_64";
      name = "Write Buffer Directed Cq State";
      desc = "This register reflects the write buffer state associated with a directed CQ. It also provides the ability to clear the optimization state.";
      regwidth = 32;
      shared;
      HandCoded=true;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      IntelRsvd = false;

      field { name="CQ_OPT_CLR"; desc="Consumer queue to clear";
              PowerWell="vcccfn_gated"; AccessType="WO";
              ValRTLSignal = "";
            } CQ_OPT_CLR [4:4] = 1'h0;

      field { name="DIR_OPT"; desc="Directed CQ optimization in progress";
              PowerWell="vcccfn_gated"; AccessType="RO/V";
              ValRTLSignal = "";
            } DIR_OPT [3:3] = 1'h0;

      field { name="WB2_V"; desc="Write buffer entry 2 for CQ has valid data";
              PowerWell="vcccfn_gated"; AccessType="RO/V";
              ValRTLSignal = "";
            } WB2_V [2:2] = 1'h0;

      field { name="WB1_V"; desc="Write buffer entry 1 for CQ has valid data";
              PowerWell="vcccfn_gated"; AccessType="RO/V";
              ValRTLSignal = "";
            } WB1_V [1:1] = 1'h0;

      field { name="WB0_V"; desc="Write buffer entry 0 for CQ has valid data";
              PowerWell="vcccfn_gated"; AccessType="RO/V";
              ValRTLSignal = "";
            } WB0_V [0:0] = 1'h0;
  };

  wb_dir_cq_state_r     WB_DIR_CQ_STATE         @0x0;
};

regfile hqm_wb_ldb_cq_state_rf {
  reg wb_ldb_cq_state_r {
    HqmClassification="CONFIG_VIRT_MEM_PP_64";
      name = "Write Buffer Load-Balanced Cq State";
      desc = "This register reflects the write buffer state associated with a directed CQ. It also provides the ability to clear the optimization state.";
      regwidth = 32;
      shared;
      HandCoded=true;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      IntelRsvd = false;

      field { name="CQ_OPT_CLR"; desc="Consumer queue to clear";
              PowerWell="vcccfn_gated"; AccessType="WO";
              ValRTLSignal = "";
            } CQ_OPT_CLR [4:4] = 1'h0;

      field { name="WB2_V"; desc="Write buffer entry 2 for CQ has valid data";
              PowerWell="vcccfn_gated"; AccessType="RO/V";
              ValRTLSignal = "";
            } WB2_V [2:2] = 1'h0;

      field { name="WB1_V"; desc="Write buffer entry 1 for CQ has valid data";
              PowerWell="vcccfn_gated"; AccessType="RO/V";
              ValRTLSignal = "";
            } WB1_V [1:1] = 1'h0;

      field { name="WB0_V"; desc="Write buffer entry 0 for CQ has valid data";
              PowerWell="vcccfn_gated"; AccessType="RO/V";
              ValRTLSignal = "";
            } WB0_V [0:0] = 1'h0;
  };

  wb_ldb_cq_state_r     WB_LDB_CQ_STATE         @0x0;
};

reg cfg_patch_control_r {
    donttest = true;
  HqmClassification="SURVIVE_REG_NA_1";
    name="Cfg Patch Control";
    desc="Non-default settings may cause UNDEFINED behavior. Common Control register with Patch config access";
    regwidth=32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd=false;

    field { name = "disable_clockoff"; desc = "set this bit to disable turning off the clock for the partitiion";
            PowerWell="vcccfn_gated"; AccessType = "RW";  IntelRsvd=true;
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.DISABLE_CLOCKOFF";
          } DISABLE_CLOCKOFF [31:31] = 1'h0;
    field { name = "Rsvz0";    desc = "rsvz0";
            PowerWell="vcccfn_gated"; AccessType = "RW";  IntelRsvd=true;
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.RSVZ0";
          } RSVZ0            [30:16] = 15'h0;
      field { name = "delay_clockoff"; desc = "specify the number of idle clocks required to turn off clocks"; fieldwidth = 8; PowerWell="vcccfn_gated"; AccessType = "RW";  IntelRsvd=false;
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.DELAY_CLOCKOFF";
            } DELAY_CLOCKOFF[7:0] = 8'h40;
      field { name = "delay_clkoff_bypass"; desc = "specify the number of clocks required to stay in clk_off bypass state, max supported value is 63 clocks"; fieldwidth = 6; PowerWell="vcccfn_gated"; AccessType = "RW";  IntelRsvd=false;
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.DELAY_CLKOFF_BYPASS";
            } DELAY_CLKOFF_BYPASS[13:8] = 6'h7;
      field { name = "Rsvz1";    desc = "rsvz1"; fieldwidth = 2; PowerWell="vcccfn_gated"; AccessType = "RW"; IntelRsvd=true;
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.CFG_PATCH_CONTROL.RSVZ1";
            } RSVZ1[15:14] = 2'h0;
};

reg ims_pend_clear_r {
    HqmClassification="CONFIG_REG_NA_1";
    name = "Ims Pending Clear";
    desc = "IMS Pending Clear Register.  If the VALID bit is set, the IMS Pending bit at the VEC index is cleared.";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    IntelRsvd = false;

    field { name = "Ims Pending Clear Valid"; desc = "IMS Pending clear valid.";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IMS_PEND_CLEAR.VALID";
          } VALID [8:8] = 1'h0;
    field { name = "Ims Pending Clear Vector"; desc = "IMS Pending clear vector.";
            PowerWell="vcccfn_gated"; AccessType = "RW";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.IMS_PEND_CLEAR.VEC";
          } VEC [7:0] = 8'h00;
};

reg rob_syndrome_r {
  HqmClassification="DEBUG_ONLY_REG_NA_1";
    name = "Rob Syndrome";
    desc = "Reorder Buffer Syndrome";
    regwidth = 32;
    shared;
    Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
    Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
    Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
    HqmIsFeatureReg = true;
    IntelRsvd = true;

    field { name="pp_is_ldb";  desc="Producer port associated with ROB input HCW is load balanced";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.PP_IS_LDB";
          } PP_IS_LDB  [<%=$hqm_params::ROB_PP_WIDTH+10%>:<%=$hqm_params::ROB_PP_WIDTH+10%>]=1'h0;
    field { name="pp";  desc="Producer port associated with ROB input HCW";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.PP";
          } PP  [<%=$hqm_params::ROB_PP_WIDTH+9%>:10]=<%=$hqm_params::ROB_PP_WIDTH%>'h0;
    field { name="cl";  desc="Cache line number associated with ROB input HCW";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.CL";
          } CL  [9:6]=4'h0;
    field { name="cli";  desc="Cache line index associated with ROB input HCW";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.CLI";
          } CLI  [5:4]=2'h0;
    field { name="cl_last";  desc="Last valid HCW indication associated with ROB input HCW";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.CL_LAST";
          } CL_LAST  [3:3]=1'h0;
    field { name="rob_v_cnt"; desc="Count of current number of valid HCWs in this cache line";
            PowerWell="vcccfn_gated"; AccessType="RW/1C/V";
            ValRTLSignal = "%HQMID%.i_hqm_system_core.i_hqm_system_csr_wrap.i_hqm_system_csr.ROB_SYNDROME.ROB_V_CNT";
          } ROB_V_CNT [2:0]=3'h0;
};

