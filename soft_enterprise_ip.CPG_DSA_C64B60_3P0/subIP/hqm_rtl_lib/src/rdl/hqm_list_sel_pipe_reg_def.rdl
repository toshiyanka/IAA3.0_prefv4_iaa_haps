<% use security; %>
<% my %Security_Props = security::GetSecurityInfo(); %>

reg cfg_cq_ldb_tot_inflight_limit_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name = "Cfg Cq Ldb Tot Inflight Limit";
        desc = "Maximum number of scheduled {ATM, UNO, ORD} QE (across all CQs) permitted to wait for a completion. Must be less than 2049."; 
        regwidth = 32;
        HandCoded=true;
        field { name = "Limit"; fieldwidth = 13; desc = "Maximum number of scheduled QE permitted to wait for a completion";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_tot_inflight_limit.internal_f[12:0]";} LIMIT[12:0] = 13'h800;
  };
reg cfg_cq_ldb_tot_inflight_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Cq Ldb Tot Inflight Count";
      desc="Total count of all scheduled {ATM, UNO, ORD} QE (all CQs) awaiting a completion.  Constrained by cfg_cq_ldb_tot_inflight_limit_r.";
      regwidth = 32;
      HandCoded=true;
      field { name = "Count"; fieldwidth = 13; desc = "Total count of all LDB QE awaiting a completion ";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_tot_inflight_count.internal_f[12:0]";} COUNT[12:0] = 13'h0; 
  };
reg cfg_cq_ldb_inflight_limit_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name = "Cfg Cq Ldb Inflight Limit";
        desc = "Per-CQ maximum permitted number of scheduled {ATM,UNO,ORD} QEs permitted to wait for a completion. Must be less than 2049.  For a given CQ, must be less than or equal to the value of ( cfg_hist_list_limit - cfg_hist_list_base + 1 ) for that CQ.";
        regwidth = 32;
        HandCoded=true;
        field { name = "Limit"; fieldwidth = 13; desc = "Maximum permitted number of outstanding (ATM,UNO,ORD) completions across for this cq";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } LIMIT[12:0] = 13'h0000;
  };
reg cfg_cq_ldb_inflight_threshold_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq Ldb Inflight Threshold";
      desc = "Per-CQ inflight threshold for {ATM,UNO,ORD} QEs.  If this feature is enabled by the ENAB_IF_THRESH bit of cfg_control_general_0, once the cfg_cq_ldb_inflight_count for a given CQ reaches its configured cfg_cq_ldb_inflight_limit, the CQ will not be scheduled to until the number of QEs waiting for a completion decrements to less than or equal to this threshold.";
      HandCoded=true;
      regwidth=32;
      field { name = "Threshold"; fieldwidth = 13; desc = "Inflight threshold for this cq";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } THRESH[12:0] = 13'h0000;
};
reg cfg_cq_ldb_inflight_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq Ldb Inflight Count";
      desc="Per-CQ count of scheduled {ATM,UNO,ORD} QEs waiting for a completion.";
      regwidth = 32;
      HandCoded=true;
      field { name = "Count"; fieldwidth = 13; desc = "Count of scheduled ldb QEs waiting for a completion from this CQ/PP";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; } COUNT[12:0] = 13'h000;
  };
reg cfg_cq_ldb_wu_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq Ldb Work Unit Count";
      desc="Per-CQ count of oustanding work, scheduled and not completed.";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; fieldwidth = 17; desc = "Count of scheduled work units waiting for a completion from this CQ/PP.  2s complement representation, while active the count may temporarily go negative or exceed the configured limit due to pipeline latencies.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; } COUNT[16:0] = 17'h000;
};
reg cfg_cq_ldb_wu_limit_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name = "Cfg Cq Ldb Work Unit Limit";
      desc = "Per-CQ maximum permitted number of work units waiting for a completion.";
      HandCoded=true;
      regwidth=32;
      field { name = "Valid"; fieldwidth = 1; desc = "Limit valid";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } V[15:15] = 1'h0;
      field { name = "Limit"; fieldwidth = 15; desc = "Limit.  Must be set less than 16385.  Scheduling to a particular CQ will be stopped if the wu count for that CQ exceeds this configured limit and the limit valid config bit is 1.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } LIMIT[14:0] = 15'h000;
};
reg cfg_aqed_tot_enqueue_limit_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name = "Cfg Aqed Tot Enqueue Limit";
        desc = "Maximum number of ATM QE (across all QID) permitted to occupy AQED storage. Must be less than 2049.";
        regwidth = 32;
        HandCoded=true;
        field { name = "Limit"; fieldwidth = 12; desc = "Maximum number of ATM QE permitted to occupy AQED storage";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_aqed_tot_enqueue_limit.internal_f[11:0]";} LIMIT[11:0] = 12'h800;
  };
reg cfg_aqed_tot_enqueue_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Aqed Tot Enqueue Count";
	desc="Number of ATM QE enqueued in AQED (across all QID). Compared to cfg_aqed_tot_enqueue_limit_r.";
      regwidth = 32;
      HandCoded=true;
	field { name = "Count"; fieldwidth = 12; desc = "Number of ATM QE enqueued in AQED";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_aqed_tot_enqueue_count.internal_f[11:0]";} COUNT[11:0] = 12'h0; 
  };
reg cfg_qid_aqed_active_limit_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_32";
      name = "Cfg Qid Aqed Active Limit";
        desc = "Per-QID maximum number of QE permitted to reside in AQED storage. The total across all QIDs must be less than 2049.";
        regwidth = 32;
        HandCoded=true;
        field { name = "Limit"; fieldwidth = 12; desc = "Maximum number of ATM QE permitted to occupy AQED storage";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } LIMIT[11:0] = 12'h0000;
  };
reg cfg_qid_aqed_active_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="RUNTIMEARCHSTATE_VIRT_MEM_QID_32";
      name="Cfg Qid Aqed Active Count";
	desc="Per-QID count of number of QE residing in AQED storage.";
	regwidth = 32;
        HandCoded=true;
	field { name = "Count"; fieldwidth = 12; desc = "Number of QE residing in AQED";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; } COUNT[11:0] = 12'h0; 
  };
reg cfg_qid_ldb_inflight_limit_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_32";
      name = "Cfg Qid Ldb Inflight Limit";
        desc = "Per-QID maximum number of {ATM, UNO, ORD} QE permitted to wait for a completion. Must be less than 2049.  For an ORD qid, must be less than or equal to the amount allowed by the QID's grp_sn_mode configuration, which has a maximum value of 1024.";
        regwidth = 32;
        HandCoded=true;
        field { name = "Limit"; fieldwidth = 12; desc = "Maximum number of QE permitted to wait for a completion";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } LIMIT[11:0] = 12'h000;
  };
reg cfg_qid_ldb_inflight_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_32";
      name="Cfg Qid Ldb Inflight Count";
      desc="Per-QID count of the number of load balanced QEs {ATM, UNO, ORD} waiting for a completion.";
	regwidth = 32;
        HandCoded=true;
      field { name = "Count"; desc = "Number of load balanced QEs waiting to for a completion.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; } COUNT[11:0] = 12'h000; 
  };
reg cfg_qid_dir_enqueue_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="RUNTIMEARCHSTATE_VIRT_MEM_QID_64";
      name = "Cfg Qid Dir Enqueue Count";
        desc = "Per-QID count of number of DIR QE in DQED waiting to be scheduled.";
        regwidth = 32;
        HandCoded=true;
        field { name = "Count"; fieldwidth = 13; desc = "Number of DIR QE waiting to be scheduled.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; } COUNT[12:0] = 13'h0000;
  };
reg cfg_cq2priov_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name = "Cfg Cq2priov";
        desc = "LDB CQ Scheduling Slots [7:0] Valid Bit Vector and Priority Assignment: 8 valid bits and 8 * 3 priority bits per CQ.";
        regwidth = 32;
        HandCoded=true;
        field { name = "V"; fieldwidth = 8; desc = "Scheduling Slots[7:0] Valid Bit Vector. Setting a valid bit enables the corresponding slot for scheduling";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } V [31:24] = 8'h00;
        field { name = "Prio"; fieldwidth = 24; desc = "3 bit Scheduling Priority for Slots[7:0]. 0 = high/7 = low";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } PRIO [23:0] = 24'h000000;
  };
reg cfg_cq_ldb_token_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq Ldb Token Count";
      desc="Count of the number of tokens owned by the LDB CQ.";
	regwidth = 32;
        HandCoded=true;
      field { name = "Token Count"; fieldwidth = 11; desc = "Number of tokens owned by the CQ.  This register may also be directly written by configuration when the CQ is idle ('initializing' the count).  Initializing this count to a non-zero value reduces the effective maximum depth of the CQ to the value selected by the cq_token_depth_select register minus this initial count.  If the count is initialized to a non-zero value, software must not aggregate (defer a token return after a schedule) more than (effective maximum depth minus 4) tokens for the CQ.  A configuration write clears the dynamic state associated with this CQ to its initial state.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; } TOKEN_COUNT[10:0] = 11'h0; 
  };
reg cfg_cq_ldb_token_depth_select_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name = "Cfg Cq Ldb Token Depth Select";
        desc = "Number of tokens (encoded format) provisioned for the LDB CQ. Whenever this register is written by configuration, the corresponding cfg_cq_ldb_token_depth_select register in the hqm_credit_hist_pipe must also be written with the same value before the CQ is enabled."; 
        regwidth = 32;
        HandCoded=true;
        field { name = "Token Depth Select"; desc = "Token Depth Select. 0-8: 4*2^n; >8: 0, not supported."; encode=hqm_enum_ldb_cq_depth;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } TOKEN_DEPTH_SELECT[3:0] = 4'h0;
  };
reg cfg_lsp_qid_ldb_qid2cqidix_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_32";
      name = "Cfg Lsp Qid Ldb Qid2cqidix";
        desc = "Map of Valid LDB CQ scheduling slots this QID supports: CQ[n][v[7:0]]. Each QID requires 512 mapping bits: 64 possible LDB CQ X 8 slots (16 consecutive 32b words Per-QID). These settings must be consistent with cfg_cq2qid.";
        regwidth = 32;
        HandCoded=true;
        field { name = "Cq P0"; fieldwidth = 8; desc = "Bit Vector of valid CQ scheduling slots";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } CQ_P0 [7:0]       = 8'h00;
        field { name = "Cq P1"; fieldwidth = 8; desc = "Bit Vector of valid CQ scheduling slots";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } CQ_P1 [15:8]      = 8'h00;
        field { name = "Cq P2"; fieldwidth = 8; desc = "Bit Vector of valid CQ scheduling slots";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } CQ_P2 [23:16]     = 8'h00;
        field { name = "Cq P3"; fieldwidth = 8; desc = "Bit Vector of valid CQ scheduling slots";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } CQ_P3 [31:24]     = 8'h00;
  };
reg cfg_qid_ldb_qid2cqidix2_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_32";
      name = "Cfg Qid Ldb Qid2cqidix2";
      desc = "See  cfg_qid_ldb_qid2cqidix: these RAMS must be configured identically.";
      HandCoded=true;
      regwidth=32;
      field { name = "Cq P0"; fieldwidth = 8; desc = "Bit Vector of valid CQ scheduling slots";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } CQ_P0 [7:0]       = 8'h00;
      field { name = "Cq P1"; fieldwidth = 8; desc = "Bit Vector of valid CQ scheduling slots";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } CQ_P1 [15:8]      = 8'h00;
      field { name = "Cq P2"; fieldwidth = 8; desc = "Bit Vector of valid CQ scheduling slots";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } CQ_P2 [23:16]     = 8'h00;
      field { name = "Cq P3"; fieldwidth = 8; desc = "Bit Vector of valid CQ scheduling slots";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } CQ_P3 [31:24]     = 8'h00;
};
reg cfg_cq_dir_token_depth_select_dsi_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name = "Cfg Cq Dir Token Depth Select Dsi";
        desc = "Number of tokens (encoded format) provisioned for the DIR CQ. Whenever this register is written by configuration, the corresponding cfg_cq_dir_token_depth_select register in the hqm_credit_hist_pipe must also be written with the same value before the CQ is enabled.";
        regwidth = 32;
        HandCoded=true;
        field { name = "Disable Wb Opt"; fieldwidth = 1; desc = "Disable Write Buffer optimization.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } DISABLE_WB_OPT[4:4] = 1'h0;
        field { name = "Token Depth Select"; desc = "Token Depth Select. 0-8: 4*2^n; >8: 0, not supported."; encode=hqm_enum_dir_cq_depth;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } TOKEN_DEPTH_SELECT[3:0] = 4'h0;
  };
reg cfg_cq_dir_disable_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq Dir Disable";
      desc="Per-DIR CQ disable scheduling bit. When set, the CQ is removed from scheduling.";
	regwidth = 32;
        HandCoded=true;
      field { name = "Disabled"; fieldwidth = 1; desc = "CQ is disabled";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } DISABLED[0:0] = 1'h1; 
  };
reg cfg_cq_ldb_tot_sch_cnth_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq Ldb Tot Sch Cnth";
      desc="Bits [63:32] of running count of the number of {ATM, UNO, ORD} QEs scheduled.";
	regwidth = 32;
        HandCoded=true;
      field { name = "Count"; fieldwidth = 32; desc = "msb of the the running count of scheduled {ATM, UNO, ORD} QEs.  Writing any value zeroes both msb and lsb.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } COUNT[31:0] = 32'h0; 
  };
reg cfg_cq_ldb_tot_sch_cntl_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq Ldb Tot Sch Cntl";
      desc="Bits [31: 0] of running count of the number of {ATM, UNO, ORD} QEs scheduled.";
	regwidth = 32;
        HandCoded=true;
      field { name = "Count"; fieldwidth = 32; desc = "lsb of the running count of scheduled {ATM, UNO, ORD} QEs.  Writing any value zeroes both msb and lsb.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } COUNT[31:0] = 32'h0; 
  };
reg cfg_qid_naldb_tot_enq_cnth_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_VIRT_MEM_QID_32";
      name="Cfg Qid Naldb Tot Enq Cnth";
      desc="Bits [63:32] of running count of the number of {ORD, UNO} QEs enqueued: from system and re-order replay.";
	regwidth = 32;
        HandCoded=true;
      field { name = "Count"; fieldwidth = 32; desc = "msb of the running count of enqueued {ORD, UNO} QEs.  Writing any value zeroes both msb and lsb.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } COUNT[31:0] = 32'h0; 
  };
reg cfg_qid_naldb_tot_enq_cntl_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_VIRT_MEM_QID_32";
      name="Cfg Qid Naldb Tot Enq Cntl";
      desc="Bits [31: 0] of running count of the number of {ORD, UNO} QEs enqueued by both the system and re-order replay logic.";
	regwidth = 32;
        HandCoded=true;
      field { name = "Count"; fieldwidth = 32; desc = "lsb of the running count of enqueued {ORD, UNO} QEs.  Writing any value zeroes both msb and lsb.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } COUNT[31:0] = 32'h0; 
  };
reg cfg_qid_atm_tot_enq_cnth_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_32";
      name="Cfg Qid Atm Tot Enq Cnth";
      desc="Bits [63:32] of Per-QID running count of number of ATM QE residing in AQED storage.";
	regwidth = 32;
        HandCoded=true;
      field { name = "Count"; fieldwidth = 32; desc = "msb of running count of ATM QEs enqueued to AQED.  Writing any value zeroes both msb and lsb.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } COUNT[31:0] = 32'h0; 
  };
reg cfg_qid_atm_tot_enq_cntl_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_32";
      name="Cfg Qid Atm Tot Enq Cntl";
      desc="Bits [31: 0] of Per-QID running count of number of ATM QE residing in AQED storage.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Count"; fieldwidth = 32; desc = "lsb of running count of ATM QEs enqueued to AQED.  Writing any value zeroes both msb and lsb.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } COUNT[31:0] = 32'h0; 
  };
reg cfg_qid_dir_tot_enq_cnth_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_64";
      name="Cfg Qid Dir Tot Enq Cnth";
      desc="Bits[63:32] of per-QID running count of number of enqueued DIR QEs.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Count"; fieldwidth =  32; desc = "msb of running count of enqueued DIR QEs.  Writing any value zeroes both msb and lsb.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } COUNT[31:0] = 32'h0; 
  };
reg cfg_qid_dir_tot_enq_cntl_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_64";
      name="Cfg Qid Dir Tot Enq Cntl";
      desc="Bits[31:0] of Per-QID running count of number of enqueued DIR QEs.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Count"; fieldwidth = 32; desc = "lsb of running count of enqueued DIR QEs.  Writing any value zeroes both msb and lsb.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } COUNT[31:0] = 32'h0; 
  };
reg cfg_cq_dir_tot_sch_cnth_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq Dir Tot Sch Cnth";
      desc="Bits[63:32] of per-CQ running count of number of scheduled DIR QE.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Count"; fieldwidth = 32; desc = "msb of running count of number of DIR QE scheduled.  Writing any value zeroes both msb and lsb.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } COUNT[31:0] = 32'h0; 
  };
reg cfg_cq_dir_tot_sch_cntl_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq Dir Tot Sch Cntl";
      desc="Bits[31:0] of per CQ running count of number of scheduled DIR QE.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Count"; fieldwidth = 32; desc = "lsb of running count of number of DIR QE scheduled.  Writing any value zeroes both msb and lsb.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } COUNT[31:0] = 32'h0; 
  };
reg cfg_qid_dir_replay_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="RUNTIMEARCHSTATE_VIRT_MEM_QID_32";
      name="Cfg Qid Dir Replay Count";
      desc="Per-QID count of DIR QEs for this QID that have been re-ordered and are in DQED waiting to be replayed.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Count"; fieldwidth = 13; desc = "Number of DIR QEs waiting to be replayed.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; } COUNT[12:0] = 13'h0; 
  };
reg cfg_qid_naldb_max_depth_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_32";
      name="Cfg Qid Naldb Max Depth";
      desc="Per-QID (across all priorities) maximum sampled instantaneous queue depth in QED for {UNO, ORD} QEs.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Depth"; desc = "Maximum sampled instantaneous enqueue depth";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } DEPTH[13:0] = 14'h0000; 
  };
reg cfg_qid_ldb_replay_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="RUNTIMEARCHSTATE_VIRT_MEM_QID_32";
      name="Cfg Qid Ldb Replay Count";
      desc="Per-QID count of LDB QEs for this QID that have been re-ordered and are waiting to be replayed.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Count"; desc = "Number of LDB QEs waiting to be replayed.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; } COUNT[13:0] = 14'h0; 
  };
reg cfg_qid_dir_max_depth_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_64";
      name="Cfg Qid Dir Max Depth";
      desc="Per-QID (across all priorities) maximum sampled instantaneous queue depth for DIR QEs.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Count"; desc = "Maximum sampled instantaneous queue depth";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/C"; } DEPTH[12:0] = 13'h0; 
  };
reg cfg_cq_dir_token_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq Dir Token Count";
      desc="Count of the number of tokens owned by the DIR CQ.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Token Count"; desc = "Number of tokens owned by the CQ.  A configuration write must write a value of 0, and clears dynamic state associated with this CQ to its initial state.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; } COUNT[10:0] = 11'h0; 
  };
reg cfg_qid_ldb_enqueue_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="RUNTIMEARCHSTATE_VIRT_MEM_QID_32";
      name="Cfg Qid Ldb Enqueue Count";
      desc="Per-QID count of number of {UNO, ORD} QE residing in QED and tracked for non-atomic LDB scheduling.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Count"; desc = "Number of {UNO, ORD} QE residing in QED";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; } COUNT[13:0] = 14'h0000; 
  };
reg cfg_qid_atq_enqueue_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="RUNTIMEARCHSTATE_VIRT_MEM_QID_32";
      name="Cfg Qid Atq Enqueue Count";
      HandCoded=true;
      desc="Per-QID count of the number of ATM QE residing in QED.";
      regwidth = 32;
      field { name = "Count"; fieldwidth = 14; desc = "Number of ATM QE in QED.  Incremented when the QE is initially enqueued (atq) and decremented when the QE is transitioned from atq to atm (moved from QED to AQED).";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; } COUNT[13:0] = 14'h0000; 
  };
reg cfg_cq_ldb_disable_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq Ldb Disable";
      desc="Per-LDB CQ scheduling disable bit. Setting the bit disables scheduling to the CQ and permits reconfiguration of the per-CQ load balancing parameters (QID, QIDIXV, and priority) while HQM simultaneously schedules to other enabled CQs.";
        regwidth = 32;
        HandCoded=true;
      field { name = "Enable Pair Cq Mode"; fieldwidth = 1; desc = "LDB CQ is enabled";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } ENABLED_PCQ[1:1] = 1'h0; 
      field { name = "Disable Cq"; fieldwidth = 1; desc = "LDB CQ is disabled";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } DISABLED[0:0] = 1'h1; 
  };
reg cfg_syndrome_sw_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="DEBUG_ONLY_REG_NA_1";
      name="Cfg Syndrome Sw";
      regwidth = 32;
      HandCoded=true;
      desc="Syndrome register for alarms caused by SW or configuration errors.  Decode as follows:
[br](type=0  data[04]): HCW error : LDB QID inflight count underflow - excess completions/releases for QID                                            
[br][IntelRsvd](type=0  data[03]): HCW error : LDB CQ inflight count underflow - excess completions for CQ             [/IntelRsvd]
[br][IntelRsvd](type=0  data[02]): HCW error : LDB total inflight count underflow - excess completions                 [/IntelRsvd]
[br][IntelRsvd](type=0  data[01]): HCW error : DIR Token count underflow - excess tokens for CQ                        [/IntelRsvd]
[br][IntelRsvd](type=0  data[00]): HCW error : LDB Token count underflow - excess tokens for CQ                        [/IntelRsvd]
";
      field { name = "Syndvalid"; desc = "Valid"; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/1C/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_sw.i_hqm_AW_register_wtcfg.internal_f[31:31]";} SYNDVALID[31:31] = 1'b0;
      field { name = "Syndtype"; desc = "Type of error(s) captured."; fieldwidth = 3;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_sw.i_hqm_AW_register_wtcfg.internal_f[30:28]";} SYNDTYPE[30:28] = 3'h0;
      field { name = "Synddata"; desc = "Syndrome data captured."; fieldwidth = 28;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_sw.i_hqm_AW_register_wtcfg.internal_f[27:0]";} SYNDDATA[27:0] = 28'h0;
  };
reg cfg_syndrome_hw_r {
      IntelRsvd=true;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="DEBUG_ONLY_REG_NA_1";
      name="Cfg Syndrome Hw";
        regwidth = 32;
        HandCoded=true;
      desc="Non-default settings may cause UNDEFINED behavior.Syndrome register for alarms caused HW fault.  Decode as follows:
[br](type=1  data[00]): RES error    [IntelRsvd]: DIR enqueue count residue error                     [/IntelRsvd]
[br](type=1  data[01]): Core error   [IntelRsvd]: DIR enqueue count underflow                         [/IntelRsvd]
[br](type=1  data[02]): Core error   [IntelRsvd]: DIR enqueue count overflow                          [/IntelRsvd]
[br](type=1  data[03]): RES error    [IntelRsvd]: LDB enqueue count residue error                     [/IntelRsvd]
[br](type=1  data[04]): Core error   [IntelRsvd]: LDB enqueue count underflow                         [/IntelRsvd]
[br](type=1  data[05]): Core error   [IntelRsvd]: LDB enqueue count overflow                          [/IntelRsvd]
[br](type=1  data[06]): PAR error    [IntelRsvd]: LDB qid depth threshold parity error                [/IntelRsvd]
[br](type=1  data[07]): PAR error    [IntelRsvd]: DIR qid depth threshold parity error                [/IntelRsvd]
[br](type=1  data[08]): PAR error    [IntelRsvd]: ATQ qid depth threshold parity error                [/IntelRsvd]
[br](type=1  data[09]): RES error    [IntelRsvd]: LDB qid inflight count residue error                [/IntelRsvd]
[br](type=1  data[10]): Core error   [IntelRsvd]: LDB qid inflight count overflow                     [/IntelRsvd]
[br](type=1  data[11]): PAR error    [IntelRsvd]: LDB qid inflight limit parity error                 [/IntelRsvd]
[br](type=1  data[12]): RES error    [IntelRsvd]: ATQ enqueue count residue error                     [/IntelRsvd]
[br](type=1  data[13]): RES error    [IntelRsvd]: ATQ atm active residue error                        [/IntelRsvd]
[br](type=1  data[15]): RES error    [IntelRsvd]: AQED active count residue error                     [/IntelRsvd]
[br](type=1  data[16]): Core error   [IntelRsvd]: AQED active count underflow                         [/IntelRsvd]
[br](type=1  data[17]): Core error   [IntelRsvd]: AQED active count overflow                          [/IntelRsvd]
[br](type=1  data[18]): PAR error    [IntelRsvd]: AQED active limit parity error                      [/IntelRsvd]
[br](type=1  data[19]): RES error    [IntelRsvd]: DIR Replay input fragment count residue error       [/IntelRsvd]
[br](type=1  data[20]): RES error    [IntelRsvd]: DIR Replay enqueue count residue error              [/IntelRsvd]
[br](type=1  data[21]): Core error   [IntelRsvd]: DIR Replay enqueue count underflow                  [/IntelRsvd]
[br](type=1  data[22]): Core error   [IntelRsvd]: DIR Replay enqueue count overflow                   [/IntelRsvd]
[br](type=1  data[23]): RES error    [IntelRsvd]: LDB Replay input fragment count residue error       [/IntelRsvd]
[br](type=1  data[24]): RES error    [IntelRsvd]: LDB Replay enqueue count residue error              [/IntelRsvd]
[br](type=1  data[25]): Core error   [IntelRsvd]: LDB Replay enqueue count underflow                  [/IntelRsvd]
[br](type=1  data[26]): Core error   [IntelRsvd]: LDB Replay enqueue count overflow                   [/IntelRsvd]
[br](type=2  data[00]): PAR error    [IntelRsvd]: DIR input qid/cq parity error                       [/IntelRsvd]
[br](type=2  data[01]): PAR error    [IntelRsvd]: LDB input qid parity error                          [/IntelRsvd]
[br](type=2  data[02]): PAR error    [IntelRsvd]: LDB input cq parity error                           [/IntelRsvd]
[br](type=2  data[03]): Core error   [IntelRsvd]: LDB total inflight count overflow                   [/IntelRsvd]
[br](type=2  data[04]): PAR error    [IntelRsvd]: ATQ input qid parity error                          [/IntelRsvd]
[br](type=2  data[05]): Core error   [IntelRsvd]: ATQ total active count underflow                    [/IntelRsvd]
[br](type=2  data[06]): Core error   [IntelRsvd]: ATQ total active count overflow                     [/IntelRsvd]
[br](type=2  data[07]): PAR error    [IntelRsvd]: DIR Replay input qid parity error                   [/IntelRsvd]
[br](type=2  data[08]): PAR error    [IntelRsvd]: LDB Replay input qid parity error                   [/IntelRsvd]
[br](type=2  data[09]): Core error   [IntelRsvd]: ATQ FID inflight count underflow                    [/IntelRsvd]
[br](type=2  data[10]): Core error   [IntelRsvd]: ATQ FID inflight count overflow                     [/IntelRsvd]
[br](type=2  data[11]): Core error   [IntelRsvd]: ATQ FID inflight limit error                        [/IntelRsvd]
[br](type=2  data[12]): Core error   [IntelRsvd]: ATQ FID total active limit error                    [/IntelRsvd]
[br](type=2  data[13]): Core error   [IntelRsvd]: Memory access error                                 [/IntelRsvd]
[br](type=2  data[14]): Core error   [IntelRsvd]: rx_sync FIFO error                                  [/IntelRsvd]
[br](type=2  data[15]): RES error    [IntelRsvd]: DIR input token count residue error                 [/IntelRsvd]
[br](type=2  data[16]): RES error    [IntelRsvd]: DIR token count residue error                       [/IntelRsvd]
[br](type=2  data[17]): Core error   [IntelRsvd]: DIR token count overflow                            [/IntelRsvd]
[br](type=2  data[18]): PAR error    [IntelRsvd]: DIR token limit parity error                        [/IntelRsvd]
[br](type=2  data[19]): RES error    [IntelRsvd]: LDB input token count residue error                 [/IntelRsvd]
[br](type=2  data[20]): RES error    [IntelRsvd]: LDB token count residue error                       [/IntelRsvd]
[br](type=2  data[21]): Core error   [IntelRsvd]: LDB token count overflow                            [/IntelRsvd]
[br](type=2  data[22]): PAR error    [IntelRsvd]: LDB token limit parity error                        [/IntelRsvd]
[br](type=2  data[23]): RES error    [IntelRsvd]: LDB cq inflight count residue error                 [/IntelRsvd]
[br](type=2  data[24]): Core error   [IntelRsvd]: LDB cq inflight count overflow                      [/IntelRsvd]
[br](type=2  data[25]): PAR error    [IntelRsvd]: LDB cq inflight limit parity error                  [/IntelRsvd]
[br](type=2  data[26]): Core error   [IntelRsvd]: LDB completion blast ap reset error                 [/IntelRsvd]
[br](type=2  data[27]): Core error   [IntelRsvd]: LDB completion blast lsp set error                  [/IntelRsvd]
[br](type=3  data[00]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 00                  [/IntelRsvd]
[br](type=3  data[01]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 01                  [/IntelRsvd]
[br](type=3  data[02]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 02                  [/IntelRsvd]
[br](type=3  data[03]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 03                  [/IntelRsvd]
[br](type=3  data[04]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 04                  [/IntelRsvd]
[br](type=3  data[05]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 05                  [/IntelRsvd]
[br](type=3  data[06]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 06                  [/IntelRsvd]
[br](type=3  data[07]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 07                  [/IntelRsvd]
[br](type=3  data[08]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 08                  [/IntelRsvd]
[br](type=3  data[09]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 09                  [/IntelRsvd]
[br](type=3  data[10]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 10                  [/IntelRsvd]
[br](type=3  data[11]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 11                  [/IntelRsvd]
[br](type=3  data[12]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 12                  [/IntelRsvd]
[br](type=3  data[13]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 13                  [/IntelRsvd]
[br](type=3  data[14]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 14                  [/IntelRsvd]
[br](type=3  data[15]): Core error [IntelRsvd]: LDB qid2cqidix parity error slice 15                  [/IntelRsvd]
[br](type=3  data[16]): Core info    [IntelRsvd]: LDB qid2cqidix parity error type: 0=ldb, 1=atomic   [/IntelRsvd]
[br](type=3  data[17]): PAR error    [IntelRsvd]: LDB cq2qid qid0 parity error                        [/IntelRsvd]
[br](type=3  data[18]): PAR error    [IntelRsvd]: LDB cq2qid qid1 parity error                        [/IntelRsvd]
[br](type=3  data[19]): PAR error    [IntelRsvd]: LDB cq2qid priov parity error                       [/IntelRsvd]
[br](type=3  data[20]): FIFO error   [IntelRsvd]: QED deq fifo underflow                              [/IntelRsvd]
[br](type=3  data[21]): FIFO error   [IntelRsvd]: QED deq fifo overflow                               [/IntelRsvd]
[br](type=3  data[22]): FIFO error   [IntelRsvd]: AQED deq fifo underflow                             [/IntelRsvd]
[br](type=3  data[23]): FIFO error   [IntelRsvd]: AQED deq fifo overflow                              [/IntelRsvd]
[br](type=3  data[24]): RMW error    [IntelRsvd]: LDB WU pipeline error                               [/IntelRsvd]
[br](type=3  data[25]): Core error   [IntelRsvd]: LDB QED DEQ credit error                            [/IntelRsvd]
[br](type=3  data[26]): Core error   [IntelRsvd]: LDB AQED DEQ credit error                           [/IntelRsvd]
[br](type=3  data[27]): Core error   [IntelRsvd]: rf_ipar_error                                       [/IntelRsvd]
[br](type=4  data[00]): RES error    [IntelRsvd]: LDB total inflight count residue error              [/IntelRsvd]
[br](type=4  data[01]): Core error   [IntelRsvd]: LDB nalb scheduling error                           [/IntelRsvd]
[br](type=4  data[02]): RES error    [IntelRsvd]: ATQ aqed total enqueue count residue error          [/IntelRsvd]
[br](type=4  data[03]): RES error    [IntelRsvd]: ATQ FID inflight count residue error                [/IntelRsvd]
[br](type=4  data[04]): RMW error    [IntelRsvd]: LDB cq2qid pipeline error                           [/IntelRsvd]
[br](type=4  data[05]): RMW error    [IntelRsvd]: DIR enqueue count pipeline error                    [/IntelRsvd]
[br](type=4  data[06]): RMW error    [IntelRsvd]: LDB cq token count pipeline error                   [/IntelRsvd]
[br](type=4  data[07]): RMW error    [IntelRsvd]: LDB qid2cqidix pipeline error                       [/IntelRsvd]
[br](type=4  data[08]): RMW error    [IntelRsvd]: LDB arbindex pipeline error                         [/IntelRsvd]
[br](type=4  data[09]): RMW error    [IntelRsvd]: ATQ enqueue count pipeline error                    [/IntelRsvd]
[br](type=4  data[10]): RMW error    [IntelRsvd]: DIR Replay enqueue count pipeline error             [/IntelRsvd]
[br](type=4  data[11]): RMW error    [IntelRsvd]: LDB Replay enqueue count pipeline error             [/IntelRsvd]
[br](type=4  data[12]): FIFO error   [IntelRsvd]: NALB completion fifo underflow                      [/IntelRsvd]
[br](type=4  data[13]): FIFO error   [IntelRsvd]: NALB completion fifo overflow                       [/IntelRsvd]
[br](type=4  data[14]): FIFO error   [IntelRsvd]: NALB select nalb fifo underflow                     [/IntelRsvd]
[br](type=4  data[15]): FIFO error   [IntelRsvd]: NALB select nalb fifo overflow                      [/IntelRsvd]
[br](type=4  data[16]): FIFO error   [IntelRsvd]: ENQ nalb fifo underflow                             [/IntelRsvd]
[br](type=4  data[17]): FIFO error   [IntelRsvd]: ENQ nalb fifo overflow                              [/IntelRsvd]
[br](type=4  data[18]): FIFO error   [IntelRsvd]: ATM completion fifo underflow                       [/IntelRsvd]
[br](type=4  data[19]): FIFO error   [IntelRsvd]: ATM completion fifo overflow                        [/IntelRsvd]
[br](type=4  data[20]): FIFO error   [IntelRsvd]: LDB token return fifo underflow                     [/IntelRsvd]
[br](type=4  data[21]): FIFO error   [IntelRsvd]: LDB token return fifo overflow                      [/IntelRsvd]
[br](type=4  data[22]): RES error    [IntelRsvd]: LDB wu count residue error                          [/IntelRsvd]
[br](type=4  data[23]): PAR error    [IntelRsvd]: LDB wu limit parity error                           [/IntelRsvd]
[br](type=4  data[24]): FIFO error   [IntelRsvd]: UNO atm completion fifo underflow                   [/IntelRsvd]
[br](type=4  data[25]): FIFO error   [IntelRsvd]: UNO atm completion fifo overflow                    [/IntelRsvd]
[br](type=4  data[26]): Core error   [IntelRsvd]: LDB cq arbiter error                                [/IntelRsvd]
[br](type=4  data[27]): PAR error    [IntelRsvd]: LDB wu input parity error                           [/IntelRsvd]
[br](type=5  data[00]): RES error    [IntelRsvd]: DIR per-cq total scheduled count residue error      [/IntelRsvd]
[br](type=5  data[01]): RES error    [IntelRsvd]: LDB per-cq total scheduled count residue error      [/IntelRsvd]
[br](type=5  data[02]): RES error    [IntelRsvd]: DIR per-qid total enqueue count residue error       [/IntelRsvd]
[br](type=5  data[03]): RES error    [IntelRsvd]: LDB per-qid total enqueue count residue error       [/IntelRsvd]
[br](type=5  data[04]): RES error    [IntelRsvd]: ATQ per-qid total enqueue count residue error       [/IntelRsvd]
";
      field { name = "Syndvalid"; desc = "Valid"; fieldwidth = 1;  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RW/1C/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_hw.i_hqm_AW_register_wtcfg.internal_f[31:31]";} SYNDVALID[31:31] = 1'b0;
      field { name = "Syndtype"; desc = "Type of error(s) captured."; fieldwidth = 3;  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_hw.i_hqm_AW_register_wtcfg.internal_f[30:28]";} SYNDTYPE[30:28] = 3'h0;
      field { name = "Synddata"; desc = "Syndrome data captured."; fieldwidth = 28;  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_hw.i_hqm_AW_register_wtcfg.internal_f[27:0]";} SYNDDATA[27:0] = 28'h0;
  };
reg cfg_arb_weight_ldb_issue_0_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Arb Weight Ldb Issue_0";
      desc="Global (1 register/HQM domain) random weights for completion arbiters.  Arbitration occurs between UNO and ORD QID completions and between NALB and ATM CQ completions. ";
        regwidth = 32;
        HandCoded=true;
      field { name = "Uno Qid Cmp Weight"; fieldwidth = 8; desc = "8 bit arb weight for UNO qid completions) ";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[31:24]";} UNO_QID_CMP_WEIGHT[31:24] = 8'hff; 
      field { name = "Ord Qid Cmp Weight"; fieldwidth = 8; desc = "8 bit arb weight for ORD qid completions) ";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[23:16]";} ORD_QID_CMP_WEIGHT[23:16] = 8'h7f; 
      field { name = "Nalb Cq Cmp Weight"; fieldwidth = 8; desc = "8 bit arb weight for NALB cq completions) ";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[15:8]";} NALB_CQ_CMP_WEIGHT[15:8] = 8'hff; 
      field { name = "Atm Cq Cmp Weight"; fieldwidth = 8; desc = "8 bit arb weight for ATM cq completions) ";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[7:0]";} ATM_CQ_CMP_WEIGHT[7:0] = 8'h7f; 
};
reg cfg_pipe_health_hold_00_r {
      IntelRsvd=true;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Pipe Health Hold_00";
      desc="pipeline health hold 0";
        regwidth = 32;
        HandCoded=true;
      field { name="p4_ldb_sch_hold"; fieldwidth = 1; desc = "LDB pipeline p4 hold due to atomic schedule hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[27:27]";} P4_LDB_SCH_HOLD[27:27] = 1'b0 ;
      field { name="p4_ldb_pipe_hold"; fieldwidth = 1; desc = "LDB pipeline p4 hold due to p5";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[26:26]";} P4_LDB_PIPE_HOLD[26:26] = 1'b0 ;
      field { name="p1_ldb_atm_cred_hold"; fieldwidth = 1; desc = "LDB pipeline p1 hold due to atomic pipeline credit limit";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[25:25]";} P1_LDB_ATM_CRED_HOLD[25:25] = 1'b0 ;
      field { name="p1_ldb_nalb_cred_hold"; fieldwidth = 1; desc = "LDB pipeline p1 hold due to nalb pipeline credit limit";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[24:24]";} P1_LDB_NALB_CRED_HOLD[24:24] = 1'b0 ;
      field { name="p9_ldb_hold"; fieldwidth = 1; desc = "LDB pipeline p9 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[9:9]";} P9_LDB_HOLD[9:9] = 1'b0 ;
      field { name="p8_ldb_hold"; fieldwidth = 1; desc = "LDB pipeline p8 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[8:8]";} P8_LDB_HOLD[8:8] = 1'b0 ;
      field { name="p7_ldb_hold"; fieldwidth = 1; desc = "LDB pipeline p7 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[7:7]";} P7_LDB_HOLD[7:7] = 1'b0 ;
      field { name="p6_ldb_hold"; fieldwidth = 1; desc = "LDB pipeline p6 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[6:6]";} P6_LDB_HOLD[6:6] = 1'b0 ;
      field { name="p5_ldb_hold"; fieldwidth = 1; desc = "LDB pipeline p5 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[5:5]";} P5_LDB_HOLD[5:5] = 1'b0 ;
      field { name="p4_ldb_hold"; fieldwidth = 1; desc = "LDB pipeline p4 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[4:4]";} P4_LDB_HOLD[4:4] = 1'b0 ;
      field { name="p3_ldb_hold"; fieldwidth = 1; desc = "LDB pipeline p3 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[3:3]";} P3_LDB_HOLD[3:3] = 1'b0 ;
      field { name="p2_ldb_hold"; fieldwidth = 1; desc = "LDB pipeline p2 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[2:2]";} P2_LDB_HOLD[2:2] = 1'b0 ;
      field { name="p1_ldb_hold"; fieldwidth = 1; desc = "LDB pipeline p1 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[1:1]";} P1_LDB_HOLD[1:1] = 1'b0 ;
};
reg cfg_diagnostic_aw_status_r {
      IntelRsvd=true;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="DEBUG_ONLY_REG_NA_1";
      name="Cfg Diagnostic Aw Status";
      desc="Diagnostic status for AW submodules";
        regwidth = 32;
        HandCoded=true;
      field { fieldwidth = 4; name = "Rsvz2"; desc = "Rsvz2";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[31:28]";} RSVZ2[31:28] = 4'h0 ;
      field { fieldwidth = 1; name = "Int Ser Up DB Not Ready"; desc = "Interrupt Serializer Up DB not ready";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[27:27]";} INT_SER_UP_NOT_RDY[27:27] = 1'h1;
      field { fieldwidth = 1; name = "Int Set Up Valid"; desc = "Interrupt Serializer Up DB valid (not empty)";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[26:26]";} INT_SER_UP_V[26:26] = 1'h0;
      field { fieldwidth = 1; name = "Int Ser Down DB Not Ready"; desc = "Interrupt Serializer Down DB not ready";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[25:25]";} INT_SER_DOWN_NOT_RDY[25:25] = 1'h0;
      field { fieldwidth = 1; name = "Int Ser Down Valid"; desc = "Interrupt Serializer Down DB valid (not empty)";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[24:24]";} INT_SER_DOWN_V[24:24] = 1'h0;
      field { fieldwidth = 4; name = "Rsvz1"; desc = "Rsvz1";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[23:20]";} RSVZ1[23:20] = 4'h0 ;
      field { fieldwidth = 1; name = "Dir Tok Rtn DB Not Ready"; desc = "Dir Token Return DB not ready";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[19:19]";} DIR_TOK_RTN_NOT_RDY[19:19] = 1'h0;
      field { fieldwidth = 1; name = "Dir Tok Rtn DB Valid"; desc = "Dir Token Return DB valid (not empty)";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[18:18]";} DIR_TOK_RTN_V[18:18] = 1'h0;
      field { fieldwidth = 1; name = "Enq ATQ DB Not Ready"; desc = "Enq ATQ DB not ready";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[17:17]";} ENQ_ATQ_NOT_RDY[17:17] = 1'h0;
      field { fieldwidth = 1; name = "Enq ATQ DB Valid"; desc = "Enq ATQ DB valid (not empty)";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[16:16]";} ENQ_ATQ_V[16:16] = 1'h0;
      field { fieldwidth = 4; name = "Rsvz0"; desc = "Rsvz0";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[15:12]";} RSVZ0[15:12] = 4'h0 ;
      field { fieldwidth = 1; name = "Ldb Token Return FIFO Almost Full"; desc = "Ldb Token Return FIFO Almost Full";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[11:11]";} LDB_TOK_RTN_AFULL[11:11] = 1'h0;
      field { fieldwidth = 1; name = "Ldb Token Return FIFO Valid"; desc = "Ldb Token Return FIFO valid (not empty)";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[10:10]";} LDB_TOK_RTN_V[10:10] = 1'h0;
      field { fieldwidth = 1; name = "Uno Atm Cmp FIFO Almost Full"; desc = "Uno Atm Cmp FIFO Almost Full";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[9:9]";} UNO_ATM_CMP_AFULL[9:9] = 1'h0;
      field { fieldwidth = 1; name = "Uno Atm Cmp FIFO Valid"; desc = "Uno Atm Cmp FIFO valid (not empty)";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[8:8]";} UNO_ATM_CMP_V[8:8] = 1'h0;
      field { fieldwidth = 1; name = "Nalb Cmp FIFO Almost Full"; desc = "Nalb Cmp FIFO Almost Full";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[7:7]";} NALB_CMP_AFULL[7:7] = 1'h0;
      field { fieldwidth = 1; name = "Nalb Cmp FIFO Valid"; desc = "Nalb Cmp FIFO valid (not empty)";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[6:6]";} NALB_CMP_V[6:6] = 1'h0;
      field { fieldwidth = 1; name = "Enq Nalb FIFO Almost Full"; desc = "Enq Nalb FIFO Almost Full";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[5:5]";} ENQ_NALB_AFULL[5:5] = 1'h0;
      field { fieldwidth = 1; name = "Enq Nalb FIFO Valid"; desc = "Enq Nalb FIFO valid (not empty)";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[4:4]";} ENQ_NALB_V[4:4] = 1'h0;
      field { fieldwidth = 1; name = "Atm Cmp FIFO Almost Full"; desc = "Atm Cmp FIFO Almost Full";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[3:3]";} ATM_CMP_AFULL[3:3] = 1'h0;
      field { fieldwidth = 1; name = "Atm Cmp FIFO Valid"; desc = "Atm Cmp FIFO valid (not empty)";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[2:2]";} ATM_CMP_V[2:2] = 1'h0;
      field { fieldwidth = 1; name = "Nalb Sel Nalb FIFO Almost Full"; desc = "Nalb Sel Nalb FIFO Almost Full";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[1:1]";} NALB_SEL_NALB_AFULL[1:1] = 1'h0;
      field { fieldwidth = 1; name = "Nalb Sel Nalb FIFO Valid"; desc = "Nalb Sel Nalb FIFO valid (not empty)";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[0:0]";} NALB_SEL_NALB_V[0:0] = 1'h0;
};
reg cfg_diagnostic_status_0_r {
      IntelRsvd=true;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="DEBUG_ONLY_REG_NA_1";
      name="Cfg Diagnostic Status_0";
      desc="Diagnostic status 0";
        regwidth = 32;
        HandCoded=true;
      field { name="tot_if_v"; fieldwidth = 1; desc = "Total inflight count < less than configured limit, disables all LDB scheduling if 0";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[27:27]";} TOT_IF_V[27:27] = 1'h1;
      field { name="atm_if_v"; fieldwidth = 1; desc = "All atomic qid inflight valid (less than configured limit)";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[26:26]";} ATM_IF_V[26:26] = 1'h1;
      field { name="aqed_empty"; fieldwidth = 1; desc = "All atomic qid inactive in AQED";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[25:25]";} AQED_EMPTY[25:25] = 1'h1;
      field { name="nalb_sn_fcerr_rptd"; fieldwidth = 1; desc = "Nalb_sel_nalb FIFO credit error has been reported";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[24:24]";} NALB_SN_FCERR_RPTD[24:24] = 1'h0;
      field { name="atq_stop_atqatm"; fieldwidth = 1; desc = "AQED is stopping ATQ scheduling";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[23:23]";} ATQ_STOP_ATQATM[23:23] = 1'h0; 
      field { name="ldb_cq_arb_reqv_cos3"; fieldwidth = 1; desc = "Ldb cq cos arbiter req valid for cos 3";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[19:19]";} LDB_CQ_ARB_REQV_COS3[19:19] = 1'h0;
      field { name="ldb_cq_arb_reqv_cos2"; fieldwidth = 1; desc = "Ldb cq cos arbiter req valid for cos 2";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[18:18]";} LDB_CQ_ARB_REQV_COS2[18:18] = 1'h0;
      field { name="ldb_cq_arb_reqv_cos1"; fieldwidth = 1; desc = "Ldb cq cos arbiter req valid for cos 1";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[17:17]";} LDB_CQ_ARB_REQV_COS1[17:17] = 1'h0;
      field { name="ldb_cq_arb_reqv_cos0"; fieldwidth = 1; desc = "Ldb cq cos arbiter req valid for cos 0";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[16:16]";} LDB_CQ_ARB_REQV_COS0[16:16] = 1'h0;
      field { name="ldb_cmp_v"; fieldwidth = 1; desc = "Any ldb cq completion outstanding";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[15:15]";} LDB_CMP_V[15:15] = 1'h0; 
      field { name="ldb_tok_v"; fieldwidth = 1; desc = "Any ldb token return outstanding";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[14:14]";} LDB_TOK_V[14:14] = 1'h0; 
      field { name="ap_lsp_atm_v"; fieldwidth = 1; desc = "Atomic haswork update received from AP last clock";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[13:13]";} AP_LSP_ATM_V[13:13] = 1'h0; 
      field { name="aqed_act"; fieldwidth = 1; desc = "Any atomic active in AQED";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[12:12]";} AQED_ACT[12:12] = 1'h0; 
      field { name="dir_tok_v"; fieldwidth = 1; desc = "Any dir token return outstanding";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[11:11]";} DIR_TOK_V[11:11] = 1'h0; 
      field { name="ldb_cq_no_space"; fieldwidth = 1; desc = "One or more ldb cq does not have space for scheduling";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[10:10]";} LDB_CQ_NO_SPACE[10:10] = 1'h0; 
      field { name="ldb_cq_busy"; fieldwidth = 1; desc = "Any ldb cq is busy";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[9:9]";} LDB_CQ_BUSY[9:9] = 1'h0; 
      field { name="atq_qid_dis"; fieldwidth = 1; desc = "Any atq qid is disabled for scheduling";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[8:8]";} ATQ_QID_DIS[8:8] = 1'h0; 
      field { name="cmpblast"; fieldwidth = 1; desc = "Any cmp blast";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[7:7]";} CMPBLAST[7:7] = 1'h0; 
      field { name="cmpblast_chkv"; fieldwidth = 1; desc = "Any cmp blast check valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[6:6]";} CMPBLAST_CHKV[6:6] = 1'h0; 
      field { name="nalb_blast"; fieldwidth = 1; desc = "Any NALB blast";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[5:5]";} NALB_BLAST[5:5] = 1'h0; 
      field { name="nalb_v"; fieldwidth = 1; desc = "Any NALB valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[4:4]";} NALB_V[4:4] = 1'h0; 
      field { name="rlist_blast"; fieldwidth = 1; desc = "Any RLIST blast";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[3:3]";} RLIST_BLAST[3:3] = 1'h0; 
      field { name="rlist_v"; fieldwidth = 1; desc = "Any RLIST valid and not disabled by config";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[2:2]";} RLIST_V[2:2] = 1'h0; 
      field { name="slist_blast"; fieldwidth = 1; desc = "Any SLIST blast";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[1:1]";} SLIST_BLAST[1:1] = 1'h0; 
      field { name="slist_v"; fieldwidth = 1; desc = "Any SLIST valid and not disabled by config";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[0:0]";} SLIST_V[0:0] = 1'h0; 
};
reg cfg_pipe_health_valid_00_r {
      IntelRsvd=true;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Pipe Health Valid_00";
      desc="pipeline health valid 0";
        regwidth = 32;
        HandCoded=true;
      field { name="p8_ldb_valid"; fieldwidth = 1; desc = "LDB pipeline p8 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[8:8]";} P8_LDB_VALID[8:8] = 1'b0 ;
      field { name="p7_ldb_valid"; fieldwidth = 1; desc = "LDB pipeline p7 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[7:7]";} P7_LDB_VALID[7:7] = 1'b0 ;
      field { name="p6_ldb_valid"; fieldwidth = 1; desc = "LDB pipeline p6 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[6:6]";} P6_LDB_VALID[6:6] = 1'b0 ;
      field { name="p5_ldb_valid"; fieldwidth = 1; desc = "LDB pipeline p5 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[5:5]";} P5_LDB_VALID[5:5] = 1'b0 ;
      field { name="p4_ldb_valid"; fieldwidth = 1; desc = "LDB pipeline p4 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[4:4]";} P4_LDB_VALID[4:4] = 1'b0 ;
      field { name="p3_ldb_valid"; fieldwidth = 1; desc = "LDB pipeline p3 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[3:3]";} P3_LDB_VALID[3:3] = 1'b0 ;
      field { name="p2_ldb_valid"; fieldwidth = 1; desc = "LDB pipeline p2 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[2:2]";} P2_LDB_VALID[2:2] = 1'b0 ;
      field { name="p1_ldb_cq_valid"; fieldwidth = 1; desc = "LDB pipeline p1 CQ valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[1:1]";} P1_LDB_CQ_VALID[1:1] = 1'b0 ;
};
reg cfg_pipe_health_hold_01_r {
      IntelRsvd=true;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Pipe Health Hold_01";
      desc="pipeline health hold 1";
        regwidth = 32;
        HandCoded=true;
      field { name="p4_lbrpl_sch_hold"; fieldwidth = 1; desc = "LBRPL pipeline p4 schedule hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[28:28]";} P4_LBRPL_SCH_HOLD[28:28] = 1'b0 ;
      field { name="p3_lbrpl_hold"; fieldwidth = 1; desc = "LBRPL pipeline p3 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[27:27]";} P3_LBRPL_HOLD[27:27] = 1'b0 ;
      field { name="p2_lbrpl_hold"; fieldwidth = 1; desc = "LBRPL pipeline p2 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[26:26]";} P2_LBRPL_HOLD[26:26] = 1'b0 ;
      field { name="p1_lbrpl_hold"; fieldwidth = 1; desc = "LBRPL pipeline p1 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[25:25]";} P1_LBRPL_HOLD[25:25] = 1'b0 ;
      field { name="p0_lbrpl_hold"; fieldwidth = 1; desc = "LBRPL pipeline p0 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[24:24]";} P0_LBRPL_HOLD[24:24] = 1'b0 ;
      field { name="p4_dirrpl_sch_hold"; fieldwidth = 1; desc = "DIRRPL pipeline p4 schedule hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[20:20]";} P4_DIRRPL_SCH_HOLD[20:20] = 1'b0 ;
      field { name="p3_dirrpl_hold"; fieldwidth = 1; desc = "DIRRPL pipeline p3 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[19:19]";} P3_DIRRPL_HOLD[19:19] = 1'b0 ;
      field { name="p2_dirrpl_hold"; fieldwidth = 1; desc = "DIRRPL pipeline p2 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[18:18]";} P2_DIRRPL_HOLD[18:18] = 1'b0 ;
      field { name="p1_dirrpl_hold"; fieldwidth = 1; desc = "DIRRPL pipeline p1 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[17:17]";} P1_DIRRPL_HOLD[17:17] = 1'b0 ;
      field { name="p0_dirrpl_hold"; fieldwidth = 1; desc = "DIRRPL pipeline p0 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[16:16]";} P0_DIRRPL_HOLD[16:16] = 1'b0 ;
      field { name="p4_atq_sch_hold"; fieldwidth = 1; desc = "ATQ pipeline p4 schedule hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[12:12]";} P4_ATQ_SCH_HOLD[12:12] = 1'b0 ;
      field { name="p3_atq_hold"; fieldwidth = 1; desc = "ATQ pipeline p3 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[11:11]";} P3_ATQ_HOLD[11:11] = 1'b0 ;
      field { name="p2_atq_hold"; fieldwidth = 1; desc = "ATQ pipeline p2 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[10:10]";} P2_ATQ_HOLD[10:10] = 1'b0 ;
      field { name="p1_atq_hold"; fieldwidth = 1; desc = "ATQ pipeline p1 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[9:9]";} P1_ATQ_HOLD[9:9] = 1'b0 ;
      field { name="p0_atq_hold"; fieldwidth = 1; desc = "ATQ pipeline p0 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[8:8]";} P0_ATQ_HOLD[8:8] = 1'b0 ;
      field { name="p4_dir_sch_hold"; fieldwidth = 1; desc = "DIR pipeline p4 schedule hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[4:4]";} P4_DIR_SCH_HOLD[4:4] = 1'b0 ;
      field { name="p3_dir_hold"; fieldwidth = 1; desc = "DIR pipeline p3 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[3:3]";} P3_DIR_HOLD[3:3] = 1'b0 ;
      field { name="p2_dir_hold"; fieldwidth = 1; desc = "DIR pipeline p2 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[2:2]";} P2_DIR_HOLD[2:2] = 1'b0 ;
      field { name="p1_dir_hold"; fieldwidth = 1; desc = "DIR pipeline p1 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[1:1]";} P1_DIR_HOLD[1:1] = 1'b0 ;
      field { name="p0_dir_hold"; fieldwidth = 1; desc = "DIR pipeline p0 hold";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[0:0]";} P0_DIR_HOLD[0:0] = 1'b0 ;
};
reg cfg_pipe_health_valid_01_r {
      IntelRsvd=true;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Pipe Health Valid_01";
      desc="pipeline health valid 1";
        regwidth = 32;
        HandCoded=true;
      field { name="p4_lbrpl_sch_valid"; fieldwidth = 1; desc = "LBRPL pipeline p4 schedule valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[28:28]";} P4_LBRPL_SCH_VALID[28:28] = 1'b0 ;
      field { name="p3_lbrpl_valid"; fieldwidth = 1; desc = "LBRPL pipeline p3 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[27:27]";} P3_LBRPL_VALID[27:27] = 1'b0 ;
      field { name="p2_lbrpl_valid"; fieldwidth = 1; desc = "LBRPL pipeline p2 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[26:26]";} P2_LBRPL_VALID[26:26] = 1'b0 ;
      field { name="p1_lbrpl_valid"; fieldwidth = 1; desc = "LBRPL pipeline p1 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[25:25]";} P1_LBRPL_VALID[25:25] = 1'b0 ;
      field { name="p0_lbrpl_valid"; fieldwidth = 1; desc = "LBRPL pipeline p0 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[24:24]";} P0_LBRPL_VALID[24:24] = 1'b0 ;
      field { name="p4_dirrpl_sch_valid"; fieldwidth = 1; desc = "DIRRPL pipeline p4 schedule valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[20:20]";} P4_DIRRPL_SCH_VALID[20:20] = 1'b0 ;
      field { name="p3_dirrpl_valid"; fieldwidth = 1; desc = "DIRRPL pipeline p3 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[19:19]";} P3_DIRRPL_VALID[19:19] = 1'b0 ;
      field { name="p2_dirrpl_valid"; fieldwidth = 1; desc = "DIRRPL pipeline p2 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[18:18]";} P2_DIRRPL_VALID[18:18] = 1'b0 ;
      field { name="p1_dirrpl_valid"; fieldwidth = 1; desc = "DIRRPL pipeline p1 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[17:17]";} P1_DIRRPL_VALID[17:17] = 1'b0 ;
      field { name="p0_dirrpl_valid"; fieldwidth = 1; desc = "DIRRPL pipeline p0 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[16:16]";} P0_DIRRPL_VALID[16:16] = 1'b0 ;
      field { name="p4_atq_sch_valid"; fieldwidth = 1; desc = "ATQ pipeline p4 schedule valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[12:12]";} P4_ATQ_SCH_VALID[12:12] = 1'b0 ;
      field { name="p3_atq_valid"; fieldwidth = 1; desc = "ATQ pipeline p3 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[11:11]";} P3_ATQ_VALID[11:11] = 1'b0 ;
      field { name="p2_atq_valid"; fieldwidth = 1; desc = "ATQ pipeline p2 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[10:10]";} P2_ATQ_VALID[10:10] = 1'b0 ;
      field { name="p1_atq_valid"; fieldwidth = 1; desc = "ATQ pipeline p1 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[9:9]";} P1_ATQ_VALID[9:9] = 1'b0 ;
      field { name="p0_atq_valid"; fieldwidth = 1; desc = "ATQ pipeline p0 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[8:8]";} P0_ATQ_VALID[8:8] = 1'b0 ;
      field { name="p4_dir_sch_valid"; fieldwidth = 1; desc = "DIR pipeline p4 schedule valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[4:4]";} P4_DIR_SCH_VALID[4:4] = 1'b0 ;
      field { name="p3_dir_valid"; fieldwidth = 1; desc = "DIR pipeline p3 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[3:3]";} P3_DIR_VALID[3:3] = 1'b0 ;
      field { name="p2_dir_valid"; fieldwidth = 1; desc = "DIR pipeline p2 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[2:2]";} P2_DIR_VALID[2:2] = 1'b0 ;
      field { name="p1_dir_valid"; fieldwidth = 1; desc = "DIR pipeline p1 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[1:1]";} P1_DIR_VALID[1:1] = 1'b0 ;
      field { name="p0_dir_valid"; fieldwidth = 1; desc = "DIR pipeline p0 valid";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[0:0]";} P0_DIR_VALID[0:0] = 1'b0 ;
};
reg cfg_error_inject_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="DEBUG_ONLY_REG_NA_1";
      name="Cfg Error Inject";
      desc="Non-default settings may cause UNDEFINED behavior.Cause error injection.";
        regwidth = 32;
        HandCoded=true;
      field { name="rsvz3"; fieldwidth = 14; desc = "Rsvz3 err inject bits.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[31:18]";} RSVZ3[31:18] = 14'h0; 
      field { name="ldb_tok_cnt_uflow"; fieldwidth = 1; desc = "Inject LDB token count underflow error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[17:17]";} LDB_TOK_CNT_UFLOW[17:17] = 1'h0; 
      field { name="dir_tok_cnt_uflow"; fieldwidth = 1; desc = "Inject DIR token count underflow error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[16:16]";} DIR_TOK_CNT_UFLOW[16:16] = 1'h0; 
      field { name="dp_rpl_perr"; fieldwidth = 1; desc = "Inject LSP to DP replay qid parity error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[15:15]";} DP_RPL_PERR[15:15] = 1'h0; 
      field { name="ldb_rpl_perr"; fieldwidth = 1; desc = "Inject LSP to NALB replay qid parity error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[14:14]";} LDB_RPL_PERR[14:14] = 1'h0; 
      field { name="atq_perr"; fieldwidth = 1; desc = "Inject LSP to NALB ATQ qid parity error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[13:13]";} ATQ_PERR[13:13] = 1'h0; 
      field { name="ldb_flag_perr"; fieldwidth = 1; desc = "Inject LSP to NALB UNO/ORD flag parity error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[12:12]";} LDB_FLAG_PERR[12:12] = 1'h0; 
      field { name="ldb_qid_perr"; fieldwidth = 1; desc = "Inject LSP to NALB UNO/ORD qid parity error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[11:11]";} LDB_QID_PERR[11:11] = 1'h0; 
      field { name="rsvz2"; fieldwidth = 1; desc = "Rsvz2 err inject bits.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[10:10]";} RSVZ2[10:10] = 1'h0; 
      field { name="dp_qid_perr"; fieldwidth = 1; desc = "Inject LSP to DP qid parity error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[9:9]";} DP_QID_PERR[9:9] = 1'h0; 
      field { name="rsvz1"; fieldwidth = 1; desc = "Rsvz1 err inject bits.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[8:8]";} RSVZ1[8:8] = 1'h0; 
      field { name="ldb_tok_fifo_uflow"; fieldwidth = 1; desc = "Inject LDB token return FIFO underflow error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[7:7]";} LDB_TOK_FIFO_UFLOW[7:7] = 1'h0; 
      field { name="dir_inp_perr"; fieldwidth = 1; desc = "Inject DIR input qid/cq parity error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[6:6]";} DIR_INP_PERR[6:6] = 1'h0; 
      field { name="cq2qid_perr"; fieldwidth = 1; desc = "Inject CQ2QID RAM read parity error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[5:5]";} CQ2QID_PERR[5:5] = 1'h0; 
      field { name="qid2cqidix_perr"; fieldwidth = 1; desc = "Inject QID2CQIDIX RAM read parity error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[4:4]";} QID2CQIDIX_PERR[4:4] = 1'h0; 
      field { name="dir_tok_lim_perr"; fieldwidth = 1; desc = "Inject DIR Token Limit RAM read parity error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[3:3]";} DIR_TOK_LIM_PERR[3:3] = 1'h0; 
      field { name="atq_aqed_lim_perr"; fieldwidth = 1; desc = "Inject ATQ AQED Active Limit RAM read parity error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[2:2]";} ATQ_AQED_LIM_PERR[2:2] = 1'h0; 
      field { name="ldb_cq_if_cnt_uflow"; fieldwidth = 1; desc = "Inject LDB CQ inflight count underflow error";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[1:1]";} LDB_CQ_IF_CNT_UFLOW[1:1] = 1'h0; 
      field { name="rsvz0"; fieldwidth = 1; desc = "Rsvz0 err inject bits.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[0:0]";} RSVZ0[0:0] = 1'h0; 
};
reg cfg_arb_weight_atm_nalb_qid_0_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Arb Weight Atm Nalb Qid_0";
      desc="Global (1 register/HQM domain) Per-priority bin [3:0] random weights for both ATM and NALB slot selection. Priority bin weights can be configured to support strict priority selection (assign all weights to 0) or each priority bin can be weighted to enable a configurable amount of starvation avoidance priority inversion. Each priority bin is assigned an 8 bit weight; each succeeding lower priority bin is assigned a weight greater than or equal to the preceding higher bin. The difference between adjacent priority bin weights (with weight [-1] assigned 0), corresponds to the fraction of 256 that a lower priority bin will beat a contending higher priority bin. ";
      regwidth = 32;
      HandCoded=true;
      field { name = "Pri Bin 0 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 0";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[7:0]";} PRI0_WEIGHT[7:0] = 8'h0; 
      field { name = "Pri Bin 1 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 1";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[15:8]";} PRI1_WEIGHT[15:8] = 8'h0; 
      field { name = "Pri Bin 2 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 2";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[23:16]";} PRI2_WEIGHT[23:16] = 8'h0; 
      field { name = "Pri Bin 3 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 3";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[31:24]";} PRI3_WEIGHT[31:24] = 8'h0; 
};
reg cfg_arb_weight_atm_nalb_qid_1_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Arb Weight Atm Nalb Qid_1";
      desc="Upper Global (1 register/HQM domain) Per-priority bin random weights for both ATM and NALB slot selection.";
      regwidth = 32;
      HandCoded=true;
      field { name = "Pri Bin 4 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 4";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[7:0]";} PRI4_WEIGHT[7:0] = 8'h0; 
      field { name = "Pri Bin 5 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 5";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[15:8]";} PRI5_WEIGHT[15:8] = 8'h0; 
      field { name = "Pri Bin 6 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 6";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[23:16]";} PRI6_WEIGHT[23:16] = 8'h0; 
      field { name = "Pri Bin 7 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 7";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[31:24]";} PRI7_WEIGHT[31:24] = 8'h0; 
};
reg cfg_arb_weight_ldb_qid_0_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Arb Weight Ldb Qid_0";
      desc="Global (1 register/HQM domain) Per-priority bin [3:0] random weights for ATM vs. NALB slot selection. Priority bin weights can be configured to support strict priority selection (assign all weights to 0) or each priority bin can be weighted to enable a configurable amount of starvation avoidance priority inversion. Each priority bin is assigned an 8 bit weight; each succeeding lower priority bin is assigned a weight greater than or equal to the preceding higher bin. The difference between adjacent priority bin weights (with weight [-1] assigned 0), corresponds to the fraction of 256 that a lower priority bin will beat a contending higher priority bin. ";
      regwidth = 32;
      HandCoded=true;
      field { name = "Pri Bin 0 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 0";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[7:0]";} PRI0_WEIGHT[7:0] = 8'h0; 
      field { name = "Pri Bin 1 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 1";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[15:8]";} PRI1_WEIGHT[15:8] = 8'h0; 
      field { name = "Pri Bin 2 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 2";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[23:16]";} PRI2_WEIGHT[23:16] = 8'h0; 
      field { name = "Pri Bin 3 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 3";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[31:24]";} PRI3_WEIGHT[31:24] = 8'h0; 
};
reg cfg_arb_weight_ldb_qid_1_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Arb Weight Ldb Qid_1";
      desc="Upper Global (1 register/HQM domain) Per-priority bin random weights for ATM vs. NALB slot selection.";
      regwidth = 32;
      HandCoded=true;
      field { name = "Pri Bin 4 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 4";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[7:0]";} PRI4_WEIGHT[7:0] = 8'h0; 
      field { name = "Pri Bin 5 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 5";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[15:8]";} PRI5_WEIGHT[15:8] = 8'h0; 
      field { name = "Pri Bin 6 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 6";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[23:16]";} PRI6_WEIGHT[23:16] = 8'h0; 
      field { name = "Pri Bin 7 Weight"; fieldwidth = 8; desc = "8 bit arb weight for priority bin 7";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[31:24]";} PRI7_WEIGHT[31:24] = 8'h0; 
};
reg cfg_control_pipeline_credits_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Control Pipeline Credits";
      desc="Non-default settings may cause UNDEFINED behavior.Pipeline credit limit";
      regwidth = 32;
      HandCoded=true;
      field { name="rsvz1"; fieldwidth = 3; desc = "Rsvz1";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[31:29]";} RSVZ1[31:29] = 3'h0; 
      field { name="aqed_deq_pipe_credits"; fieldwidth = 5; desc = "AQED DEQ pipeline credits";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[28:24]";} AQED_DEQ_PIPE_CREDITS[28:24] = 5'h18; 
      field { name="rsvz0"; fieldwidth = 3; desc = "Rsvz0";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[23:21]";} RSVZ0[23:21] = 3'h0; 
      field { name="qed_deq_pipe_credits"; fieldwidth = 5; desc = "QED DEQ pipeline credits";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[20:16]";} QED_DEQ_PIPE_CREDITS[20:16] = 5'h18; 
      field { name="atm_pipe_credits"; fieldwidth = 8; desc = "LSP + AP atomic pipeline credits";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[15:8]";} ATM_PIPE_CREDITS[15:8] = 8'h0c; 
      field { name="nalb_pipe_credits"; fieldwidth = 8; desc = "LSP NALB pipeline credits";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[7:0]";} NALB_PIPE_CREDITS[7:0] = 8'h08; 
};
reg cfg_control_general_0_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Control General_0";
      desc="Non-default settings may cause UNDEFINED behavior.General control 0";
        regwidth = 32;
        HandCoded=true;
      field { name = "Smon0 Compare Sel"; fieldwidth = 2; desc = "Select compare condition for SMON 0.  This affects both SMON0 counters.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[31:30]";} SMON0_COMPARE_SEL[31:30] = 2'h0 ;
      field { name = "Smon0 Value Sel"; fieldwidth = 1; desc = "Select value for SMON 0.  This affects both SMON0 counters.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[29:29]";} SMON0_VALUE_SEL[29:29] = 1'h0 ;
      field { name = "Smon0 Valid Sel"; fieldwidth = 2; desc = "Select valid condition for SMON 0.  This affects both SMON0 counters.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[28:27]";} SMON0_VALID_SEL[28:27] = 2'h0 ;
      field { name = "Rsvz1"; desc = "Rsvz1";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[26:26]";} RSVZ1[26:26] = 1'h0 ;
      field { name = "Ldb Ce Tog Arb"; fieldwidth = 1; desc = "LDB Completion / Enqueue toggle arbiter - changes the LDB QID Completion vs. Enqueue arbiter to a toggle arbiter; default is strict";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[25:25]";} LDB_CE_TOG_ARB[25:25] = 1'h0;
      field { name = "Atm Single Op"; fieldwidth = 1; desc = "Atomic Completion single-op - allow at most 1 atomic completion operation in the LSP/AP pipeline";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[24:24]";} ATM_SINGLE_CMP[24:24] = 1'h0;
      field { name = "Atm Single Sch"; fieldwidth = 1; desc = "Atomic Schedule single-op - allow at most 1 atomic schedule operation in the LSP/AP pipeline";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[23:23]";} ATM_SINGLE_SCH[23:23] = 1'h0;
      field { name = "Ldb Disab Multi"; fieldwidth = 1; desc = "LDB Disable multi-op - disable multiple operations (Enqueue, Token, Completion) from occuring at the same LDB pipe level";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[22:22]";} LDB_DISAB_MULTI[22:22] = 1'h0;
      field { name = "Ldb Half Bw"; fieldwidth = 1; desc = "LDB half bandwidth - disable new operation entering p2 LDB pipeline level if p2 is currently valid";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[21:21]";} LDB_HALF_BW[21:21] = 1'h0;
      field { name = "Ldb Single Op"; fieldwidth = 1; desc = "LDB single-op - allow at most 1 operation in the LDB pipeline";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[20:20]";} LDB_SINGLE_OP[20:20] = 1'h0;
      field { name = "Lbrpl Single Out"; fieldwidth = 1; desc = "LBRPL single-out - allow at most 1 operation in the LBRPL output buffer";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[19:19]";} LBRPL_SINGLE_OUT[19:19] = 1'h0;
      field { name = "Lbrpl Half Bw"; fieldwidth = 1; desc = "LBRPL half bandwidth - disable new operation entering p0 LBRPL pipeline level if p0 is currently valid";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[18:18]";} LBRPL_HALF_BW[18:18] = 1'h0;
      field { name = "Lbrpl Single Op"; fieldwidth = 1; desc = "LBRPL single-op - allow at most 1 operation in the LBRPL pipeline";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[17:17]";} LBRPL_SINGLE_OP[17:17] = 1'h0;
      field { name = "Dirrpl Single Out"; fieldwidth = 1; desc = "DIRRPL single-out - allow at most 1 operation in the DIRRPL output buffer";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[16:16]";} DIRRPL_SINGLE_OUT[16:16] = 1'h0;
      field { name = "Dirrpl Half Bw"; fieldwidth = 1; desc = "DIRRPL half bandwidth - disable new operation entering p0 DIRRPL pipeline level if p0 is currently valid";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[15:15]";} DIRRPL_HALF_BW[15:15] = 1'h0;
      field { name = "Dirrpl Single Op"; fieldwidth = 1; desc = "DIRRPL single-op - allow at most 1 operation in the DIRRPL pipeline";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[14:14]";} DIRRPL_SINGLE_OP[14:14] = 1'h0;
      field { name = "Atq Disab Multi"; fieldwidth = 1; desc = "ATQ Disable multi-op - disable multiple operations (Enqueue, Completion) from occuring at the same ATQ pipe level";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[13:13]";} ATQ_DISAB_MULTI[13:13] = 1'h0;
      field { name = "Atq Single Out"; fieldwidth = 1; desc = "ATQ single-out - allow at most 1 operation in the ATQ output buffer";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[12:12]";} ATQ_SINGLE_OUT[12:12] = 1'h0;
      field { name = "Atq Half Bw"; fieldwidth = 1; desc = "ATQ half bandwidth - disable new operation entering p0 ATQ pipeline level if p0 is currently valid";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[11:11]";} ATQ_HALF_BW[11:11] = 1'h0;
      field { name = "Atq Single Op"; fieldwidth = 1; desc = "ATQ single-op - allow at most 1 operation in the ATQ pipeline";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[10:10]";} ATQ_SINGLE_OP[10:10] = 1'h0;
      field { name = "Dir Disab Multi"; fieldwidth = 1; desc = "DIR Disable multi-op - disable multiple operations (Enqueue, Completion) from occuring at the same DIR pipe level";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[9:9]";} DIR_DISAB_MULTI[9:9] = 1'h0;
      field { name = "Dir Single Out"; fieldwidth = 1; desc = "DIR single-out - allow at most 1 operation in the DIR output buffer";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[8:8]";} DIR_SINGLE_OUT[8:8] = 1'h0;
      field { name = "Dir Half Bw"; fieldwidth = 1; desc = "DIR half bandwidth - disable new operation entering p0 DIR pipeline level if p0 is currently valid";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[7:7]";} DIR_HALF_BW[7:7] = 1'h0;
      field { name = "Dir Single Op"; fieldwidth = 1; desc = "DIR single-op - allow at most 1 operation in the DIR pipeline";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[6:6]";} DIR_SINGLE_OP[6:6] = 1'h0;
      field { name = "Rsvz0"; desc = "Rsvz0";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[5:5]";} RSVZ0[5:5] = 1'h0 ;
      field { name = "Enable Inflight Threshold"; desc = "Enables the per-cq inflight threshold feature";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[4:4]";} ENAB_IF_THRESH[4:4] = 1'h0 ;
      field { name = "Include Cmp Unit Idle"; desc = "Include pending completion condition in unit idle";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[3:3]";} INC_CMP_UNIT_IDLE[3:3] = 1'h0 ;
      field { name = "Disable Rlist Priority"; desc = "Disable feature which boosts rlist scheduling priority if it collides with an slist schedule and loses";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[2:2]";} DISAB_RLIST_PRI[2:2] = 1'h0 ;
      field { name = "Include Tok Unit Idle"; desc = "Include pending token return conditions in unit idle";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[1:1]";} INC_TOK_UNIT_IDLE[1:1] = 1'h0 ;
      field { name = "Disable Atq Empty Arb"; desc = "Disable atq empty arbiter, default to not-full arbiter";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[0:0]";} DISAB_ATQ_EMPTY_ARB[0:0] = 1'h0 ;
};
reg cfg_control_general_1_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Control General_1";
      desc="Non-default settings may cause UNDEFINED behavior.General control 1";
      HandCoded=true;
      regwidth=32;
      field { name = "Rsvz1"; desc = "Rsvz1";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[31:17]";} RSVZ1[31:17] = 15'h0 ;
      field { name = "AQED Deq HiPri Wm"; fieldwidth = 5; desc = "AQED Dequeue Hight Priority Watermark.  When the depth of the AQED dequeue FIFO reaches this limit, dequeues are given strict priority over CQ completions.  Must not be set larger than 12";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[16:12]";} AQED_DEQ_HIPRI_WM[16:12] = 5'h0c;
      field { name = "Rsvz0"; desc = "Rsvz0";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[11:10]";} RSVZ0[11:10] = 2'h0 ;
      field { name = "Dis WU Res Chk"; fieldwidth = 1; desc = "Disable WU count residue check - disable residue checking on the per-CQ wu count memory";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[9:9]";} DIS_WU_RES_CHK[9:9] = 1'h0;
      field { name = "QED Deq HiPri Wm"; fieldwidth = 5; desc = "QED Dequeue Hight Priority Watermark.  When the depth of the QED dequeue FIFO reaches this limit, dequeues are given strict priority over CQ completions.  Must not be set larger than 12";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[8:4]";} QED_DEQ_HIPRI_WM[8:4] = 5'h0c;
      field { name = "QE Wt Blk"; fieldwidth = 1; desc = "QE weight block.  When set, blocks the QE weight from having an effect on scheduling";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[3:3]";} QE_WT_BLK[3:3] = 1'h0;
      field { name = "QE Wt FrcV"; fieldwidth = 1; desc = "QE weight force valid.  When set, forces the weight of all QEs to the value specified by the QE_WT_FRC field of this register";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[2:2]";} QE_WT_FRCV[2:2] = 1'h0;
      field { name = "QE Wt Frc"; fieldwidth = 2; desc = "QE weight force. The weight of all QEs is forced to this value if the QE_WT_FRCV field of this register is set.  The encoding of this field is the same as that used in the QE to specify the desired work_unit: work_unit = 2^qe_wt";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[1:0]";} QE_WT_FRC[1:0] = 2'h0;
};
reg cfg_fid_inflight_limit_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Fid Inflight Limit";
      desc="Flowid inflight limit.";
        regwidth = 32;
        HandCoded=true;
      field { name="fid_limit"; fieldwidth = 12; desc = "Maximum number of flowids permitted to be simultaneously active.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_fid_inflight_limit.internal_f[11:0]";} FID_LIMIT[11:0] = 12'h800 ; 
};
reg cfg_fid_inflight_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Fid Inflight Count";
      desc="Number of flowids currently active.  Compared to cfg_fid_inflight_limit_r.";
        regwidth = 32;
        HandCoded=true;
      field { name="fid_count"; fieldwidth = 12; desc = "Number of flowids currently active";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_fid_inflight_count.internal_f[11:0]";} FID_COUNT[11:0] = 12'h0; 
};
reg cfg_lsp_csr_control_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="SURVIVE_REG_NA_1";
      name="Cfg Lsp Csr Control";
      desc="CSR Control register";
      field { name = "Atm Cq Qid Priority Prot"; desc = "ATM CQ QID priority protect. 0: For a given CQ, a slot is only ineligible for scheduling if the status of that particular slot is being updated in the pipeline.  1: For a given CQ, if the status of any of the (up to) 8 slots is being updated in the pipeline, all 8 slots are ineligible for scheduling.  A setting of 1 eliminates the possibility of priority inversion at the cost of a possible reduction in performance.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[31:31]";} ATM_CQ_QID_PRIORITY_PROT[31:31] = 1'h0;
      field { name = "Ldb WRR count base"; desc = "Initialization value loaded into the per-priority-bin WRR arbiter count, causing the arbiter to favor the current slot until the count has been decremented to 0.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[30:28]";} LDB_WRR_COUNT_BASE[30:28] = 3'h3;
      field { name = "Rsvz1"; desc = "Rsvz1";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[27:14]";} RSVZ1[27:14] = 14'h0000 ;
      field { name = "Disable NonMissionCritical HW Error Syndrome Load"; desc = "Disable loading syndrome register for all non-mission-critical (performance/debug) Hardware errors.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[13:13]";} INT4_NON_MC_SYND_DIS [13:13] = 1'h0 ;
      field { name = "Disable NonMissionCritical HW Error Alarm"; desc = "Disable alarm reporting for all non-mission-critical (performance/debug) Hardware errors.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[12:12]";} INT4_NON_MC_ALARM_DIS [12:12] = 1'h0 ;
      field { name = "Disable HW Error Syndrome Load"; desc = "Disable loading syndrome register for all mission-critical Hardware errors.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[11:11]";} INT3_HW_ERR_SYND_DIS [11:11] = 1'h0 ;
      field { name = "Disable HW Error Alarm"; desc = "Disable alarm reporting for all mission-critical Hardware errors.";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[10:10]";} INT3_HW_ERR_ALARM_DIS [10:10] = 1'h0 ;
      field { name = "Disable Tok Uflow Syndrome Load"; desc = "Disable loading syndrome register for LDB or DIR token underflow (too many tokens).";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[9:9]";} INT2_TOK_UF_SYND_DIS [9:9] = 1'h0 ;
      field { name = "Disable Tok Uflow Alarm"; desc = "Disable alarm reporting for LDB or DIR token underflow (too many tokens).";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[8:8]";} INT2_TOK_UF_ALARM_DIS [8:8] = 1'h0 ;
      field { name = "Disable Cq Inflight Uflow Syndrome Load"; desc = "Disable loading syndrome register for CQ inflight count underflow (too many Completions).";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[7:7]";} INT1_CQ_IF_UF_SYND_DIS [7:7] = 1'h0 ;
      field { name = "Disable Cq Inflight Uflow Alarm"; desc = "Disable alarm reporting for CQ inflight count underflow (too many Completions).";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[6:6]";} INT1_CQ_IF_UF_ALARM_DIS [6:6] = 1'h0 ;
      field { name = "Disable Qid Inflight Uflow Syndrome Load"; desc = "Disable loading syndrome register for QID inflight count underflow (too many Completions/Releases).";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[5:5]";} INT0_QID_IF_UF_SYND_DIS [5:5] = 1'h0 ;
      field { name = "Disable Qid Inflight Uflow Alarm"; desc = "Disable alarm reporting for QID inflight count underflow (too many Completions/Releases).";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[4:4]";} INT0_QID_IF_UF_ALARM_DIS [4:4] = 1'h0 ;
      field { name = "Rsvz0"; desc = "Rsvz0";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[3:0]";} RSVZ0[3:0] = 4'h0 ;
};
reg cfg_ldb_sched_control_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Ldb Sched Control";
      desc="Load-Balanced Scheduling control.  [IntelRsvd]May be used to set/reset a bit pertaining to a particular cq/slot pair in one or mor of the status vectors involved in scheduling decisions.[/IntelRsvd]";
      field { name="cq"; fieldwidth = 8; desc = "Scheduling control.  [IntelRsvd]CQ to be updated[/IntelRsvd]";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[7:0]";} CQ[7:0] = 8'h0; 
      field { name="qidix"; fieldwidth = 3; desc = "Scheduling control.  [IntelRsvd]qidix/slot to be updated[/IntelRsvd]";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[10:8]";} QIDIX[10:8] = 3'h0; 
      field { name="value"; fieldwidth = 1; desc = "Scheduling control.  [IntelRsvd]Value to be loaded into indicated vector(s)[/IntelRsvd]";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[11:11]";} VALUE[11:11] = 1'h0; 
      field { name="nalb_haswork_v"; fieldwidth = 1; desc = "Scheduling control.  [IntelRsvd]NALB haswork Valid.  Setting this bit to 1 causes the internal state indicating that the specified CQ and qidix/slot has pending nalb QEs to schedule to be set to the indicated value.  This bit clears itself to 0[/IntelRsvd]";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[12:12]";} NALB_HASWORK_V[12:12] = 1'h0; 
      field { name="rlist_haswork_v"; fieldwidth = 1; desc = "Scheduling control.  [IntelRsvd]RLIST haswork Valid.  Setting this bit to 1 causes the internal state indicating that the specified CQ and qidix/slot has pending rlist QEs to schedule to be set to the indicated value.  This bit clears itself to 0[/IntelRsvd]";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[13:13]";} RLIST_HASWORK_V[13:13] = 1'h0; 
      field { name="slist_haswork_v"; fieldwidth = 1; desc = "Scheduling control.  [IntelRsvd]SLIST haswork Valid.  Setting this bit to 1 causes the internal state indicating that the specified CQ and qidix/slot has pending slist QEs to schedule to be set to the indicated value.  This bit clears itself to 0[/IntelRsvd]";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[14:14]";} SLIST_HASWORK_V[14:14] = 1'h0; 
      field { name="inflight_ok_v"; fieldwidth = 1; desc = "Scheduling control.  [IntelRsvd]Inflight OK Valid.  Setting this bit to 1 causes the internal state indicating that the specified CQ and qidix/slot is OK to schedule with respect to the per-qid inflight limit to be set to the indicated value.  This bit clears itself to 0[/IntelRsvd]";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[15:15]";} INFLIGHT_OK_V[15:15] = 1'h0; 
      field { name="aqed_nfull_v"; fieldwidth = 1; desc = "Scheduling control.  [IntelRsvd]AQED Notfull Valid.  Setting this bit to 1 causes the internal state indicating that the specified QID (formed by concatenating the CQ and SLOT fields) is OK to transfer from ATQ to ATM with respect to the AQED ACTIVE LIMIT be set to the indicated value.  This bit clears itself to 0.  When this bit is used, the DISAB_ATQ_EMPTY_ARB bit of the control_general_0 register must first be set to 1.[/IntelRsvd]";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[16:16]";} AQED_NFULL_V[16:16] = 1'h0; 
      field { name="rsvz0"; fieldwidth = 15; desc = "Rsvz0";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[31:17]";} RSVZ0[31:17] = 15'h0000; 
      HandCoded=true;
      regwidth=32;
};
reg cfg_lsp_perf_ldb_sch_count_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      diag_reg=true;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Lsp Perf Ldb Sch Count L";
      desc="Load-Balanced Total Interval scheduling count, ls half.  This count increments each time a Load-Balanced QE is scheduled.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_ldb_sch_count.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_lsp_perf_ldb_sch_count_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      diag_reg=true;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Lsp Perf Ldb Sch Count H";
      desc="Load-Balanced Total Interval scheduling count, ms half.  See cfg_lsp_perf_ldb_sch_count_l.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_ldb_sch_count.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_control_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf Control";
      desc="Controls cfg_ldb_sched_perf counters";
      HandCoded=true;
      regwidth=32;
      field { name = "Enabled"; desc = "When = 1 and Clear=0 enables the cfg_ldb_sched_perf counters to increment."; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_control.internal_f[0:0]";} ENAB[0:0] = 1'h0; 
      field { name = "Clear"; desc = "When = 1 clears the cfg_ldb_sched_perf counters to zero."; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_control.internal_f[1:1]";} CLR[1:1] = 1'h0; 
      field { name = "Rsvz0"; desc = "Rsvz0"; fieldwidth = 30;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_control.internal_f[31:2]";} RSVZ0[31:2] = 30'h0; 
};
reg cfg_lsp_perf_dir_sch_count_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      diag_reg=true;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Lsp Perf Dir Sch Count L";
      desc="Directed Total Interval scheduling count, ls half.  This count increments each time a Directed QE is scheduled.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_dir_sch_count_l.internal_f[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_lsp_perf_dir_sch_count_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      diag_reg=true;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Lsp Perf Dir Sch Count H";
      desc="Directed Total Interval scheduling count, ms half.  See cfg_lsp_perf_dir_sch_count_l.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_dir_sch_count_h.internal_f[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_0_l_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 0 L";
      desc="Performance Counter 0 for LDB Scheduling, ls half: No Work.  This counter is controlled by cfg_ldb_sched_perf_control, and is the least-significant half of a 64-bit counter.  While enabled this counter increments when the LDB scheduler is in a state which is capable of scheduling but there are no QEs enqueued.  This also counts cases where all CQs which have QEs enqueued for them are disabled by configuration via cfg_cq_ldb_disable_r.  For non-Atomic LDB QEs (Unordered and Ordered), this condition is also true if the per-QID inflight limit (specified by cfg_qid_ldb_inflight_limit) has been reached.  That is, if the only QIDs with QEs enqueued are Unordered/Ordered which have reached their per-QID inflight limit, this 'no work' counter will count.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_0.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_0_h_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 0 H";
      desc="Performance Counter 0 for LDB Scheduling, ms half.  See cfg_ldb_sched_perf_0_l.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_0.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_1_l_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 1 L";
      desc="Performance Counter 1 for LDB Scheduling, ls half: No Space.  This counter is controlled by cfg_ldb_sched_perf_control, and is the least-significant half of a 64-bit counter.  While enabled this counter increments when the LDB scheduler is in a state which is capable of scheduling, there are CQs with pending work (enqueued but not yet scheduled), but none of those CQs have available space.  There are 3 possible causes for a CQ to not have available space.  1) The number of QEs which have been scheduled to the CQ minus the number of tokens which have been returned to the CQ has reached the maximum configured per-CQ token limit (specified by cfg_cq_ldb_token_depth_select).  2) The number of QEs which have been scheduled to the CQ minus the number of completions received for the CQ has reached the maximum configured per-CQ inflight limit (specified by cfg_cq_ldb_inflight_limit). 3) The number of QEs which have been scheduled to all CQs minus the number of completions received for all CQs has reached the maximum configured total inflight limit (specified by cfg_cq_ldb_tot_inflight_limit).";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_1.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_1_h_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 1 H";
      desc="Performance Counter 1 for LDB Scheduling, ms half.  See cfg_ldb_sched_perf_1_l.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_1.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_2_l_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 2 L";
      desc="Performance Counter 2 for LDB Scheduling, ls half: Scheduled.  This counter is controlled by cfg_ldb_sched_perf_control, and is the least-significant half of a 64-bit counter.  While enabled this counter increments each time a QE is scheduled by the LDB scheduler.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_2.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_2_h_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 2 H";
      desc="Performance Counter 2 for LDB Scheduling, ms half.  See cfg_ldb_sched_perf_2_l.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_2.count[63:32]";} COUNT[31:0] = 32'h0; 
};
// Reasons counted by this counter:
// - LDB scheduling state machine is not in the "waiting for work" state.  There is a minimum of 7 clocks between being in this state due
//   to the depth of the LDB scheduling pipeline; this interval may be longer if there are pipeline holds originated by backpressure from
//   the ATM pipe or NALB pipe.
// - LDB scheduling state machine is in the "waiting for work" state but can not schedule due to pipeline holds originated by backpressure
//   from the ATM pipe or NALB pipe.
// - LDB scheduling state machine is in the "waiting for work" state, there are no pipeline holds preventing scheduling, there are CQs
//   which potentially have pending work to do, but the "has work" vector is stale due to the previous schedule (masked by the "blast"
//   vector) and the update which clears the blast has not yet been received (either from p8 for NALB schedules or from the ATM pipe for
//   Atomic schedules).
reg cfg_ldb_sched_perf_3_l_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 3 L";
      desc="Performance Counter 3 for LDB Scheduling, ls half: Unable to Schedule Class 0.  There are two classes of conditions ('0' and '1') where the LDB scheduler is not capable of scheduling due to architectural reasons.  This counter is controlled by cfg_ldb_sched_perf_control, and is the least-significant half of a 64-bit counter.  While enabled this counter increments each time the LDB scheduler is not in a state which is capable of scheduling due to type '0' architectural reasons.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_3.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_3_h_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 3 H";
      desc="Performance Counter 3 for LDB Scheduling, ms half.  See cfg_ldb_sched_perf_3_l.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_3.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_4_l_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 4 L";
      desc="Performance Counter 4 for LDB Scheduling, ls half: Total Inflight Limit Reached.  This counter is controlled by cfg_ldb_sched_perf_control, and is the least-significant half of a 64-bit counter.  While enabled this counter increments each time the number of QEs which have been scheduled to all CQs minus the number of completions received for all CQs has reached the maximum configured total inflight limit (specified by cfg_cq_ldb_tot_inflight_limit).  Note that this count is not conditioned by any other factors such as the LDB scheduler being in a state capable of scheduling, any CQs having pending work, or architectural scheduling restrictions.  Also note that this condition is also included in the 'No Space' count.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_4.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_4_h_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 4 H";
      desc="Performance Counter 4 for LDB Scheduling, ms half.  See cfg_ldb_sched_perf_4_l.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_4.count[63:32]";} COUNT[31:0] = 32'h0; 
};
// Reasons counted by this counter:
// - LDB scheduling state machine is in the "waiting for work" state, there are no pipeline holds preventing scheduling, there are CQs
//   which have work to do and "have space", but the CQ is still 'busy' (cq_busy_sch) due to pipeline latency.  The CQ busy is set when
//   the schedule is initiatated at the top of the pipe, remains set while the schedule propagates down to p7 (which overlaps the "type 0"
//   count and therefore is not counted in this count), and is reset from the p8 pipe level.  Therefore this will only count when the
//   LDB scheduler is otherwise capable of scheduling, but the only CQ which has work and has space has a prior schedule at the p8 pipe
//   level.
reg cfg_ldb_sched_perf_5_l_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 5 L";
      desc="Performance Counter 5 for LDB Scheduling, ls half: Unable to Schedule Class 1.  There are two classes of conditions ('0' and '1') where the LDB scheduler is not capable of scheduling due to architectural reasons.  This counter is controlled by cfg_ldb_sched_perf_control, and is the least-significant half of a 64-bit counter.  While enabled this counter increments each time the LDB scheduler is not in a state which is capable of scheduling due to type '1' architectural reasons.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_5.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_5_h_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 5 H";
      desc="Performance Counter 5 for LDB Scheduling, ms half.  See cfg_ldb_sched_perf_5_l.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_5.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_6_l_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 6 L";
      desc="Performance Counter 6 for LDB Scheduling, ls half: Flowid Inflight Limit Reached.  This counter is controlled by cfg_ldb_sched_perf_control, and is the least-significant half of a 64-bit counter.  While enabled this counter increments each time the active flowid count (visible in cfg_fid_inflight_count) has reached the maximum configured flowid inflight limit (specified by cfg_fid_inflight_limit).  Note that this count is not conditioned by any other factors such as the LDB scheduler being in a state capable of scheduling, any CQs having pending work, or architectural scheduling restrictions.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_6.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_6_h_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 6 H";
      desc="Performance Counter 6 for LDB Scheduling, ms half.  See cfg_ldb_sched_perf_6_l.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_6.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_7_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 7 L";
      desc="Performance Counter 7 for LDB Scheduling, ls half: Work Unit Limit Reached.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_7.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_ldb_sched_perf_7_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Ldb Sched Perf 7 H";
      desc="Performance Counter 7 for LDB Scheduling, ms half.  See cfg_ldb_sched_perf_7_l.";
      HandCoded=true;
      regwidth=32;
      field { name="count"; fieldwidth = 32; desc = "count";  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_7.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq2qid0_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq2qid0";
      desc = "LDB CQ Scheduling Slots [3:0] QID assignment. Four 8-bit right justified QID fields. Must be consistent with cfg_qid_ldb_qid2cqidix_r.";
      HandCoded=true;
      regwidth=32;
      field { name = "Qid P0"; desc = "QID Slot 0"; fieldwidth = 7;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } QID_P0 [ 6: 0] = 7'h00;
      field { name = "Qid P1"; desc = "QID Slot 1"; fieldwidth = 7;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } QID_P1 [14: 8] = 7'h00;
      field { name = "Qid P2"; desc = "QID Slot 2"; fieldwidth = 7;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } QID_P2 [22:16] = 7'h00;
      field { name = "Qid P3"; desc = "QID Slot 3"; fieldwidth = 7;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } QID_P3 [30:24] = 7'h00;
};
reg cfg_cq2qid1_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_CQ_64";
      name="Cfg Cq2qid1";
      desc = "LDB CQ Scheduling Slots [7:4] QID assignment. Four 8-bit right justified QID fields. Must be consistent with cfg_qid_ldb_qid2cqidix_r.";
      HandCoded=true;
      regwidth=32;
      field { name = "Qid P4"; desc = "QID Slot 4"; fieldwidth = 7;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } QID_P4 [ 6: 0] = 7'h00;
      field { name = "Qid P5"; desc = "QID Slot 5"; fieldwidth = 7;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } QID_P5 [14: 8] = 7'h00;
      field { name = "Qid P6"; desc = "QID Slot 6"; fieldwidth = 7;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } QID_P6 [22:16] = 7'h00;
      field { name = "Qid P7"; desc = "QID Slot 7"; fieldwidth = 7;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } QID_P7 [30:24] = 7'h00;
};
reg cfg_cos_ctrl_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Cos Ctrl";
      desc="Control for cos arbiter";
      HandCoded=true;
      regwidth=32;
      field { name = "Starvation Avoidance Min Threshold"; desc = "Minimum count threshold used by cos arbiter starvation avoidance in sharing of excess bandwidth.  Count saturates at this value when decrementing."; fieldwidth = 10;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[9:0]";} STARV_AVOID_MIN_THRESH[9:0] = 10'h1;
      field { name = "Starvation Avoidance Max Threshold"; desc = "Maximum count threshold used by cos arbiter starvation avoidance in sharing of excess bandwidth.  Count saturates at this value when incrementing, and requests an override when >= this value."; fieldwidth = 10;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[19:10]";} STARV_AVOID_MAX_THRESH[19:10] = 10'h100;
      field { name = "Rsvz0"; desc = "rsvz0"; fieldwidth = 11;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[30:20]";} RSVZ0[30:20] = 11'h0;
      field { name = "Starvation Avoidance Enable"; desc = "Enable cos arbiter mechanism for starvation avoidance in sharing of excess bandwidth"; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[31:31]";} STARV_AVOID_ENABLE[31:31] = 1'h0;
};
reg cfg_shdw_ctrl_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Shdw Ctrl";
      desc="COS shadow register control";
      HandCoded=true;
      regwidth=32;
      field { name = "Transfer"; desc = "Transfer shadow registers to active registers.  When written to 1, atomically transfers the shadow copies of the COS configuration registers (*shdw*) into their counterparts which are actively used by the COS arbiter.  The registers transferred are: cfg_shdw_range_cos*."; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/1S/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_ctrl.internal_f[0:0]";} TRANSFER[0:0] = 1'b0; 
};
reg cfg_shdw_range_cos0_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Shdw Range Cos0";
      desc="Shadow copy of range register actively used by the COS arbiter for cos0, atomically transferred into that register when the TRANSFER bit of the cfg_shdw_ctrl register is written to 1.";
      HandCoded=true;
      regwidth=32;
      field { name = "Range"; desc = "Shadow copy of range register.  Range of values used by the bandwidth allocation arbiter to select this cos to be eligible for scheduling.  The fraction of total load-balanced bandwidth allocated to this cos is range/256.  The sum of the ranges for all four cos must be <= 256."; fieldwidth = 9;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos0.internal_f[8:0]";} BW_RANGE[8:0] = 9'h040; 
      field { name = "Rsvz0"; desc = "rsvz0"; fieldwidth = 22;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos0.internal_f[30:9]";} RSVZ0[30:9] = 22'h0;
      field { name = "No extra credit"; desc = "Shadow copy of no_extra_credit register.  Reduce this cos to the lowest priority when arbitrating for excess bandwidth if its saturation count is 0."; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos0.internal_f[31:31]";} NO_EXTRA_CREDIT[31:31] = 1'b0;
};
reg cfg_shdw_range_cos1_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Shdw Range Cos1";
      desc="Shadow copy of range register actively used by the COS arbiter for cos1, atomically transferred into that register when the TRANSFER bit of the cfg_shdw_ctrl register is written to 1.";
      HandCoded=true;
      regwidth=32;
      field { name = "Range"; desc = "Shadow copy of range register.  Range of values used by the bandwidth allocation arbiter to select this cos to be eligible for scheduling.  The fraction of total load-balanced bandwidth allocated to this cos is range/256.  The sum of the ranges for all four cos must be <= 256."; fieldwidth = 9;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos1.internal_f[8:0]";} BW_RANGE[8:0] = 9'h040; 
      field { name = "Rsvz0"; desc = "rsvz0"; fieldwidth = 22;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos1.internal_f[30:9]";} RSVZ0[30:9] = 22'h0;
      field { name = "No extra credit"; desc = "Shadow copy of no_extra_credit register.  Reduce this cos to the lowest priority when arbitrating for excess bandwidth if its saturation count is 0."; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos1.internal_f[31:31]";} NO_EXTRA_CREDIT[31:31] = 1'b0;
};
reg cfg_shdw_range_cos2_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Shdw Range Cos2";
      desc="Shadow copy of range register actively used by the COS arbiter for cos2, atomically transferred into that register when the TRANSFER bit of the cfg_shdw_ctrl register is written to 1.";
      HandCoded=true;
      regwidth=32;
      field { name = "Range"; desc = "Shadow copy of range register.  Range of values used by the bandwidth allocation arbiter to select this cos to be eligible for scheduling.  The fraction of total load-balanced bandwidth allocated to this cos is range/256.  The sum of the ranges for all four cos must be <= 256."; fieldwidth = 9;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos2.internal_f[8:0]";} BW_RANGE[8:0] = 9'h040; 
      field { name = "Rsvz0"; desc = "rsvz0"; fieldwidth = 22;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos2.internal_f[30:9]";} RSVZ0[30:9] = 22'h0;
      field { name = "No extra credit"; desc = "Shadow copy of no_extra_credit register.  Reduce this cos to the lowest priority when arbitrating for excess bandwidth if its saturation count is 0."; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos2.internal_f[31:31]";} NO_EXTRA_CREDIT[31:31] = 1'b0;
};
reg cfg_shdw_range_cos3_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Shdw Range Cos3";
      desc="Shadow copy of range register actively used by the COS arbiter for cos3, atomically transferred into that register when the TRANSFER bit of the cfg_shdw_ctrl register is written to 1.";
      HandCoded=true;
      regwidth=32;
      field { name = "Range"; desc = "Shadow copy of range register.  Range of values used by the bandwidth allocation arbiter to select this cos to be eligible for scheduling.  The fraction of total load-balanced bandwidth allocated to this cos is range/256.  The sum of the ranges for all four cos must be <= 256."; fieldwidth = 9;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos3.internal_f[8:0]";} BW_RANGE[8:0] = 9'h040; 
      field { name = "Rsvz0"; desc = "rsvz0"; fieldwidth = 22;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos3.internal_f[30:9]";} RSVZ0[30:9] = 22'h0;
      field { name = "No extra credit"; desc = "Shadow copy of no_extra_credit register.  Reduce this cos to the lowest priority when arbitrating for excess bandwidth if its saturation count is 0."; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos3.internal_f[31:31]";} NO_EXTRA_CREDIT[31:31] = 1'b0;
};
reg cfg_credit_sat_cos0_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Credit Sat Cos0";
      desc="Credit count saturation value for cos 0.";
      HandCoded=true;
      regwidth=32;
      field { name = "Rsvz0"; desc = "Rsvz0"; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos0.internal_f[31:16]";} RSVZ0[31:16] = 16'h0000; 
      field { name = "Credit saturation value"; desc = "Saturation value for the credit count for this cos used by the backup scheduling cos arbiter."; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos0.internal_f[15:0]";} SAT_VALUE[15:0] = 16'h0100; 
};
reg cfg_credit_sat_cos1_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Credit Sat Cos1";
      desc="Credit count saturation value for cos 1.";
      HandCoded=true;
      regwidth=32;
      field { name = "Rsvz0"; desc = "Rsvz0"; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos1.internal_f[31:16]";} RSVZ0[31:16] = 16'h0000; 
      field { name = "Credit saturation value"; desc = "Saturation value for the credit count for this cos used by the backup scheduling cos arbiter."; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos1.internal_f[15:0]";} SAT_VALUE[15:0] = 16'h0100; 
};
reg cfg_credit_sat_cos2_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Credit Sat Cos2";
      desc="Credit count saturation value for cos 2.";
      HandCoded=true;
      regwidth=32;
      field { name = "Rsvz0"; desc = "Rsvz0"; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos2.internal_f[31:16]";} RSVZ0[31:16] = 16'h0000; 
      field { name = "Credit saturation value"; desc = "Saturation value for the credit count for this cos used by the backup scheduling cos arbiter."; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos2.internal_f[15:0]";} SAT_VALUE[15:0] = 16'h0100; 
};
reg cfg_credit_sat_cos3_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Credit Sat Cos3";
      desc="Credit count saturation value for cos 3.";
      HandCoded=true;
      regwidth=32;
      field { name = "Rsvz0"; desc = "Rsvz0"; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos3.internal_f[31:16]";} RSVZ0[31:16] = 16'h0000; 
      field { name = "Credit saturation value"; desc = "Saturation value for the credit count for this cos used by the backup scheduling cos arbiter."; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos3.internal_f[15:0]";} SAT_VALUE[15:0] = 16'h0100; 
};
reg cfg_credit_cnt_cos0_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Credit Cnt Cos0";
      desc="Credit count for cos 0.  Backup count used by the cos arbiter to attempt to fairly distribute excess bandwidth.";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Backup count for cos arbiter."; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos0.internal_f[15:0]";} COUNT[15:0] = 16'h0; 
      field { name = "Starvation avoidance count"; desc = "Count used by backup arbiter to detect starvation condition in sharing of excess bandwidth."; fieldwidth = 11;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos0.internal_f[26:16]";} STARV_AVOID_COUNT[26:16] = 11'h400; 
};
reg cfg_credit_cnt_cos1_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Credit Cnt Cos1";
      desc="Credit count for cos 1.  Backup count used by the cos arbiter to attempt to fairly distribute excess bandwidth.";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Backup count for cos arbiter."; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos1.internal_f[15:0]";} COUNT[15:0] = 16'h0; 
      field { name = "Starvation avoidance count"; desc = "Count used by backup arbiter to detect starvation condition in sharing of excess bandwidth."; fieldwidth = 11;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos1.internal_f[26:16]";} STARV_AVOID_COUNT[26:16] = 11'h400; 
};
reg cfg_credit_cnt_cos2_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Credit Cnt Cos2";
      desc="Credit count for cos 2.  Backup count used by the cos arbiter to attempt to fairly distribute excess bandwidth.";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Backup count for cos arbiter."; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos2.internal_f[15:0]";} COUNT[15:0] = 16'h0; 
      field { name = "Starvation avoidance count"; desc = "Count used by backup arbiter to detect starvation condition in sharing of excess bandwidth."; fieldwidth = 11;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos2.internal_f[26:16]";} STARV_AVOID_COUNT[26:16] = 11'h400; 
};
reg cfg_credit_cnt_cos3_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Credit Cnt Cos3";
      desc="Credit count for cos 3.  Backup count used by the cos arbiter to attempt to fairly distribute excess bandwidth.";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Backup count for cos arbiter."; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos3.internal_f[15:0]";} COUNT[15:0] = 16'h0; 
      field { name = "Starvation avoidance count"; desc = "Count used by backup arbiter to detect starvation condition in sharing of excess bandwidth."; fieldwidth = 11;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos3.internal_f[26:16]";} STARV_AVOID_COUNT[26:16] = 11'h400; 
};
reg cfg_sch_rdy_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Sch Rdy_l";
      desc="Number of LDB CQ cos arbitration / scheduling events, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_sch_rdy.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_sch_rdy_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Sch Rdy_h";
      desc="Number of LDB CQ cos arbitration / scheduling events, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_sch_rdy.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_schd_cos0_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Schd Cos0_l";
      desc="Number of CQs scheduled from cos 0, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos0.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_schd_cos0_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Schd Cos0_h";
      desc="Number of CQs scheduled from cos 0, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos0.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_schd_cos1_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Schd Cos1_l";
      desc="Number of CQs scheduled from cos 1, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos1.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_schd_cos1_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Schd Cos1_h";
      desc="Number of CQs scheduled from cos 1, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos1.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_schd_cos2_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Schd Cos2_l";
      desc="Number of CQs scheduled from cos 2, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos2.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_schd_cos2_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Schd Cos2_h";
      desc="Number of CQs scheduled from cos 2, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos2.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_schd_cos3_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Schd Cos3_l";
      desc="Number of CQs scheduled from cos 3, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos3.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_schd_cos3_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Schd Cos3_h";
      desc="Number of CQs scheduled from cos 3, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos3.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rdy_cos0_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rdy Cos0_l";
      desc="Number of CQ arbitration events cos 0 had room and work, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos0.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rdy_cos0_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rdy Cos0_h";
      desc="Number of CQ arbitration events cos 0 had room and work, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos0.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rdy_cos1_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rdy Cos1_l";
      desc="Number of CQ arbitration events cos 1 had room and work, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos1.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rdy_cos1_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rdy Cos1_h";
      desc="Number of CQ arbitration events cos 1 had room and work, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos1.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rdy_cos2_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rdy Cos2_l";
      desc="Number of CQ arbitration events cos 2 had room and work, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos2.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rdy_cos2_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rdy Cos2_h";
      desc="Number of CQ arbitration events cos 2 had room and work, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos2.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rdy_cos3_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rdy Cos3_l";
      desc="Number of CQ arbitration events cos 3 had room and work, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos3.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rdy_cos3_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rdy Cos3_h";
      desc="Number of CQ arbitration events cos 3 had room and work, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos3.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rnd_loss_cos0_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rnd Loss Cos0_l";
      desc="Number of CQ arbitration events cos 0 was selected by PRNG but did not have room or work (lost opportunity, backup credit count arbiter will select winner), ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos0.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rnd_loss_cos0_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rnd Loss Cos0_h";
      desc="Number of CQ arbitration events cos 0 was selected by PRNG but did not have room or work (lost opportunity, backup credit count arbiter will select winner), ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos0.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rnd_loss_cos1_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rnd Loss Cos1_l";
      desc="Number of CQ arbitration events cos 1 was selected by PRNG but did not have room or work (lost opportunity, backup credit count arbiter will select winner), ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos1.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rnd_loss_cos1_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rnd Loss Cos1_h";
      desc="Number of CQ arbitration events cos 1 was selected by PRNG but did not have room or work (lost opportunity, backup credit count arbiter will select winner), ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos1.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rnd_loss_cos2_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rnd Loss Cos2_l";
      desc="Number of CQ arbitration events cos 2 was selected by PRNG but did not have room or work (lost opportunity, backup credit count arbiter will select winner), ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos2.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rnd_loss_cos2_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rnd Loss Cos2_h";
      desc="Number of CQ arbitration events cos 2 was selected by PRNG but did not have room or work (lost opportunity, backup credit count arbiter will select winner), ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos2.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rnd_loss_cos3_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rnd Loss Cos3_l";
      desc="Number of CQ arbitration events cos 3 was selected by PRNG but did not have room or work (lost opportunity, backup credit count arbiter will select winner), ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos3.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_rnd_loss_cos3_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Rnd Loss Cos3_h";
      desc="Number of CQ arbitration events cos 3 was selected by PRNG but did not have room or work (lost opportunity, backup credit count arbiter will select winner), ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos3.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cnt_win_cos0_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cnt Win Cos0_l";
      desc="Number of CQ arbitration events cos 0 was selected by the backup credit count arbiter, including those via starvation avoidance, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos0.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cnt_win_cos0_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cnt Win Cos0_h";
      desc="Number of CQ arbitration events cos 0 was selected by the backup credit count arbiter, including those via starvation avoidance, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos0.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cnt_win_cos1_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cnt Win Cos1_l";
      desc="Number of CQ arbitration events cos 1 was selected by the backup credit count arbiter, including those via starvation avoidance, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos1.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cnt_win_cos1_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cnt Win Cos1_h";
      desc="Number of CQ arbitration events cos 1 was selected by the backup credit count arbiter, including those via starvation avoidance, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos1.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cnt_win_cos2_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cnt Win Cos2_l";
      desc="Number of CQ arbitration events cos 2 was selected by the backup credit count arbiter, including those via starvation avoidance, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos2.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cnt_win_cos2_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cnt Win Cos2_h";
      desc="Number of CQ arbitration events cos 2 was selected by the backup credit count arbiter, including those via starvation avoidance, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos2.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cnt_win_cos3_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cnt Win Cos3_l";
      desc="Number of CQ arbitration events cos 3 was selected by the backup credit count arbiter, including those via starvation avoidance, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ls half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos3.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cnt_win_cos3_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cnt Win Cos3_h";
      desc="Number of CQ arbitration events cos 3 was selected by the backup credit count arbiter, including those via starvation avoidance, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "ms half of event count."; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos3.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_patch_control_r {
      donttest = true ;
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="SURVIVE_REG_NA_1";
      name="Cfg Patch Control";
      desc="Non-default settings may cause UNDEFINED behavior.Common Control register with Patch config access";
      HandCoded=true;
      regwidth=32;
      field { name = "delay_clockoff"; desc = "specify the number of idle clocks required to turn off clocks"; fieldwidth = 8;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[7:0]";} DELAY_CLOCKOFF[7:0] = 8'h40;
      field { name = "delay_clkoff_bypass"; desc = "specify the number of clocks required to stay in clk_off bypass state, max supported value is 63 clocks"; fieldwidth = 6;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[13:8]";} DELAY_CLKOFF_BYPASS[13:8] = 6'h7;
      field { name = "Rsvz1";    desc = "rsvz1"; fieldwidth = 2;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[15:14]";} RSVZ1[15:14] = 2'h0;
      field { name = "Rsvz0";    desc = "Rsvz0"; fieldwidth = 15;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[30:16]";} RSVZ0[30:16] = 15'h0;
      field { name = "disable_clockoff"; desc = "set this bit to disable turning off the clock for the partitiion"; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[31:31]";} DISABLE_CLOCKOFF[31:31] = 1'h0;
};
reg cfg_dir_qid_dpth_thrsh_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_64";
      name="Cfg Dir Qid Dpth Thrsh";
      desc="DIR QID Depth Threshold";
      HandCoded=true;
      regwidth=32;
      field { name = "Threshold"; desc = "Congestion management threshold for DIR traffic.  The count of pending DIR QEs (enqueued and not yet dequeued) is compared to this threshold when performing congestion management.  To optimize HQM enqueue/schedule performance, the pending QE count used for the threshold calculation may differ by +/- 1 from actual count at the time of scheduling."; fieldwidth = 15;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } THRESH[14:0] = 15'h0; 
};
reg cfg_nalb_qid_dpth_thrsh_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_32";
      name="Cfg Nalb Qid Dpth Thrsh";
      desc="Nonatomic Load Balanced QID Depth Threshold";
      HandCoded=true;
      regwidth=32;
      field { name = "Threshold"; desc = "Congestion management threshold for NALB traffic.  The count of pending non-atomic Load Balanced QEs (enqueued and not yet dequeued) is compared to this threshold when performing congestion management.  To optimize HQM enqueue/schedule performance, the pending QE count used for the threshold calculation may differ by +/- 1 from actual count at the time of scheduling."; fieldwidth = 15;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } THRESH[14:0] = 15'h0; 
};
reg cfg_atm_qid_dpth_thrsh_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_VIRT_MEM_QID_32";
      name="Cfg Atomic Qid Dpth Thrsh";
      desc="Atomic QID Depth Threshold";
      HandCoded=true;
      regwidth=32;
      field { name = "Threshold"; desc = "Congestion management threshold for Atomic traffic.  The count of pending Atomic Load Balanced QEs (enqueued and not yet dequeued) is compared to this threshold when performing congestion management.  To optimize HQM enqueue/schedule performance, the pending QE count used for the threshold calculation may differ by +/- 1 from actual count at the time of scheduling."; fieldwidth = 15;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; } THRESH[14:0] = 15'h0; 
};
reg cfg_qid_atm_active_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="RUNTIMEARCHSTATE_VIRT_MEM_QID_32";
      name="Cfg Qid Atm Active";
      desc="Atomic QID Active Count";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Number of ATM QE in QED, compared to the atomic depth threshold when calculating congestion management.  Incremented when the QE is initially enqueued (atq) and decremented when the QE is transitioned from atq to atm (moved from QED to AQED)."; fieldwidth = 15;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; } COUNT[14:0] = 15'h0; 
};
reg cfg_interface_status_r {
      IntelRsvd=true;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      HqmIsFeatureReg=true;
      shared;
      HqmClassification="STATUS_REG_NA_1";
      name="Cfg Interface Status";
      desc="Interface Status";
      HandCoded=true;
      regwidth=32;
      field { name="lsp_ap_atm_not_rdy"; fieldwidth = 1; desc = "LSP to AP interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[31:31]";} LSP_AP_ATM_NOT_RDY[31:31] = 1'h0;
      field { name="lsp_ap_atm_v"; fieldwidth = 1; desc = "LSP to AP interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[30:30]";} LSP_AP_ATM_V[30:30] = 1'h0;
      field { name="lsp_nalb_sch_uo_not_rdy"; fieldwidth = 1; desc = "LSP to NALB Schedule UnoOrd interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[29:29]";} LSP_NALB_SCH_UO_NOT_RDY[29:29] = 1'h0;
      field { name="lsp_nalb_sch_uo_v"; fieldwidth = 1; desc = "LSP to NALB Schedule UnoOrd interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[28:28]";} LSP_NALB_SCH_UO_V[28:28] = 1'h0;
      field { name="lsp_nalb_sch_atq_not_rdy"; fieldwidth = 1; desc = "LSP to NALB Schedule Atq interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[27:27]";} LSP_NALB_SCH_ATQ_NOT_RDY[27:27] = 1'h0;
      field { name="lsp_nalb_sch_atq_v"; fieldwidth = 1; desc = "LSP to NALB Schedule Atq interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[26:26]";} LSP_NALB_SCH_ATQ_V[26:26] = 1'h0;
      field { name="lsp_dp_sch_dir_not_rdy"; fieldwidth = 1; desc = "LSP to DP Schedule Dir interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[25:25]";} LSP_DP_SCH_DIR_NOT_RDY[25:25] = 1'h0;
      field { name="lsp_dp_sch_dir_v"; fieldwidth = 1; desc = "LSP to DP Schedule Dir interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[24:24]";} LSP_DP_SCH_DIR_V[24:24] = 1'h0;
      field { name="lsp_nalb_sch_rorply_not_rdy"; fieldwidth = 1; desc = "LSP to NALB Schedule Rorply interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[23:23]";} LSP_NALB_SCH_RORPLY_NOT_RDY[23:23] = 1'h0;
      field { name="lsp_nalb_sch_rorply_v"; fieldwidth = 1; desc = "LSP to NALB Schedule Rorply interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[22:22]";} LSP_NALB_SCH_RORPLY_V[22:22] = 1'h0;
      field { name="lsp_dp_sch_rorply_not_rdy"; fieldwidth = 1; desc = "LSP to DP Schedule Rorply interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[21:21]";} LSP_DP_SCH_RORPLY_NOT_RDY[21:21] = 1'h0;
      field { name="lsp_dp_sch_rorply_v"; fieldwidth = 1; desc = "LSP to DP Schedule Rorply interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[20:20]";} LSP_DP_SCH_RORPLY_V[20:20] = 1'h0;
      field { name="rsvz0"; fieldwidth = 1; desc = "Rsvz0";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[19:19]";} RSVZ0[19:19] = 1'h0 ;
      field { name="ap_clock_not_idle"; fieldwidth = 1; desc = "AP to LSP clock control not idle.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[18:18]";} AP_CLOCK_NOT_IDLE[18:18] = 1'h0;
      field { name="aqed_clock_not_idle"; fieldwidth = 1; desc = "AQED to LSP clock control not idle.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[17:17]";} AQED_CLOCK_NOT_IDLE[17:17] = 1'h0;
      field { name="int_ser_clock_not_idle"; fieldwidth = 1; desc = "Interrupt Serializer to LSP clock control not idle.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[16:16]";} INT_SER_CLOCK_NOT_IDLE[16:16] = 1'h0;
      field { name="chp_lsp_tok_not_rdy"; fieldwidth = 1; desc = "CHP to LSP Token interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[15:15]";} CHP_LSP_TOK_NOT_RDY[15:15] = 1'h0;
      field { name="chp_lsp_tok_v"; fieldwidth = 1; desc = "CHP to LSP Token interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[14:14]";} CHP_LSP_TOK_V[14:14] = 1'h0;
      field { name="chp_lsp_cmp_not_rdy"; fieldwidth = 1; desc = "CHP to LSP Cmp interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[13:13]";} CHP_LSP_CMP_NOT_RDY[13:13] = 1'h0;
      field { name="chp_lsp_cmp_v"; fieldwidth = 1; desc = "CHP to LSP Cmp interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[12:12]";} CHP_LSP_CMP_V[12:12] = 1'h0;
      field { name="rop_lsp_reordcmp_not_rdy"; fieldwidth = 1; desc = "ROP to LSP Reordcmp interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[11:11]";} ROP_LSP_REORDCMP_NOT_RDY[11:11] = 1'h0;
      field { name="rop_lsp_reordcmp_v"; fieldwidth = 1; desc = "ROP to LSP Reordcmp interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[10:10]";} ROP_LSP_REORDCMP_V[10:10] = 1'h0;
      field { name="nalb_lsp_enq_ldb_not_rdy"; fieldwidth = 1; desc = "NALB to LSP Enq Ldb interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[9:9]";} NALB_LSP_ENQ_LDB_NOT_RDY[9:9] = 1'h0;
      field { name="nalb_lsp_enq_ldb_v"; fieldwidth = 1; desc = "NALB to LSP Enq Ldb interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[8:8]";} NALB_LSP_ENQ_LDB_V[8:8] = 1'h0;
      field { name="nalb_lsp_enq_rorply_not_rdy"; fieldwidth = 1; desc = "NALB to LSP Enq Rorply interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[7:7]";} NALB_LSP_ENQ_RORPLY_NOT_RDY[7:7] = 1'h0;
      field { name="nalb_lsp_enq_rorply_v"; fieldwidth = 1; desc = "NALB to LSP Enq Rorply interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[6:6]";} NALB_LSP_ENQ_RORPLY_V[6:6] = 1'h0;
      field { name="dp_lsp_enq_dir_not_rdy"; fieldwidth = 1; desc = "DP to LSP Enq Dir interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[5:5]";} DP_LSP_ENQ_DIR_NOT_RDY[5:5] = 1'h0;
      field { name="dp_lsp_enq_dir_v"; fieldwidth = 1; desc = "DP to LSP Enq Dir interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[4:4]";} DP_LSP_ENQ_DIR_V[4:4] = 1'h0;
      field { name="dp_lsp_enq_rorply_not_rdy"; fieldwidth = 1; desc = "DP to LSP Enq Rorply interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[3:3]";} DP_LSP_ENQ_RORPLY_NOT_RDY[3:3] = 1'h0;
      field { name="dp_lsp_enq_rorply_v"; fieldwidth = 1; desc = "DP to LSP Enq Rorply interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[2:2]";} DP_LSP_ENQ_RORPLY_V[2:2] = 1'h0;
      field { name="aqed_lsp_sent_to_cq_not_rdy"; fieldwidth = 1; desc = "AQED to LSP Sent To CQ interface not ready.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[1:1]";} AQED_LSP_SENT_TO_CQ_NOT_RDY[1:1] = 1'h0;
      field { name="aqed_lsp_sent_to_cq_v"; fieldwidth = 1; desc = "AQED to LSP Sent to CQ interface valid.";  IntelRsvd=true; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[0:0]";} AQED_LSP_SENT_TO_CQ_V[0:0] = 1'h0;
};
reg cfg_cq_ldb_sched_slot_count_0_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 0 L";
      desc="LDB CQ scheduled count, slot 0, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 0, ls half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_0.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_0_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 0 H";
      desc="LDB CQ scheduled count, slot 0, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 0, ms half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_0.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_1_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 1 L";
      desc="LDB CQ scheduled count, slot 1, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 1, ls half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_1.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_1_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 1 H";
      desc="LDB CQ scheduled count, slot 1, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 1, ms half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_1.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_2_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 2 L";
      desc="LDB CQ scheduled count, slot 2, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 2, ls half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_2.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_2_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 2 H";
      desc="LDB CQ scheduled count, slot 2, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 2, ms half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_2.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_3_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 3 L";
      desc="LDB CQ scheduled count, slot 3, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 3, ls half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_3.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_3_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 3 H";
      desc="LDB CQ scheduled count, slot 3, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 3, ms half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_3.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_4_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 4 L";
      desc="LDB CQ scheduled count, slot 4, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 4, ls half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_4.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_4_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 4 H";
      desc="LDB CQ scheduled count, slot 4, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 4, ms half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_4.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_5_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 5 L";
      desc="LDB CQ scheduled count, slot 5, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 5, ls half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_5.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_5_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 5 H";
      desc="LDB CQ scheduled count, slot 5, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 5, ms half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_5.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_6_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 6 L";
      desc="LDB CQ scheduled count, slot 6, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 6, ls half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_6.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_6_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 6 H";
      desc="LDB CQ scheduled count, slot 6, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 6, ms half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_6.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_7_l_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 7 L";
      desc="LDB CQ scheduled count, slot 7, ls half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 7, ls half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_7.count[31:0]";} COUNT[31:0] = 32'h0; 
};
reg cfg_cq_ldb_sched_slot_count_7_h_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="STATISTICS_REG_NA_1";
      name="Cfg Cq Ldb Sched Slot Count 7 H";
      desc="LDB CQ scheduled count, slot 7, ms half";
      HandCoded=true;
      regwidth=32;
      field { name = "Count"; desc = "Total number of QEs scheduled to the specified LDB CQ via qidix slot 7, ms half.  Controlled by the cfg_control_sched_slot_count register"; fieldwidth = 32;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RO/V"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_7.count[63:32]";} COUNT[31:0] = 32'h0; 
};
reg cfg_control_sched_slot_count_r {
      IntelRsvd=false;
      Security_PolicyGroup = <%=$Security_Props{'HQM_OS_W'}%>;
      Security_ReadAccess_Str = <%=$Security_Props{'HQM_OS_W_RAC_AGENTS'}%>;
      Security_WriteAccess_Str = <%=$Security_Props{'HQM_OS_W_WAC_AGENTS'}%>;
      shared;
      HqmClassification="CONFIG_REG_NA_1";
      name="Cfg Control Sched Slot Count";
      desc="Control sched slot counts";
      HandCoded=true;
      regwidth=32;
      field { name = "Enabled"; desc = "When = 1 and Clear=0 enables the cfg_cq_ldb_sched_slot counters to increment"; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[0:0]";} ENAB[0:0] = 1'h0; 
      field { name = "Clear"; desc = "When = 1 clears the cfg_cq_ldb_sched_slot counters to zero"; fieldwidth = 1;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[1:1]";} CLR[1:1] = 1'h0; 
      field { name = "Rsvz0"; desc = "rsvz0"; fieldwidth = 6;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[7:2]";} RSVZ0[7:2] = 6'h0; 
      field { name = "CQ"; desc = "Specifies the LDB CQ to be observed by the cfg_cq_ldb_sched_slot counters"; fieldwidth = 8;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[15:8]";} CQ[15:8] = 8'h0; 
      field { name = "Rsvz1"; desc = "rsvz0"; fieldwidth = 16;  IntelRsvd=false; PowerWell="vcccfn_gated"; AccessType = "RW"; ValRTLSignal = "%HQMID%.i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[31:16]";} RSVZ1[31:16] = 16'h0; 
};
