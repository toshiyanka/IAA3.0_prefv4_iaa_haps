<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<ipxact:abstractionDefinition xmlns:ipxact="http://www.accellera.org/XMLSchema/IPXACT/1685-2014" xmlns:snps="http://www.synopsys.com/SPIRIT-snps" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.accellera.org/XMLSchema/IPXACT/1685-2014 http://www.accellera.org/XMLSchema/IPXACT/1685-2014/index.xsd">

  <ipxact:vendor>Intel</ipxact:vendor>

  <ipxact:library>Intel</ipxact:library>

  <ipxact:name>DTF::Signals_rtl</ipxact:name>

  <ipxact:version>v1.4_r1.2</ipxact:version>

  <ipxact:busType library="Intel" name="DTF::Signals" vendor="Intel" version="v1.4_r1.2"/>

  <ipxact:ports>
    <ipxact:port>
      <ipxact:logicalName>adtf_dnstream_header_out</ipxact:logicalName>
      <ipxact:description>DTF Header
Contains: Destination ID, End of Frame (EOF), Arbitration (TXID), MIPI-STPv2 Type, MIPI-STPv2 Channel ID (cid), MIPI-STPv2 Major ID (mid)
Format (order high to low bit):
{destid,eof,txid,type[5:0],cid[7:0],mid7:0]}</ipxact:description>
      <ipxact:wire>
        <ipxact:onMaster>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>DTF_HEADER_WIDTH</ipxact:width>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:onMaster>
        <ipxact:onSlave>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>DTF_HEADER_WIDTH</ipxact:width>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:onSlave>
        <ipxact:requiresDriver driverType="any"/>
      </ipxact:wire>
    </ipxact:port>
    <ipxact:port>
      <ipxact:logicalName>adtf_dnstream_data_out</ipxact:logicalName>
      <ipxact:description>Packet data
Packet data and timestamp output to DTF</ipxact:description>
      <ipxact:wire>
        <ipxact:onMaster>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>DTF_DATA_WIDTH</ipxact:width>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:onMaster>
        <ipxact:onSlave>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>DTF_DATA_WIDTH</ipxact:width>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:onSlave>
        <ipxact:requiresDriver driverType="any"/>
      </ipxact:wire>
    </ipxact:port>
    <ipxact:port>
      <ipxact:logicalName>adtf_dnstream_valid_out</ipxact:logicalName>
      <ipxact:description>Output is valid</ipxact:description>
      <ipxact:wire>
        <ipxact:onMaster>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>1</ipxact:width>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:onMaster>
        <ipxact:onSlave>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>1</ipxact:width>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:onSlave>
        <ipxact:requiresDriver driverType="any"/>
      </ipxact:wire>
    </ipxact:port>
    <ipxact:port>
      <ipxact:logicalName>fdtf_upstream_credit_in</ipxact:logicalName>
      <ipxact:description>Downstream component is returning a credit to DVP</ipxact:description>
      <ipxact:wire>
        <ipxact:onMaster>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>1</ipxact:width>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:onMaster>
        <ipxact:onSlave>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>1</ipxact:width>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:onSlave>
        <ipxact:requiresDriver driverType="any"/>
      </ipxact:wire>
    </ipxact:port>
    <ipxact:port>
      <ipxact:logicalName>fdtf_upstream_active_in</ipxact:logicalName>
      <ipxact:description>Fabric tracing is active</ipxact:description>
      <ipxact:wire>
        <ipxact:onMaster>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>1</ipxact:width>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:onMaster>
        <ipxact:onSlave>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>1</ipxact:width>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:onSlave>
        <ipxact:requiresDriver driverType="any"/>
      </ipxact:wire>
    </ipxact:port>
    <ipxact:port>
      <ipxact:logicalName>fdtf_upstream_sync_in</ipxact:logicalName>
      <ipxact:description>Synchronization event</ipxact:description>
      <ipxact:wire>
        <ipxact:onMaster>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>1</ipxact:width>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:onMaster>
        <ipxact:onSlave>
          <ipxact:presence>required</ipxact:presence>
          <ipxact:width>1</ipxact:width>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:onSlave>
        <ipxact:requiresDriver driverType="any"/>
      </ipxact:wire>
    </ipxact:port>
  </ipxact:ports>

  <ipxact:description>Revision: r1.2. Debug Trace Fabric Signals</ipxact:description>

  <ipxact:parameters>
    <ipxact:parameter parameterId="DTF_PG_INTERFACE" resolve="user" type="bit">
      <ipxact:name>DTF_PG_INTERFACE</ipxact:name>
      <ipxact:description>When set, adds two ports to the DTF interface to control situations where there is a voltage domain crossing outside of the IP.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="DTF_ISO_INTERFACE" resolve="user" type="bit">
      <ipxact:name>DTF_ISO_INTERFACE</ipxact:name>
      <ipxact:description>When set, implements port for driving Isolation signal for internal DTF arbiter that contains a voltage domain crossing.
This parameter is required to be SoC modifiable when these two conditions are both true -
1. The IP contains a DTF arbiter component, and
2. The IP contains a voltage domain crossing with that DTF arbiter.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="DTF_HEADER_WIDTH" resolve="user" type="int">
      <ipxact:name>DTF_HEADER_WIDTH</ipxact:name>
      <ipxact:description>Specifies the width of the downstream DTF header output, derived from DTF_DATA_WIDTH. Header width of 4, 7, 13, or 25 wires based on DTF data width of 8, 16, 32, or 64, which refers to the number of wires for data.  [From a time multiplexed perspective, 64 = 1 cycle, 32 = 2 cycles, 16 = 4 cycles, 8 = 8 cycles]. </ipxact:description>
      <ipxact:value>25</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="DTF_DATA_WIDTH" resolve="user" type="int">
      <ipxact:name>DTF_DATA_WIDTH</ipxact:name>
      <ipxact:description>Specifies the width of the downstream DTF output. Supported values are 8, 16, 32, or 64, which refers to the number of wires for data. Note that header also scales by the same amount, and corresponds to a header width (DTF_HEADER_WIDTH) of 4, 7, 13, or 25 wires respectively. [From a time multiplexed perspective, 64 = 1 cycle, 32 = 2 cycles, 16 = 4 cycles, 8 = 8 cycles]. </ipxact:description>
      <ipxact:value>64</ipxact:value>
    </ipxact:parameter>
  </ipxact:parameters>

</ipxact:abstractionDefinition>
