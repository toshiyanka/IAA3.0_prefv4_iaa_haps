///
///  INTEL CONFIDENTIAL
///
///  Copyright 2022 Intel Corporation All Rights Reserved.
///
///  The source code contained or described herein and all documents related
///  to the source code ("Material") are owned by Intel Corporation or its
///  suppliers or licensors. Title to the Material remains with Intel
///  Corporation or its suppliers and licensors. The Material contains trade
///  secrets and proprietary and confidential information of Intel or its
///  suppliers and licensors. The Material is protected by worldwide copyright
///  and trade secret laws and treaty provisions. No part of the Material may
///  be used, copied, reproduced, modified, published, uploaded, posted,
///  transmitted, distributed, or disclosed in any way without Intel's prior
///  express written permission.
///
///  No license under any patent, copyright, trade secret or other intellectual
///  property right is granted to or conferred upon you by disclosure or
///  delivery of the Materials, either expressly, by implication, inducement,
///  estoppel or otherwise. Any license under such intellectual property rights
///  must be express and approved by Intel in writing.
///

//                                                                             
// File:            hqm_system_csr.sv                                          
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             



// The NEBULON_RTLGEN_TEMPLATE env was: /p/hdk/rtl/proj_tools/nebulon_data/shdk74/20.35.01_gen3/generators/rtltemplates:/p/hdk/rtl/cad/x86-64_linux26/dt/nebulon/d20ww52.1/generators/rtltemplates:/p/hdk/rtl/cad/x86-64_linux26/dt/nebulon/d20ww52.1/generators/overhead_templates::/nfs/site/disks/crt_tools_007/dt/nebulon/d22ww21.1/generators/rtlgen_include_template:/nfs/site/disks/crt_tools_007/dt/nebulon/d22ww21.1/generators/rtlgen_pkg_template
//lintra push -60039
//lintra push -68099
// This include is still needed for RTLGEN_LCB
`include "rtlgen_include_hqm_system_csr_map.vh"
`include "rtlgen_pkg_hqm_system_csr_map.vh"
`include "hqm_system_csr_pkg.vh"

//lintra push -68094
//lintra push -60115

// ===================================================================
// Flops macros 
// ===================================================================

`ifndef RTLGEN_HQM_SYSTEM_CSR_FF
`define RTLGEN_HQM_SYSTEM_CSR_FF(rtl_clk, rst_n, rst_val, d, q) \
    always_ff @(posedge rtl_clk, negedge rst_n) \
        if (!rst_n) q <= rst_val; \
        else        q <= d;
`endif // RTLGEN_HQM_SYSTEM_CSR_FF

`ifndef RTLGEN_HQM_SYSTEM_CSR_EN_FF
`define RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, rst_n, rst_val, en, d, q) \
    always_ff @(posedge rtl_clk, negedge rst_n) \
        if (!rst_n) q <= rst_val; \
        else \
            if (en) q <= d;
`endif // RTLGEN_HQM_SYSTEM_CSR_EN_FF

`ifndef RTLGEN_HQM_SYSTEM_CSR_FF_NEGEDGE
`define RTLGEN_HQM_SYSTEM_CSR_FF_NEGEDGE(rtl_clk, rst_n, rst_val, d, q) \
    always_ff @(negedge rtl_clk, negedge rst_n) \
        if (!rst_n) q <= rst_val; \
        else        q <= d;
`endif // RTLGEN_HQM_SYSTEM_CSR_FF_NEGEDGE

`ifndef RTLGEN_HQM_SYSTEM_CSR_EN_FF_NEGEDGE
`define RTLGEN_HQM_SYSTEM_CSR_EN_FF_NEGEDGE(rtl_clk, rst_n, rst_val, en, d, q) \
    always_ff @(negedge rtl_clk, negedge rst_n) \
        if (!rst_n) q <= rst_val; \
        else \
            if (en) q <= d;
`endif // RTLGEN_HQM_SYSTEM_CSR_EN_FF_NEGEDGE

`ifndef RTLGEN_HQM_SYSTEM_CSR_FF_RSTD
`define RTLGEN_HQM_SYSTEM_CSR_FF_RSTD(rtl_clk, rst_n, rst_val, d, q) \
   genvar \gen_``d`` ; \
   generate \
      if (1) begin : \ff_rstd_``d`` \
         logic [$bits(q)-1:0] rst_vec, set_vec, d_vec, q_vec; \
         assign rst_vec = !rst_n ? ~rst_val : '0; \
         assign set_vec = !rst_n ? rst_val : '0; \
         assign d_vec = d; \
         assign q = q_vec; \
         for ( \gen_``d`` = 0 ; \gen_``d`` < $bits(q) ; \gen_``d`` = \gen_``d`` + 1)  \
            always_ff @(posedge rtl_clk, posedge rst_vec[ \gen_``d`` ], posedge set_vec[ \gen_``d`` ]) \
               if (rst_vec[ \gen_``d`` ]) \
                  q_vec[ \gen_``d`` ] <= '0; \
               else if (set_vec[ \gen_``d`` ]) \
                  q_vec[ \gen_``d`` ] <= '1; \
               else   \
                  q_vec[ \gen_``d`` ] <= d_vec[ \gen_``d`` ]; \
      end \
   endgenerate       
`endif // RTLGEN_HQM_SYSTEM_CSR_FF_RSTD


module rtlgen_hqm_system_csr_en_ff_rstd(rtl_clk_var, rst_n_var, rst_val_var, en_var, d_var, q_var);
parameter DATA_WIDTH=1;
input logic rtl_clk_var, rst_n_var, en_var;
input logic [DATA_WIDTH-1:0] rst_val_var, d_var;
output logic [DATA_WIDTH-1:0] q_var;

   genvar gen_var ; 
   generate 
      if (1) begin : rtlgen_en_ff_rstd
         logic [DATA_WIDTH-1:0] rst_vec, set_vec, d_vec, q_vec; 
         assign rst_vec = !rst_n_var ? ~rst_val_var : '0; 
         assign set_vec = !rst_n_var ? rst_val_var : '0; 
         assign d_vec = d_var; 
         assign q_var = q_vec; 
         for ( gen_var = 0 ; gen_var < DATA_WIDTH; gen_var = gen_var + 1)  
            always_ff @(posedge rtl_clk_var, posedge rst_vec[ gen_var ], posedge set_vec[ gen_var ]) 
               if (rst_vec[ gen_var ]) 
                  q_vec[ gen_var ] <= '0; 
               else if (set_vec[ gen_var ]) 
                  q_vec[ gen_var ] <= '1; 
               else if (en_var)  
                  q_vec[ gen_var ] <= d_vec[ gen_var ]; 
      end 
   endgenerate       

endmodule 

`ifndef RTLGEN_HQM_SYSTEM_CSR_EN_FF_RSTD
`define RTLGEN_HQM_SYSTEM_CSR_EN_FF_RSTD(rtl_clk, rst_n, rst_val, en, d, q) \
rtlgen_hqm_system_csr_en_ff_rstd #(.DATA_WIDTH($bits(q))) \``d``_en_ff_rstd (.rtl_clk_var(rtl_clk), .rst_n_var(rst_n), .rst_val_var(rst_val), .en_var(en), .d_var(d), .q_var(q));
`endif // RTLGEN_HQM_SYSTEM_CSR_EN_FF_RSTD



`ifndef RTLGEN_HQM_SYSTEM_CSR_FF_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_FF_SYNCRST(rtl_clk, syncrst_n, rst_val, d, q) \
    always_ff @(posedge rtl_clk) \
        if (!syncrst_n) q <= rst_val; \
        else        q <= d;
`endif // RTLGEN_HQM_SYSTEM_CSR_FF_SYNCRST

`ifndef RTLGEN_HQM_SYSTEM_CSR_EN_FF_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_EN_FF_SYNCRST(rtl_clk, syncrst_n, rst_val, en, d, q) \
    always_ff @(posedge rtl_clk) \
        if (!syncrst_n) q <= rst_val; \
        else \
            if (en) q <= d;
`endif // RTLGEN_HQM_SYSTEM_CSR_EN_FF_SYNCRST

`ifndef RTLGEN_HQM_SYSTEM_CSR_FF_NEGEDGE_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_FF_NEGEDGE_SYNCRST(rtl_clk, syncrst_n, rst_val, d, q) \
    always_ff @(negedge rtl_clk) \
        if (!syncrst_n) q <= rst_val; \
        else        q <= d;
`endif // RTLGEN_HQM_SYSTEM_CSR_FF_NEGEDGE_SYNCRST

`ifndef RTLGEN_HQM_SYSTEM_CSR_EN_FF_NEGEDGE_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_EN_FF_NEGEDGE_SYNCRST(rtl_clk, syncrst_n, rst_val, en, d, q) \
    always_ff @(negedge rtl_clk) \
        if (!syncrst_n) q <= rst_val; \
        else \
            if (en) q <= d;
`endif // RTLGEN_HQM_SYSTEM_CSR_EN_FF_NEGEDGE_SYNCRST

// BOTHRST is cancelled. Should not be used. 
//
// `ifndef RTLGEN_HQM_SYSTEM_CSR_FF_BOTHRST
// `define RTLGEN_HQM_SYSTEM_CSR_FF_BOTHRST(rtl_clk, rst_n, syncrst_n, rst_val, d, q) \
//     always_ff @(posedge rtl_clk, negedge rst_n) \
//         if (!rst_n) q <= rst_val; \
//         else if (!syncrst_n) q <= rst_val; \
//         else        q <= d;
// `endif // RTLGEN_HQM_SYSTEM_CSR_FF_BOTHRST
// 
// `ifndef RTLGEN_HQM_SYSTEM_CSR_EN_FF_BOTHRST
// `define RTLGEN_HQM_SYSTEM_CSR_EN_FF_BOTHRST(rtl_clk, rst_n, syncrst_n, rst_val, en, d, q) \
//     always_ff @(posedge rtl_clk, negedge rst_n) \
//         if (!rst_n) q <= rst_val; \
//         else if (!syncrst_n) q <= rst_val; \
//         else if (en) q <= d;
// 
// `endif // RTLGEN_HQM_SYSTEM_CSR_EN_FF_BOTHRST


// ===================================================================
// Latch macros -- compatible with nhm_macros RST_LATCH & EN_RST_LATCH
// ===================================================================

`ifndef RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW
`define RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW(rtl_clk, d, q) \
   always_latch if ((`ifdef LINTRA_OL (* ol_clock *) `endif (~rtl_clk))) q <= d;   
`endif // RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW

`ifndef RTLGEN_HQM_SYSTEM_CSR_PH2_FF
`define RTLGEN_HQM_SYSTEM_CSR_PH2_FF(rtl_clk, d, q) \
    always_ff @(posedge rtl_clk) \
     q <= d;
`endif // RTLGEN_HQM_SYSTEM_CSR_PH2_FF

// Can't be override
`ifndef RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW_ASSIGN
`define RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW_ASSIGN(n) \
   `RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW(gated_clk,``n``,``n``_low)
`endif // RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW_ASSIGN

// Can't be override
`ifndef RTLGEN_HQM_SYSTEM_CSR_PH2_FF_ASSIGN
`define RTLGEN_HQM_SYSTEM_CSR_PH2_FF_ASSIGN(n) \
   `RTLGEN_HQM_SYSTEM_CSR_PH2_FF(gated_clk,``n``,``n``_low)
`endif // RTLGEN_HQM_SYSTEM_CSR_PH2_FF_ASSIGN

`ifndef RTLGEN_HQM_SYSTEM_CSR_LATCH
`define RTLGEN_HQM_SYSTEM_CSR_LATCH(rtl_clk, rst_n, rst_val, d, q) \
   always_latch                                     \
      begin                                         \
         if (!rst_n) q <= rst_val;                  \
         else if ((`ifdef LINTRA_OL (* ol_clock *) `endif (rtl_clk))) q <= d; \
      end                                           
`endif // RTLGEN_HQM_SYSTEM_CSR_LATCH

// In order not to touch regular LATCH_LOW (without reset) for backward compatible, 
//  an additional LATCH_LOW macro was added for reset with suffix _ASYNCRST 
`ifndef RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW_ASYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW_ASYNCRST(rtl_clk, rst_n, rst_val, d, q) \
   always_latch                                     \
      begin                                         \
         if (!rst_n) q <= rst_val;                  \
         else if ((`ifdef LINTRA_OL (* ol_clock *) `endif (~rtl_clk))) q <= d; \
      end                                           
`endif // RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW_ASYNCRST

`ifndef RTLGEN_HQM_SYSTEM_CSR_EN_LATCH
`define RTLGEN_HQM_SYSTEM_CSR_EN_LATCH(rtl_clk, rst_n, rst_val, en, d, q) \
   always_latch                                            \
      begin                                                \
         if (!rst_n) q <= rst_val;                         \
         else if ((`ifdef LINTRA_OL (* ol_clock *) `endif (rtl_clk))) begin \
              if (en) q <= d;                              \
         end                                               \
      end                                                  
`endif // RTLGEN_HQM_SYSTEM_CSR_EN_LATCH

`ifndef RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_LOW
`define RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_LOW(rtl_clk, rst_n, rst_val, en, d, q) \
   always_latch                                            \
      begin                                                \
         if (!rst_n) q <= rst_val;                         \
         else if ((`ifdef LINTRA_OL (* ol_clock *) `endif (~rtl_clk))) begin \
              if (en) q <= d;                              \
         end                                               \
      end                                                  
`endif // RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_LOW

`ifndef RTLGEN_HQM_SYSTEM_CSR_LATCH_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_LATCH_SYNCRST(rtl_clk, syncrst_n, rst_val, d, q) \
   always_latch                                     \
      begin                                         \
         if ((`ifdef LINTRA_OL (* ol_clock *) `endif (rtl_clk))) \
            if (!syncrst_n) q <= rst_val;           \
            else            q <=  d;                \
      end                                           
`endif // RTLGEN_HQM_SYSTEM_CSR_LATCH_SYNCRST

`ifndef RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW_SYNCRST(rtl_clk, syncrst_n, rst_val, d, q) \
   always_latch                                     \
      begin                                         \
         if ((`ifdef LINTRA_OL (* ol_clock *) `endif (~rtl_clk))) \
            if (!syncrst_n) q <= rst_val;           \
            else            q <=  d;                \
      end                                           
`endif // RTLGEN_HQM_SYSTEM_CSR_LATCH_LOW_SYNCRST

`ifndef RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_SYNCRST(rtl_clk, syncrst_n, rst_val, en, d, q) \
   always_latch                                            \
      begin                                                \
         if ((`ifdef LINTRA_OL (* ol_clock *) `endif (rtl_clk)))  \
            if (!syncrst_n) q <= rst_val;                  \
            else if (en)    q <=  d;                       \
      end                                                  
`endif // RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_SYNCRST

`ifndef RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_LOW_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_LOW_SYNCRST(rtl_clk, syncrst_n, rst_val, en, d, q) \
   always_latch                                            \
      begin                                                \
         if ((`ifdef LINTRA_OL (* ol_clock *) `endif (~rtl_clk)))  \
            if (!syncrst_n) q <= rst_val;                  \
            else if (en)    q <=  d;                       \
      end                                                  
`endif // RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_LOW_SYNCRST

// BOTHRST is cancelled. Should not be used. 
// 
// `ifndef RTLGEN_HQM_SYSTEM_CSR_LATCH_BOTHRST
// `define RTLGEN_HQM_SYSTEM_CSR_LATCH_BOTHRST(rtl_clk, rst_n, syncrst_n, rst_val, d, q) \
//    always_latch                                     \
//       begin                                         \
//          if (!rst_n) q <= rst_val;                  \
//          else if (`ifdef LINTRA _OL(* ol_clock *) `endif (rtl_clk)) \
//             if (!syncrst_n) q <= rst_val;           \
//             else            q <=  d;                \
//       end                                           
// `endif // RTLGEN_HQM_SYSTEM_CSR_LATCH_BOTHRST
// 
// `ifndef RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_BOTHRST
// `define RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_BOTHRST(rtl_clk, rst_n, syncrst_n, rst_val, en, d, q) \
//    always_latch                                     \
//       begin                                         \
//          if (!rst_n) q <= rst_val;                  \
//          else if ((`ifdef LINTRA_OL (* ol_clock *) `endif (rtl_clk))) \
//             if (!syncrst_n) q <= rst_val;           \
//             else if (en)    q <=  d;                \
//       end                                           
// `endif // RTLGEN_HQM_SYSTEM_CSR_EN_LATCH_BOTHRST


// ===================================================================
// LCB macros 
// ===================================================================

`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_HOLD_REQ_2CYCLES
`define RTLGEN_HQM_SYSTEM_CSR_LCB_HOLD_REQ_2CYCLES(clock, enable, lcb_clk) \
   always_comb lcb_clk = {$bits(lcb_clk){clock}} & enable;
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_HOLD_REQ_2CYCLES

`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_HOLD_REQ_2CYCLES_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_LCB_HOLD_REQ_2CYCLES_SYNCRST(clock, enable, lcb_clk, sync_rst) \
   always_comb lcb_clk = {$bits(lcb_clk){clock}} & (enable | {$bits(lcb_clk){!sync_rst}});
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_HOLD_REQ_2CYCLES_SYNCRST


`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_FFEN
`define RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_FFEN(clock, delay_rst_n, enable, lcb_clk, dly_seq_type, close_ff_type, nxt_expr) \
   logic [$bits(lcb_clk)-1:0] ``enable``_dly_up;  \
   logic [$bits(lcb_clk)-1:0] ``enable``_close_up;  \
   logic [$bits(lcb_clk)-1:0] ``enable``_nxt; \
   logic [$bits(lcb_clk)-1:0] ``enable``_dly; \
   logic [$bits(lcb_clk)-1:0] ``enable``_close; \
   always_comb ``enable``_nxt = ``nxt_expr``; \
   always_comb ``enable``_dly_up = ``enable``_nxt | ``enable``_close; \
   always_comb ``enable``_close_up = ``enable``_dly | ``enable``_close; \
   genvar ``enable``_gen_var ; \
   generate \
      if (1) begin : rtlgen_lcb_``enable``_dly \
         for ( ``enable``_gen_var = 0 ; ``enable``_gen_var < $bits(lcb_clk); ``enable``_gen_var = ``enable``_gen_var + 1) begin \
  `RTLGEN_HQM_SYSTEM_CSR_``close_ff_type``(clock,delay_rst_n,1'b0,``enable``_close_up[ ``enable``_gen_var ],``enable``_dly[ ``enable``_gen_var ],``enable``_close[ ``enable``_gen_var ]) \
  `RTLGEN_HQM_SYSTEM_CSR_``dly_seq_type``(clock,delay_rst_n,1'b0,``enable``_dly_up[ ``enable``_gen_var ],``enable``_nxt[ ``enable``_gen_var ],``enable``_dly[ ``enable``_gen_var ]) \
         end      \
      end      \
   endgenerate \
   always_comb lcb_clk = {$bits(lcb_clk){clock}} & ``enable``_dly;
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_EN


`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_EN
`define RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_EN(clock, delay_rst_n, enable, lcb_clk, seq_type, nxt_expr) \
   logic [$bits(lcb_clk)-1:0] ``enable``_up;  \
   logic [$bits(lcb_clk)-1:0] ``enable``_nxt; \
   logic [$bits(lcb_clk)-1:0] ``enable``_dly; \
   always_comb ``enable``_nxt = ``nxt_expr``; \
   always_comb ``enable``_up = ``enable``_nxt | ``enable``_dly; \
   genvar ``enable``_gen_var ; \
   generate \
      if (1) begin : rtlgen_lcb_``enable``_dly \
         for ( ``enable``_gen_var = 0 ; ``enable``_gen_var < $bits(lcb_clk); ``enable``_gen_var = ``enable``_gen_var + 1) \
  `RTLGEN_HQM_SYSTEM_CSR_``seq_type``(clock,delay_rst_n,1'b0,``enable``_up[ ``enable``_gen_var ],``enable``_nxt[ ``enable``_gen_var ],``enable``_dly[ ``enable``_gen_var ]) \
      end      \
   endgenerate \
   always_comb lcb_clk = {$bits(lcb_clk){clock}} & ``enable``_dly;
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_EN

`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY
`define RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY(clock, delay_rst_n, enable, lcb_clk, seq_type, nxt_expr) \
   logic [$bits(lcb_clk)-1:0] ``enable``_nxt; \
   logic [$bits(lcb_clk)-1:0] ``enable``_dly; \
   always_comb ``enable``_nxt = ``nxt_expr``; \
   genvar ``enable``_gen_var ; \
   generate \
      if (1) begin : rtlgen_lcb_``enable``_dly \
         for ( ``enable``_gen_var = 0 ; ``enable``_gen_var < $bits(lcb_clk); ``enable``_gen_var = ``enable``_gen_var + 1) \
  `RTLGEN_HQM_SYSTEM_CSR_``seq_type``(clock,delay_rst_n,1'b0,``enable``_nxt[ ``enable``_gen_var ],``enable``_dly[ ``enable``_gen_var ]) \
      end      \
   endgenerate \
   always_comb lcb_clk = {$bits(lcb_clk){clock}} & ``enable``_dly;
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY

// LCB MODE: LATCH_FFEN_LOW
`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_FFEN_LOW
`define RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_FFEN_LOW(clock, delay_rst_n, enable, lcb_clk) \
   `RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_FFEN(clock,delay_rst_n,enable,lcb_clk,EN_LATCH_LOW,EN_FF_NEGEDGE,enable) 
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_FFEN_LOW

`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_FFEN_LOW_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_FFEN_LOW_SYNCRST(clock, delay_rst_n, enable, lcb_clk, sync_rst) \
   `RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_FFEN(clock,1'b1,enable,lcb_clk,EN_LATCH_LOW_SYNCRST,EN_FF_NEGEDGE_SYNCRST,enable|{$bits(lcb_clk){!sync_rst}}) 
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_FFEN_LOW_SYNCRST

// LCB MODE: LATCH_EN_LOW
`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_EN_LOW
`define RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_EN_LOW(clock, delay_rst_n, enable, lcb_clk) \
   `RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_EN(clock,delay_rst_n,enable,lcb_clk,EN_LATCH_LOW,enable)
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_EN_LOW

`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_EN_LOW_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_EN_LOW_SYNCRST(clock, delay_rst_n, enable, lcb_clk, sync_rst) \
   `RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_EN(clock,1'b1,enable,lcb_clk,EN_LATCH_LOW_SYNCRST,enable|{$bits(lcb_clk){!sync_rst}})
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_EN_LOW_SYNCRST

// LCB MODE: LATCH_LOW
`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_LOW
`define RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_LOW(clock, delay_rst_n, enable, lcb_clk) \
   `RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY(clock,delay_rst_n,enable,lcb_clk,LATCH_LOW_ASYNCRST,enable)
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_LOW

`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_LOW_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_LOW_SYNCRST(clock, delay_rst_n, enable, lcb_clk, sync_rst) \
   `RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY(clock,1'b1,enable,lcb_clk,LATCH_LOW_SYNCRST,enable|{$bits(lcb_clk){!sync_rst}})
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_LATCH_LOW_SYNCRST

// LCB MODE: FF_NEGEDGE
`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_FF_NEGEDGE
`define RTLGEN_HQM_SYSTEM_CSR_LCB_FF_NEGEDGE(clock, delay_rst_n, enable, lcb_clk)  \
   `RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_EN(clock,delay_rst_n,enable,lcb_clk,EN_FF_NEGEDGE,enable)
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_FF_NEGEDGE

`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_FF_NEGEDGE_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_LCB_FF_NEGEDGE_SYNCRST(clock, delay_rst_n, enable, lcb_clk, sync_rst) \
   `RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_EN(clock,1'b1,enable,lcb_clk,EN_FF_NEGEDGE_SYNCRST,enable|{$bits(lcb_clk){!sync_rst}})
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_FF_NEGEDGE_SYNCRST

// LCB MODE: FF_POSEDGE
`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_FF_POSEDGE
`define RTLGEN_HQM_SYSTEM_CSR_LCB_FF_POSEDGE(clock, delay_rst_n, enable, lcb_clk)  \
   `RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_EN(clock,delay_rst_n,enable,lcb_clk,EN_FF,enable)
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_FF_POSEDGE

`ifndef RTLGEN_HQM_SYSTEM_CSR_LCB_FF_POSEDGE_SYNCRST
`define RTLGEN_HQM_SYSTEM_CSR_LCB_FF_POSEDGE_SYNCRST(clock, delay_rst_n, enable, lcb_clk, sync_rst) \
   `RTLGEN_HQM_SYSTEM_CSR_LCB_DELAY_EN(clock,1'b1,enable,lcb_clk,EN_FF_SYNCRST,enable|{$bits(lcb_clk){!sync_rst}})
`endif // RTLGEN_HQM_SYSTEM_CSR_LCB_FF_POSEDGE_SYNCRST



//lintra pop

module hqm_system_csr ( //lintra s-2096
    // Clocks
    gated_clk,
    rtl_clk,

    // Resets
    hqm_inp_gated_rst_n,


    // Register Inputs
    load_ALARM_ERR,
    load_ALARM_LUT_PERR,
    load_ALARM_MB_ECC_ERR,
    load_ALARM_SB_ECC_ERR,
    load_CFG_RX_FIFO_STATUS,
    load_CWDI_RX_FIFO_STATUS,
    load_DIR_CQ_31_0_OCC_INT_STATUS,
    load_DIR_CQ_63_32_OCC_INT_STATUS,
    load_EGRESS_LUT_ERR,
    load_HCW_ENQ_FIFO_STATUS,
    load_HCW_SCH_FIFO_STATUS,
    load_HQM_ALARM_RX_FIFO_STATUS,
    load_INGRESS_LUT_ERR,
    load_LDB_CQ_31_0_OCC_INT_STATUS,
    load_LDB_CQ_63_32_OCC_INT_STATUS,
    load_MSIX_31_0_SYND,
    load_MSIX_63_32_SYND,
    load_MSIX_64_SYND,
    load_MSIX_ACK,
    load_ROB_SYNDROME,
    load_SCH_OUT_FIFO_STATUS,
    load_SIF_ALARM_FIFO_STATUS,

    new_AI_CTRL,
    new_ALARM_DB_STATUS,
    new_ALARM_ERR,
    new_ALARM_LUT_PERR,
    new_ALARM_MB_ECC_ERR,
    new_ALARM_SB_ECC_ERR,
    new_ALARM_STATUS,
    new_CFG_RX_FIFO_STATUS,
    new_CWDI_RX_FIFO_STATUS,
    new_DIR_CQ_31_0_OCC_INT_STATUS,
    new_DIR_CQ_63_32_OCC_INT_STATUS,
    new_EGRESS_DB_STATUS,
    new_EGRESS_LUT_ERR,
    new_EGRESS_STATUS,
    new_HCW_ENQ_FIFO_STATUS,
    new_HCW_REQ_DEBUG,
    new_HCW_SCH_FIFO_STATUS,
    new_HQM_ALARM_RX_FIFO_STATUS,
    new_HQM_HCW_DATA_DEBUG,
    new_HQM_PDATA_DEBUG,
    new_HQM_SYSTEM_CNT_0,
    new_HQM_SYSTEM_CNT_1,
    new_HQM_SYSTEM_CNT_10,
    new_HQM_SYSTEM_CNT_11,
    new_HQM_SYSTEM_CNT_12,
    new_HQM_SYSTEM_CNT_13,
    new_HQM_SYSTEM_CNT_14,
    new_HQM_SYSTEM_CNT_15,
    new_HQM_SYSTEM_CNT_16,
    new_HQM_SYSTEM_CNT_17,
    new_HQM_SYSTEM_CNT_18,
    new_HQM_SYSTEM_CNT_19,
    new_HQM_SYSTEM_CNT_2,
    new_HQM_SYSTEM_CNT_20,
    new_HQM_SYSTEM_CNT_21,
    new_HQM_SYSTEM_CNT_3,
    new_HQM_SYSTEM_CNT_4,
    new_HQM_SYSTEM_CNT_5,
    new_HQM_SYSTEM_CNT_6,
    new_HQM_SYSTEM_CNT_7,
    new_HQM_SYSTEM_CNT_8,
    new_HQM_SYSTEM_CNT_9,
    new_INGRESS_DB_STATUS,
    new_INGRESS_LUT_ERR,
    new_INGRESS_STATUS,
    new_LDB_CQ_31_0_OCC_INT_STATUS,
    new_LDB_CQ_63_32_OCC_INT_STATUS,
    new_MSIX_31_0_SYND,
    new_MSIX_63_32_SYND,
    new_MSIX_64_SYND,
    new_MSIX_ACK,
    new_PHDR_DEBUG_0,
    new_PHDR_DEBUG_1,
    new_PHDR_DEBUG_2,
    new_ROB_SYNDROME,
    new_SCH_OUT_FIFO_STATUS,
    new_SIF_ALARM_FIFO_STATUS,
    new_SYS_IDLE_STATUS,
    new_WBUF_DEBUG,
    new_WBUF_STATUS,
    new_WBUF_STATUS2,

    handcode_reg_rdata_AI_ADDR_L,
    handcode_reg_rdata_AI_ADDR_U,
    handcode_reg_rdata_AI_DATA,
    handcode_reg_rdata_ALARM_HW_SYND,
    handcode_reg_rdata_ALARM_PF_SYND0,
    handcode_reg_rdata_ALARM_PF_SYND1,
    handcode_reg_rdata_ALARM_PF_SYND2,
    handcode_reg_rdata_ALARM_VF_SYND0,
    handcode_reg_rdata_ALARM_VF_SYND1,
    handcode_reg_rdata_ALARM_VF_SYND2,
    handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER0,
    handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER1,
    handcode_reg_rdata_AW_SMON_COMPARE0,
    handcode_reg_rdata_AW_SMON_COMPARE1,
    handcode_reg_rdata_AW_SMON_COMP_MASK0,
    handcode_reg_rdata_AW_SMON_COMP_MASK1,
    handcode_reg_rdata_AW_SMON_CONFIGURATION0,
    handcode_reg_rdata_AW_SMON_CONFIGURATION1,
    handcode_reg_rdata_AW_SMON_MAXIMUM_TIMER,
    handcode_reg_rdata_AW_SMON_TIMER,
    handcode_reg_rdata_DIR_CQ2VF_PF_RO,
    handcode_reg_rdata_DIR_CQ_ADDR_L,
    handcode_reg_rdata_DIR_CQ_ADDR_U,
    handcode_reg_rdata_DIR_CQ_FMT,
    handcode_reg_rdata_DIR_CQ_ISR,
    handcode_reg_rdata_DIR_CQ_PASID,
    handcode_reg_rdata_DIR_PP2VAS,
    handcode_reg_rdata_DIR_PP_V,
    handcode_reg_rdata_DIR_QID_ITS,
    handcode_reg_rdata_DIR_QID_V,
    handcode_reg_rdata_DIR_VASQID_V,
    handcode_reg_rdata_LDB_CQ2VF_PF_RO,
    handcode_reg_rdata_LDB_CQ_ADDR_L,
    handcode_reg_rdata_LDB_CQ_ADDR_U,
    handcode_reg_rdata_LDB_CQ_ISR,
    handcode_reg_rdata_LDB_CQ_PASID,
    handcode_reg_rdata_LDB_PP2VAS,
    handcode_reg_rdata_LDB_PP_V,
    handcode_reg_rdata_LDB_QID2VQID,
    handcode_reg_rdata_LDB_QID_CFG_V,
    handcode_reg_rdata_LDB_QID_ITS,
    handcode_reg_rdata_LDB_QID_V,
    handcode_reg_rdata_LDB_VASQID_V,
    handcode_reg_rdata_PERF_SMON_ACTIVITYCOUNTER0,
    handcode_reg_rdata_PERF_SMON_ACTIVITYCOUNTER1,
    handcode_reg_rdata_PERF_SMON_COMPARE0,
    handcode_reg_rdata_PERF_SMON_COMPARE1,
    handcode_reg_rdata_PERF_SMON_COMP_MASK0,
    handcode_reg_rdata_PERF_SMON_COMP_MASK1,
    handcode_reg_rdata_PERF_SMON_CONFIGURATION0,
    handcode_reg_rdata_PERF_SMON_CONFIGURATION1,
    handcode_reg_rdata_PERF_SMON_MAXIMUM_TIMER,
    handcode_reg_rdata_PERF_SMON_TIMER,
    handcode_reg_rdata_SBE_CNT_0,
    handcode_reg_rdata_SBE_CNT_1,
    handcode_reg_rdata_VF_DIR_VPP2PP,
    handcode_reg_rdata_VF_DIR_VPP_V,
    handcode_reg_rdata_VF_DIR_VQID2QID,
    handcode_reg_rdata_VF_DIR_VQID_V,
    handcode_reg_rdata_VF_LDB_VPP2PP,
    handcode_reg_rdata_VF_LDB_VPP_V,
    handcode_reg_rdata_VF_LDB_VQID2QID,
    handcode_reg_rdata_VF_LDB_VQID_V,
    handcode_reg_rdata_WB_DIR_CQ_STATE,
    handcode_reg_rdata_WB_LDB_CQ_STATE,

    handcode_rvalid_AI_ADDR_L,
    handcode_rvalid_AI_ADDR_U,
    handcode_rvalid_AI_DATA,
    handcode_rvalid_ALARM_HW_SYND,
    handcode_rvalid_ALARM_PF_SYND0,
    handcode_rvalid_ALARM_PF_SYND1,
    handcode_rvalid_ALARM_PF_SYND2,
    handcode_rvalid_ALARM_VF_SYND0,
    handcode_rvalid_ALARM_VF_SYND1,
    handcode_rvalid_ALARM_VF_SYND2,
    handcode_rvalid_AW_SMON_ACTIVITYCOUNTER0,
    handcode_rvalid_AW_SMON_ACTIVITYCOUNTER1,
    handcode_rvalid_AW_SMON_COMPARE0,
    handcode_rvalid_AW_SMON_COMPARE1,
    handcode_rvalid_AW_SMON_COMP_MASK0,
    handcode_rvalid_AW_SMON_COMP_MASK1,
    handcode_rvalid_AW_SMON_CONFIGURATION0,
    handcode_rvalid_AW_SMON_CONFIGURATION1,
    handcode_rvalid_AW_SMON_MAXIMUM_TIMER,
    handcode_rvalid_AW_SMON_TIMER,
    handcode_rvalid_DIR_CQ2VF_PF_RO,
    handcode_rvalid_DIR_CQ_ADDR_L,
    handcode_rvalid_DIR_CQ_ADDR_U,
    handcode_rvalid_DIR_CQ_FMT,
    handcode_rvalid_DIR_CQ_ISR,
    handcode_rvalid_DIR_CQ_PASID,
    handcode_rvalid_DIR_PP2VAS,
    handcode_rvalid_DIR_PP_V,
    handcode_rvalid_DIR_QID_ITS,
    handcode_rvalid_DIR_QID_V,
    handcode_rvalid_DIR_VASQID_V,
    handcode_rvalid_LDB_CQ2VF_PF_RO,
    handcode_rvalid_LDB_CQ_ADDR_L,
    handcode_rvalid_LDB_CQ_ADDR_U,
    handcode_rvalid_LDB_CQ_ISR,
    handcode_rvalid_LDB_CQ_PASID,
    handcode_rvalid_LDB_PP2VAS,
    handcode_rvalid_LDB_PP_V,
    handcode_rvalid_LDB_QID2VQID,
    handcode_rvalid_LDB_QID_CFG_V,
    handcode_rvalid_LDB_QID_ITS,
    handcode_rvalid_LDB_QID_V,
    handcode_rvalid_LDB_VASQID_V,
    handcode_rvalid_PERF_SMON_ACTIVITYCOUNTER0,
    handcode_rvalid_PERF_SMON_ACTIVITYCOUNTER1,
    handcode_rvalid_PERF_SMON_COMPARE0,
    handcode_rvalid_PERF_SMON_COMPARE1,
    handcode_rvalid_PERF_SMON_COMP_MASK0,
    handcode_rvalid_PERF_SMON_COMP_MASK1,
    handcode_rvalid_PERF_SMON_CONFIGURATION0,
    handcode_rvalid_PERF_SMON_CONFIGURATION1,
    handcode_rvalid_PERF_SMON_MAXIMUM_TIMER,
    handcode_rvalid_PERF_SMON_TIMER,
    handcode_rvalid_SBE_CNT_0,
    handcode_rvalid_SBE_CNT_1,
    handcode_rvalid_VF_DIR_VPP2PP,
    handcode_rvalid_VF_DIR_VPP_V,
    handcode_rvalid_VF_DIR_VQID2QID,
    handcode_rvalid_VF_DIR_VQID_V,
    handcode_rvalid_VF_LDB_VPP2PP,
    handcode_rvalid_VF_LDB_VPP_V,
    handcode_rvalid_VF_LDB_VQID2QID,
    handcode_rvalid_VF_LDB_VQID_V,
    handcode_rvalid_WB_DIR_CQ_STATE,
    handcode_rvalid_WB_LDB_CQ_STATE,

    handcode_wvalid_AI_ADDR_L,
    handcode_wvalid_AI_ADDR_U,
    handcode_wvalid_AI_DATA,
    handcode_wvalid_ALARM_HW_SYND,
    handcode_wvalid_ALARM_PF_SYND0,
    handcode_wvalid_ALARM_PF_SYND1,
    handcode_wvalid_ALARM_PF_SYND2,
    handcode_wvalid_ALARM_VF_SYND0,
    handcode_wvalid_ALARM_VF_SYND1,
    handcode_wvalid_ALARM_VF_SYND2,
    handcode_wvalid_AW_SMON_ACTIVITYCOUNTER0,
    handcode_wvalid_AW_SMON_ACTIVITYCOUNTER1,
    handcode_wvalid_AW_SMON_COMPARE0,
    handcode_wvalid_AW_SMON_COMPARE1,
    handcode_wvalid_AW_SMON_COMP_MASK0,
    handcode_wvalid_AW_SMON_COMP_MASK1,
    handcode_wvalid_AW_SMON_CONFIGURATION0,
    handcode_wvalid_AW_SMON_CONFIGURATION1,
    handcode_wvalid_AW_SMON_MAXIMUM_TIMER,
    handcode_wvalid_AW_SMON_TIMER,
    handcode_wvalid_DIR_CQ2VF_PF_RO,
    handcode_wvalid_DIR_CQ_ADDR_L,
    handcode_wvalid_DIR_CQ_ADDR_U,
    handcode_wvalid_DIR_CQ_FMT,
    handcode_wvalid_DIR_CQ_ISR,
    handcode_wvalid_DIR_CQ_PASID,
    handcode_wvalid_DIR_PP2VAS,
    handcode_wvalid_DIR_PP_V,
    handcode_wvalid_DIR_QID_ITS,
    handcode_wvalid_DIR_QID_V,
    handcode_wvalid_DIR_VASQID_V,
    handcode_wvalid_LDB_CQ2VF_PF_RO,
    handcode_wvalid_LDB_CQ_ADDR_L,
    handcode_wvalid_LDB_CQ_ADDR_U,
    handcode_wvalid_LDB_CQ_ISR,
    handcode_wvalid_LDB_CQ_PASID,
    handcode_wvalid_LDB_PP2VAS,
    handcode_wvalid_LDB_PP_V,
    handcode_wvalid_LDB_QID2VQID,
    handcode_wvalid_LDB_QID_CFG_V,
    handcode_wvalid_LDB_QID_ITS,
    handcode_wvalid_LDB_QID_V,
    handcode_wvalid_LDB_VASQID_V,
    handcode_wvalid_PERF_SMON_ACTIVITYCOUNTER0,
    handcode_wvalid_PERF_SMON_ACTIVITYCOUNTER1,
    handcode_wvalid_PERF_SMON_COMPARE0,
    handcode_wvalid_PERF_SMON_COMPARE1,
    handcode_wvalid_PERF_SMON_COMP_MASK0,
    handcode_wvalid_PERF_SMON_COMP_MASK1,
    handcode_wvalid_PERF_SMON_CONFIGURATION0,
    handcode_wvalid_PERF_SMON_CONFIGURATION1,
    handcode_wvalid_PERF_SMON_MAXIMUM_TIMER,
    handcode_wvalid_PERF_SMON_TIMER,
    handcode_wvalid_SBE_CNT_0,
    handcode_wvalid_SBE_CNT_1,
    handcode_wvalid_VF_DIR_VPP2PP,
    handcode_wvalid_VF_DIR_VPP_V,
    handcode_wvalid_VF_DIR_VQID2QID,
    handcode_wvalid_VF_DIR_VQID_V,
    handcode_wvalid_VF_LDB_VPP2PP,
    handcode_wvalid_VF_LDB_VPP_V,
    handcode_wvalid_VF_LDB_VQID2QID,
    handcode_wvalid_VF_LDB_VQID_V,
    handcode_wvalid_WB_DIR_CQ_STATE,
    handcode_wvalid_WB_LDB_CQ_STATE,

    handcode_error_AI_ADDR_L,
    handcode_error_AI_ADDR_U,
    handcode_error_AI_DATA,
    handcode_error_ALARM_HW_SYND,
    handcode_error_ALARM_PF_SYND0,
    handcode_error_ALARM_PF_SYND1,
    handcode_error_ALARM_PF_SYND2,
    handcode_error_ALARM_VF_SYND0,
    handcode_error_ALARM_VF_SYND1,
    handcode_error_ALARM_VF_SYND2,
    handcode_error_AW_SMON_ACTIVITYCOUNTER0,
    handcode_error_AW_SMON_ACTIVITYCOUNTER1,
    handcode_error_AW_SMON_COMPARE0,
    handcode_error_AW_SMON_COMPARE1,
    handcode_error_AW_SMON_COMP_MASK0,
    handcode_error_AW_SMON_COMP_MASK1,
    handcode_error_AW_SMON_CONFIGURATION0,
    handcode_error_AW_SMON_CONFIGURATION1,
    handcode_error_AW_SMON_MAXIMUM_TIMER,
    handcode_error_AW_SMON_TIMER,
    handcode_error_DIR_CQ2VF_PF_RO,
    handcode_error_DIR_CQ_ADDR_L,
    handcode_error_DIR_CQ_ADDR_U,
    handcode_error_DIR_CQ_FMT,
    handcode_error_DIR_CQ_ISR,
    handcode_error_DIR_CQ_PASID,
    handcode_error_DIR_PP2VAS,
    handcode_error_DIR_PP_V,
    handcode_error_DIR_QID_ITS,
    handcode_error_DIR_QID_V,
    handcode_error_DIR_VASQID_V,
    handcode_error_LDB_CQ2VF_PF_RO,
    handcode_error_LDB_CQ_ADDR_L,
    handcode_error_LDB_CQ_ADDR_U,
    handcode_error_LDB_CQ_ISR,
    handcode_error_LDB_CQ_PASID,
    handcode_error_LDB_PP2VAS,
    handcode_error_LDB_PP_V,
    handcode_error_LDB_QID2VQID,
    handcode_error_LDB_QID_CFG_V,
    handcode_error_LDB_QID_ITS,
    handcode_error_LDB_QID_V,
    handcode_error_LDB_VASQID_V,
    handcode_error_PERF_SMON_ACTIVITYCOUNTER0,
    handcode_error_PERF_SMON_ACTIVITYCOUNTER1,
    handcode_error_PERF_SMON_COMPARE0,
    handcode_error_PERF_SMON_COMPARE1,
    handcode_error_PERF_SMON_COMP_MASK0,
    handcode_error_PERF_SMON_COMP_MASK1,
    handcode_error_PERF_SMON_CONFIGURATION0,
    handcode_error_PERF_SMON_CONFIGURATION1,
    handcode_error_PERF_SMON_MAXIMUM_TIMER,
    handcode_error_PERF_SMON_TIMER,
    handcode_error_SBE_CNT_0,
    handcode_error_SBE_CNT_1,
    handcode_error_VF_DIR_VPP2PP,
    handcode_error_VF_DIR_VPP_V,
    handcode_error_VF_DIR_VQID2QID,
    handcode_error_VF_DIR_VQID_V,
    handcode_error_VF_LDB_VPP2PP,
    handcode_error_VF_LDB_VPP_V,
    handcode_error_VF_LDB_VQID2QID,
    handcode_error_VF_LDB_VQID_V,
    handcode_error_WB_DIR_CQ_STATE,
    handcode_error_WB_LDB_CQ_STATE,


    // Register Outputs
    AI_CTRL,
    ALARM_CTL,
    ALARM_DB_STATUS,
    ALARM_ERR,
    ALARM_LUT_PERR,
    ALARM_MB_ECC_ERR,
    ALARM_SB_ECC_ERR,
    ALARM_STATUS,
    AL_CWD_ALARM_DB_AGITATE_CONTROL,
    AL_HQM_ALARM_DB_AGITATE_CONTROL,
    AL_IMS_MSIX_DB_AGITATE_CONTROL,
    AL_SIF_ALARM_AFULL_AGITATE_CONTROL,
    CFG_PATCH_CONTROL,
    CFG_RX_FIFO_STATUS,
    CFG_UNIT_VERSION,
    CWDI_RX_FIFO_STATUS,
    DIR_CQ_31_0_OCC_INT_STATUS,
    DIR_CQ_63_32_OCC_INT_STATUS,
    DIR_PP_ROB_V,
    ECC_CTL,
    EGRESS_CTL,
    EGRESS_DB_STATUS,
    EGRESS_LUT_ERR,
    EGRESS_STATUS,
    EG_HCW_SCHED_DB_AGITATE_CONTROL,
    HCW_ENQ_FIFO_CTL,
    HCW_ENQ_FIFO_STATUS,
    HCW_REQ_DEBUG,
    HCW_SCH_FIFO_STATUS,
    HQM_ALARM_RX_FIFO_STATUS,
    HQM_DIR_PP2VDEV,
    HQM_HCW_DATA_DEBUG,
    HQM_LDB_PP2VDEV,
    HQM_PDATA_DEBUG,
    HQM_SYSTEM_CNT_0,
    HQM_SYSTEM_CNT_1,
    HQM_SYSTEM_CNT_10,
    HQM_SYSTEM_CNT_11,
    HQM_SYSTEM_CNT_12,
    HQM_SYSTEM_CNT_13,
    HQM_SYSTEM_CNT_14,
    HQM_SYSTEM_CNT_15,
    HQM_SYSTEM_CNT_16,
    HQM_SYSTEM_CNT_17,
    HQM_SYSTEM_CNT_18,
    HQM_SYSTEM_CNT_19,
    HQM_SYSTEM_CNT_2,
    HQM_SYSTEM_CNT_20,
    HQM_SYSTEM_CNT_21,
    HQM_SYSTEM_CNT_3,
    HQM_SYSTEM_CNT_4,
    HQM_SYSTEM_CNT_5,
    HQM_SYSTEM_CNT_6,
    HQM_SYSTEM_CNT_7,
    HQM_SYSTEM_CNT_8,
    HQM_SYSTEM_CNT_9,
    HQM_SYSTEM_CNT_CTL,
    IG_HCW_ENQ_AFULL_AGITATE_CONTROL,
    IG_HCW_ENQ_W_DB_AGITATE_CONTROL,
    IMS_PEND_CLEAR,
    INGRESS_ALARM_ENABLE,
    INGRESS_CTL,
    INGRESS_DB_STATUS,
    INGRESS_LUT_ERR,
    INGRESS_STATUS,
    LDB_CQ_31_0_OCC_INT_STATUS,
    LDB_CQ_63_32_OCC_INT_STATUS,
    LDB_PP_ROB_V,
    MSIX_31_0_SYND,
    MSIX_63_32_SYND,
    MSIX_64_SYND,
    MSIX_ACK,
    MSIX_MODE,
    MSIX_PASSTHROUGH,
    MSIX_PBA_31_0_CLEAR,
    MSIX_PBA_63_32_CLEAR,
    MSIX_PBA_64_CLEAR,
    PARITY_CTL,
    PHDR_DEBUG_0,
    PHDR_DEBUG_1,
    PHDR_DEBUG_2,
    ROB_SYNDROME,
    SCH_OUT_FIFO_CTL,
    SCH_OUT_FIFO_STATUS,
    SIF_ALARM_FIFO_CTL,
    SIF_ALARM_FIFO_STATUS,
    SYS_ALARM_INT_ENABLE,
    SYS_ALARM_MB_ECC_INT_ENABLE,
    SYS_ALARM_SB_ECC_INT_ENABLE,
    SYS_IDLE_STATUS,
    TOTAL_CREDITS,
    TOTAL_DIR_PORTS,
    TOTAL_DIR_QID,
    TOTAL_LDB_PORTS,
    TOTAL_LDB_QID,
    TOTAL_SN_REGIONS,
    TOTAL_VAS,
    TOTAL_VF,
    WBUF_DEBUG,
    WBUF_STATUS,
    WBUF_STATUS2,
    WB_SCH_OUT_AFULL_AGITATE_CONTROL,
    WRITE_BUFFER_CTL,


    // Register signals for HandCoded registers
    handcode_reg_wdata_AI_ADDR_L,
    handcode_reg_wdata_AI_ADDR_U,
    handcode_reg_wdata_AI_DATA,
    handcode_reg_wdata_ALARM_HW_SYND,
    handcode_reg_wdata_ALARM_PF_SYND0,
    handcode_reg_wdata_ALARM_PF_SYND1,
    handcode_reg_wdata_ALARM_PF_SYND2,
    handcode_reg_wdata_ALARM_VF_SYND0,
    handcode_reg_wdata_ALARM_VF_SYND1,
    handcode_reg_wdata_ALARM_VF_SYND2,
    handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER0,
    handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER1,
    handcode_reg_wdata_AW_SMON_COMPARE0,
    handcode_reg_wdata_AW_SMON_COMPARE1,
    handcode_reg_wdata_AW_SMON_COMP_MASK0,
    handcode_reg_wdata_AW_SMON_COMP_MASK1,
    handcode_reg_wdata_AW_SMON_CONFIGURATION0,
    handcode_reg_wdata_AW_SMON_CONFIGURATION1,
    handcode_reg_wdata_AW_SMON_MAXIMUM_TIMER,
    handcode_reg_wdata_AW_SMON_TIMER,
    handcode_reg_wdata_DIR_CQ2VF_PF_RO,
    handcode_reg_wdata_DIR_CQ_ADDR_L,
    handcode_reg_wdata_DIR_CQ_ADDR_U,
    handcode_reg_wdata_DIR_CQ_FMT,
    handcode_reg_wdata_DIR_CQ_ISR,
    handcode_reg_wdata_DIR_CQ_PASID,
    handcode_reg_wdata_DIR_PP2VAS,
    handcode_reg_wdata_DIR_PP_V,
    handcode_reg_wdata_DIR_QID_ITS,
    handcode_reg_wdata_DIR_QID_V,
    handcode_reg_wdata_DIR_VASQID_V,
    handcode_reg_wdata_LDB_CQ2VF_PF_RO,
    handcode_reg_wdata_LDB_CQ_ADDR_L,
    handcode_reg_wdata_LDB_CQ_ADDR_U,
    handcode_reg_wdata_LDB_CQ_ISR,
    handcode_reg_wdata_LDB_CQ_PASID,
    handcode_reg_wdata_LDB_PP2VAS,
    handcode_reg_wdata_LDB_PP_V,
    handcode_reg_wdata_LDB_QID2VQID,
    handcode_reg_wdata_LDB_QID_CFG_V,
    handcode_reg_wdata_LDB_QID_ITS,
    handcode_reg_wdata_LDB_QID_V,
    handcode_reg_wdata_LDB_VASQID_V,
    handcode_reg_wdata_PERF_SMON_ACTIVITYCOUNTER0,
    handcode_reg_wdata_PERF_SMON_ACTIVITYCOUNTER1,
    handcode_reg_wdata_PERF_SMON_COMPARE0,
    handcode_reg_wdata_PERF_SMON_COMPARE1,
    handcode_reg_wdata_PERF_SMON_COMP_MASK0,
    handcode_reg_wdata_PERF_SMON_COMP_MASK1,
    handcode_reg_wdata_PERF_SMON_CONFIGURATION0,
    handcode_reg_wdata_PERF_SMON_CONFIGURATION1,
    handcode_reg_wdata_PERF_SMON_MAXIMUM_TIMER,
    handcode_reg_wdata_PERF_SMON_TIMER,
    handcode_reg_wdata_SBE_CNT_0,
    handcode_reg_wdata_SBE_CNT_1,
    handcode_reg_wdata_VF_DIR_VPP2PP,
    handcode_reg_wdata_VF_DIR_VPP_V,
    handcode_reg_wdata_VF_DIR_VQID2QID,
    handcode_reg_wdata_VF_DIR_VQID_V,
    handcode_reg_wdata_VF_LDB_VPP2PP,
    handcode_reg_wdata_VF_LDB_VPP_V,
    handcode_reg_wdata_VF_LDB_VQID2QID,
    handcode_reg_wdata_VF_LDB_VQID_V,
    handcode_reg_wdata_WB_DIR_CQ_STATE,
    handcode_reg_wdata_WB_LDB_CQ_STATE,

    we_AI_ADDR_L,
    we_AI_ADDR_U,
    we_AI_DATA,
    we_ALARM_HW_SYND,
    we_ALARM_PF_SYND0,
    we_ALARM_PF_SYND1,
    we_ALARM_PF_SYND2,
    we_ALARM_VF_SYND0,
    we_ALARM_VF_SYND1,
    we_ALARM_VF_SYND2,
    we_AW_SMON_ACTIVITYCOUNTER0,
    we_AW_SMON_ACTIVITYCOUNTER1,
    we_AW_SMON_COMPARE0,
    we_AW_SMON_COMPARE1,
    we_AW_SMON_COMP_MASK0,
    we_AW_SMON_COMP_MASK1,
    we_AW_SMON_CONFIGURATION0,
    we_AW_SMON_CONFIGURATION1,
    we_AW_SMON_MAXIMUM_TIMER,
    we_AW_SMON_TIMER,
    we_DIR_CQ2VF_PF_RO,
    we_DIR_CQ_ADDR_L,
    we_DIR_CQ_ADDR_U,
    we_DIR_CQ_FMT,
    we_DIR_CQ_ISR,
    we_DIR_CQ_PASID,
    we_DIR_PP2VAS,
    we_DIR_PP_V,
    we_DIR_QID_ITS,
    we_DIR_QID_V,
    we_DIR_VASQID_V,
    we_LDB_CQ2VF_PF_RO,
    we_LDB_CQ_ADDR_L,
    we_LDB_CQ_ADDR_U,
    we_LDB_CQ_ISR,
    we_LDB_CQ_PASID,
    we_LDB_PP2VAS,
    we_LDB_PP_V,
    we_LDB_QID2VQID,
    we_LDB_QID_CFG_V,
    we_LDB_QID_ITS,
    we_LDB_QID_V,
    we_LDB_VASQID_V,
    we_PERF_SMON_ACTIVITYCOUNTER0,
    we_PERF_SMON_ACTIVITYCOUNTER1,
    we_PERF_SMON_COMPARE0,
    we_PERF_SMON_COMPARE1,
    we_PERF_SMON_COMP_MASK0,
    we_PERF_SMON_COMP_MASK1,
    we_PERF_SMON_CONFIGURATION0,
    we_PERF_SMON_CONFIGURATION1,
    we_PERF_SMON_MAXIMUM_TIMER,
    we_PERF_SMON_TIMER,
    we_SBE_CNT_0,
    we_SBE_CNT_1,
    we_VF_DIR_VPP2PP,
    we_VF_DIR_VPP_V,
    we_VF_DIR_VQID2QID,
    we_VF_DIR_VQID_V,
    we_VF_LDB_VPP2PP,
    we_VF_LDB_VPP_V,
    we_VF_LDB_VQID2QID,
    we_VF_LDB_VQID_V,
    we_WB_DIR_CQ_STATE,
    we_WB_LDB_CQ_STATE,

    re_AI_ADDR_L,
    re_AI_ADDR_U,
    re_AI_DATA,
    re_ALARM_HW_SYND,
    re_ALARM_PF_SYND0,
    re_ALARM_PF_SYND1,
    re_ALARM_PF_SYND2,
    re_ALARM_VF_SYND0,
    re_ALARM_VF_SYND1,
    re_ALARM_VF_SYND2,
    re_AW_SMON_ACTIVITYCOUNTER0,
    re_AW_SMON_ACTIVITYCOUNTER1,
    re_AW_SMON_COMPARE0,
    re_AW_SMON_COMPARE1,
    re_AW_SMON_COMP_MASK0,
    re_AW_SMON_COMP_MASK1,
    re_AW_SMON_CONFIGURATION0,
    re_AW_SMON_CONFIGURATION1,
    re_AW_SMON_MAXIMUM_TIMER,
    re_AW_SMON_TIMER,
    re_DIR_CQ2VF_PF_RO,
    re_DIR_CQ_ADDR_L,
    re_DIR_CQ_ADDR_U,
    re_DIR_CQ_FMT,
    re_DIR_CQ_ISR,
    re_DIR_CQ_PASID,
    re_DIR_PP2VAS,
    re_DIR_PP_V,
    re_DIR_QID_ITS,
    re_DIR_QID_V,
    re_DIR_VASQID_V,
    re_LDB_CQ2VF_PF_RO,
    re_LDB_CQ_ADDR_L,
    re_LDB_CQ_ADDR_U,
    re_LDB_CQ_ISR,
    re_LDB_CQ_PASID,
    re_LDB_PP2VAS,
    re_LDB_PP_V,
    re_LDB_QID2VQID,
    re_LDB_QID_CFG_V,
    re_LDB_QID_ITS,
    re_LDB_QID_V,
    re_LDB_VASQID_V,
    re_PERF_SMON_ACTIVITYCOUNTER0,
    re_PERF_SMON_ACTIVITYCOUNTER1,
    re_PERF_SMON_COMPARE0,
    re_PERF_SMON_COMPARE1,
    re_PERF_SMON_COMP_MASK0,
    re_PERF_SMON_COMP_MASK1,
    re_PERF_SMON_CONFIGURATION0,
    re_PERF_SMON_CONFIGURATION1,
    re_PERF_SMON_MAXIMUM_TIMER,
    re_PERF_SMON_TIMER,
    re_SBE_CNT_0,
    re_SBE_CNT_1,
    re_VF_DIR_VPP2PP,
    re_VF_DIR_VPP_V,
    re_VF_DIR_VQID2QID,
    re_VF_DIR_VQID_V,
    re_VF_LDB_VPP2PP,
    re_VF_LDB_VPP_V,
    re_VF_LDB_VQID2QID,
    re_VF_LDB_VQID_V,
    re_WB_DIR_CQ_STATE,
    re_WB_LDB_CQ_STATE,




    sai_import,

    // Config Access
    req,
    ack
    

);

import hqm_system_csr_pkg::*;
import rtlgen_pkg_hqm_system_csr_map::*;

parameter  HQM_SYSTEM_CSR_MEM_ADDR_MSB = 47;
parameter [HQM_SYSTEM_CSR_MEM_ADDR_MSB:0] HQM_SYSTEM_CSR_MAP_OFFSET = {HQM_SYSTEM_CSR_MEM_ADDR_MSB+1{1'b0}};
parameter [31:0] TOTAL_CREDITS_PARAM = 32'd16384;
parameter [31:0] TOTAL_LDB_QID_PARAM = 32'd32;
parameter [31:0] TOTAL_DIR_QID_PARAM = 32'd64;
parameter [31:0] TOTAL_LDB_PORTS_PARAM = 32'd64;
parameter [31:0] TOTAL_DIR_PORTS_PARAM = 32'd64;
parameter [31:0] TOTAL_VAS_PARAM = 32'd32;
parameter [7:0] TOTAL_SN_MODE_PARAM = 8'd5;
parameter [7:0] TOTAL_SN_SLOT_PARAM = 8'd16;
parameter [7:0] TOTAL_SN_GROUP_PARAM = 8'd2;
parameter [31:0] TOTAL_VF_PARAM = 32'd16;
localparam  ADDR_LSB_BUS_ALIGN = 2;
`define HQM_LDB_PP2VDEV_CR_ADDR_def(INDEX) HQM_LDB_PP2VDEV_CR_ADDR``INDEX``[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]
`define LDB_PP_ROB_V_CR_ADDR_def(INDEX) LDB_PP_ROB_V_CR_ADDR``INDEX``[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]
`define HQM_DIR_PP2VDEV_CR_ADDR_def(INDEX) HQM_DIR_PP2VDEV_CR_ADDR``INDEX``[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]
`define DIR_PP_ROB_V_CR_ADDR_def(INDEX) DIR_PP_ROB_V_CR_ADDR``INDEX``[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]
`define AI_CTRL_CR_ADDR_def(INDEX) AI_CTRL_CR_ADDR``INDEX``[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]
`define HQM_PDATA_DEBUG_CR_ADDR_def(INDEX) HQM_PDATA_DEBUG_CR_ADDR``INDEX``[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]
`define HQM_HCW_DATA_DEBUG_CR_ADDR_def(INDEX) HQM_HCW_DATA_DEBUG_CR_ADDR``INDEX``[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TOTAL_CREDITS_DECODE_ADDR = TOTAL_CREDITS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TOTAL_LDB_QID_DECODE_ADDR = TOTAL_LDB_QID_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TOTAL_DIR_QID_DECODE_ADDR = TOTAL_DIR_QID_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TOTAL_LDB_PORTS_DECODE_ADDR = TOTAL_LDB_PORTS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TOTAL_DIR_PORTS_DECODE_ADDR = TOTAL_DIR_PORTS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TOTAL_VAS_DECODE_ADDR = TOTAL_VAS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TOTAL_SN_REGIONS_DECODE_ADDR = TOTAL_SN_REGIONS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] TOTAL_VF_DECODE_ADDR = TOTAL_VF_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CFG_UNIT_VERSION_DECODE_ADDR = CFG_UNIT_VERSION_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] INGRESS_ALARM_ENABLE_DECODE_ADDR = INGRESS_ALARM_ENABLE_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] ALARM_LUT_PERR_DECODE_ADDR = ALARM_LUT_PERR_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] EGRESS_LUT_ERR_DECODE_ADDR = EGRESS_LUT_ERR_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] INGRESS_LUT_ERR_DECODE_ADDR = INGRESS_LUT_ERR_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] ALARM_ERR_DECODE_ADDR = ALARM_ERR_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] ALARM_MB_ECC_ERR_DECODE_ADDR = ALARM_MB_ECC_ERR_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] ALARM_SB_ECC_ERR_DECODE_ADDR = ALARM_SB_ECC_ERR_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_CTL_DECODE_ADDR = HQM_SYSTEM_CNT_CTL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSIX_ACK_DECODE_ADDR = MSIX_ACK_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSIX_PASSTHROUGH_DECODE_ADDR = MSIX_PASSTHROUGH_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSIX_MODE_DECODE_ADDR = MSIX_MODE_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSIX_31_0_SYND_DECODE_ADDR = MSIX_31_0_SYND_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSIX_63_32_SYND_DECODE_ADDR = MSIX_63_32_SYND_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSIX_64_SYND_DECODE_ADDR = MSIX_64_SYND_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSIX_PBA_31_0_CLEAR_DECODE_ADDR = MSIX_PBA_31_0_CLEAR_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSIX_PBA_63_32_CLEAR_DECODE_ADDR = MSIX_PBA_63_32_CLEAR_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] MSIX_PBA_64_CLEAR_DECODE_ADDR = MSIX_PBA_64_CLEAR_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] DIR_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR = DIR_CQ_31_0_OCC_INT_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] DIR_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR = DIR_CQ_63_32_OCC_INT_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] LDB_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR = LDB_CQ_31_0_OCC_INT_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] LDB_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR = LDB_CQ_63_32_OCC_INT_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SYS_ALARM_INT_ENABLE_DECODE_ADDR = SYS_ALARM_INT_ENABLE_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SYS_ALARM_MB_ECC_INT_ENABLE_DECODE_ADDR = SYS_ALARM_MB_ECC_INT_ENABLE_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SYS_ALARM_SB_ECC_INT_ENABLE_DECODE_ADDR = SYS_ALARM_SB_ECC_INT_ENABLE_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [63:0][HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_LDB_PP2VDEV_DECODE_ADDR = {`HQM_LDB_PP2VDEV_CR_ADDR_def([63]),`HQM_LDB_PP2VDEV_CR_ADDR_def([62]),`HQM_LDB_PP2VDEV_CR_ADDR_def([61]),`HQM_LDB_PP2VDEV_CR_ADDR_def([60]),`HQM_LDB_PP2VDEV_CR_ADDR_def([59]),`HQM_LDB_PP2VDEV_CR_ADDR_def([58]),`HQM_LDB_PP2VDEV_CR_ADDR_def([57]),`HQM_LDB_PP2VDEV_CR_ADDR_def([56]),`HQM_LDB_PP2VDEV_CR_ADDR_def([55]),`HQM_LDB_PP2VDEV_CR_ADDR_def([54]),`HQM_LDB_PP2VDEV_CR_ADDR_def([53]),`HQM_LDB_PP2VDEV_CR_ADDR_def([52]),`HQM_LDB_PP2VDEV_CR_ADDR_def([51]),`HQM_LDB_PP2VDEV_CR_ADDR_def([50]),`HQM_LDB_PP2VDEV_CR_ADDR_def([49]),`HQM_LDB_PP2VDEV_CR_ADDR_def([48]),`HQM_LDB_PP2VDEV_CR_ADDR_def([47]),`HQM_LDB_PP2VDEV_CR_ADDR_def([46]),`HQM_LDB_PP2VDEV_CR_ADDR_def([45]),`HQM_LDB_PP2VDEV_CR_ADDR_def([44]),`HQM_LDB_PP2VDEV_CR_ADDR_def([43]),`HQM_LDB_PP2VDEV_CR_ADDR_def([42]),`HQM_LDB_PP2VDEV_CR_ADDR_def([41]),`HQM_LDB_PP2VDEV_CR_ADDR_def([40]),`HQM_LDB_PP2VDEV_CR_ADDR_def([39]),`HQM_LDB_PP2VDEV_CR_ADDR_def([38]),`HQM_LDB_PP2VDEV_CR_ADDR_def([37]),`HQM_LDB_PP2VDEV_CR_ADDR_def([36]),`HQM_LDB_PP2VDEV_CR_ADDR_def([35]),`HQM_LDB_PP2VDEV_CR_ADDR_def([34]),`HQM_LDB_PP2VDEV_CR_ADDR_def([33]),`HQM_LDB_PP2VDEV_CR_ADDR_def([32]),`HQM_LDB_PP2VDEV_CR_ADDR_def([31]),`HQM_LDB_PP2VDEV_CR_ADDR_def([30]),`HQM_LDB_PP2VDEV_CR_ADDR_def([29]),`HQM_LDB_PP2VDEV_CR_ADDR_def([28]),`HQM_LDB_PP2VDEV_CR_ADDR_def([27]),`HQM_LDB_PP2VDEV_CR_ADDR_def([26]),`HQM_LDB_PP2VDEV_CR_ADDR_def([25]),`HQM_LDB_PP2VDEV_CR_ADDR_def([24]),`HQM_LDB_PP2VDEV_CR_ADDR_def([23]),`HQM_LDB_PP2VDEV_CR_ADDR_def([22]),`HQM_LDB_PP2VDEV_CR_ADDR_def([21]),`HQM_LDB_PP2VDEV_CR_ADDR_def([20]),`HQM_LDB_PP2VDEV_CR_ADDR_def([19]),`HQM_LDB_PP2VDEV_CR_ADDR_def([18]),`HQM_LDB_PP2VDEV_CR_ADDR_def([17]),`HQM_LDB_PP2VDEV_CR_ADDR_def([16]),`HQM_LDB_PP2VDEV_CR_ADDR_def([15]),`HQM_LDB_PP2VDEV_CR_ADDR_def([14]),`HQM_LDB_PP2VDEV_CR_ADDR_def([13]),`HQM_LDB_PP2VDEV_CR_ADDR_def([12]),`HQM_LDB_PP2VDEV_CR_ADDR_def([11]),`HQM_LDB_PP2VDEV_CR_ADDR_def([10]),`HQM_LDB_PP2VDEV_CR_ADDR_def([9]),`HQM_LDB_PP2VDEV_CR_ADDR_def([8]),`HQM_LDB_PP2VDEV_CR_ADDR_def([7]),`HQM_LDB_PP2VDEV_CR_ADDR_def([6]),`HQM_LDB_PP2VDEV_CR_ADDR_def([5]),`HQM_LDB_PP2VDEV_CR_ADDR_def([4]),`HQM_LDB_PP2VDEV_CR_ADDR_def([3]),`HQM_LDB_PP2VDEV_CR_ADDR_def([2]),`HQM_LDB_PP2VDEV_CR_ADDR_def([1]),`HQM_LDB_PP2VDEV_CR_ADDR_def([0])};
localparam [63:0][HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] LDB_PP_ROB_V_DECODE_ADDR = {`LDB_PP_ROB_V_CR_ADDR_def([63]),`LDB_PP_ROB_V_CR_ADDR_def([62]),`LDB_PP_ROB_V_CR_ADDR_def([61]),`LDB_PP_ROB_V_CR_ADDR_def([60]),`LDB_PP_ROB_V_CR_ADDR_def([59]),`LDB_PP_ROB_V_CR_ADDR_def([58]),`LDB_PP_ROB_V_CR_ADDR_def([57]),`LDB_PP_ROB_V_CR_ADDR_def([56]),`LDB_PP_ROB_V_CR_ADDR_def([55]),`LDB_PP_ROB_V_CR_ADDR_def([54]),`LDB_PP_ROB_V_CR_ADDR_def([53]),`LDB_PP_ROB_V_CR_ADDR_def([52]),`LDB_PP_ROB_V_CR_ADDR_def([51]),`LDB_PP_ROB_V_CR_ADDR_def([50]),`LDB_PP_ROB_V_CR_ADDR_def([49]),`LDB_PP_ROB_V_CR_ADDR_def([48]),`LDB_PP_ROB_V_CR_ADDR_def([47]),`LDB_PP_ROB_V_CR_ADDR_def([46]),`LDB_PP_ROB_V_CR_ADDR_def([45]),`LDB_PP_ROB_V_CR_ADDR_def([44]),`LDB_PP_ROB_V_CR_ADDR_def([43]),`LDB_PP_ROB_V_CR_ADDR_def([42]),`LDB_PP_ROB_V_CR_ADDR_def([41]),`LDB_PP_ROB_V_CR_ADDR_def([40]),`LDB_PP_ROB_V_CR_ADDR_def([39]),`LDB_PP_ROB_V_CR_ADDR_def([38]),`LDB_PP_ROB_V_CR_ADDR_def([37]),`LDB_PP_ROB_V_CR_ADDR_def([36]),`LDB_PP_ROB_V_CR_ADDR_def([35]),`LDB_PP_ROB_V_CR_ADDR_def([34]),`LDB_PP_ROB_V_CR_ADDR_def([33]),`LDB_PP_ROB_V_CR_ADDR_def([32]),`LDB_PP_ROB_V_CR_ADDR_def([31]),`LDB_PP_ROB_V_CR_ADDR_def([30]),`LDB_PP_ROB_V_CR_ADDR_def([29]),`LDB_PP_ROB_V_CR_ADDR_def([28]),`LDB_PP_ROB_V_CR_ADDR_def([27]),`LDB_PP_ROB_V_CR_ADDR_def([26]),`LDB_PP_ROB_V_CR_ADDR_def([25]),`LDB_PP_ROB_V_CR_ADDR_def([24]),`LDB_PP_ROB_V_CR_ADDR_def([23]),`LDB_PP_ROB_V_CR_ADDR_def([22]),`LDB_PP_ROB_V_CR_ADDR_def([21]),`LDB_PP_ROB_V_CR_ADDR_def([20]),`LDB_PP_ROB_V_CR_ADDR_def([19]),`LDB_PP_ROB_V_CR_ADDR_def([18]),`LDB_PP_ROB_V_CR_ADDR_def([17]),`LDB_PP_ROB_V_CR_ADDR_def([16]),`LDB_PP_ROB_V_CR_ADDR_def([15]),`LDB_PP_ROB_V_CR_ADDR_def([14]),`LDB_PP_ROB_V_CR_ADDR_def([13]),`LDB_PP_ROB_V_CR_ADDR_def([12]),`LDB_PP_ROB_V_CR_ADDR_def([11]),`LDB_PP_ROB_V_CR_ADDR_def([10]),`LDB_PP_ROB_V_CR_ADDR_def([9]),`LDB_PP_ROB_V_CR_ADDR_def([8]),`LDB_PP_ROB_V_CR_ADDR_def([7]),`LDB_PP_ROB_V_CR_ADDR_def([6]),`LDB_PP_ROB_V_CR_ADDR_def([5]),`LDB_PP_ROB_V_CR_ADDR_def([4]),`LDB_PP_ROB_V_CR_ADDR_def([3]),`LDB_PP_ROB_V_CR_ADDR_def([2]),`LDB_PP_ROB_V_CR_ADDR_def([1]),`LDB_PP_ROB_V_CR_ADDR_def([0])};
localparam [63:0][HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_DIR_PP2VDEV_DECODE_ADDR = {`HQM_DIR_PP2VDEV_CR_ADDR_def([63]),`HQM_DIR_PP2VDEV_CR_ADDR_def([62]),`HQM_DIR_PP2VDEV_CR_ADDR_def([61]),`HQM_DIR_PP2VDEV_CR_ADDR_def([60]),`HQM_DIR_PP2VDEV_CR_ADDR_def([59]),`HQM_DIR_PP2VDEV_CR_ADDR_def([58]),`HQM_DIR_PP2VDEV_CR_ADDR_def([57]),`HQM_DIR_PP2VDEV_CR_ADDR_def([56]),`HQM_DIR_PP2VDEV_CR_ADDR_def([55]),`HQM_DIR_PP2VDEV_CR_ADDR_def([54]),`HQM_DIR_PP2VDEV_CR_ADDR_def([53]),`HQM_DIR_PP2VDEV_CR_ADDR_def([52]),`HQM_DIR_PP2VDEV_CR_ADDR_def([51]),`HQM_DIR_PP2VDEV_CR_ADDR_def([50]),`HQM_DIR_PP2VDEV_CR_ADDR_def([49]),`HQM_DIR_PP2VDEV_CR_ADDR_def([48]),`HQM_DIR_PP2VDEV_CR_ADDR_def([47]),`HQM_DIR_PP2VDEV_CR_ADDR_def([46]),`HQM_DIR_PP2VDEV_CR_ADDR_def([45]),`HQM_DIR_PP2VDEV_CR_ADDR_def([44]),`HQM_DIR_PP2VDEV_CR_ADDR_def([43]),`HQM_DIR_PP2VDEV_CR_ADDR_def([42]),`HQM_DIR_PP2VDEV_CR_ADDR_def([41]),`HQM_DIR_PP2VDEV_CR_ADDR_def([40]),`HQM_DIR_PP2VDEV_CR_ADDR_def([39]),`HQM_DIR_PP2VDEV_CR_ADDR_def([38]),`HQM_DIR_PP2VDEV_CR_ADDR_def([37]),`HQM_DIR_PP2VDEV_CR_ADDR_def([36]),`HQM_DIR_PP2VDEV_CR_ADDR_def([35]),`HQM_DIR_PP2VDEV_CR_ADDR_def([34]),`HQM_DIR_PP2VDEV_CR_ADDR_def([33]),`HQM_DIR_PP2VDEV_CR_ADDR_def([32]),`HQM_DIR_PP2VDEV_CR_ADDR_def([31]),`HQM_DIR_PP2VDEV_CR_ADDR_def([30]),`HQM_DIR_PP2VDEV_CR_ADDR_def([29]),`HQM_DIR_PP2VDEV_CR_ADDR_def([28]),`HQM_DIR_PP2VDEV_CR_ADDR_def([27]),`HQM_DIR_PP2VDEV_CR_ADDR_def([26]),`HQM_DIR_PP2VDEV_CR_ADDR_def([25]),`HQM_DIR_PP2VDEV_CR_ADDR_def([24]),`HQM_DIR_PP2VDEV_CR_ADDR_def([23]),`HQM_DIR_PP2VDEV_CR_ADDR_def([22]),`HQM_DIR_PP2VDEV_CR_ADDR_def([21]),`HQM_DIR_PP2VDEV_CR_ADDR_def([20]),`HQM_DIR_PP2VDEV_CR_ADDR_def([19]),`HQM_DIR_PP2VDEV_CR_ADDR_def([18]),`HQM_DIR_PP2VDEV_CR_ADDR_def([17]),`HQM_DIR_PP2VDEV_CR_ADDR_def([16]),`HQM_DIR_PP2VDEV_CR_ADDR_def([15]),`HQM_DIR_PP2VDEV_CR_ADDR_def([14]),`HQM_DIR_PP2VDEV_CR_ADDR_def([13]),`HQM_DIR_PP2VDEV_CR_ADDR_def([12]),`HQM_DIR_PP2VDEV_CR_ADDR_def([11]),`HQM_DIR_PP2VDEV_CR_ADDR_def([10]),`HQM_DIR_PP2VDEV_CR_ADDR_def([9]),`HQM_DIR_PP2VDEV_CR_ADDR_def([8]),`HQM_DIR_PP2VDEV_CR_ADDR_def([7]),`HQM_DIR_PP2VDEV_CR_ADDR_def([6]),`HQM_DIR_PP2VDEV_CR_ADDR_def([5]),`HQM_DIR_PP2VDEV_CR_ADDR_def([4]),`HQM_DIR_PP2VDEV_CR_ADDR_def([3]),`HQM_DIR_PP2VDEV_CR_ADDR_def([2]),`HQM_DIR_PP2VDEV_CR_ADDR_def([1]),`HQM_DIR_PP2VDEV_CR_ADDR_def([0])};
localparam [63:0][HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] DIR_PP_ROB_V_DECODE_ADDR = {`DIR_PP_ROB_V_CR_ADDR_def([63]),`DIR_PP_ROB_V_CR_ADDR_def([62]),`DIR_PP_ROB_V_CR_ADDR_def([61]),`DIR_PP_ROB_V_CR_ADDR_def([60]),`DIR_PP_ROB_V_CR_ADDR_def([59]),`DIR_PP_ROB_V_CR_ADDR_def([58]),`DIR_PP_ROB_V_CR_ADDR_def([57]),`DIR_PP_ROB_V_CR_ADDR_def([56]),`DIR_PP_ROB_V_CR_ADDR_def([55]),`DIR_PP_ROB_V_CR_ADDR_def([54]),`DIR_PP_ROB_V_CR_ADDR_def([53]),`DIR_PP_ROB_V_CR_ADDR_def([52]),`DIR_PP_ROB_V_CR_ADDR_def([51]),`DIR_PP_ROB_V_CR_ADDR_def([50]),`DIR_PP_ROB_V_CR_ADDR_def([49]),`DIR_PP_ROB_V_CR_ADDR_def([48]),`DIR_PP_ROB_V_CR_ADDR_def([47]),`DIR_PP_ROB_V_CR_ADDR_def([46]),`DIR_PP_ROB_V_CR_ADDR_def([45]),`DIR_PP_ROB_V_CR_ADDR_def([44]),`DIR_PP_ROB_V_CR_ADDR_def([43]),`DIR_PP_ROB_V_CR_ADDR_def([42]),`DIR_PP_ROB_V_CR_ADDR_def([41]),`DIR_PP_ROB_V_CR_ADDR_def([40]),`DIR_PP_ROB_V_CR_ADDR_def([39]),`DIR_PP_ROB_V_CR_ADDR_def([38]),`DIR_PP_ROB_V_CR_ADDR_def([37]),`DIR_PP_ROB_V_CR_ADDR_def([36]),`DIR_PP_ROB_V_CR_ADDR_def([35]),`DIR_PP_ROB_V_CR_ADDR_def([34]),`DIR_PP_ROB_V_CR_ADDR_def([33]),`DIR_PP_ROB_V_CR_ADDR_def([32]),`DIR_PP_ROB_V_CR_ADDR_def([31]),`DIR_PP_ROB_V_CR_ADDR_def([30]),`DIR_PP_ROB_V_CR_ADDR_def([29]),`DIR_PP_ROB_V_CR_ADDR_def([28]),`DIR_PP_ROB_V_CR_ADDR_def([27]),`DIR_PP_ROB_V_CR_ADDR_def([26]),`DIR_PP_ROB_V_CR_ADDR_def([25]),`DIR_PP_ROB_V_CR_ADDR_def([24]),`DIR_PP_ROB_V_CR_ADDR_def([23]),`DIR_PP_ROB_V_CR_ADDR_def([22]),`DIR_PP_ROB_V_CR_ADDR_def([21]),`DIR_PP_ROB_V_CR_ADDR_def([20]),`DIR_PP_ROB_V_CR_ADDR_def([19]),`DIR_PP_ROB_V_CR_ADDR_def([18]),`DIR_PP_ROB_V_CR_ADDR_def([17]),`DIR_PP_ROB_V_CR_ADDR_def([16]),`DIR_PP_ROB_V_CR_ADDR_def([15]),`DIR_PP_ROB_V_CR_ADDR_def([14]),`DIR_PP_ROB_V_CR_ADDR_def([13]),`DIR_PP_ROB_V_CR_ADDR_def([12]),`DIR_PP_ROB_V_CR_ADDR_def([11]),`DIR_PP_ROB_V_CR_ADDR_def([10]),`DIR_PP_ROB_V_CR_ADDR_def([9]),`DIR_PP_ROB_V_CR_ADDR_def([8]),`DIR_PP_ROB_V_CR_ADDR_def([7]),`DIR_PP_ROB_V_CR_ADDR_def([6]),`DIR_PP_ROB_V_CR_ADDR_def([5]),`DIR_PP_ROB_V_CR_ADDR_def([4]),`DIR_PP_ROB_V_CR_ADDR_def([3]),`DIR_PP_ROB_V_CR_ADDR_def([2]),`DIR_PP_ROB_V_CR_ADDR_def([1]),`DIR_PP_ROB_V_CR_ADDR_def([0])};
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_0_DECODE_ADDR = HQM_SYSTEM_CNT_0_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_1_DECODE_ADDR = HQM_SYSTEM_CNT_1_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_2_DECODE_ADDR = HQM_SYSTEM_CNT_2_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_3_DECODE_ADDR = HQM_SYSTEM_CNT_3_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_4_DECODE_ADDR = HQM_SYSTEM_CNT_4_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_5_DECODE_ADDR = HQM_SYSTEM_CNT_5_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_6_DECODE_ADDR = HQM_SYSTEM_CNT_6_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_7_DECODE_ADDR = HQM_SYSTEM_CNT_7_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_8_DECODE_ADDR = HQM_SYSTEM_CNT_8_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_9_DECODE_ADDR = HQM_SYSTEM_CNT_9_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_10_DECODE_ADDR = HQM_SYSTEM_CNT_10_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_11_DECODE_ADDR = HQM_SYSTEM_CNT_11_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_12_DECODE_ADDR = HQM_SYSTEM_CNT_12_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_13_DECODE_ADDR = HQM_SYSTEM_CNT_13_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_14_DECODE_ADDR = HQM_SYSTEM_CNT_14_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_15_DECODE_ADDR = HQM_SYSTEM_CNT_15_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_16_DECODE_ADDR = HQM_SYSTEM_CNT_16_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_17_DECODE_ADDR = HQM_SYSTEM_CNT_17_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_18_DECODE_ADDR = HQM_SYSTEM_CNT_18_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_19_DECODE_ADDR = HQM_SYSTEM_CNT_19_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_20_DECODE_ADDR = HQM_SYSTEM_CNT_20_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_SYSTEM_CNT_21_DECODE_ADDR = HQM_SYSTEM_CNT_21_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [127:0][HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] AI_CTRL_DECODE_ADDR = {`AI_CTRL_CR_ADDR_def([127]),`AI_CTRL_CR_ADDR_def([126]),`AI_CTRL_CR_ADDR_def([125]),`AI_CTRL_CR_ADDR_def([124]),`AI_CTRL_CR_ADDR_def([123]),`AI_CTRL_CR_ADDR_def([122]),`AI_CTRL_CR_ADDR_def([121]),`AI_CTRL_CR_ADDR_def([120]),`AI_CTRL_CR_ADDR_def([119]),`AI_CTRL_CR_ADDR_def([118]),`AI_CTRL_CR_ADDR_def([117]),`AI_CTRL_CR_ADDR_def([116]),`AI_CTRL_CR_ADDR_def([115]),`AI_CTRL_CR_ADDR_def([114]),`AI_CTRL_CR_ADDR_def([113]),`AI_CTRL_CR_ADDR_def([112]),`AI_CTRL_CR_ADDR_def([111]),`AI_CTRL_CR_ADDR_def([110]),`AI_CTRL_CR_ADDR_def([109]),`AI_CTRL_CR_ADDR_def([108]),`AI_CTRL_CR_ADDR_def([107]),`AI_CTRL_CR_ADDR_def([106]),`AI_CTRL_CR_ADDR_def([105]),`AI_CTRL_CR_ADDR_def([104]),`AI_CTRL_CR_ADDR_def([103]),`AI_CTRL_CR_ADDR_def([102]),`AI_CTRL_CR_ADDR_def([101]),`AI_CTRL_CR_ADDR_def([100]),`AI_CTRL_CR_ADDR_def([99]),`AI_CTRL_CR_ADDR_def([98]),`AI_CTRL_CR_ADDR_def([97]),`AI_CTRL_CR_ADDR_def([96]),`AI_CTRL_CR_ADDR_def([95]),`AI_CTRL_CR_ADDR_def([94]),`AI_CTRL_CR_ADDR_def([93]),`AI_CTRL_CR_ADDR_def([92]),`AI_CTRL_CR_ADDR_def([91]),`AI_CTRL_CR_ADDR_def([90]),`AI_CTRL_CR_ADDR_def([89]),`AI_CTRL_CR_ADDR_def([88]),`AI_CTRL_CR_ADDR_def([87]),`AI_CTRL_CR_ADDR_def([86]),`AI_CTRL_CR_ADDR_def([85]),`AI_CTRL_CR_ADDR_def([84]),`AI_CTRL_CR_ADDR_def([83]),`AI_CTRL_CR_ADDR_def([82]),`AI_CTRL_CR_ADDR_def([81]),`AI_CTRL_CR_ADDR_def([80]),`AI_CTRL_CR_ADDR_def([79]),`AI_CTRL_CR_ADDR_def([78]),`AI_CTRL_CR_ADDR_def([77]),`AI_CTRL_CR_ADDR_def([76]),`AI_CTRL_CR_ADDR_def([75]),`AI_CTRL_CR_ADDR_def([74]),`AI_CTRL_CR_ADDR_def([73]),`AI_CTRL_CR_ADDR_def([72]),`AI_CTRL_CR_ADDR_def([71]),`AI_CTRL_CR_ADDR_def([70]),`AI_CTRL_CR_ADDR_def([69]),`AI_CTRL_CR_ADDR_def([68]),`AI_CTRL_CR_ADDR_def([67]),`AI_CTRL_CR_ADDR_def([66]),`AI_CTRL_CR_ADDR_def([65]),`AI_CTRL_CR_ADDR_def([64]),`AI_CTRL_CR_ADDR_def([63]),`AI_CTRL_CR_ADDR_def([62]),`AI_CTRL_CR_ADDR_def([61]),`AI_CTRL_CR_ADDR_def([60]),`AI_CTRL_CR_ADDR_def([59]),`AI_CTRL_CR_ADDR_def([58]),`AI_CTRL_CR_ADDR_def([57]),`AI_CTRL_CR_ADDR_def([56]),`AI_CTRL_CR_ADDR_def([55]),`AI_CTRL_CR_ADDR_def([54]),`AI_CTRL_CR_ADDR_def([53]),`AI_CTRL_CR_ADDR_def([52]),`AI_CTRL_CR_ADDR_def([51]),`AI_CTRL_CR_ADDR_def([50]),`AI_CTRL_CR_ADDR_def([49]),`AI_CTRL_CR_ADDR_def([48]),`AI_CTRL_CR_ADDR_def([47]),`AI_CTRL_CR_ADDR_def([46]),`AI_CTRL_CR_ADDR_def([45]),`AI_CTRL_CR_ADDR_def([44]),`AI_CTRL_CR_ADDR_def([43]),`AI_CTRL_CR_ADDR_def([42]),`AI_CTRL_CR_ADDR_def([41]),`AI_CTRL_CR_ADDR_def([40]),`AI_CTRL_CR_ADDR_def([39]),`AI_CTRL_CR_ADDR_def([38]),`AI_CTRL_CR_ADDR_def([37]),`AI_CTRL_CR_ADDR_def([36]),`AI_CTRL_CR_ADDR_def([35]),`AI_CTRL_CR_ADDR_def([34]),`AI_CTRL_CR_ADDR_def([33]),`AI_CTRL_CR_ADDR_def([32]),`AI_CTRL_CR_ADDR_def([31]),`AI_CTRL_CR_ADDR_def([30]),`AI_CTRL_CR_ADDR_def([29]),`AI_CTRL_CR_ADDR_def([28]),`AI_CTRL_CR_ADDR_def([27]),`AI_CTRL_CR_ADDR_def([26]),`AI_CTRL_CR_ADDR_def([25]),`AI_CTRL_CR_ADDR_def([24]),`AI_CTRL_CR_ADDR_def([23]),`AI_CTRL_CR_ADDR_def([22]),`AI_CTRL_CR_ADDR_def([21]),`AI_CTRL_CR_ADDR_def([20]),`AI_CTRL_CR_ADDR_def([19]),`AI_CTRL_CR_ADDR_def([18]),`AI_CTRL_CR_ADDR_def([17]),`AI_CTRL_CR_ADDR_def([16]),`AI_CTRL_CR_ADDR_def([15]),`AI_CTRL_CR_ADDR_def([14]),`AI_CTRL_CR_ADDR_def([13]),`AI_CTRL_CR_ADDR_def([12]),`AI_CTRL_CR_ADDR_def([11]),`AI_CTRL_CR_ADDR_def([10]),`AI_CTRL_CR_ADDR_def([9]),`AI_CTRL_CR_ADDR_def([8]),`AI_CTRL_CR_ADDR_def([7]),`AI_CTRL_CR_ADDR_def([6]),`AI_CTRL_CR_ADDR_def([5]),`AI_CTRL_CR_ADDR_def([4]),`AI_CTRL_CR_ADDR_def([3]),`AI_CTRL_CR_ADDR_def([2]),`AI_CTRL_CR_ADDR_def([1]),`AI_CTRL_CR_ADDR_def([0])};
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IMS_PEND_CLEAR_DECODE_ADDR = IMS_PEND_CLEAR_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] WB_SCH_OUT_AFULL_AGITATE_CONTROL_DECODE_ADDR = WB_SCH_OUT_AFULL_AGITATE_CONTROL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IG_HCW_ENQ_AFULL_AGITATE_CONTROL_DECODE_ADDR = IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] IG_HCW_ENQ_W_DB_AGITATE_CONTROL_DECODE_ADDR = IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] EG_HCW_SCHED_DB_AGITATE_CONTROL_DECODE_ADDR = EG_HCW_SCHED_DB_AGITATE_CONTROL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] AL_IMS_MSIX_DB_AGITATE_CONTROL_DECODE_ADDR = AL_IMS_MSIX_DB_AGITATE_CONTROL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] AL_CWD_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR = AL_CWD_ALARM_DB_AGITATE_CONTROL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] AL_SIF_ALARM_AFULL_AGITATE_CONTROL_DECODE_ADDR = AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] AL_HQM_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR = AL_HQM_ALARM_DB_AGITATE_CONTROL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] ECC_CTL_DECODE_ADDR = ECC_CTL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] PARITY_CTL_DECODE_ADDR = PARITY_CTL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] WRITE_BUFFER_CTL_DECODE_ADDR = WRITE_BUFFER_CTL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] ALARM_CTL_DECODE_ADDR = ALARM_CTL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CFG_PATCH_CONTROL_DECODE_ADDR = CFG_PATCH_CONTROL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] INGRESS_CTL_DECODE_ADDR = INGRESS_CTL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] EGRESS_CTL_DECODE_ADDR = EGRESS_CTL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SYS_IDLE_STATUS_DECODE_ADDR = SYS_IDLE_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HCW_ENQ_FIFO_CTL_DECODE_ADDR = HCW_ENQ_FIFO_CTL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SCH_OUT_FIFO_CTL_DECODE_ADDR = SCH_OUT_FIFO_CTL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SIF_ALARM_FIFO_CTL_DECODE_ADDR = SIF_ALARM_FIFO_CTL_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HCW_ENQ_FIFO_STATUS_DECODE_ADDR = HCW_ENQ_FIFO_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HCW_SCH_FIFO_STATUS_DECODE_ADDR = HCW_SCH_FIFO_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SCH_OUT_FIFO_STATUS_DECODE_ADDR = SCH_OUT_FIFO_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CFG_RX_FIFO_STATUS_DECODE_ADDR = CFG_RX_FIFO_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] CWDI_RX_FIFO_STATUS_DECODE_ADDR = CWDI_RX_FIFO_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_ALARM_RX_FIFO_STATUS_DECODE_ADDR = HQM_ALARM_RX_FIFO_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] SIF_ALARM_FIFO_STATUS_DECODE_ADDR = SIF_ALARM_FIFO_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] ALARM_DB_STATUS_DECODE_ADDR = ALARM_DB_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] INGRESS_DB_STATUS_DECODE_ADDR = INGRESS_DB_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] EGRESS_DB_STATUS_DECODE_ADDR = EGRESS_DB_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] ALARM_STATUS_DECODE_ADDR = ALARM_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] INGRESS_STATUS_DECODE_ADDR = INGRESS_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] EGRESS_STATUS_DECODE_ADDR = EGRESS_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] WBUF_STATUS_DECODE_ADDR = WBUF_STATUS_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] WBUF_STATUS2_DECODE_ADDR = WBUF_STATUS2_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] WBUF_DEBUG_DECODE_ADDR = WBUF_DEBUG_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] ROB_SYNDROME_DECODE_ADDR = ROB_SYNDROME_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] PHDR_DEBUG_0_DECODE_ADDR = PHDR_DEBUG_0_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] PHDR_DEBUG_1_DECODE_ADDR = PHDR_DEBUG_1_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] PHDR_DEBUG_2_DECODE_ADDR = PHDR_DEBUG_2_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [15:0][HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_PDATA_DEBUG_DECODE_ADDR = {`HQM_PDATA_DEBUG_CR_ADDR_def([15]),`HQM_PDATA_DEBUG_CR_ADDR_def([14]),`HQM_PDATA_DEBUG_CR_ADDR_def([13]),`HQM_PDATA_DEBUG_CR_ADDR_def([12]),`HQM_PDATA_DEBUG_CR_ADDR_def([11]),`HQM_PDATA_DEBUG_CR_ADDR_def([10]),`HQM_PDATA_DEBUG_CR_ADDR_def([9]),`HQM_PDATA_DEBUG_CR_ADDR_def([8]),`HQM_PDATA_DEBUG_CR_ADDR_def([7]),`HQM_PDATA_DEBUG_CR_ADDR_def([6]),`HQM_PDATA_DEBUG_CR_ADDR_def([5]),`HQM_PDATA_DEBUG_CR_ADDR_def([4]),`HQM_PDATA_DEBUG_CR_ADDR_def([3]),`HQM_PDATA_DEBUG_CR_ADDR_def([2]),`HQM_PDATA_DEBUG_CR_ADDR_def([1]),`HQM_PDATA_DEBUG_CR_ADDR_def([0])};
localparam [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HCW_REQ_DEBUG_DECODE_ADDR = HCW_REQ_DEBUG_CR_ADDR[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] + HQM_SYSTEM_CSR_MAP_OFFSET[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
localparam [3:0][HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] HQM_HCW_DATA_DEBUG_DECODE_ADDR = {`HQM_HCW_DATA_DEBUG_CR_ADDR_def([3]),`HQM_HCW_DATA_DEBUG_CR_ADDR_def([2]),`HQM_HCW_DATA_DEBUG_CR_ADDR_def([1]),`HQM_HCW_DATA_DEBUG_CR_ADDR_def([0])};

    // Clocks
input logic  gated_clk;
input logic  rtl_clk;

    // Resets
input logic  hqm_inp_gated_rst_n;


    // Register Inputs
input load_ALARM_ERR_t  load_ALARM_ERR;
input load_ALARM_LUT_PERR_t  load_ALARM_LUT_PERR;
input load_ALARM_MB_ECC_ERR_t  load_ALARM_MB_ECC_ERR;
input load_ALARM_SB_ECC_ERR_t  load_ALARM_SB_ECC_ERR;
input load_CFG_RX_FIFO_STATUS_t  load_CFG_RX_FIFO_STATUS;
input load_CWDI_RX_FIFO_STATUS_t  load_CWDI_RX_FIFO_STATUS;
input load_DIR_CQ_31_0_OCC_INT_STATUS_t  load_DIR_CQ_31_0_OCC_INT_STATUS;
input load_DIR_CQ_63_32_OCC_INT_STATUS_t  load_DIR_CQ_63_32_OCC_INT_STATUS;
input load_EGRESS_LUT_ERR_t  load_EGRESS_LUT_ERR;
input load_HCW_ENQ_FIFO_STATUS_t  load_HCW_ENQ_FIFO_STATUS;
input load_HCW_SCH_FIFO_STATUS_t  load_HCW_SCH_FIFO_STATUS;
input load_HQM_ALARM_RX_FIFO_STATUS_t  load_HQM_ALARM_RX_FIFO_STATUS;
input load_INGRESS_LUT_ERR_t  load_INGRESS_LUT_ERR;
input load_LDB_CQ_31_0_OCC_INT_STATUS_t  load_LDB_CQ_31_0_OCC_INT_STATUS;
input load_LDB_CQ_63_32_OCC_INT_STATUS_t  load_LDB_CQ_63_32_OCC_INT_STATUS;
input load_MSIX_31_0_SYND_t  load_MSIX_31_0_SYND;
input load_MSIX_63_32_SYND_t  load_MSIX_63_32_SYND;
input load_MSIX_64_SYND_t  load_MSIX_64_SYND;
input load_MSIX_ACK_t  load_MSIX_ACK;
input load_ROB_SYNDROME_t  load_ROB_SYNDROME;
input load_SCH_OUT_FIFO_STATUS_t  load_SCH_OUT_FIFO_STATUS;
input load_SIF_ALARM_FIFO_STATUS_t  load_SIF_ALARM_FIFO_STATUS;

input new_AI_CTRL_t [127:0] new_AI_CTRL;
input new_ALARM_DB_STATUS_t  new_ALARM_DB_STATUS;
input new_ALARM_ERR_t  new_ALARM_ERR;
input new_ALARM_LUT_PERR_t  new_ALARM_LUT_PERR;
input new_ALARM_MB_ECC_ERR_t  new_ALARM_MB_ECC_ERR;
input new_ALARM_SB_ECC_ERR_t  new_ALARM_SB_ECC_ERR;
input new_ALARM_STATUS_t  new_ALARM_STATUS;
input new_CFG_RX_FIFO_STATUS_t  new_CFG_RX_FIFO_STATUS;
input new_CWDI_RX_FIFO_STATUS_t  new_CWDI_RX_FIFO_STATUS;
input new_DIR_CQ_31_0_OCC_INT_STATUS_t  new_DIR_CQ_31_0_OCC_INT_STATUS;
input new_DIR_CQ_63_32_OCC_INT_STATUS_t  new_DIR_CQ_63_32_OCC_INT_STATUS;
input new_EGRESS_DB_STATUS_t  new_EGRESS_DB_STATUS;
input new_EGRESS_LUT_ERR_t  new_EGRESS_LUT_ERR;
input new_EGRESS_STATUS_t  new_EGRESS_STATUS;
input new_HCW_ENQ_FIFO_STATUS_t  new_HCW_ENQ_FIFO_STATUS;
input new_HCW_REQ_DEBUG_t  new_HCW_REQ_DEBUG;
input new_HCW_SCH_FIFO_STATUS_t  new_HCW_SCH_FIFO_STATUS;
input new_HQM_ALARM_RX_FIFO_STATUS_t  new_HQM_ALARM_RX_FIFO_STATUS;
input new_HQM_HCW_DATA_DEBUG_t [3:0] new_HQM_HCW_DATA_DEBUG;
input new_HQM_PDATA_DEBUG_t [15:0] new_HQM_PDATA_DEBUG;
input new_HQM_SYSTEM_CNT_0_t  new_HQM_SYSTEM_CNT_0;
input new_HQM_SYSTEM_CNT_1_t  new_HQM_SYSTEM_CNT_1;
input new_HQM_SYSTEM_CNT_10_t  new_HQM_SYSTEM_CNT_10;
input new_HQM_SYSTEM_CNT_11_t  new_HQM_SYSTEM_CNT_11;
input new_HQM_SYSTEM_CNT_12_t  new_HQM_SYSTEM_CNT_12;
input new_HQM_SYSTEM_CNT_13_t  new_HQM_SYSTEM_CNT_13;
input new_HQM_SYSTEM_CNT_14_t  new_HQM_SYSTEM_CNT_14;
input new_HQM_SYSTEM_CNT_15_t  new_HQM_SYSTEM_CNT_15;
input new_HQM_SYSTEM_CNT_16_t  new_HQM_SYSTEM_CNT_16;
input new_HQM_SYSTEM_CNT_17_t  new_HQM_SYSTEM_CNT_17;
input new_HQM_SYSTEM_CNT_18_t  new_HQM_SYSTEM_CNT_18;
input new_HQM_SYSTEM_CNT_19_t  new_HQM_SYSTEM_CNT_19;
input new_HQM_SYSTEM_CNT_2_t  new_HQM_SYSTEM_CNT_2;
input new_HQM_SYSTEM_CNT_20_t  new_HQM_SYSTEM_CNT_20;
input new_HQM_SYSTEM_CNT_21_t  new_HQM_SYSTEM_CNT_21;
input new_HQM_SYSTEM_CNT_3_t  new_HQM_SYSTEM_CNT_3;
input new_HQM_SYSTEM_CNT_4_t  new_HQM_SYSTEM_CNT_4;
input new_HQM_SYSTEM_CNT_5_t  new_HQM_SYSTEM_CNT_5;
input new_HQM_SYSTEM_CNT_6_t  new_HQM_SYSTEM_CNT_6;
input new_HQM_SYSTEM_CNT_7_t  new_HQM_SYSTEM_CNT_7;
input new_HQM_SYSTEM_CNT_8_t  new_HQM_SYSTEM_CNT_8;
input new_HQM_SYSTEM_CNT_9_t  new_HQM_SYSTEM_CNT_9;
input new_INGRESS_DB_STATUS_t  new_INGRESS_DB_STATUS;
input new_INGRESS_LUT_ERR_t  new_INGRESS_LUT_ERR;
input new_INGRESS_STATUS_t  new_INGRESS_STATUS;
input new_LDB_CQ_31_0_OCC_INT_STATUS_t  new_LDB_CQ_31_0_OCC_INT_STATUS;
input new_LDB_CQ_63_32_OCC_INT_STATUS_t  new_LDB_CQ_63_32_OCC_INT_STATUS;
input new_MSIX_31_0_SYND_t  new_MSIX_31_0_SYND;
input new_MSIX_63_32_SYND_t  new_MSIX_63_32_SYND;
input new_MSIX_64_SYND_t  new_MSIX_64_SYND;
input new_MSIX_ACK_t  new_MSIX_ACK;
input new_PHDR_DEBUG_0_t  new_PHDR_DEBUG_0;
input new_PHDR_DEBUG_1_t  new_PHDR_DEBUG_1;
input new_PHDR_DEBUG_2_t  new_PHDR_DEBUG_2;
input new_ROB_SYNDROME_t  new_ROB_SYNDROME;
input new_SCH_OUT_FIFO_STATUS_t  new_SCH_OUT_FIFO_STATUS;
input new_SIF_ALARM_FIFO_STATUS_t  new_SIF_ALARM_FIFO_STATUS;
input new_SYS_IDLE_STATUS_t  new_SYS_IDLE_STATUS;
input new_WBUF_DEBUG_t  new_WBUF_DEBUG;
input new_WBUF_STATUS_t  new_WBUF_STATUS;
input new_WBUF_STATUS2_t  new_WBUF_STATUS2;

input AI_ADDR_L_t  handcode_reg_rdata_AI_ADDR_L;
input AI_ADDR_U_t  handcode_reg_rdata_AI_ADDR_U;
input AI_DATA_t  handcode_reg_rdata_AI_DATA;
input ALARM_HW_SYND_t  handcode_reg_rdata_ALARM_HW_SYND;
input ALARM_PF_SYND0_t  handcode_reg_rdata_ALARM_PF_SYND0;
input ALARM_PF_SYND1_t  handcode_reg_rdata_ALARM_PF_SYND1;
input ALARM_PF_SYND2_t  handcode_reg_rdata_ALARM_PF_SYND2;
input ALARM_VF_SYND0_t  handcode_reg_rdata_ALARM_VF_SYND0;
input ALARM_VF_SYND1_t  handcode_reg_rdata_ALARM_VF_SYND1;
input ALARM_VF_SYND2_t  handcode_reg_rdata_ALARM_VF_SYND2;
input AW_SMON_ACTIVITYCOUNTER0_t  handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER0;
input AW_SMON_ACTIVITYCOUNTER1_t  handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER1;
input AW_SMON_COMPARE0_t  handcode_reg_rdata_AW_SMON_COMPARE0;
input AW_SMON_COMPARE1_t  handcode_reg_rdata_AW_SMON_COMPARE1;
input AW_SMON_COMP_MASK0_t  handcode_reg_rdata_AW_SMON_COMP_MASK0;
input AW_SMON_COMP_MASK1_t  handcode_reg_rdata_AW_SMON_COMP_MASK1;
input AW_SMON_CONFIGURATION0_t  handcode_reg_rdata_AW_SMON_CONFIGURATION0;
input AW_SMON_CONFIGURATION1_t  handcode_reg_rdata_AW_SMON_CONFIGURATION1;
input AW_SMON_MAXIMUM_TIMER_t  handcode_reg_rdata_AW_SMON_MAXIMUM_TIMER;
input AW_SMON_TIMER_t  handcode_reg_rdata_AW_SMON_TIMER;
input DIR_CQ2VF_PF_RO_t  handcode_reg_rdata_DIR_CQ2VF_PF_RO;
input DIR_CQ_ADDR_L_t  handcode_reg_rdata_DIR_CQ_ADDR_L;
input DIR_CQ_ADDR_U_t  handcode_reg_rdata_DIR_CQ_ADDR_U;
input DIR_CQ_FMT_t  handcode_reg_rdata_DIR_CQ_FMT;
input DIR_CQ_ISR_t  handcode_reg_rdata_DIR_CQ_ISR;
input DIR_CQ_PASID_t  handcode_reg_rdata_DIR_CQ_PASID;
input DIR_PP2VAS_t  handcode_reg_rdata_DIR_PP2VAS;
input DIR_PP_V_t  handcode_reg_rdata_DIR_PP_V;
input DIR_QID_ITS_t  handcode_reg_rdata_DIR_QID_ITS;
input DIR_QID_V_t  handcode_reg_rdata_DIR_QID_V;
input DIR_VASQID_V_t  handcode_reg_rdata_DIR_VASQID_V;
input LDB_CQ2VF_PF_RO_t  handcode_reg_rdata_LDB_CQ2VF_PF_RO;
input LDB_CQ_ADDR_L_t  handcode_reg_rdata_LDB_CQ_ADDR_L;
input LDB_CQ_ADDR_U_t  handcode_reg_rdata_LDB_CQ_ADDR_U;
input LDB_CQ_ISR_t  handcode_reg_rdata_LDB_CQ_ISR;
input LDB_CQ_PASID_t  handcode_reg_rdata_LDB_CQ_PASID;
input LDB_PP2VAS_t  handcode_reg_rdata_LDB_PP2VAS;
input LDB_PP_V_t  handcode_reg_rdata_LDB_PP_V;
input LDB_QID2VQID_t  handcode_reg_rdata_LDB_QID2VQID;
input LDB_QID_CFG_V_t  handcode_reg_rdata_LDB_QID_CFG_V;
input LDB_QID_ITS_t  handcode_reg_rdata_LDB_QID_ITS;
input LDB_QID_V_t  handcode_reg_rdata_LDB_QID_V;
input LDB_VASQID_V_t  handcode_reg_rdata_LDB_VASQID_V;
input PERF_SMON_ACTIVITYCOUNTER0_t  handcode_reg_rdata_PERF_SMON_ACTIVITYCOUNTER0;
input PERF_SMON_ACTIVITYCOUNTER1_t  handcode_reg_rdata_PERF_SMON_ACTIVITYCOUNTER1;
input PERF_SMON_COMPARE0_t  handcode_reg_rdata_PERF_SMON_COMPARE0;
input PERF_SMON_COMPARE1_t  handcode_reg_rdata_PERF_SMON_COMPARE1;
input PERF_SMON_COMP_MASK0_t  handcode_reg_rdata_PERF_SMON_COMP_MASK0;
input PERF_SMON_COMP_MASK1_t  handcode_reg_rdata_PERF_SMON_COMP_MASK1;
input PERF_SMON_CONFIGURATION0_t  handcode_reg_rdata_PERF_SMON_CONFIGURATION0;
input PERF_SMON_CONFIGURATION1_t  handcode_reg_rdata_PERF_SMON_CONFIGURATION1;
input PERF_SMON_MAXIMUM_TIMER_t  handcode_reg_rdata_PERF_SMON_MAXIMUM_TIMER;
input PERF_SMON_TIMER_t  handcode_reg_rdata_PERF_SMON_TIMER;
input SBE_CNT_0_t  handcode_reg_rdata_SBE_CNT_0;
input SBE_CNT_1_t  handcode_reg_rdata_SBE_CNT_1;
input VF_DIR_VPP2PP_t  handcode_reg_rdata_VF_DIR_VPP2PP;
input VF_DIR_VPP_V_t  handcode_reg_rdata_VF_DIR_VPP_V;
input VF_DIR_VQID2QID_t  handcode_reg_rdata_VF_DIR_VQID2QID;
input VF_DIR_VQID_V_t  handcode_reg_rdata_VF_DIR_VQID_V;
input VF_LDB_VPP2PP_t  handcode_reg_rdata_VF_LDB_VPP2PP;
input VF_LDB_VPP_V_t  handcode_reg_rdata_VF_LDB_VPP_V;
input VF_LDB_VQID2QID_t  handcode_reg_rdata_VF_LDB_VQID2QID;
input VF_LDB_VQID_V_t  handcode_reg_rdata_VF_LDB_VQID_V;
input WB_DIR_CQ_STATE_t  handcode_reg_rdata_WB_DIR_CQ_STATE;
input WB_LDB_CQ_STATE_t  handcode_reg_rdata_WB_LDB_CQ_STATE;

input handcode_rvalid_AI_ADDR_L_t  handcode_rvalid_AI_ADDR_L;
input handcode_rvalid_AI_ADDR_U_t  handcode_rvalid_AI_ADDR_U;
input handcode_rvalid_AI_DATA_t  handcode_rvalid_AI_DATA;
input handcode_rvalid_ALARM_HW_SYND_t  handcode_rvalid_ALARM_HW_SYND;
input handcode_rvalid_ALARM_PF_SYND0_t  handcode_rvalid_ALARM_PF_SYND0;
input handcode_rvalid_ALARM_PF_SYND1_t  handcode_rvalid_ALARM_PF_SYND1;
input handcode_rvalid_ALARM_PF_SYND2_t  handcode_rvalid_ALARM_PF_SYND2;
input handcode_rvalid_ALARM_VF_SYND0_t  handcode_rvalid_ALARM_VF_SYND0;
input handcode_rvalid_ALARM_VF_SYND1_t  handcode_rvalid_ALARM_VF_SYND1;
input handcode_rvalid_ALARM_VF_SYND2_t  handcode_rvalid_ALARM_VF_SYND2;
input handcode_rvalid_AW_SMON_ACTIVITYCOUNTER0_t  handcode_rvalid_AW_SMON_ACTIVITYCOUNTER0;
input handcode_rvalid_AW_SMON_ACTIVITYCOUNTER1_t  handcode_rvalid_AW_SMON_ACTIVITYCOUNTER1;
input handcode_rvalid_AW_SMON_COMPARE0_t  handcode_rvalid_AW_SMON_COMPARE0;
input handcode_rvalid_AW_SMON_COMPARE1_t  handcode_rvalid_AW_SMON_COMPARE1;
input handcode_rvalid_AW_SMON_COMP_MASK0_t  handcode_rvalid_AW_SMON_COMP_MASK0;
input handcode_rvalid_AW_SMON_COMP_MASK1_t  handcode_rvalid_AW_SMON_COMP_MASK1;
input handcode_rvalid_AW_SMON_CONFIGURATION0_t  handcode_rvalid_AW_SMON_CONFIGURATION0;
input handcode_rvalid_AW_SMON_CONFIGURATION1_t  handcode_rvalid_AW_SMON_CONFIGURATION1;
input handcode_rvalid_AW_SMON_MAXIMUM_TIMER_t  handcode_rvalid_AW_SMON_MAXIMUM_TIMER;
input handcode_rvalid_AW_SMON_TIMER_t  handcode_rvalid_AW_SMON_TIMER;
input handcode_rvalid_DIR_CQ2VF_PF_RO_t  handcode_rvalid_DIR_CQ2VF_PF_RO;
input handcode_rvalid_DIR_CQ_ADDR_L_t  handcode_rvalid_DIR_CQ_ADDR_L;
input handcode_rvalid_DIR_CQ_ADDR_U_t  handcode_rvalid_DIR_CQ_ADDR_U;
input handcode_rvalid_DIR_CQ_FMT_t  handcode_rvalid_DIR_CQ_FMT;
input handcode_rvalid_DIR_CQ_ISR_t  handcode_rvalid_DIR_CQ_ISR;
input handcode_rvalid_DIR_CQ_PASID_t  handcode_rvalid_DIR_CQ_PASID;
input handcode_rvalid_DIR_PP2VAS_t  handcode_rvalid_DIR_PP2VAS;
input handcode_rvalid_DIR_PP_V_t  handcode_rvalid_DIR_PP_V;
input handcode_rvalid_DIR_QID_ITS_t  handcode_rvalid_DIR_QID_ITS;
input handcode_rvalid_DIR_QID_V_t  handcode_rvalid_DIR_QID_V;
input handcode_rvalid_DIR_VASQID_V_t  handcode_rvalid_DIR_VASQID_V;
input handcode_rvalid_LDB_CQ2VF_PF_RO_t  handcode_rvalid_LDB_CQ2VF_PF_RO;
input handcode_rvalid_LDB_CQ_ADDR_L_t  handcode_rvalid_LDB_CQ_ADDR_L;
input handcode_rvalid_LDB_CQ_ADDR_U_t  handcode_rvalid_LDB_CQ_ADDR_U;
input handcode_rvalid_LDB_CQ_ISR_t  handcode_rvalid_LDB_CQ_ISR;
input handcode_rvalid_LDB_CQ_PASID_t  handcode_rvalid_LDB_CQ_PASID;
input handcode_rvalid_LDB_PP2VAS_t  handcode_rvalid_LDB_PP2VAS;
input handcode_rvalid_LDB_PP_V_t  handcode_rvalid_LDB_PP_V;
input handcode_rvalid_LDB_QID2VQID_t  handcode_rvalid_LDB_QID2VQID;
input handcode_rvalid_LDB_QID_CFG_V_t  handcode_rvalid_LDB_QID_CFG_V;
input handcode_rvalid_LDB_QID_ITS_t  handcode_rvalid_LDB_QID_ITS;
input handcode_rvalid_LDB_QID_V_t  handcode_rvalid_LDB_QID_V;
input handcode_rvalid_LDB_VASQID_V_t  handcode_rvalid_LDB_VASQID_V;
input handcode_rvalid_PERF_SMON_ACTIVITYCOUNTER0_t  handcode_rvalid_PERF_SMON_ACTIVITYCOUNTER0;
input handcode_rvalid_PERF_SMON_ACTIVITYCOUNTER1_t  handcode_rvalid_PERF_SMON_ACTIVITYCOUNTER1;
input handcode_rvalid_PERF_SMON_COMPARE0_t  handcode_rvalid_PERF_SMON_COMPARE0;
input handcode_rvalid_PERF_SMON_COMPARE1_t  handcode_rvalid_PERF_SMON_COMPARE1;
input handcode_rvalid_PERF_SMON_COMP_MASK0_t  handcode_rvalid_PERF_SMON_COMP_MASK0;
input handcode_rvalid_PERF_SMON_COMP_MASK1_t  handcode_rvalid_PERF_SMON_COMP_MASK1;
input handcode_rvalid_PERF_SMON_CONFIGURATION0_t  handcode_rvalid_PERF_SMON_CONFIGURATION0;
input handcode_rvalid_PERF_SMON_CONFIGURATION1_t  handcode_rvalid_PERF_SMON_CONFIGURATION1;
input handcode_rvalid_PERF_SMON_MAXIMUM_TIMER_t  handcode_rvalid_PERF_SMON_MAXIMUM_TIMER;
input handcode_rvalid_PERF_SMON_TIMER_t  handcode_rvalid_PERF_SMON_TIMER;
input handcode_rvalid_SBE_CNT_0_t  handcode_rvalid_SBE_CNT_0;
input handcode_rvalid_SBE_CNT_1_t  handcode_rvalid_SBE_CNT_1;
input handcode_rvalid_VF_DIR_VPP2PP_t  handcode_rvalid_VF_DIR_VPP2PP;
input handcode_rvalid_VF_DIR_VPP_V_t  handcode_rvalid_VF_DIR_VPP_V;
input handcode_rvalid_VF_DIR_VQID2QID_t  handcode_rvalid_VF_DIR_VQID2QID;
input handcode_rvalid_VF_DIR_VQID_V_t  handcode_rvalid_VF_DIR_VQID_V;
input handcode_rvalid_VF_LDB_VPP2PP_t  handcode_rvalid_VF_LDB_VPP2PP;
input handcode_rvalid_VF_LDB_VPP_V_t  handcode_rvalid_VF_LDB_VPP_V;
input handcode_rvalid_VF_LDB_VQID2QID_t  handcode_rvalid_VF_LDB_VQID2QID;
input handcode_rvalid_VF_LDB_VQID_V_t  handcode_rvalid_VF_LDB_VQID_V;
input handcode_rvalid_WB_DIR_CQ_STATE_t  handcode_rvalid_WB_DIR_CQ_STATE;
input handcode_rvalid_WB_LDB_CQ_STATE_t  handcode_rvalid_WB_LDB_CQ_STATE;

input handcode_wvalid_AI_ADDR_L_t  handcode_wvalid_AI_ADDR_L;
input handcode_wvalid_AI_ADDR_U_t  handcode_wvalid_AI_ADDR_U;
input handcode_wvalid_AI_DATA_t  handcode_wvalid_AI_DATA;
input handcode_wvalid_ALARM_HW_SYND_t  handcode_wvalid_ALARM_HW_SYND;
input handcode_wvalid_ALARM_PF_SYND0_t  handcode_wvalid_ALARM_PF_SYND0;
input handcode_wvalid_ALARM_PF_SYND1_t  handcode_wvalid_ALARM_PF_SYND1;
input handcode_wvalid_ALARM_PF_SYND2_t  handcode_wvalid_ALARM_PF_SYND2;
input handcode_wvalid_ALARM_VF_SYND0_t  handcode_wvalid_ALARM_VF_SYND0;
input handcode_wvalid_ALARM_VF_SYND1_t  handcode_wvalid_ALARM_VF_SYND1;
input handcode_wvalid_ALARM_VF_SYND2_t  handcode_wvalid_ALARM_VF_SYND2;
input handcode_wvalid_AW_SMON_ACTIVITYCOUNTER0_t  handcode_wvalid_AW_SMON_ACTIVITYCOUNTER0;
input handcode_wvalid_AW_SMON_ACTIVITYCOUNTER1_t  handcode_wvalid_AW_SMON_ACTIVITYCOUNTER1;
input handcode_wvalid_AW_SMON_COMPARE0_t  handcode_wvalid_AW_SMON_COMPARE0;
input handcode_wvalid_AW_SMON_COMPARE1_t  handcode_wvalid_AW_SMON_COMPARE1;
input handcode_wvalid_AW_SMON_COMP_MASK0_t  handcode_wvalid_AW_SMON_COMP_MASK0;
input handcode_wvalid_AW_SMON_COMP_MASK1_t  handcode_wvalid_AW_SMON_COMP_MASK1;
input handcode_wvalid_AW_SMON_CONFIGURATION0_t  handcode_wvalid_AW_SMON_CONFIGURATION0;
input handcode_wvalid_AW_SMON_CONFIGURATION1_t  handcode_wvalid_AW_SMON_CONFIGURATION1;
input handcode_wvalid_AW_SMON_MAXIMUM_TIMER_t  handcode_wvalid_AW_SMON_MAXIMUM_TIMER;
input handcode_wvalid_AW_SMON_TIMER_t  handcode_wvalid_AW_SMON_TIMER;
input handcode_wvalid_DIR_CQ2VF_PF_RO_t  handcode_wvalid_DIR_CQ2VF_PF_RO;
input handcode_wvalid_DIR_CQ_ADDR_L_t  handcode_wvalid_DIR_CQ_ADDR_L;
input handcode_wvalid_DIR_CQ_ADDR_U_t  handcode_wvalid_DIR_CQ_ADDR_U;
input handcode_wvalid_DIR_CQ_FMT_t  handcode_wvalid_DIR_CQ_FMT;
input handcode_wvalid_DIR_CQ_ISR_t  handcode_wvalid_DIR_CQ_ISR;
input handcode_wvalid_DIR_CQ_PASID_t  handcode_wvalid_DIR_CQ_PASID;
input handcode_wvalid_DIR_PP2VAS_t  handcode_wvalid_DIR_PP2VAS;
input handcode_wvalid_DIR_PP_V_t  handcode_wvalid_DIR_PP_V;
input handcode_wvalid_DIR_QID_ITS_t  handcode_wvalid_DIR_QID_ITS;
input handcode_wvalid_DIR_QID_V_t  handcode_wvalid_DIR_QID_V;
input handcode_wvalid_DIR_VASQID_V_t  handcode_wvalid_DIR_VASQID_V;
input handcode_wvalid_LDB_CQ2VF_PF_RO_t  handcode_wvalid_LDB_CQ2VF_PF_RO;
input handcode_wvalid_LDB_CQ_ADDR_L_t  handcode_wvalid_LDB_CQ_ADDR_L;
input handcode_wvalid_LDB_CQ_ADDR_U_t  handcode_wvalid_LDB_CQ_ADDR_U;
input handcode_wvalid_LDB_CQ_ISR_t  handcode_wvalid_LDB_CQ_ISR;
input handcode_wvalid_LDB_CQ_PASID_t  handcode_wvalid_LDB_CQ_PASID;
input handcode_wvalid_LDB_PP2VAS_t  handcode_wvalid_LDB_PP2VAS;
input handcode_wvalid_LDB_PP_V_t  handcode_wvalid_LDB_PP_V;
input handcode_wvalid_LDB_QID2VQID_t  handcode_wvalid_LDB_QID2VQID;
input handcode_wvalid_LDB_QID_CFG_V_t  handcode_wvalid_LDB_QID_CFG_V;
input handcode_wvalid_LDB_QID_ITS_t  handcode_wvalid_LDB_QID_ITS;
input handcode_wvalid_LDB_QID_V_t  handcode_wvalid_LDB_QID_V;
input handcode_wvalid_LDB_VASQID_V_t  handcode_wvalid_LDB_VASQID_V;
input handcode_wvalid_PERF_SMON_ACTIVITYCOUNTER0_t  handcode_wvalid_PERF_SMON_ACTIVITYCOUNTER0;
input handcode_wvalid_PERF_SMON_ACTIVITYCOUNTER1_t  handcode_wvalid_PERF_SMON_ACTIVITYCOUNTER1;
input handcode_wvalid_PERF_SMON_COMPARE0_t  handcode_wvalid_PERF_SMON_COMPARE0;
input handcode_wvalid_PERF_SMON_COMPARE1_t  handcode_wvalid_PERF_SMON_COMPARE1;
input handcode_wvalid_PERF_SMON_COMP_MASK0_t  handcode_wvalid_PERF_SMON_COMP_MASK0;
input handcode_wvalid_PERF_SMON_COMP_MASK1_t  handcode_wvalid_PERF_SMON_COMP_MASK1;
input handcode_wvalid_PERF_SMON_CONFIGURATION0_t  handcode_wvalid_PERF_SMON_CONFIGURATION0;
input handcode_wvalid_PERF_SMON_CONFIGURATION1_t  handcode_wvalid_PERF_SMON_CONFIGURATION1;
input handcode_wvalid_PERF_SMON_MAXIMUM_TIMER_t  handcode_wvalid_PERF_SMON_MAXIMUM_TIMER;
input handcode_wvalid_PERF_SMON_TIMER_t  handcode_wvalid_PERF_SMON_TIMER;
input handcode_wvalid_SBE_CNT_0_t  handcode_wvalid_SBE_CNT_0;
input handcode_wvalid_SBE_CNT_1_t  handcode_wvalid_SBE_CNT_1;
input handcode_wvalid_VF_DIR_VPP2PP_t  handcode_wvalid_VF_DIR_VPP2PP;
input handcode_wvalid_VF_DIR_VPP_V_t  handcode_wvalid_VF_DIR_VPP_V;
input handcode_wvalid_VF_DIR_VQID2QID_t  handcode_wvalid_VF_DIR_VQID2QID;
input handcode_wvalid_VF_DIR_VQID_V_t  handcode_wvalid_VF_DIR_VQID_V;
input handcode_wvalid_VF_LDB_VPP2PP_t  handcode_wvalid_VF_LDB_VPP2PP;
input handcode_wvalid_VF_LDB_VPP_V_t  handcode_wvalid_VF_LDB_VPP_V;
input handcode_wvalid_VF_LDB_VQID2QID_t  handcode_wvalid_VF_LDB_VQID2QID;
input handcode_wvalid_VF_LDB_VQID_V_t  handcode_wvalid_VF_LDB_VQID_V;
input handcode_wvalid_WB_DIR_CQ_STATE_t  handcode_wvalid_WB_DIR_CQ_STATE;
input handcode_wvalid_WB_LDB_CQ_STATE_t  handcode_wvalid_WB_LDB_CQ_STATE;

input handcode_error_AI_ADDR_L_t  handcode_error_AI_ADDR_L;
input handcode_error_AI_ADDR_U_t  handcode_error_AI_ADDR_U;
input handcode_error_AI_DATA_t  handcode_error_AI_DATA;
input handcode_error_ALARM_HW_SYND_t  handcode_error_ALARM_HW_SYND;
input handcode_error_ALARM_PF_SYND0_t  handcode_error_ALARM_PF_SYND0;
input handcode_error_ALARM_PF_SYND1_t  handcode_error_ALARM_PF_SYND1;
input handcode_error_ALARM_PF_SYND2_t  handcode_error_ALARM_PF_SYND2;
input handcode_error_ALARM_VF_SYND0_t  handcode_error_ALARM_VF_SYND0;
input handcode_error_ALARM_VF_SYND1_t  handcode_error_ALARM_VF_SYND1;
input handcode_error_ALARM_VF_SYND2_t  handcode_error_ALARM_VF_SYND2;
input handcode_error_AW_SMON_ACTIVITYCOUNTER0_t  handcode_error_AW_SMON_ACTIVITYCOUNTER0;
input handcode_error_AW_SMON_ACTIVITYCOUNTER1_t  handcode_error_AW_SMON_ACTIVITYCOUNTER1;
input handcode_error_AW_SMON_COMPARE0_t  handcode_error_AW_SMON_COMPARE0;
input handcode_error_AW_SMON_COMPARE1_t  handcode_error_AW_SMON_COMPARE1;
input handcode_error_AW_SMON_COMP_MASK0_t  handcode_error_AW_SMON_COMP_MASK0;
input handcode_error_AW_SMON_COMP_MASK1_t  handcode_error_AW_SMON_COMP_MASK1;
input handcode_error_AW_SMON_CONFIGURATION0_t  handcode_error_AW_SMON_CONFIGURATION0;
input handcode_error_AW_SMON_CONFIGURATION1_t  handcode_error_AW_SMON_CONFIGURATION1;
input handcode_error_AW_SMON_MAXIMUM_TIMER_t  handcode_error_AW_SMON_MAXIMUM_TIMER;
input handcode_error_AW_SMON_TIMER_t  handcode_error_AW_SMON_TIMER;
input handcode_error_DIR_CQ2VF_PF_RO_t  handcode_error_DIR_CQ2VF_PF_RO;
input handcode_error_DIR_CQ_ADDR_L_t  handcode_error_DIR_CQ_ADDR_L;
input handcode_error_DIR_CQ_ADDR_U_t  handcode_error_DIR_CQ_ADDR_U;
input handcode_error_DIR_CQ_FMT_t  handcode_error_DIR_CQ_FMT;
input handcode_error_DIR_CQ_ISR_t  handcode_error_DIR_CQ_ISR;
input handcode_error_DIR_CQ_PASID_t  handcode_error_DIR_CQ_PASID;
input handcode_error_DIR_PP2VAS_t  handcode_error_DIR_PP2VAS;
input handcode_error_DIR_PP_V_t  handcode_error_DIR_PP_V;
input handcode_error_DIR_QID_ITS_t  handcode_error_DIR_QID_ITS;
input handcode_error_DIR_QID_V_t  handcode_error_DIR_QID_V;
input handcode_error_DIR_VASQID_V_t  handcode_error_DIR_VASQID_V;
input handcode_error_LDB_CQ2VF_PF_RO_t  handcode_error_LDB_CQ2VF_PF_RO;
input handcode_error_LDB_CQ_ADDR_L_t  handcode_error_LDB_CQ_ADDR_L;
input handcode_error_LDB_CQ_ADDR_U_t  handcode_error_LDB_CQ_ADDR_U;
input handcode_error_LDB_CQ_ISR_t  handcode_error_LDB_CQ_ISR;
input handcode_error_LDB_CQ_PASID_t  handcode_error_LDB_CQ_PASID;
input handcode_error_LDB_PP2VAS_t  handcode_error_LDB_PP2VAS;
input handcode_error_LDB_PP_V_t  handcode_error_LDB_PP_V;
input handcode_error_LDB_QID2VQID_t  handcode_error_LDB_QID2VQID;
input handcode_error_LDB_QID_CFG_V_t  handcode_error_LDB_QID_CFG_V;
input handcode_error_LDB_QID_ITS_t  handcode_error_LDB_QID_ITS;
input handcode_error_LDB_QID_V_t  handcode_error_LDB_QID_V;
input handcode_error_LDB_VASQID_V_t  handcode_error_LDB_VASQID_V;
input handcode_error_PERF_SMON_ACTIVITYCOUNTER0_t  handcode_error_PERF_SMON_ACTIVITYCOUNTER0;
input handcode_error_PERF_SMON_ACTIVITYCOUNTER1_t  handcode_error_PERF_SMON_ACTIVITYCOUNTER1;
input handcode_error_PERF_SMON_COMPARE0_t  handcode_error_PERF_SMON_COMPARE0;
input handcode_error_PERF_SMON_COMPARE1_t  handcode_error_PERF_SMON_COMPARE1;
input handcode_error_PERF_SMON_COMP_MASK0_t  handcode_error_PERF_SMON_COMP_MASK0;
input handcode_error_PERF_SMON_COMP_MASK1_t  handcode_error_PERF_SMON_COMP_MASK1;
input handcode_error_PERF_SMON_CONFIGURATION0_t  handcode_error_PERF_SMON_CONFIGURATION0;
input handcode_error_PERF_SMON_CONFIGURATION1_t  handcode_error_PERF_SMON_CONFIGURATION1;
input handcode_error_PERF_SMON_MAXIMUM_TIMER_t  handcode_error_PERF_SMON_MAXIMUM_TIMER;
input handcode_error_PERF_SMON_TIMER_t  handcode_error_PERF_SMON_TIMER;
input handcode_error_SBE_CNT_0_t  handcode_error_SBE_CNT_0;
input handcode_error_SBE_CNT_1_t  handcode_error_SBE_CNT_1;
input handcode_error_VF_DIR_VPP2PP_t  handcode_error_VF_DIR_VPP2PP;
input handcode_error_VF_DIR_VPP_V_t  handcode_error_VF_DIR_VPP_V;
input handcode_error_VF_DIR_VQID2QID_t  handcode_error_VF_DIR_VQID2QID;
input handcode_error_VF_DIR_VQID_V_t  handcode_error_VF_DIR_VQID_V;
input handcode_error_VF_LDB_VPP2PP_t  handcode_error_VF_LDB_VPP2PP;
input handcode_error_VF_LDB_VPP_V_t  handcode_error_VF_LDB_VPP_V;
input handcode_error_VF_LDB_VQID2QID_t  handcode_error_VF_LDB_VQID2QID;
input handcode_error_VF_LDB_VQID_V_t  handcode_error_VF_LDB_VQID_V;
input handcode_error_WB_DIR_CQ_STATE_t  handcode_error_WB_DIR_CQ_STATE;
input handcode_error_WB_LDB_CQ_STATE_t  handcode_error_WB_LDB_CQ_STATE;


    // Register Outputs
output AI_CTRL_t [127:0] AI_CTRL;
output ALARM_CTL_t  ALARM_CTL;
output ALARM_DB_STATUS_t  ALARM_DB_STATUS;
output ALARM_ERR_t  ALARM_ERR;
output ALARM_LUT_PERR_t  ALARM_LUT_PERR;
output ALARM_MB_ECC_ERR_t  ALARM_MB_ECC_ERR;
output ALARM_SB_ECC_ERR_t  ALARM_SB_ECC_ERR;
output ALARM_STATUS_t  ALARM_STATUS;
output AL_CWD_ALARM_DB_AGITATE_CONTROL_t  AL_CWD_ALARM_DB_AGITATE_CONTROL;
output AL_HQM_ALARM_DB_AGITATE_CONTROL_t  AL_HQM_ALARM_DB_AGITATE_CONTROL;
output AL_IMS_MSIX_DB_AGITATE_CONTROL_t  AL_IMS_MSIX_DB_AGITATE_CONTROL;
output AL_SIF_ALARM_AFULL_AGITATE_CONTROL_t  AL_SIF_ALARM_AFULL_AGITATE_CONTROL;
output CFG_PATCH_CONTROL_t  CFG_PATCH_CONTROL;
output CFG_RX_FIFO_STATUS_t  CFG_RX_FIFO_STATUS;
output CFG_UNIT_VERSION_t  CFG_UNIT_VERSION;
output CWDI_RX_FIFO_STATUS_t  CWDI_RX_FIFO_STATUS;
output DIR_CQ_31_0_OCC_INT_STATUS_t  DIR_CQ_31_0_OCC_INT_STATUS;
output DIR_CQ_63_32_OCC_INT_STATUS_t  DIR_CQ_63_32_OCC_INT_STATUS;
output DIR_PP_ROB_V_t [63:0] DIR_PP_ROB_V;
output ECC_CTL_t  ECC_CTL;
output EGRESS_CTL_t  EGRESS_CTL;
output EGRESS_DB_STATUS_t  EGRESS_DB_STATUS;
output EGRESS_LUT_ERR_t  EGRESS_LUT_ERR;
output EGRESS_STATUS_t  EGRESS_STATUS;
output EG_HCW_SCHED_DB_AGITATE_CONTROL_t  EG_HCW_SCHED_DB_AGITATE_CONTROL;
output HCW_ENQ_FIFO_CTL_t  HCW_ENQ_FIFO_CTL;
output HCW_ENQ_FIFO_STATUS_t  HCW_ENQ_FIFO_STATUS;
output HCW_REQ_DEBUG_t  HCW_REQ_DEBUG;
output HCW_SCH_FIFO_STATUS_t  HCW_SCH_FIFO_STATUS;
output HQM_ALARM_RX_FIFO_STATUS_t  HQM_ALARM_RX_FIFO_STATUS;
output HQM_DIR_PP2VDEV_t [63:0] HQM_DIR_PP2VDEV;
output HQM_HCW_DATA_DEBUG_t [3:0] HQM_HCW_DATA_DEBUG;
output HQM_LDB_PP2VDEV_t [63:0] HQM_LDB_PP2VDEV;
output HQM_PDATA_DEBUG_t [15:0] HQM_PDATA_DEBUG;
output HQM_SYSTEM_CNT_0_t  HQM_SYSTEM_CNT_0;
output HQM_SYSTEM_CNT_1_t  HQM_SYSTEM_CNT_1;
output HQM_SYSTEM_CNT_10_t  HQM_SYSTEM_CNT_10;
output HQM_SYSTEM_CNT_11_t  HQM_SYSTEM_CNT_11;
output HQM_SYSTEM_CNT_12_t  HQM_SYSTEM_CNT_12;
output HQM_SYSTEM_CNT_13_t  HQM_SYSTEM_CNT_13;
output HQM_SYSTEM_CNT_14_t  HQM_SYSTEM_CNT_14;
output HQM_SYSTEM_CNT_15_t  HQM_SYSTEM_CNT_15;
output HQM_SYSTEM_CNT_16_t  HQM_SYSTEM_CNT_16;
output HQM_SYSTEM_CNT_17_t  HQM_SYSTEM_CNT_17;
output HQM_SYSTEM_CNT_18_t  HQM_SYSTEM_CNT_18;
output HQM_SYSTEM_CNT_19_t  HQM_SYSTEM_CNT_19;
output HQM_SYSTEM_CNT_2_t  HQM_SYSTEM_CNT_2;
output HQM_SYSTEM_CNT_20_t  HQM_SYSTEM_CNT_20;
output HQM_SYSTEM_CNT_21_t  HQM_SYSTEM_CNT_21;
output HQM_SYSTEM_CNT_3_t  HQM_SYSTEM_CNT_3;
output HQM_SYSTEM_CNT_4_t  HQM_SYSTEM_CNT_4;
output HQM_SYSTEM_CNT_5_t  HQM_SYSTEM_CNT_5;
output HQM_SYSTEM_CNT_6_t  HQM_SYSTEM_CNT_6;
output HQM_SYSTEM_CNT_7_t  HQM_SYSTEM_CNT_7;
output HQM_SYSTEM_CNT_8_t  HQM_SYSTEM_CNT_8;
output HQM_SYSTEM_CNT_9_t  HQM_SYSTEM_CNT_9;
output HQM_SYSTEM_CNT_CTL_t  HQM_SYSTEM_CNT_CTL;
output IG_HCW_ENQ_AFULL_AGITATE_CONTROL_t  IG_HCW_ENQ_AFULL_AGITATE_CONTROL;
output IG_HCW_ENQ_W_DB_AGITATE_CONTROL_t  IG_HCW_ENQ_W_DB_AGITATE_CONTROL;
output IMS_PEND_CLEAR_t  IMS_PEND_CLEAR;
output INGRESS_ALARM_ENABLE_t  INGRESS_ALARM_ENABLE;
output INGRESS_CTL_t  INGRESS_CTL;
output INGRESS_DB_STATUS_t  INGRESS_DB_STATUS;
output INGRESS_LUT_ERR_t  INGRESS_LUT_ERR;
output INGRESS_STATUS_t  INGRESS_STATUS;
output LDB_CQ_31_0_OCC_INT_STATUS_t  LDB_CQ_31_0_OCC_INT_STATUS;
output LDB_CQ_63_32_OCC_INT_STATUS_t  LDB_CQ_63_32_OCC_INT_STATUS;
output LDB_PP_ROB_V_t [63:0] LDB_PP_ROB_V;
output MSIX_31_0_SYND_t  MSIX_31_0_SYND;
output MSIX_63_32_SYND_t  MSIX_63_32_SYND;
output MSIX_64_SYND_t  MSIX_64_SYND;
output MSIX_ACK_t  MSIX_ACK;
output MSIX_MODE_t  MSIX_MODE;
output MSIX_PASSTHROUGH_t  MSIX_PASSTHROUGH;
output MSIX_PBA_31_0_CLEAR_t  MSIX_PBA_31_0_CLEAR;
output MSIX_PBA_63_32_CLEAR_t  MSIX_PBA_63_32_CLEAR;
output MSIX_PBA_64_CLEAR_t  MSIX_PBA_64_CLEAR;
output PARITY_CTL_t  PARITY_CTL;
output PHDR_DEBUG_0_t  PHDR_DEBUG_0;
output PHDR_DEBUG_1_t  PHDR_DEBUG_1;
output PHDR_DEBUG_2_t  PHDR_DEBUG_2;
output ROB_SYNDROME_t  ROB_SYNDROME;
output SCH_OUT_FIFO_CTL_t  SCH_OUT_FIFO_CTL;
output SCH_OUT_FIFO_STATUS_t  SCH_OUT_FIFO_STATUS;
output SIF_ALARM_FIFO_CTL_t  SIF_ALARM_FIFO_CTL;
output SIF_ALARM_FIFO_STATUS_t  SIF_ALARM_FIFO_STATUS;
output SYS_ALARM_INT_ENABLE_t  SYS_ALARM_INT_ENABLE;
output SYS_ALARM_MB_ECC_INT_ENABLE_t  SYS_ALARM_MB_ECC_INT_ENABLE;
output SYS_ALARM_SB_ECC_INT_ENABLE_t  SYS_ALARM_SB_ECC_INT_ENABLE;
output SYS_IDLE_STATUS_t  SYS_IDLE_STATUS;
output TOTAL_CREDITS_t  TOTAL_CREDITS;
output TOTAL_DIR_PORTS_t  TOTAL_DIR_PORTS;
output TOTAL_DIR_QID_t  TOTAL_DIR_QID;
output TOTAL_LDB_PORTS_t  TOTAL_LDB_PORTS;
output TOTAL_LDB_QID_t  TOTAL_LDB_QID;
output TOTAL_SN_REGIONS_t  TOTAL_SN_REGIONS;
output TOTAL_VAS_t  TOTAL_VAS;
output TOTAL_VF_t  TOTAL_VF;
output WBUF_DEBUG_t  WBUF_DEBUG;
output WBUF_STATUS_t  WBUF_STATUS;
output WBUF_STATUS2_t  WBUF_STATUS2;
output WB_SCH_OUT_AFULL_AGITATE_CONTROL_t  WB_SCH_OUT_AFULL_AGITATE_CONTROL;
output WRITE_BUFFER_CTL_t  WRITE_BUFFER_CTL;


    // Register signals for HandCoded registers
output AI_ADDR_L_t  handcode_reg_wdata_AI_ADDR_L;
output AI_ADDR_U_t  handcode_reg_wdata_AI_ADDR_U;
output AI_DATA_t  handcode_reg_wdata_AI_DATA;
output ALARM_HW_SYND_t  handcode_reg_wdata_ALARM_HW_SYND;
output ALARM_PF_SYND0_t  handcode_reg_wdata_ALARM_PF_SYND0;
output ALARM_PF_SYND1_t  handcode_reg_wdata_ALARM_PF_SYND1;
output ALARM_PF_SYND2_t  handcode_reg_wdata_ALARM_PF_SYND2;
output ALARM_VF_SYND0_t  handcode_reg_wdata_ALARM_VF_SYND0;
output ALARM_VF_SYND1_t  handcode_reg_wdata_ALARM_VF_SYND1;
output ALARM_VF_SYND2_t  handcode_reg_wdata_ALARM_VF_SYND2;
output AW_SMON_ACTIVITYCOUNTER0_t  handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER0;
output AW_SMON_ACTIVITYCOUNTER1_t  handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER1;
output AW_SMON_COMPARE0_t  handcode_reg_wdata_AW_SMON_COMPARE0;
output AW_SMON_COMPARE1_t  handcode_reg_wdata_AW_SMON_COMPARE1;
output AW_SMON_COMP_MASK0_t  handcode_reg_wdata_AW_SMON_COMP_MASK0;
output AW_SMON_COMP_MASK1_t  handcode_reg_wdata_AW_SMON_COMP_MASK1;
output AW_SMON_CONFIGURATION0_t  handcode_reg_wdata_AW_SMON_CONFIGURATION0;
output AW_SMON_CONFIGURATION1_t  handcode_reg_wdata_AW_SMON_CONFIGURATION1;
output AW_SMON_MAXIMUM_TIMER_t  handcode_reg_wdata_AW_SMON_MAXIMUM_TIMER;
output AW_SMON_TIMER_t  handcode_reg_wdata_AW_SMON_TIMER;
output DIR_CQ2VF_PF_RO_t  handcode_reg_wdata_DIR_CQ2VF_PF_RO;
output DIR_CQ_ADDR_L_t  handcode_reg_wdata_DIR_CQ_ADDR_L;
output DIR_CQ_ADDR_U_t  handcode_reg_wdata_DIR_CQ_ADDR_U;
output DIR_CQ_FMT_t  handcode_reg_wdata_DIR_CQ_FMT;
output DIR_CQ_ISR_t  handcode_reg_wdata_DIR_CQ_ISR;
output DIR_CQ_PASID_t  handcode_reg_wdata_DIR_CQ_PASID;
output DIR_PP2VAS_t  handcode_reg_wdata_DIR_PP2VAS;
output DIR_PP_V_t  handcode_reg_wdata_DIR_PP_V;
output DIR_QID_ITS_t  handcode_reg_wdata_DIR_QID_ITS;
output DIR_QID_V_t  handcode_reg_wdata_DIR_QID_V;
output DIR_VASQID_V_t  handcode_reg_wdata_DIR_VASQID_V;
output LDB_CQ2VF_PF_RO_t  handcode_reg_wdata_LDB_CQ2VF_PF_RO;
output LDB_CQ_ADDR_L_t  handcode_reg_wdata_LDB_CQ_ADDR_L;
output LDB_CQ_ADDR_U_t  handcode_reg_wdata_LDB_CQ_ADDR_U;
output LDB_CQ_ISR_t  handcode_reg_wdata_LDB_CQ_ISR;
output LDB_CQ_PASID_t  handcode_reg_wdata_LDB_CQ_PASID;
output LDB_PP2VAS_t  handcode_reg_wdata_LDB_PP2VAS;
output LDB_PP_V_t  handcode_reg_wdata_LDB_PP_V;
output LDB_QID2VQID_t  handcode_reg_wdata_LDB_QID2VQID;
output LDB_QID_CFG_V_t  handcode_reg_wdata_LDB_QID_CFG_V;
output LDB_QID_ITS_t  handcode_reg_wdata_LDB_QID_ITS;
output LDB_QID_V_t  handcode_reg_wdata_LDB_QID_V;
output LDB_VASQID_V_t  handcode_reg_wdata_LDB_VASQID_V;
output PERF_SMON_ACTIVITYCOUNTER0_t  handcode_reg_wdata_PERF_SMON_ACTIVITYCOUNTER0;
output PERF_SMON_ACTIVITYCOUNTER1_t  handcode_reg_wdata_PERF_SMON_ACTIVITYCOUNTER1;
output PERF_SMON_COMPARE0_t  handcode_reg_wdata_PERF_SMON_COMPARE0;
output PERF_SMON_COMPARE1_t  handcode_reg_wdata_PERF_SMON_COMPARE1;
output PERF_SMON_COMP_MASK0_t  handcode_reg_wdata_PERF_SMON_COMP_MASK0;
output PERF_SMON_COMP_MASK1_t  handcode_reg_wdata_PERF_SMON_COMP_MASK1;
output PERF_SMON_CONFIGURATION0_t  handcode_reg_wdata_PERF_SMON_CONFIGURATION0;
output PERF_SMON_CONFIGURATION1_t  handcode_reg_wdata_PERF_SMON_CONFIGURATION1;
output PERF_SMON_MAXIMUM_TIMER_t  handcode_reg_wdata_PERF_SMON_MAXIMUM_TIMER;
output PERF_SMON_TIMER_t  handcode_reg_wdata_PERF_SMON_TIMER;
output SBE_CNT_0_t  handcode_reg_wdata_SBE_CNT_0;
output SBE_CNT_1_t  handcode_reg_wdata_SBE_CNT_1;
output VF_DIR_VPP2PP_t  handcode_reg_wdata_VF_DIR_VPP2PP;
output VF_DIR_VPP_V_t  handcode_reg_wdata_VF_DIR_VPP_V;
output VF_DIR_VQID2QID_t  handcode_reg_wdata_VF_DIR_VQID2QID;
output VF_DIR_VQID_V_t  handcode_reg_wdata_VF_DIR_VQID_V;
output VF_LDB_VPP2PP_t  handcode_reg_wdata_VF_LDB_VPP2PP;
output VF_LDB_VPP_V_t  handcode_reg_wdata_VF_LDB_VPP_V;
output VF_LDB_VQID2QID_t  handcode_reg_wdata_VF_LDB_VQID2QID;
output VF_LDB_VQID_V_t  handcode_reg_wdata_VF_LDB_VQID_V;
output WB_DIR_CQ_STATE_t  handcode_reg_wdata_WB_DIR_CQ_STATE;
output WB_LDB_CQ_STATE_t  handcode_reg_wdata_WB_LDB_CQ_STATE;

output we_AI_ADDR_L_t  we_AI_ADDR_L;
output we_AI_ADDR_U_t  we_AI_ADDR_U;
output we_AI_DATA_t  we_AI_DATA;
output we_ALARM_HW_SYND_t  we_ALARM_HW_SYND;
output we_ALARM_PF_SYND0_t  we_ALARM_PF_SYND0;
output we_ALARM_PF_SYND1_t  we_ALARM_PF_SYND1;
output we_ALARM_PF_SYND2_t  we_ALARM_PF_SYND2;
output we_ALARM_VF_SYND0_t  we_ALARM_VF_SYND0;
output we_ALARM_VF_SYND1_t  we_ALARM_VF_SYND1;
output we_ALARM_VF_SYND2_t  we_ALARM_VF_SYND2;
output we_AW_SMON_ACTIVITYCOUNTER0_t  we_AW_SMON_ACTIVITYCOUNTER0;
output we_AW_SMON_ACTIVITYCOUNTER1_t  we_AW_SMON_ACTIVITYCOUNTER1;
output we_AW_SMON_COMPARE0_t  we_AW_SMON_COMPARE0;
output we_AW_SMON_COMPARE1_t  we_AW_SMON_COMPARE1;
output we_AW_SMON_COMP_MASK0_t  we_AW_SMON_COMP_MASK0;
output we_AW_SMON_COMP_MASK1_t  we_AW_SMON_COMP_MASK1;
output we_AW_SMON_CONFIGURATION0_t  we_AW_SMON_CONFIGURATION0;
output we_AW_SMON_CONFIGURATION1_t  we_AW_SMON_CONFIGURATION1;
output we_AW_SMON_MAXIMUM_TIMER_t  we_AW_SMON_MAXIMUM_TIMER;
output we_AW_SMON_TIMER_t  we_AW_SMON_TIMER;
output we_DIR_CQ2VF_PF_RO_t  we_DIR_CQ2VF_PF_RO;
output we_DIR_CQ_ADDR_L_t  we_DIR_CQ_ADDR_L;
output we_DIR_CQ_ADDR_U_t  we_DIR_CQ_ADDR_U;
output we_DIR_CQ_FMT_t  we_DIR_CQ_FMT;
output we_DIR_CQ_ISR_t  we_DIR_CQ_ISR;
output we_DIR_CQ_PASID_t  we_DIR_CQ_PASID;
output we_DIR_PP2VAS_t  we_DIR_PP2VAS;
output we_DIR_PP_V_t  we_DIR_PP_V;
output we_DIR_QID_ITS_t  we_DIR_QID_ITS;
output we_DIR_QID_V_t  we_DIR_QID_V;
output we_DIR_VASQID_V_t  we_DIR_VASQID_V;
output we_LDB_CQ2VF_PF_RO_t  we_LDB_CQ2VF_PF_RO;
output we_LDB_CQ_ADDR_L_t  we_LDB_CQ_ADDR_L;
output we_LDB_CQ_ADDR_U_t  we_LDB_CQ_ADDR_U;
output we_LDB_CQ_ISR_t  we_LDB_CQ_ISR;
output we_LDB_CQ_PASID_t  we_LDB_CQ_PASID;
output we_LDB_PP2VAS_t  we_LDB_PP2VAS;
output we_LDB_PP_V_t  we_LDB_PP_V;
output we_LDB_QID2VQID_t  we_LDB_QID2VQID;
output we_LDB_QID_CFG_V_t  we_LDB_QID_CFG_V;
output we_LDB_QID_ITS_t  we_LDB_QID_ITS;
output we_LDB_QID_V_t  we_LDB_QID_V;
output we_LDB_VASQID_V_t  we_LDB_VASQID_V;
output we_PERF_SMON_ACTIVITYCOUNTER0_t  we_PERF_SMON_ACTIVITYCOUNTER0;
output we_PERF_SMON_ACTIVITYCOUNTER1_t  we_PERF_SMON_ACTIVITYCOUNTER1;
output we_PERF_SMON_COMPARE0_t  we_PERF_SMON_COMPARE0;
output we_PERF_SMON_COMPARE1_t  we_PERF_SMON_COMPARE1;
output we_PERF_SMON_COMP_MASK0_t  we_PERF_SMON_COMP_MASK0;
output we_PERF_SMON_COMP_MASK1_t  we_PERF_SMON_COMP_MASK1;
output we_PERF_SMON_CONFIGURATION0_t  we_PERF_SMON_CONFIGURATION0;
output we_PERF_SMON_CONFIGURATION1_t  we_PERF_SMON_CONFIGURATION1;
output we_PERF_SMON_MAXIMUM_TIMER_t  we_PERF_SMON_MAXIMUM_TIMER;
output we_PERF_SMON_TIMER_t  we_PERF_SMON_TIMER;
output we_SBE_CNT_0_t  we_SBE_CNT_0;
output we_SBE_CNT_1_t  we_SBE_CNT_1;
output we_VF_DIR_VPP2PP_t  we_VF_DIR_VPP2PP;
output we_VF_DIR_VPP_V_t  we_VF_DIR_VPP_V;
output we_VF_DIR_VQID2QID_t  we_VF_DIR_VQID2QID;
output we_VF_DIR_VQID_V_t  we_VF_DIR_VQID_V;
output we_VF_LDB_VPP2PP_t  we_VF_LDB_VPP2PP;
output we_VF_LDB_VPP_V_t  we_VF_LDB_VPP_V;
output we_VF_LDB_VQID2QID_t  we_VF_LDB_VQID2QID;
output we_VF_LDB_VQID_V_t  we_VF_LDB_VQID_V;
output we_WB_DIR_CQ_STATE_t  we_WB_DIR_CQ_STATE;
output we_WB_LDB_CQ_STATE_t  we_WB_LDB_CQ_STATE;

output re_AI_ADDR_L_t  re_AI_ADDR_L;
output re_AI_ADDR_U_t  re_AI_ADDR_U;
output re_AI_DATA_t  re_AI_DATA;
output re_ALARM_HW_SYND_t  re_ALARM_HW_SYND;
output re_ALARM_PF_SYND0_t  re_ALARM_PF_SYND0;
output re_ALARM_PF_SYND1_t  re_ALARM_PF_SYND1;
output re_ALARM_PF_SYND2_t  re_ALARM_PF_SYND2;
output re_ALARM_VF_SYND0_t  re_ALARM_VF_SYND0;
output re_ALARM_VF_SYND1_t  re_ALARM_VF_SYND1;
output re_ALARM_VF_SYND2_t  re_ALARM_VF_SYND2;
output re_AW_SMON_ACTIVITYCOUNTER0_t  re_AW_SMON_ACTIVITYCOUNTER0;
output re_AW_SMON_ACTIVITYCOUNTER1_t  re_AW_SMON_ACTIVITYCOUNTER1;
output re_AW_SMON_COMPARE0_t  re_AW_SMON_COMPARE0;
output re_AW_SMON_COMPARE1_t  re_AW_SMON_COMPARE1;
output re_AW_SMON_COMP_MASK0_t  re_AW_SMON_COMP_MASK0;
output re_AW_SMON_COMP_MASK1_t  re_AW_SMON_COMP_MASK1;
output re_AW_SMON_CONFIGURATION0_t  re_AW_SMON_CONFIGURATION0;
output re_AW_SMON_CONFIGURATION1_t  re_AW_SMON_CONFIGURATION1;
output re_AW_SMON_MAXIMUM_TIMER_t  re_AW_SMON_MAXIMUM_TIMER;
output re_AW_SMON_TIMER_t  re_AW_SMON_TIMER;
output re_DIR_CQ2VF_PF_RO_t  re_DIR_CQ2VF_PF_RO;
output re_DIR_CQ_ADDR_L_t  re_DIR_CQ_ADDR_L;
output re_DIR_CQ_ADDR_U_t  re_DIR_CQ_ADDR_U;
output re_DIR_CQ_FMT_t  re_DIR_CQ_FMT;
output re_DIR_CQ_ISR_t  re_DIR_CQ_ISR;
output re_DIR_CQ_PASID_t  re_DIR_CQ_PASID;
output re_DIR_PP2VAS_t  re_DIR_PP2VAS;
output re_DIR_PP_V_t  re_DIR_PP_V;
output re_DIR_QID_ITS_t  re_DIR_QID_ITS;
output re_DIR_QID_V_t  re_DIR_QID_V;
output re_DIR_VASQID_V_t  re_DIR_VASQID_V;
output re_LDB_CQ2VF_PF_RO_t  re_LDB_CQ2VF_PF_RO;
output re_LDB_CQ_ADDR_L_t  re_LDB_CQ_ADDR_L;
output re_LDB_CQ_ADDR_U_t  re_LDB_CQ_ADDR_U;
output re_LDB_CQ_ISR_t  re_LDB_CQ_ISR;
output re_LDB_CQ_PASID_t  re_LDB_CQ_PASID;
output re_LDB_PP2VAS_t  re_LDB_PP2VAS;
output re_LDB_PP_V_t  re_LDB_PP_V;
output re_LDB_QID2VQID_t  re_LDB_QID2VQID;
output re_LDB_QID_CFG_V_t  re_LDB_QID_CFG_V;
output re_LDB_QID_ITS_t  re_LDB_QID_ITS;
output re_LDB_QID_V_t  re_LDB_QID_V;
output re_LDB_VASQID_V_t  re_LDB_VASQID_V;
output re_PERF_SMON_ACTIVITYCOUNTER0_t  re_PERF_SMON_ACTIVITYCOUNTER0;
output re_PERF_SMON_ACTIVITYCOUNTER1_t  re_PERF_SMON_ACTIVITYCOUNTER1;
output re_PERF_SMON_COMPARE0_t  re_PERF_SMON_COMPARE0;
output re_PERF_SMON_COMPARE1_t  re_PERF_SMON_COMPARE1;
output re_PERF_SMON_COMP_MASK0_t  re_PERF_SMON_COMP_MASK0;
output re_PERF_SMON_COMP_MASK1_t  re_PERF_SMON_COMP_MASK1;
output re_PERF_SMON_CONFIGURATION0_t  re_PERF_SMON_CONFIGURATION0;
output re_PERF_SMON_CONFIGURATION1_t  re_PERF_SMON_CONFIGURATION1;
output re_PERF_SMON_MAXIMUM_TIMER_t  re_PERF_SMON_MAXIMUM_TIMER;
output re_PERF_SMON_TIMER_t  re_PERF_SMON_TIMER;
output re_SBE_CNT_0_t  re_SBE_CNT_0;
output re_SBE_CNT_1_t  re_SBE_CNT_1;
output re_VF_DIR_VPP2PP_t  re_VF_DIR_VPP2PP;
output re_VF_DIR_VPP_V_t  re_VF_DIR_VPP_V;
output re_VF_DIR_VQID2QID_t  re_VF_DIR_VQID2QID;
output re_VF_DIR_VQID_V_t  re_VF_DIR_VQID_V;
output re_VF_LDB_VPP2PP_t  re_VF_LDB_VPP2PP;
output re_VF_LDB_VPP_V_t  re_VF_LDB_VPP_V;
output re_VF_LDB_VQID2QID_t  re_VF_LDB_VQID2QID;
output re_VF_LDB_VQID_V_t  re_VF_LDB_VQID_V;
output re_WB_DIR_CQ_STATE_t  re_WB_DIR_CQ_STATE;
output re_WB_LDB_CQ_STATE_t  re_WB_LDB_CQ_STATE;




input hqm_system_csr_sai_import_t  sai_import;

    // Config Access
input hqm_system_csr_cr_req_t  req;
output hqm_system_csr_cr_ack_t  ack;
    

// ======================================================================
// begin decode and addr logic section {


function automatic logic f_IsMEMRd (
    input logic [3:0] req_opcode
);
    f_IsMEMRd = (req_opcode == MRD); 
endfunction : f_IsMEMRd

function automatic logic f_IsMEMWr (
    input logic [3:0] req_opcode
);
    f_IsMEMWr = (req_opcode == MWR); 
endfunction : f_IsMEMWr

function automatic logic [CR_REQ_ADDR_HI:0] f_MEMAddr (
    input hqm_system_csr_cr_req_t req
);
begin
    f_MEMAddr[CR_REQ_ADDR_HI:0] = 48'h0;
    f_MEMAddr[CR_MEM_ADDR_HI:0] = 
       req.addr.mem.offset[CR_MEM_ADDR_HI:0];
end
endfunction : f_MEMAddr


function automatic logic f_IsRdOpCode (
    input logic [3:0] req_opcode
);
    f_IsRdOpCode = (!req_opcode[0]); 
endfunction : f_IsRdOpCode

function automatic logic f_IsWrOpCode (
    input logic [3:0] req_opcode
);
    f_IsWrOpCode = (req_opcode[0]); 
endfunction : f_IsWrOpCode

// Shared registers definitions

logic sai_HQM_OS_W_write_en;
always_comb sai_HQM_OS_W_write_en = sai_import.HQM_OS_W_write_en;
logic sai_HQM_OS_W_read_en;
always_comb sai_HQM_OS_W_read_en = sai_import.HQM_OS_W_read_en;



logic [3:0] req_opcode;
always_comb req_opcode = {1'b0, req.opcode[2:0]};

logic req_valid;
assign req_valid = req.valid;


logic IsWrOpcode;
logic IsRdOpcode;
assign IsWrOpcode = f_IsWrOpCode(req_opcode);
assign IsRdOpcode = f_IsRdOpCode(req_opcode);

logic IsMEMRd;
logic IsMEMWr;
assign IsMEMRd = f_IsMEMRd(req_opcode);
assign IsMEMWr = f_IsMEMWr(req_opcode);


logic [47:0] req_addr;
always_comb begin : REQ_ADDR_BLOCK
    unique casez (req_opcode) 
        MRD: begin 
            req_addr = f_MEMAddr(req);
        end 
        MWR: begin
            req_addr = f_MEMAddr(req);
        end 
        default: begin
           req_addr = 48'h0;
        end
    endcase 
end

logic [HQM_SYSTEM_CSR_MEM_ADDR_MSB-ADDR_LSB_BUS_ALIGN:0] case_req_addr_HQM_SYSTEM_CSR_MEM;
assign case_req_addr_HQM_SYSTEM_CSR_MEM = req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN];
logic [3:0] be;
always_comb be = {4{req.valid}} & req.be;
logic [3:0] sai_successfull_per_byte;
logic [31:0] read_data;
logic [31:0] write_data;




// ======================================================================
// begin register logic section {

//---------------------------------------------------------------------
// TOTAL_CREDITS Address Decode

// ----------------------------------------------------------------------
// TOTAL_CREDITS.TOTAL_CREDITS x8 RO, using RO template.
assign TOTAL_CREDITS.TOTAL_CREDITS = TOTAL_CREDITS_PARAM;



//---------------------------------------------------------------------
// TOTAL_LDB_QID Address Decode

// ----------------------------------------------------------------------
// TOTAL_LDB_QID.TOTAL_LDB_QID x8 RO, using RO template.
assign TOTAL_LDB_QID.TOTAL_LDB_QID = TOTAL_LDB_QID_PARAM;



//---------------------------------------------------------------------
// TOTAL_DIR_QID Address Decode

// ----------------------------------------------------------------------
// TOTAL_DIR_QID.TOTAL_DIR_QID x8 RO, using RO template.
assign TOTAL_DIR_QID.TOTAL_DIR_QID = TOTAL_DIR_QID_PARAM;



//---------------------------------------------------------------------
// TOTAL_LDB_PORTS Address Decode

// ----------------------------------------------------------------------
// TOTAL_LDB_PORTS.TOTAL_LDB_PORTS x8 RO, using RO template.
assign TOTAL_LDB_PORTS.TOTAL_LDB_PORTS = TOTAL_LDB_PORTS_PARAM;



//---------------------------------------------------------------------
// TOTAL_DIR_PORTS Address Decode

// ----------------------------------------------------------------------
// TOTAL_DIR_PORTS.TOTAL_DIR_PORTS x8 RO, using RO template.
assign TOTAL_DIR_PORTS.TOTAL_DIR_PORTS = TOTAL_DIR_PORTS_PARAM;



//---------------------------------------------------------------------
// TOTAL_VAS Address Decode

// ----------------------------------------------------------------------
// TOTAL_VAS.TOTAL_VAS x8 RO, using RO template.
assign TOTAL_VAS.TOTAL_VAS = TOTAL_VAS_PARAM;



//---------------------------------------------------------------------
// TOTAL_SN_REGIONS Address Decode

// ----------------------------------------------------------------------
// TOTAL_SN_REGIONS.MODE x8 RO, using RO template.
assign TOTAL_SN_REGIONS.MODE = TOTAL_SN_MODE_PARAM;



// ----------------------------------------------------------------------
// TOTAL_SN_REGIONS.SLOT x8 RO, using RO template.
assign TOTAL_SN_REGIONS.SLOT = TOTAL_SN_SLOT_PARAM;



// ----------------------------------------------------------------------
// TOTAL_SN_REGIONS.GROUP x8 RO, using RO template.
assign TOTAL_SN_REGIONS.GROUP = TOTAL_SN_GROUP_PARAM;



//---------------------------------------------------------------------
// TOTAL_VF Address Decode

// ----------------------------------------------------------------------
// TOTAL_VF.TOTAL_VF x8 RO, using RO template.
assign TOTAL_VF.TOTAL_VF = TOTAL_VF_PARAM;



//---------------------------------------------------------------------
// CFG_UNIT_VERSION Address Decode

// ----------------------------------------------------------------------
// CFG_UNIT_VERSION.UNIT_VERSION x8 RO, using RO template.
assign CFG_UNIT_VERSION.UNIT_VERSION = 8'h4;



//---------------------------------------------------------------------
// INGRESS_ALARM_ENABLE Address Decode
logic  addr_decode_INGRESS_ALARM_ENABLE;
logic  write_req_INGRESS_ALARM_ENABLE;
always_comb begin
   addr_decode_INGRESS_ALARM_ENABLE = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == INGRESS_ALARM_ENABLE_DECODE_ADDR) && req.valid ;
   write_req_INGRESS_ALARM_ENABLE = IsMEMWr && addr_decode_INGRESS_ALARM_ENABLE && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// INGRESS_ALARM_ENABLE.ILLEGAL_HCW x1 RW, using RW template.
logic [0:0] up_INGRESS_ALARM_ENABLE_ILLEGAL_HCW;
always_comb begin
 up_INGRESS_ALARM_ENABLE_ILLEGAL_HCW =
    ({1{write_req_INGRESS_ALARM_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_INGRESS_ALARM_ENABLE_ILLEGAL_HCW;
always_comb begin
 nxt_INGRESS_ALARM_ENABLE_ILLEGAL_HCW = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_ALARM_ENABLE_ILLEGAL_HCW[0], nxt_INGRESS_ALARM_ENABLE_ILLEGAL_HCW[0:0], INGRESS_ALARM_ENABLE.ILLEGAL_HCW[0:0])

// ----------------------------------------------------------------------
// INGRESS_ALARM_ENABLE.ILLEGAL_PP x1 RW, using RW template.
logic [0:0] up_INGRESS_ALARM_ENABLE_ILLEGAL_PP;
always_comb begin
 up_INGRESS_ALARM_ENABLE_ILLEGAL_PP =
    ({1{write_req_INGRESS_ALARM_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_INGRESS_ALARM_ENABLE_ILLEGAL_PP;
always_comb begin
 nxt_INGRESS_ALARM_ENABLE_ILLEGAL_PP = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_ALARM_ENABLE_ILLEGAL_PP[0], nxt_INGRESS_ALARM_ENABLE_ILLEGAL_PP[0:0], INGRESS_ALARM_ENABLE.ILLEGAL_PP[0:0])

// ----------------------------------------------------------------------
// INGRESS_ALARM_ENABLE.ILLEGAL_PASID x1 RW, using RW template.
logic [0:0] up_INGRESS_ALARM_ENABLE_ILLEGAL_PASID;
always_comb begin
 up_INGRESS_ALARM_ENABLE_ILLEGAL_PASID =
    ({1{write_req_INGRESS_ALARM_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_INGRESS_ALARM_ENABLE_ILLEGAL_PASID;
always_comb begin
 nxt_INGRESS_ALARM_ENABLE_ILLEGAL_PASID = write_data[2:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_ALARM_ENABLE_ILLEGAL_PASID[0], nxt_INGRESS_ALARM_ENABLE_ILLEGAL_PASID[0:0], INGRESS_ALARM_ENABLE.ILLEGAL_PASID[0:0])

// ----------------------------------------------------------------------
// INGRESS_ALARM_ENABLE.ILLEGAL_QID x1 RW, using RW template.
logic [0:0] up_INGRESS_ALARM_ENABLE_ILLEGAL_QID;
always_comb begin
 up_INGRESS_ALARM_ENABLE_ILLEGAL_QID =
    ({1{write_req_INGRESS_ALARM_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_INGRESS_ALARM_ENABLE_ILLEGAL_QID;
always_comb begin
 nxt_INGRESS_ALARM_ENABLE_ILLEGAL_QID = write_data[3:3];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_ALARM_ENABLE_ILLEGAL_QID[0], nxt_INGRESS_ALARM_ENABLE_ILLEGAL_QID[0:0], INGRESS_ALARM_ENABLE.ILLEGAL_QID[0:0])

// ----------------------------------------------------------------------
// INGRESS_ALARM_ENABLE.DISABLED_QID x1 RW, using RW template.
logic [0:0] up_INGRESS_ALARM_ENABLE_DISABLED_QID;
always_comb begin
 up_INGRESS_ALARM_ENABLE_DISABLED_QID =
    ({1{write_req_INGRESS_ALARM_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_INGRESS_ALARM_ENABLE_DISABLED_QID;
always_comb begin
 nxt_INGRESS_ALARM_ENABLE_DISABLED_QID = write_data[4:4];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_ALARM_ENABLE_DISABLED_QID[0], nxt_INGRESS_ALARM_ENABLE_DISABLED_QID[0:0], INGRESS_ALARM_ENABLE.DISABLED_QID[0:0])

// ----------------------------------------------------------------------
// INGRESS_ALARM_ENABLE.ILLEGAL_LDB_QID_CFG x1 RW, using RW template.
logic [0:0] up_INGRESS_ALARM_ENABLE_ILLEGAL_LDB_QID_CFG;
always_comb begin
 up_INGRESS_ALARM_ENABLE_ILLEGAL_LDB_QID_CFG =
    ({1{write_req_INGRESS_ALARM_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_INGRESS_ALARM_ENABLE_ILLEGAL_LDB_QID_CFG;
always_comb begin
 nxt_INGRESS_ALARM_ENABLE_ILLEGAL_LDB_QID_CFG = write_data[5:5];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_ALARM_ENABLE_ILLEGAL_LDB_QID_CFG[0], nxt_INGRESS_ALARM_ENABLE_ILLEGAL_LDB_QID_CFG[0:0], INGRESS_ALARM_ENABLE.ILLEGAL_LDB_QID_CFG[0:0])

//---------------------------------------------------------------------
// ALARM_LUT_PERR Address Decode
logic  addr_decode_ALARM_LUT_PERR;
logic  write_req_ALARM_LUT_PERR;
always_comb begin
   addr_decode_ALARM_LUT_PERR = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == ALARM_LUT_PERR_DECODE_ADDR) && req.valid ;
   write_req_ALARM_LUT_PERR = IsMEMWr && addr_decode_ALARM_LUT_PERR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.DIR_CQ_ISR_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_DIR_CQ_ISR_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_DIR_CQ_ISR_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[0]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_DIR_CQ_ISR_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_DIR_CQ_ISR_PERR = write_data[0:0] & req_up_ALARM_LUT_PERR_DIR_CQ_ISR_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_DIR_CQ_ISR_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_DIR_CQ_ISR_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_DIR_CQ_ISR_PERR = clr_ALARM_LUT_PERR_DIR_CQ_ISR_PERR;
 sw_nxt_ALARM_LUT_PERR_DIR_CQ_ISR_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_DIR_CQ_ISR_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_DIR_CQ_ISR_PERR;
always_comb begin
 up_ALARM_LUT_PERR_DIR_CQ_ISR_PERR = 
   swwr_ALARM_LUT_PERR_DIR_CQ_ISR_PERR | {1{load_ALARM_LUT_PERR.DIR_CQ_ISR_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_DIR_CQ_ISR_PERR[0] = 
    load_ALARM_LUT_PERR.DIR_CQ_ISR_PERR ?
    new_ALARM_LUT_PERR.DIR_CQ_ISR_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_DIR_CQ_ISR_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_DIR_CQ_ISR_PERR[0], nxt_ALARM_LUT_PERR_DIR_CQ_ISR_PERR[0], ALARM_LUT_PERR.DIR_CQ_ISR_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.LDB_CQ_ISR_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_LDB_CQ_ISR_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_LDB_CQ_ISR_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[0]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_LDB_CQ_ISR_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_LDB_CQ_ISR_PERR = write_data[1:1] & req_up_ALARM_LUT_PERR_LDB_CQ_ISR_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_LDB_CQ_ISR_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_LDB_CQ_ISR_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_LDB_CQ_ISR_PERR = clr_ALARM_LUT_PERR_LDB_CQ_ISR_PERR;
 sw_nxt_ALARM_LUT_PERR_LDB_CQ_ISR_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_LDB_CQ_ISR_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_LDB_CQ_ISR_PERR;
always_comb begin
 up_ALARM_LUT_PERR_LDB_CQ_ISR_PERR = 
   swwr_ALARM_LUT_PERR_LDB_CQ_ISR_PERR | {1{load_ALARM_LUT_PERR.LDB_CQ_ISR_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_LDB_CQ_ISR_PERR[0] = 
    load_ALARM_LUT_PERR.LDB_CQ_ISR_PERR ?
    new_ALARM_LUT_PERR.LDB_CQ_ISR_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_LDB_CQ_ISR_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_LDB_CQ_ISR_PERR[0], nxt_ALARM_LUT_PERR_LDB_CQ_ISR_PERR[0], ALARM_LUT_PERR.LDB_CQ_ISR_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.DIR_CQ_AI_ADDR_L_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[0]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR = write_data[2:2] & req_up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR = clr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR;
 sw_nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR;
always_comb begin
 up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR = 
   swwr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR | {1{load_ALARM_LUT_PERR.DIR_CQ_AI_ADDR_L_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR[0] = 
    load_ALARM_LUT_PERR.DIR_CQ_AI_ADDR_L_PERR ?
    new_ALARM_LUT_PERR.DIR_CQ_AI_ADDR_L_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR[0], nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_L_PERR[0], ALARM_LUT_PERR.DIR_CQ_AI_ADDR_L_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.DIR_CQ_AI_ADDR_U_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[0]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR = write_data[3:3] & req_up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR = clr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR;
 sw_nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR;
always_comb begin
 up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR = 
   swwr_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR | {1{load_ALARM_LUT_PERR.DIR_CQ_AI_ADDR_U_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR[0] = 
    load_ALARM_LUT_PERR.DIR_CQ_AI_ADDR_U_PERR ?
    new_ALARM_LUT_PERR.DIR_CQ_AI_ADDR_U_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR[0], nxt_ALARM_LUT_PERR_DIR_CQ_AI_ADDR_U_PERR[0], ALARM_LUT_PERR.DIR_CQ_AI_ADDR_U_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.LDB_CQ_AI_ADDR_L_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[0]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR = write_data[4:4] & req_up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR = clr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR;
 sw_nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR;
always_comb begin
 up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR = 
   swwr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR | {1{load_ALARM_LUT_PERR.LDB_CQ_AI_ADDR_L_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR[0] = 
    load_ALARM_LUT_PERR.LDB_CQ_AI_ADDR_L_PERR ?
    new_ALARM_LUT_PERR.LDB_CQ_AI_ADDR_L_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR[0], nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_L_PERR[0], ALARM_LUT_PERR.LDB_CQ_AI_ADDR_L_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.LDB_CQ_AI_ADDR_U_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[0]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR = write_data[5:5] & req_up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR = clr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR;
 sw_nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR;
always_comb begin
 up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR = 
   swwr_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR | {1{load_ALARM_LUT_PERR.LDB_CQ_AI_ADDR_U_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR[0] = 
    load_ALARM_LUT_PERR.LDB_CQ_AI_ADDR_U_PERR ?
    new_ALARM_LUT_PERR.LDB_CQ_AI_ADDR_U_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR[0], nxt_ALARM_LUT_PERR_LDB_CQ_AI_ADDR_U_PERR[0], ALARM_LUT_PERR.LDB_CQ_AI_ADDR_U_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.DIR_CQ_AI_DATA_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[0]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR = write_data[6:6] & req_up_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR = clr_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR;
 sw_nxt_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR;
always_comb begin
 up_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR = 
   swwr_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR | {1{load_ALARM_LUT_PERR.DIR_CQ_AI_DATA_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR[0] = 
    load_ALARM_LUT_PERR.DIR_CQ_AI_DATA_PERR ?
    new_ALARM_LUT_PERR.DIR_CQ_AI_DATA_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR[0], nxt_ALARM_LUT_PERR_DIR_CQ_AI_DATA_PERR[0], ALARM_LUT_PERR.DIR_CQ_AI_DATA_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.LDB_CQ_AI_DATA_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[0]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR = write_data[7:7] & req_up_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR = clr_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR;
 sw_nxt_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR;
always_comb begin
 up_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR = 
   swwr_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR | {1{load_ALARM_LUT_PERR.LDB_CQ_AI_DATA_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR[0] = 
    load_ALARM_LUT_PERR.LDB_CQ_AI_DATA_PERR ?
    new_ALARM_LUT_PERR.LDB_CQ_AI_DATA_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR[0], nxt_ALARM_LUT_PERR_LDB_CQ_AI_DATA_PERR[0], ALARM_LUT_PERR.LDB_CQ_AI_DATA_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.MSIX_TBL_W0_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_MSIX_TBL_W0_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_MSIX_TBL_W0_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[1]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_MSIX_TBL_W0_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_MSIX_TBL_W0_PERR = write_data[8:8] & req_up_ALARM_LUT_PERR_MSIX_TBL_W0_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_MSIX_TBL_W0_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W0_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_MSIX_TBL_W0_PERR = clr_ALARM_LUT_PERR_MSIX_TBL_W0_PERR;
 sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W0_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_MSIX_TBL_W0_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_MSIX_TBL_W0_PERR;
always_comb begin
 up_ALARM_LUT_PERR_MSIX_TBL_W0_PERR = 
   swwr_ALARM_LUT_PERR_MSIX_TBL_W0_PERR | {1{load_ALARM_LUT_PERR.MSIX_TBL_W0_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_MSIX_TBL_W0_PERR[0] = 
    load_ALARM_LUT_PERR.MSIX_TBL_W0_PERR ?
    new_ALARM_LUT_PERR.MSIX_TBL_W0_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W0_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_MSIX_TBL_W0_PERR[0], nxt_ALARM_LUT_PERR_MSIX_TBL_W0_PERR[0], ALARM_LUT_PERR.MSIX_TBL_W0_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.MSIX_TBL_W1_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_MSIX_TBL_W1_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_MSIX_TBL_W1_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[1]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_MSIX_TBL_W1_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_MSIX_TBL_W1_PERR = write_data[9:9] & req_up_ALARM_LUT_PERR_MSIX_TBL_W1_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_MSIX_TBL_W1_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W1_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_MSIX_TBL_W1_PERR = clr_ALARM_LUT_PERR_MSIX_TBL_W1_PERR;
 sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W1_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_MSIX_TBL_W1_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_MSIX_TBL_W1_PERR;
always_comb begin
 up_ALARM_LUT_PERR_MSIX_TBL_W1_PERR = 
   swwr_ALARM_LUT_PERR_MSIX_TBL_W1_PERR | {1{load_ALARM_LUT_PERR.MSIX_TBL_W1_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_MSIX_TBL_W1_PERR[0] = 
    load_ALARM_LUT_PERR.MSIX_TBL_W1_PERR ?
    new_ALARM_LUT_PERR.MSIX_TBL_W1_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W1_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_MSIX_TBL_W1_PERR[0], nxt_ALARM_LUT_PERR_MSIX_TBL_W1_PERR[0], ALARM_LUT_PERR.MSIX_TBL_W1_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.MSIX_TBL_W2_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_MSIX_TBL_W2_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_MSIX_TBL_W2_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[1]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_MSIX_TBL_W2_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_MSIX_TBL_W2_PERR = write_data[10:10] & req_up_ALARM_LUT_PERR_MSIX_TBL_W2_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_MSIX_TBL_W2_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W2_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_MSIX_TBL_W2_PERR = clr_ALARM_LUT_PERR_MSIX_TBL_W2_PERR;
 sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W2_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_MSIX_TBL_W2_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_MSIX_TBL_W2_PERR;
always_comb begin
 up_ALARM_LUT_PERR_MSIX_TBL_W2_PERR = 
   swwr_ALARM_LUT_PERR_MSIX_TBL_W2_PERR | {1{load_ALARM_LUT_PERR.MSIX_TBL_W2_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_MSIX_TBL_W2_PERR[0] = 
    load_ALARM_LUT_PERR.MSIX_TBL_W2_PERR ?
    new_ALARM_LUT_PERR.MSIX_TBL_W2_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W2_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_MSIX_TBL_W2_PERR[0], nxt_ALARM_LUT_PERR_MSIX_TBL_W2_PERR[0], ALARM_LUT_PERR.MSIX_TBL_W2_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.MSIX_TBL_W3_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_MSIX_TBL_W3_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_MSIX_TBL_W3_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[1]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_MSIX_TBL_W3_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_MSIX_TBL_W3_PERR = write_data[11:11] & req_up_ALARM_LUT_PERR_MSIX_TBL_W3_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_MSIX_TBL_W3_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W3_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_MSIX_TBL_W3_PERR = clr_ALARM_LUT_PERR_MSIX_TBL_W3_PERR;
 sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W3_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_MSIX_TBL_W3_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_MSIX_TBL_W3_PERR;
always_comb begin
 up_ALARM_LUT_PERR_MSIX_TBL_W3_PERR = 
   swwr_ALARM_LUT_PERR_MSIX_TBL_W3_PERR | {1{load_ALARM_LUT_PERR.MSIX_TBL_W3_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_MSIX_TBL_W3_PERR[0] = 
    load_ALARM_LUT_PERR.MSIX_TBL_W3_PERR ?
    new_ALARM_LUT_PERR.MSIX_TBL_W3_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_MSIX_TBL_W3_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_MSIX_TBL_W3_PERR[0], nxt_ALARM_LUT_PERR_MSIX_TBL_W3_PERR[0], ALARM_LUT_PERR.MSIX_TBL_W3_PERR[0])

// ----------------------------------------------------------------------
// ALARM_LUT_PERR.VF_SYND_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_LUT_PERR_VF_SYND_PERR;
always_comb begin
 req_up_ALARM_LUT_PERR_VF_SYND_PERR[0:0] = 
   {1{write_req_ALARM_LUT_PERR & be[1]}}
;
end

logic [0:0] clr_ALARM_LUT_PERR_VF_SYND_PERR;
always_comb begin
 clr_ALARM_LUT_PERR_VF_SYND_PERR = write_data[12:12] & req_up_ALARM_LUT_PERR_VF_SYND_PERR;

end
logic [0:0] swwr_ALARM_LUT_PERR_VF_SYND_PERR;
logic [0:0] sw_nxt_ALARM_LUT_PERR_VF_SYND_PERR;
always_comb begin
 swwr_ALARM_LUT_PERR_VF_SYND_PERR = clr_ALARM_LUT_PERR_VF_SYND_PERR;
 sw_nxt_ALARM_LUT_PERR_VF_SYND_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_LUT_PERR_VF_SYND_PERR;
logic [0:0] nxt_ALARM_LUT_PERR_VF_SYND_PERR;
always_comb begin
 up_ALARM_LUT_PERR_VF_SYND_PERR = 
   swwr_ALARM_LUT_PERR_VF_SYND_PERR | {1{load_ALARM_LUT_PERR.VF_SYND_PERR}};
end
always_comb begin
 nxt_ALARM_LUT_PERR_VF_SYND_PERR[0] = 
    load_ALARM_LUT_PERR.VF_SYND_PERR ?
    new_ALARM_LUT_PERR.VF_SYND_PERR[0] :
    sw_nxt_ALARM_LUT_PERR_VF_SYND_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_LUT_PERR_VF_SYND_PERR[0], nxt_ALARM_LUT_PERR_VF_SYND_PERR[0], ALARM_LUT_PERR.VF_SYND_PERR[0])

//---------------------------------------------------------------------
// EGRESS_LUT_ERR Address Decode
logic  addr_decode_EGRESS_LUT_ERR;
logic  write_req_EGRESS_LUT_ERR;
always_comb begin
   addr_decode_EGRESS_LUT_ERR = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == EGRESS_LUT_ERR_DECODE_ADDR) && req.valid ;
   write_req_EGRESS_LUT_ERR = IsMEMWr && addr_decode_EGRESS_LUT_ERR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.DIR_CQ_FMT_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR = write_data[0:0] & req_up_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR = clr_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR;
 sw_nxt_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR = 
   swwr_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR | {1{load_EGRESS_LUT_ERR.DIR_CQ_FMT_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR[0] = 
    load_EGRESS_LUT_ERR.DIR_CQ_FMT_PERR ?
    new_EGRESS_LUT_ERR.DIR_CQ_FMT_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR[0], nxt_EGRESS_LUT_ERR_DIR_CQ_FMT_PERR[0], EGRESS_LUT_ERR.DIR_CQ_FMT_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.DIR_CQ2VF_PF_RO_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR = write_data[1:1] & req_up_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR = clr_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR;
 sw_nxt_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR = 
   swwr_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR | {1{load_EGRESS_LUT_ERR.DIR_CQ2VF_PF_RO_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR[0] = 
    load_EGRESS_LUT_ERR.DIR_CQ2VF_PF_RO_PERR ?
    new_EGRESS_LUT_ERR.DIR_CQ2VF_PF_RO_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR[0], nxt_EGRESS_LUT_ERR_DIR_CQ2VF_PF_RO_PERR[0], EGRESS_LUT_ERR.DIR_CQ2VF_PF_RO_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.DIR_CQ_ADDR_U_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR = write_data[2:2] & req_up_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR = clr_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR;
 sw_nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR = 
   swwr_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR | {1{load_EGRESS_LUT_ERR.DIR_CQ_ADDR_U_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR[0] = 
    load_EGRESS_LUT_ERR.DIR_CQ_ADDR_U_PERR ?
    new_EGRESS_LUT_ERR.DIR_CQ_ADDR_U_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR[0], nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_U_PERR[0], EGRESS_LUT_ERR.DIR_CQ_ADDR_U_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.DIR_CQ_ADDR_L_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR = write_data[3:3] & req_up_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR = clr_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR;
 sw_nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR = 
   swwr_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR | {1{load_EGRESS_LUT_ERR.DIR_CQ_ADDR_L_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR[0] = 
    load_EGRESS_LUT_ERR.DIR_CQ_ADDR_L_PERR ?
    new_EGRESS_LUT_ERR.DIR_CQ_ADDR_L_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR[0], nxt_EGRESS_LUT_ERR_DIR_CQ_ADDR_L_PERR[0], EGRESS_LUT_ERR.DIR_CQ_ADDR_L_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.DIR_CQ_PASID_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR = write_data[4:4] & req_up_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR = clr_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR;
 sw_nxt_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR = 
   swwr_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR | {1{load_EGRESS_LUT_ERR.DIR_CQ_PASID_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR[0] = 
    load_EGRESS_LUT_ERR.DIR_CQ_PASID_PERR ?
    new_EGRESS_LUT_ERR.DIR_CQ_PASID_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR[0], nxt_EGRESS_LUT_ERR_DIR_CQ_PASID_PERR[0], EGRESS_LUT_ERR.DIR_CQ_PASID_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.LDB_CQ2VF_PF_RO_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR = write_data[5:5] & req_up_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR = clr_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR;
 sw_nxt_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR = 
   swwr_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR | {1{load_EGRESS_LUT_ERR.LDB_CQ2VF_PF_RO_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR[0] = 
    load_EGRESS_LUT_ERR.LDB_CQ2VF_PF_RO_PERR ?
    new_EGRESS_LUT_ERR.LDB_CQ2VF_PF_RO_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR[0], nxt_EGRESS_LUT_ERR_LDB_CQ2VF_PF_RO_PERR[0], EGRESS_LUT_ERR.LDB_CQ2VF_PF_RO_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.LDB_CQ_ADDR_U_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR = write_data[6:6] & req_up_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR = clr_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR;
 sw_nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR = 
   swwr_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR | {1{load_EGRESS_LUT_ERR.LDB_CQ_ADDR_U_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR[0] = 
    load_EGRESS_LUT_ERR.LDB_CQ_ADDR_U_PERR ?
    new_EGRESS_LUT_ERR.LDB_CQ_ADDR_U_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR[0], nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_U_PERR[0], EGRESS_LUT_ERR.LDB_CQ_ADDR_U_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.LDB_CQ_ADDR_L_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR = write_data[7:7] & req_up_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR = clr_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR;
 sw_nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR = 
   swwr_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR | {1{load_EGRESS_LUT_ERR.LDB_CQ_ADDR_L_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR[0] = 
    load_EGRESS_LUT_ERR.LDB_CQ_ADDR_L_PERR ?
    new_EGRESS_LUT_ERR.LDB_CQ_ADDR_L_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR[0], nxt_EGRESS_LUT_ERR_LDB_CQ_ADDR_L_PERR[0], EGRESS_LUT_ERR.LDB_CQ_ADDR_L_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.LDB_CQ_PASID_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR = write_data[8:8] & req_up_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR = clr_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR;
 sw_nxt_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR = 
   swwr_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR | {1{load_EGRESS_LUT_ERR.LDB_CQ_PASID_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR[0] = 
    load_EGRESS_LUT_ERR.LDB_CQ_PASID_PERR ?
    new_EGRESS_LUT_ERR.LDB_CQ_PASID_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR[0], nxt_EGRESS_LUT_ERR_LDB_CQ_PASID_PERR[0], EGRESS_LUT_ERR.LDB_CQ_PASID_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.LDB_QID2VQID_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_LDB_QID2VQID_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_LDB_QID2VQID_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_LDB_QID2VQID_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_LDB_QID2VQID_PERR = write_data[9:9] & req_up_EGRESS_LUT_ERR_LDB_QID2VQID_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_LDB_QID2VQID_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_LDB_QID2VQID_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_LDB_QID2VQID_PERR = clr_EGRESS_LUT_ERR_LDB_QID2VQID_PERR;
 sw_nxt_EGRESS_LUT_ERR_LDB_QID2VQID_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_LDB_QID2VQID_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_LDB_QID2VQID_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_LDB_QID2VQID_PERR = 
   swwr_EGRESS_LUT_ERR_LDB_QID2VQID_PERR | {1{load_EGRESS_LUT_ERR.LDB_QID2VQID_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_LDB_QID2VQID_PERR[0] = 
    load_EGRESS_LUT_ERR.LDB_QID2VQID_PERR ?
    new_EGRESS_LUT_ERR.LDB_QID2VQID_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_LDB_QID2VQID_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_LDB_QID2VQID_PERR[0], nxt_EGRESS_LUT_ERR_LDB_QID2VQID_PERR[0], EGRESS_LUT_ERR.LDB_QID2VQID_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.SCH_DATA_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_SCH_DATA_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_SCH_DATA_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_SCH_DATA_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_SCH_DATA_PERR = write_data[10:10] & req_up_EGRESS_LUT_ERR_SCH_DATA_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_SCH_DATA_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_SCH_DATA_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_SCH_DATA_PERR = clr_EGRESS_LUT_ERR_SCH_DATA_PERR;
 sw_nxt_EGRESS_LUT_ERR_SCH_DATA_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_SCH_DATA_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_SCH_DATA_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_SCH_DATA_PERR = 
   swwr_EGRESS_LUT_ERR_SCH_DATA_PERR | {1{load_EGRESS_LUT_ERR.SCH_DATA_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_SCH_DATA_PERR[0] = 
    load_EGRESS_LUT_ERR.SCH_DATA_PERR ?
    new_EGRESS_LUT_ERR.SCH_DATA_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_SCH_DATA_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_SCH_DATA_PERR[0], nxt_EGRESS_LUT_ERR_SCH_DATA_PERR[0], EGRESS_LUT_ERR.SCH_DATA_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.SCH_REQ_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_SCH_REQ_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_SCH_REQ_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_SCH_REQ_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_SCH_REQ_PERR = write_data[11:11] & req_up_EGRESS_LUT_ERR_SCH_REQ_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_SCH_REQ_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_SCH_REQ_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_SCH_REQ_PERR = clr_EGRESS_LUT_ERR_SCH_REQ_PERR;
 sw_nxt_EGRESS_LUT_ERR_SCH_REQ_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_SCH_REQ_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_SCH_REQ_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_SCH_REQ_PERR = 
   swwr_EGRESS_LUT_ERR_SCH_REQ_PERR | {1{load_EGRESS_LUT_ERR.SCH_REQ_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_SCH_REQ_PERR[0] = 
    load_EGRESS_LUT_ERR.SCH_REQ_PERR ?
    new_EGRESS_LUT_ERR.SCH_REQ_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_SCH_REQ_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_SCH_REQ_PERR[0], nxt_EGRESS_LUT_ERR_SCH_REQ_PERR[0], EGRESS_LUT_ERR.SCH_REQ_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.SCH_REQ_RERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_SCH_REQ_RERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_SCH_REQ_RERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_SCH_REQ_RERR;
always_comb begin
 clr_EGRESS_LUT_ERR_SCH_REQ_RERR = write_data[12:12] & req_up_EGRESS_LUT_ERR_SCH_REQ_RERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_SCH_REQ_RERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_SCH_REQ_RERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_SCH_REQ_RERR = clr_EGRESS_LUT_ERR_SCH_REQ_RERR;
 sw_nxt_EGRESS_LUT_ERR_SCH_REQ_RERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_SCH_REQ_RERR;
logic [0:0] nxt_EGRESS_LUT_ERR_SCH_REQ_RERR;
always_comb begin
 up_EGRESS_LUT_ERR_SCH_REQ_RERR = 
   swwr_EGRESS_LUT_ERR_SCH_REQ_RERR | {1{load_EGRESS_LUT_ERR.SCH_REQ_RERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_SCH_REQ_RERR[0] = 
    load_EGRESS_LUT_ERR.SCH_REQ_RERR ?
    new_EGRESS_LUT_ERR.SCH_REQ_RERR[0] :
    sw_nxt_EGRESS_LUT_ERR_SCH_REQ_RERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_SCH_REQ_RERR[0], nxt_EGRESS_LUT_ERR_SCH_REQ_RERR[0], EGRESS_LUT_ERR.SCH_REQ_RERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.SCH_REQ_PL_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_SCH_REQ_PL_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_SCH_REQ_PL_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_SCH_REQ_PL_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_SCH_REQ_PL_PERR = write_data[13:13] & req_up_EGRESS_LUT_ERR_SCH_REQ_PL_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_SCH_REQ_PL_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_SCH_REQ_PL_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_SCH_REQ_PL_PERR = clr_EGRESS_LUT_ERR_SCH_REQ_PL_PERR;
 sw_nxt_EGRESS_LUT_ERR_SCH_REQ_PL_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_SCH_REQ_PL_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_SCH_REQ_PL_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_SCH_REQ_PL_PERR = 
   swwr_EGRESS_LUT_ERR_SCH_REQ_PL_PERR | {1{load_EGRESS_LUT_ERR.SCH_REQ_PL_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_SCH_REQ_PL_PERR[0] = 
    load_EGRESS_LUT_ERR.SCH_REQ_PL_PERR ?
    new_EGRESS_LUT_ERR.SCH_REQ_PL_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_SCH_REQ_PL_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_SCH_REQ_PL_PERR[0], nxt_EGRESS_LUT_ERR_SCH_REQ_PL_PERR[0], EGRESS_LUT_ERR.SCH_REQ_PL_PERR[0])

// ----------------------------------------------------------------------
// EGRESS_LUT_ERR.SCH_INT_PL_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_EGRESS_LUT_ERR_SCH_INT_PL_PERR;
always_comb begin
 req_up_EGRESS_LUT_ERR_SCH_INT_PL_PERR[0:0] = 
   {1{write_req_EGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_EGRESS_LUT_ERR_SCH_INT_PL_PERR;
always_comb begin
 clr_EGRESS_LUT_ERR_SCH_INT_PL_PERR = write_data[14:14] & req_up_EGRESS_LUT_ERR_SCH_INT_PL_PERR;

end
logic [0:0] swwr_EGRESS_LUT_ERR_SCH_INT_PL_PERR;
logic [0:0] sw_nxt_EGRESS_LUT_ERR_SCH_INT_PL_PERR;
always_comb begin
 swwr_EGRESS_LUT_ERR_SCH_INT_PL_PERR = clr_EGRESS_LUT_ERR_SCH_INT_PL_PERR;
 sw_nxt_EGRESS_LUT_ERR_SCH_INT_PL_PERR = {1{1'b0}};

end
logic [0:0] up_EGRESS_LUT_ERR_SCH_INT_PL_PERR;
logic [0:0] nxt_EGRESS_LUT_ERR_SCH_INT_PL_PERR;
always_comb begin
 up_EGRESS_LUT_ERR_SCH_INT_PL_PERR = 
   swwr_EGRESS_LUT_ERR_SCH_INT_PL_PERR | {1{load_EGRESS_LUT_ERR.SCH_INT_PL_PERR}};
end
always_comb begin
 nxt_EGRESS_LUT_ERR_SCH_INT_PL_PERR[0] = 
    load_EGRESS_LUT_ERR.SCH_INT_PL_PERR ?
    new_EGRESS_LUT_ERR.SCH_INT_PL_PERR[0] :
    sw_nxt_EGRESS_LUT_ERR_SCH_INT_PL_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_EGRESS_LUT_ERR_SCH_INT_PL_PERR[0], nxt_EGRESS_LUT_ERR_SCH_INT_PL_PERR[0], EGRESS_LUT_ERR.SCH_INT_PL_PERR[0])

//---------------------------------------------------------------------
// INGRESS_LUT_ERR Address Decode
logic  addr_decode_INGRESS_LUT_ERR;
logic  write_req_INGRESS_LUT_ERR;
always_comb begin
   addr_decode_INGRESS_LUT_ERR = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == INGRESS_LUT_ERR_DECODE_ADDR) && req.valid ;
   write_req_INGRESS_LUT_ERR = IsMEMWr && addr_decode_INGRESS_LUT_ERR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.LDB_QID_CFG_V_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR = write_data[0:0] & req_up_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR = clr_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR;
 sw_nxt_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR = 
   swwr_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR | {1{load_INGRESS_LUT_ERR.LDB_QID_CFG_V_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR[0] = 
    load_INGRESS_LUT_ERR.LDB_QID_CFG_V_PERR ?
    new_INGRESS_LUT_ERR.LDB_QID_CFG_V_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR[0], nxt_INGRESS_LUT_ERR_LDB_QID_CFG_V_PERR[0], INGRESS_LUT_ERR.LDB_QID_CFG_V_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.DIR_PP2VAS_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_DIR_PP2VAS_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_DIR_PP2VAS_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_DIR_PP2VAS_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_DIR_PP2VAS_PERR = write_data[1:1] & req_up_INGRESS_LUT_ERR_DIR_PP2VAS_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_DIR_PP2VAS_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_DIR_PP2VAS_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_DIR_PP2VAS_PERR = clr_INGRESS_LUT_ERR_DIR_PP2VAS_PERR;
 sw_nxt_INGRESS_LUT_ERR_DIR_PP2VAS_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_DIR_PP2VAS_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_DIR_PP2VAS_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_DIR_PP2VAS_PERR = 
   swwr_INGRESS_LUT_ERR_DIR_PP2VAS_PERR | {1{load_INGRESS_LUT_ERR.DIR_PP2VAS_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_DIR_PP2VAS_PERR[0] = 
    load_INGRESS_LUT_ERR.DIR_PP2VAS_PERR ?
    new_INGRESS_LUT_ERR.DIR_PP2VAS_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_DIR_PP2VAS_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_DIR_PP2VAS_PERR[0], nxt_INGRESS_LUT_ERR_DIR_PP2VAS_PERR[0], INGRESS_LUT_ERR.DIR_PP2VAS_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.LDB_PP2VAS_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_LDB_PP2VAS_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_LDB_PP2VAS_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_LDB_PP2VAS_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_LDB_PP2VAS_PERR = write_data[2:2] & req_up_INGRESS_LUT_ERR_LDB_PP2VAS_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_LDB_PP2VAS_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_LDB_PP2VAS_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_LDB_PP2VAS_PERR = clr_INGRESS_LUT_ERR_LDB_PP2VAS_PERR;
 sw_nxt_INGRESS_LUT_ERR_LDB_PP2VAS_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_LDB_PP2VAS_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_LDB_PP2VAS_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_LDB_PP2VAS_PERR = 
   swwr_INGRESS_LUT_ERR_LDB_PP2VAS_PERR | {1{load_INGRESS_LUT_ERR.LDB_PP2VAS_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_LDB_PP2VAS_PERR[0] = 
    load_INGRESS_LUT_ERR.LDB_PP2VAS_PERR ?
    new_INGRESS_LUT_ERR.LDB_PP2VAS_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_LDB_PP2VAS_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_LDB_PP2VAS_PERR[0], nxt_INGRESS_LUT_ERR_LDB_PP2VAS_PERR[0], INGRESS_LUT_ERR.LDB_PP2VAS_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.DIR_VASQID_V_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_DIR_VASQID_V_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_DIR_VASQID_V_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_DIR_VASQID_V_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_DIR_VASQID_V_PERR = write_data[3:3] & req_up_INGRESS_LUT_ERR_DIR_VASQID_V_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_DIR_VASQID_V_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_DIR_VASQID_V_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_DIR_VASQID_V_PERR = clr_INGRESS_LUT_ERR_DIR_VASQID_V_PERR;
 sw_nxt_INGRESS_LUT_ERR_DIR_VASQID_V_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_DIR_VASQID_V_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_DIR_VASQID_V_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_DIR_VASQID_V_PERR = 
   swwr_INGRESS_LUT_ERR_DIR_VASQID_V_PERR | {1{load_INGRESS_LUT_ERR.DIR_VASQID_V_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_DIR_VASQID_V_PERR[0] = 
    load_INGRESS_LUT_ERR.DIR_VASQID_V_PERR ?
    new_INGRESS_LUT_ERR.DIR_VASQID_V_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_DIR_VASQID_V_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_DIR_VASQID_V_PERR[0], nxt_INGRESS_LUT_ERR_DIR_VASQID_V_PERR[0], INGRESS_LUT_ERR.DIR_VASQID_V_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.LDB_VASQID_V_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_LDB_VASQID_V_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_LDB_VASQID_V_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_LDB_VASQID_V_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_LDB_VASQID_V_PERR = write_data[4:4] & req_up_INGRESS_LUT_ERR_LDB_VASQID_V_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_LDB_VASQID_V_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_LDB_VASQID_V_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_LDB_VASQID_V_PERR = clr_INGRESS_LUT_ERR_LDB_VASQID_V_PERR;
 sw_nxt_INGRESS_LUT_ERR_LDB_VASQID_V_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_LDB_VASQID_V_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_LDB_VASQID_V_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_LDB_VASQID_V_PERR = 
   swwr_INGRESS_LUT_ERR_LDB_VASQID_V_PERR | {1{load_INGRESS_LUT_ERR.LDB_VASQID_V_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_LDB_VASQID_V_PERR[0] = 
    load_INGRESS_LUT_ERR.LDB_VASQID_V_PERR ?
    new_INGRESS_LUT_ERR.LDB_VASQID_V_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_LDB_VASQID_V_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_LDB_VASQID_V_PERR[0], nxt_INGRESS_LUT_ERR_LDB_VASQID_V_PERR[0], INGRESS_LUT_ERR.LDB_VASQID_V_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.LDB_QID_V_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_LDB_QID_V_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_LDB_QID_V_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_LDB_QID_V_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_LDB_QID_V_PERR = write_data[5:5] & req_up_INGRESS_LUT_ERR_LDB_QID_V_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_LDB_QID_V_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_LDB_QID_V_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_LDB_QID_V_PERR = clr_INGRESS_LUT_ERR_LDB_QID_V_PERR;
 sw_nxt_INGRESS_LUT_ERR_LDB_QID_V_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_LDB_QID_V_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_LDB_QID_V_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_LDB_QID_V_PERR = 
   swwr_INGRESS_LUT_ERR_LDB_QID_V_PERR | {1{load_INGRESS_LUT_ERR.LDB_QID_V_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_LDB_QID_V_PERR[0] = 
    load_INGRESS_LUT_ERR.LDB_QID_V_PERR ?
    new_INGRESS_LUT_ERR.LDB_QID_V_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_LDB_QID_V_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_LDB_QID_V_PERR[0], nxt_INGRESS_LUT_ERR_LDB_QID_V_PERR[0], INGRESS_LUT_ERR.LDB_QID_V_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.DIR_QID_V_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_DIR_QID_V_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_DIR_QID_V_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_DIR_QID_V_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_DIR_QID_V_PERR = write_data[6:6] & req_up_INGRESS_LUT_ERR_DIR_QID_V_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_DIR_QID_V_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_DIR_QID_V_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_DIR_QID_V_PERR = clr_INGRESS_LUT_ERR_DIR_QID_V_PERR;
 sw_nxt_INGRESS_LUT_ERR_DIR_QID_V_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_DIR_QID_V_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_DIR_QID_V_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_DIR_QID_V_PERR = 
   swwr_INGRESS_LUT_ERR_DIR_QID_V_PERR | {1{load_INGRESS_LUT_ERR.DIR_QID_V_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_DIR_QID_V_PERR[0] = 
    load_INGRESS_LUT_ERR.DIR_QID_V_PERR ?
    new_INGRESS_LUT_ERR.DIR_QID_V_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_DIR_QID_V_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_DIR_QID_V_PERR[0], nxt_INGRESS_LUT_ERR_DIR_QID_V_PERR[0], INGRESS_LUT_ERR.DIR_QID_V_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.DIR_QID_ITS_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_DIR_QID_ITS_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_DIR_QID_ITS_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[0]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_DIR_QID_ITS_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_DIR_QID_ITS_PERR = write_data[7:7] & req_up_INGRESS_LUT_ERR_DIR_QID_ITS_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_DIR_QID_ITS_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_DIR_QID_ITS_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_DIR_QID_ITS_PERR = clr_INGRESS_LUT_ERR_DIR_QID_ITS_PERR;
 sw_nxt_INGRESS_LUT_ERR_DIR_QID_ITS_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_DIR_QID_ITS_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_DIR_QID_ITS_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_DIR_QID_ITS_PERR = 
   swwr_INGRESS_LUT_ERR_DIR_QID_ITS_PERR | {1{load_INGRESS_LUT_ERR.DIR_QID_ITS_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_DIR_QID_ITS_PERR[0] = 
    load_INGRESS_LUT_ERR.DIR_QID_ITS_PERR ?
    new_INGRESS_LUT_ERR.DIR_QID_ITS_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_DIR_QID_ITS_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_DIR_QID_ITS_PERR[0], nxt_INGRESS_LUT_ERR_DIR_QID_ITS_PERR[0], INGRESS_LUT_ERR.DIR_QID_ITS_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.LDB_QID_ITS_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_LDB_QID_ITS_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_LDB_QID_ITS_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_LDB_QID_ITS_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_LDB_QID_ITS_PERR = write_data[8:8] & req_up_INGRESS_LUT_ERR_LDB_QID_ITS_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_LDB_QID_ITS_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_LDB_QID_ITS_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_LDB_QID_ITS_PERR = clr_INGRESS_LUT_ERR_LDB_QID_ITS_PERR;
 sw_nxt_INGRESS_LUT_ERR_LDB_QID_ITS_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_LDB_QID_ITS_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_LDB_QID_ITS_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_LDB_QID_ITS_PERR = 
   swwr_INGRESS_LUT_ERR_LDB_QID_ITS_PERR | {1{load_INGRESS_LUT_ERR.LDB_QID_ITS_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_LDB_QID_ITS_PERR[0] = 
    load_INGRESS_LUT_ERR.LDB_QID_ITS_PERR ?
    new_INGRESS_LUT_ERR.LDB_QID_ITS_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_LDB_QID_ITS_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_LDB_QID_ITS_PERR[0], nxt_INGRESS_LUT_ERR_LDB_QID_ITS_PERR[0], INGRESS_LUT_ERR.LDB_QID_ITS_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.VF_LDB_VQID_V_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR = write_data[9:9] & req_up_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR = clr_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR;
 sw_nxt_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR = 
   swwr_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR | {1{load_INGRESS_LUT_ERR.VF_LDB_VQID_V_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR[0] = 
    load_INGRESS_LUT_ERR.VF_LDB_VQID_V_PERR ?
    new_INGRESS_LUT_ERR.VF_LDB_VQID_V_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR[0], nxt_INGRESS_LUT_ERR_VF_LDB_VQID_V_PERR[0], INGRESS_LUT_ERR.VF_LDB_VQID_V_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.VF_DIR_VQID_V_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR = write_data[10:10] & req_up_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR = clr_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR;
 sw_nxt_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR = 
   swwr_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR | {1{load_INGRESS_LUT_ERR.VF_DIR_VQID_V_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR[0] = 
    load_INGRESS_LUT_ERR.VF_DIR_VQID_V_PERR ?
    new_INGRESS_LUT_ERR.VF_DIR_VQID_V_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR[0], nxt_INGRESS_LUT_ERR_VF_DIR_VQID_V_PERR[0], INGRESS_LUT_ERR.VF_DIR_VQID_V_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.VF_LDB_VQID2QID_MB_ECC_ERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR;
always_comb begin
 clr_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR = write_data[11:11] & req_up_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR = clr_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR;
 sw_nxt_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR;
logic [0:0] nxt_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR;
always_comb begin
 up_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR = 
   swwr_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR | {1{load_INGRESS_LUT_ERR.VF_LDB_VQID2QID_MB_ECC_ERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR[0] = 
    load_INGRESS_LUT_ERR.VF_LDB_VQID2QID_MB_ECC_ERR ?
    new_INGRESS_LUT_ERR.VF_LDB_VQID2QID_MB_ECC_ERR[0] :
    sw_nxt_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR[0], nxt_INGRESS_LUT_ERR_VF_LDB_VQID2QID_MB_ECC_ERR[0], INGRESS_LUT_ERR.VF_LDB_VQID2QID_MB_ECC_ERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.VF_DIR_VQID2QID_MB_ECC_ERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR;
always_comb begin
 clr_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR = write_data[12:12] & req_up_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR = clr_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR;
 sw_nxt_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR;
logic [0:0] nxt_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR;
always_comb begin
 up_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR = 
   swwr_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR | {1{load_INGRESS_LUT_ERR.VF_DIR_VQID2QID_MB_ECC_ERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR[0] = 
    load_INGRESS_LUT_ERR.VF_DIR_VQID2QID_MB_ECC_ERR ?
    new_INGRESS_LUT_ERR.VF_DIR_VQID2QID_MB_ECC_ERR[0] :
    sw_nxt_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR[0], nxt_INGRESS_LUT_ERR_VF_DIR_VQID2QID_MB_ECC_ERR[0], INGRESS_LUT_ERR.VF_DIR_VQID2QID_MB_ECC_ERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.LDB_PP_V_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_LDB_PP_V_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_LDB_PP_V_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_LDB_PP_V_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_LDB_PP_V_PERR = write_data[13:13] & req_up_INGRESS_LUT_ERR_LDB_PP_V_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_LDB_PP_V_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_LDB_PP_V_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_LDB_PP_V_PERR = clr_INGRESS_LUT_ERR_LDB_PP_V_PERR;
 sw_nxt_INGRESS_LUT_ERR_LDB_PP_V_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_LDB_PP_V_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_LDB_PP_V_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_LDB_PP_V_PERR = 
   swwr_INGRESS_LUT_ERR_LDB_PP_V_PERR | {1{load_INGRESS_LUT_ERR.LDB_PP_V_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_LDB_PP_V_PERR[0] = 
    load_INGRESS_LUT_ERR.LDB_PP_V_PERR ?
    new_INGRESS_LUT_ERR.LDB_PP_V_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_LDB_PP_V_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_LDB_PP_V_PERR[0], nxt_INGRESS_LUT_ERR_LDB_PP_V_PERR[0], INGRESS_LUT_ERR.LDB_PP_V_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.DIR_PP_V_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_DIR_PP_V_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_DIR_PP_V_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_DIR_PP_V_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_DIR_PP_V_PERR = write_data[14:14] & req_up_INGRESS_LUT_ERR_DIR_PP_V_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_DIR_PP_V_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_DIR_PP_V_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_DIR_PP_V_PERR = clr_INGRESS_LUT_ERR_DIR_PP_V_PERR;
 sw_nxt_INGRESS_LUT_ERR_DIR_PP_V_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_DIR_PP_V_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_DIR_PP_V_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_DIR_PP_V_PERR = 
   swwr_INGRESS_LUT_ERR_DIR_PP_V_PERR | {1{load_INGRESS_LUT_ERR.DIR_PP_V_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_DIR_PP_V_PERR[0] = 
    load_INGRESS_LUT_ERR.DIR_PP_V_PERR ?
    new_INGRESS_LUT_ERR.DIR_PP_V_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_DIR_PP_V_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_DIR_PP_V_PERR[0], nxt_INGRESS_LUT_ERR_DIR_PP_V_PERR[0], INGRESS_LUT_ERR.DIR_PP_V_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.VF_LDB_VPP_V_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[1]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR = write_data[15:15] & req_up_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR = clr_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR;
 sw_nxt_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR = 
   swwr_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR | {1{load_INGRESS_LUT_ERR.VF_LDB_VPP_V_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR[0] = 
    load_INGRESS_LUT_ERR.VF_LDB_VPP_V_PERR ?
    new_INGRESS_LUT_ERR.VF_LDB_VPP_V_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR[0], nxt_INGRESS_LUT_ERR_VF_LDB_VPP_V_PERR[0], INGRESS_LUT_ERR.VF_LDB_VPP_V_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.VF_DIR_VPP_V_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[2]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR = write_data[16:16] & req_up_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR = clr_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR;
 sw_nxt_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR = 
   swwr_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR | {1{load_INGRESS_LUT_ERR.VF_DIR_VPP_V_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR[0] = 
    load_INGRESS_LUT_ERR.VF_DIR_VPP_V_PERR ?
    new_INGRESS_LUT_ERR.VF_DIR_VPP_V_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR[0], nxt_INGRESS_LUT_ERR_VF_DIR_VPP_V_PERR[0], INGRESS_LUT_ERR.VF_DIR_VPP_V_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.VF_LDB_VPP2PP_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[2]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR = write_data[17:17] & req_up_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR = clr_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR;
 sw_nxt_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR = 
   swwr_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR | {1{load_INGRESS_LUT_ERR.VF_LDB_VPP2PP_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR[0] = 
    load_INGRESS_LUT_ERR.VF_LDB_VPP2PP_PERR ?
    new_INGRESS_LUT_ERR.VF_LDB_VPP2PP_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR[0], nxt_INGRESS_LUT_ERR_VF_LDB_VPP2PP_PERR[0], INGRESS_LUT_ERR.VF_LDB_VPP2PP_PERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.VF_DIR_VPP2PP_MB_ECC_ERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[2]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR;
always_comb begin
 clr_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR = write_data[18:18] & req_up_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR = clr_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR;
 sw_nxt_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR;
logic [0:0] nxt_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR;
always_comb begin
 up_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR = 
   swwr_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR | {1{load_INGRESS_LUT_ERR.VF_DIR_VPP2PP_MB_ECC_ERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR[0] = 
    load_INGRESS_LUT_ERR.VF_DIR_VPP2PP_MB_ECC_ERR ?
    new_INGRESS_LUT_ERR.VF_DIR_VPP2PP_MB_ECC_ERR[0] :
    sw_nxt_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR[0], nxt_INGRESS_LUT_ERR_VF_DIR_VPP2PP_MB_ECC_ERR[0], INGRESS_LUT_ERR.VF_DIR_VPP2PP_MB_ECC_ERR[0])

// ----------------------------------------------------------------------
// INGRESS_LUT_ERR.PORT_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_INGRESS_LUT_ERR_PORT_PERR;
always_comb begin
 req_up_INGRESS_LUT_ERR_PORT_PERR[0:0] = 
   {1{write_req_INGRESS_LUT_ERR & be[2]}}
;
end

logic [0:0] clr_INGRESS_LUT_ERR_PORT_PERR;
always_comb begin
 clr_INGRESS_LUT_ERR_PORT_PERR = write_data[19:19] & req_up_INGRESS_LUT_ERR_PORT_PERR;

end
logic [0:0] swwr_INGRESS_LUT_ERR_PORT_PERR;
logic [0:0] sw_nxt_INGRESS_LUT_ERR_PORT_PERR;
always_comb begin
 swwr_INGRESS_LUT_ERR_PORT_PERR = clr_INGRESS_LUT_ERR_PORT_PERR;
 sw_nxt_INGRESS_LUT_ERR_PORT_PERR = {1{1'b0}};

end
logic [0:0] up_INGRESS_LUT_ERR_PORT_PERR;
logic [0:0] nxt_INGRESS_LUT_ERR_PORT_PERR;
always_comb begin
 up_INGRESS_LUT_ERR_PORT_PERR = 
   swwr_INGRESS_LUT_ERR_PORT_PERR | {1{load_INGRESS_LUT_ERR.PORT_PERR}};
end
always_comb begin
 nxt_INGRESS_LUT_ERR_PORT_PERR[0] = 
    load_INGRESS_LUT_ERR.PORT_PERR ?
    new_INGRESS_LUT_ERR.PORT_PERR[0] :
    sw_nxt_INGRESS_LUT_ERR_PORT_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_LUT_ERR_PORT_PERR[0], nxt_INGRESS_LUT_ERR_PORT_PERR[0], INGRESS_LUT_ERR.PORT_PERR[0])

//---------------------------------------------------------------------
// ALARM_ERR Address Decode
logic  addr_decode_ALARM_ERR;
logic  write_req_ALARM_ERR;
always_comb begin
   addr_decode_ALARM_ERR = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == ALARM_ERR_DECODE_ADDR) && req.valid ;
   write_req_ALARM_ERR = IsMEMWr && addr_decode_ALARM_ERR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// ALARM_ERR.CQ_ADDR_OVERFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_ERR_CQ_ADDR_OVERFLOW;
always_comb begin
 req_up_ALARM_ERR_CQ_ADDR_OVERFLOW[0:0] = 
   {1{write_req_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_ERR_CQ_ADDR_OVERFLOW;
always_comb begin
 clr_ALARM_ERR_CQ_ADDR_OVERFLOW = write_data[0:0] & req_up_ALARM_ERR_CQ_ADDR_OVERFLOW;

end
logic [0:0] swwr_ALARM_ERR_CQ_ADDR_OVERFLOW;
logic [0:0] sw_nxt_ALARM_ERR_CQ_ADDR_OVERFLOW;
always_comb begin
 swwr_ALARM_ERR_CQ_ADDR_OVERFLOW = clr_ALARM_ERR_CQ_ADDR_OVERFLOW;
 sw_nxt_ALARM_ERR_CQ_ADDR_OVERFLOW = {1{1'b0}};

end
logic [0:0] up_ALARM_ERR_CQ_ADDR_OVERFLOW;
logic [0:0] nxt_ALARM_ERR_CQ_ADDR_OVERFLOW;
always_comb begin
 up_ALARM_ERR_CQ_ADDR_OVERFLOW = 
   swwr_ALARM_ERR_CQ_ADDR_OVERFLOW | {1{load_ALARM_ERR.CQ_ADDR_OVERFLOW}};
end
always_comb begin
 nxt_ALARM_ERR_CQ_ADDR_OVERFLOW[0] = 
    load_ALARM_ERR.CQ_ADDR_OVERFLOW ?
    new_ALARM_ERR.CQ_ADDR_OVERFLOW[0] :
    sw_nxt_ALARM_ERR_CQ_ADDR_OVERFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_ERR_CQ_ADDR_OVERFLOW[0], nxt_ALARM_ERR_CQ_ADDR_OVERFLOW[0], ALARM_ERR.CQ_ADDR_OVERFLOW[0])

// ----------------------------------------------------------------------
// ALARM_ERR.INGRESS_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_ERR_INGRESS_PERR;
always_comb begin
 req_up_ALARM_ERR_INGRESS_PERR[0:0] = 
   {1{write_req_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_ERR_INGRESS_PERR;
always_comb begin
 clr_ALARM_ERR_INGRESS_PERR = write_data[1:1] & req_up_ALARM_ERR_INGRESS_PERR;

end
logic [0:0] swwr_ALARM_ERR_INGRESS_PERR;
logic [0:0] sw_nxt_ALARM_ERR_INGRESS_PERR;
always_comb begin
 swwr_ALARM_ERR_INGRESS_PERR = clr_ALARM_ERR_INGRESS_PERR;
 sw_nxt_ALARM_ERR_INGRESS_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_ERR_INGRESS_PERR;
logic [0:0] nxt_ALARM_ERR_INGRESS_PERR;
always_comb begin
 up_ALARM_ERR_INGRESS_PERR = 
   swwr_ALARM_ERR_INGRESS_PERR | {1{load_ALARM_ERR.INGRESS_PERR}};
end
always_comb begin
 nxt_ALARM_ERR_INGRESS_PERR[0] = 
    load_ALARM_ERR.INGRESS_PERR ?
    new_ALARM_ERR.INGRESS_PERR[0] :
    sw_nxt_ALARM_ERR_INGRESS_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_ERR_INGRESS_PERR[0], nxt_ALARM_ERR_INGRESS_PERR[0], ALARM_ERR.INGRESS_PERR[0])

// ----------------------------------------------------------------------
// ALARM_ERR.EGRESS_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_ERR_EGRESS_PERR;
always_comb begin
 req_up_ALARM_ERR_EGRESS_PERR[0:0] = 
   {1{write_req_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_ERR_EGRESS_PERR;
always_comb begin
 clr_ALARM_ERR_EGRESS_PERR = write_data[2:2] & req_up_ALARM_ERR_EGRESS_PERR;

end
logic [0:0] swwr_ALARM_ERR_EGRESS_PERR;
logic [0:0] sw_nxt_ALARM_ERR_EGRESS_PERR;
always_comb begin
 swwr_ALARM_ERR_EGRESS_PERR = clr_ALARM_ERR_EGRESS_PERR;
 sw_nxt_ALARM_ERR_EGRESS_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_ERR_EGRESS_PERR;
logic [0:0] nxt_ALARM_ERR_EGRESS_PERR;
always_comb begin
 up_ALARM_ERR_EGRESS_PERR = 
   swwr_ALARM_ERR_EGRESS_PERR | {1{load_ALARM_ERR.EGRESS_PERR}};
end
always_comb begin
 nxt_ALARM_ERR_EGRESS_PERR[0] = 
    load_ALARM_ERR.EGRESS_PERR ?
    new_ALARM_ERR.EGRESS_PERR[0] :
    sw_nxt_ALARM_ERR_EGRESS_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_ERR_EGRESS_PERR[0], nxt_ALARM_ERR_EGRESS_PERR[0], ALARM_ERR.EGRESS_PERR[0])

// ----------------------------------------------------------------------
// ALARM_ERR.ALARM_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_ERR_ALARM_PERR;
always_comb begin
 req_up_ALARM_ERR_ALARM_PERR[0:0] = 
   {1{write_req_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_ERR_ALARM_PERR;
always_comb begin
 clr_ALARM_ERR_ALARM_PERR = write_data[3:3] & req_up_ALARM_ERR_ALARM_PERR;

end
logic [0:0] swwr_ALARM_ERR_ALARM_PERR;
logic [0:0] sw_nxt_ALARM_ERR_ALARM_PERR;
always_comb begin
 swwr_ALARM_ERR_ALARM_PERR = clr_ALARM_ERR_ALARM_PERR;
 sw_nxt_ALARM_ERR_ALARM_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_ERR_ALARM_PERR;
logic [0:0] nxt_ALARM_ERR_ALARM_PERR;
always_comb begin
 up_ALARM_ERR_ALARM_PERR = 
   swwr_ALARM_ERR_ALARM_PERR | {1{load_ALARM_ERR.ALARM_PERR}};
end
always_comb begin
 nxt_ALARM_ERR_ALARM_PERR[0] = 
    load_ALARM_ERR.ALARM_PERR ?
    new_ALARM_ERR.ALARM_PERR[0] :
    sw_nxt_ALARM_ERR_ALARM_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_ERR_ALARM_PERR[0], nxt_ALARM_ERR_ALARM_PERR[0], ALARM_ERR.ALARM_PERR[0])

// ----------------------------------------------------------------------
// ALARM_ERR.SCH_SM_ERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_ERR_SCH_SM_ERR;
always_comb begin
 req_up_ALARM_ERR_SCH_SM_ERR[0:0] = 
   {1{write_req_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_ERR_SCH_SM_ERR;
always_comb begin
 clr_ALARM_ERR_SCH_SM_ERR = write_data[4:4] & req_up_ALARM_ERR_SCH_SM_ERR;

end
logic [0:0] swwr_ALARM_ERR_SCH_SM_ERR;
logic [0:0] sw_nxt_ALARM_ERR_SCH_SM_ERR;
always_comb begin
 swwr_ALARM_ERR_SCH_SM_ERR = clr_ALARM_ERR_SCH_SM_ERR;
 sw_nxt_ALARM_ERR_SCH_SM_ERR = {1{1'b0}};

end
logic [0:0] up_ALARM_ERR_SCH_SM_ERR;
logic [0:0] nxt_ALARM_ERR_SCH_SM_ERR;
always_comb begin
 up_ALARM_ERR_SCH_SM_ERR = 
   swwr_ALARM_ERR_SCH_SM_ERR | {1{load_ALARM_ERR.SCH_SM_ERR}};
end
always_comb begin
 nxt_ALARM_ERR_SCH_SM_ERR[0] = 
    load_ALARM_ERR.SCH_SM_ERR ?
    new_ALARM_ERR.SCH_SM_ERR[0] :
    sw_nxt_ALARM_ERR_SCH_SM_ERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_ERR_SCH_SM_ERR[0], nxt_ALARM_ERR_SCH_SM_ERR[0], ALARM_ERR.SCH_SM_ERR[0])

// ----------------------------------------------------------------------
// ALARM_ERR.FIFO_UNDERFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_ERR_FIFO_UNDERFLOW;
always_comb begin
 req_up_ALARM_ERR_FIFO_UNDERFLOW[0:0] = 
   {1{write_req_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_ERR_FIFO_UNDERFLOW;
always_comb begin
 clr_ALARM_ERR_FIFO_UNDERFLOW = write_data[5:5] & req_up_ALARM_ERR_FIFO_UNDERFLOW;

end
logic [0:0] swwr_ALARM_ERR_FIFO_UNDERFLOW;
logic [0:0] sw_nxt_ALARM_ERR_FIFO_UNDERFLOW;
always_comb begin
 swwr_ALARM_ERR_FIFO_UNDERFLOW = clr_ALARM_ERR_FIFO_UNDERFLOW;
 sw_nxt_ALARM_ERR_FIFO_UNDERFLOW = {1{1'b0}};

end
logic [0:0] up_ALARM_ERR_FIFO_UNDERFLOW;
logic [0:0] nxt_ALARM_ERR_FIFO_UNDERFLOW;
always_comb begin
 up_ALARM_ERR_FIFO_UNDERFLOW = 
   swwr_ALARM_ERR_FIFO_UNDERFLOW | {1{load_ALARM_ERR.FIFO_UNDERFLOW}};
end
always_comb begin
 nxt_ALARM_ERR_FIFO_UNDERFLOW[0] = 
    load_ALARM_ERR.FIFO_UNDERFLOW ?
    new_ALARM_ERR.FIFO_UNDERFLOW[0] :
    sw_nxt_ALARM_ERR_FIFO_UNDERFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_ERR_FIFO_UNDERFLOW[0], nxt_ALARM_ERR_FIFO_UNDERFLOW[0], ALARM_ERR.FIFO_UNDERFLOW[0])

// ----------------------------------------------------------------------
// ALARM_ERR.FIFO_OVERFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_ERR_FIFO_OVERFLOW;
always_comb begin
 req_up_ALARM_ERR_FIFO_OVERFLOW[0:0] = 
   {1{write_req_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_ERR_FIFO_OVERFLOW;
always_comb begin
 clr_ALARM_ERR_FIFO_OVERFLOW = write_data[6:6] & req_up_ALARM_ERR_FIFO_OVERFLOW;

end
logic [0:0] swwr_ALARM_ERR_FIFO_OVERFLOW;
logic [0:0] sw_nxt_ALARM_ERR_FIFO_OVERFLOW;
always_comb begin
 swwr_ALARM_ERR_FIFO_OVERFLOW = clr_ALARM_ERR_FIFO_OVERFLOW;
 sw_nxt_ALARM_ERR_FIFO_OVERFLOW = {1{1'b0}};

end
logic [0:0] up_ALARM_ERR_FIFO_OVERFLOW;
logic [0:0] nxt_ALARM_ERR_FIFO_OVERFLOW;
always_comb begin
 up_ALARM_ERR_FIFO_OVERFLOW = 
   swwr_ALARM_ERR_FIFO_OVERFLOW | {1{load_ALARM_ERR.FIFO_OVERFLOW}};
end
always_comb begin
 nxt_ALARM_ERR_FIFO_OVERFLOW[0] = 
    load_ALARM_ERR.FIFO_OVERFLOW ?
    new_ALARM_ERR.FIFO_OVERFLOW[0] :
    sw_nxt_ALARM_ERR_FIFO_OVERFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_ERR_FIFO_OVERFLOW[0], nxt_ALARM_ERR_FIFO_OVERFLOW[0], ALARM_ERR.FIFO_OVERFLOW[0])

// ----------------------------------------------------------------------
// ALARM_ERR.SCH_WB_PERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_ERR_SCH_WB_PERR;
always_comb begin
 req_up_ALARM_ERR_SCH_WB_PERR[0:0] = 
   {1{write_req_ALARM_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_ERR_SCH_WB_PERR;
always_comb begin
 clr_ALARM_ERR_SCH_WB_PERR = write_data[7:7] & req_up_ALARM_ERR_SCH_WB_PERR;

end
logic [0:0] swwr_ALARM_ERR_SCH_WB_PERR;
logic [0:0] sw_nxt_ALARM_ERR_SCH_WB_PERR;
always_comb begin
 swwr_ALARM_ERR_SCH_WB_PERR = clr_ALARM_ERR_SCH_WB_PERR;
 sw_nxt_ALARM_ERR_SCH_WB_PERR = {1{1'b0}};

end
logic [0:0] up_ALARM_ERR_SCH_WB_PERR;
logic [0:0] nxt_ALARM_ERR_SCH_WB_PERR;
always_comb begin
 up_ALARM_ERR_SCH_WB_PERR = 
   swwr_ALARM_ERR_SCH_WB_PERR | {1{load_ALARM_ERR.SCH_WB_PERR}};
end
always_comb begin
 nxt_ALARM_ERR_SCH_WB_PERR[0] = 
    load_ALARM_ERR.SCH_WB_PERR ?
    new_ALARM_ERR.SCH_WB_PERR[0] :
    sw_nxt_ALARM_ERR_SCH_WB_PERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_ERR_SCH_WB_PERR[0], nxt_ALARM_ERR_SCH_WB_PERR[0], ALARM_ERR.SCH_WB_PERR[0])

// ----------------------------------------------------------------------
// ALARM_ERR.ALARM_INT_ERR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_ERR_ALARM_INT_ERR;
always_comb begin
 req_up_ALARM_ERR_ALARM_INT_ERR[0:0] = 
   {1{write_req_ALARM_ERR & be[1]}}
;
end

logic [0:0] clr_ALARM_ERR_ALARM_INT_ERR;
always_comb begin
 clr_ALARM_ERR_ALARM_INT_ERR = write_data[8:8] & req_up_ALARM_ERR_ALARM_INT_ERR;

end
logic [0:0] swwr_ALARM_ERR_ALARM_INT_ERR;
logic [0:0] sw_nxt_ALARM_ERR_ALARM_INT_ERR;
always_comb begin
 swwr_ALARM_ERR_ALARM_INT_ERR = clr_ALARM_ERR_ALARM_INT_ERR;
 sw_nxt_ALARM_ERR_ALARM_INT_ERR = {1{1'b0}};

end
logic [0:0] up_ALARM_ERR_ALARM_INT_ERR;
logic [0:0] nxt_ALARM_ERR_ALARM_INT_ERR;
always_comb begin
 up_ALARM_ERR_ALARM_INT_ERR = 
   swwr_ALARM_ERR_ALARM_INT_ERR | {1{load_ALARM_ERR.ALARM_INT_ERR}};
end
always_comb begin
 nxt_ALARM_ERR_ALARM_INT_ERR[0] = 
    load_ALARM_ERR.ALARM_INT_ERR ?
    new_ALARM_ERR.ALARM_INT_ERR[0] :
    sw_nxt_ALARM_ERR_ALARM_INT_ERR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_ERR_ALARM_INT_ERR[0], nxt_ALARM_ERR_ALARM_INT_ERR[0], ALARM_ERR.ALARM_INT_ERR[0])

// ----------------------------------------------------------------------
// ALARM_ERR.RF_IPAR_ERROR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_ERR_RF_IPAR_ERROR;
always_comb begin
 req_up_ALARM_ERR_RF_IPAR_ERROR[0:0] = 
   {1{write_req_ALARM_ERR & be[1]}}
;
end

logic [0:0] clr_ALARM_ERR_RF_IPAR_ERROR;
always_comb begin
 clr_ALARM_ERR_RF_IPAR_ERROR = write_data[9:9] & req_up_ALARM_ERR_RF_IPAR_ERROR;

end
logic [0:0] swwr_ALARM_ERR_RF_IPAR_ERROR;
logic [0:0] sw_nxt_ALARM_ERR_RF_IPAR_ERROR;
always_comb begin
 swwr_ALARM_ERR_RF_IPAR_ERROR = clr_ALARM_ERR_RF_IPAR_ERROR;
 sw_nxt_ALARM_ERR_RF_IPAR_ERROR = {1{1'b0}};

end
logic [0:0] up_ALARM_ERR_RF_IPAR_ERROR;
logic [0:0] nxt_ALARM_ERR_RF_IPAR_ERROR;
always_comb begin
 up_ALARM_ERR_RF_IPAR_ERROR = 
   swwr_ALARM_ERR_RF_IPAR_ERROR | {1{load_ALARM_ERR.RF_IPAR_ERROR}};
end
always_comb begin
 nxt_ALARM_ERR_RF_IPAR_ERROR[0] = 
    load_ALARM_ERR.RF_IPAR_ERROR ?
    new_ALARM_ERR.RF_IPAR_ERROR[0] :
    sw_nxt_ALARM_ERR_RF_IPAR_ERROR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_ERR_RF_IPAR_ERROR[0], nxt_ALARM_ERR_RF_IPAR_ERROR[0], ALARM_ERR.RF_IPAR_ERROR[0])

// ----------------------------------------------------------------------
// ALARM_ERR.ROB_ERROR x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_ERR_ROB_ERROR;
always_comb begin
 req_up_ALARM_ERR_ROB_ERROR[0:0] = 
   {1{write_req_ALARM_ERR & be[1]}}
;
end

logic [0:0] clr_ALARM_ERR_ROB_ERROR;
always_comb begin
 clr_ALARM_ERR_ROB_ERROR = write_data[10:10] & req_up_ALARM_ERR_ROB_ERROR;

end
logic [0:0] swwr_ALARM_ERR_ROB_ERROR;
logic [0:0] sw_nxt_ALARM_ERR_ROB_ERROR;
always_comb begin
 swwr_ALARM_ERR_ROB_ERROR = clr_ALARM_ERR_ROB_ERROR;
 sw_nxt_ALARM_ERR_ROB_ERROR = {1{1'b0}};

end
logic [0:0] up_ALARM_ERR_ROB_ERROR;
logic [0:0] nxt_ALARM_ERR_ROB_ERROR;
always_comb begin
 up_ALARM_ERR_ROB_ERROR = 
   swwr_ALARM_ERR_ROB_ERROR | {1{load_ALARM_ERR.ROB_ERROR}};
end
always_comb begin
 nxt_ALARM_ERR_ROB_ERROR[0] = 
    load_ALARM_ERR.ROB_ERROR ?
    new_ALARM_ERR.ROB_ERROR[0] :
    sw_nxt_ALARM_ERR_ROB_ERROR[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_ERR_ROB_ERROR[0], nxt_ALARM_ERR_ROB_ERROR[0], ALARM_ERR.ROB_ERROR[0])

//---------------------------------------------------------------------
// ALARM_MB_ECC_ERR Address Decode
logic  addr_decode_ALARM_MB_ECC_ERR;
logic  write_req_ALARM_MB_ECC_ERR;
always_comb begin
   addr_decode_ALARM_MB_ECC_ERR = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == ALARM_MB_ECC_ERR_DECODE_ADDR) && req.valid ;
   write_req_ALARM_MB_ECC_ERR = IsMEMWr && addr_decode_ALARM_MB_ECC_ERR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR0 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0;
always_comb begin
 req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0[0:0] = 
   {1{write_req_ALARM_MB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0;
always_comb begin
 clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0 = write_data[0:0] & req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0;

end
logic [0:0] swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0;
logic [0:0] sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0;
always_comb begin
 swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0 = clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0;
 sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0 = {1{1'b0}};

end
logic [0:0] up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0;
logic [0:0] nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0;
always_comb begin
 up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0 = 
   swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0 | {1{load_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR0}};
end
always_comb begin
 nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0[0] = 
    load_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR0 ?
    new_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR0[0] :
    sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0[0], nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR0[0], ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR0[0])

// ----------------------------------------------------------------------
// ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR1 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1;
always_comb begin
 req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1[0:0] = 
   {1{write_req_ALARM_MB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1;
always_comb begin
 clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1 = write_data[1:1] & req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1;

end
logic [0:0] swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1;
logic [0:0] sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1;
always_comb begin
 swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1 = clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1;
 sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1 = {1{1'b0}};

end
logic [0:0] up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1;
logic [0:0] nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1;
always_comb begin
 up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1 = 
   swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1 | {1{load_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR1}};
end
always_comb begin
 nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1[0] = 
    load_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR1 ?
    new_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR1[0] :
    sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1[0], nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR1[0], ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR1[0])

// ----------------------------------------------------------------------
// ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR2 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2;
always_comb begin
 req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2[0:0] = 
   {1{write_req_ALARM_MB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2;
always_comb begin
 clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2 = write_data[2:2] & req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2;

end
logic [0:0] swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2;
logic [0:0] sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2;
always_comb begin
 swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2 = clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2;
 sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2 = {1{1'b0}};

end
logic [0:0] up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2;
logic [0:0] nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2;
always_comb begin
 up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2 = 
   swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2 | {1{load_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR2}};
end
always_comb begin
 nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2[0] = 
    load_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR2 ?
    new_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR2[0] :
    sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2[0], nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR2[0], ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR2[0])

// ----------------------------------------------------------------------
// ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR3 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3;
always_comb begin
 req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3[0:0] = 
   {1{write_req_ALARM_MB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3;
always_comb begin
 clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3 = write_data[3:3] & req_up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3;

end
logic [0:0] swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3;
logic [0:0] sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3;
always_comb begin
 swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3 = clr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3;
 sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3 = {1{1'b0}};

end
logic [0:0] up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3;
logic [0:0] nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3;
always_comb begin
 up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3 = 
   swwr_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3 | {1{load_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR3}};
end
always_comb begin
 nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3[0] = 
    load_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR3 ?
    new_ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR3[0] :
    sw_nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3[0], nxt_ALARM_MB_ECC_ERR_WB_DIR_MB_ECC_ERR3[0], ALARM_MB_ECC_ERR.WB_DIR_MB_ECC_ERR3[0])

// ----------------------------------------------------------------------
// ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR0 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0;
always_comb begin
 req_up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0[0:0] = 
   {1{write_req_ALARM_MB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0;
always_comb begin
 clr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0 = write_data[4:4] & req_up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0;

end
logic [0:0] swwr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0;
logic [0:0] sw_nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0;
always_comb begin
 swwr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0 = clr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0;
 sw_nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0 = {1{1'b0}};

end
logic [0:0] up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0;
logic [0:0] nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0;
always_comb begin
 up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0 = 
   swwr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0 | {1{load_ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR0}};
end
always_comb begin
 nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0[0] = 
    load_ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR0 ?
    new_ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR0[0] :
    sw_nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0[0], nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR0[0], ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR0[0])

// ----------------------------------------------------------------------
// ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR1 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1;
always_comb begin
 req_up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1[0:0] = 
   {1{write_req_ALARM_MB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1;
always_comb begin
 clr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1 = write_data[5:5] & req_up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1;

end
logic [0:0] swwr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1;
logic [0:0] sw_nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1;
always_comb begin
 swwr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1 = clr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1;
 sw_nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1 = {1{1'b0}};

end
logic [0:0] up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1;
logic [0:0] nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1;
always_comb begin
 up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1 = 
   swwr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1 | {1{load_ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR1}};
end
always_comb begin
 nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1[0] = 
    load_ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR1 ?
    new_ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR1[0] :
    sw_nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1[0], nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR1[0], ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR1[0])

// ----------------------------------------------------------------------
// ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR2 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2;
always_comb begin
 req_up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2[0:0] = 
   {1{write_req_ALARM_MB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2;
always_comb begin
 clr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2 = write_data[6:6] & req_up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2;

end
logic [0:0] swwr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2;
logic [0:0] sw_nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2;
always_comb begin
 swwr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2 = clr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2;
 sw_nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2 = {1{1'b0}};

end
logic [0:0] up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2;
logic [0:0] nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2;
always_comb begin
 up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2 = 
   swwr_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2 | {1{load_ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR2}};
end
always_comb begin
 nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2[0] = 
    load_ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR2 ?
    new_ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR2[0] :
    sw_nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2[0], nxt_ALARM_MB_ECC_ERR_INGRESS_MB_ECC_ERR2[0], ALARM_MB_ECC_ERR.INGRESS_MB_ECC_ERR2[0])

//---------------------------------------------------------------------
// ALARM_SB_ECC_ERR Address Decode
logic  addr_decode_ALARM_SB_ECC_ERR;
logic  write_req_ALARM_SB_ECC_ERR;
always_comb begin
   addr_decode_ALARM_SB_ECC_ERR = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == ALARM_SB_ECC_ERR_DECODE_ADDR) && req.valid ;
   write_req_ALARM_SB_ECC_ERR = IsMEMWr && addr_decode_ALARM_SB_ECC_ERR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR0 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0;
always_comb begin
 req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0[0:0] = 
   {1{write_req_ALARM_SB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0;
always_comb begin
 clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0 = write_data[0:0] & req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0;

end
logic [0:0] swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0;
logic [0:0] sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0;
always_comb begin
 swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0 = clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0;
 sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0 = {1{1'b0}};

end
logic [0:0] up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0;
logic [0:0] nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0;
always_comb begin
 up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0 = 
   swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0 | {1{load_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR0}};
end
always_comb begin
 nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0[0] = 
    load_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR0 ?
    new_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR0[0] :
    sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0[0], nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR0[0], ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR0[0])

// ----------------------------------------------------------------------
// ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR1 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1;
always_comb begin
 req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1[0:0] = 
   {1{write_req_ALARM_SB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1;
always_comb begin
 clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1 = write_data[1:1] & req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1;

end
logic [0:0] swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1;
logic [0:0] sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1;
always_comb begin
 swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1 = clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1;
 sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1 = {1{1'b0}};

end
logic [0:0] up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1;
logic [0:0] nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1;
always_comb begin
 up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1 = 
   swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1 | {1{load_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR1}};
end
always_comb begin
 nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1[0] = 
    load_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR1 ?
    new_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR1[0] :
    sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1[0], nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR1[0], ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR1[0])

// ----------------------------------------------------------------------
// ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR2 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2;
always_comb begin
 req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2[0:0] = 
   {1{write_req_ALARM_SB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2;
always_comb begin
 clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2 = write_data[2:2] & req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2;

end
logic [0:0] swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2;
logic [0:0] sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2;
always_comb begin
 swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2 = clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2;
 sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2 = {1{1'b0}};

end
logic [0:0] up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2;
logic [0:0] nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2;
always_comb begin
 up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2 = 
   swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2 | {1{load_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR2}};
end
always_comb begin
 nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2[0] = 
    load_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR2 ?
    new_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR2[0] :
    sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2[0], nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR2[0], ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR2[0])

// ----------------------------------------------------------------------
// ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR3 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3;
always_comb begin
 req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3[0:0] = 
   {1{write_req_ALARM_SB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3;
always_comb begin
 clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3 = write_data[3:3] & req_up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3;

end
logic [0:0] swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3;
logic [0:0] sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3;
always_comb begin
 swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3 = clr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3;
 sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3 = {1{1'b0}};

end
logic [0:0] up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3;
logic [0:0] nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3;
always_comb begin
 up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3 = 
   swwr_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3 | {1{load_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR3}};
end
always_comb begin
 nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3[0] = 
    load_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR3 ?
    new_ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR3[0] :
    sw_nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3[0], nxt_ALARM_SB_ECC_ERR_WB_DIR_SB_ECC_ERR3[0], ALARM_SB_ECC_ERR.WB_DIR_SB_ECC_ERR3[0])

// ----------------------------------------------------------------------
// ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR0 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0;
always_comb begin
 req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0[0:0] = 
   {1{write_req_ALARM_SB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0;
always_comb begin
 clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0 = write_data[4:4] & req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0;

end
logic [0:0] swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0;
logic [0:0] sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0;
always_comb begin
 swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0 = clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0;
 sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0 = {1{1'b0}};

end
logic [0:0] up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0;
logic [0:0] nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0;
always_comb begin
 up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0 = 
   swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0 | {1{load_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR0}};
end
always_comb begin
 nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0[0] = 
    load_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR0 ?
    new_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR0[0] :
    sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0[0], nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR0[0], ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR0[0])

// ----------------------------------------------------------------------
// ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR1 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1;
always_comb begin
 req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1[0:0] = 
   {1{write_req_ALARM_SB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1;
always_comb begin
 clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1 = write_data[5:5] & req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1;

end
logic [0:0] swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1;
logic [0:0] sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1;
always_comb begin
 swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1 = clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1;
 sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1 = {1{1'b0}};

end
logic [0:0] up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1;
logic [0:0] nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1;
always_comb begin
 up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1 = 
   swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1 | {1{load_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR1}};
end
always_comb begin
 nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1[0] = 
    load_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR1 ?
    new_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR1[0] :
    sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1[0], nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR1[0], ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR1[0])

// ----------------------------------------------------------------------
// ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR2 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2;
always_comb begin
 req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2[0:0] = 
   {1{write_req_ALARM_SB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2;
always_comb begin
 clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2 = write_data[6:6] & req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2;

end
logic [0:0] swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2;
logic [0:0] sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2;
always_comb begin
 swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2 = clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2;
 sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2 = {1{1'b0}};

end
logic [0:0] up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2;
logic [0:0] nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2;
always_comb begin
 up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2 = 
   swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2 | {1{load_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR2}};
end
always_comb begin
 nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2[0] = 
    load_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR2 ?
    new_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR2[0] :
    sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2[0], nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR2[0], ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR2[0])

// ----------------------------------------------------------------------
// ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR3 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3;
always_comb begin
 req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3[0:0] = 
   {1{write_req_ALARM_SB_ECC_ERR & be[0]}}
;
end

logic [0:0] clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3;
always_comb begin
 clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3 = write_data[7:7] & req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3;

end
logic [0:0] swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3;
logic [0:0] sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3;
always_comb begin
 swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3 = clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3;
 sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3 = {1{1'b0}};

end
logic [0:0] up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3;
logic [0:0] nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3;
always_comb begin
 up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3 = 
   swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3 | {1{load_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR3}};
end
always_comb begin
 nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3[0] = 
    load_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR3 ?
    new_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR3[0] :
    sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3[0], nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR3[0], ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR3[0])

// ----------------------------------------------------------------------
// ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR4 x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4;
always_comb begin
 req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4[0:0] = 
   {1{write_req_ALARM_SB_ECC_ERR & be[1]}}
;
end

logic [0:0] clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4;
always_comb begin
 clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4 = write_data[8:8] & req_up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4;

end
logic [0:0] swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4;
logic [0:0] sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4;
always_comb begin
 swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4 = clr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4;
 sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4 = {1{1'b0}};

end
logic [0:0] up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4;
logic [0:0] nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4;
always_comb begin
 up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4 = 
   swwr_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4 | {1{load_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR4}};
end
always_comb begin
 nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4[0] = 
    load_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR4 ?
    new_ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR4[0] :
    sw_nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4[0], nxt_ALARM_SB_ECC_ERR_INGRESS_SB_ECC_ERR4[0], ALARM_SB_ECC_ERR.INGRESS_SB_ECC_ERR4[0])

//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_CTL Address Decode
logic  addr_decode_HQM_SYSTEM_CNT_CTL;
logic  write_req_HQM_SYSTEM_CNT_CTL;
always_comb begin
   addr_decode_HQM_SYSTEM_CNT_CTL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_SYSTEM_CNT_CTL_DECODE_ADDR) && req.valid ;
   write_req_HQM_SYSTEM_CNT_CTL = IsMEMWr && addr_decode_HQM_SYSTEM_CNT_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_CTL.CNT_CLR x1 RW, using RW template.
logic [0:0] up_HQM_SYSTEM_CNT_CTL_CNT_CLR;
always_comb begin
 up_HQM_SYSTEM_CNT_CTL_CNT_CLR =
    ({1{write_req_HQM_SYSTEM_CNT_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_HQM_SYSTEM_CNT_CTL_CNT_CLR;
always_comb begin
 nxt_HQM_SYSTEM_CNT_CTL_CNT_CLR = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_HQM_SYSTEM_CNT_CTL_CNT_CLR[0], nxt_HQM_SYSTEM_CNT_CTL_CNT_CLR[0:0], HQM_SYSTEM_CNT_CTL.CNT_CLR[0:0])

// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_CTL.CNT_CLRV x1 RW, using RW template.
logic [0:0] up_HQM_SYSTEM_CNT_CTL_CNT_CLRV;
always_comb begin
 up_HQM_SYSTEM_CNT_CTL_CNT_CLRV =
    ({1{write_req_HQM_SYSTEM_CNT_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_HQM_SYSTEM_CNT_CTL_CNT_CLRV;
always_comb begin
 nxt_HQM_SYSTEM_CNT_CTL_CNT_CLRV = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_HQM_SYSTEM_CNT_CTL_CNT_CLRV[0], nxt_HQM_SYSTEM_CNT_CTL_CNT_CLRV[0:0], HQM_SYSTEM_CNT_CTL.CNT_CLRV[0:0])

//---------------------------------------------------------------------
// MSIX_ACK Address Decode
logic  addr_decode_MSIX_ACK;
logic  write_req_MSIX_ACK;
always_comb begin
   addr_decode_MSIX_ACK = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == MSIX_ACK_DECODE_ADDR) && req.valid ;
   write_req_MSIX_ACK = IsMEMWr && addr_decode_MSIX_ACK && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// MSIX_ACK.MSIX_0_ACK x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_ACK_MSIX_0_ACK;
always_comb begin
 req_up_MSIX_ACK_MSIX_0_ACK[0:0] = 
   {1{write_req_MSIX_ACK & be[0]}}
;
end

logic [0:0] clr_MSIX_ACK_MSIX_0_ACK;
always_comb begin
 clr_MSIX_ACK_MSIX_0_ACK = write_data[0:0] & req_up_MSIX_ACK_MSIX_0_ACK;

end
logic [0:0] swwr_MSIX_ACK_MSIX_0_ACK;
logic [0:0] sw_nxt_MSIX_ACK_MSIX_0_ACK;
always_comb begin
 swwr_MSIX_ACK_MSIX_0_ACK = clr_MSIX_ACK_MSIX_0_ACK;
 sw_nxt_MSIX_ACK_MSIX_0_ACK = {1{1'b0}};

end
logic [0:0] up_MSIX_ACK_MSIX_0_ACK;
logic [0:0] nxt_MSIX_ACK_MSIX_0_ACK;
always_comb begin
 up_MSIX_ACK_MSIX_0_ACK = 
   swwr_MSIX_ACK_MSIX_0_ACK | {1{load_MSIX_ACK.MSIX_0_ACK}};
end
always_comb begin
 nxt_MSIX_ACK_MSIX_0_ACK[0] = 
    load_MSIX_ACK.MSIX_0_ACK ?
    new_MSIX_ACK.MSIX_0_ACK[0] :
    sw_nxt_MSIX_ACK_MSIX_0_ACK[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_ACK_MSIX_0_ACK[0], nxt_MSIX_ACK_MSIX_0_ACK[0], MSIX_ACK.MSIX_0_ACK[0])

// ----------------------------------------------------------------------
// MSIX_ACK.MSIX_1_ACK x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_ACK_MSIX_1_ACK;
always_comb begin
 req_up_MSIX_ACK_MSIX_1_ACK[0:0] = 
   {1{write_req_MSIX_ACK & be[0]}}
;
end

logic [0:0] clr_MSIX_ACK_MSIX_1_ACK;
always_comb begin
 clr_MSIX_ACK_MSIX_1_ACK = write_data[1:1] & req_up_MSIX_ACK_MSIX_1_ACK;

end
logic [0:0] swwr_MSIX_ACK_MSIX_1_ACK;
logic [0:0] sw_nxt_MSIX_ACK_MSIX_1_ACK;
always_comb begin
 swwr_MSIX_ACK_MSIX_1_ACK = clr_MSIX_ACK_MSIX_1_ACK;
 sw_nxt_MSIX_ACK_MSIX_1_ACK = {1{1'b0}};

end
logic [0:0] up_MSIX_ACK_MSIX_1_ACK;
logic [0:0] nxt_MSIX_ACK_MSIX_1_ACK;
always_comb begin
 up_MSIX_ACK_MSIX_1_ACK = 
   swwr_MSIX_ACK_MSIX_1_ACK | {1{load_MSIX_ACK.MSIX_1_ACK}};
end
always_comb begin
 nxt_MSIX_ACK_MSIX_1_ACK[0] = 
    load_MSIX_ACK.MSIX_1_ACK ?
    new_MSIX_ACK.MSIX_1_ACK[0] :
    sw_nxt_MSIX_ACK_MSIX_1_ACK[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_ACK_MSIX_1_ACK[0], nxt_MSIX_ACK_MSIX_1_ACK[0], MSIX_ACK.MSIX_1_ACK[0])

//---------------------------------------------------------------------
// MSIX_PASSTHROUGH Address Decode
logic  addr_decode_MSIX_PASSTHROUGH;
logic  write_req_MSIX_PASSTHROUGH;
always_comb begin
   addr_decode_MSIX_PASSTHROUGH = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == MSIX_PASSTHROUGH_DECODE_ADDR) && req.valid ;
   write_req_MSIX_PASSTHROUGH = IsMEMWr && addr_decode_MSIX_PASSTHROUGH && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// MSIX_PASSTHROUGH.MSIX_0_PASSTHRU x1 RW, using RW template.
logic [0:0] up_MSIX_PASSTHROUGH_MSIX_0_PASSTHRU;
always_comb begin
 up_MSIX_PASSTHROUGH_MSIX_0_PASSTHRU =
    ({1{write_req_MSIX_PASSTHROUGH }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PASSTHROUGH_MSIX_0_PASSTHRU;
always_comb begin
 nxt_MSIX_PASSTHROUGH_MSIX_0_PASSTHRU = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PASSTHROUGH_MSIX_0_PASSTHRU[0], nxt_MSIX_PASSTHROUGH_MSIX_0_PASSTHRU[0:0], MSIX_PASSTHROUGH.MSIX_0_PASSTHRU[0:0])

// ----------------------------------------------------------------------
// MSIX_PASSTHROUGH.MSIX_1_PASSTHRU x1 RW, using RW template.
logic [0:0] up_MSIX_PASSTHROUGH_MSIX_1_PASSTHRU;
always_comb begin
 up_MSIX_PASSTHROUGH_MSIX_1_PASSTHRU =
    ({1{write_req_MSIX_PASSTHROUGH }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PASSTHROUGH_MSIX_1_PASSTHRU;
always_comb begin
 nxt_MSIX_PASSTHROUGH_MSIX_1_PASSTHRU = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PASSTHROUGH_MSIX_1_PASSTHRU[0], nxt_MSIX_PASSTHROUGH_MSIX_1_PASSTHRU[0:0], MSIX_PASSTHROUGH.MSIX_1_PASSTHRU[0:0])

//---------------------------------------------------------------------
// MSIX_MODE Address Decode
logic  addr_decode_MSIX_MODE;
logic  write_req_MSIX_MODE;
always_comb begin
   addr_decode_MSIX_MODE = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == MSIX_MODE_DECODE_ADDR) && req.valid ;
   write_req_MSIX_MODE = IsMEMWr && addr_decode_MSIX_MODE && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// MSIX_MODE.MODE x1 RW, using RW template.
logic [0:0] up_MSIX_MODE_MODE;
always_comb begin
 up_MSIX_MODE_MODE =
    ({1{write_req_MSIX_MODE }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_MODE_MODE;
always_comb begin
 nxt_MSIX_MODE_MODE = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_MODE_MODE[0], nxt_MSIX_MODE_MODE[0:0], MSIX_MODE.MODE[0:0])

// ----------------------------------------------------------------------
// MSIX_MODE.IMS_POLLING x1 RW, using RW template.
logic [0:0] up_MSIX_MODE_IMS_POLLING;
always_comb begin
 up_MSIX_MODE_IMS_POLLING =
    ({1{write_req_MSIX_MODE }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_MODE_IMS_POLLING;
always_comb begin
 nxt_MSIX_MODE_IMS_POLLING = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_MODE_IMS_POLLING[0], nxt_MSIX_MODE_IMS_POLLING[0:0], MSIX_MODE.IMS_POLLING[0:0])

//---------------------------------------------------------------------
// MSIX_31_0_SYND Address Decode
logic  addr_decode_MSIX_31_0_SYND;
logic  write_req_MSIX_31_0_SYND;
always_comb begin
   addr_decode_MSIX_31_0_SYND = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == MSIX_31_0_SYND_DECODE_ADDR) && req.valid ;
   write_req_MSIX_31_0_SYND = IsMEMWr && addr_decode_MSIX_31_0_SYND && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_0_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_0_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_0_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_0_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_0_SENT = write_data[0:0] & req_up_MSIX_31_0_SYND_MSIX_0_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_0_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_0_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_0_SENT = clr_MSIX_31_0_SYND_MSIX_0_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_0_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_0_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_0_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_0_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_0_SENT | {1{load_MSIX_31_0_SYND.MSIX_0_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_0_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_0_SENT ?
    new_MSIX_31_0_SYND.MSIX_0_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_0_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_0_SENT[0], nxt_MSIX_31_0_SYND_MSIX_0_SENT[0], MSIX_31_0_SYND.MSIX_0_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_1_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_1_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_1_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_1_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_1_SENT = write_data[1:1] & req_up_MSIX_31_0_SYND_MSIX_1_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_1_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_1_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_1_SENT = clr_MSIX_31_0_SYND_MSIX_1_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_1_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_1_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_1_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_1_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_1_SENT | {1{load_MSIX_31_0_SYND.MSIX_1_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_1_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_1_SENT ?
    new_MSIX_31_0_SYND.MSIX_1_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_1_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_1_SENT[0], nxt_MSIX_31_0_SYND_MSIX_1_SENT[0], MSIX_31_0_SYND.MSIX_1_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_2_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_2_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_2_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_2_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_2_SENT = write_data[2:2] & req_up_MSIX_31_0_SYND_MSIX_2_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_2_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_2_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_2_SENT = clr_MSIX_31_0_SYND_MSIX_2_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_2_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_2_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_2_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_2_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_2_SENT | {1{load_MSIX_31_0_SYND.MSIX_2_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_2_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_2_SENT ?
    new_MSIX_31_0_SYND.MSIX_2_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_2_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_2_SENT[0], nxt_MSIX_31_0_SYND_MSIX_2_SENT[0], MSIX_31_0_SYND.MSIX_2_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_3_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_3_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_3_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_3_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_3_SENT = write_data[3:3] & req_up_MSIX_31_0_SYND_MSIX_3_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_3_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_3_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_3_SENT = clr_MSIX_31_0_SYND_MSIX_3_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_3_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_3_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_3_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_3_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_3_SENT | {1{load_MSIX_31_0_SYND.MSIX_3_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_3_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_3_SENT ?
    new_MSIX_31_0_SYND.MSIX_3_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_3_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_3_SENT[0], nxt_MSIX_31_0_SYND_MSIX_3_SENT[0], MSIX_31_0_SYND.MSIX_3_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_4_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_4_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_4_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_4_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_4_SENT = write_data[4:4] & req_up_MSIX_31_0_SYND_MSIX_4_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_4_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_4_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_4_SENT = clr_MSIX_31_0_SYND_MSIX_4_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_4_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_4_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_4_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_4_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_4_SENT | {1{load_MSIX_31_0_SYND.MSIX_4_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_4_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_4_SENT ?
    new_MSIX_31_0_SYND.MSIX_4_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_4_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_4_SENT[0], nxt_MSIX_31_0_SYND_MSIX_4_SENT[0], MSIX_31_0_SYND.MSIX_4_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_5_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_5_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_5_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_5_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_5_SENT = write_data[5:5] & req_up_MSIX_31_0_SYND_MSIX_5_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_5_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_5_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_5_SENT = clr_MSIX_31_0_SYND_MSIX_5_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_5_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_5_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_5_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_5_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_5_SENT | {1{load_MSIX_31_0_SYND.MSIX_5_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_5_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_5_SENT ?
    new_MSIX_31_0_SYND.MSIX_5_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_5_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_5_SENT[0], nxt_MSIX_31_0_SYND_MSIX_5_SENT[0], MSIX_31_0_SYND.MSIX_5_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_6_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_6_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_6_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_6_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_6_SENT = write_data[6:6] & req_up_MSIX_31_0_SYND_MSIX_6_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_6_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_6_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_6_SENT = clr_MSIX_31_0_SYND_MSIX_6_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_6_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_6_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_6_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_6_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_6_SENT | {1{load_MSIX_31_0_SYND.MSIX_6_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_6_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_6_SENT ?
    new_MSIX_31_0_SYND.MSIX_6_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_6_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_6_SENT[0], nxt_MSIX_31_0_SYND_MSIX_6_SENT[0], MSIX_31_0_SYND.MSIX_6_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_7_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_7_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_7_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_7_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_7_SENT = write_data[7:7] & req_up_MSIX_31_0_SYND_MSIX_7_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_7_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_7_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_7_SENT = clr_MSIX_31_0_SYND_MSIX_7_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_7_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_7_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_7_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_7_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_7_SENT | {1{load_MSIX_31_0_SYND.MSIX_7_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_7_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_7_SENT ?
    new_MSIX_31_0_SYND.MSIX_7_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_7_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_7_SENT[0], nxt_MSIX_31_0_SYND_MSIX_7_SENT[0], MSIX_31_0_SYND.MSIX_7_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_8_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_8_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_8_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_8_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_8_SENT = write_data[8:8] & req_up_MSIX_31_0_SYND_MSIX_8_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_8_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_8_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_8_SENT = clr_MSIX_31_0_SYND_MSIX_8_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_8_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_8_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_8_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_8_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_8_SENT | {1{load_MSIX_31_0_SYND.MSIX_8_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_8_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_8_SENT ?
    new_MSIX_31_0_SYND.MSIX_8_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_8_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_8_SENT[0], nxt_MSIX_31_0_SYND_MSIX_8_SENT[0], MSIX_31_0_SYND.MSIX_8_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_9_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_9_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_9_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_9_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_9_SENT = write_data[9:9] & req_up_MSIX_31_0_SYND_MSIX_9_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_9_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_9_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_9_SENT = clr_MSIX_31_0_SYND_MSIX_9_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_9_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_9_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_9_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_9_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_9_SENT | {1{load_MSIX_31_0_SYND.MSIX_9_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_9_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_9_SENT ?
    new_MSIX_31_0_SYND.MSIX_9_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_9_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_9_SENT[0], nxt_MSIX_31_0_SYND_MSIX_9_SENT[0], MSIX_31_0_SYND.MSIX_9_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_10_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_10_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_10_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_10_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_10_SENT = write_data[10:10] & req_up_MSIX_31_0_SYND_MSIX_10_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_10_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_10_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_10_SENT = clr_MSIX_31_0_SYND_MSIX_10_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_10_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_10_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_10_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_10_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_10_SENT | {1{load_MSIX_31_0_SYND.MSIX_10_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_10_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_10_SENT ?
    new_MSIX_31_0_SYND.MSIX_10_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_10_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_10_SENT[0], nxt_MSIX_31_0_SYND_MSIX_10_SENT[0], MSIX_31_0_SYND.MSIX_10_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_11_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_11_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_11_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_11_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_11_SENT = write_data[11:11] & req_up_MSIX_31_0_SYND_MSIX_11_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_11_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_11_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_11_SENT = clr_MSIX_31_0_SYND_MSIX_11_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_11_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_11_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_11_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_11_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_11_SENT | {1{load_MSIX_31_0_SYND.MSIX_11_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_11_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_11_SENT ?
    new_MSIX_31_0_SYND.MSIX_11_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_11_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_11_SENT[0], nxt_MSIX_31_0_SYND_MSIX_11_SENT[0], MSIX_31_0_SYND.MSIX_11_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_12_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_12_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_12_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_12_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_12_SENT = write_data[12:12] & req_up_MSIX_31_0_SYND_MSIX_12_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_12_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_12_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_12_SENT = clr_MSIX_31_0_SYND_MSIX_12_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_12_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_12_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_12_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_12_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_12_SENT | {1{load_MSIX_31_0_SYND.MSIX_12_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_12_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_12_SENT ?
    new_MSIX_31_0_SYND.MSIX_12_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_12_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_12_SENT[0], nxt_MSIX_31_0_SYND_MSIX_12_SENT[0], MSIX_31_0_SYND.MSIX_12_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_13_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_13_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_13_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_13_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_13_SENT = write_data[13:13] & req_up_MSIX_31_0_SYND_MSIX_13_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_13_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_13_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_13_SENT = clr_MSIX_31_0_SYND_MSIX_13_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_13_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_13_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_13_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_13_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_13_SENT | {1{load_MSIX_31_0_SYND.MSIX_13_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_13_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_13_SENT ?
    new_MSIX_31_0_SYND.MSIX_13_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_13_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_13_SENT[0], nxt_MSIX_31_0_SYND_MSIX_13_SENT[0], MSIX_31_0_SYND.MSIX_13_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_14_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_14_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_14_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_14_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_14_SENT = write_data[14:14] & req_up_MSIX_31_0_SYND_MSIX_14_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_14_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_14_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_14_SENT = clr_MSIX_31_0_SYND_MSIX_14_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_14_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_14_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_14_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_14_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_14_SENT | {1{load_MSIX_31_0_SYND.MSIX_14_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_14_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_14_SENT ?
    new_MSIX_31_0_SYND.MSIX_14_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_14_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_14_SENT[0], nxt_MSIX_31_0_SYND_MSIX_14_SENT[0], MSIX_31_0_SYND.MSIX_14_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_15_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_15_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_15_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_15_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_15_SENT = write_data[15:15] & req_up_MSIX_31_0_SYND_MSIX_15_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_15_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_15_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_15_SENT = clr_MSIX_31_0_SYND_MSIX_15_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_15_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_15_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_15_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_15_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_15_SENT | {1{load_MSIX_31_0_SYND.MSIX_15_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_15_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_15_SENT ?
    new_MSIX_31_0_SYND.MSIX_15_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_15_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_15_SENT[0], nxt_MSIX_31_0_SYND_MSIX_15_SENT[0], MSIX_31_0_SYND.MSIX_15_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_16_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_16_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_16_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_16_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_16_SENT = write_data[16:16] & req_up_MSIX_31_0_SYND_MSIX_16_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_16_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_16_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_16_SENT = clr_MSIX_31_0_SYND_MSIX_16_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_16_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_16_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_16_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_16_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_16_SENT | {1{load_MSIX_31_0_SYND.MSIX_16_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_16_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_16_SENT ?
    new_MSIX_31_0_SYND.MSIX_16_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_16_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_16_SENT[0], nxt_MSIX_31_0_SYND_MSIX_16_SENT[0], MSIX_31_0_SYND.MSIX_16_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_17_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_17_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_17_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_17_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_17_SENT = write_data[17:17] & req_up_MSIX_31_0_SYND_MSIX_17_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_17_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_17_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_17_SENT = clr_MSIX_31_0_SYND_MSIX_17_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_17_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_17_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_17_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_17_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_17_SENT | {1{load_MSIX_31_0_SYND.MSIX_17_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_17_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_17_SENT ?
    new_MSIX_31_0_SYND.MSIX_17_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_17_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_17_SENT[0], nxt_MSIX_31_0_SYND_MSIX_17_SENT[0], MSIX_31_0_SYND.MSIX_17_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_18_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_18_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_18_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_18_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_18_SENT = write_data[18:18] & req_up_MSIX_31_0_SYND_MSIX_18_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_18_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_18_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_18_SENT = clr_MSIX_31_0_SYND_MSIX_18_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_18_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_18_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_18_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_18_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_18_SENT | {1{load_MSIX_31_0_SYND.MSIX_18_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_18_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_18_SENT ?
    new_MSIX_31_0_SYND.MSIX_18_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_18_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_18_SENT[0], nxt_MSIX_31_0_SYND_MSIX_18_SENT[0], MSIX_31_0_SYND.MSIX_18_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_19_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_19_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_19_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_19_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_19_SENT = write_data[19:19] & req_up_MSIX_31_0_SYND_MSIX_19_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_19_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_19_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_19_SENT = clr_MSIX_31_0_SYND_MSIX_19_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_19_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_19_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_19_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_19_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_19_SENT | {1{load_MSIX_31_0_SYND.MSIX_19_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_19_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_19_SENT ?
    new_MSIX_31_0_SYND.MSIX_19_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_19_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_19_SENT[0], nxt_MSIX_31_0_SYND_MSIX_19_SENT[0], MSIX_31_0_SYND.MSIX_19_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_20_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_20_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_20_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_20_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_20_SENT = write_data[20:20] & req_up_MSIX_31_0_SYND_MSIX_20_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_20_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_20_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_20_SENT = clr_MSIX_31_0_SYND_MSIX_20_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_20_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_20_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_20_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_20_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_20_SENT | {1{load_MSIX_31_0_SYND.MSIX_20_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_20_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_20_SENT ?
    new_MSIX_31_0_SYND.MSIX_20_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_20_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_20_SENT[0], nxt_MSIX_31_0_SYND_MSIX_20_SENT[0], MSIX_31_0_SYND.MSIX_20_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_21_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_21_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_21_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_21_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_21_SENT = write_data[21:21] & req_up_MSIX_31_0_SYND_MSIX_21_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_21_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_21_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_21_SENT = clr_MSIX_31_0_SYND_MSIX_21_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_21_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_21_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_21_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_21_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_21_SENT | {1{load_MSIX_31_0_SYND.MSIX_21_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_21_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_21_SENT ?
    new_MSIX_31_0_SYND.MSIX_21_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_21_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_21_SENT[0], nxt_MSIX_31_0_SYND_MSIX_21_SENT[0], MSIX_31_0_SYND.MSIX_21_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_22_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_22_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_22_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_22_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_22_SENT = write_data[22:22] & req_up_MSIX_31_0_SYND_MSIX_22_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_22_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_22_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_22_SENT = clr_MSIX_31_0_SYND_MSIX_22_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_22_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_22_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_22_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_22_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_22_SENT | {1{load_MSIX_31_0_SYND.MSIX_22_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_22_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_22_SENT ?
    new_MSIX_31_0_SYND.MSIX_22_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_22_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_22_SENT[0], nxt_MSIX_31_0_SYND_MSIX_22_SENT[0], MSIX_31_0_SYND.MSIX_22_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_23_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_23_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_23_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_23_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_23_SENT = write_data[23:23] & req_up_MSIX_31_0_SYND_MSIX_23_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_23_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_23_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_23_SENT = clr_MSIX_31_0_SYND_MSIX_23_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_23_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_23_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_23_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_23_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_23_SENT | {1{load_MSIX_31_0_SYND.MSIX_23_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_23_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_23_SENT ?
    new_MSIX_31_0_SYND.MSIX_23_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_23_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_23_SENT[0], nxt_MSIX_31_0_SYND_MSIX_23_SENT[0], MSIX_31_0_SYND.MSIX_23_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_24_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_24_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_24_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_24_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_24_SENT = write_data[24:24] & req_up_MSIX_31_0_SYND_MSIX_24_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_24_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_24_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_24_SENT = clr_MSIX_31_0_SYND_MSIX_24_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_24_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_24_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_24_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_24_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_24_SENT | {1{load_MSIX_31_0_SYND.MSIX_24_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_24_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_24_SENT ?
    new_MSIX_31_0_SYND.MSIX_24_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_24_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_24_SENT[0], nxt_MSIX_31_0_SYND_MSIX_24_SENT[0], MSIX_31_0_SYND.MSIX_24_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_25_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_25_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_25_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_25_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_25_SENT = write_data[25:25] & req_up_MSIX_31_0_SYND_MSIX_25_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_25_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_25_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_25_SENT = clr_MSIX_31_0_SYND_MSIX_25_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_25_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_25_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_25_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_25_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_25_SENT | {1{load_MSIX_31_0_SYND.MSIX_25_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_25_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_25_SENT ?
    new_MSIX_31_0_SYND.MSIX_25_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_25_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_25_SENT[0], nxt_MSIX_31_0_SYND_MSIX_25_SENT[0], MSIX_31_0_SYND.MSIX_25_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_26_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_26_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_26_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_26_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_26_SENT = write_data[26:26] & req_up_MSIX_31_0_SYND_MSIX_26_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_26_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_26_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_26_SENT = clr_MSIX_31_0_SYND_MSIX_26_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_26_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_26_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_26_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_26_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_26_SENT | {1{load_MSIX_31_0_SYND.MSIX_26_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_26_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_26_SENT ?
    new_MSIX_31_0_SYND.MSIX_26_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_26_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_26_SENT[0], nxt_MSIX_31_0_SYND_MSIX_26_SENT[0], MSIX_31_0_SYND.MSIX_26_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_27_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_27_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_27_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_27_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_27_SENT = write_data[27:27] & req_up_MSIX_31_0_SYND_MSIX_27_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_27_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_27_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_27_SENT = clr_MSIX_31_0_SYND_MSIX_27_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_27_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_27_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_27_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_27_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_27_SENT | {1{load_MSIX_31_0_SYND.MSIX_27_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_27_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_27_SENT ?
    new_MSIX_31_0_SYND.MSIX_27_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_27_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_27_SENT[0], nxt_MSIX_31_0_SYND_MSIX_27_SENT[0], MSIX_31_0_SYND.MSIX_27_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_28_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_28_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_28_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_28_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_28_SENT = write_data[28:28] & req_up_MSIX_31_0_SYND_MSIX_28_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_28_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_28_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_28_SENT = clr_MSIX_31_0_SYND_MSIX_28_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_28_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_28_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_28_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_28_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_28_SENT | {1{load_MSIX_31_0_SYND.MSIX_28_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_28_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_28_SENT ?
    new_MSIX_31_0_SYND.MSIX_28_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_28_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_28_SENT[0], nxt_MSIX_31_0_SYND_MSIX_28_SENT[0], MSIX_31_0_SYND.MSIX_28_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_29_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_29_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_29_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_29_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_29_SENT = write_data[29:29] & req_up_MSIX_31_0_SYND_MSIX_29_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_29_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_29_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_29_SENT = clr_MSIX_31_0_SYND_MSIX_29_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_29_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_29_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_29_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_29_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_29_SENT | {1{load_MSIX_31_0_SYND.MSIX_29_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_29_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_29_SENT ?
    new_MSIX_31_0_SYND.MSIX_29_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_29_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_29_SENT[0], nxt_MSIX_31_0_SYND_MSIX_29_SENT[0], MSIX_31_0_SYND.MSIX_29_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_30_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_30_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_30_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_30_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_30_SENT = write_data[30:30] & req_up_MSIX_31_0_SYND_MSIX_30_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_30_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_30_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_30_SENT = clr_MSIX_31_0_SYND_MSIX_30_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_30_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_30_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_30_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_30_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_30_SENT | {1{load_MSIX_31_0_SYND.MSIX_30_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_30_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_30_SENT ?
    new_MSIX_31_0_SYND.MSIX_30_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_30_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_30_SENT[0], nxt_MSIX_31_0_SYND_MSIX_30_SENT[0], MSIX_31_0_SYND.MSIX_30_SENT[0])

// ----------------------------------------------------------------------
// MSIX_31_0_SYND.MSIX_31_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_31_0_SYND_MSIX_31_SENT;
always_comb begin
 req_up_MSIX_31_0_SYND_MSIX_31_SENT[0:0] = 
   {1{write_req_MSIX_31_0_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_31_0_SYND_MSIX_31_SENT;
always_comb begin
 clr_MSIX_31_0_SYND_MSIX_31_SENT = write_data[31:31] & req_up_MSIX_31_0_SYND_MSIX_31_SENT;

end
logic [0:0] swwr_MSIX_31_0_SYND_MSIX_31_SENT;
logic [0:0] sw_nxt_MSIX_31_0_SYND_MSIX_31_SENT;
always_comb begin
 swwr_MSIX_31_0_SYND_MSIX_31_SENT = clr_MSIX_31_0_SYND_MSIX_31_SENT;
 sw_nxt_MSIX_31_0_SYND_MSIX_31_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_31_0_SYND_MSIX_31_SENT;
logic [0:0] nxt_MSIX_31_0_SYND_MSIX_31_SENT;
always_comb begin
 up_MSIX_31_0_SYND_MSIX_31_SENT = 
   swwr_MSIX_31_0_SYND_MSIX_31_SENT | {1{load_MSIX_31_0_SYND.MSIX_31_SENT}};
end
always_comb begin
 nxt_MSIX_31_0_SYND_MSIX_31_SENT[0] = 
    load_MSIX_31_0_SYND.MSIX_31_SENT ?
    new_MSIX_31_0_SYND.MSIX_31_SENT[0] :
    sw_nxt_MSIX_31_0_SYND_MSIX_31_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_31_0_SYND_MSIX_31_SENT[0], nxt_MSIX_31_0_SYND_MSIX_31_SENT[0], MSIX_31_0_SYND.MSIX_31_SENT[0])

//---------------------------------------------------------------------
// MSIX_63_32_SYND Address Decode
logic  addr_decode_MSIX_63_32_SYND;
logic  write_req_MSIX_63_32_SYND;
always_comb begin
   addr_decode_MSIX_63_32_SYND = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == MSIX_63_32_SYND_DECODE_ADDR) && req.valid ;
   write_req_MSIX_63_32_SYND = IsMEMWr && addr_decode_MSIX_63_32_SYND && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_32_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_32_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_32_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_32_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_32_SENT = write_data[0:0] & req_up_MSIX_63_32_SYND_MSIX_32_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_32_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_32_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_32_SENT = clr_MSIX_63_32_SYND_MSIX_32_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_32_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_32_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_32_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_32_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_32_SENT | {1{load_MSIX_63_32_SYND.MSIX_32_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_32_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_32_SENT ?
    new_MSIX_63_32_SYND.MSIX_32_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_32_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_32_SENT[0], nxt_MSIX_63_32_SYND_MSIX_32_SENT[0], MSIX_63_32_SYND.MSIX_32_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_33_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_33_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_33_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_33_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_33_SENT = write_data[1:1] & req_up_MSIX_63_32_SYND_MSIX_33_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_33_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_33_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_33_SENT = clr_MSIX_63_32_SYND_MSIX_33_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_33_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_33_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_33_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_33_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_33_SENT | {1{load_MSIX_63_32_SYND.MSIX_33_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_33_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_33_SENT ?
    new_MSIX_63_32_SYND.MSIX_33_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_33_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_33_SENT[0], nxt_MSIX_63_32_SYND_MSIX_33_SENT[0], MSIX_63_32_SYND.MSIX_33_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_34_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_34_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_34_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_34_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_34_SENT = write_data[2:2] & req_up_MSIX_63_32_SYND_MSIX_34_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_34_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_34_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_34_SENT = clr_MSIX_63_32_SYND_MSIX_34_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_34_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_34_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_34_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_34_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_34_SENT | {1{load_MSIX_63_32_SYND.MSIX_34_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_34_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_34_SENT ?
    new_MSIX_63_32_SYND.MSIX_34_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_34_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_34_SENT[0], nxt_MSIX_63_32_SYND_MSIX_34_SENT[0], MSIX_63_32_SYND.MSIX_34_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_35_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_35_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_35_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_35_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_35_SENT = write_data[3:3] & req_up_MSIX_63_32_SYND_MSIX_35_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_35_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_35_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_35_SENT = clr_MSIX_63_32_SYND_MSIX_35_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_35_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_35_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_35_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_35_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_35_SENT | {1{load_MSIX_63_32_SYND.MSIX_35_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_35_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_35_SENT ?
    new_MSIX_63_32_SYND.MSIX_35_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_35_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_35_SENT[0], nxt_MSIX_63_32_SYND_MSIX_35_SENT[0], MSIX_63_32_SYND.MSIX_35_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_36_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_36_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_36_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_36_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_36_SENT = write_data[4:4] & req_up_MSIX_63_32_SYND_MSIX_36_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_36_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_36_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_36_SENT = clr_MSIX_63_32_SYND_MSIX_36_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_36_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_36_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_36_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_36_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_36_SENT | {1{load_MSIX_63_32_SYND.MSIX_36_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_36_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_36_SENT ?
    new_MSIX_63_32_SYND.MSIX_36_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_36_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_36_SENT[0], nxt_MSIX_63_32_SYND_MSIX_36_SENT[0], MSIX_63_32_SYND.MSIX_36_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_37_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_37_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_37_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_37_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_37_SENT = write_data[5:5] & req_up_MSIX_63_32_SYND_MSIX_37_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_37_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_37_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_37_SENT = clr_MSIX_63_32_SYND_MSIX_37_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_37_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_37_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_37_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_37_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_37_SENT | {1{load_MSIX_63_32_SYND.MSIX_37_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_37_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_37_SENT ?
    new_MSIX_63_32_SYND.MSIX_37_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_37_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_37_SENT[0], nxt_MSIX_63_32_SYND_MSIX_37_SENT[0], MSIX_63_32_SYND.MSIX_37_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_38_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_38_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_38_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_38_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_38_SENT = write_data[6:6] & req_up_MSIX_63_32_SYND_MSIX_38_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_38_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_38_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_38_SENT = clr_MSIX_63_32_SYND_MSIX_38_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_38_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_38_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_38_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_38_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_38_SENT | {1{load_MSIX_63_32_SYND.MSIX_38_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_38_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_38_SENT ?
    new_MSIX_63_32_SYND.MSIX_38_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_38_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_38_SENT[0], nxt_MSIX_63_32_SYND_MSIX_38_SENT[0], MSIX_63_32_SYND.MSIX_38_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_39_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_39_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_39_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_39_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_39_SENT = write_data[7:7] & req_up_MSIX_63_32_SYND_MSIX_39_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_39_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_39_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_39_SENT = clr_MSIX_63_32_SYND_MSIX_39_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_39_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_39_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_39_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_39_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_39_SENT | {1{load_MSIX_63_32_SYND.MSIX_39_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_39_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_39_SENT ?
    new_MSIX_63_32_SYND.MSIX_39_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_39_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_39_SENT[0], nxt_MSIX_63_32_SYND_MSIX_39_SENT[0], MSIX_63_32_SYND.MSIX_39_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_40_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_40_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_40_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_40_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_40_SENT = write_data[8:8] & req_up_MSIX_63_32_SYND_MSIX_40_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_40_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_40_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_40_SENT = clr_MSIX_63_32_SYND_MSIX_40_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_40_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_40_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_40_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_40_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_40_SENT | {1{load_MSIX_63_32_SYND.MSIX_40_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_40_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_40_SENT ?
    new_MSIX_63_32_SYND.MSIX_40_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_40_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_40_SENT[0], nxt_MSIX_63_32_SYND_MSIX_40_SENT[0], MSIX_63_32_SYND.MSIX_40_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_41_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_41_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_41_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_41_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_41_SENT = write_data[9:9] & req_up_MSIX_63_32_SYND_MSIX_41_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_41_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_41_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_41_SENT = clr_MSIX_63_32_SYND_MSIX_41_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_41_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_41_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_41_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_41_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_41_SENT | {1{load_MSIX_63_32_SYND.MSIX_41_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_41_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_41_SENT ?
    new_MSIX_63_32_SYND.MSIX_41_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_41_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_41_SENT[0], nxt_MSIX_63_32_SYND_MSIX_41_SENT[0], MSIX_63_32_SYND.MSIX_41_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_42_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_42_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_42_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_42_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_42_SENT = write_data[10:10] & req_up_MSIX_63_32_SYND_MSIX_42_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_42_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_42_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_42_SENT = clr_MSIX_63_32_SYND_MSIX_42_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_42_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_42_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_42_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_42_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_42_SENT | {1{load_MSIX_63_32_SYND.MSIX_42_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_42_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_42_SENT ?
    new_MSIX_63_32_SYND.MSIX_42_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_42_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_42_SENT[0], nxt_MSIX_63_32_SYND_MSIX_42_SENT[0], MSIX_63_32_SYND.MSIX_42_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_43_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_43_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_43_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_43_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_43_SENT = write_data[11:11] & req_up_MSIX_63_32_SYND_MSIX_43_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_43_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_43_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_43_SENT = clr_MSIX_63_32_SYND_MSIX_43_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_43_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_43_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_43_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_43_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_43_SENT | {1{load_MSIX_63_32_SYND.MSIX_43_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_43_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_43_SENT ?
    new_MSIX_63_32_SYND.MSIX_43_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_43_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_43_SENT[0], nxt_MSIX_63_32_SYND_MSIX_43_SENT[0], MSIX_63_32_SYND.MSIX_43_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_44_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_44_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_44_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_44_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_44_SENT = write_data[12:12] & req_up_MSIX_63_32_SYND_MSIX_44_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_44_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_44_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_44_SENT = clr_MSIX_63_32_SYND_MSIX_44_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_44_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_44_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_44_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_44_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_44_SENT | {1{load_MSIX_63_32_SYND.MSIX_44_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_44_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_44_SENT ?
    new_MSIX_63_32_SYND.MSIX_44_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_44_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_44_SENT[0], nxt_MSIX_63_32_SYND_MSIX_44_SENT[0], MSIX_63_32_SYND.MSIX_44_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_45_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_45_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_45_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_45_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_45_SENT = write_data[13:13] & req_up_MSIX_63_32_SYND_MSIX_45_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_45_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_45_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_45_SENT = clr_MSIX_63_32_SYND_MSIX_45_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_45_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_45_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_45_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_45_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_45_SENT | {1{load_MSIX_63_32_SYND.MSIX_45_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_45_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_45_SENT ?
    new_MSIX_63_32_SYND.MSIX_45_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_45_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_45_SENT[0], nxt_MSIX_63_32_SYND_MSIX_45_SENT[0], MSIX_63_32_SYND.MSIX_45_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_46_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_46_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_46_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_46_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_46_SENT = write_data[14:14] & req_up_MSIX_63_32_SYND_MSIX_46_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_46_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_46_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_46_SENT = clr_MSIX_63_32_SYND_MSIX_46_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_46_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_46_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_46_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_46_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_46_SENT | {1{load_MSIX_63_32_SYND.MSIX_46_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_46_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_46_SENT ?
    new_MSIX_63_32_SYND.MSIX_46_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_46_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_46_SENT[0], nxt_MSIX_63_32_SYND_MSIX_46_SENT[0], MSIX_63_32_SYND.MSIX_46_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_47_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_47_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_47_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[1]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_47_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_47_SENT = write_data[15:15] & req_up_MSIX_63_32_SYND_MSIX_47_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_47_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_47_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_47_SENT = clr_MSIX_63_32_SYND_MSIX_47_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_47_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_47_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_47_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_47_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_47_SENT | {1{load_MSIX_63_32_SYND.MSIX_47_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_47_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_47_SENT ?
    new_MSIX_63_32_SYND.MSIX_47_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_47_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_47_SENT[0], nxt_MSIX_63_32_SYND_MSIX_47_SENT[0], MSIX_63_32_SYND.MSIX_47_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_48_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_48_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_48_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_48_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_48_SENT = write_data[16:16] & req_up_MSIX_63_32_SYND_MSIX_48_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_48_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_48_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_48_SENT = clr_MSIX_63_32_SYND_MSIX_48_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_48_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_48_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_48_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_48_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_48_SENT | {1{load_MSIX_63_32_SYND.MSIX_48_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_48_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_48_SENT ?
    new_MSIX_63_32_SYND.MSIX_48_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_48_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_48_SENT[0], nxt_MSIX_63_32_SYND_MSIX_48_SENT[0], MSIX_63_32_SYND.MSIX_48_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_49_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_49_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_49_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_49_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_49_SENT = write_data[17:17] & req_up_MSIX_63_32_SYND_MSIX_49_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_49_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_49_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_49_SENT = clr_MSIX_63_32_SYND_MSIX_49_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_49_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_49_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_49_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_49_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_49_SENT | {1{load_MSIX_63_32_SYND.MSIX_49_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_49_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_49_SENT ?
    new_MSIX_63_32_SYND.MSIX_49_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_49_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_49_SENT[0], nxt_MSIX_63_32_SYND_MSIX_49_SENT[0], MSIX_63_32_SYND.MSIX_49_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_50_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_50_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_50_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_50_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_50_SENT = write_data[18:18] & req_up_MSIX_63_32_SYND_MSIX_50_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_50_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_50_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_50_SENT = clr_MSIX_63_32_SYND_MSIX_50_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_50_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_50_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_50_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_50_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_50_SENT | {1{load_MSIX_63_32_SYND.MSIX_50_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_50_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_50_SENT ?
    new_MSIX_63_32_SYND.MSIX_50_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_50_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_50_SENT[0], nxt_MSIX_63_32_SYND_MSIX_50_SENT[0], MSIX_63_32_SYND.MSIX_50_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_51_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_51_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_51_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_51_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_51_SENT = write_data[19:19] & req_up_MSIX_63_32_SYND_MSIX_51_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_51_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_51_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_51_SENT = clr_MSIX_63_32_SYND_MSIX_51_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_51_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_51_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_51_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_51_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_51_SENT | {1{load_MSIX_63_32_SYND.MSIX_51_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_51_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_51_SENT ?
    new_MSIX_63_32_SYND.MSIX_51_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_51_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_51_SENT[0], nxt_MSIX_63_32_SYND_MSIX_51_SENT[0], MSIX_63_32_SYND.MSIX_51_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_52_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_52_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_52_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_52_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_52_SENT = write_data[20:20] & req_up_MSIX_63_32_SYND_MSIX_52_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_52_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_52_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_52_SENT = clr_MSIX_63_32_SYND_MSIX_52_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_52_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_52_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_52_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_52_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_52_SENT | {1{load_MSIX_63_32_SYND.MSIX_52_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_52_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_52_SENT ?
    new_MSIX_63_32_SYND.MSIX_52_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_52_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_52_SENT[0], nxt_MSIX_63_32_SYND_MSIX_52_SENT[0], MSIX_63_32_SYND.MSIX_52_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_53_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_53_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_53_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_53_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_53_SENT = write_data[21:21] & req_up_MSIX_63_32_SYND_MSIX_53_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_53_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_53_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_53_SENT = clr_MSIX_63_32_SYND_MSIX_53_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_53_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_53_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_53_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_53_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_53_SENT | {1{load_MSIX_63_32_SYND.MSIX_53_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_53_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_53_SENT ?
    new_MSIX_63_32_SYND.MSIX_53_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_53_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_53_SENT[0], nxt_MSIX_63_32_SYND_MSIX_53_SENT[0], MSIX_63_32_SYND.MSIX_53_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_54_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_54_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_54_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_54_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_54_SENT = write_data[22:22] & req_up_MSIX_63_32_SYND_MSIX_54_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_54_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_54_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_54_SENT = clr_MSIX_63_32_SYND_MSIX_54_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_54_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_54_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_54_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_54_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_54_SENT | {1{load_MSIX_63_32_SYND.MSIX_54_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_54_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_54_SENT ?
    new_MSIX_63_32_SYND.MSIX_54_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_54_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_54_SENT[0], nxt_MSIX_63_32_SYND_MSIX_54_SENT[0], MSIX_63_32_SYND.MSIX_54_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_55_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_55_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_55_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[2]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_55_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_55_SENT = write_data[23:23] & req_up_MSIX_63_32_SYND_MSIX_55_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_55_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_55_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_55_SENT = clr_MSIX_63_32_SYND_MSIX_55_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_55_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_55_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_55_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_55_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_55_SENT | {1{load_MSIX_63_32_SYND.MSIX_55_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_55_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_55_SENT ?
    new_MSIX_63_32_SYND.MSIX_55_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_55_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_55_SENT[0], nxt_MSIX_63_32_SYND_MSIX_55_SENT[0], MSIX_63_32_SYND.MSIX_55_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_56_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_56_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_56_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_56_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_56_SENT = write_data[24:24] & req_up_MSIX_63_32_SYND_MSIX_56_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_56_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_56_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_56_SENT = clr_MSIX_63_32_SYND_MSIX_56_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_56_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_56_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_56_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_56_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_56_SENT | {1{load_MSIX_63_32_SYND.MSIX_56_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_56_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_56_SENT ?
    new_MSIX_63_32_SYND.MSIX_56_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_56_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_56_SENT[0], nxt_MSIX_63_32_SYND_MSIX_56_SENT[0], MSIX_63_32_SYND.MSIX_56_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_57_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_57_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_57_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_57_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_57_SENT = write_data[25:25] & req_up_MSIX_63_32_SYND_MSIX_57_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_57_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_57_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_57_SENT = clr_MSIX_63_32_SYND_MSIX_57_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_57_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_57_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_57_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_57_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_57_SENT | {1{load_MSIX_63_32_SYND.MSIX_57_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_57_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_57_SENT ?
    new_MSIX_63_32_SYND.MSIX_57_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_57_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_57_SENT[0], nxt_MSIX_63_32_SYND_MSIX_57_SENT[0], MSIX_63_32_SYND.MSIX_57_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_58_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_58_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_58_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_58_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_58_SENT = write_data[26:26] & req_up_MSIX_63_32_SYND_MSIX_58_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_58_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_58_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_58_SENT = clr_MSIX_63_32_SYND_MSIX_58_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_58_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_58_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_58_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_58_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_58_SENT | {1{load_MSIX_63_32_SYND.MSIX_58_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_58_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_58_SENT ?
    new_MSIX_63_32_SYND.MSIX_58_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_58_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_58_SENT[0], nxt_MSIX_63_32_SYND_MSIX_58_SENT[0], MSIX_63_32_SYND.MSIX_58_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_59_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_59_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_59_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_59_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_59_SENT = write_data[27:27] & req_up_MSIX_63_32_SYND_MSIX_59_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_59_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_59_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_59_SENT = clr_MSIX_63_32_SYND_MSIX_59_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_59_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_59_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_59_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_59_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_59_SENT | {1{load_MSIX_63_32_SYND.MSIX_59_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_59_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_59_SENT ?
    new_MSIX_63_32_SYND.MSIX_59_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_59_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_59_SENT[0], nxt_MSIX_63_32_SYND_MSIX_59_SENT[0], MSIX_63_32_SYND.MSIX_59_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_60_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_60_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_60_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_60_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_60_SENT = write_data[28:28] & req_up_MSIX_63_32_SYND_MSIX_60_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_60_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_60_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_60_SENT = clr_MSIX_63_32_SYND_MSIX_60_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_60_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_60_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_60_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_60_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_60_SENT | {1{load_MSIX_63_32_SYND.MSIX_60_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_60_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_60_SENT ?
    new_MSIX_63_32_SYND.MSIX_60_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_60_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_60_SENT[0], nxt_MSIX_63_32_SYND_MSIX_60_SENT[0], MSIX_63_32_SYND.MSIX_60_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_61_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_61_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_61_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_61_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_61_SENT = write_data[29:29] & req_up_MSIX_63_32_SYND_MSIX_61_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_61_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_61_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_61_SENT = clr_MSIX_63_32_SYND_MSIX_61_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_61_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_61_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_61_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_61_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_61_SENT | {1{load_MSIX_63_32_SYND.MSIX_61_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_61_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_61_SENT ?
    new_MSIX_63_32_SYND.MSIX_61_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_61_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_61_SENT[0], nxt_MSIX_63_32_SYND_MSIX_61_SENT[0], MSIX_63_32_SYND.MSIX_61_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_62_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_62_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_62_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_62_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_62_SENT = write_data[30:30] & req_up_MSIX_63_32_SYND_MSIX_62_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_62_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_62_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_62_SENT = clr_MSIX_63_32_SYND_MSIX_62_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_62_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_62_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_62_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_62_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_62_SENT | {1{load_MSIX_63_32_SYND.MSIX_62_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_62_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_62_SENT ?
    new_MSIX_63_32_SYND.MSIX_62_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_62_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_62_SENT[0], nxt_MSIX_63_32_SYND_MSIX_62_SENT[0], MSIX_63_32_SYND.MSIX_62_SENT[0])

// ----------------------------------------------------------------------
// MSIX_63_32_SYND.MSIX_63_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_63_32_SYND_MSIX_63_SENT;
always_comb begin
 req_up_MSIX_63_32_SYND_MSIX_63_SENT[0:0] = 
   {1{write_req_MSIX_63_32_SYND & be[3]}}
;
end

logic [0:0] clr_MSIX_63_32_SYND_MSIX_63_SENT;
always_comb begin
 clr_MSIX_63_32_SYND_MSIX_63_SENT = write_data[31:31] & req_up_MSIX_63_32_SYND_MSIX_63_SENT;

end
logic [0:0] swwr_MSIX_63_32_SYND_MSIX_63_SENT;
logic [0:0] sw_nxt_MSIX_63_32_SYND_MSIX_63_SENT;
always_comb begin
 swwr_MSIX_63_32_SYND_MSIX_63_SENT = clr_MSIX_63_32_SYND_MSIX_63_SENT;
 sw_nxt_MSIX_63_32_SYND_MSIX_63_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_63_32_SYND_MSIX_63_SENT;
logic [0:0] nxt_MSIX_63_32_SYND_MSIX_63_SENT;
always_comb begin
 up_MSIX_63_32_SYND_MSIX_63_SENT = 
   swwr_MSIX_63_32_SYND_MSIX_63_SENT | {1{load_MSIX_63_32_SYND.MSIX_63_SENT}};
end
always_comb begin
 nxt_MSIX_63_32_SYND_MSIX_63_SENT[0] = 
    load_MSIX_63_32_SYND.MSIX_63_SENT ?
    new_MSIX_63_32_SYND.MSIX_63_SENT[0] :
    sw_nxt_MSIX_63_32_SYND_MSIX_63_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_63_32_SYND_MSIX_63_SENT[0], nxt_MSIX_63_32_SYND_MSIX_63_SENT[0], MSIX_63_32_SYND.MSIX_63_SENT[0])

//---------------------------------------------------------------------
// MSIX_64_SYND Address Decode
logic  addr_decode_MSIX_64_SYND;
logic  write_req_MSIX_64_SYND;
always_comb begin
   addr_decode_MSIX_64_SYND = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == MSIX_64_SYND_DECODE_ADDR) && req.valid ;
   write_req_MSIX_64_SYND = IsMEMWr && addr_decode_MSIX_64_SYND && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// MSIX_64_SYND.MSIX_64_SENT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_MSIX_64_SYND_MSIX_64_SENT;
always_comb begin
 req_up_MSIX_64_SYND_MSIX_64_SENT[0:0] = 
   {1{write_req_MSIX_64_SYND & be[0]}}
;
end

logic [0:0] clr_MSIX_64_SYND_MSIX_64_SENT;
always_comb begin
 clr_MSIX_64_SYND_MSIX_64_SENT = write_data[0:0] & req_up_MSIX_64_SYND_MSIX_64_SENT;

end
logic [0:0] swwr_MSIX_64_SYND_MSIX_64_SENT;
logic [0:0] sw_nxt_MSIX_64_SYND_MSIX_64_SENT;
always_comb begin
 swwr_MSIX_64_SYND_MSIX_64_SENT = clr_MSIX_64_SYND_MSIX_64_SENT;
 sw_nxt_MSIX_64_SYND_MSIX_64_SENT = {1{1'b0}};

end
logic [0:0] up_MSIX_64_SYND_MSIX_64_SENT;
logic [0:0] nxt_MSIX_64_SYND_MSIX_64_SENT;
always_comb begin
 up_MSIX_64_SYND_MSIX_64_SENT = 
   swwr_MSIX_64_SYND_MSIX_64_SENT | {1{load_MSIX_64_SYND.MSIX_64_SENT}};
end
always_comb begin
 nxt_MSIX_64_SYND_MSIX_64_SENT[0] = 
    load_MSIX_64_SYND.MSIX_64_SENT ?
    new_MSIX_64_SYND.MSIX_64_SENT[0] :
    sw_nxt_MSIX_64_SYND_MSIX_64_SENT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_64_SYND_MSIX_64_SENT[0], nxt_MSIX_64_SYND_MSIX_64_SENT[0], MSIX_64_SYND.MSIX_64_SENT[0])

//---------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR Address Decode
logic  addr_decode_MSIX_PBA_31_0_CLEAR;
logic  write_req_MSIX_PBA_31_0_CLEAR;
always_comb begin
   addr_decode_MSIX_PBA_31_0_CLEAR = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == MSIX_PBA_31_0_CLEAR_DECODE_ADDR) && req.valid ;
   write_req_MSIX_PBA_31_0_CLEAR = IsMEMWr && addr_decode_MSIX_PBA_31_0_CLEAR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_0_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_0_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_0_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_0_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_0_CLEAR = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_0_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_0_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_0_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_1_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_1_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_1_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_1_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_1_CLEAR = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_1_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_1_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_1_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_2_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_2_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_2_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_2_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_2_CLEAR = write_data[2:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_2_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_2_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_2_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_3_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_3_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_3_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_3_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_3_CLEAR = write_data[3:3];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_3_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_3_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_3_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_4_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_4_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_4_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_4_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_4_CLEAR = write_data[4:4];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_4_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_4_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_4_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_5_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_5_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_5_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_5_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_5_CLEAR = write_data[5:5];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_5_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_5_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_5_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_6_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_6_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_6_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_6_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_6_CLEAR = write_data[6:6];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_6_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_6_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_6_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_7_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_7_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_7_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_7_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_7_CLEAR = write_data[7:7];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_7_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_7_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_7_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_8_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_8_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_8_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_8_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_8_CLEAR = write_data[8:8];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_8_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_8_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_8_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_9_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_9_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_9_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_9_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_9_CLEAR = write_data[9:9];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_9_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_9_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_9_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_10_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_10_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_10_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_10_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_10_CLEAR = write_data[10:10];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_10_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_10_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_10_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_11_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_11_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_11_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_11_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_11_CLEAR = write_data[11:11];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_11_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_11_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_11_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_12_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_12_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_12_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_12_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_12_CLEAR = write_data[12:12];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_12_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_12_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_12_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_13_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_13_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_13_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_13_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_13_CLEAR = write_data[13:13];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_13_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_13_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_13_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_14_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_14_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_14_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_14_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_14_CLEAR = write_data[14:14];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_14_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_14_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_14_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_15_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_15_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_15_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_15_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_15_CLEAR = write_data[15:15];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_15_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_15_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_15_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_16_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_16_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_16_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_16_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_16_CLEAR = write_data[16:16];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_16_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_16_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_16_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_17_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_17_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_17_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_17_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_17_CLEAR = write_data[17:17];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_17_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_17_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_17_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_18_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_18_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_18_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_18_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_18_CLEAR = write_data[18:18];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_18_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_18_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_18_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_19_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_19_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_19_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_19_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_19_CLEAR = write_data[19:19];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_19_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_19_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_19_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_20_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_20_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_20_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_20_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_20_CLEAR = write_data[20:20];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_20_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_20_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_20_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_21_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_21_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_21_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_21_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_21_CLEAR = write_data[21:21];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_21_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_21_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_21_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_22_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_22_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_22_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_22_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_22_CLEAR = write_data[22:22];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_22_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_22_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_22_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_23_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_23_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_23_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_23_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_23_CLEAR = write_data[23:23];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_23_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_23_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_23_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_24_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_24_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_24_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_24_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_24_CLEAR = write_data[24:24];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_24_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_24_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_24_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_25_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_25_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_25_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_25_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_25_CLEAR = write_data[25:25];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_25_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_25_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_25_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_26_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_26_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_26_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_26_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_26_CLEAR = write_data[26:26];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_26_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_26_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_26_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_27_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_27_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_27_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_27_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_27_CLEAR = write_data[27:27];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_27_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_27_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_27_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_28_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_28_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_28_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_28_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_28_CLEAR = write_data[28:28];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_28_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_28_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_28_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_29_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_29_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_29_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_29_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_29_CLEAR = write_data[29:29];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_29_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_29_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_29_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_30_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_30_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_30_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_30_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_30_CLEAR = write_data[30:30];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_30_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_30_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_30_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_31_0_CLEAR.MSIX_PBA_31_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_31_CLEAR;
always_comb begin
 up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_31_CLEAR =
    ({1{write_req_MSIX_PBA_31_0_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_31_CLEAR;
always_comb begin
 nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_31_CLEAR = write_data[31:31];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_31_0_CLEAR_MSIX_PBA_31_CLEAR[0], nxt_MSIX_PBA_31_0_CLEAR_MSIX_PBA_31_CLEAR[0:0], MSIX_PBA_31_0_CLEAR.MSIX_PBA_31_CLEAR[0:0])

//---------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR Address Decode
logic  addr_decode_MSIX_PBA_63_32_CLEAR;
logic  write_req_MSIX_PBA_63_32_CLEAR;
always_comb begin
   addr_decode_MSIX_PBA_63_32_CLEAR = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == MSIX_PBA_63_32_CLEAR_DECODE_ADDR) && req.valid ;
   write_req_MSIX_PBA_63_32_CLEAR = IsMEMWr && addr_decode_MSIX_PBA_63_32_CLEAR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_32_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_32_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_32_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_32_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_32_CLEAR = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_32_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_32_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_32_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_33_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_33_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_33_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_33_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_33_CLEAR = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_33_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_33_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_33_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_34_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_34_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_34_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_34_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_34_CLEAR = write_data[2:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_34_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_34_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_34_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_35_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_35_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_35_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_35_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_35_CLEAR = write_data[3:3];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_35_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_35_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_35_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_36_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_36_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_36_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_36_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_36_CLEAR = write_data[4:4];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_36_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_36_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_36_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_37_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_37_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_37_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_37_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_37_CLEAR = write_data[5:5];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_37_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_37_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_37_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_38_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_38_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_38_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_38_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_38_CLEAR = write_data[6:6];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_38_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_38_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_38_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_39_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_39_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_39_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_39_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_39_CLEAR = write_data[7:7];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_39_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_39_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_39_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_40_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_40_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_40_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_40_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_40_CLEAR = write_data[8:8];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_40_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_40_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_40_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_41_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_41_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_41_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_41_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_41_CLEAR = write_data[9:9];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_41_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_41_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_41_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_42_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_42_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_42_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_42_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_42_CLEAR = write_data[10:10];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_42_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_42_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_42_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_43_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_43_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_43_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_43_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_43_CLEAR = write_data[11:11];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_43_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_43_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_43_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_44_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_44_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_44_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_44_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_44_CLEAR = write_data[12:12];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_44_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_44_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_44_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_45_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_45_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_45_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_45_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_45_CLEAR = write_data[13:13];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_45_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_45_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_45_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_46_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_46_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_46_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_46_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_46_CLEAR = write_data[14:14];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_46_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_46_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_46_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_47_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_47_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_47_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_47_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_47_CLEAR = write_data[15:15];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_47_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_47_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_47_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_48_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_48_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_48_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_48_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_48_CLEAR = write_data[16:16];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_48_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_48_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_48_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_49_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_49_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_49_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_49_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_49_CLEAR = write_data[17:17];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_49_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_49_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_49_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_50_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_50_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_50_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_50_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_50_CLEAR = write_data[18:18];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_50_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_50_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_50_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_51_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_51_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_51_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_51_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_51_CLEAR = write_data[19:19];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_51_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_51_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_51_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_52_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_52_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_52_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_52_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_52_CLEAR = write_data[20:20];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_52_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_52_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_52_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_53_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_53_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_53_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_53_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_53_CLEAR = write_data[21:21];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_53_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_53_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_53_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_54_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_54_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_54_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_54_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_54_CLEAR = write_data[22:22];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_54_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_54_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_54_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_55_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_55_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_55_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[2:2]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_55_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_55_CLEAR = write_data[23:23];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_55_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_55_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_55_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_56_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_56_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_56_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_56_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_56_CLEAR = write_data[24:24];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_56_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_56_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_56_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_57_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_57_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_57_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_57_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_57_CLEAR = write_data[25:25];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_57_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_57_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_57_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_58_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_58_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_58_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_58_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_58_CLEAR = write_data[26:26];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_58_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_58_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_58_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_59_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_59_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_59_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_59_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_59_CLEAR = write_data[27:27];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_59_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_59_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_59_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_60_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_60_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_60_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_60_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_60_CLEAR = write_data[28:28];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_60_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_60_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_60_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_61_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_61_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_61_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_61_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_61_CLEAR = write_data[29:29];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_61_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_61_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_61_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_62_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_62_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_62_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_62_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_62_CLEAR = write_data[30:30];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_62_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_62_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_62_CLEAR[0:0])

// ----------------------------------------------------------------------
// MSIX_PBA_63_32_CLEAR.MSIX_PBA_63_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_63_CLEAR;
always_comb begin
 up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_63_CLEAR =
    ({1{write_req_MSIX_PBA_63_32_CLEAR }} &
    be[3:3]);
end

logic [0:0] nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_63_CLEAR;
always_comb begin
 nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_63_CLEAR = write_data[31:31];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_63_32_CLEAR_MSIX_PBA_63_CLEAR[0], nxt_MSIX_PBA_63_32_CLEAR_MSIX_PBA_63_CLEAR[0:0], MSIX_PBA_63_32_CLEAR.MSIX_PBA_63_CLEAR[0:0])

//---------------------------------------------------------------------
// MSIX_PBA_64_CLEAR Address Decode
logic  addr_decode_MSIX_PBA_64_CLEAR;
logic  write_req_MSIX_PBA_64_CLEAR;
always_comb begin
   addr_decode_MSIX_PBA_64_CLEAR = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == MSIX_PBA_64_CLEAR_DECODE_ADDR) && req.valid ;
   write_req_MSIX_PBA_64_CLEAR = IsMEMWr && addr_decode_MSIX_PBA_64_CLEAR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// MSIX_PBA_64_CLEAR.MSIX_PBA_64_CLEAR x1 RW, using RW template.
logic [0:0] up_MSIX_PBA_64_CLEAR_MSIX_PBA_64_CLEAR;
always_comb begin
 up_MSIX_PBA_64_CLEAR_MSIX_PBA_64_CLEAR =
    ({1{write_req_MSIX_PBA_64_CLEAR }} &
    be[0:0]);
end

logic [0:0] nxt_MSIX_PBA_64_CLEAR_MSIX_PBA_64_CLEAR;
always_comb begin
 nxt_MSIX_PBA_64_CLEAR_MSIX_PBA_64_CLEAR = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_MSIX_PBA_64_CLEAR_MSIX_PBA_64_CLEAR[0], nxt_MSIX_PBA_64_CLEAR_MSIX_PBA_64_CLEAR[0:0], MSIX_PBA_64_CLEAR.MSIX_PBA_64_CLEAR[0:0])

//---------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS Address Decode
logic  addr_decode_DIR_CQ_31_0_OCC_INT_STATUS;
logic  write_req_DIR_CQ_31_0_OCC_INT_STATUS;
always_comb begin
   addr_decode_DIR_CQ_31_0_OCC_INT_STATUS = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR) && req.valid ;
   write_req_DIR_CQ_31_0_OCC_INT_STATUS = IsMEMWr && addr_decode_DIR_CQ_31_0_OCC_INT_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT = write_data[0:0] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT = write_data[1:1] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT = write_data[2:2] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT = write_data[3:3] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT = write_data[4:4] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT = write_data[5:5] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT = write_data[6:6] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT = write_data[7:7] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT = write_data[8:8] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT = write_data[9:9] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT = write_data[10:10] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT = write_data[11:11] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT = write_data[12:12] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT = write_data[13:13] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT = write_data[14:14] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT = write_data[15:15] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT = write_data[16:16] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT = write_data[17:17] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT = write_data[18:18] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT = write_data[19:19] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT = write_data[20:20] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT = write_data[21:21] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT = write_data[22:22] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT = write_data[23:23] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT = write_data[24:24] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT = write_data[25:25] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT = write_data[26:26] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT = write_data[27:27] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT = write_data[28:28] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT = write_data[29:29] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT = write_data[30:30] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
always_comb begin
 req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
always_comb begin
 clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT = write_data[31:31] & req_up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
always_comb begin
 swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT = clr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
 sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
logic [0:0] nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
always_comb begin
 up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT = 
   swwr_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT | {1{load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT[0] = 
    load_DIR_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT ?
    new_DIR_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT[0] :
    sw_nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT[0], nxt_DIR_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT[0], DIR_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT[0])

//---------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS Address Decode
logic  addr_decode_DIR_CQ_63_32_OCC_INT_STATUS;
logic  write_req_DIR_CQ_63_32_OCC_INT_STATUS;
always_comb begin
   addr_decode_DIR_CQ_63_32_OCC_INT_STATUS = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR) && req.valid ;
   write_req_DIR_CQ_63_32_OCC_INT_STATUS = IsMEMWr && addr_decode_DIR_CQ_63_32_OCC_INT_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT = write_data[0:0] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT = write_data[1:1] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT = write_data[2:2] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT = write_data[3:3] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT = write_data[4:4] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT = write_data[5:5] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT = write_data[6:6] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT = write_data[7:7] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT = write_data[8:8] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT = write_data[9:9] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT = write_data[10:10] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT = write_data[11:11] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT = write_data[12:12] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT = write_data[13:13] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT = write_data[14:14] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT = write_data[15:15] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT = write_data[16:16] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT = write_data[17:17] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT = write_data[18:18] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT = write_data[19:19] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT = write_data[20:20] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT = write_data[21:21] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT = write_data[22:22] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT = write_data[23:23] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT = write_data[24:24] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT = write_data[25:25] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT = write_data[26:26] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT = write_data[27:27] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT = write_data[28:28] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT = write_data[29:29] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT = write_data[30:30] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT[0])

// ----------------------------------------------------------------------
// DIR_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
always_comb begin
 req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT[0:0] = 
   {1{write_req_DIR_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
always_comb begin
 clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT = write_data[31:31] & req_up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;

end
logic [0:0] swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
logic [0:0] sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
always_comb begin
 swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT = clr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
 sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT = {1{1'b0}};

end
logic [0:0] up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
logic [0:0] nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
always_comb begin
 up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT = 
   swwr_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT | {1{load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT}};
end
always_comb begin
 nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT[0] = 
    load_DIR_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT ?
    new_DIR_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT[0] :
    sw_nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT[0], nxt_DIR_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT[0], DIR_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT[0])

//---------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS Address Decode
logic  addr_decode_LDB_CQ_31_0_OCC_INT_STATUS;
logic  write_req_LDB_CQ_31_0_OCC_INT_STATUS;
always_comb begin
   addr_decode_LDB_CQ_31_0_OCC_INT_STATUS = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR) && req.valid ;
   write_req_LDB_CQ_31_0_OCC_INT_STATUS = IsMEMWr && addr_decode_LDB_CQ_31_0_OCC_INT_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT = write_data[0:0] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_0_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_0_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT = write_data[1:1] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_1_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_1_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT = write_data[2:2] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_2_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_2_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT = write_data[3:3] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_3_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_3_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT = write_data[4:4] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_4_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_4_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT = write_data[5:5] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_5_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_5_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT = write_data[6:6] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_6_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_6_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT = write_data[7:7] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_7_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_7_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT = write_data[8:8] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_8_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_8_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT = write_data[9:9] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_9_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_9_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT = write_data[10:10] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_10_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_10_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT = write_data[11:11] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_11_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_11_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT = write_data[12:12] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_12_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_12_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT = write_data[13:13] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_13_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_13_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT = write_data[14:14] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_14_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_14_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT = write_data[15:15] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_15_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_15_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT = write_data[16:16] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_16_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_16_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT = write_data[17:17] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_17_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_17_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT = write_data[18:18] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_18_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_18_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT = write_data[19:19] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_19_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_19_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT = write_data[20:20] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_20_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_20_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT = write_data[21:21] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_21_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_21_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT = write_data[22:22] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_22_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_22_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT = write_data[23:23] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_23_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_23_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT = write_data[24:24] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_24_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_24_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT = write_data[25:25] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_25_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_25_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT = write_data[26:26] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_26_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_26_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT = write_data[27:27] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_27_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_27_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT = write_data[28:28] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_28_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_28_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT = write_data[29:29] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_29_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_29_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT = write_data[30:30] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_30_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_30_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
always_comb begin
 req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_31_0_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
always_comb begin
 clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT = write_data[31:31] & req_up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
always_comb begin
 swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT = clr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
 sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
logic [0:0] nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT;
always_comb begin
 up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT = 
   swwr_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT | {1{load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT[0] = 
    load_LDB_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT ?
    new_LDB_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT[0] :
    sw_nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT[0], nxt_LDB_CQ_31_0_OCC_INT_STATUS_CQ_31_OCC_INT[0], LDB_CQ_31_0_OCC_INT_STATUS.CQ_31_OCC_INT[0])

//---------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS Address Decode
logic  addr_decode_LDB_CQ_63_32_OCC_INT_STATUS;
logic  write_req_LDB_CQ_63_32_OCC_INT_STATUS;
always_comb begin
   addr_decode_LDB_CQ_63_32_OCC_INT_STATUS = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR) && req.valid ;
   write_req_LDB_CQ_63_32_OCC_INT_STATUS = IsMEMWr && addr_decode_LDB_CQ_63_32_OCC_INT_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT = write_data[0:0] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_32_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_32_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT = write_data[1:1] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_33_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_33_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT = write_data[2:2] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_34_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_34_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT = write_data[3:3] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_35_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_35_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT = write_data[4:4] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_36_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_36_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT = write_data[5:5] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_37_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_37_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT = write_data[6:6] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_38_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_38_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[0]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT = write_data[7:7] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_39_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_39_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT = write_data[8:8] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_40_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_40_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT = write_data[9:9] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_41_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_41_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT = write_data[10:10] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_42_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_42_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT = write_data[11:11] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_43_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_43_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT = write_data[12:12] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_44_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_44_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT = write_data[13:13] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_45_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_45_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT = write_data[14:14] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_46_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_46_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[1]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT = write_data[15:15] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_47_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_47_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT = write_data[16:16] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_48_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_48_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT = write_data[17:17] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_49_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_49_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT = write_data[18:18] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_50_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_50_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT = write_data[19:19] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_51_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_51_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT = write_data[20:20] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_52_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_52_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT = write_data[21:21] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_53_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_53_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT = write_data[22:22] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_54_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_54_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[2]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT = write_data[23:23] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_55_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_55_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT = write_data[24:24] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_56_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_56_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT = write_data[25:25] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_57_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_57_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT = write_data[26:26] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_58_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_58_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT = write_data[27:27] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_59_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_59_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT = write_data[28:28] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_60_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_60_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT = write_data[29:29] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_61_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_61_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT = write_data[30:30] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_62_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_62_OCC_INT[0])

// ----------------------------------------------------------------------
// LDB_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
always_comb begin
 req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT[0:0] = 
   {1{write_req_LDB_CQ_63_32_OCC_INT_STATUS & be[3]}}
;
end

logic [0:0] clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
always_comb begin
 clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT = write_data[31:31] & req_up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;

end
logic [0:0] swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
logic [0:0] sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
always_comb begin
 swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT = clr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
 sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT = {1{1'b0}};

end
logic [0:0] up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
logic [0:0] nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT;
always_comb begin
 up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT = 
   swwr_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT | {1{load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT}};
end
always_comb begin
 nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT[0] = 
    load_LDB_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT ?
    new_LDB_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT[0] :
    sw_nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT[0], nxt_LDB_CQ_63_32_OCC_INT_STATUS_CQ_63_OCC_INT[0], LDB_CQ_63_32_OCC_INT_STATUS.CQ_63_OCC_INT[0])

//---------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE Address Decode
logic  addr_decode_SYS_ALARM_INT_ENABLE;
logic  write_req_SYS_ALARM_INT_ENABLE;
always_comb begin
   addr_decode_SYS_ALARM_INT_ENABLE = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SYS_ALARM_INT_ENABLE_DECODE_ADDR) && req.valid ;
   write_req_SYS_ALARM_INT_ENABLE = IsMEMWr && addr_decode_SYS_ALARM_INT_ENABLE && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.CQ_ADDR_OVERFLOW_ERROR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_CQ_ADDR_OVERFLOW_ERROR;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_CQ_ADDR_OVERFLOW_ERROR =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_CQ_ADDR_OVERFLOW_ERROR;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_CQ_ADDR_OVERFLOW_ERROR = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_CQ_ADDR_OVERFLOW_ERROR[0], nxt_SYS_ALARM_INT_ENABLE_CQ_ADDR_OVERFLOW_ERROR[0:0], SYS_ALARM_INT_ENABLE.CQ_ADDR_OVERFLOW_ERROR[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.INGRESS_PERR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_INGRESS_PERR;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_INGRESS_PERR =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_INGRESS_PERR;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_INGRESS_PERR = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_INGRESS_PERR[0], nxt_SYS_ALARM_INT_ENABLE_INGRESS_PERR[0:0], SYS_ALARM_INT_ENABLE.INGRESS_PERR[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.EGRESS_PERR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_EGRESS_PERR;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_EGRESS_PERR =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_EGRESS_PERR;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_EGRESS_PERR = write_data[2:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_EGRESS_PERR[0], nxt_SYS_ALARM_INT_ENABLE_EGRESS_PERR[0:0], SYS_ALARM_INT_ENABLE.EGRESS_PERR[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.ALARM_PERR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_ALARM_PERR;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_ALARM_PERR =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_ALARM_PERR;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_ALARM_PERR = write_data[3:3];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_ALARM_PERR[0], nxt_SYS_ALARM_INT_ENABLE_ALARM_PERR[0:0], SYS_ALARM_INT_ENABLE.ALARM_PERR[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.VF_TO_PF_ISR_PEND_ERROR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_VF_TO_PF_ISR_PEND_ERROR;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_VF_TO_PF_ISR_PEND_ERROR =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_VF_TO_PF_ISR_PEND_ERROR;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_VF_TO_PF_ISR_PEND_ERROR = write_data[4:4];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_VF_TO_PF_ISR_PEND_ERROR[0], nxt_SYS_ALARM_INT_ENABLE_VF_TO_PF_ISR_PEND_ERROR[0:0], SYS_ALARM_INT_ENABLE.VF_TO_PF_ISR_PEND_ERROR[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.PF_TO_VF_ISR_PEND_ERROR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_PF_TO_VF_ISR_PEND_ERROR;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_PF_TO_VF_ISR_PEND_ERROR =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_PF_TO_VF_ISR_PEND_ERROR;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_PF_TO_VF_ISR_PEND_ERROR = write_data[5:5];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_PF_TO_VF_ISR_PEND_ERROR[0], nxt_SYS_ALARM_INT_ENABLE_PF_TO_VF_ISR_PEND_ERROR[0:0], SYS_ALARM_INT_ENABLE.PF_TO_VF_ISR_PEND_ERROR[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.SCH_SM_ERROR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_SCH_SM_ERROR;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_SCH_SM_ERROR =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_SCH_SM_ERROR;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_SCH_SM_ERROR = write_data[6:6];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_SCH_SM_ERROR[0], nxt_SYS_ALARM_INT_ENABLE_SCH_SM_ERROR[0:0], SYS_ALARM_INT_ENABLE.SCH_SM_ERROR[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.FIFO_UNDERFLOW x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_FIFO_UNDERFLOW;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_FIFO_UNDERFLOW =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_FIFO_UNDERFLOW;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_FIFO_UNDERFLOW = write_data[7:7];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_FIFO_UNDERFLOW[0], nxt_SYS_ALARM_INT_ENABLE_FIFO_UNDERFLOW[0:0], SYS_ALARM_INT_ENABLE.FIFO_UNDERFLOW[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.FIFO_OVERFLOW x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_FIFO_OVERFLOW;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_FIFO_OVERFLOW =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[1:1]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_FIFO_OVERFLOW;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_FIFO_OVERFLOW = write_data[8:8];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_FIFO_OVERFLOW[0], nxt_SYS_ALARM_INT_ENABLE_FIFO_OVERFLOW[0:0], SYS_ALARM_INT_ENABLE.FIFO_OVERFLOW[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.SCH_WB_PERR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_SCH_WB_PERR;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_SCH_WB_PERR =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[1:1]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_SCH_WB_PERR;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_SCH_WB_PERR = write_data[9:9];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_SCH_WB_PERR[0], nxt_SYS_ALARM_INT_ENABLE_SCH_WB_PERR[0:0], SYS_ALARM_INT_ENABLE.SCH_WB_PERR[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.ALARM_INT_ERR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_ALARM_INT_ERR;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_ALARM_INT_ERR =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[1:1]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_ALARM_INT_ERR;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_ALARM_INT_ERR = write_data[10:10];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_ALARM_INT_ERR[0], nxt_SYS_ALARM_INT_ENABLE_ALARM_INT_ERR[0:0], SYS_ALARM_INT_ENABLE.ALARM_INT_ERR[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_INT_ENABLE.RF_IPAR_ERROR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_INT_ENABLE_RF_IPAR_ERROR;
always_comb begin
 up_SYS_ALARM_INT_ENABLE_RF_IPAR_ERROR =
    ({1{write_req_SYS_ALARM_INT_ENABLE }} &
    be[1:1]);
end

logic [0:0] nxt_SYS_ALARM_INT_ENABLE_RF_IPAR_ERROR;
always_comb begin
 nxt_SYS_ALARM_INT_ENABLE_RF_IPAR_ERROR = write_data[11:11];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_INT_ENABLE_RF_IPAR_ERROR[0], nxt_SYS_ALARM_INT_ENABLE_RF_IPAR_ERROR[0:0], SYS_ALARM_INT_ENABLE.RF_IPAR_ERROR[0:0])

//---------------------------------------------------------------------
// SYS_ALARM_MB_ECC_INT_ENABLE Address Decode
logic  addr_decode_SYS_ALARM_MB_ECC_INT_ENABLE;
logic  write_req_SYS_ALARM_MB_ECC_INT_ENABLE;
always_comb begin
   addr_decode_SYS_ALARM_MB_ECC_INT_ENABLE = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SYS_ALARM_MB_ECC_INT_ENABLE_DECODE_ADDR) && req.valid ;
   write_req_SYS_ALARM_MB_ECC_INT_ENABLE = IsMEMWr && addr_decode_SYS_ALARM_MB_ECC_INT_ENABLE && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_0 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_0;
always_comb begin
 up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_0 =
    ({1{write_req_SYS_ALARM_MB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_0;
always_comb begin
 nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_0 = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_0[0], nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_0[0:0], SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_0[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_1 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_1;
always_comb begin
 up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_1 =
    ({1{write_req_SYS_ALARM_MB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_1;
always_comb begin
 nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_1 = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_1[0], nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_1[0:0], SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_1[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_2 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_2;
always_comb begin
 up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_2 =
    ({1{write_req_SYS_ALARM_MB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_2;
always_comb begin
 nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_2 = write_data[2:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_2[0], nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_2[0:0], SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_2[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_3 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_3;
always_comb begin
 up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_3 =
    ({1{write_req_SYS_ALARM_MB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_3;
always_comb begin
 nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_3 = write_data[3:3];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_3[0], nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SCH_WB_MB_ECC_ERROR_3[0:0], SYS_ALARM_MB_ECC_INT_ENABLE.SCH_WB_MB_ECC_ERROR_3[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_MB_ECC_INT_ENABLE.SYSTEM_CSR_MB_ECC_ERROR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_MB_ECC_INT_ENABLE_SYSTEM_CSR_MB_ECC_ERROR;
always_comb begin
 up_SYS_ALARM_MB_ECC_INT_ENABLE_SYSTEM_CSR_MB_ECC_ERROR =
    ({1{write_req_SYS_ALARM_MB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SYSTEM_CSR_MB_ECC_ERROR;
always_comb begin
 nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SYSTEM_CSR_MB_ECC_ERROR = write_data[4:4];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_MB_ECC_INT_ENABLE_SYSTEM_CSR_MB_ECC_ERROR[0], nxt_SYS_ALARM_MB_ECC_INT_ENABLE_SYSTEM_CSR_MB_ECC_ERROR[0:0], SYS_ALARM_MB_ECC_INT_ENABLE.SYSTEM_CSR_MB_ECC_ERROR[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_0 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_0;
always_comb begin
 up_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_0 =
    ({1{write_req_SYS_ALARM_MB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_0;
always_comb begin
 nxt_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_0 = write_data[5:5];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_0[0], nxt_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_0[0:0], SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_0[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_1 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_1;
always_comb begin
 up_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_1 =
    ({1{write_req_SYS_ALARM_MB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_1;
always_comb begin
 nxt_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_1 = write_data[6:6];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_1[0], nxt_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_1[0:0], SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_1[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_2 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_2;
always_comb begin
 up_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_2 =
    ({1{write_req_SYS_ALARM_MB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_2;
always_comb begin
 nxt_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_2 = write_data[7:7];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_2[0], nxt_SYS_ALARM_MB_ECC_INT_ENABLE_INGRESS_MB_ECC_ERROR_2[0:0], SYS_ALARM_MB_ECC_INT_ENABLE.INGRESS_MB_ECC_ERROR_2[0:0])

//---------------------------------------------------------------------
// SYS_ALARM_SB_ECC_INT_ENABLE Address Decode
logic  addr_decode_SYS_ALARM_SB_ECC_INT_ENABLE;
logic  write_req_SYS_ALARM_SB_ECC_INT_ENABLE;
always_comb begin
   addr_decode_SYS_ALARM_SB_ECC_INT_ENABLE = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SYS_ALARM_SB_ECC_INT_ENABLE_DECODE_ADDR) && req.valid ;
   write_req_SYS_ALARM_SB_ECC_INT_ENABLE = IsMEMWr && addr_decode_SYS_ALARM_SB_ECC_INT_ENABLE && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_0 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_0;
always_comb begin
 up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_0 =
    ({1{write_req_SYS_ALARM_SB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_0;
always_comb begin
 nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_0 = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_0[0], nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_0[0:0], SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_0[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_1 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_1;
always_comb begin
 up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_1 =
    ({1{write_req_SYS_ALARM_SB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_1;
always_comb begin
 nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_1 = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_1[0], nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_1[0:0], SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_1[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_2 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_2;
always_comb begin
 up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_2 =
    ({1{write_req_SYS_ALARM_SB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_2;
always_comb begin
 nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_2 = write_data[2:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_2[0], nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_2[0:0], SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_2[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_3 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_3;
always_comb begin
 up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_3 =
    ({1{write_req_SYS_ALARM_SB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_3;
always_comb begin
 nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_3 = write_data[3:3];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_3[0], nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SCH_WB_SB_ECC_ERROR_3[0:0], SYS_ALARM_SB_ECC_INT_ENABLE.SCH_WB_SB_ECC_ERROR_3[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_SB_ECC_INT_ENABLE.SYSTEM_CSR_SB_ECC_ERROR x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_SB_ECC_INT_ENABLE_SYSTEM_CSR_SB_ECC_ERROR;
always_comb begin
 up_SYS_ALARM_SB_ECC_INT_ENABLE_SYSTEM_CSR_SB_ECC_ERROR =
    ({1{write_req_SYS_ALARM_SB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SYSTEM_CSR_SB_ECC_ERROR;
always_comb begin
 nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SYSTEM_CSR_SB_ECC_ERROR = write_data[4:4];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_SYS_ALARM_SB_ECC_INT_ENABLE_SYSTEM_CSR_SB_ECC_ERROR[0], nxt_SYS_ALARM_SB_ECC_INT_ENABLE_SYSTEM_CSR_SB_ECC_ERROR[0:0], SYS_ALARM_SB_ECC_INT_ENABLE.SYSTEM_CSR_SB_ECC_ERROR[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_0 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_0;
always_comb begin
 up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_0 =
    ({1{write_req_SYS_ALARM_SB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_0;
always_comb begin
 nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_0 = write_data[5:5];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_0[0], nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_0[0:0], SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_0[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_1 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_1;
always_comb begin
 up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_1 =
    ({1{write_req_SYS_ALARM_SB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_1;
always_comb begin
 nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_1 = write_data[6:6];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_1[0], nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_1[0:0], SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_1[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_2 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_2;
always_comb begin
 up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_2 =
    ({1{write_req_SYS_ALARM_SB_ECC_INT_ENABLE }} &
    be[0:0]);
end

logic [0:0] nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_2;
always_comb begin
 nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_2 = write_data[7:7];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_2[0], nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_2[0:0], SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_2[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_3 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_3;
always_comb begin
 up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_3 =
    ({1{write_req_SYS_ALARM_SB_ECC_INT_ENABLE }} &
    be[1:1]);
end

logic [0:0] nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_3;
always_comb begin
 nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_3 = write_data[8:8];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_3[0], nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_3[0:0], SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_3[0:0])

// ----------------------------------------------------------------------
// SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_4 x1 RW, using RW template.
logic [0:0] up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_4;
always_comb begin
 up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_4 =
    ({1{write_req_SYS_ALARM_SB_ECC_INT_ENABLE }} &
    be[1:1]);
end

logic [0:0] nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_4;
always_comb begin
 nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_4 = write_data[9:9];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_4[0], nxt_SYS_ALARM_SB_ECC_INT_ENABLE_INGRESS_SB_ECC_ERROR_4[0:0], SYS_ALARM_SB_ECC_INT_ENABLE.INGRESS_SB_ECC_ERROR_4[0:0])

// ----------------------------------------------------------------------
// ALARM_PF_SYND0 using HANDCODED_REG template.
logic addr_decode_ALARM_PF_SYND0;
logic write_req_ALARM_PF_SYND0;
logic read_req_ALARM_PF_SYND0;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h50,2'b00}: 
         addr_decode_ALARM_PF_SYND0 = req.valid;
      default: 
         addr_decode_ALARM_PF_SYND0 = 1'b0; 
   endcase
end

always_comb write_req_ALARM_PF_SYND0 = f_IsMEMWr(req_opcode) && addr_decode_ALARM_PF_SYND0  && sai_HQM_OS_W_write_en;
always_comb read_req_ALARM_PF_SYND0  = f_IsMEMRd(req_opcode) && addr_decode_ALARM_PF_SYND0  && sai_HQM_OS_W_read_en;

always_comb we_ALARM_PF_SYND0 = {4{write_req_ALARM_PF_SYND0}} & req.be[3:0];
always_comb re_ALARM_PF_SYND0 = {4{read_req_ALARM_PF_SYND0}} & req.be[3:0];
always_comb handcode_reg_wdata_ALARM_PF_SYND0 = req.data[31:0];


// ----------------------------------------------------------------------
// ALARM_PF_SYND1 using HANDCODED_REG template.
logic addr_decode_ALARM_PF_SYND1;
logic write_req_ALARM_PF_SYND1;
logic read_req_ALARM_PF_SYND1;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h50,2'b01}: 
         addr_decode_ALARM_PF_SYND1 = req.valid;
      default: 
         addr_decode_ALARM_PF_SYND1 = 1'b0; 
   endcase
end

always_comb write_req_ALARM_PF_SYND1 = f_IsMEMWr(req_opcode) && addr_decode_ALARM_PF_SYND1  && sai_HQM_OS_W_write_en;
always_comb read_req_ALARM_PF_SYND1  = f_IsMEMRd(req_opcode) && addr_decode_ALARM_PF_SYND1  && sai_HQM_OS_W_read_en;

always_comb we_ALARM_PF_SYND1 = {4{write_req_ALARM_PF_SYND1}} & req.be[3:0];
always_comb re_ALARM_PF_SYND1 = {4{read_req_ALARM_PF_SYND1}} & req.be[3:0];
always_comb handcode_reg_wdata_ALARM_PF_SYND1 = req.data[31:0];


// ----------------------------------------------------------------------
// ALARM_PF_SYND2 using HANDCODED_REG template.
logic addr_decode_ALARM_PF_SYND2;
logic write_req_ALARM_PF_SYND2;
logic read_req_ALARM_PF_SYND2;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h50,2'b10}: 
         addr_decode_ALARM_PF_SYND2 = req.valid;
      default: 
         addr_decode_ALARM_PF_SYND2 = 1'b0; 
   endcase
end

always_comb write_req_ALARM_PF_SYND2 = f_IsMEMWr(req_opcode) && addr_decode_ALARM_PF_SYND2  && sai_HQM_OS_W_write_en;
always_comb read_req_ALARM_PF_SYND2  = f_IsMEMRd(req_opcode) && addr_decode_ALARM_PF_SYND2  && sai_HQM_OS_W_read_en;

always_comb we_ALARM_PF_SYND2 = {4{write_req_ALARM_PF_SYND2}} & req.be[3:0];
always_comb re_ALARM_PF_SYND2 = {4{read_req_ALARM_PF_SYND2}} & req.be[3:0];
always_comb handcode_reg_wdata_ALARM_PF_SYND2 = req.data[31:0];


// ----------------------------------------------------------------------
// ALARM_HW_SYND using HANDCODED_REG template.
logic addr_decode_ALARM_HW_SYND;
logic write_req_ALARM_HW_SYND;
logic read_req_ALARM_HW_SYND;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h50,2'b11}: 
         addr_decode_ALARM_HW_SYND = req.valid;
      default: 
         addr_decode_ALARM_HW_SYND = 1'b0; 
   endcase
end

always_comb write_req_ALARM_HW_SYND = f_IsMEMWr(req_opcode) && addr_decode_ALARM_HW_SYND  && sai_HQM_OS_W_write_en;
always_comb read_req_ALARM_HW_SYND  = f_IsMEMRd(req_opcode) && addr_decode_ALARM_HW_SYND  && sai_HQM_OS_W_read_en;

always_comb we_ALARM_HW_SYND = {4{write_req_ALARM_HW_SYND}} & req.be[3:0];
always_comb re_ALARM_HW_SYND = {4{read_req_ALARM_HW_SYND}} & req.be[3:0];
always_comb handcode_reg_wdata_ALARM_HW_SYND = req.data[31:0];


// ----------------------------------------------------------------------
// VF_LDB_VPP_V using HANDCODED_REG template.
logic addr_decode_VF_LDB_VPP_V;
logic write_req_VF_LDB_VPP_V;
logic read_req_VF_LDB_VPP_V;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'b0??,16'h??F0,2'b00}: 
         addr_decode_VF_LDB_VPP_V = req.valid;
      default: 
         addr_decode_VF_LDB_VPP_V = 1'b0; 
   endcase
end

always_comb write_req_VF_LDB_VPP_V = f_IsMEMWr(req_opcode) && addr_decode_VF_LDB_VPP_V  && sai_HQM_OS_W_write_en;
always_comb read_req_VF_LDB_VPP_V  = f_IsMEMRd(req_opcode) && addr_decode_VF_LDB_VPP_V  && sai_HQM_OS_W_read_en;

always_comb we_VF_LDB_VPP_V = {4{write_req_VF_LDB_VPP_V}} & req.be[3:0];
always_comb re_VF_LDB_VPP_V = {4{read_req_VF_LDB_VPP_V}} & req.be[3:0];
always_comb handcode_reg_wdata_VF_LDB_VPP_V = req.data[31:0];


// ----------------------------------------------------------------------
// VF_LDB_VPP2PP using HANDCODED_REG template.
logic addr_decode_VF_LDB_VPP2PP;
logic write_req_VF_LDB_VPP2PP;
logic read_req_VF_LDB_VPP2PP;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'b0??,16'h??F0,2'b01}: 
         addr_decode_VF_LDB_VPP2PP = req.valid;
      default: 
         addr_decode_VF_LDB_VPP2PP = 1'b0; 
   endcase
end

always_comb write_req_VF_LDB_VPP2PP = f_IsMEMWr(req_opcode) && addr_decode_VF_LDB_VPP2PP  && sai_HQM_OS_W_write_en;
always_comb read_req_VF_LDB_VPP2PP  = f_IsMEMRd(req_opcode) && addr_decode_VF_LDB_VPP2PP  && sai_HQM_OS_W_read_en;

always_comb we_VF_LDB_VPP2PP = {4{write_req_VF_LDB_VPP2PP}} & req.be[3:0];
always_comb re_VF_LDB_VPP2PP = {4{read_req_VF_LDB_VPP2PP}} & req.be[3:0];
always_comb handcode_reg_wdata_VF_LDB_VPP2PP = req.data[31:0];


// ----------------------------------------------------------------------
// VF_DIR_VPP_V using HANDCODED_REG template.
logic addr_decode_VF_DIR_VPP_V;
logic write_req_VF_DIR_VPP_V;
logic read_req_VF_DIR_VPP_V;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'b0??,16'h??F0,2'b10}: 
         addr_decode_VF_DIR_VPP_V = req.valid;
      default: 
         addr_decode_VF_DIR_VPP_V = 1'b0; 
   endcase
end

always_comb write_req_VF_DIR_VPP_V = f_IsMEMWr(req_opcode) && addr_decode_VF_DIR_VPP_V  && sai_HQM_OS_W_write_en;
always_comb read_req_VF_DIR_VPP_V  = f_IsMEMRd(req_opcode) && addr_decode_VF_DIR_VPP_V  && sai_HQM_OS_W_read_en;

always_comb we_VF_DIR_VPP_V = {4{write_req_VF_DIR_VPP_V}} & req.be[3:0];
always_comb re_VF_DIR_VPP_V = {4{read_req_VF_DIR_VPP_V}} & req.be[3:0];
always_comb handcode_reg_wdata_VF_DIR_VPP_V = req.data[31:0];


// ----------------------------------------------------------------------
// VF_DIR_VPP2PP using HANDCODED_REG template.
logic addr_decode_VF_DIR_VPP2PP;
logic write_req_VF_DIR_VPP2PP;
logic read_req_VF_DIR_VPP2PP;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'b0??,16'h??F0,2'b11}: 
         addr_decode_VF_DIR_VPP2PP = req.valid;
      default: 
         addr_decode_VF_DIR_VPP2PP = 1'b0; 
   endcase
end

always_comb write_req_VF_DIR_VPP2PP = f_IsMEMWr(req_opcode) && addr_decode_VF_DIR_VPP2PP  && sai_HQM_OS_W_write_en;
always_comb read_req_VF_DIR_VPP2PP  = f_IsMEMRd(req_opcode) && addr_decode_VF_DIR_VPP2PP  && sai_HQM_OS_W_read_en;

always_comb we_VF_DIR_VPP2PP = {4{write_req_VF_DIR_VPP2PP}} & req.be[3:0];
always_comb re_VF_DIR_VPP2PP = {4{read_req_VF_DIR_VPP2PP}} & req.be[3:0];
always_comb handcode_reg_wdata_VF_DIR_VPP2PP = req.data[31:0];


// ----------------------------------------------------------------------
// VF_LDB_VQID_V using HANDCODED_REG template.
logic addr_decode_VF_LDB_VQID_V;
logic write_req_VF_LDB_VQID_V;
logic read_req_VF_LDB_VQID_V;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'b0?,16'h??F1,2'b00}: 
         addr_decode_VF_LDB_VQID_V = req.valid;
      default: 
         addr_decode_VF_LDB_VQID_V = 1'b0; 
   endcase
end

always_comb write_req_VF_LDB_VQID_V = f_IsMEMWr(req_opcode) && addr_decode_VF_LDB_VQID_V  && sai_HQM_OS_W_write_en;
always_comb read_req_VF_LDB_VQID_V  = f_IsMEMRd(req_opcode) && addr_decode_VF_LDB_VQID_V  && sai_HQM_OS_W_read_en;

always_comb we_VF_LDB_VQID_V = {4{write_req_VF_LDB_VQID_V}} & req.be[3:0];
always_comb re_VF_LDB_VQID_V = {4{read_req_VF_LDB_VQID_V}} & req.be[3:0];
always_comb handcode_reg_wdata_VF_LDB_VQID_V = req.data[31:0];


// ----------------------------------------------------------------------
// VF_LDB_VQID2QID using HANDCODED_REG template.
logic addr_decode_VF_LDB_VQID2QID;
logic write_req_VF_LDB_VQID2QID;
logic read_req_VF_LDB_VQID2QID;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'b0?,16'h??F1,2'b01}: 
         addr_decode_VF_LDB_VQID2QID = req.valid;
      default: 
         addr_decode_VF_LDB_VQID2QID = 1'b0; 
   endcase
end

always_comb write_req_VF_LDB_VQID2QID = f_IsMEMWr(req_opcode) && addr_decode_VF_LDB_VQID2QID  && sai_HQM_OS_W_write_en;
always_comb read_req_VF_LDB_VQID2QID  = f_IsMEMRd(req_opcode) && addr_decode_VF_LDB_VQID2QID  && sai_HQM_OS_W_read_en;

always_comb we_VF_LDB_VQID2QID = {4{write_req_VF_LDB_VQID2QID}} & req.be[3:0];
always_comb re_VF_LDB_VQID2QID = {4{read_req_VF_LDB_VQID2QID}} & req.be[3:0];
always_comb handcode_reg_wdata_VF_LDB_VQID2QID = req.data[31:0];


// ----------------------------------------------------------------------
// LDB_QID2VQID using HANDCODED_REG template.
logic addr_decode_LDB_QID2VQID;
logic write_req_LDB_QID2VQID;
logic read_req_LDB_QID2VQID;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0?,12'h?F1,2'b10}: 
         addr_decode_LDB_QID2VQID = req.valid;
      default: 
         addr_decode_LDB_QID2VQID = 1'b0; 
   endcase
end

always_comb write_req_LDB_QID2VQID = f_IsMEMWr(req_opcode) && addr_decode_LDB_QID2VQID  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_QID2VQID  = f_IsMEMRd(req_opcode) && addr_decode_LDB_QID2VQID  && sai_HQM_OS_W_read_en;

always_comb we_LDB_QID2VQID = {4{write_req_LDB_QID2VQID}} & req.be[3:0];
always_comb re_LDB_QID2VQID = {4{read_req_LDB_QID2VQID}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_QID2VQID = req.data[31:0];


// ----------------------------------------------------------------------
// VF_DIR_VQID_V using HANDCODED_REG template.
logic addr_decode_VF_DIR_VQID_V;
logic write_req_VF_DIR_VQID_V;
logic read_req_VF_DIR_VQID_V;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'b0??,16'h??F1,2'b11}: 
         addr_decode_VF_DIR_VQID_V = req.valid;
      default: 
         addr_decode_VF_DIR_VQID_V = 1'b0; 
   endcase
end

always_comb write_req_VF_DIR_VQID_V = f_IsMEMWr(req_opcode) && addr_decode_VF_DIR_VQID_V  && sai_HQM_OS_W_write_en;
always_comb read_req_VF_DIR_VQID_V  = f_IsMEMRd(req_opcode) && addr_decode_VF_DIR_VQID_V  && sai_HQM_OS_W_read_en;

always_comb we_VF_DIR_VQID_V = {4{write_req_VF_DIR_VQID_V}} & req.be[3:0];
always_comb re_VF_DIR_VQID_V = {4{read_req_VF_DIR_VQID_V}} & req.be[3:0];
always_comb handcode_reg_wdata_VF_DIR_VQID_V = req.data[31:0];


// ----------------------------------------------------------------------
// VF_DIR_VQID2QID using HANDCODED_REG template.
logic addr_decode_VF_DIR_VQID2QID;
logic write_req_VF_DIR_VQID2QID;
logic read_req_VF_DIR_VQID2QID;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'b0??,16'h??F2,2'b00}: 
         addr_decode_VF_DIR_VQID2QID = req.valid;
      default: 
         addr_decode_VF_DIR_VQID2QID = 1'b0; 
   endcase
end

always_comb write_req_VF_DIR_VQID2QID = f_IsMEMWr(req_opcode) && addr_decode_VF_DIR_VQID2QID  && sai_HQM_OS_W_write_en;
always_comb read_req_VF_DIR_VQID2QID  = f_IsMEMRd(req_opcode) && addr_decode_VF_DIR_VQID2QID  && sai_HQM_OS_W_read_en;

always_comb we_VF_DIR_VQID2QID = {4{write_req_VF_DIR_VQID2QID}} & req.be[3:0];
always_comb re_VF_DIR_VQID2QID = {4{read_req_VF_DIR_VQID2QID}} & req.be[3:0];
always_comb handcode_reg_wdata_VF_DIR_VQID2QID = req.data[31:0];


// ----------------------------------------------------------------------
// LDB_VASQID_V using HANDCODED_REG template.
logic addr_decode_LDB_VASQID_V;
logic write_req_LDB_VASQID_V;
logic read_req_LDB_VASQID_V;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'b0??,16'h??F2,2'b01}: 
         addr_decode_LDB_VASQID_V = req.valid;
      default: 
         addr_decode_LDB_VASQID_V = 1'b0; 
   endcase
end

always_comb write_req_LDB_VASQID_V = f_IsMEMWr(req_opcode) && addr_decode_LDB_VASQID_V  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_VASQID_V  = f_IsMEMRd(req_opcode) && addr_decode_LDB_VASQID_V  && sai_HQM_OS_W_read_en;

always_comb we_LDB_VASQID_V = {4{write_req_LDB_VASQID_V}} & req.be[3:0];
always_comb re_LDB_VASQID_V = {4{read_req_LDB_VASQID_V}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_VASQID_V = req.data[31:0];


// ----------------------------------------------------------------------
// DIR_VASQID_V using HANDCODED_REG template.
logic addr_decode_DIR_VASQID_V;
logic write_req_DIR_VASQID_V;
logic read_req_DIR_VASQID_V;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'b0???,16'h??F2,2'b10}: 
         addr_decode_DIR_VASQID_V = req.valid;
      default: 
         addr_decode_DIR_VASQID_V = 1'b0; 
   endcase
end

always_comb write_req_DIR_VASQID_V = f_IsMEMWr(req_opcode) && addr_decode_DIR_VASQID_V  && sai_HQM_OS_W_write_en;
always_comb read_req_DIR_VASQID_V  = f_IsMEMRd(req_opcode) && addr_decode_DIR_VASQID_V  && sai_HQM_OS_W_read_en;

always_comb we_DIR_VASQID_V = {4{write_req_DIR_VASQID_V}} & req.be[3:0];
always_comb re_DIR_VASQID_V = {4{read_req_DIR_VASQID_V}} & req.be[3:0];
always_comb handcode_reg_wdata_DIR_VASQID_V = req.data[31:0];


// ----------------------------------------------------------------------
// ALARM_VF_SYND0 using HANDCODED_REG template.
logic addr_decode_ALARM_VF_SYND0;
logic write_req_ALARM_VF_SYND0;
logic read_req_ALARM_VF_SYND0;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h0?F4,2'b00}: 
         addr_decode_ALARM_VF_SYND0 = req.valid;
      default: 
         addr_decode_ALARM_VF_SYND0 = 1'b0; 
   endcase
end

always_comb write_req_ALARM_VF_SYND0 = f_IsMEMWr(req_opcode) && addr_decode_ALARM_VF_SYND0  && sai_HQM_OS_W_write_en;
always_comb read_req_ALARM_VF_SYND0  = f_IsMEMRd(req_opcode) && addr_decode_ALARM_VF_SYND0  && sai_HQM_OS_W_read_en;

always_comb we_ALARM_VF_SYND0 = {4{write_req_ALARM_VF_SYND0}} & req.be[3:0];
always_comb re_ALARM_VF_SYND0 = {4{read_req_ALARM_VF_SYND0}} & req.be[3:0];
always_comb handcode_reg_wdata_ALARM_VF_SYND0 = req.data[31:0];


// ----------------------------------------------------------------------
// ALARM_VF_SYND1 using HANDCODED_REG template.
logic addr_decode_ALARM_VF_SYND1;
logic write_req_ALARM_VF_SYND1;
logic read_req_ALARM_VF_SYND1;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h0?F4,2'b01}: 
         addr_decode_ALARM_VF_SYND1 = req.valid;
      default: 
         addr_decode_ALARM_VF_SYND1 = 1'b0; 
   endcase
end

always_comb write_req_ALARM_VF_SYND1 = f_IsMEMWr(req_opcode) && addr_decode_ALARM_VF_SYND1  && sai_HQM_OS_W_write_en;
always_comb read_req_ALARM_VF_SYND1  = f_IsMEMRd(req_opcode) && addr_decode_ALARM_VF_SYND1  && sai_HQM_OS_W_read_en;

always_comb we_ALARM_VF_SYND1 = {4{write_req_ALARM_VF_SYND1}} & req.be[3:0];
always_comb re_ALARM_VF_SYND1 = {4{read_req_ALARM_VF_SYND1}} & req.be[3:0];
always_comb handcode_reg_wdata_ALARM_VF_SYND1 = req.data[31:0];


// ----------------------------------------------------------------------
// ALARM_VF_SYND2 using HANDCODED_REG template.
logic addr_decode_ALARM_VF_SYND2;
logic write_req_ALARM_VF_SYND2;
logic read_req_ALARM_VF_SYND2;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h0?F4,2'b10}: 
         addr_decode_ALARM_VF_SYND2 = req.valid;
      default: 
         addr_decode_ALARM_VF_SYND2 = 1'b0; 
   endcase
end

always_comb write_req_ALARM_VF_SYND2 = f_IsMEMWr(req_opcode) && addr_decode_ALARM_VF_SYND2  && sai_HQM_OS_W_write_en;
always_comb read_req_ALARM_VF_SYND2  = f_IsMEMRd(req_opcode) && addr_decode_ALARM_VF_SYND2  && sai_HQM_OS_W_read_en;

always_comb we_ALARM_VF_SYND2 = {4{write_req_ALARM_VF_SYND2}} & req.be[3:0];
always_comb re_ALARM_VF_SYND2 = {4{read_req_ALARM_VF_SYND2}} & req.be[3:0];
always_comb handcode_reg_wdata_ALARM_VF_SYND2 = req.data[31:0];


// ----------------------------------------------------------------------
// LDB_QID_V using HANDCODED_REG template.
logic addr_decode_LDB_QID_V;
logic write_req_LDB_QID_V;
logic read_req_LDB_QID_V;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0?,12'h?F5,2'b00}: 
         addr_decode_LDB_QID_V = req.valid;
      default: 
         addr_decode_LDB_QID_V = 1'b0; 
   endcase
end

always_comb write_req_LDB_QID_V = f_IsMEMWr(req_opcode) && addr_decode_LDB_QID_V  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_QID_V  = f_IsMEMRd(req_opcode) && addr_decode_LDB_QID_V  && sai_HQM_OS_W_read_en;

always_comb we_LDB_QID_V = {4{write_req_LDB_QID_V}} & req.be[3:0];
always_comb re_LDB_QID_V = {4{read_req_LDB_QID_V}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_QID_V = req.data[31:0];


// ----------------------------------------------------------------------
// LDB_QID_ITS using HANDCODED_REG template.
logic addr_decode_LDB_QID_ITS;
logic write_req_LDB_QID_ITS;
logic read_req_LDB_QID_ITS;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0?,12'h?F5,2'b01}: 
         addr_decode_LDB_QID_ITS = req.valid;
      default: 
         addr_decode_LDB_QID_ITS = 1'b0; 
   endcase
end

always_comb write_req_LDB_QID_ITS = f_IsMEMWr(req_opcode) && addr_decode_LDB_QID_ITS  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_QID_ITS  = f_IsMEMRd(req_opcode) && addr_decode_LDB_QID_ITS  && sai_HQM_OS_W_read_en;

always_comb we_LDB_QID_ITS = {4{write_req_LDB_QID_ITS}} & req.be[3:0];
always_comb re_LDB_QID_ITS = {4{read_req_LDB_QID_ITS}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_QID_ITS = req.data[31:0];


// ----------------------------------------------------------------------
// LDB_QID_CFG_V using HANDCODED_REG template.
logic addr_decode_LDB_QID_CFG_V;
logic write_req_LDB_QID_CFG_V;
logic read_req_LDB_QID_CFG_V;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0?,12'h?F5,2'b10}: 
         addr_decode_LDB_QID_CFG_V = req.valid;
      default: 
         addr_decode_LDB_QID_CFG_V = 1'b0; 
   endcase
end

always_comb write_req_LDB_QID_CFG_V = f_IsMEMWr(req_opcode) && addr_decode_LDB_QID_CFG_V  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_QID_CFG_V  = f_IsMEMRd(req_opcode) && addr_decode_LDB_QID_CFG_V  && sai_HQM_OS_W_read_en;

always_comb we_LDB_QID_CFG_V = {4{write_req_LDB_QID_CFG_V}} & req.be[3:0];
always_comb re_LDB_QID_CFG_V = {4{read_req_LDB_QID_CFG_V}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_QID_CFG_V = req.data[31:0];


// ----------------------------------------------------------------------
// DIR_QID_V using HANDCODED_REG template.
logic addr_decode_DIR_QID_V;
logic write_req_DIR_QID_V;
logic read_req_DIR_QID_V;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?F6,2'b00}: 
         addr_decode_DIR_QID_V = req.valid;
      default: 
         addr_decode_DIR_QID_V = 1'b0; 
   endcase
end

always_comb write_req_DIR_QID_V = f_IsMEMWr(req_opcode) && addr_decode_DIR_QID_V  && sai_HQM_OS_W_write_en;
always_comb read_req_DIR_QID_V  = f_IsMEMRd(req_opcode) && addr_decode_DIR_QID_V  && sai_HQM_OS_W_read_en;

always_comb we_DIR_QID_V = {4{write_req_DIR_QID_V}} & req.be[3:0];
always_comb re_DIR_QID_V = {4{read_req_DIR_QID_V}} & req.be[3:0];
always_comb handcode_reg_wdata_DIR_QID_V = req.data[31:0];


// ----------------------------------------------------------------------
// DIR_QID_ITS using HANDCODED_REG template.
logic addr_decode_DIR_QID_ITS;
logic write_req_DIR_QID_ITS;
logic read_req_DIR_QID_ITS;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?F6,2'b01}: 
         addr_decode_DIR_QID_ITS = req.valid;
      default: 
         addr_decode_DIR_QID_ITS = 1'b0; 
   endcase
end

always_comb write_req_DIR_QID_ITS = f_IsMEMWr(req_opcode) && addr_decode_DIR_QID_ITS  && sai_HQM_OS_W_write_en;
always_comb read_req_DIR_QID_ITS  = f_IsMEMRd(req_opcode) && addr_decode_DIR_QID_ITS  && sai_HQM_OS_W_read_en;

always_comb we_DIR_QID_ITS = {4{write_req_DIR_QID_ITS}} & req.be[3:0];
always_comb re_DIR_QID_ITS = {4{read_req_DIR_QID_ITS}} & req.be[3:0];
always_comb handcode_reg_wdata_DIR_QID_ITS = req.data[31:0];


// ----------------------------------------------------------------------
// LDB_CQ_ADDR_L using HANDCODED_REG template.
logic addr_decode_LDB_CQ_ADDR_L;
logic write_req_LDB_CQ_ADDR_L;
logic read_req_LDB_CQ_ADDR_L;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?F8,2'b00}: 
         addr_decode_LDB_CQ_ADDR_L = req.valid;
      default: 
         addr_decode_LDB_CQ_ADDR_L = 1'b0; 
   endcase
end

always_comb write_req_LDB_CQ_ADDR_L = f_IsMEMWr(req_opcode) && addr_decode_LDB_CQ_ADDR_L  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_CQ_ADDR_L  = f_IsMEMRd(req_opcode) && addr_decode_LDB_CQ_ADDR_L  && sai_HQM_OS_W_read_en;

always_comb we_LDB_CQ_ADDR_L = {4{write_req_LDB_CQ_ADDR_L}} & req.be[3:0];
always_comb re_LDB_CQ_ADDR_L = {4{read_req_LDB_CQ_ADDR_L}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_CQ_ADDR_L = req.data[31:0];


// ----------------------------------------------------------------------
// LDB_CQ_ADDR_U using HANDCODED_REG template.
logic addr_decode_LDB_CQ_ADDR_U;
logic write_req_LDB_CQ_ADDR_U;
logic read_req_LDB_CQ_ADDR_U;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?F8,2'b01}: 
         addr_decode_LDB_CQ_ADDR_U = req.valid;
      default: 
         addr_decode_LDB_CQ_ADDR_U = 1'b0; 
   endcase
end

always_comb write_req_LDB_CQ_ADDR_U = f_IsMEMWr(req_opcode) && addr_decode_LDB_CQ_ADDR_U  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_CQ_ADDR_U  = f_IsMEMRd(req_opcode) && addr_decode_LDB_CQ_ADDR_U  && sai_HQM_OS_W_read_en;

always_comb we_LDB_CQ_ADDR_U = {4{write_req_LDB_CQ_ADDR_U}} & req.be[3:0];
always_comb re_LDB_CQ_ADDR_U = {4{read_req_LDB_CQ_ADDR_U}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_CQ_ADDR_U = req.data[31:0];


// ----------------------------------------------------------------------
// LDB_PP2VAS using HANDCODED_REG template.
logic addr_decode_LDB_PP2VAS;
logic write_req_LDB_PP2VAS;
logic read_req_LDB_PP2VAS;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?F8,2'b10}: 
         addr_decode_LDB_PP2VAS = req.valid;
      default: 
         addr_decode_LDB_PP2VAS = 1'b0; 
   endcase
end

always_comb write_req_LDB_PP2VAS = f_IsMEMWr(req_opcode) && addr_decode_LDB_PP2VAS  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_PP2VAS  = f_IsMEMRd(req_opcode) && addr_decode_LDB_PP2VAS  && sai_HQM_OS_W_read_en;

always_comb we_LDB_PP2VAS = {4{write_req_LDB_PP2VAS}} & req.be[3:0];
always_comb re_LDB_PP2VAS = {4{read_req_LDB_PP2VAS}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_PP2VAS = req.data[31:0];


//---------------------------------------------------------------------
// HQM_LDB_PP2VDEV Address Decode
logic [63:0] addr_decode_HQM_LDB_PP2VDEV;
logic [63:0] write_req_HQM_LDB_PP2VDEV;
always_comb begin
   addr_decode_HQM_LDB_PP2VDEV[0] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[0]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[1] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[1]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[2] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[2]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[3] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[3]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[4] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[4]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[5] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[5]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[6] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[6]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[7] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[7]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[8] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[8]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[9] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[9]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[10] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[10]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[11] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[11]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[12] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[12]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[13] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[13]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[14] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[14]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[15] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[15]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[16] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[16]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[17] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[17]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[18] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[18]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[19] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[19]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[20] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[20]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[21] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[21]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[22] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[22]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[23] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[23]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[24] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[24]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[25] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[25]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[26] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[26]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[27] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[27]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[28] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[28]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[29] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[29]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[30] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[30]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[31] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[31]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[32] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[32]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[33] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[33]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[34] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[34]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[35] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[35]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[36] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[36]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[37] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[37]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[38] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[38]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[39] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[39]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[40] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[40]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[41] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[41]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[42] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[42]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[43] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[43]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[44] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[44]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[45] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[45]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[46] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[46]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[47] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[47]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[48] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[48]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[49] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[49]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[50] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[50]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[51] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[51]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[52] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[52]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[53] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[53]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[54] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[54]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[55] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[55]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[56] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[56]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[57] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[57]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[58] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[58]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[59] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[59]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[60] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[60]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[61] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[61]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[62] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[62]) && req.valid ;
   addr_decode_HQM_LDB_PP2VDEV[63] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_LDB_PP2VDEV_DECODE_ADDR[63]) && req.valid ;
   write_req_HQM_LDB_PP2VDEV[0] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[0] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[1] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[1] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[2] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[2] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[3] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[3] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[4] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[4] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[5] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[5] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[6] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[6] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[7] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[7] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[8] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[8] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[9] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[9] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[10] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[10] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[11] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[11] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[12] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[12] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[13] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[13] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[14] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[14] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[15] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[15] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[16] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[16] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[17] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[17] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[18] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[18] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[19] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[19] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[20] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[20] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[21] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[21] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[22] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[22] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[23] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[23] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[24] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[24] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[25] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[25] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[26] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[26] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[27] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[27] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[28] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[28] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[29] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[29] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[30] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[30] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[31] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[31] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[32] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[32] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[33] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[33] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[34] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[34] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[35] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[35] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[36] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[36] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[37] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[37] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[38] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[38] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[39] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[39] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[40] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[40] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[41] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[41] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[42] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[42] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[43] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[43] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[44] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[44] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[45] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[45] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[46] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[46] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[47] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[47] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[48] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[48] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[49] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[49] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[50] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[50] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[51] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[51] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[52] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[52] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[53] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[53] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[54] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[54] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[55] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[55] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[56] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[56] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[57] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[57] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[58] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[58] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[59] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[59] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[60] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[60] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[61] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[61] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[62] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[62] && sai_HQM_OS_W_write_en;
   write_req_HQM_LDB_PP2VDEV[63] = IsMEMWr && addr_decode_HQM_LDB_PP2VDEV[63] && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// HQM_LDB_PP2VDEV.VDEV x4 RW, using RW template.
logic [63:0][0:0] up_HQM_LDB_PP2VDEV_VDEV;
always_comb begin
 up_HQM_LDB_PP2VDEV_VDEV[0] =
    ({1{write_req_HQM_LDB_PP2VDEV[0] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[1] =
    ({1{write_req_HQM_LDB_PP2VDEV[1] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[2] =
    ({1{write_req_HQM_LDB_PP2VDEV[2] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[3] =
    ({1{write_req_HQM_LDB_PP2VDEV[3] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[4] =
    ({1{write_req_HQM_LDB_PP2VDEV[4] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[5] =
    ({1{write_req_HQM_LDB_PP2VDEV[5] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[6] =
    ({1{write_req_HQM_LDB_PP2VDEV[6] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[7] =
    ({1{write_req_HQM_LDB_PP2VDEV[7] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[8] =
    ({1{write_req_HQM_LDB_PP2VDEV[8] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[9] =
    ({1{write_req_HQM_LDB_PP2VDEV[9] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[10] =
    ({1{write_req_HQM_LDB_PP2VDEV[10] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[11] =
    ({1{write_req_HQM_LDB_PP2VDEV[11] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[12] =
    ({1{write_req_HQM_LDB_PP2VDEV[12] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[13] =
    ({1{write_req_HQM_LDB_PP2VDEV[13] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[14] =
    ({1{write_req_HQM_LDB_PP2VDEV[14] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[15] =
    ({1{write_req_HQM_LDB_PP2VDEV[15] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[16] =
    ({1{write_req_HQM_LDB_PP2VDEV[16] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[17] =
    ({1{write_req_HQM_LDB_PP2VDEV[17] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[18] =
    ({1{write_req_HQM_LDB_PP2VDEV[18] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[19] =
    ({1{write_req_HQM_LDB_PP2VDEV[19] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[20] =
    ({1{write_req_HQM_LDB_PP2VDEV[20] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[21] =
    ({1{write_req_HQM_LDB_PP2VDEV[21] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[22] =
    ({1{write_req_HQM_LDB_PP2VDEV[22] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[23] =
    ({1{write_req_HQM_LDB_PP2VDEV[23] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[24] =
    ({1{write_req_HQM_LDB_PP2VDEV[24] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[25] =
    ({1{write_req_HQM_LDB_PP2VDEV[25] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[26] =
    ({1{write_req_HQM_LDB_PP2VDEV[26] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[27] =
    ({1{write_req_HQM_LDB_PP2VDEV[27] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[28] =
    ({1{write_req_HQM_LDB_PP2VDEV[28] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[29] =
    ({1{write_req_HQM_LDB_PP2VDEV[29] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[30] =
    ({1{write_req_HQM_LDB_PP2VDEV[30] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[31] =
    ({1{write_req_HQM_LDB_PP2VDEV[31] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[32] =
    ({1{write_req_HQM_LDB_PP2VDEV[32] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[33] =
    ({1{write_req_HQM_LDB_PP2VDEV[33] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[34] =
    ({1{write_req_HQM_LDB_PP2VDEV[34] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[35] =
    ({1{write_req_HQM_LDB_PP2VDEV[35] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[36] =
    ({1{write_req_HQM_LDB_PP2VDEV[36] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[37] =
    ({1{write_req_HQM_LDB_PP2VDEV[37] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[38] =
    ({1{write_req_HQM_LDB_PP2VDEV[38] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[39] =
    ({1{write_req_HQM_LDB_PP2VDEV[39] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[40] =
    ({1{write_req_HQM_LDB_PP2VDEV[40] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[41] =
    ({1{write_req_HQM_LDB_PP2VDEV[41] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[42] =
    ({1{write_req_HQM_LDB_PP2VDEV[42] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[43] =
    ({1{write_req_HQM_LDB_PP2VDEV[43] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[44] =
    ({1{write_req_HQM_LDB_PP2VDEV[44] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[45] =
    ({1{write_req_HQM_LDB_PP2VDEV[45] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[46] =
    ({1{write_req_HQM_LDB_PP2VDEV[46] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[47] =
    ({1{write_req_HQM_LDB_PP2VDEV[47] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[48] =
    ({1{write_req_HQM_LDB_PP2VDEV[48] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[49] =
    ({1{write_req_HQM_LDB_PP2VDEV[49] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[50] =
    ({1{write_req_HQM_LDB_PP2VDEV[50] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[51] =
    ({1{write_req_HQM_LDB_PP2VDEV[51] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[52] =
    ({1{write_req_HQM_LDB_PP2VDEV[52] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[53] =
    ({1{write_req_HQM_LDB_PP2VDEV[53] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[54] =
    ({1{write_req_HQM_LDB_PP2VDEV[54] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[55] =
    ({1{write_req_HQM_LDB_PP2VDEV[55] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[56] =
    ({1{write_req_HQM_LDB_PP2VDEV[56] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[57] =
    ({1{write_req_HQM_LDB_PP2VDEV[57] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[58] =
    ({1{write_req_HQM_LDB_PP2VDEV[58] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[59] =
    ({1{write_req_HQM_LDB_PP2VDEV[59] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[60] =
    ({1{write_req_HQM_LDB_PP2VDEV[60] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[61] =
    ({1{write_req_HQM_LDB_PP2VDEV[61] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[62] =
    ({1{write_req_HQM_LDB_PP2VDEV[62] }} &
    be[0:0]);
 up_HQM_LDB_PP2VDEV_VDEV[63] =
    ({1{write_req_HQM_LDB_PP2VDEV[63] }} &
    be[0:0]);
end

logic [63:0][3:0] nxt_HQM_LDB_PP2VDEV_VDEV;
always_comb begin
 nxt_HQM_LDB_PP2VDEV_VDEV[0] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[1] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[2] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[3] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[4] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[5] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[6] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[7] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[8] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[9] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[10] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[11] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[12] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[13] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[14] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[15] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[16] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[17] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[18] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[19] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[20] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[21] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[22] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[23] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[24] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[25] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[26] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[27] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[28] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[29] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[30] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[31] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[32] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[33] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[34] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[35] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[36] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[37] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[38] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[39] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[40] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[41] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[42] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[43] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[44] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[45] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[46] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[47] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[48] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[49] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[50] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[51] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[52] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[53] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[54] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[55] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[56] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[57] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[58] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[59] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[60] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[61] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[62] = write_data[3:0];

 nxt_HQM_LDB_PP2VDEV_VDEV[63] = write_data[3:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[0][0], nxt_HQM_LDB_PP2VDEV_VDEV[0][3:0], HQM_LDB_PP2VDEV[0].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[1][0], nxt_HQM_LDB_PP2VDEV_VDEV[1][3:0], HQM_LDB_PP2VDEV[1].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[2][0], nxt_HQM_LDB_PP2VDEV_VDEV[2][3:0], HQM_LDB_PP2VDEV[2].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[3][0], nxt_HQM_LDB_PP2VDEV_VDEV[3][3:0], HQM_LDB_PP2VDEV[3].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[4][0], nxt_HQM_LDB_PP2VDEV_VDEV[4][3:0], HQM_LDB_PP2VDEV[4].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[5][0], nxt_HQM_LDB_PP2VDEV_VDEV[5][3:0], HQM_LDB_PP2VDEV[5].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[6][0], nxt_HQM_LDB_PP2VDEV_VDEV[6][3:0], HQM_LDB_PP2VDEV[6].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[7][0], nxt_HQM_LDB_PP2VDEV_VDEV[7][3:0], HQM_LDB_PP2VDEV[7].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[8][0], nxt_HQM_LDB_PP2VDEV_VDEV[8][3:0], HQM_LDB_PP2VDEV[8].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[9][0], nxt_HQM_LDB_PP2VDEV_VDEV[9][3:0], HQM_LDB_PP2VDEV[9].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[10][0], nxt_HQM_LDB_PP2VDEV_VDEV[10][3:0], HQM_LDB_PP2VDEV[10].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[11][0], nxt_HQM_LDB_PP2VDEV_VDEV[11][3:0], HQM_LDB_PP2VDEV[11].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[12][0], nxt_HQM_LDB_PP2VDEV_VDEV[12][3:0], HQM_LDB_PP2VDEV[12].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[13][0], nxt_HQM_LDB_PP2VDEV_VDEV[13][3:0], HQM_LDB_PP2VDEV[13].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[14][0], nxt_HQM_LDB_PP2VDEV_VDEV[14][3:0], HQM_LDB_PP2VDEV[14].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[15][0], nxt_HQM_LDB_PP2VDEV_VDEV[15][3:0], HQM_LDB_PP2VDEV[15].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[16][0], nxt_HQM_LDB_PP2VDEV_VDEV[16][3:0], HQM_LDB_PP2VDEV[16].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[17][0], nxt_HQM_LDB_PP2VDEV_VDEV[17][3:0], HQM_LDB_PP2VDEV[17].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[18][0], nxt_HQM_LDB_PP2VDEV_VDEV[18][3:0], HQM_LDB_PP2VDEV[18].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[19][0], nxt_HQM_LDB_PP2VDEV_VDEV[19][3:0], HQM_LDB_PP2VDEV[19].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[20][0], nxt_HQM_LDB_PP2VDEV_VDEV[20][3:0], HQM_LDB_PP2VDEV[20].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[21][0], nxt_HQM_LDB_PP2VDEV_VDEV[21][3:0], HQM_LDB_PP2VDEV[21].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[22][0], nxt_HQM_LDB_PP2VDEV_VDEV[22][3:0], HQM_LDB_PP2VDEV[22].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[23][0], nxt_HQM_LDB_PP2VDEV_VDEV[23][3:0], HQM_LDB_PP2VDEV[23].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[24][0], nxt_HQM_LDB_PP2VDEV_VDEV[24][3:0], HQM_LDB_PP2VDEV[24].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[25][0], nxt_HQM_LDB_PP2VDEV_VDEV[25][3:0], HQM_LDB_PP2VDEV[25].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[26][0], nxt_HQM_LDB_PP2VDEV_VDEV[26][3:0], HQM_LDB_PP2VDEV[26].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[27][0], nxt_HQM_LDB_PP2VDEV_VDEV[27][3:0], HQM_LDB_PP2VDEV[27].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[28][0], nxt_HQM_LDB_PP2VDEV_VDEV[28][3:0], HQM_LDB_PP2VDEV[28].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[29][0], nxt_HQM_LDB_PP2VDEV_VDEV[29][3:0], HQM_LDB_PP2VDEV[29].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[30][0], nxt_HQM_LDB_PP2VDEV_VDEV[30][3:0], HQM_LDB_PP2VDEV[30].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[31][0], nxt_HQM_LDB_PP2VDEV_VDEV[31][3:0], HQM_LDB_PP2VDEV[31].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[32][0], nxt_HQM_LDB_PP2VDEV_VDEV[32][3:0], HQM_LDB_PP2VDEV[32].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[33][0], nxt_HQM_LDB_PP2VDEV_VDEV[33][3:0], HQM_LDB_PP2VDEV[33].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[34][0], nxt_HQM_LDB_PP2VDEV_VDEV[34][3:0], HQM_LDB_PP2VDEV[34].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[35][0], nxt_HQM_LDB_PP2VDEV_VDEV[35][3:0], HQM_LDB_PP2VDEV[35].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[36][0], nxt_HQM_LDB_PP2VDEV_VDEV[36][3:0], HQM_LDB_PP2VDEV[36].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[37][0], nxt_HQM_LDB_PP2VDEV_VDEV[37][3:0], HQM_LDB_PP2VDEV[37].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[38][0], nxt_HQM_LDB_PP2VDEV_VDEV[38][3:0], HQM_LDB_PP2VDEV[38].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[39][0], nxt_HQM_LDB_PP2VDEV_VDEV[39][3:0], HQM_LDB_PP2VDEV[39].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[40][0], nxt_HQM_LDB_PP2VDEV_VDEV[40][3:0], HQM_LDB_PP2VDEV[40].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[41][0], nxt_HQM_LDB_PP2VDEV_VDEV[41][3:0], HQM_LDB_PP2VDEV[41].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[42][0], nxt_HQM_LDB_PP2VDEV_VDEV[42][3:0], HQM_LDB_PP2VDEV[42].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[43][0], nxt_HQM_LDB_PP2VDEV_VDEV[43][3:0], HQM_LDB_PP2VDEV[43].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[44][0], nxt_HQM_LDB_PP2VDEV_VDEV[44][3:0], HQM_LDB_PP2VDEV[44].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[45][0], nxt_HQM_LDB_PP2VDEV_VDEV[45][3:0], HQM_LDB_PP2VDEV[45].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[46][0], nxt_HQM_LDB_PP2VDEV_VDEV[46][3:0], HQM_LDB_PP2VDEV[46].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[47][0], nxt_HQM_LDB_PP2VDEV_VDEV[47][3:0], HQM_LDB_PP2VDEV[47].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[48][0], nxt_HQM_LDB_PP2VDEV_VDEV[48][3:0], HQM_LDB_PP2VDEV[48].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[49][0], nxt_HQM_LDB_PP2VDEV_VDEV[49][3:0], HQM_LDB_PP2VDEV[49].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[50][0], nxt_HQM_LDB_PP2VDEV_VDEV[50][3:0], HQM_LDB_PP2VDEV[50].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[51][0], nxt_HQM_LDB_PP2VDEV_VDEV[51][3:0], HQM_LDB_PP2VDEV[51].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[52][0], nxt_HQM_LDB_PP2VDEV_VDEV[52][3:0], HQM_LDB_PP2VDEV[52].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[53][0], nxt_HQM_LDB_PP2VDEV_VDEV[53][3:0], HQM_LDB_PP2VDEV[53].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[54][0], nxt_HQM_LDB_PP2VDEV_VDEV[54][3:0], HQM_LDB_PP2VDEV[54].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[55][0], nxt_HQM_LDB_PP2VDEV_VDEV[55][3:0], HQM_LDB_PP2VDEV[55].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[56][0], nxt_HQM_LDB_PP2VDEV_VDEV[56][3:0], HQM_LDB_PP2VDEV[56].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[57][0], nxt_HQM_LDB_PP2VDEV_VDEV[57][3:0], HQM_LDB_PP2VDEV[57].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[58][0], nxt_HQM_LDB_PP2VDEV_VDEV[58][3:0], HQM_LDB_PP2VDEV[58].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[59][0], nxt_HQM_LDB_PP2VDEV_VDEV[59][3:0], HQM_LDB_PP2VDEV[59].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[60][0], nxt_HQM_LDB_PP2VDEV_VDEV[60][3:0], HQM_LDB_PP2VDEV[60].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[61][0], nxt_HQM_LDB_PP2VDEV_VDEV[61][3:0], HQM_LDB_PP2VDEV[61].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[62][0], nxt_HQM_LDB_PP2VDEV_VDEV[62][3:0], HQM_LDB_PP2VDEV[62].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_LDB_PP2VDEV_VDEV[63][0], nxt_HQM_LDB_PP2VDEV_VDEV[63][3:0], HQM_LDB_PP2VDEV[63].VDEV[3:0])

// ----------------------------------------------------------------------
// LDB_PP_V using HANDCODED_REG template.
logic addr_decode_LDB_PP_V;
logic write_req_LDB_PP_V;
logic read_req_LDB_PP_V;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?F9,2'b00}: 
         addr_decode_LDB_PP_V = req.valid;
      default: 
         addr_decode_LDB_PP_V = 1'b0; 
   endcase
end

always_comb write_req_LDB_PP_V = f_IsMEMWr(req_opcode) && addr_decode_LDB_PP_V  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_PP_V  = f_IsMEMRd(req_opcode) && addr_decode_LDB_PP_V  && sai_HQM_OS_W_read_en;

always_comb we_LDB_PP_V = {4{write_req_LDB_PP_V}} & req.be[3:0];
always_comb re_LDB_PP_V = {4{read_req_LDB_PP_V}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_PP_V = req.data[31:0];


// ----------------------------------------------------------------------
// LDB_CQ2VF_PF_RO using HANDCODED_REG template.
logic addr_decode_LDB_CQ2VF_PF_RO;
logic write_req_LDB_CQ2VF_PF_RO;
logic read_req_LDB_CQ2VF_PF_RO;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?F9,2'b01}: 
         addr_decode_LDB_CQ2VF_PF_RO = req.valid;
      default: 
         addr_decode_LDB_CQ2VF_PF_RO = 1'b0; 
   endcase
end

always_comb write_req_LDB_CQ2VF_PF_RO = f_IsMEMWr(req_opcode) && addr_decode_LDB_CQ2VF_PF_RO  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_CQ2VF_PF_RO  = f_IsMEMRd(req_opcode) && addr_decode_LDB_CQ2VF_PF_RO  && sai_HQM_OS_W_read_en;

always_comb we_LDB_CQ2VF_PF_RO = {4{write_req_LDB_CQ2VF_PF_RO}} & req.be[3:0];
always_comb re_LDB_CQ2VF_PF_RO = {4{read_req_LDB_CQ2VF_PF_RO}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_CQ2VF_PF_RO = req.data[31:0];


// ----------------------------------------------------------------------
// LDB_CQ_ISR using HANDCODED_REG template.
logic addr_decode_LDB_CQ_ISR;
logic write_req_LDB_CQ_ISR;
logic read_req_LDB_CQ_ISR;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?F9,2'b10}: 
         addr_decode_LDB_CQ_ISR = req.valid;
      default: 
         addr_decode_LDB_CQ_ISR = 1'b0; 
   endcase
end

always_comb write_req_LDB_CQ_ISR = f_IsMEMWr(req_opcode) && addr_decode_LDB_CQ_ISR  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_CQ_ISR  = f_IsMEMRd(req_opcode) && addr_decode_LDB_CQ_ISR  && sai_HQM_OS_W_read_en;

always_comb we_LDB_CQ_ISR = {4{write_req_LDB_CQ_ISR}} & req.be[3:0];
always_comb re_LDB_CQ_ISR = {4{read_req_LDB_CQ_ISR}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_CQ_ISR = req.data[31:0];


// ----------------------------------------------------------------------
// LDB_CQ_PASID using HANDCODED_REG template.
logic addr_decode_LDB_CQ_PASID;
logic write_req_LDB_CQ_PASID;
logic read_req_LDB_CQ_PASID;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?F9,2'b11}: 
         addr_decode_LDB_CQ_PASID = req.valid;
      default: 
         addr_decode_LDB_CQ_PASID = 1'b0; 
   endcase
end

always_comb write_req_LDB_CQ_PASID = f_IsMEMWr(req_opcode) && addr_decode_LDB_CQ_PASID  && sai_HQM_OS_W_write_en;
always_comb read_req_LDB_CQ_PASID  = f_IsMEMRd(req_opcode) && addr_decode_LDB_CQ_PASID  && sai_HQM_OS_W_read_en;

always_comb we_LDB_CQ_PASID = {4{write_req_LDB_CQ_PASID}} & req.be[3:0];
always_comb re_LDB_CQ_PASID = {4{read_req_LDB_CQ_PASID}} & req.be[3:0];
always_comb handcode_reg_wdata_LDB_CQ_PASID = req.data[31:0];


//---------------------------------------------------------------------
// LDB_PP_ROB_V Address Decode
logic [63:0] addr_decode_LDB_PP_ROB_V;
logic [63:0] write_req_LDB_PP_ROB_V;
always_comb begin
   addr_decode_LDB_PP_ROB_V[0] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[0]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[1] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[1]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[2] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[2]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[3] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[3]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[4] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[4]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[5] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[5]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[6] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[6]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[7] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[7]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[8] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[8]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[9] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[9]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[10] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[10]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[11] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[11]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[12] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[12]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[13] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[13]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[14] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[14]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[15] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[15]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[16] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[16]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[17] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[17]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[18] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[18]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[19] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[19]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[20] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[20]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[21] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[21]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[22] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[22]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[23] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[23]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[24] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[24]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[25] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[25]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[26] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[26]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[27] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[27]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[28] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[28]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[29] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[29]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[30] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[30]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[31] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[31]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[32] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[32]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[33] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[33]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[34] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[34]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[35] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[35]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[36] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[36]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[37] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[37]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[38] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[38]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[39] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[39]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[40] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[40]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[41] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[41]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[42] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[42]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[43] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[43]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[44] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[44]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[45] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[45]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[46] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[46]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[47] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[47]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[48] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[48]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[49] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[49]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[50] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[50]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[51] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[51]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[52] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[52]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[53] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[53]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[54] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[54]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[55] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[55]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[56] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[56]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[57] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[57]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[58] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[58]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[59] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[59]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[60] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[60]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[61] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[61]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[62] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[62]) && req.valid ;
   addr_decode_LDB_PP_ROB_V[63] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == LDB_PP_ROB_V_DECODE_ADDR[63]) && req.valid ;
   write_req_LDB_PP_ROB_V[0] = IsMEMWr && addr_decode_LDB_PP_ROB_V[0] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[1] = IsMEMWr && addr_decode_LDB_PP_ROB_V[1] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[2] = IsMEMWr && addr_decode_LDB_PP_ROB_V[2] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[3] = IsMEMWr && addr_decode_LDB_PP_ROB_V[3] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[4] = IsMEMWr && addr_decode_LDB_PP_ROB_V[4] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[5] = IsMEMWr && addr_decode_LDB_PP_ROB_V[5] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[6] = IsMEMWr && addr_decode_LDB_PP_ROB_V[6] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[7] = IsMEMWr && addr_decode_LDB_PP_ROB_V[7] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[8] = IsMEMWr && addr_decode_LDB_PP_ROB_V[8] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[9] = IsMEMWr && addr_decode_LDB_PP_ROB_V[9] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[10] = IsMEMWr && addr_decode_LDB_PP_ROB_V[10] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[11] = IsMEMWr && addr_decode_LDB_PP_ROB_V[11] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[12] = IsMEMWr && addr_decode_LDB_PP_ROB_V[12] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[13] = IsMEMWr && addr_decode_LDB_PP_ROB_V[13] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[14] = IsMEMWr && addr_decode_LDB_PP_ROB_V[14] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[15] = IsMEMWr && addr_decode_LDB_PP_ROB_V[15] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[16] = IsMEMWr && addr_decode_LDB_PP_ROB_V[16] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[17] = IsMEMWr && addr_decode_LDB_PP_ROB_V[17] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[18] = IsMEMWr && addr_decode_LDB_PP_ROB_V[18] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[19] = IsMEMWr && addr_decode_LDB_PP_ROB_V[19] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[20] = IsMEMWr && addr_decode_LDB_PP_ROB_V[20] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[21] = IsMEMWr && addr_decode_LDB_PP_ROB_V[21] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[22] = IsMEMWr && addr_decode_LDB_PP_ROB_V[22] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[23] = IsMEMWr && addr_decode_LDB_PP_ROB_V[23] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[24] = IsMEMWr && addr_decode_LDB_PP_ROB_V[24] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[25] = IsMEMWr && addr_decode_LDB_PP_ROB_V[25] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[26] = IsMEMWr && addr_decode_LDB_PP_ROB_V[26] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[27] = IsMEMWr && addr_decode_LDB_PP_ROB_V[27] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[28] = IsMEMWr && addr_decode_LDB_PP_ROB_V[28] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[29] = IsMEMWr && addr_decode_LDB_PP_ROB_V[29] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[30] = IsMEMWr && addr_decode_LDB_PP_ROB_V[30] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[31] = IsMEMWr && addr_decode_LDB_PP_ROB_V[31] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[32] = IsMEMWr && addr_decode_LDB_PP_ROB_V[32] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[33] = IsMEMWr && addr_decode_LDB_PP_ROB_V[33] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[34] = IsMEMWr && addr_decode_LDB_PP_ROB_V[34] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[35] = IsMEMWr && addr_decode_LDB_PP_ROB_V[35] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[36] = IsMEMWr && addr_decode_LDB_PP_ROB_V[36] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[37] = IsMEMWr && addr_decode_LDB_PP_ROB_V[37] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[38] = IsMEMWr && addr_decode_LDB_PP_ROB_V[38] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[39] = IsMEMWr && addr_decode_LDB_PP_ROB_V[39] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[40] = IsMEMWr && addr_decode_LDB_PP_ROB_V[40] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[41] = IsMEMWr && addr_decode_LDB_PP_ROB_V[41] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[42] = IsMEMWr && addr_decode_LDB_PP_ROB_V[42] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[43] = IsMEMWr && addr_decode_LDB_PP_ROB_V[43] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[44] = IsMEMWr && addr_decode_LDB_PP_ROB_V[44] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[45] = IsMEMWr && addr_decode_LDB_PP_ROB_V[45] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[46] = IsMEMWr && addr_decode_LDB_PP_ROB_V[46] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[47] = IsMEMWr && addr_decode_LDB_PP_ROB_V[47] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[48] = IsMEMWr && addr_decode_LDB_PP_ROB_V[48] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[49] = IsMEMWr && addr_decode_LDB_PP_ROB_V[49] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[50] = IsMEMWr && addr_decode_LDB_PP_ROB_V[50] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[51] = IsMEMWr && addr_decode_LDB_PP_ROB_V[51] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[52] = IsMEMWr && addr_decode_LDB_PP_ROB_V[52] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[53] = IsMEMWr && addr_decode_LDB_PP_ROB_V[53] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[54] = IsMEMWr && addr_decode_LDB_PP_ROB_V[54] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[55] = IsMEMWr && addr_decode_LDB_PP_ROB_V[55] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[56] = IsMEMWr && addr_decode_LDB_PP_ROB_V[56] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[57] = IsMEMWr && addr_decode_LDB_PP_ROB_V[57] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[58] = IsMEMWr && addr_decode_LDB_PP_ROB_V[58] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[59] = IsMEMWr && addr_decode_LDB_PP_ROB_V[59] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[60] = IsMEMWr && addr_decode_LDB_PP_ROB_V[60] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[61] = IsMEMWr && addr_decode_LDB_PP_ROB_V[61] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[62] = IsMEMWr && addr_decode_LDB_PP_ROB_V[62] && sai_HQM_OS_W_write_en;
   write_req_LDB_PP_ROB_V[63] = IsMEMWr && addr_decode_LDB_PP_ROB_V[63] && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// LDB_PP_ROB_V.ROB_V x1 RW, using RW template.
logic [63:0][0:0] up_LDB_PP_ROB_V_ROB_V;
always_comb begin
 up_LDB_PP_ROB_V_ROB_V[0] =
    ({1{write_req_LDB_PP_ROB_V[0] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[1] =
    ({1{write_req_LDB_PP_ROB_V[1] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[2] =
    ({1{write_req_LDB_PP_ROB_V[2] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[3] =
    ({1{write_req_LDB_PP_ROB_V[3] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[4] =
    ({1{write_req_LDB_PP_ROB_V[4] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[5] =
    ({1{write_req_LDB_PP_ROB_V[5] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[6] =
    ({1{write_req_LDB_PP_ROB_V[6] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[7] =
    ({1{write_req_LDB_PP_ROB_V[7] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[8] =
    ({1{write_req_LDB_PP_ROB_V[8] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[9] =
    ({1{write_req_LDB_PP_ROB_V[9] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[10] =
    ({1{write_req_LDB_PP_ROB_V[10] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[11] =
    ({1{write_req_LDB_PP_ROB_V[11] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[12] =
    ({1{write_req_LDB_PP_ROB_V[12] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[13] =
    ({1{write_req_LDB_PP_ROB_V[13] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[14] =
    ({1{write_req_LDB_PP_ROB_V[14] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[15] =
    ({1{write_req_LDB_PP_ROB_V[15] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[16] =
    ({1{write_req_LDB_PP_ROB_V[16] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[17] =
    ({1{write_req_LDB_PP_ROB_V[17] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[18] =
    ({1{write_req_LDB_PP_ROB_V[18] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[19] =
    ({1{write_req_LDB_PP_ROB_V[19] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[20] =
    ({1{write_req_LDB_PP_ROB_V[20] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[21] =
    ({1{write_req_LDB_PP_ROB_V[21] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[22] =
    ({1{write_req_LDB_PP_ROB_V[22] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[23] =
    ({1{write_req_LDB_PP_ROB_V[23] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[24] =
    ({1{write_req_LDB_PP_ROB_V[24] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[25] =
    ({1{write_req_LDB_PP_ROB_V[25] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[26] =
    ({1{write_req_LDB_PP_ROB_V[26] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[27] =
    ({1{write_req_LDB_PP_ROB_V[27] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[28] =
    ({1{write_req_LDB_PP_ROB_V[28] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[29] =
    ({1{write_req_LDB_PP_ROB_V[29] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[30] =
    ({1{write_req_LDB_PP_ROB_V[30] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[31] =
    ({1{write_req_LDB_PP_ROB_V[31] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[32] =
    ({1{write_req_LDB_PP_ROB_V[32] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[33] =
    ({1{write_req_LDB_PP_ROB_V[33] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[34] =
    ({1{write_req_LDB_PP_ROB_V[34] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[35] =
    ({1{write_req_LDB_PP_ROB_V[35] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[36] =
    ({1{write_req_LDB_PP_ROB_V[36] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[37] =
    ({1{write_req_LDB_PP_ROB_V[37] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[38] =
    ({1{write_req_LDB_PP_ROB_V[38] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[39] =
    ({1{write_req_LDB_PP_ROB_V[39] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[40] =
    ({1{write_req_LDB_PP_ROB_V[40] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[41] =
    ({1{write_req_LDB_PP_ROB_V[41] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[42] =
    ({1{write_req_LDB_PP_ROB_V[42] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[43] =
    ({1{write_req_LDB_PP_ROB_V[43] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[44] =
    ({1{write_req_LDB_PP_ROB_V[44] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[45] =
    ({1{write_req_LDB_PP_ROB_V[45] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[46] =
    ({1{write_req_LDB_PP_ROB_V[46] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[47] =
    ({1{write_req_LDB_PP_ROB_V[47] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[48] =
    ({1{write_req_LDB_PP_ROB_V[48] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[49] =
    ({1{write_req_LDB_PP_ROB_V[49] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[50] =
    ({1{write_req_LDB_PP_ROB_V[50] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[51] =
    ({1{write_req_LDB_PP_ROB_V[51] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[52] =
    ({1{write_req_LDB_PP_ROB_V[52] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[53] =
    ({1{write_req_LDB_PP_ROB_V[53] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[54] =
    ({1{write_req_LDB_PP_ROB_V[54] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[55] =
    ({1{write_req_LDB_PP_ROB_V[55] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[56] =
    ({1{write_req_LDB_PP_ROB_V[56] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[57] =
    ({1{write_req_LDB_PP_ROB_V[57] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[58] =
    ({1{write_req_LDB_PP_ROB_V[58] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[59] =
    ({1{write_req_LDB_PP_ROB_V[59] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[60] =
    ({1{write_req_LDB_PP_ROB_V[60] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[61] =
    ({1{write_req_LDB_PP_ROB_V[61] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[62] =
    ({1{write_req_LDB_PP_ROB_V[62] }} &
    be[0:0]);
 up_LDB_PP_ROB_V_ROB_V[63] =
    ({1{write_req_LDB_PP_ROB_V[63] }} &
    be[0:0]);
end

logic [63:0][0:0] nxt_LDB_PP_ROB_V_ROB_V;
always_comb begin
 nxt_LDB_PP_ROB_V_ROB_V[0] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[1] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[2] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[3] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[4] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[5] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[6] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[7] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[8] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[9] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[10] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[11] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[12] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[13] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[14] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[15] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[16] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[17] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[18] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[19] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[20] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[21] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[22] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[23] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[24] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[25] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[26] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[27] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[28] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[29] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[30] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[31] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[32] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[33] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[34] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[35] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[36] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[37] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[38] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[39] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[40] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[41] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[42] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[43] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[44] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[45] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[46] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[47] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[48] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[49] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[50] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[51] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[52] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[53] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[54] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[55] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[56] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[57] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[58] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[59] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[60] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[61] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[62] = write_data[0:0];

 nxt_LDB_PP_ROB_V_ROB_V[63] = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[0][0], nxt_LDB_PP_ROB_V_ROB_V[0][0:0], LDB_PP_ROB_V[0].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[1][0], nxt_LDB_PP_ROB_V_ROB_V[1][0:0], LDB_PP_ROB_V[1].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[2][0], nxt_LDB_PP_ROB_V_ROB_V[2][0:0], LDB_PP_ROB_V[2].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[3][0], nxt_LDB_PP_ROB_V_ROB_V[3][0:0], LDB_PP_ROB_V[3].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[4][0], nxt_LDB_PP_ROB_V_ROB_V[4][0:0], LDB_PP_ROB_V[4].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[5][0], nxt_LDB_PP_ROB_V_ROB_V[5][0:0], LDB_PP_ROB_V[5].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[6][0], nxt_LDB_PP_ROB_V_ROB_V[6][0:0], LDB_PP_ROB_V[6].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[7][0], nxt_LDB_PP_ROB_V_ROB_V[7][0:0], LDB_PP_ROB_V[7].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[8][0], nxt_LDB_PP_ROB_V_ROB_V[8][0:0], LDB_PP_ROB_V[8].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[9][0], nxt_LDB_PP_ROB_V_ROB_V[9][0:0], LDB_PP_ROB_V[9].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[10][0], nxt_LDB_PP_ROB_V_ROB_V[10][0:0], LDB_PP_ROB_V[10].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[11][0], nxt_LDB_PP_ROB_V_ROB_V[11][0:0], LDB_PP_ROB_V[11].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[12][0], nxt_LDB_PP_ROB_V_ROB_V[12][0:0], LDB_PP_ROB_V[12].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[13][0], nxt_LDB_PP_ROB_V_ROB_V[13][0:0], LDB_PP_ROB_V[13].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[14][0], nxt_LDB_PP_ROB_V_ROB_V[14][0:0], LDB_PP_ROB_V[14].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[15][0], nxt_LDB_PP_ROB_V_ROB_V[15][0:0], LDB_PP_ROB_V[15].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[16][0], nxt_LDB_PP_ROB_V_ROB_V[16][0:0], LDB_PP_ROB_V[16].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[17][0], nxt_LDB_PP_ROB_V_ROB_V[17][0:0], LDB_PP_ROB_V[17].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[18][0], nxt_LDB_PP_ROB_V_ROB_V[18][0:0], LDB_PP_ROB_V[18].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[19][0], nxt_LDB_PP_ROB_V_ROB_V[19][0:0], LDB_PP_ROB_V[19].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[20][0], nxt_LDB_PP_ROB_V_ROB_V[20][0:0], LDB_PP_ROB_V[20].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[21][0], nxt_LDB_PP_ROB_V_ROB_V[21][0:0], LDB_PP_ROB_V[21].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[22][0], nxt_LDB_PP_ROB_V_ROB_V[22][0:0], LDB_PP_ROB_V[22].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[23][0], nxt_LDB_PP_ROB_V_ROB_V[23][0:0], LDB_PP_ROB_V[23].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[24][0], nxt_LDB_PP_ROB_V_ROB_V[24][0:0], LDB_PP_ROB_V[24].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[25][0], nxt_LDB_PP_ROB_V_ROB_V[25][0:0], LDB_PP_ROB_V[25].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[26][0], nxt_LDB_PP_ROB_V_ROB_V[26][0:0], LDB_PP_ROB_V[26].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[27][0], nxt_LDB_PP_ROB_V_ROB_V[27][0:0], LDB_PP_ROB_V[27].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[28][0], nxt_LDB_PP_ROB_V_ROB_V[28][0:0], LDB_PP_ROB_V[28].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[29][0], nxt_LDB_PP_ROB_V_ROB_V[29][0:0], LDB_PP_ROB_V[29].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[30][0], nxt_LDB_PP_ROB_V_ROB_V[30][0:0], LDB_PP_ROB_V[30].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[31][0], nxt_LDB_PP_ROB_V_ROB_V[31][0:0], LDB_PP_ROB_V[31].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[32][0], nxt_LDB_PP_ROB_V_ROB_V[32][0:0], LDB_PP_ROB_V[32].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[33][0], nxt_LDB_PP_ROB_V_ROB_V[33][0:0], LDB_PP_ROB_V[33].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[34][0], nxt_LDB_PP_ROB_V_ROB_V[34][0:0], LDB_PP_ROB_V[34].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[35][0], nxt_LDB_PP_ROB_V_ROB_V[35][0:0], LDB_PP_ROB_V[35].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[36][0], nxt_LDB_PP_ROB_V_ROB_V[36][0:0], LDB_PP_ROB_V[36].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[37][0], nxt_LDB_PP_ROB_V_ROB_V[37][0:0], LDB_PP_ROB_V[37].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[38][0], nxt_LDB_PP_ROB_V_ROB_V[38][0:0], LDB_PP_ROB_V[38].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[39][0], nxt_LDB_PP_ROB_V_ROB_V[39][0:0], LDB_PP_ROB_V[39].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[40][0], nxt_LDB_PP_ROB_V_ROB_V[40][0:0], LDB_PP_ROB_V[40].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[41][0], nxt_LDB_PP_ROB_V_ROB_V[41][0:0], LDB_PP_ROB_V[41].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[42][0], nxt_LDB_PP_ROB_V_ROB_V[42][0:0], LDB_PP_ROB_V[42].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[43][0], nxt_LDB_PP_ROB_V_ROB_V[43][0:0], LDB_PP_ROB_V[43].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[44][0], nxt_LDB_PP_ROB_V_ROB_V[44][0:0], LDB_PP_ROB_V[44].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[45][0], nxt_LDB_PP_ROB_V_ROB_V[45][0:0], LDB_PP_ROB_V[45].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[46][0], nxt_LDB_PP_ROB_V_ROB_V[46][0:0], LDB_PP_ROB_V[46].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[47][0], nxt_LDB_PP_ROB_V_ROB_V[47][0:0], LDB_PP_ROB_V[47].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[48][0], nxt_LDB_PP_ROB_V_ROB_V[48][0:0], LDB_PP_ROB_V[48].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[49][0], nxt_LDB_PP_ROB_V_ROB_V[49][0:0], LDB_PP_ROB_V[49].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[50][0], nxt_LDB_PP_ROB_V_ROB_V[50][0:0], LDB_PP_ROB_V[50].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[51][0], nxt_LDB_PP_ROB_V_ROB_V[51][0:0], LDB_PP_ROB_V[51].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[52][0], nxt_LDB_PP_ROB_V_ROB_V[52][0:0], LDB_PP_ROB_V[52].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[53][0], nxt_LDB_PP_ROB_V_ROB_V[53][0:0], LDB_PP_ROB_V[53].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[54][0], nxt_LDB_PP_ROB_V_ROB_V[54][0:0], LDB_PP_ROB_V[54].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[55][0], nxt_LDB_PP_ROB_V_ROB_V[55][0:0], LDB_PP_ROB_V[55].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[56][0], nxt_LDB_PP_ROB_V_ROB_V[56][0:0], LDB_PP_ROB_V[56].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[57][0], nxt_LDB_PP_ROB_V_ROB_V[57][0:0], LDB_PP_ROB_V[57].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[58][0], nxt_LDB_PP_ROB_V_ROB_V[58][0:0], LDB_PP_ROB_V[58].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[59][0], nxt_LDB_PP_ROB_V_ROB_V[59][0:0], LDB_PP_ROB_V[59].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[60][0], nxt_LDB_PP_ROB_V_ROB_V[60][0:0], LDB_PP_ROB_V[60].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[61][0], nxt_LDB_PP_ROB_V_ROB_V[61][0:0], LDB_PP_ROB_V[61].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[62][0], nxt_LDB_PP_ROB_V_ROB_V[62][0:0], LDB_PP_ROB_V[62].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_LDB_PP_ROB_V_ROB_V[63][0], nxt_LDB_PP_ROB_V_ROB_V[63][0:0], LDB_PP_ROB_V[63].ROB_V[0:0])

// ----------------------------------------------------------------------
// DIR_CQ_ADDR_L using HANDCODED_REG template.
logic addr_decode_DIR_CQ_ADDR_L;
logic write_req_DIR_CQ_ADDR_L;
logic read_req_DIR_CQ_ADDR_L;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?FC,2'b00}: 
         addr_decode_DIR_CQ_ADDR_L = req.valid;
      default: 
         addr_decode_DIR_CQ_ADDR_L = 1'b0; 
   endcase
end

always_comb write_req_DIR_CQ_ADDR_L = f_IsMEMWr(req_opcode) && addr_decode_DIR_CQ_ADDR_L  && sai_HQM_OS_W_write_en;
always_comb read_req_DIR_CQ_ADDR_L  = f_IsMEMRd(req_opcode) && addr_decode_DIR_CQ_ADDR_L  && sai_HQM_OS_W_read_en;

always_comb we_DIR_CQ_ADDR_L = {4{write_req_DIR_CQ_ADDR_L}} & req.be[3:0];
always_comb re_DIR_CQ_ADDR_L = {4{read_req_DIR_CQ_ADDR_L}} & req.be[3:0];
always_comb handcode_reg_wdata_DIR_CQ_ADDR_L = req.data[31:0];


// ----------------------------------------------------------------------
// DIR_CQ_ADDR_U using HANDCODED_REG template.
logic addr_decode_DIR_CQ_ADDR_U;
logic write_req_DIR_CQ_ADDR_U;
logic read_req_DIR_CQ_ADDR_U;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?FC,2'b01}: 
         addr_decode_DIR_CQ_ADDR_U = req.valid;
      default: 
         addr_decode_DIR_CQ_ADDR_U = 1'b0; 
   endcase
end

always_comb write_req_DIR_CQ_ADDR_U = f_IsMEMWr(req_opcode) && addr_decode_DIR_CQ_ADDR_U  && sai_HQM_OS_W_write_en;
always_comb read_req_DIR_CQ_ADDR_U  = f_IsMEMRd(req_opcode) && addr_decode_DIR_CQ_ADDR_U  && sai_HQM_OS_W_read_en;

always_comb we_DIR_CQ_ADDR_U = {4{write_req_DIR_CQ_ADDR_U}} & req.be[3:0];
always_comb re_DIR_CQ_ADDR_U = {4{read_req_DIR_CQ_ADDR_U}} & req.be[3:0];
always_comb handcode_reg_wdata_DIR_CQ_ADDR_U = req.data[31:0];


// ----------------------------------------------------------------------
// DIR_PP2VAS using HANDCODED_REG template.
logic addr_decode_DIR_PP2VAS;
logic write_req_DIR_PP2VAS;
logic read_req_DIR_PP2VAS;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?FC,2'b10}: 
         addr_decode_DIR_PP2VAS = req.valid;
      default: 
         addr_decode_DIR_PP2VAS = 1'b0; 
   endcase
end

always_comb write_req_DIR_PP2VAS = f_IsMEMWr(req_opcode) && addr_decode_DIR_PP2VAS  && sai_HQM_OS_W_write_en;
always_comb read_req_DIR_PP2VAS  = f_IsMEMRd(req_opcode) && addr_decode_DIR_PP2VAS  && sai_HQM_OS_W_read_en;

always_comb we_DIR_PP2VAS = {4{write_req_DIR_PP2VAS}} & req.be[3:0];
always_comb re_DIR_PP2VAS = {4{read_req_DIR_PP2VAS}} & req.be[3:0];
always_comb handcode_reg_wdata_DIR_PP2VAS = req.data[31:0];


//---------------------------------------------------------------------
// HQM_DIR_PP2VDEV Address Decode
logic [63:0] addr_decode_HQM_DIR_PP2VDEV;
logic [63:0] write_req_HQM_DIR_PP2VDEV;
always_comb begin
   addr_decode_HQM_DIR_PP2VDEV[0] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[0]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[1] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[1]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[2] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[2]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[3] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[3]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[4] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[4]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[5] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[5]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[6] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[6]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[7] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[7]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[8] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[8]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[9] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[9]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[10] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[10]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[11] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[11]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[12] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[12]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[13] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[13]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[14] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[14]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[15] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[15]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[16] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[16]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[17] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[17]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[18] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[18]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[19] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[19]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[20] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[20]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[21] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[21]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[22] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[22]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[23] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[23]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[24] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[24]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[25] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[25]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[26] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[26]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[27] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[27]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[28] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[28]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[29] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[29]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[30] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[30]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[31] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[31]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[32] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[32]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[33] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[33]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[34] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[34]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[35] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[35]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[36] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[36]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[37] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[37]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[38] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[38]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[39] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[39]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[40] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[40]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[41] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[41]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[42] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[42]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[43] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[43]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[44] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[44]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[45] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[45]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[46] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[46]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[47] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[47]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[48] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[48]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[49] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[49]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[50] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[50]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[51] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[51]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[52] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[52]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[53] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[53]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[54] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[54]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[55] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[55]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[56] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[56]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[57] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[57]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[58] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[58]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[59] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[59]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[60] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[60]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[61] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[61]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[62] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[62]) && req.valid ;
   addr_decode_HQM_DIR_PP2VDEV[63] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_DIR_PP2VDEV_DECODE_ADDR[63]) && req.valid ;
   write_req_HQM_DIR_PP2VDEV[0] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[0] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[1] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[1] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[2] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[2] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[3] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[3] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[4] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[4] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[5] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[5] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[6] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[6] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[7] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[7] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[8] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[8] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[9] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[9] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[10] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[10] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[11] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[11] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[12] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[12] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[13] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[13] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[14] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[14] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[15] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[15] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[16] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[16] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[17] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[17] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[18] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[18] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[19] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[19] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[20] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[20] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[21] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[21] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[22] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[22] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[23] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[23] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[24] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[24] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[25] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[25] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[26] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[26] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[27] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[27] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[28] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[28] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[29] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[29] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[30] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[30] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[31] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[31] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[32] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[32] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[33] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[33] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[34] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[34] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[35] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[35] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[36] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[36] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[37] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[37] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[38] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[38] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[39] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[39] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[40] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[40] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[41] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[41] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[42] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[42] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[43] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[43] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[44] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[44] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[45] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[45] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[46] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[46] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[47] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[47] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[48] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[48] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[49] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[49] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[50] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[50] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[51] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[51] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[52] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[52] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[53] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[53] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[54] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[54] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[55] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[55] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[56] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[56] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[57] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[57] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[58] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[58] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[59] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[59] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[60] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[60] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[61] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[61] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[62] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[62] && sai_HQM_OS_W_write_en;
   write_req_HQM_DIR_PP2VDEV[63] = IsMEMWr && addr_decode_HQM_DIR_PP2VDEV[63] && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// HQM_DIR_PP2VDEV.VDEV x4 RW, using RW template.
logic [63:0][0:0] up_HQM_DIR_PP2VDEV_VDEV;
always_comb begin
 up_HQM_DIR_PP2VDEV_VDEV[0] =
    ({1{write_req_HQM_DIR_PP2VDEV[0] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[1] =
    ({1{write_req_HQM_DIR_PP2VDEV[1] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[2] =
    ({1{write_req_HQM_DIR_PP2VDEV[2] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[3] =
    ({1{write_req_HQM_DIR_PP2VDEV[3] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[4] =
    ({1{write_req_HQM_DIR_PP2VDEV[4] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[5] =
    ({1{write_req_HQM_DIR_PP2VDEV[5] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[6] =
    ({1{write_req_HQM_DIR_PP2VDEV[6] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[7] =
    ({1{write_req_HQM_DIR_PP2VDEV[7] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[8] =
    ({1{write_req_HQM_DIR_PP2VDEV[8] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[9] =
    ({1{write_req_HQM_DIR_PP2VDEV[9] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[10] =
    ({1{write_req_HQM_DIR_PP2VDEV[10] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[11] =
    ({1{write_req_HQM_DIR_PP2VDEV[11] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[12] =
    ({1{write_req_HQM_DIR_PP2VDEV[12] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[13] =
    ({1{write_req_HQM_DIR_PP2VDEV[13] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[14] =
    ({1{write_req_HQM_DIR_PP2VDEV[14] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[15] =
    ({1{write_req_HQM_DIR_PP2VDEV[15] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[16] =
    ({1{write_req_HQM_DIR_PP2VDEV[16] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[17] =
    ({1{write_req_HQM_DIR_PP2VDEV[17] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[18] =
    ({1{write_req_HQM_DIR_PP2VDEV[18] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[19] =
    ({1{write_req_HQM_DIR_PP2VDEV[19] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[20] =
    ({1{write_req_HQM_DIR_PP2VDEV[20] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[21] =
    ({1{write_req_HQM_DIR_PP2VDEV[21] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[22] =
    ({1{write_req_HQM_DIR_PP2VDEV[22] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[23] =
    ({1{write_req_HQM_DIR_PP2VDEV[23] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[24] =
    ({1{write_req_HQM_DIR_PP2VDEV[24] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[25] =
    ({1{write_req_HQM_DIR_PP2VDEV[25] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[26] =
    ({1{write_req_HQM_DIR_PP2VDEV[26] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[27] =
    ({1{write_req_HQM_DIR_PP2VDEV[27] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[28] =
    ({1{write_req_HQM_DIR_PP2VDEV[28] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[29] =
    ({1{write_req_HQM_DIR_PP2VDEV[29] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[30] =
    ({1{write_req_HQM_DIR_PP2VDEV[30] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[31] =
    ({1{write_req_HQM_DIR_PP2VDEV[31] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[32] =
    ({1{write_req_HQM_DIR_PP2VDEV[32] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[33] =
    ({1{write_req_HQM_DIR_PP2VDEV[33] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[34] =
    ({1{write_req_HQM_DIR_PP2VDEV[34] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[35] =
    ({1{write_req_HQM_DIR_PP2VDEV[35] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[36] =
    ({1{write_req_HQM_DIR_PP2VDEV[36] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[37] =
    ({1{write_req_HQM_DIR_PP2VDEV[37] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[38] =
    ({1{write_req_HQM_DIR_PP2VDEV[38] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[39] =
    ({1{write_req_HQM_DIR_PP2VDEV[39] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[40] =
    ({1{write_req_HQM_DIR_PP2VDEV[40] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[41] =
    ({1{write_req_HQM_DIR_PP2VDEV[41] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[42] =
    ({1{write_req_HQM_DIR_PP2VDEV[42] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[43] =
    ({1{write_req_HQM_DIR_PP2VDEV[43] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[44] =
    ({1{write_req_HQM_DIR_PP2VDEV[44] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[45] =
    ({1{write_req_HQM_DIR_PP2VDEV[45] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[46] =
    ({1{write_req_HQM_DIR_PP2VDEV[46] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[47] =
    ({1{write_req_HQM_DIR_PP2VDEV[47] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[48] =
    ({1{write_req_HQM_DIR_PP2VDEV[48] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[49] =
    ({1{write_req_HQM_DIR_PP2VDEV[49] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[50] =
    ({1{write_req_HQM_DIR_PP2VDEV[50] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[51] =
    ({1{write_req_HQM_DIR_PP2VDEV[51] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[52] =
    ({1{write_req_HQM_DIR_PP2VDEV[52] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[53] =
    ({1{write_req_HQM_DIR_PP2VDEV[53] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[54] =
    ({1{write_req_HQM_DIR_PP2VDEV[54] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[55] =
    ({1{write_req_HQM_DIR_PP2VDEV[55] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[56] =
    ({1{write_req_HQM_DIR_PP2VDEV[56] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[57] =
    ({1{write_req_HQM_DIR_PP2VDEV[57] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[58] =
    ({1{write_req_HQM_DIR_PP2VDEV[58] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[59] =
    ({1{write_req_HQM_DIR_PP2VDEV[59] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[60] =
    ({1{write_req_HQM_DIR_PP2VDEV[60] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[61] =
    ({1{write_req_HQM_DIR_PP2VDEV[61] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[62] =
    ({1{write_req_HQM_DIR_PP2VDEV[62] }} &
    be[0:0]);
 up_HQM_DIR_PP2VDEV_VDEV[63] =
    ({1{write_req_HQM_DIR_PP2VDEV[63] }} &
    be[0:0]);
end

logic [63:0][3:0] nxt_HQM_DIR_PP2VDEV_VDEV;
always_comb begin
 nxt_HQM_DIR_PP2VDEV_VDEV[0] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[1] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[2] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[3] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[4] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[5] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[6] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[7] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[8] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[9] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[10] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[11] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[12] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[13] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[14] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[15] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[16] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[17] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[18] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[19] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[20] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[21] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[22] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[23] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[24] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[25] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[26] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[27] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[28] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[29] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[30] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[31] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[32] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[33] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[34] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[35] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[36] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[37] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[38] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[39] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[40] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[41] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[42] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[43] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[44] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[45] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[46] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[47] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[48] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[49] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[50] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[51] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[52] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[53] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[54] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[55] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[56] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[57] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[58] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[59] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[60] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[61] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[62] = write_data[3:0];

 nxt_HQM_DIR_PP2VDEV_VDEV[63] = write_data[3:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[0][0], nxt_HQM_DIR_PP2VDEV_VDEV[0][3:0], HQM_DIR_PP2VDEV[0].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[1][0], nxt_HQM_DIR_PP2VDEV_VDEV[1][3:0], HQM_DIR_PP2VDEV[1].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[2][0], nxt_HQM_DIR_PP2VDEV_VDEV[2][3:0], HQM_DIR_PP2VDEV[2].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[3][0], nxt_HQM_DIR_PP2VDEV_VDEV[3][3:0], HQM_DIR_PP2VDEV[3].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[4][0], nxt_HQM_DIR_PP2VDEV_VDEV[4][3:0], HQM_DIR_PP2VDEV[4].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[5][0], nxt_HQM_DIR_PP2VDEV_VDEV[5][3:0], HQM_DIR_PP2VDEV[5].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[6][0], nxt_HQM_DIR_PP2VDEV_VDEV[6][3:0], HQM_DIR_PP2VDEV[6].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[7][0], nxt_HQM_DIR_PP2VDEV_VDEV[7][3:0], HQM_DIR_PP2VDEV[7].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[8][0], nxt_HQM_DIR_PP2VDEV_VDEV[8][3:0], HQM_DIR_PP2VDEV[8].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[9][0], nxt_HQM_DIR_PP2VDEV_VDEV[9][3:0], HQM_DIR_PP2VDEV[9].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[10][0], nxt_HQM_DIR_PP2VDEV_VDEV[10][3:0], HQM_DIR_PP2VDEV[10].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[11][0], nxt_HQM_DIR_PP2VDEV_VDEV[11][3:0], HQM_DIR_PP2VDEV[11].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[12][0], nxt_HQM_DIR_PP2VDEV_VDEV[12][3:0], HQM_DIR_PP2VDEV[12].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[13][0], nxt_HQM_DIR_PP2VDEV_VDEV[13][3:0], HQM_DIR_PP2VDEV[13].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[14][0], nxt_HQM_DIR_PP2VDEV_VDEV[14][3:0], HQM_DIR_PP2VDEV[14].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[15][0], nxt_HQM_DIR_PP2VDEV_VDEV[15][3:0], HQM_DIR_PP2VDEV[15].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[16][0], nxt_HQM_DIR_PP2VDEV_VDEV[16][3:0], HQM_DIR_PP2VDEV[16].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[17][0], nxt_HQM_DIR_PP2VDEV_VDEV[17][3:0], HQM_DIR_PP2VDEV[17].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[18][0], nxt_HQM_DIR_PP2VDEV_VDEV[18][3:0], HQM_DIR_PP2VDEV[18].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[19][0], nxt_HQM_DIR_PP2VDEV_VDEV[19][3:0], HQM_DIR_PP2VDEV[19].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[20][0], nxt_HQM_DIR_PP2VDEV_VDEV[20][3:0], HQM_DIR_PP2VDEV[20].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[21][0], nxt_HQM_DIR_PP2VDEV_VDEV[21][3:0], HQM_DIR_PP2VDEV[21].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[22][0], nxt_HQM_DIR_PP2VDEV_VDEV[22][3:0], HQM_DIR_PP2VDEV[22].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[23][0], nxt_HQM_DIR_PP2VDEV_VDEV[23][3:0], HQM_DIR_PP2VDEV[23].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[24][0], nxt_HQM_DIR_PP2VDEV_VDEV[24][3:0], HQM_DIR_PP2VDEV[24].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[25][0], nxt_HQM_DIR_PP2VDEV_VDEV[25][3:0], HQM_DIR_PP2VDEV[25].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[26][0], nxt_HQM_DIR_PP2VDEV_VDEV[26][3:0], HQM_DIR_PP2VDEV[26].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[27][0], nxt_HQM_DIR_PP2VDEV_VDEV[27][3:0], HQM_DIR_PP2VDEV[27].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[28][0], nxt_HQM_DIR_PP2VDEV_VDEV[28][3:0], HQM_DIR_PP2VDEV[28].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[29][0], nxt_HQM_DIR_PP2VDEV_VDEV[29][3:0], HQM_DIR_PP2VDEV[29].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[30][0], nxt_HQM_DIR_PP2VDEV_VDEV[30][3:0], HQM_DIR_PP2VDEV[30].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[31][0], nxt_HQM_DIR_PP2VDEV_VDEV[31][3:0], HQM_DIR_PP2VDEV[31].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[32][0], nxt_HQM_DIR_PP2VDEV_VDEV[32][3:0], HQM_DIR_PP2VDEV[32].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[33][0], nxt_HQM_DIR_PP2VDEV_VDEV[33][3:0], HQM_DIR_PP2VDEV[33].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[34][0], nxt_HQM_DIR_PP2VDEV_VDEV[34][3:0], HQM_DIR_PP2VDEV[34].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[35][0], nxt_HQM_DIR_PP2VDEV_VDEV[35][3:0], HQM_DIR_PP2VDEV[35].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[36][0], nxt_HQM_DIR_PP2VDEV_VDEV[36][3:0], HQM_DIR_PP2VDEV[36].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[37][0], nxt_HQM_DIR_PP2VDEV_VDEV[37][3:0], HQM_DIR_PP2VDEV[37].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[38][0], nxt_HQM_DIR_PP2VDEV_VDEV[38][3:0], HQM_DIR_PP2VDEV[38].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[39][0], nxt_HQM_DIR_PP2VDEV_VDEV[39][3:0], HQM_DIR_PP2VDEV[39].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[40][0], nxt_HQM_DIR_PP2VDEV_VDEV[40][3:0], HQM_DIR_PP2VDEV[40].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[41][0], nxt_HQM_DIR_PP2VDEV_VDEV[41][3:0], HQM_DIR_PP2VDEV[41].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[42][0], nxt_HQM_DIR_PP2VDEV_VDEV[42][3:0], HQM_DIR_PP2VDEV[42].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[43][0], nxt_HQM_DIR_PP2VDEV_VDEV[43][3:0], HQM_DIR_PP2VDEV[43].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[44][0], nxt_HQM_DIR_PP2VDEV_VDEV[44][3:0], HQM_DIR_PP2VDEV[44].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[45][0], nxt_HQM_DIR_PP2VDEV_VDEV[45][3:0], HQM_DIR_PP2VDEV[45].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[46][0], nxt_HQM_DIR_PP2VDEV_VDEV[46][3:0], HQM_DIR_PP2VDEV[46].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[47][0], nxt_HQM_DIR_PP2VDEV_VDEV[47][3:0], HQM_DIR_PP2VDEV[47].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[48][0], nxt_HQM_DIR_PP2VDEV_VDEV[48][3:0], HQM_DIR_PP2VDEV[48].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[49][0], nxt_HQM_DIR_PP2VDEV_VDEV[49][3:0], HQM_DIR_PP2VDEV[49].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[50][0], nxt_HQM_DIR_PP2VDEV_VDEV[50][3:0], HQM_DIR_PP2VDEV[50].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[51][0], nxt_HQM_DIR_PP2VDEV_VDEV[51][3:0], HQM_DIR_PP2VDEV[51].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[52][0], nxt_HQM_DIR_PP2VDEV_VDEV[52][3:0], HQM_DIR_PP2VDEV[52].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[53][0], nxt_HQM_DIR_PP2VDEV_VDEV[53][3:0], HQM_DIR_PP2VDEV[53].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[54][0], nxt_HQM_DIR_PP2VDEV_VDEV[54][3:0], HQM_DIR_PP2VDEV[54].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[55][0], nxt_HQM_DIR_PP2VDEV_VDEV[55][3:0], HQM_DIR_PP2VDEV[55].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[56][0], nxt_HQM_DIR_PP2VDEV_VDEV[56][3:0], HQM_DIR_PP2VDEV[56].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[57][0], nxt_HQM_DIR_PP2VDEV_VDEV[57][3:0], HQM_DIR_PP2VDEV[57].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[58][0], nxt_HQM_DIR_PP2VDEV_VDEV[58][3:0], HQM_DIR_PP2VDEV[58].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[59][0], nxt_HQM_DIR_PP2VDEV_VDEV[59][3:0], HQM_DIR_PP2VDEV[59].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[60][0], nxt_HQM_DIR_PP2VDEV_VDEV[60][3:0], HQM_DIR_PP2VDEV[60].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[61][0], nxt_HQM_DIR_PP2VDEV_VDEV[61][3:0], HQM_DIR_PP2VDEV[61].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[62][0], nxt_HQM_DIR_PP2VDEV_VDEV[62][3:0], HQM_DIR_PP2VDEV[62].VDEV[3:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 4'h0, up_HQM_DIR_PP2VDEV_VDEV[63][0], nxt_HQM_DIR_PP2VDEV_VDEV[63][3:0], HQM_DIR_PP2VDEV[63].VDEV[3:0])

// ----------------------------------------------------------------------
// DIR_PP_V using HANDCODED_REG template.
logic addr_decode_DIR_PP_V;
logic write_req_DIR_PP_V;
logic read_req_DIR_PP_V;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?FD,2'b00}: 
         addr_decode_DIR_PP_V = req.valid;
      default: 
         addr_decode_DIR_PP_V = 1'b0; 
   endcase
end

always_comb write_req_DIR_PP_V = f_IsMEMWr(req_opcode) && addr_decode_DIR_PP_V  && sai_HQM_OS_W_write_en;
always_comb read_req_DIR_PP_V  = f_IsMEMRd(req_opcode) && addr_decode_DIR_PP_V  && sai_HQM_OS_W_read_en;

always_comb we_DIR_PP_V = {4{write_req_DIR_PP_V}} & req.be[3:0];
always_comb re_DIR_PP_V = {4{read_req_DIR_PP_V}} & req.be[3:0];
always_comb handcode_reg_wdata_DIR_PP_V = req.data[31:0];


// ----------------------------------------------------------------------
// DIR_CQ2VF_PF_RO using HANDCODED_REG template.
logic addr_decode_DIR_CQ2VF_PF_RO;
logic write_req_DIR_CQ2VF_PF_RO;
logic read_req_DIR_CQ2VF_PF_RO;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?FD,2'b01}: 
         addr_decode_DIR_CQ2VF_PF_RO = req.valid;
      default: 
         addr_decode_DIR_CQ2VF_PF_RO = 1'b0; 
   endcase
end

always_comb write_req_DIR_CQ2VF_PF_RO = f_IsMEMWr(req_opcode) && addr_decode_DIR_CQ2VF_PF_RO  && sai_HQM_OS_W_write_en;
always_comb read_req_DIR_CQ2VF_PF_RO  = f_IsMEMRd(req_opcode) && addr_decode_DIR_CQ2VF_PF_RO  && sai_HQM_OS_W_read_en;

always_comb we_DIR_CQ2VF_PF_RO = {4{write_req_DIR_CQ2VF_PF_RO}} & req.be[3:0];
always_comb re_DIR_CQ2VF_PF_RO = {4{read_req_DIR_CQ2VF_PF_RO}} & req.be[3:0];
always_comb handcode_reg_wdata_DIR_CQ2VF_PF_RO = req.data[31:0];


// ----------------------------------------------------------------------
// DIR_CQ_ISR using HANDCODED_REG template.
logic addr_decode_DIR_CQ_ISR;
logic write_req_DIR_CQ_ISR;
logic read_req_DIR_CQ_ISR;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?FD,2'b10}: 
         addr_decode_DIR_CQ_ISR = req.valid;
      default: 
         addr_decode_DIR_CQ_ISR = 1'b0; 
   endcase
end

always_comb write_req_DIR_CQ_ISR = f_IsMEMWr(req_opcode) && addr_decode_DIR_CQ_ISR  && sai_HQM_OS_W_write_en;
always_comb read_req_DIR_CQ_ISR  = f_IsMEMRd(req_opcode) && addr_decode_DIR_CQ_ISR  && sai_HQM_OS_W_read_en;

always_comb we_DIR_CQ_ISR = {4{write_req_DIR_CQ_ISR}} & req.be[3:0];
always_comb re_DIR_CQ_ISR = {4{read_req_DIR_CQ_ISR}} & req.be[3:0];
always_comb handcode_reg_wdata_DIR_CQ_ISR = req.data[31:0];


// ----------------------------------------------------------------------
// DIR_CQ_PASID using HANDCODED_REG template.
logic addr_decode_DIR_CQ_PASID;
logic write_req_DIR_CQ_PASID;
logic read_req_DIR_CQ_PASID;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?FD,2'b11}: 
         addr_decode_DIR_CQ_PASID = req.valid;
      default: 
         addr_decode_DIR_CQ_PASID = 1'b0; 
   endcase
end

always_comb write_req_DIR_CQ_PASID = f_IsMEMWr(req_opcode) && addr_decode_DIR_CQ_PASID  && sai_HQM_OS_W_write_en;
always_comb read_req_DIR_CQ_PASID  = f_IsMEMRd(req_opcode) && addr_decode_DIR_CQ_PASID  && sai_HQM_OS_W_read_en;

always_comb we_DIR_CQ_PASID = {4{write_req_DIR_CQ_PASID}} & req.be[3:0];
always_comb re_DIR_CQ_PASID = {4{read_req_DIR_CQ_PASID}} & req.be[3:0];
always_comb handcode_reg_wdata_DIR_CQ_PASID = req.data[31:0];


// ----------------------------------------------------------------------
// DIR_CQ_FMT using HANDCODED_REG template.
logic addr_decode_DIR_CQ_FMT;
logic write_req_DIR_CQ_FMT;
logic read_req_DIR_CQ_FMT;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {32'b0??,12'h?FE,2'b00}: 
         addr_decode_DIR_CQ_FMT = req.valid;
      default: 
         addr_decode_DIR_CQ_FMT = 1'b0; 
   endcase
end

always_comb write_req_DIR_CQ_FMT = f_IsMEMWr(req_opcode) && addr_decode_DIR_CQ_FMT  && sai_HQM_OS_W_write_en;
always_comb read_req_DIR_CQ_FMT  = f_IsMEMRd(req_opcode) && addr_decode_DIR_CQ_FMT  && sai_HQM_OS_W_read_en;

always_comb we_DIR_CQ_FMT = {4{write_req_DIR_CQ_FMT}} & req.be[3:0];
always_comb re_DIR_CQ_FMT = {4{read_req_DIR_CQ_FMT}} & req.be[3:0];
always_comb handcode_reg_wdata_DIR_CQ_FMT = req.data[31:0];


//---------------------------------------------------------------------
// DIR_PP_ROB_V Address Decode
logic [63:0] addr_decode_DIR_PP_ROB_V;
logic [63:0] write_req_DIR_PP_ROB_V;
always_comb begin
   addr_decode_DIR_PP_ROB_V[0] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[0]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[1] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[1]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[2] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[2]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[3] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[3]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[4] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[4]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[5] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[5]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[6] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[6]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[7] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[7]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[8] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[8]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[9] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[9]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[10] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[10]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[11] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[11]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[12] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[12]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[13] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[13]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[14] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[14]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[15] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[15]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[16] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[16]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[17] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[17]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[18] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[18]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[19] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[19]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[20] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[20]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[21] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[21]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[22] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[22]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[23] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[23]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[24] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[24]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[25] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[25]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[26] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[26]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[27] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[27]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[28] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[28]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[29] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[29]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[30] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[30]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[31] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[31]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[32] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[32]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[33] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[33]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[34] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[34]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[35] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[35]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[36] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[36]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[37] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[37]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[38] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[38]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[39] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[39]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[40] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[40]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[41] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[41]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[42] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[42]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[43] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[43]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[44] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[44]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[45] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[45]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[46] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[46]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[47] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[47]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[48] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[48]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[49] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[49]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[50] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[50]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[51] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[51]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[52] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[52]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[53] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[53]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[54] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[54]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[55] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[55]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[56] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[56]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[57] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[57]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[58] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[58]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[59] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[59]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[60] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[60]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[61] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[61]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[62] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[62]) && req.valid ;
   addr_decode_DIR_PP_ROB_V[63] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == DIR_PP_ROB_V_DECODE_ADDR[63]) && req.valid ;
   write_req_DIR_PP_ROB_V[0] = IsMEMWr && addr_decode_DIR_PP_ROB_V[0] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[1] = IsMEMWr && addr_decode_DIR_PP_ROB_V[1] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[2] = IsMEMWr && addr_decode_DIR_PP_ROB_V[2] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[3] = IsMEMWr && addr_decode_DIR_PP_ROB_V[3] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[4] = IsMEMWr && addr_decode_DIR_PP_ROB_V[4] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[5] = IsMEMWr && addr_decode_DIR_PP_ROB_V[5] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[6] = IsMEMWr && addr_decode_DIR_PP_ROB_V[6] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[7] = IsMEMWr && addr_decode_DIR_PP_ROB_V[7] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[8] = IsMEMWr && addr_decode_DIR_PP_ROB_V[8] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[9] = IsMEMWr && addr_decode_DIR_PP_ROB_V[9] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[10] = IsMEMWr && addr_decode_DIR_PP_ROB_V[10] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[11] = IsMEMWr && addr_decode_DIR_PP_ROB_V[11] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[12] = IsMEMWr && addr_decode_DIR_PP_ROB_V[12] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[13] = IsMEMWr && addr_decode_DIR_PP_ROB_V[13] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[14] = IsMEMWr && addr_decode_DIR_PP_ROB_V[14] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[15] = IsMEMWr && addr_decode_DIR_PP_ROB_V[15] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[16] = IsMEMWr && addr_decode_DIR_PP_ROB_V[16] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[17] = IsMEMWr && addr_decode_DIR_PP_ROB_V[17] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[18] = IsMEMWr && addr_decode_DIR_PP_ROB_V[18] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[19] = IsMEMWr && addr_decode_DIR_PP_ROB_V[19] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[20] = IsMEMWr && addr_decode_DIR_PP_ROB_V[20] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[21] = IsMEMWr && addr_decode_DIR_PP_ROB_V[21] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[22] = IsMEMWr && addr_decode_DIR_PP_ROB_V[22] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[23] = IsMEMWr && addr_decode_DIR_PP_ROB_V[23] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[24] = IsMEMWr && addr_decode_DIR_PP_ROB_V[24] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[25] = IsMEMWr && addr_decode_DIR_PP_ROB_V[25] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[26] = IsMEMWr && addr_decode_DIR_PP_ROB_V[26] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[27] = IsMEMWr && addr_decode_DIR_PP_ROB_V[27] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[28] = IsMEMWr && addr_decode_DIR_PP_ROB_V[28] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[29] = IsMEMWr && addr_decode_DIR_PP_ROB_V[29] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[30] = IsMEMWr && addr_decode_DIR_PP_ROB_V[30] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[31] = IsMEMWr && addr_decode_DIR_PP_ROB_V[31] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[32] = IsMEMWr && addr_decode_DIR_PP_ROB_V[32] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[33] = IsMEMWr && addr_decode_DIR_PP_ROB_V[33] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[34] = IsMEMWr && addr_decode_DIR_PP_ROB_V[34] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[35] = IsMEMWr && addr_decode_DIR_PP_ROB_V[35] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[36] = IsMEMWr && addr_decode_DIR_PP_ROB_V[36] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[37] = IsMEMWr && addr_decode_DIR_PP_ROB_V[37] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[38] = IsMEMWr && addr_decode_DIR_PP_ROB_V[38] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[39] = IsMEMWr && addr_decode_DIR_PP_ROB_V[39] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[40] = IsMEMWr && addr_decode_DIR_PP_ROB_V[40] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[41] = IsMEMWr && addr_decode_DIR_PP_ROB_V[41] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[42] = IsMEMWr && addr_decode_DIR_PP_ROB_V[42] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[43] = IsMEMWr && addr_decode_DIR_PP_ROB_V[43] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[44] = IsMEMWr && addr_decode_DIR_PP_ROB_V[44] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[45] = IsMEMWr && addr_decode_DIR_PP_ROB_V[45] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[46] = IsMEMWr && addr_decode_DIR_PP_ROB_V[46] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[47] = IsMEMWr && addr_decode_DIR_PP_ROB_V[47] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[48] = IsMEMWr && addr_decode_DIR_PP_ROB_V[48] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[49] = IsMEMWr && addr_decode_DIR_PP_ROB_V[49] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[50] = IsMEMWr && addr_decode_DIR_PP_ROB_V[50] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[51] = IsMEMWr && addr_decode_DIR_PP_ROB_V[51] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[52] = IsMEMWr && addr_decode_DIR_PP_ROB_V[52] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[53] = IsMEMWr && addr_decode_DIR_PP_ROB_V[53] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[54] = IsMEMWr && addr_decode_DIR_PP_ROB_V[54] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[55] = IsMEMWr && addr_decode_DIR_PP_ROB_V[55] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[56] = IsMEMWr && addr_decode_DIR_PP_ROB_V[56] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[57] = IsMEMWr && addr_decode_DIR_PP_ROB_V[57] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[58] = IsMEMWr && addr_decode_DIR_PP_ROB_V[58] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[59] = IsMEMWr && addr_decode_DIR_PP_ROB_V[59] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[60] = IsMEMWr && addr_decode_DIR_PP_ROB_V[60] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[61] = IsMEMWr && addr_decode_DIR_PP_ROB_V[61] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[62] = IsMEMWr && addr_decode_DIR_PP_ROB_V[62] && sai_HQM_OS_W_write_en;
   write_req_DIR_PP_ROB_V[63] = IsMEMWr && addr_decode_DIR_PP_ROB_V[63] && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// DIR_PP_ROB_V.ROB_V x1 RW, using RW template.
logic [63:0][0:0] up_DIR_PP_ROB_V_ROB_V;
always_comb begin
 up_DIR_PP_ROB_V_ROB_V[0] =
    ({1{write_req_DIR_PP_ROB_V[0] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[1] =
    ({1{write_req_DIR_PP_ROB_V[1] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[2] =
    ({1{write_req_DIR_PP_ROB_V[2] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[3] =
    ({1{write_req_DIR_PP_ROB_V[3] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[4] =
    ({1{write_req_DIR_PP_ROB_V[4] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[5] =
    ({1{write_req_DIR_PP_ROB_V[5] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[6] =
    ({1{write_req_DIR_PP_ROB_V[6] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[7] =
    ({1{write_req_DIR_PP_ROB_V[7] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[8] =
    ({1{write_req_DIR_PP_ROB_V[8] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[9] =
    ({1{write_req_DIR_PP_ROB_V[9] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[10] =
    ({1{write_req_DIR_PP_ROB_V[10] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[11] =
    ({1{write_req_DIR_PP_ROB_V[11] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[12] =
    ({1{write_req_DIR_PP_ROB_V[12] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[13] =
    ({1{write_req_DIR_PP_ROB_V[13] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[14] =
    ({1{write_req_DIR_PP_ROB_V[14] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[15] =
    ({1{write_req_DIR_PP_ROB_V[15] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[16] =
    ({1{write_req_DIR_PP_ROB_V[16] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[17] =
    ({1{write_req_DIR_PP_ROB_V[17] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[18] =
    ({1{write_req_DIR_PP_ROB_V[18] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[19] =
    ({1{write_req_DIR_PP_ROB_V[19] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[20] =
    ({1{write_req_DIR_PP_ROB_V[20] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[21] =
    ({1{write_req_DIR_PP_ROB_V[21] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[22] =
    ({1{write_req_DIR_PP_ROB_V[22] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[23] =
    ({1{write_req_DIR_PP_ROB_V[23] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[24] =
    ({1{write_req_DIR_PP_ROB_V[24] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[25] =
    ({1{write_req_DIR_PP_ROB_V[25] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[26] =
    ({1{write_req_DIR_PP_ROB_V[26] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[27] =
    ({1{write_req_DIR_PP_ROB_V[27] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[28] =
    ({1{write_req_DIR_PP_ROB_V[28] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[29] =
    ({1{write_req_DIR_PP_ROB_V[29] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[30] =
    ({1{write_req_DIR_PP_ROB_V[30] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[31] =
    ({1{write_req_DIR_PP_ROB_V[31] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[32] =
    ({1{write_req_DIR_PP_ROB_V[32] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[33] =
    ({1{write_req_DIR_PP_ROB_V[33] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[34] =
    ({1{write_req_DIR_PP_ROB_V[34] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[35] =
    ({1{write_req_DIR_PP_ROB_V[35] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[36] =
    ({1{write_req_DIR_PP_ROB_V[36] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[37] =
    ({1{write_req_DIR_PP_ROB_V[37] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[38] =
    ({1{write_req_DIR_PP_ROB_V[38] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[39] =
    ({1{write_req_DIR_PP_ROB_V[39] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[40] =
    ({1{write_req_DIR_PP_ROB_V[40] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[41] =
    ({1{write_req_DIR_PP_ROB_V[41] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[42] =
    ({1{write_req_DIR_PP_ROB_V[42] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[43] =
    ({1{write_req_DIR_PP_ROB_V[43] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[44] =
    ({1{write_req_DIR_PP_ROB_V[44] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[45] =
    ({1{write_req_DIR_PP_ROB_V[45] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[46] =
    ({1{write_req_DIR_PP_ROB_V[46] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[47] =
    ({1{write_req_DIR_PP_ROB_V[47] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[48] =
    ({1{write_req_DIR_PP_ROB_V[48] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[49] =
    ({1{write_req_DIR_PP_ROB_V[49] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[50] =
    ({1{write_req_DIR_PP_ROB_V[50] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[51] =
    ({1{write_req_DIR_PP_ROB_V[51] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[52] =
    ({1{write_req_DIR_PP_ROB_V[52] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[53] =
    ({1{write_req_DIR_PP_ROB_V[53] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[54] =
    ({1{write_req_DIR_PP_ROB_V[54] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[55] =
    ({1{write_req_DIR_PP_ROB_V[55] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[56] =
    ({1{write_req_DIR_PP_ROB_V[56] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[57] =
    ({1{write_req_DIR_PP_ROB_V[57] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[58] =
    ({1{write_req_DIR_PP_ROB_V[58] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[59] =
    ({1{write_req_DIR_PP_ROB_V[59] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[60] =
    ({1{write_req_DIR_PP_ROB_V[60] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[61] =
    ({1{write_req_DIR_PP_ROB_V[61] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[62] =
    ({1{write_req_DIR_PP_ROB_V[62] }} &
    be[0:0]);
 up_DIR_PP_ROB_V_ROB_V[63] =
    ({1{write_req_DIR_PP_ROB_V[63] }} &
    be[0:0]);
end

logic [63:0][0:0] nxt_DIR_PP_ROB_V_ROB_V;
always_comb begin
 nxt_DIR_PP_ROB_V_ROB_V[0] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[1] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[2] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[3] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[4] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[5] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[6] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[7] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[8] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[9] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[10] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[11] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[12] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[13] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[14] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[15] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[16] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[17] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[18] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[19] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[20] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[21] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[22] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[23] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[24] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[25] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[26] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[27] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[28] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[29] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[30] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[31] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[32] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[33] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[34] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[35] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[36] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[37] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[38] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[39] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[40] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[41] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[42] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[43] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[44] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[45] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[46] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[47] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[48] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[49] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[50] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[51] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[52] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[53] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[54] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[55] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[56] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[57] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[58] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[59] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[60] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[61] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[62] = write_data[0:0];

 nxt_DIR_PP_ROB_V_ROB_V[63] = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[0][0], nxt_DIR_PP_ROB_V_ROB_V[0][0:0], DIR_PP_ROB_V[0].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[1][0], nxt_DIR_PP_ROB_V_ROB_V[1][0:0], DIR_PP_ROB_V[1].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[2][0], nxt_DIR_PP_ROB_V_ROB_V[2][0:0], DIR_PP_ROB_V[2].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[3][0], nxt_DIR_PP_ROB_V_ROB_V[3][0:0], DIR_PP_ROB_V[3].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[4][0], nxt_DIR_PP_ROB_V_ROB_V[4][0:0], DIR_PP_ROB_V[4].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[5][0], nxt_DIR_PP_ROB_V_ROB_V[5][0:0], DIR_PP_ROB_V[5].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[6][0], nxt_DIR_PP_ROB_V_ROB_V[6][0:0], DIR_PP_ROB_V[6].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[7][0], nxt_DIR_PP_ROB_V_ROB_V[7][0:0], DIR_PP_ROB_V[7].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[8][0], nxt_DIR_PP_ROB_V_ROB_V[8][0:0], DIR_PP_ROB_V[8].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[9][0], nxt_DIR_PP_ROB_V_ROB_V[9][0:0], DIR_PP_ROB_V[9].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[10][0], nxt_DIR_PP_ROB_V_ROB_V[10][0:0], DIR_PP_ROB_V[10].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[11][0], nxt_DIR_PP_ROB_V_ROB_V[11][0:0], DIR_PP_ROB_V[11].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[12][0], nxt_DIR_PP_ROB_V_ROB_V[12][0:0], DIR_PP_ROB_V[12].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[13][0], nxt_DIR_PP_ROB_V_ROB_V[13][0:0], DIR_PP_ROB_V[13].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[14][0], nxt_DIR_PP_ROB_V_ROB_V[14][0:0], DIR_PP_ROB_V[14].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[15][0], nxt_DIR_PP_ROB_V_ROB_V[15][0:0], DIR_PP_ROB_V[15].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[16][0], nxt_DIR_PP_ROB_V_ROB_V[16][0:0], DIR_PP_ROB_V[16].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[17][0], nxt_DIR_PP_ROB_V_ROB_V[17][0:0], DIR_PP_ROB_V[17].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[18][0], nxt_DIR_PP_ROB_V_ROB_V[18][0:0], DIR_PP_ROB_V[18].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[19][0], nxt_DIR_PP_ROB_V_ROB_V[19][0:0], DIR_PP_ROB_V[19].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[20][0], nxt_DIR_PP_ROB_V_ROB_V[20][0:0], DIR_PP_ROB_V[20].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[21][0], nxt_DIR_PP_ROB_V_ROB_V[21][0:0], DIR_PP_ROB_V[21].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[22][0], nxt_DIR_PP_ROB_V_ROB_V[22][0:0], DIR_PP_ROB_V[22].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[23][0], nxt_DIR_PP_ROB_V_ROB_V[23][0:0], DIR_PP_ROB_V[23].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[24][0], nxt_DIR_PP_ROB_V_ROB_V[24][0:0], DIR_PP_ROB_V[24].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[25][0], nxt_DIR_PP_ROB_V_ROB_V[25][0:0], DIR_PP_ROB_V[25].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[26][0], nxt_DIR_PP_ROB_V_ROB_V[26][0:0], DIR_PP_ROB_V[26].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[27][0], nxt_DIR_PP_ROB_V_ROB_V[27][0:0], DIR_PP_ROB_V[27].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[28][0], nxt_DIR_PP_ROB_V_ROB_V[28][0:0], DIR_PP_ROB_V[28].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[29][0], nxt_DIR_PP_ROB_V_ROB_V[29][0:0], DIR_PP_ROB_V[29].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[30][0], nxt_DIR_PP_ROB_V_ROB_V[30][0:0], DIR_PP_ROB_V[30].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[31][0], nxt_DIR_PP_ROB_V_ROB_V[31][0:0], DIR_PP_ROB_V[31].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[32][0], nxt_DIR_PP_ROB_V_ROB_V[32][0:0], DIR_PP_ROB_V[32].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[33][0], nxt_DIR_PP_ROB_V_ROB_V[33][0:0], DIR_PP_ROB_V[33].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[34][0], nxt_DIR_PP_ROB_V_ROB_V[34][0:0], DIR_PP_ROB_V[34].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[35][0], nxt_DIR_PP_ROB_V_ROB_V[35][0:0], DIR_PP_ROB_V[35].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[36][0], nxt_DIR_PP_ROB_V_ROB_V[36][0:0], DIR_PP_ROB_V[36].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[37][0], nxt_DIR_PP_ROB_V_ROB_V[37][0:0], DIR_PP_ROB_V[37].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[38][0], nxt_DIR_PP_ROB_V_ROB_V[38][0:0], DIR_PP_ROB_V[38].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[39][0], nxt_DIR_PP_ROB_V_ROB_V[39][0:0], DIR_PP_ROB_V[39].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[40][0], nxt_DIR_PP_ROB_V_ROB_V[40][0:0], DIR_PP_ROB_V[40].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[41][0], nxt_DIR_PP_ROB_V_ROB_V[41][0:0], DIR_PP_ROB_V[41].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[42][0], nxt_DIR_PP_ROB_V_ROB_V[42][0:0], DIR_PP_ROB_V[42].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[43][0], nxt_DIR_PP_ROB_V_ROB_V[43][0:0], DIR_PP_ROB_V[43].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[44][0], nxt_DIR_PP_ROB_V_ROB_V[44][0:0], DIR_PP_ROB_V[44].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[45][0], nxt_DIR_PP_ROB_V_ROB_V[45][0:0], DIR_PP_ROB_V[45].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[46][0], nxt_DIR_PP_ROB_V_ROB_V[46][0:0], DIR_PP_ROB_V[46].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[47][0], nxt_DIR_PP_ROB_V_ROB_V[47][0:0], DIR_PP_ROB_V[47].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[48][0], nxt_DIR_PP_ROB_V_ROB_V[48][0:0], DIR_PP_ROB_V[48].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[49][0], nxt_DIR_PP_ROB_V_ROB_V[49][0:0], DIR_PP_ROB_V[49].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[50][0], nxt_DIR_PP_ROB_V_ROB_V[50][0:0], DIR_PP_ROB_V[50].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[51][0], nxt_DIR_PP_ROB_V_ROB_V[51][0:0], DIR_PP_ROB_V[51].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[52][0], nxt_DIR_PP_ROB_V_ROB_V[52][0:0], DIR_PP_ROB_V[52].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[53][0], nxt_DIR_PP_ROB_V_ROB_V[53][0:0], DIR_PP_ROB_V[53].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[54][0], nxt_DIR_PP_ROB_V_ROB_V[54][0:0], DIR_PP_ROB_V[54].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[55][0], nxt_DIR_PP_ROB_V_ROB_V[55][0:0], DIR_PP_ROB_V[55].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[56][0], nxt_DIR_PP_ROB_V_ROB_V[56][0:0], DIR_PP_ROB_V[56].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[57][0], nxt_DIR_PP_ROB_V_ROB_V[57][0:0], DIR_PP_ROB_V[57].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[58][0], nxt_DIR_PP_ROB_V_ROB_V[58][0:0], DIR_PP_ROB_V[58].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[59][0], nxt_DIR_PP_ROB_V_ROB_V[59][0:0], DIR_PP_ROB_V[59].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[60][0], nxt_DIR_PP_ROB_V_ROB_V[60][0:0], DIR_PP_ROB_V[60].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[61][0], nxt_DIR_PP_ROB_V_ROB_V[61][0:0], DIR_PP_ROB_V[61].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[62][0], nxt_DIR_PP_ROB_V_ROB_V[62][0:0], DIR_PP_ROB_V[62].ROB_V[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_DIR_PP_ROB_V_ROB_V[63][0], nxt_DIR_PP_ROB_V_ROB_V[63][0:0], DIR_PP_ROB_V[63].ROB_V[0:0])

//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_0 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_0.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_0.CNT = new_HQM_SYSTEM_CNT_0.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_1 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_1.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_1.CNT = new_HQM_SYSTEM_CNT_1.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_2 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_2.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_2.CNT = new_HQM_SYSTEM_CNT_2.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_3 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_3.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_3.CNT = new_HQM_SYSTEM_CNT_3.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_4 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_4.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_4.CNT = new_HQM_SYSTEM_CNT_4.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_5 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_5.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_5.CNT = new_HQM_SYSTEM_CNT_5.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_6 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_6.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_6.CNT = new_HQM_SYSTEM_CNT_6.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_7 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_7.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_7.CNT = new_HQM_SYSTEM_CNT_7.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_8 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_8.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_8.CNT = new_HQM_SYSTEM_CNT_8.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_9 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_9.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_9.CNT = new_HQM_SYSTEM_CNT_9.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_10 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_10.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_10.CNT = new_HQM_SYSTEM_CNT_10.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_11 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_11.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_11.CNT = new_HQM_SYSTEM_CNT_11.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_12 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_12.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_12.CNT = new_HQM_SYSTEM_CNT_12.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_13 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_13.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_13.CNT = new_HQM_SYSTEM_CNT_13.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_14 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_14.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_14.CNT = new_HQM_SYSTEM_CNT_14.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_15 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_15.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_15.CNT = new_HQM_SYSTEM_CNT_15.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_16 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_16.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_16.CNT = new_HQM_SYSTEM_CNT_16.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_17 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_17.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_17.CNT = new_HQM_SYSTEM_CNT_17.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_18 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_18.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_18.CNT = new_HQM_SYSTEM_CNT_18.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_19 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_19.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_19.CNT = new_HQM_SYSTEM_CNT_19.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_20 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_20.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_20.CNT = new_HQM_SYSTEM_CNT_20.CNT;




//---------------------------------------------------------------------
// HQM_SYSTEM_CNT_21 Address Decode
// ----------------------------------------------------------------------
// HQM_SYSTEM_CNT_21.CNT x8 RO/V, using RO/V template.
assign HQM_SYSTEM_CNT_21.CNT = new_HQM_SYSTEM_CNT_21.CNT;




// ----------------------------------------------------------------------
// SBE_CNT_0 using HANDCODED_REG template.
logic addr_decode_SBE_CNT_0;
logic write_req_SBE_CNT_0;
logic read_req_SBE_CNT_0;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h200,2'b00}: 
         addr_decode_SBE_CNT_0 = req.valid;
      default: 
         addr_decode_SBE_CNT_0 = 1'b0; 
   endcase
end

always_comb write_req_SBE_CNT_0 = f_IsMEMWr(req_opcode) && addr_decode_SBE_CNT_0  && sai_HQM_OS_W_write_en;
always_comb read_req_SBE_CNT_0  = f_IsMEMRd(req_opcode) && addr_decode_SBE_CNT_0  && sai_HQM_OS_W_read_en;

always_comb we_SBE_CNT_0 = {4{write_req_SBE_CNT_0}} & req.be[3:0];
always_comb re_SBE_CNT_0 = {4{read_req_SBE_CNT_0}} & req.be[3:0];
always_comb handcode_reg_wdata_SBE_CNT_0 = req.data[31:0];


// ----------------------------------------------------------------------
// SBE_CNT_1 using HANDCODED_REG template.
logic addr_decode_SBE_CNT_1;
logic write_req_SBE_CNT_1;
logic read_req_SBE_CNT_1;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h200,2'b01}: 
         addr_decode_SBE_CNT_1 = req.valid;
      default: 
         addr_decode_SBE_CNT_1 = 1'b0; 
   endcase
end

always_comb write_req_SBE_CNT_1 = f_IsMEMWr(req_opcode) && addr_decode_SBE_CNT_1  && sai_HQM_OS_W_write_en;
always_comb read_req_SBE_CNT_1  = f_IsMEMRd(req_opcode) && addr_decode_SBE_CNT_1  && sai_HQM_OS_W_read_en;

always_comb we_SBE_CNT_1 = {4{write_req_SBE_CNT_1}} & req.be[3:0];
always_comb re_SBE_CNT_1 = {4{read_req_SBE_CNT_1}} & req.be[3:0];
always_comb handcode_reg_wdata_SBE_CNT_1 = req.data[31:0];


// ----------------------------------------------------------------------
// PERF_SMON_CONFIGURATION0 using HANDCODED_REG template.
logic addr_decode_PERF_SMON_CONFIGURATION0;
logic write_req_PERF_SMON_CONFIGURATION0;
logic read_req_PERF_SMON_CONFIGURATION0;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h300,2'b00}: 
         addr_decode_PERF_SMON_CONFIGURATION0 = req.valid;
      default: 
         addr_decode_PERF_SMON_CONFIGURATION0 = 1'b0; 
   endcase
end

always_comb write_req_PERF_SMON_CONFIGURATION0 = f_IsMEMWr(req_opcode) && addr_decode_PERF_SMON_CONFIGURATION0  && sai_HQM_OS_W_write_en;
always_comb read_req_PERF_SMON_CONFIGURATION0  = f_IsMEMRd(req_opcode) && addr_decode_PERF_SMON_CONFIGURATION0  && sai_HQM_OS_W_read_en;

always_comb we_PERF_SMON_CONFIGURATION0 = {4{write_req_PERF_SMON_CONFIGURATION0}} & req.be[3:0];
always_comb re_PERF_SMON_CONFIGURATION0 = {4{read_req_PERF_SMON_CONFIGURATION0}} & req.be[3:0];
always_comb handcode_reg_wdata_PERF_SMON_CONFIGURATION0 = req.data[31:0];


// ----------------------------------------------------------------------
// PERF_SMON_CONFIGURATION1 using HANDCODED_REG template.
logic addr_decode_PERF_SMON_CONFIGURATION1;
logic write_req_PERF_SMON_CONFIGURATION1;
logic read_req_PERF_SMON_CONFIGURATION1;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h300,2'b01}: 
         addr_decode_PERF_SMON_CONFIGURATION1 = req.valid;
      default: 
         addr_decode_PERF_SMON_CONFIGURATION1 = 1'b0; 
   endcase
end

always_comb write_req_PERF_SMON_CONFIGURATION1 = f_IsMEMWr(req_opcode) && addr_decode_PERF_SMON_CONFIGURATION1  && sai_HQM_OS_W_write_en;
always_comb read_req_PERF_SMON_CONFIGURATION1  = f_IsMEMRd(req_opcode) && addr_decode_PERF_SMON_CONFIGURATION1  && sai_HQM_OS_W_read_en;

always_comb we_PERF_SMON_CONFIGURATION1 = {4{write_req_PERF_SMON_CONFIGURATION1}} & req.be[3:0];
always_comb re_PERF_SMON_CONFIGURATION1 = {4{read_req_PERF_SMON_CONFIGURATION1}} & req.be[3:0];
always_comb handcode_reg_wdata_PERF_SMON_CONFIGURATION1 = req.data[31:0];


// ----------------------------------------------------------------------
// PERF_SMON_COMPARE0 using HANDCODED_REG template.
logic addr_decode_PERF_SMON_COMPARE0;
logic write_req_PERF_SMON_COMPARE0;
logic read_req_PERF_SMON_COMPARE0;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h300,2'b10}: 
         addr_decode_PERF_SMON_COMPARE0 = req.valid;
      default: 
         addr_decode_PERF_SMON_COMPARE0 = 1'b0; 
   endcase
end

always_comb write_req_PERF_SMON_COMPARE0 = f_IsMEMWr(req_opcode) && addr_decode_PERF_SMON_COMPARE0  && sai_HQM_OS_W_write_en;
always_comb read_req_PERF_SMON_COMPARE0  = f_IsMEMRd(req_opcode) && addr_decode_PERF_SMON_COMPARE0  && sai_HQM_OS_W_read_en;

always_comb we_PERF_SMON_COMPARE0 = {4{write_req_PERF_SMON_COMPARE0}} & req.be[3:0];
always_comb re_PERF_SMON_COMPARE0 = {4{read_req_PERF_SMON_COMPARE0}} & req.be[3:0];
always_comb handcode_reg_wdata_PERF_SMON_COMPARE0 = req.data[31:0];


// ----------------------------------------------------------------------
// PERF_SMON_COMPARE1 using HANDCODED_REG template.
logic addr_decode_PERF_SMON_COMPARE1;
logic write_req_PERF_SMON_COMPARE1;
logic read_req_PERF_SMON_COMPARE1;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h300,2'b11}: 
         addr_decode_PERF_SMON_COMPARE1 = req.valid;
      default: 
         addr_decode_PERF_SMON_COMPARE1 = 1'b0; 
   endcase
end

always_comb write_req_PERF_SMON_COMPARE1 = f_IsMEMWr(req_opcode) && addr_decode_PERF_SMON_COMPARE1  && sai_HQM_OS_W_write_en;
always_comb read_req_PERF_SMON_COMPARE1  = f_IsMEMRd(req_opcode) && addr_decode_PERF_SMON_COMPARE1  && sai_HQM_OS_W_read_en;

always_comb we_PERF_SMON_COMPARE1 = {4{write_req_PERF_SMON_COMPARE1}} & req.be[3:0];
always_comb re_PERF_SMON_COMPARE1 = {4{read_req_PERF_SMON_COMPARE1}} & req.be[3:0];
always_comb handcode_reg_wdata_PERF_SMON_COMPARE1 = req.data[31:0];


// ----------------------------------------------------------------------
// PERF_SMON_ACTIVITYCOUNTER0 using HANDCODED_REG template.
logic addr_decode_PERF_SMON_ACTIVITYCOUNTER0;
logic write_req_PERF_SMON_ACTIVITYCOUNTER0;
logic read_req_PERF_SMON_ACTIVITYCOUNTER0;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h301,2'b00}: 
         addr_decode_PERF_SMON_ACTIVITYCOUNTER0 = req.valid;
      default: 
         addr_decode_PERF_SMON_ACTIVITYCOUNTER0 = 1'b0; 
   endcase
end

always_comb write_req_PERF_SMON_ACTIVITYCOUNTER0 = f_IsMEMWr(req_opcode) && addr_decode_PERF_SMON_ACTIVITYCOUNTER0  && sai_HQM_OS_W_write_en;
always_comb read_req_PERF_SMON_ACTIVITYCOUNTER0  = f_IsMEMRd(req_opcode) && addr_decode_PERF_SMON_ACTIVITYCOUNTER0  && sai_HQM_OS_W_read_en;

always_comb we_PERF_SMON_ACTIVITYCOUNTER0 = {4{write_req_PERF_SMON_ACTIVITYCOUNTER0}} & req.be[3:0];
always_comb re_PERF_SMON_ACTIVITYCOUNTER0 = {4{read_req_PERF_SMON_ACTIVITYCOUNTER0}} & req.be[3:0];
always_comb handcode_reg_wdata_PERF_SMON_ACTIVITYCOUNTER0 = req.data[31:0];


// ----------------------------------------------------------------------
// PERF_SMON_ACTIVITYCOUNTER1 using HANDCODED_REG template.
logic addr_decode_PERF_SMON_ACTIVITYCOUNTER1;
logic write_req_PERF_SMON_ACTIVITYCOUNTER1;
logic read_req_PERF_SMON_ACTIVITYCOUNTER1;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h301,2'b01}: 
         addr_decode_PERF_SMON_ACTIVITYCOUNTER1 = req.valid;
      default: 
         addr_decode_PERF_SMON_ACTIVITYCOUNTER1 = 1'b0; 
   endcase
end

always_comb write_req_PERF_SMON_ACTIVITYCOUNTER1 = f_IsMEMWr(req_opcode) && addr_decode_PERF_SMON_ACTIVITYCOUNTER1  && sai_HQM_OS_W_write_en;
always_comb read_req_PERF_SMON_ACTIVITYCOUNTER1  = f_IsMEMRd(req_opcode) && addr_decode_PERF_SMON_ACTIVITYCOUNTER1  && sai_HQM_OS_W_read_en;

always_comb we_PERF_SMON_ACTIVITYCOUNTER1 = {4{write_req_PERF_SMON_ACTIVITYCOUNTER1}} & req.be[3:0];
always_comb re_PERF_SMON_ACTIVITYCOUNTER1 = {4{read_req_PERF_SMON_ACTIVITYCOUNTER1}} & req.be[3:0];
always_comb handcode_reg_wdata_PERF_SMON_ACTIVITYCOUNTER1 = req.data[31:0];


// ----------------------------------------------------------------------
// PERF_SMON_TIMER using HANDCODED_REG template.
logic addr_decode_PERF_SMON_TIMER;
logic write_req_PERF_SMON_TIMER;
logic read_req_PERF_SMON_TIMER;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h301,2'b10}: 
         addr_decode_PERF_SMON_TIMER = req.valid;
      default: 
         addr_decode_PERF_SMON_TIMER = 1'b0; 
   endcase
end

always_comb write_req_PERF_SMON_TIMER = f_IsMEMWr(req_opcode) && addr_decode_PERF_SMON_TIMER  && sai_HQM_OS_W_write_en;
always_comb read_req_PERF_SMON_TIMER  = f_IsMEMRd(req_opcode) && addr_decode_PERF_SMON_TIMER  && sai_HQM_OS_W_read_en;

always_comb we_PERF_SMON_TIMER = {4{write_req_PERF_SMON_TIMER}} & req.be[3:0];
always_comb re_PERF_SMON_TIMER = {4{read_req_PERF_SMON_TIMER}} & req.be[3:0];
always_comb handcode_reg_wdata_PERF_SMON_TIMER = req.data[31:0];


// ----------------------------------------------------------------------
// PERF_SMON_MAXIMUM_TIMER using HANDCODED_REG template.
logic addr_decode_PERF_SMON_MAXIMUM_TIMER;
logic write_req_PERF_SMON_MAXIMUM_TIMER;
logic read_req_PERF_SMON_MAXIMUM_TIMER;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h301,2'b11}: 
         addr_decode_PERF_SMON_MAXIMUM_TIMER = req.valid;
      default: 
         addr_decode_PERF_SMON_MAXIMUM_TIMER = 1'b0; 
   endcase
end

always_comb write_req_PERF_SMON_MAXIMUM_TIMER = f_IsMEMWr(req_opcode) && addr_decode_PERF_SMON_MAXIMUM_TIMER  && sai_HQM_OS_W_write_en;
always_comb read_req_PERF_SMON_MAXIMUM_TIMER  = f_IsMEMRd(req_opcode) && addr_decode_PERF_SMON_MAXIMUM_TIMER  && sai_HQM_OS_W_read_en;

always_comb we_PERF_SMON_MAXIMUM_TIMER = {4{write_req_PERF_SMON_MAXIMUM_TIMER}} & req.be[3:0];
always_comb re_PERF_SMON_MAXIMUM_TIMER = {4{read_req_PERF_SMON_MAXIMUM_TIMER}} & req.be[3:0];
always_comb handcode_reg_wdata_PERF_SMON_MAXIMUM_TIMER = req.data[31:0];


// ----------------------------------------------------------------------
// PERF_SMON_COMP_MASK0 using HANDCODED_REG template.
logic addr_decode_PERF_SMON_COMP_MASK0;
logic write_req_PERF_SMON_COMP_MASK0;
logic read_req_PERF_SMON_COMP_MASK0;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h302,2'b00}: 
         addr_decode_PERF_SMON_COMP_MASK0 = req.valid;
      default: 
         addr_decode_PERF_SMON_COMP_MASK0 = 1'b0; 
   endcase
end

always_comb write_req_PERF_SMON_COMP_MASK0 = f_IsMEMWr(req_opcode) && addr_decode_PERF_SMON_COMP_MASK0  && sai_HQM_OS_W_write_en;
always_comb read_req_PERF_SMON_COMP_MASK0  = f_IsMEMRd(req_opcode) && addr_decode_PERF_SMON_COMP_MASK0  && sai_HQM_OS_W_read_en;

always_comb we_PERF_SMON_COMP_MASK0 = {4{write_req_PERF_SMON_COMP_MASK0}} & req.be[3:0];
always_comb re_PERF_SMON_COMP_MASK0 = {4{read_req_PERF_SMON_COMP_MASK0}} & req.be[3:0];
always_comb handcode_reg_wdata_PERF_SMON_COMP_MASK0 = req.data[31:0];


// ----------------------------------------------------------------------
// PERF_SMON_COMP_MASK1 using HANDCODED_REG template.
logic addr_decode_PERF_SMON_COMP_MASK1;
logic write_req_PERF_SMON_COMP_MASK1;
logic read_req_PERF_SMON_COMP_MASK1;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {44'h302,2'b01}: 
         addr_decode_PERF_SMON_COMP_MASK1 = req.valid;
      default: 
         addr_decode_PERF_SMON_COMP_MASK1 = 1'b0; 
   endcase
end

always_comb write_req_PERF_SMON_COMP_MASK1 = f_IsMEMWr(req_opcode) && addr_decode_PERF_SMON_COMP_MASK1  && sai_HQM_OS_W_write_en;
always_comb read_req_PERF_SMON_COMP_MASK1  = f_IsMEMRd(req_opcode) && addr_decode_PERF_SMON_COMP_MASK1  && sai_HQM_OS_W_read_en;

always_comb we_PERF_SMON_COMP_MASK1 = {4{write_req_PERF_SMON_COMP_MASK1}} & req.be[3:0];
always_comb re_PERF_SMON_COMP_MASK1 = {4{read_req_PERF_SMON_COMP_MASK1}} & req.be[3:0];
always_comb handcode_reg_wdata_PERF_SMON_COMP_MASK1 = req.data[31:0];


// ----------------------------------------------------------------------
// WB_DIR_CQ_STATE using HANDCODED_REG template.
logic addr_decode_WB_DIR_CQ_STATE;
logic write_req_WB_DIR_CQ_STATE;
logic read_req_WB_DIR_CQ_STATE;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'h1C,4'b00??,12'h?00,2'b00}: 
         addr_decode_WB_DIR_CQ_STATE = req.valid;
      default: 
         addr_decode_WB_DIR_CQ_STATE = 1'b0; 
   endcase
end

always_comb write_req_WB_DIR_CQ_STATE = f_IsMEMWr(req_opcode) && addr_decode_WB_DIR_CQ_STATE  && sai_HQM_OS_W_write_en;
always_comb read_req_WB_DIR_CQ_STATE  = f_IsMEMRd(req_opcode) && addr_decode_WB_DIR_CQ_STATE  && sai_HQM_OS_W_read_en;

always_comb we_WB_DIR_CQ_STATE = {4{write_req_WB_DIR_CQ_STATE}} & req.be[3:0];
always_comb re_WB_DIR_CQ_STATE = {4{read_req_WB_DIR_CQ_STATE}} & req.be[3:0];
always_comb handcode_reg_wdata_WB_DIR_CQ_STATE = req.data[31:0];


// ----------------------------------------------------------------------
// WB_LDB_CQ_STATE using HANDCODED_REG template.
logic addr_decode_WB_LDB_CQ_STATE;
logic write_req_WB_LDB_CQ_STATE;
logic read_req_WB_LDB_CQ_STATE;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {28'h1D,4'b00??,12'h?00,2'b00}: 
         addr_decode_WB_LDB_CQ_STATE = req.valid;
      default: 
         addr_decode_WB_LDB_CQ_STATE = 1'b0; 
   endcase
end

always_comb write_req_WB_LDB_CQ_STATE = f_IsMEMWr(req_opcode) && addr_decode_WB_LDB_CQ_STATE  && sai_HQM_OS_W_write_en;
always_comb read_req_WB_LDB_CQ_STATE  = f_IsMEMRd(req_opcode) && addr_decode_WB_LDB_CQ_STATE  && sai_HQM_OS_W_read_en;

always_comb we_WB_LDB_CQ_STATE = {4{write_req_WB_LDB_CQ_STATE}} & req.be[3:0];
always_comb re_WB_LDB_CQ_STATE = {4{read_req_WB_LDB_CQ_STATE}} & req.be[3:0];
always_comb handcode_reg_wdata_WB_LDB_CQ_STATE = req.data[31:0];


// ----------------------------------------------------------------------
// AI_ADDR_L using HANDCODED_REG template.
logic addr_decode_AI_ADDR_L;
logic write_req_AI_ADDR_L;
logic read_req_AI_ADDR_L;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {36'h1E00,4'b0???,4'h?,2'b00}: 
         addr_decode_AI_ADDR_L = req.valid;
      default: 
         addr_decode_AI_ADDR_L = 1'b0; 
   endcase
end

always_comb write_req_AI_ADDR_L = f_IsMEMWr(req_opcode) && addr_decode_AI_ADDR_L  && sai_HQM_OS_W_write_en;
always_comb read_req_AI_ADDR_L  = f_IsMEMRd(req_opcode) && addr_decode_AI_ADDR_L  && sai_HQM_OS_W_read_en;

always_comb we_AI_ADDR_L = {4{write_req_AI_ADDR_L}} & req.be[3:0];
always_comb re_AI_ADDR_L = {4{read_req_AI_ADDR_L}} & req.be[3:0];
always_comb handcode_reg_wdata_AI_ADDR_L = req.data[31:0];


// ----------------------------------------------------------------------
// AI_ADDR_U using HANDCODED_REG template.
logic addr_decode_AI_ADDR_U;
logic write_req_AI_ADDR_U;
logic read_req_AI_ADDR_U;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {36'h1E00,4'b0???,4'h?,2'b01}: 
         addr_decode_AI_ADDR_U = req.valid;
      default: 
         addr_decode_AI_ADDR_U = 1'b0; 
   endcase
end

always_comb write_req_AI_ADDR_U = f_IsMEMWr(req_opcode) && addr_decode_AI_ADDR_U  && sai_HQM_OS_W_write_en;
always_comb read_req_AI_ADDR_U  = f_IsMEMRd(req_opcode) && addr_decode_AI_ADDR_U  && sai_HQM_OS_W_read_en;

always_comb we_AI_ADDR_U = {4{write_req_AI_ADDR_U}} & req.be[3:0];
always_comb re_AI_ADDR_U = {4{read_req_AI_ADDR_U}} & req.be[3:0];
always_comb handcode_reg_wdata_AI_ADDR_U = req.data[31:0];


// ----------------------------------------------------------------------
// AI_DATA using HANDCODED_REG template.
logic addr_decode_AI_DATA;
logic write_req_AI_DATA;
logic read_req_AI_DATA;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {36'h1E00,4'b0???,4'h?,2'b10}: 
         addr_decode_AI_DATA = req.valid;
      default: 
         addr_decode_AI_DATA = 1'b0; 
   endcase
end

always_comb write_req_AI_DATA = f_IsMEMWr(req_opcode) && addr_decode_AI_DATA  && sai_HQM_OS_W_write_en;
always_comb read_req_AI_DATA  = f_IsMEMRd(req_opcode) && addr_decode_AI_DATA  && sai_HQM_OS_W_read_en;

always_comb we_AI_DATA = {4{write_req_AI_DATA}} & req.be[3:0];
always_comb re_AI_DATA = {4{read_req_AI_DATA}} & req.be[3:0];
always_comb handcode_reg_wdata_AI_DATA = req.data[31:0];


//---------------------------------------------------------------------
// AI_CTRL Address Decode
logic [127:0] addr_decode_AI_CTRL;
logic [127:0] write_req_AI_CTRL;
always_comb begin
   addr_decode_AI_CTRL[0] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[0]) && req.valid ;
   addr_decode_AI_CTRL[1] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[1]) && req.valid ;
   addr_decode_AI_CTRL[2] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[2]) && req.valid ;
   addr_decode_AI_CTRL[3] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[3]) && req.valid ;
   addr_decode_AI_CTRL[4] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[4]) && req.valid ;
   addr_decode_AI_CTRL[5] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[5]) && req.valid ;
   addr_decode_AI_CTRL[6] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[6]) && req.valid ;
   addr_decode_AI_CTRL[7] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[7]) && req.valid ;
   addr_decode_AI_CTRL[8] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[8]) && req.valid ;
   addr_decode_AI_CTRL[9] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[9]) && req.valid ;
   addr_decode_AI_CTRL[10] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[10]) && req.valid ;
   addr_decode_AI_CTRL[11] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[11]) && req.valid ;
   addr_decode_AI_CTRL[12] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[12]) && req.valid ;
   addr_decode_AI_CTRL[13] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[13]) && req.valid ;
   addr_decode_AI_CTRL[14] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[14]) && req.valid ;
   addr_decode_AI_CTRL[15] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[15]) && req.valid ;
   addr_decode_AI_CTRL[16] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[16]) && req.valid ;
   addr_decode_AI_CTRL[17] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[17]) && req.valid ;
   addr_decode_AI_CTRL[18] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[18]) && req.valid ;
   addr_decode_AI_CTRL[19] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[19]) && req.valid ;
   addr_decode_AI_CTRL[20] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[20]) && req.valid ;
   addr_decode_AI_CTRL[21] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[21]) && req.valid ;
   addr_decode_AI_CTRL[22] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[22]) && req.valid ;
   addr_decode_AI_CTRL[23] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[23]) && req.valid ;
   addr_decode_AI_CTRL[24] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[24]) && req.valid ;
   addr_decode_AI_CTRL[25] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[25]) && req.valid ;
   addr_decode_AI_CTRL[26] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[26]) && req.valid ;
   addr_decode_AI_CTRL[27] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[27]) && req.valid ;
   addr_decode_AI_CTRL[28] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[28]) && req.valid ;
   addr_decode_AI_CTRL[29] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[29]) && req.valid ;
   addr_decode_AI_CTRL[30] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[30]) && req.valid ;
   addr_decode_AI_CTRL[31] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[31]) && req.valid ;
   addr_decode_AI_CTRL[32] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[32]) && req.valid ;
   addr_decode_AI_CTRL[33] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[33]) && req.valid ;
   addr_decode_AI_CTRL[34] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[34]) && req.valid ;
   addr_decode_AI_CTRL[35] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[35]) && req.valid ;
   addr_decode_AI_CTRL[36] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[36]) && req.valid ;
   addr_decode_AI_CTRL[37] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[37]) && req.valid ;
   addr_decode_AI_CTRL[38] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[38]) && req.valid ;
   addr_decode_AI_CTRL[39] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[39]) && req.valid ;
   addr_decode_AI_CTRL[40] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[40]) && req.valid ;
   addr_decode_AI_CTRL[41] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[41]) && req.valid ;
   addr_decode_AI_CTRL[42] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[42]) && req.valid ;
   addr_decode_AI_CTRL[43] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[43]) && req.valid ;
   addr_decode_AI_CTRL[44] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[44]) && req.valid ;
   addr_decode_AI_CTRL[45] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[45]) && req.valid ;
   addr_decode_AI_CTRL[46] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[46]) && req.valid ;
   addr_decode_AI_CTRL[47] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[47]) && req.valid ;
   addr_decode_AI_CTRL[48] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[48]) && req.valid ;
   addr_decode_AI_CTRL[49] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[49]) && req.valid ;
   addr_decode_AI_CTRL[50] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[50]) && req.valid ;
   addr_decode_AI_CTRL[51] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[51]) && req.valid ;
   addr_decode_AI_CTRL[52] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[52]) && req.valid ;
   addr_decode_AI_CTRL[53] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[53]) && req.valid ;
   addr_decode_AI_CTRL[54] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[54]) && req.valid ;
   addr_decode_AI_CTRL[55] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[55]) && req.valid ;
   addr_decode_AI_CTRL[56] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[56]) && req.valid ;
   addr_decode_AI_CTRL[57] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[57]) && req.valid ;
   addr_decode_AI_CTRL[58] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[58]) && req.valid ;
   addr_decode_AI_CTRL[59] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[59]) && req.valid ;
   addr_decode_AI_CTRL[60] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[60]) && req.valid ;
   addr_decode_AI_CTRL[61] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[61]) && req.valid ;
   addr_decode_AI_CTRL[62] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[62]) && req.valid ;
   addr_decode_AI_CTRL[63] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[63]) && req.valid ;
   addr_decode_AI_CTRL[64] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[64]) && req.valid ;
   addr_decode_AI_CTRL[65] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[65]) && req.valid ;
   addr_decode_AI_CTRL[66] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[66]) && req.valid ;
   addr_decode_AI_CTRL[67] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[67]) && req.valid ;
   addr_decode_AI_CTRL[68] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[68]) && req.valid ;
   addr_decode_AI_CTRL[69] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[69]) && req.valid ;
   addr_decode_AI_CTRL[70] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[70]) && req.valid ;
   addr_decode_AI_CTRL[71] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[71]) && req.valid ;
   addr_decode_AI_CTRL[72] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[72]) && req.valid ;
   addr_decode_AI_CTRL[73] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[73]) && req.valid ;
   addr_decode_AI_CTRL[74] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[74]) && req.valid ;
   addr_decode_AI_CTRL[75] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[75]) && req.valid ;
   addr_decode_AI_CTRL[76] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[76]) && req.valid ;
   addr_decode_AI_CTRL[77] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[77]) && req.valid ;
   addr_decode_AI_CTRL[78] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[78]) && req.valid ;
   addr_decode_AI_CTRL[79] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[79]) && req.valid ;
   addr_decode_AI_CTRL[80] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[80]) && req.valid ;
   addr_decode_AI_CTRL[81] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[81]) && req.valid ;
   addr_decode_AI_CTRL[82] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[82]) && req.valid ;
   addr_decode_AI_CTRL[83] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[83]) && req.valid ;
   addr_decode_AI_CTRL[84] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[84]) && req.valid ;
   addr_decode_AI_CTRL[85] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[85]) && req.valid ;
   addr_decode_AI_CTRL[86] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[86]) && req.valid ;
   addr_decode_AI_CTRL[87] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[87]) && req.valid ;
   addr_decode_AI_CTRL[88] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[88]) && req.valid ;
   addr_decode_AI_CTRL[89] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[89]) && req.valid ;
   addr_decode_AI_CTRL[90] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[90]) && req.valid ;
   addr_decode_AI_CTRL[91] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[91]) && req.valid ;
   addr_decode_AI_CTRL[92] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[92]) && req.valid ;
   addr_decode_AI_CTRL[93] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[93]) && req.valid ;
   addr_decode_AI_CTRL[94] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[94]) && req.valid ;
   addr_decode_AI_CTRL[95] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[95]) && req.valid ;
   addr_decode_AI_CTRL[96] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[96]) && req.valid ;
   addr_decode_AI_CTRL[97] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[97]) && req.valid ;
   addr_decode_AI_CTRL[98] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[98]) && req.valid ;
   addr_decode_AI_CTRL[99] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[99]) && req.valid ;
   addr_decode_AI_CTRL[100] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[100]) && req.valid ;
   addr_decode_AI_CTRL[101] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[101]) && req.valid ;
   addr_decode_AI_CTRL[102] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[102]) && req.valid ;
   addr_decode_AI_CTRL[103] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[103]) && req.valid ;
   addr_decode_AI_CTRL[104] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[104]) && req.valid ;
   addr_decode_AI_CTRL[105] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[105]) && req.valid ;
   addr_decode_AI_CTRL[106] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[106]) && req.valid ;
   addr_decode_AI_CTRL[107] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[107]) && req.valid ;
   addr_decode_AI_CTRL[108] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[108]) && req.valid ;
   addr_decode_AI_CTRL[109] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[109]) && req.valid ;
   addr_decode_AI_CTRL[110] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[110]) && req.valid ;
   addr_decode_AI_CTRL[111] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[111]) && req.valid ;
   addr_decode_AI_CTRL[112] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[112]) && req.valid ;
   addr_decode_AI_CTRL[113] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[113]) && req.valid ;
   addr_decode_AI_CTRL[114] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[114]) && req.valid ;
   addr_decode_AI_CTRL[115] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[115]) && req.valid ;
   addr_decode_AI_CTRL[116] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[116]) && req.valid ;
   addr_decode_AI_CTRL[117] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[117]) && req.valid ;
   addr_decode_AI_CTRL[118] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[118]) && req.valid ;
   addr_decode_AI_CTRL[119] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[119]) && req.valid ;
   addr_decode_AI_CTRL[120] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[120]) && req.valid ;
   addr_decode_AI_CTRL[121] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[121]) && req.valid ;
   addr_decode_AI_CTRL[122] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[122]) && req.valid ;
   addr_decode_AI_CTRL[123] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[123]) && req.valid ;
   addr_decode_AI_CTRL[124] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[124]) && req.valid ;
   addr_decode_AI_CTRL[125] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[125]) && req.valid ;
   addr_decode_AI_CTRL[126] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[126]) && req.valid ;
   addr_decode_AI_CTRL[127] = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AI_CTRL_DECODE_ADDR[127]) && req.valid ;
   write_req_AI_CTRL[0] = IsMEMWr && addr_decode_AI_CTRL[0] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[1] = IsMEMWr && addr_decode_AI_CTRL[1] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[2] = IsMEMWr && addr_decode_AI_CTRL[2] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[3] = IsMEMWr && addr_decode_AI_CTRL[3] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[4] = IsMEMWr && addr_decode_AI_CTRL[4] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[5] = IsMEMWr && addr_decode_AI_CTRL[5] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[6] = IsMEMWr && addr_decode_AI_CTRL[6] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[7] = IsMEMWr && addr_decode_AI_CTRL[7] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[8] = IsMEMWr && addr_decode_AI_CTRL[8] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[9] = IsMEMWr && addr_decode_AI_CTRL[9] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[10] = IsMEMWr && addr_decode_AI_CTRL[10] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[11] = IsMEMWr && addr_decode_AI_CTRL[11] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[12] = IsMEMWr && addr_decode_AI_CTRL[12] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[13] = IsMEMWr && addr_decode_AI_CTRL[13] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[14] = IsMEMWr && addr_decode_AI_CTRL[14] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[15] = IsMEMWr && addr_decode_AI_CTRL[15] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[16] = IsMEMWr && addr_decode_AI_CTRL[16] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[17] = IsMEMWr && addr_decode_AI_CTRL[17] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[18] = IsMEMWr && addr_decode_AI_CTRL[18] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[19] = IsMEMWr && addr_decode_AI_CTRL[19] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[20] = IsMEMWr && addr_decode_AI_CTRL[20] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[21] = IsMEMWr && addr_decode_AI_CTRL[21] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[22] = IsMEMWr && addr_decode_AI_CTRL[22] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[23] = IsMEMWr && addr_decode_AI_CTRL[23] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[24] = IsMEMWr && addr_decode_AI_CTRL[24] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[25] = IsMEMWr && addr_decode_AI_CTRL[25] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[26] = IsMEMWr && addr_decode_AI_CTRL[26] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[27] = IsMEMWr && addr_decode_AI_CTRL[27] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[28] = IsMEMWr && addr_decode_AI_CTRL[28] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[29] = IsMEMWr && addr_decode_AI_CTRL[29] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[30] = IsMEMWr && addr_decode_AI_CTRL[30] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[31] = IsMEMWr && addr_decode_AI_CTRL[31] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[32] = IsMEMWr && addr_decode_AI_CTRL[32] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[33] = IsMEMWr && addr_decode_AI_CTRL[33] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[34] = IsMEMWr && addr_decode_AI_CTRL[34] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[35] = IsMEMWr && addr_decode_AI_CTRL[35] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[36] = IsMEMWr && addr_decode_AI_CTRL[36] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[37] = IsMEMWr && addr_decode_AI_CTRL[37] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[38] = IsMEMWr && addr_decode_AI_CTRL[38] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[39] = IsMEMWr && addr_decode_AI_CTRL[39] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[40] = IsMEMWr && addr_decode_AI_CTRL[40] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[41] = IsMEMWr && addr_decode_AI_CTRL[41] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[42] = IsMEMWr && addr_decode_AI_CTRL[42] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[43] = IsMEMWr && addr_decode_AI_CTRL[43] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[44] = IsMEMWr && addr_decode_AI_CTRL[44] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[45] = IsMEMWr && addr_decode_AI_CTRL[45] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[46] = IsMEMWr && addr_decode_AI_CTRL[46] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[47] = IsMEMWr && addr_decode_AI_CTRL[47] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[48] = IsMEMWr && addr_decode_AI_CTRL[48] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[49] = IsMEMWr && addr_decode_AI_CTRL[49] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[50] = IsMEMWr && addr_decode_AI_CTRL[50] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[51] = IsMEMWr && addr_decode_AI_CTRL[51] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[52] = IsMEMWr && addr_decode_AI_CTRL[52] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[53] = IsMEMWr && addr_decode_AI_CTRL[53] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[54] = IsMEMWr && addr_decode_AI_CTRL[54] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[55] = IsMEMWr && addr_decode_AI_CTRL[55] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[56] = IsMEMWr && addr_decode_AI_CTRL[56] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[57] = IsMEMWr && addr_decode_AI_CTRL[57] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[58] = IsMEMWr && addr_decode_AI_CTRL[58] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[59] = IsMEMWr && addr_decode_AI_CTRL[59] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[60] = IsMEMWr && addr_decode_AI_CTRL[60] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[61] = IsMEMWr && addr_decode_AI_CTRL[61] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[62] = IsMEMWr && addr_decode_AI_CTRL[62] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[63] = IsMEMWr && addr_decode_AI_CTRL[63] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[64] = IsMEMWr && addr_decode_AI_CTRL[64] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[65] = IsMEMWr && addr_decode_AI_CTRL[65] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[66] = IsMEMWr && addr_decode_AI_CTRL[66] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[67] = IsMEMWr && addr_decode_AI_CTRL[67] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[68] = IsMEMWr && addr_decode_AI_CTRL[68] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[69] = IsMEMWr && addr_decode_AI_CTRL[69] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[70] = IsMEMWr && addr_decode_AI_CTRL[70] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[71] = IsMEMWr && addr_decode_AI_CTRL[71] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[72] = IsMEMWr && addr_decode_AI_CTRL[72] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[73] = IsMEMWr && addr_decode_AI_CTRL[73] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[74] = IsMEMWr && addr_decode_AI_CTRL[74] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[75] = IsMEMWr && addr_decode_AI_CTRL[75] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[76] = IsMEMWr && addr_decode_AI_CTRL[76] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[77] = IsMEMWr && addr_decode_AI_CTRL[77] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[78] = IsMEMWr && addr_decode_AI_CTRL[78] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[79] = IsMEMWr && addr_decode_AI_CTRL[79] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[80] = IsMEMWr && addr_decode_AI_CTRL[80] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[81] = IsMEMWr && addr_decode_AI_CTRL[81] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[82] = IsMEMWr && addr_decode_AI_CTRL[82] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[83] = IsMEMWr && addr_decode_AI_CTRL[83] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[84] = IsMEMWr && addr_decode_AI_CTRL[84] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[85] = IsMEMWr && addr_decode_AI_CTRL[85] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[86] = IsMEMWr && addr_decode_AI_CTRL[86] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[87] = IsMEMWr && addr_decode_AI_CTRL[87] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[88] = IsMEMWr && addr_decode_AI_CTRL[88] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[89] = IsMEMWr && addr_decode_AI_CTRL[89] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[90] = IsMEMWr && addr_decode_AI_CTRL[90] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[91] = IsMEMWr && addr_decode_AI_CTRL[91] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[92] = IsMEMWr && addr_decode_AI_CTRL[92] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[93] = IsMEMWr && addr_decode_AI_CTRL[93] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[94] = IsMEMWr && addr_decode_AI_CTRL[94] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[95] = IsMEMWr && addr_decode_AI_CTRL[95] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[96] = IsMEMWr && addr_decode_AI_CTRL[96] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[97] = IsMEMWr && addr_decode_AI_CTRL[97] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[98] = IsMEMWr && addr_decode_AI_CTRL[98] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[99] = IsMEMWr && addr_decode_AI_CTRL[99] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[100] = IsMEMWr && addr_decode_AI_CTRL[100] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[101] = IsMEMWr && addr_decode_AI_CTRL[101] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[102] = IsMEMWr && addr_decode_AI_CTRL[102] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[103] = IsMEMWr && addr_decode_AI_CTRL[103] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[104] = IsMEMWr && addr_decode_AI_CTRL[104] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[105] = IsMEMWr && addr_decode_AI_CTRL[105] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[106] = IsMEMWr && addr_decode_AI_CTRL[106] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[107] = IsMEMWr && addr_decode_AI_CTRL[107] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[108] = IsMEMWr && addr_decode_AI_CTRL[108] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[109] = IsMEMWr && addr_decode_AI_CTRL[109] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[110] = IsMEMWr && addr_decode_AI_CTRL[110] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[111] = IsMEMWr && addr_decode_AI_CTRL[111] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[112] = IsMEMWr && addr_decode_AI_CTRL[112] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[113] = IsMEMWr && addr_decode_AI_CTRL[113] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[114] = IsMEMWr && addr_decode_AI_CTRL[114] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[115] = IsMEMWr && addr_decode_AI_CTRL[115] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[116] = IsMEMWr && addr_decode_AI_CTRL[116] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[117] = IsMEMWr && addr_decode_AI_CTRL[117] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[118] = IsMEMWr && addr_decode_AI_CTRL[118] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[119] = IsMEMWr && addr_decode_AI_CTRL[119] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[120] = IsMEMWr && addr_decode_AI_CTRL[120] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[121] = IsMEMWr && addr_decode_AI_CTRL[121] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[122] = IsMEMWr && addr_decode_AI_CTRL[122] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[123] = IsMEMWr && addr_decode_AI_CTRL[123] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[124] = IsMEMWr && addr_decode_AI_CTRL[124] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[125] = IsMEMWr && addr_decode_AI_CTRL[125] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[126] = IsMEMWr && addr_decode_AI_CTRL[126] && sai_HQM_OS_W_write_en;
   write_req_AI_CTRL[127] = IsMEMWr && addr_decode_AI_CTRL[127] && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// AI_CTRL.IMS_MASK x1 RW, using RW template.
logic [127:0][0:0] up_AI_CTRL_IMS_MASK;
always_comb begin
 up_AI_CTRL_IMS_MASK[0] =
    ({1{write_req_AI_CTRL[0] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[1] =
    ({1{write_req_AI_CTRL[1] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[2] =
    ({1{write_req_AI_CTRL[2] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[3] =
    ({1{write_req_AI_CTRL[3] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[4] =
    ({1{write_req_AI_CTRL[4] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[5] =
    ({1{write_req_AI_CTRL[5] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[6] =
    ({1{write_req_AI_CTRL[6] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[7] =
    ({1{write_req_AI_CTRL[7] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[8] =
    ({1{write_req_AI_CTRL[8] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[9] =
    ({1{write_req_AI_CTRL[9] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[10] =
    ({1{write_req_AI_CTRL[10] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[11] =
    ({1{write_req_AI_CTRL[11] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[12] =
    ({1{write_req_AI_CTRL[12] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[13] =
    ({1{write_req_AI_CTRL[13] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[14] =
    ({1{write_req_AI_CTRL[14] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[15] =
    ({1{write_req_AI_CTRL[15] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[16] =
    ({1{write_req_AI_CTRL[16] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[17] =
    ({1{write_req_AI_CTRL[17] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[18] =
    ({1{write_req_AI_CTRL[18] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[19] =
    ({1{write_req_AI_CTRL[19] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[20] =
    ({1{write_req_AI_CTRL[20] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[21] =
    ({1{write_req_AI_CTRL[21] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[22] =
    ({1{write_req_AI_CTRL[22] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[23] =
    ({1{write_req_AI_CTRL[23] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[24] =
    ({1{write_req_AI_CTRL[24] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[25] =
    ({1{write_req_AI_CTRL[25] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[26] =
    ({1{write_req_AI_CTRL[26] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[27] =
    ({1{write_req_AI_CTRL[27] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[28] =
    ({1{write_req_AI_CTRL[28] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[29] =
    ({1{write_req_AI_CTRL[29] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[30] =
    ({1{write_req_AI_CTRL[30] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[31] =
    ({1{write_req_AI_CTRL[31] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[32] =
    ({1{write_req_AI_CTRL[32] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[33] =
    ({1{write_req_AI_CTRL[33] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[34] =
    ({1{write_req_AI_CTRL[34] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[35] =
    ({1{write_req_AI_CTRL[35] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[36] =
    ({1{write_req_AI_CTRL[36] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[37] =
    ({1{write_req_AI_CTRL[37] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[38] =
    ({1{write_req_AI_CTRL[38] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[39] =
    ({1{write_req_AI_CTRL[39] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[40] =
    ({1{write_req_AI_CTRL[40] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[41] =
    ({1{write_req_AI_CTRL[41] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[42] =
    ({1{write_req_AI_CTRL[42] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[43] =
    ({1{write_req_AI_CTRL[43] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[44] =
    ({1{write_req_AI_CTRL[44] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[45] =
    ({1{write_req_AI_CTRL[45] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[46] =
    ({1{write_req_AI_CTRL[46] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[47] =
    ({1{write_req_AI_CTRL[47] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[48] =
    ({1{write_req_AI_CTRL[48] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[49] =
    ({1{write_req_AI_CTRL[49] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[50] =
    ({1{write_req_AI_CTRL[50] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[51] =
    ({1{write_req_AI_CTRL[51] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[52] =
    ({1{write_req_AI_CTRL[52] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[53] =
    ({1{write_req_AI_CTRL[53] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[54] =
    ({1{write_req_AI_CTRL[54] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[55] =
    ({1{write_req_AI_CTRL[55] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[56] =
    ({1{write_req_AI_CTRL[56] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[57] =
    ({1{write_req_AI_CTRL[57] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[58] =
    ({1{write_req_AI_CTRL[58] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[59] =
    ({1{write_req_AI_CTRL[59] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[60] =
    ({1{write_req_AI_CTRL[60] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[61] =
    ({1{write_req_AI_CTRL[61] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[62] =
    ({1{write_req_AI_CTRL[62] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[63] =
    ({1{write_req_AI_CTRL[63] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[64] =
    ({1{write_req_AI_CTRL[64] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[65] =
    ({1{write_req_AI_CTRL[65] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[66] =
    ({1{write_req_AI_CTRL[66] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[67] =
    ({1{write_req_AI_CTRL[67] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[68] =
    ({1{write_req_AI_CTRL[68] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[69] =
    ({1{write_req_AI_CTRL[69] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[70] =
    ({1{write_req_AI_CTRL[70] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[71] =
    ({1{write_req_AI_CTRL[71] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[72] =
    ({1{write_req_AI_CTRL[72] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[73] =
    ({1{write_req_AI_CTRL[73] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[74] =
    ({1{write_req_AI_CTRL[74] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[75] =
    ({1{write_req_AI_CTRL[75] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[76] =
    ({1{write_req_AI_CTRL[76] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[77] =
    ({1{write_req_AI_CTRL[77] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[78] =
    ({1{write_req_AI_CTRL[78] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[79] =
    ({1{write_req_AI_CTRL[79] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[80] =
    ({1{write_req_AI_CTRL[80] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[81] =
    ({1{write_req_AI_CTRL[81] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[82] =
    ({1{write_req_AI_CTRL[82] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[83] =
    ({1{write_req_AI_CTRL[83] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[84] =
    ({1{write_req_AI_CTRL[84] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[85] =
    ({1{write_req_AI_CTRL[85] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[86] =
    ({1{write_req_AI_CTRL[86] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[87] =
    ({1{write_req_AI_CTRL[87] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[88] =
    ({1{write_req_AI_CTRL[88] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[89] =
    ({1{write_req_AI_CTRL[89] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[90] =
    ({1{write_req_AI_CTRL[90] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[91] =
    ({1{write_req_AI_CTRL[91] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[92] =
    ({1{write_req_AI_CTRL[92] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[93] =
    ({1{write_req_AI_CTRL[93] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[94] =
    ({1{write_req_AI_CTRL[94] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[95] =
    ({1{write_req_AI_CTRL[95] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[96] =
    ({1{write_req_AI_CTRL[96] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[97] =
    ({1{write_req_AI_CTRL[97] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[98] =
    ({1{write_req_AI_CTRL[98] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[99] =
    ({1{write_req_AI_CTRL[99] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[100] =
    ({1{write_req_AI_CTRL[100] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[101] =
    ({1{write_req_AI_CTRL[101] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[102] =
    ({1{write_req_AI_CTRL[102] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[103] =
    ({1{write_req_AI_CTRL[103] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[104] =
    ({1{write_req_AI_CTRL[104] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[105] =
    ({1{write_req_AI_CTRL[105] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[106] =
    ({1{write_req_AI_CTRL[106] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[107] =
    ({1{write_req_AI_CTRL[107] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[108] =
    ({1{write_req_AI_CTRL[108] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[109] =
    ({1{write_req_AI_CTRL[109] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[110] =
    ({1{write_req_AI_CTRL[110] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[111] =
    ({1{write_req_AI_CTRL[111] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[112] =
    ({1{write_req_AI_CTRL[112] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[113] =
    ({1{write_req_AI_CTRL[113] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[114] =
    ({1{write_req_AI_CTRL[114] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[115] =
    ({1{write_req_AI_CTRL[115] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[116] =
    ({1{write_req_AI_CTRL[116] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[117] =
    ({1{write_req_AI_CTRL[117] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[118] =
    ({1{write_req_AI_CTRL[118] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[119] =
    ({1{write_req_AI_CTRL[119] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[120] =
    ({1{write_req_AI_CTRL[120] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[121] =
    ({1{write_req_AI_CTRL[121] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[122] =
    ({1{write_req_AI_CTRL[122] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[123] =
    ({1{write_req_AI_CTRL[123] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[124] =
    ({1{write_req_AI_CTRL[124] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[125] =
    ({1{write_req_AI_CTRL[125] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[126] =
    ({1{write_req_AI_CTRL[126] }} &
    be[0:0]);
 up_AI_CTRL_IMS_MASK[127] =
    ({1{write_req_AI_CTRL[127] }} &
    be[0:0]);
end

logic [127:0][0:0] nxt_AI_CTRL_IMS_MASK;
always_comb begin
 nxt_AI_CTRL_IMS_MASK[0] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[1] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[2] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[3] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[4] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[5] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[6] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[7] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[8] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[9] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[10] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[11] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[12] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[13] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[14] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[15] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[16] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[17] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[18] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[19] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[20] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[21] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[22] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[23] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[24] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[25] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[26] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[27] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[28] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[29] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[30] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[31] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[32] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[33] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[34] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[35] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[36] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[37] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[38] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[39] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[40] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[41] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[42] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[43] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[44] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[45] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[46] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[47] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[48] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[49] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[50] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[51] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[52] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[53] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[54] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[55] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[56] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[57] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[58] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[59] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[60] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[61] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[62] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[63] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[64] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[65] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[66] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[67] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[68] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[69] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[70] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[71] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[72] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[73] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[74] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[75] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[76] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[77] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[78] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[79] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[80] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[81] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[82] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[83] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[84] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[85] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[86] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[87] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[88] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[89] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[90] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[91] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[92] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[93] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[94] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[95] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[96] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[97] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[98] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[99] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[100] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[101] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[102] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[103] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[104] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[105] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[106] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[107] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[108] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[109] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[110] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[111] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[112] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[113] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[114] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[115] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[116] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[117] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[118] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[119] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[120] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[121] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[122] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[123] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[124] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[125] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[126] = write_data[0:0];

 nxt_AI_CTRL_IMS_MASK[127] = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[0][0], nxt_AI_CTRL_IMS_MASK[0][0:0], AI_CTRL[0].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[1][0], nxt_AI_CTRL_IMS_MASK[1][0:0], AI_CTRL[1].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[2][0], nxt_AI_CTRL_IMS_MASK[2][0:0], AI_CTRL[2].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[3][0], nxt_AI_CTRL_IMS_MASK[3][0:0], AI_CTRL[3].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[4][0], nxt_AI_CTRL_IMS_MASK[4][0:0], AI_CTRL[4].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[5][0], nxt_AI_CTRL_IMS_MASK[5][0:0], AI_CTRL[5].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[6][0], nxt_AI_CTRL_IMS_MASK[6][0:0], AI_CTRL[6].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[7][0], nxt_AI_CTRL_IMS_MASK[7][0:0], AI_CTRL[7].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[8][0], nxt_AI_CTRL_IMS_MASK[8][0:0], AI_CTRL[8].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[9][0], nxt_AI_CTRL_IMS_MASK[9][0:0], AI_CTRL[9].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[10][0], nxt_AI_CTRL_IMS_MASK[10][0:0], AI_CTRL[10].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[11][0], nxt_AI_CTRL_IMS_MASK[11][0:0], AI_CTRL[11].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[12][0], nxt_AI_CTRL_IMS_MASK[12][0:0], AI_CTRL[12].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[13][0], nxt_AI_CTRL_IMS_MASK[13][0:0], AI_CTRL[13].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[14][0], nxt_AI_CTRL_IMS_MASK[14][0:0], AI_CTRL[14].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[15][0], nxt_AI_CTRL_IMS_MASK[15][0:0], AI_CTRL[15].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[16][0], nxt_AI_CTRL_IMS_MASK[16][0:0], AI_CTRL[16].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[17][0], nxt_AI_CTRL_IMS_MASK[17][0:0], AI_CTRL[17].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[18][0], nxt_AI_CTRL_IMS_MASK[18][0:0], AI_CTRL[18].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[19][0], nxt_AI_CTRL_IMS_MASK[19][0:0], AI_CTRL[19].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[20][0], nxt_AI_CTRL_IMS_MASK[20][0:0], AI_CTRL[20].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[21][0], nxt_AI_CTRL_IMS_MASK[21][0:0], AI_CTRL[21].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[22][0], nxt_AI_CTRL_IMS_MASK[22][0:0], AI_CTRL[22].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[23][0], nxt_AI_CTRL_IMS_MASK[23][0:0], AI_CTRL[23].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[24][0], nxt_AI_CTRL_IMS_MASK[24][0:0], AI_CTRL[24].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[25][0], nxt_AI_CTRL_IMS_MASK[25][0:0], AI_CTRL[25].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[26][0], nxt_AI_CTRL_IMS_MASK[26][0:0], AI_CTRL[26].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[27][0], nxt_AI_CTRL_IMS_MASK[27][0:0], AI_CTRL[27].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[28][0], nxt_AI_CTRL_IMS_MASK[28][0:0], AI_CTRL[28].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[29][0], nxt_AI_CTRL_IMS_MASK[29][0:0], AI_CTRL[29].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[30][0], nxt_AI_CTRL_IMS_MASK[30][0:0], AI_CTRL[30].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[31][0], nxt_AI_CTRL_IMS_MASK[31][0:0], AI_CTRL[31].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[32][0], nxt_AI_CTRL_IMS_MASK[32][0:0], AI_CTRL[32].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[33][0], nxt_AI_CTRL_IMS_MASK[33][0:0], AI_CTRL[33].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[34][0], nxt_AI_CTRL_IMS_MASK[34][0:0], AI_CTRL[34].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[35][0], nxt_AI_CTRL_IMS_MASK[35][0:0], AI_CTRL[35].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[36][0], nxt_AI_CTRL_IMS_MASK[36][0:0], AI_CTRL[36].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[37][0], nxt_AI_CTRL_IMS_MASK[37][0:0], AI_CTRL[37].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[38][0], nxt_AI_CTRL_IMS_MASK[38][0:0], AI_CTRL[38].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[39][0], nxt_AI_CTRL_IMS_MASK[39][0:0], AI_CTRL[39].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[40][0], nxt_AI_CTRL_IMS_MASK[40][0:0], AI_CTRL[40].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[41][0], nxt_AI_CTRL_IMS_MASK[41][0:0], AI_CTRL[41].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[42][0], nxt_AI_CTRL_IMS_MASK[42][0:0], AI_CTRL[42].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[43][0], nxt_AI_CTRL_IMS_MASK[43][0:0], AI_CTRL[43].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[44][0], nxt_AI_CTRL_IMS_MASK[44][0:0], AI_CTRL[44].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[45][0], nxt_AI_CTRL_IMS_MASK[45][0:0], AI_CTRL[45].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[46][0], nxt_AI_CTRL_IMS_MASK[46][0:0], AI_CTRL[46].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[47][0], nxt_AI_CTRL_IMS_MASK[47][0:0], AI_CTRL[47].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[48][0], nxt_AI_CTRL_IMS_MASK[48][0:0], AI_CTRL[48].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[49][0], nxt_AI_CTRL_IMS_MASK[49][0:0], AI_CTRL[49].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[50][0], nxt_AI_CTRL_IMS_MASK[50][0:0], AI_CTRL[50].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[51][0], nxt_AI_CTRL_IMS_MASK[51][0:0], AI_CTRL[51].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[52][0], nxt_AI_CTRL_IMS_MASK[52][0:0], AI_CTRL[52].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[53][0], nxt_AI_CTRL_IMS_MASK[53][0:0], AI_CTRL[53].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[54][0], nxt_AI_CTRL_IMS_MASK[54][0:0], AI_CTRL[54].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[55][0], nxt_AI_CTRL_IMS_MASK[55][0:0], AI_CTRL[55].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[56][0], nxt_AI_CTRL_IMS_MASK[56][0:0], AI_CTRL[56].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[57][0], nxt_AI_CTRL_IMS_MASK[57][0:0], AI_CTRL[57].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[58][0], nxt_AI_CTRL_IMS_MASK[58][0:0], AI_CTRL[58].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[59][0], nxt_AI_CTRL_IMS_MASK[59][0:0], AI_CTRL[59].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[60][0], nxt_AI_CTRL_IMS_MASK[60][0:0], AI_CTRL[60].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[61][0], nxt_AI_CTRL_IMS_MASK[61][0:0], AI_CTRL[61].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[62][0], nxt_AI_CTRL_IMS_MASK[62][0:0], AI_CTRL[62].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[63][0], nxt_AI_CTRL_IMS_MASK[63][0:0], AI_CTRL[63].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[64][0], nxt_AI_CTRL_IMS_MASK[64][0:0], AI_CTRL[64].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[65][0], nxt_AI_CTRL_IMS_MASK[65][0:0], AI_CTRL[65].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[66][0], nxt_AI_CTRL_IMS_MASK[66][0:0], AI_CTRL[66].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[67][0], nxt_AI_CTRL_IMS_MASK[67][0:0], AI_CTRL[67].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[68][0], nxt_AI_CTRL_IMS_MASK[68][0:0], AI_CTRL[68].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[69][0], nxt_AI_CTRL_IMS_MASK[69][0:0], AI_CTRL[69].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[70][0], nxt_AI_CTRL_IMS_MASK[70][0:0], AI_CTRL[70].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[71][0], nxt_AI_CTRL_IMS_MASK[71][0:0], AI_CTRL[71].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[72][0], nxt_AI_CTRL_IMS_MASK[72][0:0], AI_CTRL[72].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[73][0], nxt_AI_CTRL_IMS_MASK[73][0:0], AI_CTRL[73].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[74][0], nxt_AI_CTRL_IMS_MASK[74][0:0], AI_CTRL[74].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[75][0], nxt_AI_CTRL_IMS_MASK[75][0:0], AI_CTRL[75].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[76][0], nxt_AI_CTRL_IMS_MASK[76][0:0], AI_CTRL[76].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[77][0], nxt_AI_CTRL_IMS_MASK[77][0:0], AI_CTRL[77].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[78][0], nxt_AI_CTRL_IMS_MASK[78][0:0], AI_CTRL[78].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[79][0], nxt_AI_CTRL_IMS_MASK[79][0:0], AI_CTRL[79].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[80][0], nxt_AI_CTRL_IMS_MASK[80][0:0], AI_CTRL[80].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[81][0], nxt_AI_CTRL_IMS_MASK[81][0:0], AI_CTRL[81].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[82][0], nxt_AI_CTRL_IMS_MASK[82][0:0], AI_CTRL[82].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[83][0], nxt_AI_CTRL_IMS_MASK[83][0:0], AI_CTRL[83].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[84][0], nxt_AI_CTRL_IMS_MASK[84][0:0], AI_CTRL[84].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[85][0], nxt_AI_CTRL_IMS_MASK[85][0:0], AI_CTRL[85].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[86][0], nxt_AI_CTRL_IMS_MASK[86][0:0], AI_CTRL[86].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[87][0], nxt_AI_CTRL_IMS_MASK[87][0:0], AI_CTRL[87].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[88][0], nxt_AI_CTRL_IMS_MASK[88][0:0], AI_CTRL[88].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[89][0], nxt_AI_CTRL_IMS_MASK[89][0:0], AI_CTRL[89].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[90][0], nxt_AI_CTRL_IMS_MASK[90][0:0], AI_CTRL[90].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[91][0], nxt_AI_CTRL_IMS_MASK[91][0:0], AI_CTRL[91].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[92][0], nxt_AI_CTRL_IMS_MASK[92][0:0], AI_CTRL[92].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[93][0], nxt_AI_CTRL_IMS_MASK[93][0:0], AI_CTRL[93].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[94][0], nxt_AI_CTRL_IMS_MASK[94][0:0], AI_CTRL[94].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[95][0], nxt_AI_CTRL_IMS_MASK[95][0:0], AI_CTRL[95].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[96][0], nxt_AI_CTRL_IMS_MASK[96][0:0], AI_CTRL[96].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[97][0], nxt_AI_CTRL_IMS_MASK[97][0:0], AI_CTRL[97].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[98][0], nxt_AI_CTRL_IMS_MASK[98][0:0], AI_CTRL[98].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[99][0], nxt_AI_CTRL_IMS_MASK[99][0:0], AI_CTRL[99].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[100][0], nxt_AI_CTRL_IMS_MASK[100][0:0], AI_CTRL[100].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[101][0], nxt_AI_CTRL_IMS_MASK[101][0:0], AI_CTRL[101].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[102][0], nxt_AI_CTRL_IMS_MASK[102][0:0], AI_CTRL[102].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[103][0], nxt_AI_CTRL_IMS_MASK[103][0:0], AI_CTRL[103].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[104][0], nxt_AI_CTRL_IMS_MASK[104][0:0], AI_CTRL[104].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[105][0], nxt_AI_CTRL_IMS_MASK[105][0:0], AI_CTRL[105].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[106][0], nxt_AI_CTRL_IMS_MASK[106][0:0], AI_CTRL[106].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[107][0], nxt_AI_CTRL_IMS_MASK[107][0:0], AI_CTRL[107].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[108][0], nxt_AI_CTRL_IMS_MASK[108][0:0], AI_CTRL[108].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[109][0], nxt_AI_CTRL_IMS_MASK[109][0:0], AI_CTRL[109].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[110][0], nxt_AI_CTRL_IMS_MASK[110][0:0], AI_CTRL[110].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[111][0], nxt_AI_CTRL_IMS_MASK[111][0:0], AI_CTRL[111].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[112][0], nxt_AI_CTRL_IMS_MASK[112][0:0], AI_CTRL[112].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[113][0], nxt_AI_CTRL_IMS_MASK[113][0:0], AI_CTRL[113].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[114][0], nxt_AI_CTRL_IMS_MASK[114][0:0], AI_CTRL[114].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[115][0], nxt_AI_CTRL_IMS_MASK[115][0:0], AI_CTRL[115].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[116][0], nxt_AI_CTRL_IMS_MASK[116][0:0], AI_CTRL[116].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[117][0], nxt_AI_CTRL_IMS_MASK[117][0:0], AI_CTRL[117].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[118][0], nxt_AI_CTRL_IMS_MASK[118][0:0], AI_CTRL[118].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[119][0], nxt_AI_CTRL_IMS_MASK[119][0:0], AI_CTRL[119].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[120][0], nxt_AI_CTRL_IMS_MASK[120][0:0], AI_CTRL[120].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[121][0], nxt_AI_CTRL_IMS_MASK[121][0:0], AI_CTRL[121].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[122][0], nxt_AI_CTRL_IMS_MASK[122][0:0], AI_CTRL[122].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[123][0], nxt_AI_CTRL_IMS_MASK[123][0:0], AI_CTRL[123].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[124][0], nxt_AI_CTRL_IMS_MASK[124][0:0], AI_CTRL[124].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[125][0], nxt_AI_CTRL_IMS_MASK[125][0:0], AI_CTRL[125].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[126][0], nxt_AI_CTRL_IMS_MASK[126][0:0], AI_CTRL[126].IMS_MASK[0:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_AI_CTRL_IMS_MASK[127][0], nxt_AI_CTRL_IMS_MASK[127][0:0], AI_CTRL[127].IMS_MASK[0:0])
// ----------------------------------------------------------------------
// AI_CTRL.IMS_PEND x1 RO/V, using RO/V template.
assign AI_CTRL[0].IMS_PEND = new_AI_CTRL[0].IMS_PEND;

assign AI_CTRL[1].IMS_PEND = new_AI_CTRL[1].IMS_PEND;

assign AI_CTRL[2].IMS_PEND = new_AI_CTRL[2].IMS_PEND;

assign AI_CTRL[3].IMS_PEND = new_AI_CTRL[3].IMS_PEND;

assign AI_CTRL[4].IMS_PEND = new_AI_CTRL[4].IMS_PEND;

assign AI_CTRL[5].IMS_PEND = new_AI_CTRL[5].IMS_PEND;

assign AI_CTRL[6].IMS_PEND = new_AI_CTRL[6].IMS_PEND;

assign AI_CTRL[7].IMS_PEND = new_AI_CTRL[7].IMS_PEND;

assign AI_CTRL[8].IMS_PEND = new_AI_CTRL[8].IMS_PEND;

assign AI_CTRL[9].IMS_PEND = new_AI_CTRL[9].IMS_PEND;

assign AI_CTRL[10].IMS_PEND = new_AI_CTRL[10].IMS_PEND;

assign AI_CTRL[11].IMS_PEND = new_AI_CTRL[11].IMS_PEND;

assign AI_CTRL[12].IMS_PEND = new_AI_CTRL[12].IMS_PEND;

assign AI_CTRL[13].IMS_PEND = new_AI_CTRL[13].IMS_PEND;

assign AI_CTRL[14].IMS_PEND = new_AI_CTRL[14].IMS_PEND;

assign AI_CTRL[15].IMS_PEND = new_AI_CTRL[15].IMS_PEND;

assign AI_CTRL[16].IMS_PEND = new_AI_CTRL[16].IMS_PEND;

assign AI_CTRL[17].IMS_PEND = new_AI_CTRL[17].IMS_PEND;

assign AI_CTRL[18].IMS_PEND = new_AI_CTRL[18].IMS_PEND;

assign AI_CTRL[19].IMS_PEND = new_AI_CTRL[19].IMS_PEND;

assign AI_CTRL[20].IMS_PEND = new_AI_CTRL[20].IMS_PEND;

assign AI_CTRL[21].IMS_PEND = new_AI_CTRL[21].IMS_PEND;

assign AI_CTRL[22].IMS_PEND = new_AI_CTRL[22].IMS_PEND;

assign AI_CTRL[23].IMS_PEND = new_AI_CTRL[23].IMS_PEND;

assign AI_CTRL[24].IMS_PEND = new_AI_CTRL[24].IMS_PEND;

assign AI_CTRL[25].IMS_PEND = new_AI_CTRL[25].IMS_PEND;

assign AI_CTRL[26].IMS_PEND = new_AI_CTRL[26].IMS_PEND;

assign AI_CTRL[27].IMS_PEND = new_AI_CTRL[27].IMS_PEND;

assign AI_CTRL[28].IMS_PEND = new_AI_CTRL[28].IMS_PEND;

assign AI_CTRL[29].IMS_PEND = new_AI_CTRL[29].IMS_PEND;

assign AI_CTRL[30].IMS_PEND = new_AI_CTRL[30].IMS_PEND;

assign AI_CTRL[31].IMS_PEND = new_AI_CTRL[31].IMS_PEND;

assign AI_CTRL[32].IMS_PEND = new_AI_CTRL[32].IMS_PEND;

assign AI_CTRL[33].IMS_PEND = new_AI_CTRL[33].IMS_PEND;

assign AI_CTRL[34].IMS_PEND = new_AI_CTRL[34].IMS_PEND;

assign AI_CTRL[35].IMS_PEND = new_AI_CTRL[35].IMS_PEND;

assign AI_CTRL[36].IMS_PEND = new_AI_CTRL[36].IMS_PEND;

assign AI_CTRL[37].IMS_PEND = new_AI_CTRL[37].IMS_PEND;

assign AI_CTRL[38].IMS_PEND = new_AI_CTRL[38].IMS_PEND;

assign AI_CTRL[39].IMS_PEND = new_AI_CTRL[39].IMS_PEND;

assign AI_CTRL[40].IMS_PEND = new_AI_CTRL[40].IMS_PEND;

assign AI_CTRL[41].IMS_PEND = new_AI_CTRL[41].IMS_PEND;

assign AI_CTRL[42].IMS_PEND = new_AI_CTRL[42].IMS_PEND;

assign AI_CTRL[43].IMS_PEND = new_AI_CTRL[43].IMS_PEND;

assign AI_CTRL[44].IMS_PEND = new_AI_CTRL[44].IMS_PEND;

assign AI_CTRL[45].IMS_PEND = new_AI_CTRL[45].IMS_PEND;

assign AI_CTRL[46].IMS_PEND = new_AI_CTRL[46].IMS_PEND;

assign AI_CTRL[47].IMS_PEND = new_AI_CTRL[47].IMS_PEND;

assign AI_CTRL[48].IMS_PEND = new_AI_CTRL[48].IMS_PEND;

assign AI_CTRL[49].IMS_PEND = new_AI_CTRL[49].IMS_PEND;

assign AI_CTRL[50].IMS_PEND = new_AI_CTRL[50].IMS_PEND;

assign AI_CTRL[51].IMS_PEND = new_AI_CTRL[51].IMS_PEND;

assign AI_CTRL[52].IMS_PEND = new_AI_CTRL[52].IMS_PEND;

assign AI_CTRL[53].IMS_PEND = new_AI_CTRL[53].IMS_PEND;

assign AI_CTRL[54].IMS_PEND = new_AI_CTRL[54].IMS_PEND;

assign AI_CTRL[55].IMS_PEND = new_AI_CTRL[55].IMS_PEND;

assign AI_CTRL[56].IMS_PEND = new_AI_CTRL[56].IMS_PEND;

assign AI_CTRL[57].IMS_PEND = new_AI_CTRL[57].IMS_PEND;

assign AI_CTRL[58].IMS_PEND = new_AI_CTRL[58].IMS_PEND;

assign AI_CTRL[59].IMS_PEND = new_AI_CTRL[59].IMS_PEND;

assign AI_CTRL[60].IMS_PEND = new_AI_CTRL[60].IMS_PEND;

assign AI_CTRL[61].IMS_PEND = new_AI_CTRL[61].IMS_PEND;

assign AI_CTRL[62].IMS_PEND = new_AI_CTRL[62].IMS_PEND;

assign AI_CTRL[63].IMS_PEND = new_AI_CTRL[63].IMS_PEND;

assign AI_CTRL[64].IMS_PEND = new_AI_CTRL[64].IMS_PEND;

assign AI_CTRL[65].IMS_PEND = new_AI_CTRL[65].IMS_PEND;

assign AI_CTRL[66].IMS_PEND = new_AI_CTRL[66].IMS_PEND;

assign AI_CTRL[67].IMS_PEND = new_AI_CTRL[67].IMS_PEND;

assign AI_CTRL[68].IMS_PEND = new_AI_CTRL[68].IMS_PEND;

assign AI_CTRL[69].IMS_PEND = new_AI_CTRL[69].IMS_PEND;

assign AI_CTRL[70].IMS_PEND = new_AI_CTRL[70].IMS_PEND;

assign AI_CTRL[71].IMS_PEND = new_AI_CTRL[71].IMS_PEND;

assign AI_CTRL[72].IMS_PEND = new_AI_CTRL[72].IMS_PEND;

assign AI_CTRL[73].IMS_PEND = new_AI_CTRL[73].IMS_PEND;

assign AI_CTRL[74].IMS_PEND = new_AI_CTRL[74].IMS_PEND;

assign AI_CTRL[75].IMS_PEND = new_AI_CTRL[75].IMS_PEND;

assign AI_CTRL[76].IMS_PEND = new_AI_CTRL[76].IMS_PEND;

assign AI_CTRL[77].IMS_PEND = new_AI_CTRL[77].IMS_PEND;

assign AI_CTRL[78].IMS_PEND = new_AI_CTRL[78].IMS_PEND;

assign AI_CTRL[79].IMS_PEND = new_AI_CTRL[79].IMS_PEND;

assign AI_CTRL[80].IMS_PEND = new_AI_CTRL[80].IMS_PEND;

assign AI_CTRL[81].IMS_PEND = new_AI_CTRL[81].IMS_PEND;

assign AI_CTRL[82].IMS_PEND = new_AI_CTRL[82].IMS_PEND;

assign AI_CTRL[83].IMS_PEND = new_AI_CTRL[83].IMS_PEND;

assign AI_CTRL[84].IMS_PEND = new_AI_CTRL[84].IMS_PEND;

assign AI_CTRL[85].IMS_PEND = new_AI_CTRL[85].IMS_PEND;

assign AI_CTRL[86].IMS_PEND = new_AI_CTRL[86].IMS_PEND;

assign AI_CTRL[87].IMS_PEND = new_AI_CTRL[87].IMS_PEND;

assign AI_CTRL[88].IMS_PEND = new_AI_CTRL[88].IMS_PEND;

assign AI_CTRL[89].IMS_PEND = new_AI_CTRL[89].IMS_PEND;

assign AI_CTRL[90].IMS_PEND = new_AI_CTRL[90].IMS_PEND;

assign AI_CTRL[91].IMS_PEND = new_AI_CTRL[91].IMS_PEND;

assign AI_CTRL[92].IMS_PEND = new_AI_CTRL[92].IMS_PEND;

assign AI_CTRL[93].IMS_PEND = new_AI_CTRL[93].IMS_PEND;

assign AI_CTRL[94].IMS_PEND = new_AI_CTRL[94].IMS_PEND;

assign AI_CTRL[95].IMS_PEND = new_AI_CTRL[95].IMS_PEND;

assign AI_CTRL[96].IMS_PEND = new_AI_CTRL[96].IMS_PEND;

assign AI_CTRL[97].IMS_PEND = new_AI_CTRL[97].IMS_PEND;

assign AI_CTRL[98].IMS_PEND = new_AI_CTRL[98].IMS_PEND;

assign AI_CTRL[99].IMS_PEND = new_AI_CTRL[99].IMS_PEND;

assign AI_CTRL[100].IMS_PEND = new_AI_CTRL[100].IMS_PEND;

assign AI_CTRL[101].IMS_PEND = new_AI_CTRL[101].IMS_PEND;

assign AI_CTRL[102].IMS_PEND = new_AI_CTRL[102].IMS_PEND;

assign AI_CTRL[103].IMS_PEND = new_AI_CTRL[103].IMS_PEND;

assign AI_CTRL[104].IMS_PEND = new_AI_CTRL[104].IMS_PEND;

assign AI_CTRL[105].IMS_PEND = new_AI_CTRL[105].IMS_PEND;

assign AI_CTRL[106].IMS_PEND = new_AI_CTRL[106].IMS_PEND;

assign AI_CTRL[107].IMS_PEND = new_AI_CTRL[107].IMS_PEND;

assign AI_CTRL[108].IMS_PEND = new_AI_CTRL[108].IMS_PEND;

assign AI_CTRL[109].IMS_PEND = new_AI_CTRL[109].IMS_PEND;

assign AI_CTRL[110].IMS_PEND = new_AI_CTRL[110].IMS_PEND;

assign AI_CTRL[111].IMS_PEND = new_AI_CTRL[111].IMS_PEND;

assign AI_CTRL[112].IMS_PEND = new_AI_CTRL[112].IMS_PEND;

assign AI_CTRL[113].IMS_PEND = new_AI_CTRL[113].IMS_PEND;

assign AI_CTRL[114].IMS_PEND = new_AI_CTRL[114].IMS_PEND;

assign AI_CTRL[115].IMS_PEND = new_AI_CTRL[115].IMS_PEND;

assign AI_CTRL[116].IMS_PEND = new_AI_CTRL[116].IMS_PEND;

assign AI_CTRL[117].IMS_PEND = new_AI_CTRL[117].IMS_PEND;

assign AI_CTRL[118].IMS_PEND = new_AI_CTRL[118].IMS_PEND;

assign AI_CTRL[119].IMS_PEND = new_AI_CTRL[119].IMS_PEND;

assign AI_CTRL[120].IMS_PEND = new_AI_CTRL[120].IMS_PEND;

assign AI_CTRL[121].IMS_PEND = new_AI_CTRL[121].IMS_PEND;

assign AI_CTRL[122].IMS_PEND = new_AI_CTRL[122].IMS_PEND;

assign AI_CTRL[123].IMS_PEND = new_AI_CTRL[123].IMS_PEND;

assign AI_CTRL[124].IMS_PEND = new_AI_CTRL[124].IMS_PEND;

assign AI_CTRL[125].IMS_PEND = new_AI_CTRL[125].IMS_PEND;

assign AI_CTRL[126].IMS_PEND = new_AI_CTRL[126].IMS_PEND;

assign AI_CTRL[127].IMS_PEND = new_AI_CTRL[127].IMS_PEND;




//---------------------------------------------------------------------
// IMS_PEND_CLEAR Address Decode
logic  addr_decode_IMS_PEND_CLEAR;
logic  write_req_IMS_PEND_CLEAR;
always_comb begin
   addr_decode_IMS_PEND_CLEAR = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IMS_PEND_CLEAR_DECODE_ADDR) && req.valid ;
   write_req_IMS_PEND_CLEAR = IsMEMWr && addr_decode_IMS_PEND_CLEAR && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IMS_PEND_CLEAR.VEC x8 RW, using RW template.
logic [0:0] up_IMS_PEND_CLEAR_VEC;
always_comb begin
 up_IMS_PEND_CLEAR_VEC =
    ({1{write_req_IMS_PEND_CLEAR }} &
    be[0:0]);
end

logic [7:0] nxt_IMS_PEND_CLEAR_VEC;
always_comb begin
 nxt_IMS_PEND_CLEAR_VEC = write_data[7:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_IMS_PEND_CLEAR_VEC[0], nxt_IMS_PEND_CLEAR_VEC[7:0], IMS_PEND_CLEAR.VEC[7:0])

// ----------------------------------------------------------------------
// IMS_PEND_CLEAR.VALID x1 RW, using RW template.
logic [0:0] up_IMS_PEND_CLEAR_VALID;
always_comb begin
 up_IMS_PEND_CLEAR_VALID =
    ({1{write_req_IMS_PEND_CLEAR }} &
    be[1:1]);
end

logic [0:0] nxt_IMS_PEND_CLEAR_VALID;
always_comb begin
 nxt_IMS_PEND_CLEAR_VALID = write_data[8:8];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_IMS_PEND_CLEAR_VALID[0], nxt_IMS_PEND_CLEAR_VALID[0:0], IMS_PEND_CLEAR.VALID[0:0])

//---------------------------------------------------------------------
// WB_SCH_OUT_AFULL_AGITATE_CONTROL Address Decode
logic  addr_decode_WB_SCH_OUT_AFULL_AGITATE_CONTROL;
logic  write_req_WB_SCH_OUT_AFULL_AGITATE_CONTROL;
always_comb begin
   addr_decode_WB_SCH_OUT_AFULL_AGITATE_CONTROL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == WB_SCH_OUT_AFULL_AGITATE_CONTROL_DECODE_ADDR) && req.valid ;
   write_req_WB_SCH_OUT_AFULL_AGITATE_CONTROL = IsMEMWr && addr_decode_WB_SCH_OUT_AFULL_AGITATE_CONTROL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// WB_SCH_OUT_AFULL_AGITATE_CONTROL.MODE x2 RW, using RW template.
logic [0:0] up_WB_SCH_OUT_AFULL_AGITATE_CONTROL_MODE;
always_comb begin
 up_WB_SCH_OUT_AFULL_AGITATE_CONTROL_MODE =
    ({1{write_req_WB_SCH_OUT_AFULL_AGITATE_CONTROL }} &
    be[0:0]);
end

logic [1:0] nxt_WB_SCH_OUT_AFULL_AGITATE_CONTROL_MODE;
always_comb begin
 nxt_WB_SCH_OUT_AFULL_AGITATE_CONTROL_MODE = write_data[1:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 2'h0, up_WB_SCH_OUT_AFULL_AGITATE_CONTROL_MODE[0], nxt_WB_SCH_OUT_AFULL_AGITATE_CONTROL_MODE[1:0], WB_SCH_OUT_AFULL_AGITATE_CONTROL.MODE[1:0])

// ----------------------------------------------------------------------
// WB_SCH_OUT_AFULL_AGITATE_CONTROL.CTRL x8 RW, using RW template.
logic [3:0] up_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL;
always_comb begin
 up_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL =
    ({4{write_req_WB_SCH_OUT_AFULL_AGITATE_CONTROL }} &
    be[3:0]);
end

logic [29:0] nxt_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL;
always_comb begin
 nxt_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL = write_data[31:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 6'h0, up_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL[0], nxt_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL[5:0], WB_SCH_OUT_AFULL_AGITATE_CONTROL.CTRL[5:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL[1], nxt_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL[13:6], WB_SCH_OUT_AFULL_AGITATE_CONTROL.CTRL[13:6])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL[2], nxt_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL[21:14], WB_SCH_OUT_AFULL_AGITATE_CONTROL.CTRL[21:14])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL[3], nxt_WB_SCH_OUT_AFULL_AGITATE_CONTROL_CTRL[29:22], WB_SCH_OUT_AFULL_AGITATE_CONTROL.CTRL[29:22])

//---------------------------------------------------------------------
// IG_HCW_ENQ_AFULL_AGITATE_CONTROL Address Decode
logic  addr_decode_IG_HCW_ENQ_AFULL_AGITATE_CONTROL;
logic  write_req_IG_HCW_ENQ_AFULL_AGITATE_CONTROL;
always_comb begin
   addr_decode_IG_HCW_ENQ_AFULL_AGITATE_CONTROL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IG_HCW_ENQ_AFULL_AGITATE_CONTROL_DECODE_ADDR) && req.valid ;
   write_req_IG_HCW_ENQ_AFULL_AGITATE_CONTROL = IsMEMWr && addr_decode_IG_HCW_ENQ_AFULL_AGITATE_CONTROL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IG_HCW_ENQ_AFULL_AGITATE_CONTROL.MODE x2 RW, using RW template.
logic [0:0] up_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_MODE;
always_comb begin
 up_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_MODE =
    ({1{write_req_IG_HCW_ENQ_AFULL_AGITATE_CONTROL }} &
    be[0:0]);
end

logic [1:0] nxt_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_MODE;
always_comb begin
 nxt_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_MODE = write_data[1:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 2'h0, up_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_MODE[0], nxt_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_MODE[1:0], IG_HCW_ENQ_AFULL_AGITATE_CONTROL.MODE[1:0])

// ----------------------------------------------------------------------
// IG_HCW_ENQ_AFULL_AGITATE_CONTROL.CTRL x8 RW, using RW template.
logic [3:0] up_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL;
always_comb begin
 up_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL =
    ({4{write_req_IG_HCW_ENQ_AFULL_AGITATE_CONTROL }} &
    be[3:0]);
end

logic [29:0] nxt_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL;
always_comb begin
 nxt_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL = write_data[31:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 6'h0, up_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL[0], nxt_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL[5:0], IG_HCW_ENQ_AFULL_AGITATE_CONTROL.CTRL[5:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL[1], nxt_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL[13:6], IG_HCW_ENQ_AFULL_AGITATE_CONTROL.CTRL[13:6])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL[2], nxt_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL[21:14], IG_HCW_ENQ_AFULL_AGITATE_CONTROL.CTRL[21:14])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL[3], nxt_IG_HCW_ENQ_AFULL_AGITATE_CONTROL_CTRL[29:22], IG_HCW_ENQ_AFULL_AGITATE_CONTROL.CTRL[29:22])

//---------------------------------------------------------------------
// IG_HCW_ENQ_W_DB_AGITATE_CONTROL Address Decode
logic  addr_decode_IG_HCW_ENQ_W_DB_AGITATE_CONTROL;
logic  write_req_IG_HCW_ENQ_W_DB_AGITATE_CONTROL;
always_comb begin
   addr_decode_IG_HCW_ENQ_W_DB_AGITATE_CONTROL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == IG_HCW_ENQ_W_DB_AGITATE_CONTROL_DECODE_ADDR) && req.valid ;
   write_req_IG_HCW_ENQ_W_DB_AGITATE_CONTROL = IsMEMWr && addr_decode_IG_HCW_ENQ_W_DB_AGITATE_CONTROL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// IG_HCW_ENQ_W_DB_AGITATE_CONTROL.MODE x2 RW, using RW template.
logic [0:0] up_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_MODE;
always_comb begin
 up_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_MODE =
    ({1{write_req_IG_HCW_ENQ_W_DB_AGITATE_CONTROL }} &
    be[0:0]);
end

logic [1:0] nxt_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_MODE;
always_comb begin
 nxt_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_MODE = write_data[1:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 2'h0, up_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_MODE[0], nxt_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_MODE[1:0], IG_HCW_ENQ_W_DB_AGITATE_CONTROL.MODE[1:0])

// ----------------------------------------------------------------------
// IG_HCW_ENQ_W_DB_AGITATE_CONTROL.CTRL x8 RW, using RW template.
logic [3:0] up_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL;
always_comb begin
 up_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL =
    ({4{write_req_IG_HCW_ENQ_W_DB_AGITATE_CONTROL }} &
    be[3:0]);
end

logic [29:0] nxt_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL;
always_comb begin
 nxt_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL = write_data[31:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 6'h0, up_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL[0], nxt_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL[5:0], IG_HCW_ENQ_W_DB_AGITATE_CONTROL.CTRL[5:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL[1], nxt_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL[13:6], IG_HCW_ENQ_W_DB_AGITATE_CONTROL.CTRL[13:6])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL[2], nxt_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL[21:14], IG_HCW_ENQ_W_DB_AGITATE_CONTROL.CTRL[21:14])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL[3], nxt_IG_HCW_ENQ_W_DB_AGITATE_CONTROL_CTRL[29:22], IG_HCW_ENQ_W_DB_AGITATE_CONTROL.CTRL[29:22])

//---------------------------------------------------------------------
// EG_HCW_SCHED_DB_AGITATE_CONTROL Address Decode
logic  addr_decode_EG_HCW_SCHED_DB_AGITATE_CONTROL;
logic  write_req_EG_HCW_SCHED_DB_AGITATE_CONTROL;
always_comb begin
   addr_decode_EG_HCW_SCHED_DB_AGITATE_CONTROL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == EG_HCW_SCHED_DB_AGITATE_CONTROL_DECODE_ADDR) && req.valid ;
   write_req_EG_HCW_SCHED_DB_AGITATE_CONTROL = IsMEMWr && addr_decode_EG_HCW_SCHED_DB_AGITATE_CONTROL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// EG_HCW_SCHED_DB_AGITATE_CONTROL.MODE x2 RW, using RW template.
logic [0:0] up_EG_HCW_SCHED_DB_AGITATE_CONTROL_MODE;
always_comb begin
 up_EG_HCW_SCHED_DB_AGITATE_CONTROL_MODE =
    ({1{write_req_EG_HCW_SCHED_DB_AGITATE_CONTROL }} &
    be[0:0]);
end

logic [1:0] nxt_EG_HCW_SCHED_DB_AGITATE_CONTROL_MODE;
always_comb begin
 nxt_EG_HCW_SCHED_DB_AGITATE_CONTROL_MODE = write_data[1:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 2'h0, up_EG_HCW_SCHED_DB_AGITATE_CONTROL_MODE[0], nxt_EG_HCW_SCHED_DB_AGITATE_CONTROL_MODE[1:0], EG_HCW_SCHED_DB_AGITATE_CONTROL.MODE[1:0])

// ----------------------------------------------------------------------
// EG_HCW_SCHED_DB_AGITATE_CONTROL.CTRL x8 RW, using RW template.
logic [3:0] up_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL;
always_comb begin
 up_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL =
    ({4{write_req_EG_HCW_SCHED_DB_AGITATE_CONTROL }} &
    be[3:0]);
end

logic [29:0] nxt_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL;
always_comb begin
 nxt_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL = write_data[31:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 6'h0, up_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL[0], nxt_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL[5:0], EG_HCW_SCHED_DB_AGITATE_CONTROL.CTRL[5:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL[1], nxt_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL[13:6], EG_HCW_SCHED_DB_AGITATE_CONTROL.CTRL[13:6])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL[2], nxt_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL[21:14], EG_HCW_SCHED_DB_AGITATE_CONTROL.CTRL[21:14])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL[3], nxt_EG_HCW_SCHED_DB_AGITATE_CONTROL_CTRL[29:22], EG_HCW_SCHED_DB_AGITATE_CONTROL.CTRL[29:22])

//---------------------------------------------------------------------
// AL_IMS_MSIX_DB_AGITATE_CONTROL Address Decode
logic  addr_decode_AL_IMS_MSIX_DB_AGITATE_CONTROL;
logic  write_req_AL_IMS_MSIX_DB_AGITATE_CONTROL;
always_comb begin
   addr_decode_AL_IMS_MSIX_DB_AGITATE_CONTROL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AL_IMS_MSIX_DB_AGITATE_CONTROL_DECODE_ADDR) && req.valid ;
   write_req_AL_IMS_MSIX_DB_AGITATE_CONTROL = IsMEMWr && addr_decode_AL_IMS_MSIX_DB_AGITATE_CONTROL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// AL_IMS_MSIX_DB_AGITATE_CONTROL.MODE x2 RW, using RW template.
logic [0:0] up_AL_IMS_MSIX_DB_AGITATE_CONTROL_MODE;
always_comb begin
 up_AL_IMS_MSIX_DB_AGITATE_CONTROL_MODE =
    ({1{write_req_AL_IMS_MSIX_DB_AGITATE_CONTROL }} &
    be[0:0]);
end

logic [1:0] nxt_AL_IMS_MSIX_DB_AGITATE_CONTROL_MODE;
always_comb begin
 nxt_AL_IMS_MSIX_DB_AGITATE_CONTROL_MODE = write_data[1:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 2'h0, up_AL_IMS_MSIX_DB_AGITATE_CONTROL_MODE[0], nxt_AL_IMS_MSIX_DB_AGITATE_CONTROL_MODE[1:0], AL_IMS_MSIX_DB_AGITATE_CONTROL.MODE[1:0])

// ----------------------------------------------------------------------
// AL_IMS_MSIX_DB_AGITATE_CONTROL.CTRL x8 RW, using RW template.
logic [3:0] up_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL;
always_comb begin
 up_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL =
    ({4{write_req_AL_IMS_MSIX_DB_AGITATE_CONTROL }} &
    be[3:0]);
end

logic [29:0] nxt_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL;
always_comb begin
 nxt_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL = write_data[31:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 6'h0, up_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL[0], nxt_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL[5:0], AL_IMS_MSIX_DB_AGITATE_CONTROL.CTRL[5:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL[1], nxt_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL[13:6], AL_IMS_MSIX_DB_AGITATE_CONTROL.CTRL[13:6])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL[2], nxt_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL[21:14], AL_IMS_MSIX_DB_AGITATE_CONTROL.CTRL[21:14])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL[3], nxt_AL_IMS_MSIX_DB_AGITATE_CONTROL_CTRL[29:22], AL_IMS_MSIX_DB_AGITATE_CONTROL.CTRL[29:22])

//---------------------------------------------------------------------
// AL_CWD_ALARM_DB_AGITATE_CONTROL Address Decode
logic  addr_decode_AL_CWD_ALARM_DB_AGITATE_CONTROL;
logic  write_req_AL_CWD_ALARM_DB_AGITATE_CONTROL;
always_comb begin
   addr_decode_AL_CWD_ALARM_DB_AGITATE_CONTROL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AL_CWD_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR) && req.valid ;
   write_req_AL_CWD_ALARM_DB_AGITATE_CONTROL = IsMEMWr && addr_decode_AL_CWD_ALARM_DB_AGITATE_CONTROL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// AL_CWD_ALARM_DB_AGITATE_CONTROL.MODE x2 RW, using RW template.
logic [0:0] up_AL_CWD_ALARM_DB_AGITATE_CONTROL_MODE;
always_comb begin
 up_AL_CWD_ALARM_DB_AGITATE_CONTROL_MODE =
    ({1{write_req_AL_CWD_ALARM_DB_AGITATE_CONTROL }} &
    be[0:0]);
end

logic [1:0] nxt_AL_CWD_ALARM_DB_AGITATE_CONTROL_MODE;
always_comb begin
 nxt_AL_CWD_ALARM_DB_AGITATE_CONTROL_MODE = write_data[1:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 2'h0, up_AL_CWD_ALARM_DB_AGITATE_CONTROL_MODE[0], nxt_AL_CWD_ALARM_DB_AGITATE_CONTROL_MODE[1:0], AL_CWD_ALARM_DB_AGITATE_CONTROL.MODE[1:0])

// ----------------------------------------------------------------------
// AL_CWD_ALARM_DB_AGITATE_CONTROL.CTRL x8 RW, using RW template.
logic [3:0] up_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL;
always_comb begin
 up_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL =
    ({4{write_req_AL_CWD_ALARM_DB_AGITATE_CONTROL }} &
    be[3:0]);
end

logic [29:0] nxt_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL;
always_comb begin
 nxt_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL = write_data[31:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 6'h0, up_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL[0], nxt_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL[5:0], AL_CWD_ALARM_DB_AGITATE_CONTROL.CTRL[5:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL[1], nxt_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL[13:6], AL_CWD_ALARM_DB_AGITATE_CONTROL.CTRL[13:6])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL[2], nxt_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL[21:14], AL_CWD_ALARM_DB_AGITATE_CONTROL.CTRL[21:14])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL[3], nxt_AL_CWD_ALARM_DB_AGITATE_CONTROL_CTRL[29:22], AL_CWD_ALARM_DB_AGITATE_CONTROL.CTRL[29:22])

//---------------------------------------------------------------------
// AL_SIF_ALARM_AFULL_AGITATE_CONTROL Address Decode
logic  addr_decode_AL_SIF_ALARM_AFULL_AGITATE_CONTROL;
logic  write_req_AL_SIF_ALARM_AFULL_AGITATE_CONTROL;
always_comb begin
   addr_decode_AL_SIF_ALARM_AFULL_AGITATE_CONTROL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AL_SIF_ALARM_AFULL_AGITATE_CONTROL_DECODE_ADDR) && req.valid ;
   write_req_AL_SIF_ALARM_AFULL_AGITATE_CONTROL = IsMEMWr && addr_decode_AL_SIF_ALARM_AFULL_AGITATE_CONTROL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// AL_SIF_ALARM_AFULL_AGITATE_CONTROL.MODE x2 RW, using RW template.
logic [0:0] up_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_MODE;
always_comb begin
 up_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_MODE =
    ({1{write_req_AL_SIF_ALARM_AFULL_AGITATE_CONTROL }} &
    be[0:0]);
end

logic [1:0] nxt_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_MODE;
always_comb begin
 nxt_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_MODE = write_data[1:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 2'h0, up_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_MODE[0], nxt_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_MODE[1:0], AL_SIF_ALARM_AFULL_AGITATE_CONTROL.MODE[1:0])

// ----------------------------------------------------------------------
// AL_SIF_ALARM_AFULL_AGITATE_CONTROL.CTRL x8 RW, using RW template.
logic [3:0] up_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL;
always_comb begin
 up_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL =
    ({4{write_req_AL_SIF_ALARM_AFULL_AGITATE_CONTROL }} &
    be[3:0]);
end

logic [29:0] nxt_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL;
always_comb begin
 nxt_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL = write_data[31:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 6'h0, up_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL[0], nxt_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL[5:0], AL_SIF_ALARM_AFULL_AGITATE_CONTROL.CTRL[5:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL[1], nxt_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL[13:6], AL_SIF_ALARM_AFULL_AGITATE_CONTROL.CTRL[13:6])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL[2], nxt_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL[21:14], AL_SIF_ALARM_AFULL_AGITATE_CONTROL.CTRL[21:14])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL[3], nxt_AL_SIF_ALARM_AFULL_AGITATE_CONTROL_CTRL[29:22], AL_SIF_ALARM_AFULL_AGITATE_CONTROL.CTRL[29:22])

//---------------------------------------------------------------------
// AL_HQM_ALARM_DB_AGITATE_CONTROL Address Decode
logic  addr_decode_AL_HQM_ALARM_DB_AGITATE_CONTROL;
logic  write_req_AL_HQM_ALARM_DB_AGITATE_CONTROL;
always_comb begin
   addr_decode_AL_HQM_ALARM_DB_AGITATE_CONTROL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == AL_HQM_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR) && req.valid ;
   write_req_AL_HQM_ALARM_DB_AGITATE_CONTROL = IsMEMWr && addr_decode_AL_HQM_ALARM_DB_AGITATE_CONTROL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// AL_HQM_ALARM_DB_AGITATE_CONTROL.MODE x2 RW, using RW template.
logic [0:0] up_AL_HQM_ALARM_DB_AGITATE_CONTROL_MODE;
always_comb begin
 up_AL_HQM_ALARM_DB_AGITATE_CONTROL_MODE =
    ({1{write_req_AL_HQM_ALARM_DB_AGITATE_CONTROL }} &
    be[0:0]);
end

logic [1:0] nxt_AL_HQM_ALARM_DB_AGITATE_CONTROL_MODE;
always_comb begin
 nxt_AL_HQM_ALARM_DB_AGITATE_CONTROL_MODE = write_data[1:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 2'h0, up_AL_HQM_ALARM_DB_AGITATE_CONTROL_MODE[0], nxt_AL_HQM_ALARM_DB_AGITATE_CONTROL_MODE[1:0], AL_HQM_ALARM_DB_AGITATE_CONTROL.MODE[1:0])

// ----------------------------------------------------------------------
// AL_HQM_ALARM_DB_AGITATE_CONTROL.CTRL x8 RW, using RW template.
logic [3:0] up_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL;
always_comb begin
 up_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL =
    ({4{write_req_AL_HQM_ALARM_DB_AGITATE_CONTROL }} &
    be[3:0]);
end

logic [29:0] nxt_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL;
always_comb begin
 nxt_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL = write_data[31:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 6'h0, up_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL[0], nxt_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL[5:0], AL_HQM_ALARM_DB_AGITATE_CONTROL.CTRL[5:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL[1], nxt_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL[13:6], AL_HQM_ALARM_DB_AGITATE_CONTROL.CTRL[13:6])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL[2], nxt_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL[21:14], AL_HQM_ALARM_DB_AGITATE_CONTROL.CTRL[21:14])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL[3], nxt_AL_HQM_ALARM_DB_AGITATE_CONTROL_CTRL[29:22], AL_HQM_ALARM_DB_AGITATE_CONTROL.CTRL[29:22])

//---------------------------------------------------------------------
// ECC_CTL Address Decode
logic  addr_decode_ECC_CTL;
logic  write_req_ECC_CTL;
always_comb begin
   addr_decode_ECC_CTL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == ECC_CTL_DECODE_ADDR) && req.valid ;
   write_req_ECC_CTL = IsMEMWr && addr_decode_ECC_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// ECC_CTL.HCW_ENQ_ECC_ENABLE x1 RW, using RW template.
logic [0:0] up_ECC_CTL_HCW_ENQ_ECC_ENABLE;
always_comb begin
 up_ECC_CTL_HCW_ENQ_ECC_ENABLE =
    ({1{write_req_ECC_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_ECC_CTL_HCW_ENQ_ECC_ENABLE;
always_comb begin
 nxt_ECC_CTL_HCW_ENQ_ECC_ENABLE = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_ECC_CTL_HCW_ENQ_ECC_ENABLE[0], nxt_ECC_CTL_HCW_ENQ_ECC_ENABLE[0:0], ECC_CTL.HCW_ENQ_ECC_ENABLE[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.SCH_WB_ECC_ENABLE x1 RW, using RW template.
logic [0:0] up_ECC_CTL_SCH_WB_ECC_ENABLE;
always_comb begin
 up_ECC_CTL_SCH_WB_ECC_ENABLE =
    ({1{write_req_ECC_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_ECC_CTL_SCH_WB_ECC_ENABLE;
always_comb begin
 nxt_ECC_CTL_SCH_WB_ECC_ENABLE = write_data[2:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_ECC_CTL_SCH_WB_ECC_ENABLE[0], nxt_ECC_CTL_SCH_WB_ECC_ENABLE[0:0], ECC_CTL.SCH_WB_ECC_ENABLE[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.LUT_ECC_ENABLE x1 RW, using RW template.
logic [0:0] up_ECC_CTL_LUT_ECC_ENABLE;
always_comb begin
 up_ECC_CTL_LUT_ECC_ENABLE =
    ({1{write_req_ECC_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_ECC_CTL_LUT_ECC_ENABLE;
always_comb begin
 nxt_ECC_CTL_LUT_ECC_ENABLE = write_data[3:3];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_ECC_CTL_LUT_ECC_ENABLE[0], nxt_ECC_CTL_LUT_ECC_ENABLE[0:0], ECC_CTL.LUT_ECC_ENABLE[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.WRITE_BAD_SB_ECC x1 RW, using RW template.
logic [0:0] up_ECC_CTL_WRITE_BAD_SB_ECC;
always_comb begin
 up_ECC_CTL_WRITE_BAD_SB_ECC =
    ({1{write_req_ECC_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_ECC_CTL_WRITE_BAD_SB_ECC;
always_comb begin
 nxt_ECC_CTL_WRITE_BAD_SB_ECC = write_data[4:4];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_WRITE_BAD_SB_ECC[0], nxt_ECC_CTL_WRITE_BAD_SB_ECC[0:0], ECC_CTL.WRITE_BAD_SB_ECC[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.WRITE_BAD_MB_ECC x1 RW, using RW template.
logic [0:0] up_ECC_CTL_WRITE_BAD_MB_ECC;
always_comb begin
 up_ECC_CTL_WRITE_BAD_MB_ECC =
    ({1{write_req_ECC_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_ECC_CTL_WRITE_BAD_MB_ECC;
always_comb begin
 nxt_ECC_CTL_WRITE_BAD_MB_ECC = write_data[5:5];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_WRITE_BAD_MB_ECC[0], nxt_ECC_CTL_WRITE_BAD_MB_ECC[0:0], ECC_CTL.WRITE_BAD_MB_ECC[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_MB_ECC_HCW_ENQ_LS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_MB_ECC_HCW_ENQ_LS;
always_comb begin
 up_ECC_CTL_INJ_MB_ECC_HCW_ENQ_LS =
    ({1{write_req_ECC_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_ECC_CTL_INJ_MB_ECC_HCW_ENQ_LS;
always_comb begin
 nxt_ECC_CTL_INJ_MB_ECC_HCW_ENQ_LS = write_data[12:12];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_MB_ECC_HCW_ENQ_LS[0], nxt_ECC_CTL_INJ_MB_ECC_HCW_ENQ_LS[0:0], ECC_CTL.INJ_MB_ECC_HCW_ENQ_LS[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_SB_ECC_HCW_ENQ_LS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_SB_ECC_HCW_ENQ_LS;
always_comb begin
 up_ECC_CTL_INJ_SB_ECC_HCW_ENQ_LS =
    ({1{write_req_ECC_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_ECC_CTL_INJ_SB_ECC_HCW_ENQ_LS;
always_comb begin
 nxt_ECC_CTL_INJ_SB_ECC_HCW_ENQ_LS = write_data[13:13];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_SB_ECC_HCW_ENQ_LS[0], nxt_ECC_CTL_INJ_SB_ECC_HCW_ENQ_LS[0:0], ECC_CTL.INJ_SB_ECC_HCW_ENQ_LS[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_MB_ECC_HCW_ENQ_MS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_MB_ECC_HCW_ENQ_MS;
always_comb begin
 up_ECC_CTL_INJ_MB_ECC_HCW_ENQ_MS =
    ({1{write_req_ECC_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_ECC_CTL_INJ_MB_ECC_HCW_ENQ_MS;
always_comb begin
 nxt_ECC_CTL_INJ_MB_ECC_HCW_ENQ_MS = write_data[14:14];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_MB_ECC_HCW_ENQ_MS[0], nxt_ECC_CTL_INJ_MB_ECC_HCW_ENQ_MS[0:0], ECC_CTL.INJ_MB_ECC_HCW_ENQ_MS[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_SB_ECC_HCW_ENQ_MS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_SB_ECC_HCW_ENQ_MS;
always_comb begin
 up_ECC_CTL_INJ_SB_ECC_HCW_ENQ_MS =
    ({1{write_req_ECC_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_ECC_CTL_INJ_SB_ECC_HCW_ENQ_MS;
always_comb begin
 nxt_ECC_CTL_INJ_SB_ECC_HCW_ENQ_MS = write_data[15:15];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_SB_ECC_HCW_ENQ_MS[0], nxt_ECC_CTL_INJ_SB_ECC_HCW_ENQ_MS[0:0], ECC_CTL.INJ_SB_ECC_HCW_ENQ_MS[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_MB_ECC_WBUF_W0_LS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_MB_ECC_WBUF_W0_LS;
always_comb begin
 up_ECC_CTL_INJ_MB_ECC_WBUF_W0_LS =
    ({1{write_req_ECC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_ECC_CTL_INJ_MB_ECC_WBUF_W0_LS;
always_comb begin
 nxt_ECC_CTL_INJ_MB_ECC_WBUF_W0_LS = write_data[16:16];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_MB_ECC_WBUF_W0_LS[0], nxt_ECC_CTL_INJ_MB_ECC_WBUF_W0_LS[0:0], ECC_CTL.INJ_MB_ECC_WBUF_W0_LS[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_SB_ECC_WBUF_W0_LS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_SB_ECC_WBUF_W0_LS;
always_comb begin
 up_ECC_CTL_INJ_SB_ECC_WBUF_W0_LS =
    ({1{write_req_ECC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_ECC_CTL_INJ_SB_ECC_WBUF_W0_LS;
always_comb begin
 nxt_ECC_CTL_INJ_SB_ECC_WBUF_W0_LS = write_data[17:17];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_SB_ECC_WBUF_W0_LS[0], nxt_ECC_CTL_INJ_SB_ECC_WBUF_W0_LS[0:0], ECC_CTL.INJ_SB_ECC_WBUF_W0_LS[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_MB_ECC_WBUF_W0_MS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_MB_ECC_WBUF_W0_MS;
always_comb begin
 up_ECC_CTL_INJ_MB_ECC_WBUF_W0_MS =
    ({1{write_req_ECC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_ECC_CTL_INJ_MB_ECC_WBUF_W0_MS;
always_comb begin
 nxt_ECC_CTL_INJ_MB_ECC_WBUF_W0_MS = write_data[18:18];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_MB_ECC_WBUF_W0_MS[0], nxt_ECC_CTL_INJ_MB_ECC_WBUF_W0_MS[0:0], ECC_CTL.INJ_MB_ECC_WBUF_W0_MS[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_SB_ECC_WBUF_W0_MS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_SB_ECC_WBUF_W0_MS;
always_comb begin
 up_ECC_CTL_INJ_SB_ECC_WBUF_W0_MS =
    ({1{write_req_ECC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_ECC_CTL_INJ_SB_ECC_WBUF_W0_MS;
always_comb begin
 nxt_ECC_CTL_INJ_SB_ECC_WBUF_W0_MS = write_data[19:19];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_SB_ECC_WBUF_W0_MS[0], nxt_ECC_CTL_INJ_SB_ECC_WBUF_W0_MS[0:0], ECC_CTL.INJ_SB_ECC_WBUF_W0_MS[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_MB_ECC_WBUF_W1_LS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_MB_ECC_WBUF_W1_LS;
always_comb begin
 up_ECC_CTL_INJ_MB_ECC_WBUF_W1_LS =
    ({1{write_req_ECC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_ECC_CTL_INJ_MB_ECC_WBUF_W1_LS;
always_comb begin
 nxt_ECC_CTL_INJ_MB_ECC_WBUF_W1_LS = write_data[20:20];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_MB_ECC_WBUF_W1_LS[0], nxt_ECC_CTL_INJ_MB_ECC_WBUF_W1_LS[0:0], ECC_CTL.INJ_MB_ECC_WBUF_W1_LS[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_SB_ECC_WBUF_W1_LS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_SB_ECC_WBUF_W1_LS;
always_comb begin
 up_ECC_CTL_INJ_SB_ECC_WBUF_W1_LS =
    ({1{write_req_ECC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_ECC_CTL_INJ_SB_ECC_WBUF_W1_LS;
always_comb begin
 nxt_ECC_CTL_INJ_SB_ECC_WBUF_W1_LS = write_data[21:21];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_SB_ECC_WBUF_W1_LS[0], nxt_ECC_CTL_INJ_SB_ECC_WBUF_W1_LS[0:0], ECC_CTL.INJ_SB_ECC_WBUF_W1_LS[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_MB_ECC_WBUF_W1_MS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_MB_ECC_WBUF_W1_MS;
always_comb begin
 up_ECC_CTL_INJ_MB_ECC_WBUF_W1_MS =
    ({1{write_req_ECC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_ECC_CTL_INJ_MB_ECC_WBUF_W1_MS;
always_comb begin
 nxt_ECC_CTL_INJ_MB_ECC_WBUF_W1_MS = write_data[22:22];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_MB_ECC_WBUF_W1_MS[0], nxt_ECC_CTL_INJ_MB_ECC_WBUF_W1_MS[0:0], ECC_CTL.INJ_MB_ECC_WBUF_W1_MS[0:0])

// ----------------------------------------------------------------------
// ECC_CTL.INJ_SB_ECC_WBUF_W1_MS x1 RW, using RW template.
logic [0:0] up_ECC_CTL_INJ_SB_ECC_WBUF_W1_MS;
always_comb begin
 up_ECC_CTL_INJ_SB_ECC_WBUF_W1_MS =
    ({1{write_req_ECC_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_ECC_CTL_INJ_SB_ECC_WBUF_W1_MS;
always_comb begin
 nxt_ECC_CTL_INJ_SB_ECC_WBUF_W1_MS = write_data[23:23];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ECC_CTL_INJ_SB_ECC_WBUF_W1_MS[0], nxt_ECC_CTL_INJ_SB_ECC_WBUF_W1_MS[0:0], ECC_CTL.INJ_SB_ECC_WBUF_W1_MS[0:0])

//---------------------------------------------------------------------
// PARITY_CTL Address Decode
logic  addr_decode_PARITY_CTL;
logic  write_req_PARITY_CTL;
always_comb begin
   addr_decode_PARITY_CTL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == PARITY_CTL_DECODE_ADDR) && req.valid ;
   write_req_PARITY_CTL = IsMEMWr && addr_decode_PARITY_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// PARITY_CTL.WRITE_BAD_PARITY x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_WRITE_BAD_PARITY;
always_comb begin
 up_PARITY_CTL_WRITE_BAD_PARITY =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_WRITE_BAD_PARITY;
always_comb begin
 nxt_PARITY_CTL_WRITE_BAD_PARITY = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_WRITE_BAD_PARITY[0], nxt_PARITY_CTL_WRITE_BAD_PARITY[0:0], PARITY_CTL.WRITE_BAD_PARITY[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.ALARM_PAR_OFF x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_ALARM_PAR_OFF;
always_comb begin
 up_PARITY_CTL_ALARM_PAR_OFF =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_ALARM_PAR_OFF;
always_comb begin
 nxt_PARITY_CTL_ALARM_PAR_OFF = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_ALARM_PAR_OFF[0], nxt_PARITY_CTL_ALARM_PAR_OFF[0:0], PARITY_CTL.ALARM_PAR_OFF[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.EGRESS_PAR_OFF x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_EGRESS_PAR_OFF;
always_comb begin
 up_PARITY_CTL_EGRESS_PAR_OFF =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_EGRESS_PAR_OFF;
always_comb begin
 nxt_PARITY_CTL_EGRESS_PAR_OFF = write_data[2:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_EGRESS_PAR_OFF[0], nxt_PARITY_CTL_EGRESS_PAR_OFF[0:0], PARITY_CTL.EGRESS_PAR_OFF[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INGRESS_PAR_OFF x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INGRESS_PAR_OFF;
always_comb begin
 up_PARITY_CTL_INGRESS_PAR_OFF =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_INGRESS_PAR_OFF;
always_comb begin
 nxt_PARITY_CTL_INGRESS_PAR_OFF = write_data[3:3];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INGRESS_PAR_OFF[0], nxt_PARITY_CTL_INGRESS_PAR_OFF[0:0], PARITY_CTL.INGRESS_PAR_OFF[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.WBUF_PAR_OFF x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_WBUF_PAR_OFF;
always_comb begin
 up_PARITY_CTL_WBUF_PAR_OFF =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_WBUF_PAR_OFF;
always_comb begin
 nxt_PARITY_CTL_WBUF_PAR_OFF = write_data[4:4];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_WBUF_PAR_OFF[0], nxt_PARITY_CTL_WBUF_PAR_OFF[0:0], PARITY_CTL.WBUF_PAR_OFF[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_PAR_ERR_SCH_DATA x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_PAR_ERR_SCH_DATA;
always_comb begin
 up_PARITY_CTL_INJ_PAR_ERR_SCH_DATA =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_INJ_PAR_ERR_SCH_DATA;
always_comb begin
 nxt_PARITY_CTL_INJ_PAR_ERR_SCH_DATA = write_data[5:5];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_PAR_ERR_SCH_DATA[0], nxt_PARITY_CTL_INJ_PAR_ERR_SCH_DATA[0:0], PARITY_CTL.INJ_PAR_ERR_SCH_DATA[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_PAR_ERR_SCH_REQ x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_PAR_ERR_SCH_REQ;
always_comb begin
 up_PARITY_CTL_INJ_PAR_ERR_SCH_REQ =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_INJ_PAR_ERR_SCH_REQ;
always_comb begin
 nxt_PARITY_CTL_INJ_PAR_ERR_SCH_REQ = write_data[6:6];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_PAR_ERR_SCH_REQ[0], nxt_PARITY_CTL_INJ_PAR_ERR_SCH_REQ[0:0], PARITY_CTL.INJ_PAR_ERR_SCH_REQ[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_PAR_ERR_HCW_PORT x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_PAR_ERR_HCW_PORT;
always_comb begin
 up_PARITY_CTL_INJ_PAR_ERR_HCW_PORT =
    ({1{write_req_PARITY_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_PARITY_CTL_INJ_PAR_ERR_HCW_PORT;
always_comb begin
 nxt_PARITY_CTL_INJ_PAR_ERR_HCW_PORT = write_data[7:7];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_PAR_ERR_HCW_PORT[0], nxt_PARITY_CTL_INJ_PAR_ERR_HCW_PORT[0:0], PARITY_CTL.INJ_PAR_ERR_HCW_PORT[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_PAR_ERR_SCH_OUT x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_PAR_ERR_SCH_OUT;
always_comb begin
 up_PARITY_CTL_INJ_PAR_ERR_SCH_OUT =
    ({1{write_req_PARITY_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_PARITY_CTL_INJ_PAR_ERR_SCH_OUT;
always_comb begin
 nxt_PARITY_CTL_INJ_PAR_ERR_SCH_OUT = write_data[8:8];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_PAR_ERR_SCH_OUT[0], nxt_PARITY_CTL_INJ_PAR_ERR_SCH_OUT[0:0], PARITY_CTL.INJ_PAR_ERR_SCH_OUT[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_PAR_ERR_VF_SYND x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_PAR_ERR_VF_SYND;
always_comb begin
 up_PARITY_CTL_INJ_PAR_ERR_VF_SYND =
    ({1{write_req_PARITY_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_PARITY_CTL_INJ_PAR_ERR_VF_SYND;
always_comb begin
 nxt_PARITY_CTL_INJ_PAR_ERR_VF_SYND = write_data[9:9];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_PAR_ERR_VF_SYND[0], nxt_PARITY_CTL_INJ_PAR_ERR_VF_SYND[0:0], PARITY_CTL.INJ_PAR_ERR_VF_SYND[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.EGRESS_RES_OFF x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_EGRESS_RES_OFF;
always_comb begin
 up_PARITY_CTL_EGRESS_RES_OFF =
    ({1{write_req_PARITY_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_PARITY_CTL_EGRESS_RES_OFF;
always_comb begin
 nxt_PARITY_CTL_EGRESS_RES_OFF = write_data[10:10];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_EGRESS_RES_OFF[0], nxt_PARITY_CTL_EGRESS_RES_OFF[0:0], PARITY_CTL.EGRESS_RES_OFF[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.WBUF_RES_OFF x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_WBUF_RES_OFF;
always_comb begin
 up_PARITY_CTL_WBUF_RES_OFF =
    ({1{write_req_PARITY_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_PARITY_CTL_WBUF_RES_OFF;
always_comb begin
 nxt_PARITY_CTL_WBUF_RES_OFF = write_data[11:11];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_WBUF_RES_OFF[0], nxt_PARITY_CTL_WBUF_RES_OFF[0:0], PARITY_CTL.WBUF_RES_OFF[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_RES_ERR_SCH_REQ x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_RES_ERR_SCH_REQ;
always_comb begin
 up_PARITY_CTL_INJ_RES_ERR_SCH_REQ =
    ({1{write_req_PARITY_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_PARITY_CTL_INJ_RES_ERR_SCH_REQ;
always_comb begin
 nxt_PARITY_CTL_INJ_RES_ERR_SCH_REQ = write_data[12:12];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_RES_ERR_SCH_REQ[0], nxt_PARITY_CTL_INJ_RES_ERR_SCH_REQ[0:0], PARITY_CTL.INJ_RES_ERR_SCH_REQ[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_PAR_ERR_SCH_PL x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_PAR_ERR_SCH_PL;
always_comb begin
 up_PARITY_CTL_INJ_PAR_ERR_SCH_PL =
    ({1{write_req_PARITY_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_PARITY_CTL_INJ_PAR_ERR_SCH_PL;
always_comb begin
 nxt_PARITY_CTL_INJ_PAR_ERR_SCH_PL = write_data[13:13];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_PAR_ERR_SCH_PL[0], nxt_PARITY_CTL_INJ_PAR_ERR_SCH_PL[0:0], PARITY_CTL.INJ_PAR_ERR_SCH_PL[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_PAR_ERR_SCH x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_PAR_ERR_SCH;
always_comb begin
 up_PARITY_CTL_INJ_PAR_ERR_SCH =
    ({1{write_req_PARITY_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_PARITY_CTL_INJ_PAR_ERR_SCH;
always_comb begin
 nxt_PARITY_CTL_INJ_PAR_ERR_SCH = write_data[14:14];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_PAR_ERR_SCH[0], nxt_PARITY_CTL_INJ_PAR_ERR_SCH[0:0], PARITY_CTL.INJ_PAR_ERR_SCH[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_RES_ERR_SCH x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_RES_ERR_SCH;
always_comb begin
 up_PARITY_CTL_INJ_RES_ERR_SCH =
    ({1{write_req_PARITY_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_PARITY_CTL_INJ_RES_ERR_SCH;
always_comb begin
 nxt_PARITY_CTL_INJ_RES_ERR_SCH = write_data[15:15];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_RES_ERR_SCH[0], nxt_PARITY_CTL_INJ_RES_ERR_SCH[0:0], PARITY_CTL.INJ_RES_ERR_SCH[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_PAR_ERR_INT x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_PAR_ERR_INT;
always_comb begin
 up_PARITY_CTL_INJ_PAR_ERR_INT =
    ({1{write_req_PARITY_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_PARITY_CTL_INJ_PAR_ERR_INT;
always_comb begin
 nxt_PARITY_CTL_INJ_PAR_ERR_INT = write_data[16:16];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_PAR_ERR_INT[0], nxt_PARITY_CTL_INJ_PAR_ERR_INT[0:0], PARITY_CTL.INJ_PAR_ERR_INT[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_RES_ERR_INT x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_RES_ERR_INT;
always_comb begin
 up_PARITY_CTL_INJ_RES_ERR_INT =
    ({1{write_req_PARITY_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_PARITY_CTL_INJ_RES_ERR_INT;
always_comb begin
 nxt_PARITY_CTL_INJ_RES_ERR_INT = write_data[17:17];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_RES_ERR_INT[0], nxt_PARITY_CTL_INJ_RES_ERR_INT[0:0], PARITY_CTL.INJ_RES_ERR_INT[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.EGRESS_INT_PAR_OFF x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_EGRESS_INT_PAR_OFF;
always_comb begin
 up_PARITY_CTL_EGRESS_INT_PAR_OFF =
    ({1{write_req_PARITY_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_PARITY_CTL_EGRESS_INT_PAR_OFF;
always_comb begin
 nxt_PARITY_CTL_EGRESS_INT_PAR_OFF = write_data[18:18];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_EGRESS_INT_PAR_OFF[0], nxt_PARITY_CTL_EGRESS_INT_PAR_OFF[0:0], PARITY_CTL.EGRESS_INT_PAR_OFF[0:0])

// ----------------------------------------------------------------------
// PARITY_CTL.INJ_PAR_ERR_SCH_INT x1 RW, using RW template.
logic [0:0] up_PARITY_CTL_INJ_PAR_ERR_SCH_INT;
always_comb begin
 up_PARITY_CTL_INJ_PAR_ERR_SCH_INT =
    ({1{write_req_PARITY_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_PARITY_CTL_INJ_PAR_ERR_SCH_INT;
always_comb begin
 nxt_PARITY_CTL_INJ_PAR_ERR_SCH_INT = write_data[19:19];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_PARITY_CTL_INJ_PAR_ERR_SCH_INT[0], nxt_PARITY_CTL_INJ_PAR_ERR_SCH_INT[0:0], PARITY_CTL.INJ_PAR_ERR_SCH_INT[0:0])

//---------------------------------------------------------------------
// WRITE_BUFFER_CTL Address Decode
logic  addr_decode_WRITE_BUFFER_CTL;
logic  write_req_WRITE_BUFFER_CTL;
always_comb begin
   addr_decode_WRITE_BUFFER_CTL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == WRITE_BUFFER_CTL_DECODE_ADDR) && req.valid ;
   write_req_WRITE_BUFFER_CTL = IsMEMWr && addr_decode_WRITE_BUFFER_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// WRITE_BUFFER_CTL.IGNORE_DIR_WB_V x1 RW, using RW template.
logic [0:0] up_WRITE_BUFFER_CTL_IGNORE_DIR_WB_V;
always_comb begin
 up_WRITE_BUFFER_CTL_IGNORE_DIR_WB_V =
    ({1{write_req_WRITE_BUFFER_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_WRITE_BUFFER_CTL_IGNORE_DIR_WB_V;
always_comb begin
 nxt_WRITE_BUFFER_CTL_IGNORE_DIR_WB_V = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_WRITE_BUFFER_CTL_IGNORE_DIR_WB_V[0], nxt_WRITE_BUFFER_CTL_IGNORE_DIR_WB_V[0:0], WRITE_BUFFER_CTL.IGNORE_DIR_WB_V[0:0])

// ----------------------------------------------------------------------
// WRITE_BUFFER_CTL.WRITE_SINGLE_BEATS x1 RW, using RW template.
logic [0:0] up_WRITE_BUFFER_CTL_WRITE_SINGLE_BEATS;
always_comb begin
 up_WRITE_BUFFER_CTL_WRITE_SINGLE_BEATS =
    ({1{write_req_WRITE_BUFFER_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_WRITE_BUFFER_CTL_WRITE_SINGLE_BEATS;
always_comb begin
 nxt_WRITE_BUFFER_CTL_WRITE_SINGLE_BEATS = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_WRITE_BUFFER_CTL_WRITE_SINGLE_BEATS[0], nxt_WRITE_BUFFER_CTL_WRITE_SINGLE_BEATS[0:0], WRITE_BUFFER_CTL.WRITE_SINGLE_BEATS[0:0])

// ----------------------------------------------------------------------
// WRITE_BUFFER_CTL.HOLD_SCH_SM x1 RW, using RW template.
logic [0:0] up_WRITE_BUFFER_CTL_HOLD_SCH_SM;
always_comb begin
 up_WRITE_BUFFER_CTL_HOLD_SCH_SM =
    ({1{write_req_WRITE_BUFFER_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_WRITE_BUFFER_CTL_HOLD_SCH_SM;
always_comb begin
 nxt_WRITE_BUFFER_CTL_HOLD_SCH_SM = write_data[2:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_WRITE_BUFFER_CTL_HOLD_SCH_SM[0], nxt_WRITE_BUFFER_CTL_HOLD_SCH_SM[0:0], WRITE_BUFFER_CTL.HOLD_SCH_SM[0:0])

// ----------------------------------------------------------------------
// WRITE_BUFFER_CTL.IGNORE_LDB_WB_V x1 RW, using RW template.
logic [0:0] up_WRITE_BUFFER_CTL_IGNORE_LDB_WB_V;
always_comb begin
 up_WRITE_BUFFER_CTL_IGNORE_LDB_WB_V =
    ({1{write_req_WRITE_BUFFER_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_WRITE_BUFFER_CTL_IGNORE_LDB_WB_V;
always_comb begin
 nxt_WRITE_BUFFER_CTL_IGNORE_LDB_WB_V = write_data[3:3];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_WRITE_BUFFER_CTL_IGNORE_LDB_WB_V[0], nxt_WRITE_BUFFER_CTL_IGNORE_LDB_WB_V[0:0], WRITE_BUFFER_CTL.IGNORE_LDB_WB_V[0:0])

// ----------------------------------------------------------------------
// WRITE_BUFFER_CTL.ARB_SCH_MASK x1 RW, using RW template.
logic [0:0] up_WRITE_BUFFER_CTL_ARB_SCH_MASK;
always_comb begin
 up_WRITE_BUFFER_CTL_ARB_SCH_MASK =
    ({1{write_req_WRITE_BUFFER_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_WRITE_BUFFER_CTL_ARB_SCH_MASK;
always_comb begin
 nxt_WRITE_BUFFER_CTL_ARB_SCH_MASK = write_data[4:4];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_WRITE_BUFFER_CTL_ARB_SCH_MASK[0], nxt_WRITE_BUFFER_CTL_ARB_SCH_MASK[0:0], WRITE_BUFFER_CTL.ARB_SCH_MASK[0:0])

// ----------------------------------------------------------------------
// WRITE_BUFFER_CTL.ARB_MSI_MASK x1 RW, using RW template.
logic [0:0] up_WRITE_BUFFER_CTL_ARB_MSI_MASK;
always_comb begin
 up_WRITE_BUFFER_CTL_ARB_MSI_MASK =
    ({1{write_req_WRITE_BUFFER_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_WRITE_BUFFER_CTL_ARB_MSI_MASK;
always_comb begin
 nxt_WRITE_BUFFER_CTL_ARB_MSI_MASK = write_data[5:5];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_WRITE_BUFFER_CTL_ARB_MSI_MASK[0], nxt_WRITE_BUFFER_CTL_ARB_MSI_MASK[0:0], WRITE_BUFFER_CTL.ARB_MSI_MASK[0:0])

// ----------------------------------------------------------------------
// WRITE_BUFFER_CTL.SINGLE_STEP_SCH x1 RW, using RW template.
logic [0:0] up_WRITE_BUFFER_CTL_SINGLE_STEP_SCH;
always_comb begin
 up_WRITE_BUFFER_CTL_SINGLE_STEP_SCH =
    ({1{write_req_WRITE_BUFFER_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_WRITE_BUFFER_CTL_SINGLE_STEP_SCH;
always_comb begin
 nxt_WRITE_BUFFER_CTL_SINGLE_STEP_SCH = write_data[6:6];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_WRITE_BUFFER_CTL_SINGLE_STEP_SCH[0], nxt_WRITE_BUFFER_CTL_SINGLE_STEP_SCH[0:0], WRITE_BUFFER_CTL.SINGLE_STEP_SCH[0:0])

// ----------------------------------------------------------------------
// WRITE_BUFFER_CTL.SINGLE_STEP_MSI x1 RW, using RW template.
logic [0:0] up_WRITE_BUFFER_CTL_SINGLE_STEP_MSI;
always_comb begin
 up_WRITE_BUFFER_CTL_SINGLE_STEP_MSI =
    ({1{write_req_WRITE_BUFFER_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_WRITE_BUFFER_CTL_SINGLE_STEP_MSI;
always_comb begin
 nxt_WRITE_BUFFER_CTL_SINGLE_STEP_MSI = write_data[7:7];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_WRITE_BUFFER_CTL_SINGLE_STEP_MSI[0], nxt_WRITE_BUFFER_CTL_SINGLE_STEP_MSI[0:0], WRITE_BUFFER_CTL.SINGLE_STEP_MSI[0:0])

// ----------------------------------------------------------------------
// WRITE_BUFFER_CTL.ENABLE_DEBUG x1 RW, using RW template.
logic [0:0] up_WRITE_BUFFER_CTL_ENABLE_DEBUG;
always_comb begin
 up_WRITE_BUFFER_CTL_ENABLE_DEBUG =
    ({1{write_req_WRITE_BUFFER_CTL }} &
    be[1:1]);
end

logic [0:0] nxt_WRITE_BUFFER_CTL_ENABLE_DEBUG;
always_comb begin
 nxt_WRITE_BUFFER_CTL_ENABLE_DEBUG = write_data[8:8];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_WRITE_BUFFER_CTL_ENABLE_DEBUG[0], nxt_WRITE_BUFFER_CTL_ENABLE_DEBUG[0:0], WRITE_BUFFER_CTL.ENABLE_DEBUG[0:0])

// ----------------------------------------------------------------------
// WRITE_BUFFER_CTL.SCH_RATE_LIMIT x3 RW, using RW template.
logic [0:0] up_WRITE_BUFFER_CTL_SCH_RATE_LIMIT;
always_comb begin
 up_WRITE_BUFFER_CTL_SCH_RATE_LIMIT =
    ({1{write_req_WRITE_BUFFER_CTL }} &
    be[2:2]);
end

logic [2:0] nxt_WRITE_BUFFER_CTL_SCH_RATE_LIMIT;
always_comb begin
 nxt_WRITE_BUFFER_CTL_SCH_RATE_LIMIT = write_data[18:16];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 3'h0, up_WRITE_BUFFER_CTL_SCH_RATE_LIMIT[0], nxt_WRITE_BUFFER_CTL_SCH_RATE_LIMIT[2:0], WRITE_BUFFER_CTL.SCH_RATE_LIMIT[2:0])

// ----------------------------------------------------------------------
// WRITE_BUFFER_CTL.EARLY_DIR_INT x1 RW, using RW template.
logic [0:0] up_WRITE_BUFFER_CTL_EARLY_DIR_INT;
always_comb begin
 up_WRITE_BUFFER_CTL_EARLY_DIR_INT =
    ({1{write_req_WRITE_BUFFER_CTL }} &
    be[2:2]);
end

logic [0:0] nxt_WRITE_BUFFER_CTL_EARLY_DIR_INT;
always_comb begin
 nxt_WRITE_BUFFER_CTL_EARLY_DIR_INT = write_data[19:19];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_WRITE_BUFFER_CTL_EARLY_DIR_INT[0], nxt_WRITE_BUFFER_CTL_EARLY_DIR_INT[0:0], WRITE_BUFFER_CTL.EARLY_DIR_INT[0:0])

//---------------------------------------------------------------------
// ALARM_CTL Address Decode
logic  addr_decode_ALARM_CTL;
logic  write_req_ALARM_CTL;
always_comb begin
   addr_decode_ALARM_CTL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == ALARM_CTL_DECODE_ADDR) && req.valid ;
   write_req_ALARM_CTL = IsMEMWr && addr_decode_ALARM_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// ALARM_CTL.DISABLE_HQM_ALARMS x1 RW, using RW template.
logic [0:0] up_ALARM_CTL_DISABLE_HQM_ALARMS;
always_comb begin
 up_ALARM_CTL_DISABLE_HQM_ALARMS =
    ({1{write_req_ALARM_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_ALARM_CTL_DISABLE_HQM_ALARMS;
always_comb begin
 nxt_ALARM_CTL_DISABLE_HQM_ALARMS = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_CTL_DISABLE_HQM_ALARMS[0], nxt_ALARM_CTL_DISABLE_HQM_ALARMS[0:0], ALARM_CTL.DISABLE_HQM_ALARMS[0:0])

// ----------------------------------------------------------------------
// ALARM_CTL.DISABLE_SIF_ALARMS x1 RW, using RW template.
logic [0:0] up_ALARM_CTL_DISABLE_SIF_ALARMS;
always_comb begin
 up_ALARM_CTL_DISABLE_SIF_ALARMS =
    ({1{write_req_ALARM_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_ALARM_CTL_DISABLE_SIF_ALARMS;
always_comb begin
 nxt_ALARM_CTL_DISABLE_SIF_ALARMS = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_CTL_DISABLE_SIF_ALARMS[0], nxt_ALARM_CTL_DISABLE_SIF_ALARMS[0:0], ALARM_CTL.DISABLE_SIF_ALARMS[0:0])

// ----------------------------------------------------------------------
// ALARM_CTL.DISABLE_SYS_ALARMS x1 RW, using RW template.
logic [0:0] up_ALARM_CTL_DISABLE_SYS_ALARMS;
always_comb begin
 up_ALARM_CTL_DISABLE_SYS_ALARMS =
    ({1{write_req_ALARM_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_ALARM_CTL_DISABLE_SYS_ALARMS;
always_comb begin
 nxt_ALARM_CTL_DISABLE_SYS_ALARMS = write_data[2:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_CTL_DISABLE_SYS_ALARMS[0], nxt_ALARM_CTL_DISABLE_SYS_ALARMS[0:0], ALARM_CTL.DISABLE_SYS_ALARMS[0:0])

// ----------------------------------------------------------------------
// ALARM_CTL.DISABLE_CWD_ALARMS x1 RW, using RW template.
logic [0:0] up_ALARM_CTL_DISABLE_CWD_ALARMS;
always_comb begin
 up_ALARM_CTL_DISABLE_CWD_ALARMS =
    ({1{write_req_ALARM_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_ALARM_CTL_DISABLE_CWD_ALARMS;
always_comb begin
 nxt_ALARM_CTL_DISABLE_CWD_ALARMS = write_data[3:3];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_ALARM_CTL_DISABLE_CWD_ALARMS[0], nxt_ALARM_CTL_DISABLE_CWD_ALARMS[0:0], ALARM_CTL.DISABLE_CWD_ALARMS[0:0])

//---------------------------------------------------------------------
// CFG_PATCH_CONTROL Address Decode
logic  addr_decode_CFG_PATCH_CONTROL;
logic  write_req_CFG_PATCH_CONTROL;
always_comb begin
   addr_decode_CFG_PATCH_CONTROL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == CFG_PATCH_CONTROL_DECODE_ADDR) && req.valid ;
   write_req_CFG_PATCH_CONTROL = IsMEMWr && addr_decode_CFG_PATCH_CONTROL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// CFG_PATCH_CONTROL.DELAY_CLOCKOFF x8 RW, using RW template.
logic [0:0] up_CFG_PATCH_CONTROL_DELAY_CLOCKOFF;
always_comb begin
 up_CFG_PATCH_CONTROL_DELAY_CLOCKOFF =
    ({1{write_req_CFG_PATCH_CONTROL }} &
    be[0:0]);
end

logic [7:0] nxt_CFG_PATCH_CONTROL_DELAY_CLOCKOFF;
always_comb begin
 nxt_CFG_PATCH_CONTROL_DELAY_CLOCKOFF = write_data[7:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h40, up_CFG_PATCH_CONTROL_DELAY_CLOCKOFF[0], nxt_CFG_PATCH_CONTROL_DELAY_CLOCKOFF[7:0], CFG_PATCH_CONTROL.DELAY_CLOCKOFF[7:0])

// ----------------------------------------------------------------------
// CFG_PATCH_CONTROL.DELAY_CLKOFF_BYPASS x6 RW, using RW template.
logic [0:0] up_CFG_PATCH_CONTROL_DELAY_CLKOFF_BYPASS;
always_comb begin
 up_CFG_PATCH_CONTROL_DELAY_CLKOFF_BYPASS =
    ({1{write_req_CFG_PATCH_CONTROL }} &
    be[1:1]);
end

logic [5:0] nxt_CFG_PATCH_CONTROL_DELAY_CLKOFF_BYPASS;
always_comb begin
 nxt_CFG_PATCH_CONTROL_DELAY_CLKOFF_BYPASS = write_data[13:8];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 6'h7, up_CFG_PATCH_CONTROL_DELAY_CLKOFF_BYPASS[0], nxt_CFG_PATCH_CONTROL_DELAY_CLKOFF_BYPASS[5:0], CFG_PATCH_CONTROL.DELAY_CLKOFF_BYPASS[5:0])

// ----------------------------------------------------------------------
// CFG_PATCH_CONTROL.RSVZ1 x2 RW, using RW template.
logic [0:0] up_CFG_PATCH_CONTROL_RSVZ1;
always_comb begin
 up_CFG_PATCH_CONTROL_RSVZ1 =
    ({1{write_req_CFG_PATCH_CONTROL }} &
    be[1:1]);
end

logic [1:0] nxt_CFG_PATCH_CONTROL_RSVZ1;
always_comb begin
 nxt_CFG_PATCH_CONTROL_RSVZ1 = write_data[15:14];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 2'h0, up_CFG_PATCH_CONTROL_RSVZ1[0], nxt_CFG_PATCH_CONTROL_RSVZ1[1:0], CFG_PATCH_CONTROL.RSVZ1[1:0])

// ----------------------------------------------------------------------
// CFG_PATCH_CONTROL.RSVZ0 x7 RW, using RW template.
logic [1:0] up_CFG_PATCH_CONTROL_RSVZ0;
always_comb begin
 up_CFG_PATCH_CONTROL_RSVZ0 =
    ({2{write_req_CFG_PATCH_CONTROL }} &
    be[3:2]);
end

logic [14:0] nxt_CFG_PATCH_CONTROL_RSVZ0;
always_comb begin
 nxt_CFG_PATCH_CONTROL_RSVZ0 = write_data[30:16];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_CFG_PATCH_CONTROL_RSVZ0[0], nxt_CFG_PATCH_CONTROL_RSVZ0[7:0], CFG_PATCH_CONTROL.RSVZ0[7:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 7'h0, up_CFG_PATCH_CONTROL_RSVZ0[1], nxt_CFG_PATCH_CONTROL_RSVZ0[14:8], CFG_PATCH_CONTROL.RSVZ0[14:8])

// ----------------------------------------------------------------------
// CFG_PATCH_CONTROL.DISABLE_CLOCKOFF x1 RW, using RW template.
logic [0:0] up_CFG_PATCH_CONTROL_DISABLE_CLOCKOFF;
always_comb begin
 up_CFG_PATCH_CONTROL_DISABLE_CLOCKOFF =
    ({1{write_req_CFG_PATCH_CONTROL }} &
    be[3:3]);
end

logic [0:0] nxt_CFG_PATCH_CONTROL_DISABLE_CLOCKOFF;
always_comb begin
 nxt_CFG_PATCH_CONTROL_DISABLE_CLOCKOFF = write_data[31:31];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_CFG_PATCH_CONTROL_DISABLE_CLOCKOFF[0], nxt_CFG_PATCH_CONTROL_DISABLE_CLOCKOFF[0:0], CFG_PATCH_CONTROL.DISABLE_CLOCKOFF[0:0])

//---------------------------------------------------------------------
// INGRESS_CTL Address Decode
logic  addr_decode_INGRESS_CTL;
logic  write_req_INGRESS_CTL;
always_comb begin
   addr_decode_INGRESS_CTL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == INGRESS_CTL_DECODE_ADDR) && req.valid ;
   write_req_INGRESS_CTL = IsMEMWr && addr_decode_INGRESS_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// INGRESS_CTL.HOLD_HCW_ENQ x1 RW, using RW template.
logic [0:0] up_INGRESS_CTL_HOLD_HCW_ENQ;
always_comb begin
 up_INGRESS_CTL_HOLD_HCW_ENQ =
    ({1{write_req_INGRESS_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_INGRESS_CTL_HOLD_HCW_ENQ;
always_comb begin
 nxt_INGRESS_CTL_HOLD_HCW_ENQ = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_CTL_HOLD_HCW_ENQ[0], nxt_INGRESS_CTL_HOLD_HCW_ENQ[0:0], INGRESS_CTL.HOLD_HCW_ENQ[0:0])

// ----------------------------------------------------------------------
// INGRESS_CTL.HOLD_HCW_W x1 RW, using RW template.
logic [0:0] up_INGRESS_CTL_HOLD_HCW_W;
always_comb begin
 up_INGRESS_CTL_HOLD_HCW_W =
    ({1{write_req_INGRESS_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_INGRESS_CTL_HOLD_HCW_W;
always_comb begin
 nxt_INGRESS_CTL_HOLD_HCW_W = write_data[1:1];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_CTL_HOLD_HCW_W[0], nxt_INGRESS_CTL_HOLD_HCW_W[0:0], INGRESS_CTL.HOLD_HCW_W[0:0])

// ----------------------------------------------------------------------
// INGRESS_CTL.SINGLE_STEP_ENQ x1 RW, using RW template.
logic [0:0] up_INGRESS_CTL_SINGLE_STEP_ENQ;
always_comb begin
 up_INGRESS_CTL_SINGLE_STEP_ENQ =
    ({1{write_req_INGRESS_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_INGRESS_CTL_SINGLE_STEP_ENQ;
always_comb begin
 nxt_INGRESS_CTL_SINGLE_STEP_ENQ = write_data[2:2];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_CTL_SINGLE_STEP_ENQ[0], nxt_INGRESS_CTL_SINGLE_STEP_ENQ[0:0], INGRESS_CTL.SINGLE_STEP_ENQ[0:0])

// ----------------------------------------------------------------------
// INGRESS_CTL.SINGLE_STEP_HCW_W x1 RW, using RW template.
logic [0:0] up_INGRESS_CTL_SINGLE_STEP_HCW_W;
always_comb begin
 up_INGRESS_CTL_SINGLE_STEP_HCW_W =
    ({1{write_req_INGRESS_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_INGRESS_CTL_SINGLE_STEP_HCW_W;
always_comb begin
 nxt_INGRESS_CTL_SINGLE_STEP_HCW_W = write_data[3:3];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_CTL_SINGLE_STEP_HCW_W[0], nxt_INGRESS_CTL_SINGLE_STEP_HCW_W[0:0], INGRESS_CTL.SINGLE_STEP_HCW_W[0:0])

// ----------------------------------------------------------------------
// INGRESS_CTL.ENABLE_DEBUG x1 RW, using RW template.
logic [0:0] up_INGRESS_CTL_ENABLE_DEBUG;
always_comb begin
 up_INGRESS_CTL_ENABLE_DEBUG =
    ({1{write_req_INGRESS_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_INGRESS_CTL_ENABLE_DEBUG;
always_comb begin
 nxt_INGRESS_CTL_ENABLE_DEBUG = write_data[4:4];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_INGRESS_CTL_ENABLE_DEBUG[0], nxt_INGRESS_CTL_ENABLE_DEBUG[0:0], INGRESS_CTL.ENABLE_DEBUG[0:0])

// ----------------------------------------------------------------------
// INGRESS_CTL.ENQ_RATE_LIMIT x2 RW, using RW template.
logic [1:0] up_INGRESS_CTL_ENQ_RATE_LIMIT;
always_comb begin
 up_INGRESS_CTL_ENQ_RATE_LIMIT =
    ({2{write_req_INGRESS_CTL }} &
    be[2:1]);
end

logic [9:0] nxt_INGRESS_CTL_ENQ_RATE_LIMIT;
always_comb begin
 nxt_INGRESS_CTL_ENQ_RATE_LIMIT = write_data[17:8];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h0, up_INGRESS_CTL_ENQ_RATE_LIMIT[0], nxt_INGRESS_CTL_ENQ_RATE_LIMIT[7:0], INGRESS_CTL.ENQ_RATE_LIMIT[7:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 2'h0, up_INGRESS_CTL_ENQ_RATE_LIMIT[1], nxt_INGRESS_CTL_ENQ_RATE_LIMIT[9:8], INGRESS_CTL.ENQ_RATE_LIMIT[9:8])

//---------------------------------------------------------------------
// EGRESS_CTL Address Decode
logic  addr_decode_EGRESS_CTL;
logic  write_req_EGRESS_CTL;
always_comb begin
   addr_decode_EGRESS_CTL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == EGRESS_CTL_DECODE_ADDR) && req.valid ;
   write_req_EGRESS_CTL = IsMEMWr && addr_decode_EGRESS_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// EGRESS_CTL.SCH_RATE_LIMIT x7 RW, using RW template.
logic [0:0] up_EGRESS_CTL_SCH_RATE_LIMIT;
always_comb begin
 up_EGRESS_CTL_SCH_RATE_LIMIT =
    ({1{write_req_EGRESS_CTL }} &
    be[0:0]);
end

logic [6:0] nxt_EGRESS_CTL_SCH_RATE_LIMIT;
always_comb begin
 nxt_EGRESS_CTL_SCH_RATE_LIMIT = write_data[6:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 7'h0, up_EGRESS_CTL_SCH_RATE_LIMIT[0], nxt_EGRESS_CTL_SCH_RATE_LIMIT[6:0], EGRESS_CTL.SCH_RATE_LIMIT[6:0])

//---------------------------------------------------------------------
// SYS_IDLE_STATUS Address Decode
// ----------------------------------------------------------------------
// SYS_IDLE_STATUS.INGRESS_IDLE x1 RO/V, using RO/V template.
assign SYS_IDLE_STATUS.INGRESS_IDLE = new_SYS_IDLE_STATUS.INGRESS_IDLE;



// ----------------------------------------------------------------------
// SYS_IDLE_STATUS.EGRESS_IDLE x1 RO/V, using RO/V template.
assign SYS_IDLE_STATUS.EGRESS_IDLE = new_SYS_IDLE_STATUS.EGRESS_IDLE;



// ----------------------------------------------------------------------
// SYS_IDLE_STATUS.WBUF_IDLE x1 RO/V, using RO/V template.
assign SYS_IDLE_STATUS.WBUF_IDLE = new_SYS_IDLE_STATUS.WBUF_IDLE;



// ----------------------------------------------------------------------
// SYS_IDLE_STATUS.ALARM_IDLE x1 RO/V, using RO/V template.
assign SYS_IDLE_STATUS.ALARM_IDLE = new_SYS_IDLE_STATUS.ALARM_IDLE;



// ----------------------------------------------------------------------
// SYS_IDLE_STATUS.INT_IDLE x1 RO/V, using RO/V template.
assign SYS_IDLE_STATUS.INT_IDLE = new_SYS_IDLE_STATUS.INT_IDLE;



// ----------------------------------------------------------------------
// SYS_IDLE_STATUS.PBA_IDLE x1 RO/V, using RO/V template.
assign SYS_IDLE_STATUS.PBA_IDLE = new_SYS_IDLE_STATUS.PBA_IDLE;




//---------------------------------------------------------------------
// HCW_ENQ_FIFO_CTL Address Decode
logic  addr_decode_HCW_ENQ_FIFO_CTL;
logic  write_req_HCW_ENQ_FIFO_CTL;
always_comb begin
   addr_decode_HCW_ENQ_FIFO_CTL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HCW_ENQ_FIFO_CTL_DECODE_ADDR) && req.valid ;
   write_req_HCW_ENQ_FIFO_CTL = IsMEMWr && addr_decode_HCW_ENQ_FIFO_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// HCW_ENQ_FIFO_CTL.HIGH_WM x1 RW, using RW template.
logic [1:0] up_HCW_ENQ_FIFO_CTL_HIGH_WM;
always_comb begin
 up_HCW_ENQ_FIFO_CTL_HIGH_WM =
    ({2{write_req_HCW_ENQ_FIFO_CTL }} &
    be[1:0]);
end

logic [8:0] nxt_HCW_ENQ_FIFO_CTL_HIGH_WM;
always_comb begin
 nxt_HCW_ENQ_FIFO_CTL_HIGH_WM = write_data[8:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'hFE, up_HCW_ENQ_FIFO_CTL_HIGH_WM[0], nxt_HCW_ENQ_FIFO_CTL_HIGH_WM[7:0], HCW_ENQ_FIFO_CTL.HIGH_WM[7:0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h0, up_HCW_ENQ_FIFO_CTL_HIGH_WM[1], nxt_HCW_ENQ_FIFO_CTL_HIGH_WM[8:8], HCW_ENQ_FIFO_CTL.HIGH_WM[8:8])

//---------------------------------------------------------------------
// SCH_OUT_FIFO_CTL Address Decode
logic  addr_decode_SCH_OUT_FIFO_CTL;
logic  write_req_SCH_OUT_FIFO_CTL;
always_comb begin
   addr_decode_SCH_OUT_FIFO_CTL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SCH_OUT_FIFO_CTL_DECODE_ADDR) && req.valid ;
   write_req_SCH_OUT_FIFO_CTL = IsMEMWr && addr_decode_SCH_OUT_FIFO_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SCH_OUT_FIFO_CTL.HIGH_WM x8 RW, using RW template.
logic [0:0] up_SCH_OUT_FIFO_CTL_HIGH_WM;
always_comb begin
 up_SCH_OUT_FIFO_CTL_HIGH_WM =
    ({1{write_req_SCH_OUT_FIFO_CTL }} &
    be[0:0]);
end

logic [7:0] nxt_SCH_OUT_FIFO_CTL_HIGH_WM;
always_comb begin
 nxt_SCH_OUT_FIFO_CTL_HIGH_WM = write_data[7:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 8'h7F, up_SCH_OUT_FIFO_CTL_HIGH_WM[0], nxt_SCH_OUT_FIFO_CTL_HIGH_WM[7:0], SCH_OUT_FIFO_CTL.HIGH_WM[7:0])

//---------------------------------------------------------------------
// SIF_ALARM_FIFO_CTL Address Decode
logic  addr_decode_SIF_ALARM_FIFO_CTL;
logic  write_req_SIF_ALARM_FIFO_CTL;
always_comb begin
   addr_decode_SIF_ALARM_FIFO_CTL = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SIF_ALARM_FIFO_CTL_DECODE_ADDR) && req.valid ;
   write_req_SIF_ALARM_FIFO_CTL = IsMEMWr && addr_decode_SIF_ALARM_FIFO_CTL && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SIF_ALARM_FIFO_CTL.HIGH_WM x1 RW, using RW template.
logic [0:0] up_SIF_ALARM_FIFO_CTL_HIGH_WM;
always_comb begin
 up_SIF_ALARM_FIFO_CTL_HIGH_WM =
    ({1{write_req_SIF_ALARM_FIFO_CTL }} &
    be[0:0]);
end

logic [0:0] nxt_SIF_ALARM_FIFO_CTL_HIGH_WM;
always_comb begin
 nxt_SIF_ALARM_FIFO_CTL_HIGH_WM = write_data[0:0];

end


`RTLGEN_HQM_SYSTEM_CSR_EN_FF(gated_clk, hqm_inp_gated_rst_n, 1'h1, up_SIF_ALARM_FIFO_CTL_HIGH_WM[0], nxt_SIF_ALARM_FIFO_CTL_HIGH_WM[0:0], SIF_ALARM_FIFO_CTL.HIGH_WM[0:0])

//---------------------------------------------------------------------
// HCW_ENQ_FIFO_STATUS Address Decode
logic  addr_decode_HCW_ENQ_FIFO_STATUS;
logic  write_req_HCW_ENQ_FIFO_STATUS;
always_comb begin
   addr_decode_HCW_ENQ_FIFO_STATUS = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HCW_ENQ_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_HCW_ENQ_FIFO_STATUS = IsMEMWr && addr_decode_HCW_ENQ_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// HCW_ENQ_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_HCW_ENQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_HCW_ENQ_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_HCW_ENQ_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_HCW_ENQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_HCW_ENQ_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_HCW_ENQ_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_HCW_ENQ_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_HCW_ENQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_HCW_ENQ_FIFO_STATUS_UNDFLOW = clr_HCW_ENQ_FIFO_STATUS_UNDFLOW;
 sw_nxt_HCW_ENQ_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_HCW_ENQ_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_HCW_ENQ_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_HCW_ENQ_FIFO_STATUS_UNDFLOW = 
   swwr_HCW_ENQ_FIFO_STATUS_UNDFLOW | {1{load_HCW_ENQ_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_HCW_ENQ_FIFO_STATUS_UNDFLOW[0] = 
    load_HCW_ENQ_FIFO_STATUS.UNDFLOW ?
    new_HCW_ENQ_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_HCW_ENQ_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_HCW_ENQ_FIFO_STATUS_UNDFLOW[0], nxt_HCW_ENQ_FIFO_STATUS_UNDFLOW[0], HCW_ENQ_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// HCW_ENQ_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_HCW_ENQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_HCW_ENQ_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_HCW_ENQ_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_HCW_ENQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_HCW_ENQ_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_HCW_ENQ_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_HCW_ENQ_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_HCW_ENQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_HCW_ENQ_FIFO_STATUS_OVRFLOW = clr_HCW_ENQ_FIFO_STATUS_OVRFLOW;
 sw_nxt_HCW_ENQ_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_HCW_ENQ_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_HCW_ENQ_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_HCW_ENQ_FIFO_STATUS_OVRFLOW = 
   swwr_HCW_ENQ_FIFO_STATUS_OVRFLOW | {1{load_HCW_ENQ_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_HCW_ENQ_FIFO_STATUS_OVRFLOW[0] = 
    load_HCW_ENQ_FIFO_STATUS.OVRFLOW ?
    new_HCW_ENQ_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_HCW_ENQ_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_HCW_ENQ_FIFO_STATUS_OVRFLOW[0], nxt_HCW_ENQ_FIFO_STATUS_OVRFLOW[0], HCW_ENQ_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// HCW_ENQ_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign HCW_ENQ_FIFO_STATUS.RSVD32 = new_HCW_ENQ_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// HCW_ENQ_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign HCW_ENQ_FIFO_STATUS.EMPTY = new_HCW_ENQ_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// HCW_ENQ_FIFO_STATUS.AEMPTY x1 RO/V, using RO/V template.
assign HCW_ENQ_FIFO_STATUS.AEMPTY = new_HCW_ENQ_FIFO_STATUS.AEMPTY;



// ----------------------------------------------------------------------
// HCW_ENQ_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign HCW_ENQ_FIFO_STATUS.AFULL = new_HCW_ENQ_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// HCW_ENQ_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign HCW_ENQ_FIFO_STATUS.FULL = new_HCW_ENQ_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// HCW_ENQ_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign HCW_ENQ_FIFO_STATUS.DEPTH = new_HCW_ENQ_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// HCW_SCH_FIFO_STATUS Address Decode
logic  addr_decode_HCW_SCH_FIFO_STATUS;
logic  write_req_HCW_SCH_FIFO_STATUS;
always_comb begin
   addr_decode_HCW_SCH_FIFO_STATUS = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HCW_SCH_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_HCW_SCH_FIFO_STATUS = IsMEMWr && addr_decode_HCW_SCH_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// HCW_SCH_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_HCW_SCH_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_HCW_SCH_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_HCW_SCH_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_HCW_SCH_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_HCW_SCH_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_HCW_SCH_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_HCW_SCH_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_HCW_SCH_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_HCW_SCH_FIFO_STATUS_UNDFLOW = clr_HCW_SCH_FIFO_STATUS_UNDFLOW;
 sw_nxt_HCW_SCH_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_HCW_SCH_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_HCW_SCH_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_HCW_SCH_FIFO_STATUS_UNDFLOW = 
   swwr_HCW_SCH_FIFO_STATUS_UNDFLOW | {1{load_HCW_SCH_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_HCW_SCH_FIFO_STATUS_UNDFLOW[0] = 
    load_HCW_SCH_FIFO_STATUS.UNDFLOW ?
    new_HCW_SCH_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_HCW_SCH_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_HCW_SCH_FIFO_STATUS_UNDFLOW[0], nxt_HCW_SCH_FIFO_STATUS_UNDFLOW[0], HCW_SCH_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// HCW_SCH_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_HCW_SCH_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_HCW_SCH_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_HCW_SCH_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_HCW_SCH_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_HCW_SCH_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_HCW_SCH_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_HCW_SCH_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_HCW_SCH_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_HCW_SCH_FIFO_STATUS_OVRFLOW = clr_HCW_SCH_FIFO_STATUS_OVRFLOW;
 sw_nxt_HCW_SCH_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_HCW_SCH_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_HCW_SCH_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_HCW_SCH_FIFO_STATUS_OVRFLOW = 
   swwr_HCW_SCH_FIFO_STATUS_OVRFLOW | {1{load_HCW_SCH_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_HCW_SCH_FIFO_STATUS_OVRFLOW[0] = 
    load_HCW_SCH_FIFO_STATUS.OVRFLOW ?
    new_HCW_SCH_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_HCW_SCH_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_HCW_SCH_FIFO_STATUS_OVRFLOW[0], nxt_HCW_SCH_FIFO_STATUS_OVRFLOW[0], HCW_SCH_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// HCW_SCH_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign HCW_SCH_FIFO_STATUS.RSVD32 = new_HCW_SCH_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// HCW_SCH_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign HCW_SCH_FIFO_STATUS.EMPTY = new_HCW_SCH_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// HCW_SCH_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign HCW_SCH_FIFO_STATUS.RSVD5 = new_HCW_SCH_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// HCW_SCH_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign HCW_SCH_FIFO_STATUS.AFULL = new_HCW_SCH_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// HCW_SCH_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign HCW_SCH_FIFO_STATUS.FULL = new_HCW_SCH_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// HCW_SCH_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign HCW_SCH_FIFO_STATUS.DEPTH = new_HCW_SCH_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// SCH_OUT_FIFO_STATUS Address Decode
logic  addr_decode_SCH_OUT_FIFO_STATUS;
logic  write_req_SCH_OUT_FIFO_STATUS;
always_comb begin
   addr_decode_SCH_OUT_FIFO_STATUS = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SCH_OUT_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_SCH_OUT_FIFO_STATUS = IsMEMWr && addr_decode_SCH_OUT_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SCH_OUT_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SCH_OUT_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_SCH_OUT_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_SCH_OUT_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_SCH_OUT_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_SCH_OUT_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_SCH_OUT_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_SCH_OUT_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_SCH_OUT_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_SCH_OUT_FIFO_STATUS_UNDFLOW = clr_SCH_OUT_FIFO_STATUS_UNDFLOW;
 sw_nxt_SCH_OUT_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_SCH_OUT_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_SCH_OUT_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_SCH_OUT_FIFO_STATUS_UNDFLOW = 
   swwr_SCH_OUT_FIFO_STATUS_UNDFLOW | {1{load_SCH_OUT_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_SCH_OUT_FIFO_STATUS_UNDFLOW[0] = 
    load_SCH_OUT_FIFO_STATUS.UNDFLOW ?
    new_SCH_OUT_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_SCH_OUT_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_SCH_OUT_FIFO_STATUS_UNDFLOW[0], nxt_SCH_OUT_FIFO_STATUS_UNDFLOW[0], SCH_OUT_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// SCH_OUT_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SCH_OUT_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_SCH_OUT_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_SCH_OUT_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_SCH_OUT_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_SCH_OUT_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_SCH_OUT_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_SCH_OUT_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_SCH_OUT_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_SCH_OUT_FIFO_STATUS_OVRFLOW = clr_SCH_OUT_FIFO_STATUS_OVRFLOW;
 sw_nxt_SCH_OUT_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_SCH_OUT_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_SCH_OUT_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_SCH_OUT_FIFO_STATUS_OVRFLOW = 
   swwr_SCH_OUT_FIFO_STATUS_OVRFLOW | {1{load_SCH_OUT_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_SCH_OUT_FIFO_STATUS_OVRFLOW[0] = 
    load_SCH_OUT_FIFO_STATUS.OVRFLOW ?
    new_SCH_OUT_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_SCH_OUT_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_SCH_OUT_FIFO_STATUS_OVRFLOW[0], nxt_SCH_OUT_FIFO_STATUS_OVRFLOW[0], SCH_OUT_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// SCH_OUT_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign SCH_OUT_FIFO_STATUS.RSVD32 = new_SCH_OUT_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// SCH_OUT_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign SCH_OUT_FIFO_STATUS.EMPTY = new_SCH_OUT_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// SCH_OUT_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign SCH_OUT_FIFO_STATUS.RSVD5 = new_SCH_OUT_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// SCH_OUT_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign SCH_OUT_FIFO_STATUS.AFULL = new_SCH_OUT_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// SCH_OUT_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign SCH_OUT_FIFO_STATUS.FULL = new_SCH_OUT_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// SCH_OUT_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign SCH_OUT_FIFO_STATUS.DEPTH = new_SCH_OUT_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// CFG_RX_FIFO_STATUS Address Decode
logic  addr_decode_CFG_RX_FIFO_STATUS;
logic  write_req_CFG_RX_FIFO_STATUS;
always_comb begin
   addr_decode_CFG_RX_FIFO_STATUS = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == CFG_RX_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_CFG_RX_FIFO_STATUS = IsMEMWr && addr_decode_CFG_RX_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// CFG_RX_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_CFG_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_CFG_RX_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_CFG_RX_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_CFG_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_CFG_RX_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_CFG_RX_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_CFG_RX_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_CFG_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_CFG_RX_FIFO_STATUS_UNDFLOW = clr_CFG_RX_FIFO_STATUS_UNDFLOW;
 sw_nxt_CFG_RX_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_CFG_RX_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_CFG_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_CFG_RX_FIFO_STATUS_UNDFLOW = 
   swwr_CFG_RX_FIFO_STATUS_UNDFLOW | {1{load_CFG_RX_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_CFG_RX_FIFO_STATUS_UNDFLOW[0] = 
    load_CFG_RX_FIFO_STATUS.UNDFLOW ?
    new_CFG_RX_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_CFG_RX_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_CFG_RX_FIFO_STATUS_UNDFLOW[0], nxt_CFG_RX_FIFO_STATUS_UNDFLOW[0], CFG_RX_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// CFG_RX_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_CFG_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_CFG_RX_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_CFG_RX_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_CFG_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_CFG_RX_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_CFG_RX_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_CFG_RX_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_CFG_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_CFG_RX_FIFO_STATUS_OVRFLOW = clr_CFG_RX_FIFO_STATUS_OVRFLOW;
 sw_nxt_CFG_RX_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_CFG_RX_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_CFG_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_CFG_RX_FIFO_STATUS_OVRFLOW = 
   swwr_CFG_RX_FIFO_STATUS_OVRFLOW | {1{load_CFG_RX_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_CFG_RX_FIFO_STATUS_OVRFLOW[0] = 
    load_CFG_RX_FIFO_STATUS.OVRFLOW ?
    new_CFG_RX_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_CFG_RX_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_CFG_RX_FIFO_STATUS_OVRFLOW[0], nxt_CFG_RX_FIFO_STATUS_OVRFLOW[0], CFG_RX_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// CFG_RX_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign CFG_RX_FIFO_STATUS.RSVD32 = new_CFG_RX_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// CFG_RX_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign CFG_RX_FIFO_STATUS.EMPTY = new_CFG_RX_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// CFG_RX_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign CFG_RX_FIFO_STATUS.RSVD5 = new_CFG_RX_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// CFG_RX_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign CFG_RX_FIFO_STATUS.AFULL = new_CFG_RX_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// CFG_RX_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign CFG_RX_FIFO_STATUS.FULL = new_CFG_RX_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// CFG_RX_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign CFG_RX_FIFO_STATUS.DEPTH = new_CFG_RX_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// CWDI_RX_FIFO_STATUS Address Decode
logic  addr_decode_CWDI_RX_FIFO_STATUS;
logic  write_req_CWDI_RX_FIFO_STATUS;
always_comb begin
   addr_decode_CWDI_RX_FIFO_STATUS = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == CWDI_RX_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_CWDI_RX_FIFO_STATUS = IsMEMWr && addr_decode_CWDI_RX_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// CWDI_RX_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_CWDI_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_CWDI_RX_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_CWDI_RX_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_CWDI_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_CWDI_RX_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_CWDI_RX_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_CWDI_RX_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_CWDI_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_CWDI_RX_FIFO_STATUS_UNDFLOW = clr_CWDI_RX_FIFO_STATUS_UNDFLOW;
 sw_nxt_CWDI_RX_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_CWDI_RX_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_CWDI_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_CWDI_RX_FIFO_STATUS_UNDFLOW = 
   swwr_CWDI_RX_FIFO_STATUS_UNDFLOW | {1{load_CWDI_RX_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_CWDI_RX_FIFO_STATUS_UNDFLOW[0] = 
    load_CWDI_RX_FIFO_STATUS.UNDFLOW ?
    new_CWDI_RX_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_CWDI_RX_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_CWDI_RX_FIFO_STATUS_UNDFLOW[0], nxt_CWDI_RX_FIFO_STATUS_UNDFLOW[0], CWDI_RX_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// CWDI_RX_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_CWDI_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_CWDI_RX_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_CWDI_RX_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_CWDI_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_CWDI_RX_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_CWDI_RX_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_CWDI_RX_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_CWDI_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_CWDI_RX_FIFO_STATUS_OVRFLOW = clr_CWDI_RX_FIFO_STATUS_OVRFLOW;
 sw_nxt_CWDI_RX_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_CWDI_RX_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_CWDI_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_CWDI_RX_FIFO_STATUS_OVRFLOW = 
   swwr_CWDI_RX_FIFO_STATUS_OVRFLOW | {1{load_CWDI_RX_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_CWDI_RX_FIFO_STATUS_OVRFLOW[0] = 
    load_CWDI_RX_FIFO_STATUS.OVRFLOW ?
    new_CWDI_RX_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_CWDI_RX_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_CWDI_RX_FIFO_STATUS_OVRFLOW[0], nxt_CWDI_RX_FIFO_STATUS_OVRFLOW[0], CWDI_RX_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// CWDI_RX_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign CWDI_RX_FIFO_STATUS.RSVD32 = new_CWDI_RX_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// CWDI_RX_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign CWDI_RX_FIFO_STATUS.EMPTY = new_CWDI_RX_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// CWDI_RX_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign CWDI_RX_FIFO_STATUS.RSVD5 = new_CWDI_RX_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// CWDI_RX_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign CWDI_RX_FIFO_STATUS.AFULL = new_CWDI_RX_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// CWDI_RX_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign CWDI_RX_FIFO_STATUS.FULL = new_CWDI_RX_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// CWDI_RX_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign CWDI_RX_FIFO_STATUS.DEPTH = new_CWDI_RX_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// HQM_ALARM_RX_FIFO_STATUS Address Decode
logic  addr_decode_HQM_ALARM_RX_FIFO_STATUS;
logic  write_req_HQM_ALARM_RX_FIFO_STATUS;
always_comb begin
   addr_decode_HQM_ALARM_RX_FIFO_STATUS = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == HQM_ALARM_RX_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_HQM_ALARM_RX_FIFO_STATUS = IsMEMWr && addr_decode_HQM_ALARM_RX_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// HQM_ALARM_RX_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_HQM_ALARM_RX_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW = clr_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW;
 sw_nxt_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW = 
   swwr_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW | {1{load_HQM_ALARM_RX_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW[0] = 
    load_HQM_ALARM_RX_FIFO_STATUS.UNDFLOW ?
    new_HQM_ALARM_RX_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW[0], nxt_HQM_ALARM_RX_FIFO_STATUS_UNDFLOW[0], HQM_ALARM_RX_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// HQM_ALARM_RX_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_HQM_ALARM_RX_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW = clr_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW;
 sw_nxt_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW = 
   swwr_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW | {1{load_HQM_ALARM_RX_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW[0] = 
    load_HQM_ALARM_RX_FIFO_STATUS.OVRFLOW ?
    new_HQM_ALARM_RX_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW[0], nxt_HQM_ALARM_RX_FIFO_STATUS_OVRFLOW[0], HQM_ALARM_RX_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// HQM_ALARM_RX_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign HQM_ALARM_RX_FIFO_STATUS.RSVD32 = new_HQM_ALARM_RX_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// HQM_ALARM_RX_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign HQM_ALARM_RX_FIFO_STATUS.EMPTY = new_HQM_ALARM_RX_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// HQM_ALARM_RX_FIFO_STATUS.RSVD5 x1 RO/V, using RO/V template.
assign HQM_ALARM_RX_FIFO_STATUS.RSVD5 = new_HQM_ALARM_RX_FIFO_STATUS.RSVD5;



// ----------------------------------------------------------------------
// HQM_ALARM_RX_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign HQM_ALARM_RX_FIFO_STATUS.AFULL = new_HQM_ALARM_RX_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// HQM_ALARM_RX_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign HQM_ALARM_RX_FIFO_STATUS.FULL = new_HQM_ALARM_RX_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// HQM_ALARM_RX_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign HQM_ALARM_RX_FIFO_STATUS.DEPTH = new_HQM_ALARM_RX_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// SIF_ALARM_FIFO_STATUS Address Decode
logic  addr_decode_SIF_ALARM_FIFO_STATUS;
logic  write_req_SIF_ALARM_FIFO_STATUS;
always_comb begin
   addr_decode_SIF_ALARM_FIFO_STATUS = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == SIF_ALARM_FIFO_STATUS_DECODE_ADDR) && req.valid ;
   write_req_SIF_ALARM_FIFO_STATUS = IsMEMWr && addr_decode_SIF_ALARM_FIFO_STATUS && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// SIF_ALARM_FIFO_STATUS.UNDFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_FIFO_STATUS_UNDFLOW;
always_comb begin
 req_up_SIF_ALARM_FIFO_STATUS_UNDFLOW[0:0] = 
   {1{write_req_SIF_ALARM_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_SIF_ALARM_FIFO_STATUS_UNDFLOW;
always_comb begin
 clr_SIF_ALARM_FIFO_STATUS_UNDFLOW = write_data[0:0] & req_up_SIF_ALARM_FIFO_STATUS_UNDFLOW;

end
logic [0:0] swwr_SIF_ALARM_FIFO_STATUS_UNDFLOW;
logic [0:0] sw_nxt_SIF_ALARM_FIFO_STATUS_UNDFLOW;
always_comb begin
 swwr_SIF_ALARM_FIFO_STATUS_UNDFLOW = clr_SIF_ALARM_FIFO_STATUS_UNDFLOW;
 sw_nxt_SIF_ALARM_FIFO_STATUS_UNDFLOW = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_FIFO_STATUS_UNDFLOW;
logic [0:0] nxt_SIF_ALARM_FIFO_STATUS_UNDFLOW;
always_comb begin
 up_SIF_ALARM_FIFO_STATUS_UNDFLOW = 
   swwr_SIF_ALARM_FIFO_STATUS_UNDFLOW | {1{load_SIF_ALARM_FIFO_STATUS.UNDFLOW}};
end
always_comb begin
 nxt_SIF_ALARM_FIFO_STATUS_UNDFLOW[0] = 
    load_SIF_ALARM_FIFO_STATUS.UNDFLOW ?
    new_SIF_ALARM_FIFO_STATUS.UNDFLOW[0] :
    sw_nxt_SIF_ALARM_FIFO_STATUS_UNDFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_SIF_ALARM_FIFO_STATUS_UNDFLOW[0], nxt_SIF_ALARM_FIFO_STATUS_UNDFLOW[0], SIF_ALARM_FIFO_STATUS.UNDFLOW[0])

// ----------------------------------------------------------------------
// SIF_ALARM_FIFO_STATUS.OVRFLOW x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_SIF_ALARM_FIFO_STATUS_OVRFLOW;
always_comb begin
 req_up_SIF_ALARM_FIFO_STATUS_OVRFLOW[0:0] = 
   {1{write_req_SIF_ALARM_FIFO_STATUS & be[0]}}
;
end

logic [0:0] clr_SIF_ALARM_FIFO_STATUS_OVRFLOW;
always_comb begin
 clr_SIF_ALARM_FIFO_STATUS_OVRFLOW = write_data[1:1] & req_up_SIF_ALARM_FIFO_STATUS_OVRFLOW;

end
logic [0:0] swwr_SIF_ALARM_FIFO_STATUS_OVRFLOW;
logic [0:0] sw_nxt_SIF_ALARM_FIFO_STATUS_OVRFLOW;
always_comb begin
 swwr_SIF_ALARM_FIFO_STATUS_OVRFLOW = clr_SIF_ALARM_FIFO_STATUS_OVRFLOW;
 sw_nxt_SIF_ALARM_FIFO_STATUS_OVRFLOW = {1{1'b0}};

end
logic [0:0] up_SIF_ALARM_FIFO_STATUS_OVRFLOW;
logic [0:0] nxt_SIF_ALARM_FIFO_STATUS_OVRFLOW;
always_comb begin
 up_SIF_ALARM_FIFO_STATUS_OVRFLOW = 
   swwr_SIF_ALARM_FIFO_STATUS_OVRFLOW | {1{load_SIF_ALARM_FIFO_STATUS.OVRFLOW}};
end
always_comb begin
 nxt_SIF_ALARM_FIFO_STATUS_OVRFLOW[0] = 
    load_SIF_ALARM_FIFO_STATUS.OVRFLOW ?
    new_SIF_ALARM_FIFO_STATUS.OVRFLOW[0] :
    sw_nxt_SIF_ALARM_FIFO_STATUS_OVRFLOW[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_SIF_ALARM_FIFO_STATUS_OVRFLOW[0], nxt_SIF_ALARM_FIFO_STATUS_OVRFLOW[0], SIF_ALARM_FIFO_STATUS.OVRFLOW[0])
// ----------------------------------------------------------------------
// SIF_ALARM_FIFO_STATUS.RSVD32 x2 RO/V, using RO/V template.
assign SIF_ALARM_FIFO_STATUS.RSVD32 = new_SIF_ALARM_FIFO_STATUS.RSVD32;



// ----------------------------------------------------------------------
// SIF_ALARM_FIFO_STATUS.EMPTY x1 RO/V, using RO/V template.
assign SIF_ALARM_FIFO_STATUS.EMPTY = new_SIF_ALARM_FIFO_STATUS.EMPTY;



// ----------------------------------------------------------------------
// SIF_ALARM_FIFO_STATUS.AEMPTY x1 RO/V, using RO/V template.
assign SIF_ALARM_FIFO_STATUS.AEMPTY = new_SIF_ALARM_FIFO_STATUS.AEMPTY;



// ----------------------------------------------------------------------
// SIF_ALARM_FIFO_STATUS.AFULL x1 RO/V, using RO/V template.
assign SIF_ALARM_FIFO_STATUS.AFULL = new_SIF_ALARM_FIFO_STATUS.AFULL;



// ----------------------------------------------------------------------
// SIF_ALARM_FIFO_STATUS.FULL x1 RO/V, using RO/V template.
assign SIF_ALARM_FIFO_STATUS.FULL = new_SIF_ALARM_FIFO_STATUS.FULL;



// ----------------------------------------------------------------------
// SIF_ALARM_FIFO_STATUS.DEPTH x8 RO/V, using RO/V template.
assign SIF_ALARM_FIFO_STATUS.DEPTH = new_SIF_ALARM_FIFO_STATUS.DEPTH;




//---------------------------------------------------------------------
// ALARM_DB_STATUS Address Decode
// ----------------------------------------------------------------------
// ALARM_DB_STATUS.SYS_DB_DEPTH x2 RO/V, using RO/V template.
assign ALARM_DB_STATUS.SYS_DB_DEPTH = new_ALARM_DB_STATUS.SYS_DB_DEPTH;



// ----------------------------------------------------------------------
// ALARM_DB_STATUS.SYS_DB_READY x1 RO/V, using RO/V template.
assign ALARM_DB_STATUS.SYS_DB_READY = new_ALARM_DB_STATUS.SYS_DB_READY;



// ----------------------------------------------------------------------
// ALARM_DB_STATUS.MSIX_DB_DEPTH x2 RO/V, using RO/V template.
assign ALARM_DB_STATUS.MSIX_DB_DEPTH = new_ALARM_DB_STATUS.MSIX_DB_DEPTH;



// ----------------------------------------------------------------------
// ALARM_DB_STATUS.MSIX_DB_READY x1 RO/V, using RO/V template.
assign ALARM_DB_STATUS.MSIX_DB_READY = new_ALARM_DB_STATUS.MSIX_DB_READY;




//---------------------------------------------------------------------
// INGRESS_DB_STATUS Address Decode
// ----------------------------------------------------------------------
// INGRESS_DB_STATUS.HCW_ENQ_W_DB_DEPTH x2 RO/V, using RO/V template.
assign INGRESS_DB_STATUS.HCW_ENQ_W_DB_DEPTH = new_INGRESS_DB_STATUS.HCW_ENQ_W_DB_DEPTH;



// ----------------------------------------------------------------------
// INGRESS_DB_STATUS.HCW_ENQ_W_DB_READY x1 RO/V, using RO/V template.
assign INGRESS_DB_STATUS.HCW_ENQ_W_DB_READY = new_INGRESS_DB_STATUS.HCW_ENQ_W_DB_READY;



// ----------------------------------------------------------------------
// INGRESS_DB_STATUS.HCW_ENQ_DB_DEPTH x2 RO/V, using RO/V template.
assign INGRESS_DB_STATUS.HCW_ENQ_DB_DEPTH = new_INGRESS_DB_STATUS.HCW_ENQ_DB_DEPTH;



// ----------------------------------------------------------------------
// INGRESS_DB_STATUS.HCW_ENQ_DB_READY x1 RO/V, using RO/V template.
assign INGRESS_DB_STATUS.HCW_ENQ_DB_READY = new_INGRESS_DB_STATUS.HCW_ENQ_DB_READY;




//---------------------------------------------------------------------
// EGRESS_DB_STATUS Address Decode
// ----------------------------------------------------------------------
// EGRESS_DB_STATUS.HCW_SCHED_DB_DEPTH x2 RO/V, using RO/V template.
assign EGRESS_DB_STATUS.HCW_SCHED_DB_DEPTH = new_EGRESS_DB_STATUS.HCW_SCHED_DB_DEPTH;



// ----------------------------------------------------------------------
// EGRESS_DB_STATUS.HCW_SCHED_DB_READY x1 RO/V, using RO/V template.
assign EGRESS_DB_STATUS.HCW_SCHED_DB_READY = new_EGRESS_DB_STATUS.HCW_SCHED_DB_READY;



// ----------------------------------------------------------------------
// EGRESS_DB_STATUS.CQ_OCC_DB_DEPTH x2 RO/V, using RO/V template.
assign EGRESS_DB_STATUS.CQ_OCC_DB_DEPTH = new_EGRESS_DB_STATUS.CQ_OCC_DB_DEPTH;



// ----------------------------------------------------------------------
// EGRESS_DB_STATUS.CQ_OCC_DB_READY x1 RO/V, using RO/V template.
assign EGRESS_DB_STATUS.CQ_OCC_DB_READY = new_EGRESS_DB_STATUS.CQ_OCC_DB_READY;



// ----------------------------------------------------------------------
// EGRESS_DB_STATUS.PDATA_LS_DB_DEPTH x2 RO/V, using RO/V template.
assign EGRESS_DB_STATUS.PDATA_LS_DB_DEPTH = new_EGRESS_DB_STATUS.PDATA_LS_DB_DEPTH;



// ----------------------------------------------------------------------
// EGRESS_DB_STATUS.PDATA_LS_DB_READY x1 RO/V, using RO/V template.
assign EGRESS_DB_STATUS.PDATA_LS_DB_READY = new_EGRESS_DB_STATUS.PDATA_LS_DB_READY;



// ----------------------------------------------------------------------
// EGRESS_DB_STATUS.PDATA_MS_DB_DEPTH x2 RO/V, using RO/V template.
assign EGRESS_DB_STATUS.PDATA_MS_DB_DEPTH = new_EGRESS_DB_STATUS.PDATA_MS_DB_DEPTH;



// ----------------------------------------------------------------------
// EGRESS_DB_STATUS.PDATA_MS_DB_READY x1 RO/V, using RO/V template.
assign EGRESS_DB_STATUS.PDATA_MS_DB_READY = new_EGRESS_DB_STATUS.PDATA_MS_DB_READY;



// ----------------------------------------------------------------------
// EGRESS_DB_STATUS.PHDR_DB_DEPTH x2 RO/V, using RO/V template.
assign EGRESS_DB_STATUS.PHDR_DB_DEPTH = new_EGRESS_DB_STATUS.PHDR_DB_DEPTH;



// ----------------------------------------------------------------------
// EGRESS_DB_STATUS.PHDR_DB_READY x1 RO/V, using RO/V template.
assign EGRESS_DB_STATUS.PHDR_DB_READY = new_EGRESS_DB_STATUS.PHDR_DB_READY;




//---------------------------------------------------------------------
// ALARM_STATUS Address Decode
// ----------------------------------------------------------------------
// ALARM_STATUS.CQ_OCC_P0_V x1 RO/V, using RO/V template.
assign ALARM_STATUS.CQ_OCC_P0_V = new_ALARM_STATUS.CQ_OCC_P0_V;



// ----------------------------------------------------------------------
// ALARM_STATUS.CQ_OCC_P1_V x1 RO/V, using RO/V template.
assign ALARM_STATUS.CQ_OCC_P1_V = new_ALARM_STATUS.CQ_OCC_P1_V;



// ----------------------------------------------------------------------
// ALARM_STATUS.CQ_OCC_P2_V x1 RO/V, using RO/V template.
assign ALARM_STATUS.CQ_OCC_P2_V = new_ALARM_STATUS.CQ_OCC_P2_V;



// ----------------------------------------------------------------------
// ALARM_STATUS.MSIX_P0_V x1 RO/V, using RO/V template.
assign ALARM_STATUS.MSIX_P0_V = new_ALARM_STATUS.MSIX_P0_V;



// ----------------------------------------------------------------------
// ALARM_STATUS.MSIX_P1_V x1 RO/V, using RO/V template.
assign ALARM_STATUS.MSIX_P1_V = new_ALARM_STATUS.MSIX_P1_V;



// ----------------------------------------------------------------------
// ALARM_STATUS.MSIX_P2_V x1 RO/V, using RO/V template.
assign ALARM_STATUS.MSIX_P2_V = new_ALARM_STATUS.MSIX_P2_V;



// ----------------------------------------------------------------------
// ALARM_STATUS.IMS_P0_V x1 RO/V, using RO/V template.
assign ALARM_STATUS.IMS_P0_V = new_ALARM_STATUS.IMS_P0_V;



// ----------------------------------------------------------------------
// ALARM_STATUS.IMS_P1_V x1 RO/V, using RO/V template.
assign ALARM_STATUS.IMS_P1_V = new_ALARM_STATUS.IMS_P1_V;



// ----------------------------------------------------------------------
// ALARM_STATUS.IMS_P2_V x1 RO/V, using RO/V template.
assign ALARM_STATUS.IMS_P2_V = new_ALARM_STATUS.IMS_P2_V;




//---------------------------------------------------------------------
// INGRESS_STATUS Address Decode
// ----------------------------------------------------------------------
// INGRESS_STATUS.P0_V x1 RO/V, using RO/V template.
assign INGRESS_STATUS.P0_V = new_INGRESS_STATUS.P0_V;



// ----------------------------------------------------------------------
// INGRESS_STATUS.P1_V x1 RO/V, using RO/V template.
assign INGRESS_STATUS.P1_V = new_INGRESS_STATUS.P1_V;



// ----------------------------------------------------------------------
// INGRESS_STATUS.P2_V x1 RO/V, using RO/V template.
assign INGRESS_STATUS.P2_V = new_INGRESS_STATUS.P2_V;



// ----------------------------------------------------------------------
// INGRESS_STATUS.P3_V x1 RO/V, using RO/V template.
assign INGRESS_STATUS.P3_V = new_INGRESS_STATUS.P3_V;



// ----------------------------------------------------------------------
// INGRESS_STATUS.P4_V x1 RO/V, using RO/V template.
assign INGRESS_STATUS.P4_V = new_INGRESS_STATUS.P4_V;



// ----------------------------------------------------------------------
// INGRESS_STATUS.P5_V x1 RO/V, using RO/V template.
assign INGRESS_STATUS.P5_V = new_INGRESS_STATUS.P5_V;



// ----------------------------------------------------------------------
// INGRESS_STATUS.P6_V x1 RO/V, using RO/V template.
assign INGRESS_STATUS.P6_V = new_INGRESS_STATUS.P6_V;



// ----------------------------------------------------------------------
// INGRESS_STATUS.P7_V x1 RO/V, using RO/V template.
assign INGRESS_STATUS.P7_V = new_INGRESS_STATUS.P7_V;



// ----------------------------------------------------------------------
// INGRESS_STATUS.P8_V x1 RO/V, using RO/V template.
assign INGRESS_STATUS.P8_V = new_INGRESS_STATUS.P8_V;




//---------------------------------------------------------------------
// EGRESS_STATUS Address Decode
// ----------------------------------------------------------------------
// EGRESS_STATUS.SCH_P0_V x1 RO/V, using RO/V template.
assign EGRESS_STATUS.SCH_P0_V = new_EGRESS_STATUS.SCH_P0_V;



// ----------------------------------------------------------------------
// EGRESS_STATUS.SCH_P1_V x1 RO/V, using RO/V template.
assign EGRESS_STATUS.SCH_P1_V = new_EGRESS_STATUS.SCH_P1_V;



// ----------------------------------------------------------------------
// EGRESS_STATUS.SCH_P2_V x1 RO/V, using RO/V template.
assign EGRESS_STATUS.SCH_P2_V = new_EGRESS_STATUS.SCH_P2_V;



// ----------------------------------------------------------------------
// EGRESS_STATUS.SCH_P3_V x1 RO/V, using RO/V template.
assign EGRESS_STATUS.SCH_P3_V = new_EGRESS_STATUS.SCH_P3_V;



// ----------------------------------------------------------------------
// EGRESS_STATUS.SCH_P4_V x1 RO/V, using RO/V template.
assign EGRESS_STATUS.SCH_P4_V = new_EGRESS_STATUS.SCH_P4_V;



// ----------------------------------------------------------------------
// EGRESS_STATUS.SCH_P5_V x1 RO/V, using RO/V template.
assign EGRESS_STATUS.SCH_P5_V = new_EGRESS_STATUS.SCH_P5_V;



// ----------------------------------------------------------------------
// EGRESS_STATUS.P5_INT_V x1 RO/V, using RO/V template.
assign EGRESS_STATUS.P5_INT_V = new_EGRESS_STATUS.P5_INT_V;



// ----------------------------------------------------------------------
// EGRESS_STATUS.P5_HCW_V x1 RO/V, using RO/V template.
assign EGRESS_STATUS.P5_HCW_V = new_EGRESS_STATUS.P5_HCW_V;




//---------------------------------------------------------------------
// WBUF_STATUS Address Decode
// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_P0_V x1 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_P0_V = new_WBUF_STATUS.SCH_P0_V;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_P1_V x1 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_P1_V = new_WBUF_STATUS.SCH_P1_V;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_P2_V x1 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_P2_V = new_WBUF_STATUS.SCH_P2_V;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_INT_V x1 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_INT_V = new_WBUF_STATUS.SCH_INT_V;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_HCW_V x1 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_HCW_V = new_WBUF_STATUS.SCH_HCW_V;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_LDB x1 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_LDB = new_WBUF_STATUS.SCH_LDB;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_BEAT x2 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_BEAT = new_WBUF_STATUS.SCH_BEAT;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_CQ x8 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_CQ = new_WBUF_STATUS.SCH_CQ;



// ----------------------------------------------------------------------
// WBUF_STATUS.PH_FIFO_AFULL x1 RO/V, using RO/V template.
assign WBUF_STATUS.PH_FIFO_AFULL = new_WBUF_STATUS.PH_FIFO_AFULL;



// ----------------------------------------------------------------------
// WBUF_STATUS.PD_FIFO_AFULL x1 RO/V, using RO/V template.
assign WBUF_STATUS.PD_FIFO_AFULL = new_WBUF_STATUS.PD_FIFO_AFULL;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_SM_STATE x5 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_SM_STATE = new_WBUF_STATUS.SCH_SM_STATE;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_P2_HDR_V x1 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_P2_HDR_V = new_WBUF_STATUS.SCH_P2_HDR_V;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_P2_DATA_V x1 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_P2_DATA_V = new_WBUF_STATUS.SCH_P2_DATA_V;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_P2_INT_V x1 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_P2_INT_V = new_WBUF_STATUS.SCH_P2_INT_V;



// ----------------------------------------------------------------------
// WBUF_STATUS.SCH_P2_SOP x1 RO/V, using RO/V template.
assign WBUF_STATUS.SCH_P2_SOP = new_WBUF_STATUS.SCH_P2_SOP;




//---------------------------------------------------------------------
// WBUF_STATUS2 Address Decode
// ----------------------------------------------------------------------
// WBUF_STATUS2.ARB_REQS x2 RO/V, using RO/V template.
assign WBUF_STATUS2.ARB_REQS = new_WBUF_STATUS2.ARB_REQS;



// ----------------------------------------------------------------------
// WBUF_STATUS2.ARB_WINNER x1 RO/V, using RO/V template.
assign WBUF_STATUS2.ARB_WINNER = new_WBUF_STATUS2.ARB_WINNER;



// ----------------------------------------------------------------------
// WBUF_STATUS2.ARB_HOLD x1 RO/V, using RO/V template.
assign WBUF_STATUS2.ARB_HOLD = new_WBUF_STATUS2.ARB_HOLD;



// ----------------------------------------------------------------------
// WBUF_STATUS2.CQ_OCC_INT_BUSY x1 RO/V, using RO/V template.
assign WBUF_STATUS2.CQ_OCC_INT_BUSY = new_WBUF_STATUS2.CQ_OCC_INT_BUSY;



// ----------------------------------------------------------------------
// WBUF_STATUS2.OPT_DATA_VALID x1 RO/V, using RO/V template.
assign WBUF_STATUS2.OPT_DATA_VALID = new_WBUF_STATUS2.OPT_DATA_VALID;



// ----------------------------------------------------------------------
// WBUF_STATUS2.OPT_ERR x1 RO/V, using RO/V template.
assign WBUF_STATUS2.OPT_ERR = new_WBUF_STATUS2.OPT_ERR;



// ----------------------------------------------------------------------
// WBUF_STATUS2.OPT_IN_PROG x1 RO/V, using RO/V template.
assign WBUF_STATUS2.OPT_IN_PROG = new_WBUF_STATUS2.OPT_IN_PROG;



// ----------------------------------------------------------------------
// WBUF_STATUS2.OPT_IN_PROG_CQ x1 RO/V, using RO/V template.
assign WBUF_STATUS2.OPT_IN_PROG_CQ = new_WBUF_STATUS2.OPT_IN_PROG_CQ;




//---------------------------------------------------------------------
// WBUF_DEBUG Address Decode
// ----------------------------------------------------------------------
// WBUF_DEBUG.ARB_WINNER_Q x1 RO/V, using RO/V template.
assign WBUF_DEBUG.ARB_WINNER_Q = new_WBUF_DEBUG.ARB_WINNER_Q;



// ----------------------------------------------------------------------
// WBUF_DEBUG.ARB_HOLD_Q x1 RO/V, using RO/V template.
assign WBUF_DEBUG.ARB_HOLD_Q = new_WBUF_DEBUG.ARB_HOLD_Q;



// ----------------------------------------------------------------------
// WBUF_DEBUG.ARB_WINNER x1 RO/V, using RO/V template.
assign WBUF_DEBUG.ARB_WINNER = new_WBUF_DEBUG.ARB_WINNER;



// ----------------------------------------------------------------------
// WBUF_DEBUG.ARB_WINNER_V x1 RO/V, using RO/V template.
assign WBUF_DEBUG.ARB_WINNER_V = new_WBUF_DEBUG.ARB_WINNER_V;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_ARB_REQ x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_ARB_REQ = new_WBUF_DEBUG.SCH_ARB_REQ;



// ----------------------------------------------------------------------
// WBUF_DEBUG.MSI_MSIX_ARB_REQ x1 RO/V, using RO/V template.
assign WBUF_DEBUG.MSI_MSIX_ARB_REQ = new_WBUF_DEBUG.MSI_MSIX_ARB_REQ;



// ----------------------------------------------------------------------
// WBUF_DEBUG.PDATA_FIFO_AFULL_Q x1 RO/V, using RO/V template.
assign WBUF_DEBUG.PDATA_FIFO_AFULL_Q = new_WBUF_DEBUG.PDATA_FIFO_AFULL_Q;



// ----------------------------------------------------------------------
// WBUF_DEBUG.PHDR_FIFO_AFULL_Q x1 RO/V, using RO/V template.
assign WBUF_DEBUG.PHDR_FIFO_AFULL_Q = new_WBUF_DEBUG.PHDR_FIFO_AFULL_Q;



// ----------------------------------------------------------------------
// WBUF_DEBUG.CQ_OCC_INT_BUSY x1 RO/V, using RO/V template.
assign WBUF_DEBUG.CQ_OCC_INT_BUSY = new_WBUF_DEBUG.CQ_OCC_INT_BUSY;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_DATA_LAST x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_DATA_LAST = new_WBUF_DEBUG.SCH_DATA_LAST;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_DATA_FIRST x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_DATA_FIRST = new_WBUF_DEBUG.SCH_DATA_FIRST;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_DATA_V x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_DATA_V = new_WBUF_DEBUG.SCH_DATA_V;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_HDR_V x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_HDR_V = new_WBUF_DEBUG.SCH_HDR_V;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_P2_HDR_Q_EOP x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_P2_HDR_Q_EOP = new_WBUF_DEBUG.SCH_P2_HDR_Q_EOP;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_P2_HDR_Q_SOP x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_P2_HDR_Q_SOP = new_WBUF_DEBUG.SCH_P2_HDR_Q_SOP;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_P2_HDR_Q_INT_V x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_P2_HDR_Q_INT_V = new_WBUF_DEBUG.SCH_P2_HDR_Q_INT_V;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_P2_HDR_Q_DATA_V x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_P2_HDR_Q_DATA_V = new_WBUF_DEBUG.SCH_P2_HDR_Q_DATA_V;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_P2_V_Q x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_P2_V_Q = new_WBUF_DEBUG.SCH_P2_V_Q;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_P2_LOAD x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_P2_LOAD = new_WBUF_DEBUG.SCH_P2_LOAD;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_P2_HOLD x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_P2_HOLD = new_WBUF_DEBUG.SCH_P2_HOLD;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_P2_HDR_Q_VF x4 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_P2_HDR_Q_VF = new_WBUF_DEBUG.SCH_P2_HDR_Q_VF;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_P2_HDR_Q_IS_PF x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_P2_HDR_Q_IS_PF = new_WBUF_DEBUG.SCH_P2_HDR_Q_IS_PF;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_P2_HDR_Q_LDB x1 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_P2_HDR_Q_LDB = new_WBUF_DEBUG.SCH_P2_HDR_Q_LDB;



// ----------------------------------------------------------------------
// WBUF_DEBUG.SCH_P2_HDR_Q_BEATS x3 RO/V, using RO/V template.
assign WBUF_DEBUG.SCH_P2_HDR_Q_BEATS = new_WBUF_DEBUG.SCH_P2_HDR_Q_BEATS;




//---------------------------------------------------------------------
// ROB_SYNDROME Address Decode
logic  addr_decode_ROB_SYNDROME;
logic  write_req_ROB_SYNDROME;
always_comb begin
   addr_decode_ROB_SYNDROME = (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN] == ROB_SYNDROME_DECODE_ADDR) && req.valid ;
   write_req_ROB_SYNDROME = IsMEMWr && addr_decode_ROB_SYNDROME && sai_HQM_OS_W_write_en;
end

// ----------------------------------------------------------------------
// ROB_SYNDROME.ROB_V_CNT x3 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [2:0] req_up_ROB_SYNDROME_ROB_V_CNT;
always_comb begin
 req_up_ROB_SYNDROME_ROB_V_CNT[2:0] = 
   {3{write_req_ROB_SYNDROME & be[0]}}
;
end

logic [2:0] clr_ROB_SYNDROME_ROB_V_CNT;
always_comb begin
 clr_ROB_SYNDROME_ROB_V_CNT = write_data[2:0] & req_up_ROB_SYNDROME_ROB_V_CNT;

end
logic [2:0] swwr_ROB_SYNDROME_ROB_V_CNT;
logic [2:0] sw_nxt_ROB_SYNDROME_ROB_V_CNT;
always_comb begin
 swwr_ROB_SYNDROME_ROB_V_CNT = clr_ROB_SYNDROME_ROB_V_CNT;
 sw_nxt_ROB_SYNDROME_ROB_V_CNT = {3{1'b0}};

end
logic [2:0] up_ROB_SYNDROME_ROB_V_CNT;
logic [2:0] nxt_ROB_SYNDROME_ROB_V_CNT;
always_comb begin
 up_ROB_SYNDROME_ROB_V_CNT = 
   swwr_ROB_SYNDROME_ROB_V_CNT | {3{load_ROB_SYNDROME.ROB_V_CNT}};
end
always_comb begin
 nxt_ROB_SYNDROME_ROB_V_CNT[0] = 
    load_ROB_SYNDROME.ROB_V_CNT ?
    new_ROB_SYNDROME.ROB_V_CNT[0] :
    sw_nxt_ROB_SYNDROME_ROB_V_CNT[0];
 nxt_ROB_SYNDROME_ROB_V_CNT[1] = 
    load_ROB_SYNDROME.ROB_V_CNT ?
    new_ROB_SYNDROME.ROB_V_CNT[1] :
    sw_nxt_ROB_SYNDROME_ROB_V_CNT[1];
 nxt_ROB_SYNDROME_ROB_V_CNT[2] = 
    load_ROB_SYNDROME.ROB_V_CNT ?
    new_ROB_SYNDROME.ROB_V_CNT[2] :
    sw_nxt_ROB_SYNDROME_ROB_V_CNT[2];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_ROB_V_CNT[0], nxt_ROB_SYNDROME_ROB_V_CNT[0], ROB_SYNDROME.ROB_V_CNT[0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_ROB_V_CNT[1], nxt_ROB_SYNDROME_ROB_V_CNT[1], ROB_SYNDROME.ROB_V_CNT[1])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_ROB_V_CNT[2], nxt_ROB_SYNDROME_ROB_V_CNT[2], ROB_SYNDROME.ROB_V_CNT[2])

// ----------------------------------------------------------------------
// ROB_SYNDROME.CL_LAST x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ROB_SYNDROME_CL_LAST;
always_comb begin
 req_up_ROB_SYNDROME_CL_LAST[0:0] = 
   {1{write_req_ROB_SYNDROME & be[0]}}
;
end

logic [0:0] clr_ROB_SYNDROME_CL_LAST;
always_comb begin
 clr_ROB_SYNDROME_CL_LAST = write_data[3:3] & req_up_ROB_SYNDROME_CL_LAST;

end
logic [0:0] swwr_ROB_SYNDROME_CL_LAST;
logic [0:0] sw_nxt_ROB_SYNDROME_CL_LAST;
always_comb begin
 swwr_ROB_SYNDROME_CL_LAST = clr_ROB_SYNDROME_CL_LAST;
 sw_nxt_ROB_SYNDROME_CL_LAST = {1{1'b0}};

end
logic [0:0] up_ROB_SYNDROME_CL_LAST;
logic [0:0] nxt_ROB_SYNDROME_CL_LAST;
always_comb begin
 up_ROB_SYNDROME_CL_LAST = 
   swwr_ROB_SYNDROME_CL_LAST | {1{load_ROB_SYNDROME.CL_LAST}};
end
always_comb begin
 nxt_ROB_SYNDROME_CL_LAST[0] = 
    load_ROB_SYNDROME.CL_LAST ?
    new_ROB_SYNDROME.CL_LAST[0] :
    sw_nxt_ROB_SYNDROME_CL_LAST[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_CL_LAST[0], nxt_ROB_SYNDROME_CL_LAST[0], ROB_SYNDROME.CL_LAST[0])

// ----------------------------------------------------------------------
// ROB_SYNDROME.CLI x2 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [1:0] req_up_ROB_SYNDROME_CLI;
always_comb begin
 req_up_ROB_SYNDROME_CLI[1:0] = 
   {2{write_req_ROB_SYNDROME & be[0]}}
;
end

logic [1:0] clr_ROB_SYNDROME_CLI;
always_comb begin
 clr_ROB_SYNDROME_CLI = write_data[5:4] & req_up_ROB_SYNDROME_CLI;

end
logic [1:0] swwr_ROB_SYNDROME_CLI;
logic [1:0] sw_nxt_ROB_SYNDROME_CLI;
always_comb begin
 swwr_ROB_SYNDROME_CLI = clr_ROB_SYNDROME_CLI;
 sw_nxt_ROB_SYNDROME_CLI = {2{1'b0}};

end
logic [1:0] up_ROB_SYNDROME_CLI;
logic [1:0] nxt_ROB_SYNDROME_CLI;
always_comb begin
 up_ROB_SYNDROME_CLI = 
   swwr_ROB_SYNDROME_CLI | {2{load_ROB_SYNDROME.CLI}};
end
always_comb begin
 nxt_ROB_SYNDROME_CLI[0] = 
    load_ROB_SYNDROME.CLI ?
    new_ROB_SYNDROME.CLI[0] :
    sw_nxt_ROB_SYNDROME_CLI[0];
 nxt_ROB_SYNDROME_CLI[1] = 
    load_ROB_SYNDROME.CLI ?
    new_ROB_SYNDROME.CLI[1] :
    sw_nxt_ROB_SYNDROME_CLI[1];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_CLI[0], nxt_ROB_SYNDROME_CLI[0], ROB_SYNDROME.CLI[0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_CLI[1], nxt_ROB_SYNDROME_CLI[1], ROB_SYNDROME.CLI[1])

// ----------------------------------------------------------------------
// ROB_SYNDROME.CL x2 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [3:0] req_up_ROB_SYNDROME_CL;
always_comb begin
 req_up_ROB_SYNDROME_CL[1:0] = 
   {2{write_req_ROB_SYNDROME & be[0]}}
;
 req_up_ROB_SYNDROME_CL[3:2] = 
   {2{write_req_ROB_SYNDROME & be[1]}}
;
end

logic [3:0] clr_ROB_SYNDROME_CL;
always_comb begin
 clr_ROB_SYNDROME_CL = write_data[9:6] & req_up_ROB_SYNDROME_CL;

end
logic [3:0] swwr_ROB_SYNDROME_CL;
logic [3:0] sw_nxt_ROB_SYNDROME_CL;
always_comb begin
 swwr_ROB_SYNDROME_CL = clr_ROB_SYNDROME_CL;
 sw_nxt_ROB_SYNDROME_CL = {4{1'b0}};

end
logic [3:0] up_ROB_SYNDROME_CL;
logic [3:0] nxt_ROB_SYNDROME_CL;
always_comb begin
 up_ROB_SYNDROME_CL = 
   swwr_ROB_SYNDROME_CL | {4{load_ROB_SYNDROME.CL}};
end
always_comb begin
 nxt_ROB_SYNDROME_CL[0] = 
    load_ROB_SYNDROME.CL ?
    new_ROB_SYNDROME.CL[0] :
    sw_nxt_ROB_SYNDROME_CL[0];
 nxt_ROB_SYNDROME_CL[1] = 
    load_ROB_SYNDROME.CL ?
    new_ROB_SYNDROME.CL[1] :
    sw_nxt_ROB_SYNDROME_CL[1];
 nxt_ROB_SYNDROME_CL[2] = 
    load_ROB_SYNDROME.CL ?
    new_ROB_SYNDROME.CL[2] :
    sw_nxt_ROB_SYNDROME_CL[2];
 nxt_ROB_SYNDROME_CL[3] = 
    load_ROB_SYNDROME.CL ?
    new_ROB_SYNDROME.CL[3] :
    sw_nxt_ROB_SYNDROME_CL[3];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_CL[0], nxt_ROB_SYNDROME_CL[0], ROB_SYNDROME.CL[0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_CL[1], nxt_ROB_SYNDROME_CL[1], ROB_SYNDROME.CL[1])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_CL[2], nxt_ROB_SYNDROME_CL[2], ROB_SYNDROME.CL[2])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_CL[3], nxt_ROB_SYNDROME_CL[3], ROB_SYNDROME.CL[3])

// ----------------------------------------------------------------------
// ROB_SYNDROME.PP x6 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [5:0] req_up_ROB_SYNDROME_PP;
always_comb begin
 req_up_ROB_SYNDROME_PP[5:0] = 
   {6{write_req_ROB_SYNDROME & be[1]}}
;
end

logic [5:0] clr_ROB_SYNDROME_PP;
always_comb begin
 clr_ROB_SYNDROME_PP = write_data[15:10] & req_up_ROB_SYNDROME_PP;

end
logic [5:0] swwr_ROB_SYNDROME_PP;
logic [5:0] sw_nxt_ROB_SYNDROME_PP;
always_comb begin
 swwr_ROB_SYNDROME_PP = clr_ROB_SYNDROME_PP;
 sw_nxt_ROB_SYNDROME_PP = {6{1'b0}};

end
logic [5:0] up_ROB_SYNDROME_PP;
logic [5:0] nxt_ROB_SYNDROME_PP;
always_comb begin
 up_ROB_SYNDROME_PP = 
   swwr_ROB_SYNDROME_PP | {6{load_ROB_SYNDROME.PP}};
end
always_comb begin
 nxt_ROB_SYNDROME_PP[0] = 
    load_ROB_SYNDROME.PP ?
    new_ROB_SYNDROME.PP[0] :
    sw_nxt_ROB_SYNDROME_PP[0];
 nxt_ROB_SYNDROME_PP[1] = 
    load_ROB_SYNDROME.PP ?
    new_ROB_SYNDROME.PP[1] :
    sw_nxt_ROB_SYNDROME_PP[1];
 nxt_ROB_SYNDROME_PP[2] = 
    load_ROB_SYNDROME.PP ?
    new_ROB_SYNDROME.PP[2] :
    sw_nxt_ROB_SYNDROME_PP[2];
 nxt_ROB_SYNDROME_PP[3] = 
    load_ROB_SYNDROME.PP ?
    new_ROB_SYNDROME.PP[3] :
    sw_nxt_ROB_SYNDROME_PP[3];
 nxt_ROB_SYNDROME_PP[4] = 
    load_ROB_SYNDROME.PP ?
    new_ROB_SYNDROME.PP[4] :
    sw_nxt_ROB_SYNDROME_PP[4];
 nxt_ROB_SYNDROME_PP[5] = 
    load_ROB_SYNDROME.PP ?
    new_ROB_SYNDROME.PP[5] :
    sw_nxt_ROB_SYNDROME_PP[5];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_PP[0], nxt_ROB_SYNDROME_PP[0], ROB_SYNDROME.PP[0])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_PP[1], nxt_ROB_SYNDROME_PP[1], ROB_SYNDROME.PP[1])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_PP[2], nxt_ROB_SYNDROME_PP[2], ROB_SYNDROME.PP[2])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_PP[3], nxt_ROB_SYNDROME_PP[3], ROB_SYNDROME.PP[3])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_PP[4], nxt_ROB_SYNDROME_PP[4], ROB_SYNDROME.PP[4])
`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_PP[5], nxt_ROB_SYNDROME_PP[5], ROB_SYNDROME.PP[5])

// ----------------------------------------------------------------------
// ROB_SYNDROME.PP_IS_LDB x1 RW/1C/V, using RW/1C/V template.
// clear the each bit when writing a 1
logic [0:0] req_up_ROB_SYNDROME_PP_IS_LDB;
always_comb begin
 req_up_ROB_SYNDROME_PP_IS_LDB[0:0] = 
   {1{write_req_ROB_SYNDROME & be[2]}}
;
end

logic [0:0] clr_ROB_SYNDROME_PP_IS_LDB;
always_comb begin
 clr_ROB_SYNDROME_PP_IS_LDB = write_data[16:16] & req_up_ROB_SYNDROME_PP_IS_LDB;

end
logic [0:0] swwr_ROB_SYNDROME_PP_IS_LDB;
logic [0:0] sw_nxt_ROB_SYNDROME_PP_IS_LDB;
always_comb begin
 swwr_ROB_SYNDROME_PP_IS_LDB = clr_ROB_SYNDROME_PP_IS_LDB;
 sw_nxt_ROB_SYNDROME_PP_IS_LDB = {1{1'b0}};

end
logic [0:0] up_ROB_SYNDROME_PP_IS_LDB;
logic [0:0] nxt_ROB_SYNDROME_PP_IS_LDB;
always_comb begin
 up_ROB_SYNDROME_PP_IS_LDB = 
   swwr_ROB_SYNDROME_PP_IS_LDB | {1{load_ROB_SYNDROME.PP_IS_LDB}};
end
always_comb begin
 nxt_ROB_SYNDROME_PP_IS_LDB[0] = 
    load_ROB_SYNDROME.PP_IS_LDB ?
    new_ROB_SYNDROME.PP_IS_LDB[0] :
    sw_nxt_ROB_SYNDROME_PP_IS_LDB[0];
end



`RTLGEN_HQM_SYSTEM_CSR_EN_FF(rtl_clk, hqm_inp_gated_rst_n, 1'h0, up_ROB_SYNDROME_PP_IS_LDB[0], nxt_ROB_SYNDROME_PP_IS_LDB[0], ROB_SYNDROME.PP_IS_LDB[0])

//---------------------------------------------------------------------
// PHDR_DEBUG_0 Address Decode
// ----------------------------------------------------------------------
// PHDR_DEBUG_0.TC_SEL x2 RO/V, using RO/V template.
assign PHDR_DEBUG_0.TC_SEL = new_PHDR_DEBUG_0.TC_SEL;



// ----------------------------------------------------------------------
// PHDR_DEBUG_0.ADDR_31_2 x8 RO/V, using RO/V template.
assign PHDR_DEBUG_0.ADDR_31_2 = new_PHDR_DEBUG_0.ADDR_31_2;




//---------------------------------------------------------------------
// PHDR_DEBUG_1 Address Decode
// ----------------------------------------------------------------------
// PHDR_DEBUG_1.ADDR_63_32 x8 RO/V, using RO/V template.
assign PHDR_DEBUG_1.ADDR_63_32 = new_PHDR_DEBUG_1.ADDR_63_32;




//---------------------------------------------------------------------
// PHDR_DEBUG_2 Address Decode
// ----------------------------------------------------------------------
// PHDR_DEBUG_2.LENGTH x5 RO/V, using RO/V template.
assign PHDR_DEBUG_2.LENGTH = new_PHDR_DEBUG_2.LENGTH;



// ----------------------------------------------------------------------
// PHDR_DEBUG_2.SRC x2 RO/V, using RO/V template.
assign PHDR_DEBUG_2.SRC = new_PHDR_DEBUG_2.SRC;



// ----------------------------------------------------------------------
// PHDR_DEBUG_2.NUM_HCWS x2 RO/V, using RO/V template.
assign PHDR_DEBUG_2.NUM_HCWS = new_PHDR_DEBUG_2.NUM_HCWS;



// ----------------------------------------------------------------------
// PHDR_DEBUG_2.CQ x6 RO/V, using RO/V template.
assign PHDR_DEBUG_2.CQ = new_PHDR_DEBUG_2.CQ;



// ----------------------------------------------------------------------
// PHDR_DEBUG_2.LDB x1 RO/V, using RO/V template.
assign PHDR_DEBUG_2.LDB = new_PHDR_DEBUG_2.LDB;



// ----------------------------------------------------------------------
// PHDR_DEBUG_2.CQ_V x1 RO/V, using RO/V template.
assign PHDR_DEBUG_2.CQ_V = new_PHDR_DEBUG_2.CQ_V;



// ----------------------------------------------------------------------
// PHDR_DEBUG_2.RO x1 RO/V, using RO/V template.
assign PHDR_DEBUG_2.RO = new_PHDR_DEBUG_2.RO;



// ----------------------------------------------------------------------
// PHDR_DEBUG_2.INVALID x1 RO/V, using RO/V template.
assign PHDR_DEBUG_2.INVALID = new_PHDR_DEBUG_2.INVALID;




//---------------------------------------------------------------------
// HQM_PDATA_DEBUG Address Decode
// ----------------------------------------------------------------------
// HQM_PDATA_DEBUG.DATA x8 RO/V, using RO/V template.
assign HQM_PDATA_DEBUG[0].DATA = new_HQM_PDATA_DEBUG[0].DATA;

assign HQM_PDATA_DEBUG[1].DATA = new_HQM_PDATA_DEBUG[1].DATA;

assign HQM_PDATA_DEBUG[2].DATA = new_HQM_PDATA_DEBUG[2].DATA;

assign HQM_PDATA_DEBUG[3].DATA = new_HQM_PDATA_DEBUG[3].DATA;

assign HQM_PDATA_DEBUG[4].DATA = new_HQM_PDATA_DEBUG[4].DATA;

assign HQM_PDATA_DEBUG[5].DATA = new_HQM_PDATA_DEBUG[5].DATA;

assign HQM_PDATA_DEBUG[6].DATA = new_HQM_PDATA_DEBUG[6].DATA;

assign HQM_PDATA_DEBUG[7].DATA = new_HQM_PDATA_DEBUG[7].DATA;

assign HQM_PDATA_DEBUG[8].DATA = new_HQM_PDATA_DEBUG[8].DATA;

assign HQM_PDATA_DEBUG[9].DATA = new_HQM_PDATA_DEBUG[9].DATA;

assign HQM_PDATA_DEBUG[10].DATA = new_HQM_PDATA_DEBUG[10].DATA;

assign HQM_PDATA_DEBUG[11].DATA = new_HQM_PDATA_DEBUG[11].DATA;

assign HQM_PDATA_DEBUG[12].DATA = new_HQM_PDATA_DEBUG[12].DATA;

assign HQM_PDATA_DEBUG[13].DATA = new_HQM_PDATA_DEBUG[13].DATA;

assign HQM_PDATA_DEBUG[14].DATA = new_HQM_PDATA_DEBUG[14].DATA;

assign HQM_PDATA_DEBUG[15].DATA = new_HQM_PDATA_DEBUG[15].DATA;




//---------------------------------------------------------------------
// HCW_REQ_DEBUG Address Decode
// ----------------------------------------------------------------------
// HCW_REQ_DEBUG.PP x8 RO/V, using RO/V template.
assign HCW_REQ_DEBUG.PP = new_HCW_REQ_DEBUG.PP;



// ----------------------------------------------------------------------
// HCW_REQ_DEBUG.QID x8 RO/V, using RO/V template.
assign HCW_REQ_DEBUG.QID = new_HCW_REQ_DEBUG.QID;



// ----------------------------------------------------------------------
// HCW_REQ_DEBUG.VAS x5 RO/V, using RO/V template.
assign HCW_REQ_DEBUG.VAS = new_HCW_REQ_DEBUG.VAS;



// ----------------------------------------------------------------------
// HCW_REQ_DEBUG.PP_IS_LDB x1 RO/V, using RO/V template.
assign HCW_REQ_DEBUG.PP_IS_LDB = new_HCW_REQ_DEBUG.PP_IS_LDB;



// ----------------------------------------------------------------------
// HCW_REQ_DEBUG.QE_IS_LDB x1 RO/V, using RO/V template.
assign HCW_REQ_DEBUG.QE_IS_LDB = new_HCW_REQ_DEBUG.QE_IS_LDB;



// ----------------------------------------------------------------------
// HCW_REQ_DEBUG.INSERT_TS x1 RO/V, using RO/V template.
assign HCW_REQ_DEBUG.INSERT_TS = new_HCW_REQ_DEBUG.INSERT_TS;



// ----------------------------------------------------------------------
// HCW_REQ_DEBUG.AO_V x1 RO/V, using RO/V template.
assign HCW_REQ_DEBUG.AO_V = new_HCW_REQ_DEBUG.AO_V;



// ----------------------------------------------------------------------
// HCW_REQ_DEBUG.PARITY x1 RO/V, using RO/V template.
assign HCW_REQ_DEBUG.PARITY = new_HCW_REQ_DEBUG.PARITY;




//---------------------------------------------------------------------
// HQM_HCW_DATA_DEBUG Address Decode
// ----------------------------------------------------------------------
// HQM_HCW_DATA_DEBUG.DATA x8 RO/V, using RO/V template.
assign HQM_HCW_DATA_DEBUG[0].DATA = new_HQM_HCW_DATA_DEBUG[0].DATA;

assign HQM_HCW_DATA_DEBUG[1].DATA = new_HQM_HCW_DATA_DEBUG[1].DATA;

assign HQM_HCW_DATA_DEBUG[2].DATA = new_HQM_HCW_DATA_DEBUG[2].DATA;

assign HQM_HCW_DATA_DEBUG[3].DATA = new_HQM_HCW_DATA_DEBUG[3].DATA;




// ----------------------------------------------------------------------
// AW_SMON_CONFIGURATION0 using HANDCODED_REG template.
logic addr_decode_AW_SMON_CONFIGURATION0;
logic write_req_AW_SMON_CONFIGURATION0;
logic read_req_AW_SMON_CONFIGURATION0;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?00,2'b00}: 
         addr_decode_AW_SMON_CONFIGURATION0 = req.valid;
      default: 
         addr_decode_AW_SMON_CONFIGURATION0 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_CONFIGURATION0 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_CONFIGURATION0  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_CONFIGURATION0  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_CONFIGURATION0  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_CONFIGURATION0 = {4{write_req_AW_SMON_CONFIGURATION0}} & req.be[3:0];
always_comb re_AW_SMON_CONFIGURATION0 = {4{read_req_AW_SMON_CONFIGURATION0}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_CONFIGURATION0 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_CONFIGURATION1 using HANDCODED_REG template.
logic addr_decode_AW_SMON_CONFIGURATION1;
logic write_req_AW_SMON_CONFIGURATION1;
logic read_req_AW_SMON_CONFIGURATION1;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?00,2'b01}: 
         addr_decode_AW_SMON_CONFIGURATION1 = req.valid;
      default: 
         addr_decode_AW_SMON_CONFIGURATION1 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_CONFIGURATION1 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_CONFIGURATION1  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_CONFIGURATION1  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_CONFIGURATION1  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_CONFIGURATION1 = {4{write_req_AW_SMON_CONFIGURATION1}} & req.be[3:0];
always_comb re_AW_SMON_CONFIGURATION1 = {4{read_req_AW_SMON_CONFIGURATION1}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_CONFIGURATION1 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_COMPARE0 using HANDCODED_REG template.
logic addr_decode_AW_SMON_COMPARE0;
logic write_req_AW_SMON_COMPARE0;
logic read_req_AW_SMON_COMPARE0;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?00,2'b10}: 
         addr_decode_AW_SMON_COMPARE0 = req.valid;
      default: 
         addr_decode_AW_SMON_COMPARE0 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_COMPARE0 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_COMPARE0  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_COMPARE0  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_COMPARE0  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_COMPARE0 = {4{write_req_AW_SMON_COMPARE0}} & req.be[3:0];
always_comb re_AW_SMON_COMPARE0 = {4{read_req_AW_SMON_COMPARE0}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_COMPARE0 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_COMPARE1 using HANDCODED_REG template.
logic addr_decode_AW_SMON_COMPARE1;
logic write_req_AW_SMON_COMPARE1;
logic read_req_AW_SMON_COMPARE1;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?00,2'b11}: 
         addr_decode_AW_SMON_COMPARE1 = req.valid;
      default: 
         addr_decode_AW_SMON_COMPARE1 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_COMPARE1 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_COMPARE1  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_COMPARE1  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_COMPARE1  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_COMPARE1 = {4{write_req_AW_SMON_COMPARE1}} & req.be[3:0];
always_comb re_AW_SMON_COMPARE1 = {4{read_req_AW_SMON_COMPARE1}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_COMPARE1 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_ACTIVITYCOUNTER0 using HANDCODED_REG template.
logic addr_decode_AW_SMON_ACTIVITYCOUNTER0;
logic write_req_AW_SMON_ACTIVITYCOUNTER0;
logic read_req_AW_SMON_ACTIVITYCOUNTER0;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?01,2'b00}: 
         addr_decode_AW_SMON_ACTIVITYCOUNTER0 = req.valid;
      default: 
         addr_decode_AW_SMON_ACTIVITYCOUNTER0 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_ACTIVITYCOUNTER0 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_ACTIVITYCOUNTER0  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_ACTIVITYCOUNTER0  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_ACTIVITYCOUNTER0  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_ACTIVITYCOUNTER0 = {4{write_req_AW_SMON_ACTIVITYCOUNTER0}} & req.be[3:0];
always_comb re_AW_SMON_ACTIVITYCOUNTER0 = {4{read_req_AW_SMON_ACTIVITYCOUNTER0}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER0 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_ACTIVITYCOUNTER1 using HANDCODED_REG template.
logic addr_decode_AW_SMON_ACTIVITYCOUNTER1;
logic write_req_AW_SMON_ACTIVITYCOUNTER1;
logic read_req_AW_SMON_ACTIVITYCOUNTER1;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?01,2'b01}: 
         addr_decode_AW_SMON_ACTIVITYCOUNTER1 = req.valid;
      default: 
         addr_decode_AW_SMON_ACTIVITYCOUNTER1 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_ACTIVITYCOUNTER1 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_ACTIVITYCOUNTER1  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_ACTIVITYCOUNTER1  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_ACTIVITYCOUNTER1  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_ACTIVITYCOUNTER1 = {4{write_req_AW_SMON_ACTIVITYCOUNTER1}} & req.be[3:0];
always_comb re_AW_SMON_ACTIVITYCOUNTER1 = {4{read_req_AW_SMON_ACTIVITYCOUNTER1}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_ACTIVITYCOUNTER1 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_TIMER using HANDCODED_REG template.
logic addr_decode_AW_SMON_TIMER;
logic write_req_AW_SMON_TIMER;
logic read_req_AW_SMON_TIMER;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?01,2'b10}: 
         addr_decode_AW_SMON_TIMER = req.valid;
      default: 
         addr_decode_AW_SMON_TIMER = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_TIMER = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_TIMER  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_TIMER  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_TIMER  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_TIMER = {4{write_req_AW_SMON_TIMER}} & req.be[3:0];
always_comb re_AW_SMON_TIMER = {4{read_req_AW_SMON_TIMER}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_TIMER = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_MAXIMUM_TIMER using HANDCODED_REG template.
logic addr_decode_AW_SMON_MAXIMUM_TIMER;
logic write_req_AW_SMON_MAXIMUM_TIMER;
logic read_req_AW_SMON_MAXIMUM_TIMER;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?01,2'b11}: 
         addr_decode_AW_SMON_MAXIMUM_TIMER = req.valid;
      default: 
         addr_decode_AW_SMON_MAXIMUM_TIMER = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_MAXIMUM_TIMER = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_MAXIMUM_TIMER  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_MAXIMUM_TIMER  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_MAXIMUM_TIMER  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_MAXIMUM_TIMER = {4{write_req_AW_SMON_MAXIMUM_TIMER}} & req.be[3:0];
always_comb re_AW_SMON_MAXIMUM_TIMER = {4{read_req_AW_SMON_MAXIMUM_TIMER}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_MAXIMUM_TIMER = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_COMP_MASK0 using HANDCODED_REG template.
logic addr_decode_AW_SMON_COMP_MASK0;
logic write_req_AW_SMON_COMP_MASK0;
logic read_req_AW_SMON_COMP_MASK0;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?10,2'b00}: 
         addr_decode_AW_SMON_COMP_MASK0 = req.valid;
      default: 
         addr_decode_AW_SMON_COMP_MASK0 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_COMP_MASK0 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_COMP_MASK0  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_COMP_MASK0  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_COMP_MASK0  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_COMP_MASK0 = {4{write_req_AW_SMON_COMP_MASK0}} & req.be[3:0];
always_comb re_AW_SMON_COMP_MASK0 = {4{read_req_AW_SMON_COMP_MASK0}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_COMP_MASK0 = req.data[31:0];


// ----------------------------------------------------------------------
// AW_SMON_COMP_MASK1 using HANDCODED_REG template.
logic addr_decode_AW_SMON_COMP_MASK1;
logic write_req_AW_SMON_COMP_MASK1;
logic read_req_AW_SMON_COMP_MASK1;

always_comb begin 
   unique casez (req_addr[HQM_SYSTEM_CSR_MEM_ADDR_MSB:ADDR_LSB_BUS_ALIGN]) 
      {40'h80020,4'b0?10,2'b01}: 
         addr_decode_AW_SMON_COMP_MASK1 = req.valid;
      default: 
         addr_decode_AW_SMON_COMP_MASK1 = 1'b0; 
   endcase
end

always_comb write_req_AW_SMON_COMP_MASK1 = f_IsMEMWr(req_opcode) && addr_decode_AW_SMON_COMP_MASK1  && sai_HQM_OS_W_write_en;
always_comb read_req_AW_SMON_COMP_MASK1  = f_IsMEMRd(req_opcode) && addr_decode_AW_SMON_COMP_MASK1  && sai_HQM_OS_W_read_en;

always_comb we_AW_SMON_COMP_MASK1 = {4{write_req_AW_SMON_COMP_MASK1}} & req.be[3:0];
always_comb re_AW_SMON_COMP_MASK1 = {4{read_req_AW_SMON_COMP_MASK1}} & req.be[3:0];
always_comb handcode_reg_wdata_AW_SMON_COMP_MASK1 = req.data[31:0];

// Shared registers assignments


// end register logic section }

always_comb begin : MISS_VALID_BLOCK

   unique casez (req_opcode) 
      MRD: begin
         ack.read_valid = req_valid;
         ack.write_valid  = 1'b0; 
         ack.write_miss = ack.write_valid; 
         unique casez (case_req_addr_HQM_SYSTEM_CSR_MEM) 
           TOTAL_CREDITS_DECODE_ADDR: ack.read_miss = 1'b0;
           TOTAL_LDB_QID_DECODE_ADDR: ack.read_miss = 1'b0;
           TOTAL_DIR_QID_DECODE_ADDR: ack.read_miss = 1'b0;
           TOTAL_LDB_PORTS_DECODE_ADDR: ack.read_miss = 1'b0;
           TOTAL_DIR_PORTS_DECODE_ADDR: ack.read_miss = 1'b0;
           TOTAL_VAS_DECODE_ADDR: ack.read_miss = 1'b0;
           TOTAL_SN_REGIONS_DECODE_ADDR: ack.read_miss = 1'b0;
           TOTAL_VF_DECODE_ADDR: ack.read_miss = 1'b0;
           CFG_UNIT_VERSION_DECODE_ADDR: ack.read_miss = 1'b0;
           INGRESS_ALARM_ENABLE_DECODE_ADDR: ack.read_miss = 1'b0;
           ALARM_LUT_PERR_DECODE_ADDR: ack.read_miss = 1'b0;
           EGRESS_LUT_ERR_DECODE_ADDR: ack.read_miss = 1'b0;
           INGRESS_LUT_ERR_DECODE_ADDR: ack.read_miss = 1'b0;
           ALARM_ERR_DECODE_ADDR: ack.read_miss = 1'b0;
           ALARM_MB_ECC_ERR_DECODE_ADDR: ack.read_miss = 1'b0;
           ALARM_SB_ECC_ERR_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           MSIX_ACK_DECODE_ADDR: ack.read_miss = 1'b0;
           MSIX_PASSTHROUGH_DECODE_ADDR: ack.read_miss = 1'b0;
           MSIX_MODE_DECODE_ADDR: ack.read_miss = 1'b0;
           MSIX_31_0_SYND_DECODE_ADDR: ack.read_miss = 1'b0;
           MSIX_63_32_SYND_DECODE_ADDR: ack.read_miss = 1'b0;
           MSIX_64_SYND_DECODE_ADDR: ack.read_miss = 1'b0;
           MSIX_PBA_31_0_CLEAR_DECODE_ADDR: ack.read_miss = 1'b0;
           MSIX_PBA_63_32_CLEAR_DECODE_ADDR: ack.read_miss = 1'b0;
           MSIX_PBA_64_CLEAR_DECODE_ADDR: ack.read_miss = 1'b0;
           DIR_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           DIR_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           LDB_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           LDB_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           SYS_ALARM_INT_ENABLE_DECODE_ADDR: ack.read_miss = 1'b0;
           SYS_ALARM_MB_ECC_INT_ENABLE_DECODE_ADDR: ack.read_miss = 1'b0;
           SYS_ALARM_SB_ECC_INT_ENABLE_DECODE_ADDR: ack.read_miss = 1'b0;
           {44'h50,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_ALARM_PF_SYND0 || ~(|re_ALARM_PF_SYND0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_ALARM_PF_SYND0;
           end
           {44'h50,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_ALARM_PF_SYND1 || ~(|re_ALARM_PF_SYND1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_ALARM_PF_SYND1;
           end
           {44'h50,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_ALARM_PF_SYND2 || ~(|re_ALARM_PF_SYND2)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_ALARM_PF_SYND2;
           end
           {44'h50,2'b11}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_ALARM_HW_SYND || ~(|re_ALARM_HW_SYND)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_ALARM_HW_SYND;
           end
           {28'b0??,16'h??F0,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_VF_LDB_VPP_V || ~(|re_VF_LDB_VPP_V)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_VF_LDB_VPP_V;
           end
           {28'b0??,16'h??F0,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_VF_LDB_VPP2PP || ~(|re_VF_LDB_VPP2PP)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_VF_LDB_VPP2PP;
           end
           {28'b0??,16'h??F0,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_VF_DIR_VPP_V || ~(|re_VF_DIR_VPP_V)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_VF_DIR_VPP_V;
           end
           {28'b0??,16'h??F0,2'b11}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_VF_DIR_VPP2PP || ~(|re_VF_DIR_VPP2PP)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_VF_DIR_VPP2PP;
           end
           {28'b0?,16'h??F1,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_VF_LDB_VQID_V || ~(|re_VF_LDB_VQID_V)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_VF_LDB_VQID_V;
           end
           {28'b0?,16'h??F1,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_VF_LDB_VQID2QID || ~(|re_VF_LDB_VQID2QID)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_VF_LDB_VQID2QID;
           end
           {32'b0?,12'h?F1,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_QID2VQID || ~(|re_LDB_QID2VQID)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_QID2VQID;
           end
           {28'b0??,16'h??F1,2'b11}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_VF_DIR_VQID_V || ~(|re_VF_DIR_VQID_V)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_VF_DIR_VQID_V;
           end
           {28'b0??,16'h??F2,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_VF_DIR_VQID2QID || ~(|re_VF_DIR_VQID2QID)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_VF_DIR_VQID2QID;
           end
           {28'b0??,16'h??F2,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_VASQID_V || ~(|re_LDB_VASQID_V)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_VASQID_V;
           end
           {28'b0???,16'h??F2,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_DIR_VASQID_V || ~(|re_DIR_VASQID_V)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_DIR_VASQID_V;
           end
           {44'h0?F4,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_ALARM_VF_SYND0 || ~(|re_ALARM_VF_SYND0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_ALARM_VF_SYND0;
           end
           {44'h0?F4,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_ALARM_VF_SYND1 || ~(|re_ALARM_VF_SYND1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_ALARM_VF_SYND1;
           end
           {44'h0?F4,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_ALARM_VF_SYND2 || ~(|re_ALARM_VF_SYND2)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_ALARM_VF_SYND2;
           end
           {32'b0?,12'h?F5,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_QID_V || ~(|re_LDB_QID_V)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_QID_V;
           end
           {32'b0?,12'h?F5,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_QID_ITS || ~(|re_LDB_QID_ITS)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_QID_ITS;
           end
           {32'b0?,12'h?F5,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_QID_CFG_V || ~(|re_LDB_QID_CFG_V)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_QID_CFG_V;
           end
           {32'b0??,12'h?F6,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_DIR_QID_V || ~(|re_DIR_QID_V)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_DIR_QID_V;
           end
           {32'b0??,12'h?F6,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_DIR_QID_ITS || ~(|re_DIR_QID_ITS)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_DIR_QID_ITS;
           end
           {32'b0??,12'h?F8,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_CQ_ADDR_L || ~(|re_LDB_CQ_ADDR_L)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_CQ_ADDR_L;
           end
           {32'b0??,12'h?F8,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_CQ_ADDR_U || ~(|re_LDB_CQ_ADDR_U)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_CQ_ADDR_U;
           end
           {32'b0??,12'h?F8,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_PP2VAS || ~(|re_LDB_PP2VAS)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_PP2VAS;
           end
           HQM_LDB_PP2VDEV_DECODE_ADDR[0]: ack.read_miss = 1'b0;
           {32'b0??,12'h?F9,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_PP_V || ~(|re_LDB_PP_V)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_PP_V;
           end
           {32'b0??,12'h?F9,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_CQ2VF_PF_RO || ~(|re_LDB_CQ2VF_PF_RO)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_CQ2VF_PF_RO;
           end
           {32'b0??,12'h?F9,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_CQ_ISR || ~(|re_LDB_CQ_ISR)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_CQ_ISR;
           end
           {32'b0??,12'h?F9,2'b11}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_LDB_CQ_PASID || ~(|re_LDB_CQ_PASID)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_LDB_CQ_PASID;
           end
           LDB_PP_ROB_V_DECODE_ADDR[0]: ack.read_miss = 1'b0;
           {32'b0??,12'h?FC,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_DIR_CQ_ADDR_L || ~(|re_DIR_CQ_ADDR_L)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_DIR_CQ_ADDR_L;
           end
           {32'b0??,12'h?FC,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_DIR_CQ_ADDR_U || ~(|re_DIR_CQ_ADDR_U)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_DIR_CQ_ADDR_U;
           end
           {32'b0??,12'h?FC,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_DIR_PP2VAS || ~(|re_DIR_PP2VAS)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_DIR_PP2VAS;
           end
           HQM_DIR_PP2VDEV_DECODE_ADDR[0]: ack.read_miss = 1'b0;
           {32'b0??,12'h?FD,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_DIR_PP_V || ~(|re_DIR_PP_V)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_DIR_PP_V;
           end
           {32'b0??,12'h?FD,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_DIR_CQ2VF_PF_RO || ~(|re_DIR_CQ2VF_PF_RO)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_DIR_CQ2VF_PF_RO;
           end
           {32'b0??,12'h?FD,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_DIR_CQ_ISR || ~(|re_DIR_CQ_ISR)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_DIR_CQ_ISR;
           end
           {32'b0??,12'h?FD,2'b11}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_DIR_CQ_PASID || ~(|re_DIR_CQ_PASID)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_DIR_CQ_PASID;
           end
           {32'b0??,12'h?FE,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_DIR_CQ_FMT || ~(|re_DIR_CQ_FMT)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_DIR_CQ_FMT;
           end
           DIR_PP_ROB_V_DECODE_ADDR[0]: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_0_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_1_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_2_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_3_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_4_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_5_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_6_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_7_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_8_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_9_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_10_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_11_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_12_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_13_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_14_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_15_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_16_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_17_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_18_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_19_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_20_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_SYSTEM_CNT_21_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[1]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[1]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[1]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[1]: ack.read_miss = 1'b0;
           {44'h200,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_SBE_CNT_0 || ~(|re_SBE_CNT_0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_SBE_CNT_0;
           end
           {44'h200,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_SBE_CNT_1 || ~(|re_SBE_CNT_1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_SBE_CNT_1;
           end
           HQM_LDB_PP2VDEV_DECODE_ADDR[2]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[2]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[2]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[2]: ack.read_miss = 1'b0;
           {44'h300,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_PERF_SMON_CONFIGURATION0 || ~(|re_PERF_SMON_CONFIGURATION0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_PERF_SMON_CONFIGURATION0;
           end
           {44'h300,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_PERF_SMON_CONFIGURATION1 || ~(|re_PERF_SMON_CONFIGURATION1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_PERF_SMON_CONFIGURATION1;
           end
           {44'h300,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_PERF_SMON_COMPARE0 || ~(|re_PERF_SMON_COMPARE0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_PERF_SMON_COMPARE0;
           end
           {44'h300,2'b11}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_PERF_SMON_COMPARE1 || ~(|re_PERF_SMON_COMPARE1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_PERF_SMON_COMPARE1;
           end
           {44'h301,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_PERF_SMON_ACTIVITYCOUNTER0 || ~(|re_PERF_SMON_ACTIVITYCOUNTER0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_PERF_SMON_ACTIVITYCOUNTER0;
           end
           {44'h301,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_PERF_SMON_ACTIVITYCOUNTER1 || ~(|re_PERF_SMON_ACTIVITYCOUNTER1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_PERF_SMON_ACTIVITYCOUNTER1;
           end
           {44'h301,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_PERF_SMON_TIMER || ~(|re_PERF_SMON_TIMER)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_PERF_SMON_TIMER;
           end
           {44'h301,2'b11}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_PERF_SMON_MAXIMUM_TIMER || ~(|re_PERF_SMON_MAXIMUM_TIMER)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_PERF_SMON_MAXIMUM_TIMER;
           end
           {44'h302,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_PERF_SMON_COMP_MASK0 || ~(|re_PERF_SMON_COMP_MASK0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_PERF_SMON_COMP_MASK0;
           end
           {44'h302,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_PERF_SMON_COMP_MASK1 || ~(|re_PERF_SMON_COMP_MASK1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_PERF_SMON_COMP_MASK1;
           end
           HQM_LDB_PP2VDEV_DECODE_ADDR[3]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[3]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[3]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[3]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[4]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[4]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[4]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[4]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[5]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[5]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[5]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[5]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[6]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[6]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[6]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[6]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[7]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[7]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[7]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[7]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[8]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[8]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[8]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[8]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[9]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[9]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[9]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[9]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[10]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[10]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[10]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[10]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[11]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[11]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[11]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[11]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[12]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[12]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[12]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[12]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[13]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[13]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[13]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[13]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[14]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[14]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[14]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[14]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[15]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[15]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[15]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[15]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[16]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[16]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[16]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[16]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[17]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[17]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[17]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[17]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[18]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[18]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[18]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[18]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[19]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[19]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[19]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[19]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[20]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[20]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[20]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[20]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[21]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[21]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[21]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[21]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[22]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[22]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[22]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[22]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[23]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[23]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[23]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[23]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[24]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[24]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[24]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[24]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[25]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[25]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[25]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[25]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[26]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[26]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[26]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[26]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[27]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[27]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[27]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[27]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[28]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[28]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[28]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[28]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[29]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[29]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[29]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[29]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[30]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[30]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[30]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[30]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[31]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[31]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[31]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[31]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[32]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[32]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[32]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[32]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[33]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[33]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[33]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[33]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[34]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[34]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[34]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[34]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[35]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[35]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[35]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[35]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[36]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[36]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[36]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[36]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[37]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[37]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[37]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[37]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[38]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[38]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[38]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[38]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[39]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[39]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[39]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[39]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[40]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[40]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[40]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[40]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[41]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[41]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[41]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[41]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[42]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[42]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[42]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[42]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[43]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[43]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[43]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[43]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[44]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[44]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[44]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[44]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[45]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[45]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[45]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[45]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[46]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[46]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[46]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[46]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[47]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[47]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[47]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[47]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[48]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[48]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[48]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[48]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[49]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[49]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[49]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[49]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[50]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[50]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[50]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[50]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[51]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[51]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[51]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[51]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[52]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[52]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[52]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[52]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[53]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[53]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[53]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[53]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[54]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[54]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[54]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[54]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[55]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[55]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[55]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[55]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[56]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[56]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[56]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[56]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[57]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[57]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[57]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[57]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[58]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[58]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[58]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[58]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[59]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[59]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[59]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[59]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[60]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[60]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[60]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[60]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[61]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[61]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[61]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[61]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[62]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[62]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[62]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[62]: ack.read_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[63]: ack.read_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[63]: ack.read_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[63]: ack.read_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[63]: ack.read_miss = 1'b0;
           {28'h1C,4'b00??,12'h?00,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_WB_DIR_CQ_STATE || ~(|re_WB_DIR_CQ_STATE)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_WB_DIR_CQ_STATE;
           end
           {28'h1D,4'b00??,12'h?00,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_WB_LDB_CQ_STATE || ~(|re_WB_LDB_CQ_STATE)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_WB_LDB_CQ_STATE;
           end
           {36'h1E00,4'b0???,4'h?,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AI_ADDR_L || ~(|re_AI_ADDR_L)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AI_ADDR_L;
           end
           {36'h1E00,4'b0???,4'h?,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AI_ADDR_U || ~(|re_AI_ADDR_U)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AI_ADDR_U;
           end
           {36'h1E00,4'b0???,4'h?,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AI_DATA || ~(|re_AI_DATA)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AI_DATA;
           end
           AI_CTRL_DECODE_ADDR[0]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[1]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[2]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[3]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[4]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[5]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[6]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[7]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[8]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[9]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[10]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[11]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[12]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[13]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[14]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[15]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[16]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[17]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[18]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[19]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[20]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[21]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[22]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[23]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[24]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[25]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[26]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[27]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[28]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[29]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[30]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[31]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[32]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[33]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[34]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[35]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[36]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[37]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[38]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[39]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[40]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[41]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[42]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[43]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[44]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[45]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[46]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[47]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[48]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[49]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[50]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[51]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[52]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[53]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[54]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[55]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[56]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[57]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[58]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[59]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[60]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[61]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[62]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[63]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[64]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[65]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[66]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[67]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[68]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[69]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[70]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[71]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[72]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[73]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[74]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[75]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[76]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[77]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[78]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[79]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[80]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[81]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[82]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[83]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[84]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[85]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[86]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[87]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[88]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[89]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[90]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[91]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[92]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[93]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[94]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[95]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[96]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[97]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[98]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[99]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[100]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[101]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[102]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[103]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[104]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[105]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[106]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[107]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[108]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[109]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[110]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[111]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[112]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[113]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[114]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[115]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[116]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[117]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[118]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[119]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[120]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[121]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[122]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[123]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[124]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[125]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[126]: ack.read_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[127]: ack.read_miss = 1'b0;
           IMS_PEND_CLEAR_DECODE_ADDR: ack.read_miss = 1'b0;
           WB_SCH_OUT_AFULL_AGITATE_CONTROL_DECODE_ADDR: ack.read_miss = 1'b0;
           IG_HCW_ENQ_AFULL_AGITATE_CONTROL_DECODE_ADDR: ack.read_miss = 1'b0;
           IG_HCW_ENQ_W_DB_AGITATE_CONTROL_DECODE_ADDR: ack.read_miss = 1'b0;
           EG_HCW_SCHED_DB_AGITATE_CONTROL_DECODE_ADDR: ack.read_miss = 1'b0;
           AL_IMS_MSIX_DB_AGITATE_CONTROL_DECODE_ADDR: ack.read_miss = 1'b0;
           AL_CWD_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR: ack.read_miss = 1'b0;
           AL_SIF_ALARM_AFULL_AGITATE_CONTROL_DECODE_ADDR: ack.read_miss = 1'b0;
           AL_HQM_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR: ack.read_miss = 1'b0;
           ECC_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           PARITY_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           WRITE_BUFFER_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           ALARM_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           CFG_PATCH_CONTROL_DECODE_ADDR: ack.read_miss = 1'b0;
           INGRESS_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           EGRESS_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           SYS_IDLE_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           HCW_ENQ_FIFO_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           SCH_OUT_FIFO_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           SIF_ALARM_FIFO_CTL_DECODE_ADDR: ack.read_miss = 1'b0;
           HCW_ENQ_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           HCW_SCH_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           SCH_OUT_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           CFG_RX_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           CWDI_RX_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_ALARM_RX_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           SIF_ALARM_FIFO_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           ALARM_DB_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           INGRESS_DB_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           EGRESS_DB_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           ALARM_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           INGRESS_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           EGRESS_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           WBUF_STATUS_DECODE_ADDR: ack.read_miss = 1'b0;
           WBUF_STATUS2_DECODE_ADDR: ack.read_miss = 1'b0;
           WBUF_DEBUG_DECODE_ADDR: ack.read_miss = 1'b0;
           ROB_SYNDROME_DECODE_ADDR: ack.read_miss = 1'b0;
           PHDR_DEBUG_0_DECODE_ADDR: ack.read_miss = 1'b0;
           PHDR_DEBUG_1_DECODE_ADDR: ack.read_miss = 1'b0;
           PHDR_DEBUG_2_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[0]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[1]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[2]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[3]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[4]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[5]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[6]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[7]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[8]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[9]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[10]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[11]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[12]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[13]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[14]: ack.read_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[15]: ack.read_miss = 1'b0;
           HCW_REQ_DEBUG_DECODE_ADDR: ack.read_miss = 1'b0;
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[0]: ack.read_miss = 1'b0;
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[1]: ack.read_miss = 1'b0;
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[2]: ack.read_miss = 1'b0;
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[3]: ack.read_miss = 1'b0;
           {40'h80020,4'b0?00,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_CONFIGURATION0 || ~(|re_AW_SMON_CONFIGURATION0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_CONFIGURATION0;
           end
           {40'h80020,4'b0?00,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_CONFIGURATION1 || ~(|re_AW_SMON_CONFIGURATION1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_CONFIGURATION1;
           end
           {40'h80020,4'b0?00,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_COMPARE0 || ~(|re_AW_SMON_COMPARE0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_COMPARE0;
           end
           {40'h80020,4'b0?00,2'b11}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_COMPARE1 || ~(|re_AW_SMON_COMPARE1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_COMPARE1;
           end
           {40'h80020,4'b0?01,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_ACTIVITYCOUNTER0 || ~(|re_AW_SMON_ACTIVITYCOUNTER0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_ACTIVITYCOUNTER0;
           end
           {40'h80020,4'b0?01,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_ACTIVITYCOUNTER1 || ~(|re_AW_SMON_ACTIVITYCOUNTER1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_ACTIVITYCOUNTER1;
           end
           {40'h80020,4'b0?01,2'b10}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_TIMER || ~(|re_AW_SMON_TIMER)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_TIMER;
           end
           {40'h80020,4'b0?01,2'b11}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_MAXIMUM_TIMER || ~(|re_AW_SMON_MAXIMUM_TIMER)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_MAXIMUM_TIMER;
           end
           {40'h80020,4'b0?10,2'b00}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_COMP_MASK0 || ~(|re_AW_SMON_COMP_MASK0)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_COMP_MASK0;
           end
           {40'h80020,4'b0?10,2'b01}: begin
              ack.read_valid = req.valid &&  ( (handcode_rvalid_AW_SMON_COMP_MASK1 || ~(|re_AW_SMON_COMP_MASK1)) || ~sai_HQM_OS_W_read_en ) ;
              ack.read_miss = handcode_error_AW_SMON_COMP_MASK1;
           end
            default: ack.read_miss  = ack.read_valid; 
         endcase
      end    
      MWR: begin
         ack.write_valid = req_valid;
         ack.read_valid  = 1'b0; 
         ack.read_miss = ack.read_valid;
         unique casez (case_req_addr_HQM_SYSTEM_CSR_MEM) 
           TOTAL_CREDITS_DECODE_ADDR: ack.write_miss = 1'b0;
           TOTAL_LDB_QID_DECODE_ADDR: ack.write_miss = 1'b0;
           TOTAL_DIR_QID_DECODE_ADDR: ack.write_miss = 1'b0;
           TOTAL_LDB_PORTS_DECODE_ADDR: ack.write_miss = 1'b0;
           TOTAL_DIR_PORTS_DECODE_ADDR: ack.write_miss = 1'b0;
           TOTAL_VAS_DECODE_ADDR: ack.write_miss = 1'b0;
           TOTAL_SN_REGIONS_DECODE_ADDR: ack.write_miss = 1'b0;
           TOTAL_VF_DECODE_ADDR: ack.write_miss = 1'b0;
           CFG_UNIT_VERSION_DECODE_ADDR: ack.write_miss = 1'b0;
           INGRESS_ALARM_ENABLE_DECODE_ADDR: ack.write_miss = 1'b0;
           ALARM_LUT_PERR_DECODE_ADDR: ack.write_miss = 1'b0;
           EGRESS_LUT_ERR_DECODE_ADDR: ack.write_miss = 1'b0;
           INGRESS_LUT_ERR_DECODE_ADDR: ack.write_miss = 1'b0;
           ALARM_ERR_DECODE_ADDR: ack.write_miss = 1'b0;
           ALARM_MB_ECC_ERR_DECODE_ADDR: ack.write_miss = 1'b0;
           ALARM_SB_ECC_ERR_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           MSIX_ACK_DECODE_ADDR: ack.write_miss = 1'b0;
           MSIX_PASSTHROUGH_DECODE_ADDR: ack.write_miss = 1'b0;
           MSIX_MODE_DECODE_ADDR: ack.write_miss = 1'b0;
           MSIX_31_0_SYND_DECODE_ADDR: ack.write_miss = 1'b0;
           MSIX_63_32_SYND_DECODE_ADDR: ack.write_miss = 1'b0;
           MSIX_64_SYND_DECODE_ADDR: ack.write_miss = 1'b0;
           MSIX_PBA_31_0_CLEAR_DECODE_ADDR: ack.write_miss = 1'b0;
           MSIX_PBA_63_32_CLEAR_DECODE_ADDR: ack.write_miss = 1'b0;
           MSIX_PBA_64_CLEAR_DECODE_ADDR: ack.write_miss = 1'b0;
           DIR_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           DIR_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           LDB_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           LDB_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           SYS_ALARM_INT_ENABLE_DECODE_ADDR: ack.write_miss = 1'b0;
           SYS_ALARM_MB_ECC_INT_ENABLE_DECODE_ADDR: ack.write_miss = 1'b0;
           SYS_ALARM_SB_ECC_INT_ENABLE_DECODE_ADDR: ack.write_miss = 1'b0;
           {44'h50,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_ALARM_PF_SYND0 || ~(|we_ALARM_PF_SYND0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_ALARM_PF_SYND0;
           end
           {44'h50,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_ALARM_PF_SYND1 || ~(|we_ALARM_PF_SYND1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_ALARM_PF_SYND1;
           end
           {44'h50,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_ALARM_PF_SYND2 || ~(|we_ALARM_PF_SYND2)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_ALARM_PF_SYND2;
           end
           {44'h50,2'b11}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_ALARM_HW_SYND || ~(|we_ALARM_HW_SYND)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_ALARM_HW_SYND;
           end
           {28'b0??,16'h??F0,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_VF_LDB_VPP_V || ~(|we_VF_LDB_VPP_V)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_VF_LDB_VPP_V;
           end
           {28'b0??,16'h??F0,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_VF_LDB_VPP2PP || ~(|we_VF_LDB_VPP2PP)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_VF_LDB_VPP2PP;
           end
           {28'b0??,16'h??F0,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_VF_DIR_VPP_V || ~(|we_VF_DIR_VPP_V)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_VF_DIR_VPP_V;
           end
           {28'b0??,16'h??F0,2'b11}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_VF_DIR_VPP2PP || ~(|we_VF_DIR_VPP2PP)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_VF_DIR_VPP2PP;
           end
           {28'b0?,16'h??F1,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_VF_LDB_VQID_V || ~(|we_VF_LDB_VQID_V)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_VF_LDB_VQID_V;
           end
           {28'b0?,16'h??F1,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_VF_LDB_VQID2QID || ~(|we_VF_LDB_VQID2QID)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_VF_LDB_VQID2QID;
           end
           {32'b0?,12'h?F1,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_QID2VQID || ~(|we_LDB_QID2VQID)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_QID2VQID;
           end
           {28'b0??,16'h??F1,2'b11}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_VF_DIR_VQID_V || ~(|we_VF_DIR_VQID_V)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_VF_DIR_VQID_V;
           end
           {28'b0??,16'h??F2,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_VF_DIR_VQID2QID || ~(|we_VF_DIR_VQID2QID)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_VF_DIR_VQID2QID;
           end
           {28'b0??,16'h??F2,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_VASQID_V || ~(|we_LDB_VASQID_V)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_VASQID_V;
           end
           {28'b0???,16'h??F2,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_DIR_VASQID_V || ~(|we_DIR_VASQID_V)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_DIR_VASQID_V;
           end
           {44'h0?F4,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_ALARM_VF_SYND0 || ~(|we_ALARM_VF_SYND0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_ALARM_VF_SYND0;
           end
           {44'h0?F4,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_ALARM_VF_SYND1 || ~(|we_ALARM_VF_SYND1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_ALARM_VF_SYND1;
           end
           {44'h0?F4,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_ALARM_VF_SYND2 || ~(|we_ALARM_VF_SYND2)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_ALARM_VF_SYND2;
           end
           {32'b0?,12'h?F5,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_QID_V || ~(|we_LDB_QID_V)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_QID_V;
           end
           {32'b0?,12'h?F5,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_QID_ITS || ~(|we_LDB_QID_ITS)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_QID_ITS;
           end
           {32'b0?,12'h?F5,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_QID_CFG_V || ~(|we_LDB_QID_CFG_V)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_QID_CFG_V;
           end
           {32'b0??,12'h?F6,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_DIR_QID_V || ~(|we_DIR_QID_V)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_DIR_QID_V;
           end
           {32'b0??,12'h?F6,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_DIR_QID_ITS || ~(|we_DIR_QID_ITS)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_DIR_QID_ITS;
           end
           {32'b0??,12'h?F8,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_CQ_ADDR_L || ~(|we_LDB_CQ_ADDR_L)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_CQ_ADDR_L;
           end
           {32'b0??,12'h?F8,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_CQ_ADDR_U || ~(|we_LDB_CQ_ADDR_U)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_CQ_ADDR_U;
           end
           {32'b0??,12'h?F8,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_PP2VAS || ~(|we_LDB_PP2VAS)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_PP2VAS;
           end
           HQM_LDB_PP2VDEV_DECODE_ADDR[0]: ack.write_miss = 1'b0;
           {32'b0??,12'h?F9,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_PP_V || ~(|we_LDB_PP_V)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_PP_V;
           end
           {32'b0??,12'h?F9,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_CQ2VF_PF_RO || ~(|we_LDB_CQ2VF_PF_RO)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_CQ2VF_PF_RO;
           end
           {32'b0??,12'h?F9,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_CQ_ISR || ~(|we_LDB_CQ_ISR)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_CQ_ISR;
           end
           {32'b0??,12'h?F9,2'b11}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_LDB_CQ_PASID || ~(|we_LDB_CQ_PASID)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_LDB_CQ_PASID;
           end
           LDB_PP_ROB_V_DECODE_ADDR[0]: ack.write_miss = 1'b0;
           {32'b0??,12'h?FC,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_DIR_CQ_ADDR_L || ~(|we_DIR_CQ_ADDR_L)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_DIR_CQ_ADDR_L;
           end
           {32'b0??,12'h?FC,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_DIR_CQ_ADDR_U || ~(|we_DIR_CQ_ADDR_U)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_DIR_CQ_ADDR_U;
           end
           {32'b0??,12'h?FC,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_DIR_PP2VAS || ~(|we_DIR_PP2VAS)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_DIR_PP2VAS;
           end
           HQM_DIR_PP2VDEV_DECODE_ADDR[0]: ack.write_miss = 1'b0;
           {32'b0??,12'h?FD,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_DIR_PP_V || ~(|we_DIR_PP_V)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_DIR_PP_V;
           end
           {32'b0??,12'h?FD,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_DIR_CQ2VF_PF_RO || ~(|we_DIR_CQ2VF_PF_RO)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_DIR_CQ2VF_PF_RO;
           end
           {32'b0??,12'h?FD,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_DIR_CQ_ISR || ~(|we_DIR_CQ_ISR)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_DIR_CQ_ISR;
           end
           {32'b0??,12'h?FD,2'b11}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_DIR_CQ_PASID || ~(|we_DIR_CQ_PASID)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_DIR_CQ_PASID;
           end
           {32'b0??,12'h?FE,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_DIR_CQ_FMT || ~(|we_DIR_CQ_FMT)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_DIR_CQ_FMT;
           end
           DIR_PP_ROB_V_DECODE_ADDR[0]: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_0_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_1_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_2_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_3_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_4_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_5_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_6_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_7_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_8_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_9_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_10_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_11_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_12_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_13_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_14_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_15_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_16_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_17_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_18_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_19_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_20_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_SYSTEM_CNT_21_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[1]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[1]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[1]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[1]: ack.write_miss = 1'b0;
           {44'h200,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_SBE_CNT_0 || ~(|we_SBE_CNT_0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_SBE_CNT_0;
           end
           {44'h200,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_SBE_CNT_1 || ~(|we_SBE_CNT_1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_SBE_CNT_1;
           end
           HQM_LDB_PP2VDEV_DECODE_ADDR[2]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[2]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[2]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[2]: ack.write_miss = 1'b0;
           {44'h300,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_PERF_SMON_CONFIGURATION0 || ~(|we_PERF_SMON_CONFIGURATION0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_PERF_SMON_CONFIGURATION0;
           end
           {44'h300,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_PERF_SMON_CONFIGURATION1 || ~(|we_PERF_SMON_CONFIGURATION1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_PERF_SMON_CONFIGURATION1;
           end
           {44'h300,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_PERF_SMON_COMPARE0 || ~(|we_PERF_SMON_COMPARE0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_PERF_SMON_COMPARE0;
           end
           {44'h300,2'b11}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_PERF_SMON_COMPARE1 || ~(|we_PERF_SMON_COMPARE1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_PERF_SMON_COMPARE1;
           end
           {44'h301,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_PERF_SMON_ACTIVITYCOUNTER0 || ~(|we_PERF_SMON_ACTIVITYCOUNTER0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_PERF_SMON_ACTIVITYCOUNTER0;
           end
           {44'h301,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_PERF_SMON_ACTIVITYCOUNTER1 || ~(|we_PERF_SMON_ACTIVITYCOUNTER1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_PERF_SMON_ACTIVITYCOUNTER1;
           end
           {44'h301,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_PERF_SMON_TIMER || ~(|we_PERF_SMON_TIMER)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_PERF_SMON_TIMER;
           end
           {44'h301,2'b11}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_PERF_SMON_MAXIMUM_TIMER || ~(|we_PERF_SMON_MAXIMUM_TIMER)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_PERF_SMON_MAXIMUM_TIMER;
           end
           {44'h302,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_PERF_SMON_COMP_MASK0 || ~(|we_PERF_SMON_COMP_MASK0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_PERF_SMON_COMP_MASK0;
           end
           {44'h302,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_PERF_SMON_COMP_MASK1 || ~(|we_PERF_SMON_COMP_MASK1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_PERF_SMON_COMP_MASK1;
           end
           HQM_LDB_PP2VDEV_DECODE_ADDR[3]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[3]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[3]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[3]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[4]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[4]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[4]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[4]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[5]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[5]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[5]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[5]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[6]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[6]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[6]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[6]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[7]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[7]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[7]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[7]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[8]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[8]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[8]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[8]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[9]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[9]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[9]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[9]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[10]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[10]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[10]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[10]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[11]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[11]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[11]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[11]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[12]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[12]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[12]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[12]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[13]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[13]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[13]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[13]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[14]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[14]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[14]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[14]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[15]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[15]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[15]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[15]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[16]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[16]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[16]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[16]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[17]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[17]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[17]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[17]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[18]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[18]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[18]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[18]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[19]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[19]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[19]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[19]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[20]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[20]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[20]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[20]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[21]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[21]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[21]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[21]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[22]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[22]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[22]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[22]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[23]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[23]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[23]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[23]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[24]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[24]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[24]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[24]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[25]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[25]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[25]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[25]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[26]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[26]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[26]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[26]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[27]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[27]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[27]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[27]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[28]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[28]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[28]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[28]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[29]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[29]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[29]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[29]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[30]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[30]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[30]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[30]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[31]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[31]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[31]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[31]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[32]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[32]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[32]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[32]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[33]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[33]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[33]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[33]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[34]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[34]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[34]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[34]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[35]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[35]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[35]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[35]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[36]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[36]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[36]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[36]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[37]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[37]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[37]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[37]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[38]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[38]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[38]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[38]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[39]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[39]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[39]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[39]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[40]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[40]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[40]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[40]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[41]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[41]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[41]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[41]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[42]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[42]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[42]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[42]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[43]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[43]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[43]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[43]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[44]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[44]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[44]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[44]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[45]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[45]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[45]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[45]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[46]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[46]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[46]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[46]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[47]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[47]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[47]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[47]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[48]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[48]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[48]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[48]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[49]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[49]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[49]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[49]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[50]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[50]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[50]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[50]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[51]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[51]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[51]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[51]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[52]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[52]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[52]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[52]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[53]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[53]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[53]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[53]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[54]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[54]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[54]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[54]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[55]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[55]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[55]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[55]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[56]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[56]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[56]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[56]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[57]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[57]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[57]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[57]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[58]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[58]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[58]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[58]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[59]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[59]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[59]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[59]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[60]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[60]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[60]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[60]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[61]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[61]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[61]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[61]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[62]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[62]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[62]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[62]: ack.write_miss = 1'b0;
           HQM_LDB_PP2VDEV_DECODE_ADDR[63]: ack.write_miss = 1'b0;
           LDB_PP_ROB_V_DECODE_ADDR[63]: ack.write_miss = 1'b0;
           HQM_DIR_PP2VDEV_DECODE_ADDR[63]: ack.write_miss = 1'b0;
           DIR_PP_ROB_V_DECODE_ADDR[63]: ack.write_miss = 1'b0;
           {28'h1C,4'b00??,12'h?00,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_WB_DIR_CQ_STATE || ~(|we_WB_DIR_CQ_STATE)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_WB_DIR_CQ_STATE;
           end
           {28'h1D,4'b00??,12'h?00,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_WB_LDB_CQ_STATE || ~(|we_WB_LDB_CQ_STATE)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_WB_LDB_CQ_STATE;
           end
           {36'h1E00,4'b0???,4'h?,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AI_ADDR_L || ~(|we_AI_ADDR_L)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AI_ADDR_L;
           end
           {36'h1E00,4'b0???,4'h?,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AI_ADDR_U || ~(|we_AI_ADDR_U)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AI_ADDR_U;
           end
           {36'h1E00,4'b0???,4'h?,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AI_DATA || ~(|we_AI_DATA)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AI_DATA;
           end
           AI_CTRL_DECODE_ADDR[0]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[1]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[2]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[3]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[4]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[5]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[6]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[7]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[8]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[9]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[10]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[11]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[12]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[13]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[14]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[15]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[16]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[17]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[18]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[19]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[20]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[21]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[22]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[23]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[24]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[25]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[26]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[27]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[28]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[29]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[30]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[31]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[32]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[33]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[34]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[35]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[36]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[37]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[38]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[39]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[40]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[41]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[42]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[43]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[44]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[45]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[46]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[47]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[48]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[49]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[50]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[51]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[52]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[53]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[54]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[55]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[56]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[57]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[58]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[59]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[60]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[61]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[62]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[63]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[64]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[65]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[66]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[67]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[68]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[69]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[70]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[71]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[72]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[73]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[74]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[75]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[76]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[77]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[78]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[79]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[80]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[81]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[82]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[83]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[84]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[85]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[86]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[87]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[88]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[89]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[90]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[91]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[92]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[93]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[94]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[95]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[96]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[97]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[98]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[99]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[100]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[101]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[102]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[103]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[104]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[105]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[106]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[107]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[108]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[109]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[110]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[111]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[112]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[113]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[114]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[115]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[116]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[117]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[118]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[119]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[120]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[121]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[122]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[123]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[124]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[125]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[126]: ack.write_miss = 1'b0;
           AI_CTRL_DECODE_ADDR[127]: ack.write_miss = 1'b0;
           IMS_PEND_CLEAR_DECODE_ADDR: ack.write_miss = 1'b0;
           WB_SCH_OUT_AFULL_AGITATE_CONTROL_DECODE_ADDR: ack.write_miss = 1'b0;
           IG_HCW_ENQ_AFULL_AGITATE_CONTROL_DECODE_ADDR: ack.write_miss = 1'b0;
           IG_HCW_ENQ_W_DB_AGITATE_CONTROL_DECODE_ADDR: ack.write_miss = 1'b0;
           EG_HCW_SCHED_DB_AGITATE_CONTROL_DECODE_ADDR: ack.write_miss = 1'b0;
           AL_IMS_MSIX_DB_AGITATE_CONTROL_DECODE_ADDR: ack.write_miss = 1'b0;
           AL_CWD_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR: ack.write_miss = 1'b0;
           AL_SIF_ALARM_AFULL_AGITATE_CONTROL_DECODE_ADDR: ack.write_miss = 1'b0;
           AL_HQM_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR: ack.write_miss = 1'b0;
           ECC_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           PARITY_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           WRITE_BUFFER_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           ALARM_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           CFG_PATCH_CONTROL_DECODE_ADDR: ack.write_miss = 1'b0;
           INGRESS_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           EGRESS_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           SYS_IDLE_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           HCW_ENQ_FIFO_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           SCH_OUT_FIFO_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           SIF_ALARM_FIFO_CTL_DECODE_ADDR: ack.write_miss = 1'b0;
           HCW_ENQ_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           HCW_SCH_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           SCH_OUT_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           CFG_RX_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           CWDI_RX_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_ALARM_RX_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           SIF_ALARM_FIFO_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           ALARM_DB_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           INGRESS_DB_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           EGRESS_DB_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           ALARM_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           INGRESS_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           EGRESS_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           WBUF_STATUS_DECODE_ADDR: ack.write_miss = 1'b0;
           WBUF_STATUS2_DECODE_ADDR: ack.write_miss = 1'b0;
           WBUF_DEBUG_DECODE_ADDR: ack.write_miss = 1'b0;
           ROB_SYNDROME_DECODE_ADDR: ack.write_miss = 1'b0;
           PHDR_DEBUG_0_DECODE_ADDR: ack.write_miss = 1'b0;
           PHDR_DEBUG_1_DECODE_ADDR: ack.write_miss = 1'b0;
           PHDR_DEBUG_2_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[0]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[1]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[2]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[3]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[4]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[5]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[6]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[7]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[8]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[9]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[10]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[11]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[12]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[13]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[14]: ack.write_miss = 1'b0;
           HQM_PDATA_DEBUG_DECODE_ADDR[15]: ack.write_miss = 1'b0;
           HCW_REQ_DEBUG_DECODE_ADDR: ack.write_miss = 1'b0;
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[0]: ack.write_miss = 1'b0;
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[1]: ack.write_miss = 1'b0;
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[2]: ack.write_miss = 1'b0;
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[3]: ack.write_miss = 1'b0;
           {40'h80020,4'b0?00,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_CONFIGURATION0 || ~(|we_AW_SMON_CONFIGURATION0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_CONFIGURATION0;
           end
           {40'h80020,4'b0?00,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_CONFIGURATION1 || ~(|we_AW_SMON_CONFIGURATION1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_CONFIGURATION1;
           end
           {40'h80020,4'b0?00,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_COMPARE0 || ~(|we_AW_SMON_COMPARE0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_COMPARE0;
           end
           {40'h80020,4'b0?00,2'b11}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_COMPARE1 || ~(|we_AW_SMON_COMPARE1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_COMPARE1;
           end
           {40'h80020,4'b0?01,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_ACTIVITYCOUNTER0 || ~(|we_AW_SMON_ACTIVITYCOUNTER0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_ACTIVITYCOUNTER0;
           end
           {40'h80020,4'b0?01,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_ACTIVITYCOUNTER1 || ~(|we_AW_SMON_ACTIVITYCOUNTER1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_ACTIVITYCOUNTER1;
           end
           {40'h80020,4'b0?01,2'b10}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_TIMER || ~(|we_AW_SMON_TIMER)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_TIMER;
           end
           {40'h80020,4'b0?01,2'b11}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_MAXIMUM_TIMER || ~(|we_AW_SMON_MAXIMUM_TIMER)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_MAXIMUM_TIMER;
           end
           {40'h80020,4'b0?10,2'b00}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_COMP_MASK0 || ~(|we_AW_SMON_COMP_MASK0)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_COMP_MASK0;
           end
           {40'h80020,4'b0?10,2'b01}: begin
              ack.write_valid = req.valid &&  ( (handcode_wvalid_AW_SMON_COMP_MASK1 || ~(|we_AW_SMON_COMP_MASK1)) || ~sai_HQM_OS_W_write_en ) ;
              ack.write_miss = handcode_error_AW_SMON_COMP_MASK1;
           end
            default: ack.write_miss = ack.write_valid;
         endcase 
      end  
      default: begin
         ack.write_valid  = req_valid & IsWrOpcode;
         ack.read_valid  = req_valid & IsRdOpcode;
         ack.read_miss  = ack.read_valid;
         ack.write_miss = ack.write_valid;
      end 
   endcase 
end

always_comb begin : SAI_BLOCK

   unique casez (req_opcode) 
      MRD: 
         unique casez (case_req_addr_HQM_SYSTEM_CSR_MEM) 
           TOTAL_CREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TOTAL_LDB_QID_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TOTAL_DIR_QID_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TOTAL_LDB_PORTS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TOTAL_DIR_PORTS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TOTAL_VAS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TOTAL_SN_REGIONS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           TOTAL_VF_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CFG_UNIT_VERSION_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           INGRESS_ALARM_ENABLE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           ALARM_LUT_PERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           EGRESS_LUT_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           INGRESS_LUT_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           ALARM_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           ALARM_MB_ECC_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           ALARM_SB_ECC_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSIX_ACK_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSIX_PASSTHROUGH_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSIX_MODE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSIX_31_0_SYND_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSIX_63_32_SYND_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSIX_64_SYND_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSIX_PBA_31_0_CLEAR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSIX_PBA_63_32_CLEAR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           MSIX_PBA_64_CLEAR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SYS_ALARM_INT_ENABLE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SYS_ALARM_MB_ECC_INT_ENABLE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SYS_ALARM_SB_ECC_INT_ENABLE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h50,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h50,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h50,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h50,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'b0??,16'h??F0,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'b0??,16'h??F0,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'b0??,16'h??F0,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'b0??,16'h??F0,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'b0?,16'h??F1,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'b0?,16'h??F1,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0?,12'h?F1,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'b0??,16'h??F1,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'b0??,16'h??F2,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'b0??,16'h??F2,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'b0???,16'h??F2,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h0?F4,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h0?F4,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h0?F4,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0?,12'h?F5,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0?,12'h?F5,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0?,12'h?F5,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?F6,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?F6,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?F8,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?F8,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?F8,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?F9,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?F9,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?F9,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?F9,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?FC,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?FC,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?FC,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?FD,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?FD,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?FD,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?FD,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {32'b0??,12'h?FE,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_1_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_3_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_4_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_5_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_6_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_7_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_8_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_9_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_10_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_11_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_12_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_13_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_14_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_15_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_16_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_17_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_18_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_19_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_20_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_SYSTEM_CNT_21_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h200,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h200,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h300,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h300,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h300,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h300,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h301,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h301,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h301,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h301,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h302,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {44'h302,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[16]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[16]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[16]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[16]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[17]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[17]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[17]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[17]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[18]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[18]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[18]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[18]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[19]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[19]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[19]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[19]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[20]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[20]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[20]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[20]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[21]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[21]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[21]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[21]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[22]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[22]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[22]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[22]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[23]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[23]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[23]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[23]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[24]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[24]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[24]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[24]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[25]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[25]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[25]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[25]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[26]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[26]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[26]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[26]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[27]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[27]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[27]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[27]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[28]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[28]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[28]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[28]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[29]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[29]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[29]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[29]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[30]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[30]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[30]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[30]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[31]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[31]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[31]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[31]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[32]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[32]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[32]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[32]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[33]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[33]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[33]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[33]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[34]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[34]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[34]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[34]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[35]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[35]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[35]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[35]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[36]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[36]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[36]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[36]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[37]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[37]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[37]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[37]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[38]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[38]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[38]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[38]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[39]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[39]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[39]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[39]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[40]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[40]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[40]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[40]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[41]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[41]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[41]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[41]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[42]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[42]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[42]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[42]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[43]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[43]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[43]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[43]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[44]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[44]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[44]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[44]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[45]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[45]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[45]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[45]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[46]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[46]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[46]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[46]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[47]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[47]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[47]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[47]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[48]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[48]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[48]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[48]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[49]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[49]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[49]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[49]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[50]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[50]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[50]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[50]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[51]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[51]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[51]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[51]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[52]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[52]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[52]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[52]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[53]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[53]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[53]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[53]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[54]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[54]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[54]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[54]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[55]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[55]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[55]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[55]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[56]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[56]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[56]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[56]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[57]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[57]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[57]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[57]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[58]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[58]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[58]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[58]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[59]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[59]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[59]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[59]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[60]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[60]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[60]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[60]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[61]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[61]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[61]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[61]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[62]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[62]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[62]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[62]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[63]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[63]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[63]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[63]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'h1C,4'b00??,12'h?00,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {28'h1D,4'b00??,12'h?00,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {36'h1E00,4'b0???,4'h?,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {36'h1E00,4'b0???,4'h?,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {36'h1E00,4'b0???,4'h?,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[16]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[17]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[18]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[19]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[20]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[21]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[22]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[23]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[24]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[25]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[26]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[27]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[28]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[29]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[30]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[31]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[32]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[33]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[34]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[35]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[36]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[37]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[38]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[39]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[40]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[41]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[42]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[43]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[44]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[45]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[46]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[47]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[48]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[49]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[50]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[51]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[52]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[53]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[54]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[55]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[56]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[57]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[58]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[59]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[60]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[61]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[62]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[63]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[64]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[65]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[66]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[67]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[68]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[69]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[70]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[71]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[72]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[73]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[74]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[75]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[76]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[77]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[78]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[79]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[80]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[81]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[82]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[83]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[84]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[85]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[86]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[87]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[88]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[89]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[90]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[91]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[92]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[93]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[94]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[95]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[96]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[97]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[98]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[99]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[100]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[101]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[102]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[103]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[104]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[105]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[106]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[107]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[108]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[109]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[110]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[111]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[112]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[113]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[114]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[115]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[116]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[117]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[118]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[119]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[120]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[121]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[122]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[123]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[124]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[125]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[126]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AI_CTRL_DECODE_ADDR[127]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IMS_PEND_CLEAR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           WB_SCH_OUT_AFULL_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IG_HCW_ENQ_AFULL_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           IG_HCW_ENQ_W_DB_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           EG_HCW_SCHED_DB_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AL_IMS_MSIX_DB_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AL_CWD_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AL_SIF_ALARM_AFULL_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           AL_HQM_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           ECC_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           PARITY_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           WRITE_BUFFER_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           ALARM_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CFG_PATCH_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           INGRESS_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           EGRESS_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SYS_IDLE_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HCW_ENQ_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SCH_OUT_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SIF_ALARM_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HCW_ENQ_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HCW_SCH_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SCH_OUT_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CFG_RX_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           CWDI_RX_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_ALARM_RX_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           SIF_ALARM_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           ALARM_DB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           INGRESS_DB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           EGRESS_DB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           ALARM_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           INGRESS_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           EGRESS_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           WBUF_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           WBUF_STATUS2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           WBUF_DEBUG_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           ROB_SYNDROME_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           PHDR_DEBUG_0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           PHDR_DEBUG_1_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           PHDR_DEBUG_2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HCW_REQ_DEBUG_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?00,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?00,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?00,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?00,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?01,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?01,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?01,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?01,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?10,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
           {40'h80020,4'b0?10,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_read_en}}};
            default: sai_successfull_per_byte = {4{1'b1}};
         endcase 
      MWR: 
         unique casez (case_req_addr_HQM_SYSTEM_CSR_MEM) 
           TOTAL_CREDITS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TOTAL_LDB_QID_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TOTAL_DIR_QID_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TOTAL_LDB_PORTS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TOTAL_DIR_PORTS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TOTAL_VAS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TOTAL_SN_REGIONS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           TOTAL_VF_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CFG_UNIT_VERSION_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           INGRESS_ALARM_ENABLE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           ALARM_LUT_PERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           EGRESS_LUT_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           INGRESS_LUT_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           ALARM_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           ALARM_MB_ECC_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           ALARM_SB_ECC_ERR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSIX_ACK_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSIX_PASSTHROUGH_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSIX_MODE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSIX_31_0_SYND_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSIX_63_32_SYND_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSIX_64_SYND_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSIX_PBA_31_0_CLEAR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSIX_PBA_63_32_CLEAR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           MSIX_PBA_64_CLEAR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SYS_ALARM_INT_ENABLE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SYS_ALARM_MB_ECC_INT_ENABLE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SYS_ALARM_SB_ECC_INT_ENABLE_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h50,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h50,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h50,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h50,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'b0??,16'h??F0,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'b0??,16'h??F0,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'b0??,16'h??F0,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'b0??,16'h??F0,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'b0?,16'h??F1,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'b0?,16'h??F1,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0?,12'h?F1,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'b0??,16'h??F1,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'b0??,16'h??F2,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'b0??,16'h??F2,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'b0???,16'h??F2,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h0?F4,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h0?F4,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h0?F4,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0?,12'h?F5,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0?,12'h?F5,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0?,12'h?F5,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?F6,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?F6,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?F8,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?F8,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?F8,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?F9,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?F9,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?F9,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?F9,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?FC,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?FC,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?FC,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?FD,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?FD,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?FD,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?FD,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {32'b0??,12'h?FE,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_1_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_3_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_4_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_5_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_6_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_7_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_8_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_9_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_10_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_11_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_12_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_13_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_14_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_15_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_16_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_17_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_18_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_19_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_20_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_SYSTEM_CNT_21_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h200,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h200,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h300,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h300,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h300,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h300,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h301,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h301,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h301,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h301,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h302,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {44'h302,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[16]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[16]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[16]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[16]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[17]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[17]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[17]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[17]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[18]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[18]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[18]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[18]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[19]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[19]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[19]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[19]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[20]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[20]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[20]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[20]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[21]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[21]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[21]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[21]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[22]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[22]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[22]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[22]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[23]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[23]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[23]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[23]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[24]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[24]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[24]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[24]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[25]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[25]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[25]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[25]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[26]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[26]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[26]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[26]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[27]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[27]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[27]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[27]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[28]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[28]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[28]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[28]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[29]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[29]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[29]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[29]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[30]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[30]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[30]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[30]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[31]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[31]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[31]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[31]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[32]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[32]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[32]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[32]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[33]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[33]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[33]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[33]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[34]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[34]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[34]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[34]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[35]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[35]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[35]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[35]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[36]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[36]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[36]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[36]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[37]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[37]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[37]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[37]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[38]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[38]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[38]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[38]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[39]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[39]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[39]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[39]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[40]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[40]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[40]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[40]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[41]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[41]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[41]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[41]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[42]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[42]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[42]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[42]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[43]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[43]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[43]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[43]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[44]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[44]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[44]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[44]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[45]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[45]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[45]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[45]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[46]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[46]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[46]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[46]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[47]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[47]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[47]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[47]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[48]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[48]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[48]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[48]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[49]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[49]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[49]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[49]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[50]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[50]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[50]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[50]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[51]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[51]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[51]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[51]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[52]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[52]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[52]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[52]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[53]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[53]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[53]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[53]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[54]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[54]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[54]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[54]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[55]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[55]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[55]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[55]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[56]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[56]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[56]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[56]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[57]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[57]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[57]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[57]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[58]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[58]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[58]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[58]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[59]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[59]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[59]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[59]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[60]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[60]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[60]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[60]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[61]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[61]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[61]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[61]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[62]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[62]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[62]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[62]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_LDB_PP2VDEV_DECODE_ADDR[63]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           LDB_PP_ROB_V_DECODE_ADDR[63]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_DIR_PP2VDEV_DECODE_ADDR[63]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           DIR_PP_ROB_V_DECODE_ADDR[63]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'h1C,4'b00??,12'h?00,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {28'h1D,4'b00??,12'h?00,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {36'h1E00,4'b0???,4'h?,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {36'h1E00,4'b0???,4'h?,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {36'h1E00,4'b0???,4'h?,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[16]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[17]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[18]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[19]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[20]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[21]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[22]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[23]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[24]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[25]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[26]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[27]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[28]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[29]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[30]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[31]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[32]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[33]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[34]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[35]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[36]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[37]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[38]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[39]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[40]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[41]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[42]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[43]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[44]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[45]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[46]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[47]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[48]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[49]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[50]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[51]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[52]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[53]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[54]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[55]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[56]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[57]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[58]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[59]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[60]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[61]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[62]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[63]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[64]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[65]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[66]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[67]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[68]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[69]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[70]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[71]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[72]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[73]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[74]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[75]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[76]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[77]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[78]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[79]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[80]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[81]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[82]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[83]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[84]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[85]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[86]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[87]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[88]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[89]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[90]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[91]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[92]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[93]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[94]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[95]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[96]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[97]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[98]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[99]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[100]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[101]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[102]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[103]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[104]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[105]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[106]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[107]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[108]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[109]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[110]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[111]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[112]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[113]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[114]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[115]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[116]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[117]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[118]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[119]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[120]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[121]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[122]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[123]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[124]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[125]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[126]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AI_CTRL_DECODE_ADDR[127]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IMS_PEND_CLEAR_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           WB_SCH_OUT_AFULL_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IG_HCW_ENQ_AFULL_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           IG_HCW_ENQ_W_DB_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           EG_HCW_SCHED_DB_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AL_IMS_MSIX_DB_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AL_CWD_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AL_SIF_ALARM_AFULL_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           AL_HQM_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           ECC_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           PARITY_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           WRITE_BUFFER_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           ALARM_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CFG_PATCH_CONTROL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           INGRESS_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           EGRESS_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SYS_IDLE_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HCW_ENQ_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SCH_OUT_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SIF_ALARM_FIFO_CTL_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HCW_ENQ_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HCW_SCH_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SCH_OUT_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CFG_RX_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           CWDI_RX_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_ALARM_RX_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           SIF_ALARM_FIFO_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           ALARM_DB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           INGRESS_DB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           EGRESS_DB_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           ALARM_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           INGRESS_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           EGRESS_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           WBUF_STATUS_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           WBUF_STATUS2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           WBUF_DEBUG_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           ROB_SYNDROME_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           PHDR_DEBUG_0_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           PHDR_DEBUG_1_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           PHDR_DEBUG_2_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[4]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[5]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[6]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[7]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[8]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[9]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[10]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[11]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[12]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[13]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[14]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_PDATA_DEBUG_DECODE_ADDR[15]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HCW_REQ_DEBUG_DECODE_ADDR: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[0]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[1]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[2]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[3]: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?00,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?00,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?00,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?00,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?01,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?01,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?01,2'b10}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?01,2'b11}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?10,2'b00}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
           {40'h80020,4'b0?10,2'b01}: sai_successfull_per_byte = {{4{sai_HQM_OS_W_write_en}}};
            default: sai_successfull_per_byte = {4{1'b1}};
         endcase 
      default: sai_successfull_per_byte = {4{1'b1}};
   endcase 
end


always_comb ack.sai_successfull = &(sai_successfull_per_byte | ~be);


// end decode and addr logic section }

// ======================================================================
// begin rdata section {

always_comb begin : READ_DATA_BLOCK

   unique casez (req_opcode) 
      MRD:
         unique casez (case_req_addr_HQM_SYSTEM_CSR_MEM) 
           TOTAL_CREDITS_DECODE_ADDR: read_data = {TOTAL_CREDITS};
           TOTAL_LDB_QID_DECODE_ADDR: read_data = {TOTAL_LDB_QID};
           TOTAL_DIR_QID_DECODE_ADDR: read_data = {TOTAL_DIR_QID};
           TOTAL_LDB_PORTS_DECODE_ADDR: read_data = {TOTAL_LDB_PORTS};
           TOTAL_DIR_PORTS_DECODE_ADDR: read_data = {TOTAL_DIR_PORTS};
           TOTAL_VAS_DECODE_ADDR: read_data = {TOTAL_VAS};
           TOTAL_SN_REGIONS_DECODE_ADDR: read_data = {TOTAL_SN_REGIONS};
           TOTAL_VF_DECODE_ADDR: read_data = {TOTAL_VF};
           CFG_UNIT_VERSION_DECODE_ADDR: read_data = {CFG_UNIT_VERSION};
           INGRESS_ALARM_ENABLE_DECODE_ADDR: read_data = {INGRESS_ALARM_ENABLE};
           ALARM_LUT_PERR_DECODE_ADDR: read_data = {ALARM_LUT_PERR};
           EGRESS_LUT_ERR_DECODE_ADDR: read_data = {EGRESS_LUT_ERR};
           INGRESS_LUT_ERR_DECODE_ADDR: read_data = {INGRESS_LUT_ERR};
           ALARM_ERR_DECODE_ADDR: read_data = {ALARM_ERR};
           ALARM_MB_ECC_ERR_DECODE_ADDR: read_data = {ALARM_MB_ECC_ERR};
           ALARM_SB_ECC_ERR_DECODE_ADDR: read_data = {ALARM_SB_ECC_ERR};
           HQM_SYSTEM_CNT_CTL_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_CTL};
           MSIX_ACK_DECODE_ADDR: read_data = {MSIX_ACK};
           MSIX_PASSTHROUGH_DECODE_ADDR: read_data = {MSIX_PASSTHROUGH};
           MSIX_MODE_DECODE_ADDR: read_data = {MSIX_MODE};
           MSIX_31_0_SYND_DECODE_ADDR: read_data = {MSIX_31_0_SYND};
           MSIX_63_32_SYND_DECODE_ADDR: read_data = {MSIX_63_32_SYND};
           MSIX_64_SYND_DECODE_ADDR: read_data = {MSIX_64_SYND};
           MSIX_PBA_31_0_CLEAR_DECODE_ADDR: read_data = {MSIX_PBA_31_0_CLEAR};
           MSIX_PBA_63_32_CLEAR_DECODE_ADDR: read_data = {MSIX_PBA_63_32_CLEAR};
           MSIX_PBA_64_CLEAR_DECODE_ADDR: read_data = {MSIX_PBA_64_CLEAR};
           DIR_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR: read_data = {DIR_CQ_31_0_OCC_INT_STATUS};
           DIR_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR: read_data = {DIR_CQ_63_32_OCC_INT_STATUS};
           LDB_CQ_31_0_OCC_INT_STATUS_DECODE_ADDR: read_data = {LDB_CQ_31_0_OCC_INT_STATUS};
           LDB_CQ_63_32_OCC_INT_STATUS_DECODE_ADDR: read_data = {LDB_CQ_63_32_OCC_INT_STATUS};
           SYS_ALARM_INT_ENABLE_DECODE_ADDR: read_data = {SYS_ALARM_INT_ENABLE};
           SYS_ALARM_MB_ECC_INT_ENABLE_DECODE_ADDR: read_data = {SYS_ALARM_MB_ECC_INT_ENABLE};
           SYS_ALARM_SB_ECC_INT_ENABLE_DECODE_ADDR: read_data = {SYS_ALARM_SB_ECC_INT_ENABLE};
           {44'h50,2'b00}: read_data = handcode_reg_rdata_ALARM_PF_SYND0;
           {44'h50,2'b01}: read_data = handcode_reg_rdata_ALARM_PF_SYND1;
           {44'h50,2'b10}: read_data = handcode_reg_rdata_ALARM_PF_SYND2;
           {44'h50,2'b11}: read_data = handcode_reg_rdata_ALARM_HW_SYND;
           {28'b0??,16'h??F0,2'b00}: read_data = handcode_reg_rdata_VF_LDB_VPP_V;
           {28'b0??,16'h??F0,2'b01}: read_data = handcode_reg_rdata_VF_LDB_VPP2PP;
           {28'b0??,16'h??F0,2'b10}: read_data = handcode_reg_rdata_VF_DIR_VPP_V;
           {28'b0??,16'h??F0,2'b11}: read_data = handcode_reg_rdata_VF_DIR_VPP2PP;
           {28'b0?,16'h??F1,2'b00}: read_data = handcode_reg_rdata_VF_LDB_VQID_V;
           {28'b0?,16'h??F1,2'b01}: read_data = handcode_reg_rdata_VF_LDB_VQID2QID;
           {32'b0?,12'h?F1,2'b10}: read_data = handcode_reg_rdata_LDB_QID2VQID;
           {28'b0??,16'h??F1,2'b11}: read_data = handcode_reg_rdata_VF_DIR_VQID_V;
           {28'b0??,16'h??F2,2'b00}: read_data = handcode_reg_rdata_VF_DIR_VQID2QID;
           {28'b0??,16'h??F2,2'b01}: read_data = handcode_reg_rdata_LDB_VASQID_V;
           {28'b0???,16'h??F2,2'b10}: read_data = handcode_reg_rdata_DIR_VASQID_V;
           {44'h0?F4,2'b00}: read_data = handcode_reg_rdata_ALARM_VF_SYND0;
           {44'h0?F4,2'b01}: read_data = handcode_reg_rdata_ALARM_VF_SYND1;
           {44'h0?F4,2'b10}: read_data = handcode_reg_rdata_ALARM_VF_SYND2;
           {32'b0?,12'h?F5,2'b00}: read_data = handcode_reg_rdata_LDB_QID_V;
           {32'b0?,12'h?F5,2'b01}: read_data = handcode_reg_rdata_LDB_QID_ITS;
           {32'b0?,12'h?F5,2'b10}: read_data = handcode_reg_rdata_LDB_QID_CFG_V;
           {32'b0??,12'h?F6,2'b00}: read_data = handcode_reg_rdata_DIR_QID_V;
           {32'b0??,12'h?F6,2'b01}: read_data = handcode_reg_rdata_DIR_QID_ITS;
           {32'b0??,12'h?F8,2'b00}: read_data = handcode_reg_rdata_LDB_CQ_ADDR_L;
           {32'b0??,12'h?F8,2'b01}: read_data = handcode_reg_rdata_LDB_CQ_ADDR_U;
           {32'b0??,12'h?F8,2'b10}: read_data = handcode_reg_rdata_LDB_PP2VAS;
           HQM_LDB_PP2VDEV_DECODE_ADDR[0]: read_data = {HQM_LDB_PP2VDEV[0]};
           {32'b0??,12'h?F9,2'b00}: read_data = handcode_reg_rdata_LDB_PP_V;
           {32'b0??,12'h?F9,2'b01}: read_data = handcode_reg_rdata_LDB_CQ2VF_PF_RO;
           {32'b0??,12'h?F9,2'b10}: read_data = handcode_reg_rdata_LDB_CQ_ISR;
           {32'b0??,12'h?F9,2'b11}: read_data = handcode_reg_rdata_LDB_CQ_PASID;
           LDB_PP_ROB_V_DECODE_ADDR[0]: read_data = {LDB_PP_ROB_V[0]};
           {32'b0??,12'h?FC,2'b00}: read_data = handcode_reg_rdata_DIR_CQ_ADDR_L;
           {32'b0??,12'h?FC,2'b01}: read_data = handcode_reg_rdata_DIR_CQ_ADDR_U;
           {32'b0??,12'h?FC,2'b10}: read_data = handcode_reg_rdata_DIR_PP2VAS;
           HQM_DIR_PP2VDEV_DECODE_ADDR[0]: read_data = {HQM_DIR_PP2VDEV[0]};
           {32'b0??,12'h?FD,2'b00}: read_data = handcode_reg_rdata_DIR_PP_V;
           {32'b0??,12'h?FD,2'b01}: read_data = handcode_reg_rdata_DIR_CQ2VF_PF_RO;
           {32'b0??,12'h?FD,2'b10}: read_data = handcode_reg_rdata_DIR_CQ_ISR;
           {32'b0??,12'h?FD,2'b11}: read_data = handcode_reg_rdata_DIR_CQ_PASID;
           {32'b0??,12'h?FE,2'b00}: read_data = handcode_reg_rdata_DIR_CQ_FMT;
           DIR_PP_ROB_V_DECODE_ADDR[0]: read_data = {DIR_PP_ROB_V[0]};
           HQM_SYSTEM_CNT_0_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_0};
           HQM_SYSTEM_CNT_1_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_1};
           HQM_SYSTEM_CNT_2_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_2};
           HQM_SYSTEM_CNT_3_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_3};
           HQM_SYSTEM_CNT_4_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_4};
           HQM_SYSTEM_CNT_5_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_5};
           HQM_SYSTEM_CNT_6_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_6};
           HQM_SYSTEM_CNT_7_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_7};
           HQM_SYSTEM_CNT_8_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_8};
           HQM_SYSTEM_CNT_9_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_9};
           HQM_SYSTEM_CNT_10_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_10};
           HQM_SYSTEM_CNT_11_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_11};
           HQM_SYSTEM_CNT_12_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_12};
           HQM_SYSTEM_CNT_13_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_13};
           HQM_SYSTEM_CNT_14_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_14};
           HQM_SYSTEM_CNT_15_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_15};
           HQM_SYSTEM_CNT_16_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_16};
           HQM_SYSTEM_CNT_17_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_17};
           HQM_SYSTEM_CNT_18_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_18};
           HQM_SYSTEM_CNT_19_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_19};
           HQM_SYSTEM_CNT_20_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_20};
           HQM_SYSTEM_CNT_21_DECODE_ADDR: read_data = {HQM_SYSTEM_CNT_21};
           HQM_LDB_PP2VDEV_DECODE_ADDR[1]: read_data = {HQM_LDB_PP2VDEV[1]};
           LDB_PP_ROB_V_DECODE_ADDR[1]: read_data = {LDB_PP_ROB_V[1]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[1]: read_data = {HQM_DIR_PP2VDEV[1]};
           DIR_PP_ROB_V_DECODE_ADDR[1]: read_data = {DIR_PP_ROB_V[1]};
           {44'h200,2'b00}: read_data = handcode_reg_rdata_SBE_CNT_0;
           {44'h200,2'b01}: read_data = handcode_reg_rdata_SBE_CNT_1;
           HQM_LDB_PP2VDEV_DECODE_ADDR[2]: read_data = {HQM_LDB_PP2VDEV[2]};
           LDB_PP_ROB_V_DECODE_ADDR[2]: read_data = {LDB_PP_ROB_V[2]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[2]: read_data = {HQM_DIR_PP2VDEV[2]};
           DIR_PP_ROB_V_DECODE_ADDR[2]: read_data = {DIR_PP_ROB_V[2]};
           {44'h300,2'b00}: read_data = handcode_reg_rdata_PERF_SMON_CONFIGURATION0;
           {44'h300,2'b01}: read_data = handcode_reg_rdata_PERF_SMON_CONFIGURATION1;
           {44'h300,2'b10}: read_data = handcode_reg_rdata_PERF_SMON_COMPARE0;
           {44'h300,2'b11}: read_data = handcode_reg_rdata_PERF_SMON_COMPARE1;
           {44'h301,2'b00}: read_data = handcode_reg_rdata_PERF_SMON_ACTIVITYCOUNTER0;
           {44'h301,2'b01}: read_data = handcode_reg_rdata_PERF_SMON_ACTIVITYCOUNTER1;
           {44'h301,2'b10}: read_data = handcode_reg_rdata_PERF_SMON_TIMER;
           {44'h301,2'b11}: read_data = handcode_reg_rdata_PERF_SMON_MAXIMUM_TIMER;
           {44'h302,2'b00}: read_data = handcode_reg_rdata_PERF_SMON_COMP_MASK0;
           {44'h302,2'b01}: read_data = handcode_reg_rdata_PERF_SMON_COMP_MASK1;
           HQM_LDB_PP2VDEV_DECODE_ADDR[3]: read_data = {HQM_LDB_PP2VDEV[3]};
           LDB_PP_ROB_V_DECODE_ADDR[3]: read_data = {LDB_PP_ROB_V[3]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[3]: read_data = {HQM_DIR_PP2VDEV[3]};
           DIR_PP_ROB_V_DECODE_ADDR[3]: read_data = {DIR_PP_ROB_V[3]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[4]: read_data = {HQM_LDB_PP2VDEV[4]};
           LDB_PP_ROB_V_DECODE_ADDR[4]: read_data = {LDB_PP_ROB_V[4]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[4]: read_data = {HQM_DIR_PP2VDEV[4]};
           DIR_PP_ROB_V_DECODE_ADDR[4]: read_data = {DIR_PP_ROB_V[4]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[5]: read_data = {HQM_LDB_PP2VDEV[5]};
           LDB_PP_ROB_V_DECODE_ADDR[5]: read_data = {LDB_PP_ROB_V[5]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[5]: read_data = {HQM_DIR_PP2VDEV[5]};
           DIR_PP_ROB_V_DECODE_ADDR[5]: read_data = {DIR_PP_ROB_V[5]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[6]: read_data = {HQM_LDB_PP2VDEV[6]};
           LDB_PP_ROB_V_DECODE_ADDR[6]: read_data = {LDB_PP_ROB_V[6]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[6]: read_data = {HQM_DIR_PP2VDEV[6]};
           DIR_PP_ROB_V_DECODE_ADDR[6]: read_data = {DIR_PP_ROB_V[6]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[7]: read_data = {HQM_LDB_PP2VDEV[7]};
           LDB_PP_ROB_V_DECODE_ADDR[7]: read_data = {LDB_PP_ROB_V[7]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[7]: read_data = {HQM_DIR_PP2VDEV[7]};
           DIR_PP_ROB_V_DECODE_ADDR[7]: read_data = {DIR_PP_ROB_V[7]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[8]: read_data = {HQM_LDB_PP2VDEV[8]};
           LDB_PP_ROB_V_DECODE_ADDR[8]: read_data = {LDB_PP_ROB_V[8]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[8]: read_data = {HQM_DIR_PP2VDEV[8]};
           DIR_PP_ROB_V_DECODE_ADDR[8]: read_data = {DIR_PP_ROB_V[8]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[9]: read_data = {HQM_LDB_PP2VDEV[9]};
           LDB_PP_ROB_V_DECODE_ADDR[9]: read_data = {LDB_PP_ROB_V[9]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[9]: read_data = {HQM_DIR_PP2VDEV[9]};
           DIR_PP_ROB_V_DECODE_ADDR[9]: read_data = {DIR_PP_ROB_V[9]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[10]: read_data = {HQM_LDB_PP2VDEV[10]};
           LDB_PP_ROB_V_DECODE_ADDR[10]: read_data = {LDB_PP_ROB_V[10]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[10]: read_data = {HQM_DIR_PP2VDEV[10]};
           DIR_PP_ROB_V_DECODE_ADDR[10]: read_data = {DIR_PP_ROB_V[10]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[11]: read_data = {HQM_LDB_PP2VDEV[11]};
           LDB_PP_ROB_V_DECODE_ADDR[11]: read_data = {LDB_PP_ROB_V[11]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[11]: read_data = {HQM_DIR_PP2VDEV[11]};
           DIR_PP_ROB_V_DECODE_ADDR[11]: read_data = {DIR_PP_ROB_V[11]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[12]: read_data = {HQM_LDB_PP2VDEV[12]};
           LDB_PP_ROB_V_DECODE_ADDR[12]: read_data = {LDB_PP_ROB_V[12]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[12]: read_data = {HQM_DIR_PP2VDEV[12]};
           DIR_PP_ROB_V_DECODE_ADDR[12]: read_data = {DIR_PP_ROB_V[12]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[13]: read_data = {HQM_LDB_PP2VDEV[13]};
           LDB_PP_ROB_V_DECODE_ADDR[13]: read_data = {LDB_PP_ROB_V[13]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[13]: read_data = {HQM_DIR_PP2VDEV[13]};
           DIR_PP_ROB_V_DECODE_ADDR[13]: read_data = {DIR_PP_ROB_V[13]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[14]: read_data = {HQM_LDB_PP2VDEV[14]};
           LDB_PP_ROB_V_DECODE_ADDR[14]: read_data = {LDB_PP_ROB_V[14]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[14]: read_data = {HQM_DIR_PP2VDEV[14]};
           DIR_PP_ROB_V_DECODE_ADDR[14]: read_data = {DIR_PP_ROB_V[14]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[15]: read_data = {HQM_LDB_PP2VDEV[15]};
           LDB_PP_ROB_V_DECODE_ADDR[15]: read_data = {LDB_PP_ROB_V[15]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[15]: read_data = {HQM_DIR_PP2VDEV[15]};
           DIR_PP_ROB_V_DECODE_ADDR[15]: read_data = {DIR_PP_ROB_V[15]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[16]: read_data = {HQM_LDB_PP2VDEV[16]};
           LDB_PP_ROB_V_DECODE_ADDR[16]: read_data = {LDB_PP_ROB_V[16]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[16]: read_data = {HQM_DIR_PP2VDEV[16]};
           DIR_PP_ROB_V_DECODE_ADDR[16]: read_data = {DIR_PP_ROB_V[16]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[17]: read_data = {HQM_LDB_PP2VDEV[17]};
           LDB_PP_ROB_V_DECODE_ADDR[17]: read_data = {LDB_PP_ROB_V[17]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[17]: read_data = {HQM_DIR_PP2VDEV[17]};
           DIR_PP_ROB_V_DECODE_ADDR[17]: read_data = {DIR_PP_ROB_V[17]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[18]: read_data = {HQM_LDB_PP2VDEV[18]};
           LDB_PP_ROB_V_DECODE_ADDR[18]: read_data = {LDB_PP_ROB_V[18]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[18]: read_data = {HQM_DIR_PP2VDEV[18]};
           DIR_PP_ROB_V_DECODE_ADDR[18]: read_data = {DIR_PP_ROB_V[18]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[19]: read_data = {HQM_LDB_PP2VDEV[19]};
           LDB_PP_ROB_V_DECODE_ADDR[19]: read_data = {LDB_PP_ROB_V[19]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[19]: read_data = {HQM_DIR_PP2VDEV[19]};
           DIR_PP_ROB_V_DECODE_ADDR[19]: read_data = {DIR_PP_ROB_V[19]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[20]: read_data = {HQM_LDB_PP2VDEV[20]};
           LDB_PP_ROB_V_DECODE_ADDR[20]: read_data = {LDB_PP_ROB_V[20]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[20]: read_data = {HQM_DIR_PP2VDEV[20]};
           DIR_PP_ROB_V_DECODE_ADDR[20]: read_data = {DIR_PP_ROB_V[20]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[21]: read_data = {HQM_LDB_PP2VDEV[21]};
           LDB_PP_ROB_V_DECODE_ADDR[21]: read_data = {LDB_PP_ROB_V[21]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[21]: read_data = {HQM_DIR_PP2VDEV[21]};
           DIR_PP_ROB_V_DECODE_ADDR[21]: read_data = {DIR_PP_ROB_V[21]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[22]: read_data = {HQM_LDB_PP2VDEV[22]};
           LDB_PP_ROB_V_DECODE_ADDR[22]: read_data = {LDB_PP_ROB_V[22]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[22]: read_data = {HQM_DIR_PP2VDEV[22]};
           DIR_PP_ROB_V_DECODE_ADDR[22]: read_data = {DIR_PP_ROB_V[22]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[23]: read_data = {HQM_LDB_PP2VDEV[23]};
           LDB_PP_ROB_V_DECODE_ADDR[23]: read_data = {LDB_PP_ROB_V[23]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[23]: read_data = {HQM_DIR_PP2VDEV[23]};
           DIR_PP_ROB_V_DECODE_ADDR[23]: read_data = {DIR_PP_ROB_V[23]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[24]: read_data = {HQM_LDB_PP2VDEV[24]};
           LDB_PP_ROB_V_DECODE_ADDR[24]: read_data = {LDB_PP_ROB_V[24]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[24]: read_data = {HQM_DIR_PP2VDEV[24]};
           DIR_PP_ROB_V_DECODE_ADDR[24]: read_data = {DIR_PP_ROB_V[24]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[25]: read_data = {HQM_LDB_PP2VDEV[25]};
           LDB_PP_ROB_V_DECODE_ADDR[25]: read_data = {LDB_PP_ROB_V[25]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[25]: read_data = {HQM_DIR_PP2VDEV[25]};
           DIR_PP_ROB_V_DECODE_ADDR[25]: read_data = {DIR_PP_ROB_V[25]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[26]: read_data = {HQM_LDB_PP2VDEV[26]};
           LDB_PP_ROB_V_DECODE_ADDR[26]: read_data = {LDB_PP_ROB_V[26]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[26]: read_data = {HQM_DIR_PP2VDEV[26]};
           DIR_PP_ROB_V_DECODE_ADDR[26]: read_data = {DIR_PP_ROB_V[26]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[27]: read_data = {HQM_LDB_PP2VDEV[27]};
           LDB_PP_ROB_V_DECODE_ADDR[27]: read_data = {LDB_PP_ROB_V[27]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[27]: read_data = {HQM_DIR_PP2VDEV[27]};
           DIR_PP_ROB_V_DECODE_ADDR[27]: read_data = {DIR_PP_ROB_V[27]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[28]: read_data = {HQM_LDB_PP2VDEV[28]};
           LDB_PP_ROB_V_DECODE_ADDR[28]: read_data = {LDB_PP_ROB_V[28]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[28]: read_data = {HQM_DIR_PP2VDEV[28]};
           DIR_PP_ROB_V_DECODE_ADDR[28]: read_data = {DIR_PP_ROB_V[28]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[29]: read_data = {HQM_LDB_PP2VDEV[29]};
           LDB_PP_ROB_V_DECODE_ADDR[29]: read_data = {LDB_PP_ROB_V[29]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[29]: read_data = {HQM_DIR_PP2VDEV[29]};
           DIR_PP_ROB_V_DECODE_ADDR[29]: read_data = {DIR_PP_ROB_V[29]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[30]: read_data = {HQM_LDB_PP2VDEV[30]};
           LDB_PP_ROB_V_DECODE_ADDR[30]: read_data = {LDB_PP_ROB_V[30]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[30]: read_data = {HQM_DIR_PP2VDEV[30]};
           DIR_PP_ROB_V_DECODE_ADDR[30]: read_data = {DIR_PP_ROB_V[30]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[31]: read_data = {HQM_LDB_PP2VDEV[31]};
           LDB_PP_ROB_V_DECODE_ADDR[31]: read_data = {LDB_PP_ROB_V[31]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[31]: read_data = {HQM_DIR_PP2VDEV[31]};
           DIR_PP_ROB_V_DECODE_ADDR[31]: read_data = {DIR_PP_ROB_V[31]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[32]: read_data = {HQM_LDB_PP2VDEV[32]};
           LDB_PP_ROB_V_DECODE_ADDR[32]: read_data = {LDB_PP_ROB_V[32]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[32]: read_data = {HQM_DIR_PP2VDEV[32]};
           DIR_PP_ROB_V_DECODE_ADDR[32]: read_data = {DIR_PP_ROB_V[32]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[33]: read_data = {HQM_LDB_PP2VDEV[33]};
           LDB_PP_ROB_V_DECODE_ADDR[33]: read_data = {LDB_PP_ROB_V[33]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[33]: read_data = {HQM_DIR_PP2VDEV[33]};
           DIR_PP_ROB_V_DECODE_ADDR[33]: read_data = {DIR_PP_ROB_V[33]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[34]: read_data = {HQM_LDB_PP2VDEV[34]};
           LDB_PP_ROB_V_DECODE_ADDR[34]: read_data = {LDB_PP_ROB_V[34]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[34]: read_data = {HQM_DIR_PP2VDEV[34]};
           DIR_PP_ROB_V_DECODE_ADDR[34]: read_data = {DIR_PP_ROB_V[34]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[35]: read_data = {HQM_LDB_PP2VDEV[35]};
           LDB_PP_ROB_V_DECODE_ADDR[35]: read_data = {LDB_PP_ROB_V[35]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[35]: read_data = {HQM_DIR_PP2VDEV[35]};
           DIR_PP_ROB_V_DECODE_ADDR[35]: read_data = {DIR_PP_ROB_V[35]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[36]: read_data = {HQM_LDB_PP2VDEV[36]};
           LDB_PP_ROB_V_DECODE_ADDR[36]: read_data = {LDB_PP_ROB_V[36]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[36]: read_data = {HQM_DIR_PP2VDEV[36]};
           DIR_PP_ROB_V_DECODE_ADDR[36]: read_data = {DIR_PP_ROB_V[36]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[37]: read_data = {HQM_LDB_PP2VDEV[37]};
           LDB_PP_ROB_V_DECODE_ADDR[37]: read_data = {LDB_PP_ROB_V[37]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[37]: read_data = {HQM_DIR_PP2VDEV[37]};
           DIR_PP_ROB_V_DECODE_ADDR[37]: read_data = {DIR_PP_ROB_V[37]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[38]: read_data = {HQM_LDB_PP2VDEV[38]};
           LDB_PP_ROB_V_DECODE_ADDR[38]: read_data = {LDB_PP_ROB_V[38]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[38]: read_data = {HQM_DIR_PP2VDEV[38]};
           DIR_PP_ROB_V_DECODE_ADDR[38]: read_data = {DIR_PP_ROB_V[38]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[39]: read_data = {HQM_LDB_PP2VDEV[39]};
           LDB_PP_ROB_V_DECODE_ADDR[39]: read_data = {LDB_PP_ROB_V[39]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[39]: read_data = {HQM_DIR_PP2VDEV[39]};
           DIR_PP_ROB_V_DECODE_ADDR[39]: read_data = {DIR_PP_ROB_V[39]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[40]: read_data = {HQM_LDB_PP2VDEV[40]};
           LDB_PP_ROB_V_DECODE_ADDR[40]: read_data = {LDB_PP_ROB_V[40]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[40]: read_data = {HQM_DIR_PP2VDEV[40]};
           DIR_PP_ROB_V_DECODE_ADDR[40]: read_data = {DIR_PP_ROB_V[40]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[41]: read_data = {HQM_LDB_PP2VDEV[41]};
           LDB_PP_ROB_V_DECODE_ADDR[41]: read_data = {LDB_PP_ROB_V[41]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[41]: read_data = {HQM_DIR_PP2VDEV[41]};
           DIR_PP_ROB_V_DECODE_ADDR[41]: read_data = {DIR_PP_ROB_V[41]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[42]: read_data = {HQM_LDB_PP2VDEV[42]};
           LDB_PP_ROB_V_DECODE_ADDR[42]: read_data = {LDB_PP_ROB_V[42]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[42]: read_data = {HQM_DIR_PP2VDEV[42]};
           DIR_PP_ROB_V_DECODE_ADDR[42]: read_data = {DIR_PP_ROB_V[42]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[43]: read_data = {HQM_LDB_PP2VDEV[43]};
           LDB_PP_ROB_V_DECODE_ADDR[43]: read_data = {LDB_PP_ROB_V[43]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[43]: read_data = {HQM_DIR_PP2VDEV[43]};
           DIR_PP_ROB_V_DECODE_ADDR[43]: read_data = {DIR_PP_ROB_V[43]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[44]: read_data = {HQM_LDB_PP2VDEV[44]};
           LDB_PP_ROB_V_DECODE_ADDR[44]: read_data = {LDB_PP_ROB_V[44]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[44]: read_data = {HQM_DIR_PP2VDEV[44]};
           DIR_PP_ROB_V_DECODE_ADDR[44]: read_data = {DIR_PP_ROB_V[44]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[45]: read_data = {HQM_LDB_PP2VDEV[45]};
           LDB_PP_ROB_V_DECODE_ADDR[45]: read_data = {LDB_PP_ROB_V[45]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[45]: read_data = {HQM_DIR_PP2VDEV[45]};
           DIR_PP_ROB_V_DECODE_ADDR[45]: read_data = {DIR_PP_ROB_V[45]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[46]: read_data = {HQM_LDB_PP2VDEV[46]};
           LDB_PP_ROB_V_DECODE_ADDR[46]: read_data = {LDB_PP_ROB_V[46]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[46]: read_data = {HQM_DIR_PP2VDEV[46]};
           DIR_PP_ROB_V_DECODE_ADDR[46]: read_data = {DIR_PP_ROB_V[46]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[47]: read_data = {HQM_LDB_PP2VDEV[47]};
           LDB_PP_ROB_V_DECODE_ADDR[47]: read_data = {LDB_PP_ROB_V[47]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[47]: read_data = {HQM_DIR_PP2VDEV[47]};
           DIR_PP_ROB_V_DECODE_ADDR[47]: read_data = {DIR_PP_ROB_V[47]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[48]: read_data = {HQM_LDB_PP2VDEV[48]};
           LDB_PP_ROB_V_DECODE_ADDR[48]: read_data = {LDB_PP_ROB_V[48]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[48]: read_data = {HQM_DIR_PP2VDEV[48]};
           DIR_PP_ROB_V_DECODE_ADDR[48]: read_data = {DIR_PP_ROB_V[48]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[49]: read_data = {HQM_LDB_PP2VDEV[49]};
           LDB_PP_ROB_V_DECODE_ADDR[49]: read_data = {LDB_PP_ROB_V[49]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[49]: read_data = {HQM_DIR_PP2VDEV[49]};
           DIR_PP_ROB_V_DECODE_ADDR[49]: read_data = {DIR_PP_ROB_V[49]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[50]: read_data = {HQM_LDB_PP2VDEV[50]};
           LDB_PP_ROB_V_DECODE_ADDR[50]: read_data = {LDB_PP_ROB_V[50]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[50]: read_data = {HQM_DIR_PP2VDEV[50]};
           DIR_PP_ROB_V_DECODE_ADDR[50]: read_data = {DIR_PP_ROB_V[50]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[51]: read_data = {HQM_LDB_PP2VDEV[51]};
           LDB_PP_ROB_V_DECODE_ADDR[51]: read_data = {LDB_PP_ROB_V[51]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[51]: read_data = {HQM_DIR_PP2VDEV[51]};
           DIR_PP_ROB_V_DECODE_ADDR[51]: read_data = {DIR_PP_ROB_V[51]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[52]: read_data = {HQM_LDB_PP2VDEV[52]};
           LDB_PP_ROB_V_DECODE_ADDR[52]: read_data = {LDB_PP_ROB_V[52]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[52]: read_data = {HQM_DIR_PP2VDEV[52]};
           DIR_PP_ROB_V_DECODE_ADDR[52]: read_data = {DIR_PP_ROB_V[52]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[53]: read_data = {HQM_LDB_PP2VDEV[53]};
           LDB_PP_ROB_V_DECODE_ADDR[53]: read_data = {LDB_PP_ROB_V[53]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[53]: read_data = {HQM_DIR_PP2VDEV[53]};
           DIR_PP_ROB_V_DECODE_ADDR[53]: read_data = {DIR_PP_ROB_V[53]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[54]: read_data = {HQM_LDB_PP2VDEV[54]};
           LDB_PP_ROB_V_DECODE_ADDR[54]: read_data = {LDB_PP_ROB_V[54]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[54]: read_data = {HQM_DIR_PP2VDEV[54]};
           DIR_PP_ROB_V_DECODE_ADDR[54]: read_data = {DIR_PP_ROB_V[54]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[55]: read_data = {HQM_LDB_PP2VDEV[55]};
           LDB_PP_ROB_V_DECODE_ADDR[55]: read_data = {LDB_PP_ROB_V[55]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[55]: read_data = {HQM_DIR_PP2VDEV[55]};
           DIR_PP_ROB_V_DECODE_ADDR[55]: read_data = {DIR_PP_ROB_V[55]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[56]: read_data = {HQM_LDB_PP2VDEV[56]};
           LDB_PP_ROB_V_DECODE_ADDR[56]: read_data = {LDB_PP_ROB_V[56]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[56]: read_data = {HQM_DIR_PP2VDEV[56]};
           DIR_PP_ROB_V_DECODE_ADDR[56]: read_data = {DIR_PP_ROB_V[56]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[57]: read_data = {HQM_LDB_PP2VDEV[57]};
           LDB_PP_ROB_V_DECODE_ADDR[57]: read_data = {LDB_PP_ROB_V[57]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[57]: read_data = {HQM_DIR_PP2VDEV[57]};
           DIR_PP_ROB_V_DECODE_ADDR[57]: read_data = {DIR_PP_ROB_V[57]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[58]: read_data = {HQM_LDB_PP2VDEV[58]};
           LDB_PP_ROB_V_DECODE_ADDR[58]: read_data = {LDB_PP_ROB_V[58]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[58]: read_data = {HQM_DIR_PP2VDEV[58]};
           DIR_PP_ROB_V_DECODE_ADDR[58]: read_data = {DIR_PP_ROB_V[58]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[59]: read_data = {HQM_LDB_PP2VDEV[59]};
           LDB_PP_ROB_V_DECODE_ADDR[59]: read_data = {LDB_PP_ROB_V[59]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[59]: read_data = {HQM_DIR_PP2VDEV[59]};
           DIR_PP_ROB_V_DECODE_ADDR[59]: read_data = {DIR_PP_ROB_V[59]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[60]: read_data = {HQM_LDB_PP2VDEV[60]};
           LDB_PP_ROB_V_DECODE_ADDR[60]: read_data = {LDB_PP_ROB_V[60]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[60]: read_data = {HQM_DIR_PP2VDEV[60]};
           DIR_PP_ROB_V_DECODE_ADDR[60]: read_data = {DIR_PP_ROB_V[60]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[61]: read_data = {HQM_LDB_PP2VDEV[61]};
           LDB_PP_ROB_V_DECODE_ADDR[61]: read_data = {LDB_PP_ROB_V[61]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[61]: read_data = {HQM_DIR_PP2VDEV[61]};
           DIR_PP_ROB_V_DECODE_ADDR[61]: read_data = {DIR_PP_ROB_V[61]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[62]: read_data = {HQM_LDB_PP2VDEV[62]};
           LDB_PP_ROB_V_DECODE_ADDR[62]: read_data = {LDB_PP_ROB_V[62]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[62]: read_data = {HQM_DIR_PP2VDEV[62]};
           DIR_PP_ROB_V_DECODE_ADDR[62]: read_data = {DIR_PP_ROB_V[62]};
           HQM_LDB_PP2VDEV_DECODE_ADDR[63]: read_data = {HQM_LDB_PP2VDEV[63]};
           LDB_PP_ROB_V_DECODE_ADDR[63]: read_data = {LDB_PP_ROB_V[63]};
           HQM_DIR_PP2VDEV_DECODE_ADDR[63]: read_data = {HQM_DIR_PP2VDEV[63]};
           DIR_PP_ROB_V_DECODE_ADDR[63]: read_data = {DIR_PP_ROB_V[63]};
           {28'h1C,4'b00??,12'h?00,2'b00}: read_data = handcode_reg_rdata_WB_DIR_CQ_STATE;
           {28'h1D,4'b00??,12'h?00,2'b00}: read_data = handcode_reg_rdata_WB_LDB_CQ_STATE;
           {36'h1E00,4'b0???,4'h?,2'b00}: read_data = handcode_reg_rdata_AI_ADDR_L;
           {36'h1E00,4'b0???,4'h?,2'b01}: read_data = handcode_reg_rdata_AI_ADDR_U;
           {36'h1E00,4'b0???,4'h?,2'b10}: read_data = handcode_reg_rdata_AI_DATA;
           AI_CTRL_DECODE_ADDR[0]: read_data = {AI_CTRL[0]};
           AI_CTRL_DECODE_ADDR[1]: read_data = {AI_CTRL[1]};
           AI_CTRL_DECODE_ADDR[2]: read_data = {AI_CTRL[2]};
           AI_CTRL_DECODE_ADDR[3]: read_data = {AI_CTRL[3]};
           AI_CTRL_DECODE_ADDR[4]: read_data = {AI_CTRL[4]};
           AI_CTRL_DECODE_ADDR[5]: read_data = {AI_CTRL[5]};
           AI_CTRL_DECODE_ADDR[6]: read_data = {AI_CTRL[6]};
           AI_CTRL_DECODE_ADDR[7]: read_data = {AI_CTRL[7]};
           AI_CTRL_DECODE_ADDR[8]: read_data = {AI_CTRL[8]};
           AI_CTRL_DECODE_ADDR[9]: read_data = {AI_CTRL[9]};
           AI_CTRL_DECODE_ADDR[10]: read_data = {AI_CTRL[10]};
           AI_CTRL_DECODE_ADDR[11]: read_data = {AI_CTRL[11]};
           AI_CTRL_DECODE_ADDR[12]: read_data = {AI_CTRL[12]};
           AI_CTRL_DECODE_ADDR[13]: read_data = {AI_CTRL[13]};
           AI_CTRL_DECODE_ADDR[14]: read_data = {AI_CTRL[14]};
           AI_CTRL_DECODE_ADDR[15]: read_data = {AI_CTRL[15]};
           AI_CTRL_DECODE_ADDR[16]: read_data = {AI_CTRL[16]};
           AI_CTRL_DECODE_ADDR[17]: read_data = {AI_CTRL[17]};
           AI_CTRL_DECODE_ADDR[18]: read_data = {AI_CTRL[18]};
           AI_CTRL_DECODE_ADDR[19]: read_data = {AI_CTRL[19]};
           AI_CTRL_DECODE_ADDR[20]: read_data = {AI_CTRL[20]};
           AI_CTRL_DECODE_ADDR[21]: read_data = {AI_CTRL[21]};
           AI_CTRL_DECODE_ADDR[22]: read_data = {AI_CTRL[22]};
           AI_CTRL_DECODE_ADDR[23]: read_data = {AI_CTRL[23]};
           AI_CTRL_DECODE_ADDR[24]: read_data = {AI_CTRL[24]};
           AI_CTRL_DECODE_ADDR[25]: read_data = {AI_CTRL[25]};
           AI_CTRL_DECODE_ADDR[26]: read_data = {AI_CTRL[26]};
           AI_CTRL_DECODE_ADDR[27]: read_data = {AI_CTRL[27]};
           AI_CTRL_DECODE_ADDR[28]: read_data = {AI_CTRL[28]};
           AI_CTRL_DECODE_ADDR[29]: read_data = {AI_CTRL[29]};
           AI_CTRL_DECODE_ADDR[30]: read_data = {AI_CTRL[30]};
           AI_CTRL_DECODE_ADDR[31]: read_data = {AI_CTRL[31]};
           AI_CTRL_DECODE_ADDR[32]: read_data = {AI_CTRL[32]};
           AI_CTRL_DECODE_ADDR[33]: read_data = {AI_CTRL[33]};
           AI_CTRL_DECODE_ADDR[34]: read_data = {AI_CTRL[34]};
           AI_CTRL_DECODE_ADDR[35]: read_data = {AI_CTRL[35]};
           AI_CTRL_DECODE_ADDR[36]: read_data = {AI_CTRL[36]};
           AI_CTRL_DECODE_ADDR[37]: read_data = {AI_CTRL[37]};
           AI_CTRL_DECODE_ADDR[38]: read_data = {AI_CTRL[38]};
           AI_CTRL_DECODE_ADDR[39]: read_data = {AI_CTRL[39]};
           AI_CTRL_DECODE_ADDR[40]: read_data = {AI_CTRL[40]};
           AI_CTRL_DECODE_ADDR[41]: read_data = {AI_CTRL[41]};
           AI_CTRL_DECODE_ADDR[42]: read_data = {AI_CTRL[42]};
           AI_CTRL_DECODE_ADDR[43]: read_data = {AI_CTRL[43]};
           AI_CTRL_DECODE_ADDR[44]: read_data = {AI_CTRL[44]};
           AI_CTRL_DECODE_ADDR[45]: read_data = {AI_CTRL[45]};
           AI_CTRL_DECODE_ADDR[46]: read_data = {AI_CTRL[46]};
           AI_CTRL_DECODE_ADDR[47]: read_data = {AI_CTRL[47]};
           AI_CTRL_DECODE_ADDR[48]: read_data = {AI_CTRL[48]};
           AI_CTRL_DECODE_ADDR[49]: read_data = {AI_CTRL[49]};
           AI_CTRL_DECODE_ADDR[50]: read_data = {AI_CTRL[50]};
           AI_CTRL_DECODE_ADDR[51]: read_data = {AI_CTRL[51]};
           AI_CTRL_DECODE_ADDR[52]: read_data = {AI_CTRL[52]};
           AI_CTRL_DECODE_ADDR[53]: read_data = {AI_CTRL[53]};
           AI_CTRL_DECODE_ADDR[54]: read_data = {AI_CTRL[54]};
           AI_CTRL_DECODE_ADDR[55]: read_data = {AI_CTRL[55]};
           AI_CTRL_DECODE_ADDR[56]: read_data = {AI_CTRL[56]};
           AI_CTRL_DECODE_ADDR[57]: read_data = {AI_CTRL[57]};
           AI_CTRL_DECODE_ADDR[58]: read_data = {AI_CTRL[58]};
           AI_CTRL_DECODE_ADDR[59]: read_data = {AI_CTRL[59]};
           AI_CTRL_DECODE_ADDR[60]: read_data = {AI_CTRL[60]};
           AI_CTRL_DECODE_ADDR[61]: read_data = {AI_CTRL[61]};
           AI_CTRL_DECODE_ADDR[62]: read_data = {AI_CTRL[62]};
           AI_CTRL_DECODE_ADDR[63]: read_data = {AI_CTRL[63]};
           AI_CTRL_DECODE_ADDR[64]: read_data = {AI_CTRL[64]};
           AI_CTRL_DECODE_ADDR[65]: read_data = {AI_CTRL[65]};
           AI_CTRL_DECODE_ADDR[66]: read_data = {AI_CTRL[66]};
           AI_CTRL_DECODE_ADDR[67]: read_data = {AI_CTRL[67]};
           AI_CTRL_DECODE_ADDR[68]: read_data = {AI_CTRL[68]};
           AI_CTRL_DECODE_ADDR[69]: read_data = {AI_CTRL[69]};
           AI_CTRL_DECODE_ADDR[70]: read_data = {AI_CTRL[70]};
           AI_CTRL_DECODE_ADDR[71]: read_data = {AI_CTRL[71]};
           AI_CTRL_DECODE_ADDR[72]: read_data = {AI_CTRL[72]};
           AI_CTRL_DECODE_ADDR[73]: read_data = {AI_CTRL[73]};
           AI_CTRL_DECODE_ADDR[74]: read_data = {AI_CTRL[74]};
           AI_CTRL_DECODE_ADDR[75]: read_data = {AI_CTRL[75]};
           AI_CTRL_DECODE_ADDR[76]: read_data = {AI_CTRL[76]};
           AI_CTRL_DECODE_ADDR[77]: read_data = {AI_CTRL[77]};
           AI_CTRL_DECODE_ADDR[78]: read_data = {AI_CTRL[78]};
           AI_CTRL_DECODE_ADDR[79]: read_data = {AI_CTRL[79]};
           AI_CTRL_DECODE_ADDR[80]: read_data = {AI_CTRL[80]};
           AI_CTRL_DECODE_ADDR[81]: read_data = {AI_CTRL[81]};
           AI_CTRL_DECODE_ADDR[82]: read_data = {AI_CTRL[82]};
           AI_CTRL_DECODE_ADDR[83]: read_data = {AI_CTRL[83]};
           AI_CTRL_DECODE_ADDR[84]: read_data = {AI_CTRL[84]};
           AI_CTRL_DECODE_ADDR[85]: read_data = {AI_CTRL[85]};
           AI_CTRL_DECODE_ADDR[86]: read_data = {AI_CTRL[86]};
           AI_CTRL_DECODE_ADDR[87]: read_data = {AI_CTRL[87]};
           AI_CTRL_DECODE_ADDR[88]: read_data = {AI_CTRL[88]};
           AI_CTRL_DECODE_ADDR[89]: read_data = {AI_CTRL[89]};
           AI_CTRL_DECODE_ADDR[90]: read_data = {AI_CTRL[90]};
           AI_CTRL_DECODE_ADDR[91]: read_data = {AI_CTRL[91]};
           AI_CTRL_DECODE_ADDR[92]: read_data = {AI_CTRL[92]};
           AI_CTRL_DECODE_ADDR[93]: read_data = {AI_CTRL[93]};
           AI_CTRL_DECODE_ADDR[94]: read_data = {AI_CTRL[94]};
           AI_CTRL_DECODE_ADDR[95]: read_data = {AI_CTRL[95]};
           AI_CTRL_DECODE_ADDR[96]: read_data = {AI_CTRL[96]};
           AI_CTRL_DECODE_ADDR[97]: read_data = {AI_CTRL[97]};
           AI_CTRL_DECODE_ADDR[98]: read_data = {AI_CTRL[98]};
           AI_CTRL_DECODE_ADDR[99]: read_data = {AI_CTRL[99]};
           AI_CTRL_DECODE_ADDR[100]: read_data = {AI_CTRL[100]};
           AI_CTRL_DECODE_ADDR[101]: read_data = {AI_CTRL[101]};
           AI_CTRL_DECODE_ADDR[102]: read_data = {AI_CTRL[102]};
           AI_CTRL_DECODE_ADDR[103]: read_data = {AI_CTRL[103]};
           AI_CTRL_DECODE_ADDR[104]: read_data = {AI_CTRL[104]};
           AI_CTRL_DECODE_ADDR[105]: read_data = {AI_CTRL[105]};
           AI_CTRL_DECODE_ADDR[106]: read_data = {AI_CTRL[106]};
           AI_CTRL_DECODE_ADDR[107]: read_data = {AI_CTRL[107]};
           AI_CTRL_DECODE_ADDR[108]: read_data = {AI_CTRL[108]};
           AI_CTRL_DECODE_ADDR[109]: read_data = {AI_CTRL[109]};
           AI_CTRL_DECODE_ADDR[110]: read_data = {AI_CTRL[110]};
           AI_CTRL_DECODE_ADDR[111]: read_data = {AI_CTRL[111]};
           AI_CTRL_DECODE_ADDR[112]: read_data = {AI_CTRL[112]};
           AI_CTRL_DECODE_ADDR[113]: read_data = {AI_CTRL[113]};
           AI_CTRL_DECODE_ADDR[114]: read_data = {AI_CTRL[114]};
           AI_CTRL_DECODE_ADDR[115]: read_data = {AI_CTRL[115]};
           AI_CTRL_DECODE_ADDR[116]: read_data = {AI_CTRL[116]};
           AI_CTRL_DECODE_ADDR[117]: read_data = {AI_CTRL[117]};
           AI_CTRL_DECODE_ADDR[118]: read_data = {AI_CTRL[118]};
           AI_CTRL_DECODE_ADDR[119]: read_data = {AI_CTRL[119]};
           AI_CTRL_DECODE_ADDR[120]: read_data = {AI_CTRL[120]};
           AI_CTRL_DECODE_ADDR[121]: read_data = {AI_CTRL[121]};
           AI_CTRL_DECODE_ADDR[122]: read_data = {AI_CTRL[122]};
           AI_CTRL_DECODE_ADDR[123]: read_data = {AI_CTRL[123]};
           AI_CTRL_DECODE_ADDR[124]: read_data = {AI_CTRL[124]};
           AI_CTRL_DECODE_ADDR[125]: read_data = {AI_CTRL[125]};
           AI_CTRL_DECODE_ADDR[126]: read_data = {AI_CTRL[126]};
           AI_CTRL_DECODE_ADDR[127]: read_data = {AI_CTRL[127]};
           IMS_PEND_CLEAR_DECODE_ADDR: read_data = {IMS_PEND_CLEAR};
           WB_SCH_OUT_AFULL_AGITATE_CONTROL_DECODE_ADDR: read_data = {WB_SCH_OUT_AFULL_AGITATE_CONTROL};
           IG_HCW_ENQ_AFULL_AGITATE_CONTROL_DECODE_ADDR: read_data = {IG_HCW_ENQ_AFULL_AGITATE_CONTROL};
           IG_HCW_ENQ_W_DB_AGITATE_CONTROL_DECODE_ADDR: read_data = {IG_HCW_ENQ_W_DB_AGITATE_CONTROL};
           EG_HCW_SCHED_DB_AGITATE_CONTROL_DECODE_ADDR: read_data = {EG_HCW_SCHED_DB_AGITATE_CONTROL};
           AL_IMS_MSIX_DB_AGITATE_CONTROL_DECODE_ADDR: read_data = {AL_IMS_MSIX_DB_AGITATE_CONTROL};
           AL_CWD_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR: read_data = {AL_CWD_ALARM_DB_AGITATE_CONTROL};
           AL_SIF_ALARM_AFULL_AGITATE_CONTROL_DECODE_ADDR: read_data = {AL_SIF_ALARM_AFULL_AGITATE_CONTROL};
           AL_HQM_ALARM_DB_AGITATE_CONTROL_DECODE_ADDR: read_data = {AL_HQM_ALARM_DB_AGITATE_CONTROL};
           ECC_CTL_DECODE_ADDR: read_data = {ECC_CTL};
           PARITY_CTL_DECODE_ADDR: read_data = {PARITY_CTL};
           WRITE_BUFFER_CTL_DECODE_ADDR: read_data = {WRITE_BUFFER_CTL};
           ALARM_CTL_DECODE_ADDR: read_data = {ALARM_CTL};
           CFG_PATCH_CONTROL_DECODE_ADDR: read_data = {CFG_PATCH_CONTROL};
           INGRESS_CTL_DECODE_ADDR: read_data = {INGRESS_CTL};
           EGRESS_CTL_DECODE_ADDR: read_data = {EGRESS_CTL};
           SYS_IDLE_STATUS_DECODE_ADDR: read_data = {SYS_IDLE_STATUS};
           HCW_ENQ_FIFO_CTL_DECODE_ADDR: read_data = {HCW_ENQ_FIFO_CTL};
           SCH_OUT_FIFO_CTL_DECODE_ADDR: read_data = {SCH_OUT_FIFO_CTL};
           SIF_ALARM_FIFO_CTL_DECODE_ADDR: read_data = {SIF_ALARM_FIFO_CTL};
           HCW_ENQ_FIFO_STATUS_DECODE_ADDR: read_data = {HCW_ENQ_FIFO_STATUS};
           HCW_SCH_FIFO_STATUS_DECODE_ADDR: read_data = {HCW_SCH_FIFO_STATUS};
           SCH_OUT_FIFO_STATUS_DECODE_ADDR: read_data = {SCH_OUT_FIFO_STATUS};
           CFG_RX_FIFO_STATUS_DECODE_ADDR: read_data = {CFG_RX_FIFO_STATUS};
           CWDI_RX_FIFO_STATUS_DECODE_ADDR: read_data = {CWDI_RX_FIFO_STATUS};
           HQM_ALARM_RX_FIFO_STATUS_DECODE_ADDR: read_data = {HQM_ALARM_RX_FIFO_STATUS};
           SIF_ALARM_FIFO_STATUS_DECODE_ADDR: read_data = {SIF_ALARM_FIFO_STATUS};
           ALARM_DB_STATUS_DECODE_ADDR: read_data = {ALARM_DB_STATUS};
           INGRESS_DB_STATUS_DECODE_ADDR: read_data = {INGRESS_DB_STATUS};
           EGRESS_DB_STATUS_DECODE_ADDR: read_data = {EGRESS_DB_STATUS};
           ALARM_STATUS_DECODE_ADDR: read_data = {ALARM_STATUS};
           INGRESS_STATUS_DECODE_ADDR: read_data = {INGRESS_STATUS};
           EGRESS_STATUS_DECODE_ADDR: read_data = {EGRESS_STATUS};
           WBUF_STATUS_DECODE_ADDR: read_data = {WBUF_STATUS};
           WBUF_STATUS2_DECODE_ADDR: read_data = {WBUF_STATUS2};
           WBUF_DEBUG_DECODE_ADDR: read_data = {WBUF_DEBUG};
           ROB_SYNDROME_DECODE_ADDR: read_data = {ROB_SYNDROME};
           PHDR_DEBUG_0_DECODE_ADDR: read_data = {PHDR_DEBUG_0};
           PHDR_DEBUG_1_DECODE_ADDR: read_data = {PHDR_DEBUG_1};
           PHDR_DEBUG_2_DECODE_ADDR: read_data = {PHDR_DEBUG_2};
           HQM_PDATA_DEBUG_DECODE_ADDR[0]: read_data = {HQM_PDATA_DEBUG[0]};
           HQM_PDATA_DEBUG_DECODE_ADDR[1]: read_data = {HQM_PDATA_DEBUG[1]};
           HQM_PDATA_DEBUG_DECODE_ADDR[2]: read_data = {HQM_PDATA_DEBUG[2]};
           HQM_PDATA_DEBUG_DECODE_ADDR[3]: read_data = {HQM_PDATA_DEBUG[3]};
           HQM_PDATA_DEBUG_DECODE_ADDR[4]: read_data = {HQM_PDATA_DEBUG[4]};
           HQM_PDATA_DEBUG_DECODE_ADDR[5]: read_data = {HQM_PDATA_DEBUG[5]};
           HQM_PDATA_DEBUG_DECODE_ADDR[6]: read_data = {HQM_PDATA_DEBUG[6]};
           HQM_PDATA_DEBUG_DECODE_ADDR[7]: read_data = {HQM_PDATA_DEBUG[7]};
           HQM_PDATA_DEBUG_DECODE_ADDR[8]: read_data = {HQM_PDATA_DEBUG[8]};
           HQM_PDATA_DEBUG_DECODE_ADDR[9]: read_data = {HQM_PDATA_DEBUG[9]};
           HQM_PDATA_DEBUG_DECODE_ADDR[10]: read_data = {HQM_PDATA_DEBUG[10]};
           HQM_PDATA_DEBUG_DECODE_ADDR[11]: read_data = {HQM_PDATA_DEBUG[11]};
           HQM_PDATA_DEBUG_DECODE_ADDR[12]: read_data = {HQM_PDATA_DEBUG[12]};
           HQM_PDATA_DEBUG_DECODE_ADDR[13]: read_data = {HQM_PDATA_DEBUG[13]};
           HQM_PDATA_DEBUG_DECODE_ADDR[14]: read_data = {HQM_PDATA_DEBUG[14]};
           HQM_PDATA_DEBUG_DECODE_ADDR[15]: read_data = {HQM_PDATA_DEBUG[15]};
           HCW_REQ_DEBUG_DECODE_ADDR: read_data = {HCW_REQ_DEBUG};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[0]: read_data = {HQM_HCW_DATA_DEBUG[0]};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[1]: read_data = {HQM_HCW_DATA_DEBUG[1]};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[2]: read_data = {HQM_HCW_DATA_DEBUG[2]};
           HQM_HCW_DATA_DEBUG_DECODE_ADDR[3]: read_data = {HQM_HCW_DATA_DEBUG[3]};
           {40'h80020,4'b0?00,2'b00}: read_data = handcode_reg_rdata_AW_SMON_CONFIGURATION0;
           {40'h80020,4'b0?00,2'b01}: read_data = handcode_reg_rdata_AW_SMON_CONFIGURATION1;
           {40'h80020,4'b0?00,2'b10}: read_data = handcode_reg_rdata_AW_SMON_COMPARE0;
           {40'h80020,4'b0?00,2'b11}: read_data = handcode_reg_rdata_AW_SMON_COMPARE1;
           {40'h80020,4'b0?01,2'b00}: read_data = handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER0;
           {40'h80020,4'b0?01,2'b01}: read_data = handcode_reg_rdata_AW_SMON_ACTIVITYCOUNTER1;
           {40'h80020,4'b0?01,2'b10}: read_data = handcode_reg_rdata_AW_SMON_TIMER;
           {40'h80020,4'b0?01,2'b11}: read_data = handcode_reg_rdata_AW_SMON_MAXIMUM_TIMER;
           {40'h80020,4'b0?10,2'b00}: read_data = handcode_reg_rdata_AW_SMON_COMP_MASK0;
           {40'h80020,4'b0?10,2'b01}: read_data = handcode_reg_rdata_AW_SMON_COMP_MASK1;
         default : read_data = '0; 
      endcase
      default : read_data = '0;  
   endcase
end

always_comb ack.data = read_data & { {8{be[3] & sai_successfull_per_byte[3]}}, {8{be[2] & sai_successfull_per_byte[2]}}, {8{be[1] & sai_successfull_per_byte[1]}}, {8{be[0] & sai_successfull_per_byte[0]}} };

always_comb write_data = req.data;


// end rdata section }

// ======================================================================
// begin register RSVD init section {
always_comb begin
    TOTAL_SN_REGIONS.reserved0 = '0;
    CFG_UNIT_VERSION.reserved0 = '0;
    INGRESS_ALARM_ENABLE.reserved0 = '0;
    ALARM_LUT_PERR.reserved0 = '0;
    EGRESS_LUT_ERR.reserved0 = '0;
    INGRESS_LUT_ERR.reserved0 = '0;
    ALARM_ERR.reserved0 = '0;
    ALARM_MB_ECC_ERR.reserved0 = '0;
    ALARM_SB_ECC_ERR.reserved0 = '0;
    HQM_SYSTEM_CNT_CTL.reserved0 = '0;
    MSIX_ACK.reserved0 = '0;
    MSIX_PASSTHROUGH.reserved0 = '0;
    MSIX_MODE.reserved0 = '0;
    MSIX_64_SYND.reserved0 = '0;
    MSIX_PBA_64_CLEAR.reserved0 = '0;
    SYS_ALARM_INT_ENABLE.reserved0 = '0;
    SYS_ALARM_MB_ECC_INT_ENABLE.reserved0 = '0;
    SYS_ALARM_SB_ECC_INT_ENABLE.reserved0 = '0;
    HQM_LDB_PP2VDEV[0].reserved0 = '0;
    HQM_LDB_PP2VDEV[1].reserved0 = '0;
    HQM_LDB_PP2VDEV[2].reserved0 = '0;
    HQM_LDB_PP2VDEV[3].reserved0 = '0;
    HQM_LDB_PP2VDEV[4].reserved0 = '0;
    HQM_LDB_PP2VDEV[5].reserved0 = '0;
    HQM_LDB_PP2VDEV[6].reserved0 = '0;
    HQM_LDB_PP2VDEV[7].reserved0 = '0;
    HQM_LDB_PP2VDEV[8].reserved0 = '0;
    HQM_LDB_PP2VDEV[9].reserved0 = '0;
    HQM_LDB_PP2VDEV[10].reserved0 = '0;
    HQM_LDB_PP2VDEV[11].reserved0 = '0;
    HQM_LDB_PP2VDEV[12].reserved0 = '0;
    HQM_LDB_PP2VDEV[13].reserved0 = '0;
    HQM_LDB_PP2VDEV[14].reserved0 = '0;
    HQM_LDB_PP2VDEV[15].reserved0 = '0;
    HQM_LDB_PP2VDEV[16].reserved0 = '0;
    HQM_LDB_PP2VDEV[17].reserved0 = '0;
    HQM_LDB_PP2VDEV[18].reserved0 = '0;
    HQM_LDB_PP2VDEV[19].reserved0 = '0;
    HQM_LDB_PP2VDEV[20].reserved0 = '0;
    HQM_LDB_PP2VDEV[21].reserved0 = '0;
    HQM_LDB_PP2VDEV[22].reserved0 = '0;
    HQM_LDB_PP2VDEV[23].reserved0 = '0;
    HQM_LDB_PP2VDEV[24].reserved0 = '0;
    HQM_LDB_PP2VDEV[25].reserved0 = '0;
    HQM_LDB_PP2VDEV[26].reserved0 = '0;
    HQM_LDB_PP2VDEV[27].reserved0 = '0;
    HQM_LDB_PP2VDEV[28].reserved0 = '0;
    HQM_LDB_PP2VDEV[29].reserved0 = '0;
    HQM_LDB_PP2VDEV[30].reserved0 = '0;
    HQM_LDB_PP2VDEV[31].reserved0 = '0;
    HQM_LDB_PP2VDEV[32].reserved0 = '0;
    HQM_LDB_PP2VDEV[33].reserved0 = '0;
    HQM_LDB_PP2VDEV[34].reserved0 = '0;
    HQM_LDB_PP2VDEV[35].reserved0 = '0;
    HQM_LDB_PP2VDEV[36].reserved0 = '0;
    HQM_LDB_PP2VDEV[37].reserved0 = '0;
    HQM_LDB_PP2VDEV[38].reserved0 = '0;
    HQM_LDB_PP2VDEV[39].reserved0 = '0;
    HQM_LDB_PP2VDEV[40].reserved0 = '0;
    HQM_LDB_PP2VDEV[41].reserved0 = '0;
    HQM_LDB_PP2VDEV[42].reserved0 = '0;
    HQM_LDB_PP2VDEV[43].reserved0 = '0;
    HQM_LDB_PP2VDEV[44].reserved0 = '0;
    HQM_LDB_PP2VDEV[45].reserved0 = '0;
    HQM_LDB_PP2VDEV[46].reserved0 = '0;
    HQM_LDB_PP2VDEV[47].reserved0 = '0;
    HQM_LDB_PP2VDEV[48].reserved0 = '0;
    HQM_LDB_PP2VDEV[49].reserved0 = '0;
    HQM_LDB_PP2VDEV[50].reserved0 = '0;
    HQM_LDB_PP2VDEV[51].reserved0 = '0;
    HQM_LDB_PP2VDEV[52].reserved0 = '0;
    HQM_LDB_PP2VDEV[53].reserved0 = '0;
    HQM_LDB_PP2VDEV[54].reserved0 = '0;
    HQM_LDB_PP2VDEV[55].reserved0 = '0;
    HQM_LDB_PP2VDEV[56].reserved0 = '0;
    HQM_LDB_PP2VDEV[57].reserved0 = '0;
    HQM_LDB_PP2VDEV[58].reserved0 = '0;
    HQM_LDB_PP2VDEV[59].reserved0 = '0;
    HQM_LDB_PP2VDEV[60].reserved0 = '0;
    HQM_LDB_PP2VDEV[61].reserved0 = '0;
    HQM_LDB_PP2VDEV[62].reserved0 = '0;
    HQM_LDB_PP2VDEV[63].reserved0 = '0;
    LDB_PP_ROB_V[0].reserved0 = '0;
    LDB_PP_ROB_V[1].reserved0 = '0;
    LDB_PP_ROB_V[2].reserved0 = '0;
    LDB_PP_ROB_V[3].reserved0 = '0;
    LDB_PP_ROB_V[4].reserved0 = '0;
    LDB_PP_ROB_V[5].reserved0 = '0;
    LDB_PP_ROB_V[6].reserved0 = '0;
    LDB_PP_ROB_V[7].reserved0 = '0;
    LDB_PP_ROB_V[8].reserved0 = '0;
    LDB_PP_ROB_V[9].reserved0 = '0;
    LDB_PP_ROB_V[10].reserved0 = '0;
    LDB_PP_ROB_V[11].reserved0 = '0;
    LDB_PP_ROB_V[12].reserved0 = '0;
    LDB_PP_ROB_V[13].reserved0 = '0;
    LDB_PP_ROB_V[14].reserved0 = '0;
    LDB_PP_ROB_V[15].reserved0 = '0;
    LDB_PP_ROB_V[16].reserved0 = '0;
    LDB_PP_ROB_V[17].reserved0 = '0;
    LDB_PP_ROB_V[18].reserved0 = '0;
    LDB_PP_ROB_V[19].reserved0 = '0;
    LDB_PP_ROB_V[20].reserved0 = '0;
    LDB_PP_ROB_V[21].reserved0 = '0;
    LDB_PP_ROB_V[22].reserved0 = '0;
    LDB_PP_ROB_V[23].reserved0 = '0;
    LDB_PP_ROB_V[24].reserved0 = '0;
    LDB_PP_ROB_V[25].reserved0 = '0;
    LDB_PP_ROB_V[26].reserved0 = '0;
    LDB_PP_ROB_V[27].reserved0 = '0;
    LDB_PP_ROB_V[28].reserved0 = '0;
    LDB_PP_ROB_V[29].reserved0 = '0;
    LDB_PP_ROB_V[30].reserved0 = '0;
    LDB_PP_ROB_V[31].reserved0 = '0;
    LDB_PP_ROB_V[32].reserved0 = '0;
    LDB_PP_ROB_V[33].reserved0 = '0;
    LDB_PP_ROB_V[34].reserved0 = '0;
    LDB_PP_ROB_V[35].reserved0 = '0;
    LDB_PP_ROB_V[36].reserved0 = '0;
    LDB_PP_ROB_V[37].reserved0 = '0;
    LDB_PP_ROB_V[38].reserved0 = '0;
    LDB_PP_ROB_V[39].reserved0 = '0;
    LDB_PP_ROB_V[40].reserved0 = '0;
    LDB_PP_ROB_V[41].reserved0 = '0;
    LDB_PP_ROB_V[42].reserved0 = '0;
    LDB_PP_ROB_V[43].reserved0 = '0;
    LDB_PP_ROB_V[44].reserved0 = '0;
    LDB_PP_ROB_V[45].reserved0 = '0;
    LDB_PP_ROB_V[46].reserved0 = '0;
    LDB_PP_ROB_V[47].reserved0 = '0;
    LDB_PP_ROB_V[48].reserved0 = '0;
    LDB_PP_ROB_V[49].reserved0 = '0;
    LDB_PP_ROB_V[50].reserved0 = '0;
    LDB_PP_ROB_V[51].reserved0 = '0;
    LDB_PP_ROB_V[52].reserved0 = '0;
    LDB_PP_ROB_V[53].reserved0 = '0;
    LDB_PP_ROB_V[54].reserved0 = '0;
    LDB_PP_ROB_V[55].reserved0 = '0;
    LDB_PP_ROB_V[56].reserved0 = '0;
    LDB_PP_ROB_V[57].reserved0 = '0;
    LDB_PP_ROB_V[58].reserved0 = '0;
    LDB_PP_ROB_V[59].reserved0 = '0;
    LDB_PP_ROB_V[60].reserved0 = '0;
    LDB_PP_ROB_V[61].reserved0 = '0;
    LDB_PP_ROB_V[62].reserved0 = '0;
    LDB_PP_ROB_V[63].reserved0 = '0;
    HQM_DIR_PP2VDEV[0].reserved0 = '0;
    HQM_DIR_PP2VDEV[1].reserved0 = '0;
    HQM_DIR_PP2VDEV[2].reserved0 = '0;
    HQM_DIR_PP2VDEV[3].reserved0 = '0;
    HQM_DIR_PP2VDEV[4].reserved0 = '0;
    HQM_DIR_PP2VDEV[5].reserved0 = '0;
    HQM_DIR_PP2VDEV[6].reserved0 = '0;
    HQM_DIR_PP2VDEV[7].reserved0 = '0;
    HQM_DIR_PP2VDEV[8].reserved0 = '0;
    HQM_DIR_PP2VDEV[9].reserved0 = '0;
    HQM_DIR_PP2VDEV[10].reserved0 = '0;
    HQM_DIR_PP2VDEV[11].reserved0 = '0;
    HQM_DIR_PP2VDEV[12].reserved0 = '0;
    HQM_DIR_PP2VDEV[13].reserved0 = '0;
    HQM_DIR_PP2VDEV[14].reserved0 = '0;
    HQM_DIR_PP2VDEV[15].reserved0 = '0;
    HQM_DIR_PP2VDEV[16].reserved0 = '0;
    HQM_DIR_PP2VDEV[17].reserved0 = '0;
    HQM_DIR_PP2VDEV[18].reserved0 = '0;
    HQM_DIR_PP2VDEV[19].reserved0 = '0;
    HQM_DIR_PP2VDEV[20].reserved0 = '0;
    HQM_DIR_PP2VDEV[21].reserved0 = '0;
    HQM_DIR_PP2VDEV[22].reserved0 = '0;
    HQM_DIR_PP2VDEV[23].reserved0 = '0;
    HQM_DIR_PP2VDEV[24].reserved0 = '0;
    HQM_DIR_PP2VDEV[25].reserved0 = '0;
    HQM_DIR_PP2VDEV[26].reserved0 = '0;
    HQM_DIR_PP2VDEV[27].reserved0 = '0;
    HQM_DIR_PP2VDEV[28].reserved0 = '0;
    HQM_DIR_PP2VDEV[29].reserved0 = '0;
    HQM_DIR_PP2VDEV[30].reserved0 = '0;
    HQM_DIR_PP2VDEV[31].reserved0 = '0;
    HQM_DIR_PP2VDEV[32].reserved0 = '0;
    HQM_DIR_PP2VDEV[33].reserved0 = '0;
    HQM_DIR_PP2VDEV[34].reserved0 = '0;
    HQM_DIR_PP2VDEV[35].reserved0 = '0;
    HQM_DIR_PP2VDEV[36].reserved0 = '0;
    HQM_DIR_PP2VDEV[37].reserved0 = '0;
    HQM_DIR_PP2VDEV[38].reserved0 = '0;
    HQM_DIR_PP2VDEV[39].reserved0 = '0;
    HQM_DIR_PP2VDEV[40].reserved0 = '0;
    HQM_DIR_PP2VDEV[41].reserved0 = '0;
    HQM_DIR_PP2VDEV[42].reserved0 = '0;
    HQM_DIR_PP2VDEV[43].reserved0 = '0;
    HQM_DIR_PP2VDEV[44].reserved0 = '0;
    HQM_DIR_PP2VDEV[45].reserved0 = '0;
    HQM_DIR_PP2VDEV[46].reserved0 = '0;
    HQM_DIR_PP2VDEV[47].reserved0 = '0;
    HQM_DIR_PP2VDEV[48].reserved0 = '0;
    HQM_DIR_PP2VDEV[49].reserved0 = '0;
    HQM_DIR_PP2VDEV[50].reserved0 = '0;
    HQM_DIR_PP2VDEV[51].reserved0 = '0;
    HQM_DIR_PP2VDEV[52].reserved0 = '0;
    HQM_DIR_PP2VDEV[53].reserved0 = '0;
    HQM_DIR_PP2VDEV[54].reserved0 = '0;
    HQM_DIR_PP2VDEV[55].reserved0 = '0;
    HQM_DIR_PP2VDEV[56].reserved0 = '0;
    HQM_DIR_PP2VDEV[57].reserved0 = '0;
    HQM_DIR_PP2VDEV[58].reserved0 = '0;
    HQM_DIR_PP2VDEV[59].reserved0 = '0;
    HQM_DIR_PP2VDEV[60].reserved0 = '0;
    HQM_DIR_PP2VDEV[61].reserved0 = '0;
    HQM_DIR_PP2VDEV[62].reserved0 = '0;
    HQM_DIR_PP2VDEV[63].reserved0 = '0;
    DIR_PP_ROB_V[0].reserved0 = '0;
    DIR_PP_ROB_V[1].reserved0 = '0;
    DIR_PP_ROB_V[2].reserved0 = '0;
    DIR_PP_ROB_V[3].reserved0 = '0;
    DIR_PP_ROB_V[4].reserved0 = '0;
    DIR_PP_ROB_V[5].reserved0 = '0;
    DIR_PP_ROB_V[6].reserved0 = '0;
    DIR_PP_ROB_V[7].reserved0 = '0;
    DIR_PP_ROB_V[8].reserved0 = '0;
    DIR_PP_ROB_V[9].reserved0 = '0;
    DIR_PP_ROB_V[10].reserved0 = '0;
    DIR_PP_ROB_V[11].reserved0 = '0;
    DIR_PP_ROB_V[12].reserved0 = '0;
    DIR_PP_ROB_V[13].reserved0 = '0;
    DIR_PP_ROB_V[14].reserved0 = '0;
    DIR_PP_ROB_V[15].reserved0 = '0;
    DIR_PP_ROB_V[16].reserved0 = '0;
    DIR_PP_ROB_V[17].reserved0 = '0;
    DIR_PP_ROB_V[18].reserved0 = '0;
    DIR_PP_ROB_V[19].reserved0 = '0;
    DIR_PP_ROB_V[20].reserved0 = '0;
    DIR_PP_ROB_V[21].reserved0 = '0;
    DIR_PP_ROB_V[22].reserved0 = '0;
    DIR_PP_ROB_V[23].reserved0 = '0;
    DIR_PP_ROB_V[24].reserved0 = '0;
    DIR_PP_ROB_V[25].reserved0 = '0;
    DIR_PP_ROB_V[26].reserved0 = '0;
    DIR_PP_ROB_V[27].reserved0 = '0;
    DIR_PP_ROB_V[28].reserved0 = '0;
    DIR_PP_ROB_V[29].reserved0 = '0;
    DIR_PP_ROB_V[30].reserved0 = '0;
    DIR_PP_ROB_V[31].reserved0 = '0;
    DIR_PP_ROB_V[32].reserved0 = '0;
    DIR_PP_ROB_V[33].reserved0 = '0;
    DIR_PP_ROB_V[34].reserved0 = '0;
    DIR_PP_ROB_V[35].reserved0 = '0;
    DIR_PP_ROB_V[36].reserved0 = '0;
    DIR_PP_ROB_V[37].reserved0 = '0;
    DIR_PP_ROB_V[38].reserved0 = '0;
    DIR_PP_ROB_V[39].reserved0 = '0;
    DIR_PP_ROB_V[40].reserved0 = '0;
    DIR_PP_ROB_V[41].reserved0 = '0;
    DIR_PP_ROB_V[42].reserved0 = '0;
    DIR_PP_ROB_V[43].reserved0 = '0;
    DIR_PP_ROB_V[44].reserved0 = '0;
    DIR_PP_ROB_V[45].reserved0 = '0;
    DIR_PP_ROB_V[46].reserved0 = '0;
    DIR_PP_ROB_V[47].reserved0 = '0;
    DIR_PP_ROB_V[48].reserved0 = '0;
    DIR_PP_ROB_V[49].reserved0 = '0;
    DIR_PP_ROB_V[50].reserved0 = '0;
    DIR_PP_ROB_V[51].reserved0 = '0;
    DIR_PP_ROB_V[52].reserved0 = '0;
    DIR_PP_ROB_V[53].reserved0 = '0;
    DIR_PP_ROB_V[54].reserved0 = '0;
    DIR_PP_ROB_V[55].reserved0 = '0;
    DIR_PP_ROB_V[56].reserved0 = '0;
    DIR_PP_ROB_V[57].reserved0 = '0;
    DIR_PP_ROB_V[58].reserved0 = '0;
    DIR_PP_ROB_V[59].reserved0 = '0;
    DIR_PP_ROB_V[60].reserved0 = '0;
    DIR_PP_ROB_V[61].reserved0 = '0;
    DIR_PP_ROB_V[62].reserved0 = '0;
    DIR_PP_ROB_V[63].reserved0 = '0;
    AI_CTRL[0].reserved0 = '0;
    AI_CTRL[1].reserved0 = '0;
    AI_CTRL[2].reserved0 = '0;
    AI_CTRL[3].reserved0 = '0;
    AI_CTRL[4].reserved0 = '0;
    AI_CTRL[5].reserved0 = '0;
    AI_CTRL[6].reserved0 = '0;
    AI_CTRL[7].reserved0 = '0;
    AI_CTRL[8].reserved0 = '0;
    AI_CTRL[9].reserved0 = '0;
    AI_CTRL[10].reserved0 = '0;
    AI_CTRL[11].reserved0 = '0;
    AI_CTRL[12].reserved0 = '0;
    AI_CTRL[13].reserved0 = '0;
    AI_CTRL[14].reserved0 = '0;
    AI_CTRL[15].reserved0 = '0;
    AI_CTRL[16].reserved0 = '0;
    AI_CTRL[17].reserved0 = '0;
    AI_CTRL[18].reserved0 = '0;
    AI_CTRL[19].reserved0 = '0;
    AI_CTRL[20].reserved0 = '0;
    AI_CTRL[21].reserved0 = '0;
    AI_CTRL[22].reserved0 = '0;
    AI_CTRL[23].reserved0 = '0;
    AI_CTRL[24].reserved0 = '0;
    AI_CTRL[25].reserved0 = '0;
    AI_CTRL[26].reserved0 = '0;
    AI_CTRL[27].reserved0 = '0;
    AI_CTRL[28].reserved0 = '0;
    AI_CTRL[29].reserved0 = '0;
    AI_CTRL[30].reserved0 = '0;
    AI_CTRL[31].reserved0 = '0;
    AI_CTRL[32].reserved0 = '0;
    AI_CTRL[33].reserved0 = '0;
    AI_CTRL[34].reserved0 = '0;
    AI_CTRL[35].reserved0 = '0;
    AI_CTRL[36].reserved0 = '0;
    AI_CTRL[37].reserved0 = '0;
    AI_CTRL[38].reserved0 = '0;
    AI_CTRL[39].reserved0 = '0;
    AI_CTRL[40].reserved0 = '0;
    AI_CTRL[41].reserved0 = '0;
    AI_CTRL[42].reserved0 = '0;
    AI_CTRL[43].reserved0 = '0;
    AI_CTRL[44].reserved0 = '0;
    AI_CTRL[45].reserved0 = '0;
    AI_CTRL[46].reserved0 = '0;
    AI_CTRL[47].reserved0 = '0;
    AI_CTRL[48].reserved0 = '0;
    AI_CTRL[49].reserved0 = '0;
    AI_CTRL[50].reserved0 = '0;
    AI_CTRL[51].reserved0 = '0;
    AI_CTRL[52].reserved0 = '0;
    AI_CTRL[53].reserved0 = '0;
    AI_CTRL[54].reserved0 = '0;
    AI_CTRL[55].reserved0 = '0;
    AI_CTRL[56].reserved0 = '0;
    AI_CTRL[57].reserved0 = '0;
    AI_CTRL[58].reserved0 = '0;
    AI_CTRL[59].reserved0 = '0;
    AI_CTRL[60].reserved0 = '0;
    AI_CTRL[61].reserved0 = '0;
    AI_CTRL[62].reserved0 = '0;
    AI_CTRL[63].reserved0 = '0;
    AI_CTRL[64].reserved0 = '0;
    AI_CTRL[65].reserved0 = '0;
    AI_CTRL[66].reserved0 = '0;
    AI_CTRL[67].reserved0 = '0;
    AI_CTRL[68].reserved0 = '0;
    AI_CTRL[69].reserved0 = '0;
    AI_CTRL[70].reserved0 = '0;
    AI_CTRL[71].reserved0 = '0;
    AI_CTRL[72].reserved0 = '0;
    AI_CTRL[73].reserved0 = '0;
    AI_CTRL[74].reserved0 = '0;
    AI_CTRL[75].reserved0 = '0;
    AI_CTRL[76].reserved0 = '0;
    AI_CTRL[77].reserved0 = '0;
    AI_CTRL[78].reserved0 = '0;
    AI_CTRL[79].reserved0 = '0;
    AI_CTRL[80].reserved0 = '0;
    AI_CTRL[81].reserved0 = '0;
    AI_CTRL[82].reserved0 = '0;
    AI_CTRL[83].reserved0 = '0;
    AI_CTRL[84].reserved0 = '0;
    AI_CTRL[85].reserved0 = '0;
    AI_CTRL[86].reserved0 = '0;
    AI_CTRL[87].reserved0 = '0;
    AI_CTRL[88].reserved0 = '0;
    AI_CTRL[89].reserved0 = '0;
    AI_CTRL[90].reserved0 = '0;
    AI_CTRL[91].reserved0 = '0;
    AI_CTRL[92].reserved0 = '0;
    AI_CTRL[93].reserved0 = '0;
    AI_CTRL[94].reserved0 = '0;
    AI_CTRL[95].reserved0 = '0;
    AI_CTRL[96].reserved0 = '0;
    AI_CTRL[97].reserved0 = '0;
    AI_CTRL[98].reserved0 = '0;
    AI_CTRL[99].reserved0 = '0;
    AI_CTRL[100].reserved0 = '0;
    AI_CTRL[101].reserved0 = '0;
    AI_CTRL[102].reserved0 = '0;
    AI_CTRL[103].reserved0 = '0;
    AI_CTRL[104].reserved0 = '0;
    AI_CTRL[105].reserved0 = '0;
    AI_CTRL[106].reserved0 = '0;
    AI_CTRL[107].reserved0 = '0;
    AI_CTRL[108].reserved0 = '0;
    AI_CTRL[109].reserved0 = '0;
    AI_CTRL[110].reserved0 = '0;
    AI_CTRL[111].reserved0 = '0;
    AI_CTRL[112].reserved0 = '0;
    AI_CTRL[113].reserved0 = '0;
    AI_CTRL[114].reserved0 = '0;
    AI_CTRL[115].reserved0 = '0;
    AI_CTRL[116].reserved0 = '0;
    AI_CTRL[117].reserved0 = '0;
    AI_CTRL[118].reserved0 = '0;
    AI_CTRL[119].reserved0 = '0;
    AI_CTRL[120].reserved0 = '0;
    AI_CTRL[121].reserved0 = '0;
    AI_CTRL[122].reserved0 = '0;
    AI_CTRL[123].reserved0 = '0;
    AI_CTRL[124].reserved0 = '0;
    AI_CTRL[125].reserved0 = '0;
    AI_CTRL[126].reserved0 = '0;
    AI_CTRL[127].reserved0 = '0;
    IMS_PEND_CLEAR.reserved0 = '0;
    ECC_CTL.reserved0 = '0;
    ECC_CTL.reserved1 = '0;
    ECC_CTL.reserved2 = '0;
    PARITY_CTL.reserved0 = '0;
    WRITE_BUFFER_CTL.reserved0 = '0;
    WRITE_BUFFER_CTL.reserved1 = '0;
    ALARM_CTL.reserved0 = '0;
    INGRESS_CTL.reserved0 = '0;
    INGRESS_CTL.reserved1 = '0;
    EGRESS_CTL.reserved0 = '0;
    SYS_IDLE_STATUS.reserved0 = '0;
    HCW_ENQ_FIFO_CTL.reserved0 = '0;
    SCH_OUT_FIFO_CTL.reserved0 = '0;
    SIF_ALARM_FIFO_CTL.reserved0 = '0;
    ALARM_DB_STATUS.reserved0 = '0;
    ALARM_DB_STATUS.reserved1 = '0;
    INGRESS_DB_STATUS.reserved0 = '0;
    INGRESS_DB_STATUS.reserved1 = '0;
    EGRESS_DB_STATUS.reserved0 = '0;
    EGRESS_DB_STATUS.reserved1 = '0;
    EGRESS_DB_STATUS.reserved2 = '0;
    EGRESS_DB_STATUS.reserved3 = '0;
    EGRESS_DB_STATUS.reserved4 = '0;
    ALARM_STATUS.reserved0 = '0;
    INGRESS_STATUS.reserved0 = '0;
    EGRESS_STATUS.reserved0 = '0;
    WBUF_STATUS.reserved0 = '0;
    WBUF_STATUS2.reserved0 = '0;
    WBUF_DEBUG.reserved0 = '0;
    ROB_SYNDROME.reserved0 = '0;
    PHDR_DEBUG_2.reserved0 = '0;
    HCW_REQ_DEBUG.reserved0 = '0;
end

// end register RSVD init section }


// ======================================================================
// begin unit parity section {


// end unit parity section }


endmodule
//lintra pop
//lintra pop
