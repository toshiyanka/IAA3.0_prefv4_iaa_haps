//                                                                             
// File:            hqm_aqed_pipe_bridge_regs.svh                              
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             


//RAL code compatible with Saola versions: 16.2.06 and newer 

`ifndef RAL_HQM_AQED_PIPE_BRIDGE_FILE
`define RAL_HQM_AQED_PIPE_BRIDGE_FILE

class hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QID_FID_LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_FID_LIMIT, QID_FID_LIMIT.desired)
     `RAL_FIELD_CP_13(QID_FID_LIMIT, QID_FID_LIMIT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_FID_LIMIT, QID_FID_LIMIT.actual)
     `RAL_FIELD_CP_13(QID_FID_LIMIT, QID_FID_LIMIT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QID_FID_LIMIT = new("QID_FID_LIMIT", "RW", 13, 0, {""});
    QID_FID_LIMIT.set_powerwell("vcccfn_gated");
    QID_FID_LIMIT.set_rand_mode(0);
   QID_FID_LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_FID_LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPRESS_CODE;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPRESS_CODE, COMPRESS_CODE.desired)
     `RAL_FIELD_CP_3(COMPRESS_CODE, COMPRESS_CODE.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPRESS_CODE, COMPRESS_CODE.actual)
     `RAL_FIELD_CP_3(COMPRESS_CODE, COMPRESS_CODE.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPRESS_CODE = new("COMPRESS_CODE", "RW", 3, 0, {""});
    COMPRESS_CODE.set_powerwell("vcccfn_gated");
    COMPRESS_CODE.set_rand_mode(0);
   COMPRESS_CODE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COMPRESS_CODE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_AQED_CSR_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INT_COR_ALARM_DIS;
  sla_ral_field INT_COR_SYND_DIS;
  sla_ral_field INT_UNCR_ALARM_DIS;
  sla_ral_field INT_UNC_SYND_DIS;
  sla_ral_field INT_INF0_ALARM_DIS;
  sla_ral_field INT_INF0_SYND_DIS;
  sla_ral_field INT_INF1_ALARM_DIS;
  sla_ral_field INT_INF1_SYND_DIS;
  sla_ral_field INT_INF2_ALARM_DIS;
  sla_ral_field INT_INF2_SYND_DIS;
  sla_ral_field INT_INF3_ALARM_DIS;
  sla_ral_field INT_INF3_SYND_DIS;
  sla_ral_field INT_INF4_ALARM_DIS;
  sla_ral_field INT_INF4_SYND_DIS;
  sla_ral_field INT_INF5_ALARM_DIS;
  sla_ral_field INT_INF5_SYND_DIS;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_AQED_CSR_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_COR_SYND_DIS, INT_COR_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_COR_SYND_DIS, INT_COR_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_COR_SYND_DIS, INT_COR_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_COR_SYND_DIS, INT_COR_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INT_COR_ALARM_DIS = new("INT_COR_ALARM_DIS", "RW", 1, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[0:0]"});
    INT_COR_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_COR_ALARM_DIS.set_rand_mode(0);
   INT_COR_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_COR_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_COR_ALARM_DIS ));

    INT_COR_SYND_DIS = new("INT_COR_SYND_DIS", "RW", 1, 1, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[1:1]"});
    INT_COR_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_COR_SYND_DIS.set_rand_mode(0);
   INT_COR_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_COR_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_COR_SYND_DIS ));

    INT_UNCR_ALARM_DIS = new("INT_UNCR_ALARM_DIS", "RW", 1, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[2:2]"});
    INT_UNCR_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_UNCR_ALARM_DIS.set_rand_mode(0);
   INT_UNCR_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_UNCR_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_UNCR_ALARM_DIS ));

    INT_UNC_SYND_DIS = new("INT_UNC_SYND_DIS", "RW", 1, 3, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[3:3]"});
    INT_UNC_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_UNC_SYND_DIS.set_rand_mode(0);
   INT_UNC_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_UNC_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_UNC_SYND_DIS ));

    INT_INF0_ALARM_DIS = new("INT_INF0_ALARM_DIS", "RW", 1, 4, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[4:4]"});
    INT_INF0_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF0_ALARM_DIS.set_rand_mode(0);
   INT_INF0_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF0_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF0_ALARM_DIS ));

    INT_INF0_SYND_DIS = new("INT_INF0_SYND_DIS", "RW", 1, 5, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[5:5]"});
    INT_INF0_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF0_SYND_DIS.set_rand_mode(0);
   INT_INF0_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF0_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF0_SYND_DIS ));

    INT_INF1_ALARM_DIS = new("INT_INF1_ALARM_DIS", "RW", 1, 6, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[6:6]"});
    INT_INF1_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF1_ALARM_DIS.set_rand_mode(0);
   INT_INF1_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF1_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF1_ALARM_DIS ));

    INT_INF1_SYND_DIS = new("INT_INF1_SYND_DIS", "RW", 1, 7, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[7:7]"});
    INT_INF1_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF1_SYND_DIS.set_rand_mode(0);
   INT_INF1_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF1_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF1_SYND_DIS ));

    INT_INF2_ALARM_DIS = new("INT_INF2_ALARM_DIS", "RW", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[8:8]"});
    INT_INF2_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF2_ALARM_DIS.set_rand_mode(0);
   INT_INF2_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF2_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF2_ALARM_DIS ));

    INT_INF2_SYND_DIS = new("INT_INF2_SYND_DIS", "RW", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[9:9]"});
    INT_INF2_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF2_SYND_DIS.set_rand_mode(0);
   INT_INF2_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF2_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF2_SYND_DIS ));

    INT_INF3_ALARM_DIS = new("INT_INF3_ALARM_DIS", "RW", 1, 10, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[10:10]"});
    INT_INF3_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF3_ALARM_DIS.set_rand_mode(0);
   INT_INF3_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF3_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF3_ALARM_DIS ));

    INT_INF3_SYND_DIS = new("INT_INF3_SYND_DIS", "RW", 1, 11, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[11:11]"});
    INT_INF3_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF3_SYND_DIS.set_rand_mode(0);
   INT_INF3_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF3_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF3_SYND_DIS ));

    INT_INF4_ALARM_DIS = new("INT_INF4_ALARM_DIS", "RW", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[12:12]"});
    INT_INF4_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF4_ALARM_DIS.set_rand_mode(0);
   INT_INF4_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF4_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF4_ALARM_DIS ));

    INT_INF4_SYND_DIS = new("INT_INF4_SYND_DIS", "RW", 1, 13, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[13:13]"});
    INT_INF4_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF4_SYND_DIS.set_rand_mode(0);
   INT_INF4_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF4_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF4_SYND_DIS ));

    INT_INF5_ALARM_DIS = new("INT_INF5_ALARM_DIS", "RW", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[14:14]"});
    INT_INF5_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF5_ALARM_DIS.set_rand_mode(0);
   INT_INF5_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF5_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF5_ALARM_DIS ));

    INT_INF5_SYND_DIS = new("INT_INF5_SYND_DIS", "RW", 1, 15, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[15:15]"});
    INT_INF5_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF5_SYND_DIS.set_rand_mode(0);
   INT_INF5_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF5_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF5_SYND_DIS ));

    RSVZ0 = new("RSVZ0", "RW", 16, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[31:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_AQED_CSR_CONTROL_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_AQED_CSR_CONTROL_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PRI0;
  sla_ral_field PRI1;
  sla_ral_field PRI2;
  sla_ral_field PRI3;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI0, PRI0.desired)
     `RAL_FIELD_CP_8(PRI0, PRI0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI1, PRI1.desired)
     `RAL_FIELD_CP_8(PRI1, PRI1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI2, PRI2.desired)
     `RAL_FIELD_CP_8(PRI2, PRI2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI3, PRI3.desired)
     `RAL_FIELD_CP_8(PRI3, PRI3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI0, PRI0.actual)
     `RAL_FIELD_CP_8(PRI0, PRI0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI1, PRI1.actual)
     `RAL_FIELD_CP_8(PRI1, PRI1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI2, PRI2.actual)
     `RAL_FIELD_CP_8(PRI2, PRI2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI3, PRI3.actual)
     `RAL_FIELD_CP_8(PRI3, PRI3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PRI0 = new("PRI0", "RW", 8, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_arb_weights_tqpri_atm_0.internal_f[7:0]"});
    PRI0.set_powerwell("vcccfn_gated");
    PRI0.set_rand_mode(0);
   PRI0.set_reset_signame("hqm_inp_gated_rst_n");
    PRI0.set_logical_path("HQMID");
    void'(add_field( PRI0 ));

    PRI1 = new("PRI1", "RW", 8, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_arb_weights_tqpri_atm_0.internal_f[15:8]"});
    PRI1.set_powerwell("vcccfn_gated");
    PRI1.set_rand_mode(0);
   PRI1.set_reset_signame("hqm_inp_gated_rst_n");
    PRI1.set_logical_path("HQMID");
    void'(add_field( PRI1 ));

    PRI2 = new("PRI2", "RW", 8, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_arb_weights_tqpri_atm_0.internal_f[23:16]"});
    PRI2.set_powerwell("vcccfn_gated");
    PRI2.set_rand_mode(0);
   PRI2.set_reset_signame("hqm_inp_gated_rst_n");
    PRI2.set_logical_path("HQMID");
    void'(add_field( PRI2 ));

    PRI3 = new("PRI3", "RW", 8, 24, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_arb_weights_tqpri_atm_0.internal_f[31:24]"});
    PRI3.set_powerwell("vcccfn_gated");
    PRI3.set_rand_mode(0);
   PRI3.set_reset_signame("hqm_inp_gated_rst_n");
    PRI3.set_logical_path("HQMID");
    void'(add_field( PRI3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RSVZ0 = new("RSVZ0", "RO/V", 32, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_arb_weights_tqpri_atm_1.status[31:0]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_UNIT_VERSION_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNIT_VERSION;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_UNIT_VERSION_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.desired)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.actual)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNIT_VERSION = new("UNIT_VERSION", "RO", 8, 24, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_version.status[31:24]"});
    UNIT_VERSION.set_powerwell("vcccfn_gated");
    UNIT_VERSION.set_rand_mode(0);
   UNIT_VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT_VERSION.set_logical_path("HQMID");
    void'(add_field( UNIT_VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_UNIT_VERSION_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_UNIT_VERSION_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_CONTROL_GENERAL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CHICKEN_SIM;
  sla_ral_field CHICKEN_50;
  sla_ral_field RSVZ0;
  sla_ral_field FID_DECREMENT;
  sla_ral_field FID_SIM;
  sla_ral_field RSVZ1;
  sla_ral_field AQED_LSP_STOP_ATQATM;
  sla_ral_field RSVZ2;
  sla_ral_field RSVZ5;
  sla_ral_field RSVZ3;
  sla_ral_field AQED_CHICKEN_ONEPRI;
  sla_ral_field RSVZ4;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_CONTROL_GENERAL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHICKEN_SIM, CHICKEN_SIM.desired)
     `RAL_FIELD_CP_1(CHICKEN_SIM, CHICKEN_SIM.desired, 0)
     `RAL_FIELD_CP(CHICKEN_50, CHICKEN_50.desired)
     `RAL_FIELD_CP_1(CHICKEN_50, CHICKEN_50.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.desired, 0,1)
     `RAL_FIELD_CP(FID_DECREMENT, FID_DECREMENT.desired)
     `RAL_FIELD_CP_1(FID_DECREMENT, FID_DECREMENT.desired, 0)
     `RAL_FIELD_CP(FID_SIM, FID_SIM.desired)
     `RAL_FIELD_CP_1(FID_SIM, FID_SIM.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.desired, 0,1)
     `RAL_FIELD_CP(AQED_LSP_STOP_ATQATM, AQED_LSP_STOP_ATQATM.desired)
     `RAL_FIELD_CP_14(AQED_LSP_STOP_ATQATM, AQED_LSP_STOP_ATQATM.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.desired)
     `RAL_FIELD_CP_2(RSVZ2, RSVZ2.desired, 0,1)
     `RAL_FIELD_CP(RSVZ5, RSVZ5.desired)
     `RAL_FIELD_CP_1(RSVZ5, RSVZ5.desired, 0)
     `RAL_FIELD_CP(RSVZ3, RSVZ3.desired)
     `RAL_FIELD_CP_5(RSVZ3, RSVZ3.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(AQED_CHICKEN_ONEPRI, AQED_CHICKEN_ONEPRI.desired)
     `RAL_FIELD_CP_1(AQED_CHICKEN_ONEPRI, AQED_CHICKEN_ONEPRI.desired, 0)
     `RAL_FIELD_CP(RSVZ4, RSVZ4.desired)
     `RAL_FIELD_CP_1(RSVZ4, RSVZ4.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHICKEN_SIM, CHICKEN_SIM.actual)
     `RAL_FIELD_CP_1(CHICKEN_SIM, CHICKEN_SIM.actual, 0)
     `RAL_FIELD_CP(CHICKEN_50, CHICKEN_50.actual)
     `RAL_FIELD_CP_1(CHICKEN_50, CHICKEN_50.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.actual, 0,1)
     `RAL_FIELD_CP(FID_DECREMENT, FID_DECREMENT.actual)
     `RAL_FIELD_CP_1(FID_DECREMENT, FID_DECREMENT.actual, 0)
     `RAL_FIELD_CP(FID_SIM, FID_SIM.actual)
     `RAL_FIELD_CP_1(FID_SIM, FID_SIM.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.actual, 0,1)
     `RAL_FIELD_CP(AQED_LSP_STOP_ATQATM, AQED_LSP_STOP_ATQATM.actual)
     `RAL_FIELD_CP_14(AQED_LSP_STOP_ATQATM, AQED_LSP_STOP_ATQATM.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.actual)
     `RAL_FIELD_CP_2(RSVZ2, RSVZ2.actual, 0,1)
     `RAL_FIELD_CP(RSVZ5, RSVZ5.actual)
     `RAL_FIELD_CP_1(RSVZ5, RSVZ5.actual, 0)
     `RAL_FIELD_CP(RSVZ3, RSVZ3.actual)
     `RAL_FIELD_CP_5(RSVZ3, RSVZ3.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(AQED_CHICKEN_ONEPRI, AQED_CHICKEN_ONEPRI.actual)
     `RAL_FIELD_CP_1(AQED_CHICKEN_ONEPRI, AQED_CHICKEN_ONEPRI.actual, 0)
     `RAL_FIELD_CP(RSVZ4, RSVZ4.actual)
     `RAL_FIELD_CP_1(RSVZ4, RSVZ4.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CHICKEN_SIM = new("CHICKEN_SIM", "RW", 1, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[0:0]"});
    CHICKEN_SIM.set_powerwell("vcccfn_gated");
    CHICKEN_SIM.set_rand_mode(0);
   CHICKEN_SIM.set_reset_signame("hqm_inp_gated_rst_n");
    CHICKEN_SIM.set_logical_path("HQMID");
    void'(add_field( CHICKEN_SIM ));

    CHICKEN_50 = new("CHICKEN_50", "RW", 1, 1, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[1:1]"});
    CHICKEN_50.set_powerwell("vcccfn_gated");
    CHICKEN_50.set_rand_mode(0);
   CHICKEN_50.set_reset_signame("hqm_inp_gated_rst_n");
    CHICKEN_50.set_logical_path("HQMID");
    void'(add_field( CHICKEN_50 ));

    RSVZ0 = new("RSVZ0", "RW", 2, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[3:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    FID_DECREMENT = new("FID_DECREMENT", "RW", 1, 4, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[4:4]"});
    FID_DECREMENT.set_powerwell("vcccfn_gated");
    FID_DECREMENT.set_rand_mode(0);
   FID_DECREMENT.set_reset_signame("hqm_inp_gated_rst_n");
    FID_DECREMENT.set_logical_path("HQMID");
    void'(add_field( FID_DECREMENT ));

    FID_SIM = new("FID_SIM", "RW", 1, 5, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[5:5]"});
    FID_SIM.set_powerwell("vcccfn_gated");
    FID_SIM.set_rand_mode(0);
   FID_SIM.set_reset_signame("hqm_inp_gated_rst_n");
    FID_SIM.set_logical_path("HQMID");
    void'(add_field( FID_SIM ));

    RSVZ1 = new("RSVZ1", "RW", 2, 6, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[7:6]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    AQED_LSP_STOP_ATQATM = new("AQED_LSP_STOP_ATQATM", "RW", 14, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[21:8]"});
    AQED_LSP_STOP_ATQATM.set_powerwell("vcccfn_gated");
    AQED_LSP_STOP_ATQATM.set_rand_mode(0);
   AQED_LSP_STOP_ATQATM.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_LSP_STOP_ATQATM.set_logical_path("HQMID");
    void'(add_field( AQED_LSP_STOP_ATQATM ));

    RSVZ2 = new("RSVZ2", "RW", 2, 22, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[23:22]"});
    RSVZ2.set_powerwell("vcccfn_gated");
    RSVZ2.set_rand_mode(0);
   RSVZ2.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ2.set_logical_path("HQMID");
    void'(add_field( RSVZ2 ));

    RSVZ5 = new("RSVZ5", "RW", 1, 24, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[24:24]"});
    RSVZ5.set_powerwell("vcccfn_gated");
    RSVZ5.set_rand_mode(0);
   RSVZ5.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ5.set_logical_path("HQMID");
    void'(add_field( RSVZ5 ));

    RSVZ3 = new("RSVZ3", "RW", 5, 25, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[29:25]"});
    RSVZ3.set_powerwell("vcccfn_gated");
    RSVZ3.set_rand_mode(0);
   RSVZ3.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ3.set_logical_path("HQMID");
    void'(add_field( RSVZ3 ));

    AQED_CHICKEN_ONEPRI = new("AQED_CHICKEN_ONEPRI", "RW", 1, 30, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[30:30]"});
    AQED_CHICKEN_ONEPRI.set_powerwell("vcccfn_gated");
    AQED_CHICKEN_ONEPRI.set_rand_mode(0);
   AQED_CHICKEN_ONEPRI.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_CHICKEN_ONEPRI.set_logical_path("HQMID");
    void'(add_field( AQED_CHICKEN_ONEPRI ));

    RSVZ4 = new("RSVZ4", "RW", 1, 31, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[31:31]"});
    RSVZ4.set_powerwell("vcccfn_gated");
    RSVZ4.set_rand_mode(0);
   RSVZ4.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ4.set_logical_path("HQMID");
    void'(add_field( RSVZ4 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_CONTROL_GENERAL_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_CONTROL_GENERAL_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field AQED_AP_ENQ;
  sla_ral_field AQED_CHP_SCH;
  sla_ral_field FID_PUSH;
  sla_ral_field FID_ENQ;
  sla_ral_field RSVZ0;
  sla_ral_field AADEBUG_FIDCNT_UF;
  sla_ral_field DEBUG_COLLIDE0;
  sla_ral_field DEBUG_COLLIDE1;
  sla_ral_field DEBUG_HIT;
  sla_ral_field FL_PARERR_DROP;
  sla_ral_field DEBUG_TOTAL_QID_GT2046;
  sla_ral_field DEBUG_TOTAL_QID_GT2047;
  sla_ral_field DEBUG_TOTAL_QID_GT2048;
  sla_ral_field DEBUG_TOTAL_FID_GT4094;
  sla_ral_field DEBUG_TOTAL_FID_GT4095;
  sla_ral_field DEBUG_TOTAL_FID_GT4096;
  sla_ral_field DEBUG_TOTAL_FID_GT4097;
  sla_ral_field DEBUG_FIDCNT_UF;
  sla_ral_field DEBUG_FIDCNT_OF;
  sla_ral_field DEBUG_QIDCNT_UF;
  sla_ral_field DEBUG_QIDCNT_OF;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AQED_AP_ENQ, AQED_AP_ENQ.desired)
     `RAL_FIELD_CP_5(AQED_AP_ENQ, AQED_AP_ENQ.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(AQED_CHP_SCH, AQED_CHP_SCH.desired)
     `RAL_FIELD_CP_5(AQED_CHP_SCH, AQED_CHP_SCH.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(FID_PUSH, FID_PUSH.desired)
     `RAL_FIELD_CP_1(FID_PUSH, FID_PUSH.desired, 0)
     `RAL_FIELD_CP(FID_ENQ, FID_ENQ.desired)
     `RAL_FIELD_CP_1(FID_ENQ, FID_ENQ.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_4(RSVZ0, RSVZ0.desired, 0,1,2,3)
     `RAL_FIELD_CP(AADEBUG_FIDCNT_UF, AADEBUG_FIDCNT_UF.desired)
     `RAL_FIELD_CP_1(AADEBUG_FIDCNT_UF, AADEBUG_FIDCNT_UF.desired, 0)
     `RAL_FIELD_CP(DEBUG_COLLIDE0, DEBUG_COLLIDE0.desired)
     `RAL_FIELD_CP_1(DEBUG_COLLIDE0, DEBUG_COLLIDE0.desired, 0)
     `RAL_FIELD_CP(DEBUG_COLLIDE1, DEBUG_COLLIDE1.desired)
     `RAL_FIELD_CP_1(DEBUG_COLLIDE1, DEBUG_COLLIDE1.desired, 0)
     `RAL_FIELD_CP(DEBUG_HIT, DEBUG_HIT.desired)
     `RAL_FIELD_CP_1(DEBUG_HIT, DEBUG_HIT.desired, 0)
     `RAL_FIELD_CP(FL_PARERR_DROP, FL_PARERR_DROP.desired)
     `RAL_FIELD_CP_1(FL_PARERR_DROP, FL_PARERR_DROP.desired, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_QID_GT2046, DEBUG_TOTAL_QID_GT2046.desired)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_QID_GT2046, DEBUG_TOTAL_QID_GT2046.desired, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_QID_GT2047, DEBUG_TOTAL_QID_GT2047.desired)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_QID_GT2047, DEBUG_TOTAL_QID_GT2047.desired, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_QID_GT2048, DEBUG_TOTAL_QID_GT2048.desired)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_QID_GT2048, DEBUG_TOTAL_QID_GT2048.desired, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_FID_GT4094, DEBUG_TOTAL_FID_GT4094.desired)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_FID_GT4094, DEBUG_TOTAL_FID_GT4094.desired, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_FID_GT4095, DEBUG_TOTAL_FID_GT4095.desired)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_FID_GT4095, DEBUG_TOTAL_FID_GT4095.desired, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_FID_GT4096, DEBUG_TOTAL_FID_GT4096.desired)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_FID_GT4096, DEBUG_TOTAL_FID_GT4096.desired, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_FID_GT4097, DEBUG_TOTAL_FID_GT4097.desired)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_FID_GT4097, DEBUG_TOTAL_FID_GT4097.desired, 0)
     `RAL_FIELD_CP(DEBUG_FIDCNT_UF, DEBUG_FIDCNT_UF.desired)
     `RAL_FIELD_CP_1(DEBUG_FIDCNT_UF, DEBUG_FIDCNT_UF.desired, 0)
     `RAL_FIELD_CP(DEBUG_FIDCNT_OF, DEBUG_FIDCNT_OF.desired)
     `RAL_FIELD_CP_1(DEBUG_FIDCNT_OF, DEBUG_FIDCNT_OF.desired, 0)
     `RAL_FIELD_CP(DEBUG_QIDCNT_UF, DEBUG_QIDCNT_UF.desired)
     `RAL_FIELD_CP_1(DEBUG_QIDCNT_UF, DEBUG_QIDCNT_UF.desired, 0)
     `RAL_FIELD_CP(DEBUG_QIDCNT_OF, DEBUG_QIDCNT_OF.desired)
     `RAL_FIELD_CP_1(DEBUG_QIDCNT_OF, DEBUG_QIDCNT_OF.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AQED_AP_ENQ, AQED_AP_ENQ.actual)
     `RAL_FIELD_CP_5(AQED_AP_ENQ, AQED_AP_ENQ.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(AQED_CHP_SCH, AQED_CHP_SCH.actual)
     `RAL_FIELD_CP_5(AQED_CHP_SCH, AQED_CHP_SCH.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(FID_PUSH, FID_PUSH.actual)
     `RAL_FIELD_CP_1(FID_PUSH, FID_PUSH.actual, 0)
     `RAL_FIELD_CP(FID_ENQ, FID_ENQ.actual)
     `RAL_FIELD_CP_1(FID_ENQ, FID_ENQ.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_4(RSVZ0, RSVZ0.actual, 0,1,2,3)
     `RAL_FIELD_CP(AADEBUG_FIDCNT_UF, AADEBUG_FIDCNT_UF.actual)
     `RAL_FIELD_CP_1(AADEBUG_FIDCNT_UF, AADEBUG_FIDCNT_UF.actual, 0)
     `RAL_FIELD_CP(DEBUG_COLLIDE0, DEBUG_COLLIDE0.actual)
     `RAL_FIELD_CP_1(DEBUG_COLLIDE0, DEBUG_COLLIDE0.actual, 0)
     `RAL_FIELD_CP(DEBUG_COLLIDE1, DEBUG_COLLIDE1.actual)
     `RAL_FIELD_CP_1(DEBUG_COLLIDE1, DEBUG_COLLIDE1.actual, 0)
     `RAL_FIELD_CP(DEBUG_HIT, DEBUG_HIT.actual)
     `RAL_FIELD_CP_1(DEBUG_HIT, DEBUG_HIT.actual, 0)
     `RAL_FIELD_CP(FL_PARERR_DROP, FL_PARERR_DROP.actual)
     `RAL_FIELD_CP_1(FL_PARERR_DROP, FL_PARERR_DROP.actual, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_QID_GT2046, DEBUG_TOTAL_QID_GT2046.actual)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_QID_GT2046, DEBUG_TOTAL_QID_GT2046.actual, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_QID_GT2047, DEBUG_TOTAL_QID_GT2047.actual)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_QID_GT2047, DEBUG_TOTAL_QID_GT2047.actual, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_QID_GT2048, DEBUG_TOTAL_QID_GT2048.actual)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_QID_GT2048, DEBUG_TOTAL_QID_GT2048.actual, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_FID_GT4094, DEBUG_TOTAL_FID_GT4094.actual)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_FID_GT4094, DEBUG_TOTAL_FID_GT4094.actual, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_FID_GT4095, DEBUG_TOTAL_FID_GT4095.actual)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_FID_GT4095, DEBUG_TOTAL_FID_GT4095.actual, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_FID_GT4096, DEBUG_TOTAL_FID_GT4096.actual)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_FID_GT4096, DEBUG_TOTAL_FID_GT4096.actual, 0)
     `RAL_FIELD_CP(DEBUG_TOTAL_FID_GT4097, DEBUG_TOTAL_FID_GT4097.actual)
     `RAL_FIELD_CP_1(DEBUG_TOTAL_FID_GT4097, DEBUG_TOTAL_FID_GT4097.actual, 0)
     `RAL_FIELD_CP(DEBUG_FIDCNT_UF, DEBUG_FIDCNT_UF.actual)
     `RAL_FIELD_CP_1(DEBUG_FIDCNT_UF, DEBUG_FIDCNT_UF.actual, 0)
     `RAL_FIELD_CP(DEBUG_FIDCNT_OF, DEBUG_FIDCNT_OF.actual)
     `RAL_FIELD_CP_1(DEBUG_FIDCNT_OF, DEBUG_FIDCNT_OF.actual, 0)
     `RAL_FIELD_CP(DEBUG_QIDCNT_UF, DEBUG_QIDCNT_UF.actual)
     `RAL_FIELD_CP_1(DEBUG_QIDCNT_UF, DEBUG_QIDCNT_UF.actual, 0)
     `RAL_FIELD_CP(DEBUG_QIDCNT_OF, DEBUG_QIDCNT_OF.actual)
     `RAL_FIELD_CP_1(DEBUG_QIDCNT_OF, DEBUG_QIDCNT_OF.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    AQED_AP_ENQ = new("AQED_AP_ENQ", "RW", 5, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[4:0]"});
    AQED_AP_ENQ.set_powerwell("vcccfn_gated");
    AQED_AP_ENQ.set_rand_mode(0);
   AQED_AP_ENQ.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_AP_ENQ.set_logical_path("HQMID");
    void'(add_field( AQED_AP_ENQ ));

    AQED_CHP_SCH = new("AQED_CHP_SCH", "RW", 5, 5, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[9:5]"});
    AQED_CHP_SCH.set_powerwell("vcccfn_gated");
    AQED_CHP_SCH.set_rand_mode(0);
   AQED_CHP_SCH.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_CHP_SCH.set_logical_path("HQMID");
    void'(add_field( AQED_CHP_SCH ));

    FID_PUSH = new("FID_PUSH", "RW", 1, 10, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[10:10]"});
    FID_PUSH.set_powerwell("vcccfn_gated");
    FID_PUSH.set_rand_mode(0);
   FID_PUSH.set_reset_signame("hqm_inp_gated_rst_n");
    FID_PUSH.set_logical_path("HQMID");
    void'(add_field( FID_PUSH ));

    FID_ENQ = new("FID_ENQ", "RW", 1, 11, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[11:11]"});
    FID_ENQ.set_powerwell("vcccfn_gated");
    FID_ENQ.set_rand_mode(0);
   FID_ENQ.set_reset_signame("hqm_inp_gated_rst_n");
    FID_ENQ.set_logical_path("HQMID");
    void'(add_field( FID_ENQ ));

    RSVZ0 = new("RSVZ0", "RW", 4, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[15:12]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    AADEBUG_FIDCNT_UF = new("AADEBUG_FIDCNT_UF", "RW", 1, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[16:16]"});
    AADEBUG_FIDCNT_UF.set_powerwell("vcccfn_gated");
    AADEBUG_FIDCNT_UF.set_rand_mode(0);
   AADEBUG_FIDCNT_UF.set_reset_signame("hqm_inp_gated_rst_n");
    AADEBUG_FIDCNT_UF.set_logical_path("HQMID");
    void'(add_field( AADEBUG_FIDCNT_UF ));

    DEBUG_COLLIDE0 = new("DEBUG_COLLIDE0", "RW", 1, 17, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[17:17]"});
    DEBUG_COLLIDE0.set_powerwell("vcccfn_gated");
    DEBUG_COLLIDE0.set_rand_mode(0);
   DEBUG_COLLIDE0.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_COLLIDE0.set_logical_path("HQMID");
    void'(add_field( DEBUG_COLLIDE0 ));

    DEBUG_COLLIDE1 = new("DEBUG_COLLIDE1", "RW", 1, 18, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[18:18]"});
    DEBUG_COLLIDE1.set_powerwell("vcccfn_gated");
    DEBUG_COLLIDE1.set_rand_mode(0);
   DEBUG_COLLIDE1.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_COLLIDE1.set_logical_path("HQMID");
    void'(add_field( DEBUG_COLLIDE1 ));

    DEBUG_HIT = new("DEBUG_HIT", "RW", 1, 19, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[19:19]"});
    DEBUG_HIT.set_powerwell("vcccfn_gated");
    DEBUG_HIT.set_rand_mode(0);
   DEBUG_HIT.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_HIT.set_logical_path("HQMID");
    void'(add_field( DEBUG_HIT ));

    FL_PARERR_DROP = new("FL_PARERR_DROP", "RW", 1, 20, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[20:20]"});
    FL_PARERR_DROP.set_powerwell("vcccfn_gated");
    FL_PARERR_DROP.set_rand_mode(0);
   FL_PARERR_DROP.set_reset_signame("hqm_inp_gated_rst_n");
    FL_PARERR_DROP.set_logical_path("HQMID");
    void'(add_field( FL_PARERR_DROP ));

    DEBUG_TOTAL_QID_GT2046 = new("DEBUG_TOTAL_QID_GT2046", "RW", 1, 21, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[21:21]"});
    DEBUG_TOTAL_QID_GT2046.set_powerwell("vcccfn_gated");
    DEBUG_TOTAL_QID_GT2046.set_rand_mode(0);
   DEBUG_TOTAL_QID_GT2046.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_TOTAL_QID_GT2046.set_logical_path("HQMID");
    void'(add_field( DEBUG_TOTAL_QID_GT2046 ));

    DEBUG_TOTAL_QID_GT2047 = new("DEBUG_TOTAL_QID_GT2047", "RW", 1, 22, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[22:22]"});
    DEBUG_TOTAL_QID_GT2047.set_powerwell("vcccfn_gated");
    DEBUG_TOTAL_QID_GT2047.set_rand_mode(0);
   DEBUG_TOTAL_QID_GT2047.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_TOTAL_QID_GT2047.set_logical_path("HQMID");
    void'(add_field( DEBUG_TOTAL_QID_GT2047 ));

    DEBUG_TOTAL_QID_GT2048 = new("DEBUG_TOTAL_QID_GT2048", "RW", 1, 23, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[23:23]"});
    DEBUG_TOTAL_QID_GT2048.set_powerwell("vcccfn_gated");
    DEBUG_TOTAL_QID_GT2048.set_rand_mode(0);
   DEBUG_TOTAL_QID_GT2048.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_TOTAL_QID_GT2048.set_logical_path("HQMID");
    void'(add_field( DEBUG_TOTAL_QID_GT2048 ));

    DEBUG_TOTAL_FID_GT4094 = new("DEBUG_TOTAL_FID_GT4094", "RW", 1, 24, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[24:24]"});
    DEBUG_TOTAL_FID_GT4094.set_powerwell("vcccfn_gated");
    DEBUG_TOTAL_FID_GT4094.set_rand_mode(0);
   DEBUG_TOTAL_FID_GT4094.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_TOTAL_FID_GT4094.set_logical_path("HQMID");
    void'(add_field( DEBUG_TOTAL_FID_GT4094 ));

    DEBUG_TOTAL_FID_GT4095 = new("DEBUG_TOTAL_FID_GT4095", "RW", 1, 25, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[25:25]"});
    DEBUG_TOTAL_FID_GT4095.set_powerwell("vcccfn_gated");
    DEBUG_TOTAL_FID_GT4095.set_rand_mode(0);
   DEBUG_TOTAL_FID_GT4095.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_TOTAL_FID_GT4095.set_logical_path("HQMID");
    void'(add_field( DEBUG_TOTAL_FID_GT4095 ));

    DEBUG_TOTAL_FID_GT4096 = new("DEBUG_TOTAL_FID_GT4096", "RW", 1, 26, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[26:26]"});
    DEBUG_TOTAL_FID_GT4096.set_powerwell("vcccfn_gated");
    DEBUG_TOTAL_FID_GT4096.set_rand_mode(0);
   DEBUG_TOTAL_FID_GT4096.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_TOTAL_FID_GT4096.set_logical_path("HQMID");
    void'(add_field( DEBUG_TOTAL_FID_GT4096 ));

    DEBUG_TOTAL_FID_GT4097 = new("DEBUG_TOTAL_FID_GT4097", "RW", 1, 27, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[27:27]"});
    DEBUG_TOTAL_FID_GT4097.set_powerwell("vcccfn_gated");
    DEBUG_TOTAL_FID_GT4097.set_rand_mode(0);
   DEBUG_TOTAL_FID_GT4097.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_TOTAL_FID_GT4097.set_logical_path("HQMID");
    void'(add_field( DEBUG_TOTAL_FID_GT4097 ));

    DEBUG_FIDCNT_UF = new("DEBUG_FIDCNT_UF", "RW", 1, 28, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[28:28]"});
    DEBUG_FIDCNT_UF.set_powerwell("vcccfn_gated");
    DEBUG_FIDCNT_UF.set_rand_mode(0);
   DEBUG_FIDCNT_UF.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_FIDCNT_UF.set_logical_path("HQMID");
    void'(add_field( DEBUG_FIDCNT_UF ));

    DEBUG_FIDCNT_OF = new("DEBUG_FIDCNT_OF", "RW", 1, 29, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[29:29]"});
    DEBUG_FIDCNT_OF.set_powerwell("vcccfn_gated");
    DEBUG_FIDCNT_OF.set_rand_mode(0);
   DEBUG_FIDCNT_OF.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_FIDCNT_OF.set_logical_path("HQMID");
    void'(add_field( DEBUG_FIDCNT_OF ));

    DEBUG_QIDCNT_UF = new("DEBUG_QIDCNT_UF", "RW", 1, 30, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[30:30]"});
    DEBUG_QIDCNT_UF.set_powerwell("vcccfn_gated");
    DEBUG_QIDCNT_UF.set_rand_mode(0);
   DEBUG_QIDCNT_UF.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_QIDCNT_UF.set_logical_path("HQMID");
    void'(add_field( DEBUG_QIDCNT_UF ));

    DEBUG_QIDCNT_OF = new("DEBUG_QIDCNT_OF", "RW", 1, 31, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[31:31]"});
    DEBUG_QIDCNT_OF.set_powerwell("vcccfn_gated");
    DEBUG_QIDCNT_OF.set_rand_mode(0);
   DEBUG_QIDCNT_OF.set_reset_signame("hqm_inp_gated_rst_n");
    DEBUG_QIDCNT_OF.set_logical_path("HQMID");
    void'(add_field( DEBUG_QIDCNT_OF ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QID_FID_LIMIT;
  sla_ral_field BCAM_OPERATION;
  sla_ral_field BCAM_FULL0;
  sla_ral_field BCAM_FULL1;
  sla_ral_field FID_BCAM_ERROR00;
  sla_ral_field FID_BCAM_ERROR01;
  sla_ral_field FID_BCAM_ERROR02;
  sla_ral_field FID_BCAM_ERROR03;
  sla_ral_field FID_BCAM_ERROR04;
  sla_ral_field FID_BCAM_ERROR05;
  sla_ral_field FID_BCAM_ERROR06;
  sla_ral_field FID_BCAM_ERROR07;
  sla_ral_field FID_BCAM_ERROR08;
  sla_ral_field FID_BCAM_ERROR09;
  sla_ral_field FID_BCAM_ERROR10;
  sla_ral_field FID_BCAM_ERROR11;
  sla_ral_field FID_BCAM_ERROR12;
  sla_ral_field FID_BCAM_ERROR13;
  sla_ral_field FID_BCAM_ERROR14;
  sla_ral_field FID_BCAM_ERROR15;
  sla_ral_field FID_BCAM_ERROR16;
  sla_ral_field FID_BCAM_ERROR17;
  sla_ral_field FID_BCAM_ERROR18;
  sla_ral_field FID_BCAM_ERROR19;
  sla_ral_field FID_BCAM_ERROR20;
  sla_ral_field FID_BCAM_ERROR21;
  sla_ral_field FID_BCAM_ERROR22;
  sla_ral_field FID_BCAM_ERROR23;
  sla_ral_field RSVZ0;
  sla_ral_field INTERRUPT;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_FID_LIMIT, QID_FID_LIMIT.desired)
     `RAL_FIELD_CP_1(QID_FID_LIMIT, QID_FID_LIMIT.desired, 0)
     `RAL_FIELD_CP(BCAM_OPERATION, BCAM_OPERATION.desired)
     `RAL_FIELD_CP_1(BCAM_OPERATION, BCAM_OPERATION.desired, 0)
     `RAL_FIELD_CP(BCAM_FULL0, BCAM_FULL0.desired)
     `RAL_FIELD_CP_1(BCAM_FULL0, BCAM_FULL0.desired, 0)
     `RAL_FIELD_CP(BCAM_FULL1, BCAM_FULL1.desired)
     `RAL_FIELD_CP_1(BCAM_FULL1, BCAM_FULL1.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR00, FID_BCAM_ERROR00.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR00, FID_BCAM_ERROR00.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR01, FID_BCAM_ERROR01.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR01, FID_BCAM_ERROR01.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR02, FID_BCAM_ERROR02.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR02, FID_BCAM_ERROR02.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR03, FID_BCAM_ERROR03.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR03, FID_BCAM_ERROR03.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR04, FID_BCAM_ERROR04.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR04, FID_BCAM_ERROR04.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR05, FID_BCAM_ERROR05.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR05, FID_BCAM_ERROR05.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR06, FID_BCAM_ERROR06.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR06, FID_BCAM_ERROR06.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR07, FID_BCAM_ERROR07.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR07, FID_BCAM_ERROR07.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR08, FID_BCAM_ERROR08.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR08, FID_BCAM_ERROR08.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR09, FID_BCAM_ERROR09.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR09, FID_BCAM_ERROR09.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR10, FID_BCAM_ERROR10.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR10, FID_BCAM_ERROR10.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR11, FID_BCAM_ERROR11.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR11, FID_BCAM_ERROR11.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR12, FID_BCAM_ERROR12.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR12, FID_BCAM_ERROR12.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR13, FID_BCAM_ERROR13.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR13, FID_BCAM_ERROR13.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR14, FID_BCAM_ERROR14.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR14, FID_BCAM_ERROR14.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR15, FID_BCAM_ERROR15.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR15, FID_BCAM_ERROR15.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR16, FID_BCAM_ERROR16.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR16, FID_BCAM_ERROR16.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR17, FID_BCAM_ERROR17.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR17, FID_BCAM_ERROR17.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR18, FID_BCAM_ERROR18.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR18, FID_BCAM_ERROR18.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR19, FID_BCAM_ERROR19.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR19, FID_BCAM_ERROR19.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR20, FID_BCAM_ERROR20.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR20, FID_BCAM_ERROR20.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR21, FID_BCAM_ERROR21.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR21, FID_BCAM_ERROR21.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR22, FID_BCAM_ERROR22.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR22, FID_BCAM_ERROR22.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR23, FID_BCAM_ERROR23.desired)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR23, FID_BCAM_ERROR23.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_3(RSVZ0, RSVZ0.desired, 0,1,2)
     `RAL_FIELD_CP(INTERRUPT, INTERRUPT.desired)
     `RAL_FIELD_CP_1(INTERRUPT, INTERRUPT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_FID_LIMIT, QID_FID_LIMIT.actual)
     `RAL_FIELD_CP_1(QID_FID_LIMIT, QID_FID_LIMIT.actual, 0)
     `RAL_FIELD_CP(BCAM_OPERATION, BCAM_OPERATION.actual)
     `RAL_FIELD_CP_1(BCAM_OPERATION, BCAM_OPERATION.actual, 0)
     `RAL_FIELD_CP(BCAM_FULL0, BCAM_FULL0.actual)
     `RAL_FIELD_CP_1(BCAM_FULL0, BCAM_FULL0.actual, 0)
     `RAL_FIELD_CP(BCAM_FULL1, BCAM_FULL1.actual)
     `RAL_FIELD_CP_1(BCAM_FULL1, BCAM_FULL1.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR00, FID_BCAM_ERROR00.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR00, FID_BCAM_ERROR00.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR01, FID_BCAM_ERROR01.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR01, FID_BCAM_ERROR01.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR02, FID_BCAM_ERROR02.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR02, FID_BCAM_ERROR02.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR03, FID_BCAM_ERROR03.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR03, FID_BCAM_ERROR03.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR04, FID_BCAM_ERROR04.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR04, FID_BCAM_ERROR04.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR05, FID_BCAM_ERROR05.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR05, FID_BCAM_ERROR05.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR06, FID_BCAM_ERROR06.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR06, FID_BCAM_ERROR06.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR07, FID_BCAM_ERROR07.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR07, FID_BCAM_ERROR07.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR08, FID_BCAM_ERROR08.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR08, FID_BCAM_ERROR08.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR09, FID_BCAM_ERROR09.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR09, FID_BCAM_ERROR09.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR10, FID_BCAM_ERROR10.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR10, FID_BCAM_ERROR10.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR11, FID_BCAM_ERROR11.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR11, FID_BCAM_ERROR11.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR12, FID_BCAM_ERROR12.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR12, FID_BCAM_ERROR12.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR13, FID_BCAM_ERROR13.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR13, FID_BCAM_ERROR13.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR14, FID_BCAM_ERROR14.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR14, FID_BCAM_ERROR14.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR15, FID_BCAM_ERROR15.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR15, FID_BCAM_ERROR15.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR16, FID_BCAM_ERROR16.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR16, FID_BCAM_ERROR16.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR17, FID_BCAM_ERROR17.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR17, FID_BCAM_ERROR17.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR18, FID_BCAM_ERROR18.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR18, FID_BCAM_ERROR18.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR19, FID_BCAM_ERROR19.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR19, FID_BCAM_ERROR19.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR20, FID_BCAM_ERROR20.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR20, FID_BCAM_ERROR20.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR21, FID_BCAM_ERROR21.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR21, FID_BCAM_ERROR21.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR22, FID_BCAM_ERROR22.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR22, FID_BCAM_ERROR22.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_ERROR23, FID_BCAM_ERROR23.actual)
     `RAL_FIELD_CP_1(FID_BCAM_ERROR23, FID_BCAM_ERROR23.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_3(RSVZ0, RSVZ0.actual, 0,1,2)
     `RAL_FIELD_CP(INTERRUPT, INTERRUPT.actual)
     `RAL_FIELD_CP_1(INTERRUPT, INTERRUPT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QID_FID_LIMIT = new("QID_FID_LIMIT", "RW/V", 1, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[0:0]"});
    QID_FID_LIMIT.set_powerwell("vcccfn_gated");
    QID_FID_LIMIT.set_rand_mode(0);
   QID_FID_LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    QID_FID_LIMIT.set_logical_path("HQMID");
    void'(add_field( QID_FID_LIMIT ));

    BCAM_OPERATION = new("BCAM_OPERATION", "RW/V", 1, 1, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[1:1]"});
    BCAM_OPERATION.set_powerwell("vcccfn_gated");
    BCAM_OPERATION.set_rand_mode(0);
   BCAM_OPERATION.set_reset_signame("hqm_inp_gated_rst_n");
    BCAM_OPERATION.set_logical_path("HQMID");
    void'(add_field( BCAM_OPERATION ));

    BCAM_FULL0 = new("BCAM_FULL0", "RW/V", 1, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[2:2]"});
    BCAM_FULL0.set_powerwell("vcccfn_gated");
    BCAM_FULL0.set_rand_mode(0);
   BCAM_FULL0.set_reset_signame("hqm_inp_gated_rst_n");
    BCAM_FULL0.set_logical_path("HQMID");
    void'(add_field( BCAM_FULL0 ));

    BCAM_FULL1 = new("BCAM_FULL1", "RW/V", 1, 3, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[3:3]"});
    BCAM_FULL1.set_powerwell("vcccfn_gated");
    BCAM_FULL1.set_rand_mode(0);
   BCAM_FULL1.set_reset_signame("hqm_inp_gated_rst_n");
    BCAM_FULL1.set_logical_path("HQMID");
    void'(add_field( BCAM_FULL1 ));

    FID_BCAM_ERROR00 = new("FID_BCAM_ERROR00", "RW/V", 1, 4, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[4:4]"});
    FID_BCAM_ERROR00.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR00.set_rand_mode(0);
   FID_BCAM_ERROR00.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR00.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR00 ));

    FID_BCAM_ERROR01 = new("FID_BCAM_ERROR01", "RW/V", 1, 5, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[5:5]"});
    FID_BCAM_ERROR01.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR01.set_rand_mode(0);
   FID_BCAM_ERROR01.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR01.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR01 ));

    FID_BCAM_ERROR02 = new("FID_BCAM_ERROR02", "RW/V", 1, 6, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[6:6]"});
    FID_BCAM_ERROR02.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR02.set_rand_mode(0);
   FID_BCAM_ERROR02.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR02.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR02 ));

    FID_BCAM_ERROR03 = new("FID_BCAM_ERROR03", "RW/V", 1, 7, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[7:7]"});
    FID_BCAM_ERROR03.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR03.set_rand_mode(0);
   FID_BCAM_ERROR03.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR03.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR03 ));

    FID_BCAM_ERROR04 = new("FID_BCAM_ERROR04", "RW/V", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[8:8]"});
    FID_BCAM_ERROR04.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR04.set_rand_mode(0);
   FID_BCAM_ERROR04.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR04.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR04 ));

    FID_BCAM_ERROR05 = new("FID_BCAM_ERROR05", "RW/V", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[9:9]"});
    FID_BCAM_ERROR05.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR05.set_rand_mode(0);
   FID_BCAM_ERROR05.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR05.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR05 ));

    FID_BCAM_ERROR06 = new("FID_BCAM_ERROR06", "RW/V", 1, 10, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[10:10]"});
    FID_BCAM_ERROR06.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR06.set_rand_mode(0);
   FID_BCAM_ERROR06.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR06.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR06 ));

    FID_BCAM_ERROR07 = new("FID_BCAM_ERROR07", "RW/V", 1, 11, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[11:11]"});
    FID_BCAM_ERROR07.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR07.set_rand_mode(0);
   FID_BCAM_ERROR07.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR07.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR07 ));

    FID_BCAM_ERROR08 = new("FID_BCAM_ERROR08", "RW/V", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[12:12]"});
    FID_BCAM_ERROR08.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR08.set_rand_mode(0);
   FID_BCAM_ERROR08.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR08.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR08 ));

    FID_BCAM_ERROR09 = new("FID_BCAM_ERROR09", "RW/V", 1, 13, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[13:13]"});
    FID_BCAM_ERROR09.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR09.set_rand_mode(0);
   FID_BCAM_ERROR09.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR09.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR09 ));

    FID_BCAM_ERROR10 = new("FID_BCAM_ERROR10", "RW/V", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[14:14]"});
    FID_BCAM_ERROR10.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR10.set_rand_mode(0);
   FID_BCAM_ERROR10.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR10.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR10 ));

    FID_BCAM_ERROR11 = new("FID_BCAM_ERROR11", "RW/V", 1, 15, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[15:15]"});
    FID_BCAM_ERROR11.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR11.set_rand_mode(0);
   FID_BCAM_ERROR11.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR11.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR11 ));

    FID_BCAM_ERROR12 = new("FID_BCAM_ERROR12", "RW/V", 1, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[16:16]"});
    FID_BCAM_ERROR12.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR12.set_rand_mode(0);
   FID_BCAM_ERROR12.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR12.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR12 ));

    FID_BCAM_ERROR13 = new("FID_BCAM_ERROR13", "RW/V", 1, 17, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[17:17]"});
    FID_BCAM_ERROR13.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR13.set_rand_mode(0);
   FID_BCAM_ERROR13.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR13.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR13 ));

    FID_BCAM_ERROR14 = new("FID_BCAM_ERROR14", "RW/V", 1, 18, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[18:18]"});
    FID_BCAM_ERROR14.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR14.set_rand_mode(0);
   FID_BCAM_ERROR14.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR14.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR14 ));

    FID_BCAM_ERROR15 = new("FID_BCAM_ERROR15", "RW/V", 1, 19, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[19:19]"});
    FID_BCAM_ERROR15.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR15.set_rand_mode(0);
   FID_BCAM_ERROR15.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR15.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR15 ));

    FID_BCAM_ERROR16 = new("FID_BCAM_ERROR16", "RW/V", 1, 20, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[20:20]"});
    FID_BCAM_ERROR16.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR16.set_rand_mode(0);
   FID_BCAM_ERROR16.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR16.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR16 ));

    FID_BCAM_ERROR17 = new("FID_BCAM_ERROR17", "RW/V", 1, 21, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[21:21]"});
    FID_BCAM_ERROR17.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR17.set_rand_mode(0);
   FID_BCAM_ERROR17.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR17.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR17 ));

    FID_BCAM_ERROR18 = new("FID_BCAM_ERROR18", "RW/V", 1, 22, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[22:22]"});
    FID_BCAM_ERROR18.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR18.set_rand_mode(0);
   FID_BCAM_ERROR18.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR18.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR18 ));

    FID_BCAM_ERROR19 = new("FID_BCAM_ERROR19", "RW/V", 1, 23, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[23:23]"});
    FID_BCAM_ERROR19.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR19.set_rand_mode(0);
   FID_BCAM_ERROR19.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR19.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR19 ));

    FID_BCAM_ERROR20 = new("FID_BCAM_ERROR20", "RW/V", 1, 24, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[24:24]"});
    FID_BCAM_ERROR20.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR20.set_rand_mode(0);
   FID_BCAM_ERROR20.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR20.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR20 ));

    FID_BCAM_ERROR21 = new("FID_BCAM_ERROR21", "RW/V", 1, 25, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[25:25]"});
    FID_BCAM_ERROR21.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR21.set_rand_mode(0);
   FID_BCAM_ERROR21.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR21.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR21 ));

    FID_BCAM_ERROR22 = new("FID_BCAM_ERROR22", "RW/V", 1, 26, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[26:26]"});
    FID_BCAM_ERROR22.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR22.set_rand_mode(0);
   FID_BCAM_ERROR22.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR22.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR22 ));

    FID_BCAM_ERROR23 = new("FID_BCAM_ERROR23", "RW/V", 1, 27, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[27:27]"});
    FID_BCAM_ERROR23.set_powerwell("vcccfn_gated");
    FID_BCAM_ERROR23.set_rand_mode(0);
   FID_BCAM_ERROR23.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_ERROR23.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_ERROR23 ));

    RSVZ0 = new("RSVZ0", "RW/V", 3, 28, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[30:28]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    INTERRUPT = new("INTERRUPT", "RW/V", 1, 31, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[31:31]"});
    INTERRUPT.set_powerwell("vcccfn_gated");
    INTERRUPT.set_rand_mode(0);
   INTERRUPT.set_reset_signame("hqm_inp_gated_rst_n");
    INTERRUPT.set_logical_path("HQMID");
    void'(add_field( INTERRUPT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RW_LL_QE_HPNXT_P3_HOLD;
  sla_ral_field RW_LL_QE_HPNXT_P2_HOLD;
  sla_ral_field RW_LL_QE_HPNXT_P1_HOLD;
  sla_ral_field RW_LL_QE_HPNXT_P3_V_F;
  sla_ral_field RW_LL_QE_HPNXT_P2_V_F;
  sla_ral_field RW_LL_QE_HPNXT_P1_V_F;
  sla_ral_field RW_LL_QE_HPNXT_P0_V_F;
  sla_ral_field RMW_LL_TP_P3_HOLD;
  sla_ral_field RMW_LL_TP_P2_HOLD;
  sla_ral_field RMW_LL_TP_P1_HOLD;
  sla_ral_field RMW_LL_TP_P3_V_F;
  sla_ral_field RMW_LL_TP_P2_V_F;
  sla_ral_field RMW_LL_TP_P1_V_F;
  sla_ral_field RMW_LL_TP_P0_V_F;
  sla_ral_field RMW_LL_HP_P1_HOLD;
  sla_ral_field RMW_LL_HP_P2_HOLD;
  sla_ral_field RMW_LL_HP_P3_HOLD;
  sla_ral_field RMW_LL_HP_P0_V_F;
  sla_ral_field RMW_LL_HP_P1_V_F;
  sla_ral_field RMW_LL_HP_P2_V_F;
  sla_ral_field RMW_LL_HP_P3_V_F;
  sla_ral_field RMW_LL_CNT_P1_HOLD;
  sla_ral_field RMW_LL_CNT_P2_HOLD;
  sla_ral_field RMW_LL_CNT_P3_HOLD;
  sla_ral_field RMW_LL_CNT_P0_V_F;
  sla_ral_field RMW_LL_CNT_P1_V_F;
  sla_ral_field RMW_LL_CNT_P2_V_F;
  sla_ral_field RMW_LL_CNT_P3_V_F;
  sla_ral_field FID_BCAM_NOTEMPTY;
  sla_ral_field FL_EMPTY;
  sla_ral_field FL_FULL;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P3_HOLD, RW_LL_QE_HPNXT_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P3_HOLD, RW_LL_QE_HPNXT_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P2_HOLD, RW_LL_QE_HPNXT_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P2_HOLD, RW_LL_QE_HPNXT_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P1_HOLD, RW_LL_QE_HPNXT_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P1_HOLD, RW_LL_QE_HPNXT_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P3_V_F, RW_LL_QE_HPNXT_P3_V_F.desired)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P3_V_F, RW_LL_QE_HPNXT_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P2_V_F, RW_LL_QE_HPNXT_P2_V_F.desired)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P2_V_F, RW_LL_QE_HPNXT_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P1_V_F, RW_LL_QE_HPNXT_P1_V_F.desired)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P1_V_F, RW_LL_QE_HPNXT_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P0_V_F, RW_LL_QE_HPNXT_P0_V_F.desired)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P0_V_F, RW_LL_QE_HPNXT_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P3_HOLD, RMW_LL_TP_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_LL_TP_P3_HOLD, RMW_LL_TP_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P2_HOLD, RMW_LL_TP_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_LL_TP_P2_HOLD, RMW_LL_TP_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P1_HOLD, RMW_LL_TP_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_LL_TP_P1_HOLD, RMW_LL_TP_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P3_V_F, RMW_LL_TP_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_TP_P3_V_F, RMW_LL_TP_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P2_V_F, RMW_LL_TP_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_TP_P2_V_F, RMW_LL_TP_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P1_V_F, RMW_LL_TP_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_TP_P1_V_F, RMW_LL_TP_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P0_V_F, RMW_LL_TP_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_TP_P0_V_F, RMW_LL_TP_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P1_HOLD, RMW_LL_HP_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_LL_HP_P1_HOLD, RMW_LL_HP_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P2_HOLD, RMW_LL_HP_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_LL_HP_P2_HOLD, RMW_LL_HP_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P3_HOLD, RMW_LL_HP_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_LL_HP_P3_HOLD, RMW_LL_HP_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P0_V_F, RMW_LL_HP_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_HP_P0_V_F, RMW_LL_HP_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P1_V_F, RMW_LL_HP_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_HP_P1_V_F, RMW_LL_HP_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P2_V_F, RMW_LL_HP_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_HP_P2_V_F, RMW_LL_HP_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P3_V_F, RMW_LL_HP_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_HP_P3_V_F, RMW_LL_HP_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P1_HOLD, RMW_LL_CNT_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P1_HOLD, RMW_LL_CNT_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P2_HOLD, RMW_LL_CNT_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P2_HOLD, RMW_LL_CNT_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P3_HOLD, RMW_LL_CNT_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P3_HOLD, RMW_LL_CNT_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P0_V_F, RMW_LL_CNT_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P0_V_F, RMW_LL_CNT_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P1_V_F, RMW_LL_CNT_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P1_V_F, RMW_LL_CNT_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P2_V_F, RMW_LL_CNT_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P2_V_F, RMW_LL_CNT_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P3_V_F, RMW_LL_CNT_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P3_V_F, RMW_LL_CNT_P3_V_F.desired, 0)
     `RAL_FIELD_CP(FID_BCAM_NOTEMPTY, FID_BCAM_NOTEMPTY.desired)
     `RAL_FIELD_CP_1(FID_BCAM_NOTEMPTY, FID_BCAM_NOTEMPTY.desired, 0)
     `RAL_FIELD_CP(FL_EMPTY, FL_EMPTY.desired)
     `RAL_FIELD_CP_1(FL_EMPTY, FL_EMPTY.desired, 0)
     `RAL_FIELD_CP(FL_FULL, FL_FULL.desired)
     `RAL_FIELD_CP_1(FL_FULL, FL_FULL.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P3_HOLD, RW_LL_QE_HPNXT_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P3_HOLD, RW_LL_QE_HPNXT_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P2_HOLD, RW_LL_QE_HPNXT_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P2_HOLD, RW_LL_QE_HPNXT_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P1_HOLD, RW_LL_QE_HPNXT_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P1_HOLD, RW_LL_QE_HPNXT_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P3_V_F, RW_LL_QE_HPNXT_P3_V_F.actual)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P3_V_F, RW_LL_QE_HPNXT_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P2_V_F, RW_LL_QE_HPNXT_P2_V_F.actual)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P2_V_F, RW_LL_QE_HPNXT_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P1_V_F, RW_LL_QE_HPNXT_P1_V_F.actual)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P1_V_F, RW_LL_QE_HPNXT_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RW_LL_QE_HPNXT_P0_V_F, RW_LL_QE_HPNXT_P0_V_F.actual)
     `RAL_FIELD_CP_1(RW_LL_QE_HPNXT_P0_V_F, RW_LL_QE_HPNXT_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P3_HOLD, RMW_LL_TP_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_LL_TP_P3_HOLD, RMW_LL_TP_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P2_HOLD, RMW_LL_TP_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_LL_TP_P2_HOLD, RMW_LL_TP_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P1_HOLD, RMW_LL_TP_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_LL_TP_P1_HOLD, RMW_LL_TP_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P3_V_F, RMW_LL_TP_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_TP_P3_V_F, RMW_LL_TP_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P2_V_F, RMW_LL_TP_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_TP_P2_V_F, RMW_LL_TP_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P1_V_F, RMW_LL_TP_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_TP_P1_V_F, RMW_LL_TP_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_TP_P0_V_F, RMW_LL_TP_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_TP_P0_V_F, RMW_LL_TP_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P1_HOLD, RMW_LL_HP_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_LL_HP_P1_HOLD, RMW_LL_HP_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P2_HOLD, RMW_LL_HP_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_LL_HP_P2_HOLD, RMW_LL_HP_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P3_HOLD, RMW_LL_HP_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_LL_HP_P3_HOLD, RMW_LL_HP_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P0_V_F, RMW_LL_HP_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_HP_P0_V_F, RMW_LL_HP_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P1_V_F, RMW_LL_HP_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_HP_P1_V_F, RMW_LL_HP_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P2_V_F, RMW_LL_HP_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_HP_P2_V_F, RMW_LL_HP_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_HP_P3_V_F, RMW_LL_HP_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_HP_P3_V_F, RMW_LL_HP_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P1_HOLD, RMW_LL_CNT_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P1_HOLD, RMW_LL_CNT_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P2_HOLD, RMW_LL_CNT_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P2_HOLD, RMW_LL_CNT_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P3_HOLD, RMW_LL_CNT_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P3_HOLD, RMW_LL_CNT_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P0_V_F, RMW_LL_CNT_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P0_V_F, RMW_LL_CNT_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P1_V_F, RMW_LL_CNT_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P1_V_F, RMW_LL_CNT_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P2_V_F, RMW_LL_CNT_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P2_V_F, RMW_LL_CNT_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_LL_CNT_P3_V_F, RMW_LL_CNT_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_LL_CNT_P3_V_F, RMW_LL_CNT_P3_V_F.actual, 0)
     `RAL_FIELD_CP(FID_BCAM_NOTEMPTY, FID_BCAM_NOTEMPTY.actual)
     `RAL_FIELD_CP_1(FID_BCAM_NOTEMPTY, FID_BCAM_NOTEMPTY.actual, 0)
     `RAL_FIELD_CP(FL_EMPTY, FL_EMPTY.actual)
     `RAL_FIELD_CP_1(FL_EMPTY, FL_EMPTY.actual, 0)
     `RAL_FIELD_CP(FL_FULL, FL_FULL.actual)
     `RAL_FIELD_CP_1(FL_FULL, FL_FULL.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RW_LL_QE_HPNXT_P3_HOLD = new("RW_LL_QE_HPNXT_P3_HOLD", "RO/V", 1, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[0:0]"});
    RW_LL_QE_HPNXT_P3_HOLD.set_powerwell("vcccfn_gated");
    RW_LL_QE_HPNXT_P3_HOLD.set_rand_mode(0);
   RW_LL_QE_HPNXT_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RW_LL_QE_HPNXT_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RW_LL_QE_HPNXT_P3_HOLD ));

    RW_LL_QE_HPNXT_P2_HOLD = new("RW_LL_QE_HPNXT_P2_HOLD", "RO/V", 1, 1, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[1:1]"});
    RW_LL_QE_HPNXT_P2_HOLD.set_powerwell("vcccfn_gated");
    RW_LL_QE_HPNXT_P2_HOLD.set_rand_mode(0);
   RW_LL_QE_HPNXT_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RW_LL_QE_HPNXT_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RW_LL_QE_HPNXT_P2_HOLD ));

    RW_LL_QE_HPNXT_P1_HOLD = new("RW_LL_QE_HPNXT_P1_HOLD", "RO/V", 1, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[2:2]"});
    RW_LL_QE_HPNXT_P1_HOLD.set_powerwell("vcccfn_gated");
    RW_LL_QE_HPNXT_P1_HOLD.set_rand_mode(0);
   RW_LL_QE_HPNXT_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RW_LL_QE_HPNXT_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RW_LL_QE_HPNXT_P1_HOLD ));

    RW_LL_QE_HPNXT_P3_V_F = new("RW_LL_QE_HPNXT_P3_V_F", "RO/V", 1, 3, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[3:3]"});
    RW_LL_QE_HPNXT_P3_V_F.set_powerwell("vcccfn_gated");
    RW_LL_QE_HPNXT_P3_V_F.set_rand_mode(0);
   RW_LL_QE_HPNXT_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_LL_QE_HPNXT_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RW_LL_QE_HPNXT_P3_V_F ));

    RW_LL_QE_HPNXT_P2_V_F = new("RW_LL_QE_HPNXT_P2_V_F", "RO/V", 1, 4, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[4:4]"});
    RW_LL_QE_HPNXT_P2_V_F.set_powerwell("vcccfn_gated");
    RW_LL_QE_HPNXT_P2_V_F.set_rand_mode(0);
   RW_LL_QE_HPNXT_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_LL_QE_HPNXT_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RW_LL_QE_HPNXT_P2_V_F ));

    RW_LL_QE_HPNXT_P1_V_F = new("RW_LL_QE_HPNXT_P1_V_F", "RO/V", 1, 5, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[5:5]"});
    RW_LL_QE_HPNXT_P1_V_F.set_powerwell("vcccfn_gated");
    RW_LL_QE_HPNXT_P1_V_F.set_rand_mode(0);
   RW_LL_QE_HPNXT_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_LL_QE_HPNXT_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RW_LL_QE_HPNXT_P1_V_F ));

    RW_LL_QE_HPNXT_P0_V_F = new("RW_LL_QE_HPNXT_P0_V_F", "RO/V", 1, 6, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[6:6]"});
    RW_LL_QE_HPNXT_P0_V_F.set_powerwell("vcccfn_gated");
    RW_LL_QE_HPNXT_P0_V_F.set_rand_mode(0);
   RW_LL_QE_HPNXT_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_LL_QE_HPNXT_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RW_LL_QE_HPNXT_P0_V_F ));

    RMW_LL_TP_P3_HOLD = new("RMW_LL_TP_P3_HOLD", "RO/V", 1, 7, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[7:7]"});
    RMW_LL_TP_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_LL_TP_P3_HOLD.set_rand_mode(0);
   RMW_LL_TP_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_TP_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_LL_TP_P3_HOLD ));

    RMW_LL_TP_P2_HOLD = new("RMW_LL_TP_P2_HOLD", "RO/V", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[8:8]"});
    RMW_LL_TP_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_LL_TP_P2_HOLD.set_rand_mode(0);
   RMW_LL_TP_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_TP_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_LL_TP_P2_HOLD ));

    RMW_LL_TP_P1_HOLD = new("RMW_LL_TP_P1_HOLD", "RO/V", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[9:9]"});
    RMW_LL_TP_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_LL_TP_P1_HOLD.set_rand_mode(0);
   RMW_LL_TP_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_TP_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_LL_TP_P1_HOLD ));

    RMW_LL_TP_P3_V_F = new("RMW_LL_TP_P3_V_F", "RO/V", 1, 10, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[10:10]"});
    RMW_LL_TP_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_TP_P3_V_F.set_rand_mode(0);
   RMW_LL_TP_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_TP_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_TP_P3_V_F ));

    RMW_LL_TP_P2_V_F = new("RMW_LL_TP_P2_V_F", "RO/V", 1, 11, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[11:11]"});
    RMW_LL_TP_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_TP_P2_V_F.set_rand_mode(0);
   RMW_LL_TP_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_TP_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_TP_P2_V_F ));

    RMW_LL_TP_P1_V_F = new("RMW_LL_TP_P1_V_F", "RO/V", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[12:12]"});
    RMW_LL_TP_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_TP_P1_V_F.set_rand_mode(0);
   RMW_LL_TP_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_TP_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_TP_P1_V_F ));

    RMW_LL_TP_P0_V_F = new("RMW_LL_TP_P0_V_F", "RO/V", 1, 13, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[13:13]"});
    RMW_LL_TP_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_TP_P0_V_F.set_rand_mode(0);
   RMW_LL_TP_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_TP_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_TP_P0_V_F ));

    RMW_LL_HP_P1_HOLD = new("RMW_LL_HP_P1_HOLD", "RO/V", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[14:14]"});
    RMW_LL_HP_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_LL_HP_P1_HOLD.set_rand_mode(0);
   RMW_LL_HP_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_HP_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_LL_HP_P1_HOLD ));

    RMW_LL_HP_P2_HOLD = new("RMW_LL_HP_P2_HOLD", "RO/V", 1, 15, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[15:15]"});
    RMW_LL_HP_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_LL_HP_P2_HOLD.set_rand_mode(0);
   RMW_LL_HP_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_HP_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_LL_HP_P2_HOLD ));

    RMW_LL_HP_P3_HOLD = new("RMW_LL_HP_P3_HOLD", "RO/V", 1, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[16:16]"});
    RMW_LL_HP_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_LL_HP_P3_HOLD.set_rand_mode(0);
   RMW_LL_HP_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_HP_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_LL_HP_P3_HOLD ));

    RMW_LL_HP_P0_V_F = new("RMW_LL_HP_P0_V_F", "RO/V", 1, 17, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[17:17]"});
    RMW_LL_HP_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_HP_P0_V_F.set_rand_mode(0);
   RMW_LL_HP_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_HP_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_HP_P0_V_F ));

    RMW_LL_HP_P1_V_F = new("RMW_LL_HP_P1_V_F", "RO/V", 1, 18, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[18:18]"});
    RMW_LL_HP_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_HP_P1_V_F.set_rand_mode(0);
   RMW_LL_HP_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_HP_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_HP_P1_V_F ));

    RMW_LL_HP_P2_V_F = new("RMW_LL_HP_P2_V_F", "RO/V", 1, 19, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[19:19]"});
    RMW_LL_HP_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_HP_P2_V_F.set_rand_mode(0);
   RMW_LL_HP_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_HP_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_HP_P2_V_F ));

    RMW_LL_HP_P3_V_F = new("RMW_LL_HP_P3_V_F", "RO/V", 1, 20, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[20:20]"});
    RMW_LL_HP_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_HP_P3_V_F.set_rand_mode(0);
   RMW_LL_HP_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_HP_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_HP_P3_V_F ));

    RMW_LL_CNT_P1_HOLD = new("RMW_LL_CNT_P1_HOLD", "RO/V", 1, 21, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[21:21]"});
    RMW_LL_CNT_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_LL_CNT_P1_HOLD.set_rand_mode(0);
   RMW_LL_CNT_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_CNT_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_LL_CNT_P1_HOLD ));

    RMW_LL_CNT_P2_HOLD = new("RMW_LL_CNT_P2_HOLD", "RO/V", 1, 22, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[22:22]"});
    RMW_LL_CNT_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_LL_CNT_P2_HOLD.set_rand_mode(0);
   RMW_LL_CNT_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_CNT_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_LL_CNT_P2_HOLD ));

    RMW_LL_CNT_P3_HOLD = new("RMW_LL_CNT_P3_HOLD", "RO/V", 1, 23, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[23:23]"});
    RMW_LL_CNT_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_LL_CNT_P3_HOLD.set_rand_mode(0);
   RMW_LL_CNT_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_CNT_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_LL_CNT_P3_HOLD ));

    RMW_LL_CNT_P0_V_F = new("RMW_LL_CNT_P0_V_F", "RO/V", 1, 24, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[24:24]"});
    RMW_LL_CNT_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_CNT_P0_V_F.set_rand_mode(0);
   RMW_LL_CNT_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_CNT_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_CNT_P0_V_F ));

    RMW_LL_CNT_P1_V_F = new("RMW_LL_CNT_P1_V_F", "RO/V", 1, 25, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[25:25]"});
    RMW_LL_CNT_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_CNT_P1_V_F.set_rand_mode(0);
   RMW_LL_CNT_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_CNT_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_CNT_P1_V_F ));

    RMW_LL_CNT_P2_V_F = new("RMW_LL_CNT_P2_V_F", "RO/V", 1, 26, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[26:26]"});
    RMW_LL_CNT_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_CNT_P2_V_F.set_rand_mode(0);
   RMW_LL_CNT_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_CNT_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_CNT_P2_V_F ));

    RMW_LL_CNT_P3_V_F = new("RMW_LL_CNT_P3_V_F", "RO/V", 1, 27, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[27:27]"});
    RMW_LL_CNT_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_LL_CNT_P3_V_F.set_rand_mode(0);
   RMW_LL_CNT_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_LL_CNT_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_LL_CNT_P3_V_F ));

    FID_BCAM_NOTEMPTY = new("FID_BCAM_NOTEMPTY", "RO/V", 1, 28, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[28:28]"});
    FID_BCAM_NOTEMPTY.set_powerwell("vcccfn_gated");
    FID_BCAM_NOTEMPTY.set_rand_mode(0);
   FID_BCAM_NOTEMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FID_BCAM_NOTEMPTY.set_logical_path("HQMID");
    void'(add_field( FID_BCAM_NOTEMPTY ));

    FL_EMPTY = new("FL_EMPTY", "RO/V", 1, 29, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[29:29]"});
    FL_EMPTY.set_powerwell("vcccfn_gated");
    FL_EMPTY.set_rand_mode(0);
   FL_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FL_EMPTY.set_logical_path("HQMID");
    void'(add_field( FL_EMPTY ));

    FL_FULL = new("FL_FULL", "RO/V", 1, 30, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[30:30]"});
    FL_FULL.set_powerwell("vcccfn_gated");
    FL_FULL.set_rand_mode(0);
   FL_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FL_FULL.set_logical_path("HQMID");
    void'(add_field( FL_FULL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INT_STATUS150;
  sla_ral_field INT_STATUS;
  sla_ral_field RW_AQED_P3_HOLD;
  sla_ral_field RW_AQED_P2_HOLD;
  sla_ral_field RW_AQED_P1_HOLD;
  sla_ral_field RW_AQED_P3_V_F;
  sla_ral_field RW_AQED_P2_V_F;
  sla_ral_field RW_AQED_P1_V_F;
  sla_ral_field RW_AQED_P0_V_F;
  sla_ral_field SMON_ENABLED;
  sla_ral_field FIFO_QED_AQED_ENQ_FULL;
  sla_ral_field FIFO_AQED_AP_ENQ_AFULL;
  sla_ral_field FIFO_AQED_CHP_SCH_AFULL;
  sla_ral_field FIFO_FREELIST_RETURN_AFULL;
  sla_ral_field MF_STATUS;
  sla_ral_field ANY_CFG_INTERFACE_F;
  sla_ral_field ANY_CFG_PIPE_HEALTH_HOLD_F;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_STATUS150, INT_STATUS150.desired)
     `RAL_FIELD_CP_16(INT_STATUS150, INT_STATUS150.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(INT_STATUS, INT_STATUS.desired)
     `RAL_FIELD_CP_1(INT_STATUS, INT_STATUS.desired, 0)
     `RAL_FIELD_CP(RW_AQED_P3_HOLD, RW_AQED_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RW_AQED_P3_HOLD, RW_AQED_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RW_AQED_P2_HOLD, RW_AQED_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RW_AQED_P2_HOLD, RW_AQED_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RW_AQED_P1_HOLD, RW_AQED_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RW_AQED_P1_HOLD, RW_AQED_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RW_AQED_P3_V_F, RW_AQED_P3_V_F.desired)
     `RAL_FIELD_CP_1(RW_AQED_P3_V_F, RW_AQED_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RW_AQED_P2_V_F, RW_AQED_P2_V_F.desired)
     `RAL_FIELD_CP_1(RW_AQED_P2_V_F, RW_AQED_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RW_AQED_P1_V_F, RW_AQED_P1_V_F.desired)
     `RAL_FIELD_CP_1(RW_AQED_P1_V_F, RW_AQED_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RW_AQED_P0_V_F, RW_AQED_P0_V_F.desired)
     `RAL_FIELD_CP_1(RW_AQED_P0_V_F, RW_AQED_P0_V_F.desired, 0)
     `RAL_FIELD_CP(SMON_ENABLED, SMON_ENABLED.desired)
     `RAL_FIELD_CP_1(SMON_ENABLED, SMON_ENABLED.desired, 0)
     `RAL_FIELD_CP(FIFO_QED_AQED_ENQ_FULL, FIFO_QED_AQED_ENQ_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_QED_AQED_ENQ_FULL, FIFO_QED_AQED_ENQ_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_AQED_AP_ENQ_AFULL, FIFO_AQED_AP_ENQ_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AQED_AP_ENQ_AFULL, FIFO_AQED_AP_ENQ_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_AQED_CHP_SCH_AFULL, FIFO_AQED_CHP_SCH_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AQED_CHP_SCH_AFULL, FIFO_AQED_CHP_SCH_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FREELIST_RETURN_AFULL, FIFO_FREELIST_RETURN_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_FREELIST_RETURN_AFULL, FIFO_FREELIST_RETURN_AFULL.desired, 0)
     `RAL_FIELD_CP(MF_STATUS, MF_STATUS.desired)
     `RAL_FIELD_CP_1(MF_STATUS, MF_STATUS.desired, 0)
     `RAL_FIELD_CP(ANY_CFG_INTERFACE_F, ANY_CFG_INTERFACE_F.desired)
     `RAL_FIELD_CP_1(ANY_CFG_INTERFACE_F, ANY_CFG_INTERFACE_F.desired, 0)
     `RAL_FIELD_CP(ANY_CFG_PIPE_HEALTH_HOLD_F, ANY_CFG_PIPE_HEALTH_HOLD_F.desired)
     `RAL_FIELD_CP_1(ANY_CFG_PIPE_HEALTH_HOLD_F, ANY_CFG_PIPE_HEALTH_HOLD_F.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_STATUS150, INT_STATUS150.actual)
     `RAL_FIELD_CP_16(INT_STATUS150, INT_STATUS150.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(INT_STATUS, INT_STATUS.actual)
     `RAL_FIELD_CP_1(INT_STATUS, INT_STATUS.actual, 0)
     `RAL_FIELD_CP(RW_AQED_P3_HOLD, RW_AQED_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RW_AQED_P3_HOLD, RW_AQED_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RW_AQED_P2_HOLD, RW_AQED_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RW_AQED_P2_HOLD, RW_AQED_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RW_AQED_P1_HOLD, RW_AQED_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RW_AQED_P1_HOLD, RW_AQED_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RW_AQED_P3_V_F, RW_AQED_P3_V_F.actual)
     `RAL_FIELD_CP_1(RW_AQED_P3_V_F, RW_AQED_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RW_AQED_P2_V_F, RW_AQED_P2_V_F.actual)
     `RAL_FIELD_CP_1(RW_AQED_P2_V_F, RW_AQED_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RW_AQED_P1_V_F, RW_AQED_P1_V_F.actual)
     `RAL_FIELD_CP_1(RW_AQED_P1_V_F, RW_AQED_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RW_AQED_P0_V_F, RW_AQED_P0_V_F.actual)
     `RAL_FIELD_CP_1(RW_AQED_P0_V_F, RW_AQED_P0_V_F.actual, 0)
     `RAL_FIELD_CP(SMON_ENABLED, SMON_ENABLED.actual)
     `RAL_FIELD_CP_1(SMON_ENABLED, SMON_ENABLED.actual, 0)
     `RAL_FIELD_CP(FIFO_QED_AQED_ENQ_FULL, FIFO_QED_AQED_ENQ_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_QED_AQED_ENQ_FULL, FIFO_QED_AQED_ENQ_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_AQED_AP_ENQ_AFULL, FIFO_AQED_AP_ENQ_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AQED_AP_ENQ_AFULL, FIFO_AQED_AP_ENQ_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_AQED_CHP_SCH_AFULL, FIFO_AQED_CHP_SCH_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AQED_CHP_SCH_AFULL, FIFO_AQED_CHP_SCH_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FREELIST_RETURN_AFULL, FIFO_FREELIST_RETURN_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_FREELIST_RETURN_AFULL, FIFO_FREELIST_RETURN_AFULL.actual, 0)
     `RAL_FIELD_CP(MF_STATUS, MF_STATUS.actual)
     `RAL_FIELD_CP_1(MF_STATUS, MF_STATUS.actual, 0)
     `RAL_FIELD_CP(ANY_CFG_INTERFACE_F, ANY_CFG_INTERFACE_F.actual)
     `RAL_FIELD_CP_1(ANY_CFG_INTERFACE_F, ANY_CFG_INTERFACE_F.actual, 0)
     `RAL_FIELD_CP(ANY_CFG_PIPE_HEALTH_HOLD_F, ANY_CFG_PIPE_HEALTH_HOLD_F.actual)
     `RAL_FIELD_CP_1(ANY_CFG_PIPE_HEALTH_HOLD_F, ANY_CFG_PIPE_HEALTH_HOLD_F.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INT_STATUS150 = new("INT_STATUS150", "RO/V", 16, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[15:0]"});
    INT_STATUS150.set_powerwell("vcccfn_gated");
    INT_STATUS150.set_rand_mode(0);
   INT_STATUS150.set_reset_signame("hqm_inp_gated_rst_n");
    INT_STATUS150.set_logical_path("HQMID");
    void'(add_field( INT_STATUS150 ));

    INT_STATUS = new("INT_STATUS", "RO/V", 1, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[16:16]"});
    INT_STATUS.set_powerwell("vcccfn_gated");
    INT_STATUS.set_rand_mode(0);
   INT_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_STATUS.set_logical_path("HQMID");
    void'(add_field( INT_STATUS ));

    RW_AQED_P3_HOLD = new("RW_AQED_P3_HOLD", "RO/V", 1, 17, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[17:17]"});
    RW_AQED_P3_HOLD.set_powerwell("vcccfn_gated");
    RW_AQED_P3_HOLD.set_rand_mode(0);
   RW_AQED_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RW_AQED_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RW_AQED_P3_HOLD ));

    RW_AQED_P2_HOLD = new("RW_AQED_P2_HOLD", "RO/V", 1, 18, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[18:18]"});
    RW_AQED_P2_HOLD.set_powerwell("vcccfn_gated");
    RW_AQED_P2_HOLD.set_rand_mode(0);
   RW_AQED_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RW_AQED_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RW_AQED_P2_HOLD ));

    RW_AQED_P1_HOLD = new("RW_AQED_P1_HOLD", "RO/V", 1, 19, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[19:19]"});
    RW_AQED_P1_HOLD.set_powerwell("vcccfn_gated");
    RW_AQED_P1_HOLD.set_rand_mode(0);
   RW_AQED_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RW_AQED_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RW_AQED_P1_HOLD ));

    RW_AQED_P3_V_F = new("RW_AQED_P3_V_F", "RO/V", 1, 20, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[20:20]"});
    RW_AQED_P3_V_F.set_powerwell("vcccfn_gated");
    RW_AQED_P3_V_F.set_rand_mode(0);
   RW_AQED_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_AQED_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RW_AQED_P3_V_F ));

    RW_AQED_P2_V_F = new("RW_AQED_P2_V_F", "RO/V", 1, 21, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[21:21]"});
    RW_AQED_P2_V_F.set_powerwell("vcccfn_gated");
    RW_AQED_P2_V_F.set_rand_mode(0);
   RW_AQED_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_AQED_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RW_AQED_P2_V_F ));

    RW_AQED_P1_V_F = new("RW_AQED_P1_V_F", "RO/V", 1, 22, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[22:22]"});
    RW_AQED_P1_V_F.set_powerwell("vcccfn_gated");
    RW_AQED_P1_V_F.set_rand_mode(0);
   RW_AQED_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_AQED_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RW_AQED_P1_V_F ));

    RW_AQED_P0_V_F = new("RW_AQED_P0_V_F", "RO/V", 1, 23, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[23:23]"});
    RW_AQED_P0_V_F.set_powerwell("vcccfn_gated");
    RW_AQED_P0_V_F.set_rand_mode(0);
   RW_AQED_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_AQED_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RW_AQED_P0_V_F ));

    SMON_ENABLED = new("SMON_ENABLED", "RO/V", 1, 24, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[24:24]"});
    SMON_ENABLED.set_powerwell("vcccfn_gated");
    SMON_ENABLED.set_rand_mode(0);
   SMON_ENABLED.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_ENABLED.set_logical_path("HQMID");
    void'(add_field( SMON_ENABLED ));

    FIFO_QED_AQED_ENQ_FULL = new("FIFO_QED_AQED_ENQ_FULL", "RO/V", 1, 25, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[25:25]"});
    FIFO_QED_AQED_ENQ_FULL.set_powerwell("vcccfn_gated");
    FIFO_QED_AQED_ENQ_FULL.set_rand_mode(0);
   FIFO_QED_AQED_ENQ_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_QED_AQED_ENQ_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_QED_AQED_ENQ_FULL ));

    FIFO_AQED_AP_ENQ_AFULL = new("FIFO_AQED_AP_ENQ_AFULL", "RO/V", 1, 26, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[26:26]"});
    FIFO_AQED_AP_ENQ_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AQED_AP_ENQ_AFULL.set_rand_mode(0);
   FIFO_AQED_AP_ENQ_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AQED_AP_ENQ_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AQED_AP_ENQ_AFULL ));

    FIFO_AQED_CHP_SCH_AFULL = new("FIFO_AQED_CHP_SCH_AFULL", "RO/V", 1, 27, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[27:27]"});
    FIFO_AQED_CHP_SCH_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AQED_CHP_SCH_AFULL.set_rand_mode(0);
   FIFO_AQED_CHP_SCH_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AQED_CHP_SCH_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AQED_CHP_SCH_AFULL ));

    FIFO_FREELIST_RETURN_AFULL = new("FIFO_FREELIST_RETURN_AFULL", "RO/V", 1, 28, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[28:28]"});
    FIFO_FREELIST_RETURN_AFULL.set_powerwell("vcccfn_gated");
    FIFO_FREELIST_RETURN_AFULL.set_rand_mode(0);
   FIFO_FREELIST_RETURN_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FREELIST_RETURN_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FREELIST_RETURN_AFULL ));

    MF_STATUS = new("MF_STATUS", "RO/V", 1, 29, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[29:29]"});
    MF_STATUS.set_powerwell("vcccfn_gated");
    MF_STATUS.set_rand_mode(0);
   MF_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    MF_STATUS.set_logical_path("HQMID");
    void'(add_field( MF_STATUS ));

    ANY_CFG_INTERFACE_F = new("ANY_CFG_INTERFACE_F", "RO/V", 1, 30, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[30:30]"});
    ANY_CFG_INTERFACE_F.set_powerwell("vcccfn_gated");
    ANY_CFG_INTERFACE_F.set_rand_mode(0);
   ANY_CFG_INTERFACE_F.set_reset_signame("hqm_inp_gated_rst_n");
    ANY_CFG_INTERFACE_F.set_logical_path("HQMID");
    void'(add_field( ANY_CFG_INTERFACE_F ));

    ANY_CFG_PIPE_HEALTH_HOLD_F = new("ANY_CFG_PIPE_HEALTH_HOLD_F", "RO/V", 1, 31, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[31:31]"});
    ANY_CFG_PIPE_HEALTH_HOLD_F.set_powerwell("vcccfn_gated");
    ANY_CFG_PIPE_HEALTH_HOLD_F.set_rand_mode(0);
   ANY_CFG_PIPE_HEALTH_HOLD_F.set_reset_signame("hqm_inp_gated_rst_n");
    ANY_CFG_PIPE_HEALTH_HOLD_F.set_logical_path("HQMID");
    void'(add_field( ANY_CFG_PIPE_HEALTH_HOLD_F ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field STATUS;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(STATUS, STATUS.desired)
     `RAL_FIELD_CP_16(STATUS, STATUS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(STATUS, STATUS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(STATUS, STATUS.actual)
     `RAL_FIELD_CP_16(STATUS, STATUS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(STATUS, STATUS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    STATUS = new("STATUS", "RO/V", 32, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_02.status[31:0]"});
    STATUS.set_powerwell("vcccfn_gated");
    STATUS.set_rand_mode(0);
   STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    STATUS.set_logical_path("HQMID");
    void'(add_field( STATUS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_ERROR_INJECT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FLID_0;
  sla_ral_field FLID_1;
  sla_ral_field AP_AQED_0;
  sla_ral_field QED_AQED_0;
  sla_ral_field AP_AQED_1;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_ERROR_INJECT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FLID_0, FLID_0.desired)
     `RAL_FIELD_CP_1(FLID_0, FLID_0.desired, 0)
     `RAL_FIELD_CP(FLID_1, FLID_1.desired)
     `RAL_FIELD_CP_1(FLID_1, FLID_1.desired, 0)
     `RAL_FIELD_CP(AP_AQED_0, AP_AQED_0.desired)
     `RAL_FIELD_CP_1(AP_AQED_0, AP_AQED_0.desired, 0)
     `RAL_FIELD_CP(QED_AQED_0, QED_AQED_0.desired)
     `RAL_FIELD_CP_1(QED_AQED_0, QED_AQED_0.desired, 0)
     `RAL_FIELD_CP(AP_AQED_1, AP_AQED_1.desired)
     `RAL_FIELD_CP_1(AP_AQED_1, AP_AQED_1.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_11(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FLID_0, FLID_0.actual)
     `RAL_FIELD_CP_1(FLID_0, FLID_0.actual, 0)
     `RAL_FIELD_CP(FLID_1, FLID_1.actual)
     `RAL_FIELD_CP_1(FLID_1, FLID_1.actual, 0)
     `RAL_FIELD_CP(AP_AQED_0, AP_AQED_0.actual)
     `RAL_FIELD_CP_1(AP_AQED_0, AP_AQED_0.actual, 0)
     `RAL_FIELD_CP(QED_AQED_0, QED_AQED_0.actual)
     `RAL_FIELD_CP_1(QED_AQED_0, QED_AQED_0.actual, 0)
     `RAL_FIELD_CP(AP_AQED_1, AP_AQED_1.actual)
     `RAL_FIELD_CP_1(AP_AQED_1, AP_AQED_1.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_11(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FLID_0 = new("FLID_0", "RW", 1, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[0:0]"});
    FLID_0.set_powerwell("vcccfn_gated");
    FLID_0.set_rand_mode(0);
   FLID_0.set_reset_signame("hqm_inp_gated_rst_n");
    FLID_0.set_logical_path("HQMID");
    void'(add_field( FLID_0 ));

    FLID_1 = new("FLID_1", "RW", 1, 1, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[1:1]"});
    FLID_1.set_powerwell("vcccfn_gated");
    FLID_1.set_rand_mode(0);
   FLID_1.set_reset_signame("hqm_inp_gated_rst_n");
    FLID_1.set_logical_path("HQMID");
    void'(add_field( FLID_1 ));

    AP_AQED_0 = new("AP_AQED_0", "RW", 1, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[2:2]"});
    AP_AQED_0.set_powerwell("vcccfn_gated");
    AP_AQED_0.set_rand_mode(0);
   AP_AQED_0.set_reset_signame("hqm_inp_gated_rst_n");
    AP_AQED_0.set_logical_path("HQMID");
    void'(add_field( AP_AQED_0 ));

    QED_AQED_0 = new("QED_AQED_0", "RW", 1, 3, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[3:3]"});
    QED_AQED_0.set_powerwell("vcccfn_gated");
    QED_AQED_0.set_rand_mode(0);
   QED_AQED_0.set_reset_signame("hqm_inp_gated_rst_n");
    QED_AQED_0.set_logical_path("HQMID");
    void'(add_field( QED_AQED_0 ));

    AP_AQED_1 = new("AP_AQED_1", "RW", 1, 4, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[4:4]"});
    AP_AQED_1.set_powerwell("vcccfn_gated");
    AP_AQED_1.set_rand_mode(0);
   AP_AQED_1.set_reset_signame("hqm_inp_gated_rst_n");
    AP_AQED_1.set_logical_path("HQMID");
    void'(add_field( AP_AQED_1 ));

    RSVZ0 = new("RSVZ0", "RW", 27, 5, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[31:5]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_ERROR_INJECT_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_ERROR_INJECT_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AP_AQED_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AP_AQED_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AP_AQED_IF_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AP_AQED_IF_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_FREELIST_RETURN_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_FREELIST_RETURN_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_FREELIST_RETURN_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_FREELIST_RETURN_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field DUTY;
  sla_ral_field PERIOD;
  sla_ral_field PROB1ST;
  sla_ral_field PROB2ND;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(DUTY, DUTY.desired)
     `RAL_FIELD_CP_3(DUTY, DUTY.desired, 0,1,2)
     `RAL_FIELD_CP(PERIOD, PERIOD.desired)
     `RAL_FIELD_CP_11(PERIOD, PERIOD.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(PROB1ST, PROB1ST.desired)
     `RAL_FIELD_CP_8(PROB1ST, PROB1ST.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PROB2ND, PROB2ND.desired)
     `RAL_FIELD_CP_8(PROB2ND, PROB2ND.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(DUTY, DUTY.actual)
     `RAL_FIELD_CP_3(DUTY, DUTY.actual, 0,1,2)
     `RAL_FIELD_CP(PERIOD, PERIOD.actual)
     `RAL_FIELD_CP_11(PERIOD, PERIOD.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(PROB1ST, PROB1ST.actual)
     `RAL_FIELD_CP_8(PROB1ST, PROB1ST.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PROB2ND, PROB2ND.actual)
     `RAL_FIELD_CP_8(PROB2ND, PROB2ND.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_control.internal_f[1:0]"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    DUTY = new("DUTY", "RW", 3, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_control.internal_f[4:2]"});
    DUTY.set_powerwell("vcccfn_gated");
    DUTY.set_rand_mode(0);
   DUTY.set_reset_signame("hqm_inp_gated_rst_n");
    DUTY.set_logical_path("HQMID");
    void'(add_field( DUTY ));

    PERIOD = new("PERIOD", "RW", 11, 5, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_control.internal_f[15:5]"});
    PERIOD.set_powerwell("vcccfn_gated");
    PERIOD.set_rand_mode(0);
   PERIOD.set_reset_signame("hqm_inp_gated_rst_n");
    PERIOD.set_logical_path("HQMID");
    void'(add_field( PERIOD ));

    PROB1ST = new("PROB1ST", "RW", 8, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_control.internal_f[23:16]"});
    PROB1ST.set_powerwell("vcccfn_gated");
    PROB1ST.set_rand_mode(0);
   PROB1ST.set_reset_signame("hqm_inp_gated_rst_n");
    PROB1ST.set_logical_path("HQMID");
    void'(add_field( PROB1ST ));

    PROB2ND = new("PROB2ND", "RW", 8, 24, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_control.internal_f[31:24]"});
    PROB2ND.set_powerwell("vcccfn_gated");
    PROB2ND.set_rand_mode(0);
   PROB2ND.set_reset_signame("hqm_inp_gated_rst_n");
    PROB2ND.set_logical_path("HQMID");
    void'(add_field( PROB2ND ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_HW_AGITATE_SELECT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field AGG_IF_00;
  sla_ral_field AGG_IF_01;
  sla_ral_field AGG_IF_02;
  sla_ral_field AGG_IF_03;
  sla_ral_field AGG_IF_04;
  sla_ral_field AGG_IF_05;
  sla_ral_field AGG_IF_06;
  sla_ral_field AGG_IF_07;
  sla_ral_field AGG_IF_08;
  sla_ral_field AGG_IF_09;
  sla_ral_field AGG_IF_10;
  sla_ral_field AGG_IF_11;
  sla_ral_field AGG_IF_12;
  sla_ral_field AGG_IF_13;
  sla_ral_field AGG_IF_14;
  sla_ral_field AGG_IF_15;
  sla_ral_field RSVZ;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_HW_AGITATE_SELECT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AGG_IF_00, AGG_IF_00.desired)
     `RAL_FIELD_CP_1(AGG_IF_00, AGG_IF_00.desired, 0)
     `RAL_FIELD_CP(AGG_IF_01, AGG_IF_01.desired)
     `RAL_FIELD_CP_1(AGG_IF_01, AGG_IF_01.desired, 0)
     `RAL_FIELD_CP(AGG_IF_02, AGG_IF_02.desired)
     `RAL_FIELD_CP_1(AGG_IF_02, AGG_IF_02.desired, 0)
     `RAL_FIELD_CP(AGG_IF_03, AGG_IF_03.desired)
     `RAL_FIELD_CP_1(AGG_IF_03, AGG_IF_03.desired, 0)
     `RAL_FIELD_CP(AGG_IF_04, AGG_IF_04.desired)
     `RAL_FIELD_CP_1(AGG_IF_04, AGG_IF_04.desired, 0)
     `RAL_FIELD_CP(AGG_IF_05, AGG_IF_05.desired)
     `RAL_FIELD_CP_1(AGG_IF_05, AGG_IF_05.desired, 0)
     `RAL_FIELD_CP(AGG_IF_06, AGG_IF_06.desired)
     `RAL_FIELD_CP_1(AGG_IF_06, AGG_IF_06.desired, 0)
     `RAL_FIELD_CP(AGG_IF_07, AGG_IF_07.desired)
     `RAL_FIELD_CP_1(AGG_IF_07, AGG_IF_07.desired, 0)
     `RAL_FIELD_CP(AGG_IF_08, AGG_IF_08.desired)
     `RAL_FIELD_CP_1(AGG_IF_08, AGG_IF_08.desired, 0)
     `RAL_FIELD_CP(AGG_IF_09, AGG_IF_09.desired)
     `RAL_FIELD_CP_1(AGG_IF_09, AGG_IF_09.desired, 0)
     `RAL_FIELD_CP(AGG_IF_10, AGG_IF_10.desired)
     `RAL_FIELD_CP_1(AGG_IF_10, AGG_IF_10.desired, 0)
     `RAL_FIELD_CP(AGG_IF_11, AGG_IF_11.desired)
     `RAL_FIELD_CP_1(AGG_IF_11, AGG_IF_11.desired, 0)
     `RAL_FIELD_CP(AGG_IF_12, AGG_IF_12.desired)
     `RAL_FIELD_CP_1(AGG_IF_12, AGG_IF_12.desired, 0)
     `RAL_FIELD_CP(AGG_IF_13, AGG_IF_13.desired)
     `RAL_FIELD_CP_1(AGG_IF_13, AGG_IF_13.desired, 0)
     `RAL_FIELD_CP(AGG_IF_14, AGG_IF_14.desired)
     `RAL_FIELD_CP_1(AGG_IF_14, AGG_IF_14.desired, 0)
     `RAL_FIELD_CP(AGG_IF_15, AGG_IF_15.desired)
     `RAL_FIELD_CP_1(AGG_IF_15, AGG_IF_15.desired, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.desired)
     `RAL_FIELD_CP_16(RSVZ, RSVZ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AGG_IF_00, AGG_IF_00.actual)
     `RAL_FIELD_CP_1(AGG_IF_00, AGG_IF_00.actual, 0)
     `RAL_FIELD_CP(AGG_IF_01, AGG_IF_01.actual)
     `RAL_FIELD_CP_1(AGG_IF_01, AGG_IF_01.actual, 0)
     `RAL_FIELD_CP(AGG_IF_02, AGG_IF_02.actual)
     `RAL_FIELD_CP_1(AGG_IF_02, AGG_IF_02.actual, 0)
     `RAL_FIELD_CP(AGG_IF_03, AGG_IF_03.actual)
     `RAL_FIELD_CP_1(AGG_IF_03, AGG_IF_03.actual, 0)
     `RAL_FIELD_CP(AGG_IF_04, AGG_IF_04.actual)
     `RAL_FIELD_CP_1(AGG_IF_04, AGG_IF_04.actual, 0)
     `RAL_FIELD_CP(AGG_IF_05, AGG_IF_05.actual)
     `RAL_FIELD_CP_1(AGG_IF_05, AGG_IF_05.actual, 0)
     `RAL_FIELD_CP(AGG_IF_06, AGG_IF_06.actual)
     `RAL_FIELD_CP_1(AGG_IF_06, AGG_IF_06.actual, 0)
     `RAL_FIELD_CP(AGG_IF_07, AGG_IF_07.actual)
     `RAL_FIELD_CP_1(AGG_IF_07, AGG_IF_07.actual, 0)
     `RAL_FIELD_CP(AGG_IF_08, AGG_IF_08.actual)
     `RAL_FIELD_CP_1(AGG_IF_08, AGG_IF_08.actual, 0)
     `RAL_FIELD_CP(AGG_IF_09, AGG_IF_09.actual)
     `RAL_FIELD_CP_1(AGG_IF_09, AGG_IF_09.actual, 0)
     `RAL_FIELD_CP(AGG_IF_10, AGG_IF_10.actual)
     `RAL_FIELD_CP_1(AGG_IF_10, AGG_IF_10.actual, 0)
     `RAL_FIELD_CP(AGG_IF_11, AGG_IF_11.actual)
     `RAL_FIELD_CP_1(AGG_IF_11, AGG_IF_11.actual, 0)
     `RAL_FIELD_CP(AGG_IF_12, AGG_IF_12.actual)
     `RAL_FIELD_CP_1(AGG_IF_12, AGG_IF_12.actual, 0)
     `RAL_FIELD_CP(AGG_IF_13, AGG_IF_13.actual)
     `RAL_FIELD_CP_1(AGG_IF_13, AGG_IF_13.actual, 0)
     `RAL_FIELD_CP(AGG_IF_14, AGG_IF_14.actual)
     `RAL_FIELD_CP_1(AGG_IF_14, AGG_IF_14.actual, 0)
     `RAL_FIELD_CP(AGG_IF_15, AGG_IF_15.actual)
     `RAL_FIELD_CP_1(AGG_IF_15, AGG_IF_15.actual, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.actual)
     `RAL_FIELD_CP_16(RSVZ, RSVZ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    AGG_IF_00 = new("AGG_IF_00", "RW", 1, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[0:0]"});
    AGG_IF_00.set_powerwell("vcccfn_gated");
    AGG_IF_00.set_rand_mode(0);
   AGG_IF_00.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_00.set_logical_path("HQMID");
    void'(add_field( AGG_IF_00 ));

    AGG_IF_01 = new("AGG_IF_01", "RW", 1, 1, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[1:1]"});
    AGG_IF_01.set_powerwell("vcccfn_gated");
    AGG_IF_01.set_rand_mode(0);
   AGG_IF_01.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_01.set_logical_path("HQMID");
    void'(add_field( AGG_IF_01 ));

    AGG_IF_02 = new("AGG_IF_02", "RW", 1, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[2:2]"});
    AGG_IF_02.set_powerwell("vcccfn_gated");
    AGG_IF_02.set_rand_mode(0);
   AGG_IF_02.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_02.set_logical_path("HQMID");
    void'(add_field( AGG_IF_02 ));

    AGG_IF_03 = new("AGG_IF_03", "RW", 1, 3, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[3:3]"});
    AGG_IF_03.set_powerwell("vcccfn_gated");
    AGG_IF_03.set_rand_mode(0);
   AGG_IF_03.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_03.set_logical_path("HQMID");
    void'(add_field( AGG_IF_03 ));

    AGG_IF_04 = new("AGG_IF_04", "RW", 1, 4, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[4:4]"});
    AGG_IF_04.set_powerwell("vcccfn_gated");
    AGG_IF_04.set_rand_mode(0);
   AGG_IF_04.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_04.set_logical_path("HQMID");
    void'(add_field( AGG_IF_04 ));

    AGG_IF_05 = new("AGG_IF_05", "RW", 1, 5, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[5:5]"});
    AGG_IF_05.set_powerwell("vcccfn_gated");
    AGG_IF_05.set_rand_mode(0);
   AGG_IF_05.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_05.set_logical_path("HQMID");
    void'(add_field( AGG_IF_05 ));

    AGG_IF_06 = new("AGG_IF_06", "RW", 1, 6, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[6:6]"});
    AGG_IF_06.set_powerwell("vcccfn_gated");
    AGG_IF_06.set_rand_mode(0);
   AGG_IF_06.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_06.set_logical_path("HQMID");
    void'(add_field( AGG_IF_06 ));

    AGG_IF_07 = new("AGG_IF_07", "RW", 1, 7, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[7:7]"});
    AGG_IF_07.set_powerwell("vcccfn_gated");
    AGG_IF_07.set_rand_mode(0);
   AGG_IF_07.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_07.set_logical_path("HQMID");
    void'(add_field( AGG_IF_07 ));

    AGG_IF_08 = new("AGG_IF_08", "RW", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[8:8]"});
    AGG_IF_08.set_powerwell("vcccfn_gated");
    AGG_IF_08.set_rand_mode(0);
   AGG_IF_08.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_08.set_logical_path("HQMID");
    void'(add_field( AGG_IF_08 ));

    AGG_IF_09 = new("AGG_IF_09", "RW", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[9:9]"});
    AGG_IF_09.set_powerwell("vcccfn_gated");
    AGG_IF_09.set_rand_mode(0);
   AGG_IF_09.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_09.set_logical_path("HQMID");
    void'(add_field( AGG_IF_09 ));

    AGG_IF_10 = new("AGG_IF_10", "RW", 1, 10, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[10:10]"});
    AGG_IF_10.set_powerwell("vcccfn_gated");
    AGG_IF_10.set_rand_mode(0);
   AGG_IF_10.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_10.set_logical_path("HQMID");
    void'(add_field( AGG_IF_10 ));

    AGG_IF_11 = new("AGG_IF_11", "RW", 1, 11, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[11:11]"});
    AGG_IF_11.set_powerwell("vcccfn_gated");
    AGG_IF_11.set_rand_mode(0);
   AGG_IF_11.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_11.set_logical_path("HQMID");
    void'(add_field( AGG_IF_11 ));

    AGG_IF_12 = new("AGG_IF_12", "RW", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[12:12]"});
    AGG_IF_12.set_powerwell("vcccfn_gated");
    AGG_IF_12.set_rand_mode(0);
   AGG_IF_12.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_12.set_logical_path("HQMID");
    void'(add_field( AGG_IF_12 ));

    AGG_IF_13 = new("AGG_IF_13", "RW", 1, 13, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[13:13]"});
    AGG_IF_13.set_powerwell("vcccfn_gated");
    AGG_IF_13.set_rand_mode(0);
   AGG_IF_13.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_13.set_logical_path("HQMID");
    void'(add_field( AGG_IF_13 ));

    AGG_IF_14 = new("AGG_IF_14", "RW", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[14:14]"});
    AGG_IF_14.set_powerwell("vcccfn_gated");
    AGG_IF_14.set_rand_mode(0);
   AGG_IF_14.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_14.set_logical_path("HQMID");
    void'(add_field( AGG_IF_14 ));

    AGG_IF_15 = new("AGG_IF_15", "RW", 1, 15, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[15:15]"});
    AGG_IF_15.set_powerwell("vcccfn_gated");
    AGG_IF_15.set_rand_mode(0);
   AGG_IF_15.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_15.set_logical_path("HQMID");
    void'(add_field( AGG_IF_15 ));

    RSVZ = new("RSVZ", "RW", 16, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[31:16]"});
    RSVZ.set_powerwell("vcccfn_gated");
    RSVZ.set_rand_mode(0);
   RSVZ.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ.set_logical_path("HQMID");
    void'(add_field( RSVZ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_HW_AGITATE_SELECT_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_HW_AGITATE_SELECT_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_INTERFACE_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DB_AQED_LSP_SCH_STATUS_DEPTH;
  sla_ral_field DB_AQED_LSP_SCH_STATUS_READY;
  sla_ral_field DB_AQED_CHP_SCH_STATUS_DEPTH;
  sla_ral_field DB_AQED_CHP_SCH_STATUS_READY;
  sla_ral_field DB_AQED_AP_ENQ_STATUS_DEPTH;
  sla_ral_field DB_AQED_AP_ENQ_STATUS_READY;
  sla_ral_field DB_QED_AQED_ENQ_STATUS_DEPTH;
  sla_ral_field DB_QED_AQED_ENQ_STATUS_READY;
  sla_ral_field DB_AP_AQED_STATUS_DEPTH;
  sla_ral_field DB_AP_AQED_STATUS_READY;
  sla_ral_field DB_LSP_AQED_STATUS_DEPTH;
  sla_ral_field DB_LSP_AQED_STATUS_READY;
  sla_ral_field FIFO_LSP_AQED_CMP_EMPTY;
  sla_ral_field FIFO_QED_AQED_ENQ_FID_EMPTY;
  sla_ral_field FIFO_AQED_CHP_SCH_EMPTY;
  sla_ral_field FIFO_AP_AQED_EMPTY;
  sla_ral_field FIFO_AQED_AP_ENQ_EMPTY;
  sla_ral_field FIFO_QED_AQED_ENQ_EMPTY;
  sla_ral_field FIFO_FREELIST_RETURN_EMPTY;
  sla_ral_field AQED_CLK_IDLE;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_INTERFACE_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DB_AQED_LSP_SCH_STATUS_DEPTH, DB_AQED_LSP_SCH_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_AQED_LSP_SCH_STATUS_DEPTH, DB_AQED_LSP_SCH_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_AQED_LSP_SCH_STATUS_READY, DB_AQED_LSP_SCH_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_AQED_LSP_SCH_STATUS_READY, DB_AQED_LSP_SCH_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(DB_AQED_CHP_SCH_STATUS_DEPTH, DB_AQED_CHP_SCH_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_AQED_CHP_SCH_STATUS_DEPTH, DB_AQED_CHP_SCH_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_AQED_CHP_SCH_STATUS_READY, DB_AQED_CHP_SCH_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_AQED_CHP_SCH_STATUS_READY, DB_AQED_CHP_SCH_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(DB_AQED_AP_ENQ_STATUS_DEPTH, DB_AQED_AP_ENQ_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_AQED_AP_ENQ_STATUS_DEPTH, DB_AQED_AP_ENQ_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_AQED_AP_ENQ_STATUS_READY, DB_AQED_AP_ENQ_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_AQED_AP_ENQ_STATUS_READY, DB_AQED_AP_ENQ_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(DB_QED_AQED_ENQ_STATUS_DEPTH, DB_QED_AQED_ENQ_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_QED_AQED_ENQ_STATUS_DEPTH, DB_QED_AQED_ENQ_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_QED_AQED_ENQ_STATUS_READY, DB_QED_AQED_ENQ_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_QED_AQED_ENQ_STATUS_READY, DB_QED_AQED_ENQ_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(DB_AP_AQED_STATUS_DEPTH, DB_AP_AQED_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_AP_AQED_STATUS_DEPTH, DB_AP_AQED_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_AP_AQED_STATUS_READY, DB_AP_AQED_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_AP_AQED_STATUS_READY, DB_AP_AQED_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(DB_LSP_AQED_STATUS_DEPTH, DB_LSP_AQED_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_LSP_AQED_STATUS_DEPTH, DB_LSP_AQED_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_LSP_AQED_STATUS_READY, DB_LSP_AQED_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_LSP_AQED_STATUS_READY, DB_LSP_AQED_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(FIFO_LSP_AQED_CMP_EMPTY, FIFO_LSP_AQED_CMP_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_LSP_AQED_CMP_EMPTY, FIFO_LSP_AQED_CMP_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_QED_AQED_ENQ_FID_EMPTY, FIFO_QED_AQED_ENQ_FID_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_QED_AQED_ENQ_FID_EMPTY, FIFO_QED_AQED_ENQ_FID_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AQED_CHP_SCH_EMPTY, FIFO_AQED_CHP_SCH_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_AQED_CHP_SCH_EMPTY, FIFO_AQED_CHP_SCH_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AP_AQED_EMPTY, FIFO_AP_AQED_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_AP_AQED_EMPTY, FIFO_AP_AQED_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AQED_AP_ENQ_EMPTY, FIFO_AQED_AP_ENQ_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_AQED_AP_ENQ_EMPTY, FIFO_AQED_AP_ENQ_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_QED_AQED_ENQ_EMPTY, FIFO_QED_AQED_ENQ_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_QED_AQED_ENQ_EMPTY, FIFO_QED_AQED_ENQ_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_FREELIST_RETURN_EMPTY, FIFO_FREELIST_RETURN_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_FREELIST_RETURN_EMPTY, FIFO_FREELIST_RETURN_EMPTY.desired, 0)
     `RAL_FIELD_CP(AQED_CLK_IDLE, AQED_CLK_IDLE.desired)
     `RAL_FIELD_CP_1(AQED_CLK_IDLE, AQED_CLK_IDLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DB_AQED_LSP_SCH_STATUS_DEPTH, DB_AQED_LSP_SCH_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_AQED_LSP_SCH_STATUS_DEPTH, DB_AQED_LSP_SCH_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_AQED_LSP_SCH_STATUS_READY, DB_AQED_LSP_SCH_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_AQED_LSP_SCH_STATUS_READY, DB_AQED_LSP_SCH_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(DB_AQED_CHP_SCH_STATUS_DEPTH, DB_AQED_CHP_SCH_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_AQED_CHP_SCH_STATUS_DEPTH, DB_AQED_CHP_SCH_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_AQED_CHP_SCH_STATUS_READY, DB_AQED_CHP_SCH_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_AQED_CHP_SCH_STATUS_READY, DB_AQED_CHP_SCH_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(DB_AQED_AP_ENQ_STATUS_DEPTH, DB_AQED_AP_ENQ_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_AQED_AP_ENQ_STATUS_DEPTH, DB_AQED_AP_ENQ_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_AQED_AP_ENQ_STATUS_READY, DB_AQED_AP_ENQ_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_AQED_AP_ENQ_STATUS_READY, DB_AQED_AP_ENQ_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(DB_QED_AQED_ENQ_STATUS_DEPTH, DB_QED_AQED_ENQ_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_QED_AQED_ENQ_STATUS_DEPTH, DB_QED_AQED_ENQ_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_QED_AQED_ENQ_STATUS_READY, DB_QED_AQED_ENQ_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_QED_AQED_ENQ_STATUS_READY, DB_QED_AQED_ENQ_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(DB_AP_AQED_STATUS_DEPTH, DB_AP_AQED_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_AP_AQED_STATUS_DEPTH, DB_AP_AQED_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_AP_AQED_STATUS_READY, DB_AP_AQED_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_AP_AQED_STATUS_READY, DB_AP_AQED_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(DB_LSP_AQED_STATUS_DEPTH, DB_LSP_AQED_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_LSP_AQED_STATUS_DEPTH, DB_LSP_AQED_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_LSP_AQED_STATUS_READY, DB_LSP_AQED_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_LSP_AQED_STATUS_READY, DB_LSP_AQED_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(FIFO_LSP_AQED_CMP_EMPTY, FIFO_LSP_AQED_CMP_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_LSP_AQED_CMP_EMPTY, FIFO_LSP_AQED_CMP_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_QED_AQED_ENQ_FID_EMPTY, FIFO_QED_AQED_ENQ_FID_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_QED_AQED_ENQ_FID_EMPTY, FIFO_QED_AQED_ENQ_FID_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AQED_CHP_SCH_EMPTY, FIFO_AQED_CHP_SCH_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_AQED_CHP_SCH_EMPTY, FIFO_AQED_CHP_SCH_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AP_AQED_EMPTY, FIFO_AP_AQED_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_AP_AQED_EMPTY, FIFO_AP_AQED_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AQED_AP_ENQ_EMPTY, FIFO_AQED_AP_ENQ_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_AQED_AP_ENQ_EMPTY, FIFO_AQED_AP_ENQ_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_QED_AQED_ENQ_EMPTY, FIFO_QED_AQED_ENQ_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_QED_AQED_ENQ_EMPTY, FIFO_QED_AQED_ENQ_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_FREELIST_RETURN_EMPTY, FIFO_FREELIST_RETURN_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_FREELIST_RETURN_EMPTY, FIFO_FREELIST_RETURN_EMPTY.actual, 0)
     `RAL_FIELD_CP(AQED_CLK_IDLE, AQED_CLK_IDLE.actual)
     `RAL_FIELD_CP_1(AQED_CLK_IDLE, AQED_CLK_IDLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DB_AQED_LSP_SCH_STATUS_DEPTH = new("DB_AQED_LSP_SCH_STATUS_DEPTH", "RO/V", 2, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[1:0]"});
    DB_AQED_LSP_SCH_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_AQED_LSP_SCH_STATUS_DEPTH.set_rand_mode(0);
   DB_AQED_LSP_SCH_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_AQED_LSP_SCH_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_AQED_LSP_SCH_STATUS_DEPTH ));

    DB_AQED_LSP_SCH_STATUS_READY = new("DB_AQED_LSP_SCH_STATUS_READY", "RO/V", 1, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[2:2]"});
    DB_AQED_LSP_SCH_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_AQED_LSP_SCH_STATUS_READY.set_rand_mode(0);
   DB_AQED_LSP_SCH_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_AQED_LSP_SCH_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_AQED_LSP_SCH_STATUS_READY ));

    DB_AQED_CHP_SCH_STATUS_DEPTH = new("DB_AQED_CHP_SCH_STATUS_DEPTH", "RO/V", 2, 4, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[5:4]"});
    DB_AQED_CHP_SCH_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_AQED_CHP_SCH_STATUS_DEPTH.set_rand_mode(0);
   DB_AQED_CHP_SCH_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_AQED_CHP_SCH_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_AQED_CHP_SCH_STATUS_DEPTH ));

    DB_AQED_CHP_SCH_STATUS_READY = new("DB_AQED_CHP_SCH_STATUS_READY", "RO/V", 1, 6, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[6:6]"});
    DB_AQED_CHP_SCH_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_AQED_CHP_SCH_STATUS_READY.set_rand_mode(0);
   DB_AQED_CHP_SCH_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_AQED_CHP_SCH_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_AQED_CHP_SCH_STATUS_READY ));

    DB_AQED_AP_ENQ_STATUS_DEPTH = new("DB_AQED_AP_ENQ_STATUS_DEPTH", "RO/V", 2, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[9:8]"});
    DB_AQED_AP_ENQ_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_AQED_AP_ENQ_STATUS_DEPTH.set_rand_mode(0);
   DB_AQED_AP_ENQ_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_AQED_AP_ENQ_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_AQED_AP_ENQ_STATUS_DEPTH ));

    DB_AQED_AP_ENQ_STATUS_READY = new("DB_AQED_AP_ENQ_STATUS_READY", "RO/V", 1, 10, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[10:10]"});
    DB_AQED_AP_ENQ_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_AQED_AP_ENQ_STATUS_READY.set_rand_mode(0);
   DB_AQED_AP_ENQ_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_AQED_AP_ENQ_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_AQED_AP_ENQ_STATUS_READY ));

    DB_QED_AQED_ENQ_STATUS_DEPTH = new("DB_QED_AQED_ENQ_STATUS_DEPTH", "RO/V", 2, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[13:12]"});
    DB_QED_AQED_ENQ_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_QED_AQED_ENQ_STATUS_DEPTH.set_rand_mode(0);
   DB_QED_AQED_ENQ_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_QED_AQED_ENQ_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_QED_AQED_ENQ_STATUS_DEPTH ));

    DB_QED_AQED_ENQ_STATUS_READY = new("DB_QED_AQED_ENQ_STATUS_READY", "RO/V", 1, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[14:14]"});
    DB_QED_AQED_ENQ_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_QED_AQED_ENQ_STATUS_READY.set_rand_mode(0);
   DB_QED_AQED_ENQ_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_QED_AQED_ENQ_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_QED_AQED_ENQ_STATUS_READY ));

    DB_AP_AQED_STATUS_DEPTH = new("DB_AP_AQED_STATUS_DEPTH", "RO/V", 2, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[17:16]"});
    DB_AP_AQED_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_AP_AQED_STATUS_DEPTH.set_rand_mode(0);
   DB_AP_AQED_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_AP_AQED_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_AP_AQED_STATUS_DEPTH ));

    DB_AP_AQED_STATUS_READY = new("DB_AP_AQED_STATUS_READY", "RO/V", 1, 18, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[18:18]"});
    DB_AP_AQED_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_AP_AQED_STATUS_READY.set_rand_mode(0);
   DB_AP_AQED_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_AP_AQED_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_AP_AQED_STATUS_READY ));

    DB_LSP_AQED_STATUS_DEPTH = new("DB_LSP_AQED_STATUS_DEPTH", "RO/V", 2, 20, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[21:20]"});
    DB_LSP_AQED_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_LSP_AQED_STATUS_DEPTH.set_rand_mode(0);
   DB_LSP_AQED_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_LSP_AQED_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_LSP_AQED_STATUS_DEPTH ));

    DB_LSP_AQED_STATUS_READY = new("DB_LSP_AQED_STATUS_READY", "RO/V", 1, 22, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[22:22]"});
    DB_LSP_AQED_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_LSP_AQED_STATUS_READY.set_rand_mode(0);
   DB_LSP_AQED_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_LSP_AQED_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_LSP_AQED_STATUS_READY ));

    FIFO_LSP_AQED_CMP_EMPTY = new("FIFO_LSP_AQED_CMP_EMPTY", "RO/V", 1, 24, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[24:24]"});
    FIFO_LSP_AQED_CMP_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_LSP_AQED_CMP_EMPTY.set_rand_mode(0);
   FIFO_LSP_AQED_CMP_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_LSP_AQED_CMP_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_LSP_AQED_CMP_EMPTY ));

    FIFO_QED_AQED_ENQ_FID_EMPTY = new("FIFO_QED_AQED_ENQ_FID_EMPTY", "RO/V", 1, 25, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[25:25]"});
    FIFO_QED_AQED_ENQ_FID_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_QED_AQED_ENQ_FID_EMPTY.set_rand_mode(0);
   FIFO_QED_AQED_ENQ_FID_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_QED_AQED_ENQ_FID_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_QED_AQED_ENQ_FID_EMPTY ));

    FIFO_AQED_CHP_SCH_EMPTY = new("FIFO_AQED_CHP_SCH_EMPTY", "RO/V", 1, 26, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[26:26]"});
    FIFO_AQED_CHP_SCH_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_AQED_CHP_SCH_EMPTY.set_rand_mode(0);
   FIFO_AQED_CHP_SCH_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AQED_CHP_SCH_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_AQED_CHP_SCH_EMPTY ));

    FIFO_AP_AQED_EMPTY = new("FIFO_AP_AQED_EMPTY", "RO/V", 1, 27, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[27:27]"});
    FIFO_AP_AQED_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_AP_AQED_EMPTY.set_rand_mode(0);
   FIFO_AP_AQED_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AP_AQED_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_AP_AQED_EMPTY ));

    FIFO_AQED_AP_ENQ_EMPTY = new("FIFO_AQED_AP_ENQ_EMPTY", "RO/V", 1, 28, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[28:28]"});
    FIFO_AQED_AP_ENQ_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_AQED_AP_ENQ_EMPTY.set_rand_mode(0);
   FIFO_AQED_AP_ENQ_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AQED_AP_ENQ_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_AQED_AP_ENQ_EMPTY ));

    FIFO_QED_AQED_ENQ_EMPTY = new("FIFO_QED_AQED_ENQ_EMPTY", "RO/V", 1, 29, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[29:29]"});
    FIFO_QED_AQED_ENQ_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_QED_AQED_ENQ_EMPTY.set_rand_mode(0);
   FIFO_QED_AQED_ENQ_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_QED_AQED_ENQ_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_QED_AQED_ENQ_EMPTY ));

    FIFO_FREELIST_RETURN_EMPTY = new("FIFO_FREELIST_RETURN_EMPTY", "RO/V", 1, 30, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[30:30]"});
    FIFO_FREELIST_RETURN_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_FREELIST_RETURN_EMPTY.set_rand_mode(0);
   FIFO_FREELIST_RETURN_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FREELIST_RETURN_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_FREELIST_RETURN_EMPTY ));

    AQED_CLK_IDLE = new("AQED_CLK_IDLE", "RO/V", 1, 31, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[31:31]"});
    AQED_CLK_IDLE.set_powerwell("vcccfn_gated");
    AQED_CLK_IDLE.set_rand_mode(0);
   AQED_CLK_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_CLK_IDLE.set_logical_path("HQMID");
    void'(add_field( AQED_CLK_IDLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_INTERFACE_STATUS_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_INTERFACE_STATUS_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_LL_HOLD;
  sla_ral_field P1_LL_HOLD;
  sla_ral_field P2_LL_HOLD;
  sla_ral_field P3_LL_HOLD;
  sla_ral_field P4_LL_HOLD;
  sla_ral_field P5_LL_HOLD;
  sla_ral_field P6_LL_HOLD;
  sla_ral_field P7_LL_HOLD;
  sla_ral_field P8_LL_HOLD;
  sla_ral_field P9_LL_HOLD;
  sla_ral_field P10_LL_HOLD;
  sla_ral_field P11_LL_HOLD;
  sla_ral_field P12_LL_HOLD;
  sla_ral_field P13_LL_HOLD;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_LL_HOLD, P0_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P0_LL_HOLD, P0_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_LL_HOLD, P1_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P1_LL_HOLD, P1_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_LL_HOLD, P2_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P2_LL_HOLD, P2_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_LL_HOLD, P3_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P3_LL_HOLD, P3_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P4_LL_HOLD, P4_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P4_LL_HOLD, P4_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P5_LL_HOLD, P5_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P5_LL_HOLD, P5_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P6_LL_HOLD, P6_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P6_LL_HOLD, P6_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P7_LL_HOLD, P7_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P7_LL_HOLD, P7_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P8_LL_HOLD, P8_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P8_LL_HOLD, P8_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P9_LL_HOLD, P9_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P9_LL_HOLD, P9_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P10_LL_HOLD, P10_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P10_LL_HOLD, P10_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P11_LL_HOLD, P11_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P11_LL_HOLD, P11_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P12_LL_HOLD, P12_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P12_LL_HOLD, P12_LL_HOLD.desired, 0)
     `RAL_FIELD_CP(P13_LL_HOLD, P13_LL_HOLD.desired)
     `RAL_FIELD_CP_1(P13_LL_HOLD, P13_LL_HOLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_LL_HOLD, P0_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P0_LL_HOLD, P0_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_LL_HOLD, P1_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P1_LL_HOLD, P1_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_LL_HOLD, P2_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P2_LL_HOLD, P2_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_LL_HOLD, P3_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P3_LL_HOLD, P3_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P4_LL_HOLD, P4_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P4_LL_HOLD, P4_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P5_LL_HOLD, P5_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P5_LL_HOLD, P5_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P6_LL_HOLD, P6_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P6_LL_HOLD, P6_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P7_LL_HOLD, P7_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P7_LL_HOLD, P7_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P8_LL_HOLD, P8_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P8_LL_HOLD, P8_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P9_LL_HOLD, P9_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P9_LL_HOLD, P9_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P10_LL_HOLD, P10_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P10_LL_HOLD, P10_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P11_LL_HOLD, P11_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P11_LL_HOLD, P11_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P12_LL_HOLD, P12_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P12_LL_HOLD, P12_LL_HOLD.actual, 0)
     `RAL_FIELD_CP(P13_LL_HOLD, P13_LL_HOLD.actual)
     `RAL_FIELD_CP_1(P13_LL_HOLD, P13_LL_HOLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_LL_HOLD = new("P0_LL_HOLD", "RO/V", 1, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[0:0]"});
    P0_LL_HOLD.set_powerwell("vcccfn_gated");
    P0_LL_HOLD.set_rand_mode(0);
   P0_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_LL_HOLD ));

    P1_LL_HOLD = new("P1_LL_HOLD", "RO/V", 1, 1, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[1:1]"});
    P1_LL_HOLD.set_powerwell("vcccfn_gated");
    P1_LL_HOLD.set_rand_mode(0);
   P1_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_LL_HOLD ));

    P2_LL_HOLD = new("P2_LL_HOLD", "RO/V", 1, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[2:2]"});
    P2_LL_HOLD.set_powerwell("vcccfn_gated");
    P2_LL_HOLD.set_rand_mode(0);
   P2_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_LL_HOLD ));

    P3_LL_HOLD = new("P3_LL_HOLD", "RO/V", 1, 3, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[3:3]"});
    P3_LL_HOLD.set_powerwell("vcccfn_gated");
    P3_LL_HOLD.set_rand_mode(0);
   P3_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_LL_HOLD ));

    P4_LL_HOLD = new("P4_LL_HOLD", "RO/V", 1, 4, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[4:4]"});
    P4_LL_HOLD.set_powerwell("vcccfn_gated");
    P4_LL_HOLD.set_rand_mode(0);
   P4_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P4_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P4_LL_HOLD ));

    P5_LL_HOLD = new("P5_LL_HOLD", "RO/V", 1, 5, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[5:5]"});
    P5_LL_HOLD.set_powerwell("vcccfn_gated");
    P5_LL_HOLD.set_rand_mode(0);
   P5_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P5_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P5_LL_HOLD ));

    P6_LL_HOLD = new("P6_LL_HOLD", "RO/V", 1, 6, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[6:6]"});
    P6_LL_HOLD.set_powerwell("vcccfn_gated");
    P6_LL_HOLD.set_rand_mode(0);
   P6_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P6_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P6_LL_HOLD ));

    P7_LL_HOLD = new("P7_LL_HOLD", "RO/V", 1, 7, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[7:7]"});
    P7_LL_HOLD.set_powerwell("vcccfn_gated");
    P7_LL_HOLD.set_rand_mode(0);
   P7_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P7_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P7_LL_HOLD ));

    P8_LL_HOLD = new("P8_LL_HOLD", "RO/V", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[8:8]"});
    P8_LL_HOLD.set_powerwell("vcccfn_gated");
    P8_LL_HOLD.set_rand_mode(0);
   P8_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P8_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P8_LL_HOLD ));

    P9_LL_HOLD = new("P9_LL_HOLD", "RO/V", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[9:9]"});
    P9_LL_HOLD.set_powerwell("vcccfn_gated");
    P9_LL_HOLD.set_rand_mode(0);
   P9_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P9_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P9_LL_HOLD ));

    P10_LL_HOLD = new("P10_LL_HOLD", "RO/V", 1, 10, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[10:10]"});
    P10_LL_HOLD.set_powerwell("vcccfn_gated");
    P10_LL_HOLD.set_rand_mode(0);
   P10_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P10_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P10_LL_HOLD ));

    P11_LL_HOLD = new("P11_LL_HOLD", "RO/V", 1, 11, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[11:11]"});
    P11_LL_HOLD.set_powerwell("vcccfn_gated");
    P11_LL_HOLD.set_rand_mode(0);
   P11_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P11_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P11_LL_HOLD ));

    P12_LL_HOLD = new("P12_LL_HOLD", "RO/V", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[12:12]"});
    P12_LL_HOLD.set_powerwell("vcccfn_gated");
    P12_LL_HOLD.set_rand_mode(0);
   P12_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P12_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P12_LL_HOLD ));

    P13_LL_HOLD = new("P13_LL_HOLD", "RO/V", 1, 13, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[13:13]"});
    P13_LL_HOLD.set_powerwell("vcccfn_gated");
    P13_LL_HOLD.set_rand_mode(0);
   P13_LL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P13_LL_HOLD.set_logical_path("HQMID");
    void'(add_field( P13_LL_HOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_LL_VALID;
  sla_ral_field P1_LL_VALID;
  sla_ral_field P2_LL_VALID;
  sla_ral_field P3_LL_VALID;
  sla_ral_field P4_LL_VALID;
  sla_ral_field P5_LL_VALID;
  sla_ral_field P6_LL_VALID;
  sla_ral_field P7_LL_VALID;
  sla_ral_field P8_LL_VALID;
  sla_ral_field P9_LL_VALID;
  sla_ral_field P10_LL_VALID;
  sla_ral_field P11_LL_VALID;
  sla_ral_field P12_LL_VALID;
  sla_ral_field P13_LL_VALID;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_LL_VALID, P0_LL_VALID.desired)
     `RAL_FIELD_CP_1(P0_LL_VALID, P0_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P1_LL_VALID, P1_LL_VALID.desired)
     `RAL_FIELD_CP_1(P1_LL_VALID, P1_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P2_LL_VALID, P2_LL_VALID.desired)
     `RAL_FIELD_CP_1(P2_LL_VALID, P2_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P3_LL_VALID, P3_LL_VALID.desired)
     `RAL_FIELD_CP_1(P3_LL_VALID, P3_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P4_LL_VALID, P4_LL_VALID.desired)
     `RAL_FIELD_CP_1(P4_LL_VALID, P4_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P5_LL_VALID, P5_LL_VALID.desired)
     `RAL_FIELD_CP_1(P5_LL_VALID, P5_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P6_LL_VALID, P6_LL_VALID.desired)
     `RAL_FIELD_CP_1(P6_LL_VALID, P6_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P7_LL_VALID, P7_LL_VALID.desired)
     `RAL_FIELD_CP_1(P7_LL_VALID, P7_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P8_LL_VALID, P8_LL_VALID.desired)
     `RAL_FIELD_CP_1(P8_LL_VALID, P8_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P9_LL_VALID, P9_LL_VALID.desired)
     `RAL_FIELD_CP_1(P9_LL_VALID, P9_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P10_LL_VALID, P10_LL_VALID.desired)
     `RAL_FIELD_CP_1(P10_LL_VALID, P10_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P11_LL_VALID, P11_LL_VALID.desired)
     `RAL_FIELD_CP_1(P11_LL_VALID, P11_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P12_LL_VALID, P12_LL_VALID.desired)
     `RAL_FIELD_CP_1(P12_LL_VALID, P12_LL_VALID.desired, 0)
     `RAL_FIELD_CP(P13_LL_VALID, P13_LL_VALID.desired)
     `RAL_FIELD_CP_1(P13_LL_VALID, P13_LL_VALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_LL_VALID, P0_LL_VALID.actual)
     `RAL_FIELD_CP_1(P0_LL_VALID, P0_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P1_LL_VALID, P1_LL_VALID.actual)
     `RAL_FIELD_CP_1(P1_LL_VALID, P1_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P2_LL_VALID, P2_LL_VALID.actual)
     `RAL_FIELD_CP_1(P2_LL_VALID, P2_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P3_LL_VALID, P3_LL_VALID.actual)
     `RAL_FIELD_CP_1(P3_LL_VALID, P3_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P4_LL_VALID, P4_LL_VALID.actual)
     `RAL_FIELD_CP_1(P4_LL_VALID, P4_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P5_LL_VALID, P5_LL_VALID.actual)
     `RAL_FIELD_CP_1(P5_LL_VALID, P5_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P6_LL_VALID, P6_LL_VALID.actual)
     `RAL_FIELD_CP_1(P6_LL_VALID, P6_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P7_LL_VALID, P7_LL_VALID.actual)
     `RAL_FIELD_CP_1(P7_LL_VALID, P7_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P8_LL_VALID, P8_LL_VALID.actual)
     `RAL_FIELD_CP_1(P8_LL_VALID, P8_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P9_LL_VALID, P9_LL_VALID.actual)
     `RAL_FIELD_CP_1(P9_LL_VALID, P9_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P10_LL_VALID, P10_LL_VALID.actual)
     `RAL_FIELD_CP_1(P10_LL_VALID, P10_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P11_LL_VALID, P11_LL_VALID.actual)
     `RAL_FIELD_CP_1(P11_LL_VALID, P11_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P12_LL_VALID, P12_LL_VALID.actual)
     `RAL_FIELD_CP_1(P12_LL_VALID, P12_LL_VALID.actual, 0)
     `RAL_FIELD_CP(P13_LL_VALID, P13_LL_VALID.actual)
     `RAL_FIELD_CP_1(P13_LL_VALID, P13_LL_VALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_LL_VALID = new("P0_LL_VALID", "RO/V", 1, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[0:0]"});
    P0_LL_VALID.set_powerwell("vcccfn_gated");
    P0_LL_VALID.set_rand_mode(0);
   P0_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P0_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P0_LL_VALID ));

    P1_LL_VALID = new("P1_LL_VALID", "RO/V", 1, 1, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[1:1]"});
    P1_LL_VALID.set_powerwell("vcccfn_gated");
    P1_LL_VALID.set_rand_mode(0);
   P1_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P1_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P1_LL_VALID ));

    P2_LL_VALID = new("P2_LL_VALID", "RO/V", 1, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[2:2]"});
    P2_LL_VALID.set_powerwell("vcccfn_gated");
    P2_LL_VALID.set_rand_mode(0);
   P2_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P2_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P2_LL_VALID ));

    P3_LL_VALID = new("P3_LL_VALID", "RO/V", 1, 3, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[3:3]"});
    P3_LL_VALID.set_powerwell("vcccfn_gated");
    P3_LL_VALID.set_rand_mode(0);
   P3_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P3_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P3_LL_VALID ));

    P4_LL_VALID = new("P4_LL_VALID", "RO/V", 1, 4, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[4:4]"});
    P4_LL_VALID.set_powerwell("vcccfn_gated");
    P4_LL_VALID.set_rand_mode(0);
   P4_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P4_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P4_LL_VALID ));

    P5_LL_VALID = new("P5_LL_VALID", "RO/V", 1, 5, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[5:5]"});
    P5_LL_VALID.set_powerwell("vcccfn_gated");
    P5_LL_VALID.set_rand_mode(0);
   P5_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P5_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P5_LL_VALID ));

    P6_LL_VALID = new("P6_LL_VALID", "RO/V", 1, 6, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[6:6]"});
    P6_LL_VALID.set_powerwell("vcccfn_gated");
    P6_LL_VALID.set_rand_mode(0);
   P6_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P6_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P6_LL_VALID ));

    P7_LL_VALID = new("P7_LL_VALID", "RO/V", 1, 7, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[7:7]"});
    P7_LL_VALID.set_powerwell("vcccfn_gated");
    P7_LL_VALID.set_rand_mode(0);
   P7_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P7_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P7_LL_VALID ));

    P8_LL_VALID = new("P8_LL_VALID", "RO/V", 1, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[8:8]"});
    P8_LL_VALID.set_powerwell("vcccfn_gated");
    P8_LL_VALID.set_rand_mode(0);
   P8_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P8_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P8_LL_VALID ));

    P9_LL_VALID = new("P9_LL_VALID", "RO/V", 1, 9, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[9:9]"});
    P9_LL_VALID.set_powerwell("vcccfn_gated");
    P9_LL_VALID.set_rand_mode(0);
   P9_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P9_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P9_LL_VALID ));

    P10_LL_VALID = new("P10_LL_VALID", "RO/V", 1, 10, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[10:10]"});
    P10_LL_VALID.set_powerwell("vcccfn_gated");
    P10_LL_VALID.set_rand_mode(0);
   P10_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P10_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P10_LL_VALID ));

    P11_LL_VALID = new("P11_LL_VALID", "RO/V", 1, 11, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[11:11]"});
    P11_LL_VALID.set_powerwell("vcccfn_gated");
    P11_LL_VALID.set_rand_mode(0);
   P11_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P11_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P11_LL_VALID ));

    P12_LL_VALID = new("P12_LL_VALID", "RO/V", 1, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[12:12]"});
    P12_LL_VALID.set_powerwell("vcccfn_gated");
    P12_LL_VALID.set_rand_mode(0);
   P12_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P12_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P12_LL_VALID ));

    P13_LL_VALID = new("P13_LL_VALID", "RO/V", 1, 13, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[13:13]"});
    P13_LL_VALID.set_powerwell("vcccfn_gated");
    P13_LL_VALID.set_rand_mode(0);
   P13_LL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P13_LL_VALID.set_logical_path("HQMID");
    void'(add_field( P13_LL_VALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER0;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.desired)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.actual)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER0 = new("COUNTER0", "RW/V", 32, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt0_q[31:0]"});
    COUNTER0.set_powerwell("vcccfn_gated");
    COUNTER0.set_rand_mode(0);
   COUNTER0.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER0.set_logical_path("HQMID");
    void'(add_field( COUNTER0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER1;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.desired)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.actual)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER1 = new("COUNTER1", "RW/V", 32, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt1_q[31:0]"});
    COUNTER1.set_powerwell("vcccfn_gated");
    COUNTER1.set_rand_mode(0);
   COUNTER1.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER1.set_logical_path("HQMID");
    void'(add_field( COUNTER1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_SMON_COMPARE0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE0;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_SMON_COMPARE0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.desired)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.actual)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE0 = new("COMPARE0", "RW/V", 32, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp0_q[31:0]"});
    COMPARE0.set_powerwell("vcccfn_gated");
    COMPARE0.set_rand_mode(0);
   COMPARE0.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE0.set_logical_path("HQMID");
    void'(add_field( COMPARE0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_SMON_COMPARE0_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_SMON_COMPARE0_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_SMON_COMPARE1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE1;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_SMON_COMPARE1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.desired)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.actual)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE1 = new("COMPARE1", "RW/V", 32, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp1_q[31:0]"});
    COMPARE1.set_powerwell("vcccfn_gated");
    COMPARE1.set_rand_mode(0);
   COMPARE1.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE1.set_logical_path("HQMID");
    void'(add_field( COMPARE1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_SMON_COMPARE1_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_SMON_COMPARE1_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SMON_ENABLE;
  sla_ral_field SMON_0TRIGGER_ENABLE;
  sla_ral_field RSVZ0;
  sla_ral_field SMON0_FUNCTION;
  sla_ral_field SMON0_FUNCTION_COMPARE;
  sla_ral_field SMON1_FUNCTION;
  sla_ral_field SMON1_FUNCTION_COMPARE;
  sla_ral_field SMON_MODE;
  sla_ral_field STOPCOUNTEROVFL;
  sla_ral_field INTCOUNTEROVFL;
  sla_ral_field STATCOUNTER0OVFL;
  sla_ral_field STATCOUNTER1OVFL;
  sla_ral_field STOPTIMEROVFL;
  sla_ral_field INTTIMEROVFL;
  sla_ral_field STATTIMEROVFL;
  sla_ral_field RSVZ1;
  sla_ral_field TIMER_PRESCALE;
  sla_ral_field RSVZ2;
  sla_ral_field VERSION;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.desired, 0)
     `RAL_FIELD_CP(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.desired, 0,1)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.desired)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.desired, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.desired)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.desired, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.desired)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.desired)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.desired, 0)
     `RAL_FIELD_CP(VERSION, VERSION.desired)
     `RAL_FIELD_CP_2(VERSION, VERSION.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.actual, 0)
     `RAL_FIELD_CP(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.actual, 0,1)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.actual)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.actual, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.actual)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.actual, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.actual)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.actual)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.actual, 0)
     `RAL_FIELD_CP(VERSION, VERSION.actual)
     `RAL_FIELD_CP_2(VERSION, VERSION.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SMON_ENABLE = new("SMON_ENABLE", "RW/V", 1, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[0:0]"});
    SMON_ENABLE.set_powerwell("vcccfn_gated");
    SMON_ENABLE.set_rand_mode(0);
   SMON_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_ENABLE.set_logical_path("HQMID");
    void'(add_field( SMON_ENABLE ));

    SMON_0TRIGGER_ENABLE = new("SMON_0TRIGGER_ENABLE", "RW/V", 1, 1, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[1:1]"});
    SMON_0TRIGGER_ENABLE.set_powerwell("vcccfn_gated");
    SMON_0TRIGGER_ENABLE.set_rand_mode(0);
   SMON_0TRIGGER_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_0TRIGGER_ENABLE.set_logical_path("HQMID");
    void'(add_field( SMON_0TRIGGER_ENABLE ));

    RSVZ0 = new("RSVZ0", "RW/V", 2, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[3:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    SMON0_FUNCTION = new("SMON0_FUNCTION", "RW/V", 3, 4, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[6:4]"});
    SMON0_FUNCTION.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION.set_rand_mode(0);
   SMON0_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION ));

    SMON0_FUNCTION_COMPARE = new("SMON0_FUNCTION_COMPARE", "RW/V", 1, 7, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[7:7]"});
    SMON0_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION_COMPARE.set_rand_mode(0);
   SMON0_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION_COMPARE ));

    SMON1_FUNCTION = new("SMON1_FUNCTION", "RW/V", 3, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[10:8]"});
    SMON1_FUNCTION.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION.set_rand_mode(0);
   SMON1_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION ));

    SMON1_FUNCTION_COMPARE = new("SMON1_FUNCTION_COMPARE", "RW/V", 1, 11, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[11:11]"});
    SMON1_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION_COMPARE.set_rand_mode(0);
   SMON1_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION_COMPARE ));

    SMON_MODE = new("SMON_MODE", "RW/V", 4, 12, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[15:12]"});
    SMON_MODE.set_powerwell("vcccfn_gated");
    SMON_MODE.set_rand_mode(0);
   SMON_MODE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_MODE.set_logical_path("HQMID");
    void'(add_field( SMON_MODE ));

    STOPCOUNTEROVFL = new("STOPCOUNTEROVFL", "RW/V", 1, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[16:16]"});
    STOPCOUNTEROVFL.set_powerwell("vcccfn_gated");
    STOPCOUNTEROVFL.set_rand_mode(0);
   STOPCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPCOUNTEROVFL ));

    INTCOUNTEROVFL = new("INTCOUNTEROVFL", "RW/V", 1, 17, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[17:17]"});
    INTCOUNTEROVFL.set_powerwell("vcccfn_gated");
    INTCOUNTEROVFL.set_rand_mode(0);
   INTCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( INTCOUNTEROVFL ));

    STATCOUNTER0OVFL = new("STATCOUNTER0OVFL", "RW/V", 1, 18, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[18:18]"});
    STATCOUNTER0OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER0OVFL.set_rand_mode(0);
   STATCOUNTER0OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER0OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER0OVFL ));

    STATCOUNTER1OVFL = new("STATCOUNTER1OVFL", "RW/V", 1, 19, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[19:19]"});
    STATCOUNTER1OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER1OVFL.set_rand_mode(0);
   STATCOUNTER1OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER1OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER1OVFL ));

    STOPTIMEROVFL = new("STOPTIMEROVFL", "RW/V", 1, 20, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[20:20]"});
    STOPTIMEROVFL.set_powerwell("vcccfn_gated");
    STOPTIMEROVFL.set_rand_mode(0);
   STOPTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPTIMEROVFL ));

    INTTIMEROVFL = new("INTTIMEROVFL", "RW/V", 1, 21, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[21:21]"});
    INTTIMEROVFL.set_powerwell("vcccfn_gated");
    INTTIMEROVFL.set_rand_mode(0);
   INTTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( INTTIMEROVFL ));

    STATTIMEROVFL = new("STATTIMEROVFL", "RW/V", 1, 22, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[22:22]"});
    STATTIMEROVFL.set_powerwell("vcccfn_gated");
    STATTIMEROVFL.set_rand_mode(0);
   STATTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STATTIMEROVFL ));

    RSVZ1 = new("RSVZ1", "RW/V", 1, 23, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[23:23]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    TIMER_PRESCALE = new("TIMER_PRESCALE", "RW/V", 5, 24, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[28:24]"});
    TIMER_PRESCALE.set_powerwell("vcccfn_gated");
    TIMER_PRESCALE.set_rand_mode(0);
   TIMER_PRESCALE.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER_PRESCALE.set_logical_path("HQMID");
    void'(add_field( TIMER_PRESCALE ));

    RSVZ2 = new("RSVZ2", "RW/V", 1, 29, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[29:29]"});
    RSVZ2.set_powerwell("vcccfn_gated");
    RSVZ2.set_rand_mode(0);
   RSVZ2.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ2.set_logical_path("HQMID");
    void'(add_field( RSVZ2 ));

    VERSION = new("VERSION", "RO", 2, 30, {"NoSignal"});
    VERSION.set_powerwell("vcccfn_gated");
    VERSION.set_rand_mode(0);
   VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION0_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION0_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE0;
  sla_ral_field MODE1;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.desired)
     `RAL_FIELD_CP_8(MODE0, MODE0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.desired)
     `RAL_FIELD_CP_8(MODE1, MODE1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.actual)
     `RAL_FIELD_CP_8(MODE0, MODE0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.actual)
     `RAL_FIELD_CP_8(MODE1, MODE1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE0 = new("MODE0", "RW/V", 8, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[7:0]"});
    MODE0.set_powerwell("vcccfn_gated");
    MODE0.set_rand_mode(0);
   MODE0.set_reset_signame("hqm_inp_gated_rst_n");
    MODE0.set_logical_path("HQMID");
    void'(add_field( MODE0 ));

    MODE1 = new("MODE1", "RW/V", 8, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[15:8]"});
    MODE1.set_powerwell("vcccfn_gated");
    MODE1.set_rand_mode(0);
   MODE1.set_reset_signame("hqm_inp_gated_rst_n");
    MODE1.set_logical_path("HQMID");
    void'(add_field( MODE1 ));

    RSVZ0 = new("RSVZ0", "RW", 16, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[31:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION1_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION1_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MAXVALUE;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.desired)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.actual)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MAXVALUE = new("MAXVALUE", "RW/V", 32, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_maxval_q[31:0]"});
    MAXVALUE.set_powerwell("vcccfn_gated");
    MAXVALUE.set_rand_mode(0);
   MAXVALUE.set_reset_signame("hqm_inp_gated_rst_n");
    MAXVALUE.set_logical_path("HQMID");
    void'(add_field( MAXVALUE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_SMON_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_SMON_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER, TIMER.desired)
     `RAL_FIELD_CP_16(TIMER, TIMER.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER, TIMER.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER, TIMER.actual)
     `RAL_FIELD_CP_16(TIMER, TIMER.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER, TIMER.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER = new("TIMER", "RW/V", 32, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_timer_q[31:0]"});
    TIMER.set_powerwell("vcccfn_gated");
    TIMER.set_rand_mode(0);
   TIMER.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER.set_logical_path("HQMID");
    void'(add_field( TIMER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_SMON_TIMER_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_SMON_TIMER_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_SYNDROME_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDDATA;
  sla_ral_field SYNDTYPE;
  sla_ral_field SYNDVALID;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_SYNDROME_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.desired)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.desired)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.desired, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.desired)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.actual)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.actual)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.actual, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.actual)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDDATA = new("SYNDDATA", "RO/V", 28, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
    SYNDDATA.set_powerwell("vcccfn_gated");
    SYNDDATA.set_rand_mode(0);
   SYNDDATA.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDDATA.set_logical_path("HQMID");
    void'(add_field( SYNDDATA ));

    SYNDTYPE = new("SYNDTYPE", "RO/V", 3, 28, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
    SYNDTYPE.set_powerwell("vcccfn_gated");
    SYNDTYPE.set_rand_mode(0);
   SYNDTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDTYPE.set_logical_path("HQMID");
    void'(add_field( SYNDTYPE ));

    SYNDVALID = new("SYNDVALID", "RW/1C/V", 1, 31, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[31:31]"});
    SYNDVALID.set_powerwell("vcccfn_gated");
    SYNDVALID.set_rand_mode(0);
   SYNDVALID.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDVALID.set_logical_path("HQMID");
    void'(add_field( SYNDVALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_SYNDROME_00_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_SYNDROME_00_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_SYNDROME_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDDATA;
  sla_ral_field SYNDTYPE;
  sla_ral_field SYNDVALID;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_SYNDROME_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.desired)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.desired)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.desired, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.desired)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.actual)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.actual)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.actual, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.actual)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDDATA = new("SYNDDATA", "RO/V", 28, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
    SYNDDATA.set_powerwell("vcccfn_gated");
    SYNDDATA.set_rand_mode(0);
   SYNDDATA.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDDATA.set_logical_path("HQMID");
    void'(add_field( SYNDDATA ));

    SYNDTYPE = new("SYNDTYPE", "RO/V", 3, 28, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
    SYNDTYPE.set_powerwell("vcccfn_gated");
    SYNDTYPE.set_rand_mode(0);
   SYNDTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDTYPE.set_logical_path("HQMID");
    void'(add_field( SYNDTYPE ));

    SYNDVALID = new("SYNDVALID", "RW/1C/V", 1, 31, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[31:31]"});
    SYNDVALID.set_powerwell("vcccfn_gated");
    SYNDVALID.set_rand_mode(0);
   SYNDVALID.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDVALID.set_logical_path("HQMID");
    void'(add_field( SYNDVALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_SYNDROME_01_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_SYNDROME_01_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_UNIT_IDLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PIPE_IDLE;
  sla_ral_field UNIT_IDLE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_UNIT_IDLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PIPE_IDLE, PIPE_IDLE.desired)
     `RAL_FIELD_CP_1(PIPE_IDLE, PIPE_IDLE.desired, 0)
     `RAL_FIELD_CP(UNIT_IDLE, UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(UNIT_IDLE, UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PIPE_IDLE, PIPE_IDLE.actual)
     `RAL_FIELD_CP_1(PIPE_IDLE, PIPE_IDLE.actual, 0)
     `RAL_FIELD_CP(UNIT_IDLE, UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(UNIT_IDLE, UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PIPE_IDLE = new("PIPE_IDLE", "RO/V", 1, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_idle.internal_f[0:0]"});
    PIPE_IDLE.set_powerwell("vcccfn_gated");
    PIPE_IDLE.set_rand_mode(0);
   PIPE_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    PIPE_IDLE.set_logical_path("HQMID");
    void'(add_field( PIPE_IDLE ));

    UNIT_IDLE = new("UNIT_IDLE", "RO/V", 1, 1, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_idle.internal_f[1:1]"});
    UNIT_IDLE.set_powerwell("vcccfn_gated");
    UNIT_IDLE.set_rand_mode(0);
   UNIT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( UNIT_IDLE ));

    RSVZ0 = new("RSVZ0", "RO/V", 30, 2, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_idle.internal_f[31:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_UNIT_IDLE_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_UNIT_IDLE_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_UNIT_TIMEOUT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MULTIPLIER;
  sla_ral_field THRESHOLD;
  sla_ral_field RSVZ0;
  sla_ral_field ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_UNIT_TIMEOUT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.desired)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.desired)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.desired)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.actual)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.actual)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.actual)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MULTIPLIER = new("MULTIPLIER", "RO", 5, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_timeout.internal_f[4:0]"});
    MULTIPLIER.set_powerwell("vcccfn_gated");
    MULTIPLIER.set_rand_mode(0);
   MULTIPLIER.set_reset_signame("hqm_inp_gated_rst_n");
    MULTIPLIER.set_logical_path("HQMID");
    void'(add_field( MULTIPLIER ));

    THRESHOLD = new("THRESHOLD", "RW", 11, 5, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_timeout.internal_f[15:5]"});
    THRESHOLD.set_powerwell("vcccfn_gated");
    THRESHOLD.set_rand_mode(0);
   THRESHOLD.set_reset_signame("hqm_inp_gated_rst_n");
    THRESHOLD.set_logical_path("HQMID");
    void'(add_field( THRESHOLD ));

    RSVZ0 = new("RSVZ0", "RW/V", 15, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_timeout.internal_f[30:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    ENABLE = new("ENABLE", "RW", 1, 31, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_timeout.internal_f[31:31]"});
    ENABLE.set_powerwell("vcccfn_gated");
    ENABLE.set_rand_mode(0);
   ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE.set_logical_path("HQMID");
    void'(add_field( ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_UNIT_TIMEOUT_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_UNIT_TIMEOUT_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_PATCH_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DELAY_CLOCKOFF;
  sla_ral_field DELAY_CLKOFF_BYPASS;
  sla_ral_field RSVZ1;
  sla_ral_field RSVZ0;
  sla_ral_field DISABLE_CLOCKOFF;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_PATCH_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.desired, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.actual, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DELAY_CLOCKOFF = new("DELAY_CLOCKOFF", "RW", 8, 0, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_patch_control.internal_f[7:0]"});
    DELAY_CLOCKOFF.set_powerwell("vcccfn_gated");
    DELAY_CLOCKOFF.set_rand_mode(0);
   DELAY_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DELAY_CLOCKOFF ));

    DELAY_CLKOFF_BYPASS = new("DELAY_CLKOFF_BYPASS", "RW", 6, 8, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_patch_control.internal_f[13:8]"});
    DELAY_CLKOFF_BYPASS.set_powerwell("vcccfn_gated");
    DELAY_CLKOFF_BYPASS.set_rand_mode(0);
   DELAY_CLKOFF_BYPASS.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLKOFF_BYPASS.set_logical_path("HQMID");
    void'(add_field( DELAY_CLKOFF_BYPASS ));

    RSVZ1 = new("RSVZ1", "RW", 2, 14, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_patch_control.internal_f[15:14]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    RSVZ0 = new("RSVZ0", "RW", 15, 16, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_patch_control.internal_f[30:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    DISABLE_CLOCKOFF = new("DISABLE_CLOCKOFF", "RW", 1, 31, {"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_patch_control.internal_f[31:31]"});
    DISABLE_CLOCKOFF.set_powerwell("vcccfn_gated");
    DISABLE_CLOCKOFF.set_rand_mode(0);
   DISABLE_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DISABLE_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DISABLE_CLOCKOFF ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_PATCH_CONTROL_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_PATCH_CONTROL_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_AQED_BCAM_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QID;
  sla_ral_field HID;
  sla_ral_field IDX;
  sla_ral_field VALID_ENTRY;
  sla_ral_field PAR;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_AQED_BCAM_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID, QID.desired)
     `RAL_FIELD_CP_7(QID, QID.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(HID, HID.desired)
     `RAL_FIELD_CP_16(HID, HID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(IDX, IDX.desired)
     `RAL_FIELD_CP_1(IDX, IDX.desired, 0)
     `RAL_FIELD_CP(VALID_ENTRY, VALID_ENTRY.desired)
     `RAL_FIELD_CP_1(VALID_ENTRY, VALID_ENTRY.desired, 0)
     `RAL_FIELD_CP(PAR, PAR.desired)
     `RAL_FIELD_CP_1(PAR, PAR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID, QID.actual)
     `RAL_FIELD_CP_7(QID, QID.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(HID, HID.actual)
     `RAL_FIELD_CP_16(HID, HID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(IDX, IDX.actual)
     `RAL_FIELD_CP_1(IDX, IDX.actual, 0)
     `RAL_FIELD_CP(VALID_ENTRY, VALID_ENTRY.actual)
     `RAL_FIELD_CP_1(VALID_ENTRY, VALID_ENTRY.actual, 0)
     `RAL_FIELD_CP(PAR, PAR.actual)
     `RAL_FIELD_CP_1(PAR, PAR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QID = new("QID", "RO/V", 7, 0, {""});
    QID.set_powerwell("vcccfn_gated");
    QID.set_rand_mode(0);
   QID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID ));

    HID = new("HID", "RO/V", 16, 7, {""});
    HID.set_powerwell("vcccfn_gated");
    HID.set_rand_mode(0);
   HID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( HID ));

    IDX = new("IDX", "RO/V", 1, 23, {""});
    IDX.set_powerwell("vcccfn_gated");
    IDX.set_rand_mode(0);
   IDX.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( IDX ));

    VALID_ENTRY = new("VALID_ENTRY", "RO/V", 1, 24, {""});
    VALID_ENTRY.set_powerwell("vcccfn_gated");
    VALID_ENTRY.set_rand_mode(0);
   VALID_ENTRY.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VALID_ENTRY ));

    PAR = new("PAR", "RO/V", 1, 25, {""});
    PAR.set_powerwell("vcccfn_gated");
    PAR.set_rand_mode(0);
   PAR.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PAR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_AQED_BCAM_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_AQED_BCAM_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_AQED_WRD0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DATA;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_AQED_WRD0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.desired)
     `RAL_FIELD_CP_16(DATA, DATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DATA, DATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.actual)
     `RAL_FIELD_CP_16(DATA, DATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DATA, DATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DATA = new("DATA", "RO/V", 32, 0, {""});
    DATA.set_powerwell("vcccfn_gated");
    DATA.set_rand_mode(0);
   DATA.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DATA ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_AQED_WRD0_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_AQED_WRD0_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_AQED_WRD1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DATA;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_AQED_WRD1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.desired)
     `RAL_FIELD_CP_16(DATA, DATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DATA, DATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.actual)
     `RAL_FIELD_CP_16(DATA, DATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DATA, DATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DATA = new("DATA", "RO/V", 32, 0, {""});
    DATA.set_powerwell("vcccfn_gated");
    DATA.set_rand_mode(0);
   DATA.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DATA ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_AQED_WRD1_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_AQED_WRD1_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_AQED_WRD2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DATA;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_AQED_WRD2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.desired)
     `RAL_FIELD_CP_16(DATA, DATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DATA, DATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.actual)
     `RAL_FIELD_CP_16(DATA, DATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DATA, DATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DATA = new("DATA", "RO/V", 32, 0, {""});
    DATA.set_powerwell("vcccfn_gated");
    DATA.set_rand_mode(0);
   DATA.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DATA ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_AQED_WRD2_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_AQED_WRD2_reg

// ================================================

class hqm_aqed_pipe_bridge_CFG_AQED_WRD3_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DATA;

  // --------------------------
  `ovm_object_utils(hqm_aqed_pipe_bridge_CFG_AQED_WRD3_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.desired)
     `RAL_FIELD_CP_16(DATA, DATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DATA, DATA.actual)
     `RAL_FIELD_CP_16(DATA, DATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DATA = new("DATA", "RO/V", 16, 0, {""});
    DATA.set_powerwell("vcccfn_gated");
    DATA.set_rand_mode(0);
   DATA.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DATA ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_aqed_pipe_bridge_CFG_AQED_WRD3_reg) 
endclass : hqm_aqed_pipe_bridge_CFG_AQED_WRD3_reg

// ================================================

class hqm_aqed_pipe_bridge_file extends sla_ral_file;

  rand hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg CFG_AQED_QID_FID_LIMIT[32];
  rand hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg CFG_AQED_QID_HID_WIDTH[32];
  rand hqm_aqed_pipe_bridge_CFG_AQED_CSR_CONTROL_reg CFG_AQED_CSR_CONTROL;
  rand hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0_reg CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0;
  rand hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1_reg CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1;
  rand hqm_aqed_pipe_bridge_CFG_UNIT_VERSION_reg CFG_UNIT_VERSION;
  rand hqm_aqed_pipe_bridge_CFG_CONTROL_GENERAL_reg CFG_CONTROL_GENERAL;
  rand hqm_aqed_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg CFG_CONTROL_PIPELINE_CREDITS;
  rand hqm_aqed_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg CFG_DETECT_FEATURE_OPERATION_00;
  rand hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg CFG_DIAGNOSTIC_AW_STATUS;
  rand hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg CFG_DIAGNOSTIC_AW_STATUS_01;
  rand hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg CFG_DIAGNOSTIC_AW_STATUS_02;
  rand hqm_aqed_pipe_bridge_CFG_ERROR_INJECT_reg CFG_ERROR_INJECT;
  rand hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AP_AQED_IF_reg CFG_FIFO_WMSTAT_AP_AQED_IF;
  rand hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF_reg CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF;
  rand hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF_reg CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF;
  rand hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_FREELIST_RETURN_reg CFG_FIFO_WMSTAT_FREELIST_RETURN;
  rand hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF_reg CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF;
  rand hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF_reg CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF;
  rand hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF_reg CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF;
  rand hqm_aqed_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg CFG_HW_AGITATE_CONTROL;
  rand hqm_aqed_pipe_bridge_CFG_HW_AGITATE_SELECT_reg CFG_HW_AGITATE_SELECT;
  rand hqm_aqed_pipe_bridge_CFG_INTERFACE_STATUS_reg CFG_INTERFACE_STATUS;
  rand hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg CFG_PIPE_HEALTH_HOLD;
  rand hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg CFG_PIPE_HEALTH_VALID;
  rand hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg CFG_SMON_ACTIVITYCOUNTER0;
  rand hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg CFG_SMON_ACTIVITYCOUNTER1;
  rand hqm_aqed_pipe_bridge_CFG_SMON_COMPARE0_reg CFG_SMON_COMPARE0;
  rand hqm_aqed_pipe_bridge_CFG_SMON_COMPARE1_reg CFG_SMON_COMPARE1;
  rand hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION0_reg CFG_SMON_CONFIGURATION0;
  rand hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION1_reg CFG_SMON_CONFIGURATION1;
  rand hqm_aqed_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg CFG_SMON_MAXIMUM_TIMER;
  rand hqm_aqed_pipe_bridge_CFG_SMON_TIMER_reg CFG_SMON_TIMER;
  rand hqm_aqed_pipe_bridge_CFG_SYNDROME_00_reg CFG_SYNDROME_00;
  rand hqm_aqed_pipe_bridge_CFG_SYNDROME_01_reg CFG_SYNDROME_01;
  rand hqm_aqed_pipe_bridge_CFG_UNIT_IDLE_reg CFG_UNIT_IDLE;
  rand hqm_aqed_pipe_bridge_CFG_UNIT_TIMEOUT_reg CFG_UNIT_TIMEOUT;
  rand hqm_aqed_pipe_bridge_CFG_PATCH_CONTROL_reg CFG_PATCH_CONTROL;
  rand hqm_aqed_pipe_bridge_CFG_AQED_BCAM_reg CFG_AQED_BCAM[2048];
  rand hqm_aqed_pipe_bridge_CFG_AQED_WRD0_reg CFG_AQED_WRD0[2048];
  rand hqm_aqed_pipe_bridge_CFG_AQED_WRD1_reg CFG_AQED_WRD1[2048];
  rand hqm_aqed_pipe_bridge_CFG_AQED_WRD2_reg CFG_AQED_WRD2[2048];
  rand hqm_aqed_pipe_bridge_CFG_AQED_WRD3_reg CFG_AQED_WRD3[2048];

  `ovm_component_utils(hqm_aqed_pipe_bridge_file)

  function new(string n, ovm_component p);
    super.new(n,p);
  endfunction

  // --------------------------
  function void build();
    regfilename = this.get_name();

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[0]";
    `endif
    CFG_AQED_QID_FID_LIMIT[0] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[0]", this);
    CFG_AQED_QID_FID_LIMIT[0].set_cfg(16'h0, 16'h0, 16'h0, 4'h0, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[0].set_space_addr("MSG", 4'h0);
    CFG_AQED_QID_FID_LIMIT[0].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[0].set_space_addr("MEM-SB",4'h0);
    CFG_AQED_QID_FID_LIMIT[0].set_space_addr("MEM", 4'h0);
      CFG_AQED_QID_FID_LIMIT[0].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[0].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[0].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[0].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[0].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[0].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[0]:dont_test") ) CFG_AQED_QID_FID_LIMIT[0].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[0] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[0]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[1]";
    `endif
    CFG_AQED_QID_FID_LIMIT[1] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[1]", this);
    CFG_AQED_QID_FID_LIMIT[1].set_cfg(16'h0, 16'h0, 16'h0, 16'h1000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[1].set_space_addr("MSG", 16'h1000);
    CFG_AQED_QID_FID_LIMIT[1].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[1].set_space_addr("MEM-SB",16'h1000);
    CFG_AQED_QID_FID_LIMIT[1].set_space_addr("MEM", 16'h1000);
      CFG_AQED_QID_FID_LIMIT[1].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[1].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[1].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[1].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[1].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[1].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[1]:dont_test") ) CFG_AQED_QID_FID_LIMIT[1].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[1] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[2]";
    `endif
    CFG_AQED_QID_FID_LIMIT[2] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[2]", this);
    CFG_AQED_QID_FID_LIMIT[2].set_cfg(16'h0, 16'h0, 16'h0, 16'h2000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[2].set_space_addr("MSG", 16'h2000);
    CFG_AQED_QID_FID_LIMIT[2].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[2].set_space_addr("MEM-SB",16'h2000);
    CFG_AQED_QID_FID_LIMIT[2].set_space_addr("MEM", 16'h2000);
      CFG_AQED_QID_FID_LIMIT[2].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[2].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[2].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[2].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[2].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[2].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[2].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[2]:dont_test") ) CFG_AQED_QID_FID_LIMIT[2].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[2] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[3]";
    `endif
    CFG_AQED_QID_FID_LIMIT[3] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[3]", this);
    CFG_AQED_QID_FID_LIMIT[3].set_cfg(16'h0, 16'h0, 16'h0, 16'h3000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[3].set_space_addr("MSG", 16'h3000);
    CFG_AQED_QID_FID_LIMIT[3].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[3].set_space_addr("MEM-SB",16'h3000);
    CFG_AQED_QID_FID_LIMIT[3].set_space_addr("MEM", 16'h3000);
      CFG_AQED_QID_FID_LIMIT[3].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[3].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[3].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[3].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[3].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[3].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[3].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[3]:dont_test") ) CFG_AQED_QID_FID_LIMIT[3].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[3] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[4]";
    `endif
    CFG_AQED_QID_FID_LIMIT[4] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[4]", this);
    CFG_AQED_QID_FID_LIMIT[4].set_cfg(16'h0, 16'h0, 16'h0, 16'h4000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[4].set_space_addr("MSG", 16'h4000);
    CFG_AQED_QID_FID_LIMIT[4].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[4].set_space_addr("MEM-SB",16'h4000);
    CFG_AQED_QID_FID_LIMIT[4].set_space_addr("MEM", 16'h4000);
      CFG_AQED_QID_FID_LIMIT[4].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[4].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[4].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[4].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[4].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[4].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[4].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[4]:dont_test") ) CFG_AQED_QID_FID_LIMIT[4].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[4] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[5]";
    `endif
    CFG_AQED_QID_FID_LIMIT[5] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[5]", this);
    CFG_AQED_QID_FID_LIMIT[5].set_cfg(16'h0, 16'h0, 16'h0, 16'h5000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[5].set_space_addr("MSG", 16'h5000);
    CFG_AQED_QID_FID_LIMIT[5].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[5].set_space_addr("MEM-SB",16'h5000);
    CFG_AQED_QID_FID_LIMIT[5].set_space_addr("MEM", 16'h5000);
      CFG_AQED_QID_FID_LIMIT[5].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[5].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[5].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[5].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[5].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[5].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[5].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[5]:dont_test") ) CFG_AQED_QID_FID_LIMIT[5].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[5] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[6]";
    `endif
    CFG_AQED_QID_FID_LIMIT[6] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[6]", this);
    CFG_AQED_QID_FID_LIMIT[6].set_cfg(16'h0, 16'h0, 16'h0, 16'h6000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[6].set_space_addr("MSG", 16'h6000);
    CFG_AQED_QID_FID_LIMIT[6].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[6].set_space_addr("MEM-SB",16'h6000);
    CFG_AQED_QID_FID_LIMIT[6].set_space_addr("MEM", 16'h6000);
      CFG_AQED_QID_FID_LIMIT[6].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[6].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[6].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[6].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[6].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[6].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[6].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[6]:dont_test") ) CFG_AQED_QID_FID_LIMIT[6].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[6] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[7]";
    `endif
    CFG_AQED_QID_FID_LIMIT[7] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[7]", this);
    CFG_AQED_QID_FID_LIMIT[7].set_cfg(16'h0, 16'h0, 16'h0, 16'h7000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[7].set_space_addr("MSG", 16'h7000);
    CFG_AQED_QID_FID_LIMIT[7].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[7].set_space_addr("MEM-SB",16'h7000);
    CFG_AQED_QID_FID_LIMIT[7].set_space_addr("MEM", 16'h7000);
      CFG_AQED_QID_FID_LIMIT[7].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[7].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[7].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[7].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[7].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[7].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[7].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[7]:dont_test") ) CFG_AQED_QID_FID_LIMIT[7].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[7] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[8]";
    `endif
    CFG_AQED_QID_FID_LIMIT[8] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[8]", this);
    CFG_AQED_QID_FID_LIMIT[8].set_cfg(16'h0, 16'h0, 16'h0, 16'h8000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[8].set_space_addr("MSG", 16'h8000);
    CFG_AQED_QID_FID_LIMIT[8].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[8].set_space_addr("MEM-SB",16'h8000);
    CFG_AQED_QID_FID_LIMIT[8].set_space_addr("MEM", 16'h8000);
      CFG_AQED_QID_FID_LIMIT[8].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[8].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[8].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[8].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[8].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[8].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[8].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[8]:dont_test") ) CFG_AQED_QID_FID_LIMIT[8].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[8] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[9]";
    `endif
    CFG_AQED_QID_FID_LIMIT[9] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[9]", this);
    CFG_AQED_QID_FID_LIMIT[9].set_cfg(16'h0, 16'h0, 16'h0, 16'h9000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[9].set_space_addr("MSG", 16'h9000);
    CFG_AQED_QID_FID_LIMIT[9].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[9].set_space_addr("MEM-SB",16'h9000);
    CFG_AQED_QID_FID_LIMIT[9].set_space_addr("MEM", 16'h9000);
      CFG_AQED_QID_FID_LIMIT[9].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[9].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[9].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[9].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[9].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[9].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[9].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[9]:dont_test") ) CFG_AQED_QID_FID_LIMIT[9].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[9] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[10]";
    `endif
    CFG_AQED_QID_FID_LIMIT[10] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[10]", this);
    CFG_AQED_QID_FID_LIMIT[10].set_cfg(16'h0, 16'h0, 16'h0, 20'h0A000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[10].set_space_addr("MSG", 20'h0A000);
    CFG_AQED_QID_FID_LIMIT[10].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[10].set_space_addr("MEM-SB",16'hA000);
    CFG_AQED_QID_FID_LIMIT[10].set_space_addr("MEM", 20'h0A000);
      CFG_AQED_QID_FID_LIMIT[10].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[10].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[10].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[10].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[10].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[10].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[10].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[10]:dont_test") ) CFG_AQED_QID_FID_LIMIT[10].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[10] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[11]";
    `endif
    CFG_AQED_QID_FID_LIMIT[11] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[11]", this);
    CFG_AQED_QID_FID_LIMIT[11].set_cfg(16'h0, 16'h0, 16'h0, 20'h0B000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[11].set_space_addr("MSG", 20'h0B000);
    CFG_AQED_QID_FID_LIMIT[11].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[11].set_space_addr("MEM-SB",16'hB000);
    CFG_AQED_QID_FID_LIMIT[11].set_space_addr("MEM", 20'h0B000);
      CFG_AQED_QID_FID_LIMIT[11].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[11].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[11].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[11].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[11].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[11].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[11].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[11]:dont_test") ) CFG_AQED_QID_FID_LIMIT[11].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[11] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[12]";
    `endif
    CFG_AQED_QID_FID_LIMIT[12] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[12]", this);
    CFG_AQED_QID_FID_LIMIT[12].set_cfg(16'h0, 16'h0, 16'h0, 20'h0C000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[12].set_space_addr("MSG", 20'h0C000);
    CFG_AQED_QID_FID_LIMIT[12].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[12].set_space_addr("MEM-SB",16'hC000);
    CFG_AQED_QID_FID_LIMIT[12].set_space_addr("MEM", 20'h0C000);
      CFG_AQED_QID_FID_LIMIT[12].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[12].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[12].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[12].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[12].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[12].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[12].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[12]:dont_test") ) CFG_AQED_QID_FID_LIMIT[12].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[12] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[13]";
    `endif
    CFG_AQED_QID_FID_LIMIT[13] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[13]", this);
    CFG_AQED_QID_FID_LIMIT[13].set_cfg(16'h0, 16'h0, 16'h0, 20'h0D000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[13].set_space_addr("MSG", 20'h0D000);
    CFG_AQED_QID_FID_LIMIT[13].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[13].set_space_addr("MEM-SB",16'hD000);
    CFG_AQED_QID_FID_LIMIT[13].set_space_addr("MEM", 20'h0D000);
      CFG_AQED_QID_FID_LIMIT[13].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[13].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[13].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[13].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[13].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[13].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[13].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[13]:dont_test") ) CFG_AQED_QID_FID_LIMIT[13].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[13] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[14]";
    `endif
    CFG_AQED_QID_FID_LIMIT[14] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[14]", this);
    CFG_AQED_QID_FID_LIMIT[14].set_cfg(16'h0, 16'h0, 16'h0, 20'h0E000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[14].set_space_addr("MSG", 20'h0E000);
    CFG_AQED_QID_FID_LIMIT[14].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[14].set_space_addr("MEM-SB",16'hE000);
    CFG_AQED_QID_FID_LIMIT[14].set_space_addr("MEM", 20'h0E000);
      CFG_AQED_QID_FID_LIMIT[14].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[14].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[14].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[14].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[14].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[14].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[14].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[14]:dont_test") ) CFG_AQED_QID_FID_LIMIT[14].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[14] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[15]";
    `endif
    CFG_AQED_QID_FID_LIMIT[15] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[15]", this);
    CFG_AQED_QID_FID_LIMIT[15].set_cfg(16'h0, 16'h0, 16'h0, 20'h0F000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[15].set_space_addr("MSG", 20'h0F000);
    CFG_AQED_QID_FID_LIMIT[15].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[15].set_space_addr("MEM-SB",16'hF000);
    CFG_AQED_QID_FID_LIMIT[15].set_space_addr("MEM", 20'h0F000);
      CFG_AQED_QID_FID_LIMIT[15].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[15].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[15].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[15].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[15].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[15].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[15].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[15]:dont_test") ) CFG_AQED_QID_FID_LIMIT[15].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[15] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[16]";
    `endif
    CFG_AQED_QID_FID_LIMIT[16] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[16]", this);
    CFG_AQED_QID_FID_LIMIT[16].set_cfg(16'h0, 16'h0, 16'h0, 20'h10000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[16].set_space_addr("MSG", 20'h10000);
    CFG_AQED_QID_FID_LIMIT[16].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[16].set_space_addr("MEM-SB",20'h10000);
    CFG_AQED_QID_FID_LIMIT[16].set_space_addr("MEM", 20'h10000);
      CFG_AQED_QID_FID_LIMIT[16].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[16].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[16].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[16].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[16].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[16].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[16].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[16]:dont_test") ) CFG_AQED_QID_FID_LIMIT[16].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[16] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[17]";
    `endif
    CFG_AQED_QID_FID_LIMIT[17] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[17]", this);
    CFG_AQED_QID_FID_LIMIT[17].set_cfg(16'h0, 16'h0, 16'h0, 20'h11000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[17].set_space_addr("MSG", 20'h11000);
    CFG_AQED_QID_FID_LIMIT[17].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[17].set_space_addr("MEM-SB",20'h11000);
    CFG_AQED_QID_FID_LIMIT[17].set_space_addr("MEM", 20'h11000);
      CFG_AQED_QID_FID_LIMIT[17].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[17].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[17].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[17].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[17].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[17].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[17].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[17]:dont_test") ) CFG_AQED_QID_FID_LIMIT[17].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[17] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[18]";
    `endif
    CFG_AQED_QID_FID_LIMIT[18] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[18]", this);
    CFG_AQED_QID_FID_LIMIT[18].set_cfg(16'h0, 16'h0, 16'h0, 20'h12000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[18].set_space_addr("MSG", 20'h12000);
    CFG_AQED_QID_FID_LIMIT[18].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[18].set_space_addr("MEM-SB",20'h12000);
    CFG_AQED_QID_FID_LIMIT[18].set_space_addr("MEM", 20'h12000);
      CFG_AQED_QID_FID_LIMIT[18].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[18].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[18].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[18].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[18].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[18].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[18].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[18]:dont_test") ) CFG_AQED_QID_FID_LIMIT[18].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[18] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[19]";
    `endif
    CFG_AQED_QID_FID_LIMIT[19] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[19]", this);
    CFG_AQED_QID_FID_LIMIT[19].set_cfg(16'h0, 16'h0, 16'h0, 20'h13000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[19].set_space_addr("MSG", 20'h13000);
    CFG_AQED_QID_FID_LIMIT[19].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[19].set_space_addr("MEM-SB",20'h13000);
    CFG_AQED_QID_FID_LIMIT[19].set_space_addr("MEM", 20'h13000);
      CFG_AQED_QID_FID_LIMIT[19].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[19].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[19].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[19].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[19].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[19].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[19].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[19]:dont_test") ) CFG_AQED_QID_FID_LIMIT[19].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[19] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[20]";
    `endif
    CFG_AQED_QID_FID_LIMIT[20] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[20]", this);
    CFG_AQED_QID_FID_LIMIT[20].set_cfg(16'h0, 16'h0, 16'h0, 20'h14000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[20].set_space_addr("MSG", 20'h14000);
    CFG_AQED_QID_FID_LIMIT[20].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[20].set_space_addr("MEM-SB",20'h14000);
    CFG_AQED_QID_FID_LIMIT[20].set_space_addr("MEM", 20'h14000);
      CFG_AQED_QID_FID_LIMIT[20].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[20].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[20].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[20].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[20].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[20].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[20].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[20]:dont_test") ) CFG_AQED_QID_FID_LIMIT[20].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[20] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[21]";
    `endif
    CFG_AQED_QID_FID_LIMIT[21] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[21]", this);
    CFG_AQED_QID_FID_LIMIT[21].set_cfg(16'h0, 16'h0, 16'h0, 20'h15000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[21].set_space_addr("MSG", 20'h15000);
    CFG_AQED_QID_FID_LIMIT[21].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[21].set_space_addr("MEM-SB",20'h15000);
    CFG_AQED_QID_FID_LIMIT[21].set_space_addr("MEM", 20'h15000);
      CFG_AQED_QID_FID_LIMIT[21].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[21].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[21].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[21].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[21].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[21].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[21].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[21]:dont_test") ) CFG_AQED_QID_FID_LIMIT[21].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[21] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[22]";
    `endif
    CFG_AQED_QID_FID_LIMIT[22] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[22]", this);
    CFG_AQED_QID_FID_LIMIT[22].set_cfg(16'h0, 16'h0, 16'h0, 20'h16000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[22].set_space_addr("MSG", 20'h16000);
    CFG_AQED_QID_FID_LIMIT[22].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[22].set_space_addr("MEM-SB",20'h16000);
    CFG_AQED_QID_FID_LIMIT[22].set_space_addr("MEM", 20'h16000);
      CFG_AQED_QID_FID_LIMIT[22].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[22].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[22].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[22].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[22].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[22].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[22].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[22]:dont_test") ) CFG_AQED_QID_FID_LIMIT[22].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[22] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[23]";
    `endif
    CFG_AQED_QID_FID_LIMIT[23] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[23]", this);
    CFG_AQED_QID_FID_LIMIT[23].set_cfg(16'h0, 16'h0, 16'h0, 20'h17000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[23].set_space_addr("MSG", 20'h17000);
    CFG_AQED_QID_FID_LIMIT[23].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[23].set_space_addr("MEM-SB",20'h17000);
    CFG_AQED_QID_FID_LIMIT[23].set_space_addr("MEM", 20'h17000);
      CFG_AQED_QID_FID_LIMIT[23].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[23].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[23].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[23].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[23].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[23].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[23].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[23]:dont_test") ) CFG_AQED_QID_FID_LIMIT[23].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[23] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[24]";
    `endif
    CFG_AQED_QID_FID_LIMIT[24] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[24]", this);
    CFG_AQED_QID_FID_LIMIT[24].set_cfg(16'h0, 16'h0, 16'h0, 20'h18000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[24].set_space_addr("MSG", 20'h18000);
    CFG_AQED_QID_FID_LIMIT[24].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[24].set_space_addr("MEM-SB",20'h18000);
    CFG_AQED_QID_FID_LIMIT[24].set_space_addr("MEM", 20'h18000);
      CFG_AQED_QID_FID_LIMIT[24].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[24].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[24].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[24].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[24].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[24].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[24].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[24]:dont_test") ) CFG_AQED_QID_FID_LIMIT[24].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[24] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[25]";
    `endif
    CFG_AQED_QID_FID_LIMIT[25] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[25]", this);
    CFG_AQED_QID_FID_LIMIT[25].set_cfg(16'h0, 16'h0, 16'h0, 20'h19000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[25].set_space_addr("MSG", 20'h19000);
    CFG_AQED_QID_FID_LIMIT[25].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[25].set_space_addr("MEM-SB",20'h19000);
    CFG_AQED_QID_FID_LIMIT[25].set_space_addr("MEM", 20'h19000);
      CFG_AQED_QID_FID_LIMIT[25].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[25].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[25].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[25].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[25].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[25].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[25].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[25]:dont_test") ) CFG_AQED_QID_FID_LIMIT[25].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[25] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[26]";
    `endif
    CFG_AQED_QID_FID_LIMIT[26] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[26]", this);
    CFG_AQED_QID_FID_LIMIT[26].set_cfg(16'h0, 16'h0, 16'h0, 20'h1A000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[26].set_space_addr("MSG", 20'h1A000);
    CFG_AQED_QID_FID_LIMIT[26].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[26].set_space_addr("MEM-SB",20'h1A000);
    CFG_AQED_QID_FID_LIMIT[26].set_space_addr("MEM", 20'h1A000);
      CFG_AQED_QID_FID_LIMIT[26].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[26].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[26].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[26].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[26].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[26].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[26].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[26]:dont_test") ) CFG_AQED_QID_FID_LIMIT[26].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[26] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[27]";
    `endif
    CFG_AQED_QID_FID_LIMIT[27] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[27]", this);
    CFG_AQED_QID_FID_LIMIT[27].set_cfg(16'h0, 16'h0, 16'h0, 20'h1B000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[27].set_space_addr("MSG", 20'h1B000);
    CFG_AQED_QID_FID_LIMIT[27].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[27].set_space_addr("MEM-SB",20'h1B000);
    CFG_AQED_QID_FID_LIMIT[27].set_space_addr("MEM", 20'h1B000);
      CFG_AQED_QID_FID_LIMIT[27].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[27].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[27].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[27].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[27].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[27].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[27].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[27]:dont_test") ) CFG_AQED_QID_FID_LIMIT[27].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[27] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[28]";
    `endif
    CFG_AQED_QID_FID_LIMIT[28] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[28]", this);
    CFG_AQED_QID_FID_LIMIT[28].set_cfg(16'h0, 16'h0, 16'h0, 20'h1C000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[28].set_space_addr("MSG", 20'h1C000);
    CFG_AQED_QID_FID_LIMIT[28].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[28].set_space_addr("MEM-SB",20'h1C000);
    CFG_AQED_QID_FID_LIMIT[28].set_space_addr("MEM", 20'h1C000);
      CFG_AQED_QID_FID_LIMIT[28].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[28].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[28].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[28].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[28].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[28].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[28].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[28]:dont_test") ) CFG_AQED_QID_FID_LIMIT[28].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[28] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[29]";
    `endif
    CFG_AQED_QID_FID_LIMIT[29] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[29]", this);
    CFG_AQED_QID_FID_LIMIT[29].set_cfg(16'h0, 16'h0, 16'h0, 20'h1D000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[29].set_space_addr("MSG", 20'h1D000);
    CFG_AQED_QID_FID_LIMIT[29].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[29].set_space_addr("MEM-SB",20'h1D000);
    CFG_AQED_QID_FID_LIMIT[29].set_space_addr("MEM", 20'h1D000);
      CFG_AQED_QID_FID_LIMIT[29].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[29].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[29].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[29].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[29].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[29].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[29].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[29]:dont_test") ) CFG_AQED_QID_FID_LIMIT[29].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[29] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[30]";
    `endif
    CFG_AQED_QID_FID_LIMIT[30] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[30]", this);
    CFG_AQED_QID_FID_LIMIT[30].set_cfg(16'h0, 16'h0, 16'h0, 20'h1E000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[30].set_space_addr("MSG", 20'h1E000);
    CFG_AQED_QID_FID_LIMIT[30].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[30].set_space_addr("MEM-SB",20'h1E000);
    CFG_AQED_QID_FID_LIMIT[30].set_space_addr("MEM", 20'h1E000);
      CFG_AQED_QID_FID_LIMIT[30].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[30].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[30].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[30].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[30].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[30].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[30].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[30]:dont_test") ) CFG_AQED_QID_FID_LIMIT[30].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[30] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_FID_LIMIT[31]";
    `endif
    CFG_AQED_QID_FID_LIMIT[31] = hqm_aqed_pipe_bridge_CFG_AQED_QID_FID_LIMIT_reg::type_id::create("CFG_AQED_QID_FID_LIMIT[31]", this);
    CFG_AQED_QID_FID_LIMIT[31].set_cfg(16'h0, 16'h0, 16'h0, 20'h1F000, 32, 32'b00000000000000000000011111111111);
    CFG_AQED_QID_FID_LIMIT[31].set_space_addr("MSG", 20'h1F000);
    CFG_AQED_QID_FID_LIMIT[31].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_FID_LIMIT[31].set_space_addr("MEM-SB",20'h1F000);
    CFG_AQED_QID_FID_LIMIT[31].set_space_addr("MEM", 20'h1F000);
      CFG_AQED_QID_FID_LIMIT[31].set_space("MEM");
      CFG_AQED_QID_FID_LIMIT[31].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_FID_LIMIT[31].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_FID_LIMIT[31].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_FID_LIMIT[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_FID_LIMIT[31].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_FID_LIMIT[31].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_FID_LIMIT[31].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_FID_LIMIT[31]:dont_test") ) CFG_AQED_QID_FID_LIMIT[31].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_FID_LIMIT[31] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_FID_LIMIT[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[0]";
    `endif
    CFG_AQED_QID_HID_WIDTH[0] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[0]", this);
    CFG_AQED_QID_HID_WIDTH[0].set_cfg(16'h0, 16'h0, 16'h0, 20'h80000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[0].set_space_addr("MSG", 20'h80000);
    CFG_AQED_QID_HID_WIDTH[0].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[0].set_space_addr("MEM-SB",20'h80000);
    CFG_AQED_QID_HID_WIDTH[0].set_space_addr("MEM", 20'h80000);
      CFG_AQED_QID_HID_WIDTH[0].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[0].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[0].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[0].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[0].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[0].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[0]:dont_test") ) CFG_AQED_QID_HID_WIDTH[0].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[0] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[0]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[1]";
    `endif
    CFG_AQED_QID_HID_WIDTH[1] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[1]", this);
    CFG_AQED_QID_HID_WIDTH[1].set_cfg(16'h0, 16'h0, 16'h0, 20'h81000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[1].set_space_addr("MSG", 20'h81000);
    CFG_AQED_QID_HID_WIDTH[1].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[1].set_space_addr("MEM-SB",20'h81000);
    CFG_AQED_QID_HID_WIDTH[1].set_space_addr("MEM", 20'h81000);
      CFG_AQED_QID_HID_WIDTH[1].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[1].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[1].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[1].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[1].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[1].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[1]:dont_test") ) CFG_AQED_QID_HID_WIDTH[1].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[1] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[2]";
    `endif
    CFG_AQED_QID_HID_WIDTH[2] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[2]", this);
    CFG_AQED_QID_HID_WIDTH[2].set_cfg(16'h0, 16'h0, 16'h0, 20'h82000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[2].set_space_addr("MSG", 20'h82000);
    CFG_AQED_QID_HID_WIDTH[2].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[2].set_space_addr("MEM-SB",20'h82000);
    CFG_AQED_QID_HID_WIDTH[2].set_space_addr("MEM", 20'h82000);
      CFG_AQED_QID_HID_WIDTH[2].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[2].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[2].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[2].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[2].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[2].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[2].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[2]:dont_test") ) CFG_AQED_QID_HID_WIDTH[2].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[2] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[3]";
    `endif
    CFG_AQED_QID_HID_WIDTH[3] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[3]", this);
    CFG_AQED_QID_HID_WIDTH[3].set_cfg(16'h0, 16'h0, 16'h0, 20'h83000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[3].set_space_addr("MSG", 20'h83000);
    CFG_AQED_QID_HID_WIDTH[3].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[3].set_space_addr("MEM-SB",20'h83000);
    CFG_AQED_QID_HID_WIDTH[3].set_space_addr("MEM", 20'h83000);
      CFG_AQED_QID_HID_WIDTH[3].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[3].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[3].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[3].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[3].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[3].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[3].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[3]:dont_test") ) CFG_AQED_QID_HID_WIDTH[3].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[3] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[4]";
    `endif
    CFG_AQED_QID_HID_WIDTH[4] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[4]", this);
    CFG_AQED_QID_HID_WIDTH[4].set_cfg(16'h0, 16'h0, 16'h0, 20'h84000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[4].set_space_addr("MSG", 20'h84000);
    CFG_AQED_QID_HID_WIDTH[4].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[4].set_space_addr("MEM-SB",20'h84000);
    CFG_AQED_QID_HID_WIDTH[4].set_space_addr("MEM", 20'h84000);
      CFG_AQED_QID_HID_WIDTH[4].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[4].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[4].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[4].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[4].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[4].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[4].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[4]:dont_test") ) CFG_AQED_QID_HID_WIDTH[4].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[4] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[5]";
    `endif
    CFG_AQED_QID_HID_WIDTH[5] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[5]", this);
    CFG_AQED_QID_HID_WIDTH[5].set_cfg(16'h0, 16'h0, 16'h0, 20'h85000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[5].set_space_addr("MSG", 20'h85000);
    CFG_AQED_QID_HID_WIDTH[5].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[5].set_space_addr("MEM-SB",20'h85000);
    CFG_AQED_QID_HID_WIDTH[5].set_space_addr("MEM", 20'h85000);
      CFG_AQED_QID_HID_WIDTH[5].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[5].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[5].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[5].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[5].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[5].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[5].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[5]:dont_test") ) CFG_AQED_QID_HID_WIDTH[5].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[5] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[6]";
    `endif
    CFG_AQED_QID_HID_WIDTH[6] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[6]", this);
    CFG_AQED_QID_HID_WIDTH[6].set_cfg(16'h0, 16'h0, 16'h0, 20'h86000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[6].set_space_addr("MSG", 20'h86000);
    CFG_AQED_QID_HID_WIDTH[6].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[6].set_space_addr("MEM-SB",20'h86000);
    CFG_AQED_QID_HID_WIDTH[6].set_space_addr("MEM", 20'h86000);
      CFG_AQED_QID_HID_WIDTH[6].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[6].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[6].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[6].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[6].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[6].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[6].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[6]:dont_test") ) CFG_AQED_QID_HID_WIDTH[6].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[6] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[7]";
    `endif
    CFG_AQED_QID_HID_WIDTH[7] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[7]", this);
    CFG_AQED_QID_HID_WIDTH[7].set_cfg(16'h0, 16'h0, 16'h0, 20'h87000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[7].set_space_addr("MSG", 20'h87000);
    CFG_AQED_QID_HID_WIDTH[7].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[7].set_space_addr("MEM-SB",20'h87000);
    CFG_AQED_QID_HID_WIDTH[7].set_space_addr("MEM", 20'h87000);
      CFG_AQED_QID_HID_WIDTH[7].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[7].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[7].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[7].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[7].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[7].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[7].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[7]:dont_test") ) CFG_AQED_QID_HID_WIDTH[7].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[7] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[8]";
    `endif
    CFG_AQED_QID_HID_WIDTH[8] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[8]", this);
    CFG_AQED_QID_HID_WIDTH[8].set_cfg(16'h0, 16'h0, 16'h0, 20'h88000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[8].set_space_addr("MSG", 20'h88000);
    CFG_AQED_QID_HID_WIDTH[8].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[8].set_space_addr("MEM-SB",20'h88000);
    CFG_AQED_QID_HID_WIDTH[8].set_space_addr("MEM", 20'h88000);
      CFG_AQED_QID_HID_WIDTH[8].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[8].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[8].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[8].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[8].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[8].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[8].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[8]:dont_test") ) CFG_AQED_QID_HID_WIDTH[8].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[8] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[9]";
    `endif
    CFG_AQED_QID_HID_WIDTH[9] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[9]", this);
    CFG_AQED_QID_HID_WIDTH[9].set_cfg(16'h0, 16'h0, 16'h0, 20'h89000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[9].set_space_addr("MSG", 20'h89000);
    CFG_AQED_QID_HID_WIDTH[9].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[9].set_space_addr("MEM-SB",20'h89000);
    CFG_AQED_QID_HID_WIDTH[9].set_space_addr("MEM", 20'h89000);
      CFG_AQED_QID_HID_WIDTH[9].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[9].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[9].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[9].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[9].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[9].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[9].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[9]:dont_test") ) CFG_AQED_QID_HID_WIDTH[9].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[9] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[10]";
    `endif
    CFG_AQED_QID_HID_WIDTH[10] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[10]", this);
    CFG_AQED_QID_HID_WIDTH[10].set_cfg(16'h0, 16'h0, 16'h0, 20'h8A000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[10].set_space_addr("MSG", 20'h8A000);
    CFG_AQED_QID_HID_WIDTH[10].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[10].set_space_addr("MEM-SB",20'h8A000);
    CFG_AQED_QID_HID_WIDTH[10].set_space_addr("MEM", 20'h8A000);
      CFG_AQED_QID_HID_WIDTH[10].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[10].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[10].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[10].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[10].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[10].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[10].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[10]:dont_test") ) CFG_AQED_QID_HID_WIDTH[10].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[10] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[11]";
    `endif
    CFG_AQED_QID_HID_WIDTH[11] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[11]", this);
    CFG_AQED_QID_HID_WIDTH[11].set_cfg(16'h0, 16'h0, 16'h0, 20'h8B000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[11].set_space_addr("MSG", 20'h8B000);
    CFG_AQED_QID_HID_WIDTH[11].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[11].set_space_addr("MEM-SB",20'h8B000);
    CFG_AQED_QID_HID_WIDTH[11].set_space_addr("MEM", 20'h8B000);
      CFG_AQED_QID_HID_WIDTH[11].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[11].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[11].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[11].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[11].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[11].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[11].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[11]:dont_test") ) CFG_AQED_QID_HID_WIDTH[11].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[11] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[12]";
    `endif
    CFG_AQED_QID_HID_WIDTH[12] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[12]", this);
    CFG_AQED_QID_HID_WIDTH[12].set_cfg(16'h0, 16'h0, 16'h0, 20'h8C000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[12].set_space_addr("MSG", 20'h8C000);
    CFG_AQED_QID_HID_WIDTH[12].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[12].set_space_addr("MEM-SB",20'h8C000);
    CFG_AQED_QID_HID_WIDTH[12].set_space_addr("MEM", 20'h8C000);
      CFG_AQED_QID_HID_WIDTH[12].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[12].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[12].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[12].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[12].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[12].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[12].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[12]:dont_test") ) CFG_AQED_QID_HID_WIDTH[12].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[12] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[13]";
    `endif
    CFG_AQED_QID_HID_WIDTH[13] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[13]", this);
    CFG_AQED_QID_HID_WIDTH[13].set_cfg(16'h0, 16'h0, 16'h0, 20'h8D000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[13].set_space_addr("MSG", 20'h8D000);
    CFG_AQED_QID_HID_WIDTH[13].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[13].set_space_addr("MEM-SB",20'h8D000);
    CFG_AQED_QID_HID_WIDTH[13].set_space_addr("MEM", 20'h8D000);
      CFG_AQED_QID_HID_WIDTH[13].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[13].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[13].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[13].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[13].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[13].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[13].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[13]:dont_test") ) CFG_AQED_QID_HID_WIDTH[13].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[13] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[14]";
    `endif
    CFG_AQED_QID_HID_WIDTH[14] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[14]", this);
    CFG_AQED_QID_HID_WIDTH[14].set_cfg(16'h0, 16'h0, 16'h0, 20'h8E000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[14].set_space_addr("MSG", 20'h8E000);
    CFG_AQED_QID_HID_WIDTH[14].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[14].set_space_addr("MEM-SB",20'h8E000);
    CFG_AQED_QID_HID_WIDTH[14].set_space_addr("MEM", 20'h8E000);
      CFG_AQED_QID_HID_WIDTH[14].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[14].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[14].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[14].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[14].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[14].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[14].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[14]:dont_test") ) CFG_AQED_QID_HID_WIDTH[14].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[14] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[15]";
    `endif
    CFG_AQED_QID_HID_WIDTH[15] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[15]", this);
    CFG_AQED_QID_HID_WIDTH[15].set_cfg(16'h0, 16'h0, 16'h0, 20'h8F000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[15].set_space_addr("MSG", 20'h8F000);
    CFG_AQED_QID_HID_WIDTH[15].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[15].set_space_addr("MEM-SB",20'h8F000);
    CFG_AQED_QID_HID_WIDTH[15].set_space_addr("MEM", 20'h8F000);
      CFG_AQED_QID_HID_WIDTH[15].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[15].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[15].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[15].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[15].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[15].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[15].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[15]:dont_test") ) CFG_AQED_QID_HID_WIDTH[15].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[15] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[16]";
    `endif
    CFG_AQED_QID_HID_WIDTH[16] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[16]", this);
    CFG_AQED_QID_HID_WIDTH[16].set_cfg(16'h0, 16'h0, 16'h0, 20'h90000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[16].set_space_addr("MSG", 20'h90000);
    CFG_AQED_QID_HID_WIDTH[16].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[16].set_space_addr("MEM-SB",20'h90000);
    CFG_AQED_QID_HID_WIDTH[16].set_space_addr("MEM", 20'h90000);
      CFG_AQED_QID_HID_WIDTH[16].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[16].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[16].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[16].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[16].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[16].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[16].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[16]:dont_test") ) CFG_AQED_QID_HID_WIDTH[16].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[16] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[17]";
    `endif
    CFG_AQED_QID_HID_WIDTH[17] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[17]", this);
    CFG_AQED_QID_HID_WIDTH[17].set_cfg(16'h0, 16'h0, 16'h0, 20'h91000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[17].set_space_addr("MSG", 20'h91000);
    CFG_AQED_QID_HID_WIDTH[17].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[17].set_space_addr("MEM-SB",20'h91000);
    CFG_AQED_QID_HID_WIDTH[17].set_space_addr("MEM", 20'h91000);
      CFG_AQED_QID_HID_WIDTH[17].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[17].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[17].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[17].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[17].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[17].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[17].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[17]:dont_test") ) CFG_AQED_QID_HID_WIDTH[17].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[17] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[18]";
    `endif
    CFG_AQED_QID_HID_WIDTH[18] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[18]", this);
    CFG_AQED_QID_HID_WIDTH[18].set_cfg(16'h0, 16'h0, 16'h0, 20'h92000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[18].set_space_addr("MSG", 20'h92000);
    CFG_AQED_QID_HID_WIDTH[18].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[18].set_space_addr("MEM-SB",20'h92000);
    CFG_AQED_QID_HID_WIDTH[18].set_space_addr("MEM", 20'h92000);
      CFG_AQED_QID_HID_WIDTH[18].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[18].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[18].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[18].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[18].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[18].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[18].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[18]:dont_test") ) CFG_AQED_QID_HID_WIDTH[18].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[18] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[19]";
    `endif
    CFG_AQED_QID_HID_WIDTH[19] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[19]", this);
    CFG_AQED_QID_HID_WIDTH[19].set_cfg(16'h0, 16'h0, 16'h0, 20'h93000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[19].set_space_addr("MSG", 20'h93000);
    CFG_AQED_QID_HID_WIDTH[19].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[19].set_space_addr("MEM-SB",20'h93000);
    CFG_AQED_QID_HID_WIDTH[19].set_space_addr("MEM", 20'h93000);
      CFG_AQED_QID_HID_WIDTH[19].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[19].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[19].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[19].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[19].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[19].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[19].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[19]:dont_test") ) CFG_AQED_QID_HID_WIDTH[19].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[19] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[20]";
    `endif
    CFG_AQED_QID_HID_WIDTH[20] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[20]", this);
    CFG_AQED_QID_HID_WIDTH[20].set_cfg(16'h0, 16'h0, 16'h0, 20'h94000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[20].set_space_addr("MSG", 20'h94000);
    CFG_AQED_QID_HID_WIDTH[20].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[20].set_space_addr("MEM-SB",20'h94000);
    CFG_AQED_QID_HID_WIDTH[20].set_space_addr("MEM", 20'h94000);
      CFG_AQED_QID_HID_WIDTH[20].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[20].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[20].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[20].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[20].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[20].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[20].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[20]:dont_test") ) CFG_AQED_QID_HID_WIDTH[20].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[20] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[21]";
    `endif
    CFG_AQED_QID_HID_WIDTH[21] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[21]", this);
    CFG_AQED_QID_HID_WIDTH[21].set_cfg(16'h0, 16'h0, 16'h0, 20'h95000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[21].set_space_addr("MSG", 20'h95000);
    CFG_AQED_QID_HID_WIDTH[21].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[21].set_space_addr("MEM-SB",20'h95000);
    CFG_AQED_QID_HID_WIDTH[21].set_space_addr("MEM", 20'h95000);
      CFG_AQED_QID_HID_WIDTH[21].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[21].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[21].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[21].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[21].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[21].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[21].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[21]:dont_test") ) CFG_AQED_QID_HID_WIDTH[21].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[21] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[22]";
    `endif
    CFG_AQED_QID_HID_WIDTH[22] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[22]", this);
    CFG_AQED_QID_HID_WIDTH[22].set_cfg(16'h0, 16'h0, 16'h0, 20'h96000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[22].set_space_addr("MSG", 20'h96000);
    CFG_AQED_QID_HID_WIDTH[22].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[22].set_space_addr("MEM-SB",20'h96000);
    CFG_AQED_QID_HID_WIDTH[22].set_space_addr("MEM", 20'h96000);
      CFG_AQED_QID_HID_WIDTH[22].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[22].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[22].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[22].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[22].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[22].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[22].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[22]:dont_test") ) CFG_AQED_QID_HID_WIDTH[22].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[22] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[23]";
    `endif
    CFG_AQED_QID_HID_WIDTH[23] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[23]", this);
    CFG_AQED_QID_HID_WIDTH[23].set_cfg(16'h0, 16'h0, 16'h0, 20'h97000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[23].set_space_addr("MSG", 20'h97000);
    CFG_AQED_QID_HID_WIDTH[23].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[23].set_space_addr("MEM-SB",20'h97000);
    CFG_AQED_QID_HID_WIDTH[23].set_space_addr("MEM", 20'h97000);
      CFG_AQED_QID_HID_WIDTH[23].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[23].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[23].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[23].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[23].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[23].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[23].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[23]:dont_test") ) CFG_AQED_QID_HID_WIDTH[23].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[23] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[24]";
    `endif
    CFG_AQED_QID_HID_WIDTH[24] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[24]", this);
    CFG_AQED_QID_HID_WIDTH[24].set_cfg(16'h0, 16'h0, 16'h0, 20'h98000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[24].set_space_addr("MSG", 20'h98000);
    CFG_AQED_QID_HID_WIDTH[24].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[24].set_space_addr("MEM-SB",20'h98000);
    CFG_AQED_QID_HID_WIDTH[24].set_space_addr("MEM", 20'h98000);
      CFG_AQED_QID_HID_WIDTH[24].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[24].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[24].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[24].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[24].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[24].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[24].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[24]:dont_test") ) CFG_AQED_QID_HID_WIDTH[24].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[24] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[25]";
    `endif
    CFG_AQED_QID_HID_WIDTH[25] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[25]", this);
    CFG_AQED_QID_HID_WIDTH[25].set_cfg(16'h0, 16'h0, 16'h0, 20'h99000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[25].set_space_addr("MSG", 20'h99000);
    CFG_AQED_QID_HID_WIDTH[25].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[25].set_space_addr("MEM-SB",20'h99000);
    CFG_AQED_QID_HID_WIDTH[25].set_space_addr("MEM", 20'h99000);
      CFG_AQED_QID_HID_WIDTH[25].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[25].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[25].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[25].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[25].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[25].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[25].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[25]:dont_test") ) CFG_AQED_QID_HID_WIDTH[25].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[25] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[26]";
    `endif
    CFG_AQED_QID_HID_WIDTH[26] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[26]", this);
    CFG_AQED_QID_HID_WIDTH[26].set_cfg(16'h0, 16'h0, 16'h0, 20'h9A000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[26].set_space_addr("MSG", 20'h9A000);
    CFG_AQED_QID_HID_WIDTH[26].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[26].set_space_addr("MEM-SB",20'h9A000);
    CFG_AQED_QID_HID_WIDTH[26].set_space_addr("MEM", 20'h9A000);
      CFG_AQED_QID_HID_WIDTH[26].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[26].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[26].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[26].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[26].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[26].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[26].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[26]:dont_test") ) CFG_AQED_QID_HID_WIDTH[26].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[26] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[27]";
    `endif
    CFG_AQED_QID_HID_WIDTH[27] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[27]", this);
    CFG_AQED_QID_HID_WIDTH[27].set_cfg(16'h0, 16'h0, 16'h0, 20'h9B000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[27].set_space_addr("MSG", 20'h9B000);
    CFG_AQED_QID_HID_WIDTH[27].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[27].set_space_addr("MEM-SB",20'h9B000);
    CFG_AQED_QID_HID_WIDTH[27].set_space_addr("MEM", 20'h9B000);
      CFG_AQED_QID_HID_WIDTH[27].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[27].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[27].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[27].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[27].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[27].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[27].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[27]:dont_test") ) CFG_AQED_QID_HID_WIDTH[27].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[27] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[28]";
    `endif
    CFG_AQED_QID_HID_WIDTH[28] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[28]", this);
    CFG_AQED_QID_HID_WIDTH[28].set_cfg(16'h0, 16'h0, 16'h0, 20'h9C000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[28].set_space_addr("MSG", 20'h9C000);
    CFG_AQED_QID_HID_WIDTH[28].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[28].set_space_addr("MEM-SB",20'h9C000);
    CFG_AQED_QID_HID_WIDTH[28].set_space_addr("MEM", 20'h9C000);
      CFG_AQED_QID_HID_WIDTH[28].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[28].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[28].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[28].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[28].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[28].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[28].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[28]:dont_test") ) CFG_AQED_QID_HID_WIDTH[28].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[28] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[29]";
    `endif
    CFG_AQED_QID_HID_WIDTH[29] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[29]", this);
    CFG_AQED_QID_HID_WIDTH[29].set_cfg(16'h0, 16'h0, 16'h0, 20'h9D000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[29].set_space_addr("MSG", 20'h9D000);
    CFG_AQED_QID_HID_WIDTH[29].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[29].set_space_addr("MEM-SB",20'h9D000);
    CFG_AQED_QID_HID_WIDTH[29].set_space_addr("MEM", 20'h9D000);
      CFG_AQED_QID_HID_WIDTH[29].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[29].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[29].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[29].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[29].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[29].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[29].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[29]:dont_test") ) CFG_AQED_QID_HID_WIDTH[29].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[29] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[30]";
    `endif
    CFG_AQED_QID_HID_WIDTH[30] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[30]", this);
    CFG_AQED_QID_HID_WIDTH[30].set_cfg(16'h0, 16'h0, 16'h0, 20'h9E000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[30].set_space_addr("MSG", 20'h9E000);
    CFG_AQED_QID_HID_WIDTH[30].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[30].set_space_addr("MEM-SB",20'h9E000);
    CFG_AQED_QID_HID_WIDTH[30].set_space_addr("MEM", 20'h9E000);
      CFG_AQED_QID_HID_WIDTH[30].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[30].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[30].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[30].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[30].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[30].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[30].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[30]:dont_test") ) CFG_AQED_QID_HID_WIDTH[30].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[30] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_QID_HID_WIDTH[31]";
    `endif
    CFG_AQED_QID_HID_WIDTH[31] = hqm_aqed_pipe_bridge_CFG_AQED_QID_HID_WIDTH_reg::type_id::create("CFG_AQED_QID_HID_WIDTH[31]", this);
    CFG_AQED_QID_HID_WIDTH[31].set_cfg(16'h0, 16'h0, 16'h0, 20'h9F000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_QID_HID_WIDTH[31].set_space_addr("MSG", 20'h9F000);
    CFG_AQED_QID_HID_WIDTH[31].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_QID_HID_WIDTH[31].set_space_addr("MEM-SB",20'h9F000);
    CFG_AQED_QID_HID_WIDTH[31].set_space_addr("MEM", 20'h9F000);
      CFG_AQED_QID_HID_WIDTH[31].set_space("MEM");
      CFG_AQED_QID_HID_WIDTH[31].set_msg_opcode("MEM-SB");
      CFG_AQED_QID_HID_WIDTH[31].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_QID_HID_WIDTH[31].set_bar(4'h2, "MEM-SB");
      CFG_AQED_QID_HID_WIDTH[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_QID_HID_WIDTH[31].set_user_attribute("diag_reg", "0");
      CFG_AQED_QID_HID_WIDTH[31].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_QID_HID_WIDTH[31].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_QID_HID_WIDTH[31]:dont_test") ) CFG_AQED_QID_HID_WIDTH[31].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_QID_HID_WIDTH[31] )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_QID_HID_WIDTH[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_CSR_CONTROL";
    `endif
    CFG_AQED_CSR_CONTROL = hqm_aqed_pipe_bridge_CFG_AQED_CSR_CONTROL_reg::type_id::create("CFG_AQED_CSR_CONTROL", this);
    CFG_AQED_CSR_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_CSR_CONTROL.set_space_addr("MSG", 28'h4000000);
    CFG_AQED_CSR_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_CSR_CONTROL.set_space_addr("MEM-SB",28'h4000000);
    CFG_AQED_CSR_CONTROL.set_space_addr("MEM", 28'h4000000);
      CFG_AQED_CSR_CONTROL.set_space("MEM");
      CFG_AQED_CSR_CONTROL.set_msg_opcode("MEM-SB");
      CFG_AQED_CSR_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_AQED_CSR_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_AQED_CSR_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_CSR_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_AQED_CSR_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_CSR_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_CSR_CONTROL:dont_test") ) CFG_AQED_CSR_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_CSR_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_CSR_CONTROL"));
      end
   CFG_AQED_CSR_CONTROL.INT_COR_ALARM_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[0:0]"});
   CFG_AQED_CSR_CONTROL.INT_COR_SYND_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[1:1]"});
   CFG_AQED_CSR_CONTROL.INT_UNCR_ALARM_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[2:2]"});
   CFG_AQED_CSR_CONTROL.INT_UNC_SYND_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[3:3]"});
   CFG_AQED_CSR_CONTROL.INT_INF0_ALARM_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[4:4]"});
   CFG_AQED_CSR_CONTROL.INT_INF0_SYND_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[5:5]"});
   CFG_AQED_CSR_CONTROL.INT_INF1_ALARM_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[6:6]"});
   CFG_AQED_CSR_CONTROL.INT_INF1_SYND_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[7:7]"});
   CFG_AQED_CSR_CONTROL.INT_INF2_ALARM_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[8:8]"});
   CFG_AQED_CSR_CONTROL.INT_INF2_SYND_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[9:9]"});
   CFG_AQED_CSR_CONTROL.INT_INF3_ALARM_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[10:10]"});
   CFG_AQED_CSR_CONTROL.INT_INF3_SYND_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[11:11]"});
   CFG_AQED_CSR_CONTROL.INT_INF4_ALARM_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[12:12]"});
   CFG_AQED_CSR_CONTROL.INT_INF4_SYND_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[13:13]"});
   CFG_AQED_CSR_CONTROL.INT_INF5_ALARM_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[14:14]"});
   CFG_AQED_CSR_CONTROL.INT_INF5_SYND_DIS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[15:15]"});
   CFG_AQED_CSR_CONTROL.RSVZ0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_aqed_csr_control.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0";
    `endif
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0 = hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0_reg::type_id::create("CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0", this);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000004, 32, 32'b11111110111111001111101011111000);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_space_addr("MSG", 28'h4000004);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_space_addr("MEM-SB",28'h4000004);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_space_addr("MEM", 28'h4000004);
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_space("MEM");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_msg_opcode("MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0:dont_test") ) CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0"));
      end
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.PRI0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_arb_weights_tqpri_atm_0.internal_f[7:0]"});
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.PRI1.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_arb_weights_tqpri_atm_0.internal_f[15:8]"});
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.PRI2.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_arb_weights_tqpri_atm_0.internal_f[23:16]"});
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_0.PRI3.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_arb_weights_tqpri_atm_0.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1";
    `endif
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1 = hqm_aqed_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1_reg::type_id::create("CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1", this);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000008, 32, 32'b00000000000000000000000000000000);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_space_addr("MSG", 28'h4000008);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_space_addr("MEM-SB",28'h4000008);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_space_addr("MEM", 28'h4000008);
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_space("MEM");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_msg_opcode("MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1:dont_test") ) CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1"));
      end
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_ATM_1.RSVZ0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_arb_weights_tqpri_atm_1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_VERSION";
    `endif
    CFG_UNIT_VERSION = hqm_aqed_pipe_bridge_CFG_UNIT_VERSION_reg::type_id::create("CFG_UNIT_VERSION", this);
    CFG_UNIT_VERSION.set_cfg(16'h0, 16'h0, 16'h0, 28'h400000C, 32, 32'b00000001000000000000000000000000);
    CFG_UNIT_VERSION.set_space_addr("MSG", 28'h400000C);
    CFG_UNIT_VERSION.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_VERSION.set_space_addr("MEM-SB",28'h400000C);
    CFG_UNIT_VERSION.set_space_addr("MEM", 28'h400000C);
      CFG_UNIT_VERSION.set_space("MEM");
      CFG_UNIT_VERSION.set_msg_opcode("MEM-SB");
      CFG_UNIT_VERSION.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_VERSION.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_VERSION.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_VERSION.set_user_attribute("diag_reg", "0");
      CFG_UNIT_VERSION.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_UNIT_VERSION.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_VERSION.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_VERSION:dont_test") ) CFG_UNIT_VERSION.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_VERSION )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_VERSION"));
      end
   CFG_UNIT_VERSION.UNIT_VERSION.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_version.status[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_GENERAL";
    `endif
    CFG_CONTROL_GENERAL = hqm_aqed_pipe_bridge_CFG_CONTROL_GENERAL_reg::type_id::create("CFG_CONTROL_GENERAL", this);
    CFG_CONTROL_GENERAL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000000, 32, 32'b00000000000101111110111100000000);
    CFG_CONTROL_GENERAL.set_space_addr("MSG", 32'h0C000000);
    CFG_CONTROL_GENERAL.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_GENERAL.set_space_addr("MEM-SB",28'hC000000);
    CFG_CONTROL_GENERAL.set_space_addr("MEM", 32'h0C000000);
      CFG_CONTROL_GENERAL.set_space("MEM");
      CFG_CONTROL_GENERAL.set_msg_opcode("MEM-SB");
      CFG_CONTROL_GENERAL.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_GENERAL.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_GENERAL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_GENERAL.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_GENERAL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_GENERAL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_GENERAL:dont_test") ) CFG_CONTROL_GENERAL.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_GENERAL )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_GENERAL"));
      end
   CFG_CONTROL_GENERAL.CHICKEN_SIM.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[0:0]"});
   CFG_CONTROL_GENERAL.CHICKEN_50.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[1:1]"});
   CFG_CONTROL_GENERAL.RSVZ0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[3:2]"});
   CFG_CONTROL_GENERAL.FID_DECREMENT.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[4:4]"});
   CFG_CONTROL_GENERAL.FID_SIM.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[5:5]"});
   CFG_CONTROL_GENERAL.RSVZ1.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[7:6]"});
   CFG_CONTROL_GENERAL.AQED_LSP_STOP_ATQATM.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[21:8]"});
   CFG_CONTROL_GENERAL.RSVZ2.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[23:22]"});
   CFG_CONTROL_GENERAL.RSVZ5.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[24:24]"});
   CFG_CONTROL_GENERAL.RSVZ3.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[29:25]"});
   CFG_CONTROL_GENERAL.AQED_CHICKEN_ONEPRI.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[30:30]"});
   CFG_CONTROL_GENERAL.RSVZ4.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_general.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_PIPELINE_CREDITS";
    `endif
    CFG_CONTROL_PIPELINE_CREDITS = hqm_aqed_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg::type_id::create("CFG_CONTROL_PIPELINE_CREDITS", this);
    CFG_CONTROL_PIPELINE_CREDITS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000004, 32, 32'b00000000000000000000000110001100);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("MSG", 32'h0C000004);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("MEM-SB",28'hC000004);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("MEM", 32'h0C000004);
      CFG_CONTROL_PIPELINE_CREDITS.set_space("MEM");
      CFG_CONTROL_PIPELINE_CREDITS.set_msg_opcode("MEM-SB");
      CFG_CONTROL_PIPELINE_CREDITS.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_PIPELINE_CREDITS.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_PIPELINE_CREDITS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_PIPELINE_CREDITS.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_PIPELINE_CREDITS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_PIPELINE_CREDITS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_PIPELINE_CREDITS:dont_test") ) CFG_CONTROL_PIPELINE_CREDITS.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_PIPELINE_CREDITS )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_PIPELINE_CREDITS"));
      end
   CFG_CONTROL_PIPELINE_CREDITS.AQED_AP_ENQ.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[4:0]"});
   CFG_CONTROL_PIPELINE_CREDITS.AQED_CHP_SCH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[9:5]"});
   CFG_CONTROL_PIPELINE_CREDITS.FID_PUSH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[10:10]"});
   CFG_CONTROL_PIPELINE_CREDITS.FID_ENQ.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[11:11]"});
   CFG_CONTROL_PIPELINE_CREDITS.RSVZ0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[15:12]"});
   CFG_CONTROL_PIPELINE_CREDITS.AADEBUG_FIDCNT_UF.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[16:16]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_COLLIDE0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[17:17]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_COLLIDE1.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[18:18]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_HIT.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[19:19]"});
   CFG_CONTROL_PIPELINE_CREDITS.FL_PARERR_DROP.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[20:20]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_TOTAL_QID_GT2046.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[21:21]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_TOTAL_QID_GT2047.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[22:22]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_TOTAL_QID_GT2048.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[23:23]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_TOTAL_FID_GT4094.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[24:24]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_TOTAL_FID_GT4095.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[25:25]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_TOTAL_FID_GT4096.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[26:26]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_TOTAL_FID_GT4097.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[27:27]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_FIDCNT_UF.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[28:28]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_FIDCNT_OF.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[29:29]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_QIDCNT_UF.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[30:30]"});
   CFG_CONTROL_PIPELINE_CREDITS.DEBUG_QIDCNT_OF.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_control_pipeline_credits.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DETECT_FEATURE_OPERATION_00";
    `endif
    CFG_DETECT_FEATURE_OPERATION_00 = hqm_aqed_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg::type_id::create("CFG_DETECT_FEATURE_OPERATION_00", this);
    CFG_DETECT_FEATURE_OPERATION_00.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000008, 32, 32'b00000000000000000000000000000000);
    CFG_DETECT_FEATURE_OPERATION_00.set_space_addr("MSG", 32'h0C000008);
    CFG_DETECT_FEATURE_OPERATION_00.set_space_addr("msg_bus_port", 'h21);
    CFG_DETECT_FEATURE_OPERATION_00.set_space_addr("MEM-SB",28'hC000008);
    CFG_DETECT_FEATURE_OPERATION_00.set_space_addr("MEM", 32'h0C000008);
      CFG_DETECT_FEATURE_OPERATION_00.set_space("MEM");
      CFG_DETECT_FEATURE_OPERATION_00.set_msg_opcode("MEM-SB");
      CFG_DETECT_FEATURE_OPERATION_00.set_fid(4'h0, "MEM-SB");
  	CFG_DETECT_FEATURE_OPERATION_00.set_bar(4'h2, "MEM-SB");
      CFG_DETECT_FEATURE_OPERATION_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DETECT_FEATURE_OPERATION_00.set_user_attribute("diag_reg", "0");
      CFG_DETECT_FEATURE_OPERATION_00.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DETECT_FEATURE_OPERATION_00.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DETECT_FEATURE_OPERATION_00:dont_test") ) CFG_DETECT_FEATURE_OPERATION_00.set_test_reg(1'b0);
      if (!add_reg( CFG_DETECT_FEATURE_OPERATION_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DETECT_FEATURE_OPERATION_00"));
      end
   CFG_DETECT_FEATURE_OPERATION_00.QID_FID_LIMIT.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[0:0]"});
   CFG_DETECT_FEATURE_OPERATION_00.BCAM_OPERATION.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[1:1]"});
   CFG_DETECT_FEATURE_OPERATION_00.BCAM_FULL0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[2:2]"});
   CFG_DETECT_FEATURE_OPERATION_00.BCAM_FULL1.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[3:3]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR00.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[4:4]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR01.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[5:5]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR02.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[6:6]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR03.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[7:7]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR04.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[8:8]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR05.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[9:9]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR06.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[10:10]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR07.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[11:11]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR08.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[12:12]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR09.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[13:13]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR10.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[14:14]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR11.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[15:15]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR12.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[16:16]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR13.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[17:17]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR14.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[18:18]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR15.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[19:19]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR16.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[20:20]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR17.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[21:21]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR18.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[22:22]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR19.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[23:23]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR20.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[24:24]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR21.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[25:25]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR22.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[26:26]"});
   CFG_DETECT_FEATURE_OPERATION_00.FID_BCAM_ERROR23.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[27:27]"});
   CFG_DETECT_FEATURE_OPERATION_00.RSVZ0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[30:28]"});
   CFG_DETECT_FEATURE_OPERATION_00.INTERRUPT.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_detect_feature_operation_00.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_AW_STATUS";
    `endif
    CFG_DIAGNOSTIC_AW_STATUS = hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg::type_id::create("CFG_DIAGNOSTIC_AW_STATUS", this);
    CFG_DIAGNOSTIC_AW_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00000C, 32, 32'b01000000000000000000000000000000);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MSG", 32'h0C00000C);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MEM-SB",28'hC00000C);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MEM", 32'h0C00000C);
      CFG_DIAGNOSTIC_AW_STATUS.set_space("MEM");
      CFG_DIAGNOSTIC_AW_STATUS.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_AW_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_AW_STATUS:dont_test") ) CFG_DIAGNOSTIC_AW_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_AW_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_AW_STATUS"));
      end
   CFG_DIAGNOSTIC_AW_STATUS.RW_LL_QE_HPNXT_P3_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[0:0]"});
   CFG_DIAGNOSTIC_AW_STATUS.RW_LL_QE_HPNXT_P2_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[1:1]"});
   CFG_DIAGNOSTIC_AW_STATUS.RW_LL_QE_HPNXT_P1_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[2:2]"});
   CFG_DIAGNOSTIC_AW_STATUS.RW_LL_QE_HPNXT_P3_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[3:3]"});
   CFG_DIAGNOSTIC_AW_STATUS.RW_LL_QE_HPNXT_P2_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[4:4]"});
   CFG_DIAGNOSTIC_AW_STATUS.RW_LL_QE_HPNXT_P1_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[5:5]"});
   CFG_DIAGNOSTIC_AW_STATUS.RW_LL_QE_HPNXT_P0_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[6:6]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_TP_P3_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[7:7]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_TP_P2_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[8:8]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_TP_P1_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[9:9]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_TP_P3_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[10:10]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_TP_P2_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[11:11]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_TP_P1_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[12:12]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_TP_P0_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[13:13]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_HP_P1_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[14:14]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_HP_P2_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[15:15]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_HP_P3_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[16:16]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_HP_P0_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[17:17]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_HP_P1_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[18:18]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_HP_P2_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[19:19]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_HP_P3_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[20:20]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_CNT_P1_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[21:21]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_CNT_P2_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[22:22]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_CNT_P3_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[23:23]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_CNT_P0_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[24:24]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_CNT_P1_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[25:25]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_CNT_P2_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[26:26]"});
   CFG_DIAGNOSTIC_AW_STATUS.RMW_LL_CNT_P3_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[27:27]"});
   CFG_DIAGNOSTIC_AW_STATUS.FID_BCAM_NOTEMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[28:28]"});
   CFG_DIAGNOSTIC_AW_STATUS.FL_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[29:29]"});
   CFG_DIAGNOSTIC_AW_STATUS.FL_FULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status.status[30:30]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_AW_STATUS_01";
    `endif
    CFG_DIAGNOSTIC_AW_STATUS_01 = hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg::type_id::create("CFG_DIAGNOSTIC_AW_STATUS_01", this);
    CFG_DIAGNOSTIC_AW_STATUS_01.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000010, 32, 32'b01000000000000000000001000000000);
    CFG_DIAGNOSTIC_AW_STATUS_01.set_space_addr("MSG", 32'h0C000010);
    CFG_DIAGNOSTIC_AW_STATUS_01.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_AW_STATUS_01.set_space_addr("MEM-SB",28'hC000010);
    CFG_DIAGNOSTIC_AW_STATUS_01.set_space_addr("MEM", 32'h0C000010);
      CFG_DIAGNOSTIC_AW_STATUS_01.set_space("MEM");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_AW_STATUS_01.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_AW_STATUS_01:dont_test") ) CFG_DIAGNOSTIC_AW_STATUS_01.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_AW_STATUS_01 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_AW_STATUS_01"));
      end
   CFG_DIAGNOSTIC_AW_STATUS_01.INT_STATUS150.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[15:0]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.INT_STATUS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[16:16]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RW_AQED_P3_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[17:17]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RW_AQED_P2_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[18:18]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RW_AQED_P1_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[19:19]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RW_AQED_P3_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[20:20]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RW_AQED_P2_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[21:21]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RW_AQED_P1_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[22:22]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RW_AQED_P0_V_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[23:23]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.SMON_ENABLED.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[24:24]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.FIFO_QED_AQED_ENQ_FULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[25:25]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.FIFO_AQED_AP_ENQ_AFULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[26:26]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.FIFO_AQED_CHP_SCH_AFULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[27:27]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.FIFO_FREELIST_RETURN_AFULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[28:28]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.MF_STATUS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[29:29]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.ANY_CFG_INTERFACE_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[30:30]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.ANY_CFG_PIPE_HEALTH_HOLD_F.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_01.status[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_AW_STATUS_02";
    `endif
    CFG_DIAGNOSTIC_AW_STATUS_02 = hqm_aqed_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg::type_id::create("CFG_DIAGNOSTIC_AW_STATUS_02", this);
    CFG_DIAGNOSTIC_AW_STATUS_02.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000014, 32, 32'b00000000000000000000000000000000);
    CFG_DIAGNOSTIC_AW_STATUS_02.set_space_addr("MSG", 32'h0C000014);
    CFG_DIAGNOSTIC_AW_STATUS_02.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_AW_STATUS_02.set_space_addr("MEM-SB",28'hC000014);
    CFG_DIAGNOSTIC_AW_STATUS_02.set_space_addr("MEM", 32'h0C000014);
      CFG_DIAGNOSTIC_AW_STATUS_02.set_space("MEM");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_AW_STATUS_02.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_AW_STATUS_02:dont_test") ) CFG_DIAGNOSTIC_AW_STATUS_02.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_AW_STATUS_02 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_AW_STATUS_02"));
      end
   CFG_DIAGNOSTIC_AW_STATUS_02.STATUS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_diagnostic_aw_status_02.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_ERROR_INJECT";
    `endif
    CFG_ERROR_INJECT = hqm_aqed_pipe_bridge_CFG_ERROR_INJECT_reg::type_id::create("CFG_ERROR_INJECT", this);
    CFG_ERROR_INJECT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000018, 32, 32'b00000000000000000000000000000000);
    CFG_ERROR_INJECT.set_space_addr("MSG", 32'h0C000018);
    CFG_ERROR_INJECT.set_space_addr("msg_bus_port", 'h21);
    CFG_ERROR_INJECT.set_space_addr("MEM-SB",28'hC000018);
    CFG_ERROR_INJECT.set_space_addr("MEM", 32'h0C000018);
      CFG_ERROR_INJECT.set_space("MEM");
      CFG_ERROR_INJECT.set_msg_opcode("MEM-SB");
      CFG_ERROR_INJECT.set_fid(4'h0, "MEM-SB");
  	CFG_ERROR_INJECT.set_bar(4'h2, "MEM-SB");
      CFG_ERROR_INJECT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ERROR_INJECT.set_user_attribute("diag_reg", "0");
      CFG_ERROR_INJECT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_ERROR_INJECT.set_user_attribute("SubnetPortID", "8'h00");
      CFG_ERROR_INJECT.set_test_reg(0);
      if ( $test$plusargs("CFG_ERROR_INJECT:dont_test") ) CFG_ERROR_INJECT.set_test_reg(1'b0);
      if (!add_reg( CFG_ERROR_INJECT )) begin
        `sla_error(get_name(), ("Could not add register CFG_ERROR_INJECT"));
      end
   CFG_ERROR_INJECT.FLID_0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[0:0]"});
   CFG_ERROR_INJECT.FLID_1.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[1:1]"});
   CFG_ERROR_INJECT.AP_AQED_0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[2:2]"});
   CFG_ERROR_INJECT.QED_AQED_0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[3:3]"});
   CFG_ERROR_INJECT.AP_AQED_1.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[4:4]"});
   CFG_ERROR_INJECT.RSVZ0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_error_inject.internal_f[31:5]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_AP_AQED_IF";
    `endif
    CFG_FIFO_WMSTAT_AP_AQED_IF = hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AP_AQED_IF_reg::type_id::create("CFG_FIFO_WMSTAT_AP_AQED_IF", this);
    CFG_FIFO_WMSTAT_AP_AQED_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00001C, 32, 32'b00000000000000000001000000010000);
    CFG_FIFO_WMSTAT_AP_AQED_IF.set_space_addr("MSG", 32'h0C00001C);
    CFG_FIFO_WMSTAT_AP_AQED_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_AP_AQED_IF.set_space_addr("MEM-SB",28'hC00001C);
    CFG_FIFO_WMSTAT_AP_AQED_IF.set_space_addr("MEM", 32'h0C00001C);
      CFG_FIFO_WMSTAT_AP_AQED_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_AP_AQED_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_AP_AQED_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_AP_AQED_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_AP_AQED_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_AP_AQED_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_AP_AQED_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_AP_AQED_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_AP_AQED_IF:dont_test") ) CFG_FIFO_WMSTAT_AP_AQED_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_AP_AQED_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_AP_AQED_IF"));
      end
   CFG_FIFO_WMSTAT_AP_AQED_IF.FIFO_HWM.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_AP_AQED_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_AP_AQED_IF.FIFO_OVERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_AP_AQED_IF.FIFO_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_AP_AQED_IF.FIFO_AFULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_AP_AQED_IF.FIFO_FULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_AP_AQED_IF.FIFO_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_ap_aqed_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF";
    `endif
    CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF = hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF_reg::type_id::create("CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF", this);
    CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000020, 32, 32'b00000000000000000001000000010000);
    CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_space_addr("MSG", 32'h0C000020);
    CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_space_addr("MEM-SB",28'hC000020);
    CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_space_addr("MEM", 32'h0C000020);
      CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF:dont_test") ) CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF"));
      end
   CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.FIFO_HWM.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.FIFO_OVERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.FIFO_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.FIFO_AFULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.FIFO_FULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_AQED_AP_ENQ_IF.FIFO_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_ap_enq_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF";
    `endif
    CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF = hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF_reg::type_id::create("CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF", this);
    CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000024, 32, 32'b00000000000000000001000000010000);
    CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_space_addr("MSG", 32'h0C000024);
    CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_space_addr("MEM-SB",28'hC000024);
    CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_space_addr("MEM", 32'h0C000024);
      CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF:dont_test") ) CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF"));
      end
   CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.FIFO_HWM.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.FIFO_OVERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.FIFO_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.FIFO_AFULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.FIFO_FULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_AQED_CHP_SCH_IF.FIFO_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_aqed_chp_sch_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_FREELIST_RETURN";
    `endif
    CFG_FIFO_WMSTAT_FREELIST_RETURN = hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_FREELIST_RETURN_reg::type_id::create("CFG_FIFO_WMSTAT_FREELIST_RETURN", this);
    CFG_FIFO_WMSTAT_FREELIST_RETURN.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000028, 32, 32'b00000000000000000001000000010000);
    CFG_FIFO_WMSTAT_FREELIST_RETURN.set_space_addr("MSG", 32'h0C000028);
    CFG_FIFO_WMSTAT_FREELIST_RETURN.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_FREELIST_RETURN.set_space_addr("MEM-SB",28'hC000028);
    CFG_FIFO_WMSTAT_FREELIST_RETURN.set_space_addr("MEM", 32'h0C000028);
      CFG_FIFO_WMSTAT_FREELIST_RETURN.set_space("MEM");
      CFG_FIFO_WMSTAT_FREELIST_RETURN.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_FREELIST_RETURN.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_FREELIST_RETURN.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_FREELIST_RETURN.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_FREELIST_RETURN.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_FREELIST_RETURN.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_FREELIST_RETURN.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_FREELIST_RETURN:dont_test") ) CFG_FIFO_WMSTAT_FREELIST_RETURN.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_FREELIST_RETURN )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_FREELIST_RETURN"));
      end
   CFG_FIFO_WMSTAT_FREELIST_RETURN.FIFO_HWM.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_FREELIST_RETURN.FIFO_UNDERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_FREELIST_RETURN.FIFO_OVERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_FREELIST_RETURN.FIFO_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_FREELIST_RETURN.FIFO_AFULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_FREELIST_RETURN.FIFO_FULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_FREELIST_RETURN.FIFO_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_freelist_return.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF";
    `endif
    CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF = hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF_reg::type_id::create("CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF", this);
    CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00002C, 32, 32'b00000000000000000001000000010000);
    CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_space_addr("MSG", 32'h0C00002C);
    CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_space_addr("MEM-SB",28'hC00002C);
    CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_space_addr("MEM", 32'h0C00002C);
      CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF:dont_test") ) CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF"));
      end
   CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.FIFO_HWM.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.FIFO_OVERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.FIFO_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.FIFO_AFULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.FIFO_FULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_LSP_AQED_CMP_FID_IF.FIFO_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_lsp_aqed_cmp_fid_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF";
    `endif
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF = hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF_reg::type_id::create("CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF", this);
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000030, 32, 32'b00000000000000000001000000001000);
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_space_addr("MSG", 32'h0C000030);
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_space_addr("MEM-SB",28'hC000030);
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_space_addr("MEM", 32'h0C000030);
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF:dont_test") ) CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF"));
      end
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.FIFO_HWM.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.FIFO_OVERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.FIFO_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.FIFO_AFULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.FIFO_FULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_FID_IF.FIFO_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_fid_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF";
    `endif
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF = hqm_aqed_pipe_bridge_CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF_reg::type_id::create("CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF", this);
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000034, 32, 32'b00000000000000000001000000000100);
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_space_addr("MSG", 32'h0C000034);
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_space_addr("MEM-SB",28'hC000034);
    CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_space_addr("MEM", 32'h0C000034);
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF:dont_test") ) CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF"));
      end
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.FIFO_HWM.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.FIFO_OVERFLOW.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.FIFO_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.FIFO_AFULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.FIFO_FULL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_QED_AQED_ENQ_IF.FIFO_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_fifo_wmstat_qed_aqed_enq_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HW_AGITATE_CONTROL";
    `endif
    CFG_HW_AGITATE_CONTROL = hqm_aqed_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg::type_id::create("CFG_HW_AGITATE_CONTROL", this);
    CFG_HW_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000038, 32, 32'b00000000000000000000000000000000);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MSG", 32'h0C000038);
    CFG_HW_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MEM-SB",28'hC000038);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MEM", 32'h0C000038);
      CFG_HW_AGITATE_CONTROL.set_space("MEM");
      CFG_HW_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      CFG_HW_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_HW_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_HW_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HW_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_HW_AGITATE_CONTROL:dont_test") ) CFG_HW_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_HW_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_HW_AGITATE_CONTROL"));
      end
   CFG_HW_AGITATE_CONTROL.MODE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_control.internal_f[1:0]"});
   CFG_HW_AGITATE_CONTROL.DUTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_control.internal_f[4:2]"});
   CFG_HW_AGITATE_CONTROL.PERIOD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_control.internal_f[15:5]"});
   CFG_HW_AGITATE_CONTROL.PROB1ST.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_control.internal_f[23:16]"});
   CFG_HW_AGITATE_CONTROL.PROB2ND.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_control.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HW_AGITATE_SELECT";
    `endif
    CFG_HW_AGITATE_SELECT = hqm_aqed_pipe_bridge_CFG_HW_AGITATE_SELECT_reg::type_id::create("CFG_HW_AGITATE_SELECT", this);
    CFG_HW_AGITATE_SELECT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00003C, 32, 32'b00000000000000000000000000000000);
    CFG_HW_AGITATE_SELECT.set_space_addr("MSG", 32'h0C00003C);
    CFG_HW_AGITATE_SELECT.set_space_addr("msg_bus_port", 'h21);
    CFG_HW_AGITATE_SELECT.set_space_addr("MEM-SB",28'hC00003C);
    CFG_HW_AGITATE_SELECT.set_space_addr("MEM", 32'h0C00003C);
      CFG_HW_AGITATE_SELECT.set_space("MEM");
      CFG_HW_AGITATE_SELECT.set_msg_opcode("MEM-SB");
      CFG_HW_AGITATE_SELECT.set_fid(4'h0, "MEM-SB");
  	CFG_HW_AGITATE_SELECT.set_bar(4'h2, "MEM-SB");
      CFG_HW_AGITATE_SELECT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HW_AGITATE_SELECT.set_user_attribute("diag_reg", "0");
      CFG_HW_AGITATE_SELECT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HW_AGITATE_SELECT.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HW_AGITATE_SELECT.set_test_reg(0);
      if ( $test$plusargs("CFG_HW_AGITATE_SELECT:dont_test") ) CFG_HW_AGITATE_SELECT.set_test_reg(1'b0);
      if (!add_reg( CFG_HW_AGITATE_SELECT )) begin
        `sla_error(get_name(), ("Could not add register CFG_HW_AGITATE_SELECT"));
      end
   CFG_HW_AGITATE_SELECT.AGG_IF_00.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[0:0]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_01.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[1:1]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_02.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[2:2]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_03.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[3:3]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_04.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[4:4]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_05.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[5:5]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_06.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[6:6]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_07.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[7:7]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_08.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[8:8]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_09.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[9:9]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_10.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[10:10]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_11.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[11:11]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_12.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[12:12]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_13.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[13:13]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_14.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[14:14]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_15.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[15:15]"});
   CFG_HW_AGITATE_SELECT.RSVZ.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_hw_agitate_select.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_INTERFACE_STATUS";
    `endif
    CFG_INTERFACE_STATUS = hqm_aqed_pipe_bridge_CFG_INTERFACE_STATUS_reg::type_id::create("CFG_INTERFACE_STATUS", this);
    CFG_INTERFACE_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000040, 32, 32'b01111111010001000100010001000100);
    CFG_INTERFACE_STATUS.set_space_addr("MSG", 32'h0C000040);
    CFG_INTERFACE_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_INTERFACE_STATUS.set_space_addr("MEM-SB",28'hC000040);
    CFG_INTERFACE_STATUS.set_space_addr("MEM", 32'h0C000040);
      CFG_INTERFACE_STATUS.set_space("MEM");
      CFG_INTERFACE_STATUS.set_msg_opcode("MEM-SB");
      CFG_INTERFACE_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_INTERFACE_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_INTERFACE_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_INTERFACE_STATUS.set_user_attribute("diag_reg", "0");
      CFG_INTERFACE_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_INTERFACE_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_INTERFACE_STATUS:dont_test") ) CFG_INTERFACE_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_INTERFACE_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_INTERFACE_STATUS"));
      end
   CFG_INTERFACE_STATUS.DB_AQED_LSP_SCH_STATUS_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[1:0]"});
   CFG_INTERFACE_STATUS.DB_AQED_LSP_SCH_STATUS_READY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[2:2]"});
   CFG_INTERFACE_STATUS.DB_AQED_CHP_SCH_STATUS_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[5:4]"});
   CFG_INTERFACE_STATUS.DB_AQED_CHP_SCH_STATUS_READY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[6:6]"});
   CFG_INTERFACE_STATUS.DB_AQED_AP_ENQ_STATUS_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[9:8]"});
   CFG_INTERFACE_STATUS.DB_AQED_AP_ENQ_STATUS_READY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[10:10]"});
   CFG_INTERFACE_STATUS.DB_QED_AQED_ENQ_STATUS_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[13:12]"});
   CFG_INTERFACE_STATUS.DB_QED_AQED_ENQ_STATUS_READY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[14:14]"});
   CFG_INTERFACE_STATUS.DB_AP_AQED_STATUS_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[17:16]"});
   CFG_INTERFACE_STATUS.DB_AP_AQED_STATUS_READY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[18:18]"});
   CFG_INTERFACE_STATUS.DB_LSP_AQED_STATUS_DEPTH.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[21:20]"});
   CFG_INTERFACE_STATUS.DB_LSP_AQED_STATUS_READY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[22:22]"});
   CFG_INTERFACE_STATUS.FIFO_LSP_AQED_CMP_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[24:24]"});
   CFG_INTERFACE_STATUS.FIFO_QED_AQED_ENQ_FID_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[25:25]"});
   CFG_INTERFACE_STATUS.FIFO_AQED_CHP_SCH_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[26:26]"});
   CFG_INTERFACE_STATUS.FIFO_AP_AQED_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[27:27]"});
   CFG_INTERFACE_STATUS.FIFO_AQED_AP_ENQ_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[28:28]"});
   CFG_INTERFACE_STATUS.FIFO_QED_AQED_ENQ_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[29:29]"});
   CFG_INTERFACE_STATUS.FIFO_FREELIST_RETURN_EMPTY.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[30:30]"});
   CFG_INTERFACE_STATUS.AQED_CLK_IDLE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_interface_status.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_HOLD";
    `endif
    CFG_PIPE_HEALTH_HOLD = hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg::type_id::create("CFG_PIPE_HEALTH_HOLD", this);
    CFG_PIPE_HEALTH_HOLD.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000044, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_HOLD.set_space_addr("MSG", 32'h0C000044);
    CFG_PIPE_HEALTH_HOLD.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_HOLD.set_space_addr("MEM-SB",28'hC000044);
    CFG_PIPE_HEALTH_HOLD.set_space_addr("MEM", 32'h0C000044);
      CFG_PIPE_HEALTH_HOLD.set_space("MEM");
      CFG_PIPE_HEALTH_HOLD.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_HOLD.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_HOLD.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_HOLD.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_HOLD.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_HOLD.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_HOLD.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_HOLD:dont_test") ) CFG_PIPE_HEALTH_HOLD.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_HOLD )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_HOLD"));
      end
   CFG_PIPE_HEALTH_HOLD.P0_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[0:0]"});
   CFG_PIPE_HEALTH_HOLD.P1_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[1:1]"});
   CFG_PIPE_HEALTH_HOLD.P2_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[2:2]"});
   CFG_PIPE_HEALTH_HOLD.P3_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[3:3]"});
   CFG_PIPE_HEALTH_HOLD.P4_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[4:4]"});
   CFG_PIPE_HEALTH_HOLD.P5_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[5:5]"});
   CFG_PIPE_HEALTH_HOLD.P6_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[6:6]"});
   CFG_PIPE_HEALTH_HOLD.P7_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[7:7]"});
   CFG_PIPE_HEALTH_HOLD.P8_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[8:8]"});
   CFG_PIPE_HEALTH_HOLD.P9_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[9:9]"});
   CFG_PIPE_HEALTH_HOLD.P10_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[10:10]"});
   CFG_PIPE_HEALTH_HOLD.P11_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[11:11]"});
   CFG_PIPE_HEALTH_HOLD.P12_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[12:12]"});
   CFG_PIPE_HEALTH_HOLD.P13_LL_HOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_hold.internal_f[13:13]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_VALID";
    `endif
    CFG_PIPE_HEALTH_VALID = hqm_aqed_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg::type_id::create("CFG_PIPE_HEALTH_VALID", this);
    CFG_PIPE_HEALTH_VALID.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000048, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_VALID.set_space_addr("MSG", 32'h0C000048);
    CFG_PIPE_HEALTH_VALID.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_VALID.set_space_addr("MEM-SB",28'hC000048);
    CFG_PIPE_HEALTH_VALID.set_space_addr("MEM", 32'h0C000048);
      CFG_PIPE_HEALTH_VALID.set_space("MEM");
      CFG_PIPE_HEALTH_VALID.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_VALID.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_VALID.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_VALID.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_VALID.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_VALID.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_VALID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_VALID:dont_test") ) CFG_PIPE_HEALTH_VALID.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_VALID )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_VALID"));
      end
   CFG_PIPE_HEALTH_VALID.P0_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[0:0]"});
   CFG_PIPE_HEALTH_VALID.P1_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[1:1]"});
   CFG_PIPE_HEALTH_VALID.P2_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[2:2]"});
   CFG_PIPE_HEALTH_VALID.P3_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[3:3]"});
   CFG_PIPE_HEALTH_VALID.P4_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[4:4]"});
   CFG_PIPE_HEALTH_VALID.P5_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[5:5]"});
   CFG_PIPE_HEALTH_VALID.P6_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[6:6]"});
   CFG_PIPE_HEALTH_VALID.P7_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[7:7]"});
   CFG_PIPE_HEALTH_VALID.P8_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[8:8]"});
   CFG_PIPE_HEALTH_VALID.P9_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[9:9]"});
   CFG_PIPE_HEALTH_VALID.P10_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[10:10]"});
   CFG_PIPE_HEALTH_VALID.P11_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[11:11]"});
   CFG_PIPE_HEALTH_VALID.P12_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[12:12]"});
   CFG_PIPE_HEALTH_VALID.P13_LL_VALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_pipe_health_valid.internal_f[13:13]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_ACTIVITYCOUNTER0";
    `endif
    CFG_SMON_ACTIVITYCOUNTER0 = hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg::type_id::create("CFG_SMON_ACTIVITYCOUNTER0", this);
    CFG_SMON_ACTIVITYCOUNTER0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00004C, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("MSG", 32'h0C00004C);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("MEM-SB",28'hC00004C);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("MEM", 32'h0C00004C);
      CFG_SMON_ACTIVITYCOUNTER0.set_space("MEM");
      CFG_SMON_ACTIVITYCOUNTER0.set_msg_opcode("MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_ACTIVITYCOUNTER0.set_bar(4'h2, "MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_ACTIVITYCOUNTER0.set_user_attribute("diag_reg", "0");
      CFG_SMON_ACTIVITYCOUNTER0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_ACTIVITYCOUNTER0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_ACTIVITYCOUNTER0:dont_test") ) CFG_SMON_ACTIVITYCOUNTER0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_ACTIVITYCOUNTER0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_ACTIVITYCOUNTER0"));
      end
   CFG_SMON_ACTIVITYCOUNTER0.COUNTER0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_ACTIVITYCOUNTER1";
    `endif
    CFG_SMON_ACTIVITYCOUNTER1 = hqm_aqed_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg::type_id::create("CFG_SMON_ACTIVITYCOUNTER1", this);
    CFG_SMON_ACTIVITYCOUNTER1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000050, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("MSG", 32'h0C000050);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("MEM-SB",28'hC000050);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("MEM", 32'h0C000050);
      CFG_SMON_ACTIVITYCOUNTER1.set_space("MEM");
      CFG_SMON_ACTIVITYCOUNTER1.set_msg_opcode("MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_ACTIVITYCOUNTER1.set_bar(4'h2, "MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_ACTIVITYCOUNTER1.set_user_attribute("diag_reg", "0");
      CFG_SMON_ACTIVITYCOUNTER1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_ACTIVITYCOUNTER1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_ACTIVITYCOUNTER1:dont_test") ) CFG_SMON_ACTIVITYCOUNTER1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_ACTIVITYCOUNTER1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_ACTIVITYCOUNTER1"));
      end
   CFG_SMON_ACTIVITYCOUNTER1.COUNTER1.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_COMPARE0";
    `endif
    CFG_SMON_COMPARE0 = hqm_aqed_pipe_bridge_CFG_SMON_COMPARE0_reg::type_id::create("CFG_SMON_COMPARE0", this);
    CFG_SMON_COMPARE0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000054, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_COMPARE0.set_space_addr("MSG", 32'h0C000054);
    CFG_SMON_COMPARE0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_COMPARE0.set_space_addr("MEM-SB",28'hC000054);
    CFG_SMON_COMPARE0.set_space_addr("MEM", 32'h0C000054);
      CFG_SMON_COMPARE0.set_space("MEM");
      CFG_SMON_COMPARE0.set_msg_opcode("MEM-SB");
      CFG_SMON_COMPARE0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_COMPARE0.set_bar(4'h2, "MEM-SB");
      CFG_SMON_COMPARE0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_COMPARE0.set_user_attribute("diag_reg", "0");
      CFG_SMON_COMPARE0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_COMPARE0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_COMPARE0:dont_test") ) CFG_SMON_COMPARE0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_COMPARE0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_COMPARE0"));
      end
   CFG_SMON_COMPARE0.COMPARE0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_COMPARE1";
    `endif
    CFG_SMON_COMPARE1 = hqm_aqed_pipe_bridge_CFG_SMON_COMPARE1_reg::type_id::create("CFG_SMON_COMPARE1", this);
    CFG_SMON_COMPARE1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000058, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_COMPARE1.set_space_addr("MSG", 32'h0C000058);
    CFG_SMON_COMPARE1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_COMPARE1.set_space_addr("MEM-SB",28'hC000058);
    CFG_SMON_COMPARE1.set_space_addr("MEM", 32'h0C000058);
      CFG_SMON_COMPARE1.set_space("MEM");
      CFG_SMON_COMPARE1.set_msg_opcode("MEM-SB");
      CFG_SMON_COMPARE1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_COMPARE1.set_bar(4'h2, "MEM-SB");
      CFG_SMON_COMPARE1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_COMPARE1.set_user_attribute("diag_reg", "0");
      CFG_SMON_COMPARE1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_COMPARE1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_COMPARE1:dont_test") ) CFG_SMON_COMPARE1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_COMPARE1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_COMPARE1"));
      end
   CFG_SMON_COMPARE1.COMPARE1.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_CONFIGURATION0";
    `endif
    CFG_SMON_CONFIGURATION0 = hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION0_reg::type_id::create("CFG_SMON_CONFIGURATION0", this);
    CFG_SMON_CONFIGURATION0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00005C, 32, 32'b01000000000000000000000000000000);
    CFG_SMON_CONFIGURATION0.set_space_addr("MSG", 32'h0C00005C);
    CFG_SMON_CONFIGURATION0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_CONFIGURATION0.set_space_addr("MEM-SB",28'hC00005C);
    CFG_SMON_CONFIGURATION0.set_space_addr("MEM", 32'h0C00005C);
      CFG_SMON_CONFIGURATION0.set_space("MEM");
      CFG_SMON_CONFIGURATION0.set_msg_opcode("MEM-SB");
      CFG_SMON_CONFIGURATION0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_CONFIGURATION0.set_bar(4'h2, "MEM-SB");
      CFG_SMON_CONFIGURATION0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_CONFIGURATION0.set_user_attribute("diag_reg", "0");
      CFG_SMON_CONFIGURATION0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_CONFIGURATION0.set_user_attribute("SubnetPortID", "8'h00");
      CFG_SMON_CONFIGURATION0.set_test_reg(0);
      if ( $test$plusargs("CFG_SMON_CONFIGURATION0:dont_test") ) CFG_SMON_CONFIGURATION0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_CONFIGURATION0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_CONFIGURATION0"));
      end
   CFG_SMON_CONFIGURATION0.SMON_ENABLE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[0:0]"});
   CFG_SMON_CONFIGURATION0.SMON_0TRIGGER_ENABLE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[1:1]"});
   CFG_SMON_CONFIGURATION0.RSVZ0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[3:2]"});
   CFG_SMON_CONFIGURATION0.SMON0_FUNCTION.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[6:4]"});
   CFG_SMON_CONFIGURATION0.SMON0_FUNCTION_COMPARE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[7:7]"});
   CFG_SMON_CONFIGURATION0.SMON1_FUNCTION.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[10:8]"});
   CFG_SMON_CONFIGURATION0.SMON1_FUNCTION_COMPARE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[11:11]"});
   CFG_SMON_CONFIGURATION0.SMON_MODE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[15:12]"});
   CFG_SMON_CONFIGURATION0.STOPCOUNTEROVFL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[16:16]"});
   CFG_SMON_CONFIGURATION0.INTCOUNTEROVFL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[17:17]"});
   CFG_SMON_CONFIGURATION0.STATCOUNTER0OVFL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[18:18]"});
   CFG_SMON_CONFIGURATION0.STATCOUNTER1OVFL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[19:19]"});
   CFG_SMON_CONFIGURATION0.STOPTIMEROVFL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[20:20]"});
   CFG_SMON_CONFIGURATION0.INTTIMEROVFL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[21:21]"});
   CFG_SMON_CONFIGURATION0.STATTIMEROVFL.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[22:22]"});
   CFG_SMON_CONFIGURATION0.RSVZ1.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[23:23]"});
   CFG_SMON_CONFIGURATION0.TIMER_PRESCALE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[28:24]"});
   CFG_SMON_CONFIGURATION0.RSVZ2.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[29:29]"});
   CFG_SMON_CONFIGURATION0.VERSION.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_CONFIGURATION1";
    `endif
    CFG_SMON_CONFIGURATION1 = hqm_aqed_pipe_bridge_CFG_SMON_CONFIGURATION1_reg::type_id::create("CFG_SMON_CONFIGURATION1", this);
    CFG_SMON_CONFIGURATION1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000060, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_CONFIGURATION1.set_space_addr("MSG", 32'h0C000060);
    CFG_SMON_CONFIGURATION1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_CONFIGURATION1.set_space_addr("MEM-SB",28'hC000060);
    CFG_SMON_CONFIGURATION1.set_space_addr("MEM", 32'h0C000060);
      CFG_SMON_CONFIGURATION1.set_space("MEM");
      CFG_SMON_CONFIGURATION1.set_msg_opcode("MEM-SB");
      CFG_SMON_CONFIGURATION1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_CONFIGURATION1.set_bar(4'h2, "MEM-SB");
      CFG_SMON_CONFIGURATION1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_CONFIGURATION1.set_user_attribute("diag_reg", "0");
      CFG_SMON_CONFIGURATION1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_CONFIGURATION1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_CONFIGURATION1:dont_test") ) CFG_SMON_CONFIGURATION1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_CONFIGURATION1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_CONFIGURATION1"));
      end
   CFG_SMON_CONFIGURATION1.MODE0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[7:0]"});
   CFG_SMON_CONFIGURATION1.MODE1.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[15:8]"});
   CFG_SMON_CONFIGURATION1.RSVZ0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_MAXIMUM_TIMER";
    `endif
    CFG_SMON_MAXIMUM_TIMER = hqm_aqed_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg::type_id::create("CFG_SMON_MAXIMUM_TIMER", this);
    CFG_SMON_MAXIMUM_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000064, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("MSG", 32'h0C000064);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("MEM-SB",28'hC000064);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("MEM", 32'h0C000064);
      CFG_SMON_MAXIMUM_TIMER.set_space("MEM");
      CFG_SMON_MAXIMUM_TIMER.set_msg_opcode("MEM-SB");
      CFG_SMON_MAXIMUM_TIMER.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_MAXIMUM_TIMER.set_bar(4'h2, "MEM-SB");
      CFG_SMON_MAXIMUM_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_MAXIMUM_TIMER.set_user_attribute("diag_reg", "0");
      CFG_SMON_MAXIMUM_TIMER.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_MAXIMUM_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_MAXIMUM_TIMER:dont_test") ) CFG_SMON_MAXIMUM_TIMER.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_MAXIMUM_TIMER )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_MAXIMUM_TIMER"));
      end
   CFG_SMON_MAXIMUM_TIMER.MAXVALUE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_maxval_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_TIMER";
    `endif
    CFG_SMON_TIMER = hqm_aqed_pipe_bridge_CFG_SMON_TIMER_reg::type_id::create("CFG_SMON_TIMER", this);
    CFG_SMON_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000068, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_TIMER.set_space_addr("MSG", 32'h0C000068);
    CFG_SMON_TIMER.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_TIMER.set_space_addr("MEM-SB",28'hC000068);
    CFG_SMON_TIMER.set_space_addr("MEM", 32'h0C000068);
      CFG_SMON_TIMER.set_space("MEM");
      CFG_SMON_TIMER.set_msg_opcode("MEM-SB");
      CFG_SMON_TIMER.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_TIMER.set_bar(4'h2, "MEM-SB");
      CFG_SMON_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_TIMER.set_user_attribute("diag_reg", "0");
      CFG_SMON_TIMER.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_TIMER:dont_test") ) CFG_SMON_TIMER.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_TIMER )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_TIMER"));
      end
   CFG_SMON_TIMER.TIMER.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_smon.i_hqm_AW_smon.reg_smon_timer_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SYNDROME_00";
    `endif
    CFG_SYNDROME_00 = hqm_aqed_pipe_bridge_CFG_SYNDROME_00_reg::type_id::create("CFG_SYNDROME_00", this);
    CFG_SYNDROME_00.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00006C, 32, 32'b00000000000000000000000000000000);
    CFG_SYNDROME_00.set_space_addr("MSG", 32'h0C00006C);
    CFG_SYNDROME_00.set_space_addr("msg_bus_port", 'h21);
    CFG_SYNDROME_00.set_space_addr("MEM-SB",28'hC00006C);
    CFG_SYNDROME_00.set_space_addr("MEM", 32'h0C00006C);
      CFG_SYNDROME_00.set_space("MEM");
      CFG_SYNDROME_00.set_msg_opcode("MEM-SB");
      CFG_SYNDROME_00.set_fid(4'h0, "MEM-SB");
  	CFG_SYNDROME_00.set_bar(4'h2, "MEM-SB");
      CFG_SYNDROME_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SYNDROME_00.set_user_attribute("diag_reg", "0");
      CFG_SYNDROME_00.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SYNDROME_00.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SYNDROME_00:dont_test") ) CFG_SYNDROME_00.set_test_reg(1'b0);
      if (!add_reg( CFG_SYNDROME_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SYNDROME_00"));
      end
   CFG_SYNDROME_00.SYNDDATA.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
   CFG_SYNDROME_00.SYNDTYPE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
   CFG_SYNDROME_00.SYNDVALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SYNDROME_01";
    `endif
    CFG_SYNDROME_01 = hqm_aqed_pipe_bridge_CFG_SYNDROME_01_reg::type_id::create("CFG_SYNDROME_01", this);
    CFG_SYNDROME_01.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000070, 32, 32'b00000000000000000000000000000000);
    CFG_SYNDROME_01.set_space_addr("MSG", 32'h0C000070);
    CFG_SYNDROME_01.set_space_addr("msg_bus_port", 'h21);
    CFG_SYNDROME_01.set_space_addr("MEM-SB",28'hC000070);
    CFG_SYNDROME_01.set_space_addr("MEM", 32'h0C000070);
      CFG_SYNDROME_01.set_space("MEM");
      CFG_SYNDROME_01.set_msg_opcode("MEM-SB");
      CFG_SYNDROME_01.set_fid(4'h0, "MEM-SB");
  	CFG_SYNDROME_01.set_bar(4'h2, "MEM-SB");
      CFG_SYNDROME_01.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SYNDROME_01.set_user_attribute("diag_reg", "0");
      CFG_SYNDROME_01.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SYNDROME_01.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SYNDROME_01:dont_test") ) CFG_SYNDROME_01.set_test_reg(1'b0);
      if (!add_reg( CFG_SYNDROME_01 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SYNDROME_01"));
      end
   CFG_SYNDROME_01.SYNDDATA.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
   CFG_SYNDROME_01.SYNDTYPE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
   CFG_SYNDROME_01.SYNDVALID.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_IDLE";
    `endif
    CFG_UNIT_IDLE = hqm_aqed_pipe_bridge_CFG_UNIT_IDLE_reg::type_id::create("CFG_UNIT_IDLE", this);
    CFG_UNIT_IDLE.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000074, 32, 32'b00000000000000000000000000000011);
    CFG_UNIT_IDLE.set_space_addr("MSG", 32'h0C000074);
    CFG_UNIT_IDLE.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_IDLE.set_space_addr("MEM-SB",28'hC000074);
    CFG_UNIT_IDLE.set_space_addr("MEM", 32'h0C000074);
      CFG_UNIT_IDLE.set_space("MEM");
      CFG_UNIT_IDLE.set_msg_opcode("MEM-SB");
      CFG_UNIT_IDLE.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_IDLE.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_IDLE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_IDLE.set_user_attribute("diag_reg", "0");
      CFG_UNIT_IDLE.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_UNIT_IDLE.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_IDLE.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_IDLE:dont_test") ) CFG_UNIT_IDLE.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_IDLE )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_IDLE"));
      end
   CFG_UNIT_IDLE.PIPE_IDLE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_idle.internal_f[0:0]"});
   CFG_UNIT_IDLE.UNIT_IDLE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_idle.internal_f[1:1]"});
   CFG_UNIT_IDLE.RSVZ0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_idle.internal_f[31:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_TIMEOUT";
    `endif
    CFG_UNIT_TIMEOUT = hqm_aqed_pipe_bridge_CFG_UNIT_TIMEOUT_reg::type_id::create("CFG_UNIT_TIMEOUT", this);
    CFG_UNIT_TIMEOUT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000078, 32, 32'b10000000000000001111111111111111);
    CFG_UNIT_TIMEOUT.set_space_addr("MSG", 32'h0C000078);
    CFG_UNIT_TIMEOUT.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_TIMEOUT.set_space_addr("MEM-SB",28'hC000078);
    CFG_UNIT_TIMEOUT.set_space_addr("MEM", 32'h0C000078);
      CFG_UNIT_TIMEOUT.set_space("MEM");
      CFG_UNIT_TIMEOUT.set_msg_opcode("MEM-SB");
      CFG_UNIT_TIMEOUT.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_TIMEOUT.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_TIMEOUT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_TIMEOUT.set_user_attribute("diag_reg", "0");
      CFG_UNIT_TIMEOUT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_UNIT_TIMEOUT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_UNIT_TIMEOUT:dont_test") ) CFG_UNIT_TIMEOUT.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_TIMEOUT )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_TIMEOUT"));
      end
   CFG_UNIT_TIMEOUT.MULTIPLIER.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_timeout.internal_f[4:0]"});
   CFG_UNIT_TIMEOUT.THRESHOLD.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_timeout.internal_f[15:5]"});
   CFG_UNIT_TIMEOUT.RSVZ0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_timeout.internal_f[30:16]"});
   CFG_UNIT_TIMEOUT.ENABLE.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_unit_timeout.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PATCH_CONTROL";
    `endif
    CFG_PATCH_CONTROL = hqm_aqed_pipe_bridge_CFG_PATCH_CONTROL_reg::type_id::create("CFG_PATCH_CONTROL", this);
    CFG_PATCH_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00007C, 32, 32'b00000000000000000000011101000000);
    CFG_PATCH_CONTROL.set_space_addr("MSG", 32'h0C00007C);
    CFG_PATCH_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_PATCH_CONTROL.set_space_addr("MEM-SB",28'hC00007C);
    CFG_PATCH_CONTROL.set_space_addr("MEM", 32'h0C00007C);
      CFG_PATCH_CONTROL.set_space("MEM");
      CFG_PATCH_CONTROL.set_msg_opcode("MEM-SB");
      CFG_PATCH_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_PATCH_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_PATCH_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PATCH_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_PATCH_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PATCH_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_PATCH_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_PATCH_CONTROL:dont_test") ) CFG_PATCH_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_PATCH_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_PATCH_CONTROL"));
      end
   CFG_PATCH_CONTROL.DELAY_CLOCKOFF.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_patch_control.internal_f[7:0]"});
   CFG_PATCH_CONTROL.DELAY_CLKOFF_BYPASS.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_patch_control.internal_f[13:8]"});
   CFG_PATCH_CONTROL.RSVZ1.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_patch_control.internal_f[15:14]"});
   CFG_PATCH_CONTROL.RSVZ0.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_patch_control.internal_f[30:16]"});
   CFG_PATCH_CONTROL.DISABLE_CLOCKOFF.set_paths({"i_hqm_aqed_pipe_core.i_hqm_aqed_pipe_register_pfcsr.i_hqm_aqed_target_cfg_patch_control.internal_f[31:31]"});

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_AQED_BCAM[%0d]",i);
    `endif
    CFG_AQED_BCAM[i] = hqm_aqed_pipe_bridge_CFG_AQED_BCAM_reg::type_id::create($psprintf("CFG_AQED_BCAM[%0d]",i), this);
    CFG_AQED_BCAM[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E000000 + (i *4)), 32, 32'b00000010000000000000000010000001);
    CFG_AQED_BCAM[i].set_space_addr("MSG",  (32'h0E000000 + (i*4)) );
    CFG_AQED_BCAM[i].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_BCAM[i].set_space_addr("MEM-SB", (28'hE000000 + (i*4)) );
    CFG_AQED_BCAM[i].set_space_addr("MEM",  (32'h0E000000 + (i*4)) );
      CFG_AQED_BCAM[i].set_space("MEM");
      CFG_AQED_BCAM[i].set_msg_opcode("MEM-SB");
      CFG_AQED_BCAM[i].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_BCAM[i].set_bar(4'h2, "MEM-SB");
      CFG_AQED_BCAM[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_BCAM[i].set_user_attribute("diag_reg", "0");
      CFG_AQED_BCAM[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_AQED_BCAM[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_AQED_BCAM[%0d]:dont_test",i)) ) CFG_AQED_BCAM[i].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_BCAM[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_AQED_BCAM[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_AQED_WRD0[%0d]",i);
    `endif
    CFG_AQED_WRD0[i] = hqm_aqed_pipe_bridge_CFG_AQED_WRD0_reg::type_id::create($psprintf("CFG_AQED_WRD0[%0d]",i), this);
    CFG_AQED_WRD0[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E010000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_AQED_WRD0[i].set_space_addr("MSG",  (32'h0E010000 + (i*4)) );
    CFG_AQED_WRD0[i].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_WRD0[i].set_space_addr("MEM-SB", (28'hE010000 + (i*4)) );
    CFG_AQED_WRD0[i].set_space_addr("MEM",  (32'h0E010000 + (i*4)) );
      CFG_AQED_WRD0[i].set_space("MEM");
      CFG_AQED_WRD0[i].set_msg_opcode("MEM-SB");
      CFG_AQED_WRD0[i].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_WRD0[i].set_bar(4'h2, "MEM-SB");
      CFG_AQED_WRD0[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_WRD0[i].set_user_attribute("diag_reg", "0");
      CFG_AQED_WRD0[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_AQED_WRD0[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_AQED_WRD0[%0d]:dont_test",i)) ) CFG_AQED_WRD0[i].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_WRD0[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_AQED_WRD0[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_AQED_WRD1[%0d]",i);
    `endif
    CFG_AQED_WRD1[i] = hqm_aqed_pipe_bridge_CFG_AQED_WRD1_reg::type_id::create($psprintf("CFG_AQED_WRD1[%0d]",i), this);
    CFG_AQED_WRD1[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E020000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_AQED_WRD1[i].set_space_addr("MSG",  (32'h0E020000 + (i*4)) );
    CFG_AQED_WRD1[i].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_WRD1[i].set_space_addr("MEM-SB", (28'hE020000 + (i*4)) );
    CFG_AQED_WRD1[i].set_space_addr("MEM",  (32'h0E020000 + (i*4)) );
      CFG_AQED_WRD1[i].set_space("MEM");
      CFG_AQED_WRD1[i].set_msg_opcode("MEM-SB");
      CFG_AQED_WRD1[i].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_WRD1[i].set_bar(4'h2, "MEM-SB");
      CFG_AQED_WRD1[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_WRD1[i].set_user_attribute("diag_reg", "0");
      CFG_AQED_WRD1[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_AQED_WRD1[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_AQED_WRD1[%0d]:dont_test",i)) ) CFG_AQED_WRD1[i].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_WRD1[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_AQED_WRD1[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_AQED_WRD2[%0d]",i);
    `endif
    CFG_AQED_WRD2[i] = hqm_aqed_pipe_bridge_CFG_AQED_WRD2_reg::type_id::create($psprintf("CFG_AQED_WRD2[%0d]",i), this);
    CFG_AQED_WRD2[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E030000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_AQED_WRD2[i].set_space_addr("MSG",  (32'h0E030000 + (i*4)) );
    CFG_AQED_WRD2[i].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_WRD2[i].set_space_addr("MEM-SB", (28'hE030000 + (i*4)) );
    CFG_AQED_WRD2[i].set_space_addr("MEM",  (32'h0E030000 + (i*4)) );
      CFG_AQED_WRD2[i].set_space("MEM");
      CFG_AQED_WRD2[i].set_msg_opcode("MEM-SB");
      CFG_AQED_WRD2[i].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_WRD2[i].set_bar(4'h2, "MEM-SB");
      CFG_AQED_WRD2[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_WRD2[i].set_user_attribute("diag_reg", "0");
      CFG_AQED_WRD2[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_AQED_WRD2[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_AQED_WRD2[%0d]:dont_test",i)) ) CFG_AQED_WRD2[i].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_WRD2[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_AQED_WRD2[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_AQED_WRD3[%0d]",i);
    `endif
    CFG_AQED_WRD3[i] = hqm_aqed_pipe_bridge_CFG_AQED_WRD3_reg::type_id::create($psprintf("CFG_AQED_WRD3[%0d]",i), this);
    CFG_AQED_WRD3[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E040000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_AQED_WRD3[i].set_space_addr("MSG",  (32'h0E040000 + (i*4)) );
    CFG_AQED_WRD3[i].set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_WRD3[i].set_space_addr("MEM-SB", (28'hE040000 + (i*4)) );
    CFG_AQED_WRD3[i].set_space_addr("MEM",  (32'h0E040000 + (i*4)) );
      CFG_AQED_WRD3[i].set_space("MEM");
      CFG_AQED_WRD3[i].set_msg_opcode("MEM-SB");
      CFG_AQED_WRD3[i].set_fid(4'h0, "MEM-SB");
  	CFG_AQED_WRD3[i].set_bar(4'h2, "MEM-SB");
      CFG_AQED_WRD3[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_WRD3[i].set_user_attribute("diag_reg", "0");
      CFG_AQED_WRD3[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_AQED_WRD3[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_AQED_WRD3[%0d]:dont_test",i)) ) CFG_AQED_WRD3[i].set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_WRD3[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_AQED_WRD3[%0d]",i)));
      end
   cnt++;
end

  endfunction

 virtual function void print_sv_ral_file();  
    $display("RAL File Type [%s], RAL File Instance [%s], SV File ---> %s", get_type_name(), get_name(), `__FILE__); 
 endfunction 
endclass : hqm_aqed_pipe_bridge_file

// ================================================


`endif
