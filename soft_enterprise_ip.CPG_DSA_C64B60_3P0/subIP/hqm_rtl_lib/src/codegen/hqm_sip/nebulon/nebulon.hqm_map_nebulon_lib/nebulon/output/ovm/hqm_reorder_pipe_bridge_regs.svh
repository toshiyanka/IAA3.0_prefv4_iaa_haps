//                                                                             
// File:            hqm_reorder_pipe_bridge_regs.svh                           
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             


//RAL code compatible with Saola versions: 16.2.06 and newer 

`ifndef RAL_HQM_REORDER_PIPE_BRIDGE_FILE
`define RAL_HQM_REORDER_PIPE_BRIDGE_FILE

class hqm_reorder_pipe_bridge_CFG_GRP_SN_MODE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SN_MODE_0;
  sla_ral_field RSZV0;
  sla_ral_field SN_MODE_1;
  sla_ral_field RSZV1;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_GRP_SN_MODE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN_MODE_0, SN_MODE_0.desired)
     `RAL_FIELD_CP_3(SN_MODE_0, SN_MODE_0.desired, 0,1,2)
     `RAL_FIELD_CP(RSZV0, RSZV0.desired)
     `RAL_FIELD_CP_5(RSZV0, RSZV0.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(SN_MODE_1, SN_MODE_1.desired)
     `RAL_FIELD_CP_3(SN_MODE_1, SN_MODE_1.desired, 0,1,2)
     `RAL_FIELD_CP(RSZV1, RSZV1.desired)
     `RAL_FIELD_CP_16(RSZV1, RSZV1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_5(RSZV1, RSZV1.desired, 16,17,18,19,20)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN_MODE_0, SN_MODE_0.actual)
     `RAL_FIELD_CP_3(SN_MODE_0, SN_MODE_0.actual, 0,1,2)
     `RAL_FIELD_CP(RSZV0, RSZV0.actual)
     `RAL_FIELD_CP_5(RSZV0, RSZV0.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(SN_MODE_1, SN_MODE_1.actual)
     `RAL_FIELD_CP_3(SN_MODE_1, SN_MODE_1.actual, 0,1,2)
     `RAL_FIELD_CP(RSZV1, RSZV1.actual)
     `RAL_FIELD_CP_16(RSZV1, RSZV1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_5(RSZV1, RSZV1.actual, 16,17,18,19,20)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SN_MODE_0 = new("SN_MODE_0", "RW", 3, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_grp_sn_mode.internal_f[2:0]"});
    SN_MODE_0.set_powerwell("vcccfn_gated");
    SN_MODE_0.set_rand_mode(0);
   SN_MODE_0.set_reset_signame("hqm_inp_gated_rst_n");
    SN_MODE_0.set_logical_path("HQMID");
    void'(add_field( SN_MODE_0 ));

    RSZV0 = new("RSZV0", "RW", 5, 3, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_grp_sn_mode.internal_f[7:3]"});
    RSZV0.set_powerwell("vcccfn_gated");
    RSZV0.set_rand_mode(0);
   RSZV0.set_reset_signame("hqm_inp_gated_rst_n");
    RSZV0.set_logical_path("HQMID");
    void'(add_field( RSZV0 ));

    SN_MODE_1 = new("SN_MODE_1", "RW", 3, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_grp_sn_mode.internal_f[10:8]"});
    SN_MODE_1.set_powerwell("vcccfn_gated");
    SN_MODE_1.set_rand_mode(0);
   SN_MODE_1.set_reset_signame("hqm_inp_gated_rst_n");
    SN_MODE_1.set_logical_path("HQMID");
    void'(add_field( SN_MODE_1 ));

    RSZV1 = new("RSZV1", "RW", 21, 11, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_grp_sn_mode.internal_f[31:11]"});
    RSZV1.set_powerwell("vcccfn_gated");
    RSZV1.set_rand_mode(0);
   RSZV1.set_reset_signame("hqm_inp_gated_rst_n");
    RSZV1.set_logical_path("HQMID");
    void'(add_field( RSZV1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_GRP_SN_MODE_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_GRP_SN_MODE_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_ROP_CSR_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ENABLE0;
  sla_ral_field ENABLE1;
  sla_ral_field ENABLE2;
  sla_ral_field ENABLE3;
  sla_ral_field ENABLE4;
  sla_ral_field ENABLE5;
  sla_ral_field ENABLE6;
  sla_ral_field ENABLE7;
  sla_ral_field ENABLE8;
  sla_ral_field ENABLE9;
  sla_ral_field ENABLE10;
  sla_ral_field ENABLE11;
  sla_ral_field ENABLE12;
  sla_ral_field ENABLE13;
  sla_ral_field RSZV0;
  sla_ral_field VAS_RESET_DISABLE;
  sla_ral_field SB_ECC_CAP_EN;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_ROP_CSR_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ENABLE0, ENABLE0.desired)
     `RAL_FIELD_CP_1(ENABLE0, ENABLE0.desired, 0)
     `RAL_FIELD_CP(ENABLE1, ENABLE1.desired)
     `RAL_FIELD_CP_1(ENABLE1, ENABLE1.desired, 0)
     `RAL_FIELD_CP(ENABLE2, ENABLE2.desired)
     `RAL_FIELD_CP_1(ENABLE2, ENABLE2.desired, 0)
     `RAL_FIELD_CP(ENABLE3, ENABLE3.desired)
     `RAL_FIELD_CP_1(ENABLE3, ENABLE3.desired, 0)
     `RAL_FIELD_CP(ENABLE4, ENABLE4.desired)
     `RAL_FIELD_CP_1(ENABLE4, ENABLE4.desired, 0)
     `RAL_FIELD_CP(ENABLE5, ENABLE5.desired)
     `RAL_FIELD_CP_1(ENABLE5, ENABLE5.desired, 0)
     `RAL_FIELD_CP(ENABLE6, ENABLE6.desired)
     `RAL_FIELD_CP_1(ENABLE6, ENABLE6.desired, 0)
     `RAL_FIELD_CP(ENABLE7, ENABLE7.desired)
     `RAL_FIELD_CP_1(ENABLE7, ENABLE7.desired, 0)
     `RAL_FIELD_CP(ENABLE8, ENABLE8.desired)
     `RAL_FIELD_CP_1(ENABLE8, ENABLE8.desired, 0)
     `RAL_FIELD_CP(ENABLE9, ENABLE9.desired)
     `RAL_FIELD_CP_1(ENABLE9, ENABLE9.desired, 0)
     `RAL_FIELD_CP(ENABLE10, ENABLE10.desired)
     `RAL_FIELD_CP_1(ENABLE10, ENABLE10.desired, 0)
     `RAL_FIELD_CP(ENABLE11, ENABLE11.desired)
     `RAL_FIELD_CP_1(ENABLE11, ENABLE11.desired, 0)
     `RAL_FIELD_CP(ENABLE12, ENABLE12.desired)
     `RAL_FIELD_CP_1(ENABLE12, ENABLE12.desired, 0)
     `RAL_FIELD_CP(ENABLE13, ENABLE13.desired)
     `RAL_FIELD_CP_1(ENABLE13, ENABLE13.desired, 0)
     `RAL_FIELD_CP(RSZV0, RSZV0.desired)
     `RAL_FIELD_CP_16(RSZV0, RSZV0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(VAS_RESET_DISABLE, VAS_RESET_DISABLE.desired)
     `RAL_FIELD_CP_1(VAS_RESET_DISABLE, VAS_RESET_DISABLE.desired, 0)
     `RAL_FIELD_CP(SB_ECC_CAP_EN, SB_ECC_CAP_EN.desired)
     `RAL_FIELD_CP_1(SB_ECC_CAP_EN, SB_ECC_CAP_EN.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ENABLE0, ENABLE0.actual)
     `RAL_FIELD_CP_1(ENABLE0, ENABLE0.actual, 0)
     `RAL_FIELD_CP(ENABLE1, ENABLE1.actual)
     `RAL_FIELD_CP_1(ENABLE1, ENABLE1.actual, 0)
     `RAL_FIELD_CP(ENABLE2, ENABLE2.actual)
     `RAL_FIELD_CP_1(ENABLE2, ENABLE2.actual, 0)
     `RAL_FIELD_CP(ENABLE3, ENABLE3.actual)
     `RAL_FIELD_CP_1(ENABLE3, ENABLE3.actual, 0)
     `RAL_FIELD_CP(ENABLE4, ENABLE4.actual)
     `RAL_FIELD_CP_1(ENABLE4, ENABLE4.actual, 0)
     `RAL_FIELD_CP(ENABLE5, ENABLE5.actual)
     `RAL_FIELD_CP_1(ENABLE5, ENABLE5.actual, 0)
     `RAL_FIELD_CP(ENABLE6, ENABLE6.actual)
     `RAL_FIELD_CP_1(ENABLE6, ENABLE6.actual, 0)
     `RAL_FIELD_CP(ENABLE7, ENABLE7.actual)
     `RAL_FIELD_CP_1(ENABLE7, ENABLE7.actual, 0)
     `RAL_FIELD_CP(ENABLE8, ENABLE8.actual)
     `RAL_FIELD_CP_1(ENABLE8, ENABLE8.actual, 0)
     `RAL_FIELD_CP(ENABLE9, ENABLE9.actual)
     `RAL_FIELD_CP_1(ENABLE9, ENABLE9.actual, 0)
     `RAL_FIELD_CP(ENABLE10, ENABLE10.actual)
     `RAL_FIELD_CP_1(ENABLE10, ENABLE10.actual, 0)
     `RAL_FIELD_CP(ENABLE11, ENABLE11.actual)
     `RAL_FIELD_CP_1(ENABLE11, ENABLE11.actual, 0)
     `RAL_FIELD_CP(ENABLE12, ENABLE12.actual)
     `RAL_FIELD_CP_1(ENABLE12, ENABLE12.actual, 0)
     `RAL_FIELD_CP(ENABLE13, ENABLE13.actual)
     `RAL_FIELD_CP_1(ENABLE13, ENABLE13.actual, 0)
     `RAL_FIELD_CP(RSZV0, RSZV0.actual)
     `RAL_FIELD_CP_16(RSZV0, RSZV0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(VAS_RESET_DISABLE, VAS_RESET_DISABLE.actual)
     `RAL_FIELD_CP_1(VAS_RESET_DISABLE, VAS_RESET_DISABLE.actual, 0)
     `RAL_FIELD_CP(SB_ECC_CAP_EN, SB_ECC_CAP_EN.actual)
     `RAL_FIELD_CP_1(SB_ECC_CAP_EN, SB_ECC_CAP_EN.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ENABLE0 = new("ENABLE0", "RW", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[0:0]"});
    ENABLE0.set_powerwell("vcccfn_gated");
    ENABLE0.set_rand_mode(0);
   ENABLE0.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE0.set_logical_path("HQMID");
    void'(add_field( ENABLE0 ));

    ENABLE1 = new("ENABLE1", "RW", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[1:1]"});
    ENABLE1.set_powerwell("vcccfn_gated");
    ENABLE1.set_rand_mode(0);
   ENABLE1.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE1.set_logical_path("HQMID");
    void'(add_field( ENABLE1 ));

    ENABLE2 = new("ENABLE2", "RW", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[2:2]"});
    ENABLE2.set_powerwell("vcccfn_gated");
    ENABLE2.set_rand_mode(0);
   ENABLE2.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE2.set_logical_path("HQMID");
    void'(add_field( ENABLE2 ));

    ENABLE3 = new("ENABLE3", "RW", 1, 3, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[3:3]"});
    ENABLE3.set_powerwell("vcccfn_gated");
    ENABLE3.set_rand_mode(0);
   ENABLE3.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE3.set_logical_path("HQMID");
    void'(add_field( ENABLE3 ));

    ENABLE4 = new("ENABLE4", "RW", 1, 4, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[4:4]"});
    ENABLE4.set_powerwell("vcccfn_gated");
    ENABLE4.set_rand_mode(0);
   ENABLE4.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE4.set_logical_path("HQMID");
    void'(add_field( ENABLE4 ));

    ENABLE5 = new("ENABLE5", "RW", 1, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[5:5]"});
    ENABLE5.set_powerwell("vcccfn_gated");
    ENABLE5.set_rand_mode(0);
   ENABLE5.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE5.set_logical_path("HQMID");
    void'(add_field( ENABLE5 ));

    ENABLE6 = new("ENABLE6", "RW", 1, 6, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[6:6]"});
    ENABLE6.set_powerwell("vcccfn_gated");
    ENABLE6.set_rand_mode(0);
   ENABLE6.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE6.set_logical_path("HQMID");
    void'(add_field( ENABLE6 ));

    ENABLE7 = new("ENABLE7", "RW", 1, 7, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[7:7]"});
    ENABLE7.set_powerwell("vcccfn_gated");
    ENABLE7.set_rand_mode(0);
   ENABLE7.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE7.set_logical_path("HQMID");
    void'(add_field( ENABLE7 ));

    ENABLE8 = new("ENABLE8", "RW", 1, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[8:8]"});
    ENABLE8.set_powerwell("vcccfn_gated");
    ENABLE8.set_rand_mode(0);
   ENABLE8.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE8.set_logical_path("HQMID");
    void'(add_field( ENABLE8 ));

    ENABLE9 = new("ENABLE9", "RW", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[9:9]"});
    ENABLE9.set_powerwell("vcccfn_gated");
    ENABLE9.set_rand_mode(0);
   ENABLE9.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE9.set_logical_path("HQMID");
    void'(add_field( ENABLE9 ));

    ENABLE10 = new("ENABLE10", "RW", 1, 10, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[10:10]"});
    ENABLE10.set_powerwell("vcccfn_gated");
    ENABLE10.set_rand_mode(0);
   ENABLE10.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE10.set_logical_path("HQMID");
    void'(add_field( ENABLE10 ));

    ENABLE11 = new("ENABLE11", "RW", 1, 11, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[11:11]"});
    ENABLE11.set_powerwell("vcccfn_gated");
    ENABLE11.set_rand_mode(0);
   ENABLE11.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE11.set_logical_path("HQMID");
    void'(add_field( ENABLE11 ));

    ENABLE12 = new("ENABLE12", "RW", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[12:12]"});
    ENABLE12.set_powerwell("vcccfn_gated");
    ENABLE12.set_rand_mode(0);
   ENABLE12.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE12.set_logical_path("HQMID");
    void'(add_field( ENABLE12 ));

    ENABLE13 = new("ENABLE13", "RW", 1, 13, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[13:13]"});
    ENABLE13.set_powerwell("vcccfn_gated");
    ENABLE13.set_rand_mode(0);
   ENABLE13.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE13.set_logical_path("HQMID");
    void'(add_field( ENABLE13 ));

    RSZV0 = new("RSZV0", "RW", 16, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[29:14]"});
    RSZV0.set_powerwell("vcccfn_gated");
    RSZV0.set_rand_mode(0);
   RSZV0.set_reset_signame("hqm_inp_gated_rst_n");
    RSZV0.set_logical_path("HQMID");
    void'(add_field( RSZV0 ));

    VAS_RESET_DISABLE = new("VAS_RESET_DISABLE", "RW", 1, 30, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[30:30]"});
    VAS_RESET_DISABLE.set_powerwell("vcccfn_gated");
    VAS_RESET_DISABLE.set_rand_mode(0);
   VAS_RESET_DISABLE.set_reset_signame("hqm_inp_gated_rst_n");
    VAS_RESET_DISABLE.set_logical_path("HQMID");
    void'(add_field( VAS_RESET_DISABLE ));

    SB_ECC_CAP_EN = new("SB_ECC_CAP_EN", "RW", 1, 31, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[31:31]"});
    SB_ECC_CAP_EN.set_powerwell("vcccfn_gated");
    SB_ECC_CAP_EN.set_rand_mode(0);
   SB_ECC_CAP_EN.set_reset_signame("hqm_inp_gated_rst_n");
    SB_ECC_CAP_EN.set_logical_path("HQMID");
    void'(add_field( SB_ECC_CAP_EN ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_ROP_CSR_CONTROL_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_ROP_CSR_CONTROL_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_UNIT_VERSION_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNIT_VERSION;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_UNIT_VERSION_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.desired)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.actual)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNIT_VERSION = new("UNIT_VERSION", "RO", 8, 24, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_version.status[31:24]"});
    UNIT_VERSION.set_powerwell("vcccfn_gated");
    UNIT_VERSION.set_rand_mode(0);
   UNIT_VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT_VERSION.set_logical_path("HQMID");
    void'(add_field( UNIT_VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_UNIT_VERSION_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_UNIT_VERSION_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_GRP_0_SLOT_SHIFT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CHANGE;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_GRP_0_SLOT_SHIFT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHANGE, CHANGE.desired)
     `RAL_FIELD_CP_10(CHANGE, CHANGE.desired, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHANGE, CHANGE.actual)
     `RAL_FIELD_CP_10(CHANGE, CHANGE.actual, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CHANGE = new("CHANGE", "RW/V", 10, 0, {""});
    CHANGE.set_powerwell("vcccfn_gated");
    CHANGE.set_rand_mode(0);
   CHANGE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CHANGE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_GRP_0_SLOT_SHIFT_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_GRP_0_SLOT_SHIFT_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_GRP_1_SLOT_SHIFT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CHANGE;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_GRP_1_SLOT_SHIFT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHANGE, CHANGE.desired)
     `RAL_FIELD_CP_10(CHANGE, CHANGE.desired, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHANGE, CHANGE.actual)
     `RAL_FIELD_CP_10(CHANGE, CHANGE.actual, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CHANGE = new("CHANGE", "RW/V", 10, 0, {""});
    CHANGE.set_powerwell("vcccfn_gated");
    CHANGE.set_rand_mode(0);
   CHANGE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CHANGE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_GRP_1_SLOT_SHIFT_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_GRP_1_SLOT_SHIFT_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_CONTROL_GENERAL_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNIT_SINGLE_STEP_MODE;
  sla_ral_field RR_EN;
  sla_ral_field RSZV0;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_CONTROL_GENERAL_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_SINGLE_STEP_MODE, UNIT_SINGLE_STEP_MODE.desired)
     `RAL_FIELD_CP_1(UNIT_SINGLE_STEP_MODE, UNIT_SINGLE_STEP_MODE.desired, 0)
     `RAL_FIELD_CP(RR_EN, RR_EN.desired)
     `RAL_FIELD_CP_1(RR_EN, RR_EN.desired, 0)
     `RAL_FIELD_CP(RSZV0, RSZV0.desired)
     `RAL_FIELD_CP_16(RSZV0, RSZV0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSZV0, RSZV0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_SINGLE_STEP_MODE, UNIT_SINGLE_STEP_MODE.actual)
     `RAL_FIELD_CP_1(UNIT_SINGLE_STEP_MODE, UNIT_SINGLE_STEP_MODE.actual, 0)
     `RAL_FIELD_CP(RR_EN, RR_EN.actual)
     `RAL_FIELD_CP_1(RR_EN, RR_EN.actual, 0)
     `RAL_FIELD_CP(RSZV0, RSZV0.actual)
     `RAL_FIELD_CP_16(RSZV0, RSZV0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSZV0, RSZV0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNIT_SINGLE_STEP_MODE = new("UNIT_SINGLE_STEP_MODE", "RW", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_control_general_0.internal_f[0:0]"});
    UNIT_SINGLE_STEP_MODE.set_powerwell("vcccfn_gated");
    UNIT_SINGLE_STEP_MODE.set_rand_mode(0);
   UNIT_SINGLE_STEP_MODE.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT_SINGLE_STEP_MODE.set_logical_path("HQMID");
    void'(add_field( UNIT_SINGLE_STEP_MODE ));

    RR_EN = new("RR_EN", "RW", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_control_general_0.internal_f[1:1]"});
    RR_EN.set_powerwell("vcccfn_gated");
    RR_EN.set_rand_mode(0);
   RR_EN.set_reset_signame("hqm_inp_gated_rst_n");
    RR_EN.set_logical_path("HQMID");
    void'(add_field( RR_EN ));

    RSZV0 = new("RSZV0", "RW", 30, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_control_general_0.internal_f[31:2]"});
    RSZV0.set_powerwell("vcccfn_gated");
    RSZV0.set_rand_mode(0);
   RSZV0.set_reset_signame("hqm_inp_gated_rst_n");
    RSZV0.set_logical_path("HQMID");
    void'(add_field( RSZV0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_CONTROL_GENERAL_0_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_CONTROL_GENERAL_0_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CHP_ROP_HCW_DB_STATUS;
  sla_ral_field LSP_REORDERCMP_DB_STATUS;
  sla_ral_field CHP_ROP_HCW_DB2_STATUS;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHP_ROP_HCW_DB_STATUS, CHP_ROP_HCW_DB_STATUS.desired)
     `RAL_FIELD_CP_3(CHP_ROP_HCW_DB_STATUS, CHP_ROP_HCW_DB_STATUS.desired, 0,1,2)
     `RAL_FIELD_CP(LSP_REORDERCMP_DB_STATUS, LSP_REORDERCMP_DB_STATUS.desired)
     `RAL_FIELD_CP_3(LSP_REORDERCMP_DB_STATUS, LSP_REORDERCMP_DB_STATUS.desired, 0,1,2)
     `RAL_FIELD_CP(CHP_ROP_HCW_DB2_STATUS, CHP_ROP_HCW_DB2_STATUS.desired)
     `RAL_FIELD_CP_3(CHP_ROP_HCW_DB2_STATUS, CHP_ROP_HCW_DB2_STATUS.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHP_ROP_HCW_DB_STATUS, CHP_ROP_HCW_DB_STATUS.actual)
     `RAL_FIELD_CP_3(CHP_ROP_HCW_DB_STATUS, CHP_ROP_HCW_DB_STATUS.actual, 0,1,2)
     `RAL_FIELD_CP(LSP_REORDERCMP_DB_STATUS, LSP_REORDERCMP_DB_STATUS.actual)
     `RAL_FIELD_CP_3(LSP_REORDERCMP_DB_STATUS, LSP_REORDERCMP_DB_STATUS.actual, 0,1,2)
     `RAL_FIELD_CP(CHP_ROP_HCW_DB2_STATUS, CHP_ROP_HCW_DB2_STATUS.actual)
     `RAL_FIELD_CP_3(CHP_ROP_HCW_DB2_STATUS, CHP_ROP_HCW_DB2_STATUS.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CHP_ROP_HCW_DB_STATUS = new("CHP_ROP_HCW_DB_STATUS", "RO/V", 3, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_diagnostic_aw_status.status[2:0]"});
    CHP_ROP_HCW_DB_STATUS.set_powerwell("vcccfn_gated");
    CHP_ROP_HCW_DB_STATUS.set_rand_mode(0);
   CHP_ROP_HCW_DB_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_ROP_HCW_DB_STATUS.set_logical_path("HQMID");
    void'(add_field( CHP_ROP_HCW_DB_STATUS ));

    LSP_REORDERCMP_DB_STATUS = new("LSP_REORDERCMP_DB_STATUS", "RO/V", 3, 3, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_diagnostic_aw_status.status[5:3]"});
    LSP_REORDERCMP_DB_STATUS.set_powerwell("vcccfn_gated");
    LSP_REORDERCMP_DB_STATUS.set_rand_mode(0);
   LSP_REORDERCMP_DB_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_REORDERCMP_DB_STATUS.set_logical_path("HQMID");
    void'(add_field( LSP_REORDERCMP_DB_STATUS ));

    CHP_ROP_HCW_DB2_STATUS = new("CHP_ROP_HCW_DB2_STATUS", "RO/V", 3, 6, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_diagnostic_aw_status.status[8:6]"});
    CHP_ROP_HCW_DB2_STATUS.set_powerwell("vcccfn_gated");
    CHP_ROP_HCW_DB2_STATUS.set_rand_mode(0);
   CHP_ROP_HCW_DB2_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_ROP_HCW_DB2_STATUS.set_logical_path("HQMID");
    void'(add_field( CHP_ROP_HCW_DB2_STATUS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_CHP_ROP_HCW_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_CHP_ROP_HCW_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_CHP_ROP_HCW_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_CHP_ROP_HCW_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_DIR_RPLY_REQ_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_DIR_RPLY_REQ_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_DIR_RPLY_REQ_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_DIR_RPLY_REQ_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LDB_RPLY_REQ_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LDB_RPLY_REQ_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LDB_RPLY_REQ_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LDB_RPLY_REQ_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LSP_REORDERCMP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LSP_REORDERCMP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LSP_REORDERCMP_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LSP_REORDERCMP_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_COMPLETE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_COMPLETE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_COMPLETE_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_COMPLETE_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_ORDERED_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_ORDERED_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_ORDERED_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_ORDERED_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_FRAG_INTEGRITY_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INTEGRITY_COUNT;
  sla_ral_field RSZV0;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_FRAG_INTEGRITY_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INTEGRITY_COUNT, INTEGRITY_COUNT.desired)
     `RAL_FIELD_CP_16(INTEGRITY_COUNT, INTEGRITY_COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSZV0, RSZV0.desired)
     `RAL_FIELD_CP_16(RSZV0, RSZV0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INTEGRITY_COUNT, INTEGRITY_COUNT.actual)
     `RAL_FIELD_CP_16(INTEGRITY_COUNT, INTEGRITY_COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSZV0, RSZV0.actual)
     `RAL_FIELD_CP_16(RSZV0, RSZV0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INTEGRITY_COUNT = new("INTEGRITY_COUNT", "RO/V", 16, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_frag_integrity_count.status[15:0]"});
    INTEGRITY_COUNT.set_powerwell("vcccfn_gated");
    INTEGRITY_COUNT.set_rand_mode(0);
   INTEGRITY_COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    INTEGRITY_COUNT.set_logical_path("HQMID");
    void'(add_field( INTEGRITY_COUNT ));

    RSZV0 = new("RSZV0", "RO/V", 16, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_frag_integrity_count.status[31:16]"});
    RSZV0.set_powerwell("vcccfn_gated");
    RSZV0.set_rand_mode(0);
   RSZV0.set_reset_signame("hqm_inp_gated_rst_n");
    RSZV0.set_logical_path("HQMID");
    void'(add_field( RSZV0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_FRAG_INTEGRITY_COUNT_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_FRAG_INTEGRITY_COUNT_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field DUTY;
  sla_ral_field PERIOD;
  sla_ral_field PROB1ST;
  sla_ral_field PROB2ND;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(DUTY, DUTY.desired)
     `RAL_FIELD_CP_3(DUTY, DUTY.desired, 0,1,2)
     `RAL_FIELD_CP(PERIOD, PERIOD.desired)
     `RAL_FIELD_CP_11(PERIOD, PERIOD.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(PROB1ST, PROB1ST.desired)
     `RAL_FIELD_CP_8(PROB1ST, PROB1ST.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PROB2ND, PROB2ND.desired)
     `RAL_FIELD_CP_8(PROB2ND, PROB2ND.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(DUTY, DUTY.actual)
     `RAL_FIELD_CP_3(DUTY, DUTY.actual, 0,1,2)
     `RAL_FIELD_CP(PERIOD, PERIOD.actual)
     `RAL_FIELD_CP_11(PERIOD, PERIOD.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(PROB1ST, PROB1ST.actual)
     `RAL_FIELD_CP_8(PROB1ST, PROB1ST.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PROB2ND, PROB2ND.actual)
     `RAL_FIELD_CP_8(PROB2ND, PROB2ND.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_control.internal_f[1:0]"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    DUTY = new("DUTY", "RW", 3, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_control.internal_f[4:2]"});
    DUTY.set_powerwell("vcccfn_gated");
    DUTY.set_rand_mode(0);
   DUTY.set_reset_signame("hqm_inp_gated_rst_n");
    DUTY.set_logical_path("HQMID");
    void'(add_field( DUTY ));

    PERIOD = new("PERIOD", "RW", 11, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_control.internal_f[15:5]"});
    PERIOD.set_powerwell("vcccfn_gated");
    PERIOD.set_rand_mode(0);
   PERIOD.set_reset_signame("hqm_inp_gated_rst_n");
    PERIOD.set_logical_path("HQMID");
    void'(add_field( PERIOD ));

    PROB1ST = new("PROB1ST", "RW", 8, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_control.internal_f[23:16]"});
    PROB1ST.set_powerwell("vcccfn_gated");
    PROB1ST.set_rand_mode(0);
   PROB1ST.set_reset_signame("hqm_inp_gated_rst_n");
    PROB1ST.set_logical_path("HQMID");
    void'(add_field( PROB1ST ));

    PROB2ND = new("PROB2ND", "RW", 8, 24, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_control.internal_f[31:24]"});
    PROB2ND.set_powerwell("vcccfn_gated");
    PROB2ND.set_rand_mode(0);
   PROB2ND.set_reset_signame("hqm_inp_gated_rst_n");
    PROB2ND.set_logical_path("HQMID");
    void'(add_field( PROB2ND ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_HW_AGITATE_SELECT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field AGG_IF_00;
  sla_ral_field AGG_IF_01;
  sla_ral_field AGG_IF_02;
  sla_ral_field AGG_IF_03;
  sla_ral_field AGG_IF_04;
  sla_ral_field AGG_IF_05;
  sla_ral_field AGG_IF_06;
  sla_ral_field AGG_IF_07;
  sla_ral_field AGG_IF_08;
  sla_ral_field AGG_IF_09;
  sla_ral_field AGG_IF_10;
  sla_ral_field AGG_IF_11;
  sla_ral_field AGG_IF_12;
  sla_ral_field AGG_IF_13;
  sla_ral_field AGG_IF_14;
  sla_ral_field AGG_IF_15;
  sla_ral_field RSVZ;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_HW_AGITATE_SELECT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AGG_IF_00, AGG_IF_00.desired)
     `RAL_FIELD_CP_1(AGG_IF_00, AGG_IF_00.desired, 0)
     `RAL_FIELD_CP(AGG_IF_01, AGG_IF_01.desired)
     `RAL_FIELD_CP_1(AGG_IF_01, AGG_IF_01.desired, 0)
     `RAL_FIELD_CP(AGG_IF_02, AGG_IF_02.desired)
     `RAL_FIELD_CP_1(AGG_IF_02, AGG_IF_02.desired, 0)
     `RAL_FIELD_CP(AGG_IF_03, AGG_IF_03.desired)
     `RAL_FIELD_CP_1(AGG_IF_03, AGG_IF_03.desired, 0)
     `RAL_FIELD_CP(AGG_IF_04, AGG_IF_04.desired)
     `RAL_FIELD_CP_1(AGG_IF_04, AGG_IF_04.desired, 0)
     `RAL_FIELD_CP(AGG_IF_05, AGG_IF_05.desired)
     `RAL_FIELD_CP_1(AGG_IF_05, AGG_IF_05.desired, 0)
     `RAL_FIELD_CP(AGG_IF_06, AGG_IF_06.desired)
     `RAL_FIELD_CP_1(AGG_IF_06, AGG_IF_06.desired, 0)
     `RAL_FIELD_CP(AGG_IF_07, AGG_IF_07.desired)
     `RAL_FIELD_CP_1(AGG_IF_07, AGG_IF_07.desired, 0)
     `RAL_FIELD_CP(AGG_IF_08, AGG_IF_08.desired)
     `RAL_FIELD_CP_1(AGG_IF_08, AGG_IF_08.desired, 0)
     `RAL_FIELD_CP(AGG_IF_09, AGG_IF_09.desired)
     `RAL_FIELD_CP_1(AGG_IF_09, AGG_IF_09.desired, 0)
     `RAL_FIELD_CP(AGG_IF_10, AGG_IF_10.desired)
     `RAL_FIELD_CP_1(AGG_IF_10, AGG_IF_10.desired, 0)
     `RAL_FIELD_CP(AGG_IF_11, AGG_IF_11.desired)
     `RAL_FIELD_CP_1(AGG_IF_11, AGG_IF_11.desired, 0)
     `RAL_FIELD_CP(AGG_IF_12, AGG_IF_12.desired)
     `RAL_FIELD_CP_1(AGG_IF_12, AGG_IF_12.desired, 0)
     `RAL_FIELD_CP(AGG_IF_13, AGG_IF_13.desired)
     `RAL_FIELD_CP_1(AGG_IF_13, AGG_IF_13.desired, 0)
     `RAL_FIELD_CP(AGG_IF_14, AGG_IF_14.desired)
     `RAL_FIELD_CP_1(AGG_IF_14, AGG_IF_14.desired, 0)
     `RAL_FIELD_CP(AGG_IF_15, AGG_IF_15.desired)
     `RAL_FIELD_CP_1(AGG_IF_15, AGG_IF_15.desired, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.desired)
     `RAL_FIELD_CP_16(RSVZ, RSVZ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AGG_IF_00, AGG_IF_00.actual)
     `RAL_FIELD_CP_1(AGG_IF_00, AGG_IF_00.actual, 0)
     `RAL_FIELD_CP(AGG_IF_01, AGG_IF_01.actual)
     `RAL_FIELD_CP_1(AGG_IF_01, AGG_IF_01.actual, 0)
     `RAL_FIELD_CP(AGG_IF_02, AGG_IF_02.actual)
     `RAL_FIELD_CP_1(AGG_IF_02, AGG_IF_02.actual, 0)
     `RAL_FIELD_CP(AGG_IF_03, AGG_IF_03.actual)
     `RAL_FIELD_CP_1(AGG_IF_03, AGG_IF_03.actual, 0)
     `RAL_FIELD_CP(AGG_IF_04, AGG_IF_04.actual)
     `RAL_FIELD_CP_1(AGG_IF_04, AGG_IF_04.actual, 0)
     `RAL_FIELD_CP(AGG_IF_05, AGG_IF_05.actual)
     `RAL_FIELD_CP_1(AGG_IF_05, AGG_IF_05.actual, 0)
     `RAL_FIELD_CP(AGG_IF_06, AGG_IF_06.actual)
     `RAL_FIELD_CP_1(AGG_IF_06, AGG_IF_06.actual, 0)
     `RAL_FIELD_CP(AGG_IF_07, AGG_IF_07.actual)
     `RAL_FIELD_CP_1(AGG_IF_07, AGG_IF_07.actual, 0)
     `RAL_FIELD_CP(AGG_IF_08, AGG_IF_08.actual)
     `RAL_FIELD_CP_1(AGG_IF_08, AGG_IF_08.actual, 0)
     `RAL_FIELD_CP(AGG_IF_09, AGG_IF_09.actual)
     `RAL_FIELD_CP_1(AGG_IF_09, AGG_IF_09.actual, 0)
     `RAL_FIELD_CP(AGG_IF_10, AGG_IF_10.actual)
     `RAL_FIELD_CP_1(AGG_IF_10, AGG_IF_10.actual, 0)
     `RAL_FIELD_CP(AGG_IF_11, AGG_IF_11.actual)
     `RAL_FIELD_CP_1(AGG_IF_11, AGG_IF_11.actual, 0)
     `RAL_FIELD_CP(AGG_IF_12, AGG_IF_12.actual)
     `RAL_FIELD_CP_1(AGG_IF_12, AGG_IF_12.actual, 0)
     `RAL_FIELD_CP(AGG_IF_13, AGG_IF_13.actual)
     `RAL_FIELD_CP_1(AGG_IF_13, AGG_IF_13.actual, 0)
     `RAL_FIELD_CP(AGG_IF_14, AGG_IF_14.actual)
     `RAL_FIELD_CP_1(AGG_IF_14, AGG_IF_14.actual, 0)
     `RAL_FIELD_CP(AGG_IF_15, AGG_IF_15.actual)
     `RAL_FIELD_CP_1(AGG_IF_15, AGG_IF_15.actual, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.actual)
     `RAL_FIELD_CP_16(RSVZ, RSVZ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    AGG_IF_00 = new("AGG_IF_00", "RW", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[0:0]"});
    AGG_IF_00.set_powerwell("vcccfn_gated");
    AGG_IF_00.set_rand_mode(0);
   AGG_IF_00.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_00.set_logical_path("HQMID");
    void'(add_field( AGG_IF_00 ));

    AGG_IF_01 = new("AGG_IF_01", "RW", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[1:1]"});
    AGG_IF_01.set_powerwell("vcccfn_gated");
    AGG_IF_01.set_rand_mode(0);
   AGG_IF_01.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_01.set_logical_path("HQMID");
    void'(add_field( AGG_IF_01 ));

    AGG_IF_02 = new("AGG_IF_02", "RW", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[2:2]"});
    AGG_IF_02.set_powerwell("vcccfn_gated");
    AGG_IF_02.set_rand_mode(0);
   AGG_IF_02.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_02.set_logical_path("HQMID");
    void'(add_field( AGG_IF_02 ));

    AGG_IF_03 = new("AGG_IF_03", "RW", 1, 3, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[3:3]"});
    AGG_IF_03.set_powerwell("vcccfn_gated");
    AGG_IF_03.set_rand_mode(0);
   AGG_IF_03.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_03.set_logical_path("HQMID");
    void'(add_field( AGG_IF_03 ));

    AGG_IF_04 = new("AGG_IF_04", "RW", 1, 4, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[4:4]"});
    AGG_IF_04.set_powerwell("vcccfn_gated");
    AGG_IF_04.set_rand_mode(0);
   AGG_IF_04.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_04.set_logical_path("HQMID");
    void'(add_field( AGG_IF_04 ));

    AGG_IF_05 = new("AGG_IF_05", "RW", 1, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[5:5]"});
    AGG_IF_05.set_powerwell("vcccfn_gated");
    AGG_IF_05.set_rand_mode(0);
   AGG_IF_05.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_05.set_logical_path("HQMID");
    void'(add_field( AGG_IF_05 ));

    AGG_IF_06 = new("AGG_IF_06", "RW", 1, 6, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[6:6]"});
    AGG_IF_06.set_powerwell("vcccfn_gated");
    AGG_IF_06.set_rand_mode(0);
   AGG_IF_06.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_06.set_logical_path("HQMID");
    void'(add_field( AGG_IF_06 ));

    AGG_IF_07 = new("AGG_IF_07", "RW", 1, 7, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[7:7]"});
    AGG_IF_07.set_powerwell("vcccfn_gated");
    AGG_IF_07.set_rand_mode(0);
   AGG_IF_07.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_07.set_logical_path("HQMID");
    void'(add_field( AGG_IF_07 ));

    AGG_IF_08 = new("AGG_IF_08", "RW", 1, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[8:8]"});
    AGG_IF_08.set_powerwell("vcccfn_gated");
    AGG_IF_08.set_rand_mode(0);
   AGG_IF_08.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_08.set_logical_path("HQMID");
    void'(add_field( AGG_IF_08 ));

    AGG_IF_09 = new("AGG_IF_09", "RW", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[9:9]"});
    AGG_IF_09.set_powerwell("vcccfn_gated");
    AGG_IF_09.set_rand_mode(0);
   AGG_IF_09.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_09.set_logical_path("HQMID");
    void'(add_field( AGG_IF_09 ));

    AGG_IF_10 = new("AGG_IF_10", "RW", 1, 10, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[10:10]"});
    AGG_IF_10.set_powerwell("vcccfn_gated");
    AGG_IF_10.set_rand_mode(0);
   AGG_IF_10.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_10.set_logical_path("HQMID");
    void'(add_field( AGG_IF_10 ));

    AGG_IF_11 = new("AGG_IF_11", "RW", 1, 11, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[11:11]"});
    AGG_IF_11.set_powerwell("vcccfn_gated");
    AGG_IF_11.set_rand_mode(0);
   AGG_IF_11.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_11.set_logical_path("HQMID");
    void'(add_field( AGG_IF_11 ));

    AGG_IF_12 = new("AGG_IF_12", "RW", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[12:12]"});
    AGG_IF_12.set_powerwell("vcccfn_gated");
    AGG_IF_12.set_rand_mode(0);
   AGG_IF_12.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_12.set_logical_path("HQMID");
    void'(add_field( AGG_IF_12 ));

    AGG_IF_13 = new("AGG_IF_13", "RW", 1, 13, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[13:13]"});
    AGG_IF_13.set_powerwell("vcccfn_gated");
    AGG_IF_13.set_rand_mode(0);
   AGG_IF_13.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_13.set_logical_path("HQMID");
    void'(add_field( AGG_IF_13 ));

    AGG_IF_14 = new("AGG_IF_14", "RW", 1, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[14:14]"});
    AGG_IF_14.set_powerwell("vcccfn_gated");
    AGG_IF_14.set_rand_mode(0);
   AGG_IF_14.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_14.set_logical_path("HQMID");
    void'(add_field( AGG_IF_14 ));

    AGG_IF_15 = new("AGG_IF_15", "RW", 1, 15, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[15:15]"});
    AGG_IF_15.set_powerwell("vcccfn_gated");
    AGG_IF_15.set_rand_mode(0);
   AGG_IF_15.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_15.set_logical_path("HQMID");
    void'(add_field( AGG_IF_15 ));

    RSVZ = new("RSVZ", "RW", 16, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[31:16]"});
    RSVZ.set_powerwell("vcccfn_gated");
    RSVZ.set_rand_mode(0);
   RSVZ.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ.set_logical_path("HQMID");
    void'(add_field( RSVZ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_HW_AGITATE_SELECT_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_HW_AGITATE_SELECT_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_INTERFACE_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ROP_ALARM_UP_READY;
  sla_ral_field ROP_ALARM_UP_V;
  sla_ral_field ROP_ALARM_DOWN_READY;
  sla_ral_field ROP_ALARM_DOWN_V;
  sla_ral_field CHP_ROP_HCW_READY;
  sla_ral_field CHP_ROP_HCW_V;
  sla_ral_field ROP_DP_ENQ_READY;
  sla_ral_field ROP_DP_ENQ_V;
  sla_ral_field ROP_NALB_ENQ_READY;
  sla_ral_field ROP_NALB_ENQ_V;
  sla_ral_field ROP_QED_ENQ_READY;
  sla_ral_field ROP_QED_DQED_ENQ_V;
  sla_ral_field ROP_LSP_REORDERCMP_READY;
  sla_ral_field ROP_LSP_REORDERCMP_V;
  sla_ral_field INT_IDLE_B;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_INTERFACE_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ROP_ALARM_UP_READY, ROP_ALARM_UP_READY.desired)
     `RAL_FIELD_CP_1(ROP_ALARM_UP_READY, ROP_ALARM_UP_READY.desired, 0)
     `RAL_FIELD_CP(ROP_ALARM_UP_V, ROP_ALARM_UP_V.desired)
     `RAL_FIELD_CP_1(ROP_ALARM_UP_V, ROP_ALARM_UP_V.desired, 0)
     `RAL_FIELD_CP(ROP_ALARM_DOWN_READY, ROP_ALARM_DOWN_READY.desired)
     `RAL_FIELD_CP_1(ROP_ALARM_DOWN_READY, ROP_ALARM_DOWN_READY.desired, 0)
     `RAL_FIELD_CP(ROP_ALARM_DOWN_V, ROP_ALARM_DOWN_V.desired)
     `RAL_FIELD_CP_1(ROP_ALARM_DOWN_V, ROP_ALARM_DOWN_V.desired, 0)
     `RAL_FIELD_CP(CHP_ROP_HCW_READY, CHP_ROP_HCW_READY.desired)
     `RAL_FIELD_CP_1(CHP_ROP_HCW_READY, CHP_ROP_HCW_READY.desired, 0)
     `RAL_FIELD_CP(CHP_ROP_HCW_V, CHP_ROP_HCW_V.desired)
     `RAL_FIELD_CP_1(CHP_ROP_HCW_V, CHP_ROP_HCW_V.desired, 0)
     `RAL_FIELD_CP(ROP_DP_ENQ_READY, ROP_DP_ENQ_READY.desired)
     `RAL_FIELD_CP_1(ROP_DP_ENQ_READY, ROP_DP_ENQ_READY.desired, 0)
     `RAL_FIELD_CP(ROP_DP_ENQ_V, ROP_DP_ENQ_V.desired)
     `RAL_FIELD_CP_1(ROP_DP_ENQ_V, ROP_DP_ENQ_V.desired, 0)
     `RAL_FIELD_CP(ROP_NALB_ENQ_READY, ROP_NALB_ENQ_READY.desired)
     `RAL_FIELD_CP_1(ROP_NALB_ENQ_READY, ROP_NALB_ENQ_READY.desired, 0)
     `RAL_FIELD_CP(ROP_NALB_ENQ_V, ROP_NALB_ENQ_V.desired)
     `RAL_FIELD_CP_1(ROP_NALB_ENQ_V, ROP_NALB_ENQ_V.desired, 0)
     `RAL_FIELD_CP(ROP_QED_ENQ_READY, ROP_QED_ENQ_READY.desired)
     `RAL_FIELD_CP_1(ROP_QED_ENQ_READY, ROP_QED_ENQ_READY.desired, 0)
     `RAL_FIELD_CP(ROP_QED_DQED_ENQ_V, ROP_QED_DQED_ENQ_V.desired)
     `RAL_FIELD_CP_1(ROP_QED_DQED_ENQ_V, ROP_QED_DQED_ENQ_V.desired, 0)
     `RAL_FIELD_CP(ROP_LSP_REORDERCMP_READY, ROP_LSP_REORDERCMP_READY.desired)
     `RAL_FIELD_CP_1(ROP_LSP_REORDERCMP_READY, ROP_LSP_REORDERCMP_READY.desired, 0)
     `RAL_FIELD_CP(ROP_LSP_REORDERCMP_V, ROP_LSP_REORDERCMP_V.desired)
     `RAL_FIELD_CP_1(ROP_LSP_REORDERCMP_V, ROP_LSP_REORDERCMP_V.desired, 0)
     `RAL_FIELD_CP(INT_IDLE_B, INT_IDLE_B.desired)
     `RAL_FIELD_CP_1(INT_IDLE_B, INT_IDLE_B.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ROP_ALARM_UP_READY, ROP_ALARM_UP_READY.actual)
     `RAL_FIELD_CP_1(ROP_ALARM_UP_READY, ROP_ALARM_UP_READY.actual, 0)
     `RAL_FIELD_CP(ROP_ALARM_UP_V, ROP_ALARM_UP_V.actual)
     `RAL_FIELD_CP_1(ROP_ALARM_UP_V, ROP_ALARM_UP_V.actual, 0)
     `RAL_FIELD_CP(ROP_ALARM_DOWN_READY, ROP_ALARM_DOWN_READY.actual)
     `RAL_FIELD_CP_1(ROP_ALARM_DOWN_READY, ROP_ALARM_DOWN_READY.actual, 0)
     `RAL_FIELD_CP(ROP_ALARM_DOWN_V, ROP_ALARM_DOWN_V.actual)
     `RAL_FIELD_CP_1(ROP_ALARM_DOWN_V, ROP_ALARM_DOWN_V.actual, 0)
     `RAL_FIELD_CP(CHP_ROP_HCW_READY, CHP_ROP_HCW_READY.actual)
     `RAL_FIELD_CP_1(CHP_ROP_HCW_READY, CHP_ROP_HCW_READY.actual, 0)
     `RAL_FIELD_CP(CHP_ROP_HCW_V, CHP_ROP_HCW_V.actual)
     `RAL_FIELD_CP_1(CHP_ROP_HCW_V, CHP_ROP_HCW_V.actual, 0)
     `RAL_FIELD_CP(ROP_DP_ENQ_READY, ROP_DP_ENQ_READY.actual)
     `RAL_FIELD_CP_1(ROP_DP_ENQ_READY, ROP_DP_ENQ_READY.actual, 0)
     `RAL_FIELD_CP(ROP_DP_ENQ_V, ROP_DP_ENQ_V.actual)
     `RAL_FIELD_CP_1(ROP_DP_ENQ_V, ROP_DP_ENQ_V.actual, 0)
     `RAL_FIELD_CP(ROP_NALB_ENQ_READY, ROP_NALB_ENQ_READY.actual)
     `RAL_FIELD_CP_1(ROP_NALB_ENQ_READY, ROP_NALB_ENQ_READY.actual, 0)
     `RAL_FIELD_CP(ROP_NALB_ENQ_V, ROP_NALB_ENQ_V.actual)
     `RAL_FIELD_CP_1(ROP_NALB_ENQ_V, ROP_NALB_ENQ_V.actual, 0)
     `RAL_FIELD_CP(ROP_QED_ENQ_READY, ROP_QED_ENQ_READY.actual)
     `RAL_FIELD_CP_1(ROP_QED_ENQ_READY, ROP_QED_ENQ_READY.actual, 0)
     `RAL_FIELD_CP(ROP_QED_DQED_ENQ_V, ROP_QED_DQED_ENQ_V.actual)
     `RAL_FIELD_CP_1(ROP_QED_DQED_ENQ_V, ROP_QED_DQED_ENQ_V.actual, 0)
     `RAL_FIELD_CP(ROP_LSP_REORDERCMP_READY, ROP_LSP_REORDERCMP_READY.actual)
     `RAL_FIELD_CP_1(ROP_LSP_REORDERCMP_READY, ROP_LSP_REORDERCMP_READY.actual, 0)
     `RAL_FIELD_CP(ROP_LSP_REORDERCMP_V, ROP_LSP_REORDERCMP_V.actual)
     `RAL_FIELD_CP_1(ROP_LSP_REORDERCMP_V, ROP_LSP_REORDERCMP_V.actual, 0)
     `RAL_FIELD_CP(INT_IDLE_B, INT_IDLE_B.actual)
     `RAL_FIELD_CP_1(INT_IDLE_B, INT_IDLE_B.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ROP_ALARM_UP_READY = new("ROP_ALARM_UP_READY", "RO/V", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[0:0]"});
    ROP_ALARM_UP_READY.set_powerwell("vcccfn_gated");
    ROP_ALARM_UP_READY.set_rand_mode(0);
   ROP_ALARM_UP_READY.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_ALARM_UP_READY.set_logical_path("HQMID");
    void'(add_field( ROP_ALARM_UP_READY ));

    ROP_ALARM_UP_V = new("ROP_ALARM_UP_V", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[1:1]"});
    ROP_ALARM_UP_V.set_powerwell("vcccfn_gated");
    ROP_ALARM_UP_V.set_rand_mode(0);
   ROP_ALARM_UP_V.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_ALARM_UP_V.set_logical_path("HQMID");
    void'(add_field( ROP_ALARM_UP_V ));

    ROP_ALARM_DOWN_READY = new("ROP_ALARM_DOWN_READY", "RO/V", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[2:2]"});
    ROP_ALARM_DOWN_READY.set_powerwell("vcccfn_gated");
    ROP_ALARM_DOWN_READY.set_rand_mode(0);
   ROP_ALARM_DOWN_READY.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_ALARM_DOWN_READY.set_logical_path("HQMID");
    void'(add_field( ROP_ALARM_DOWN_READY ));

    ROP_ALARM_DOWN_V = new("ROP_ALARM_DOWN_V", "RO/V", 1, 3, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[3:3]"});
    ROP_ALARM_DOWN_V.set_powerwell("vcccfn_gated");
    ROP_ALARM_DOWN_V.set_rand_mode(0);
   ROP_ALARM_DOWN_V.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_ALARM_DOWN_V.set_logical_path("HQMID");
    void'(add_field( ROP_ALARM_DOWN_V ));

    CHP_ROP_HCW_READY = new("CHP_ROP_HCW_READY", "RO/V", 1, 4, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[4:4]"});
    CHP_ROP_HCW_READY.set_powerwell("vcccfn_gated");
    CHP_ROP_HCW_READY.set_rand_mode(0);
   CHP_ROP_HCW_READY.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_ROP_HCW_READY.set_logical_path("HQMID");
    void'(add_field( CHP_ROP_HCW_READY ));

    CHP_ROP_HCW_V = new("CHP_ROP_HCW_V", "RO/V", 1, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[5:5]"});
    CHP_ROP_HCW_V.set_powerwell("vcccfn_gated");
    CHP_ROP_HCW_V.set_rand_mode(0);
   CHP_ROP_HCW_V.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_ROP_HCW_V.set_logical_path("HQMID");
    void'(add_field( CHP_ROP_HCW_V ));

    ROP_DP_ENQ_READY = new("ROP_DP_ENQ_READY", "RO/V", 1, 6, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[6:6]"});
    ROP_DP_ENQ_READY.set_powerwell("vcccfn_gated");
    ROP_DP_ENQ_READY.set_rand_mode(0);
   ROP_DP_ENQ_READY.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_DP_ENQ_READY.set_logical_path("HQMID");
    void'(add_field( ROP_DP_ENQ_READY ));

    ROP_DP_ENQ_V = new("ROP_DP_ENQ_V", "RO/V", 1, 7, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[7:7]"});
    ROP_DP_ENQ_V.set_powerwell("vcccfn_gated");
    ROP_DP_ENQ_V.set_rand_mode(0);
   ROP_DP_ENQ_V.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_DP_ENQ_V.set_logical_path("HQMID");
    void'(add_field( ROP_DP_ENQ_V ));

    ROP_NALB_ENQ_READY = new("ROP_NALB_ENQ_READY", "RO/V", 1, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[8:8]"});
    ROP_NALB_ENQ_READY.set_powerwell("vcccfn_gated");
    ROP_NALB_ENQ_READY.set_rand_mode(0);
   ROP_NALB_ENQ_READY.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_NALB_ENQ_READY.set_logical_path("HQMID");
    void'(add_field( ROP_NALB_ENQ_READY ));

    ROP_NALB_ENQ_V = new("ROP_NALB_ENQ_V", "RO/V", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[9:9]"});
    ROP_NALB_ENQ_V.set_powerwell("vcccfn_gated");
    ROP_NALB_ENQ_V.set_rand_mode(0);
   ROP_NALB_ENQ_V.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_NALB_ENQ_V.set_logical_path("HQMID");
    void'(add_field( ROP_NALB_ENQ_V ));

    ROP_QED_ENQ_READY = new("ROP_QED_ENQ_READY", "RO/V", 1, 10, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[10:10]"});
    ROP_QED_ENQ_READY.set_powerwell("vcccfn_gated");
    ROP_QED_ENQ_READY.set_rand_mode(0);
   ROP_QED_ENQ_READY.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_QED_ENQ_READY.set_logical_path("HQMID");
    void'(add_field( ROP_QED_ENQ_READY ));

    ROP_QED_DQED_ENQ_V = new("ROP_QED_DQED_ENQ_V", "RO/V", 1, 11, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[11:11]"});
    ROP_QED_DQED_ENQ_V.set_powerwell("vcccfn_gated");
    ROP_QED_DQED_ENQ_V.set_rand_mode(0);
   ROP_QED_DQED_ENQ_V.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_QED_DQED_ENQ_V.set_logical_path("HQMID");
    void'(add_field( ROP_QED_DQED_ENQ_V ));

    ROP_LSP_REORDERCMP_READY = new("ROP_LSP_REORDERCMP_READY", "RO/V", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[12:12]"});
    ROP_LSP_REORDERCMP_READY.set_powerwell("vcccfn_gated");
    ROP_LSP_REORDERCMP_READY.set_rand_mode(0);
   ROP_LSP_REORDERCMP_READY.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_LSP_REORDERCMP_READY.set_logical_path("HQMID");
    void'(add_field( ROP_LSP_REORDERCMP_READY ));

    ROP_LSP_REORDERCMP_V = new("ROP_LSP_REORDERCMP_V", "RO/V", 1, 13, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[13:13]"});
    ROP_LSP_REORDERCMP_V.set_powerwell("vcccfn_gated");
    ROP_LSP_REORDERCMP_V.set_rand_mode(0);
   ROP_LSP_REORDERCMP_V.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_LSP_REORDERCMP_V.set_logical_path("HQMID");
    void'(add_field( ROP_LSP_REORDERCMP_V ));

    INT_IDLE_B = new("INT_IDLE_B", "RO/V", 1, 31, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[31:31]"});
    INT_IDLE_B.set_powerwell("vcccfn_gated");
    INT_IDLE_B.set_rand_mode(0);
   INT_IDLE_B.set_reset_signame("hqm_inp_gated_rst_n");
    INT_IDLE_B.set_logical_path("HQMID");
    void'(add_field( INT_IDLE_B ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_INTERFACE_STATUS_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_INTERFACE_STATUS_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER0;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.desired)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.actual)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER0 = new("COUNTER0", "RW/V", 32, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt0_q[31:0]"});
    COUNTER0.set_powerwell("vcccfn_gated");
    COUNTER0.set_rand_mode(0);
   COUNTER0.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER0.set_logical_path("HQMID");
    void'(add_field( COUNTER0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER1;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.desired)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.actual)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER1 = new("COUNTER1", "RW/V", 32, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt1_q[31:0]"});
    COUNTER1.set_powerwell("vcccfn_gated");
    COUNTER1.set_rand_mode(0);
   COUNTER1.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER1.set_logical_path("HQMID");
    void'(add_field( COUNTER1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_SMON_COMPARE0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE0;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_SMON_COMPARE0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.desired)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.actual)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE0 = new("COMPARE0", "RW/V", 32, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp0_q[31:0]"});
    COMPARE0.set_powerwell("vcccfn_gated");
    COMPARE0.set_rand_mode(0);
   COMPARE0.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE0.set_logical_path("HQMID");
    void'(add_field( COMPARE0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_SMON_COMPARE0_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_SMON_COMPARE0_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_SMON_COMPARE1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE1;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_SMON_COMPARE1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.desired)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.actual)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE1 = new("COMPARE1", "RW/V", 32, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp1_q[31:0]"});
    COMPARE1.set_powerwell("vcccfn_gated");
    COMPARE1.set_rand_mode(0);
   COMPARE1.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE1.set_logical_path("HQMID");
    void'(add_field( COMPARE1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_SMON_COMPARE1_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_SMON_COMPARE1_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SMON_ENABLE;
  sla_ral_field SMON_0TRIGGER_ENABLE;
  sla_ral_field RSVZ0;
  sla_ral_field SMON0_FUNCTION;
  sla_ral_field SMON0_FUNCTION_COMPARE;
  sla_ral_field SMON1_FUNCTION;
  sla_ral_field SMON1_FUNCTION_COMPARE;
  sla_ral_field SMON_MODE;
  sla_ral_field STOPCOUNTEROVFL;
  sla_ral_field INTCOUNTEROVFL;
  sla_ral_field STATCOUNTER0OVFL;
  sla_ral_field STATCOUNTER1OVFL;
  sla_ral_field STOPTIMEROVFL;
  sla_ral_field INTTIMEROVFL;
  sla_ral_field STATTIMEROVFL;
  sla_ral_field RSVZ1;
  sla_ral_field TIMER_PRESCALE;
  sla_ral_field RSVZ2;
  sla_ral_field VERSION;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.desired, 0)
     `RAL_FIELD_CP(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.desired, 0,1)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.desired)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.desired, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.desired)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.desired, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.desired)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.desired)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.desired, 0)
     `RAL_FIELD_CP(VERSION, VERSION.desired)
     `RAL_FIELD_CP_2(VERSION, VERSION.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.actual, 0)
     `RAL_FIELD_CP(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.actual, 0,1)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.actual)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.actual, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.actual)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.actual, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.actual)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.actual)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.actual, 0)
     `RAL_FIELD_CP(VERSION, VERSION.actual)
     `RAL_FIELD_CP_2(VERSION, VERSION.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SMON_ENABLE = new("SMON_ENABLE", "RW/V", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[0:0]"});
    SMON_ENABLE.set_powerwell("vcccfn_gated");
    SMON_ENABLE.set_rand_mode(0);
   SMON_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_ENABLE.set_logical_path("HQMID");
    void'(add_field( SMON_ENABLE ));

    SMON_0TRIGGER_ENABLE = new("SMON_0TRIGGER_ENABLE", "RW/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[1:1]"});
    SMON_0TRIGGER_ENABLE.set_powerwell("vcccfn_gated");
    SMON_0TRIGGER_ENABLE.set_rand_mode(0);
   SMON_0TRIGGER_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_0TRIGGER_ENABLE.set_logical_path("HQMID");
    void'(add_field( SMON_0TRIGGER_ENABLE ));

    RSVZ0 = new("RSVZ0", "RW/V", 2, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[3:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    SMON0_FUNCTION = new("SMON0_FUNCTION", "RW/V", 3, 4, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[6:4]"});
    SMON0_FUNCTION.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION.set_rand_mode(0);
   SMON0_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION ));

    SMON0_FUNCTION_COMPARE = new("SMON0_FUNCTION_COMPARE", "RW/V", 1, 7, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[7:7]"});
    SMON0_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION_COMPARE.set_rand_mode(0);
   SMON0_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION_COMPARE ));

    SMON1_FUNCTION = new("SMON1_FUNCTION", "RW/V", 3, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[10:8]"});
    SMON1_FUNCTION.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION.set_rand_mode(0);
   SMON1_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION ));

    SMON1_FUNCTION_COMPARE = new("SMON1_FUNCTION_COMPARE", "RW/V", 1, 11, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[11:11]"});
    SMON1_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION_COMPARE.set_rand_mode(0);
   SMON1_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION_COMPARE ));

    SMON_MODE = new("SMON_MODE", "RW/V", 4, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[15:12]"});
    SMON_MODE.set_powerwell("vcccfn_gated");
    SMON_MODE.set_rand_mode(0);
   SMON_MODE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_MODE.set_logical_path("HQMID");
    void'(add_field( SMON_MODE ));

    STOPCOUNTEROVFL = new("STOPCOUNTEROVFL", "RW/V", 1, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[16:16]"});
    STOPCOUNTEROVFL.set_powerwell("vcccfn_gated");
    STOPCOUNTEROVFL.set_rand_mode(0);
   STOPCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPCOUNTEROVFL ));

    INTCOUNTEROVFL = new("INTCOUNTEROVFL", "RW/V", 1, 17, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[17:17]"});
    INTCOUNTEROVFL.set_powerwell("vcccfn_gated");
    INTCOUNTEROVFL.set_rand_mode(0);
   INTCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( INTCOUNTEROVFL ));

    STATCOUNTER0OVFL = new("STATCOUNTER0OVFL", "RW/V", 1, 18, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[18:18]"});
    STATCOUNTER0OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER0OVFL.set_rand_mode(0);
   STATCOUNTER0OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER0OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER0OVFL ));

    STATCOUNTER1OVFL = new("STATCOUNTER1OVFL", "RW/V", 1, 19, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[19:19]"});
    STATCOUNTER1OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER1OVFL.set_rand_mode(0);
   STATCOUNTER1OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER1OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER1OVFL ));

    STOPTIMEROVFL = new("STOPTIMEROVFL", "RW/V", 1, 20, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[20:20]"});
    STOPTIMEROVFL.set_powerwell("vcccfn_gated");
    STOPTIMEROVFL.set_rand_mode(0);
   STOPTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPTIMEROVFL ));

    INTTIMEROVFL = new("INTTIMEROVFL", "RW/V", 1, 21, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[21:21]"});
    INTTIMEROVFL.set_powerwell("vcccfn_gated");
    INTTIMEROVFL.set_rand_mode(0);
   INTTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( INTTIMEROVFL ));

    STATTIMEROVFL = new("STATTIMEROVFL", "RW/V", 1, 22, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[22:22]"});
    STATTIMEROVFL.set_powerwell("vcccfn_gated");
    STATTIMEROVFL.set_rand_mode(0);
   STATTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STATTIMEROVFL ));

    RSVZ1 = new("RSVZ1", "RW/V", 1, 23, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[23:23]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    TIMER_PRESCALE = new("TIMER_PRESCALE", "RW/V", 5, 24, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[28:24]"});
    TIMER_PRESCALE.set_powerwell("vcccfn_gated");
    TIMER_PRESCALE.set_rand_mode(0);
   TIMER_PRESCALE.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER_PRESCALE.set_logical_path("HQMID");
    void'(add_field( TIMER_PRESCALE ));

    RSVZ2 = new("RSVZ2", "RW/V", 1, 29, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[29:29]"});
    RSVZ2.set_powerwell("vcccfn_gated");
    RSVZ2.set_rand_mode(0);
   RSVZ2.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ2.set_logical_path("HQMID");
    void'(add_field( RSVZ2 ));

    VERSION = new("VERSION", "RO", 2, 30, {"NoSignal"});
    VERSION.set_powerwell("vcccfn_gated");
    VERSION.set_rand_mode(0);
   VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION0_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION0_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE0;
  sla_ral_field MODE1;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.desired)
     `RAL_FIELD_CP_8(MODE0, MODE0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.desired)
     `RAL_FIELD_CP_8(MODE1, MODE1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.actual)
     `RAL_FIELD_CP_8(MODE0, MODE0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.actual)
     `RAL_FIELD_CP_8(MODE1, MODE1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE0 = new("MODE0", "RW/V", 8, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[7:0]"});
    MODE0.set_powerwell("vcccfn_gated");
    MODE0.set_rand_mode(0);
   MODE0.set_reset_signame("hqm_inp_gated_rst_n");
    MODE0.set_logical_path("HQMID");
    void'(add_field( MODE0 ));

    MODE1 = new("MODE1", "RW/V", 8, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[15:8]"});
    MODE1.set_powerwell("vcccfn_gated");
    MODE1.set_rand_mode(0);
   MODE1.set_reset_signame("hqm_inp_gated_rst_n");
    MODE1.set_logical_path("HQMID");
    void'(add_field( MODE1 ));

    RSVZ0 = new("RSVZ0", "RW", 16, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[31:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION1_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION1_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MAXVALUE;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.desired)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.actual)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MAXVALUE = new("MAXVALUE", "RW/V", 32, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_maxval_q[31:0]"});
    MAXVALUE.set_powerwell("vcccfn_gated");
    MAXVALUE.set_rand_mode(0);
   MAXVALUE.set_reset_signame("hqm_inp_gated_rst_n");
    MAXVALUE.set_logical_path("HQMID");
    void'(add_field( MAXVALUE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_SMON_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_SMON_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER, TIMER.desired)
     `RAL_FIELD_CP_16(TIMER, TIMER.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER, TIMER.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER, TIMER.actual)
     `RAL_FIELD_CP_16(TIMER, TIMER.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER, TIMER.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER = new("TIMER", "RW/V", 32, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_timer_q[31:0]"});
    TIMER.set_powerwell("vcccfn_gated");
    TIMER.set_rand_mode(0);
   TIMER.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER.set_logical_path("HQMID");
    void'(add_field( TIMER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_SMON_TIMER_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_SMON_TIMER_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P1_SHFT_F_HOLD;
  sla_ral_field P2_SHFT_F_HOLD;
  sla_ral_field P0_CMP_F_HOLD;
  sla_ral_field P1_CMP_F_HOLD;
  sla_ral_field P2_CMP_F_HOLD;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P1_SHFT_F_HOLD, P1_SHFT_F_HOLD.desired)
     `RAL_FIELD_CP_1(P1_SHFT_F_HOLD, P1_SHFT_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_SHFT_F_HOLD, P2_SHFT_F_HOLD.desired)
     `RAL_FIELD_CP_1(P2_SHFT_F_HOLD, P2_SHFT_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_CMP_F_HOLD, P0_CMP_F_HOLD.desired)
     `RAL_FIELD_CP_1(P0_CMP_F_HOLD, P0_CMP_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_CMP_F_HOLD, P1_CMP_F_HOLD.desired)
     `RAL_FIELD_CP_1(P1_CMP_F_HOLD, P1_CMP_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_CMP_F_HOLD, P2_CMP_F_HOLD.desired)
     `RAL_FIELD_CP_1(P2_CMP_F_HOLD, P2_CMP_F_HOLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P1_SHFT_F_HOLD, P1_SHFT_F_HOLD.actual)
     `RAL_FIELD_CP_1(P1_SHFT_F_HOLD, P1_SHFT_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_SHFT_F_HOLD, P2_SHFT_F_HOLD.actual)
     `RAL_FIELD_CP_1(P2_SHFT_F_HOLD, P2_SHFT_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_CMP_F_HOLD, P0_CMP_F_HOLD.actual)
     `RAL_FIELD_CP_1(P0_CMP_F_HOLD, P0_CMP_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_CMP_F_HOLD, P1_CMP_F_HOLD.actual)
     `RAL_FIELD_CP_1(P1_CMP_F_HOLD, P1_CMP_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_CMP_F_HOLD, P2_CMP_F_HOLD.actual)
     `RAL_FIELD_CP_1(P2_CMP_F_HOLD, P2_CMP_F_HOLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P1_SHFT_F_HOLD = new("P1_SHFT_F_HOLD", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp0.status[1:1]"});
    P1_SHFT_F_HOLD.set_powerwell("vcccfn_gated");
    P1_SHFT_F_HOLD.set_rand_mode(0);
   P1_SHFT_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_SHFT_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_SHFT_F_HOLD ));

    P2_SHFT_F_HOLD = new("P2_SHFT_F_HOLD", "RO/V", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp0.status[2:2]"});
    P2_SHFT_F_HOLD.set_powerwell("vcccfn_gated");
    P2_SHFT_F_HOLD.set_rand_mode(0);
   P2_SHFT_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_SHFT_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_SHFT_F_HOLD ));

    P0_CMP_F_HOLD = new("P0_CMP_F_HOLD", "RO/V", 1, 3, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp0.status[3:3]"});
    P0_CMP_F_HOLD.set_powerwell("vcccfn_gated");
    P0_CMP_F_HOLD.set_rand_mode(0);
   P0_CMP_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_CMP_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_CMP_F_HOLD ));

    P1_CMP_F_HOLD = new("P1_CMP_F_HOLD", "RO/V", 1, 4, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp0.status[4:4]"});
    P1_CMP_F_HOLD.set_powerwell("vcccfn_gated");
    P1_CMP_F_HOLD.set_rand_mode(0);
   P1_CMP_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_CMP_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_CMP_F_HOLD ));

    P2_CMP_F_HOLD = new("P2_CMP_F_HOLD", "RO/V", 1, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp0.status[5:5]"});
    P2_CMP_F_HOLD.set_powerwell("vcccfn_gated");
    P2_CMP_F_HOLD.set_rand_mode(0);
   P2_CMP_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_CMP_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_CMP_F_HOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP0_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP0_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P1_SHFT_F_HOLD;
  sla_ral_field P2_SHFT_F_HOLD;
  sla_ral_field P0_CMP_F_HOLD;
  sla_ral_field P1_CMP_F_HOLD;
  sla_ral_field P2_CMP_F_HOLD;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P1_SHFT_F_HOLD, P1_SHFT_F_HOLD.desired)
     `RAL_FIELD_CP_1(P1_SHFT_F_HOLD, P1_SHFT_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_SHFT_F_HOLD, P2_SHFT_F_HOLD.desired)
     `RAL_FIELD_CP_1(P2_SHFT_F_HOLD, P2_SHFT_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_CMP_F_HOLD, P0_CMP_F_HOLD.desired)
     `RAL_FIELD_CP_1(P0_CMP_F_HOLD, P0_CMP_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_CMP_F_HOLD, P1_CMP_F_HOLD.desired)
     `RAL_FIELD_CP_1(P1_CMP_F_HOLD, P1_CMP_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_CMP_F_HOLD, P2_CMP_F_HOLD.desired)
     `RAL_FIELD_CP_1(P2_CMP_F_HOLD, P2_CMP_F_HOLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P1_SHFT_F_HOLD, P1_SHFT_F_HOLD.actual)
     `RAL_FIELD_CP_1(P1_SHFT_F_HOLD, P1_SHFT_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_SHFT_F_HOLD, P2_SHFT_F_HOLD.actual)
     `RAL_FIELD_CP_1(P2_SHFT_F_HOLD, P2_SHFT_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_CMP_F_HOLD, P0_CMP_F_HOLD.actual)
     `RAL_FIELD_CP_1(P0_CMP_F_HOLD, P0_CMP_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_CMP_F_HOLD, P1_CMP_F_HOLD.actual)
     `RAL_FIELD_CP_1(P1_CMP_F_HOLD, P1_CMP_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_CMP_F_HOLD, P2_CMP_F_HOLD.actual)
     `RAL_FIELD_CP_1(P2_CMP_F_HOLD, P2_CMP_F_HOLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P1_SHFT_F_HOLD = new("P1_SHFT_F_HOLD", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp1.status[1:1]"});
    P1_SHFT_F_HOLD.set_powerwell("vcccfn_gated");
    P1_SHFT_F_HOLD.set_rand_mode(0);
   P1_SHFT_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_SHFT_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_SHFT_F_HOLD ));

    P2_SHFT_F_HOLD = new("P2_SHFT_F_HOLD", "RO/V", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp1.status[2:2]"});
    P2_SHFT_F_HOLD.set_powerwell("vcccfn_gated");
    P2_SHFT_F_HOLD.set_rand_mode(0);
   P2_SHFT_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_SHFT_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_SHFT_F_HOLD ));

    P0_CMP_F_HOLD = new("P0_CMP_F_HOLD", "RO/V", 1, 3, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp1.status[3:3]"});
    P0_CMP_F_HOLD.set_powerwell("vcccfn_gated");
    P0_CMP_F_HOLD.set_rand_mode(0);
   P0_CMP_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_CMP_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_CMP_F_HOLD ));

    P1_CMP_F_HOLD = new("P1_CMP_F_HOLD", "RO/V", 1, 4, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp1.status[4:4]"});
    P1_CMP_F_HOLD.set_powerwell("vcccfn_gated");
    P1_CMP_F_HOLD.set_rand_mode(0);
   P1_CMP_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_CMP_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_CMP_F_HOLD ));

    P2_CMP_F_HOLD = new("P2_CMP_F_HOLD", "RO/V", 1, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp1.status[5:5]"});
    P2_CMP_F_HOLD.set_powerwell("vcccfn_gated");
    P2_CMP_F_HOLD.set_rand_mode(0);
   P2_CMP_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_CMP_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_CMP_F_HOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP1_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP1_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_DP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_ROP_DP_ENQ_F_HOLD;
  sla_ral_field P1_ROP_DP_ENQ_F_HOLD;
  sla_ral_field P2_ROP_DP_ENQ_F_HOLD;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_DP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_ROP_DP_ENQ_F_HOLD, P0_ROP_DP_ENQ_F_HOLD.desired)
     `RAL_FIELD_CP_1(P0_ROP_DP_ENQ_F_HOLD, P0_ROP_DP_ENQ_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_ROP_DP_ENQ_F_HOLD, P1_ROP_DP_ENQ_F_HOLD.desired)
     `RAL_FIELD_CP_1(P1_ROP_DP_ENQ_F_HOLD, P1_ROP_DP_ENQ_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_ROP_DP_ENQ_F_HOLD, P2_ROP_DP_ENQ_F_HOLD.desired)
     `RAL_FIELD_CP_1(P2_ROP_DP_ENQ_F_HOLD, P2_ROP_DP_ENQ_F_HOLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_ROP_DP_ENQ_F_HOLD, P0_ROP_DP_ENQ_F_HOLD.actual)
     `RAL_FIELD_CP_1(P0_ROP_DP_ENQ_F_HOLD, P0_ROP_DP_ENQ_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_ROP_DP_ENQ_F_HOLD, P1_ROP_DP_ENQ_F_HOLD.actual)
     `RAL_FIELD_CP_1(P1_ROP_DP_ENQ_F_HOLD, P1_ROP_DP_ENQ_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_ROP_DP_ENQ_F_HOLD, P2_ROP_DP_ENQ_F_HOLD.actual)
     `RAL_FIELD_CP_1(P2_ROP_DP_ENQ_F_HOLD, P2_ROP_DP_ENQ_F_HOLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_ROP_DP_ENQ_F_HOLD = new("P0_ROP_DP_ENQ_F_HOLD", "RO/V", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_dp.status[0:0]"});
    P0_ROP_DP_ENQ_F_HOLD.set_powerwell("vcccfn_gated");
    P0_ROP_DP_ENQ_F_HOLD.set_rand_mode(0);
   P0_ROP_DP_ENQ_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_ROP_DP_ENQ_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_ROP_DP_ENQ_F_HOLD ));

    P1_ROP_DP_ENQ_F_HOLD = new("P1_ROP_DP_ENQ_F_HOLD", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_dp.status[1:1]"});
    P1_ROP_DP_ENQ_F_HOLD.set_powerwell("vcccfn_gated");
    P1_ROP_DP_ENQ_F_HOLD.set_rand_mode(0);
   P1_ROP_DP_ENQ_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_ROP_DP_ENQ_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_ROP_DP_ENQ_F_HOLD ));

    P2_ROP_DP_ENQ_F_HOLD = new("P2_ROP_DP_ENQ_F_HOLD", "RO/V", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_dp.status[2:2]"});
    P2_ROP_DP_ENQ_F_HOLD.set_powerwell("vcccfn_gated");
    P2_ROP_DP_ENQ_F_HOLD.set_rand_mode(0);
   P2_ROP_DP_ENQ_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_ROP_DP_ENQ_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_ROP_DP_ENQ_F_HOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_DP_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_DP_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_REORD_ST_HOLD;
  sla_ral_field P1_REORD_ST_HOLD;
  sla_ral_field P2_REORD_ST_HOLD;
  sla_ral_field P3_REORD_ST_HOLD;
  sla_ral_field P0_REORD_LBHP_HOLD;
  sla_ral_field P1_REORD_LBHP_HOLD;
  sla_ral_field P2_REORD_LBHP_HOLD;
  sla_ral_field P3_REORD_LBHP_HOLD;
  sla_ral_field P0_REORD_LBTP_HOLD;
  sla_ral_field P1_REORD_LBTP_HOLD;
  sla_ral_field P2_REORD_LBTP_HOLD;
  sla_ral_field P3_REORD_LBTP_HOLD;
  sla_ral_field P0_REORD_DIRHP_HOLD;
  sla_ral_field P1_REORD_DIRHP_HOLD;
  sla_ral_field P2_REORD_DIRHP_HOLD;
  sla_ral_field P3_REORD_DIRHP_HOLD;
  sla_ral_field P0_REORD_DIRTP_HOLD;
  sla_ral_field P1_REORD_DIRTP_HOLD;
  sla_ral_field P2_REORD_DIRTP_HOLD;
  sla_ral_field P3_REORD_DIRTP_HOLD;
  sla_ral_field P0_REORD_CNT_HOLD;
  sla_ral_field P1_REORD_CNT_HOLD;
  sla_ral_field P2_REORD_CNT_HOLD;
  sla_ral_field P3_REORD_CNT_HOLD;
  sla_ral_field P0_REORD_CTL_HOLD;
  sla_ral_field P1_REORD_CTL_HOLD;
  sla_ral_field P2_REORD_CTL_HOLD;
  sla_ral_field P3_REORD_CTL_HOLD;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_REORD_ST_HOLD, P0_REORD_ST_HOLD.desired)
     `RAL_FIELD_CP_1(P0_REORD_ST_HOLD, P0_REORD_ST_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_REORD_ST_HOLD, P1_REORD_ST_HOLD.desired)
     `RAL_FIELD_CP_1(P1_REORD_ST_HOLD, P1_REORD_ST_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_REORD_ST_HOLD, P2_REORD_ST_HOLD.desired)
     `RAL_FIELD_CP_1(P2_REORD_ST_HOLD, P2_REORD_ST_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_REORD_ST_HOLD, P3_REORD_ST_HOLD.desired)
     `RAL_FIELD_CP_1(P3_REORD_ST_HOLD, P3_REORD_ST_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_REORD_LBHP_HOLD, P0_REORD_LBHP_HOLD.desired)
     `RAL_FIELD_CP_1(P0_REORD_LBHP_HOLD, P0_REORD_LBHP_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_REORD_LBHP_HOLD, P1_REORD_LBHP_HOLD.desired)
     `RAL_FIELD_CP_1(P1_REORD_LBHP_HOLD, P1_REORD_LBHP_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_REORD_LBHP_HOLD, P2_REORD_LBHP_HOLD.desired)
     `RAL_FIELD_CP_1(P2_REORD_LBHP_HOLD, P2_REORD_LBHP_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_REORD_LBHP_HOLD, P3_REORD_LBHP_HOLD.desired)
     `RAL_FIELD_CP_1(P3_REORD_LBHP_HOLD, P3_REORD_LBHP_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_REORD_LBTP_HOLD, P0_REORD_LBTP_HOLD.desired)
     `RAL_FIELD_CP_1(P0_REORD_LBTP_HOLD, P0_REORD_LBTP_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_REORD_LBTP_HOLD, P1_REORD_LBTP_HOLD.desired)
     `RAL_FIELD_CP_1(P1_REORD_LBTP_HOLD, P1_REORD_LBTP_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_REORD_LBTP_HOLD, P2_REORD_LBTP_HOLD.desired)
     `RAL_FIELD_CP_1(P2_REORD_LBTP_HOLD, P2_REORD_LBTP_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_REORD_LBTP_HOLD, P3_REORD_LBTP_HOLD.desired)
     `RAL_FIELD_CP_1(P3_REORD_LBTP_HOLD, P3_REORD_LBTP_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_REORD_DIRHP_HOLD, P0_REORD_DIRHP_HOLD.desired)
     `RAL_FIELD_CP_1(P0_REORD_DIRHP_HOLD, P0_REORD_DIRHP_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_REORD_DIRHP_HOLD, P1_REORD_DIRHP_HOLD.desired)
     `RAL_FIELD_CP_1(P1_REORD_DIRHP_HOLD, P1_REORD_DIRHP_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_REORD_DIRHP_HOLD, P2_REORD_DIRHP_HOLD.desired)
     `RAL_FIELD_CP_1(P2_REORD_DIRHP_HOLD, P2_REORD_DIRHP_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_REORD_DIRHP_HOLD, P3_REORD_DIRHP_HOLD.desired)
     `RAL_FIELD_CP_1(P3_REORD_DIRHP_HOLD, P3_REORD_DIRHP_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_REORD_DIRTP_HOLD, P0_REORD_DIRTP_HOLD.desired)
     `RAL_FIELD_CP_1(P0_REORD_DIRTP_HOLD, P0_REORD_DIRTP_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_REORD_DIRTP_HOLD, P1_REORD_DIRTP_HOLD.desired)
     `RAL_FIELD_CP_1(P1_REORD_DIRTP_HOLD, P1_REORD_DIRTP_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_REORD_DIRTP_HOLD, P2_REORD_DIRTP_HOLD.desired)
     `RAL_FIELD_CP_1(P2_REORD_DIRTP_HOLD, P2_REORD_DIRTP_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_REORD_DIRTP_HOLD, P3_REORD_DIRTP_HOLD.desired)
     `RAL_FIELD_CP_1(P3_REORD_DIRTP_HOLD, P3_REORD_DIRTP_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_REORD_CNT_HOLD, P0_REORD_CNT_HOLD.desired)
     `RAL_FIELD_CP_1(P0_REORD_CNT_HOLD, P0_REORD_CNT_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_REORD_CNT_HOLD, P1_REORD_CNT_HOLD.desired)
     `RAL_FIELD_CP_1(P1_REORD_CNT_HOLD, P1_REORD_CNT_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_REORD_CNT_HOLD, P2_REORD_CNT_HOLD.desired)
     `RAL_FIELD_CP_1(P2_REORD_CNT_HOLD, P2_REORD_CNT_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_REORD_CNT_HOLD, P3_REORD_CNT_HOLD.desired)
     `RAL_FIELD_CP_1(P3_REORD_CNT_HOLD, P3_REORD_CNT_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_REORD_CTL_HOLD, P0_REORD_CTL_HOLD.desired)
     `RAL_FIELD_CP_1(P0_REORD_CTL_HOLD, P0_REORD_CTL_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_REORD_CTL_HOLD, P1_REORD_CTL_HOLD.desired)
     `RAL_FIELD_CP_1(P1_REORD_CTL_HOLD, P1_REORD_CTL_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_REORD_CTL_HOLD, P2_REORD_CTL_HOLD.desired)
     `RAL_FIELD_CP_1(P2_REORD_CTL_HOLD, P2_REORD_CTL_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_REORD_CTL_HOLD, P3_REORD_CTL_HOLD.desired)
     `RAL_FIELD_CP_1(P3_REORD_CTL_HOLD, P3_REORD_CTL_HOLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_REORD_ST_HOLD, P0_REORD_ST_HOLD.actual)
     `RAL_FIELD_CP_1(P0_REORD_ST_HOLD, P0_REORD_ST_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_REORD_ST_HOLD, P1_REORD_ST_HOLD.actual)
     `RAL_FIELD_CP_1(P1_REORD_ST_HOLD, P1_REORD_ST_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_REORD_ST_HOLD, P2_REORD_ST_HOLD.actual)
     `RAL_FIELD_CP_1(P2_REORD_ST_HOLD, P2_REORD_ST_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_REORD_ST_HOLD, P3_REORD_ST_HOLD.actual)
     `RAL_FIELD_CP_1(P3_REORD_ST_HOLD, P3_REORD_ST_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_REORD_LBHP_HOLD, P0_REORD_LBHP_HOLD.actual)
     `RAL_FIELD_CP_1(P0_REORD_LBHP_HOLD, P0_REORD_LBHP_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_REORD_LBHP_HOLD, P1_REORD_LBHP_HOLD.actual)
     `RAL_FIELD_CP_1(P1_REORD_LBHP_HOLD, P1_REORD_LBHP_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_REORD_LBHP_HOLD, P2_REORD_LBHP_HOLD.actual)
     `RAL_FIELD_CP_1(P2_REORD_LBHP_HOLD, P2_REORD_LBHP_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_REORD_LBHP_HOLD, P3_REORD_LBHP_HOLD.actual)
     `RAL_FIELD_CP_1(P3_REORD_LBHP_HOLD, P3_REORD_LBHP_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_REORD_LBTP_HOLD, P0_REORD_LBTP_HOLD.actual)
     `RAL_FIELD_CP_1(P0_REORD_LBTP_HOLD, P0_REORD_LBTP_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_REORD_LBTP_HOLD, P1_REORD_LBTP_HOLD.actual)
     `RAL_FIELD_CP_1(P1_REORD_LBTP_HOLD, P1_REORD_LBTP_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_REORD_LBTP_HOLD, P2_REORD_LBTP_HOLD.actual)
     `RAL_FIELD_CP_1(P2_REORD_LBTP_HOLD, P2_REORD_LBTP_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_REORD_LBTP_HOLD, P3_REORD_LBTP_HOLD.actual)
     `RAL_FIELD_CP_1(P3_REORD_LBTP_HOLD, P3_REORD_LBTP_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_REORD_DIRHP_HOLD, P0_REORD_DIRHP_HOLD.actual)
     `RAL_FIELD_CP_1(P0_REORD_DIRHP_HOLD, P0_REORD_DIRHP_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_REORD_DIRHP_HOLD, P1_REORD_DIRHP_HOLD.actual)
     `RAL_FIELD_CP_1(P1_REORD_DIRHP_HOLD, P1_REORD_DIRHP_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_REORD_DIRHP_HOLD, P2_REORD_DIRHP_HOLD.actual)
     `RAL_FIELD_CP_1(P2_REORD_DIRHP_HOLD, P2_REORD_DIRHP_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_REORD_DIRHP_HOLD, P3_REORD_DIRHP_HOLD.actual)
     `RAL_FIELD_CP_1(P3_REORD_DIRHP_HOLD, P3_REORD_DIRHP_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_REORD_DIRTP_HOLD, P0_REORD_DIRTP_HOLD.actual)
     `RAL_FIELD_CP_1(P0_REORD_DIRTP_HOLD, P0_REORD_DIRTP_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_REORD_DIRTP_HOLD, P1_REORD_DIRTP_HOLD.actual)
     `RAL_FIELD_CP_1(P1_REORD_DIRTP_HOLD, P1_REORD_DIRTP_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_REORD_DIRTP_HOLD, P2_REORD_DIRTP_HOLD.actual)
     `RAL_FIELD_CP_1(P2_REORD_DIRTP_HOLD, P2_REORD_DIRTP_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_REORD_DIRTP_HOLD, P3_REORD_DIRTP_HOLD.actual)
     `RAL_FIELD_CP_1(P3_REORD_DIRTP_HOLD, P3_REORD_DIRTP_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_REORD_CNT_HOLD, P0_REORD_CNT_HOLD.actual)
     `RAL_FIELD_CP_1(P0_REORD_CNT_HOLD, P0_REORD_CNT_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_REORD_CNT_HOLD, P1_REORD_CNT_HOLD.actual)
     `RAL_FIELD_CP_1(P1_REORD_CNT_HOLD, P1_REORD_CNT_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_REORD_CNT_HOLD, P2_REORD_CNT_HOLD.actual)
     `RAL_FIELD_CP_1(P2_REORD_CNT_HOLD, P2_REORD_CNT_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_REORD_CNT_HOLD, P3_REORD_CNT_HOLD.actual)
     `RAL_FIELD_CP_1(P3_REORD_CNT_HOLD, P3_REORD_CNT_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_REORD_CTL_HOLD, P0_REORD_CTL_HOLD.actual)
     `RAL_FIELD_CP_1(P0_REORD_CTL_HOLD, P0_REORD_CTL_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_REORD_CTL_HOLD, P1_REORD_CTL_HOLD.actual)
     `RAL_FIELD_CP_1(P1_REORD_CTL_HOLD, P1_REORD_CTL_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_REORD_CTL_HOLD, P2_REORD_CTL_HOLD.actual)
     `RAL_FIELD_CP_1(P2_REORD_CTL_HOLD, P2_REORD_CTL_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_REORD_CTL_HOLD, P3_REORD_CTL_HOLD.actual)
     `RAL_FIELD_CP_1(P3_REORD_CTL_HOLD, P3_REORD_CTL_HOLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_REORD_ST_HOLD = new("P0_REORD_ST_HOLD", "RO/V", 1, 4, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[4:4]"});
    P0_REORD_ST_HOLD.set_powerwell("vcccfn_gated");
    P0_REORD_ST_HOLD.set_rand_mode(0);
   P0_REORD_ST_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_ST_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_REORD_ST_HOLD ));

    P1_REORD_ST_HOLD = new("P1_REORD_ST_HOLD", "RO/V", 1, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[5:5]"});
    P1_REORD_ST_HOLD.set_powerwell("vcccfn_gated");
    P1_REORD_ST_HOLD.set_rand_mode(0);
   P1_REORD_ST_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_ST_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_REORD_ST_HOLD ));

    P2_REORD_ST_HOLD = new("P2_REORD_ST_HOLD", "RO/V", 1, 6, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[6:6]"});
    P2_REORD_ST_HOLD.set_powerwell("vcccfn_gated");
    P2_REORD_ST_HOLD.set_rand_mode(0);
   P2_REORD_ST_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_ST_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_REORD_ST_HOLD ));

    P3_REORD_ST_HOLD = new("P3_REORD_ST_HOLD", "RO/V", 1, 7, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[7:7]"});
    P3_REORD_ST_HOLD.set_powerwell("vcccfn_gated");
    P3_REORD_ST_HOLD.set_rand_mode(0);
   P3_REORD_ST_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_ST_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_REORD_ST_HOLD ));

    P0_REORD_LBHP_HOLD = new("P0_REORD_LBHP_HOLD", "RO/V", 1, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[8:8]"});
    P0_REORD_LBHP_HOLD.set_powerwell("vcccfn_gated");
    P0_REORD_LBHP_HOLD.set_rand_mode(0);
   P0_REORD_LBHP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_LBHP_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_REORD_LBHP_HOLD ));

    P1_REORD_LBHP_HOLD = new("P1_REORD_LBHP_HOLD", "RO/V", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[9:9]"});
    P1_REORD_LBHP_HOLD.set_powerwell("vcccfn_gated");
    P1_REORD_LBHP_HOLD.set_rand_mode(0);
   P1_REORD_LBHP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_LBHP_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_REORD_LBHP_HOLD ));

    P2_REORD_LBHP_HOLD = new("P2_REORD_LBHP_HOLD", "RO/V", 1, 10, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[10:10]"});
    P2_REORD_LBHP_HOLD.set_powerwell("vcccfn_gated");
    P2_REORD_LBHP_HOLD.set_rand_mode(0);
   P2_REORD_LBHP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_LBHP_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_REORD_LBHP_HOLD ));

    P3_REORD_LBHP_HOLD = new("P3_REORD_LBHP_HOLD", "RO/V", 1, 11, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[11:11]"});
    P3_REORD_LBHP_HOLD.set_powerwell("vcccfn_gated");
    P3_REORD_LBHP_HOLD.set_rand_mode(0);
   P3_REORD_LBHP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_LBHP_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_REORD_LBHP_HOLD ));

    P0_REORD_LBTP_HOLD = new("P0_REORD_LBTP_HOLD", "RO/V", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[12:12]"});
    P0_REORD_LBTP_HOLD.set_powerwell("vcccfn_gated");
    P0_REORD_LBTP_HOLD.set_rand_mode(0);
   P0_REORD_LBTP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_LBTP_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_REORD_LBTP_HOLD ));

    P1_REORD_LBTP_HOLD = new("P1_REORD_LBTP_HOLD", "RO/V", 1, 13, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[13:13]"});
    P1_REORD_LBTP_HOLD.set_powerwell("vcccfn_gated");
    P1_REORD_LBTP_HOLD.set_rand_mode(0);
   P1_REORD_LBTP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_LBTP_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_REORD_LBTP_HOLD ));

    P2_REORD_LBTP_HOLD = new("P2_REORD_LBTP_HOLD", "RO/V", 1, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[14:14]"});
    P2_REORD_LBTP_HOLD.set_powerwell("vcccfn_gated");
    P2_REORD_LBTP_HOLD.set_rand_mode(0);
   P2_REORD_LBTP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_LBTP_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_REORD_LBTP_HOLD ));

    P3_REORD_LBTP_HOLD = new("P3_REORD_LBTP_HOLD", "RO/V", 1, 15, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[15:15]"});
    P3_REORD_LBTP_HOLD.set_powerwell("vcccfn_gated");
    P3_REORD_LBTP_HOLD.set_rand_mode(0);
   P3_REORD_LBTP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_LBTP_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_REORD_LBTP_HOLD ));

    P0_REORD_DIRHP_HOLD = new("P0_REORD_DIRHP_HOLD", "RO/V", 1, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[16:16]"});
    P0_REORD_DIRHP_HOLD.set_powerwell("vcccfn_gated");
    P0_REORD_DIRHP_HOLD.set_rand_mode(0);
   P0_REORD_DIRHP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_DIRHP_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_REORD_DIRHP_HOLD ));

    P1_REORD_DIRHP_HOLD = new("P1_REORD_DIRHP_HOLD", "RO/V", 1, 17, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[17:17]"});
    P1_REORD_DIRHP_HOLD.set_powerwell("vcccfn_gated");
    P1_REORD_DIRHP_HOLD.set_rand_mode(0);
   P1_REORD_DIRHP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_DIRHP_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_REORD_DIRHP_HOLD ));

    P2_REORD_DIRHP_HOLD = new("P2_REORD_DIRHP_HOLD", "RO/V", 1, 18, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[18:18]"});
    P2_REORD_DIRHP_HOLD.set_powerwell("vcccfn_gated");
    P2_REORD_DIRHP_HOLD.set_rand_mode(0);
   P2_REORD_DIRHP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_DIRHP_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_REORD_DIRHP_HOLD ));

    P3_REORD_DIRHP_HOLD = new("P3_REORD_DIRHP_HOLD", "RO/V", 1, 19, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[19:19]"});
    P3_REORD_DIRHP_HOLD.set_powerwell("vcccfn_gated");
    P3_REORD_DIRHP_HOLD.set_rand_mode(0);
   P3_REORD_DIRHP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_DIRHP_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_REORD_DIRHP_HOLD ));

    P0_REORD_DIRTP_HOLD = new("P0_REORD_DIRTP_HOLD", "RO/V", 1, 20, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[20:20]"});
    P0_REORD_DIRTP_HOLD.set_powerwell("vcccfn_gated");
    P0_REORD_DIRTP_HOLD.set_rand_mode(0);
   P0_REORD_DIRTP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_DIRTP_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_REORD_DIRTP_HOLD ));

    P1_REORD_DIRTP_HOLD = new("P1_REORD_DIRTP_HOLD", "RO/V", 1, 21, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[21:21]"});
    P1_REORD_DIRTP_HOLD.set_powerwell("vcccfn_gated");
    P1_REORD_DIRTP_HOLD.set_rand_mode(0);
   P1_REORD_DIRTP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_DIRTP_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_REORD_DIRTP_HOLD ));

    P2_REORD_DIRTP_HOLD = new("P2_REORD_DIRTP_HOLD", "RO/V", 1, 22, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[22:22]"});
    P2_REORD_DIRTP_HOLD.set_powerwell("vcccfn_gated");
    P2_REORD_DIRTP_HOLD.set_rand_mode(0);
   P2_REORD_DIRTP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_DIRTP_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_REORD_DIRTP_HOLD ));

    P3_REORD_DIRTP_HOLD = new("P3_REORD_DIRTP_HOLD", "RO/V", 1, 23, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[23:23]"});
    P3_REORD_DIRTP_HOLD.set_powerwell("vcccfn_gated");
    P3_REORD_DIRTP_HOLD.set_rand_mode(0);
   P3_REORD_DIRTP_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_DIRTP_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_REORD_DIRTP_HOLD ));

    P0_REORD_CNT_HOLD = new("P0_REORD_CNT_HOLD", "RO/V", 1, 24, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[24:24]"});
    P0_REORD_CNT_HOLD.set_powerwell("vcccfn_gated");
    P0_REORD_CNT_HOLD.set_rand_mode(0);
   P0_REORD_CNT_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_CNT_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_REORD_CNT_HOLD ));

    P1_REORD_CNT_HOLD = new("P1_REORD_CNT_HOLD", "RO/V", 1, 25, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[25:25]"});
    P1_REORD_CNT_HOLD.set_powerwell("vcccfn_gated");
    P1_REORD_CNT_HOLD.set_rand_mode(0);
   P1_REORD_CNT_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_CNT_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_REORD_CNT_HOLD ));

    P2_REORD_CNT_HOLD = new("P2_REORD_CNT_HOLD", "RO/V", 1, 26, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[26:26]"});
    P2_REORD_CNT_HOLD.set_powerwell("vcccfn_gated");
    P2_REORD_CNT_HOLD.set_rand_mode(0);
   P2_REORD_CNT_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_CNT_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_REORD_CNT_HOLD ));

    P3_REORD_CNT_HOLD = new("P3_REORD_CNT_HOLD", "RO/V", 1, 27, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[27:27]"});
    P3_REORD_CNT_HOLD.set_powerwell("vcccfn_gated");
    P3_REORD_CNT_HOLD.set_rand_mode(0);
   P3_REORD_CNT_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_CNT_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_REORD_CNT_HOLD ));

    P0_REORD_CTL_HOLD = new("P0_REORD_CTL_HOLD", "RO/V", 1, 28, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[28:28]"});
    P0_REORD_CTL_HOLD.set_powerwell("vcccfn_gated");
    P0_REORD_CTL_HOLD.set_rand_mode(0);
   P0_REORD_CTL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_CTL_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_REORD_CTL_HOLD ));

    P1_REORD_CTL_HOLD = new("P1_REORD_CTL_HOLD", "RO/V", 1, 29, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[29:29]"});
    P1_REORD_CTL_HOLD.set_powerwell("vcccfn_gated");
    P1_REORD_CTL_HOLD.set_rand_mode(0);
   P1_REORD_CTL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_CTL_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_REORD_CTL_HOLD ));

    P2_REORD_CTL_HOLD = new("P2_REORD_CTL_HOLD", "RO/V", 1, 30, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[30:30]"});
    P2_REORD_CTL_HOLD.set_powerwell("vcccfn_gated");
    P2_REORD_CTL_HOLD.set_rand_mode(0);
   P2_REORD_CTL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_CTL_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_REORD_CTL_HOLD ));

    P3_REORD_CTL_HOLD = new("P3_REORD_CTL_HOLD", "RO/V", 1, 31, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[31:31]"});
    P3_REORD_CTL_HOLD.set_powerwell("vcccfn_gated");
    P3_REORD_CTL_HOLD.set_rand_mode(0);
   P3_REORD_CTL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_CTL_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_REORD_CTL_HOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_NALB_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_ROP_NALB_F_HOLD;
  sla_ral_field P1_ROP_NALB_F_HOLD;
  sla_ral_field P2_ROP_NALB_F_HOLD;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_NALB_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_ROP_NALB_F_HOLD, P0_ROP_NALB_F_HOLD.desired)
     `RAL_FIELD_CP_1(P0_ROP_NALB_F_HOLD, P0_ROP_NALB_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_ROP_NALB_F_HOLD, P1_ROP_NALB_F_HOLD.desired)
     `RAL_FIELD_CP_1(P1_ROP_NALB_F_HOLD, P1_ROP_NALB_F_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_ROP_NALB_F_HOLD, P2_ROP_NALB_F_HOLD.desired)
     `RAL_FIELD_CP_1(P2_ROP_NALB_F_HOLD, P2_ROP_NALB_F_HOLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_ROP_NALB_F_HOLD, P0_ROP_NALB_F_HOLD.actual)
     `RAL_FIELD_CP_1(P0_ROP_NALB_F_HOLD, P0_ROP_NALB_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_ROP_NALB_F_HOLD, P1_ROP_NALB_F_HOLD.actual)
     `RAL_FIELD_CP_1(P1_ROP_NALB_F_HOLD, P1_ROP_NALB_F_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_ROP_NALB_F_HOLD, P2_ROP_NALB_F_HOLD.actual)
     `RAL_FIELD_CP_1(P2_ROP_NALB_F_HOLD, P2_ROP_NALB_F_HOLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_ROP_NALB_F_HOLD = new("P0_ROP_NALB_F_HOLD", "RO/V", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_nalb.status[0:0]"});
    P0_ROP_NALB_F_HOLD.set_powerwell("vcccfn_gated");
    P0_ROP_NALB_F_HOLD.set_rand_mode(0);
   P0_ROP_NALB_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_ROP_NALB_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_ROP_NALB_F_HOLD ));

    P1_ROP_NALB_F_HOLD = new("P1_ROP_NALB_F_HOLD", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_nalb.status[1:1]"});
    P1_ROP_NALB_F_HOLD.set_powerwell("vcccfn_gated");
    P1_ROP_NALB_F_HOLD.set_rand_mode(0);
   P1_ROP_NALB_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_ROP_NALB_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_ROP_NALB_F_HOLD ));

    P2_ROP_NALB_F_HOLD = new("P2_ROP_NALB_F_HOLD", "RO/V", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_nalb.status[2:2]"});
    P2_ROP_NALB_F_HOLD.set_powerwell("vcccfn_gated");
    P2_ROP_NALB_F_HOLD.set_rand_mode(0);
   P2_ROP_NALB_F_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_ROP_NALB_F_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_ROP_NALB_F_HOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_NALB_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_NALB_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_QED_DQED_ENQ_CTL_HOLD;
  sla_ral_field P1_QED_DQED_ENQ_CTL_HOLD;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_QED_DQED_ENQ_CTL_HOLD, P0_QED_DQED_ENQ_CTL_HOLD.desired)
     `RAL_FIELD_CP_1(P0_QED_DQED_ENQ_CTL_HOLD, P0_QED_DQED_ENQ_CTL_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_QED_DQED_ENQ_CTL_HOLD, P1_QED_DQED_ENQ_CTL_HOLD.desired)
     `RAL_FIELD_CP_1(P1_QED_DQED_ENQ_CTL_HOLD, P1_QED_DQED_ENQ_CTL_HOLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_QED_DQED_ENQ_CTL_HOLD, P0_QED_DQED_ENQ_CTL_HOLD.actual)
     `RAL_FIELD_CP_1(P0_QED_DQED_ENQ_CTL_HOLD, P0_QED_DQED_ENQ_CTL_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_QED_DQED_ENQ_CTL_HOLD, P1_QED_DQED_ENQ_CTL_HOLD.actual)
     `RAL_FIELD_CP_1(P1_QED_DQED_ENQ_CTL_HOLD, P1_QED_DQED_ENQ_CTL_HOLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_QED_DQED_ENQ_CTL_HOLD = new("P0_QED_DQED_ENQ_CTL_HOLD", "RO/V", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_qed_dqed.status[0:0]"});
    P0_QED_DQED_ENQ_CTL_HOLD.set_powerwell("vcccfn_gated");
    P0_QED_DQED_ENQ_CTL_HOLD.set_rand_mode(0);
   P0_QED_DQED_ENQ_CTL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_QED_DQED_ENQ_CTL_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_QED_DQED_ENQ_CTL_HOLD ));

    P1_QED_DQED_ENQ_CTL_HOLD = new("P1_QED_DQED_ENQ_CTL_HOLD", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_qed_dqed.status[1:1]"});
    P1_QED_DQED_ENQ_CTL_HOLD.set_powerwell("vcccfn_gated");
    P1_QED_DQED_ENQ_CTL_HOLD.set_rand_mode(0);
   P1_QED_DQED_ENQ_CTL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_QED_DQED_ENQ_CTL_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_QED_DQED_ENQ_CTL_HOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RSVD0;
  sla_ral_field P0_SHFT_F_V;
  sla_ral_field P1_SHFT_F_V;
  sla_ral_field P2_SHFT_F_V;
  sla_ral_field P0_CMP_F_V;
  sla_ral_field P1_CMP_F_V;
  sla_ral_field P2_CMP_F_V;
  sla_ral_field P3_CMP_F_V;
  sla_ral_field SLT_STATE;
  sla_ral_field SN_SHIFT_DEBUG;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVD0, RSVD0.desired)
     `RAL_FIELD_CP_1(RSVD0, RSVD0.desired, 0)
     `RAL_FIELD_CP(P0_SHFT_F_V, P0_SHFT_F_V.desired)
     `RAL_FIELD_CP_1(P0_SHFT_F_V, P0_SHFT_F_V.desired, 0)
     `RAL_FIELD_CP(P1_SHFT_F_V, P1_SHFT_F_V.desired)
     `RAL_FIELD_CP_1(P1_SHFT_F_V, P1_SHFT_F_V.desired, 0)
     `RAL_FIELD_CP(P2_SHFT_F_V, P2_SHFT_F_V.desired)
     `RAL_FIELD_CP_1(P2_SHFT_F_V, P2_SHFT_F_V.desired, 0)
     `RAL_FIELD_CP(P0_CMP_F_V, P0_CMP_F_V.desired)
     `RAL_FIELD_CP_1(P0_CMP_F_V, P0_CMP_F_V.desired, 0)
     `RAL_FIELD_CP(P1_CMP_F_V, P1_CMP_F_V.desired)
     `RAL_FIELD_CP_1(P1_CMP_F_V, P1_CMP_F_V.desired, 0)
     `RAL_FIELD_CP(P2_CMP_F_V, P2_CMP_F_V.desired)
     `RAL_FIELD_CP_1(P2_CMP_F_V, P2_CMP_F_V.desired, 0)
     `RAL_FIELD_CP(P3_CMP_F_V, P3_CMP_F_V.desired)
     `RAL_FIELD_CP_1(P3_CMP_F_V, P3_CMP_F_V.desired, 0)
     `RAL_FIELD_CP(SLT_STATE, SLT_STATE.desired)
     `RAL_FIELD_CP_1(SLT_STATE, SLT_STATE.desired, 0)
     `RAL_FIELD_CP(SN_SHIFT_DEBUG, SN_SHIFT_DEBUG.desired)
     `RAL_FIELD_CP_10(SN_SHIFT_DEBUG, SN_SHIFT_DEBUG.desired, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVD0, RSVD0.actual)
     `RAL_FIELD_CP_1(RSVD0, RSVD0.actual, 0)
     `RAL_FIELD_CP(P0_SHFT_F_V, P0_SHFT_F_V.actual)
     `RAL_FIELD_CP_1(P0_SHFT_F_V, P0_SHFT_F_V.actual, 0)
     `RAL_FIELD_CP(P1_SHFT_F_V, P1_SHFT_F_V.actual)
     `RAL_FIELD_CP_1(P1_SHFT_F_V, P1_SHFT_F_V.actual, 0)
     `RAL_FIELD_CP(P2_SHFT_F_V, P2_SHFT_F_V.actual)
     `RAL_FIELD_CP_1(P2_SHFT_F_V, P2_SHFT_F_V.actual, 0)
     `RAL_FIELD_CP(P0_CMP_F_V, P0_CMP_F_V.actual)
     `RAL_FIELD_CP_1(P0_CMP_F_V, P0_CMP_F_V.actual, 0)
     `RAL_FIELD_CP(P1_CMP_F_V, P1_CMP_F_V.actual)
     `RAL_FIELD_CP_1(P1_CMP_F_V, P1_CMP_F_V.actual, 0)
     `RAL_FIELD_CP(P2_CMP_F_V, P2_CMP_F_V.actual)
     `RAL_FIELD_CP_1(P2_CMP_F_V, P2_CMP_F_V.actual, 0)
     `RAL_FIELD_CP(P3_CMP_F_V, P3_CMP_F_V.actual)
     `RAL_FIELD_CP_1(P3_CMP_F_V, P3_CMP_F_V.actual, 0)
     `RAL_FIELD_CP(SLT_STATE, SLT_STATE.actual)
     `RAL_FIELD_CP_1(SLT_STATE, SLT_STATE.actual, 0)
     `RAL_FIELD_CP(SN_SHIFT_DEBUG, SN_SHIFT_DEBUG.actual)
     `RAL_FIELD_CP_10(SN_SHIFT_DEBUG, SN_SHIFT_DEBUG.actual, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RSVD0 = new("RSVD0", "RO/V", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[0:0]"});
    RSVD0.set_powerwell("vcccfn_gated");
    RSVD0.set_rand_mode(0);
   RSVD0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVD0.set_logical_path("HQMID");
    void'(add_field( RSVD0 ));

    P0_SHFT_F_V = new("P0_SHFT_F_V", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[1:1]"});
    P0_SHFT_F_V.set_powerwell("vcccfn_gated");
    P0_SHFT_F_V.set_rand_mode(0);
   P0_SHFT_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P0_SHFT_F_V.set_logical_path("HQMID");
    void'(add_field( P0_SHFT_F_V ));

    P1_SHFT_F_V = new("P1_SHFT_F_V", "RO/V", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[2:2]"});
    P1_SHFT_F_V.set_powerwell("vcccfn_gated");
    P1_SHFT_F_V.set_rand_mode(0);
   P1_SHFT_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P1_SHFT_F_V.set_logical_path("HQMID");
    void'(add_field( P1_SHFT_F_V ));

    P2_SHFT_F_V = new("P2_SHFT_F_V", "RO/V", 1, 3, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[3:3]"});
    P2_SHFT_F_V.set_powerwell("vcccfn_gated");
    P2_SHFT_F_V.set_rand_mode(0);
   P2_SHFT_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P2_SHFT_F_V.set_logical_path("HQMID");
    void'(add_field( P2_SHFT_F_V ));

    P0_CMP_F_V = new("P0_CMP_F_V", "RO/V", 1, 4, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[4:4]"});
    P0_CMP_F_V.set_powerwell("vcccfn_gated");
    P0_CMP_F_V.set_rand_mode(0);
   P0_CMP_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P0_CMP_F_V.set_logical_path("HQMID");
    void'(add_field( P0_CMP_F_V ));

    P1_CMP_F_V = new("P1_CMP_F_V", "RO/V", 1, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[5:5]"});
    P1_CMP_F_V.set_powerwell("vcccfn_gated");
    P1_CMP_F_V.set_rand_mode(0);
   P1_CMP_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P1_CMP_F_V.set_logical_path("HQMID");
    void'(add_field( P1_CMP_F_V ));

    P2_CMP_F_V = new("P2_CMP_F_V", "RO/V", 1, 6, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[6:6]"});
    P2_CMP_F_V.set_powerwell("vcccfn_gated");
    P2_CMP_F_V.set_rand_mode(0);
   P2_CMP_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P2_CMP_F_V.set_logical_path("HQMID");
    void'(add_field( P2_CMP_F_V ));

    P3_CMP_F_V = new("P3_CMP_F_V", "RO/V", 1, 7, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[7:7]"});
    P3_CMP_F_V.set_powerwell("vcccfn_gated");
    P3_CMP_F_V.set_rand_mode(0);
   P3_CMP_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P3_CMP_F_V.set_logical_path("HQMID");
    void'(add_field( P3_CMP_F_V ));

    SLT_STATE = new("SLT_STATE", "RO/V", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[9:9]"});
    SLT_STATE.set_powerwell("vcccfn_gated");
    SLT_STATE.set_rand_mode(0);
   SLT_STATE.set_reset_signame("hqm_inp_gated_rst_n");
    SLT_STATE.set_logical_path("HQMID");
    void'(add_field( SLT_STATE ));

    SN_SHIFT_DEBUG = new("SN_SHIFT_DEBUG", "RO/V", 10, 22, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[31:22]"});
    SN_SHIFT_DEBUG.set_powerwell("vcccfn_gated");
    SN_SHIFT_DEBUG.set_rand_mode(0);
   SN_SHIFT_DEBUG.set_reset_signame("hqm_inp_gated_rst_n");
    SN_SHIFT_DEBUG.set_logical_path("HQMID");
    void'(add_field( SN_SHIFT_DEBUG ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP0_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP0_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_SHFT_F_V;
  sla_ral_field P1_SHFT_F_V;
  sla_ral_field P2_SHFT_F_V;
  sla_ral_field P0_CMP_F_V;
  sla_ral_field P1_CMP_F_V;
  sla_ral_field P2_CMP_F_V;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_SHFT_F_V, P0_SHFT_F_V.desired)
     `RAL_FIELD_CP_1(P0_SHFT_F_V, P0_SHFT_F_V.desired, 0)
     `RAL_FIELD_CP(P1_SHFT_F_V, P1_SHFT_F_V.desired)
     `RAL_FIELD_CP_1(P1_SHFT_F_V, P1_SHFT_F_V.desired, 0)
     `RAL_FIELD_CP(P2_SHFT_F_V, P2_SHFT_F_V.desired)
     `RAL_FIELD_CP_1(P2_SHFT_F_V, P2_SHFT_F_V.desired, 0)
     `RAL_FIELD_CP(P0_CMP_F_V, P0_CMP_F_V.desired)
     `RAL_FIELD_CP_1(P0_CMP_F_V, P0_CMP_F_V.desired, 0)
     `RAL_FIELD_CP(P1_CMP_F_V, P1_CMP_F_V.desired)
     `RAL_FIELD_CP_1(P1_CMP_F_V, P1_CMP_F_V.desired, 0)
     `RAL_FIELD_CP(P2_CMP_F_V, P2_CMP_F_V.desired)
     `RAL_FIELD_CP_1(P2_CMP_F_V, P2_CMP_F_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_SHFT_F_V, P0_SHFT_F_V.actual)
     `RAL_FIELD_CP_1(P0_SHFT_F_V, P0_SHFT_F_V.actual, 0)
     `RAL_FIELD_CP(P1_SHFT_F_V, P1_SHFT_F_V.actual)
     `RAL_FIELD_CP_1(P1_SHFT_F_V, P1_SHFT_F_V.actual, 0)
     `RAL_FIELD_CP(P2_SHFT_F_V, P2_SHFT_F_V.actual)
     `RAL_FIELD_CP_1(P2_SHFT_F_V, P2_SHFT_F_V.actual, 0)
     `RAL_FIELD_CP(P0_CMP_F_V, P0_CMP_F_V.actual)
     `RAL_FIELD_CP_1(P0_CMP_F_V, P0_CMP_F_V.actual, 0)
     `RAL_FIELD_CP(P1_CMP_F_V, P1_CMP_F_V.actual)
     `RAL_FIELD_CP_1(P1_CMP_F_V, P1_CMP_F_V.actual, 0)
     `RAL_FIELD_CP(P2_CMP_F_V, P2_CMP_F_V.actual)
     `RAL_FIELD_CP_1(P2_CMP_F_V, P2_CMP_F_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_SHFT_F_V = new("P0_SHFT_F_V", "RO/V", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[0:0]"});
    P0_SHFT_F_V.set_powerwell("vcccfn_gated");
    P0_SHFT_F_V.set_rand_mode(0);
   P0_SHFT_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P0_SHFT_F_V.set_logical_path("HQMID");
    void'(add_field( P0_SHFT_F_V ));

    P1_SHFT_F_V = new("P1_SHFT_F_V", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[1:1]"});
    P1_SHFT_F_V.set_powerwell("vcccfn_gated");
    P1_SHFT_F_V.set_rand_mode(0);
   P1_SHFT_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P1_SHFT_F_V.set_logical_path("HQMID");
    void'(add_field( P1_SHFT_F_V ));

    P2_SHFT_F_V = new("P2_SHFT_F_V", "RO/V", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[2:2]"});
    P2_SHFT_F_V.set_powerwell("vcccfn_gated");
    P2_SHFT_F_V.set_rand_mode(0);
   P2_SHFT_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P2_SHFT_F_V.set_logical_path("HQMID");
    void'(add_field( P2_SHFT_F_V ));

    P0_CMP_F_V = new("P0_CMP_F_V", "RO/V", 1, 3, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[3:3]"});
    P0_CMP_F_V.set_powerwell("vcccfn_gated");
    P0_CMP_F_V.set_rand_mode(0);
   P0_CMP_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P0_CMP_F_V.set_logical_path("HQMID");
    void'(add_field( P0_CMP_F_V ));

    P1_CMP_F_V = new("P1_CMP_F_V", "RO/V", 1, 4, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[4:4]"});
    P1_CMP_F_V.set_powerwell("vcccfn_gated");
    P1_CMP_F_V.set_rand_mode(0);
   P1_CMP_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P1_CMP_F_V.set_logical_path("HQMID");
    void'(add_field( P1_CMP_F_V ));

    P2_CMP_F_V = new("P2_CMP_F_V", "RO/V", 1, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[5:5]"});
    P2_CMP_F_V.set_powerwell("vcccfn_gated");
    P2_CMP_F_V.set_rand_mode(0);
   P2_CMP_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P2_CMP_F_V.set_logical_path("HQMID");
    void'(add_field( P2_CMP_F_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP1_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP1_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_DP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_ROP_DP_ENQ_F_V;
  sla_ral_field P1_ROP_DP_ENQ_F_V;
  sla_ral_field P2_ROP_DP_ENQ_F_V;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_DP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_ROP_DP_ENQ_F_V, P0_ROP_DP_ENQ_F_V.desired)
     `RAL_FIELD_CP_1(P0_ROP_DP_ENQ_F_V, P0_ROP_DP_ENQ_F_V.desired, 0)
     `RAL_FIELD_CP(P1_ROP_DP_ENQ_F_V, P1_ROP_DP_ENQ_F_V.desired)
     `RAL_FIELD_CP_1(P1_ROP_DP_ENQ_F_V, P1_ROP_DP_ENQ_F_V.desired, 0)
     `RAL_FIELD_CP(P2_ROP_DP_ENQ_F_V, P2_ROP_DP_ENQ_F_V.desired)
     `RAL_FIELD_CP_1(P2_ROP_DP_ENQ_F_V, P2_ROP_DP_ENQ_F_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_ROP_DP_ENQ_F_V, P0_ROP_DP_ENQ_F_V.actual)
     `RAL_FIELD_CP_1(P0_ROP_DP_ENQ_F_V, P0_ROP_DP_ENQ_F_V.actual, 0)
     `RAL_FIELD_CP(P1_ROP_DP_ENQ_F_V, P1_ROP_DP_ENQ_F_V.actual)
     `RAL_FIELD_CP_1(P1_ROP_DP_ENQ_F_V, P1_ROP_DP_ENQ_F_V.actual, 0)
     `RAL_FIELD_CP(P2_ROP_DP_ENQ_F_V, P2_ROP_DP_ENQ_F_V.actual)
     `RAL_FIELD_CP_1(P2_ROP_DP_ENQ_F_V, P2_ROP_DP_ENQ_F_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_ROP_DP_ENQ_F_V = new("P0_ROP_DP_ENQ_F_V", "RO/V", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_dp.status[0:0]"});
    P0_ROP_DP_ENQ_F_V.set_powerwell("vcccfn_gated");
    P0_ROP_DP_ENQ_F_V.set_rand_mode(0);
   P0_ROP_DP_ENQ_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P0_ROP_DP_ENQ_F_V.set_logical_path("HQMID");
    void'(add_field( P0_ROP_DP_ENQ_F_V ));

    P1_ROP_DP_ENQ_F_V = new("P1_ROP_DP_ENQ_F_V", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_dp.status[1:1]"});
    P1_ROP_DP_ENQ_F_V.set_powerwell("vcccfn_gated");
    P1_ROP_DP_ENQ_F_V.set_rand_mode(0);
   P1_ROP_DP_ENQ_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P1_ROP_DP_ENQ_F_V.set_logical_path("HQMID");
    void'(add_field( P1_ROP_DP_ENQ_F_V ));

    P2_ROP_DP_ENQ_F_V = new("P2_ROP_DP_ENQ_F_V", "RO/V", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_dp.status[2:2]"});
    P2_ROP_DP_ENQ_F_V.set_powerwell("vcccfn_gated");
    P2_ROP_DP_ENQ_F_V.set_rand_mode(0);
   P2_ROP_DP_ENQ_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P2_ROP_DP_ENQ_F_V.set_logical_path("HQMID");
    void'(add_field( P2_ROP_DP_ENQ_F_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_DP_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_DP_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_REORD_ST_V_F;
  sla_ral_field P1_REORD_ST_V_F;
  sla_ral_field P2_REORD_ST_V_F;
  sla_ral_field P3_REORD_ST_V_F;
  sla_ral_field P0_REORD_LBHP_V_F;
  sla_ral_field P1_REORD_LBHP_V_F;
  sla_ral_field P2_REORD_LBHP_V_F;
  sla_ral_field P3_REORD_LBHP_V_F;
  sla_ral_field P0_REORD_LBTP_V_F;
  sla_ral_field P1_REORD_LBTP_V_F;
  sla_ral_field P2_REORD_LBTP_V_F;
  sla_ral_field P3_REORD_LBTP_V_F;
  sla_ral_field P0_REORD_DIRHP_V_F;
  sla_ral_field P1_REORD_DIRHP_V_F;
  sla_ral_field P2_REORD_DIRHP_V_F;
  sla_ral_field P3_REORD_DIRHP_V_F;
  sla_ral_field P0_REORD_DIRTP_V_F;
  sla_ral_field P1_REORD_DIRTP_V_F;
  sla_ral_field P2_REORD_DIRTP_V_F;
  sla_ral_field P3_REORD_DIRTP_V_F;
  sla_ral_field P0_REORD_CNT_V_F;
  sla_ral_field P1_REORD_CNT_V_F;
  sla_ral_field P2_REORD_CNT_V_F;
  sla_ral_field P3_REORD_CNT_V_F;
  sla_ral_field P0_REORD_F_V;
  sla_ral_field P1_REORD_F_V;
  sla_ral_field P2_REORD_F_V;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_REORD_ST_V_F, P0_REORD_ST_V_F.desired)
     `RAL_FIELD_CP_1(P0_REORD_ST_V_F, P0_REORD_ST_V_F.desired, 0)
     `RAL_FIELD_CP(P1_REORD_ST_V_F, P1_REORD_ST_V_F.desired)
     `RAL_FIELD_CP_1(P1_REORD_ST_V_F, P1_REORD_ST_V_F.desired, 0)
     `RAL_FIELD_CP(P2_REORD_ST_V_F, P2_REORD_ST_V_F.desired)
     `RAL_FIELD_CP_1(P2_REORD_ST_V_F, P2_REORD_ST_V_F.desired, 0)
     `RAL_FIELD_CP(P3_REORD_ST_V_F, P3_REORD_ST_V_F.desired)
     `RAL_FIELD_CP_1(P3_REORD_ST_V_F, P3_REORD_ST_V_F.desired, 0)
     `RAL_FIELD_CP(P0_REORD_LBHP_V_F, P0_REORD_LBHP_V_F.desired)
     `RAL_FIELD_CP_1(P0_REORD_LBHP_V_F, P0_REORD_LBHP_V_F.desired, 0)
     `RAL_FIELD_CP(P1_REORD_LBHP_V_F, P1_REORD_LBHP_V_F.desired)
     `RAL_FIELD_CP_1(P1_REORD_LBHP_V_F, P1_REORD_LBHP_V_F.desired, 0)
     `RAL_FIELD_CP(P2_REORD_LBHP_V_F, P2_REORD_LBHP_V_F.desired)
     `RAL_FIELD_CP_1(P2_REORD_LBHP_V_F, P2_REORD_LBHP_V_F.desired, 0)
     `RAL_FIELD_CP(P3_REORD_LBHP_V_F, P3_REORD_LBHP_V_F.desired)
     `RAL_FIELD_CP_1(P3_REORD_LBHP_V_F, P3_REORD_LBHP_V_F.desired, 0)
     `RAL_FIELD_CP(P0_REORD_LBTP_V_F, P0_REORD_LBTP_V_F.desired)
     `RAL_FIELD_CP_1(P0_REORD_LBTP_V_F, P0_REORD_LBTP_V_F.desired, 0)
     `RAL_FIELD_CP(P1_REORD_LBTP_V_F, P1_REORD_LBTP_V_F.desired)
     `RAL_FIELD_CP_1(P1_REORD_LBTP_V_F, P1_REORD_LBTP_V_F.desired, 0)
     `RAL_FIELD_CP(P2_REORD_LBTP_V_F, P2_REORD_LBTP_V_F.desired)
     `RAL_FIELD_CP_1(P2_REORD_LBTP_V_F, P2_REORD_LBTP_V_F.desired, 0)
     `RAL_FIELD_CP(P3_REORD_LBTP_V_F, P3_REORD_LBTP_V_F.desired)
     `RAL_FIELD_CP_1(P3_REORD_LBTP_V_F, P3_REORD_LBTP_V_F.desired, 0)
     `RAL_FIELD_CP(P0_REORD_DIRHP_V_F, P0_REORD_DIRHP_V_F.desired)
     `RAL_FIELD_CP_1(P0_REORD_DIRHP_V_F, P0_REORD_DIRHP_V_F.desired, 0)
     `RAL_FIELD_CP(P1_REORD_DIRHP_V_F, P1_REORD_DIRHP_V_F.desired)
     `RAL_FIELD_CP_1(P1_REORD_DIRHP_V_F, P1_REORD_DIRHP_V_F.desired, 0)
     `RAL_FIELD_CP(P2_REORD_DIRHP_V_F, P2_REORD_DIRHP_V_F.desired)
     `RAL_FIELD_CP_1(P2_REORD_DIRHP_V_F, P2_REORD_DIRHP_V_F.desired, 0)
     `RAL_FIELD_CP(P3_REORD_DIRHP_V_F, P3_REORD_DIRHP_V_F.desired)
     `RAL_FIELD_CP_1(P3_REORD_DIRHP_V_F, P3_REORD_DIRHP_V_F.desired, 0)
     `RAL_FIELD_CP(P0_REORD_DIRTP_V_F, P0_REORD_DIRTP_V_F.desired)
     `RAL_FIELD_CP_1(P0_REORD_DIRTP_V_F, P0_REORD_DIRTP_V_F.desired, 0)
     `RAL_FIELD_CP(P1_REORD_DIRTP_V_F, P1_REORD_DIRTP_V_F.desired)
     `RAL_FIELD_CP_1(P1_REORD_DIRTP_V_F, P1_REORD_DIRTP_V_F.desired, 0)
     `RAL_FIELD_CP(P2_REORD_DIRTP_V_F, P2_REORD_DIRTP_V_F.desired)
     `RAL_FIELD_CP_1(P2_REORD_DIRTP_V_F, P2_REORD_DIRTP_V_F.desired, 0)
     `RAL_FIELD_CP(P3_REORD_DIRTP_V_F, P3_REORD_DIRTP_V_F.desired)
     `RAL_FIELD_CP_1(P3_REORD_DIRTP_V_F, P3_REORD_DIRTP_V_F.desired, 0)
     `RAL_FIELD_CP(P0_REORD_CNT_V_F, P0_REORD_CNT_V_F.desired)
     `RAL_FIELD_CP_1(P0_REORD_CNT_V_F, P0_REORD_CNT_V_F.desired, 0)
     `RAL_FIELD_CP(P1_REORD_CNT_V_F, P1_REORD_CNT_V_F.desired)
     `RAL_FIELD_CP_1(P1_REORD_CNT_V_F, P1_REORD_CNT_V_F.desired, 0)
     `RAL_FIELD_CP(P2_REORD_CNT_V_F, P2_REORD_CNT_V_F.desired)
     `RAL_FIELD_CP_1(P2_REORD_CNT_V_F, P2_REORD_CNT_V_F.desired, 0)
     `RAL_FIELD_CP(P3_REORD_CNT_V_F, P3_REORD_CNT_V_F.desired)
     `RAL_FIELD_CP_1(P3_REORD_CNT_V_F, P3_REORD_CNT_V_F.desired, 0)
     `RAL_FIELD_CP(P0_REORD_F_V, P0_REORD_F_V.desired)
     `RAL_FIELD_CP_1(P0_REORD_F_V, P0_REORD_F_V.desired, 0)
     `RAL_FIELD_CP(P1_REORD_F_V, P1_REORD_F_V.desired)
     `RAL_FIELD_CP_1(P1_REORD_F_V, P1_REORD_F_V.desired, 0)
     `RAL_FIELD_CP(P2_REORD_F_V, P2_REORD_F_V.desired)
     `RAL_FIELD_CP_1(P2_REORD_F_V, P2_REORD_F_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_REORD_ST_V_F, P0_REORD_ST_V_F.actual)
     `RAL_FIELD_CP_1(P0_REORD_ST_V_F, P0_REORD_ST_V_F.actual, 0)
     `RAL_FIELD_CP(P1_REORD_ST_V_F, P1_REORD_ST_V_F.actual)
     `RAL_FIELD_CP_1(P1_REORD_ST_V_F, P1_REORD_ST_V_F.actual, 0)
     `RAL_FIELD_CP(P2_REORD_ST_V_F, P2_REORD_ST_V_F.actual)
     `RAL_FIELD_CP_1(P2_REORD_ST_V_F, P2_REORD_ST_V_F.actual, 0)
     `RAL_FIELD_CP(P3_REORD_ST_V_F, P3_REORD_ST_V_F.actual)
     `RAL_FIELD_CP_1(P3_REORD_ST_V_F, P3_REORD_ST_V_F.actual, 0)
     `RAL_FIELD_CP(P0_REORD_LBHP_V_F, P0_REORD_LBHP_V_F.actual)
     `RAL_FIELD_CP_1(P0_REORD_LBHP_V_F, P0_REORD_LBHP_V_F.actual, 0)
     `RAL_FIELD_CP(P1_REORD_LBHP_V_F, P1_REORD_LBHP_V_F.actual)
     `RAL_FIELD_CP_1(P1_REORD_LBHP_V_F, P1_REORD_LBHP_V_F.actual, 0)
     `RAL_FIELD_CP(P2_REORD_LBHP_V_F, P2_REORD_LBHP_V_F.actual)
     `RAL_FIELD_CP_1(P2_REORD_LBHP_V_F, P2_REORD_LBHP_V_F.actual, 0)
     `RAL_FIELD_CP(P3_REORD_LBHP_V_F, P3_REORD_LBHP_V_F.actual)
     `RAL_FIELD_CP_1(P3_REORD_LBHP_V_F, P3_REORD_LBHP_V_F.actual, 0)
     `RAL_FIELD_CP(P0_REORD_LBTP_V_F, P0_REORD_LBTP_V_F.actual)
     `RAL_FIELD_CP_1(P0_REORD_LBTP_V_F, P0_REORD_LBTP_V_F.actual, 0)
     `RAL_FIELD_CP(P1_REORD_LBTP_V_F, P1_REORD_LBTP_V_F.actual)
     `RAL_FIELD_CP_1(P1_REORD_LBTP_V_F, P1_REORD_LBTP_V_F.actual, 0)
     `RAL_FIELD_CP(P2_REORD_LBTP_V_F, P2_REORD_LBTP_V_F.actual)
     `RAL_FIELD_CP_1(P2_REORD_LBTP_V_F, P2_REORD_LBTP_V_F.actual, 0)
     `RAL_FIELD_CP(P3_REORD_LBTP_V_F, P3_REORD_LBTP_V_F.actual)
     `RAL_FIELD_CP_1(P3_REORD_LBTP_V_F, P3_REORD_LBTP_V_F.actual, 0)
     `RAL_FIELD_CP(P0_REORD_DIRHP_V_F, P0_REORD_DIRHP_V_F.actual)
     `RAL_FIELD_CP_1(P0_REORD_DIRHP_V_F, P0_REORD_DIRHP_V_F.actual, 0)
     `RAL_FIELD_CP(P1_REORD_DIRHP_V_F, P1_REORD_DIRHP_V_F.actual)
     `RAL_FIELD_CP_1(P1_REORD_DIRHP_V_F, P1_REORD_DIRHP_V_F.actual, 0)
     `RAL_FIELD_CP(P2_REORD_DIRHP_V_F, P2_REORD_DIRHP_V_F.actual)
     `RAL_FIELD_CP_1(P2_REORD_DIRHP_V_F, P2_REORD_DIRHP_V_F.actual, 0)
     `RAL_FIELD_CP(P3_REORD_DIRHP_V_F, P3_REORD_DIRHP_V_F.actual)
     `RAL_FIELD_CP_1(P3_REORD_DIRHP_V_F, P3_REORD_DIRHP_V_F.actual, 0)
     `RAL_FIELD_CP(P0_REORD_DIRTP_V_F, P0_REORD_DIRTP_V_F.actual)
     `RAL_FIELD_CP_1(P0_REORD_DIRTP_V_F, P0_REORD_DIRTP_V_F.actual, 0)
     `RAL_FIELD_CP(P1_REORD_DIRTP_V_F, P1_REORD_DIRTP_V_F.actual)
     `RAL_FIELD_CP_1(P1_REORD_DIRTP_V_F, P1_REORD_DIRTP_V_F.actual, 0)
     `RAL_FIELD_CP(P2_REORD_DIRTP_V_F, P2_REORD_DIRTP_V_F.actual)
     `RAL_FIELD_CP_1(P2_REORD_DIRTP_V_F, P2_REORD_DIRTP_V_F.actual, 0)
     `RAL_FIELD_CP(P3_REORD_DIRTP_V_F, P3_REORD_DIRTP_V_F.actual)
     `RAL_FIELD_CP_1(P3_REORD_DIRTP_V_F, P3_REORD_DIRTP_V_F.actual, 0)
     `RAL_FIELD_CP(P0_REORD_CNT_V_F, P0_REORD_CNT_V_F.actual)
     `RAL_FIELD_CP_1(P0_REORD_CNT_V_F, P0_REORD_CNT_V_F.actual, 0)
     `RAL_FIELD_CP(P1_REORD_CNT_V_F, P1_REORD_CNT_V_F.actual)
     `RAL_FIELD_CP_1(P1_REORD_CNT_V_F, P1_REORD_CNT_V_F.actual, 0)
     `RAL_FIELD_CP(P2_REORD_CNT_V_F, P2_REORD_CNT_V_F.actual)
     `RAL_FIELD_CP_1(P2_REORD_CNT_V_F, P2_REORD_CNT_V_F.actual, 0)
     `RAL_FIELD_CP(P3_REORD_CNT_V_F, P3_REORD_CNT_V_F.actual)
     `RAL_FIELD_CP_1(P3_REORD_CNT_V_F, P3_REORD_CNT_V_F.actual, 0)
     `RAL_FIELD_CP(P0_REORD_F_V, P0_REORD_F_V.actual)
     `RAL_FIELD_CP_1(P0_REORD_F_V, P0_REORD_F_V.actual, 0)
     `RAL_FIELD_CP(P1_REORD_F_V, P1_REORD_F_V.actual)
     `RAL_FIELD_CP_1(P1_REORD_F_V, P1_REORD_F_V.actual, 0)
     `RAL_FIELD_CP(P2_REORD_F_V, P2_REORD_F_V.actual)
     `RAL_FIELD_CP_1(P2_REORD_F_V, P2_REORD_F_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_REORD_ST_V_F = new("P0_REORD_ST_V_F", "RO/V", 1, 4, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[4:4]"});
    P0_REORD_ST_V_F.set_powerwell("vcccfn_gated");
    P0_REORD_ST_V_F.set_rand_mode(0);
   P0_REORD_ST_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_ST_V_F.set_logical_path("HQMID");
    void'(add_field( P0_REORD_ST_V_F ));

    P1_REORD_ST_V_F = new("P1_REORD_ST_V_F", "RO/V", 1, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[5:5]"});
    P1_REORD_ST_V_F.set_powerwell("vcccfn_gated");
    P1_REORD_ST_V_F.set_rand_mode(0);
   P1_REORD_ST_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_ST_V_F.set_logical_path("HQMID");
    void'(add_field( P1_REORD_ST_V_F ));

    P2_REORD_ST_V_F = new("P2_REORD_ST_V_F", "RO/V", 1, 6, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[6:6]"});
    P2_REORD_ST_V_F.set_powerwell("vcccfn_gated");
    P2_REORD_ST_V_F.set_rand_mode(0);
   P2_REORD_ST_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_ST_V_F.set_logical_path("HQMID");
    void'(add_field( P2_REORD_ST_V_F ));

    P3_REORD_ST_V_F = new("P3_REORD_ST_V_F", "RO/V", 1, 7, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[7:7]"});
    P3_REORD_ST_V_F.set_powerwell("vcccfn_gated");
    P3_REORD_ST_V_F.set_rand_mode(0);
   P3_REORD_ST_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_ST_V_F.set_logical_path("HQMID");
    void'(add_field( P3_REORD_ST_V_F ));

    P0_REORD_LBHP_V_F = new("P0_REORD_LBHP_V_F", "RO/V", 1, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[8:8]"});
    P0_REORD_LBHP_V_F.set_powerwell("vcccfn_gated");
    P0_REORD_LBHP_V_F.set_rand_mode(0);
   P0_REORD_LBHP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_LBHP_V_F.set_logical_path("HQMID");
    void'(add_field( P0_REORD_LBHP_V_F ));

    P1_REORD_LBHP_V_F = new("P1_REORD_LBHP_V_F", "RO/V", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[9:9]"});
    P1_REORD_LBHP_V_F.set_powerwell("vcccfn_gated");
    P1_REORD_LBHP_V_F.set_rand_mode(0);
   P1_REORD_LBHP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_LBHP_V_F.set_logical_path("HQMID");
    void'(add_field( P1_REORD_LBHP_V_F ));

    P2_REORD_LBHP_V_F = new("P2_REORD_LBHP_V_F", "RO/V", 1, 10, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[10:10]"});
    P2_REORD_LBHP_V_F.set_powerwell("vcccfn_gated");
    P2_REORD_LBHP_V_F.set_rand_mode(0);
   P2_REORD_LBHP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_LBHP_V_F.set_logical_path("HQMID");
    void'(add_field( P2_REORD_LBHP_V_F ));

    P3_REORD_LBHP_V_F = new("P3_REORD_LBHP_V_F", "RO/V", 1, 11, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[11:11]"});
    P3_REORD_LBHP_V_F.set_powerwell("vcccfn_gated");
    P3_REORD_LBHP_V_F.set_rand_mode(0);
   P3_REORD_LBHP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_LBHP_V_F.set_logical_path("HQMID");
    void'(add_field( P3_REORD_LBHP_V_F ));

    P0_REORD_LBTP_V_F = new("P0_REORD_LBTP_V_F", "RO/V", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[12:12]"});
    P0_REORD_LBTP_V_F.set_powerwell("vcccfn_gated");
    P0_REORD_LBTP_V_F.set_rand_mode(0);
   P0_REORD_LBTP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_LBTP_V_F.set_logical_path("HQMID");
    void'(add_field( P0_REORD_LBTP_V_F ));

    P1_REORD_LBTP_V_F = new("P1_REORD_LBTP_V_F", "RO/V", 1, 13, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[13:13]"});
    P1_REORD_LBTP_V_F.set_powerwell("vcccfn_gated");
    P1_REORD_LBTP_V_F.set_rand_mode(0);
   P1_REORD_LBTP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_LBTP_V_F.set_logical_path("HQMID");
    void'(add_field( P1_REORD_LBTP_V_F ));

    P2_REORD_LBTP_V_F = new("P2_REORD_LBTP_V_F", "RO/V", 1, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[14:14]"});
    P2_REORD_LBTP_V_F.set_powerwell("vcccfn_gated");
    P2_REORD_LBTP_V_F.set_rand_mode(0);
   P2_REORD_LBTP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_LBTP_V_F.set_logical_path("HQMID");
    void'(add_field( P2_REORD_LBTP_V_F ));

    P3_REORD_LBTP_V_F = new("P3_REORD_LBTP_V_F", "RO/V", 1, 15, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[15:15]"});
    P3_REORD_LBTP_V_F.set_powerwell("vcccfn_gated");
    P3_REORD_LBTP_V_F.set_rand_mode(0);
   P3_REORD_LBTP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_LBTP_V_F.set_logical_path("HQMID");
    void'(add_field( P3_REORD_LBTP_V_F ));

    P0_REORD_DIRHP_V_F = new("P0_REORD_DIRHP_V_F", "RO/V", 1, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[16:16]"});
    P0_REORD_DIRHP_V_F.set_powerwell("vcccfn_gated");
    P0_REORD_DIRHP_V_F.set_rand_mode(0);
   P0_REORD_DIRHP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_DIRHP_V_F.set_logical_path("HQMID");
    void'(add_field( P0_REORD_DIRHP_V_F ));

    P1_REORD_DIRHP_V_F = new("P1_REORD_DIRHP_V_F", "RO/V", 1, 17, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[17:17]"});
    P1_REORD_DIRHP_V_F.set_powerwell("vcccfn_gated");
    P1_REORD_DIRHP_V_F.set_rand_mode(0);
   P1_REORD_DIRHP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_DIRHP_V_F.set_logical_path("HQMID");
    void'(add_field( P1_REORD_DIRHP_V_F ));

    P2_REORD_DIRHP_V_F = new("P2_REORD_DIRHP_V_F", "RO/V", 1, 18, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[18:18]"});
    P2_REORD_DIRHP_V_F.set_powerwell("vcccfn_gated");
    P2_REORD_DIRHP_V_F.set_rand_mode(0);
   P2_REORD_DIRHP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_DIRHP_V_F.set_logical_path("HQMID");
    void'(add_field( P2_REORD_DIRHP_V_F ));

    P3_REORD_DIRHP_V_F = new("P3_REORD_DIRHP_V_F", "RO/V", 1, 19, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[19:19]"});
    P3_REORD_DIRHP_V_F.set_powerwell("vcccfn_gated");
    P3_REORD_DIRHP_V_F.set_rand_mode(0);
   P3_REORD_DIRHP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_DIRHP_V_F.set_logical_path("HQMID");
    void'(add_field( P3_REORD_DIRHP_V_F ));

    P0_REORD_DIRTP_V_F = new("P0_REORD_DIRTP_V_F", "RO/V", 1, 20, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[20:20]"});
    P0_REORD_DIRTP_V_F.set_powerwell("vcccfn_gated");
    P0_REORD_DIRTP_V_F.set_rand_mode(0);
   P0_REORD_DIRTP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_DIRTP_V_F.set_logical_path("HQMID");
    void'(add_field( P0_REORD_DIRTP_V_F ));

    P1_REORD_DIRTP_V_F = new("P1_REORD_DIRTP_V_F", "RO/V", 1, 21, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[21:21]"});
    P1_REORD_DIRTP_V_F.set_powerwell("vcccfn_gated");
    P1_REORD_DIRTP_V_F.set_rand_mode(0);
   P1_REORD_DIRTP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_DIRTP_V_F.set_logical_path("HQMID");
    void'(add_field( P1_REORD_DIRTP_V_F ));

    P2_REORD_DIRTP_V_F = new("P2_REORD_DIRTP_V_F", "RO/V", 1, 22, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[22:22]"});
    P2_REORD_DIRTP_V_F.set_powerwell("vcccfn_gated");
    P2_REORD_DIRTP_V_F.set_rand_mode(0);
   P2_REORD_DIRTP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_DIRTP_V_F.set_logical_path("HQMID");
    void'(add_field( P2_REORD_DIRTP_V_F ));

    P3_REORD_DIRTP_V_F = new("P3_REORD_DIRTP_V_F", "RO/V", 1, 23, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[23:23]"});
    P3_REORD_DIRTP_V_F.set_powerwell("vcccfn_gated");
    P3_REORD_DIRTP_V_F.set_rand_mode(0);
   P3_REORD_DIRTP_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_DIRTP_V_F.set_logical_path("HQMID");
    void'(add_field( P3_REORD_DIRTP_V_F ));

    P0_REORD_CNT_V_F = new("P0_REORD_CNT_V_F", "RO/V", 1, 24, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[24:24]"});
    P0_REORD_CNT_V_F.set_powerwell("vcccfn_gated");
    P0_REORD_CNT_V_F.set_rand_mode(0);
   P0_REORD_CNT_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_CNT_V_F.set_logical_path("HQMID");
    void'(add_field( P0_REORD_CNT_V_F ));

    P1_REORD_CNT_V_F = new("P1_REORD_CNT_V_F", "RO/V", 1, 25, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[25:25]"});
    P1_REORD_CNT_V_F.set_powerwell("vcccfn_gated");
    P1_REORD_CNT_V_F.set_rand_mode(0);
   P1_REORD_CNT_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_CNT_V_F.set_logical_path("HQMID");
    void'(add_field( P1_REORD_CNT_V_F ));

    P2_REORD_CNT_V_F = new("P2_REORD_CNT_V_F", "RO/V", 1, 26, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[26:26]"});
    P2_REORD_CNT_V_F.set_powerwell("vcccfn_gated");
    P2_REORD_CNT_V_F.set_rand_mode(0);
   P2_REORD_CNT_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_CNT_V_F.set_logical_path("HQMID");
    void'(add_field( P2_REORD_CNT_V_F ));

    P3_REORD_CNT_V_F = new("P3_REORD_CNT_V_F", "RO/V", 1, 27, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[27:27]"});
    P3_REORD_CNT_V_F.set_powerwell("vcccfn_gated");
    P3_REORD_CNT_V_F.set_rand_mode(0);
   P3_REORD_CNT_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REORD_CNT_V_F.set_logical_path("HQMID");
    void'(add_field( P3_REORD_CNT_V_F ));

    P0_REORD_F_V = new("P0_REORD_F_V", "RO/V", 1, 28, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[28:28]"});
    P0_REORD_F_V.set_powerwell("vcccfn_gated");
    P0_REORD_F_V.set_rand_mode(0);
   P0_REORD_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REORD_F_V.set_logical_path("HQMID");
    void'(add_field( P0_REORD_F_V ));

    P1_REORD_F_V = new("P1_REORD_F_V", "RO/V", 1, 29, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[29:29]"});
    P1_REORD_F_V.set_powerwell("vcccfn_gated");
    P1_REORD_F_V.set_rand_mode(0);
   P1_REORD_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REORD_F_V.set_logical_path("HQMID");
    void'(add_field( P1_REORD_F_V ));

    P2_REORD_F_V = new("P2_REORD_F_V", "RO/V", 1, 30, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[30:30]"});
    P2_REORD_F_V.set_powerwell("vcccfn_gated");
    P2_REORD_F_V.set_rand_mode(0);
   P2_REORD_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REORD_F_V.set_logical_path("HQMID");
    void'(add_field( P2_REORD_F_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_NALB_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_ROP_NALB_F_V;
  sla_ral_field P1_ROP_NALB_F_V;
  sla_ral_field P2_ROP_NALB_F_V;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_NALB_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_ROP_NALB_F_V, P0_ROP_NALB_F_V.desired)
     `RAL_FIELD_CP_1(P0_ROP_NALB_F_V, P0_ROP_NALB_F_V.desired, 0)
     `RAL_FIELD_CP(P1_ROP_NALB_F_V, P1_ROP_NALB_F_V.desired)
     `RAL_FIELD_CP_1(P1_ROP_NALB_F_V, P1_ROP_NALB_F_V.desired, 0)
     `RAL_FIELD_CP(P2_ROP_NALB_F_V, P2_ROP_NALB_F_V.desired)
     `RAL_FIELD_CP_1(P2_ROP_NALB_F_V, P2_ROP_NALB_F_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_ROP_NALB_F_V, P0_ROP_NALB_F_V.actual)
     `RAL_FIELD_CP_1(P0_ROP_NALB_F_V, P0_ROP_NALB_F_V.actual, 0)
     `RAL_FIELD_CP(P1_ROP_NALB_F_V, P1_ROP_NALB_F_V.actual)
     `RAL_FIELD_CP_1(P1_ROP_NALB_F_V, P1_ROP_NALB_F_V.actual, 0)
     `RAL_FIELD_CP(P2_ROP_NALB_F_V, P2_ROP_NALB_F_V.actual)
     `RAL_FIELD_CP_1(P2_ROP_NALB_F_V, P2_ROP_NALB_F_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_ROP_NALB_F_V = new("P0_ROP_NALB_F_V", "RO/V", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_nalb.status[0:0]"});
    P0_ROP_NALB_F_V.set_powerwell("vcccfn_gated");
    P0_ROP_NALB_F_V.set_rand_mode(0);
   P0_ROP_NALB_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P0_ROP_NALB_F_V.set_logical_path("HQMID");
    void'(add_field( P0_ROP_NALB_F_V ));

    P1_ROP_NALB_F_V = new("P1_ROP_NALB_F_V", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_nalb.status[1:1]"});
    P1_ROP_NALB_F_V.set_powerwell("vcccfn_gated");
    P1_ROP_NALB_F_V.set_rand_mode(0);
   P1_ROP_NALB_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P1_ROP_NALB_F_V.set_logical_path("HQMID");
    void'(add_field( P1_ROP_NALB_F_V ));

    P2_ROP_NALB_F_V = new("P2_ROP_NALB_F_V", "RO/V", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_nalb.status[2:2]"});
    P2_ROP_NALB_F_V.set_powerwell("vcccfn_gated");
    P2_ROP_NALB_F_V.set_rand_mode(0);
   P2_ROP_NALB_F_V.set_reset_signame("hqm_inp_gated_rst_n");
    P2_ROP_NALB_F_V.set_logical_path("HQMID");
    void'(add_field( P2_ROP_NALB_F_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_NALB_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_NALB_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_QED_DQED_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_QED_DQED_ENQ_CTL_V;
  sla_ral_field P1_QED_DQED_ENQ_CTL_V;
  sla_ral_field CHP_ROP_HCW_DB2_OUT_VALID;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_QED_DQED_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_QED_DQED_ENQ_CTL_V, P0_QED_DQED_ENQ_CTL_V.desired)
     `RAL_FIELD_CP_1(P0_QED_DQED_ENQ_CTL_V, P0_QED_DQED_ENQ_CTL_V.desired, 0)
     `RAL_FIELD_CP(P1_QED_DQED_ENQ_CTL_V, P1_QED_DQED_ENQ_CTL_V.desired)
     `RAL_FIELD_CP_1(P1_QED_DQED_ENQ_CTL_V, P1_QED_DQED_ENQ_CTL_V.desired, 0)
     `RAL_FIELD_CP(CHP_ROP_HCW_DB2_OUT_VALID, CHP_ROP_HCW_DB2_OUT_VALID.desired)
     `RAL_FIELD_CP_1(CHP_ROP_HCW_DB2_OUT_VALID, CHP_ROP_HCW_DB2_OUT_VALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_QED_DQED_ENQ_CTL_V, P0_QED_DQED_ENQ_CTL_V.actual)
     `RAL_FIELD_CP_1(P0_QED_DQED_ENQ_CTL_V, P0_QED_DQED_ENQ_CTL_V.actual, 0)
     `RAL_FIELD_CP(P1_QED_DQED_ENQ_CTL_V, P1_QED_DQED_ENQ_CTL_V.actual)
     `RAL_FIELD_CP_1(P1_QED_DQED_ENQ_CTL_V, P1_QED_DQED_ENQ_CTL_V.actual, 0)
     `RAL_FIELD_CP(CHP_ROP_HCW_DB2_OUT_VALID, CHP_ROP_HCW_DB2_OUT_VALID.actual)
     `RAL_FIELD_CP_1(CHP_ROP_HCW_DB2_OUT_VALID, CHP_ROP_HCW_DB2_OUT_VALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_QED_DQED_ENQ_CTL_V = new("P0_QED_DQED_ENQ_CTL_V", "RO/V", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_qed_dqed.status[0:0]"});
    P0_QED_DQED_ENQ_CTL_V.set_powerwell("vcccfn_gated");
    P0_QED_DQED_ENQ_CTL_V.set_rand_mode(0);
   P0_QED_DQED_ENQ_CTL_V.set_reset_signame("hqm_inp_gated_rst_n");
    P0_QED_DQED_ENQ_CTL_V.set_logical_path("HQMID");
    void'(add_field( P0_QED_DQED_ENQ_CTL_V ));

    P1_QED_DQED_ENQ_CTL_V = new("P1_QED_DQED_ENQ_CTL_V", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_qed_dqed.status[1:1]"});
    P1_QED_DQED_ENQ_CTL_V.set_powerwell("vcccfn_gated");
    P1_QED_DQED_ENQ_CTL_V.set_rand_mode(0);
   P1_QED_DQED_ENQ_CTL_V.set_reset_signame("hqm_inp_gated_rst_n");
    P1_QED_DQED_ENQ_CTL_V.set_logical_path("HQMID");
    void'(add_field( P1_QED_DQED_ENQ_CTL_V ));

    CHP_ROP_HCW_DB2_OUT_VALID = new("CHP_ROP_HCW_DB2_OUT_VALID", "RO/V", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_qed_dqed.status[2:2]"});
    CHP_ROP_HCW_DB2_OUT_VALID.set_powerwell("vcccfn_gated");
    CHP_ROP_HCW_DB2_OUT_VALID.set_rand_mode(0);
   CHP_ROP_HCW_DB2_OUT_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_ROP_HCW_DB2_OUT_VALID.set_logical_path("HQMID");
    void'(add_field( CHP_ROP_HCW_DB2_OUT_VALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_QED_DQED_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_QED_DQED_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_SERIALIZER_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DB_UP_DEPTH;
  sla_ral_field DB_UP_OUT_READY;
  sla_ral_field DB_UP_OUT_TAKEN;
  sla_ral_field DB_UP_OUT_STALLED;
  sla_ral_field DB_UP_INPUT_TAKEN;
  sla_ral_field DB_UP_INPUT_STALLED;
  sla_ral_field DB_DOWN_DEPTH;
  sla_ral_field DB_DOWN_OUT_READY;
  sla_ral_field DB_DOWN_OUT_TAKEN;
  sla_ral_field DB_DOWN_OUT_STALLED;
  sla_ral_field DB_DOWN_INPUT_TAKEN;
  sla_ral_field DB_DOWN_INPUT_STALLED;
  sla_ral_field RSZV0;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_SERIALIZER_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DB_UP_DEPTH, DB_UP_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_UP_DEPTH, DB_UP_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_UP_OUT_READY, DB_UP_OUT_READY.desired)
     `RAL_FIELD_CP_1(DB_UP_OUT_READY, DB_UP_OUT_READY.desired, 0)
     `RAL_FIELD_CP(DB_UP_OUT_TAKEN, DB_UP_OUT_TAKEN.desired)
     `RAL_FIELD_CP_1(DB_UP_OUT_TAKEN, DB_UP_OUT_TAKEN.desired, 0)
     `RAL_FIELD_CP(DB_UP_OUT_STALLED, DB_UP_OUT_STALLED.desired)
     `RAL_FIELD_CP_1(DB_UP_OUT_STALLED, DB_UP_OUT_STALLED.desired, 0)
     `RAL_FIELD_CP(DB_UP_INPUT_TAKEN, DB_UP_INPUT_TAKEN.desired)
     `RAL_FIELD_CP_1(DB_UP_INPUT_TAKEN, DB_UP_INPUT_TAKEN.desired, 0)
     `RAL_FIELD_CP(DB_UP_INPUT_STALLED, DB_UP_INPUT_STALLED.desired)
     `RAL_FIELD_CP_1(DB_UP_INPUT_STALLED, DB_UP_INPUT_STALLED.desired, 0)
     `RAL_FIELD_CP(DB_DOWN_DEPTH, DB_DOWN_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_DOWN_DEPTH, DB_DOWN_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_DOWN_OUT_READY, DB_DOWN_OUT_READY.desired)
     `RAL_FIELD_CP_1(DB_DOWN_OUT_READY, DB_DOWN_OUT_READY.desired, 0)
     `RAL_FIELD_CP(DB_DOWN_OUT_TAKEN, DB_DOWN_OUT_TAKEN.desired)
     `RAL_FIELD_CP_1(DB_DOWN_OUT_TAKEN, DB_DOWN_OUT_TAKEN.desired, 0)
     `RAL_FIELD_CP(DB_DOWN_OUT_STALLED, DB_DOWN_OUT_STALLED.desired)
     `RAL_FIELD_CP_1(DB_DOWN_OUT_STALLED, DB_DOWN_OUT_STALLED.desired, 0)
     `RAL_FIELD_CP(DB_DOWN_INPUT_TAKEN, DB_DOWN_INPUT_TAKEN.desired)
     `RAL_FIELD_CP_1(DB_DOWN_INPUT_TAKEN, DB_DOWN_INPUT_TAKEN.desired, 0)
     `RAL_FIELD_CP(DB_DOWN_INPUT_STALLED, DB_DOWN_INPUT_STALLED.desired)
     `RAL_FIELD_CP_1(DB_DOWN_INPUT_STALLED, DB_DOWN_INPUT_STALLED.desired, 0)
     `RAL_FIELD_CP(RSZV0, RSZV0.desired)
     `RAL_FIELD_CP_16(RSZV0, RSZV0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_2(RSZV0, RSZV0.desired, 16,17)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DB_UP_DEPTH, DB_UP_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_UP_DEPTH, DB_UP_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_UP_OUT_READY, DB_UP_OUT_READY.actual)
     `RAL_FIELD_CP_1(DB_UP_OUT_READY, DB_UP_OUT_READY.actual, 0)
     `RAL_FIELD_CP(DB_UP_OUT_TAKEN, DB_UP_OUT_TAKEN.actual)
     `RAL_FIELD_CP_1(DB_UP_OUT_TAKEN, DB_UP_OUT_TAKEN.actual, 0)
     `RAL_FIELD_CP(DB_UP_OUT_STALLED, DB_UP_OUT_STALLED.actual)
     `RAL_FIELD_CP_1(DB_UP_OUT_STALLED, DB_UP_OUT_STALLED.actual, 0)
     `RAL_FIELD_CP(DB_UP_INPUT_TAKEN, DB_UP_INPUT_TAKEN.actual)
     `RAL_FIELD_CP_1(DB_UP_INPUT_TAKEN, DB_UP_INPUT_TAKEN.actual, 0)
     `RAL_FIELD_CP(DB_UP_INPUT_STALLED, DB_UP_INPUT_STALLED.actual)
     `RAL_FIELD_CP_1(DB_UP_INPUT_STALLED, DB_UP_INPUT_STALLED.actual, 0)
     `RAL_FIELD_CP(DB_DOWN_DEPTH, DB_DOWN_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_DOWN_DEPTH, DB_DOWN_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_DOWN_OUT_READY, DB_DOWN_OUT_READY.actual)
     `RAL_FIELD_CP_1(DB_DOWN_OUT_READY, DB_DOWN_OUT_READY.actual, 0)
     `RAL_FIELD_CP(DB_DOWN_OUT_TAKEN, DB_DOWN_OUT_TAKEN.actual)
     `RAL_FIELD_CP_1(DB_DOWN_OUT_TAKEN, DB_DOWN_OUT_TAKEN.actual, 0)
     `RAL_FIELD_CP(DB_DOWN_OUT_STALLED, DB_DOWN_OUT_STALLED.actual)
     `RAL_FIELD_CP_1(DB_DOWN_OUT_STALLED, DB_DOWN_OUT_STALLED.actual, 0)
     `RAL_FIELD_CP(DB_DOWN_INPUT_TAKEN, DB_DOWN_INPUT_TAKEN.actual)
     `RAL_FIELD_CP_1(DB_DOWN_INPUT_TAKEN, DB_DOWN_INPUT_TAKEN.actual, 0)
     `RAL_FIELD_CP(DB_DOWN_INPUT_STALLED, DB_DOWN_INPUT_STALLED.actual)
     `RAL_FIELD_CP_1(DB_DOWN_INPUT_STALLED, DB_DOWN_INPUT_STALLED.actual, 0)
     `RAL_FIELD_CP(RSZV0, RSZV0.actual)
     `RAL_FIELD_CP_16(RSZV0, RSZV0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_2(RSZV0, RSZV0.actual, 16,17)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DB_UP_DEPTH = new("DB_UP_DEPTH", "RO/V", 2, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[1:0]"});
    DB_UP_DEPTH.set_powerwell("vcccfn_gated");
    DB_UP_DEPTH.set_rand_mode(0);
   DB_UP_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_UP_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_UP_DEPTH ));

    DB_UP_OUT_READY = new("DB_UP_OUT_READY", "RO/V", 1, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[2:2]"});
    DB_UP_OUT_READY.set_powerwell("vcccfn_gated");
    DB_UP_OUT_READY.set_rand_mode(0);
   DB_UP_OUT_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_UP_OUT_READY.set_logical_path("HQMID");
    void'(add_field( DB_UP_OUT_READY ));

    DB_UP_OUT_TAKEN = new("DB_UP_OUT_TAKEN", "RO/V", 1, 3, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[3:3]"});
    DB_UP_OUT_TAKEN.set_powerwell("vcccfn_gated");
    DB_UP_OUT_TAKEN.set_rand_mode(0);
   DB_UP_OUT_TAKEN.set_reset_signame("hqm_inp_gated_rst_n");
    DB_UP_OUT_TAKEN.set_logical_path("HQMID");
    void'(add_field( DB_UP_OUT_TAKEN ));

    DB_UP_OUT_STALLED = new("DB_UP_OUT_STALLED", "RO/V", 1, 4, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[4:4]"});
    DB_UP_OUT_STALLED.set_powerwell("vcccfn_gated");
    DB_UP_OUT_STALLED.set_rand_mode(0);
   DB_UP_OUT_STALLED.set_reset_signame("hqm_inp_gated_rst_n");
    DB_UP_OUT_STALLED.set_logical_path("HQMID");
    void'(add_field( DB_UP_OUT_STALLED ));

    DB_UP_INPUT_TAKEN = new("DB_UP_INPUT_TAKEN", "RO/V", 1, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[5:5]"});
    DB_UP_INPUT_TAKEN.set_powerwell("vcccfn_gated");
    DB_UP_INPUT_TAKEN.set_rand_mode(0);
   DB_UP_INPUT_TAKEN.set_reset_signame("hqm_inp_gated_rst_n");
    DB_UP_INPUT_TAKEN.set_logical_path("HQMID");
    void'(add_field( DB_UP_INPUT_TAKEN ));

    DB_UP_INPUT_STALLED = new("DB_UP_INPUT_STALLED", "RO/V", 1, 6, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[6:6]"});
    DB_UP_INPUT_STALLED.set_powerwell("vcccfn_gated");
    DB_UP_INPUT_STALLED.set_rand_mode(0);
   DB_UP_INPUT_STALLED.set_reset_signame("hqm_inp_gated_rst_n");
    DB_UP_INPUT_STALLED.set_logical_path("HQMID");
    void'(add_field( DB_UP_INPUT_STALLED ));

    DB_DOWN_DEPTH = new("DB_DOWN_DEPTH", "RO/V", 2, 7, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[8:7]"});
    DB_DOWN_DEPTH.set_powerwell("vcccfn_gated");
    DB_DOWN_DEPTH.set_rand_mode(0);
   DB_DOWN_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DOWN_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_DOWN_DEPTH ));

    DB_DOWN_OUT_READY = new("DB_DOWN_OUT_READY", "RO/V", 1, 9, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[9:9]"});
    DB_DOWN_OUT_READY.set_powerwell("vcccfn_gated");
    DB_DOWN_OUT_READY.set_rand_mode(0);
   DB_DOWN_OUT_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DOWN_OUT_READY.set_logical_path("HQMID");
    void'(add_field( DB_DOWN_OUT_READY ));

    DB_DOWN_OUT_TAKEN = new("DB_DOWN_OUT_TAKEN", "RO/V", 1, 10, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[10:10]"});
    DB_DOWN_OUT_TAKEN.set_powerwell("vcccfn_gated");
    DB_DOWN_OUT_TAKEN.set_rand_mode(0);
   DB_DOWN_OUT_TAKEN.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DOWN_OUT_TAKEN.set_logical_path("HQMID");
    void'(add_field( DB_DOWN_OUT_TAKEN ));

    DB_DOWN_OUT_STALLED = new("DB_DOWN_OUT_STALLED", "RO/V", 1, 11, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[11:11]"});
    DB_DOWN_OUT_STALLED.set_powerwell("vcccfn_gated");
    DB_DOWN_OUT_STALLED.set_rand_mode(0);
   DB_DOWN_OUT_STALLED.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DOWN_OUT_STALLED.set_logical_path("HQMID");
    void'(add_field( DB_DOWN_OUT_STALLED ));

    DB_DOWN_INPUT_TAKEN = new("DB_DOWN_INPUT_TAKEN", "RO/V", 1, 12, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[12:12]"});
    DB_DOWN_INPUT_TAKEN.set_powerwell("vcccfn_gated");
    DB_DOWN_INPUT_TAKEN.set_rand_mode(0);
   DB_DOWN_INPUT_TAKEN.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DOWN_INPUT_TAKEN.set_logical_path("HQMID");
    void'(add_field( DB_DOWN_INPUT_TAKEN ));

    DB_DOWN_INPUT_STALLED = new("DB_DOWN_INPUT_STALLED", "RO/V", 1, 13, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[13:13]"});
    DB_DOWN_INPUT_STALLED.set_powerwell("vcccfn_gated");
    DB_DOWN_INPUT_STALLED.set_rand_mode(0);
   DB_DOWN_INPUT_STALLED.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DOWN_INPUT_STALLED.set_logical_path("HQMID");
    void'(add_field( DB_DOWN_INPUT_STALLED ));

    RSZV0 = new("RSZV0", "RO/V", 18, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[31:14]"});
    RSZV0.set_powerwell("vcccfn_gated");
    RSZV0.set_rand_mode(0);
   RSZV0.set_reset_signame("hqm_inp_gated_rst_n");
    RSZV0.set_logical_path("HQMID");
    void'(add_field( RSZV0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_SERIALIZER_STATUS_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_SERIALIZER_STATUS_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_SYNDROME_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDDATA;
  sla_ral_field SYNDTYPE;
  sla_ral_field SYNDVALID;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_SYNDROME_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.desired)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.desired)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.desired, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.desired)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.actual)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.actual)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.actual, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.actual)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDDATA = new("SYNDDATA", "RO/V", 28, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
    SYNDDATA.set_powerwell("vcccfn_gated");
    SYNDDATA.set_rand_mode(0);
   SYNDDATA.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDDATA.set_logical_path("HQMID");
    void'(add_field( SYNDDATA ));

    SYNDTYPE = new("SYNDTYPE", "RO/V", 3, 28, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
    SYNDTYPE.set_powerwell("vcccfn_gated");
    SYNDTYPE.set_rand_mode(0);
   SYNDTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDTYPE.set_logical_path("HQMID");
    void'(add_field( SYNDTYPE ));

    SYNDVALID = new("SYNDVALID", "RW/1C/V", 1, 31, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[31:31]"});
    SYNDVALID.set_powerwell("vcccfn_gated");
    SYNDVALID.set_rand_mode(0);
   SYNDVALID.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDVALID.set_logical_path("HQMID");
    void'(add_field( SYNDVALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_SYNDROME_00_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_SYNDROME_00_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_SYNDROME_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDDATA;
  sla_ral_field SYNDTYPE;
  sla_ral_field SYNDVALID;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_SYNDROME_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.desired)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.desired)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.desired, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.desired)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.actual)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.actual)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.actual, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.actual)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDDATA = new("SYNDDATA", "RO/V", 28, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
    SYNDDATA.set_powerwell("vcccfn_gated");
    SYNDDATA.set_rand_mode(0);
   SYNDDATA.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDDATA.set_logical_path("HQMID");
    void'(add_field( SYNDDATA ));

    SYNDTYPE = new("SYNDTYPE", "RO/V", 3, 28, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
    SYNDTYPE.set_powerwell("vcccfn_gated");
    SYNDTYPE.set_rand_mode(0);
   SYNDTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDTYPE.set_logical_path("HQMID");
    void'(add_field( SYNDTYPE ));

    SYNDVALID = new("SYNDVALID", "RW/1C/V", 1, 31, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[31:31]"});
    SYNDVALID.set_powerwell("vcccfn_gated");
    SYNDVALID.set_rand_mode(0);
   SYNDVALID.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDVALID.set_logical_path("HQMID");
    void'(add_field( SYNDVALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_SYNDROME_01_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_SYNDROME_01_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_UNIT_IDLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PIPE_IDLE;
  sla_ral_field UNIT_IDLE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_UNIT_IDLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PIPE_IDLE, PIPE_IDLE.desired)
     `RAL_FIELD_CP_1(PIPE_IDLE, PIPE_IDLE.desired, 0)
     `RAL_FIELD_CP(UNIT_IDLE, UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(UNIT_IDLE, UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PIPE_IDLE, PIPE_IDLE.actual)
     `RAL_FIELD_CP_1(PIPE_IDLE, PIPE_IDLE.actual, 0)
     `RAL_FIELD_CP(UNIT_IDLE, UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(UNIT_IDLE, UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PIPE_IDLE = new("PIPE_IDLE", "RO/V", 1, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_idle.internal_f[0:0]"});
    PIPE_IDLE.set_powerwell("vcccfn_gated");
    PIPE_IDLE.set_rand_mode(0);
   PIPE_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    PIPE_IDLE.set_logical_path("HQMID");
    void'(add_field( PIPE_IDLE ));

    UNIT_IDLE = new("UNIT_IDLE", "RO/V", 1, 1, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_idle.internal_f[1:1]"});
    UNIT_IDLE.set_powerwell("vcccfn_gated");
    UNIT_IDLE.set_rand_mode(0);
   UNIT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( UNIT_IDLE ));

    RSVZ0 = new("RSVZ0", "RO/V", 30, 2, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_idle.internal_f[31:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_UNIT_IDLE_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_UNIT_IDLE_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_UNIT_TIMEOUT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MULTIPLIER;
  sla_ral_field THRESHOLD;
  sla_ral_field RSVZ0;
  sla_ral_field ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_UNIT_TIMEOUT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.desired)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.desired)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.desired)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.actual)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.actual)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.actual)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MULTIPLIER = new("MULTIPLIER", "RO", 5, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_timeout.internal_f[4:0]"});
    MULTIPLIER.set_powerwell("vcccfn_gated");
    MULTIPLIER.set_rand_mode(0);
   MULTIPLIER.set_reset_signame("hqm_inp_gated_rst_n");
    MULTIPLIER.set_logical_path("HQMID");
    void'(add_field( MULTIPLIER ));

    THRESHOLD = new("THRESHOLD", "RW", 11, 5, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_timeout.internal_f[15:5]"});
    THRESHOLD.set_powerwell("vcccfn_gated");
    THRESHOLD.set_rand_mode(0);
   THRESHOLD.set_reset_signame("hqm_inp_gated_rst_n");
    THRESHOLD.set_logical_path("HQMID");
    void'(add_field( THRESHOLD ));

    RSVZ0 = new("RSVZ0", "RW/V", 15, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_timeout.internal_f[30:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    ENABLE = new("ENABLE", "RW", 1, 31, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_timeout.internal_f[31:31]"});
    ENABLE.set_powerwell("vcccfn_gated");
    ENABLE.set_rand_mode(0);
   ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE.set_logical_path("HQMID");
    void'(add_field( ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_UNIT_TIMEOUT_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_UNIT_TIMEOUT_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PATCH_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DELAY_CLOCKOFF;
  sla_ral_field DELAY_CLKOFF_BYPASS;
  sla_ral_field RSVZ1;
  sla_ral_field RSVZ0;
  sla_ral_field DISABLE_CLOCKOFF;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PATCH_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.desired, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.actual, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DELAY_CLOCKOFF = new("DELAY_CLOCKOFF", "RW", 8, 0, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_patch_control.internal_f[7:0]"});
    DELAY_CLOCKOFF.set_powerwell("vcccfn_gated");
    DELAY_CLOCKOFF.set_rand_mode(0);
   DELAY_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DELAY_CLOCKOFF ));

    DELAY_CLKOFF_BYPASS = new("DELAY_CLKOFF_BYPASS", "RW", 6, 8, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_patch_control.internal_f[13:8]"});
    DELAY_CLKOFF_BYPASS.set_powerwell("vcccfn_gated");
    DELAY_CLKOFF_BYPASS.set_rand_mode(0);
   DELAY_CLKOFF_BYPASS.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLKOFF_BYPASS.set_logical_path("HQMID");
    void'(add_field( DELAY_CLKOFF_BYPASS ));

    RSVZ1 = new("RSVZ1", "RW", 2, 14, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_patch_control.internal_f[15:14]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    RSVZ0 = new("RSVZ0", "RW", 15, 16, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_patch_control.internal_f[30:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    DISABLE_CLOCKOFF = new("DISABLE_CLOCKOFF", "RW", 1, 31, {"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_patch_control.internal_f[31:31]"});
    DISABLE_CLOCKOFF.set_powerwell("vcccfn_gated");
    DISABLE_CLOCKOFF.set_rand_mode(0);
   DISABLE_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DISABLE_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DISABLE_CLOCKOFF ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PATCH_CONTROL_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PATCH_CONTROL_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SN_ACTIVE;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN_ACTIVE, SN_ACTIVE.desired)
     `RAL_FIELD_CP_16(SN_ACTIVE, SN_ACTIVE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SN_ACTIVE, SN_ACTIVE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN_ACTIVE, SN_ACTIVE.actual)
     `RAL_FIELD_CP_16(SN_ACTIVE, SN_ACTIVE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SN_ACTIVE, SN_ACTIVE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SN_ACTIVE = new("SN_ACTIVE", "RO/V", 32, 0, {""});
    SN_ACTIVE.set_powerwell("vcccfn_gated");
    SN_ACTIVE.set_rand_mode(0);
   SN_ACTIVE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SN_ACTIVE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SN_ACTIVE;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN_ACTIVE, SN_ACTIVE.desired)
     `RAL_FIELD_CP_16(SN_ACTIVE, SN_ACTIVE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SN_ACTIVE, SN_ACTIVE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN_ACTIVE, SN_ACTIVE.actual)
     `RAL_FIELD_CP_16(SN_ACTIVE, SN_ACTIVE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SN_ACTIVE, SN_ACTIVE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SN_ACTIVE = new("SN_ACTIVE", "RO/V", 32, 0, {""});
    SN_ACTIVE.set_powerwell("vcccfn_gated");
    SN_ACTIVE.set_rand_mode(0);
   SN_ACTIVE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SN_ACTIVE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_HP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HP;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_HP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HP, HP.desired)
     `RAL_FIELD_CP_14(HP, HP.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HP, HP.actual)
     `RAL_FIELD_CP_14(HP, HP.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HP = new("HP", "RO/V", 14, 0, {""});
    HP.set_powerwell("vcccfn_gated");
    HP.set_rand_mode(0);
   HP.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( HP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_HP_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_HP_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_TP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TP;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_TP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TP, TP.desired)
     `RAL_FIELD_CP_14(TP, TP.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TP, TP.actual)
     `RAL_FIELD_CP_14(TP, TP.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TP = new("TP", "RO/V", 14, 0, {""});
    TP.set_powerwell("vcccfn_gated");
    TP.set_rand_mode(0);
   TP.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_TP_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_TP_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_HP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HP;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_HP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HP, HP.desired)
     `RAL_FIELD_CP_14(HP, HP.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HP, HP.actual)
     `RAL_FIELD_CP_14(HP, HP.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HP = new("HP", "RO/V", 14, 0, {""});
    HP.set_powerwell("vcccfn_gated");
    HP.set_rand_mode(0);
   HP.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( HP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_HP_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_HP_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_TP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TP;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_TP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TP, TP.desired)
     `RAL_FIELD_CP_14(TP, TP.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TP, TP.actual)
     `RAL_FIELD_CP_14(TP, TP.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TP = new("TP", "RO/V", 14, 0, {""});
    TP.set_powerwell("vcccfn_gated");
    TP.set_rand_mode(0);
   TP.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_TP_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_TP_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_REORDER_STATE_QID_QIDIX_CQ_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ;
  sla_ral_field QIDIX;
  sla_ral_field QID;
  sla_ral_field QPRI;
  sla_ral_field USER;
  sla_ral_field RSZV0;
  sla_ral_field VLD;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_QID_QIDIX_CQ_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ, CQ.desired)
     `RAL_FIELD_CP_7(CQ, CQ.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QIDIX, QIDIX.desired)
     `RAL_FIELD_CP_3(QIDIX, QIDIX.desired, 0,1,2)
     `RAL_FIELD_CP(QID, QID.desired)
     `RAL_FIELD_CP_7(QID, QID.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QPRI, QPRI.desired)
     `RAL_FIELD_CP_3(QPRI, QPRI.desired, 0,1,2)
     `RAL_FIELD_CP(USER, USER.desired)
     `RAL_FIELD_CP_1(USER, USER.desired, 0)
     `RAL_FIELD_CP(RSZV0, RSZV0.desired)
     `RAL_FIELD_CP_1(RSZV0, RSZV0.desired, 0)
     `RAL_FIELD_CP(VLD, VLD.desired)
     `RAL_FIELD_CP_1(VLD, VLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ, CQ.actual)
     `RAL_FIELD_CP_7(CQ, CQ.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QIDIX, QIDIX.actual)
     `RAL_FIELD_CP_3(QIDIX, QIDIX.actual, 0,1,2)
     `RAL_FIELD_CP(QID, QID.actual)
     `RAL_FIELD_CP_7(QID, QID.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QPRI, QPRI.actual)
     `RAL_FIELD_CP_3(QPRI, QPRI.actual, 0,1,2)
     `RAL_FIELD_CP(USER, USER.actual)
     `RAL_FIELD_CP_1(USER, USER.actual, 0)
     `RAL_FIELD_CP(RSZV0, RSZV0.actual)
     `RAL_FIELD_CP_1(RSZV0, RSZV0.actual, 0)
     `RAL_FIELD_CP(VLD, VLD.actual)
     `RAL_FIELD_CP_1(VLD, VLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ = new("CQ", "RO/V", 7, 0, {""});
    CQ.set_powerwell("vcccfn_gated");
    CQ.set_rand_mode(0);
   CQ.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ ));

    QIDIX = new("QIDIX", "RO/V", 3, 7, {""});
    QIDIX.set_powerwell("vcccfn_gated");
    QIDIX.set_rand_mode(0);
   QIDIX.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QIDIX ));

    QID = new("QID", "RO/V", 7, 10, {""});
    QID.set_powerwell("vcccfn_gated");
    QID.set_rand_mode(0);
   QID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID ));

    QPRI = new("QPRI", "RO/V", 3, 17, {""});
    QPRI.set_powerwell("vcccfn_gated");
    QPRI.set_rand_mode(0);
   QPRI.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QPRI ));

    USER = new("USER", "RO/V", 1, 20, {""});
    USER.set_powerwell("vcccfn_gated");
    USER.set_rand_mode(0);
   USER.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( USER ));

    RSZV0 = new("RSZV0", "RO/V", 1, 21, {""});
    RSZV0.set_powerwell("vcccfn_gated");
    RSZV0.set_rand_mode(0);
   RSZV0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( RSZV0 ));

    VLD = new("VLD", "RO/V", 1, 22, {""});
    VLD.set_powerwell("vcccfn_gated");
    VLD.set_rand_mode(0);
   VLD.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_QID_QIDIX_CQ_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_REORDER_STATE_QID_QIDIX_CQ_reg

// ================================================

class hqm_reorder_pipe_bridge_CFG_REORDER_STATE_CNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DIR_FRAG_CNT;
  sla_ral_field LDB_FRAG_CNT;
  sla_ral_field RESERVED;

  // --------------------------
  `ovm_object_utils(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_CNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR_FRAG_CNT, DIR_FRAG_CNT.desired)
     `RAL_FIELD_CP_5(DIR_FRAG_CNT, DIR_FRAG_CNT.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(LDB_FRAG_CNT, LDB_FRAG_CNT.desired)
     `RAL_FIELD_CP_5(LDB_FRAG_CNT, LDB_FRAG_CNT.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_16(RESERVED, RESERVED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(RESERVED, RESERVED.desired, 16,17,18,19,20,21)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR_FRAG_CNT, DIR_FRAG_CNT.actual)
     `RAL_FIELD_CP_5(DIR_FRAG_CNT, DIR_FRAG_CNT.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(LDB_FRAG_CNT, LDB_FRAG_CNT.actual)
     `RAL_FIELD_CP_5(LDB_FRAG_CNT, LDB_FRAG_CNT.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_16(RESERVED, RESERVED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(RESERVED, RESERVED.actual, 16,17,18,19,20,21)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DIR_FRAG_CNT = new("DIR_FRAG_CNT", "RO/V", 5, 0, {""});
    DIR_FRAG_CNT.set_powerwell("vcccfn_gated");
    DIR_FRAG_CNT.set_rand_mode(0);
   DIR_FRAG_CNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DIR_FRAG_CNT ));

    LDB_FRAG_CNT = new("LDB_FRAG_CNT", "RO/V", 5, 5, {""});
    LDB_FRAG_CNT.set_powerwell("vcccfn_gated");
    LDB_FRAG_CNT.set_rand_mode(0);
   LDB_FRAG_CNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( LDB_FRAG_CNT ));

    RESERVED = new("RESERVED", "RO/V", 22, 10, {""});
    RESERVED.set_powerwell("vcccfn_gated");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( RESERVED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_reorder_pipe_bridge_CFG_REORDER_STATE_CNT_reg) 
endclass : hqm_reorder_pipe_bridge_CFG_REORDER_STATE_CNT_reg

// ================================================

class hqm_reorder_pipe_bridge_file extends sla_ral_file;

  rand hqm_reorder_pipe_bridge_CFG_GRP_SN_MODE_reg CFG_GRP_SN_MODE;
  rand hqm_reorder_pipe_bridge_CFG_ROP_CSR_CONTROL_reg CFG_ROP_CSR_CONTROL;
  rand hqm_reorder_pipe_bridge_CFG_UNIT_VERSION_reg CFG_UNIT_VERSION;
  rand hqm_reorder_pipe_bridge_CFG_GRP_0_SLOT_SHIFT_reg CFG_GRP_0_SLOT_SHIFT[16];
  rand hqm_reorder_pipe_bridge_CFG_GRP_1_SLOT_SHIFT_reg CFG_GRP_1_SLOT_SHIFT[16];
  rand hqm_reorder_pipe_bridge_CFG_CONTROL_GENERAL_0_reg CFG_CONTROL_GENERAL_0;
  rand hqm_reorder_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg CFG_DIAGNOSTIC_AW_STATUS;
  rand hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_CHP_ROP_HCW_reg CFG_FIFO_WMSTAT_CHP_ROP_HCW;
  rand hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_DIR_RPLY_REQ_reg CFG_FIFO_WMSTAT_DIR_RPLY_REQ;
  rand hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LDB_RPLY_REQ_reg CFG_FIFO_WMSTAT_LDB_RPLY_REQ;
  rand hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LSP_REORDERCMP_reg CFG_FIFO_WMSTAT_LSP_REORDERCMP;
  rand hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_COMPLETE_reg CFG_FIFO_WMSTAT_SN_COMPLETE;
  rand hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_ORDERED_reg CFG_FIFO_WMSTAT_SN_ORDERED;
  rand hqm_reorder_pipe_bridge_CFG_FRAG_INTEGRITY_COUNT_reg CFG_FRAG_INTEGRITY_COUNT;
  rand hqm_reorder_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg CFG_HW_AGITATE_CONTROL;
  rand hqm_reorder_pipe_bridge_CFG_HW_AGITATE_SELECT_reg CFG_HW_AGITATE_SELECT;
  rand hqm_reorder_pipe_bridge_CFG_INTERFACE_STATUS_reg CFG_INTERFACE_STATUS;
  rand hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg CFG_SMON_ACTIVITYCOUNTER0;
  rand hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg CFG_SMON_ACTIVITYCOUNTER1;
  rand hqm_reorder_pipe_bridge_CFG_SMON_COMPARE0_reg CFG_SMON_COMPARE0;
  rand hqm_reorder_pipe_bridge_CFG_SMON_COMPARE1_reg CFG_SMON_COMPARE1;
  rand hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION0_reg CFG_SMON_CONFIGURATION0;
  rand hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION1_reg CFG_SMON_CONFIGURATION1;
  rand hqm_reorder_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg CFG_SMON_MAXIMUM_TIMER;
  rand hqm_reorder_pipe_bridge_CFG_SMON_TIMER_reg CFG_SMON_TIMER;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP0_reg CFG_PIPE_HEALTH_HOLD_GRP0;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP1_reg CFG_PIPE_HEALTH_HOLD_GRP1;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_DP_reg CFG_PIPE_HEALTH_HOLD_ROP_DP;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP_reg CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_NALB_reg CFG_PIPE_HEALTH_HOLD_ROP_NALB;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED_reg CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP0_reg CFG_PIPE_HEALTH_VALID_GRP0;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP1_reg CFG_PIPE_HEALTH_VALID_GRP1;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_DP_reg CFG_PIPE_HEALTH_VALID_ROP_DP;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP_reg CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_NALB_reg CFG_PIPE_HEALTH_VALID_ROP_NALB;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_QED_DQED_reg CFG_PIPE_HEALTH_VALID_ROP_QED_DQED;
  rand hqm_reorder_pipe_bridge_CFG_SERIALIZER_STATUS_reg CFG_SERIALIZER_STATUS;
  rand hqm_reorder_pipe_bridge_CFG_SYNDROME_00_reg CFG_SYNDROME_00;
  rand hqm_reorder_pipe_bridge_CFG_SYNDROME_01_reg CFG_SYNDROME_01;
  rand hqm_reorder_pipe_bridge_CFG_UNIT_IDLE_reg CFG_UNIT_IDLE;
  rand hqm_reorder_pipe_bridge_CFG_UNIT_TIMEOUT_reg CFG_UNIT_TIMEOUT;
  rand hqm_reorder_pipe_bridge_CFG_PATCH_CONTROL_reg CFG_PATCH_CONTROL;
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0_reg CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[32];
  rand hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1_reg CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[32];
  rand hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_HP_reg CFG_REORDER_STATE_NALB_HP[2048];
  rand hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_TP_reg CFG_REORDER_STATE_NALB_TP[2048];
  rand hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_HP_reg CFG_REORDER_STATE_DIR_HP[2048];
  rand hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_TP_reg CFG_REORDER_STATE_DIR_TP[2048];
  rand hqm_reorder_pipe_bridge_CFG_REORDER_STATE_QID_QIDIX_CQ_reg CFG_REORDER_STATE_QID_QIDIX_CQ[2048];
  rand hqm_reorder_pipe_bridge_CFG_REORDER_STATE_CNT_reg CFG_REORDER_STATE_CNT[2048];

  `ovm_component_utils(hqm_reorder_pipe_bridge_file)

  function new(string n, ovm_component p);
    super.new(n,p);
  endfunction

  // --------------------------
  function void build();
    regfilename = this.get_name();

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_GRP_SN_MODE";
    `endif
    CFG_GRP_SN_MODE = hqm_reorder_pipe_bridge_CFG_GRP_SN_MODE_reg::type_id::create("CFG_GRP_SN_MODE", this);
    CFG_GRP_SN_MODE.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000000, 32, 32'b00000000000000000000000000000000);
    CFG_GRP_SN_MODE.set_space_addr("MSG", 28'h4000000);
    CFG_GRP_SN_MODE.set_space_addr("msg_bus_port", 'h21);
    CFG_GRP_SN_MODE.set_space_addr("MEM-SB",28'h4000000);
    CFG_GRP_SN_MODE.set_space_addr("MEM", 28'h4000000);
      CFG_GRP_SN_MODE.set_space("MEM");
      CFG_GRP_SN_MODE.set_msg_opcode("MEM-SB");
      CFG_GRP_SN_MODE.set_fid(4'h0, "MEM-SB");
  	CFG_GRP_SN_MODE.set_bar(4'h2, "MEM-SB");
      CFG_GRP_SN_MODE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_GRP_SN_MODE.set_user_attribute("diag_reg", "0");
      CFG_GRP_SN_MODE.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_GRP_SN_MODE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_GRP_SN_MODE:dont_test") ) CFG_GRP_SN_MODE.set_test_reg(1'b0);
      if (!add_reg( CFG_GRP_SN_MODE )) begin
        `sla_error(get_name(), ("Could not add register CFG_GRP_SN_MODE"));
      end
   CFG_GRP_SN_MODE.SN_MODE_0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_grp_sn_mode.internal_f[2:0]"});
   CFG_GRP_SN_MODE.RSZV0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_grp_sn_mode.internal_f[7:3]"});
   CFG_GRP_SN_MODE.SN_MODE_1.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_grp_sn_mode.internal_f[10:8]"});
   CFG_GRP_SN_MODE.RSZV1.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_grp_sn_mode.internal_f[31:11]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_ROP_CSR_CONTROL";
    `endif
    CFG_ROP_CSR_CONTROL = hqm_reorder_pipe_bridge_CFG_ROP_CSR_CONTROL_reg::type_id::create("CFG_ROP_CSR_CONTROL", this);
    CFG_ROP_CSR_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000004, 32, 32'b00000000000000000011111101111111);
    CFG_ROP_CSR_CONTROL.set_space_addr("MSG", 28'h4000004);
    CFG_ROP_CSR_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_ROP_CSR_CONTROL.set_space_addr("MEM-SB",28'h4000004);
    CFG_ROP_CSR_CONTROL.set_space_addr("MEM", 28'h4000004);
      CFG_ROP_CSR_CONTROL.set_space("MEM");
      CFG_ROP_CSR_CONTROL.set_msg_opcode("MEM-SB");
      CFG_ROP_CSR_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_ROP_CSR_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_ROP_CSR_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ROP_CSR_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_ROP_CSR_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_ROP_CSR_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_ROP_CSR_CONTROL:dont_test") ) CFG_ROP_CSR_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_ROP_CSR_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_ROP_CSR_CONTROL"));
      end
   CFG_ROP_CSR_CONTROL.ENABLE0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[0:0]"});
   CFG_ROP_CSR_CONTROL.ENABLE1.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[1:1]"});
   CFG_ROP_CSR_CONTROL.ENABLE2.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[2:2]"});
   CFG_ROP_CSR_CONTROL.ENABLE3.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[3:3]"});
   CFG_ROP_CSR_CONTROL.ENABLE4.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[4:4]"});
   CFG_ROP_CSR_CONTROL.ENABLE5.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[5:5]"});
   CFG_ROP_CSR_CONTROL.ENABLE6.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[6:6]"});
   CFG_ROP_CSR_CONTROL.ENABLE7.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[7:7]"});
   CFG_ROP_CSR_CONTROL.ENABLE8.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[8:8]"});
   CFG_ROP_CSR_CONTROL.ENABLE9.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[9:9]"});
   CFG_ROP_CSR_CONTROL.ENABLE10.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[10:10]"});
   CFG_ROP_CSR_CONTROL.ENABLE11.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[11:11]"});
   CFG_ROP_CSR_CONTROL.ENABLE12.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[12:12]"});
   CFG_ROP_CSR_CONTROL.ENABLE13.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[13:13]"});
   CFG_ROP_CSR_CONTROL.RSZV0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[29:14]"});
   CFG_ROP_CSR_CONTROL.VAS_RESET_DISABLE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[30:30]"});
   CFG_ROP_CSR_CONTROL.SB_ECC_CAP_EN.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_rop_csr_control.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_VERSION";
    `endif
    CFG_UNIT_VERSION = hqm_reorder_pipe_bridge_CFG_UNIT_VERSION_reg::type_id::create("CFG_UNIT_VERSION", this);
    CFG_UNIT_VERSION.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000008, 32, 32'b00000000000000000000000000000000);
    CFG_UNIT_VERSION.set_space_addr("MSG", 28'h4000008);
    CFG_UNIT_VERSION.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_VERSION.set_space_addr("MEM-SB",28'h4000008);
    CFG_UNIT_VERSION.set_space_addr("MEM", 28'h4000008);
      CFG_UNIT_VERSION.set_space("MEM");
      CFG_UNIT_VERSION.set_msg_opcode("MEM-SB");
      CFG_UNIT_VERSION.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_VERSION.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_VERSION.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_VERSION.set_user_attribute("diag_reg", "0");
      CFG_UNIT_VERSION.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_UNIT_VERSION.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_VERSION.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_VERSION:dont_test") ) CFG_UNIT_VERSION.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_VERSION )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_VERSION"));
      end
   CFG_UNIT_VERSION.UNIT_VERSION.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_version.status[31:24]"});

for (int i=0, int cnt=0; i<16; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_GRP_0_SLOT_SHIFT[%0d]",i);
    `endif
    CFG_GRP_0_SLOT_SHIFT[i] = hqm_reorder_pipe_bridge_CFG_GRP_0_SLOT_SHIFT_reg::type_id::create($psprintf("CFG_GRP_0_SLOT_SHIFT[%0d]",i), this);
    CFG_GRP_0_SLOT_SHIFT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h6000000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_GRP_0_SLOT_SHIFT[i].set_space_addr("MSG",  (28'h6000000 + (i*4)) );
    CFG_GRP_0_SLOT_SHIFT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_GRP_0_SLOT_SHIFT[i].set_space_addr("MEM-SB", (28'h6000000 + (i*4)) );
    CFG_GRP_0_SLOT_SHIFT[i].set_space_addr("MEM",  (28'h6000000 + (i*4)) );
      CFG_GRP_0_SLOT_SHIFT[i].set_space("MEM");
      CFG_GRP_0_SLOT_SHIFT[i].set_msg_opcode("MEM-SB");
      CFG_GRP_0_SLOT_SHIFT[i].set_fid(4'h0, "MEM-SB");
  	CFG_GRP_0_SLOT_SHIFT[i].set_bar(4'h2, "MEM-SB");
      CFG_GRP_0_SLOT_SHIFT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_GRP_0_SLOT_SHIFT[i].set_user_attribute("diag_reg", "0");
      CFG_GRP_0_SLOT_SHIFT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_GRP_0_SLOT_SHIFT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_GRP_0_SLOT_SHIFT[%0d]:dont_test",i)) ) CFG_GRP_0_SLOT_SHIFT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_GRP_0_SLOT_SHIFT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_GRP_0_SLOT_SHIFT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<16; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_GRP_1_SLOT_SHIFT[%0d]",i);
    `endif
    CFG_GRP_1_SLOT_SHIFT[i] = hqm_reorder_pipe_bridge_CFG_GRP_1_SLOT_SHIFT_reg::type_id::create($psprintf("CFG_GRP_1_SLOT_SHIFT[%0d]",i), this);
    CFG_GRP_1_SLOT_SHIFT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h6010000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_GRP_1_SLOT_SHIFT[i].set_space_addr("MSG",  (28'h6010000 + (i*4)) );
    CFG_GRP_1_SLOT_SHIFT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_GRP_1_SLOT_SHIFT[i].set_space_addr("MEM-SB", (28'h6010000 + (i*4)) );
    CFG_GRP_1_SLOT_SHIFT[i].set_space_addr("MEM",  (28'h6010000 + (i*4)) );
      CFG_GRP_1_SLOT_SHIFT[i].set_space("MEM");
      CFG_GRP_1_SLOT_SHIFT[i].set_msg_opcode("MEM-SB");
      CFG_GRP_1_SLOT_SHIFT[i].set_fid(4'h0, "MEM-SB");
  	CFG_GRP_1_SLOT_SHIFT[i].set_bar(4'h2, "MEM-SB");
      CFG_GRP_1_SLOT_SHIFT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_GRP_1_SLOT_SHIFT[i].set_user_attribute("diag_reg", "0");
      CFG_GRP_1_SLOT_SHIFT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_GRP_1_SLOT_SHIFT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_GRP_1_SLOT_SHIFT[%0d]:dont_test",i)) ) CFG_GRP_1_SLOT_SHIFT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_GRP_1_SLOT_SHIFT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_GRP_1_SLOT_SHIFT[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_GENERAL_0";
    `endif
    CFG_CONTROL_GENERAL_0 = hqm_reorder_pipe_bridge_CFG_CONTROL_GENERAL_0_reg::type_id::create("CFG_CONTROL_GENERAL_0", this);
    CFG_CONTROL_GENERAL_0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000000, 32, 32'b00000000000000000000000000000000);
    CFG_CONTROL_GENERAL_0.set_space_addr("MSG", 32'h0C000000);
    CFG_CONTROL_GENERAL_0.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_GENERAL_0.set_space_addr("MEM-SB",28'hC000000);
    CFG_CONTROL_GENERAL_0.set_space_addr("MEM", 32'h0C000000);
      CFG_CONTROL_GENERAL_0.set_space("MEM");
      CFG_CONTROL_GENERAL_0.set_msg_opcode("MEM-SB");
      CFG_CONTROL_GENERAL_0.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_GENERAL_0.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_GENERAL_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_GENERAL_0.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_GENERAL_0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_GENERAL_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_GENERAL_0:dont_test") ) CFG_CONTROL_GENERAL_0.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_GENERAL_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_GENERAL_0"));
      end
   CFG_CONTROL_GENERAL_0.UNIT_SINGLE_STEP_MODE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_control_general_0.internal_f[0:0]"});
   CFG_CONTROL_GENERAL_0.RR_EN.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_control_general_0.internal_f[1:1]"});
   CFG_CONTROL_GENERAL_0.RSZV0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_control_general_0.internal_f[31:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_AW_STATUS";
    `endif
    CFG_DIAGNOSTIC_AW_STATUS = hqm_reorder_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg::type_id::create("CFG_DIAGNOSTIC_AW_STATUS", this);
    CFG_DIAGNOSTIC_AW_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000004, 32, 32'b00000000000000000000000000100000);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MSG", 32'h0C000004);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MEM-SB",28'hC000004);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MEM", 32'h0C000004);
      CFG_DIAGNOSTIC_AW_STATUS.set_space("MEM");
      CFG_DIAGNOSTIC_AW_STATUS.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_AW_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_AW_STATUS:dont_test") ) CFG_DIAGNOSTIC_AW_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_AW_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_AW_STATUS"));
      end
   CFG_DIAGNOSTIC_AW_STATUS.CHP_ROP_HCW_DB_STATUS.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_diagnostic_aw_status.status[2:0]"});
   CFG_DIAGNOSTIC_AW_STATUS.LSP_REORDERCMP_DB_STATUS.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_diagnostic_aw_status.status[5:3]"});
   CFG_DIAGNOSTIC_AW_STATUS.CHP_ROP_HCW_DB2_STATUS.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_diagnostic_aw_status.status[8:6]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_CHP_ROP_HCW";
    `endif
    CFG_FIFO_WMSTAT_CHP_ROP_HCW = hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_CHP_ROP_HCW_reg::type_id::create("CFG_FIFO_WMSTAT_CHP_ROP_HCW", this);
    CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000008, 32, 32'b00000000000000000001000000000100);
    CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_space_addr("MSG", 32'h0C000008);
    CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_space_addr("MEM-SB",28'hC000008);
    CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_space_addr("MEM", 32'h0C000008);
      CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_space("MEM");
      CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_CHP_ROP_HCW:dont_test") ) CFG_FIFO_WMSTAT_CHP_ROP_HCW.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_CHP_ROP_HCW )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_CHP_ROP_HCW"));
      end
   CFG_FIFO_WMSTAT_CHP_ROP_HCW.FIFO_HWM.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_CHP_ROP_HCW.FIFO_UNDERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_CHP_ROP_HCW.FIFO_OVERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_CHP_ROP_HCW.FIFO_EMPTY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_CHP_ROP_HCW.FIFO_AFULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_CHP_ROP_HCW.FIFO_FULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_CHP_ROP_HCW.FIFO_DEPTH.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_chp_rop_hcw.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_DIR_RPLY_REQ";
    `endif
    CFG_FIFO_WMSTAT_DIR_RPLY_REQ = hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_DIR_RPLY_REQ_reg::type_id::create("CFG_FIFO_WMSTAT_DIR_RPLY_REQ", this);
    CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00000C, 32, 32'b00000000000000000001000000000110);
    CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_space_addr("MSG", 32'h0C00000C);
    CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_space_addr("MEM-SB",28'hC00000C);
    CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_space_addr("MEM", 32'h0C00000C);
      CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_space("MEM");
      CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_DIR_RPLY_REQ:dont_test") ) CFG_FIFO_WMSTAT_DIR_RPLY_REQ.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_DIR_RPLY_REQ )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_DIR_RPLY_REQ"));
      end
   CFG_FIFO_WMSTAT_DIR_RPLY_REQ.FIFO_HWM.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_DIR_RPLY_REQ.FIFO_UNDERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_DIR_RPLY_REQ.FIFO_OVERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_DIR_RPLY_REQ.FIFO_EMPTY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_DIR_RPLY_REQ.FIFO_AFULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_DIR_RPLY_REQ.FIFO_FULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_DIR_RPLY_REQ.FIFO_DEPTH.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_dir_rply_req.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_LDB_RPLY_REQ";
    `endif
    CFG_FIFO_WMSTAT_LDB_RPLY_REQ = hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LDB_RPLY_REQ_reg::type_id::create("CFG_FIFO_WMSTAT_LDB_RPLY_REQ", this);
    CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000010, 32, 32'b00000000000000000001000000000110);
    CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_space_addr("MSG", 32'h0C000010);
    CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_space_addr("MEM-SB",28'hC000010);
    CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_space_addr("MEM", 32'h0C000010);
      CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_space("MEM");
      CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_LDB_RPLY_REQ:dont_test") ) CFG_FIFO_WMSTAT_LDB_RPLY_REQ.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_LDB_RPLY_REQ )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_LDB_RPLY_REQ"));
      end
   CFG_FIFO_WMSTAT_LDB_RPLY_REQ.FIFO_HWM.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_LDB_RPLY_REQ.FIFO_UNDERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_LDB_RPLY_REQ.FIFO_OVERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_LDB_RPLY_REQ.FIFO_EMPTY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_LDB_RPLY_REQ.FIFO_AFULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_LDB_RPLY_REQ.FIFO_FULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_LDB_RPLY_REQ.FIFO_DEPTH.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_ldb_rply_req.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_LSP_REORDERCMP";
    `endif
    CFG_FIFO_WMSTAT_LSP_REORDERCMP = hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_LSP_REORDERCMP_reg::type_id::create("CFG_FIFO_WMSTAT_LSP_REORDERCMP", this);
    CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000014, 32, 32'b00000000000000000001000000000100);
    CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_space_addr("MSG", 32'h0C000014);
    CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_space_addr("MEM-SB",28'hC000014);
    CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_space_addr("MEM", 32'h0C000014);
      CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_space("MEM");
      CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_LSP_REORDERCMP:dont_test") ) CFG_FIFO_WMSTAT_LSP_REORDERCMP.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_LSP_REORDERCMP )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_LSP_REORDERCMP"));
      end
   CFG_FIFO_WMSTAT_LSP_REORDERCMP.FIFO_HWM.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_LSP_REORDERCMP.FIFO_UNDERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_LSP_REORDERCMP.FIFO_OVERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_LSP_REORDERCMP.FIFO_EMPTY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_LSP_REORDERCMP.FIFO_AFULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_LSP_REORDERCMP.FIFO_FULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_LSP_REORDERCMP.FIFO_DEPTH.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_lsp_reordercmp.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_SN_COMPLETE";
    `endif
    CFG_FIFO_WMSTAT_SN_COMPLETE = hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_COMPLETE_reg::type_id::create("CFG_FIFO_WMSTAT_SN_COMPLETE", this);
    CFG_FIFO_WMSTAT_SN_COMPLETE.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000018, 32, 32'b00000000000000000001000000000100);
    CFG_FIFO_WMSTAT_SN_COMPLETE.set_space_addr("MSG", 32'h0C000018);
    CFG_FIFO_WMSTAT_SN_COMPLETE.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_SN_COMPLETE.set_space_addr("MEM-SB",28'hC000018);
    CFG_FIFO_WMSTAT_SN_COMPLETE.set_space_addr("MEM", 32'h0C000018);
      CFG_FIFO_WMSTAT_SN_COMPLETE.set_space("MEM");
      CFG_FIFO_WMSTAT_SN_COMPLETE.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_SN_COMPLETE.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_SN_COMPLETE.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_SN_COMPLETE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_SN_COMPLETE.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_SN_COMPLETE.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_SN_COMPLETE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_SN_COMPLETE:dont_test") ) CFG_FIFO_WMSTAT_SN_COMPLETE.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_SN_COMPLETE )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_SN_COMPLETE"));
      end
   CFG_FIFO_WMSTAT_SN_COMPLETE.FIFO_HWM.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_SN_COMPLETE.FIFO_UNDERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_SN_COMPLETE.FIFO_OVERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_SN_COMPLETE.FIFO_EMPTY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_SN_COMPLETE.FIFO_AFULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_SN_COMPLETE.FIFO_FULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_SN_COMPLETE.FIFO_DEPTH.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_complete.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_SN_ORDERED";
    `endif
    CFG_FIFO_WMSTAT_SN_ORDERED = hqm_reorder_pipe_bridge_CFG_FIFO_WMSTAT_SN_ORDERED_reg::type_id::create("CFG_FIFO_WMSTAT_SN_ORDERED", this);
    CFG_FIFO_WMSTAT_SN_ORDERED.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00001C, 32, 32'b00000000000000000001000000011000);
    CFG_FIFO_WMSTAT_SN_ORDERED.set_space_addr("MSG", 32'h0C00001C);
    CFG_FIFO_WMSTAT_SN_ORDERED.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_SN_ORDERED.set_space_addr("MEM-SB",28'hC00001C);
    CFG_FIFO_WMSTAT_SN_ORDERED.set_space_addr("MEM", 32'h0C00001C);
      CFG_FIFO_WMSTAT_SN_ORDERED.set_space("MEM");
      CFG_FIFO_WMSTAT_SN_ORDERED.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_SN_ORDERED.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_SN_ORDERED.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_SN_ORDERED.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_SN_ORDERED.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_SN_ORDERED.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_SN_ORDERED.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_SN_ORDERED:dont_test") ) CFG_FIFO_WMSTAT_SN_ORDERED.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_SN_ORDERED )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_SN_ORDERED"));
      end
   CFG_FIFO_WMSTAT_SN_ORDERED.FIFO_HWM.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_SN_ORDERED.FIFO_UNDERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_SN_ORDERED.FIFO_OVERFLOW.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_SN_ORDERED.FIFO_EMPTY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_SN_ORDERED.FIFO_AFULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_SN_ORDERED.FIFO_FULL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_SN_ORDERED.FIFO_DEPTH.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_fifo_wmstat_sn_ordered.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FRAG_INTEGRITY_COUNT";
    `endif
    CFG_FRAG_INTEGRITY_COUNT = hqm_reorder_pipe_bridge_CFG_FRAG_INTEGRITY_COUNT_reg::type_id::create("CFG_FRAG_INTEGRITY_COUNT", this);
    CFG_FRAG_INTEGRITY_COUNT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000020, 32, 32'b00000000000000000000000000000000);
    CFG_FRAG_INTEGRITY_COUNT.set_space_addr("MSG", 32'h0C000020);
    CFG_FRAG_INTEGRITY_COUNT.set_space_addr("msg_bus_port", 'h21);
    CFG_FRAG_INTEGRITY_COUNT.set_space_addr("MEM-SB",28'hC000020);
    CFG_FRAG_INTEGRITY_COUNT.set_space_addr("MEM", 32'h0C000020);
      CFG_FRAG_INTEGRITY_COUNT.set_space("MEM");
      CFG_FRAG_INTEGRITY_COUNT.set_msg_opcode("MEM-SB");
      CFG_FRAG_INTEGRITY_COUNT.set_fid(4'h0, "MEM-SB");
  	CFG_FRAG_INTEGRITY_COUNT.set_bar(4'h2, "MEM-SB");
      CFG_FRAG_INTEGRITY_COUNT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FRAG_INTEGRITY_COUNT.set_user_attribute("diag_reg", "0");
      CFG_FRAG_INTEGRITY_COUNT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FRAG_INTEGRITY_COUNT.set_user_attribute("SubnetPortID", "8'h00");
      CFG_FRAG_INTEGRITY_COUNT.set_test_reg(0);
      if ( $test$plusargs("CFG_FRAG_INTEGRITY_COUNT:dont_test") ) CFG_FRAG_INTEGRITY_COUNT.set_test_reg(1'b0);
      if (!add_reg( CFG_FRAG_INTEGRITY_COUNT )) begin
        `sla_error(get_name(), ("Could not add register CFG_FRAG_INTEGRITY_COUNT"));
      end
   CFG_FRAG_INTEGRITY_COUNT.INTEGRITY_COUNT.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_frag_integrity_count.status[15:0]"});
   CFG_FRAG_INTEGRITY_COUNT.RSZV0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_frag_integrity_count.status[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HW_AGITATE_CONTROL";
    `endif
    CFG_HW_AGITATE_CONTROL = hqm_reorder_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg::type_id::create("CFG_HW_AGITATE_CONTROL", this);
    CFG_HW_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000024, 32, 32'b00000000000000000000000000000000);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MSG", 32'h0C000024);
    CFG_HW_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MEM-SB",28'hC000024);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MEM", 32'h0C000024);
      CFG_HW_AGITATE_CONTROL.set_space("MEM");
      CFG_HW_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      CFG_HW_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_HW_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_HW_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HW_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_HW_AGITATE_CONTROL:dont_test") ) CFG_HW_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_HW_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_HW_AGITATE_CONTROL"));
      end
   CFG_HW_AGITATE_CONTROL.MODE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_control.internal_f[1:0]"});
   CFG_HW_AGITATE_CONTROL.DUTY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_control.internal_f[4:2]"});
   CFG_HW_AGITATE_CONTROL.PERIOD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_control.internal_f[15:5]"});
   CFG_HW_AGITATE_CONTROL.PROB1ST.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_control.internal_f[23:16]"});
   CFG_HW_AGITATE_CONTROL.PROB2ND.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_control.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HW_AGITATE_SELECT";
    `endif
    CFG_HW_AGITATE_SELECT = hqm_reorder_pipe_bridge_CFG_HW_AGITATE_SELECT_reg::type_id::create("CFG_HW_AGITATE_SELECT", this);
    CFG_HW_AGITATE_SELECT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000028, 32, 32'b00000000000000000000000000000000);
    CFG_HW_AGITATE_SELECT.set_space_addr("MSG", 32'h0C000028);
    CFG_HW_AGITATE_SELECT.set_space_addr("msg_bus_port", 'h21);
    CFG_HW_AGITATE_SELECT.set_space_addr("MEM-SB",28'hC000028);
    CFG_HW_AGITATE_SELECT.set_space_addr("MEM", 32'h0C000028);
      CFG_HW_AGITATE_SELECT.set_space("MEM");
      CFG_HW_AGITATE_SELECT.set_msg_opcode("MEM-SB");
      CFG_HW_AGITATE_SELECT.set_fid(4'h0, "MEM-SB");
  	CFG_HW_AGITATE_SELECT.set_bar(4'h2, "MEM-SB");
      CFG_HW_AGITATE_SELECT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HW_AGITATE_SELECT.set_user_attribute("diag_reg", "0");
      CFG_HW_AGITATE_SELECT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HW_AGITATE_SELECT.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HW_AGITATE_SELECT.set_test_reg(0);
      if ( $test$plusargs("CFG_HW_AGITATE_SELECT:dont_test") ) CFG_HW_AGITATE_SELECT.set_test_reg(1'b0);
      if (!add_reg( CFG_HW_AGITATE_SELECT )) begin
        `sla_error(get_name(), ("Could not add register CFG_HW_AGITATE_SELECT"));
      end
   CFG_HW_AGITATE_SELECT.AGG_IF_00.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[0:0]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_01.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[1:1]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_02.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[2:2]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_03.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[3:3]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_04.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[4:4]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_05.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[5:5]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_06.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[6:6]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_07.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[7:7]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_08.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[8:8]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_09.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[9:9]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_10.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[10:10]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_11.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[11:11]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_12.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[12:12]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_13.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[13:13]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_14.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[14:14]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_15.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[15:15]"});
   CFG_HW_AGITATE_SELECT.RSVZ.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_hw_agitate_select.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_INTERFACE_STATUS";
    `endif
    CFG_INTERFACE_STATUS = hqm_reorder_pipe_bridge_CFG_INTERFACE_STATUS_reg::type_id::create("CFG_INTERFACE_STATUS", this);
    CFG_INTERFACE_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00002C, 32, 32'b00000000000000000001000101010101);
    CFG_INTERFACE_STATUS.set_space_addr("MSG", 32'h0C00002C);
    CFG_INTERFACE_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_INTERFACE_STATUS.set_space_addr("MEM-SB",28'hC00002C);
    CFG_INTERFACE_STATUS.set_space_addr("MEM", 32'h0C00002C);
      CFG_INTERFACE_STATUS.set_space("MEM");
      CFG_INTERFACE_STATUS.set_msg_opcode("MEM-SB");
      CFG_INTERFACE_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_INTERFACE_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_INTERFACE_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_INTERFACE_STATUS.set_user_attribute("diag_reg", "0");
      CFG_INTERFACE_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_INTERFACE_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_INTERFACE_STATUS:dont_test") ) CFG_INTERFACE_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_INTERFACE_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_INTERFACE_STATUS"));
      end
   CFG_INTERFACE_STATUS.ROP_ALARM_UP_READY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[0:0]"});
   CFG_INTERFACE_STATUS.ROP_ALARM_UP_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[1:1]"});
   CFG_INTERFACE_STATUS.ROP_ALARM_DOWN_READY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[2:2]"});
   CFG_INTERFACE_STATUS.ROP_ALARM_DOWN_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[3:3]"});
   CFG_INTERFACE_STATUS.CHP_ROP_HCW_READY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[4:4]"});
   CFG_INTERFACE_STATUS.CHP_ROP_HCW_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[5:5]"});
   CFG_INTERFACE_STATUS.ROP_DP_ENQ_READY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[6:6]"});
   CFG_INTERFACE_STATUS.ROP_DP_ENQ_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[7:7]"});
   CFG_INTERFACE_STATUS.ROP_NALB_ENQ_READY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[8:8]"});
   CFG_INTERFACE_STATUS.ROP_NALB_ENQ_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[9:9]"});
   CFG_INTERFACE_STATUS.ROP_QED_ENQ_READY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[10:10]"});
   CFG_INTERFACE_STATUS.ROP_QED_DQED_ENQ_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[11:11]"});
   CFG_INTERFACE_STATUS.ROP_LSP_REORDERCMP_READY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[12:12]"});
   CFG_INTERFACE_STATUS.ROP_LSP_REORDERCMP_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[13:13]"});
   CFG_INTERFACE_STATUS.INT_IDLE_B.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_interface_status.status[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_ACTIVITYCOUNTER0";
    `endif
    CFG_SMON_ACTIVITYCOUNTER0 = hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg::type_id::create("CFG_SMON_ACTIVITYCOUNTER0", this);
    CFG_SMON_ACTIVITYCOUNTER0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000030, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("MSG", 32'h0C000030);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("MEM-SB",28'hC000030);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("MEM", 32'h0C000030);
      CFG_SMON_ACTIVITYCOUNTER0.set_space("MEM");
      CFG_SMON_ACTIVITYCOUNTER0.set_msg_opcode("MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_ACTIVITYCOUNTER0.set_bar(4'h2, "MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_ACTIVITYCOUNTER0.set_user_attribute("diag_reg", "0");
      CFG_SMON_ACTIVITYCOUNTER0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_ACTIVITYCOUNTER0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_ACTIVITYCOUNTER0:dont_test") ) CFG_SMON_ACTIVITYCOUNTER0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_ACTIVITYCOUNTER0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_ACTIVITYCOUNTER0"));
      end
   CFG_SMON_ACTIVITYCOUNTER0.COUNTER0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_ACTIVITYCOUNTER1";
    `endif
    CFG_SMON_ACTIVITYCOUNTER1 = hqm_reorder_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg::type_id::create("CFG_SMON_ACTIVITYCOUNTER1", this);
    CFG_SMON_ACTIVITYCOUNTER1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000034, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("MSG", 32'h0C000034);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("MEM-SB",28'hC000034);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("MEM", 32'h0C000034);
      CFG_SMON_ACTIVITYCOUNTER1.set_space("MEM");
      CFG_SMON_ACTIVITYCOUNTER1.set_msg_opcode("MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_ACTIVITYCOUNTER1.set_bar(4'h2, "MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_ACTIVITYCOUNTER1.set_user_attribute("diag_reg", "0");
      CFG_SMON_ACTIVITYCOUNTER1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_ACTIVITYCOUNTER1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_ACTIVITYCOUNTER1:dont_test") ) CFG_SMON_ACTIVITYCOUNTER1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_ACTIVITYCOUNTER1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_ACTIVITYCOUNTER1"));
      end
   CFG_SMON_ACTIVITYCOUNTER1.COUNTER1.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_COMPARE0";
    `endif
    CFG_SMON_COMPARE0 = hqm_reorder_pipe_bridge_CFG_SMON_COMPARE0_reg::type_id::create("CFG_SMON_COMPARE0", this);
    CFG_SMON_COMPARE0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000038, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_COMPARE0.set_space_addr("MSG", 32'h0C000038);
    CFG_SMON_COMPARE0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_COMPARE0.set_space_addr("MEM-SB",28'hC000038);
    CFG_SMON_COMPARE0.set_space_addr("MEM", 32'h0C000038);
      CFG_SMON_COMPARE0.set_space("MEM");
      CFG_SMON_COMPARE0.set_msg_opcode("MEM-SB");
      CFG_SMON_COMPARE0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_COMPARE0.set_bar(4'h2, "MEM-SB");
      CFG_SMON_COMPARE0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_COMPARE0.set_user_attribute("diag_reg", "0");
      CFG_SMON_COMPARE0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_COMPARE0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_COMPARE0:dont_test") ) CFG_SMON_COMPARE0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_COMPARE0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_COMPARE0"));
      end
   CFG_SMON_COMPARE0.COMPARE0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_COMPARE1";
    `endif
    CFG_SMON_COMPARE1 = hqm_reorder_pipe_bridge_CFG_SMON_COMPARE1_reg::type_id::create("CFG_SMON_COMPARE1", this);
    CFG_SMON_COMPARE1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00003C, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_COMPARE1.set_space_addr("MSG", 32'h0C00003C);
    CFG_SMON_COMPARE1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_COMPARE1.set_space_addr("MEM-SB",28'hC00003C);
    CFG_SMON_COMPARE1.set_space_addr("MEM", 32'h0C00003C);
      CFG_SMON_COMPARE1.set_space("MEM");
      CFG_SMON_COMPARE1.set_msg_opcode("MEM-SB");
      CFG_SMON_COMPARE1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_COMPARE1.set_bar(4'h2, "MEM-SB");
      CFG_SMON_COMPARE1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_COMPARE1.set_user_attribute("diag_reg", "0");
      CFG_SMON_COMPARE1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_COMPARE1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_COMPARE1:dont_test") ) CFG_SMON_COMPARE1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_COMPARE1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_COMPARE1"));
      end
   CFG_SMON_COMPARE1.COMPARE1.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_CONFIGURATION0";
    `endif
    CFG_SMON_CONFIGURATION0 = hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION0_reg::type_id::create("CFG_SMON_CONFIGURATION0", this);
    CFG_SMON_CONFIGURATION0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000040, 32, 32'b01000000000000000000000000000000);
    CFG_SMON_CONFIGURATION0.set_space_addr("MSG", 32'h0C000040);
    CFG_SMON_CONFIGURATION0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_CONFIGURATION0.set_space_addr("MEM-SB",28'hC000040);
    CFG_SMON_CONFIGURATION0.set_space_addr("MEM", 32'h0C000040);
      CFG_SMON_CONFIGURATION0.set_space("MEM");
      CFG_SMON_CONFIGURATION0.set_msg_opcode("MEM-SB");
      CFG_SMON_CONFIGURATION0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_CONFIGURATION0.set_bar(4'h2, "MEM-SB");
      CFG_SMON_CONFIGURATION0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_CONFIGURATION0.set_user_attribute("diag_reg", "0");
      CFG_SMON_CONFIGURATION0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_CONFIGURATION0.set_user_attribute("SubnetPortID", "8'h00");
      CFG_SMON_CONFIGURATION0.set_test_reg(0);
      if ( $test$plusargs("CFG_SMON_CONFIGURATION0:dont_test") ) CFG_SMON_CONFIGURATION0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_CONFIGURATION0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_CONFIGURATION0"));
      end
   CFG_SMON_CONFIGURATION0.SMON_ENABLE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[0:0]"});
   CFG_SMON_CONFIGURATION0.SMON_0TRIGGER_ENABLE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[1:1]"});
   CFG_SMON_CONFIGURATION0.RSVZ0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[3:2]"});
   CFG_SMON_CONFIGURATION0.SMON0_FUNCTION.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[6:4]"});
   CFG_SMON_CONFIGURATION0.SMON0_FUNCTION_COMPARE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[7:7]"});
   CFG_SMON_CONFIGURATION0.SMON1_FUNCTION.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[10:8]"});
   CFG_SMON_CONFIGURATION0.SMON1_FUNCTION_COMPARE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[11:11]"});
   CFG_SMON_CONFIGURATION0.SMON_MODE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[15:12]"});
   CFG_SMON_CONFIGURATION0.STOPCOUNTEROVFL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[16:16]"});
   CFG_SMON_CONFIGURATION0.INTCOUNTEROVFL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[17:17]"});
   CFG_SMON_CONFIGURATION0.STATCOUNTER0OVFL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[18:18]"});
   CFG_SMON_CONFIGURATION0.STATCOUNTER1OVFL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[19:19]"});
   CFG_SMON_CONFIGURATION0.STOPTIMEROVFL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[20:20]"});
   CFG_SMON_CONFIGURATION0.INTTIMEROVFL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[21:21]"});
   CFG_SMON_CONFIGURATION0.STATTIMEROVFL.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[22:22]"});
   CFG_SMON_CONFIGURATION0.RSVZ1.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[23:23]"});
   CFG_SMON_CONFIGURATION0.TIMER_PRESCALE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[28:24]"});
   CFG_SMON_CONFIGURATION0.RSVZ2.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[29:29]"});
   CFG_SMON_CONFIGURATION0.VERSION.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_CONFIGURATION1";
    `endif
    CFG_SMON_CONFIGURATION1 = hqm_reorder_pipe_bridge_CFG_SMON_CONFIGURATION1_reg::type_id::create("CFG_SMON_CONFIGURATION1", this);
    CFG_SMON_CONFIGURATION1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000044, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_CONFIGURATION1.set_space_addr("MSG", 32'h0C000044);
    CFG_SMON_CONFIGURATION1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_CONFIGURATION1.set_space_addr("MEM-SB",28'hC000044);
    CFG_SMON_CONFIGURATION1.set_space_addr("MEM", 32'h0C000044);
      CFG_SMON_CONFIGURATION1.set_space("MEM");
      CFG_SMON_CONFIGURATION1.set_msg_opcode("MEM-SB");
      CFG_SMON_CONFIGURATION1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_CONFIGURATION1.set_bar(4'h2, "MEM-SB");
      CFG_SMON_CONFIGURATION1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_CONFIGURATION1.set_user_attribute("diag_reg", "0");
      CFG_SMON_CONFIGURATION1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_CONFIGURATION1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_CONFIGURATION1:dont_test") ) CFG_SMON_CONFIGURATION1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_CONFIGURATION1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_CONFIGURATION1"));
      end
   CFG_SMON_CONFIGURATION1.MODE0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[7:0]"});
   CFG_SMON_CONFIGURATION1.MODE1.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[15:8]"});
   CFG_SMON_CONFIGURATION1.RSVZ0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_MAXIMUM_TIMER";
    `endif
    CFG_SMON_MAXIMUM_TIMER = hqm_reorder_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg::type_id::create("CFG_SMON_MAXIMUM_TIMER", this);
    CFG_SMON_MAXIMUM_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000048, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("MSG", 32'h0C000048);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("MEM-SB",28'hC000048);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("MEM", 32'h0C000048);
      CFG_SMON_MAXIMUM_TIMER.set_space("MEM");
      CFG_SMON_MAXIMUM_TIMER.set_msg_opcode("MEM-SB");
      CFG_SMON_MAXIMUM_TIMER.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_MAXIMUM_TIMER.set_bar(4'h2, "MEM-SB");
      CFG_SMON_MAXIMUM_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_MAXIMUM_TIMER.set_user_attribute("diag_reg", "0");
      CFG_SMON_MAXIMUM_TIMER.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_MAXIMUM_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_MAXIMUM_TIMER:dont_test") ) CFG_SMON_MAXIMUM_TIMER.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_MAXIMUM_TIMER )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_MAXIMUM_TIMER"));
      end
   CFG_SMON_MAXIMUM_TIMER.MAXVALUE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_maxval_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_TIMER";
    `endif
    CFG_SMON_TIMER = hqm_reorder_pipe_bridge_CFG_SMON_TIMER_reg::type_id::create("CFG_SMON_TIMER", this);
    CFG_SMON_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00004C, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_TIMER.set_space_addr("MSG", 32'h0C00004C);
    CFG_SMON_TIMER.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_TIMER.set_space_addr("MEM-SB",28'hC00004C);
    CFG_SMON_TIMER.set_space_addr("MEM", 32'h0C00004C);
      CFG_SMON_TIMER.set_space("MEM");
      CFG_SMON_TIMER.set_msg_opcode("MEM-SB");
      CFG_SMON_TIMER.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_TIMER.set_bar(4'h2, "MEM-SB");
      CFG_SMON_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_TIMER.set_user_attribute("diag_reg", "0");
      CFG_SMON_TIMER.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_TIMER:dont_test") ) CFG_SMON_TIMER.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_TIMER )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_TIMER"));
      end
   CFG_SMON_TIMER.TIMER.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_smon.i_hqm_AW_smon.reg_smon_timer_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_HOLD_GRP0";
    `endif
    CFG_PIPE_HEALTH_HOLD_GRP0 = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP0_reg::type_id::create("CFG_PIPE_HEALTH_HOLD_GRP0", this);
    CFG_PIPE_HEALTH_HOLD_GRP0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000050, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_HOLD_GRP0.set_space_addr("MSG", 32'h0C000050);
    CFG_PIPE_HEALTH_HOLD_GRP0.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_HOLD_GRP0.set_space_addr("MEM-SB",28'hC000050);
    CFG_PIPE_HEALTH_HOLD_GRP0.set_space_addr("MEM", 32'h0C000050);
      CFG_PIPE_HEALTH_HOLD_GRP0.set_space("MEM");
      CFG_PIPE_HEALTH_HOLD_GRP0.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_HOLD_GRP0.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_HOLD_GRP0.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_HOLD_GRP0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_HOLD_GRP0.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_HOLD_GRP0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_HOLD_GRP0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_HOLD_GRP0:dont_test") ) CFG_PIPE_HEALTH_HOLD_GRP0.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_HOLD_GRP0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_HOLD_GRP0"));
      end
   CFG_PIPE_HEALTH_HOLD_GRP0.P1_SHFT_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp0.status[1:1]"});
   CFG_PIPE_HEALTH_HOLD_GRP0.P2_SHFT_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp0.status[2:2]"});
   CFG_PIPE_HEALTH_HOLD_GRP0.P0_CMP_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp0.status[3:3]"});
   CFG_PIPE_HEALTH_HOLD_GRP0.P1_CMP_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp0.status[4:4]"});
   CFG_PIPE_HEALTH_HOLD_GRP0.P2_CMP_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp0.status[5:5]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_HOLD_GRP1";
    `endif
    CFG_PIPE_HEALTH_HOLD_GRP1 = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_GRP1_reg::type_id::create("CFG_PIPE_HEALTH_HOLD_GRP1", this);
    CFG_PIPE_HEALTH_HOLD_GRP1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000054, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_HOLD_GRP1.set_space_addr("MSG", 32'h0C000054);
    CFG_PIPE_HEALTH_HOLD_GRP1.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_HOLD_GRP1.set_space_addr("MEM-SB",28'hC000054);
    CFG_PIPE_HEALTH_HOLD_GRP1.set_space_addr("MEM", 32'h0C000054);
      CFG_PIPE_HEALTH_HOLD_GRP1.set_space("MEM");
      CFG_PIPE_HEALTH_HOLD_GRP1.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_HOLD_GRP1.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_HOLD_GRP1.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_HOLD_GRP1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_HOLD_GRP1.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_HOLD_GRP1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_HOLD_GRP1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_HOLD_GRP1:dont_test") ) CFG_PIPE_HEALTH_HOLD_GRP1.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_HOLD_GRP1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_HOLD_GRP1"));
      end
   CFG_PIPE_HEALTH_HOLD_GRP1.P1_SHFT_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp1.status[1:1]"});
   CFG_PIPE_HEALTH_HOLD_GRP1.P2_SHFT_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp1.status[2:2]"});
   CFG_PIPE_HEALTH_HOLD_GRP1.P0_CMP_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp1.status[3:3]"});
   CFG_PIPE_HEALTH_HOLD_GRP1.P1_CMP_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp1.status[4:4]"});
   CFG_PIPE_HEALTH_HOLD_GRP1.P2_CMP_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_grp1.status[5:5]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_HOLD_ROP_DP";
    `endif
    CFG_PIPE_HEALTH_HOLD_ROP_DP = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_DP_reg::type_id::create("CFG_PIPE_HEALTH_HOLD_ROP_DP", this);
    CFG_PIPE_HEALTH_HOLD_ROP_DP.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000058, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_HOLD_ROP_DP.set_space_addr("MSG", 32'h0C000058);
    CFG_PIPE_HEALTH_HOLD_ROP_DP.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_HOLD_ROP_DP.set_space_addr("MEM-SB",28'hC000058);
    CFG_PIPE_HEALTH_HOLD_ROP_DP.set_space_addr("MEM", 32'h0C000058);
      CFG_PIPE_HEALTH_HOLD_ROP_DP.set_space("MEM");
      CFG_PIPE_HEALTH_HOLD_ROP_DP.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_HOLD_ROP_DP.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_HOLD_ROP_DP.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_HOLD_ROP_DP.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_HOLD_ROP_DP.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_HOLD_ROP_DP.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_HOLD_ROP_DP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_HOLD_ROP_DP:dont_test") ) CFG_PIPE_HEALTH_HOLD_ROP_DP.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_HOLD_ROP_DP )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_HOLD_ROP_DP"));
      end
   CFG_PIPE_HEALTH_HOLD_ROP_DP.P0_ROP_DP_ENQ_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_dp.status[0:0]"});
   CFG_PIPE_HEALTH_HOLD_ROP_DP.P1_ROP_DP_ENQ_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_dp.status[1:1]"});
   CFG_PIPE_HEALTH_HOLD_ROP_DP.P2_ROP_DP_ENQ_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_dp.status[2:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP";
    `endif
    CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP_reg::type_id::create("CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP", this);
    CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00005C, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_space_addr("MSG", 32'h0C00005C);
    CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_space_addr("MEM-SB",28'hC00005C);
    CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_space_addr("MEM", 32'h0C00005C);
      CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_space("MEM");
      CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP:dont_test") ) CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP"));
      end
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P0_REORD_ST_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[4:4]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P1_REORD_ST_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[5:5]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P2_REORD_ST_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[6:6]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P3_REORD_ST_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[7:7]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P0_REORD_LBHP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[8:8]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P1_REORD_LBHP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[9:9]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P2_REORD_LBHP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[10:10]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P3_REORD_LBHP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[11:11]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P0_REORD_LBTP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[12:12]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P1_REORD_LBTP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[13:13]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P2_REORD_LBTP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[14:14]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P3_REORD_LBTP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[15:15]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P0_REORD_DIRHP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[16:16]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P1_REORD_DIRHP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[17:17]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P2_REORD_DIRHP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[18:18]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P3_REORD_DIRHP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[19:19]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P0_REORD_DIRTP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[20:20]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P1_REORD_DIRTP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[21:21]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P2_REORD_DIRTP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[22:22]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P3_REORD_DIRTP_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[23:23]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P0_REORD_CNT_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[24:24]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P1_REORD_CNT_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[25:25]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P2_REORD_CNT_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[26:26]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P3_REORD_CNT_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[27:27]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P0_REORD_CTL_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[28:28]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P1_REORD_CTL_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[29:29]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P2_REORD_CTL_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[30:30]"});
   CFG_PIPE_HEALTH_HOLD_ROP_LSP_REORDCOMP.P3_REORD_CTL_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_lsp_reordcomp.status[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_HOLD_ROP_NALB";
    `endif
    CFG_PIPE_HEALTH_HOLD_ROP_NALB = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_NALB_reg::type_id::create("CFG_PIPE_HEALTH_HOLD_ROP_NALB", this);
    CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000060, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_space_addr("MSG", 32'h0C000060);
    CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_space_addr("MEM-SB",28'hC000060);
    CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_space_addr("MEM", 32'h0C000060);
      CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_space("MEM");
      CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_HOLD_ROP_NALB:dont_test") ) CFG_PIPE_HEALTH_HOLD_ROP_NALB.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_HOLD_ROP_NALB )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_HOLD_ROP_NALB"));
      end
   CFG_PIPE_HEALTH_HOLD_ROP_NALB.P0_ROP_NALB_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_nalb.status[0:0]"});
   CFG_PIPE_HEALTH_HOLD_ROP_NALB.P1_ROP_NALB_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_nalb.status[1:1]"});
   CFG_PIPE_HEALTH_HOLD_ROP_NALB.P2_ROP_NALB_F_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_nalb.status[2:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED";
    `endif
    CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED_reg::type_id::create("CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED", this);
    CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000064, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_space_addr("MSG", 32'h0C000064);
    CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_space_addr("MEM-SB",28'hC000064);
    CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_space_addr("MEM", 32'h0C000064);
      CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_space("MEM");
      CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED:dont_test") ) CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED"));
      end
   CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.P0_QED_DQED_ENQ_CTL_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_qed_dqed.status[0:0]"});
   CFG_PIPE_HEALTH_HOLD_ROP_QED_DQED.P1_QED_DQED_ENQ_CTL_HOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_hold_rop_qed_dqed.status[1:1]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_VALID_GRP0";
    `endif
    CFG_PIPE_HEALTH_VALID_GRP0 = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP0_reg::type_id::create("CFG_PIPE_HEALTH_VALID_GRP0", this);
    CFG_PIPE_HEALTH_VALID_GRP0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000068, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_VALID_GRP0.set_space_addr("MSG", 32'h0C000068);
    CFG_PIPE_HEALTH_VALID_GRP0.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_VALID_GRP0.set_space_addr("MEM-SB",28'hC000068);
    CFG_PIPE_HEALTH_VALID_GRP0.set_space_addr("MEM", 32'h0C000068);
      CFG_PIPE_HEALTH_VALID_GRP0.set_space("MEM");
      CFG_PIPE_HEALTH_VALID_GRP0.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_VALID_GRP0.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_VALID_GRP0.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_VALID_GRP0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_VALID_GRP0.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_VALID_GRP0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_VALID_GRP0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_VALID_GRP0:dont_test") ) CFG_PIPE_HEALTH_VALID_GRP0.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_VALID_GRP0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_VALID_GRP0"));
      end
   CFG_PIPE_HEALTH_VALID_GRP0.RSVD0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[0:0]"});
   CFG_PIPE_HEALTH_VALID_GRP0.P0_SHFT_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[1:1]"});
   CFG_PIPE_HEALTH_VALID_GRP0.P1_SHFT_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[2:2]"});
   CFG_PIPE_HEALTH_VALID_GRP0.P2_SHFT_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[3:3]"});
   CFG_PIPE_HEALTH_VALID_GRP0.P0_CMP_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[4:4]"});
   CFG_PIPE_HEALTH_VALID_GRP0.P1_CMP_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[5:5]"});
   CFG_PIPE_HEALTH_VALID_GRP0.P2_CMP_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[6:6]"});
   CFG_PIPE_HEALTH_VALID_GRP0.P3_CMP_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[7:7]"});
   CFG_PIPE_HEALTH_VALID_GRP0.SLT_STATE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[9:9]"});
   CFG_PIPE_HEALTH_VALID_GRP0.SN_SHIFT_DEBUG.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp0.status[31:22]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_VALID_GRP1";
    `endif
    CFG_PIPE_HEALTH_VALID_GRP1 = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_GRP1_reg::type_id::create("CFG_PIPE_HEALTH_VALID_GRP1", this);
    CFG_PIPE_HEALTH_VALID_GRP1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00006C, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_VALID_GRP1.set_space_addr("MSG", 32'h0C00006C);
    CFG_PIPE_HEALTH_VALID_GRP1.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_VALID_GRP1.set_space_addr("MEM-SB",28'hC00006C);
    CFG_PIPE_HEALTH_VALID_GRP1.set_space_addr("MEM", 32'h0C00006C);
      CFG_PIPE_HEALTH_VALID_GRP1.set_space("MEM");
      CFG_PIPE_HEALTH_VALID_GRP1.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_VALID_GRP1.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_VALID_GRP1.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_VALID_GRP1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_VALID_GRP1.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_VALID_GRP1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_VALID_GRP1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_VALID_GRP1:dont_test") ) CFG_PIPE_HEALTH_VALID_GRP1.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_VALID_GRP1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_VALID_GRP1"));
      end
   CFG_PIPE_HEALTH_VALID_GRP1.P0_SHFT_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[0:0]"});
   CFG_PIPE_HEALTH_VALID_GRP1.P1_SHFT_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[1:1]"});
   CFG_PIPE_HEALTH_VALID_GRP1.P2_SHFT_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[2:2]"});
   CFG_PIPE_HEALTH_VALID_GRP1.P0_CMP_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[3:3]"});
   CFG_PIPE_HEALTH_VALID_GRP1.P1_CMP_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[4:4]"});
   CFG_PIPE_HEALTH_VALID_GRP1.P2_CMP_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_grp1.status[5:5]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_VALID_ROP_DP";
    `endif
    CFG_PIPE_HEALTH_VALID_ROP_DP = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_DP_reg::type_id::create("CFG_PIPE_HEALTH_VALID_ROP_DP", this);
    CFG_PIPE_HEALTH_VALID_ROP_DP.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000070, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_VALID_ROP_DP.set_space_addr("MSG", 32'h0C000070);
    CFG_PIPE_HEALTH_VALID_ROP_DP.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_VALID_ROP_DP.set_space_addr("MEM-SB",28'hC000070);
    CFG_PIPE_HEALTH_VALID_ROP_DP.set_space_addr("MEM", 32'h0C000070);
      CFG_PIPE_HEALTH_VALID_ROP_DP.set_space("MEM");
      CFG_PIPE_HEALTH_VALID_ROP_DP.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_VALID_ROP_DP.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_VALID_ROP_DP.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_VALID_ROP_DP.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_VALID_ROP_DP.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_VALID_ROP_DP.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_VALID_ROP_DP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_VALID_ROP_DP:dont_test") ) CFG_PIPE_HEALTH_VALID_ROP_DP.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_VALID_ROP_DP )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_VALID_ROP_DP"));
      end
   CFG_PIPE_HEALTH_VALID_ROP_DP.P0_ROP_DP_ENQ_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_dp.status[0:0]"});
   CFG_PIPE_HEALTH_VALID_ROP_DP.P1_ROP_DP_ENQ_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_dp.status[1:1]"});
   CFG_PIPE_HEALTH_VALID_ROP_DP.P2_ROP_DP_ENQ_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_dp.status[2:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP";
    `endif
    CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP_reg::type_id::create("CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP", this);
    CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000074, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_space_addr("MSG", 32'h0C000074);
    CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_space_addr("MEM-SB",28'hC000074);
    CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_space_addr("MEM", 32'h0C000074);
      CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_space("MEM");
      CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP:dont_test") ) CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP"));
      end
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P0_REORD_ST_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[4:4]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P1_REORD_ST_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[5:5]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P2_REORD_ST_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[6:6]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P3_REORD_ST_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[7:7]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P0_REORD_LBHP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[8:8]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P1_REORD_LBHP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[9:9]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P2_REORD_LBHP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[10:10]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P3_REORD_LBHP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[11:11]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P0_REORD_LBTP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[12:12]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P1_REORD_LBTP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[13:13]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P2_REORD_LBTP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[14:14]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P3_REORD_LBTP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[15:15]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P0_REORD_DIRHP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[16:16]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P1_REORD_DIRHP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[17:17]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P2_REORD_DIRHP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[18:18]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P3_REORD_DIRHP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[19:19]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P0_REORD_DIRTP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[20:20]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P1_REORD_DIRTP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[21:21]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P2_REORD_DIRTP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[22:22]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P3_REORD_DIRTP_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[23:23]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P0_REORD_CNT_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[24:24]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P1_REORD_CNT_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[25:25]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P2_REORD_CNT_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[26:26]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P3_REORD_CNT_V_F.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[27:27]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P0_REORD_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[28:28]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P1_REORD_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[29:29]"});
   CFG_PIPE_HEALTH_VALID_ROP_LSP_REORDCOMP.P2_REORD_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_lsp_reordcomp.status[30:30]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_VALID_ROP_NALB";
    `endif
    CFG_PIPE_HEALTH_VALID_ROP_NALB = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_NALB_reg::type_id::create("CFG_PIPE_HEALTH_VALID_ROP_NALB", this);
    CFG_PIPE_HEALTH_VALID_ROP_NALB.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000078, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_VALID_ROP_NALB.set_space_addr("MSG", 32'h0C000078);
    CFG_PIPE_HEALTH_VALID_ROP_NALB.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_VALID_ROP_NALB.set_space_addr("MEM-SB",28'hC000078);
    CFG_PIPE_HEALTH_VALID_ROP_NALB.set_space_addr("MEM", 32'h0C000078);
      CFG_PIPE_HEALTH_VALID_ROP_NALB.set_space("MEM");
      CFG_PIPE_HEALTH_VALID_ROP_NALB.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_VALID_ROP_NALB.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_VALID_ROP_NALB.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_VALID_ROP_NALB.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_VALID_ROP_NALB.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_VALID_ROP_NALB.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_VALID_ROP_NALB.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_VALID_ROP_NALB:dont_test") ) CFG_PIPE_HEALTH_VALID_ROP_NALB.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_VALID_ROP_NALB )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_VALID_ROP_NALB"));
      end
   CFG_PIPE_HEALTH_VALID_ROP_NALB.P0_ROP_NALB_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_nalb.status[0:0]"});
   CFG_PIPE_HEALTH_VALID_ROP_NALB.P1_ROP_NALB_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_nalb.status[1:1]"});
   CFG_PIPE_HEALTH_VALID_ROP_NALB.P2_ROP_NALB_F_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_nalb.status[2:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_VALID_ROP_QED_DQED";
    `endif
    CFG_PIPE_HEALTH_VALID_ROP_QED_DQED = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_VALID_ROP_QED_DQED_reg::type_id::create("CFG_PIPE_HEALTH_VALID_ROP_QED_DQED", this);
    CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00007C, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_space_addr("MSG", 32'h0C00007C);
    CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_space_addr("MEM-SB",28'hC00007C);
    CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_space_addr("MEM", 32'h0C00007C);
      CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_space("MEM");
      CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_VALID_ROP_QED_DQED:dont_test") ) CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_VALID_ROP_QED_DQED )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_VALID_ROP_QED_DQED"));
      end
   CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.P0_QED_DQED_ENQ_CTL_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_qed_dqed.status[0:0]"});
   CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.P1_QED_DQED_ENQ_CTL_V.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_qed_dqed.status[1:1]"});
   CFG_PIPE_HEALTH_VALID_ROP_QED_DQED.CHP_ROP_HCW_DB2_OUT_VALID.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_pipe_health_valid_rop_qed_dqed.status[2:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SERIALIZER_STATUS";
    `endif
    CFG_SERIALIZER_STATUS = hqm_reorder_pipe_bridge_CFG_SERIALIZER_STATUS_reg::type_id::create("CFG_SERIALIZER_STATUS", this);
    CFG_SERIALIZER_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000080, 32, 32'b00000000000000000000001000000000);
    CFG_SERIALIZER_STATUS.set_space_addr("MSG", 32'h0C000080);
    CFG_SERIALIZER_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_SERIALIZER_STATUS.set_space_addr("MEM-SB",28'hC000080);
    CFG_SERIALIZER_STATUS.set_space_addr("MEM", 32'h0C000080);
      CFG_SERIALIZER_STATUS.set_space("MEM");
      CFG_SERIALIZER_STATUS.set_msg_opcode("MEM-SB");
      CFG_SERIALIZER_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_SERIALIZER_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_SERIALIZER_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SERIALIZER_STATUS.set_user_attribute("diag_reg", "0");
      CFG_SERIALIZER_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SERIALIZER_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SERIALIZER_STATUS:dont_test") ) CFG_SERIALIZER_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_SERIALIZER_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_SERIALIZER_STATUS"));
      end
   CFG_SERIALIZER_STATUS.DB_UP_DEPTH.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[1:0]"});
   CFG_SERIALIZER_STATUS.DB_UP_OUT_READY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[2:2]"});
   CFG_SERIALIZER_STATUS.DB_UP_OUT_TAKEN.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[3:3]"});
   CFG_SERIALIZER_STATUS.DB_UP_OUT_STALLED.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[4:4]"});
   CFG_SERIALIZER_STATUS.DB_UP_INPUT_TAKEN.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[5:5]"});
   CFG_SERIALIZER_STATUS.DB_UP_INPUT_STALLED.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[6:6]"});
   CFG_SERIALIZER_STATUS.DB_DOWN_DEPTH.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[8:7]"});
   CFG_SERIALIZER_STATUS.DB_DOWN_OUT_READY.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[9:9]"});
   CFG_SERIALIZER_STATUS.DB_DOWN_OUT_TAKEN.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[10:10]"});
   CFG_SERIALIZER_STATUS.DB_DOWN_OUT_STALLED.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[11:11]"});
   CFG_SERIALIZER_STATUS.DB_DOWN_INPUT_TAKEN.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[12:12]"});
   CFG_SERIALIZER_STATUS.DB_DOWN_INPUT_STALLED.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[13:13]"});
   CFG_SERIALIZER_STATUS.RSZV0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_serializer_status.status[31:14]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SYNDROME_00";
    `endif
    CFG_SYNDROME_00 = hqm_reorder_pipe_bridge_CFG_SYNDROME_00_reg::type_id::create("CFG_SYNDROME_00", this);
    CFG_SYNDROME_00.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000084, 32, 32'b00000000000000000000000000000000);
    CFG_SYNDROME_00.set_space_addr("MSG", 32'h0C000084);
    CFG_SYNDROME_00.set_space_addr("msg_bus_port", 'h21);
    CFG_SYNDROME_00.set_space_addr("MEM-SB",28'hC000084);
    CFG_SYNDROME_00.set_space_addr("MEM", 32'h0C000084);
      CFG_SYNDROME_00.set_space("MEM");
      CFG_SYNDROME_00.set_msg_opcode("MEM-SB");
      CFG_SYNDROME_00.set_fid(4'h0, "MEM-SB");
  	CFG_SYNDROME_00.set_bar(4'h2, "MEM-SB");
      CFG_SYNDROME_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SYNDROME_00.set_user_attribute("diag_reg", "0");
      CFG_SYNDROME_00.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SYNDROME_00.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SYNDROME_00:dont_test") ) CFG_SYNDROME_00.set_test_reg(1'b0);
      if (!add_reg( CFG_SYNDROME_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SYNDROME_00"));
      end
   CFG_SYNDROME_00.SYNDDATA.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
   CFG_SYNDROME_00.SYNDTYPE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
   CFG_SYNDROME_00.SYNDVALID.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SYNDROME_01";
    `endif
    CFG_SYNDROME_01 = hqm_reorder_pipe_bridge_CFG_SYNDROME_01_reg::type_id::create("CFG_SYNDROME_01", this);
    CFG_SYNDROME_01.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000088, 32, 32'b00000000000000000000000000000000);
    CFG_SYNDROME_01.set_space_addr("MSG", 32'h0C000088);
    CFG_SYNDROME_01.set_space_addr("msg_bus_port", 'h21);
    CFG_SYNDROME_01.set_space_addr("MEM-SB",28'hC000088);
    CFG_SYNDROME_01.set_space_addr("MEM", 32'h0C000088);
      CFG_SYNDROME_01.set_space("MEM");
      CFG_SYNDROME_01.set_msg_opcode("MEM-SB");
      CFG_SYNDROME_01.set_fid(4'h0, "MEM-SB");
  	CFG_SYNDROME_01.set_bar(4'h2, "MEM-SB");
      CFG_SYNDROME_01.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SYNDROME_01.set_user_attribute("diag_reg", "0");
      CFG_SYNDROME_01.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SYNDROME_01.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SYNDROME_01:dont_test") ) CFG_SYNDROME_01.set_test_reg(1'b0);
      if (!add_reg( CFG_SYNDROME_01 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SYNDROME_01"));
      end
   CFG_SYNDROME_01.SYNDDATA.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
   CFG_SYNDROME_01.SYNDTYPE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
   CFG_SYNDROME_01.SYNDVALID.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_IDLE";
    `endif
    CFG_UNIT_IDLE = hqm_reorder_pipe_bridge_CFG_UNIT_IDLE_reg::type_id::create("CFG_UNIT_IDLE", this);
    CFG_UNIT_IDLE.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00008C, 32, 32'b00000000000000000000000000000011);
    CFG_UNIT_IDLE.set_space_addr("MSG", 32'h0C00008C);
    CFG_UNIT_IDLE.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_IDLE.set_space_addr("MEM-SB",28'hC00008C);
    CFG_UNIT_IDLE.set_space_addr("MEM", 32'h0C00008C);
      CFG_UNIT_IDLE.set_space("MEM");
      CFG_UNIT_IDLE.set_msg_opcode("MEM-SB");
      CFG_UNIT_IDLE.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_IDLE.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_IDLE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_IDLE.set_user_attribute("diag_reg", "0");
      CFG_UNIT_IDLE.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_UNIT_IDLE.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_IDLE.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_IDLE:dont_test") ) CFG_UNIT_IDLE.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_IDLE )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_IDLE"));
      end
   CFG_UNIT_IDLE.PIPE_IDLE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_idle.internal_f[0:0]"});
   CFG_UNIT_IDLE.UNIT_IDLE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_idle.internal_f[1:1]"});
   CFG_UNIT_IDLE.RSVZ0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_idle.internal_f[31:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_TIMEOUT";
    `endif
    CFG_UNIT_TIMEOUT = hqm_reorder_pipe_bridge_CFG_UNIT_TIMEOUT_reg::type_id::create("CFG_UNIT_TIMEOUT", this);
    CFG_UNIT_TIMEOUT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000090, 32, 32'b10000000000000001111111111111111);
    CFG_UNIT_TIMEOUT.set_space_addr("MSG", 32'h0C000090);
    CFG_UNIT_TIMEOUT.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_TIMEOUT.set_space_addr("MEM-SB",28'hC000090);
    CFG_UNIT_TIMEOUT.set_space_addr("MEM", 32'h0C000090);
      CFG_UNIT_TIMEOUT.set_space("MEM");
      CFG_UNIT_TIMEOUT.set_msg_opcode("MEM-SB");
      CFG_UNIT_TIMEOUT.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_TIMEOUT.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_TIMEOUT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_TIMEOUT.set_user_attribute("diag_reg", "0");
      CFG_UNIT_TIMEOUT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_UNIT_TIMEOUT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_UNIT_TIMEOUT:dont_test") ) CFG_UNIT_TIMEOUT.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_TIMEOUT )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_TIMEOUT"));
      end
   CFG_UNIT_TIMEOUT.MULTIPLIER.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_timeout.internal_f[4:0]"});
   CFG_UNIT_TIMEOUT.THRESHOLD.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_timeout.internal_f[15:5]"});
   CFG_UNIT_TIMEOUT.RSVZ0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_timeout.internal_f[30:16]"});
   CFG_UNIT_TIMEOUT.ENABLE.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_unit_timeout.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PATCH_CONTROL";
    `endif
    CFG_PATCH_CONTROL = hqm_reorder_pipe_bridge_CFG_PATCH_CONTROL_reg::type_id::create("CFG_PATCH_CONTROL", this);
    CFG_PATCH_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000094, 32, 32'b00000000000000000000011101000000);
    CFG_PATCH_CONTROL.set_space_addr("MSG", 32'h0C000094);
    CFG_PATCH_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_PATCH_CONTROL.set_space_addr("MEM-SB",28'hC000094);
    CFG_PATCH_CONTROL.set_space_addr("MEM", 32'h0C000094);
      CFG_PATCH_CONTROL.set_space("MEM");
      CFG_PATCH_CONTROL.set_msg_opcode("MEM-SB");
      CFG_PATCH_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_PATCH_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_PATCH_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PATCH_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_PATCH_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PATCH_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_PATCH_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_PATCH_CONTROL:dont_test") ) CFG_PATCH_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_PATCH_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_PATCH_CONTROL"));
      end
   CFG_PATCH_CONTROL.DELAY_CLOCKOFF.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_patch_control.internal_f[7:0]"});
   CFG_PATCH_CONTROL.DELAY_CLKOFF_BYPASS.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_patch_control.internal_f[13:8]"});
   CFG_PATCH_CONTROL.RSVZ1.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_patch_control.internal_f[15:14]"});
   CFG_PATCH_CONTROL.RSVZ0.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_patch_control.internal_f[30:16]"});
   CFG_PATCH_CONTROL.DISABLE_CLOCKOFF.set_paths({"i_hqm_reorder_pipe_core.i_hqm_reorder_pipe_register_pfcsr.i_hqm_rop_target_cfg_patch_control.internal_f[31:31]"});

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[%0d]",i);
    `endif
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i] = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0_reg::type_id::create($psprintf("CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[%0d]",i), this);
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E000000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_space_addr("MSG",  (32'h0E000000 + (i*4)) );
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_space_addr("MEM-SB", (28'hE000000 + (i*4)) );
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_space_addr("MEM",  (32'h0E000000 + (i*4)) );
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_space("MEM");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[%0d]:dont_test",i)) ) CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i].set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_PIPE_HEALTH_SEQNUM_STATE_GRP0[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[%0d]",i);
    `endif
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i] = hqm_reorder_pipe_bridge_CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1_reg::type_id::create($psprintf("CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[%0d]",i), this);
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E010000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_space_addr("MSG",  (32'h0E010000 + (i*4)) );
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_space_addr("MEM-SB", (28'hE010000 + (i*4)) );
    CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_space_addr("MEM",  (32'h0E010000 + (i*4)) );
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_space("MEM");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[%0d]:dont_test",i)) ) CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i].set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_PIPE_HEALTH_SEQNUM_STATE_GRP1[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_REORDER_STATE_NALB_HP[%0d]",i);
    `endif
    CFG_REORDER_STATE_NALB_HP[i] = hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_HP_reg::type_id::create($psprintf("CFG_REORDER_STATE_NALB_HP[%0d]",i), this);
    CFG_REORDER_STATE_NALB_HP[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E020000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_REORDER_STATE_NALB_HP[i].set_space_addr("MSG",  (32'h0E020000 + (i*4)) );
    CFG_REORDER_STATE_NALB_HP[i].set_space_addr("msg_bus_port", 'h21);
    CFG_REORDER_STATE_NALB_HP[i].set_space_addr("MEM-SB", (28'hE020000 + (i*4)) );
    CFG_REORDER_STATE_NALB_HP[i].set_space_addr("MEM",  (32'h0E020000 + (i*4)) );
      CFG_REORDER_STATE_NALB_HP[i].set_space("MEM");
      CFG_REORDER_STATE_NALB_HP[i].set_msg_opcode("MEM-SB");
      CFG_REORDER_STATE_NALB_HP[i].set_fid(4'h0, "MEM-SB");
  	CFG_REORDER_STATE_NALB_HP[i].set_bar(4'h2, "MEM-SB");
      CFG_REORDER_STATE_NALB_HP[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_REORDER_STATE_NALB_HP[i].set_user_attribute("diag_reg", "0");
      CFG_REORDER_STATE_NALB_HP[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_REORDER_STATE_NALB_HP[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_REORDER_STATE_NALB_HP[%0d]:dont_test",i)) ) CFG_REORDER_STATE_NALB_HP[i].set_test_reg(1'b0);
      if (!add_reg( CFG_REORDER_STATE_NALB_HP[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_REORDER_STATE_NALB_HP[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_REORDER_STATE_NALB_TP[%0d]",i);
    `endif
    CFG_REORDER_STATE_NALB_TP[i] = hqm_reorder_pipe_bridge_CFG_REORDER_STATE_NALB_TP_reg::type_id::create($psprintf("CFG_REORDER_STATE_NALB_TP[%0d]",i), this);
    CFG_REORDER_STATE_NALB_TP[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E030000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_REORDER_STATE_NALB_TP[i].set_space_addr("MSG",  (32'h0E030000 + (i*4)) );
    CFG_REORDER_STATE_NALB_TP[i].set_space_addr("msg_bus_port", 'h21);
    CFG_REORDER_STATE_NALB_TP[i].set_space_addr("MEM-SB", (28'hE030000 + (i*4)) );
    CFG_REORDER_STATE_NALB_TP[i].set_space_addr("MEM",  (32'h0E030000 + (i*4)) );
      CFG_REORDER_STATE_NALB_TP[i].set_space("MEM");
      CFG_REORDER_STATE_NALB_TP[i].set_msg_opcode("MEM-SB");
      CFG_REORDER_STATE_NALB_TP[i].set_fid(4'h0, "MEM-SB");
  	CFG_REORDER_STATE_NALB_TP[i].set_bar(4'h2, "MEM-SB");
      CFG_REORDER_STATE_NALB_TP[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_REORDER_STATE_NALB_TP[i].set_user_attribute("diag_reg", "0");
      CFG_REORDER_STATE_NALB_TP[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_REORDER_STATE_NALB_TP[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_REORDER_STATE_NALB_TP[%0d]:dont_test",i)) ) CFG_REORDER_STATE_NALB_TP[i].set_test_reg(1'b0);
      if (!add_reg( CFG_REORDER_STATE_NALB_TP[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_REORDER_STATE_NALB_TP[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_REORDER_STATE_DIR_HP[%0d]",i);
    `endif
    CFG_REORDER_STATE_DIR_HP[i] = hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_HP_reg::type_id::create($psprintf("CFG_REORDER_STATE_DIR_HP[%0d]",i), this);
    CFG_REORDER_STATE_DIR_HP[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E040000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_REORDER_STATE_DIR_HP[i].set_space_addr("MSG",  (32'h0E040000 + (i*4)) );
    CFG_REORDER_STATE_DIR_HP[i].set_space_addr("msg_bus_port", 'h21);
    CFG_REORDER_STATE_DIR_HP[i].set_space_addr("MEM-SB", (28'hE040000 + (i*4)) );
    CFG_REORDER_STATE_DIR_HP[i].set_space_addr("MEM",  (32'h0E040000 + (i*4)) );
      CFG_REORDER_STATE_DIR_HP[i].set_space("MEM");
      CFG_REORDER_STATE_DIR_HP[i].set_msg_opcode("MEM-SB");
      CFG_REORDER_STATE_DIR_HP[i].set_fid(4'h0, "MEM-SB");
  	CFG_REORDER_STATE_DIR_HP[i].set_bar(4'h2, "MEM-SB");
      CFG_REORDER_STATE_DIR_HP[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_REORDER_STATE_DIR_HP[i].set_user_attribute("diag_reg", "0");
      CFG_REORDER_STATE_DIR_HP[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_REORDER_STATE_DIR_HP[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_REORDER_STATE_DIR_HP[%0d]:dont_test",i)) ) CFG_REORDER_STATE_DIR_HP[i].set_test_reg(1'b0);
      if (!add_reg( CFG_REORDER_STATE_DIR_HP[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_REORDER_STATE_DIR_HP[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_REORDER_STATE_DIR_TP[%0d]",i);
    `endif
    CFG_REORDER_STATE_DIR_TP[i] = hqm_reorder_pipe_bridge_CFG_REORDER_STATE_DIR_TP_reg::type_id::create($psprintf("CFG_REORDER_STATE_DIR_TP[%0d]",i), this);
    CFG_REORDER_STATE_DIR_TP[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E050000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_REORDER_STATE_DIR_TP[i].set_space_addr("MSG",  (32'h0E050000 + (i*4)) );
    CFG_REORDER_STATE_DIR_TP[i].set_space_addr("msg_bus_port", 'h21);
    CFG_REORDER_STATE_DIR_TP[i].set_space_addr("MEM-SB", (28'hE050000 + (i*4)) );
    CFG_REORDER_STATE_DIR_TP[i].set_space_addr("MEM",  (32'h0E050000 + (i*4)) );
      CFG_REORDER_STATE_DIR_TP[i].set_space("MEM");
      CFG_REORDER_STATE_DIR_TP[i].set_msg_opcode("MEM-SB");
      CFG_REORDER_STATE_DIR_TP[i].set_fid(4'h0, "MEM-SB");
  	CFG_REORDER_STATE_DIR_TP[i].set_bar(4'h2, "MEM-SB");
      CFG_REORDER_STATE_DIR_TP[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_REORDER_STATE_DIR_TP[i].set_user_attribute("diag_reg", "0");
      CFG_REORDER_STATE_DIR_TP[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_REORDER_STATE_DIR_TP[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_REORDER_STATE_DIR_TP[%0d]:dont_test",i)) ) CFG_REORDER_STATE_DIR_TP[i].set_test_reg(1'b0);
      if (!add_reg( CFG_REORDER_STATE_DIR_TP[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_REORDER_STATE_DIR_TP[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_REORDER_STATE_QID_QIDIX_CQ[%0d]",i);
    `endif
    CFG_REORDER_STATE_QID_QIDIX_CQ[i] = hqm_reorder_pipe_bridge_CFG_REORDER_STATE_QID_QIDIX_CQ_reg::type_id::create($psprintf("CFG_REORDER_STATE_QID_QIDIX_CQ[%0d]",i), this);
    CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E060000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_space_addr("MSG",  (32'h0E060000 + (i*4)) );
    CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_space_addr("msg_bus_port", 'h21);
    CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_space_addr("MEM-SB", (28'hE060000 + (i*4)) );
    CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_space_addr("MEM",  (32'h0E060000 + (i*4)) );
      CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_space("MEM");
      CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_msg_opcode("MEM-SB");
      CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_fid(4'h0, "MEM-SB");
  	CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_bar(4'h2, "MEM-SB");
      CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_user_attribute("diag_reg", "0");
      CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_REORDER_STATE_QID_QIDIX_CQ[%0d]:dont_test",i)) ) CFG_REORDER_STATE_QID_QIDIX_CQ[i].set_test_reg(1'b0);
      if (!add_reg( CFG_REORDER_STATE_QID_QIDIX_CQ[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_REORDER_STATE_QID_QIDIX_CQ[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_REORDER_STATE_CNT[%0d]",i);
    `endif
    CFG_REORDER_STATE_CNT[i] = hqm_reorder_pipe_bridge_CFG_REORDER_STATE_CNT_reg::type_id::create($psprintf("CFG_REORDER_STATE_CNT[%0d]",i), this);
    CFG_REORDER_STATE_CNT[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E070000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_REORDER_STATE_CNT[i].set_space_addr("MSG",  (32'h0E070000 + (i*4)) );
    CFG_REORDER_STATE_CNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_REORDER_STATE_CNT[i].set_space_addr("MEM-SB", (28'hE070000 + (i*4)) );
    CFG_REORDER_STATE_CNT[i].set_space_addr("MEM",  (32'h0E070000 + (i*4)) );
      CFG_REORDER_STATE_CNT[i].set_space("MEM");
      CFG_REORDER_STATE_CNT[i].set_msg_opcode("MEM-SB");
      CFG_REORDER_STATE_CNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_REORDER_STATE_CNT[i].set_bar(4'h2, "MEM-SB");
      CFG_REORDER_STATE_CNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_REORDER_STATE_CNT[i].set_user_attribute("diag_reg", "0");
      CFG_REORDER_STATE_CNT[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_REORDER_STATE_CNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_REORDER_STATE_CNT[%0d]:dont_test",i)) ) CFG_REORDER_STATE_CNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_REORDER_STATE_CNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_REORDER_STATE_CNT[%0d]",i)));
      end
   cnt++;
end

  endfunction

 virtual function void print_sv_ral_file();  
    $display("RAL File Type [%s], RAL File Instance [%s], SV File ---> %s", get_type_name(), get_name(), `__FILE__); 
 endfunction 
endclass : hqm_reorder_pipe_bridge_file

// ================================================


`endif
