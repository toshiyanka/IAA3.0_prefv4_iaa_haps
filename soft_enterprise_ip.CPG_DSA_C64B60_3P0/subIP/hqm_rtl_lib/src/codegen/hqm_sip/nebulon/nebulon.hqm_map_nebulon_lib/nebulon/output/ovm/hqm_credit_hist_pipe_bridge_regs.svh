//                                                                             
// File:            hqm_credit_hist_pipe_bridge_regs.svh                       
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             


//RAL code compatible with Saola versions: 16.2.06 and newer 

`ifndef RAL_HQM_CREDIT_HIST_PIPE_BRIDGE_FILE
`define RAL_HQM_CREDIT_HIST_PIPE_BRIDGE_FILE

class hqm_credit_hist_pipe_bridge_CFG_VAS_CREDIT_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_VAS_CREDIT_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_15(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_15(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/V", 15, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_VAS_CREDIT_COUNT_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_VAS_CREDIT_COUNT_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SN;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN, SN.desired)
     `RAL_FIELD_CP_10(SN, SN.desired, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN, SN.actual)
     `RAL_FIELD_CP_10(SN, SN.actual, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SN = new("SN", "RW/V", 10, 0, {""});
    SN.set_powerwell("vcccfn_gated");
    SN.set_rand_mode(0);
   SN.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SN ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_MAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field SLOT;
  sla_ral_field RSVZ0;
  sla_ral_field GRP;
  sla_ral_field RSVZ1;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_MAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_3(MODE, MODE.desired, 0,1,2)
     `RAL_FIELD_CP(SLOT, SLOT.desired)
     `RAL_FIELD_CP_4(SLOT, SLOT.desired, 0,1,2,3)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.desired, 0)
     `RAL_FIELD_CP(GRP, GRP.desired)
     `RAL_FIELD_CP_1(GRP, GRP.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_3(MODE, MODE.actual, 0,1,2)
     `RAL_FIELD_CP(SLOT, SLOT.actual)
     `RAL_FIELD_CP_4(SLOT, SLOT.actual, 0,1,2,3)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.actual, 0)
     `RAL_FIELD_CP(GRP, GRP.actual)
     `RAL_FIELD_CP_1(GRP, GRP.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 3, 0, {""});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( MODE ));

    SLOT = new("SLOT", "RW", 4, 3, {""});
    SLOT.set_powerwell("vcccfn_gated");
    SLOT.set_rand_mode(0);
   SLOT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SLOT ));

    RSVZ0 = new("RSVZ0", "RW", 1, 7, {""});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( RSVZ0 ));

    GRP = new("GRP", "RW", 1, 8, {""});
    GRP.set_powerwell("vcccfn_gated");
    GRP.set_rand_mode(0);
   GRP.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( GRP ));

    RSVZ1 = new("RSVZ1", "RW", 1, 9, {""});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( RSVZ1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_MAP_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_MAP_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CMP_SN_CHK_ENBL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field EN;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CMP_SN_CHK_ENBL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EN, EN.desired)
     `RAL_FIELD_CP_1(EN, EN.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EN, EN.actual)
     `RAL_FIELD_CP_1(EN, EN.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    EN = new("EN", "RW", 1, 0, {""});
    EN.set_powerwell("vcccfn_gated");
    EN.set_rand_mode(0);
   EN.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( EN ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CMP_SN_CHK_ENBL_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CMP_SN_CHK_ENBL_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_MASK_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INT_MASK;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_MASK_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_MASK, INT_MASK.desired)
     `RAL_FIELD_CP_1(INT_MASK, INT_MASK.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_MASK, INT_MASK.actual)
     `RAL_FIELD_CP_1(INT_MASK, INT_MASK.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INT_MASK = new("INT_MASK", "RW", 1, 0, {""});
    INT_MASK.set_powerwell("vcccfn_gated");
    INT_MASK.set_rand_mode(0);
   INT_MASK.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( INT_MASK ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_MASK_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_MASK_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_IRQ_PENDING_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQ_PENDING;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_IRQ_PENDING_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ_PENDING, IRQ_PENDING.desired)
     `RAL_FIELD_CP_1(IRQ_PENDING, IRQ_PENDING.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ_PENDING, IRQ_PENDING.actual)
     `RAL_FIELD_CP_1(IRQ_PENDING, IRQ_PENDING.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQ_PENDING = new("IRQ_PENDING", "RO", 1, 0, {""});
    IRQ_PENDING.set_powerwell("vcccfn_gated");
    IRQ_PENDING.set_rand_mode(0);
   IRQ_PENDING.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( IRQ_PENDING ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_IRQ_PENDING_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_IRQ_PENDING_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_DEPTH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_DEPTH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_11(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_11(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DEPTH = new("DEPTH", "RW/V", 11, 0, {""});
    DEPTH.set_powerwell("vcccfn_gated");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_DEPTH_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_DEPTH_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DEPTH_THRESHOLD;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH_THRESHOLD, DEPTH_THRESHOLD.desired)
     `RAL_FIELD_CP_13(DEPTH_THRESHOLD, DEPTH_THRESHOLD.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH_THRESHOLD, DEPTH_THRESHOLD.actual)
     `RAL_FIELD_CP_13(DEPTH_THRESHOLD, DEPTH_THRESHOLD.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DEPTH_THRESHOLD = new("DEPTH_THRESHOLD", "RW", 13, 0, {""});
    DEPTH_THRESHOLD.set_powerwell("vcccfn_gated");
    DEPTH_THRESHOLD.set_rand_mode(0);
   DEPTH_THRESHOLD.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DEPTH_THRESHOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field EN_TIM;
  sla_ral_field EN_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EN_TIM, EN_TIM.desired)
     `RAL_FIELD_CP_1(EN_TIM, EN_TIM.desired, 0)
     `RAL_FIELD_CP(EN_DEPTH, EN_DEPTH.desired)
     `RAL_FIELD_CP_1(EN_DEPTH, EN_DEPTH.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EN_TIM, EN_TIM.actual)
     `RAL_FIELD_CP_1(EN_TIM, EN_TIM.actual, 0)
     `RAL_FIELD_CP(EN_DEPTH, EN_DEPTH.actual)
     `RAL_FIELD_CP_1(EN_DEPTH, EN_DEPTH.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    EN_TIM = new("EN_TIM", "RW", 1, 0, {""});
    EN_TIM.set_powerwell("vcccfn_gated");
    EN_TIM.set_rand_mode(0);
   EN_TIM.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( EN_TIM ));

    EN_DEPTH = new("EN_DEPTH", "RW", 1, 1, {""});
    EN_DEPTH.set_powerwell("vcccfn_gated");
    EN_DEPTH.set_rand_mode(0);
   EN_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( EN_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TICK_COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TICK_COUNT, TICK_COUNT.desired)
     `RAL_FIELD_CP_14(TICK_COUNT, TICK_COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TICK_COUNT, TICK_COUNT.actual)
     `RAL_FIELD_CP_14(TICK_COUNT, TICK_COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TICK_COUNT = new("TICK_COUNT", "RO/V", 14, 0, {""});
    TICK_COUNT.set_powerwell("vcccfn_gated");
    TICK_COUNT.set_rand_mode(0);
   TICK_COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TICK_COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_COUNT_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_COUNT_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_THRESHOLD_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field THRSH_0;
  sla_ral_field THRSH_13_1;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_THRESHOLD_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRSH_0, THRSH_0.desired)
     `RAL_FIELD_CP_1(THRSH_0, THRSH_0.desired, 0)
     `RAL_FIELD_CP(THRSH_13_1, THRSH_13_1.desired)
     `RAL_FIELD_CP_13(THRSH_13_1, THRSH_13_1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRSH_0, THRSH_0.actual)
     `RAL_FIELD_CP_1(THRSH_0, THRSH_0.actual, 0)
     `RAL_FIELD_CP(THRSH_13_1, THRSH_13_1.actual)
     `RAL_FIELD_CP_13(THRSH_13_1, THRSH_13_1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    THRSH_0 = new("THRSH_0", "RO", 1, 0, {""});
    THRSH_0.set_powerwell("vcccfn_gated");
    THRSH_0.set_rand_mode(0);
   THRSH_0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( THRSH_0 ));

    THRSH_13_1 = new("THRSH_13_1", "RW", 13, 1, {""});
    THRSH_13_1.set_powerwell("vcccfn_gated");
    THRSH_13_1.set_rand_mode(0);
   THRSH_13_1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( THRSH_13_1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_THRESHOLD_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_THRESHOLD_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TOKEN_DEPTH_SELECT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOKEN_DEPTH_SELECT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TOKEN_DEPTH_SELECT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.desired)
     `RAL_FIELD_CP_4(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.actual)
     `RAL_FIELD_CP_4(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOKEN_DEPTH_SELECT = new("TOKEN_DEPTH_SELECT", "RW", 4, 0, {""});
    TOKEN_DEPTH_SELECT.set_powerwell("vcccfn_gated");
    TOKEN_DEPTH_SELECT.set_rand_mode(0);
   TOKEN_DEPTH_SELECT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOKEN_DEPTH_SELECT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TOKEN_DEPTH_SELECT_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TOKEN_DEPTH_SELECT_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WD_ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_ENABLE, WD_ENABLE.desired)
     `RAL_FIELD_CP_1(WD_ENABLE, WD_ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_ENABLE, WD_ENABLE.actual)
     `RAL_FIELD_CP_1(WD_ENABLE, WD_ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WD_ENABLE = new("WD_ENABLE", "RW", 1, 0, {""});
    WD_ENABLE.set_powerwell("vcccfn_gated");
    WD_ENABLE.set_rand_mode(0);
   WD_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( WD_ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WPTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WRITE_POINTER;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WPTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WRITE_POINTER, WRITE_POINTER.desired)
     `RAL_FIELD_CP_11(WRITE_POINTER, WRITE_POINTER.desired, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WRITE_POINTER, WRITE_POINTER.actual)
     `RAL_FIELD_CP_11(WRITE_POINTER, WRITE_POINTER.actual, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WRITE_POINTER = new("WRITE_POINTER", "RW/V", 11, 0, {""});
    WRITE_POINTER.set_powerwell("vcccfn_gated");
    WRITE_POINTER.set_rand_mode(0);
   WRITE_POINTER.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( WRITE_POINTER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WPTR_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WPTR_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ2VAS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ2VAS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ2VAS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ2VAS, CQ2VAS.desired)
     `RAL_FIELD_CP_5(CQ2VAS, CQ2VAS.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ2VAS, CQ2VAS.actual)
     `RAL_FIELD_CP_5(CQ2VAS, CQ2VAS.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ2VAS = new("CQ2VAS", "RW", 5, 0, {""});
    CQ2VAS.set_powerwell("vcccfn_gated");
    CQ2VAS.set_rand_mode(0);
   CQ2VAS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ2VAS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ2VAS_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ2VAS_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_ON_OFF_THRESHOLD_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ON_THRSH;
  sla_ral_field OFF_THRSH;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_ON_OFF_THRESHOLD_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ON_THRSH, ON_THRSH.desired)
     `RAL_FIELD_CP_15(ON_THRSH, ON_THRSH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(OFF_THRSH, OFF_THRSH.desired)
     `RAL_FIELD_CP_15(OFF_THRSH, OFF_THRSH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ON_THRSH, ON_THRSH.actual)
     `RAL_FIELD_CP_15(ON_THRSH, ON_THRSH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(OFF_THRSH, OFF_THRSH.actual)
     `RAL_FIELD_CP_15(OFF_THRSH, OFF_THRSH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ON_THRSH = new("ON_THRSH", "RW", 15, 0, {""});
    ON_THRSH.set_powerwell("vcccfn_gated");
    ON_THRSH.set_rand_mode(0);
   ON_THRSH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( ON_THRSH ));

    OFF_THRSH = new("OFF_THRSH", "RW", 15, 15, {""});
    OFF_THRSH.set_powerwell("vcccfn_gated");
    OFF_THRSH.set_rand_mode(0);
   OFF_THRSH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( OFF_THRSH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_ON_OFF_THRESHOLD_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_ON_OFF_THRESHOLD_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_MODE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HL_EXP_MODE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_MODE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HL_EXP_MODE, HL_EXP_MODE.desired)
     `RAL_FIELD_CP_1(HL_EXP_MODE, HL_EXP_MODE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HL_EXP_MODE, HL_EXP_MODE.actual)
     `RAL_FIELD_CP_1(HL_EXP_MODE, HL_EXP_MODE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HL_EXP_MODE = new("HL_EXP_MODE", "RW", 1, 0, {""});
    HL_EXP_MODE.set_powerwell("vcccfn_gated");
    HL_EXP_MODE.set_rand_mode(0);
   HL_EXP_MODE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( HL_EXP_MODE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_MODE_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_MODE_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_BASE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field BASE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_BASE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BASE, BASE.desired)
     `RAL_FIELD_CP_13(BASE, BASE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BASE, BASE.actual)
     `RAL_FIELD_CP_13(BASE, BASE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    BASE = new("BASE", "RW", 13, 0, {""});
    BASE.set_powerwell("vcccfn_gated");
    BASE.set_rand_mode(0);
   BASE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( BASE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_BASE_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_BASE_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_LIMIT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_LIMIT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.desired)
     `RAL_FIELD_CP_13(LIMIT, LIMIT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.actual)
     `RAL_FIELD_CP_13(LIMIT, LIMIT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LIMIT = new("LIMIT", "RW", 13, 0, {""});
    LIMIT.set_powerwell("vcccfn_gated");
    LIMIT.set_rand_mode(0);
   LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_LIMIT_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_LIMIT_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_POP_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field POP_PTR;
  sla_ral_field GENERATION;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_POP_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(POP_PTR, POP_PTR.desired)
     `RAL_FIELD_CP_13(POP_PTR, POP_PTR.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
     `RAL_FIELD_CP(GENERATION, GENERATION.desired)
     `RAL_FIELD_CP_1(GENERATION, GENERATION.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(POP_PTR, POP_PTR.actual)
     `RAL_FIELD_CP_13(POP_PTR, POP_PTR.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
     `RAL_FIELD_CP(GENERATION, GENERATION.actual)
     `RAL_FIELD_CP_1(GENERATION, GENERATION.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    POP_PTR = new("POP_PTR", "RW/V", 13, 0, {""});
    POP_PTR.set_powerwell("vcccfn_gated");
    POP_PTR.set_rand_mode(0);
   POP_PTR.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( POP_PTR ));

    GENERATION = new("GENERATION", "RW/V", 1, 13, {""});
    GENERATION.set_powerwell("vcccfn_gated");
    GENERATION.set_rand_mode(0);
   GENERATION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( GENERATION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_POP_PTR_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_POP_PTR_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_PUSH_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PUSH_PTR;
  sla_ral_field GENERATION;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_PUSH_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PUSH_PTR, PUSH_PTR.desired)
     `RAL_FIELD_CP_13(PUSH_PTR, PUSH_PTR.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
     `RAL_FIELD_CP(GENERATION, GENERATION.desired)
     `RAL_FIELD_CP_1(GENERATION, GENERATION.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PUSH_PTR, PUSH_PTR.actual)
     `RAL_FIELD_CP_13(PUSH_PTR, PUSH_PTR.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
     `RAL_FIELD_CP(GENERATION, GENERATION.actual)
     `RAL_FIELD_CP_1(GENERATION, GENERATION.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PUSH_PTR = new("PUSH_PTR", "RW/V", 13, 0, {""});
    PUSH_PTR.set_powerwell("vcccfn_gated");
    PUSH_PTR.set_rand_mode(0);
   PUSH_PTR.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PUSH_PTR ));

    GENERATION = new("GENERATION", "RW/V", 1, 13, {""});
    GENERATION.set_powerwell("vcccfn_gated");
    GENERATION.set_rand_mode(0);
   GENERATION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( GENERATION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_PUSH_PTR_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_PUSH_PTR_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_BASE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field BASE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_BASE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BASE, BASE.desired)
     `RAL_FIELD_CP_13(BASE, BASE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BASE, BASE.actual)
     `RAL_FIELD_CP_13(BASE, BASE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    BASE = new("BASE", "RW", 13, 0, {""});
    BASE.set_powerwell("vcccfn_gated");
    BASE.set_rand_mode(0);
   BASE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( BASE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_BASE_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_BASE_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_LIMIT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_LIMIT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.desired)
     `RAL_FIELD_CP_13(LIMIT, LIMIT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.actual)
     `RAL_FIELD_CP_13(LIMIT, LIMIT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LIMIT = new("LIMIT", "RW", 13, 0, {""});
    LIMIT.set_powerwell("vcccfn_gated");
    LIMIT.set_rand_mode(0);
   LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_LIMIT_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_LIMIT_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_POP_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field POP_PTR;
  sla_ral_field GENERATION;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_POP_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(POP_PTR, POP_PTR.desired)
     `RAL_FIELD_CP_13(POP_PTR, POP_PTR.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
     `RAL_FIELD_CP(GENERATION, GENERATION.desired)
     `RAL_FIELD_CP_1(GENERATION, GENERATION.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(POP_PTR, POP_PTR.actual)
     `RAL_FIELD_CP_13(POP_PTR, POP_PTR.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
     `RAL_FIELD_CP(GENERATION, GENERATION.actual)
     `RAL_FIELD_CP_1(GENERATION, GENERATION.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    POP_PTR = new("POP_PTR", "RW/V", 13, 0, {""});
    POP_PTR.set_powerwell("vcccfn_gated");
    POP_PTR.set_rand_mode(0);
   POP_PTR.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( POP_PTR ));

    GENERATION = new("GENERATION", "RW/V", 1, 13, {""});
    GENERATION.set_powerwell("vcccfn_gated");
    GENERATION.set_rand_mode(0);
   GENERATION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( GENERATION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_POP_PTR_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_POP_PTR_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_PUSH_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PUSH_PTR;
  sla_ral_field GENERATION;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_PUSH_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PUSH_PTR, PUSH_PTR.desired)
     `RAL_FIELD_CP_13(PUSH_PTR, PUSH_PTR.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
     `RAL_FIELD_CP(GENERATION, GENERATION.desired)
     `RAL_FIELD_CP_1(GENERATION, GENERATION.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PUSH_PTR, PUSH_PTR.actual)
     `RAL_FIELD_CP_13(PUSH_PTR, PUSH_PTR.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
     `RAL_FIELD_CP(GENERATION, GENERATION.actual)
     `RAL_FIELD_CP_1(GENERATION, GENERATION.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PUSH_PTR = new("PUSH_PTR", "RW/V", 13, 0, {""});
    PUSH_PTR.set_powerwell("vcccfn_gated");
    PUSH_PTR.set_rand_mode(0);
   PUSH_PTR.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PUSH_PTR ));

    GENERATION = new("GENERATION", "RW/V", 1, 13, {""});
    GENERATION.set_powerwell("vcccfn_gated");
    GENERATION.set_rand_mode(0);
   GENERATION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( GENERATION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_PUSH_PTR_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_PUSH_PTR_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_MASK_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INT_MASK;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_MASK_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_MASK, INT_MASK.desired)
     `RAL_FIELD_CP_1(INT_MASK, INT_MASK.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_MASK, INT_MASK.actual)
     `RAL_FIELD_CP_1(INT_MASK, INT_MASK.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INT_MASK = new("INT_MASK", "RW", 1, 0, {""});
    INT_MASK.set_powerwell("vcccfn_gated");
    INT_MASK.set_rand_mode(0);
   INT_MASK.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( INT_MASK ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_MASK_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_MASK_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_IRQ_PENDING_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQ_PENDING;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_IRQ_PENDING_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ_PENDING, IRQ_PENDING.desired)
     `RAL_FIELD_CP_1(IRQ_PENDING, IRQ_PENDING.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ_PENDING, IRQ_PENDING.actual)
     `RAL_FIELD_CP_1(IRQ_PENDING, IRQ_PENDING.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQ_PENDING = new("IRQ_PENDING", "RO", 1, 0, {""});
    IRQ_PENDING.set_powerwell("vcccfn_gated");
    IRQ_PENDING.set_rand_mode(0);
   IRQ_PENDING.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( IRQ_PENDING ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_IRQ_PENDING_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_IRQ_PENDING_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_DEPTH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_DEPTH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_11(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_11(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DEPTH = new("DEPTH", "RW/V", 11, 0, {""});
    DEPTH.set_powerwell("vcccfn_gated");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_DEPTH_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_DEPTH_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DEPTH_THRESHOLD;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH_THRESHOLD, DEPTH_THRESHOLD.desired)
     `RAL_FIELD_CP_11(DEPTH_THRESHOLD, DEPTH_THRESHOLD.desired, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH_THRESHOLD, DEPTH_THRESHOLD.actual)
     `RAL_FIELD_CP_11(DEPTH_THRESHOLD, DEPTH_THRESHOLD.actual, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DEPTH_THRESHOLD = new("DEPTH_THRESHOLD", "RW", 11, 0, {""});
    DEPTH_THRESHOLD.set_powerwell("vcccfn_gated");
    DEPTH_THRESHOLD.set_rand_mode(0);
   DEPTH_THRESHOLD.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DEPTH_THRESHOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field EN_TIM;
  sla_ral_field EN_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EN_TIM, EN_TIM.desired)
     `RAL_FIELD_CP_1(EN_TIM, EN_TIM.desired, 0)
     `RAL_FIELD_CP(EN_DEPTH, EN_DEPTH.desired)
     `RAL_FIELD_CP_1(EN_DEPTH, EN_DEPTH.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EN_TIM, EN_TIM.actual)
     `RAL_FIELD_CP_1(EN_TIM, EN_TIM.actual, 0)
     `RAL_FIELD_CP(EN_DEPTH, EN_DEPTH.actual)
     `RAL_FIELD_CP_1(EN_DEPTH, EN_DEPTH.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    EN_TIM = new("EN_TIM", "RW", 1, 0, {""});
    EN_TIM.set_powerwell("vcccfn_gated");
    EN_TIM.set_rand_mode(0);
   EN_TIM.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( EN_TIM ));

    EN_DEPTH = new("EN_DEPTH", "RW", 1, 1, {""});
    EN_DEPTH.set_powerwell("vcccfn_gated");
    EN_DEPTH.set_rand_mode(0);
   EN_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( EN_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TICK_COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TICK_COUNT, TICK_COUNT.desired)
     `RAL_FIELD_CP_14(TICK_COUNT, TICK_COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TICK_COUNT, TICK_COUNT.actual)
     `RAL_FIELD_CP_14(TICK_COUNT, TICK_COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TICK_COUNT = new("TICK_COUNT", "RO/V", 14, 0, {""});
    TICK_COUNT.set_powerwell("vcccfn_gated");
    TICK_COUNT.set_rand_mode(0);
   TICK_COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TICK_COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_COUNT_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_COUNT_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_THRESHOLD_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field THRSH_0;
  sla_ral_field THRSH_13_1;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_THRESHOLD_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRSH_0, THRSH_0.desired)
     `RAL_FIELD_CP_1(THRSH_0, THRSH_0.desired, 0)
     `RAL_FIELD_CP(THRSH_13_1, THRSH_13_1.desired)
     `RAL_FIELD_CP_13(THRSH_13_1, THRSH_13_1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRSH_0, THRSH_0.actual)
     `RAL_FIELD_CP_1(THRSH_0, THRSH_0.actual, 0)
     `RAL_FIELD_CP(THRSH_13_1, THRSH_13_1.actual)
     `RAL_FIELD_CP_13(THRSH_13_1, THRSH_13_1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    THRSH_0 = new("THRSH_0", "RO", 1, 0, {""});
    THRSH_0.set_powerwell("vcccfn_gated");
    THRSH_0.set_rand_mode(0);
   THRSH_0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( THRSH_0 ));

    THRSH_13_1 = new("THRSH_13_1", "RW", 13, 1, {""});
    THRSH_13_1.set_powerwell("vcccfn_gated");
    THRSH_13_1.set_rand_mode(0);
   THRSH_13_1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( THRSH_13_1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_THRESHOLD_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_THRESHOLD_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TOKEN_DEPTH_SELECT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOKEN_DEPTH_SELECT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TOKEN_DEPTH_SELECT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.desired)
     `RAL_FIELD_CP_4(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.actual)
     `RAL_FIELD_CP_4(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOKEN_DEPTH_SELECT = new("TOKEN_DEPTH_SELECT", "RW", 4, 0, {""});
    TOKEN_DEPTH_SELECT.set_powerwell("vcccfn_gated");
    TOKEN_DEPTH_SELECT.set_rand_mode(0);
   TOKEN_DEPTH_SELECT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOKEN_DEPTH_SELECT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TOKEN_DEPTH_SELECT_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TOKEN_DEPTH_SELECT_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WD_ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_ENABLE, WD_ENABLE.desired)
     `RAL_FIELD_CP_1(WD_ENABLE, WD_ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_ENABLE, WD_ENABLE.actual)
     `RAL_FIELD_CP_1(WD_ENABLE, WD_ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WD_ENABLE = new("WD_ENABLE", "RW", 1, 0, {""});
    WD_ENABLE.set_powerwell("vcccfn_gated");
    WD_ENABLE.set_rand_mode(0);
   WD_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( WD_ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WPTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WRITE_POINTER;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WPTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WRITE_POINTER, WRITE_POINTER.desired)
     `RAL_FIELD_CP_11(WRITE_POINTER, WRITE_POINTER.desired, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WRITE_POINTER, WRITE_POINTER.actual)
     `RAL_FIELD_CP_11(WRITE_POINTER, WRITE_POINTER.actual, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WRITE_POINTER = new("WRITE_POINTER", "RW/V", 11, 0, {""});
    WRITE_POINTER.set_powerwell("vcccfn_gated");
    WRITE_POINTER.set_rand_mode(0);
   WRITE_POINTER.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( WRITE_POINTER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WPTR_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WPTR_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ2VAS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ2VAS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ2VAS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ2VAS, CQ2VAS.desired)
     `RAL_FIELD_CP_5(CQ2VAS, CQ2VAS.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ2VAS, CQ2VAS.actual)
     `RAL_FIELD_CP_5(CQ2VAS, CQ2VAS.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ2VAS = new("CQ2VAS", "RW", 5, 0, {""});
    CQ2VAS.set_powerwell("vcccfn_gated");
    CQ2VAS.set_rand_mode(0);
   CQ2VAS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ2VAS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ2VAS_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ2VAS_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_FRAG_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_FRAG_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_5(COUNT, COUNT.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_5(COUNT, COUNT.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 5, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_FRAG_COUNT_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_FRAG_COUNT_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_correctible_count.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_L_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_L_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_correctible_count.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_H_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_H_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_PALB_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PALB_PERIOD;
  sla_ral_field RSVZ0;
  sla_ral_field PALB_ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_PALB_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PALB_PERIOD, PALB_PERIOD.desired)
     `RAL_FIELD_CP_4(PALB_PERIOD, PALB_PERIOD.desired, 0,1,2,3)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_11(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26)
     `RAL_FIELD_CP(PALB_ENABLE, PALB_ENABLE.desired)
     `RAL_FIELD_CP_1(PALB_ENABLE, PALB_ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PALB_PERIOD, PALB_PERIOD.actual)
     `RAL_FIELD_CP_4(PALB_PERIOD, PALB_PERIOD.actual, 0,1,2,3)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_11(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26)
     `RAL_FIELD_CP(PALB_ENABLE, PALB_ENABLE.actual)
     `RAL_FIELD_CP_1(PALB_ENABLE, PALB_ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PALB_PERIOD = new("PALB_PERIOD", "RW", 4, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_palb_control.internal_f[3:0]"});
    PALB_PERIOD.set_powerwell("vcccfn_gated");
    PALB_PERIOD.set_rand_mode(0);
   PALB_PERIOD.set_reset_signame("hqm_inp_gated_rst_n");
    PALB_PERIOD.set_logical_path("HQMID");
    void'(add_field( PALB_PERIOD ));

    RSVZ0 = new("RSVZ0", "RW", 27, 4, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_palb_control.internal_f[30:4]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    PALB_ENABLE = new("PALB_ENABLE", "RW", 1, 31, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_palb_control.internal_f[31:31]"});
    PALB_ENABLE.set_powerwell("vcccfn_gated");
    PALB_ENABLE.set_rand_mode(0);
   PALB_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    PALB_ENABLE.set_logical_path("HQMID");
    void'(add_field( PALB_ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_PALB_CONTROL_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_PALB_CONTROL_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CSR_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INT_COR_ALARM_DIS;
  sla_ral_field INT_COR_SYND_DIS;
  sla_ral_field INT_UNCR_ALARM_DIS;
  sla_ral_field INT_UNC_SYND_DIS;
  sla_ral_field INT_INF0_ALARM_DIS;
  sla_ral_field INT_INF0_SYND_DIS;
  sla_ral_field INT_INF1_ALARM_DIS;
  sla_ral_field INT_INF1_SYND_DIS;
  sla_ral_field INT_INF2_ALARM_DIS;
  sla_ral_field INT_INF2_SYND_DIS;
  sla_ral_field INT_INF3_ALARM_DIS;
  sla_ral_field INT_INF3_SYND_DIS;
  sla_ral_field INT_INF4_ALARM_DIS;
  sla_ral_field INT_INF4_SYND_DIS;
  sla_ral_field INT_INF5_ALARM_DIS;
  sla_ral_field INT_INF5_SYND_DIS;
  sla_ral_field HQM_COR_ALARM_ENABLE;
  sla_ral_field CFG_64BYTES_QE_LDB_CQ_MODE;
  sla_ral_field CFG_64BYTES_QE_DIR_CQ_MODE;
  sla_ral_field PAD_WRITE_LDB;
  sla_ral_field PAD_WRITE_DIR;
  sla_ral_field PAD_FIRST_WRITE_LDB;
  sla_ral_field PAD_FIRST_WRITE_DIR;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CSR_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_COR_SYND_DIS, INT_COR_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_COR_SYND_DIS, INT_COR_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(HQM_COR_ALARM_ENABLE, HQM_COR_ALARM_ENABLE.desired)
     `RAL_FIELD_CP_1(HQM_COR_ALARM_ENABLE, HQM_COR_ALARM_ENABLE.desired, 0)
     `RAL_FIELD_CP(CFG_64BYTES_QE_LDB_CQ_MODE, CFG_64BYTES_QE_LDB_CQ_MODE.desired)
     `RAL_FIELD_CP_1(CFG_64BYTES_QE_LDB_CQ_MODE, CFG_64BYTES_QE_LDB_CQ_MODE.desired, 0)
     `RAL_FIELD_CP(CFG_64BYTES_QE_DIR_CQ_MODE, CFG_64BYTES_QE_DIR_CQ_MODE.desired)
     `RAL_FIELD_CP_1(CFG_64BYTES_QE_DIR_CQ_MODE, CFG_64BYTES_QE_DIR_CQ_MODE.desired, 0)
     `RAL_FIELD_CP(PAD_WRITE_LDB, PAD_WRITE_LDB.desired)
     `RAL_FIELD_CP_1(PAD_WRITE_LDB, PAD_WRITE_LDB.desired, 0)
     `RAL_FIELD_CP(PAD_WRITE_DIR, PAD_WRITE_DIR.desired)
     `RAL_FIELD_CP_1(PAD_WRITE_DIR, PAD_WRITE_DIR.desired, 0)
     `RAL_FIELD_CP(PAD_FIRST_WRITE_LDB, PAD_FIRST_WRITE_LDB.desired)
     `RAL_FIELD_CP_1(PAD_FIRST_WRITE_LDB, PAD_FIRST_WRITE_LDB.desired, 0)
     `RAL_FIELD_CP(PAD_FIRST_WRITE_DIR, PAD_FIRST_WRITE_DIR.desired)
     `RAL_FIELD_CP_1(PAD_FIRST_WRITE_DIR, PAD_FIRST_WRITE_DIR.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_9(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_COR_SYND_DIS, INT_COR_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_COR_SYND_DIS, INT_COR_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(HQM_COR_ALARM_ENABLE, HQM_COR_ALARM_ENABLE.actual)
     `RAL_FIELD_CP_1(HQM_COR_ALARM_ENABLE, HQM_COR_ALARM_ENABLE.actual, 0)
     `RAL_FIELD_CP(CFG_64BYTES_QE_LDB_CQ_MODE, CFG_64BYTES_QE_LDB_CQ_MODE.actual)
     `RAL_FIELD_CP_1(CFG_64BYTES_QE_LDB_CQ_MODE, CFG_64BYTES_QE_LDB_CQ_MODE.actual, 0)
     `RAL_FIELD_CP(CFG_64BYTES_QE_DIR_CQ_MODE, CFG_64BYTES_QE_DIR_CQ_MODE.actual)
     `RAL_FIELD_CP_1(CFG_64BYTES_QE_DIR_CQ_MODE, CFG_64BYTES_QE_DIR_CQ_MODE.actual, 0)
     `RAL_FIELD_CP(PAD_WRITE_LDB, PAD_WRITE_LDB.actual)
     `RAL_FIELD_CP_1(PAD_WRITE_LDB, PAD_WRITE_LDB.actual, 0)
     `RAL_FIELD_CP(PAD_WRITE_DIR, PAD_WRITE_DIR.actual)
     `RAL_FIELD_CP_1(PAD_WRITE_DIR, PAD_WRITE_DIR.actual, 0)
     `RAL_FIELD_CP(PAD_FIRST_WRITE_LDB, PAD_FIRST_WRITE_LDB.actual)
     `RAL_FIELD_CP_1(PAD_FIRST_WRITE_LDB, PAD_FIRST_WRITE_LDB.actual, 0)
     `RAL_FIELD_CP(PAD_FIRST_WRITE_DIR, PAD_FIRST_WRITE_DIR.actual)
     `RAL_FIELD_CP_1(PAD_FIRST_WRITE_DIR, PAD_FIRST_WRITE_DIR.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_9(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INT_COR_ALARM_DIS = new("INT_COR_ALARM_DIS", "RW", 1, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[0:0]"});
    INT_COR_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_COR_ALARM_DIS.set_rand_mode(0);
   INT_COR_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_COR_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_COR_ALARM_DIS ));

    INT_COR_SYND_DIS = new("INT_COR_SYND_DIS", "RW", 1, 1, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[1:1]"});
    INT_COR_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_COR_SYND_DIS.set_rand_mode(0);
   INT_COR_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_COR_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_COR_SYND_DIS ));

    INT_UNCR_ALARM_DIS = new("INT_UNCR_ALARM_DIS", "RW", 1, 2, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[2:2]"});
    INT_UNCR_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_UNCR_ALARM_DIS.set_rand_mode(0);
   INT_UNCR_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_UNCR_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_UNCR_ALARM_DIS ));

    INT_UNC_SYND_DIS = new("INT_UNC_SYND_DIS", "RW", 1, 3, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[3:3]"});
    INT_UNC_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_UNC_SYND_DIS.set_rand_mode(0);
   INT_UNC_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_UNC_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_UNC_SYND_DIS ));

    INT_INF0_ALARM_DIS = new("INT_INF0_ALARM_DIS", "RW", 1, 4, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[4:4]"});
    INT_INF0_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF0_ALARM_DIS.set_rand_mode(0);
   INT_INF0_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF0_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF0_ALARM_DIS ));

    INT_INF0_SYND_DIS = new("INT_INF0_SYND_DIS", "RW", 1, 5, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[5:5]"});
    INT_INF0_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF0_SYND_DIS.set_rand_mode(0);
   INT_INF0_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF0_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF0_SYND_DIS ));

    INT_INF1_ALARM_DIS = new("INT_INF1_ALARM_DIS", "RW", 1, 6, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[6:6]"});
    INT_INF1_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF1_ALARM_DIS.set_rand_mode(0);
   INT_INF1_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF1_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF1_ALARM_DIS ));

    INT_INF1_SYND_DIS = new("INT_INF1_SYND_DIS", "RW", 1, 7, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[7:7]"});
    INT_INF1_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF1_SYND_DIS.set_rand_mode(0);
   INT_INF1_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF1_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF1_SYND_DIS ));

    INT_INF2_ALARM_DIS = new("INT_INF2_ALARM_DIS", "RW", 1, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[8:8]"});
    INT_INF2_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF2_ALARM_DIS.set_rand_mode(0);
   INT_INF2_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF2_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF2_ALARM_DIS ));

    INT_INF2_SYND_DIS = new("INT_INF2_SYND_DIS", "RW", 1, 9, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[9:9]"});
    INT_INF2_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF2_SYND_DIS.set_rand_mode(0);
   INT_INF2_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF2_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF2_SYND_DIS ));

    INT_INF3_ALARM_DIS = new("INT_INF3_ALARM_DIS", "RW", 1, 10, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[10:10]"});
    INT_INF3_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF3_ALARM_DIS.set_rand_mode(0);
   INT_INF3_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF3_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF3_ALARM_DIS ));

    INT_INF3_SYND_DIS = new("INT_INF3_SYND_DIS", "RW", 1, 11, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[11:11]"});
    INT_INF3_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF3_SYND_DIS.set_rand_mode(0);
   INT_INF3_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF3_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF3_SYND_DIS ));

    INT_INF4_ALARM_DIS = new("INT_INF4_ALARM_DIS", "RW", 1, 12, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[12:12]"});
    INT_INF4_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF4_ALARM_DIS.set_rand_mode(0);
   INT_INF4_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF4_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF4_ALARM_DIS ));

    INT_INF4_SYND_DIS = new("INT_INF4_SYND_DIS", "RW", 1, 13, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[13:13]"});
    INT_INF4_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF4_SYND_DIS.set_rand_mode(0);
   INT_INF4_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF4_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF4_SYND_DIS ));

    INT_INF5_ALARM_DIS = new("INT_INF5_ALARM_DIS", "RW", 1, 14, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[14:14]"});
    INT_INF5_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF5_ALARM_DIS.set_rand_mode(0);
   INT_INF5_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF5_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF5_ALARM_DIS ));

    INT_INF5_SYND_DIS = new("INT_INF5_SYND_DIS", "RW", 1, 15, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[15:15]"});
    INT_INF5_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF5_SYND_DIS.set_rand_mode(0);
   INT_INF5_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF5_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF5_SYND_DIS ));

    HQM_COR_ALARM_ENABLE = new("HQM_COR_ALARM_ENABLE", "RW", 1, 16, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[16:16]"});
    HQM_COR_ALARM_ENABLE.set_powerwell("vcccfn_gated");
    HQM_COR_ALARM_ENABLE.set_rand_mode(0);
   HQM_COR_ALARM_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    HQM_COR_ALARM_ENABLE.set_logical_path("HQMID");
    void'(add_field( HQM_COR_ALARM_ENABLE ));

    CFG_64BYTES_QE_LDB_CQ_MODE = new("CFG_64BYTES_QE_LDB_CQ_MODE", "RW", 1, 17, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[17:17]"});
    CFG_64BYTES_QE_LDB_CQ_MODE.set_powerwell("vcccfn_gated");
    CFG_64BYTES_QE_LDB_CQ_MODE.set_rand_mode(0);
   CFG_64BYTES_QE_LDB_CQ_MODE.set_reset_signame("hqm_inp_gated_rst_n");
    CFG_64BYTES_QE_LDB_CQ_MODE.set_logical_path("HQMID");
    void'(add_field( CFG_64BYTES_QE_LDB_CQ_MODE ));

    CFG_64BYTES_QE_DIR_CQ_MODE = new("CFG_64BYTES_QE_DIR_CQ_MODE", "RW", 1, 18, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[18:18]"});
    CFG_64BYTES_QE_DIR_CQ_MODE.set_powerwell("vcccfn_gated");
    CFG_64BYTES_QE_DIR_CQ_MODE.set_rand_mode(0);
   CFG_64BYTES_QE_DIR_CQ_MODE.set_reset_signame("hqm_inp_gated_rst_n");
    CFG_64BYTES_QE_DIR_CQ_MODE.set_logical_path("HQMID");
    void'(add_field( CFG_64BYTES_QE_DIR_CQ_MODE ));

    PAD_WRITE_LDB = new("PAD_WRITE_LDB", "RW", 1, 19, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[19:19]"});
    PAD_WRITE_LDB.set_powerwell("vcccfn_gated");
    PAD_WRITE_LDB.set_rand_mode(0);
   PAD_WRITE_LDB.set_reset_signame("hqm_inp_gated_rst_n");
    PAD_WRITE_LDB.set_logical_path("HQMID");
    void'(add_field( PAD_WRITE_LDB ));

    PAD_WRITE_DIR = new("PAD_WRITE_DIR", "RW", 1, 20, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[20:20]"});
    PAD_WRITE_DIR.set_powerwell("vcccfn_gated");
    PAD_WRITE_DIR.set_rand_mode(0);
   PAD_WRITE_DIR.set_reset_signame("hqm_inp_gated_rst_n");
    PAD_WRITE_DIR.set_logical_path("HQMID");
    void'(add_field( PAD_WRITE_DIR ));

    PAD_FIRST_WRITE_LDB = new("PAD_FIRST_WRITE_LDB", "RW", 1, 21, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[21:21]"});
    PAD_FIRST_WRITE_LDB.set_powerwell("vcccfn_gated");
    PAD_FIRST_WRITE_LDB.set_rand_mode(0);
   PAD_FIRST_WRITE_LDB.set_reset_signame("hqm_inp_gated_rst_n");
    PAD_FIRST_WRITE_LDB.set_logical_path("HQMID");
    void'(add_field( PAD_FIRST_WRITE_LDB ));

    PAD_FIRST_WRITE_DIR = new("PAD_FIRST_WRITE_DIR", "RW", 1, 22, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[22:22]"});
    PAD_FIRST_WRITE_DIR.set_powerwell("vcccfn_gated");
    PAD_FIRST_WRITE_DIR.set_rand_mode(0);
   PAD_FIRST_WRITE_DIR.set_reset_signame("hqm_inp_gated_rst_n");
    PAD_FIRST_WRITE_DIR.set_logical_path("HQMID");
    void'(add_field( PAD_FIRST_WRITE_DIR ));

    RSVZ0 = new("RSVZ0", "RW", 9, 23, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[31:23]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CSR_CONTROL_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CSR_CONTROL_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_counter_chp_error_drop.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_L_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_L_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_counter_chp_error_drop.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_H_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_H_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_dir_hcw_enq.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_L_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_L_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_dir_hcw_enq.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_H_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_H_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_ldb_hcw_enq.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_L_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_L_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_ldb_hcw_enq.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_H_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_H_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_frag_replayed.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_L_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_L_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_frag_replayed.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_H_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_H_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_dir_qe_sch.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_L_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_L_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_dir_qe_sch.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_H_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_H_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_ldb_qe_sch.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_L_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_L_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_ldb_qe_sch.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_H_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_H_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_atm_qe_sch.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_L_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_L_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_atm_qe_sch.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_H_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_H_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_atq_to_atm.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_L_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_L_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_atq_to_atm.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_H_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_H_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ARMED;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARMED, ARMED.desired)
     `RAL_FIELD_CP_16(ARMED, ARMED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ARMED, ARMED.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARMED, ARMED.actual)
     `RAL_FIELD_CP_16(ARMED, ARMED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ARMED, ARMED.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ARMED = new("ARMED", "RW/1S/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_armed0.internal_f[31:0]"});
    ARMED.set_powerwell("vcccfn_gated");
    ARMED.set_rand_mode(0);
   ARMED.set_reset_signame("hqm_inp_gated_rst_n");
    ARMED.set_logical_path("HQMID");
    void'(add_field( ARMED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ARMED;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARMED, ARMED.desired)
     `RAL_FIELD_CP_16(ARMED, ARMED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ARMED, ARMED.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARMED, ARMED.actual)
     `RAL_FIELD_CP_16(ARMED, ARMED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ARMED, ARMED.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ARMED = new("ARMED", "RW/1S/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_armed1.internal_f[31:0]"});
    ARMED.set_powerwell("vcccfn_gated");
    ARMED.set_rand_mode(0);
   ARMED.set_reset_signame("hqm_inp_gated_rst_n");
    ARMED.set_logical_path("HQMID");
    void'(add_field( ARMED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field EXPIRED;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EXPIRED, EXPIRED.desired)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EXPIRED, EXPIRED.actual)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    EXPIRED = new("EXPIRED", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_expired0.status[31:0]"});
    EXPIRED.set_powerwell("vcccfn_gated");
    EXPIRED.set_rand_mode(0);
   EXPIRED.set_reset_signame("hqm_inp_gated_rst_n");
    EXPIRED.set_logical_path("HQMID");
    void'(add_field( EXPIRED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field EXPIRED;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EXPIRED, EXPIRED.desired)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EXPIRED, EXPIRED.actual)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    EXPIRED = new("EXPIRED", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_expired1.status[31:0]"});
    EXPIRED.set_powerwell("vcccfn_gated");
    EXPIRED.set_rand_mode(0);
   EXPIRED.set_reset_signame("hqm_inp_gated_rst_n");
    EXPIRED.set_logical_path("HQMID");
    void'(add_field( EXPIRED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQ;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.desired)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.actual)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQ = new("IRQ", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_irq0.status[31:0]"});
    IRQ.set_powerwell("vcccfn_gated");
    IRQ.set_rand_mode(0);
   IRQ.set_reset_signame("hqm_inp_gated_rst_n");
    IRQ.set_logical_path("HQMID");
    void'(add_field( IRQ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQ;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.desired)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.actual)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQ = new("IRQ", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_irq1.status[31:0]"});
    IRQ.set_powerwell("vcccfn_gated");
    IRQ.set_rand_mode(0);
   IRQ.set_reset_signame("hqm_inp_gated_rst_n");
    IRQ.set_logical_path("HQMID");
    void'(add_field( IRQ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RUN_TIMER;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RUN_TIMER, RUN_TIMER.desired)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RUN_TIMER, RUN_TIMER.actual)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RUN_TIMER = new("RUN_TIMER", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_run_timer0.status[31:0]"});
    RUN_TIMER.set_powerwell("vcccfn_gated");
    RUN_TIMER.set_rand_mode(0);
   RUN_TIMER.set_reset_signame("hqm_inp_gated_rst_n");
    RUN_TIMER.set_logical_path("HQMID");
    void'(add_field( RUN_TIMER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RUN_TIMER;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RUN_TIMER, RUN_TIMER.desired)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RUN_TIMER, RUN_TIMER.actual)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RUN_TIMER = new("RUN_TIMER", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_run_timer1.status[31:0]"});
    RUN_TIMER.set_powerwell("vcccfn_gated");
    RUN_TIMER.set_rand_mode(0);
   RUN_TIMER.set_reset_signame("hqm_inp_gated_rst_n");
    RUN_TIMER.set_logical_path("HQMID");
    void'(add_field( RUN_TIMER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field URGENT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(URGENT, URGENT.desired)
     `RAL_FIELD_CP_16(URGENT, URGENT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(URGENT, URGENT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(URGENT, URGENT.actual)
     `RAL_FIELD_CP_16(URGENT, URGENT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(URGENT, URGENT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    URGENT = new("URGENT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_urgent0.status[31:0]"});
    URGENT.set_powerwell("vcccfn_gated");
    URGENT.set_rand_mode(0);
   URGENT.set_reset_signame("hqm_inp_gated_rst_n");
    URGENT.set_logical_path("HQMID");
    void'(add_field( URGENT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field URGENT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(URGENT, URGENT.desired)
     `RAL_FIELD_CP_16(URGENT, URGENT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(URGENT, URGENT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(URGENT, URGENT.actual)
     `RAL_FIELD_CP_16(URGENT, URGENT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(URGENT, URGENT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    URGENT = new("URGENT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_urgent1.status[31:0]"});
    URGENT.set_powerwell("vcccfn_gated");
    URGENT.set_rand_mode(0);
   URGENT.set_reset_signame("hqm_inp_gated_rst_n");
    URGENT.set_logical_path("HQMID");
    void'(add_field( URGENT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAMPLE_INTERVAL;
  sla_ral_field ENB;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAMPLE_INTERVAL, SAMPLE_INTERVAL.desired)
     `RAL_FIELD_CP_8(SAMPLE_INTERVAL, SAMPLE_INTERVAL.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(ENB, ENB.desired)
     `RAL_FIELD_CP_1(ENB, ENB.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_7(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAMPLE_INTERVAL, SAMPLE_INTERVAL.actual)
     `RAL_FIELD_CP_8(SAMPLE_INTERVAL, SAMPLE_INTERVAL.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(ENB, ENB.actual)
     `RAL_FIELD_CP_1(ENB, ENB.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_7(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAMPLE_INTERVAL = new("SAMPLE_INTERVAL", "RW", 8, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_timer_ctl.internal_f[7:0]"});
    SAMPLE_INTERVAL.set_powerwell("vcccfn_gated");
    SAMPLE_INTERVAL.set_rand_mode(0);
   SAMPLE_INTERVAL.set_reset_signame("hqm_inp_gated_rst_n");
    SAMPLE_INTERVAL.set_logical_path("HQMID");
    void'(add_field( SAMPLE_INTERVAL ));

    ENB = new("ENB", "RW", 1, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_timer_ctl.internal_f[8:8]"});
    ENB.set_powerwell("vcccfn_gated");
    ENB.set_rand_mode(0);
   ENB.set_reset_signame("hqm_inp_gated_rst_n");
    ENB.set_logical_path("HQMID");
    void'(add_field( ENB ));

    RSVZ0 = new("RSVZ0", "RW", 23, 9, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_timer_ctl.internal_f[31:9]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_CTL_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_CTL_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WDTO;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WDTO, WDTO.desired)
     `RAL_FIELD_CP_16(WDTO, WDTO.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WDTO, WDTO.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WDTO, WDTO.actual)
     `RAL_FIELD_CP_16(WDTO, WDTO.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WDTO, WDTO.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WDTO = new("WDTO", "RW/1C/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wdto_0.internal_f[31:0]"});
    WDTO.set_powerwell("vcccfn_gated");
    WDTO.set_rand_mode(0);
   WDTO.set_reset_signame("hqm_inp_gated_rst_n");
    WDTO.set_logical_path("HQMID");
    void'(add_field( WDTO ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WDTO;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WDTO, WDTO.desired)
     `RAL_FIELD_CP_16(WDTO, WDTO.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WDTO, WDTO.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WDTO, WDTO.actual)
     `RAL_FIELD_CP_16(WDTO, WDTO.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WDTO, WDTO.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WDTO = new("WDTO", "RW/1C/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wdto_1.internal_f[31:0]"});
    WDTO.set_powerwell("vcccfn_gated");
    WDTO.set_rand_mode(0);
   WDTO.set_reset_signame("hqm_inp_gated_rst_n");
    WDTO.set_logical_path("HQMID");
    void'(add_field( WDTO ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER_STATUS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_STATUS, TIMER_STATUS.desired)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_STATUS, TIMER_STATUS.actual)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER_STATUS = new("TIMER_STATUS", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wdrt_0.status[31:0]"});
    TIMER_STATUS.set_powerwell("vcccfn_gated");
    TIMER_STATUS.set_rand_mode(0);
   TIMER_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER_STATUS.set_logical_path("HQMID");
    void'(add_field( TIMER_STATUS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER_STATUS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_STATUS, TIMER_STATUS.desired)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_STATUS, TIMER_STATUS.actual)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER_STATUS = new("TIMER_STATUS", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wdrt_1.status[31:0]"});
    TIMER_STATUS.set_powerwell("vcccfn_gated");
    TIMER_STATUS.set_rand_mode(0);
   TIMER_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER_STATUS.set_logical_path("HQMID");
    void'(add_field( TIMER_STATUS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WD_DISABLE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_DISABLE, WD_DISABLE.desired)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_DISABLE, WD_DISABLE.actual)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WD_DISABLE = new("WD_DISABLE", "RW/1C/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_disable0.internal_f[31:0]"});
    WD_DISABLE.set_powerwell("vcccfn_gated");
    WD_DISABLE.set_rand_mode(0);
   WD_DISABLE.set_reset_signame("hqm_inp_gated_rst_n");
    WD_DISABLE.set_logical_path("HQMID");
    void'(add_field( WD_DISABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WD_DISABLE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_DISABLE, WD_DISABLE.desired)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_DISABLE, WD_DISABLE.actual)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WD_DISABLE = new("WD_DISABLE", "RW/1C/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_disable1.internal_f[31:0]"});
    WD_DISABLE.set_powerwell("vcccfn_gated");
    WD_DISABLE.set_rand_mode(0);
   WD_DISABLE.set_reset_signame("hqm_inp_gated_rst_n");
    WD_DISABLE.set_logical_path("HQMID");
    void'(add_field( WD_DISABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_WD_ENB_INTERVAL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAMPLE_INTERVAL;
  sla_ral_field ENB;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_ENB_INTERVAL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAMPLE_INTERVAL, SAMPLE_INTERVAL.desired)
     `RAL_FIELD_CP_16(SAMPLE_INTERVAL, SAMPLE_INTERVAL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SAMPLE_INTERVAL, SAMPLE_INTERVAL.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(ENB, ENB.desired)
     `RAL_FIELD_CP_1(ENB, ENB.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_3(RSVZ0, RSVZ0.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAMPLE_INTERVAL, SAMPLE_INTERVAL.actual)
     `RAL_FIELD_CP_16(SAMPLE_INTERVAL, SAMPLE_INTERVAL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SAMPLE_INTERVAL, SAMPLE_INTERVAL.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(ENB, ENB.actual)
     `RAL_FIELD_CP_1(ENB, ENB.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_3(RSVZ0, RSVZ0.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAMPLE_INTERVAL = new("SAMPLE_INTERVAL", "RW", 28, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_enb_interval.internal_f[27:0]"});
    SAMPLE_INTERVAL.set_powerwell("vcccfn_gated");
    SAMPLE_INTERVAL.set_rand_mode(0);
   SAMPLE_INTERVAL.set_reset_signame("hqm_inp_gated_rst_n");
    SAMPLE_INTERVAL.set_logical_path("HQMID");
    void'(add_field( SAMPLE_INTERVAL ));

    ENB = new("ENB", "RW", 1, 28, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_enb_interval.internal_f[28:28]"});
    ENB.set_powerwell("vcccfn_gated");
    ENB.set_rand_mode(0);
   ENB.set_reset_signame("hqm_inp_gated_rst_n");
    ENB.set_logical_path("HQMID");
    void'(add_field( ENB ));

    RSVZ0 = new("RSVZ0", "RW", 3, 29, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_enb_interval.internal_f[31:29]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_ENB_INTERVAL_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_WD_ENB_INTERVAL_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQ;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.desired)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.actual)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQ = new("IRQ", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_irq0.status[31:0]"});
    IRQ.set_powerwell("vcccfn_gated");
    IRQ.set_rand_mode(0);
   IRQ.set_reset_signame("hqm_inp_gated_rst_n");
    IRQ.set_logical_path("HQMID");
    void'(add_field( IRQ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQ;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.desired)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.actual)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQ = new("IRQ", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_irq1.status[31:0]"});
    IRQ.set_powerwell("vcccfn_gated");
    IRQ.set_rand_mode(0);
   IRQ.set_reset_signame("hqm_inp_gated_rst_n");
    IRQ.set_logical_path("HQMID");
    void'(add_field( IRQ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIR_WD_THRESHOLD_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WD_THRESHOLD;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_THRESHOLD_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_THRESHOLD, WD_THRESHOLD.desired)
     `RAL_FIELD_CP_8(WD_THRESHOLD, WD_THRESHOLD.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_THRESHOLD, WD_THRESHOLD.actual)
     `RAL_FIELD_CP_8(WD_THRESHOLD, WD_THRESHOLD.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WD_THRESHOLD = new("WD_THRESHOLD", "RW", 8, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_threshold.internal_f[7:0]"});
    WD_THRESHOLD.set_powerwell("vcccfn_gated");
    WD_THRESHOLD.set_rand_mode(0);
   WD_THRESHOLD.set_reset_signame("hqm_inp_gated_rst_n");
    WD_THRESHOLD.set_logical_path("HQMID");
    void'(add_field( WD_THRESHOLD ));

    RSVZ0 = new("RSVZ0", "RW", 24, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_threshold.internal_f[31:8]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIR_WD_THRESHOLD_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIR_WD_THRESHOLD_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ARMED;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARMED, ARMED.desired)
     `RAL_FIELD_CP_16(ARMED, ARMED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ARMED, ARMED.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARMED, ARMED.actual)
     `RAL_FIELD_CP_16(ARMED, ARMED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ARMED, ARMED.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ARMED = new("ARMED", "RW/1S/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_armed0.internal_f[31:0]"});
    ARMED.set_powerwell("vcccfn_gated");
    ARMED.set_rand_mode(0);
   ARMED.set_reset_signame("hqm_inp_gated_rst_n");
    ARMED.set_logical_path("HQMID");
    void'(add_field( ARMED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ARMED;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARMED, ARMED.desired)
     `RAL_FIELD_CP_16(ARMED, ARMED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ARMED, ARMED.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ARMED, ARMED.actual)
     `RAL_FIELD_CP_16(ARMED, ARMED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ARMED, ARMED.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ARMED = new("ARMED", "RW/1S/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_armed1.internal_f[31:0]"});
    ARMED.set_powerwell("vcccfn_gated");
    ARMED.set_rand_mode(0);
   ARMED.set_reset_signame("hqm_inp_gated_rst_n");
    ARMED.set_logical_path("HQMID");
    void'(add_field( ARMED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field EXPIRED;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EXPIRED, EXPIRED.desired)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EXPIRED, EXPIRED.actual)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    EXPIRED = new("EXPIRED", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_expired0.status[31:0]"});
    EXPIRED.set_powerwell("vcccfn_gated");
    EXPIRED.set_rand_mode(0);
   EXPIRED.set_reset_signame("hqm_inp_gated_rst_n");
    EXPIRED.set_logical_path("HQMID");
    void'(add_field( EXPIRED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field EXPIRED;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EXPIRED, EXPIRED.desired)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EXPIRED, EXPIRED.actual)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(EXPIRED, EXPIRED.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    EXPIRED = new("EXPIRED", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_expired1.status[31:0]"});
    EXPIRED.set_powerwell("vcccfn_gated");
    EXPIRED.set_rand_mode(0);
   EXPIRED.set_reset_signame("hqm_inp_gated_rst_n");
    EXPIRED.set_logical_path("HQMID");
    void'(add_field( EXPIRED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQ;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.desired)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.actual)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQ = new("IRQ", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_irq0.status[31:0]"});
    IRQ.set_powerwell("vcccfn_gated");
    IRQ.set_rand_mode(0);
   IRQ.set_reset_signame("hqm_inp_gated_rst_n");
    IRQ.set_logical_path("HQMID");
    void'(add_field( IRQ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQ;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.desired)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.actual)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQ = new("IRQ", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_irq1.status[31:0]"});
    IRQ.set_powerwell("vcccfn_gated");
    IRQ.set_rand_mode(0);
   IRQ.set_reset_signame("hqm_inp_gated_rst_n");
    IRQ.set_logical_path("HQMID");
    void'(add_field( IRQ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RUN_TIMER;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RUN_TIMER, RUN_TIMER.desired)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RUN_TIMER, RUN_TIMER.actual)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RUN_TIMER = new("RUN_TIMER", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_run_timer0.status[31:0]"});
    RUN_TIMER.set_powerwell("vcccfn_gated");
    RUN_TIMER.set_rand_mode(0);
   RUN_TIMER.set_reset_signame("hqm_inp_gated_rst_n");
    RUN_TIMER.set_logical_path("HQMID");
    void'(add_field( RUN_TIMER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RUN_TIMER;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RUN_TIMER, RUN_TIMER.desired)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RUN_TIMER, RUN_TIMER.actual)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RUN_TIMER, RUN_TIMER.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RUN_TIMER = new("RUN_TIMER", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_run_timer1.status[31:0]"});
    RUN_TIMER.set_powerwell("vcccfn_gated");
    RUN_TIMER.set_rand_mode(0);
   RUN_TIMER.set_reset_signame("hqm_inp_gated_rst_n");
    RUN_TIMER.set_logical_path("HQMID");
    void'(add_field( RUN_TIMER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field URGENT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(URGENT, URGENT.desired)
     `RAL_FIELD_CP_16(URGENT, URGENT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(URGENT, URGENT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(URGENT, URGENT.actual)
     `RAL_FIELD_CP_16(URGENT, URGENT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(URGENT, URGENT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    URGENT = new("URGENT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_urgent0.status[31:0]"});
    URGENT.set_powerwell("vcccfn_gated");
    URGENT.set_rand_mode(0);
   URGENT.set_reset_signame("hqm_inp_gated_rst_n");
    URGENT.set_logical_path("HQMID");
    void'(add_field( URGENT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field URGENT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(URGENT, URGENT.desired)
     `RAL_FIELD_CP_16(URGENT, URGENT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(URGENT, URGENT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(URGENT, URGENT.actual)
     `RAL_FIELD_CP_16(URGENT, URGENT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(URGENT, URGENT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    URGENT = new("URGENT", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_urgent1.status[31:0]"});
    URGENT.set_powerwell("vcccfn_gated");
    URGENT.set_rand_mode(0);
   URGENT.set_reset_signame("hqm_inp_gated_rst_n");
    URGENT.set_logical_path("HQMID");
    void'(add_field( URGENT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAMPLE_INTERVAL;
  sla_ral_field ENB;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAMPLE_INTERVAL, SAMPLE_INTERVAL.desired)
     `RAL_FIELD_CP_8(SAMPLE_INTERVAL, SAMPLE_INTERVAL.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(ENB, ENB.desired)
     `RAL_FIELD_CP_1(ENB, ENB.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_7(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAMPLE_INTERVAL, SAMPLE_INTERVAL.actual)
     `RAL_FIELD_CP_8(SAMPLE_INTERVAL, SAMPLE_INTERVAL.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(ENB, ENB.actual)
     `RAL_FIELD_CP_1(ENB, ENB.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_7(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAMPLE_INTERVAL = new("SAMPLE_INTERVAL", "RW", 8, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_timer_ctl.internal_f[7:0]"});
    SAMPLE_INTERVAL.set_powerwell("vcccfn_gated");
    SAMPLE_INTERVAL.set_rand_mode(0);
   SAMPLE_INTERVAL.set_reset_signame("hqm_inp_gated_rst_n");
    SAMPLE_INTERVAL.set_logical_path("HQMID");
    void'(add_field( SAMPLE_INTERVAL ));

    ENB = new("ENB", "RW", 1, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_timer_ctl.internal_f[8:8]"});
    ENB.set_powerwell("vcccfn_gated");
    ENB.set_rand_mode(0);
   ENB.set_reset_signame("hqm_inp_gated_rst_n");
    ENB.set_logical_path("HQMID");
    void'(add_field( ENB ));

    RSVZ0 = new("RSVZ0", "RW", 23, 9, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_timer_ctl.internal_f[31:9]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_CTL_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_CTL_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WDTO;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WDTO, WDTO.desired)
     `RAL_FIELD_CP_16(WDTO, WDTO.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WDTO, WDTO.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WDTO, WDTO.actual)
     `RAL_FIELD_CP_16(WDTO, WDTO.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WDTO, WDTO.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WDTO = new("WDTO", "RW/1C/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wdto_0.internal_f[31:0]"});
    WDTO.set_powerwell("vcccfn_gated");
    WDTO.set_rand_mode(0);
   WDTO.set_reset_signame("hqm_inp_gated_rst_n");
    WDTO.set_logical_path("HQMID");
    void'(add_field( WDTO ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WDTO;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WDTO, WDTO.desired)
     `RAL_FIELD_CP_16(WDTO, WDTO.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WDTO, WDTO.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WDTO, WDTO.actual)
     `RAL_FIELD_CP_16(WDTO, WDTO.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WDTO, WDTO.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WDTO = new("WDTO", "RW/1C/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wdto_1.internal_f[31:0]"});
    WDTO.set_powerwell("vcccfn_gated");
    WDTO.set_rand_mode(0);
   WDTO.set_reset_signame("hqm_inp_gated_rst_n");
    WDTO.set_logical_path("HQMID");
    void'(add_field( WDTO ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER_STATUS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_STATUS, TIMER_STATUS.desired)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_STATUS, TIMER_STATUS.actual)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER_STATUS = new("TIMER_STATUS", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wdrt_0.status[31:0]"});
    TIMER_STATUS.set_powerwell("vcccfn_gated");
    TIMER_STATUS.set_rand_mode(0);
   TIMER_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER_STATUS.set_logical_path("HQMID");
    void'(add_field( TIMER_STATUS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER_STATUS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_STATUS, TIMER_STATUS.desired)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_STATUS, TIMER_STATUS.actual)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_STATUS, TIMER_STATUS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER_STATUS = new("TIMER_STATUS", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wdrt_1.status[31:0]"});
    TIMER_STATUS.set_powerwell("vcccfn_gated");
    TIMER_STATUS.set_rand_mode(0);
   TIMER_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER_STATUS.set_logical_path("HQMID");
    void'(add_field( TIMER_STATUS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WD_DISABLE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_DISABLE, WD_DISABLE.desired)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_DISABLE, WD_DISABLE.actual)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WD_DISABLE = new("WD_DISABLE", "RW/1C/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_disable0.internal_f[31:0]"});
    WD_DISABLE.set_powerwell("vcccfn_gated");
    WD_DISABLE.set_rand_mode(0);
   WD_DISABLE.set_reset_signame("hqm_inp_gated_rst_n");
    WD_DISABLE.set_logical_path("HQMID");
    void'(add_field( WD_DISABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WD_DISABLE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_DISABLE, WD_DISABLE.desired)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_DISABLE, WD_DISABLE.actual)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(WD_DISABLE, WD_DISABLE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WD_DISABLE = new("WD_DISABLE", "RW/1C/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_disable1.internal_f[31:0]"});
    WD_DISABLE.set_powerwell("vcccfn_gated");
    WD_DISABLE.set_rand_mode(0);
   WD_DISABLE.set_reset_signame("hqm_inp_gated_rst_n");
    WD_DISABLE.set_logical_path("HQMID");
    void'(add_field( WD_DISABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_WD_ENB_INTERVAL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAMPLE_INTERVAL;
  sla_ral_field ENB;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_ENB_INTERVAL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAMPLE_INTERVAL, SAMPLE_INTERVAL.desired)
     `RAL_FIELD_CP_16(SAMPLE_INTERVAL, SAMPLE_INTERVAL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SAMPLE_INTERVAL, SAMPLE_INTERVAL.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(ENB, ENB.desired)
     `RAL_FIELD_CP_1(ENB, ENB.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_3(RSVZ0, RSVZ0.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAMPLE_INTERVAL, SAMPLE_INTERVAL.actual)
     `RAL_FIELD_CP_16(SAMPLE_INTERVAL, SAMPLE_INTERVAL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SAMPLE_INTERVAL, SAMPLE_INTERVAL.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(ENB, ENB.actual)
     `RAL_FIELD_CP_1(ENB, ENB.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_3(RSVZ0, RSVZ0.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAMPLE_INTERVAL = new("SAMPLE_INTERVAL", "RW", 28, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_enb_interval.internal_f[27:0]"});
    SAMPLE_INTERVAL.set_powerwell("vcccfn_gated");
    SAMPLE_INTERVAL.set_rand_mode(0);
   SAMPLE_INTERVAL.set_reset_signame("hqm_inp_gated_rst_n");
    SAMPLE_INTERVAL.set_logical_path("HQMID");
    void'(add_field( SAMPLE_INTERVAL ));

    ENB = new("ENB", "RW", 1, 28, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_enb_interval.internal_f[28:28]"});
    ENB.set_powerwell("vcccfn_gated");
    ENB.set_rand_mode(0);
   ENB.set_reset_signame("hqm_inp_gated_rst_n");
    ENB.set_logical_path("HQMID");
    void'(add_field( ENB ));

    RSVZ0 = new("RSVZ0", "RW", 3, 29, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_enb_interval.internal_f[31:29]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_ENB_INTERVAL_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_WD_ENB_INTERVAL_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQ;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.desired)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.actual)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQ = new("IRQ", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_irq0.status[31:0]"});
    IRQ.set_powerwell("vcccfn_gated");
    IRQ.set_rand_mode(0);
   IRQ.set_reset_signame("hqm_inp_gated_rst_n");
    IRQ.set_logical_path("HQMID");
    void'(add_field( IRQ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQ;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.desired)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQ, IRQ.actual)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(IRQ, IRQ.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQ = new("IRQ", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_irq1.status[31:0]"});
    IRQ.set_powerwell("vcccfn_gated");
    IRQ.set_rand_mode(0);
   IRQ.set_reset_signame("hqm_inp_gated_rst_n");
    IRQ.set_logical_path("HQMID");
    void'(add_field( IRQ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_LDB_WD_THRESHOLD_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field WD_THRESHOLD;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_THRESHOLD_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_THRESHOLD, WD_THRESHOLD.desired)
     `RAL_FIELD_CP_8(WD_THRESHOLD, WD_THRESHOLD.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(WD_THRESHOLD, WD_THRESHOLD.actual)
     `RAL_FIELD_CP_8(WD_THRESHOLD, WD_THRESHOLD.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    WD_THRESHOLD = new("WD_THRESHOLD", "RW", 8, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_threshold.internal_f[7:0]"});
    WD_THRESHOLD.set_powerwell("vcccfn_gated");
    WD_THRESHOLD.set_rand_mode(0);
   WD_THRESHOLD.set_reset_signame("hqm_inp_gated_rst_n");
    WD_THRESHOLD.set_logical_path("HQMID");
    void'(add_field( WD_THRESHOLD ));

    RSVZ0 = new("RSVZ0", "RW", 24, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_threshold.internal_f[31:8]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_LDB_WD_THRESHOLD_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_LDB_WD_THRESHOLD_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_RETN_ZERO_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RETURN_ZERO;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_RETN_ZERO_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RETURN_ZERO, RETURN_ZERO.desired)
     `RAL_FIELD_CP_16(RETURN_ZERO, RETURN_ZERO.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RETURN_ZERO, RETURN_ZERO.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RETURN_ZERO, RETURN_ZERO.actual)
     `RAL_FIELD_CP_16(RETURN_ZERO, RETURN_ZERO.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RETURN_ZERO, RETURN_ZERO.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RETURN_ZERO = new("RETURN_ZERO", "RO", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_retn_zero.status[31:0]"});
    RETURN_ZERO.set_powerwell("vcccfn_gated");
    RETURN_ZERO.set_rand_mode(0);
   RETURN_ZERO.set_reset_signame("hqm_inp_gated_rst_n");
    RETURN_ZERO.set_logical_path("HQMID");
    void'(add_field( RETURN_ZERO ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_RETN_ZERO_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_RETN_ZERO_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_SYNDROME_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDDATA;
  sla_ral_field SYNDTYPE;
  sla_ral_field SYNDVALID;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_SYNDROME_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.desired)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.desired)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.desired, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.desired)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.actual)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.actual)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.actual, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.actual)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDDATA = new("SYNDDATA", "RO/V", 28, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
    SYNDDATA.set_powerwell("vcccfn_gated");
    SYNDDATA.set_rand_mode(0);
   SYNDDATA.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDDATA.set_logical_path("HQMID");
    void'(add_field( SYNDDATA ));

    SYNDTYPE = new("SYNDTYPE", "RO/V", 3, 28, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
    SYNDTYPE.set_powerwell("vcccfn_gated");
    SYNDTYPE.set_rand_mode(0);
   SYNDTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDTYPE.set_logical_path("HQMID");
    void'(add_field( SYNDTYPE ));

    SYNDVALID = new("SYNDVALID", "RW/1C/V", 1, 31, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[31:31]"});
    SYNDVALID.set_powerwell("vcccfn_gated");
    SYNDVALID.set_rand_mode(0);
   SYNDVALID.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDVALID.set_logical_path("HQMID");
    void'(add_field( SYNDVALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_SYNDROME_00_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_SYNDROME_00_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_UNIT_VERSION_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNIT_VERSION;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_UNIT_VERSION_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.desired)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.actual)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNIT_VERSION = new("UNIT_VERSION", "RO", 8, 24, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_version.status[31:24]"});
    UNIT_VERSION.set_powerwell("vcccfn_gated");
    UNIT_VERSION.set_rand_mode(0);
   UNIT_VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT_VERSION.set_logical_path("HQMID");
    void'(add_field( UNIT_VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_UNIT_VERSION_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_UNIT_VERSION_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.desired)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.actual)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE0 = new("COMPARE0", "RW/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_comp0_q[31:0]"});
    COMPARE0.set_powerwell("vcccfn_gated");
    COMPARE0.set_rand_mode(0);
   COMPARE0.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE0.set_logical_path("HQMID");
    void'(add_field( COMPARE0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE1;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.desired)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.actual)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE1 = new("COMPARE1", "RW/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_comp1_q[31:0]"});
    COMPARE1.set_powerwell("vcccfn_gated");
    COMPARE1.set_rand_mode(0);
   COMPARE1.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE1.set_logical_path("HQMID");
    void'(add_field( COMPARE1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SMON_ENABLE;
  sla_ral_field SMON_0TRIGGER_ENABLE;
  sla_ral_field RSVZ0;
  sla_ral_field SMON0_FUNCTION;
  sla_ral_field SMON0_FUNCTION_COMPARE;
  sla_ral_field SMON1_FUNCTION;
  sla_ral_field SMON1_FUNCTION_COMPARE;
  sla_ral_field SMON_MODE;
  sla_ral_field STOPCOUNTEROVFL;
  sla_ral_field INTCOUNTEROVFL;
  sla_ral_field STATCOUNTER0OVFL;
  sla_ral_field STATCOUNTER1OVFL;
  sla_ral_field STOPTIMEROVFL;
  sla_ral_field INTTIMEROVFL;
  sla_ral_field STATTIMEROVFL;
  sla_ral_field RSVZ1;
  sla_ral_field TIMER_PRESCALE;
  sla_ral_field RSVZ2;
  sla_ral_field VERSION;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.desired, 0)
     `RAL_FIELD_CP(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.desired, 0,1)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.desired)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.desired, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.desired)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.desired, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.desired)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.desired)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.desired, 0)
     `RAL_FIELD_CP(VERSION, VERSION.desired)
     `RAL_FIELD_CP_2(VERSION, VERSION.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.actual, 0)
     `RAL_FIELD_CP(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.actual, 0,1)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.actual)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.actual, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.actual)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.actual, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.actual)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.actual)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.actual, 0)
     `RAL_FIELD_CP(VERSION, VERSION.actual)
     `RAL_FIELD_CP_2(VERSION, VERSION.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SMON_ENABLE = new("SMON_ENABLE", "RW/V", 1, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[0:0]"});
    SMON_ENABLE.set_powerwell("vcccfn_gated");
    SMON_ENABLE.set_rand_mode(0);
   SMON_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_ENABLE.set_logical_path("HQMID");
    void'(add_field( SMON_ENABLE ));

    SMON_0TRIGGER_ENABLE = new("SMON_0TRIGGER_ENABLE", "RW/V", 1, 1, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[1:1]"});
    SMON_0TRIGGER_ENABLE.set_powerwell("vcccfn_gated");
    SMON_0TRIGGER_ENABLE.set_rand_mode(0);
   SMON_0TRIGGER_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_0TRIGGER_ENABLE.set_logical_path("HQMID");
    void'(add_field( SMON_0TRIGGER_ENABLE ));

    RSVZ0 = new("RSVZ0", "RW/V", 2, 2, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[3:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    SMON0_FUNCTION = new("SMON0_FUNCTION", "RW/V", 3, 4, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[6:4]"});
    SMON0_FUNCTION.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION.set_rand_mode(0);
   SMON0_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION ));

    SMON0_FUNCTION_COMPARE = new("SMON0_FUNCTION_COMPARE", "RW/V", 1, 7, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[7:7]"});
    SMON0_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION_COMPARE.set_rand_mode(0);
   SMON0_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION_COMPARE ));

    SMON1_FUNCTION = new("SMON1_FUNCTION", "RW/V", 3, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[10:8]"});
    SMON1_FUNCTION.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION.set_rand_mode(0);
   SMON1_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION ));

    SMON1_FUNCTION_COMPARE = new("SMON1_FUNCTION_COMPARE", "RW/V", 1, 11, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[11:11]"});
    SMON1_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION_COMPARE.set_rand_mode(0);
   SMON1_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION_COMPARE ));

    SMON_MODE = new("SMON_MODE", "RW/V", 4, 12, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[15:12]"});
    SMON_MODE.set_powerwell("vcccfn_gated");
    SMON_MODE.set_rand_mode(0);
   SMON_MODE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_MODE.set_logical_path("HQMID");
    void'(add_field( SMON_MODE ));

    STOPCOUNTEROVFL = new("STOPCOUNTEROVFL", "RW/V", 1, 16, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[16:16]"});
    STOPCOUNTEROVFL.set_powerwell("vcccfn_gated");
    STOPCOUNTEROVFL.set_rand_mode(0);
   STOPCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPCOUNTEROVFL ));

    INTCOUNTEROVFL = new("INTCOUNTEROVFL", "RW/V", 1, 17, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[17:17]"});
    INTCOUNTEROVFL.set_powerwell("vcccfn_gated");
    INTCOUNTEROVFL.set_rand_mode(0);
   INTCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( INTCOUNTEROVFL ));

    STATCOUNTER0OVFL = new("STATCOUNTER0OVFL", "RW/V", 1, 18, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[18:18]"});
    STATCOUNTER0OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER0OVFL.set_rand_mode(0);
   STATCOUNTER0OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER0OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER0OVFL ));

    STATCOUNTER1OVFL = new("STATCOUNTER1OVFL", "RW/V", 1, 19, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[19:19]"});
    STATCOUNTER1OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER1OVFL.set_rand_mode(0);
   STATCOUNTER1OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER1OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER1OVFL ));

    STOPTIMEROVFL = new("STOPTIMEROVFL", "RW/V", 1, 20, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[20:20]"});
    STOPTIMEROVFL.set_powerwell("vcccfn_gated");
    STOPTIMEROVFL.set_rand_mode(0);
   STOPTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPTIMEROVFL ));

    INTTIMEROVFL = new("INTTIMEROVFL", "RW/V", 1, 21, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[21:21]"});
    INTTIMEROVFL.set_powerwell("vcccfn_gated");
    INTTIMEROVFL.set_rand_mode(0);
   INTTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( INTTIMEROVFL ));

    STATTIMEROVFL = new("STATTIMEROVFL", "RW/V", 1, 22, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[22:22]"});
    STATTIMEROVFL.set_powerwell("vcccfn_gated");
    STATTIMEROVFL.set_rand_mode(0);
   STATTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STATTIMEROVFL ));

    RSVZ1 = new("RSVZ1", "RW/V", 1, 23, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[23:23]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    TIMER_PRESCALE = new("TIMER_PRESCALE", "RW/V", 5, 24, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[28:24]"});
    TIMER_PRESCALE.set_powerwell("vcccfn_gated");
    TIMER_PRESCALE.set_rand_mode(0);
   TIMER_PRESCALE.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER_PRESCALE.set_logical_path("HQMID");
    void'(add_field( TIMER_PRESCALE ));

    RSVZ2 = new("RSVZ2", "RW/V", 1, 29, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[29:29]"});
    RSVZ2.set_powerwell("vcccfn_gated");
    RSVZ2.set_rand_mode(0);
   RSVZ2.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ2.set_logical_path("HQMID");
    void'(add_field( RSVZ2 ));

    VERSION = new("VERSION", "RO", 2, 30, {"NoSignal"});
    VERSION.set_powerwell("vcccfn_gated");
    VERSION.set_rand_mode(0);
   VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE0;
  sla_ral_field MODE1;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.desired)
     `RAL_FIELD_CP_8(MODE0, MODE0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.desired)
     `RAL_FIELD_CP_8(MODE1, MODE1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.actual)
     `RAL_FIELD_CP_8(MODE0, MODE0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.actual)
     `RAL_FIELD_CP_8(MODE1, MODE1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE0 = new("MODE0", "RW/V", 8, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg1_q[7:0]"});
    MODE0.set_powerwell("vcccfn_gated");
    MODE0.set_rand_mode(0);
   MODE0.set_reset_signame("hqm_inp_gated_rst_n");
    MODE0.set_logical_path("HQMID");
    void'(add_field( MODE0 ));

    MODE1 = new("MODE1", "RW/V", 8, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg1_q[15:8]"});
    MODE1.set_powerwell("vcccfn_gated");
    MODE1.set_rand_mode(0);
   MODE1.set_reset_signame("hqm_inp_gated_rst_n");
    MODE1.set_logical_path("HQMID");
    void'(add_field( MODE1 ));

    RSVZ0 = new("RSVZ0", "RW", 16, 16, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg1_q[31:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.desired)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.actual)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER0 = new("COUNTER0", "RW/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cnt0_q[31:0]"});
    COUNTER0.set_powerwell("vcccfn_gated");
    COUNTER0.set_rand_mode(0);
   COUNTER0.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER0.set_logical_path("HQMID");
    void'(add_field( COUNTER0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER1;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.desired)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.actual)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER1 = new("COUNTER1", "RW/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cnt1_q[31:0]"});
    COUNTER1.set_powerwell("vcccfn_gated");
    COUNTER1.set_rand_mode(0);
   COUNTER1.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER1.set_logical_path("HQMID");
    void'(add_field( COUNTER1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_MAXIMUM_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MAXVALUE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_MAXIMUM_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.desired)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.actual)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MAXVALUE = new("MAXVALUE", "RW/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_maxval_q[31:0]"});
    MAXVALUE.set_powerwell("vcccfn_gated");
    MAXVALUE.set_rand_mode(0);
   MAXVALUE.set_reset_signame("hqm_inp_gated_rst_n");
    MAXVALUE.set_logical_path("HQMID");
    void'(add_field( MAXVALUE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_MAXIMUM_TIMER_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_MAXIMUM_TIMER_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER, TIMER.desired)
     `RAL_FIELD_CP_16(TIMER, TIMER.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER, TIMER.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER, TIMER.actual)
     `RAL_FIELD_CP_16(TIMER, TIMER.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER, TIMER.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER = new("TIMER", "RW/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_timer_q[31:0]"});
    TIMER.set_powerwell("vcccfn_gated");
    TIMER.set_rand_mode(0);
   TIMER.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER.set_logical_path("HQMID");
    void'(add_field( TIMER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_TIMER_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_TIMER_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CFG_RX_FIFO_STATUS_EMPTY;
  sla_ral_field CFG_RX_FIFO_STATUS_AFULL;
  sla_ral_field AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY;
  sla_ral_field AQED_CHP_SCH_RX_SYNC_STATUS_AFULL;
  sla_ral_field STATUS_NOT_USED_BIT_4;
  sla_ral_field STATUS_NOT_USED_BIT_5;
  sla_ral_field QED_CHP_SCH_RX_SYNC_STATUS_EMPTY;
  sla_ral_field QED_CHP_SCH_RX_SYNC_STATUS_AFULL;
  sla_ral_field QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY;
  sla_ral_field QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL;
  sla_ral_field STATUS_NOT_USE_BIT_10;
  sla_ral_field STATUS_NOT_USE_BIT_11;
  sla_ral_field HCW_ENQ_W_RX_SYNC_STATUS_EMPTY;
  sla_ral_field HCW_ENQ_W_RX_SYNC_STATUS_AFULL;
  sla_ral_field FIFO_OUTBOUND_HCW_STATUS_EMPTY;
  sla_ral_field FIFO_OUTBOUND_HCW_STATUS_AFULL;
  sla_ral_field FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY;
  sla_ral_field FIFO_CHP_LSP_AP_CMP_STATUS_AFULL;
  sla_ral_field FIFO_CHP_LSP_TOK_STATUS_EMPTY;
  sla_ral_field FIFO_CHP_LSP_TOK_STATUS_AFULL;
  sla_ral_field FIFO_CHP_ROP_HCW_STATUS_EMPTY;
  sla_ral_field FIFO_CHP_ROP_HCW_STATUS_AFULL;
  sla_ral_field FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY;
  sla_ral_field FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL;
  sla_ral_field FREELIST_EMPTY;
  sla_ral_field FREELIST_FULL;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFG_RX_FIFO_STATUS_EMPTY, CFG_RX_FIFO_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(CFG_RX_FIFO_STATUS_EMPTY, CFG_RX_FIFO_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(CFG_RX_FIFO_STATUS_AFULL, CFG_RX_FIFO_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(CFG_RX_FIFO_STATUS_AFULL, CFG_RX_FIFO_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY, AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY, AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(AQED_CHP_SCH_RX_SYNC_STATUS_AFULL, AQED_CHP_SCH_RX_SYNC_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(AQED_CHP_SCH_RX_SYNC_STATUS_AFULL, AQED_CHP_SCH_RX_SYNC_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(STATUS_NOT_USED_BIT_4, STATUS_NOT_USED_BIT_4.desired)
     `RAL_FIELD_CP_1(STATUS_NOT_USED_BIT_4, STATUS_NOT_USED_BIT_4.desired, 0)
     `RAL_FIELD_CP(STATUS_NOT_USED_BIT_5, STATUS_NOT_USED_BIT_5.desired)
     `RAL_FIELD_CP_1(STATUS_NOT_USED_BIT_5, STATUS_NOT_USED_BIT_5.desired, 0)
     `RAL_FIELD_CP(QED_CHP_SCH_RX_SYNC_STATUS_EMPTY, QED_CHP_SCH_RX_SYNC_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(QED_CHP_SCH_RX_SYNC_STATUS_EMPTY, QED_CHP_SCH_RX_SYNC_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(QED_CHP_SCH_RX_SYNC_STATUS_AFULL, QED_CHP_SCH_RX_SYNC_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(QED_CHP_SCH_RX_SYNC_STATUS_AFULL, QED_CHP_SCH_RX_SYNC_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY, QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY, QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL, QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL, QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(STATUS_NOT_USE_BIT_10, STATUS_NOT_USE_BIT_10.desired)
     `RAL_FIELD_CP_1(STATUS_NOT_USE_BIT_10, STATUS_NOT_USE_BIT_10.desired, 0)
     `RAL_FIELD_CP(STATUS_NOT_USE_BIT_11, STATUS_NOT_USE_BIT_11.desired)
     `RAL_FIELD_CP_1(STATUS_NOT_USE_BIT_11, STATUS_NOT_USE_BIT_11.desired, 0)
     `RAL_FIELD_CP(HCW_ENQ_W_RX_SYNC_STATUS_EMPTY, HCW_ENQ_W_RX_SYNC_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(HCW_ENQ_W_RX_SYNC_STATUS_EMPTY, HCW_ENQ_W_RX_SYNC_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(HCW_ENQ_W_RX_SYNC_STATUS_AFULL, HCW_ENQ_W_RX_SYNC_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(HCW_ENQ_W_RX_SYNC_STATUS_AFULL, HCW_ENQ_W_RX_SYNC_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_OUTBOUND_HCW_STATUS_EMPTY, FIFO_OUTBOUND_HCW_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_OUTBOUND_HCW_STATUS_EMPTY, FIFO_OUTBOUND_HCW_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_OUTBOUND_HCW_STATUS_AFULL, FIFO_OUTBOUND_HCW_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_OUTBOUND_HCW_STATUS_AFULL, FIFO_OUTBOUND_HCW_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY, FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY, FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_CHP_LSP_AP_CMP_STATUS_AFULL, FIFO_CHP_LSP_AP_CMP_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_CHP_LSP_AP_CMP_STATUS_AFULL, FIFO_CHP_LSP_AP_CMP_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_CHP_LSP_TOK_STATUS_EMPTY, FIFO_CHP_LSP_TOK_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_CHP_LSP_TOK_STATUS_EMPTY, FIFO_CHP_LSP_TOK_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_CHP_LSP_TOK_STATUS_AFULL, FIFO_CHP_LSP_TOK_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_CHP_LSP_TOK_STATUS_AFULL, FIFO_CHP_LSP_TOK_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_CHP_ROP_HCW_STATUS_EMPTY, FIFO_CHP_ROP_HCW_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_CHP_ROP_HCW_STATUS_EMPTY, FIFO_CHP_ROP_HCW_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_CHP_ROP_HCW_STATUS_AFULL, FIFO_CHP_ROP_HCW_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_CHP_ROP_HCW_STATUS_AFULL, FIFO_CHP_ROP_HCW_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY, FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY, FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL, FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL, FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(FREELIST_EMPTY, FREELIST_EMPTY.desired)
     `RAL_FIELD_CP_1(FREELIST_EMPTY, FREELIST_EMPTY.desired, 0)
     `RAL_FIELD_CP(FREELIST_FULL, FREELIST_FULL.desired)
     `RAL_FIELD_CP_1(FREELIST_FULL, FREELIST_FULL.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFG_RX_FIFO_STATUS_EMPTY, CFG_RX_FIFO_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(CFG_RX_FIFO_STATUS_EMPTY, CFG_RX_FIFO_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(CFG_RX_FIFO_STATUS_AFULL, CFG_RX_FIFO_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(CFG_RX_FIFO_STATUS_AFULL, CFG_RX_FIFO_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY, AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY, AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(AQED_CHP_SCH_RX_SYNC_STATUS_AFULL, AQED_CHP_SCH_RX_SYNC_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(AQED_CHP_SCH_RX_SYNC_STATUS_AFULL, AQED_CHP_SCH_RX_SYNC_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(STATUS_NOT_USED_BIT_4, STATUS_NOT_USED_BIT_4.actual)
     `RAL_FIELD_CP_1(STATUS_NOT_USED_BIT_4, STATUS_NOT_USED_BIT_4.actual, 0)
     `RAL_FIELD_CP(STATUS_NOT_USED_BIT_5, STATUS_NOT_USED_BIT_5.actual)
     `RAL_FIELD_CP_1(STATUS_NOT_USED_BIT_5, STATUS_NOT_USED_BIT_5.actual, 0)
     `RAL_FIELD_CP(QED_CHP_SCH_RX_SYNC_STATUS_EMPTY, QED_CHP_SCH_RX_SYNC_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(QED_CHP_SCH_RX_SYNC_STATUS_EMPTY, QED_CHP_SCH_RX_SYNC_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(QED_CHP_SCH_RX_SYNC_STATUS_AFULL, QED_CHP_SCH_RX_SYNC_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(QED_CHP_SCH_RX_SYNC_STATUS_AFULL, QED_CHP_SCH_RX_SYNC_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY, QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY, QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL, QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL, QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(STATUS_NOT_USE_BIT_10, STATUS_NOT_USE_BIT_10.actual)
     `RAL_FIELD_CP_1(STATUS_NOT_USE_BIT_10, STATUS_NOT_USE_BIT_10.actual, 0)
     `RAL_FIELD_CP(STATUS_NOT_USE_BIT_11, STATUS_NOT_USE_BIT_11.actual)
     `RAL_FIELD_CP_1(STATUS_NOT_USE_BIT_11, STATUS_NOT_USE_BIT_11.actual, 0)
     `RAL_FIELD_CP(HCW_ENQ_W_RX_SYNC_STATUS_EMPTY, HCW_ENQ_W_RX_SYNC_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(HCW_ENQ_W_RX_SYNC_STATUS_EMPTY, HCW_ENQ_W_RX_SYNC_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(HCW_ENQ_W_RX_SYNC_STATUS_AFULL, HCW_ENQ_W_RX_SYNC_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(HCW_ENQ_W_RX_SYNC_STATUS_AFULL, HCW_ENQ_W_RX_SYNC_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_OUTBOUND_HCW_STATUS_EMPTY, FIFO_OUTBOUND_HCW_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_OUTBOUND_HCW_STATUS_EMPTY, FIFO_OUTBOUND_HCW_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_OUTBOUND_HCW_STATUS_AFULL, FIFO_OUTBOUND_HCW_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_OUTBOUND_HCW_STATUS_AFULL, FIFO_OUTBOUND_HCW_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY, FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY, FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_CHP_LSP_AP_CMP_STATUS_AFULL, FIFO_CHP_LSP_AP_CMP_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_CHP_LSP_AP_CMP_STATUS_AFULL, FIFO_CHP_LSP_AP_CMP_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_CHP_LSP_TOK_STATUS_EMPTY, FIFO_CHP_LSP_TOK_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_CHP_LSP_TOK_STATUS_EMPTY, FIFO_CHP_LSP_TOK_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_CHP_LSP_TOK_STATUS_AFULL, FIFO_CHP_LSP_TOK_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_CHP_LSP_TOK_STATUS_AFULL, FIFO_CHP_LSP_TOK_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_CHP_ROP_HCW_STATUS_EMPTY, FIFO_CHP_ROP_HCW_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_CHP_ROP_HCW_STATUS_EMPTY, FIFO_CHP_ROP_HCW_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_CHP_ROP_HCW_STATUS_AFULL, FIFO_CHP_ROP_HCW_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_CHP_ROP_HCW_STATUS_AFULL, FIFO_CHP_ROP_HCW_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY, FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY, FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL, FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL, FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(FREELIST_EMPTY, FREELIST_EMPTY.actual)
     `RAL_FIELD_CP_1(FREELIST_EMPTY, FREELIST_EMPTY.actual, 0)
     `RAL_FIELD_CP(FREELIST_FULL, FREELIST_FULL.actual)
     `RAL_FIELD_CP_1(FREELIST_FULL, FREELIST_FULL.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CFG_RX_FIFO_STATUS_EMPTY = new("CFG_RX_FIFO_STATUS_EMPTY", "RO/V", 1, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[0:0]"});
    CFG_RX_FIFO_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    CFG_RX_FIFO_STATUS_EMPTY.set_rand_mode(0);
   CFG_RX_FIFO_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    CFG_RX_FIFO_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( CFG_RX_FIFO_STATUS_EMPTY ));

    CFG_RX_FIFO_STATUS_AFULL = new("CFG_RX_FIFO_STATUS_AFULL", "RO/V", 1, 1, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[1:1]"});
    CFG_RX_FIFO_STATUS_AFULL.set_powerwell("vcccfn_gated");
    CFG_RX_FIFO_STATUS_AFULL.set_rand_mode(0);
   CFG_RX_FIFO_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    CFG_RX_FIFO_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( CFG_RX_FIFO_STATUS_AFULL ));

    AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY = new("AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY", "RO/V", 1, 2, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[2:2]"});
    AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY.set_rand_mode(0);
   AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY ));

    AQED_CHP_SCH_RX_SYNC_STATUS_AFULL = new("AQED_CHP_SCH_RX_SYNC_STATUS_AFULL", "RO/V", 1, 3, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[3:3]"});
    AQED_CHP_SCH_RX_SYNC_STATUS_AFULL.set_powerwell("vcccfn_gated");
    AQED_CHP_SCH_RX_SYNC_STATUS_AFULL.set_rand_mode(0);
   AQED_CHP_SCH_RX_SYNC_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_CHP_SCH_RX_SYNC_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( AQED_CHP_SCH_RX_SYNC_STATUS_AFULL ));

    STATUS_NOT_USED_BIT_4 = new("STATUS_NOT_USED_BIT_4", "RO/V", 1, 4, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[4:4]"});
    STATUS_NOT_USED_BIT_4.set_powerwell("vcccfn_gated");
    STATUS_NOT_USED_BIT_4.set_rand_mode(0);
   STATUS_NOT_USED_BIT_4.set_reset_signame("hqm_inp_gated_rst_n");
    STATUS_NOT_USED_BIT_4.set_logical_path("HQMID");
    void'(add_field( STATUS_NOT_USED_BIT_4 ));

    STATUS_NOT_USED_BIT_5 = new("STATUS_NOT_USED_BIT_5", "RO/V", 1, 5, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[5:5]"});
    STATUS_NOT_USED_BIT_5.set_powerwell("vcccfn_gated");
    STATUS_NOT_USED_BIT_5.set_rand_mode(0);
   STATUS_NOT_USED_BIT_5.set_reset_signame("hqm_inp_gated_rst_n");
    STATUS_NOT_USED_BIT_5.set_logical_path("HQMID");
    void'(add_field( STATUS_NOT_USED_BIT_5 ));

    QED_CHP_SCH_RX_SYNC_STATUS_EMPTY = new("QED_CHP_SCH_RX_SYNC_STATUS_EMPTY", "RO/V", 1, 6, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[6:6]"});
    QED_CHP_SCH_RX_SYNC_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    QED_CHP_SCH_RX_SYNC_STATUS_EMPTY.set_rand_mode(0);
   QED_CHP_SCH_RX_SYNC_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    QED_CHP_SCH_RX_SYNC_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( QED_CHP_SCH_RX_SYNC_STATUS_EMPTY ));

    QED_CHP_SCH_RX_SYNC_STATUS_AFULL = new("QED_CHP_SCH_RX_SYNC_STATUS_AFULL", "RO/V", 1, 7, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[7:7]"});
    QED_CHP_SCH_RX_SYNC_STATUS_AFULL.set_powerwell("vcccfn_gated");
    QED_CHP_SCH_RX_SYNC_STATUS_AFULL.set_rand_mode(0);
   QED_CHP_SCH_RX_SYNC_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    QED_CHP_SCH_RX_SYNC_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( QED_CHP_SCH_RX_SYNC_STATUS_AFULL ));

    QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY = new("QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY", "RO/V", 1, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[8:8]"});
    QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY.set_rand_mode(0);
   QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY ));

    QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL = new("QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL", "RO/V", 1, 9, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[9:9]"});
    QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL.set_powerwell("vcccfn_gated");
    QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL.set_rand_mode(0);
   QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL ));

    STATUS_NOT_USE_BIT_10 = new("STATUS_NOT_USE_BIT_10", "RO/V", 1, 10, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[10:10]"});
    STATUS_NOT_USE_BIT_10.set_powerwell("vcccfn_gated");
    STATUS_NOT_USE_BIT_10.set_rand_mode(0);
   STATUS_NOT_USE_BIT_10.set_reset_signame("hqm_inp_gated_rst_n");
    STATUS_NOT_USE_BIT_10.set_logical_path("HQMID");
    void'(add_field( STATUS_NOT_USE_BIT_10 ));

    STATUS_NOT_USE_BIT_11 = new("STATUS_NOT_USE_BIT_11", "RO/V", 1, 11, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[11:11]"});
    STATUS_NOT_USE_BIT_11.set_powerwell("vcccfn_gated");
    STATUS_NOT_USE_BIT_11.set_rand_mode(0);
   STATUS_NOT_USE_BIT_11.set_reset_signame("hqm_inp_gated_rst_n");
    STATUS_NOT_USE_BIT_11.set_logical_path("HQMID");
    void'(add_field( STATUS_NOT_USE_BIT_11 ));

    HCW_ENQ_W_RX_SYNC_STATUS_EMPTY = new("HCW_ENQ_W_RX_SYNC_STATUS_EMPTY", "RO/V", 1, 12, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[12:12]"});
    HCW_ENQ_W_RX_SYNC_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    HCW_ENQ_W_RX_SYNC_STATUS_EMPTY.set_rand_mode(0);
   HCW_ENQ_W_RX_SYNC_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    HCW_ENQ_W_RX_SYNC_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( HCW_ENQ_W_RX_SYNC_STATUS_EMPTY ));

    HCW_ENQ_W_RX_SYNC_STATUS_AFULL = new("HCW_ENQ_W_RX_SYNC_STATUS_AFULL", "RO/V", 1, 13, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[13:13]"});
    HCW_ENQ_W_RX_SYNC_STATUS_AFULL.set_powerwell("vcccfn_gated");
    HCW_ENQ_W_RX_SYNC_STATUS_AFULL.set_rand_mode(0);
   HCW_ENQ_W_RX_SYNC_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    HCW_ENQ_W_RX_SYNC_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( HCW_ENQ_W_RX_SYNC_STATUS_AFULL ));

    FIFO_OUTBOUND_HCW_STATUS_EMPTY = new("FIFO_OUTBOUND_HCW_STATUS_EMPTY", "RO/V", 1, 14, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[14:14]"});
    FIFO_OUTBOUND_HCW_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_OUTBOUND_HCW_STATUS_EMPTY.set_rand_mode(0);
   FIFO_OUTBOUND_HCW_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OUTBOUND_HCW_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_OUTBOUND_HCW_STATUS_EMPTY ));

    FIFO_OUTBOUND_HCW_STATUS_AFULL = new("FIFO_OUTBOUND_HCW_STATUS_AFULL", "RO/V", 1, 15, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[15:15]"});
    FIFO_OUTBOUND_HCW_STATUS_AFULL.set_powerwell("vcccfn_gated");
    FIFO_OUTBOUND_HCW_STATUS_AFULL.set_rand_mode(0);
   FIFO_OUTBOUND_HCW_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OUTBOUND_HCW_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_OUTBOUND_HCW_STATUS_AFULL ));

    FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY = new("FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY", "RO/V", 1, 16, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[16:16]"});
    FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY.set_rand_mode(0);
   FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY ));

    FIFO_CHP_LSP_AP_CMP_STATUS_AFULL = new("FIFO_CHP_LSP_AP_CMP_STATUS_AFULL", "RO/V", 1, 17, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[17:17]"});
    FIFO_CHP_LSP_AP_CMP_STATUS_AFULL.set_powerwell("vcccfn_gated");
    FIFO_CHP_LSP_AP_CMP_STATUS_AFULL.set_rand_mode(0);
   FIFO_CHP_LSP_AP_CMP_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_CHP_LSP_AP_CMP_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_CHP_LSP_AP_CMP_STATUS_AFULL ));

    FIFO_CHP_LSP_TOK_STATUS_EMPTY = new("FIFO_CHP_LSP_TOK_STATUS_EMPTY", "RO/V", 1, 18, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[18:18]"});
    FIFO_CHP_LSP_TOK_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_CHP_LSP_TOK_STATUS_EMPTY.set_rand_mode(0);
   FIFO_CHP_LSP_TOK_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_CHP_LSP_TOK_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_CHP_LSP_TOK_STATUS_EMPTY ));

    FIFO_CHP_LSP_TOK_STATUS_AFULL = new("FIFO_CHP_LSP_TOK_STATUS_AFULL", "RO/V", 1, 19, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[19:19]"});
    FIFO_CHP_LSP_TOK_STATUS_AFULL.set_powerwell("vcccfn_gated");
    FIFO_CHP_LSP_TOK_STATUS_AFULL.set_rand_mode(0);
   FIFO_CHP_LSP_TOK_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_CHP_LSP_TOK_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_CHP_LSP_TOK_STATUS_AFULL ));

    FIFO_CHP_ROP_HCW_STATUS_EMPTY = new("FIFO_CHP_ROP_HCW_STATUS_EMPTY", "RO/V", 1, 20, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[20:20]"});
    FIFO_CHP_ROP_HCW_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_CHP_ROP_HCW_STATUS_EMPTY.set_rand_mode(0);
   FIFO_CHP_ROP_HCW_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_CHP_ROP_HCW_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_CHP_ROP_HCW_STATUS_EMPTY ));

    FIFO_CHP_ROP_HCW_STATUS_AFULL = new("FIFO_CHP_ROP_HCW_STATUS_AFULL", "RO/V", 1, 21, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[21:21]"});
    FIFO_CHP_ROP_HCW_STATUS_AFULL.set_powerwell("vcccfn_gated");
    FIFO_CHP_ROP_HCW_STATUS_AFULL.set_rand_mode(0);
   FIFO_CHP_ROP_HCW_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_CHP_ROP_HCW_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_CHP_ROP_HCW_STATUS_AFULL ));

    FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY = new("FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY", "RO/V", 1, 22, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[22:22]"});
    FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY.set_rand_mode(0);
   FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY ));

    FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL = new("FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL", "RO/V", 1, 23, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[23:23]"});
    FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL.set_powerwell("vcccfn_gated");
    FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL.set_rand_mode(0);
   FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL ));

    FREELIST_EMPTY = new("FREELIST_EMPTY", "RO/V", 1, 24, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[24:24]"});
    FREELIST_EMPTY.set_powerwell("vcccfn_gated");
    FREELIST_EMPTY.set_rand_mode(0);
   FREELIST_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FREELIST_EMPTY.set_logical_path("HQMID");
    void'(add_field( FREELIST_EMPTY ));

    FREELIST_FULL = new("FREELIST_FULL", "RO/V", 1, 25, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[25:25]"});
    FREELIST_FULL.set_powerwell("vcccfn_gated");
    FREELIST_FULL.set_rand_mode(0);
   FREELIST_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FREELIST_FULL.set_logical_path("HQMID");
    void'(add_field( FREELIST_FULL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_00_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_00_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INT_STATUS_IN;
  sla_ral_field INT_STATUS_OUT;
  sla_ral_field LDB_REPLAY_DB_STATUS;
  sla_ral_field DIR_REPLAY_DB_STATUS;
  sla_ral_field DQED_SCH_DB_STATUS;
  sla_ral_field WD_TX_SYNC_STATUS;
  sla_ral_field EGRESS_TX_SYNC_STATUS;
  sla_ral_field CHP_LSP_CMP_TX_SYNC_STATUS;
  sla_ral_field CHP_LSP_TOKEN_TX_SYNC_STATUS;
  sla_ral_field CHP_ROP_HCW_TX_SYNC_STATUS;
  sla_ral_field WD_CLKREQ_SYNC2INP_INV;
  sla_ral_field AQED_CHP_SCH_RX_SYNC_IDLE;
  sla_ral_field ATQ2ATM_RX_SYNC_IDLE;
  sla_ral_field QED_CHP_SCH_RX_SYNC_IDLE;
  sla_ral_field DQED_CHP_SCH_RX_SYNC_IDLE;
  sla_ral_field LDB_PP_HCW_ENQ_RX_SYNC_IDLE;
  sla_ral_field DIR_PP_HCW_ENQ_RX_SYNC_IDLE;
  sla_ral_field ROP_CLK_IDLE;
  sla_ral_field CIAL_TX_SYNC_STATUS;
  sla_ral_field INT_IDLE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_STATUS_IN, INT_STATUS_IN.desired)
     `RAL_FIELD_CP_2(INT_STATUS_IN, INT_STATUS_IN.desired, 0,1)
     `RAL_FIELD_CP(INT_STATUS_OUT, INT_STATUS_OUT.desired)
     `RAL_FIELD_CP_2(INT_STATUS_OUT, INT_STATUS_OUT.desired, 0,1)
     `RAL_FIELD_CP(LDB_REPLAY_DB_STATUS, LDB_REPLAY_DB_STATUS.desired)
     `RAL_FIELD_CP_2(LDB_REPLAY_DB_STATUS, LDB_REPLAY_DB_STATUS.desired, 0,1)
     `RAL_FIELD_CP(DIR_REPLAY_DB_STATUS, DIR_REPLAY_DB_STATUS.desired)
     `RAL_FIELD_CP_2(DIR_REPLAY_DB_STATUS, DIR_REPLAY_DB_STATUS.desired, 0,1)
     `RAL_FIELD_CP(DQED_SCH_DB_STATUS, DQED_SCH_DB_STATUS.desired)
     `RAL_FIELD_CP_2(DQED_SCH_DB_STATUS, DQED_SCH_DB_STATUS.desired, 0,1)
     `RAL_FIELD_CP(WD_TX_SYNC_STATUS, WD_TX_SYNC_STATUS.desired)
     `RAL_FIELD_CP_2(WD_TX_SYNC_STATUS, WD_TX_SYNC_STATUS.desired, 0,1)
     `RAL_FIELD_CP(EGRESS_TX_SYNC_STATUS, EGRESS_TX_SYNC_STATUS.desired)
     `RAL_FIELD_CP_2(EGRESS_TX_SYNC_STATUS, EGRESS_TX_SYNC_STATUS.desired, 0,1)
     `RAL_FIELD_CP(CHP_LSP_CMP_TX_SYNC_STATUS, CHP_LSP_CMP_TX_SYNC_STATUS.desired)
     `RAL_FIELD_CP_2(CHP_LSP_CMP_TX_SYNC_STATUS, CHP_LSP_CMP_TX_SYNC_STATUS.desired, 0,1)
     `RAL_FIELD_CP(CHP_LSP_TOKEN_TX_SYNC_STATUS, CHP_LSP_TOKEN_TX_SYNC_STATUS.desired)
     `RAL_FIELD_CP_2(CHP_LSP_TOKEN_TX_SYNC_STATUS, CHP_LSP_TOKEN_TX_SYNC_STATUS.desired, 0,1)
     `RAL_FIELD_CP(CHP_ROP_HCW_TX_SYNC_STATUS, CHP_ROP_HCW_TX_SYNC_STATUS.desired)
     `RAL_FIELD_CP_2(CHP_ROP_HCW_TX_SYNC_STATUS, CHP_ROP_HCW_TX_SYNC_STATUS.desired, 0,1)
     `RAL_FIELD_CP(WD_CLKREQ_SYNC2INP_INV, WD_CLKREQ_SYNC2INP_INV.desired)
     `RAL_FIELD_CP_1(WD_CLKREQ_SYNC2INP_INV, WD_CLKREQ_SYNC2INP_INV.desired, 0)
     `RAL_FIELD_CP(AQED_CHP_SCH_RX_SYNC_IDLE, AQED_CHP_SCH_RX_SYNC_IDLE.desired)
     `RAL_FIELD_CP_1(AQED_CHP_SCH_RX_SYNC_IDLE, AQED_CHP_SCH_RX_SYNC_IDLE.desired, 0)
     `RAL_FIELD_CP(ATQ2ATM_RX_SYNC_IDLE, ATQ2ATM_RX_SYNC_IDLE.desired)
     `RAL_FIELD_CP_1(ATQ2ATM_RX_SYNC_IDLE, ATQ2ATM_RX_SYNC_IDLE.desired, 0)
     `RAL_FIELD_CP(QED_CHP_SCH_RX_SYNC_IDLE, QED_CHP_SCH_RX_SYNC_IDLE.desired)
     `RAL_FIELD_CP_1(QED_CHP_SCH_RX_SYNC_IDLE, QED_CHP_SCH_RX_SYNC_IDLE.desired, 0)
     `RAL_FIELD_CP(DQED_CHP_SCH_RX_SYNC_IDLE, DQED_CHP_SCH_RX_SYNC_IDLE.desired)
     `RAL_FIELD_CP_1(DQED_CHP_SCH_RX_SYNC_IDLE, DQED_CHP_SCH_RX_SYNC_IDLE.desired, 0)
     `RAL_FIELD_CP(LDB_PP_HCW_ENQ_RX_SYNC_IDLE, LDB_PP_HCW_ENQ_RX_SYNC_IDLE.desired)
     `RAL_FIELD_CP_1(LDB_PP_HCW_ENQ_RX_SYNC_IDLE, LDB_PP_HCW_ENQ_RX_SYNC_IDLE.desired, 0)
     `RAL_FIELD_CP(DIR_PP_HCW_ENQ_RX_SYNC_IDLE, DIR_PP_HCW_ENQ_RX_SYNC_IDLE.desired)
     `RAL_FIELD_CP_1(DIR_PP_HCW_ENQ_RX_SYNC_IDLE, DIR_PP_HCW_ENQ_RX_SYNC_IDLE.desired, 0)
     `RAL_FIELD_CP(ROP_CLK_IDLE, ROP_CLK_IDLE.desired)
     `RAL_FIELD_CP_1(ROP_CLK_IDLE, ROP_CLK_IDLE.desired, 0)
     `RAL_FIELD_CP(CIAL_TX_SYNC_STATUS, CIAL_TX_SYNC_STATUS.desired)
     `RAL_FIELD_CP_2(CIAL_TX_SYNC_STATUS, CIAL_TX_SYNC_STATUS.desired, 0,1)
     `RAL_FIELD_CP(INT_IDLE, INT_IDLE.desired)
     `RAL_FIELD_CP_1(INT_IDLE, INT_IDLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_STATUS_IN, INT_STATUS_IN.actual)
     `RAL_FIELD_CP_2(INT_STATUS_IN, INT_STATUS_IN.actual, 0,1)
     `RAL_FIELD_CP(INT_STATUS_OUT, INT_STATUS_OUT.actual)
     `RAL_FIELD_CP_2(INT_STATUS_OUT, INT_STATUS_OUT.actual, 0,1)
     `RAL_FIELD_CP(LDB_REPLAY_DB_STATUS, LDB_REPLAY_DB_STATUS.actual)
     `RAL_FIELD_CP_2(LDB_REPLAY_DB_STATUS, LDB_REPLAY_DB_STATUS.actual, 0,1)
     `RAL_FIELD_CP(DIR_REPLAY_DB_STATUS, DIR_REPLAY_DB_STATUS.actual)
     `RAL_FIELD_CP_2(DIR_REPLAY_DB_STATUS, DIR_REPLAY_DB_STATUS.actual, 0,1)
     `RAL_FIELD_CP(DQED_SCH_DB_STATUS, DQED_SCH_DB_STATUS.actual)
     `RAL_FIELD_CP_2(DQED_SCH_DB_STATUS, DQED_SCH_DB_STATUS.actual, 0,1)
     `RAL_FIELD_CP(WD_TX_SYNC_STATUS, WD_TX_SYNC_STATUS.actual)
     `RAL_FIELD_CP_2(WD_TX_SYNC_STATUS, WD_TX_SYNC_STATUS.actual, 0,1)
     `RAL_FIELD_CP(EGRESS_TX_SYNC_STATUS, EGRESS_TX_SYNC_STATUS.actual)
     `RAL_FIELD_CP_2(EGRESS_TX_SYNC_STATUS, EGRESS_TX_SYNC_STATUS.actual, 0,1)
     `RAL_FIELD_CP(CHP_LSP_CMP_TX_SYNC_STATUS, CHP_LSP_CMP_TX_SYNC_STATUS.actual)
     `RAL_FIELD_CP_2(CHP_LSP_CMP_TX_SYNC_STATUS, CHP_LSP_CMP_TX_SYNC_STATUS.actual, 0,1)
     `RAL_FIELD_CP(CHP_LSP_TOKEN_TX_SYNC_STATUS, CHP_LSP_TOKEN_TX_SYNC_STATUS.actual)
     `RAL_FIELD_CP_2(CHP_LSP_TOKEN_TX_SYNC_STATUS, CHP_LSP_TOKEN_TX_SYNC_STATUS.actual, 0,1)
     `RAL_FIELD_CP(CHP_ROP_HCW_TX_SYNC_STATUS, CHP_ROP_HCW_TX_SYNC_STATUS.actual)
     `RAL_FIELD_CP_2(CHP_ROP_HCW_TX_SYNC_STATUS, CHP_ROP_HCW_TX_SYNC_STATUS.actual, 0,1)
     `RAL_FIELD_CP(WD_CLKREQ_SYNC2INP_INV, WD_CLKREQ_SYNC2INP_INV.actual)
     `RAL_FIELD_CP_1(WD_CLKREQ_SYNC2INP_INV, WD_CLKREQ_SYNC2INP_INV.actual, 0)
     `RAL_FIELD_CP(AQED_CHP_SCH_RX_SYNC_IDLE, AQED_CHP_SCH_RX_SYNC_IDLE.actual)
     `RAL_FIELD_CP_1(AQED_CHP_SCH_RX_SYNC_IDLE, AQED_CHP_SCH_RX_SYNC_IDLE.actual, 0)
     `RAL_FIELD_CP(ATQ2ATM_RX_SYNC_IDLE, ATQ2ATM_RX_SYNC_IDLE.actual)
     `RAL_FIELD_CP_1(ATQ2ATM_RX_SYNC_IDLE, ATQ2ATM_RX_SYNC_IDLE.actual, 0)
     `RAL_FIELD_CP(QED_CHP_SCH_RX_SYNC_IDLE, QED_CHP_SCH_RX_SYNC_IDLE.actual)
     `RAL_FIELD_CP_1(QED_CHP_SCH_RX_SYNC_IDLE, QED_CHP_SCH_RX_SYNC_IDLE.actual, 0)
     `RAL_FIELD_CP(DQED_CHP_SCH_RX_SYNC_IDLE, DQED_CHP_SCH_RX_SYNC_IDLE.actual)
     `RAL_FIELD_CP_1(DQED_CHP_SCH_RX_SYNC_IDLE, DQED_CHP_SCH_RX_SYNC_IDLE.actual, 0)
     `RAL_FIELD_CP(LDB_PP_HCW_ENQ_RX_SYNC_IDLE, LDB_PP_HCW_ENQ_RX_SYNC_IDLE.actual)
     `RAL_FIELD_CP_1(LDB_PP_HCW_ENQ_RX_SYNC_IDLE, LDB_PP_HCW_ENQ_RX_SYNC_IDLE.actual, 0)
     `RAL_FIELD_CP(DIR_PP_HCW_ENQ_RX_SYNC_IDLE, DIR_PP_HCW_ENQ_RX_SYNC_IDLE.actual)
     `RAL_FIELD_CP_1(DIR_PP_HCW_ENQ_RX_SYNC_IDLE, DIR_PP_HCW_ENQ_RX_SYNC_IDLE.actual, 0)
     `RAL_FIELD_CP(ROP_CLK_IDLE, ROP_CLK_IDLE.actual)
     `RAL_FIELD_CP_1(ROP_CLK_IDLE, ROP_CLK_IDLE.actual, 0)
     `RAL_FIELD_CP(CIAL_TX_SYNC_STATUS, CIAL_TX_SYNC_STATUS.actual)
     `RAL_FIELD_CP_2(CIAL_TX_SYNC_STATUS, CIAL_TX_SYNC_STATUS.actual, 0,1)
     `RAL_FIELD_CP(INT_IDLE, INT_IDLE.actual)
     `RAL_FIELD_CP_1(INT_IDLE, INT_IDLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INT_STATUS_IN = new("INT_STATUS_IN", "RO/V", 2, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[1:0]"});
    INT_STATUS_IN.set_powerwell("vcccfn_gated");
    INT_STATUS_IN.set_rand_mode(0);
   INT_STATUS_IN.set_reset_signame("hqm_inp_gated_rst_n");
    INT_STATUS_IN.set_logical_path("HQMID");
    void'(add_field( INT_STATUS_IN ));

    INT_STATUS_OUT = new("INT_STATUS_OUT", "RO/V", 2, 2, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[3:2]"});
    INT_STATUS_OUT.set_powerwell("vcccfn_gated");
    INT_STATUS_OUT.set_rand_mode(0);
   INT_STATUS_OUT.set_reset_signame("hqm_inp_gated_rst_n");
    INT_STATUS_OUT.set_logical_path("HQMID");
    void'(add_field( INT_STATUS_OUT ));

    LDB_REPLAY_DB_STATUS = new("LDB_REPLAY_DB_STATUS", "RO/V", 2, 4, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[5:4]"});
    LDB_REPLAY_DB_STATUS.set_powerwell("vcccfn_gated");
    LDB_REPLAY_DB_STATUS.set_rand_mode(0);
   LDB_REPLAY_DB_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_REPLAY_DB_STATUS.set_logical_path("HQMID");
    void'(add_field( LDB_REPLAY_DB_STATUS ));

    DIR_REPLAY_DB_STATUS = new("DIR_REPLAY_DB_STATUS", "RO/V", 2, 6, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[7:6]"});
    DIR_REPLAY_DB_STATUS.set_powerwell("vcccfn_gated");
    DIR_REPLAY_DB_STATUS.set_rand_mode(0);
   DIR_REPLAY_DB_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_REPLAY_DB_STATUS.set_logical_path("HQMID");
    void'(add_field( DIR_REPLAY_DB_STATUS ));

    DQED_SCH_DB_STATUS = new("DQED_SCH_DB_STATUS", "RO/V", 2, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[9:8]"});
    DQED_SCH_DB_STATUS.set_powerwell("vcccfn_gated");
    DQED_SCH_DB_STATUS.set_rand_mode(0);
   DQED_SCH_DB_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    DQED_SCH_DB_STATUS.set_logical_path("HQMID");
    void'(add_field( DQED_SCH_DB_STATUS ));

    WD_TX_SYNC_STATUS = new("WD_TX_SYNC_STATUS", "RO/V", 2, 10, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[11:10]"});
    WD_TX_SYNC_STATUS.set_powerwell("vcccfn_gated");
    WD_TX_SYNC_STATUS.set_rand_mode(0);
   WD_TX_SYNC_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    WD_TX_SYNC_STATUS.set_logical_path("HQMID");
    void'(add_field( WD_TX_SYNC_STATUS ));

    EGRESS_TX_SYNC_STATUS = new("EGRESS_TX_SYNC_STATUS", "RO/V", 2, 12, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[13:12]"});
    EGRESS_TX_SYNC_STATUS.set_powerwell("vcccfn_gated");
    EGRESS_TX_SYNC_STATUS.set_rand_mode(0);
   EGRESS_TX_SYNC_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_TX_SYNC_STATUS.set_logical_path("HQMID");
    void'(add_field( EGRESS_TX_SYNC_STATUS ));

    CHP_LSP_CMP_TX_SYNC_STATUS = new("CHP_LSP_CMP_TX_SYNC_STATUS", "RO/V", 2, 14, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[15:14]"});
    CHP_LSP_CMP_TX_SYNC_STATUS.set_powerwell("vcccfn_gated");
    CHP_LSP_CMP_TX_SYNC_STATUS.set_rand_mode(0);
   CHP_LSP_CMP_TX_SYNC_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_LSP_CMP_TX_SYNC_STATUS.set_logical_path("HQMID");
    void'(add_field( CHP_LSP_CMP_TX_SYNC_STATUS ));

    CHP_LSP_TOKEN_TX_SYNC_STATUS = new("CHP_LSP_TOKEN_TX_SYNC_STATUS", "RO/V", 2, 16, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[17:16]"});
    CHP_LSP_TOKEN_TX_SYNC_STATUS.set_powerwell("vcccfn_gated");
    CHP_LSP_TOKEN_TX_SYNC_STATUS.set_rand_mode(0);
   CHP_LSP_TOKEN_TX_SYNC_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_LSP_TOKEN_TX_SYNC_STATUS.set_logical_path("HQMID");
    void'(add_field( CHP_LSP_TOKEN_TX_SYNC_STATUS ));

    CHP_ROP_HCW_TX_SYNC_STATUS = new("CHP_ROP_HCW_TX_SYNC_STATUS", "RO/V", 2, 18, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[19:18]"});
    CHP_ROP_HCW_TX_SYNC_STATUS.set_powerwell("vcccfn_gated");
    CHP_ROP_HCW_TX_SYNC_STATUS.set_rand_mode(0);
   CHP_ROP_HCW_TX_SYNC_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_ROP_HCW_TX_SYNC_STATUS.set_logical_path("HQMID");
    void'(add_field( CHP_ROP_HCW_TX_SYNC_STATUS ));

    WD_CLKREQ_SYNC2INP_INV = new("WD_CLKREQ_SYNC2INP_INV", "RO/V", 1, 20, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[20:20]"});
    WD_CLKREQ_SYNC2INP_INV.set_powerwell("vcccfn_gated");
    WD_CLKREQ_SYNC2INP_INV.set_rand_mode(0);
   WD_CLKREQ_SYNC2INP_INV.set_reset_signame("hqm_inp_gated_rst_n");
    WD_CLKREQ_SYNC2INP_INV.set_logical_path("HQMID");
    void'(add_field( WD_CLKREQ_SYNC2INP_INV ));

    AQED_CHP_SCH_RX_SYNC_IDLE = new("AQED_CHP_SCH_RX_SYNC_IDLE", "RO/V", 1, 21, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[21:21]"});
    AQED_CHP_SCH_RX_SYNC_IDLE.set_powerwell("vcccfn_gated");
    AQED_CHP_SCH_RX_SYNC_IDLE.set_rand_mode(0);
   AQED_CHP_SCH_RX_SYNC_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_CHP_SCH_RX_SYNC_IDLE.set_logical_path("HQMID");
    void'(add_field( AQED_CHP_SCH_RX_SYNC_IDLE ));

    ATQ2ATM_RX_SYNC_IDLE = new("ATQ2ATM_RX_SYNC_IDLE", "RO/V", 1, 22, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[22:22]"});
    ATQ2ATM_RX_SYNC_IDLE.set_powerwell("vcccfn_gated");
    ATQ2ATM_RX_SYNC_IDLE.set_rand_mode(0);
   ATQ2ATM_RX_SYNC_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    ATQ2ATM_RX_SYNC_IDLE.set_logical_path("HQMID");
    void'(add_field( ATQ2ATM_RX_SYNC_IDLE ));

    QED_CHP_SCH_RX_SYNC_IDLE = new("QED_CHP_SCH_RX_SYNC_IDLE", "RO/V", 1, 23, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[23:23]"});
    QED_CHP_SCH_RX_SYNC_IDLE.set_powerwell("vcccfn_gated");
    QED_CHP_SCH_RX_SYNC_IDLE.set_rand_mode(0);
   QED_CHP_SCH_RX_SYNC_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    QED_CHP_SCH_RX_SYNC_IDLE.set_logical_path("HQMID");
    void'(add_field( QED_CHP_SCH_RX_SYNC_IDLE ));

    DQED_CHP_SCH_RX_SYNC_IDLE = new("DQED_CHP_SCH_RX_SYNC_IDLE", "RO/V", 1, 24, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[24:24]"});
    DQED_CHP_SCH_RX_SYNC_IDLE.set_powerwell("vcccfn_gated");
    DQED_CHP_SCH_RX_SYNC_IDLE.set_rand_mode(0);
   DQED_CHP_SCH_RX_SYNC_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    DQED_CHP_SCH_RX_SYNC_IDLE.set_logical_path("HQMID");
    void'(add_field( DQED_CHP_SCH_RX_SYNC_IDLE ));

    LDB_PP_HCW_ENQ_RX_SYNC_IDLE = new("LDB_PP_HCW_ENQ_RX_SYNC_IDLE", "RO/V", 1, 25, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[25:25]"});
    LDB_PP_HCW_ENQ_RX_SYNC_IDLE.set_powerwell("vcccfn_gated");
    LDB_PP_HCW_ENQ_RX_SYNC_IDLE.set_rand_mode(0);
   LDB_PP_HCW_ENQ_RX_SYNC_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_PP_HCW_ENQ_RX_SYNC_IDLE.set_logical_path("HQMID");
    void'(add_field( LDB_PP_HCW_ENQ_RX_SYNC_IDLE ));

    DIR_PP_HCW_ENQ_RX_SYNC_IDLE = new("DIR_PP_HCW_ENQ_RX_SYNC_IDLE", "RO/V", 1, 26, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[26:26]"});
    DIR_PP_HCW_ENQ_RX_SYNC_IDLE.set_powerwell("vcccfn_gated");
    DIR_PP_HCW_ENQ_RX_SYNC_IDLE.set_rand_mode(0);
   DIR_PP_HCW_ENQ_RX_SYNC_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_PP_HCW_ENQ_RX_SYNC_IDLE.set_logical_path("HQMID");
    void'(add_field( DIR_PP_HCW_ENQ_RX_SYNC_IDLE ));

    ROP_CLK_IDLE = new("ROP_CLK_IDLE", "RO/V", 1, 27, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[27:27]"});
    ROP_CLK_IDLE.set_powerwell("vcccfn_gated");
    ROP_CLK_IDLE.set_rand_mode(0);
   ROP_CLK_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_CLK_IDLE.set_logical_path("HQMID");
    void'(add_field( ROP_CLK_IDLE ));

    CIAL_TX_SYNC_STATUS = new("CIAL_TX_SYNC_STATUS", "RO/V", 2, 28, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[29:28]"});
    CIAL_TX_SYNC_STATUS.set_powerwell("vcccfn_gated");
    CIAL_TX_SYNC_STATUS.set_rand_mode(0);
   CIAL_TX_SYNC_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    CIAL_TX_SYNC_STATUS.set_logical_path("HQMID");
    void'(add_field( CIAL_TX_SYNC_STATUS ));

    INT_IDLE = new("INT_IDLE", "RO/V", 1, 31, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[31:31]"});
    INT_IDLE.set_powerwell("vcccfn_gated");
    INT_IDLE.set_rand_mode(0);
   INT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    INT_IDLE.set_logical_path("HQMID");
    void'(add_field( INT_IDLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_01_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_01_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_02_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field EGRESS_CREDIT_STATUS_EMPTY;
  sla_ral_field EGRESS_CREDIT_STATUS_AFULL;
  sla_ral_field CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY;
  sla_ral_field CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL;
  sla_ral_field CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY;
  sla_ral_field CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL;
  sla_ral_field CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY;
  sla_ral_field CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL;
  sla_ral_field CHP_ROP_PIPE_CREDIT_STATUS_EMPTY;
  sla_ral_field CHP_ROP_PIPE_CREDIT_STATUS_AFULL;
  sla_ral_field QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY;
  sla_ral_field QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL;
  sla_ral_field EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY;
  sla_ral_field EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL;
  sla_ral_field CHP_LSP_TOKEN_QB_STATUS_SIZE;
  sla_ral_field FREELIST_SIZE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_02_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EGRESS_CREDIT_STATUS_EMPTY, EGRESS_CREDIT_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(EGRESS_CREDIT_STATUS_EMPTY, EGRESS_CREDIT_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(EGRESS_CREDIT_STATUS_AFULL, EGRESS_CREDIT_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(EGRESS_CREDIT_STATUS_AFULL, EGRESS_CREDIT_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY, CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY, CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL, CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL, CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY, CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY, CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL, CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL, CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY, CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY, CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL, CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL, CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(CHP_ROP_PIPE_CREDIT_STATUS_EMPTY, CHP_ROP_PIPE_CREDIT_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(CHP_ROP_PIPE_CREDIT_STATUS_EMPTY, CHP_ROP_PIPE_CREDIT_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(CHP_ROP_PIPE_CREDIT_STATUS_AFULL, CHP_ROP_PIPE_CREDIT_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(CHP_ROP_PIPE_CREDIT_STATUS_AFULL, CHP_ROP_PIPE_CREDIT_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY, QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY, QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL, QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL, QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY, EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY.desired)
     `RAL_FIELD_CP_1(EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY, EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY.desired, 0)
     `RAL_FIELD_CP(EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL, EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL.desired)
     `RAL_FIELD_CP_1(EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL, EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL.desired, 0)
     `RAL_FIELD_CP(CHP_LSP_TOKEN_QB_STATUS_SIZE, CHP_LSP_TOKEN_QB_STATUS_SIZE.desired)
     `RAL_FIELD_CP_3(CHP_LSP_TOKEN_QB_STATUS_SIZE, CHP_LSP_TOKEN_QB_STATUS_SIZE.desired, 0,1,2)
     `RAL_FIELD_CP(FREELIST_SIZE, FREELIST_SIZE.desired)
     `RAL_FIELD_CP_15(FREELIST_SIZE, FREELIST_SIZE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(EGRESS_CREDIT_STATUS_EMPTY, EGRESS_CREDIT_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(EGRESS_CREDIT_STATUS_EMPTY, EGRESS_CREDIT_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(EGRESS_CREDIT_STATUS_AFULL, EGRESS_CREDIT_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(EGRESS_CREDIT_STATUS_AFULL, EGRESS_CREDIT_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY, CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY, CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL, CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL, CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY, CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY, CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL, CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL, CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY, CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY, CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL, CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL, CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(CHP_ROP_PIPE_CREDIT_STATUS_EMPTY, CHP_ROP_PIPE_CREDIT_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(CHP_ROP_PIPE_CREDIT_STATUS_EMPTY, CHP_ROP_PIPE_CREDIT_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(CHP_ROP_PIPE_CREDIT_STATUS_AFULL, CHP_ROP_PIPE_CREDIT_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(CHP_ROP_PIPE_CREDIT_STATUS_AFULL, CHP_ROP_PIPE_CREDIT_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY, QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY, QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL, QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL, QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY, EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY.actual)
     `RAL_FIELD_CP_1(EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY, EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY.actual, 0)
     `RAL_FIELD_CP(EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL, EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL.actual)
     `RAL_FIELD_CP_1(EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL, EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL.actual, 0)
     `RAL_FIELD_CP(CHP_LSP_TOKEN_QB_STATUS_SIZE, CHP_LSP_TOKEN_QB_STATUS_SIZE.actual)
     `RAL_FIELD_CP_3(CHP_LSP_TOKEN_QB_STATUS_SIZE, CHP_LSP_TOKEN_QB_STATUS_SIZE.actual, 0,1,2)
     `RAL_FIELD_CP(FREELIST_SIZE, FREELIST_SIZE.actual)
     `RAL_FIELD_CP_15(FREELIST_SIZE, FREELIST_SIZE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    EGRESS_CREDIT_STATUS_EMPTY = new("EGRESS_CREDIT_STATUS_EMPTY", "RO/V", 1, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[0:0]"});
    EGRESS_CREDIT_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    EGRESS_CREDIT_STATUS_EMPTY.set_rand_mode(0);
   EGRESS_CREDIT_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_CREDIT_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( EGRESS_CREDIT_STATUS_EMPTY ));

    EGRESS_CREDIT_STATUS_AFULL = new("EGRESS_CREDIT_STATUS_AFULL", "RO/V", 1, 1, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[1:1]"});
    EGRESS_CREDIT_STATUS_AFULL.set_powerwell("vcccfn_gated");
    EGRESS_CREDIT_STATUS_AFULL.set_rand_mode(0);
   EGRESS_CREDIT_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_CREDIT_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( EGRESS_CREDIT_STATUS_AFULL ));

    CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY = new("CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY", "RO/V", 1, 2, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[2:2]"});
    CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY.set_rand_mode(0);
   CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY ));

    CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL = new("CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL", "RO/V", 1, 3, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[3:3]"});
    CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL.set_powerwell("vcccfn_gated");
    CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL.set_rand_mode(0);
   CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL ));

    CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY = new("CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY", "RO/V", 1, 4, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[4:4]"});
    CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY.set_rand_mode(0);
   CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY ));

    CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL = new("CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL", "RO/V", 1, 5, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[5:5]"});
    CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL.set_powerwell("vcccfn_gated");
    CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL.set_rand_mode(0);
   CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL ));

    CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY = new("CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY", "RO/V", 1, 6, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[6:6]"});
    CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY.set_rand_mode(0);
   CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY ));

    CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL = new("CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL", "RO/V", 1, 7, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[7:7]"});
    CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL.set_powerwell("vcccfn_gated");
    CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL.set_rand_mode(0);
   CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL ));

    CHP_ROP_PIPE_CREDIT_STATUS_EMPTY = new("CHP_ROP_PIPE_CREDIT_STATUS_EMPTY", "RO/V", 1, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[8:8]"});
    CHP_ROP_PIPE_CREDIT_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    CHP_ROP_PIPE_CREDIT_STATUS_EMPTY.set_rand_mode(0);
   CHP_ROP_PIPE_CREDIT_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_ROP_PIPE_CREDIT_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( CHP_ROP_PIPE_CREDIT_STATUS_EMPTY ));

    CHP_ROP_PIPE_CREDIT_STATUS_AFULL = new("CHP_ROP_PIPE_CREDIT_STATUS_AFULL", "RO/V", 1, 9, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[9:9]"});
    CHP_ROP_PIPE_CREDIT_STATUS_AFULL.set_powerwell("vcccfn_gated");
    CHP_ROP_PIPE_CREDIT_STATUS_AFULL.set_rand_mode(0);
   CHP_ROP_PIPE_CREDIT_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_ROP_PIPE_CREDIT_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( CHP_ROP_PIPE_CREDIT_STATUS_AFULL ));

    QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY = new("QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY", "RO/V", 1, 10, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[10:10]"});
    QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY.set_rand_mode(0);
   QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY ));

    QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL = new("QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL", "RO/V", 1, 11, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[11:11]"});
    QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL.set_powerwell("vcccfn_gated");
    QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL.set_rand_mode(0);
   QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL ));

    EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY = new("EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY", "RO/V", 1, 12, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[12:12]"});
    EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY.set_powerwell("vcccfn_gated");
    EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY.set_rand_mode(0);
   EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY.set_logical_path("HQMID");
    void'(add_field( EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY ));

    EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL = new("EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL", "RO/V", 1, 13, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[13:13]"});
    EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL.set_powerwell("vcccfn_gated");
    EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL.set_rand_mode(0);
   EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL.set_logical_path("HQMID");
    void'(add_field( EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL ));

    CHP_LSP_TOKEN_QB_STATUS_SIZE = new("CHP_LSP_TOKEN_QB_STATUS_SIZE", "RO/V", 3, 14, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[16:14]"});
    CHP_LSP_TOKEN_QB_STATUS_SIZE.set_powerwell("vcccfn_gated");
    CHP_LSP_TOKEN_QB_STATUS_SIZE.set_rand_mode(0);
   CHP_LSP_TOKEN_QB_STATUS_SIZE.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_LSP_TOKEN_QB_STATUS_SIZE.set_logical_path("HQMID");
    void'(add_field( CHP_LSP_TOKEN_QB_STATUS_SIZE ));

    FREELIST_SIZE = new("FREELIST_SIZE", "RO/V", 15, 17, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[31:17]"});
    FREELIST_SIZE.set_powerwell("vcccfn_gated");
    FREELIST_SIZE.set_rand_mode(0);
   FREELIST_SIZE.set_reset_signame("hqm_inp_gated_rst_n");
    FREELIST_SIZE.set_logical_path("HQMID");
    void'(add_field( FREELIST_SIZE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_02_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_02_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field OUTBOUND_HCW_PIPE_CREDIT_HWM;
  sla_ral_field LSP_AP_CMP_PIPE_CREDIT_HWM;
  sla_ral_field LSP_TOK_PIPE_CREDIT_HWM;
  sla_ral_field ROP_PIPE_CREDIT_HWM;
  sla_ral_field EGRESS_PIPE_CREDIT_HWM;
  sla_ral_field QED_TO_CQ_PIPE_CREDIT_HWM;
  sla_ral_field EGRESS_LSP_TOKEN_PIPE_CREDIT;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(OUTBOUND_HCW_PIPE_CREDIT_HWM, OUTBOUND_HCW_PIPE_CREDIT_HWM.desired)
     `RAL_FIELD_CP_5(OUTBOUND_HCW_PIPE_CREDIT_HWM, OUTBOUND_HCW_PIPE_CREDIT_HWM.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(LSP_AP_CMP_PIPE_CREDIT_HWM, LSP_AP_CMP_PIPE_CREDIT_HWM.desired)
     `RAL_FIELD_CP_5(LSP_AP_CMP_PIPE_CREDIT_HWM, LSP_AP_CMP_PIPE_CREDIT_HWM.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(LSP_TOK_PIPE_CREDIT_HWM, LSP_TOK_PIPE_CREDIT_HWM.desired)
     `RAL_FIELD_CP_5(LSP_TOK_PIPE_CREDIT_HWM, LSP_TOK_PIPE_CREDIT_HWM.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(ROP_PIPE_CREDIT_HWM, ROP_PIPE_CREDIT_HWM.desired)
     `RAL_FIELD_CP_5(ROP_PIPE_CREDIT_HWM, ROP_PIPE_CREDIT_HWM.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(EGRESS_PIPE_CREDIT_HWM, EGRESS_PIPE_CREDIT_HWM.desired)
     `RAL_FIELD_CP_4(EGRESS_PIPE_CREDIT_HWM, EGRESS_PIPE_CREDIT_HWM.desired, 0,1,2,3)
     `RAL_FIELD_CP(QED_TO_CQ_PIPE_CREDIT_HWM, QED_TO_CQ_PIPE_CREDIT_HWM.desired)
     `RAL_FIELD_CP_4(QED_TO_CQ_PIPE_CREDIT_HWM, QED_TO_CQ_PIPE_CREDIT_HWM.desired, 0,1,2,3)
     `RAL_FIELD_CP(EGRESS_LSP_TOKEN_PIPE_CREDIT, EGRESS_LSP_TOKEN_PIPE_CREDIT.desired)
     `RAL_FIELD_CP_3(EGRESS_LSP_TOKEN_PIPE_CREDIT, EGRESS_LSP_TOKEN_PIPE_CREDIT.desired, 0,1,2)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(OUTBOUND_HCW_PIPE_CREDIT_HWM, OUTBOUND_HCW_PIPE_CREDIT_HWM.actual)
     `RAL_FIELD_CP_5(OUTBOUND_HCW_PIPE_CREDIT_HWM, OUTBOUND_HCW_PIPE_CREDIT_HWM.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(LSP_AP_CMP_PIPE_CREDIT_HWM, LSP_AP_CMP_PIPE_CREDIT_HWM.actual)
     `RAL_FIELD_CP_5(LSP_AP_CMP_PIPE_CREDIT_HWM, LSP_AP_CMP_PIPE_CREDIT_HWM.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(LSP_TOK_PIPE_CREDIT_HWM, LSP_TOK_PIPE_CREDIT_HWM.actual)
     `RAL_FIELD_CP_5(LSP_TOK_PIPE_CREDIT_HWM, LSP_TOK_PIPE_CREDIT_HWM.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(ROP_PIPE_CREDIT_HWM, ROP_PIPE_CREDIT_HWM.actual)
     `RAL_FIELD_CP_5(ROP_PIPE_CREDIT_HWM, ROP_PIPE_CREDIT_HWM.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(EGRESS_PIPE_CREDIT_HWM, EGRESS_PIPE_CREDIT_HWM.actual)
     `RAL_FIELD_CP_4(EGRESS_PIPE_CREDIT_HWM, EGRESS_PIPE_CREDIT_HWM.actual, 0,1,2,3)
     `RAL_FIELD_CP(QED_TO_CQ_PIPE_CREDIT_HWM, QED_TO_CQ_PIPE_CREDIT_HWM.actual)
     `RAL_FIELD_CP_4(QED_TO_CQ_PIPE_CREDIT_HWM, QED_TO_CQ_PIPE_CREDIT_HWM.actual, 0,1,2,3)
     `RAL_FIELD_CP(EGRESS_LSP_TOKEN_PIPE_CREDIT, EGRESS_LSP_TOKEN_PIPE_CREDIT.actual)
     `RAL_FIELD_CP_3(EGRESS_LSP_TOKEN_PIPE_CREDIT, EGRESS_LSP_TOKEN_PIPE_CREDIT.actual, 0,1,2)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    OUTBOUND_HCW_PIPE_CREDIT_HWM = new("OUTBOUND_HCW_PIPE_CREDIT_HWM", "RW", 5, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[4:0]"});
    OUTBOUND_HCW_PIPE_CREDIT_HWM.set_powerwell("vcccfn_gated");
    OUTBOUND_HCW_PIPE_CREDIT_HWM.set_rand_mode(0);
   OUTBOUND_HCW_PIPE_CREDIT_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    OUTBOUND_HCW_PIPE_CREDIT_HWM.set_logical_path("HQMID");
    void'(add_field( OUTBOUND_HCW_PIPE_CREDIT_HWM ));

    LSP_AP_CMP_PIPE_CREDIT_HWM = new("LSP_AP_CMP_PIPE_CREDIT_HWM", "RW", 5, 5, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[9:5]"});
    LSP_AP_CMP_PIPE_CREDIT_HWM.set_powerwell("vcccfn_gated");
    LSP_AP_CMP_PIPE_CREDIT_HWM.set_rand_mode(0);
   LSP_AP_CMP_PIPE_CREDIT_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_AP_CMP_PIPE_CREDIT_HWM.set_logical_path("HQMID");
    void'(add_field( LSP_AP_CMP_PIPE_CREDIT_HWM ));

    LSP_TOK_PIPE_CREDIT_HWM = new("LSP_TOK_PIPE_CREDIT_HWM", "RW", 5, 10, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[14:10]"});
    LSP_TOK_PIPE_CREDIT_HWM.set_powerwell("vcccfn_gated");
    LSP_TOK_PIPE_CREDIT_HWM.set_rand_mode(0);
   LSP_TOK_PIPE_CREDIT_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_TOK_PIPE_CREDIT_HWM.set_logical_path("HQMID");
    void'(add_field( LSP_TOK_PIPE_CREDIT_HWM ));

    ROP_PIPE_CREDIT_HWM = new("ROP_PIPE_CREDIT_HWM", "RW", 5, 15, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[19:15]"});
    ROP_PIPE_CREDIT_HWM.set_powerwell("vcccfn_gated");
    ROP_PIPE_CREDIT_HWM.set_rand_mode(0);
   ROP_PIPE_CREDIT_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_PIPE_CREDIT_HWM.set_logical_path("HQMID");
    void'(add_field( ROP_PIPE_CREDIT_HWM ));

    EGRESS_PIPE_CREDIT_HWM = new("EGRESS_PIPE_CREDIT_HWM", "RW", 4, 20, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[23:20]"});
    EGRESS_PIPE_CREDIT_HWM.set_powerwell("vcccfn_gated");
    EGRESS_PIPE_CREDIT_HWM.set_rand_mode(0);
   EGRESS_PIPE_CREDIT_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_PIPE_CREDIT_HWM.set_logical_path("HQMID");
    void'(add_field( EGRESS_PIPE_CREDIT_HWM ));

    QED_TO_CQ_PIPE_CREDIT_HWM = new("QED_TO_CQ_PIPE_CREDIT_HWM", "RW", 4, 24, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[27:24]"});
    QED_TO_CQ_PIPE_CREDIT_HWM.set_powerwell("vcccfn_gated");
    QED_TO_CQ_PIPE_CREDIT_HWM.set_rand_mode(0);
   QED_TO_CQ_PIPE_CREDIT_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    QED_TO_CQ_PIPE_CREDIT_HWM.set_logical_path("HQMID");
    void'(add_field( QED_TO_CQ_PIPE_CREDIT_HWM ));

    EGRESS_LSP_TOKEN_PIPE_CREDIT = new("EGRESS_LSP_TOKEN_PIPE_CREDIT", "RW", 3, 28, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[30:28]"});
    EGRESS_LSP_TOKEN_PIPE_CREDIT.set_powerwell("vcccfn_gated");
    EGRESS_LSP_TOKEN_PIPE_CREDIT.set_rand_mode(0);
   EGRESS_LSP_TOKEN_PIPE_CREDIT.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_LSP_TOKEN_PIPE_CREDIT.set_logical_path("HQMID");
    void'(add_field( EGRESS_LSP_TOKEN_PIPE_CREDIT ));

    RSVZ0 = new("RSVZ0", "RW", 1, 31, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[31:31]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_00_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_00_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CHP_BLK_DUAL_ISSUE;
  sla_ral_field INCLUDE_CWDI_TIMER_IDLE_EN;
  sla_ral_field RSVZ;
  sla_ral_field CIAL_CLOCK_GATE_CONTROL;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHP_BLK_DUAL_ISSUE, CHP_BLK_DUAL_ISSUE.desired)
     `RAL_FIELD_CP_1(CHP_BLK_DUAL_ISSUE, CHP_BLK_DUAL_ISSUE.desired, 0)
     `RAL_FIELD_CP(INCLUDE_CWDI_TIMER_IDLE_EN, INCLUDE_CWDI_TIMER_IDLE_EN.desired)
     `RAL_FIELD_CP_1(INCLUDE_CWDI_TIMER_IDLE_EN, INCLUDE_CWDI_TIMER_IDLE_EN.desired, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.desired)
     `RAL_FIELD_CP_1(RSVZ, RSVZ.desired, 0)
     `RAL_FIELD_CP(CIAL_CLOCK_GATE_CONTROL, CIAL_CLOCK_GATE_CONTROL.desired)
     `RAL_FIELD_CP_1(CIAL_CLOCK_GATE_CONTROL, CIAL_CLOCK_GATE_CONTROL.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHP_BLK_DUAL_ISSUE, CHP_BLK_DUAL_ISSUE.actual)
     `RAL_FIELD_CP_1(CHP_BLK_DUAL_ISSUE, CHP_BLK_DUAL_ISSUE.actual, 0)
     `RAL_FIELD_CP(INCLUDE_CWDI_TIMER_IDLE_EN, INCLUDE_CWDI_TIMER_IDLE_EN.actual)
     `RAL_FIELD_CP_1(INCLUDE_CWDI_TIMER_IDLE_EN, INCLUDE_CWDI_TIMER_IDLE_EN.actual, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.actual)
     `RAL_FIELD_CP_1(RSVZ, RSVZ.actual, 0)
     `RAL_FIELD_CP(CIAL_CLOCK_GATE_CONTROL, CIAL_CLOCK_GATE_CONTROL.actual)
     `RAL_FIELD_CP_1(CIAL_CLOCK_GATE_CONTROL, CIAL_CLOCK_GATE_CONTROL.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CHP_BLK_DUAL_ISSUE = new("CHP_BLK_DUAL_ISSUE", "RW", 1, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_01.internal_f[0:0]"});
    CHP_BLK_DUAL_ISSUE.set_powerwell("vcccfn_gated");
    CHP_BLK_DUAL_ISSUE.set_rand_mode(0);
   CHP_BLK_DUAL_ISSUE.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_BLK_DUAL_ISSUE.set_logical_path("HQMID");
    void'(add_field( CHP_BLK_DUAL_ISSUE ));

    INCLUDE_CWDI_TIMER_IDLE_EN = new("INCLUDE_CWDI_TIMER_IDLE_EN", "RW", 1, 1, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_01.internal_f[1:1]"});
    INCLUDE_CWDI_TIMER_IDLE_EN.set_powerwell("vcccfn_gated");
    INCLUDE_CWDI_TIMER_IDLE_EN.set_rand_mode(0);
   INCLUDE_CWDI_TIMER_IDLE_EN.set_reset_signame("hqm_inp_gated_rst_n");
    INCLUDE_CWDI_TIMER_IDLE_EN.set_logical_path("HQMID");
    void'(add_field( INCLUDE_CWDI_TIMER_IDLE_EN ));

    RSVZ = new("RSVZ", "RW", 1, 2, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_01.internal_f[2:2]"});
    RSVZ.set_powerwell("vcccfn_gated");
    RSVZ.set_rand_mode(0);
   RSVZ.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ.set_logical_path("HQMID");
    void'(add_field( RSVZ ));

    CIAL_CLOCK_GATE_CONTROL = new("CIAL_CLOCK_GATE_CONTROL", "RW", 1, 3, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_01.internal_f[3:3]"});
    CIAL_CLOCK_GATE_CONTROL.set_powerwell("vcccfn_gated");
    CIAL_CLOCK_GATE_CONTROL.set_rand_mode(0);
   CIAL_CLOCK_GATE_CONTROL.set_reset_signame("hqm_inp_gated_rst_n");
    CIAL_CLOCK_GATE_CONTROL.set_logical_path("HQMID");
    void'(add_field( CIAL_CLOCK_GATE_CONTROL ));

    RSVZ0 = new("RSVZ0", "RW", 28, 4, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_01.internal_f[31:4]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_01_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_01_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_02_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ENQPIPE_ERROR_INJECTION_L0;
  sla_ral_field ENQPIPE_ERROR_INJECTION_H0;
  sla_ral_field ENQPIPE_ERROR_INJECTION_L1;
  sla_ral_field ENQPIPE_ERROR_INJECTION_H1;
  sla_ral_field SCHPIPE_ERROR_INJECTION_L0;
  sla_ral_field SCHPIPE_ERROR_INJECTION_H0;
  sla_ral_field SCHPIPE_ERROR_INJECTION_L1;
  sla_ral_field SCHPIPE_ERROR_INJECTION_H1;
  sla_ral_field EGRESS_ERROR_INJECTION_L0;
  sla_ral_field EGRESS_ERROR_INJECTION_H0;
  sla_ral_field EGRESS_ERROR_INJECTION_L1;
  sla_ral_field EGRESS_ERROR_INJECTION_H1;
  sla_ral_field INGRESS_ERROR_INJECTION_L0;
  sla_ral_field INGRESS_ERROR_INJECTION_H0;
  sla_ral_field INGRESS_ERROR_INJECTION_L1;
  sla_ral_field INGRESS_ERROR_INJECTION_H1;
  sla_ral_field INGRESS_FLID_PARITY_ERROR_INJECTION_0;
  sla_ral_field INGRESS_FLID_PARITY_ERROR_INJECTION_1;
  sla_ral_field ENGPIPE_FLID_PARITY_ERROR_INJECTION;
  sla_ral_field EGRESS_WBO_ERROR_INJECTION_0;
  sla_ral_field EGRESS_WBO_ERROR_INJECTION_1;
  sla_ral_field EGRESS_WBO_ERROR_INJECTION_2;
  sla_ral_field EGRESS_WBO_ERROR_INJECTION_3;
  sla_ral_field CONTROL;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_02_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ENQPIPE_ERROR_INJECTION_L0, ENQPIPE_ERROR_INJECTION_L0.desired)
     `RAL_FIELD_CP_1(ENQPIPE_ERROR_INJECTION_L0, ENQPIPE_ERROR_INJECTION_L0.desired, 0)
     `RAL_FIELD_CP(ENQPIPE_ERROR_INJECTION_H0, ENQPIPE_ERROR_INJECTION_H0.desired)
     `RAL_FIELD_CP_1(ENQPIPE_ERROR_INJECTION_H0, ENQPIPE_ERROR_INJECTION_H0.desired, 0)
     `RAL_FIELD_CP(ENQPIPE_ERROR_INJECTION_L1, ENQPIPE_ERROR_INJECTION_L1.desired)
     `RAL_FIELD_CP_1(ENQPIPE_ERROR_INJECTION_L1, ENQPIPE_ERROR_INJECTION_L1.desired, 0)
     `RAL_FIELD_CP(ENQPIPE_ERROR_INJECTION_H1, ENQPIPE_ERROR_INJECTION_H1.desired)
     `RAL_FIELD_CP_1(ENQPIPE_ERROR_INJECTION_H1, ENQPIPE_ERROR_INJECTION_H1.desired, 0)
     `RAL_FIELD_CP(SCHPIPE_ERROR_INJECTION_L0, SCHPIPE_ERROR_INJECTION_L0.desired)
     `RAL_FIELD_CP_1(SCHPIPE_ERROR_INJECTION_L0, SCHPIPE_ERROR_INJECTION_L0.desired, 0)
     `RAL_FIELD_CP(SCHPIPE_ERROR_INJECTION_H0, SCHPIPE_ERROR_INJECTION_H0.desired)
     `RAL_FIELD_CP_1(SCHPIPE_ERROR_INJECTION_H0, SCHPIPE_ERROR_INJECTION_H0.desired, 0)
     `RAL_FIELD_CP(SCHPIPE_ERROR_INJECTION_L1, SCHPIPE_ERROR_INJECTION_L1.desired)
     `RAL_FIELD_CP_1(SCHPIPE_ERROR_INJECTION_L1, SCHPIPE_ERROR_INJECTION_L1.desired, 0)
     `RAL_FIELD_CP(SCHPIPE_ERROR_INJECTION_H1, SCHPIPE_ERROR_INJECTION_H1.desired)
     `RAL_FIELD_CP_1(SCHPIPE_ERROR_INJECTION_H1, SCHPIPE_ERROR_INJECTION_H1.desired, 0)
     `RAL_FIELD_CP(EGRESS_ERROR_INJECTION_L0, EGRESS_ERROR_INJECTION_L0.desired)
     `RAL_FIELD_CP_1(EGRESS_ERROR_INJECTION_L0, EGRESS_ERROR_INJECTION_L0.desired, 0)
     `RAL_FIELD_CP(EGRESS_ERROR_INJECTION_H0, EGRESS_ERROR_INJECTION_H0.desired)
     `RAL_FIELD_CP_1(EGRESS_ERROR_INJECTION_H0, EGRESS_ERROR_INJECTION_H0.desired, 0)
     `RAL_FIELD_CP(EGRESS_ERROR_INJECTION_L1, EGRESS_ERROR_INJECTION_L1.desired)
     `RAL_FIELD_CP_1(EGRESS_ERROR_INJECTION_L1, EGRESS_ERROR_INJECTION_L1.desired, 0)
     `RAL_FIELD_CP(EGRESS_ERROR_INJECTION_H1, EGRESS_ERROR_INJECTION_H1.desired)
     `RAL_FIELD_CP_1(EGRESS_ERROR_INJECTION_H1, EGRESS_ERROR_INJECTION_H1.desired, 0)
     `RAL_FIELD_CP(INGRESS_ERROR_INJECTION_L0, INGRESS_ERROR_INJECTION_L0.desired)
     `RAL_FIELD_CP_1(INGRESS_ERROR_INJECTION_L0, INGRESS_ERROR_INJECTION_L0.desired, 0)
     `RAL_FIELD_CP(INGRESS_ERROR_INJECTION_H0, INGRESS_ERROR_INJECTION_H0.desired)
     `RAL_FIELD_CP_1(INGRESS_ERROR_INJECTION_H0, INGRESS_ERROR_INJECTION_H0.desired, 0)
     `RAL_FIELD_CP(INGRESS_ERROR_INJECTION_L1, INGRESS_ERROR_INJECTION_L1.desired)
     `RAL_FIELD_CP_1(INGRESS_ERROR_INJECTION_L1, INGRESS_ERROR_INJECTION_L1.desired, 0)
     `RAL_FIELD_CP(INGRESS_ERROR_INJECTION_H1, INGRESS_ERROR_INJECTION_H1.desired)
     `RAL_FIELD_CP_1(INGRESS_ERROR_INJECTION_H1, INGRESS_ERROR_INJECTION_H1.desired, 0)
     `RAL_FIELD_CP(INGRESS_FLID_PARITY_ERROR_INJECTION_0, INGRESS_FLID_PARITY_ERROR_INJECTION_0.desired)
     `RAL_FIELD_CP_1(INGRESS_FLID_PARITY_ERROR_INJECTION_0, INGRESS_FLID_PARITY_ERROR_INJECTION_0.desired, 0)
     `RAL_FIELD_CP(INGRESS_FLID_PARITY_ERROR_INJECTION_1, INGRESS_FLID_PARITY_ERROR_INJECTION_1.desired)
     `RAL_FIELD_CP_1(INGRESS_FLID_PARITY_ERROR_INJECTION_1, INGRESS_FLID_PARITY_ERROR_INJECTION_1.desired, 0)
     `RAL_FIELD_CP(ENGPIPE_FLID_PARITY_ERROR_INJECTION, ENGPIPE_FLID_PARITY_ERROR_INJECTION.desired)
     `RAL_FIELD_CP_1(ENGPIPE_FLID_PARITY_ERROR_INJECTION, ENGPIPE_FLID_PARITY_ERROR_INJECTION.desired, 0)
     `RAL_FIELD_CP(EGRESS_WBO_ERROR_INJECTION_0, EGRESS_WBO_ERROR_INJECTION_0.desired)
     `RAL_FIELD_CP_1(EGRESS_WBO_ERROR_INJECTION_0, EGRESS_WBO_ERROR_INJECTION_0.desired, 0)
     `RAL_FIELD_CP(EGRESS_WBO_ERROR_INJECTION_1, EGRESS_WBO_ERROR_INJECTION_1.desired)
     `RAL_FIELD_CP_1(EGRESS_WBO_ERROR_INJECTION_1, EGRESS_WBO_ERROR_INJECTION_1.desired, 0)
     `RAL_FIELD_CP(EGRESS_WBO_ERROR_INJECTION_2, EGRESS_WBO_ERROR_INJECTION_2.desired)
     `RAL_FIELD_CP_1(EGRESS_WBO_ERROR_INJECTION_2, EGRESS_WBO_ERROR_INJECTION_2.desired, 0)
     `RAL_FIELD_CP(EGRESS_WBO_ERROR_INJECTION_3, EGRESS_WBO_ERROR_INJECTION_3.desired)
     `RAL_FIELD_CP_1(EGRESS_WBO_ERROR_INJECTION_3, EGRESS_WBO_ERROR_INJECTION_3.desired, 0)
     `RAL_FIELD_CP(CONTROL, CONTROL.desired)
     `RAL_FIELD_CP_9(CONTROL, CONTROL.desired, 0,1,2,3,4,5,6,7,8)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ENQPIPE_ERROR_INJECTION_L0, ENQPIPE_ERROR_INJECTION_L0.actual)
     `RAL_FIELD_CP_1(ENQPIPE_ERROR_INJECTION_L0, ENQPIPE_ERROR_INJECTION_L0.actual, 0)
     `RAL_FIELD_CP(ENQPIPE_ERROR_INJECTION_H0, ENQPIPE_ERROR_INJECTION_H0.actual)
     `RAL_FIELD_CP_1(ENQPIPE_ERROR_INJECTION_H0, ENQPIPE_ERROR_INJECTION_H0.actual, 0)
     `RAL_FIELD_CP(ENQPIPE_ERROR_INJECTION_L1, ENQPIPE_ERROR_INJECTION_L1.actual)
     `RAL_FIELD_CP_1(ENQPIPE_ERROR_INJECTION_L1, ENQPIPE_ERROR_INJECTION_L1.actual, 0)
     `RAL_FIELD_CP(ENQPIPE_ERROR_INJECTION_H1, ENQPIPE_ERROR_INJECTION_H1.actual)
     `RAL_FIELD_CP_1(ENQPIPE_ERROR_INJECTION_H1, ENQPIPE_ERROR_INJECTION_H1.actual, 0)
     `RAL_FIELD_CP(SCHPIPE_ERROR_INJECTION_L0, SCHPIPE_ERROR_INJECTION_L0.actual)
     `RAL_FIELD_CP_1(SCHPIPE_ERROR_INJECTION_L0, SCHPIPE_ERROR_INJECTION_L0.actual, 0)
     `RAL_FIELD_CP(SCHPIPE_ERROR_INJECTION_H0, SCHPIPE_ERROR_INJECTION_H0.actual)
     `RAL_FIELD_CP_1(SCHPIPE_ERROR_INJECTION_H0, SCHPIPE_ERROR_INJECTION_H0.actual, 0)
     `RAL_FIELD_CP(SCHPIPE_ERROR_INJECTION_L1, SCHPIPE_ERROR_INJECTION_L1.actual)
     `RAL_FIELD_CP_1(SCHPIPE_ERROR_INJECTION_L1, SCHPIPE_ERROR_INJECTION_L1.actual, 0)
     `RAL_FIELD_CP(SCHPIPE_ERROR_INJECTION_H1, SCHPIPE_ERROR_INJECTION_H1.actual)
     `RAL_FIELD_CP_1(SCHPIPE_ERROR_INJECTION_H1, SCHPIPE_ERROR_INJECTION_H1.actual, 0)
     `RAL_FIELD_CP(EGRESS_ERROR_INJECTION_L0, EGRESS_ERROR_INJECTION_L0.actual)
     `RAL_FIELD_CP_1(EGRESS_ERROR_INJECTION_L0, EGRESS_ERROR_INJECTION_L0.actual, 0)
     `RAL_FIELD_CP(EGRESS_ERROR_INJECTION_H0, EGRESS_ERROR_INJECTION_H0.actual)
     `RAL_FIELD_CP_1(EGRESS_ERROR_INJECTION_H0, EGRESS_ERROR_INJECTION_H0.actual, 0)
     `RAL_FIELD_CP(EGRESS_ERROR_INJECTION_L1, EGRESS_ERROR_INJECTION_L1.actual)
     `RAL_FIELD_CP_1(EGRESS_ERROR_INJECTION_L1, EGRESS_ERROR_INJECTION_L1.actual, 0)
     `RAL_FIELD_CP(EGRESS_ERROR_INJECTION_H1, EGRESS_ERROR_INJECTION_H1.actual)
     `RAL_FIELD_CP_1(EGRESS_ERROR_INJECTION_H1, EGRESS_ERROR_INJECTION_H1.actual, 0)
     `RAL_FIELD_CP(INGRESS_ERROR_INJECTION_L0, INGRESS_ERROR_INJECTION_L0.actual)
     `RAL_FIELD_CP_1(INGRESS_ERROR_INJECTION_L0, INGRESS_ERROR_INJECTION_L0.actual, 0)
     `RAL_FIELD_CP(INGRESS_ERROR_INJECTION_H0, INGRESS_ERROR_INJECTION_H0.actual)
     `RAL_FIELD_CP_1(INGRESS_ERROR_INJECTION_H0, INGRESS_ERROR_INJECTION_H0.actual, 0)
     `RAL_FIELD_CP(INGRESS_ERROR_INJECTION_L1, INGRESS_ERROR_INJECTION_L1.actual)
     `RAL_FIELD_CP_1(INGRESS_ERROR_INJECTION_L1, INGRESS_ERROR_INJECTION_L1.actual, 0)
     `RAL_FIELD_CP(INGRESS_ERROR_INJECTION_H1, INGRESS_ERROR_INJECTION_H1.actual)
     `RAL_FIELD_CP_1(INGRESS_ERROR_INJECTION_H1, INGRESS_ERROR_INJECTION_H1.actual, 0)
     `RAL_FIELD_CP(INGRESS_FLID_PARITY_ERROR_INJECTION_0, INGRESS_FLID_PARITY_ERROR_INJECTION_0.actual)
     `RAL_FIELD_CP_1(INGRESS_FLID_PARITY_ERROR_INJECTION_0, INGRESS_FLID_PARITY_ERROR_INJECTION_0.actual, 0)
     `RAL_FIELD_CP(INGRESS_FLID_PARITY_ERROR_INJECTION_1, INGRESS_FLID_PARITY_ERROR_INJECTION_1.actual)
     `RAL_FIELD_CP_1(INGRESS_FLID_PARITY_ERROR_INJECTION_1, INGRESS_FLID_PARITY_ERROR_INJECTION_1.actual, 0)
     `RAL_FIELD_CP(ENGPIPE_FLID_PARITY_ERROR_INJECTION, ENGPIPE_FLID_PARITY_ERROR_INJECTION.actual)
     `RAL_FIELD_CP_1(ENGPIPE_FLID_PARITY_ERROR_INJECTION, ENGPIPE_FLID_PARITY_ERROR_INJECTION.actual, 0)
     `RAL_FIELD_CP(EGRESS_WBO_ERROR_INJECTION_0, EGRESS_WBO_ERROR_INJECTION_0.actual)
     `RAL_FIELD_CP_1(EGRESS_WBO_ERROR_INJECTION_0, EGRESS_WBO_ERROR_INJECTION_0.actual, 0)
     `RAL_FIELD_CP(EGRESS_WBO_ERROR_INJECTION_1, EGRESS_WBO_ERROR_INJECTION_1.actual)
     `RAL_FIELD_CP_1(EGRESS_WBO_ERROR_INJECTION_1, EGRESS_WBO_ERROR_INJECTION_1.actual, 0)
     `RAL_FIELD_CP(EGRESS_WBO_ERROR_INJECTION_2, EGRESS_WBO_ERROR_INJECTION_2.actual)
     `RAL_FIELD_CP_1(EGRESS_WBO_ERROR_INJECTION_2, EGRESS_WBO_ERROR_INJECTION_2.actual, 0)
     `RAL_FIELD_CP(EGRESS_WBO_ERROR_INJECTION_3, EGRESS_WBO_ERROR_INJECTION_3.actual)
     `RAL_FIELD_CP_1(EGRESS_WBO_ERROR_INJECTION_3, EGRESS_WBO_ERROR_INJECTION_3.actual, 0)
     `RAL_FIELD_CP(CONTROL, CONTROL.actual)
     `RAL_FIELD_CP_9(CONTROL, CONTROL.actual, 0,1,2,3,4,5,6,7,8)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ENQPIPE_ERROR_INJECTION_L0 = new("ENQPIPE_ERROR_INJECTION_L0", "RW", 1, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[0:0]"});
    ENQPIPE_ERROR_INJECTION_L0.set_powerwell("vcccfn_gated");
    ENQPIPE_ERROR_INJECTION_L0.set_rand_mode(0);
   ENQPIPE_ERROR_INJECTION_L0.set_reset_signame("hqm_inp_gated_rst_n");
    ENQPIPE_ERROR_INJECTION_L0.set_logical_path("HQMID");
    void'(add_field( ENQPIPE_ERROR_INJECTION_L0 ));

    ENQPIPE_ERROR_INJECTION_H0 = new("ENQPIPE_ERROR_INJECTION_H0", "RW", 1, 1, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[1:1]"});
    ENQPIPE_ERROR_INJECTION_H0.set_powerwell("vcccfn_gated");
    ENQPIPE_ERROR_INJECTION_H0.set_rand_mode(0);
   ENQPIPE_ERROR_INJECTION_H0.set_reset_signame("hqm_inp_gated_rst_n");
    ENQPIPE_ERROR_INJECTION_H0.set_logical_path("HQMID");
    void'(add_field( ENQPIPE_ERROR_INJECTION_H0 ));

    ENQPIPE_ERROR_INJECTION_L1 = new("ENQPIPE_ERROR_INJECTION_L1", "RW", 1, 2, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[2:2]"});
    ENQPIPE_ERROR_INJECTION_L1.set_powerwell("vcccfn_gated");
    ENQPIPE_ERROR_INJECTION_L1.set_rand_mode(0);
   ENQPIPE_ERROR_INJECTION_L1.set_reset_signame("hqm_inp_gated_rst_n");
    ENQPIPE_ERROR_INJECTION_L1.set_logical_path("HQMID");
    void'(add_field( ENQPIPE_ERROR_INJECTION_L1 ));

    ENQPIPE_ERROR_INJECTION_H1 = new("ENQPIPE_ERROR_INJECTION_H1", "RW", 1, 3, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[3:3]"});
    ENQPIPE_ERROR_INJECTION_H1.set_powerwell("vcccfn_gated");
    ENQPIPE_ERROR_INJECTION_H1.set_rand_mode(0);
   ENQPIPE_ERROR_INJECTION_H1.set_reset_signame("hqm_inp_gated_rst_n");
    ENQPIPE_ERROR_INJECTION_H1.set_logical_path("HQMID");
    void'(add_field( ENQPIPE_ERROR_INJECTION_H1 ));

    SCHPIPE_ERROR_INJECTION_L0 = new("SCHPIPE_ERROR_INJECTION_L0", "RW", 1, 4, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[4:4]"});
    SCHPIPE_ERROR_INJECTION_L0.set_powerwell("vcccfn_gated");
    SCHPIPE_ERROR_INJECTION_L0.set_rand_mode(0);
   SCHPIPE_ERROR_INJECTION_L0.set_reset_signame("hqm_inp_gated_rst_n");
    SCHPIPE_ERROR_INJECTION_L0.set_logical_path("HQMID");
    void'(add_field( SCHPIPE_ERROR_INJECTION_L0 ));

    SCHPIPE_ERROR_INJECTION_H0 = new("SCHPIPE_ERROR_INJECTION_H0", "RW", 1, 5, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[5:5]"});
    SCHPIPE_ERROR_INJECTION_H0.set_powerwell("vcccfn_gated");
    SCHPIPE_ERROR_INJECTION_H0.set_rand_mode(0);
   SCHPIPE_ERROR_INJECTION_H0.set_reset_signame("hqm_inp_gated_rst_n");
    SCHPIPE_ERROR_INJECTION_H0.set_logical_path("HQMID");
    void'(add_field( SCHPIPE_ERROR_INJECTION_H0 ));

    SCHPIPE_ERROR_INJECTION_L1 = new("SCHPIPE_ERROR_INJECTION_L1", "RW", 1, 6, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[6:6]"});
    SCHPIPE_ERROR_INJECTION_L1.set_powerwell("vcccfn_gated");
    SCHPIPE_ERROR_INJECTION_L1.set_rand_mode(0);
   SCHPIPE_ERROR_INJECTION_L1.set_reset_signame("hqm_inp_gated_rst_n");
    SCHPIPE_ERROR_INJECTION_L1.set_logical_path("HQMID");
    void'(add_field( SCHPIPE_ERROR_INJECTION_L1 ));

    SCHPIPE_ERROR_INJECTION_H1 = new("SCHPIPE_ERROR_INJECTION_H1", "RW", 1, 7, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[7:7]"});
    SCHPIPE_ERROR_INJECTION_H1.set_powerwell("vcccfn_gated");
    SCHPIPE_ERROR_INJECTION_H1.set_rand_mode(0);
   SCHPIPE_ERROR_INJECTION_H1.set_reset_signame("hqm_inp_gated_rst_n");
    SCHPIPE_ERROR_INJECTION_H1.set_logical_path("HQMID");
    void'(add_field( SCHPIPE_ERROR_INJECTION_H1 ));

    EGRESS_ERROR_INJECTION_L0 = new("EGRESS_ERROR_INJECTION_L0", "RW", 1, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[8:8]"});
    EGRESS_ERROR_INJECTION_L0.set_powerwell("vcccfn_gated");
    EGRESS_ERROR_INJECTION_L0.set_rand_mode(0);
   EGRESS_ERROR_INJECTION_L0.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_ERROR_INJECTION_L0.set_logical_path("HQMID");
    void'(add_field( EGRESS_ERROR_INJECTION_L0 ));

    EGRESS_ERROR_INJECTION_H0 = new("EGRESS_ERROR_INJECTION_H0", "RW", 1, 9, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[9:9]"});
    EGRESS_ERROR_INJECTION_H0.set_powerwell("vcccfn_gated");
    EGRESS_ERROR_INJECTION_H0.set_rand_mode(0);
   EGRESS_ERROR_INJECTION_H0.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_ERROR_INJECTION_H0.set_logical_path("HQMID");
    void'(add_field( EGRESS_ERROR_INJECTION_H0 ));

    EGRESS_ERROR_INJECTION_L1 = new("EGRESS_ERROR_INJECTION_L1", "RW", 1, 10, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[10:10]"});
    EGRESS_ERROR_INJECTION_L1.set_powerwell("vcccfn_gated");
    EGRESS_ERROR_INJECTION_L1.set_rand_mode(0);
   EGRESS_ERROR_INJECTION_L1.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_ERROR_INJECTION_L1.set_logical_path("HQMID");
    void'(add_field( EGRESS_ERROR_INJECTION_L1 ));

    EGRESS_ERROR_INJECTION_H1 = new("EGRESS_ERROR_INJECTION_H1", "RW", 1, 11, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[11:11]"});
    EGRESS_ERROR_INJECTION_H1.set_powerwell("vcccfn_gated");
    EGRESS_ERROR_INJECTION_H1.set_rand_mode(0);
   EGRESS_ERROR_INJECTION_H1.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_ERROR_INJECTION_H1.set_logical_path("HQMID");
    void'(add_field( EGRESS_ERROR_INJECTION_H1 ));

    INGRESS_ERROR_INJECTION_L0 = new("INGRESS_ERROR_INJECTION_L0", "RW", 1, 12, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[12:12]"});
    INGRESS_ERROR_INJECTION_L0.set_powerwell("vcccfn_gated");
    INGRESS_ERROR_INJECTION_L0.set_rand_mode(0);
   INGRESS_ERROR_INJECTION_L0.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_ERROR_INJECTION_L0.set_logical_path("HQMID");
    void'(add_field( INGRESS_ERROR_INJECTION_L0 ));

    INGRESS_ERROR_INJECTION_H0 = new("INGRESS_ERROR_INJECTION_H0", "RW", 1, 13, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[13:13]"});
    INGRESS_ERROR_INJECTION_H0.set_powerwell("vcccfn_gated");
    INGRESS_ERROR_INJECTION_H0.set_rand_mode(0);
   INGRESS_ERROR_INJECTION_H0.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_ERROR_INJECTION_H0.set_logical_path("HQMID");
    void'(add_field( INGRESS_ERROR_INJECTION_H0 ));

    INGRESS_ERROR_INJECTION_L1 = new("INGRESS_ERROR_INJECTION_L1", "RW", 1, 14, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[14:14]"});
    INGRESS_ERROR_INJECTION_L1.set_powerwell("vcccfn_gated");
    INGRESS_ERROR_INJECTION_L1.set_rand_mode(0);
   INGRESS_ERROR_INJECTION_L1.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_ERROR_INJECTION_L1.set_logical_path("HQMID");
    void'(add_field( INGRESS_ERROR_INJECTION_L1 ));

    INGRESS_ERROR_INJECTION_H1 = new("INGRESS_ERROR_INJECTION_H1", "RW", 1, 15, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[15:15]"});
    INGRESS_ERROR_INJECTION_H1.set_powerwell("vcccfn_gated");
    INGRESS_ERROR_INJECTION_H1.set_rand_mode(0);
   INGRESS_ERROR_INJECTION_H1.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_ERROR_INJECTION_H1.set_logical_path("HQMID");
    void'(add_field( INGRESS_ERROR_INJECTION_H1 ));

    INGRESS_FLID_PARITY_ERROR_INJECTION_0 = new("INGRESS_FLID_PARITY_ERROR_INJECTION_0", "RW", 1, 16, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[16:16]"});
    INGRESS_FLID_PARITY_ERROR_INJECTION_0.set_powerwell("vcccfn_gated");
    INGRESS_FLID_PARITY_ERROR_INJECTION_0.set_rand_mode(0);
   INGRESS_FLID_PARITY_ERROR_INJECTION_0.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_FLID_PARITY_ERROR_INJECTION_0.set_logical_path("HQMID");
    void'(add_field( INGRESS_FLID_PARITY_ERROR_INJECTION_0 ));

    INGRESS_FLID_PARITY_ERROR_INJECTION_1 = new("INGRESS_FLID_PARITY_ERROR_INJECTION_1", "RW", 1, 17, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[17:17]"});
    INGRESS_FLID_PARITY_ERROR_INJECTION_1.set_powerwell("vcccfn_gated");
    INGRESS_FLID_PARITY_ERROR_INJECTION_1.set_rand_mode(0);
   INGRESS_FLID_PARITY_ERROR_INJECTION_1.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS_FLID_PARITY_ERROR_INJECTION_1.set_logical_path("HQMID");
    void'(add_field( INGRESS_FLID_PARITY_ERROR_INJECTION_1 ));

    ENGPIPE_FLID_PARITY_ERROR_INJECTION = new("ENGPIPE_FLID_PARITY_ERROR_INJECTION", "RW", 1, 18, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[18:18]"});
    ENGPIPE_FLID_PARITY_ERROR_INJECTION.set_powerwell("vcccfn_gated");
    ENGPIPE_FLID_PARITY_ERROR_INJECTION.set_rand_mode(0);
   ENGPIPE_FLID_PARITY_ERROR_INJECTION.set_reset_signame("hqm_inp_gated_rst_n");
    ENGPIPE_FLID_PARITY_ERROR_INJECTION.set_logical_path("HQMID");
    void'(add_field( ENGPIPE_FLID_PARITY_ERROR_INJECTION ));

    EGRESS_WBO_ERROR_INJECTION_0 = new("EGRESS_WBO_ERROR_INJECTION_0", "RW", 1, 19, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[19:19]"});
    EGRESS_WBO_ERROR_INJECTION_0.set_powerwell("vcccfn_gated");
    EGRESS_WBO_ERROR_INJECTION_0.set_rand_mode(0);
   EGRESS_WBO_ERROR_INJECTION_0.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_WBO_ERROR_INJECTION_0.set_logical_path("HQMID");
    void'(add_field( EGRESS_WBO_ERROR_INJECTION_0 ));

    EGRESS_WBO_ERROR_INJECTION_1 = new("EGRESS_WBO_ERROR_INJECTION_1", "RW", 1, 20, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[20:20]"});
    EGRESS_WBO_ERROR_INJECTION_1.set_powerwell("vcccfn_gated");
    EGRESS_WBO_ERROR_INJECTION_1.set_rand_mode(0);
   EGRESS_WBO_ERROR_INJECTION_1.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_WBO_ERROR_INJECTION_1.set_logical_path("HQMID");
    void'(add_field( EGRESS_WBO_ERROR_INJECTION_1 ));

    EGRESS_WBO_ERROR_INJECTION_2 = new("EGRESS_WBO_ERROR_INJECTION_2", "RW", 1, 21, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[21:21]"});
    EGRESS_WBO_ERROR_INJECTION_2.set_powerwell("vcccfn_gated");
    EGRESS_WBO_ERROR_INJECTION_2.set_rand_mode(0);
   EGRESS_WBO_ERROR_INJECTION_2.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_WBO_ERROR_INJECTION_2.set_logical_path("HQMID");
    void'(add_field( EGRESS_WBO_ERROR_INJECTION_2 ));

    EGRESS_WBO_ERROR_INJECTION_3 = new("EGRESS_WBO_ERROR_INJECTION_3", "RW", 1, 22, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[22:22]"});
    EGRESS_WBO_ERROR_INJECTION_3.set_powerwell("vcccfn_gated");
    EGRESS_WBO_ERROR_INJECTION_3.set_rand_mode(0);
   EGRESS_WBO_ERROR_INJECTION_3.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS_WBO_ERROR_INJECTION_3.set_logical_path("HQMID");
    void'(add_field( EGRESS_WBO_ERROR_INJECTION_3 ));

    CONTROL = new("CONTROL", "RW", 9, 23, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[31:23]"});
    CONTROL.set_powerwell("vcccfn_gated");
    CONTROL.set_rand_mode(0);
   CONTROL.set_reset_signame("hqm_inp_gated_rst_n");
    CONTROL.set_logical_path("HQMID");
    void'(add_field( CONTROL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_02_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_02_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LDB_WD_PIPE_STATUS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LDB_WD_PIPE_STATUS, LDB_WD_PIPE_STATUS.desired)
     `RAL_FIELD_CP_16(LDB_WD_PIPE_STATUS, LDB_WD_PIPE_STATUS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(LDB_WD_PIPE_STATUS, LDB_WD_PIPE_STATUS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LDB_WD_PIPE_STATUS, LDB_WD_PIPE_STATUS.actual)
     `RAL_FIELD_CP_16(LDB_WD_PIPE_STATUS, LDB_WD_PIPE_STATUS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(LDB_WD_PIPE_STATUS, LDB_WD_PIPE_STATUS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LDB_WD_PIPE_STATUS = new("LDB_WD_PIPE_STATUS", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_db_fifo_status_0.status[31:0]"});
    LDB_WD_PIPE_STATUS.set_powerwell("vcccfn_gated");
    LDB_WD_PIPE_STATUS.set_rand_mode(0);
   LDB_WD_PIPE_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_WD_PIPE_STATUS.set_logical_path("HQMID");
    void'(add_field( LDB_WD_PIPE_STATUS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DIR_WD_PIPE_STATUS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR_WD_PIPE_STATUS, DIR_WD_PIPE_STATUS.desired)
     `RAL_FIELD_CP_16(DIR_WD_PIPE_STATUS, DIR_WD_PIPE_STATUS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DIR_WD_PIPE_STATUS, DIR_WD_PIPE_STATUS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR_WD_PIPE_STATUS, DIR_WD_PIPE_STATUS.actual)
     `RAL_FIELD_CP_16(DIR_WD_PIPE_STATUS, DIR_WD_PIPE_STATUS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DIR_WD_PIPE_STATUS, DIR_WD_PIPE_STATUS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DIR_WD_PIPE_STATUS = new("DIR_WD_PIPE_STATUS", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_db_fifo_status_1.status[31:0]"});
    DIR_WD_PIPE_STATUS.set_powerwell("vcccfn_gated");
    DIR_WD_PIPE_STATUS.set_rand_mode(0);
   DIR_WD_PIPE_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_WD_PIPE_STATUS.set_logical_path("HQMID");
    void'(add_field( DIR_WD_PIPE_STATUS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LDB_CIAL_PIPE_STATUS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LDB_CIAL_PIPE_STATUS, LDB_CIAL_PIPE_STATUS.desired)
     `RAL_FIELD_CP_16(LDB_CIAL_PIPE_STATUS, LDB_CIAL_PIPE_STATUS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(LDB_CIAL_PIPE_STATUS, LDB_CIAL_PIPE_STATUS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LDB_CIAL_PIPE_STATUS, LDB_CIAL_PIPE_STATUS.actual)
     `RAL_FIELD_CP_16(LDB_CIAL_PIPE_STATUS, LDB_CIAL_PIPE_STATUS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(LDB_CIAL_PIPE_STATUS, LDB_CIAL_PIPE_STATUS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LDB_CIAL_PIPE_STATUS = new("LDB_CIAL_PIPE_STATUS", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_db_fifo_status_2.status[31:0]"});
    LDB_CIAL_PIPE_STATUS.set_powerwell("vcccfn_gated");
    LDB_CIAL_PIPE_STATUS.set_rand_mode(0);
   LDB_CIAL_PIPE_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CIAL_PIPE_STATUS.set_logical_path("HQMID");
    void'(add_field( LDB_CIAL_PIPE_STATUS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_2_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_2_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_3_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DIR_CIAL_PIPE_STATUS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_3_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR_CIAL_PIPE_STATUS, DIR_CIAL_PIPE_STATUS.desired)
     `RAL_FIELD_CP_16(DIR_CIAL_PIPE_STATUS, DIR_CIAL_PIPE_STATUS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DIR_CIAL_PIPE_STATUS, DIR_CIAL_PIPE_STATUS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR_CIAL_PIPE_STATUS, DIR_CIAL_PIPE_STATUS.actual)
     `RAL_FIELD_CP_16(DIR_CIAL_PIPE_STATUS, DIR_CIAL_PIPE_STATUS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DIR_CIAL_PIPE_STATUS, DIR_CIAL_PIPE_STATUS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DIR_CIAL_PIPE_STATUS = new("DIR_CIAL_PIPE_STATUS", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_db_fifo_status_3.status[31:0]"});
    DIR_CIAL_PIPE_STATUS.set_powerwell("vcccfn_gated");
    DIR_CIAL_PIPE_STATUS.set_rand_mode(0);
   DIR_CIAL_PIPE_STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_CIAL_PIPE_STATUS.set_logical_path("HQMID");
    void'(add_field( DIR_CIAL_PIPE_STATUS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_3_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_3_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field STATUS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(STATUS, STATUS.desired)
     `RAL_FIELD_CP_16(STATUS, STATUS.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(STATUS, STATUS.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(STATUS, STATUS.actual)
     `RAL_FIELD_CP_16(STATUS, STATUS.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(STATUS, STATUS.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    STATUS = new("STATUS", "RO/V", 32, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_diagnostic_aw_status_0.status[31:0]"});
    STATUS.set_powerwell("vcccfn_gated");
    STATUS.set_rand_mode(0);
   STATUS.set_reset_signame("hqm_inp_gated_rst_n");
    STATUS.set_logical_path("HQMID");
    void'(add_field( STATUS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field DUTY;
  sla_ral_field PERIOD;
  sla_ral_field PROB1ST;
  sla_ral_field PROB2ND;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(DUTY, DUTY.desired)
     `RAL_FIELD_CP_3(DUTY, DUTY.desired, 0,1,2)
     `RAL_FIELD_CP(PERIOD, PERIOD.desired)
     `RAL_FIELD_CP_11(PERIOD, PERIOD.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(PROB1ST, PROB1ST.desired)
     `RAL_FIELD_CP_8(PROB1ST, PROB1ST.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PROB2ND, PROB2ND.desired)
     `RAL_FIELD_CP_8(PROB2ND, PROB2ND.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(DUTY, DUTY.actual)
     `RAL_FIELD_CP_3(DUTY, DUTY.actual, 0,1,2)
     `RAL_FIELD_CP(PERIOD, PERIOD.actual)
     `RAL_FIELD_CP_11(PERIOD, PERIOD.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(PROB1ST, PROB1ST.actual)
     `RAL_FIELD_CP_8(PROB1ST, PROB1ST.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PROB2ND, PROB2ND.actual)
     `RAL_FIELD_CP_8(PROB2ND, PROB2ND.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_control.internal_f[1:0]"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    DUTY = new("DUTY", "RW", 3, 2, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_control.internal_f[4:2]"});
    DUTY.set_powerwell("vcccfn_gated");
    DUTY.set_rand_mode(0);
   DUTY.set_reset_signame("hqm_inp_gated_rst_n");
    DUTY.set_logical_path("HQMID");
    void'(add_field( DUTY ));

    PERIOD = new("PERIOD", "RW", 11, 5, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_control.internal_f[15:5]"});
    PERIOD.set_powerwell("vcccfn_gated");
    PERIOD.set_rand_mode(0);
   PERIOD.set_reset_signame("hqm_inp_gated_rst_n");
    PERIOD.set_logical_path("HQMID");
    void'(add_field( PERIOD ));

    PROB1ST = new("PROB1ST", "RW", 8, 16, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_control.internal_f[23:16]"});
    PROB1ST.set_powerwell("vcccfn_gated");
    PROB1ST.set_rand_mode(0);
   PROB1ST.set_reset_signame("hqm_inp_gated_rst_n");
    PROB1ST.set_logical_path("HQMID");
    void'(add_field( PROB1ST ));

    PROB2ND = new("PROB2ND", "RW", 8, 24, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_control.internal_f[31:24]"});
    PROB2ND.set_powerwell("vcccfn_gated");
    PROB2ND.set_rand_mode(0);
   PROB2ND.set_reset_signame("hqm_inp_gated_rst_n");
    PROB2ND.set_logical_path("HQMID");
    void'(add_field( PROB2ND ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_SELECT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field AGG_IF_00;
  sla_ral_field AGG_IF_01;
  sla_ral_field AGG_IF_02;
  sla_ral_field AGG_IF_03;
  sla_ral_field AGG_IF_04;
  sla_ral_field AGG_IF_05;
  sla_ral_field AGG_IF_06;
  sla_ral_field AGG_IF_07;
  sla_ral_field AGG_IF_08;
  sla_ral_field AGG_IF_09;
  sla_ral_field AGG_IF_10;
  sla_ral_field AGG_IF_11;
  sla_ral_field AGG_IF_12;
  sla_ral_field AGG_IF_13;
  sla_ral_field AGG_IF_14;
  sla_ral_field AGG_IF_15;
  sla_ral_field RSVZ;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_SELECT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AGG_IF_00, AGG_IF_00.desired)
     `RAL_FIELD_CP_1(AGG_IF_00, AGG_IF_00.desired, 0)
     `RAL_FIELD_CP(AGG_IF_01, AGG_IF_01.desired)
     `RAL_FIELD_CP_1(AGG_IF_01, AGG_IF_01.desired, 0)
     `RAL_FIELD_CP(AGG_IF_02, AGG_IF_02.desired)
     `RAL_FIELD_CP_1(AGG_IF_02, AGG_IF_02.desired, 0)
     `RAL_FIELD_CP(AGG_IF_03, AGG_IF_03.desired)
     `RAL_FIELD_CP_1(AGG_IF_03, AGG_IF_03.desired, 0)
     `RAL_FIELD_CP(AGG_IF_04, AGG_IF_04.desired)
     `RAL_FIELD_CP_1(AGG_IF_04, AGG_IF_04.desired, 0)
     `RAL_FIELD_CP(AGG_IF_05, AGG_IF_05.desired)
     `RAL_FIELD_CP_1(AGG_IF_05, AGG_IF_05.desired, 0)
     `RAL_FIELD_CP(AGG_IF_06, AGG_IF_06.desired)
     `RAL_FIELD_CP_1(AGG_IF_06, AGG_IF_06.desired, 0)
     `RAL_FIELD_CP(AGG_IF_07, AGG_IF_07.desired)
     `RAL_FIELD_CP_1(AGG_IF_07, AGG_IF_07.desired, 0)
     `RAL_FIELD_CP(AGG_IF_08, AGG_IF_08.desired)
     `RAL_FIELD_CP_1(AGG_IF_08, AGG_IF_08.desired, 0)
     `RAL_FIELD_CP(AGG_IF_09, AGG_IF_09.desired)
     `RAL_FIELD_CP_1(AGG_IF_09, AGG_IF_09.desired, 0)
     `RAL_FIELD_CP(AGG_IF_10, AGG_IF_10.desired)
     `RAL_FIELD_CP_1(AGG_IF_10, AGG_IF_10.desired, 0)
     `RAL_FIELD_CP(AGG_IF_11, AGG_IF_11.desired)
     `RAL_FIELD_CP_1(AGG_IF_11, AGG_IF_11.desired, 0)
     `RAL_FIELD_CP(AGG_IF_12, AGG_IF_12.desired)
     `RAL_FIELD_CP_1(AGG_IF_12, AGG_IF_12.desired, 0)
     `RAL_FIELD_CP(AGG_IF_13, AGG_IF_13.desired)
     `RAL_FIELD_CP_1(AGG_IF_13, AGG_IF_13.desired, 0)
     `RAL_FIELD_CP(AGG_IF_14, AGG_IF_14.desired)
     `RAL_FIELD_CP_1(AGG_IF_14, AGG_IF_14.desired, 0)
     `RAL_FIELD_CP(AGG_IF_15, AGG_IF_15.desired)
     `RAL_FIELD_CP_1(AGG_IF_15, AGG_IF_15.desired, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.desired)
     `RAL_FIELD_CP_16(RSVZ, RSVZ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AGG_IF_00, AGG_IF_00.actual)
     `RAL_FIELD_CP_1(AGG_IF_00, AGG_IF_00.actual, 0)
     `RAL_FIELD_CP(AGG_IF_01, AGG_IF_01.actual)
     `RAL_FIELD_CP_1(AGG_IF_01, AGG_IF_01.actual, 0)
     `RAL_FIELD_CP(AGG_IF_02, AGG_IF_02.actual)
     `RAL_FIELD_CP_1(AGG_IF_02, AGG_IF_02.actual, 0)
     `RAL_FIELD_CP(AGG_IF_03, AGG_IF_03.actual)
     `RAL_FIELD_CP_1(AGG_IF_03, AGG_IF_03.actual, 0)
     `RAL_FIELD_CP(AGG_IF_04, AGG_IF_04.actual)
     `RAL_FIELD_CP_1(AGG_IF_04, AGG_IF_04.actual, 0)
     `RAL_FIELD_CP(AGG_IF_05, AGG_IF_05.actual)
     `RAL_FIELD_CP_1(AGG_IF_05, AGG_IF_05.actual, 0)
     `RAL_FIELD_CP(AGG_IF_06, AGG_IF_06.actual)
     `RAL_FIELD_CP_1(AGG_IF_06, AGG_IF_06.actual, 0)
     `RAL_FIELD_CP(AGG_IF_07, AGG_IF_07.actual)
     `RAL_FIELD_CP_1(AGG_IF_07, AGG_IF_07.actual, 0)
     `RAL_FIELD_CP(AGG_IF_08, AGG_IF_08.actual)
     `RAL_FIELD_CP_1(AGG_IF_08, AGG_IF_08.actual, 0)
     `RAL_FIELD_CP(AGG_IF_09, AGG_IF_09.actual)
     `RAL_FIELD_CP_1(AGG_IF_09, AGG_IF_09.actual, 0)
     `RAL_FIELD_CP(AGG_IF_10, AGG_IF_10.actual)
     `RAL_FIELD_CP_1(AGG_IF_10, AGG_IF_10.actual, 0)
     `RAL_FIELD_CP(AGG_IF_11, AGG_IF_11.actual)
     `RAL_FIELD_CP_1(AGG_IF_11, AGG_IF_11.actual, 0)
     `RAL_FIELD_CP(AGG_IF_12, AGG_IF_12.actual)
     `RAL_FIELD_CP_1(AGG_IF_12, AGG_IF_12.actual, 0)
     `RAL_FIELD_CP(AGG_IF_13, AGG_IF_13.actual)
     `RAL_FIELD_CP_1(AGG_IF_13, AGG_IF_13.actual, 0)
     `RAL_FIELD_CP(AGG_IF_14, AGG_IF_14.actual)
     `RAL_FIELD_CP_1(AGG_IF_14, AGG_IF_14.actual, 0)
     `RAL_FIELD_CP(AGG_IF_15, AGG_IF_15.actual)
     `RAL_FIELD_CP_1(AGG_IF_15, AGG_IF_15.actual, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.actual)
     `RAL_FIELD_CP_16(RSVZ, RSVZ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    AGG_IF_00 = new("AGG_IF_00", "RW", 1, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[0:0]"});
    AGG_IF_00.set_powerwell("vcccfn_gated");
    AGG_IF_00.set_rand_mode(0);
   AGG_IF_00.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_00.set_logical_path("HQMID");
    void'(add_field( AGG_IF_00 ));

    AGG_IF_01 = new("AGG_IF_01", "RW", 1, 1, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[1:1]"});
    AGG_IF_01.set_powerwell("vcccfn_gated");
    AGG_IF_01.set_rand_mode(0);
   AGG_IF_01.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_01.set_logical_path("HQMID");
    void'(add_field( AGG_IF_01 ));

    AGG_IF_02 = new("AGG_IF_02", "RW", 1, 2, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[2:2]"});
    AGG_IF_02.set_powerwell("vcccfn_gated");
    AGG_IF_02.set_rand_mode(0);
   AGG_IF_02.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_02.set_logical_path("HQMID");
    void'(add_field( AGG_IF_02 ));

    AGG_IF_03 = new("AGG_IF_03", "RW", 1, 3, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[3:3]"});
    AGG_IF_03.set_powerwell("vcccfn_gated");
    AGG_IF_03.set_rand_mode(0);
   AGG_IF_03.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_03.set_logical_path("HQMID");
    void'(add_field( AGG_IF_03 ));

    AGG_IF_04 = new("AGG_IF_04", "RW", 1, 4, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[4:4]"});
    AGG_IF_04.set_powerwell("vcccfn_gated");
    AGG_IF_04.set_rand_mode(0);
   AGG_IF_04.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_04.set_logical_path("HQMID");
    void'(add_field( AGG_IF_04 ));

    AGG_IF_05 = new("AGG_IF_05", "RW", 1, 5, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[5:5]"});
    AGG_IF_05.set_powerwell("vcccfn_gated");
    AGG_IF_05.set_rand_mode(0);
   AGG_IF_05.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_05.set_logical_path("HQMID");
    void'(add_field( AGG_IF_05 ));

    AGG_IF_06 = new("AGG_IF_06", "RW", 1, 6, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[6:6]"});
    AGG_IF_06.set_powerwell("vcccfn_gated");
    AGG_IF_06.set_rand_mode(0);
   AGG_IF_06.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_06.set_logical_path("HQMID");
    void'(add_field( AGG_IF_06 ));

    AGG_IF_07 = new("AGG_IF_07", "RW", 1, 7, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[7:7]"});
    AGG_IF_07.set_powerwell("vcccfn_gated");
    AGG_IF_07.set_rand_mode(0);
   AGG_IF_07.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_07.set_logical_path("HQMID");
    void'(add_field( AGG_IF_07 ));

    AGG_IF_08 = new("AGG_IF_08", "RW", 1, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[8:8]"});
    AGG_IF_08.set_powerwell("vcccfn_gated");
    AGG_IF_08.set_rand_mode(0);
   AGG_IF_08.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_08.set_logical_path("HQMID");
    void'(add_field( AGG_IF_08 ));

    AGG_IF_09 = new("AGG_IF_09", "RW", 1, 9, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[9:9]"});
    AGG_IF_09.set_powerwell("vcccfn_gated");
    AGG_IF_09.set_rand_mode(0);
   AGG_IF_09.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_09.set_logical_path("HQMID");
    void'(add_field( AGG_IF_09 ));

    AGG_IF_10 = new("AGG_IF_10", "RW", 1, 10, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[10:10]"});
    AGG_IF_10.set_powerwell("vcccfn_gated");
    AGG_IF_10.set_rand_mode(0);
   AGG_IF_10.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_10.set_logical_path("HQMID");
    void'(add_field( AGG_IF_10 ));

    AGG_IF_11 = new("AGG_IF_11", "RW", 1, 11, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[11:11]"});
    AGG_IF_11.set_powerwell("vcccfn_gated");
    AGG_IF_11.set_rand_mode(0);
   AGG_IF_11.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_11.set_logical_path("HQMID");
    void'(add_field( AGG_IF_11 ));

    AGG_IF_12 = new("AGG_IF_12", "RW", 1, 12, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[12:12]"});
    AGG_IF_12.set_powerwell("vcccfn_gated");
    AGG_IF_12.set_rand_mode(0);
   AGG_IF_12.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_12.set_logical_path("HQMID");
    void'(add_field( AGG_IF_12 ));

    AGG_IF_13 = new("AGG_IF_13", "RW", 1, 13, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[13:13]"});
    AGG_IF_13.set_powerwell("vcccfn_gated");
    AGG_IF_13.set_rand_mode(0);
   AGG_IF_13.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_13.set_logical_path("HQMID");
    void'(add_field( AGG_IF_13 ));

    AGG_IF_14 = new("AGG_IF_14", "RW", 1, 14, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[14:14]"});
    AGG_IF_14.set_powerwell("vcccfn_gated");
    AGG_IF_14.set_rand_mode(0);
   AGG_IF_14.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_14.set_logical_path("HQMID");
    void'(add_field( AGG_IF_14 ));

    AGG_IF_15 = new("AGG_IF_15", "RW", 1, 15, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[15:15]"});
    AGG_IF_15.set_powerwell("vcccfn_gated");
    AGG_IF_15.set_rand_mode(0);
   AGG_IF_15.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_15.set_logical_path("HQMID");
    void'(add_field( AGG_IF_15 ));

    RSVZ = new("RSVZ", "RW", 16, 16, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[31:16]"});
    RSVZ.set_powerwell("vcccfn_gated");
    RSVZ.set_rand_mode(0);
   RSVZ.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ.set_logical_path("HQMID");
    void'(add_field( RSVZ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_SELECT_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_SELECT_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field OUTPUTDRAIN;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(OUTPUTDRAIN, OUTPUTDRAIN.desired)
     `RAL_FIELD_CP_1(OUTPUTDRAIN, OUTPUTDRAIN.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(OUTPUTDRAIN, OUTPUTDRAIN.actual)
     `RAL_FIELD_CP_1(OUTPUTDRAIN, OUTPUTDRAIN.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    OUTPUTDRAIN = new("OUTPUTDRAIN", "RO/V", 1, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_hold.status[0:0]"});
    OUTPUTDRAIN.set_powerwell("vcccfn_gated");
    OUTPUTDRAIN.set_rand_mode(0);
   OUTPUTDRAIN.set_reset_signame("hqm_inp_gated_rst_n");
    OUTPUTDRAIN.set_logical_path("HQMID");
    void'(add_field( OUTPUTDRAIN ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SCHPIPE;
  sla_ral_field ENQPIPE;
  sla_ral_field ARB;
  sla_ral_field EGRESS;
  sla_ral_field INGRESS;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCHPIPE, SCHPIPE.desired)
     `RAL_FIELD_CP_1(SCHPIPE, SCHPIPE.desired, 0)
     `RAL_FIELD_CP(ENQPIPE, ENQPIPE.desired)
     `RAL_FIELD_CP_1(ENQPIPE, ENQPIPE.desired, 0)
     `RAL_FIELD_CP(ARB, ARB.desired)
     `RAL_FIELD_CP_1(ARB, ARB.desired, 0)
     `RAL_FIELD_CP(EGRESS, EGRESS.desired)
     `RAL_FIELD_CP_1(EGRESS, EGRESS.desired, 0)
     `RAL_FIELD_CP(INGRESS, INGRESS.desired)
     `RAL_FIELD_CP_1(INGRESS, INGRESS.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCHPIPE, SCHPIPE.actual)
     `RAL_FIELD_CP_1(SCHPIPE, SCHPIPE.actual, 0)
     `RAL_FIELD_CP(ENQPIPE, ENQPIPE.actual)
     `RAL_FIELD_CP_1(ENQPIPE, ENQPIPE.actual, 0)
     `RAL_FIELD_CP(ARB, ARB.actual)
     `RAL_FIELD_CP_1(ARB, ARB.actual, 0)
     `RAL_FIELD_CP(EGRESS, EGRESS.actual)
     `RAL_FIELD_CP_1(EGRESS, EGRESS.actual, 0)
     `RAL_FIELD_CP(INGRESS, INGRESS.actual)
     `RAL_FIELD_CP_1(INGRESS, INGRESS.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SCHPIPE = new("SCHPIPE", "RO/V", 1, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_valid.status[0:0]"});
    SCHPIPE.set_powerwell("vcccfn_gated");
    SCHPIPE.set_rand_mode(0);
   SCHPIPE.set_reset_signame("hqm_inp_gated_rst_n");
    SCHPIPE.set_logical_path("HQMID");
    void'(add_field( SCHPIPE ));

    ENQPIPE = new("ENQPIPE", "RO/V", 1, 1, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_valid.status[1:1]"});
    ENQPIPE.set_powerwell("vcccfn_gated");
    ENQPIPE.set_rand_mode(0);
   ENQPIPE.set_reset_signame("hqm_inp_gated_rst_n");
    ENQPIPE.set_logical_path("HQMID");
    void'(add_field( ENQPIPE ));

    ARB = new("ARB", "RO/V", 1, 2, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_valid.status[2:2]"});
    ARB.set_powerwell("vcccfn_gated");
    ARB.set_rand_mode(0);
   ARB.set_reset_signame("hqm_inp_gated_rst_n");
    ARB.set_logical_path("HQMID");
    void'(add_field( ARB ));

    EGRESS = new("EGRESS", "RO/V", 1, 3, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_valid.status[3:3]"});
    EGRESS.set_powerwell("vcccfn_gated");
    EGRESS.set_rand_mode(0);
   EGRESS.set_reset_signame("hqm_inp_gated_rst_n");
    EGRESS.set_logical_path("HQMID");
    void'(add_field( EGRESS ));

    INGRESS = new("INGRESS", "RO/V", 1, 4, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_valid.status[4:4]"});
    INGRESS.set_powerwell("vcccfn_gated");
    INGRESS.set_rand_mode(0);
   INGRESS.set_reset_signame("hqm_inp_gated_rst_n");
    INGRESS.set_logical_path("HQMID");
    void'(add_field( INGRESS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_SYNDROME_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDDATA;
  sla_ral_field SYNDTYPE;
  sla_ral_field SYNDVALID;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_SYNDROME_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.desired)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.desired)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.desired, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.desired)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.actual)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.actual)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.actual, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.actual)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDDATA = new("SYNDDATA", "RO/V", 28, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
    SYNDDATA.set_powerwell("vcccfn_gated");
    SYNDDATA.set_rand_mode(0);
   SYNDDATA.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDDATA.set_logical_path("HQMID");
    void'(add_field( SYNDDATA ));

    SYNDTYPE = new("SYNDTYPE", "RO/V", 3, 28, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
    SYNDTYPE.set_powerwell("vcccfn_gated");
    SYNDTYPE.set_rand_mode(0);
   SYNDTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDTYPE.set_logical_path("HQMID");
    void'(add_field( SYNDTYPE ));

    SYNDVALID = new("SYNDVALID", "RW/1C/V", 1, 31, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[31:31]"});
    SYNDVALID.set_powerwell("vcccfn_gated");
    SYNDVALID.set_rand_mode(0);
   SYNDVALID.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDVALID.set_logical_path("HQMID");
    void'(add_field( SYNDVALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_SYNDROME_01_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_SYNDROME_01_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_UNIT_IDLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PIPE_IDLE;
  sla_ral_field UNIT_IDLE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_UNIT_IDLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PIPE_IDLE, PIPE_IDLE.desired)
     `RAL_FIELD_CP_1(PIPE_IDLE, PIPE_IDLE.desired, 0)
     `RAL_FIELD_CP(UNIT_IDLE, UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(UNIT_IDLE, UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PIPE_IDLE, PIPE_IDLE.actual)
     `RAL_FIELD_CP_1(PIPE_IDLE, PIPE_IDLE.actual, 0)
     `RAL_FIELD_CP(UNIT_IDLE, UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(UNIT_IDLE, UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PIPE_IDLE = new("PIPE_IDLE", "RO/V", 1, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_idle.internal_f[0:0]"});
    PIPE_IDLE.set_powerwell("vcccfn_gated");
    PIPE_IDLE.set_rand_mode(0);
   PIPE_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    PIPE_IDLE.set_logical_path("HQMID");
    void'(add_field( PIPE_IDLE ));

    UNIT_IDLE = new("UNIT_IDLE", "RO/V", 1, 1, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_idle.internal_f[1:1]"});
    UNIT_IDLE.set_powerwell("vcccfn_gated");
    UNIT_IDLE.set_rand_mode(0);
   UNIT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( UNIT_IDLE ));

    RSVZ0 = new("RSVZ0", "RO/V", 30, 2, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_idle.internal_f[31:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_UNIT_IDLE_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_UNIT_IDLE_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_UNIT_TIMEOUT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MULTIPLIER;
  sla_ral_field THRESHOLD;
  sla_ral_field RSVZ0;
  sla_ral_field ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_UNIT_TIMEOUT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.desired)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.desired)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.desired)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.actual)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.actual)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.actual)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MULTIPLIER = new("MULTIPLIER", "RO", 5, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_timeout.internal_f[4:0]"});
    MULTIPLIER.set_powerwell("vcccfn_gated");
    MULTIPLIER.set_rand_mode(0);
   MULTIPLIER.set_reset_signame("hqm_inp_gated_rst_n");
    MULTIPLIER.set_logical_path("HQMID");
    void'(add_field( MULTIPLIER ));

    THRESHOLD = new("THRESHOLD", "RW", 11, 5, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_timeout.internal_f[15:5]"});
    THRESHOLD.set_powerwell("vcccfn_gated");
    THRESHOLD.set_rand_mode(0);
   THRESHOLD.set_reset_signame("hqm_inp_gated_rst_n");
    THRESHOLD.set_logical_path("HQMID");
    void'(add_field( THRESHOLD ));

    RSVZ0 = new("RSVZ0", "RW/V", 15, 16, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_timeout.internal_f[30:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    ENABLE = new("ENABLE", "RW", 1, 31, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_timeout.internal_f[31:31]"});
    ENABLE.set_powerwell("vcccfn_gated");
    ENABLE.set_rand_mode(0);
   ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE.set_logical_path("HQMID");
    void'(add_field( ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_UNIT_TIMEOUT_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_UNIT_TIMEOUT_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_PATCH_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DELAY_CLOCKOFF;
  sla_ral_field DELAY_CLKOFF_BYPASS;
  sla_ral_field RSVZ1;
  sla_ral_field RSVZ0;
  sla_ral_field DISABLE_CLOCKOFF;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_PATCH_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.desired, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.actual, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DELAY_CLOCKOFF = new("DELAY_CLOCKOFF", "RW", 8, 0, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_patch_control.internal_f[7:0]"});
    DELAY_CLOCKOFF.set_powerwell("vcccfn_gated");
    DELAY_CLOCKOFF.set_rand_mode(0);
   DELAY_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DELAY_CLOCKOFF ));

    DELAY_CLKOFF_BYPASS = new("DELAY_CLKOFF_BYPASS", "RW", 6, 8, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_patch_control.internal_f[13:8]"});
    DELAY_CLKOFF_BYPASS.set_powerwell("vcccfn_gated");
    DELAY_CLKOFF_BYPASS.set_rand_mode(0);
   DELAY_CLKOFF_BYPASS.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLKOFF_BYPASS.set_logical_path("HQMID");
    void'(add_field( DELAY_CLKOFF_BYPASS ));

    RSVZ1 = new("RSVZ1", "RW", 2, 14, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_patch_control.internal_f[15:14]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    RSVZ0 = new("RSVZ0", "RW", 15, 16, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_patch_control.internal_f[30:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    DISABLE_CLOCKOFF = new("DISABLE_CLOCKOFF", "RW", 1, 31, {"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_patch_control.internal_f[31:31]"});
    DISABLE_CLOCKOFF.set_powerwell("vcccfn_gated");
    DISABLE_CLOCKOFF.set_rand_mode(0);
   DISABLE_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DISABLE_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DISABLE_CLOCKOFF ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_PATCH_CONTROL_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_PATCH_CONTROL_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SN_FID;
  sla_ral_field SLOT;
  sla_ral_field MODE;
  sla_ral_field QIDIX;
  sla_ral_field QID;
  sla_ral_field QPRIO;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN_FID, SN_FID.desired)
     `RAL_FIELD_CP_12(SN_FID, SN_FID.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
     `RAL_FIELD_CP(SLOT, SLOT.desired)
     `RAL_FIELD_CP_5(SLOT, SLOT.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_3(MODE, MODE.desired, 0,1,2)
     `RAL_FIELD_CP(QIDIX, QIDIX.desired)
     `RAL_FIELD_CP_3(QIDIX, QIDIX.desired, 0,1,2)
     `RAL_FIELD_CP(QID, QID.desired)
     `RAL_FIELD_CP_7(QID, QID.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QPRIO, QPRIO.desired)
     `RAL_FIELD_CP_2(QPRIO, QPRIO.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SN_FID, SN_FID.actual)
     `RAL_FIELD_CP_12(SN_FID, SN_FID.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
     `RAL_FIELD_CP(SLOT, SLOT.actual)
     `RAL_FIELD_CP_5(SLOT, SLOT.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_3(MODE, MODE.actual, 0,1,2)
     `RAL_FIELD_CP(QIDIX, QIDIX.actual)
     `RAL_FIELD_CP_3(QIDIX, QIDIX.actual, 0,1,2)
     `RAL_FIELD_CP(QID, QID.actual)
     `RAL_FIELD_CP_7(QID, QID.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QPRIO, QPRIO.actual)
     `RAL_FIELD_CP_2(QPRIO, QPRIO.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SN_FID = new("SN_FID", "RO/V", 12, 0, {""});
    SN_FID.set_powerwell("vcccfn_gated");
    SN_FID.set_rand_mode(0);
   SN_FID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SN_FID ));

    SLOT = new("SLOT", "RO/V", 5, 12, {""});
    SLOT.set_powerwell("vcccfn_gated");
    SLOT.set_rand_mode(0);
   SLOT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( SLOT ));

    MODE = new("MODE", "RO/V", 3, 17, {""});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( MODE ));

    QIDIX = new("QIDIX", "RO/V", 3, 20, {""});
    QIDIX.set_powerwell("vcccfn_gated");
    QIDIX.set_rand_mode(0);
   QIDIX.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QIDIX ));

    QID = new("QID", "RO/V", 7, 23, {""});
    QID.set_powerwell("vcccfn_gated");
    QID.set_rand_mode(0);
   QID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID ));

    QPRIO = new("QPRIO", "RO/V", 2, 30, {""});
    QPRIO.set_powerwell("vcccfn_gated");
    QPRIO.set_rand_mode(0);
   QPRIO.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QPRIO ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_0_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_0_reg

// ================================================

class hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QPRIO_2;
  sla_ral_field QTYPE;
  sla_ral_field MEAS;
  sla_ral_field CMP_ID;
  sla_ral_field HID;
  sla_ral_field QE_WT;

  // --------------------------
  `ovm_object_utils(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QPRIO_2, QPRIO_2.desired)
     `RAL_FIELD_CP_1(QPRIO_2, QPRIO_2.desired, 0)
     `RAL_FIELD_CP(QTYPE, QTYPE.desired)
     `RAL_FIELD_CP_2(QTYPE, QTYPE.desired, 0,1)
     `RAL_FIELD_CP(MEAS, MEAS.desired)
     `RAL_FIELD_CP_1(MEAS, MEAS.desired, 0)
     `RAL_FIELD_CP(CMP_ID, CMP_ID.desired)
     `RAL_FIELD_CP_4(CMP_ID, CMP_ID.desired, 0,1,2,3)
     `RAL_FIELD_CP(HID, HID.desired)
     `RAL_FIELD_CP_16(HID, HID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(QE_WT, QE_WT.desired)
     `RAL_FIELD_CP_2(QE_WT, QE_WT.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QPRIO_2, QPRIO_2.actual)
     `RAL_FIELD_CP_1(QPRIO_2, QPRIO_2.actual, 0)
     `RAL_FIELD_CP(QTYPE, QTYPE.actual)
     `RAL_FIELD_CP_2(QTYPE, QTYPE.actual, 0,1)
     `RAL_FIELD_CP(MEAS, MEAS.actual)
     `RAL_FIELD_CP_1(MEAS, MEAS.actual, 0)
     `RAL_FIELD_CP(CMP_ID, CMP_ID.actual)
     `RAL_FIELD_CP_4(CMP_ID, CMP_ID.actual, 0,1,2,3)
     `RAL_FIELD_CP(HID, HID.actual)
     `RAL_FIELD_CP_16(HID, HID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(QE_WT, QE_WT.actual)
     `RAL_FIELD_CP_2(QE_WT, QE_WT.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QPRIO_2 = new("QPRIO_2", "RO/V", 1, 0, {""});
    QPRIO_2.set_powerwell("vcccfn_gated");
    QPRIO_2.set_rand_mode(0);
   QPRIO_2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QPRIO_2 ));

    QTYPE = new("QTYPE", "RO/V", 2, 1, {""});
    QTYPE.set_powerwell("vcccfn_gated");
    QTYPE.set_rand_mode(0);
   QTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QTYPE ));

    MEAS = new("MEAS", "RO/V", 1, 3, {""});
    MEAS.set_powerwell("vcccfn_gated");
    MEAS.set_rand_mode(0);
   MEAS.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( MEAS ));

    CMP_ID = new("CMP_ID", "RO/V", 4, 4, {""});
    CMP_ID.set_powerwell("vcccfn_gated");
    CMP_ID.set_rand_mode(0);
   CMP_ID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CMP_ID ));

    HID = new("HID", "RO/V", 16, 8, {""});
    HID.set_powerwell("vcccfn_gated");
    HID.set_rand_mode(0);
   HID.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( HID ));

    QE_WT = new("QE_WT", "RO/V", 2, 24, {""});
    QE_WT.set_powerwell("vcccfn_gated");
    QE_WT.set_rand_mode(0);
   QE_WT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QE_WT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_1_reg) 
endclass : hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_1_reg

// ================================================

class hqm_credit_hist_pipe_bridge_file extends sla_ral_file;

  rand hqm_credit_hist_pipe_bridge_CFG_VAS_CREDIT_COUNT_reg CFG_VAS_CREDIT_COUNT[32];
  rand hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_reg CFG_ORD_QID_SN[32];
  rand hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_MAP_reg CFG_ORD_QID_SN_MAP[32];
  rand hqm_credit_hist_pipe_bridge_CFG_CMP_SN_CHK_ENBL_reg CFG_CMP_SN_CHK_ENBL[64];
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_MASK_reg CFG_DIR_CQ_INT_MASK[64];
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_IRQ_PENDING_reg CFG_DIR_CQ_IRQ_PENDING[64];
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_DEPTH_reg CFG_DIR_CQ_DEPTH[64];
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg CFG_DIR_CQ_INT_DEPTH_THRSH[64];
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg CFG_DIR_CQ_INT_ENB[64];
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_COUNT_reg CFG_DIR_CQ_TIMER_COUNT[64];
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_THRESHOLD_reg CFG_DIR_CQ_TIMER_THRESHOLD[64];
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TOKEN_DEPTH_SELECT_reg CFG_DIR_CQ_TOKEN_DEPTH_SELECT[64];
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg CFG_DIR_CQ_WD_ENB[64];
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WPTR_reg CFG_DIR_CQ_WPTR[64];
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ2VAS_reg CFG_DIR_CQ2VAS[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_ON_OFF_THRESHOLD_reg CFG_LDB_CQ_ON_OFF_THRESHOLD[64];
  rand hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_MODE_reg CFG_HIST_LIST_MODE[64];
  rand hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_BASE_reg CFG_HIST_LIST_BASE[64];
  rand hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_LIMIT_reg CFG_HIST_LIST_LIMIT[64];
  rand hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_POP_PTR_reg CFG_HIST_LIST_POP_PTR[64];
  rand hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_PUSH_PTR_reg CFG_HIST_LIST_PUSH_PTR[64];
  rand hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_BASE_reg CFG_HIST_LIST_A_BASE[64];
  rand hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_LIMIT_reg CFG_HIST_LIST_A_LIMIT[64];
  rand hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_POP_PTR_reg CFG_HIST_LIST_A_POP_PTR[64];
  rand hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_PUSH_PTR_reg CFG_HIST_LIST_A_PUSH_PTR[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_MASK_reg CFG_LDB_CQ_INT_MASK[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_IRQ_PENDING_reg CFG_LDB_CQ_IRQ_PENDING[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_DEPTH_reg CFG_LDB_CQ_DEPTH[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg CFG_LDB_CQ_INT_DEPTH_THRSH[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg CFG_LDB_CQ_INT_ENB[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_COUNT_reg CFG_LDB_CQ_TIMER_COUNT[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_THRESHOLD_reg CFG_LDB_CQ_TIMER_THRESHOLD[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TOKEN_DEPTH_SELECT_reg CFG_LDB_CQ_TOKEN_DEPTH_SELECT[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg CFG_LDB_CQ_WD_ENB[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WPTR_reg CFG_LDB_CQ_WPTR[64];
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ2VAS_reg CFG_LDB_CQ2VAS[64];
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_FRAG_COUNT_reg CFG_CHP_FRAG_COUNT[64];
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_L_reg CFG_CHP_CORRECTIBLE_COUNT_L;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_H_reg CFG_CHP_CORRECTIBLE_COUNT_H;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_PALB_CONTROL_reg CFG_CHP_PALB_CONTROL;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CSR_CONTROL_reg CFG_CHP_CSR_CONTROL;
  rand hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_L_reg CFG_COUNTER_CHP_ERROR_DROP_L;
  rand hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_H_reg CFG_COUNTER_CHP_ERROR_DROP_H;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_L_reg CFG_CHP_CNT_DIR_HCW_ENQ_L;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_H_reg CFG_CHP_CNT_DIR_HCW_ENQ_H;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_L_reg CFG_CHP_CNT_LDB_HCW_ENQ_L;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_H_reg CFG_CHP_CNT_LDB_HCW_ENQ_H;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_L_reg CFG_CHP_CNT_FRAG_REPLAYED_L;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_H_reg CFG_CHP_CNT_FRAG_REPLAYED_H;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_L_reg CFG_CHP_CNT_DIR_QE_SCH_L;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_H_reg CFG_CHP_CNT_DIR_QE_SCH_H;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_L_reg CFG_CHP_CNT_LDB_QE_SCH_L;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_H_reg CFG_CHP_CNT_LDB_QE_SCH_H;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_L_reg CFG_CHP_CNT_ATM_QE_SCH_L;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_H_reg CFG_CHP_CNT_ATM_QE_SCH_H;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_L_reg CFG_CHP_CNT_ATQ_TO_ATM_L;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_H_reg CFG_CHP_CNT_ATQ_TO_ATM_H;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED0_reg CFG_DIR_CQ_INTR_ARMED0;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED1_reg CFG_DIR_CQ_INTR_ARMED1;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED0_reg CFG_DIR_CQ_INTR_EXPIRED0;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED1_reg CFG_DIR_CQ_INTR_EXPIRED1;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ0_reg CFG_DIR_CQ_INTR_IRQ0;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ1_reg CFG_DIR_CQ_INTR_IRQ1;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER0_reg CFG_DIR_CQ_INTR_RUN_TIMER0;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER1_reg CFG_DIR_CQ_INTR_RUN_TIMER1;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT0_reg CFG_DIR_CQ_INTR_URGENT0;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT1_reg CFG_DIR_CQ_INTR_URGENT1;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_CTL_reg CFG_DIR_CQ_TIMER_CTL;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_0_reg CFG_DIR_WDTO_0;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_1_reg CFG_DIR_WDTO_1;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_0_reg CFG_DIR_WDRT_0;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_1_reg CFG_DIR_WDRT_1;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE0_reg CFG_DIR_WD_DISABLE0;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE1_reg CFG_DIR_WD_DISABLE1;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_WD_ENB_INTERVAL_reg CFG_DIR_WD_ENB_INTERVAL;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ0_reg CFG_DIR_WD_IRQ0;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ1_reg CFG_DIR_WD_IRQ1;
  rand hqm_credit_hist_pipe_bridge_CFG_DIR_WD_THRESHOLD_reg CFG_DIR_WD_THRESHOLD;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED0_reg CFG_LDB_CQ_INTR_ARMED0;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED1_reg CFG_LDB_CQ_INTR_ARMED1;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED0_reg CFG_LDB_CQ_INTR_EXPIRED0;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED1_reg CFG_LDB_CQ_INTR_EXPIRED1;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ0_reg CFG_LDB_CQ_INTR_IRQ0;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ1_reg CFG_LDB_CQ_INTR_IRQ1;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER0_reg CFG_LDB_CQ_INTR_RUN_TIMER0;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER1_reg CFG_LDB_CQ_INTR_RUN_TIMER1;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT0_reg CFG_LDB_CQ_INTR_URGENT0;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT1_reg CFG_LDB_CQ_INTR_URGENT1;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_CTL_reg CFG_LDB_CQ_TIMER_CTL;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_0_reg CFG_LDB_WDTO_0;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_1_reg CFG_LDB_WDTO_1;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_0_reg CFG_LDB_WDRT_0;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_1_reg CFG_LDB_WDRT_1;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE0_reg CFG_LDB_WD_DISABLE0;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE1_reg CFG_LDB_WD_DISABLE1;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_WD_ENB_INTERVAL_reg CFG_LDB_WD_ENB_INTERVAL;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ0_reg CFG_LDB_WD_IRQ0;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ1_reg CFG_LDB_WD_IRQ1;
  rand hqm_credit_hist_pipe_bridge_CFG_LDB_WD_THRESHOLD_reg CFG_LDB_WD_THRESHOLD;
  rand hqm_credit_hist_pipe_bridge_CFG_RETN_ZERO_reg CFG_RETN_ZERO;
  rand hqm_credit_hist_pipe_bridge_CFG_SYNDROME_00_reg CFG_SYNDROME_00;
  rand hqm_credit_hist_pipe_bridge_CFG_UNIT_VERSION_reg CFG_UNIT_VERSION;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE0_reg CFG_CHP_SMON_COMPARE0;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE1_reg CFG_CHP_SMON_COMPARE1;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION0_reg CFG_CHP_SMON_CONFIGURATION0;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION1_reg CFG_CHP_SMON_CONFIGURATION1;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER0_reg CFG_CHP_SMON_ACTIVITYCOUNTER0;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER1_reg CFG_CHP_SMON_ACTIVITYCOUNTER1;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_MAXIMUM_TIMER_reg CFG_CHP_SMON_MAXIMUM_TIMER;
  rand hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_TIMER_reg CFG_CHP_SMON_TIMER;
  rand hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_00_reg CFG_CONTROL_DIAGNOSTIC_00;
  rand hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_01_reg CFG_CONTROL_DIAGNOSTIC_01;
  rand hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_02_reg CFG_CONTROL_DIAGNOSTIC_02;
  rand hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_00_reg CFG_CONTROL_GENERAL_00;
  rand hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_01_reg CFG_CONTROL_GENERAL_01;
  rand hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_02_reg CFG_CONTROL_GENERAL_02;
  rand hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_0_reg CFG_DB_FIFO_STATUS_0;
  rand hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_1_reg CFG_DB_FIFO_STATUS_1;
  rand hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_2_reg CFG_DB_FIFO_STATUS_2;
  rand hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_3_reg CFG_DB_FIFO_STATUS_3;
  rand hqm_credit_hist_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_0_reg CFG_DIAGNOSTIC_AW_STATUS_0;
  rand hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg CFG_HW_AGITATE_CONTROL;
  rand hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_SELECT_reg CFG_HW_AGITATE_SELECT;
  rand hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg CFG_PIPE_HEALTH_HOLD;
  rand hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg CFG_PIPE_HEALTH_VALID;
  rand hqm_credit_hist_pipe_bridge_CFG_SYNDROME_01_reg CFG_SYNDROME_01;
  rand hqm_credit_hist_pipe_bridge_CFG_UNIT_IDLE_reg CFG_UNIT_IDLE;
  rand hqm_credit_hist_pipe_bridge_CFG_UNIT_TIMEOUT_reg CFG_UNIT_TIMEOUT;
  rand hqm_credit_hist_pipe_bridge_CFG_PATCH_CONTROL_reg CFG_PATCH_CONTROL;
  rand hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_0_reg CFG_HIST_LIST_A_0[2048];
  rand hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_1_reg CFG_HIST_LIST_A_1[2048];

  `ovm_component_utils(hqm_credit_hist_pipe_bridge_file)

  function new(string n, ovm_component p);
    super.new(n,p);
  endfunction

  // --------------------------
  function void build();
    regfilename = this.get_name();

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_VAS_CREDIT_COUNT[%0d]",i);
    `endif
    CFG_VAS_CREDIT_COUNT[i] = hqm_credit_hist_pipe_bridge_CFG_VAS_CREDIT_COUNT_reg::type_id::create($psprintf("CFG_VAS_CREDIT_COUNT[%0d]",i), this);
    CFG_VAS_CREDIT_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (4'h0 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_VAS_CREDIT_COUNT[i].set_space_addr("MSG",  (4'h0 + (i*4096)) );
    CFG_VAS_CREDIT_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_VAS_CREDIT_COUNT[i].set_space_addr("MEM-SB", (4'h0 + (i*4096)) );
    CFG_VAS_CREDIT_COUNT[i].set_space_addr("MEM",  (4'h0 + (i*4096)) );
      CFG_VAS_CREDIT_COUNT[i].set_space("MEM");
      CFG_VAS_CREDIT_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_VAS_CREDIT_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_VAS_CREDIT_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_VAS_CREDIT_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_VAS_CREDIT_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_VAS_CREDIT_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_VAS_CREDIT_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_VAS_CREDIT_COUNT[%0d]:dont_test",i)) ) CFG_VAS_CREDIT_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_VAS_CREDIT_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_VAS_CREDIT_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_ORD_QID_SN[%0d]",i);
    `endif
    CFG_ORD_QID_SN[i] = hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_reg::type_id::create($psprintf("CFG_ORD_QID_SN[%0d]",i), this);
    CFG_ORD_QID_SN[i].set_cfg(16'h0, 16'h0, 16'h0, (20'h80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_ORD_QID_SN[i].set_space_addr("MSG",  (20'h80000 + (i*4096)) );
    CFG_ORD_QID_SN[i].set_space_addr("msg_bus_port", 'h21);
    CFG_ORD_QID_SN[i].set_space_addr("MEM-SB", (20'h80000 + (i*4096)) );
    CFG_ORD_QID_SN[i].set_space_addr("MEM",  (20'h80000 + (i*4096)) );
      CFG_ORD_QID_SN[i].set_space("MEM");
      CFG_ORD_QID_SN[i].set_msg_opcode("MEM-SB");
      CFG_ORD_QID_SN[i].set_fid(4'h0, "MEM-SB");
  	CFG_ORD_QID_SN[i].set_bar(4'h2, "MEM-SB");
      CFG_ORD_QID_SN[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ORD_QID_SN[i].set_user_attribute("diag_reg", "0");
      CFG_ORD_QID_SN[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_ORD_QID_SN[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_ORD_QID_SN[%0d]:dont_test",i)) ) CFG_ORD_QID_SN[i].set_test_reg(1'b0);
      if (!add_reg( CFG_ORD_QID_SN[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_ORD_QID_SN[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_ORD_QID_SN_MAP[%0d]",i);
    `endif
    CFG_ORD_QID_SN_MAP[i] = hqm_credit_hist_pipe_bridge_CFG_ORD_QID_SN_MAP_reg::type_id::create($psprintf("CFG_ORD_QID_SN_MAP[%0d]",i), this);
    CFG_ORD_QID_SN_MAP[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h100000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_ORD_QID_SN_MAP[i].set_space_addr("MSG",  (24'h100000 + (i*4096)) );
    CFG_ORD_QID_SN_MAP[i].set_space_addr("msg_bus_port", 'h21);
    CFG_ORD_QID_SN_MAP[i].set_space_addr("MEM-SB", (24'h100000 + (i*4096)) );
    CFG_ORD_QID_SN_MAP[i].set_space_addr("MEM",  (24'h100000 + (i*4096)) );
      CFG_ORD_QID_SN_MAP[i].set_space("MEM");
      CFG_ORD_QID_SN_MAP[i].set_msg_opcode("MEM-SB");
      CFG_ORD_QID_SN_MAP[i].set_fid(4'h0, "MEM-SB");
  	CFG_ORD_QID_SN_MAP[i].set_bar(4'h2, "MEM-SB");
      CFG_ORD_QID_SN_MAP[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ORD_QID_SN_MAP[i].set_user_attribute("diag_reg", "0");
      CFG_ORD_QID_SN_MAP[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_ORD_QID_SN_MAP[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_ORD_QID_SN_MAP[%0d]:dont_test",i)) ) CFG_ORD_QID_SN_MAP[i].set_test_reg(1'b0);
      if (!add_reg( CFG_ORD_QID_SN_MAP[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_ORD_QID_SN_MAP[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CMP_SN_CHK_ENBL[%0d]",i);
    `endif
    CFG_CMP_SN_CHK_ENBL[i] = hqm_credit_hist_pipe_bridge_CFG_CMP_SN_CHK_ENBL_reg::type_id::create($psprintf("CFG_CMP_SN_CHK_ENBL[%0d]",i), this);
    CFG_CMP_SN_CHK_ENBL[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h180000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CMP_SN_CHK_ENBL[i].set_space_addr("MSG",  (24'h180000 + (i*4096)) );
    CFG_CMP_SN_CHK_ENBL[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CMP_SN_CHK_ENBL[i].set_space_addr("MEM-SB", (24'h180000 + (i*4096)) );
    CFG_CMP_SN_CHK_ENBL[i].set_space_addr("MEM",  (24'h180000 + (i*4096)) );
      CFG_CMP_SN_CHK_ENBL[i].set_space("MEM");
      CFG_CMP_SN_CHK_ENBL[i].set_msg_opcode("MEM-SB");
      CFG_CMP_SN_CHK_ENBL[i].set_fid(4'h0, "MEM-SB");
  	CFG_CMP_SN_CHK_ENBL[i].set_bar(4'h2, "MEM-SB");
      CFG_CMP_SN_CHK_ENBL[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CMP_SN_CHK_ENBL[i].set_user_attribute("diag_reg", "0");
      CFG_CMP_SN_CHK_ENBL[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CMP_SN_CHK_ENBL[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CMP_SN_CHK_ENBL[%0d]:dont_test",i)) ) CFG_CMP_SN_CHK_ENBL[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CMP_SN_CHK_ENBL[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CMP_SN_CHK_ENBL[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_DIR_CQ_INT_MASK[%0d]",i);
    `endif
    CFG_DIR_CQ_INT_MASK[i] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_MASK_reg::type_id::create($psprintf("CFG_DIR_CQ_INT_MASK[%0d]",i), this);
    CFG_DIR_CQ_INT_MASK[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h200000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_MASK[i].set_space_addr("MSG",  (24'h200000 + (i*4096)) );
    CFG_DIR_CQ_INT_MASK[i].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_MASK[i].set_space_addr("MEM-SB", (24'h200000 + (i*4096)) );
    CFG_DIR_CQ_INT_MASK[i].set_space_addr("MEM",  (24'h200000 + (i*4096)) );
      CFG_DIR_CQ_INT_MASK[i].set_space("MEM");
      CFG_DIR_CQ_INT_MASK[i].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_MASK[i].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_MASK[i].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_MASK[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_MASK[i].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_MASK[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_MASK[i].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_INT_MASK[i].set_test_reg(0);
    if ( $test$plusargs($psprintf("CFG_DIR_CQ_INT_MASK[%0d]:dont_test",i)) ) CFG_DIR_CQ_INT_MASK[i].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_MASK[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_DIR_CQ_INT_MASK[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_DIR_CQ_IRQ_PENDING[%0d]",i);
    `endif
    CFG_DIR_CQ_IRQ_PENDING[i] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_IRQ_PENDING_reg::type_id::create($psprintf("CFG_DIR_CQ_IRQ_PENDING[%0d]",i), this);
    CFG_DIR_CQ_IRQ_PENDING[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h280000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_IRQ_PENDING[i].set_space_addr("MSG",  (24'h280000 + (i*4096)) );
    CFG_DIR_CQ_IRQ_PENDING[i].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_IRQ_PENDING[i].set_space_addr("MEM-SB", (24'h280000 + (i*4096)) );
    CFG_DIR_CQ_IRQ_PENDING[i].set_space_addr("MEM",  (24'h280000 + (i*4096)) );
      CFG_DIR_CQ_IRQ_PENDING[i].set_space("MEM");
      CFG_DIR_CQ_IRQ_PENDING[i].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_IRQ_PENDING[i].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_IRQ_PENDING[i].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_IRQ_PENDING[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_IRQ_PENDING[i].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_IRQ_PENDING[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_IRQ_PENDING[i].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_IRQ_PENDING[i].set_test_reg(0);
    if ( $test$plusargs($psprintf("CFG_DIR_CQ_IRQ_PENDING[%0d]:dont_test",i)) ) CFG_DIR_CQ_IRQ_PENDING[i].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_IRQ_PENDING[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_DIR_CQ_IRQ_PENDING[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_DIR_CQ_DEPTH[%0d]",i);
    `endif
    CFG_DIR_CQ_DEPTH[i] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_DEPTH_reg::type_id::create($psprintf("CFG_DIR_CQ_DEPTH[%0d]",i), this);
    CFG_DIR_CQ_DEPTH[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h300000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_DEPTH[i].set_space_addr("MSG",  (24'h300000 + (i*4096)) );
    CFG_DIR_CQ_DEPTH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_DEPTH[i].set_space_addr("MEM-SB", (24'h300000 + (i*4096)) );
    CFG_DIR_CQ_DEPTH[i].set_space_addr("MEM",  (24'h300000 + (i*4096)) );
      CFG_DIR_CQ_DEPTH[i].set_space("MEM");
      CFG_DIR_CQ_DEPTH[i].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_DEPTH[i].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_DEPTH[i].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_DEPTH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_DEPTH[i].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_DEPTH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_DEPTH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_DIR_CQ_DEPTH[%0d]:dont_test",i)) ) CFG_DIR_CQ_DEPTH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_DEPTH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_DIR_CQ_DEPTH[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[0]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[0] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[0]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_cfg(16'h0, 16'h0, 16'h0, 24'h380000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_space_addr("MSG", 24'h380000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_space_addr("MEM-SB",24'h380000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_space_addr("MEM", 24'h380000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[0]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[0].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[0] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[0]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[1]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[1] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[1]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_cfg(16'h0, 16'h0, 16'h0, 24'h381000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_space_addr("MSG", 24'h381000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_space_addr("MEM-SB",24'h381000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_space_addr("MEM", 24'h381000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[1]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[1].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[1] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[2]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[2] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[2]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_cfg(16'h0, 16'h0, 16'h0, 24'h382000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_space_addr("MSG", 24'h382000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_space_addr("MEM-SB",24'h382000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_space_addr("MEM", 24'h382000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[2]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[2].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[2] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[3]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[3] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[3]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_cfg(16'h0, 16'h0, 16'h0, 24'h383000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_space_addr("MSG", 24'h383000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_space_addr("MEM-SB",24'h383000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_space_addr("MEM", 24'h383000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[3]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[3].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[3] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[4]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[4] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[4]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_cfg(16'h0, 16'h0, 16'h0, 24'h384000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_space_addr("MSG", 24'h384000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_space_addr("MEM-SB",24'h384000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_space_addr("MEM", 24'h384000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[4]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[4].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[4] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[5]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[5] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[5]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_cfg(16'h0, 16'h0, 16'h0, 24'h385000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_space_addr("MSG", 24'h385000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_space_addr("MEM-SB",24'h385000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_space_addr("MEM", 24'h385000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[5]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[5].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[5] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[6]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[6] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[6]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_cfg(16'h0, 16'h0, 16'h0, 24'h386000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_space_addr("MSG", 24'h386000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_space_addr("MEM-SB",24'h386000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_space_addr("MEM", 24'h386000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[6]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[6].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[6] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[7]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[7] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[7]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_cfg(16'h0, 16'h0, 16'h0, 24'h387000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_space_addr("MSG", 24'h387000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_space_addr("MEM-SB",24'h387000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_space_addr("MEM", 24'h387000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[7]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[7].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[7] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[8]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[8] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[8]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_cfg(16'h0, 16'h0, 16'h0, 24'h388000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_space_addr("MSG", 24'h388000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_space_addr("MEM-SB",24'h388000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_space_addr("MEM", 24'h388000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[8]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[8].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[8] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[9]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[9] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[9]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_cfg(16'h0, 16'h0, 16'h0, 24'h389000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_space_addr("MSG", 24'h389000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_space_addr("MEM-SB",24'h389000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_space_addr("MEM", 24'h389000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[9]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[9].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[9] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[10]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[10] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[10]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_cfg(16'h0, 16'h0, 16'h0, 24'h38A000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_space_addr("MSG", 24'h38A000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_space_addr("MEM-SB",24'h38A000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_space_addr("MEM", 24'h38A000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[10]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[10].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[10] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[11]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[11] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[11]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_cfg(16'h0, 16'h0, 16'h0, 24'h38B000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_space_addr("MSG", 24'h38B000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_space_addr("MEM-SB",24'h38B000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_space_addr("MEM", 24'h38B000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[11]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[11].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[11] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[12]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[12] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[12]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_cfg(16'h0, 16'h0, 16'h0, 24'h38C000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_space_addr("MSG", 24'h38C000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_space_addr("MEM-SB",24'h38C000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_space_addr("MEM", 24'h38C000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[12]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[12].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[12] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[13]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[13] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[13]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_cfg(16'h0, 16'h0, 16'h0, 24'h38D000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_space_addr("MSG", 24'h38D000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_space_addr("MEM-SB",24'h38D000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_space_addr("MEM", 24'h38D000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[13]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[13].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[13] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[14]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[14] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[14]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_cfg(16'h0, 16'h0, 16'h0, 24'h38E000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_space_addr("MSG", 24'h38E000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_space_addr("MEM-SB",24'h38E000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_space_addr("MEM", 24'h38E000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[14]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[14].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[14] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[15]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[15] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[15]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_cfg(16'h0, 16'h0, 16'h0, 24'h38F000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_space_addr("MSG", 24'h38F000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_space_addr("MEM-SB",24'h38F000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_space_addr("MEM", 24'h38F000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[15]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[15].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[15] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[16]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[16] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[16]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_cfg(16'h0, 16'h0, 16'h0, 24'h390000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_space_addr("MSG", 24'h390000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_space_addr("MEM-SB",24'h390000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_space_addr("MEM", 24'h390000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[16]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[16].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[16] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[17]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[17] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[17]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_cfg(16'h0, 16'h0, 16'h0, 24'h391000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_space_addr("MSG", 24'h391000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_space_addr("MEM-SB",24'h391000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_space_addr("MEM", 24'h391000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[17]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[17].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[17] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[18]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[18] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[18]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_cfg(16'h0, 16'h0, 16'h0, 24'h392000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_space_addr("MSG", 24'h392000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_space_addr("MEM-SB",24'h392000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_space_addr("MEM", 24'h392000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[18]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[18].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[18] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[19]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[19] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[19]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_cfg(16'h0, 16'h0, 16'h0, 24'h393000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_space_addr("MSG", 24'h393000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_space_addr("MEM-SB",24'h393000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_space_addr("MEM", 24'h393000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[19]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[19].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[19] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[20]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[20] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[20]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_cfg(16'h0, 16'h0, 16'h0, 24'h394000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_space_addr("MSG", 24'h394000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_space_addr("MEM-SB",24'h394000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_space_addr("MEM", 24'h394000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[20]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[20].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[20] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[21]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[21] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[21]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_cfg(16'h0, 16'h0, 16'h0, 24'h395000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_space_addr("MSG", 24'h395000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_space_addr("MEM-SB",24'h395000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_space_addr("MEM", 24'h395000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[21]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[21].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[21] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[22]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[22] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[22]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_cfg(16'h0, 16'h0, 16'h0, 24'h396000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_space_addr("MSG", 24'h396000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_space_addr("MEM-SB",24'h396000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_space_addr("MEM", 24'h396000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[22]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[22].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[22] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[23]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[23] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[23]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_cfg(16'h0, 16'h0, 16'h0, 24'h397000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_space_addr("MSG", 24'h397000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_space_addr("MEM-SB",24'h397000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_space_addr("MEM", 24'h397000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[23]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[23].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[23] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[24]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[24] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[24]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_cfg(16'h0, 16'h0, 16'h0, 24'h398000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_space_addr("MSG", 24'h398000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_space_addr("MEM-SB",24'h398000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_space_addr("MEM", 24'h398000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[24]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[24].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[24] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[25]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[25] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[25]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_cfg(16'h0, 16'h0, 16'h0, 24'h399000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_space_addr("MSG", 24'h399000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_space_addr("MEM-SB",24'h399000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_space_addr("MEM", 24'h399000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[25]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[25].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[25] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[26]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[26] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[26]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_cfg(16'h0, 16'h0, 16'h0, 24'h39A000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_space_addr("MSG", 24'h39A000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_space_addr("MEM-SB",24'h39A000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_space_addr("MEM", 24'h39A000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[26]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[26].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[26] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[27]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[27] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[27]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_cfg(16'h0, 16'h0, 16'h0, 24'h39B000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_space_addr("MSG", 24'h39B000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_space_addr("MEM-SB",24'h39B000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_space_addr("MEM", 24'h39B000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[27]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[27].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[27] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[28]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[28] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[28]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_cfg(16'h0, 16'h0, 16'h0, 24'h39C000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_space_addr("MSG", 24'h39C000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_space_addr("MEM-SB",24'h39C000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_space_addr("MEM", 24'h39C000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[28]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[28].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[28] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[29]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[29] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[29]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_cfg(16'h0, 16'h0, 16'h0, 24'h39D000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_space_addr("MSG", 24'h39D000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_space_addr("MEM-SB",24'h39D000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_space_addr("MEM", 24'h39D000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[29]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[29].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[29] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[30]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[30] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[30]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_cfg(16'h0, 16'h0, 16'h0, 24'h39E000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_space_addr("MSG", 24'h39E000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_space_addr("MEM-SB",24'h39E000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_space_addr("MEM", 24'h39E000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[30]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[30].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[30] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[31]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[31] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[31]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_cfg(16'h0, 16'h0, 16'h0, 24'h39F000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_space_addr("MSG", 24'h39F000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_space_addr("MEM-SB",24'h39F000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_space_addr("MEM", 24'h39F000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[31]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[31].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[31] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[32]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[32] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[32]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_cfg(16'h0, 16'h0, 16'h0, 24'h3A0000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_space_addr("MSG", 24'h3A0000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_space_addr("MEM-SB",24'h3A0000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_space_addr("MEM", 24'h3A0000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[32]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[32].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[32] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[32]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[33]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[33] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[33]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_cfg(16'h0, 16'h0, 16'h0, 24'h3A1000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_space_addr("MSG", 24'h3A1000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_space_addr("MEM-SB",24'h3A1000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_space_addr("MEM", 24'h3A1000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[33]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[33].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[33] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[33]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[34]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[34] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[34]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_cfg(16'h0, 16'h0, 16'h0, 24'h3A2000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_space_addr("MSG", 24'h3A2000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_space_addr("MEM-SB",24'h3A2000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_space_addr("MEM", 24'h3A2000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[34]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[34].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[34] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[34]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[35]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[35] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[35]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_cfg(16'h0, 16'h0, 16'h0, 24'h3A3000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_space_addr("MSG", 24'h3A3000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_space_addr("MEM-SB",24'h3A3000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_space_addr("MEM", 24'h3A3000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[35]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[35].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[35] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[35]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[36]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[36] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[36]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_cfg(16'h0, 16'h0, 16'h0, 24'h3A4000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_space_addr("MSG", 24'h3A4000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_space_addr("MEM-SB",24'h3A4000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_space_addr("MEM", 24'h3A4000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[36]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[36].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[36] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[36]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[37]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[37] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[37]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_cfg(16'h0, 16'h0, 16'h0, 24'h3A5000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_space_addr("MSG", 24'h3A5000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_space_addr("MEM-SB",24'h3A5000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_space_addr("MEM", 24'h3A5000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[37]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[37].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[37] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[37]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[38]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[38] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[38]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_cfg(16'h0, 16'h0, 16'h0, 24'h3A6000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_space_addr("MSG", 24'h3A6000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_space_addr("MEM-SB",24'h3A6000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_space_addr("MEM", 24'h3A6000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[38]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[38].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[38] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[38]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[39]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[39] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[39]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_cfg(16'h0, 16'h0, 16'h0, 24'h3A7000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_space_addr("MSG", 24'h3A7000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_space_addr("MEM-SB",24'h3A7000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_space_addr("MEM", 24'h3A7000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[39]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[39].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[39] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[39]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[40]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[40] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[40]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_cfg(16'h0, 16'h0, 16'h0, 24'h3A8000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_space_addr("MSG", 24'h3A8000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_space_addr("MEM-SB",24'h3A8000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_space_addr("MEM", 24'h3A8000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[40]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[40].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[40] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[40]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[41]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[41] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[41]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_cfg(16'h0, 16'h0, 16'h0, 24'h3A9000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_space_addr("MSG", 24'h3A9000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_space_addr("MEM-SB",24'h3A9000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_space_addr("MEM", 24'h3A9000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[41]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[41].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[41] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[41]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[42]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[42] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[42]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_cfg(16'h0, 16'h0, 16'h0, 24'h3AA000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_space_addr("MSG", 24'h3AA000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_space_addr("MEM-SB",24'h3AA000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_space_addr("MEM", 24'h3AA000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[42]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[42].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[42] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[42]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[43]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[43] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[43]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_cfg(16'h0, 16'h0, 16'h0, 24'h3AB000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_space_addr("MSG", 24'h3AB000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_space_addr("MEM-SB",24'h3AB000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_space_addr("MEM", 24'h3AB000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[43]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[43].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[43] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[43]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[44]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[44] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[44]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_cfg(16'h0, 16'h0, 16'h0, 24'h3AC000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_space_addr("MSG", 24'h3AC000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_space_addr("MEM-SB",24'h3AC000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_space_addr("MEM", 24'h3AC000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[44]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[44].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[44] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[44]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[45]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[45] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[45]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_cfg(16'h0, 16'h0, 16'h0, 24'h3AD000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_space_addr("MSG", 24'h3AD000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_space_addr("MEM-SB",24'h3AD000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_space_addr("MEM", 24'h3AD000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[45]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[45].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[45] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[45]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[46]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[46] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[46]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_cfg(16'h0, 16'h0, 16'h0, 24'h3AE000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_space_addr("MSG", 24'h3AE000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_space_addr("MEM-SB",24'h3AE000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_space_addr("MEM", 24'h3AE000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[46]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[46].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[46] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[46]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[47]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[47] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[47]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_cfg(16'h0, 16'h0, 16'h0, 24'h3AF000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_space_addr("MSG", 24'h3AF000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_space_addr("MEM-SB",24'h3AF000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_space_addr("MEM", 24'h3AF000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[47]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[47].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[47] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[47]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[48]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[48] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[48]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_cfg(16'h0, 16'h0, 16'h0, 24'h3B0000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_space_addr("MSG", 24'h3B0000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_space_addr("MEM-SB",24'h3B0000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_space_addr("MEM", 24'h3B0000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[48]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[48].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[48] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[48]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[49]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[49] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[49]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_cfg(16'h0, 16'h0, 16'h0, 24'h3B1000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_space_addr("MSG", 24'h3B1000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_space_addr("MEM-SB",24'h3B1000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_space_addr("MEM", 24'h3B1000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[49]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[49].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[49] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[49]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[50]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[50] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[50]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_cfg(16'h0, 16'h0, 16'h0, 24'h3B2000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_space_addr("MSG", 24'h3B2000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_space_addr("MEM-SB",24'h3B2000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_space_addr("MEM", 24'h3B2000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[50]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[50].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[50] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[50]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[51]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[51] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[51]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_cfg(16'h0, 16'h0, 16'h0, 24'h3B3000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_space_addr("MSG", 24'h3B3000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_space_addr("MEM-SB",24'h3B3000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_space_addr("MEM", 24'h3B3000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[51]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[51].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[51] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[51]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[52]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[52] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[52]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_cfg(16'h0, 16'h0, 16'h0, 24'h3B4000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_space_addr("MSG", 24'h3B4000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_space_addr("MEM-SB",24'h3B4000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_space_addr("MEM", 24'h3B4000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[52]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[52].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[52] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[52]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[53]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[53] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[53]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_cfg(16'h0, 16'h0, 16'h0, 24'h3B5000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_space_addr("MSG", 24'h3B5000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_space_addr("MEM-SB",24'h3B5000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_space_addr("MEM", 24'h3B5000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[53]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[53].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[53] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[53]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[54]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[54] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[54]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_cfg(16'h0, 16'h0, 16'h0, 24'h3B6000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_space_addr("MSG", 24'h3B6000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_space_addr("MEM-SB",24'h3B6000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_space_addr("MEM", 24'h3B6000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[54]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[54].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[54] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[54]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[55]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[55] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[55]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_cfg(16'h0, 16'h0, 16'h0, 24'h3B7000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_space_addr("MSG", 24'h3B7000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_space_addr("MEM-SB",24'h3B7000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_space_addr("MEM", 24'h3B7000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[55]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[55].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[55] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[55]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[56]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[56] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[56]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_cfg(16'h0, 16'h0, 16'h0, 24'h3B8000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_space_addr("MSG", 24'h3B8000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_space_addr("MEM-SB",24'h3B8000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_space_addr("MEM", 24'h3B8000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[56]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[56].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[56] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[56]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[57]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[57] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[57]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_cfg(16'h0, 16'h0, 16'h0, 24'h3B9000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_space_addr("MSG", 24'h3B9000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_space_addr("MEM-SB",24'h3B9000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_space_addr("MEM", 24'h3B9000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[57]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[57].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[57] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[57]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[58]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[58] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[58]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_cfg(16'h0, 16'h0, 16'h0, 24'h3BA000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_space_addr("MSG", 24'h3BA000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_space_addr("MEM-SB",24'h3BA000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_space_addr("MEM", 24'h3BA000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[58]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[58].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[58] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[58]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[59]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[59] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[59]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_cfg(16'h0, 16'h0, 16'h0, 24'h3BB000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_space_addr("MSG", 24'h3BB000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_space_addr("MEM-SB",24'h3BB000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_space_addr("MEM", 24'h3BB000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[59]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[59].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[59] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[59]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[60]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[60] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[60]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_cfg(16'h0, 16'h0, 16'h0, 24'h3BC000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_space_addr("MSG", 24'h3BC000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_space_addr("MEM-SB",24'h3BC000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_space_addr("MEM", 24'h3BC000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[60]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[60].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[60] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[60]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[61]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[61] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[61]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_cfg(16'h0, 16'h0, 16'h0, 24'h3BD000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_space_addr("MSG", 24'h3BD000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_space_addr("MEM-SB",24'h3BD000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_space_addr("MEM", 24'h3BD000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[61]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[61].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[61] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[61]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[62]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[62] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[62]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_cfg(16'h0, 16'h0, 16'h0, 24'h3BE000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_space_addr("MSG", 24'h3BE000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_space_addr("MEM-SB",24'h3BE000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_space_addr("MEM", 24'h3BE000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[62]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[62].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[62] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[62]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_DEPTH_THRSH[63]";
    `endif
    CFG_DIR_CQ_INT_DEPTH_THRSH[63] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_DIR_CQ_INT_DEPTH_THRSH[63]", this);
    CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_cfg(16'h0, 16'h0, 16'h0, 24'h3BF000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_space_addr("MSG", 24'h3BF000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_space_addr("MEM-SB",24'h3BF000);
    CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_space_addr("MEM", 24'h3BF000);
      CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_space("MEM");
      CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_DEPTH_THRSH[63]:dont_test") ) CFG_DIR_CQ_INT_DEPTH_THRSH[63].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_DEPTH_THRSH[63] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_DEPTH_THRSH[63]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[0]";
    `endif
    CFG_DIR_CQ_INT_ENB[0] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[0]", this);
    CFG_DIR_CQ_INT_ENB[0].set_cfg(16'h0, 16'h0, 16'h0, 24'h400000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[0].set_space_addr("MSG", 24'h400000);
    CFG_DIR_CQ_INT_ENB[0].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[0].set_space_addr("MEM-SB",24'h400000);
    CFG_DIR_CQ_INT_ENB[0].set_space_addr("MEM", 24'h400000);
      CFG_DIR_CQ_INT_ENB[0].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[0].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[0].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[0].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[0].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[0].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[0]:dont_test") ) CFG_DIR_CQ_INT_ENB[0].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[0] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[0]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[1]";
    `endif
    CFG_DIR_CQ_INT_ENB[1] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[1]", this);
    CFG_DIR_CQ_INT_ENB[1].set_cfg(16'h0, 16'h0, 16'h0, 24'h401000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[1].set_space_addr("MSG", 24'h401000);
    CFG_DIR_CQ_INT_ENB[1].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[1].set_space_addr("MEM-SB",24'h401000);
    CFG_DIR_CQ_INT_ENB[1].set_space_addr("MEM", 24'h401000);
      CFG_DIR_CQ_INT_ENB[1].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[1].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[1].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[1].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[1].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[1].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[1]:dont_test") ) CFG_DIR_CQ_INT_ENB[1].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[1] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[2]";
    `endif
    CFG_DIR_CQ_INT_ENB[2] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[2]", this);
    CFG_DIR_CQ_INT_ENB[2].set_cfg(16'h0, 16'h0, 16'h0, 24'h402000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[2].set_space_addr("MSG", 24'h402000);
    CFG_DIR_CQ_INT_ENB[2].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[2].set_space_addr("MEM-SB",24'h402000);
    CFG_DIR_CQ_INT_ENB[2].set_space_addr("MEM", 24'h402000);
      CFG_DIR_CQ_INT_ENB[2].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[2].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[2].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[2].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[2].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[2].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[2].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[2]:dont_test") ) CFG_DIR_CQ_INT_ENB[2].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[2] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[3]";
    `endif
    CFG_DIR_CQ_INT_ENB[3] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[3]", this);
    CFG_DIR_CQ_INT_ENB[3].set_cfg(16'h0, 16'h0, 16'h0, 24'h403000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[3].set_space_addr("MSG", 24'h403000);
    CFG_DIR_CQ_INT_ENB[3].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[3].set_space_addr("MEM-SB",24'h403000);
    CFG_DIR_CQ_INT_ENB[3].set_space_addr("MEM", 24'h403000);
      CFG_DIR_CQ_INT_ENB[3].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[3].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[3].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[3].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[3].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[3].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[3].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[3]:dont_test") ) CFG_DIR_CQ_INT_ENB[3].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[3] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[4]";
    `endif
    CFG_DIR_CQ_INT_ENB[4] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[4]", this);
    CFG_DIR_CQ_INT_ENB[4].set_cfg(16'h0, 16'h0, 16'h0, 24'h404000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[4].set_space_addr("MSG", 24'h404000);
    CFG_DIR_CQ_INT_ENB[4].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[4].set_space_addr("MEM-SB",24'h404000);
    CFG_DIR_CQ_INT_ENB[4].set_space_addr("MEM", 24'h404000);
      CFG_DIR_CQ_INT_ENB[4].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[4].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[4].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[4].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[4].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[4].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[4].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[4]:dont_test") ) CFG_DIR_CQ_INT_ENB[4].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[4] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[5]";
    `endif
    CFG_DIR_CQ_INT_ENB[5] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[5]", this);
    CFG_DIR_CQ_INT_ENB[5].set_cfg(16'h0, 16'h0, 16'h0, 24'h405000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[5].set_space_addr("MSG", 24'h405000);
    CFG_DIR_CQ_INT_ENB[5].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[5].set_space_addr("MEM-SB",24'h405000);
    CFG_DIR_CQ_INT_ENB[5].set_space_addr("MEM", 24'h405000);
      CFG_DIR_CQ_INT_ENB[5].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[5].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[5].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[5].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[5].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[5].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[5].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[5]:dont_test") ) CFG_DIR_CQ_INT_ENB[5].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[5] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[6]";
    `endif
    CFG_DIR_CQ_INT_ENB[6] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[6]", this);
    CFG_DIR_CQ_INT_ENB[6].set_cfg(16'h0, 16'h0, 16'h0, 24'h406000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[6].set_space_addr("MSG", 24'h406000);
    CFG_DIR_CQ_INT_ENB[6].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[6].set_space_addr("MEM-SB",24'h406000);
    CFG_DIR_CQ_INT_ENB[6].set_space_addr("MEM", 24'h406000);
      CFG_DIR_CQ_INT_ENB[6].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[6].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[6].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[6].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[6].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[6].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[6].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[6]:dont_test") ) CFG_DIR_CQ_INT_ENB[6].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[6] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[7]";
    `endif
    CFG_DIR_CQ_INT_ENB[7] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[7]", this);
    CFG_DIR_CQ_INT_ENB[7].set_cfg(16'h0, 16'h0, 16'h0, 24'h407000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[7].set_space_addr("MSG", 24'h407000);
    CFG_DIR_CQ_INT_ENB[7].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[7].set_space_addr("MEM-SB",24'h407000);
    CFG_DIR_CQ_INT_ENB[7].set_space_addr("MEM", 24'h407000);
      CFG_DIR_CQ_INT_ENB[7].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[7].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[7].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[7].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[7].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[7].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[7].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[7]:dont_test") ) CFG_DIR_CQ_INT_ENB[7].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[7] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[8]";
    `endif
    CFG_DIR_CQ_INT_ENB[8] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[8]", this);
    CFG_DIR_CQ_INT_ENB[8].set_cfg(16'h0, 16'h0, 16'h0, 24'h408000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[8].set_space_addr("MSG", 24'h408000);
    CFG_DIR_CQ_INT_ENB[8].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[8].set_space_addr("MEM-SB",24'h408000);
    CFG_DIR_CQ_INT_ENB[8].set_space_addr("MEM", 24'h408000);
      CFG_DIR_CQ_INT_ENB[8].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[8].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[8].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[8].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[8].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[8].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[8].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[8]:dont_test") ) CFG_DIR_CQ_INT_ENB[8].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[8] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[9]";
    `endif
    CFG_DIR_CQ_INT_ENB[9] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[9]", this);
    CFG_DIR_CQ_INT_ENB[9].set_cfg(16'h0, 16'h0, 16'h0, 24'h409000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[9].set_space_addr("MSG", 24'h409000);
    CFG_DIR_CQ_INT_ENB[9].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[9].set_space_addr("MEM-SB",24'h409000);
    CFG_DIR_CQ_INT_ENB[9].set_space_addr("MEM", 24'h409000);
      CFG_DIR_CQ_INT_ENB[9].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[9].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[9].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[9].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[9].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[9].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[9].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[9]:dont_test") ) CFG_DIR_CQ_INT_ENB[9].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[9] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[10]";
    `endif
    CFG_DIR_CQ_INT_ENB[10] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[10]", this);
    CFG_DIR_CQ_INT_ENB[10].set_cfg(16'h0, 16'h0, 16'h0, 24'h40A000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[10].set_space_addr("MSG", 24'h40A000);
    CFG_DIR_CQ_INT_ENB[10].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[10].set_space_addr("MEM-SB",24'h40A000);
    CFG_DIR_CQ_INT_ENB[10].set_space_addr("MEM", 24'h40A000);
      CFG_DIR_CQ_INT_ENB[10].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[10].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[10].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[10].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[10].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[10].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[10].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[10]:dont_test") ) CFG_DIR_CQ_INT_ENB[10].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[10] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[11]";
    `endif
    CFG_DIR_CQ_INT_ENB[11] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[11]", this);
    CFG_DIR_CQ_INT_ENB[11].set_cfg(16'h0, 16'h0, 16'h0, 24'h40B000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[11].set_space_addr("MSG", 24'h40B000);
    CFG_DIR_CQ_INT_ENB[11].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[11].set_space_addr("MEM-SB",24'h40B000);
    CFG_DIR_CQ_INT_ENB[11].set_space_addr("MEM", 24'h40B000);
      CFG_DIR_CQ_INT_ENB[11].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[11].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[11].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[11].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[11].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[11].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[11].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[11]:dont_test") ) CFG_DIR_CQ_INT_ENB[11].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[11] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[12]";
    `endif
    CFG_DIR_CQ_INT_ENB[12] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[12]", this);
    CFG_DIR_CQ_INT_ENB[12].set_cfg(16'h0, 16'h0, 16'h0, 24'h40C000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[12].set_space_addr("MSG", 24'h40C000);
    CFG_DIR_CQ_INT_ENB[12].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[12].set_space_addr("MEM-SB",24'h40C000);
    CFG_DIR_CQ_INT_ENB[12].set_space_addr("MEM", 24'h40C000);
      CFG_DIR_CQ_INT_ENB[12].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[12].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[12].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[12].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[12].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[12].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[12].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[12]:dont_test") ) CFG_DIR_CQ_INT_ENB[12].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[12] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[13]";
    `endif
    CFG_DIR_CQ_INT_ENB[13] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[13]", this);
    CFG_DIR_CQ_INT_ENB[13].set_cfg(16'h0, 16'h0, 16'h0, 24'h40D000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[13].set_space_addr("MSG", 24'h40D000);
    CFG_DIR_CQ_INT_ENB[13].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[13].set_space_addr("MEM-SB",24'h40D000);
    CFG_DIR_CQ_INT_ENB[13].set_space_addr("MEM", 24'h40D000);
      CFG_DIR_CQ_INT_ENB[13].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[13].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[13].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[13].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[13].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[13].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[13].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[13]:dont_test") ) CFG_DIR_CQ_INT_ENB[13].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[13] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[14]";
    `endif
    CFG_DIR_CQ_INT_ENB[14] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[14]", this);
    CFG_DIR_CQ_INT_ENB[14].set_cfg(16'h0, 16'h0, 16'h0, 24'h40E000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[14].set_space_addr("MSG", 24'h40E000);
    CFG_DIR_CQ_INT_ENB[14].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[14].set_space_addr("MEM-SB",24'h40E000);
    CFG_DIR_CQ_INT_ENB[14].set_space_addr("MEM", 24'h40E000);
      CFG_DIR_CQ_INT_ENB[14].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[14].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[14].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[14].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[14].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[14].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[14].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[14]:dont_test") ) CFG_DIR_CQ_INT_ENB[14].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[14] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[15]";
    `endif
    CFG_DIR_CQ_INT_ENB[15] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[15]", this);
    CFG_DIR_CQ_INT_ENB[15].set_cfg(16'h0, 16'h0, 16'h0, 24'h40F000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[15].set_space_addr("MSG", 24'h40F000);
    CFG_DIR_CQ_INT_ENB[15].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[15].set_space_addr("MEM-SB",24'h40F000);
    CFG_DIR_CQ_INT_ENB[15].set_space_addr("MEM", 24'h40F000);
      CFG_DIR_CQ_INT_ENB[15].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[15].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[15].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[15].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[15].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[15].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[15].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[15]:dont_test") ) CFG_DIR_CQ_INT_ENB[15].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[15] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[16]";
    `endif
    CFG_DIR_CQ_INT_ENB[16] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[16]", this);
    CFG_DIR_CQ_INT_ENB[16].set_cfg(16'h0, 16'h0, 16'h0, 24'h410000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[16].set_space_addr("MSG", 24'h410000);
    CFG_DIR_CQ_INT_ENB[16].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[16].set_space_addr("MEM-SB",24'h410000);
    CFG_DIR_CQ_INT_ENB[16].set_space_addr("MEM", 24'h410000);
      CFG_DIR_CQ_INT_ENB[16].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[16].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[16].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[16].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[16].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[16].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[16].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[16]:dont_test") ) CFG_DIR_CQ_INT_ENB[16].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[16] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[17]";
    `endif
    CFG_DIR_CQ_INT_ENB[17] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[17]", this);
    CFG_DIR_CQ_INT_ENB[17].set_cfg(16'h0, 16'h0, 16'h0, 24'h411000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[17].set_space_addr("MSG", 24'h411000);
    CFG_DIR_CQ_INT_ENB[17].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[17].set_space_addr("MEM-SB",24'h411000);
    CFG_DIR_CQ_INT_ENB[17].set_space_addr("MEM", 24'h411000);
      CFG_DIR_CQ_INT_ENB[17].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[17].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[17].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[17].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[17].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[17].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[17].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[17]:dont_test") ) CFG_DIR_CQ_INT_ENB[17].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[17] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[18]";
    `endif
    CFG_DIR_CQ_INT_ENB[18] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[18]", this);
    CFG_DIR_CQ_INT_ENB[18].set_cfg(16'h0, 16'h0, 16'h0, 24'h412000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[18].set_space_addr("MSG", 24'h412000);
    CFG_DIR_CQ_INT_ENB[18].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[18].set_space_addr("MEM-SB",24'h412000);
    CFG_DIR_CQ_INT_ENB[18].set_space_addr("MEM", 24'h412000);
      CFG_DIR_CQ_INT_ENB[18].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[18].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[18].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[18].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[18].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[18].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[18].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[18]:dont_test") ) CFG_DIR_CQ_INT_ENB[18].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[18] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[19]";
    `endif
    CFG_DIR_CQ_INT_ENB[19] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[19]", this);
    CFG_DIR_CQ_INT_ENB[19].set_cfg(16'h0, 16'h0, 16'h0, 24'h413000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[19].set_space_addr("MSG", 24'h413000);
    CFG_DIR_CQ_INT_ENB[19].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[19].set_space_addr("MEM-SB",24'h413000);
    CFG_DIR_CQ_INT_ENB[19].set_space_addr("MEM", 24'h413000);
      CFG_DIR_CQ_INT_ENB[19].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[19].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[19].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[19].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[19].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[19].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[19].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[19]:dont_test") ) CFG_DIR_CQ_INT_ENB[19].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[19] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[20]";
    `endif
    CFG_DIR_CQ_INT_ENB[20] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[20]", this);
    CFG_DIR_CQ_INT_ENB[20].set_cfg(16'h0, 16'h0, 16'h0, 24'h414000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[20].set_space_addr("MSG", 24'h414000);
    CFG_DIR_CQ_INT_ENB[20].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[20].set_space_addr("MEM-SB",24'h414000);
    CFG_DIR_CQ_INT_ENB[20].set_space_addr("MEM", 24'h414000);
      CFG_DIR_CQ_INT_ENB[20].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[20].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[20].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[20].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[20].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[20].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[20].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[20]:dont_test") ) CFG_DIR_CQ_INT_ENB[20].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[20] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[21]";
    `endif
    CFG_DIR_CQ_INT_ENB[21] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[21]", this);
    CFG_DIR_CQ_INT_ENB[21].set_cfg(16'h0, 16'h0, 16'h0, 24'h415000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[21].set_space_addr("MSG", 24'h415000);
    CFG_DIR_CQ_INT_ENB[21].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[21].set_space_addr("MEM-SB",24'h415000);
    CFG_DIR_CQ_INT_ENB[21].set_space_addr("MEM", 24'h415000);
      CFG_DIR_CQ_INT_ENB[21].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[21].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[21].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[21].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[21].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[21].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[21].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[21]:dont_test") ) CFG_DIR_CQ_INT_ENB[21].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[21] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[22]";
    `endif
    CFG_DIR_CQ_INT_ENB[22] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[22]", this);
    CFG_DIR_CQ_INT_ENB[22].set_cfg(16'h0, 16'h0, 16'h0, 24'h416000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[22].set_space_addr("MSG", 24'h416000);
    CFG_DIR_CQ_INT_ENB[22].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[22].set_space_addr("MEM-SB",24'h416000);
    CFG_DIR_CQ_INT_ENB[22].set_space_addr("MEM", 24'h416000);
      CFG_DIR_CQ_INT_ENB[22].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[22].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[22].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[22].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[22].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[22].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[22].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[22]:dont_test") ) CFG_DIR_CQ_INT_ENB[22].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[22] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[23]";
    `endif
    CFG_DIR_CQ_INT_ENB[23] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[23]", this);
    CFG_DIR_CQ_INT_ENB[23].set_cfg(16'h0, 16'h0, 16'h0, 24'h417000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[23].set_space_addr("MSG", 24'h417000);
    CFG_DIR_CQ_INT_ENB[23].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[23].set_space_addr("MEM-SB",24'h417000);
    CFG_DIR_CQ_INT_ENB[23].set_space_addr("MEM", 24'h417000);
      CFG_DIR_CQ_INT_ENB[23].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[23].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[23].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[23].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[23].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[23].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[23].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[23]:dont_test") ) CFG_DIR_CQ_INT_ENB[23].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[23] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[24]";
    `endif
    CFG_DIR_CQ_INT_ENB[24] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[24]", this);
    CFG_DIR_CQ_INT_ENB[24].set_cfg(16'h0, 16'h0, 16'h0, 24'h418000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[24].set_space_addr("MSG", 24'h418000);
    CFG_DIR_CQ_INT_ENB[24].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[24].set_space_addr("MEM-SB",24'h418000);
    CFG_DIR_CQ_INT_ENB[24].set_space_addr("MEM", 24'h418000);
      CFG_DIR_CQ_INT_ENB[24].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[24].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[24].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[24].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[24].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[24].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[24].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[24]:dont_test") ) CFG_DIR_CQ_INT_ENB[24].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[24] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[25]";
    `endif
    CFG_DIR_CQ_INT_ENB[25] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[25]", this);
    CFG_DIR_CQ_INT_ENB[25].set_cfg(16'h0, 16'h0, 16'h0, 24'h419000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[25].set_space_addr("MSG", 24'h419000);
    CFG_DIR_CQ_INT_ENB[25].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[25].set_space_addr("MEM-SB",24'h419000);
    CFG_DIR_CQ_INT_ENB[25].set_space_addr("MEM", 24'h419000);
      CFG_DIR_CQ_INT_ENB[25].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[25].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[25].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[25].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[25].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[25].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[25].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[25]:dont_test") ) CFG_DIR_CQ_INT_ENB[25].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[25] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[26]";
    `endif
    CFG_DIR_CQ_INT_ENB[26] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[26]", this);
    CFG_DIR_CQ_INT_ENB[26].set_cfg(16'h0, 16'h0, 16'h0, 24'h41A000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[26].set_space_addr("MSG", 24'h41A000);
    CFG_DIR_CQ_INT_ENB[26].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[26].set_space_addr("MEM-SB",24'h41A000);
    CFG_DIR_CQ_INT_ENB[26].set_space_addr("MEM", 24'h41A000);
      CFG_DIR_CQ_INT_ENB[26].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[26].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[26].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[26].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[26].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[26].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[26].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[26]:dont_test") ) CFG_DIR_CQ_INT_ENB[26].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[26] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[27]";
    `endif
    CFG_DIR_CQ_INT_ENB[27] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[27]", this);
    CFG_DIR_CQ_INT_ENB[27].set_cfg(16'h0, 16'h0, 16'h0, 24'h41B000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[27].set_space_addr("MSG", 24'h41B000);
    CFG_DIR_CQ_INT_ENB[27].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[27].set_space_addr("MEM-SB",24'h41B000);
    CFG_DIR_CQ_INT_ENB[27].set_space_addr("MEM", 24'h41B000);
      CFG_DIR_CQ_INT_ENB[27].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[27].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[27].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[27].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[27].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[27].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[27].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[27]:dont_test") ) CFG_DIR_CQ_INT_ENB[27].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[27] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[28]";
    `endif
    CFG_DIR_CQ_INT_ENB[28] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[28]", this);
    CFG_DIR_CQ_INT_ENB[28].set_cfg(16'h0, 16'h0, 16'h0, 24'h41C000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[28].set_space_addr("MSG", 24'h41C000);
    CFG_DIR_CQ_INT_ENB[28].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[28].set_space_addr("MEM-SB",24'h41C000);
    CFG_DIR_CQ_INT_ENB[28].set_space_addr("MEM", 24'h41C000);
      CFG_DIR_CQ_INT_ENB[28].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[28].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[28].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[28].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[28].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[28].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[28].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[28]:dont_test") ) CFG_DIR_CQ_INT_ENB[28].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[28] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[29]";
    `endif
    CFG_DIR_CQ_INT_ENB[29] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[29]", this);
    CFG_DIR_CQ_INT_ENB[29].set_cfg(16'h0, 16'h0, 16'h0, 24'h41D000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[29].set_space_addr("MSG", 24'h41D000);
    CFG_DIR_CQ_INT_ENB[29].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[29].set_space_addr("MEM-SB",24'h41D000);
    CFG_DIR_CQ_INT_ENB[29].set_space_addr("MEM", 24'h41D000);
      CFG_DIR_CQ_INT_ENB[29].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[29].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[29].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[29].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[29].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[29].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[29].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[29]:dont_test") ) CFG_DIR_CQ_INT_ENB[29].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[29] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[30]";
    `endif
    CFG_DIR_CQ_INT_ENB[30] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[30]", this);
    CFG_DIR_CQ_INT_ENB[30].set_cfg(16'h0, 16'h0, 16'h0, 24'h41E000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[30].set_space_addr("MSG", 24'h41E000);
    CFG_DIR_CQ_INT_ENB[30].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[30].set_space_addr("MEM-SB",24'h41E000);
    CFG_DIR_CQ_INT_ENB[30].set_space_addr("MEM", 24'h41E000);
      CFG_DIR_CQ_INT_ENB[30].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[30].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[30].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[30].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[30].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[30].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[30].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[30]:dont_test") ) CFG_DIR_CQ_INT_ENB[30].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[30] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[31]";
    `endif
    CFG_DIR_CQ_INT_ENB[31] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[31]", this);
    CFG_DIR_CQ_INT_ENB[31].set_cfg(16'h0, 16'h0, 16'h0, 24'h41F000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[31].set_space_addr("MSG", 24'h41F000);
    CFG_DIR_CQ_INT_ENB[31].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[31].set_space_addr("MEM-SB",24'h41F000);
    CFG_DIR_CQ_INT_ENB[31].set_space_addr("MEM", 24'h41F000);
      CFG_DIR_CQ_INT_ENB[31].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[31].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[31].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[31].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[31].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[31].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[31].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[31]:dont_test") ) CFG_DIR_CQ_INT_ENB[31].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[31] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[32]";
    `endif
    CFG_DIR_CQ_INT_ENB[32] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[32]", this);
    CFG_DIR_CQ_INT_ENB[32].set_cfg(16'h0, 16'h0, 16'h0, 24'h420000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[32].set_space_addr("MSG", 24'h420000);
    CFG_DIR_CQ_INT_ENB[32].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[32].set_space_addr("MEM-SB",24'h420000);
    CFG_DIR_CQ_INT_ENB[32].set_space_addr("MEM", 24'h420000);
      CFG_DIR_CQ_INT_ENB[32].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[32].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[32].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[32].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[32].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[32].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[32].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[32].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[32]:dont_test") ) CFG_DIR_CQ_INT_ENB[32].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[32] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[32]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[33]";
    `endif
    CFG_DIR_CQ_INT_ENB[33] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[33]", this);
    CFG_DIR_CQ_INT_ENB[33].set_cfg(16'h0, 16'h0, 16'h0, 24'h421000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[33].set_space_addr("MSG", 24'h421000);
    CFG_DIR_CQ_INT_ENB[33].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[33].set_space_addr("MEM-SB",24'h421000);
    CFG_DIR_CQ_INT_ENB[33].set_space_addr("MEM", 24'h421000);
      CFG_DIR_CQ_INT_ENB[33].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[33].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[33].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[33].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[33].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[33].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[33].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[33].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[33]:dont_test") ) CFG_DIR_CQ_INT_ENB[33].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[33] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[33]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[34]";
    `endif
    CFG_DIR_CQ_INT_ENB[34] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[34]", this);
    CFG_DIR_CQ_INT_ENB[34].set_cfg(16'h0, 16'h0, 16'h0, 24'h422000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[34].set_space_addr("MSG", 24'h422000);
    CFG_DIR_CQ_INT_ENB[34].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[34].set_space_addr("MEM-SB",24'h422000);
    CFG_DIR_CQ_INT_ENB[34].set_space_addr("MEM", 24'h422000);
      CFG_DIR_CQ_INT_ENB[34].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[34].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[34].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[34].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[34].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[34].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[34].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[34].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[34]:dont_test") ) CFG_DIR_CQ_INT_ENB[34].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[34] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[34]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[35]";
    `endif
    CFG_DIR_CQ_INT_ENB[35] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[35]", this);
    CFG_DIR_CQ_INT_ENB[35].set_cfg(16'h0, 16'h0, 16'h0, 24'h423000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[35].set_space_addr("MSG", 24'h423000);
    CFG_DIR_CQ_INT_ENB[35].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[35].set_space_addr("MEM-SB",24'h423000);
    CFG_DIR_CQ_INT_ENB[35].set_space_addr("MEM", 24'h423000);
      CFG_DIR_CQ_INT_ENB[35].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[35].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[35].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[35].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[35].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[35].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[35].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[35].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[35]:dont_test") ) CFG_DIR_CQ_INT_ENB[35].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[35] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[35]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[36]";
    `endif
    CFG_DIR_CQ_INT_ENB[36] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[36]", this);
    CFG_DIR_CQ_INT_ENB[36].set_cfg(16'h0, 16'h0, 16'h0, 24'h424000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[36].set_space_addr("MSG", 24'h424000);
    CFG_DIR_CQ_INT_ENB[36].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[36].set_space_addr("MEM-SB",24'h424000);
    CFG_DIR_CQ_INT_ENB[36].set_space_addr("MEM", 24'h424000);
      CFG_DIR_CQ_INT_ENB[36].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[36].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[36].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[36].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[36].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[36].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[36].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[36].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[36]:dont_test") ) CFG_DIR_CQ_INT_ENB[36].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[36] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[36]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[37]";
    `endif
    CFG_DIR_CQ_INT_ENB[37] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[37]", this);
    CFG_DIR_CQ_INT_ENB[37].set_cfg(16'h0, 16'h0, 16'h0, 24'h425000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[37].set_space_addr("MSG", 24'h425000);
    CFG_DIR_CQ_INT_ENB[37].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[37].set_space_addr("MEM-SB",24'h425000);
    CFG_DIR_CQ_INT_ENB[37].set_space_addr("MEM", 24'h425000);
      CFG_DIR_CQ_INT_ENB[37].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[37].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[37].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[37].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[37].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[37].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[37].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[37].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[37]:dont_test") ) CFG_DIR_CQ_INT_ENB[37].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[37] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[37]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[38]";
    `endif
    CFG_DIR_CQ_INT_ENB[38] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[38]", this);
    CFG_DIR_CQ_INT_ENB[38].set_cfg(16'h0, 16'h0, 16'h0, 24'h426000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[38].set_space_addr("MSG", 24'h426000);
    CFG_DIR_CQ_INT_ENB[38].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[38].set_space_addr("MEM-SB",24'h426000);
    CFG_DIR_CQ_INT_ENB[38].set_space_addr("MEM", 24'h426000);
      CFG_DIR_CQ_INT_ENB[38].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[38].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[38].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[38].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[38].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[38].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[38].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[38].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[38]:dont_test") ) CFG_DIR_CQ_INT_ENB[38].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[38] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[38]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[39]";
    `endif
    CFG_DIR_CQ_INT_ENB[39] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[39]", this);
    CFG_DIR_CQ_INT_ENB[39].set_cfg(16'h0, 16'h0, 16'h0, 24'h427000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[39].set_space_addr("MSG", 24'h427000);
    CFG_DIR_CQ_INT_ENB[39].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[39].set_space_addr("MEM-SB",24'h427000);
    CFG_DIR_CQ_INT_ENB[39].set_space_addr("MEM", 24'h427000);
      CFG_DIR_CQ_INT_ENB[39].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[39].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[39].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[39].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[39].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[39].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[39].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[39].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[39]:dont_test") ) CFG_DIR_CQ_INT_ENB[39].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[39] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[39]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[40]";
    `endif
    CFG_DIR_CQ_INT_ENB[40] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[40]", this);
    CFG_DIR_CQ_INT_ENB[40].set_cfg(16'h0, 16'h0, 16'h0, 24'h428000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[40].set_space_addr("MSG", 24'h428000);
    CFG_DIR_CQ_INT_ENB[40].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[40].set_space_addr("MEM-SB",24'h428000);
    CFG_DIR_CQ_INT_ENB[40].set_space_addr("MEM", 24'h428000);
      CFG_DIR_CQ_INT_ENB[40].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[40].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[40].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[40].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[40].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[40].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[40].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[40].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[40]:dont_test") ) CFG_DIR_CQ_INT_ENB[40].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[40] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[40]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[41]";
    `endif
    CFG_DIR_CQ_INT_ENB[41] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[41]", this);
    CFG_DIR_CQ_INT_ENB[41].set_cfg(16'h0, 16'h0, 16'h0, 24'h429000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[41].set_space_addr("MSG", 24'h429000);
    CFG_DIR_CQ_INT_ENB[41].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[41].set_space_addr("MEM-SB",24'h429000);
    CFG_DIR_CQ_INT_ENB[41].set_space_addr("MEM", 24'h429000);
      CFG_DIR_CQ_INT_ENB[41].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[41].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[41].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[41].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[41].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[41].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[41].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[41].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[41]:dont_test") ) CFG_DIR_CQ_INT_ENB[41].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[41] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[41]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[42]";
    `endif
    CFG_DIR_CQ_INT_ENB[42] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[42]", this);
    CFG_DIR_CQ_INT_ENB[42].set_cfg(16'h0, 16'h0, 16'h0, 24'h42A000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[42].set_space_addr("MSG", 24'h42A000);
    CFG_DIR_CQ_INT_ENB[42].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[42].set_space_addr("MEM-SB",24'h42A000);
    CFG_DIR_CQ_INT_ENB[42].set_space_addr("MEM", 24'h42A000);
      CFG_DIR_CQ_INT_ENB[42].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[42].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[42].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[42].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[42].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[42].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[42].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[42].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[42]:dont_test") ) CFG_DIR_CQ_INT_ENB[42].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[42] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[42]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[43]";
    `endif
    CFG_DIR_CQ_INT_ENB[43] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[43]", this);
    CFG_DIR_CQ_INT_ENB[43].set_cfg(16'h0, 16'h0, 16'h0, 24'h42B000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[43].set_space_addr("MSG", 24'h42B000);
    CFG_DIR_CQ_INT_ENB[43].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[43].set_space_addr("MEM-SB",24'h42B000);
    CFG_DIR_CQ_INT_ENB[43].set_space_addr("MEM", 24'h42B000);
      CFG_DIR_CQ_INT_ENB[43].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[43].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[43].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[43].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[43].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[43].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[43].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[43].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[43]:dont_test") ) CFG_DIR_CQ_INT_ENB[43].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[43] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[43]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[44]";
    `endif
    CFG_DIR_CQ_INT_ENB[44] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[44]", this);
    CFG_DIR_CQ_INT_ENB[44].set_cfg(16'h0, 16'h0, 16'h0, 24'h42C000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[44].set_space_addr("MSG", 24'h42C000);
    CFG_DIR_CQ_INT_ENB[44].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[44].set_space_addr("MEM-SB",24'h42C000);
    CFG_DIR_CQ_INT_ENB[44].set_space_addr("MEM", 24'h42C000);
      CFG_DIR_CQ_INT_ENB[44].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[44].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[44].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[44].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[44].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[44].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[44].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[44].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[44]:dont_test") ) CFG_DIR_CQ_INT_ENB[44].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[44] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[44]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[45]";
    `endif
    CFG_DIR_CQ_INT_ENB[45] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[45]", this);
    CFG_DIR_CQ_INT_ENB[45].set_cfg(16'h0, 16'h0, 16'h0, 24'h42D000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[45].set_space_addr("MSG", 24'h42D000);
    CFG_DIR_CQ_INT_ENB[45].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[45].set_space_addr("MEM-SB",24'h42D000);
    CFG_DIR_CQ_INT_ENB[45].set_space_addr("MEM", 24'h42D000);
      CFG_DIR_CQ_INT_ENB[45].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[45].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[45].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[45].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[45].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[45].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[45].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[45].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[45]:dont_test") ) CFG_DIR_CQ_INT_ENB[45].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[45] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[45]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[46]";
    `endif
    CFG_DIR_CQ_INT_ENB[46] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[46]", this);
    CFG_DIR_CQ_INT_ENB[46].set_cfg(16'h0, 16'h0, 16'h0, 24'h42E000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[46].set_space_addr("MSG", 24'h42E000);
    CFG_DIR_CQ_INT_ENB[46].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[46].set_space_addr("MEM-SB",24'h42E000);
    CFG_DIR_CQ_INT_ENB[46].set_space_addr("MEM", 24'h42E000);
      CFG_DIR_CQ_INT_ENB[46].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[46].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[46].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[46].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[46].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[46].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[46].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[46].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[46]:dont_test") ) CFG_DIR_CQ_INT_ENB[46].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[46] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[46]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[47]";
    `endif
    CFG_DIR_CQ_INT_ENB[47] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[47]", this);
    CFG_DIR_CQ_INT_ENB[47].set_cfg(16'h0, 16'h0, 16'h0, 24'h42F000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[47].set_space_addr("MSG", 24'h42F000);
    CFG_DIR_CQ_INT_ENB[47].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[47].set_space_addr("MEM-SB",24'h42F000);
    CFG_DIR_CQ_INT_ENB[47].set_space_addr("MEM", 24'h42F000);
      CFG_DIR_CQ_INT_ENB[47].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[47].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[47].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[47].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[47].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[47].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[47].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[47].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[47]:dont_test") ) CFG_DIR_CQ_INT_ENB[47].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[47] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[47]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[48]";
    `endif
    CFG_DIR_CQ_INT_ENB[48] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[48]", this);
    CFG_DIR_CQ_INT_ENB[48].set_cfg(16'h0, 16'h0, 16'h0, 24'h430000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[48].set_space_addr("MSG", 24'h430000);
    CFG_DIR_CQ_INT_ENB[48].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[48].set_space_addr("MEM-SB",24'h430000);
    CFG_DIR_CQ_INT_ENB[48].set_space_addr("MEM", 24'h430000);
      CFG_DIR_CQ_INT_ENB[48].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[48].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[48].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[48].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[48].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[48].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[48].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[48].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[48]:dont_test") ) CFG_DIR_CQ_INT_ENB[48].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[48] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[48]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[49]";
    `endif
    CFG_DIR_CQ_INT_ENB[49] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[49]", this);
    CFG_DIR_CQ_INT_ENB[49].set_cfg(16'h0, 16'h0, 16'h0, 24'h431000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[49].set_space_addr("MSG", 24'h431000);
    CFG_DIR_CQ_INT_ENB[49].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[49].set_space_addr("MEM-SB",24'h431000);
    CFG_DIR_CQ_INT_ENB[49].set_space_addr("MEM", 24'h431000);
      CFG_DIR_CQ_INT_ENB[49].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[49].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[49].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[49].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[49].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[49].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[49].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[49].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[49]:dont_test") ) CFG_DIR_CQ_INT_ENB[49].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[49] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[49]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[50]";
    `endif
    CFG_DIR_CQ_INT_ENB[50] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[50]", this);
    CFG_DIR_CQ_INT_ENB[50].set_cfg(16'h0, 16'h0, 16'h0, 24'h432000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[50].set_space_addr("MSG", 24'h432000);
    CFG_DIR_CQ_INT_ENB[50].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[50].set_space_addr("MEM-SB",24'h432000);
    CFG_DIR_CQ_INT_ENB[50].set_space_addr("MEM", 24'h432000);
      CFG_DIR_CQ_INT_ENB[50].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[50].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[50].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[50].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[50].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[50].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[50].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[50].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[50]:dont_test") ) CFG_DIR_CQ_INT_ENB[50].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[50] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[50]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[51]";
    `endif
    CFG_DIR_CQ_INT_ENB[51] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[51]", this);
    CFG_DIR_CQ_INT_ENB[51].set_cfg(16'h0, 16'h0, 16'h0, 24'h433000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[51].set_space_addr("MSG", 24'h433000);
    CFG_DIR_CQ_INT_ENB[51].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[51].set_space_addr("MEM-SB",24'h433000);
    CFG_DIR_CQ_INT_ENB[51].set_space_addr("MEM", 24'h433000);
      CFG_DIR_CQ_INT_ENB[51].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[51].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[51].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[51].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[51].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[51].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[51].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[51].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[51]:dont_test") ) CFG_DIR_CQ_INT_ENB[51].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[51] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[51]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[52]";
    `endif
    CFG_DIR_CQ_INT_ENB[52] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[52]", this);
    CFG_DIR_CQ_INT_ENB[52].set_cfg(16'h0, 16'h0, 16'h0, 24'h434000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[52].set_space_addr("MSG", 24'h434000);
    CFG_DIR_CQ_INT_ENB[52].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[52].set_space_addr("MEM-SB",24'h434000);
    CFG_DIR_CQ_INT_ENB[52].set_space_addr("MEM", 24'h434000);
      CFG_DIR_CQ_INT_ENB[52].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[52].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[52].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[52].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[52].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[52].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[52].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[52].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[52]:dont_test") ) CFG_DIR_CQ_INT_ENB[52].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[52] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[52]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[53]";
    `endif
    CFG_DIR_CQ_INT_ENB[53] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[53]", this);
    CFG_DIR_CQ_INT_ENB[53].set_cfg(16'h0, 16'h0, 16'h0, 24'h435000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[53].set_space_addr("MSG", 24'h435000);
    CFG_DIR_CQ_INT_ENB[53].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[53].set_space_addr("MEM-SB",24'h435000);
    CFG_DIR_CQ_INT_ENB[53].set_space_addr("MEM", 24'h435000);
      CFG_DIR_CQ_INT_ENB[53].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[53].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[53].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[53].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[53].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[53].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[53].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[53].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[53]:dont_test") ) CFG_DIR_CQ_INT_ENB[53].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[53] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[53]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[54]";
    `endif
    CFG_DIR_CQ_INT_ENB[54] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[54]", this);
    CFG_DIR_CQ_INT_ENB[54].set_cfg(16'h0, 16'h0, 16'h0, 24'h436000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[54].set_space_addr("MSG", 24'h436000);
    CFG_DIR_CQ_INT_ENB[54].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[54].set_space_addr("MEM-SB",24'h436000);
    CFG_DIR_CQ_INT_ENB[54].set_space_addr("MEM", 24'h436000);
      CFG_DIR_CQ_INT_ENB[54].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[54].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[54].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[54].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[54].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[54].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[54].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[54].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[54]:dont_test") ) CFG_DIR_CQ_INT_ENB[54].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[54] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[54]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[55]";
    `endif
    CFG_DIR_CQ_INT_ENB[55] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[55]", this);
    CFG_DIR_CQ_INT_ENB[55].set_cfg(16'h0, 16'h0, 16'h0, 24'h437000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[55].set_space_addr("MSG", 24'h437000);
    CFG_DIR_CQ_INT_ENB[55].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[55].set_space_addr("MEM-SB",24'h437000);
    CFG_DIR_CQ_INT_ENB[55].set_space_addr("MEM", 24'h437000);
      CFG_DIR_CQ_INT_ENB[55].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[55].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[55].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[55].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[55].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[55].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[55].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[55].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[55]:dont_test") ) CFG_DIR_CQ_INT_ENB[55].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[55] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[55]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[56]";
    `endif
    CFG_DIR_CQ_INT_ENB[56] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[56]", this);
    CFG_DIR_CQ_INT_ENB[56].set_cfg(16'h0, 16'h0, 16'h0, 24'h438000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[56].set_space_addr("MSG", 24'h438000);
    CFG_DIR_CQ_INT_ENB[56].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[56].set_space_addr("MEM-SB",24'h438000);
    CFG_DIR_CQ_INT_ENB[56].set_space_addr("MEM", 24'h438000);
      CFG_DIR_CQ_INT_ENB[56].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[56].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[56].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[56].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[56].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[56].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[56].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[56].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[56]:dont_test") ) CFG_DIR_CQ_INT_ENB[56].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[56] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[56]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[57]";
    `endif
    CFG_DIR_CQ_INT_ENB[57] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[57]", this);
    CFG_DIR_CQ_INT_ENB[57].set_cfg(16'h0, 16'h0, 16'h0, 24'h439000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[57].set_space_addr("MSG", 24'h439000);
    CFG_DIR_CQ_INT_ENB[57].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[57].set_space_addr("MEM-SB",24'h439000);
    CFG_DIR_CQ_INT_ENB[57].set_space_addr("MEM", 24'h439000);
      CFG_DIR_CQ_INT_ENB[57].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[57].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[57].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[57].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[57].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[57].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[57].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[57].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[57]:dont_test") ) CFG_DIR_CQ_INT_ENB[57].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[57] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[57]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[58]";
    `endif
    CFG_DIR_CQ_INT_ENB[58] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[58]", this);
    CFG_DIR_CQ_INT_ENB[58].set_cfg(16'h0, 16'h0, 16'h0, 24'h43A000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[58].set_space_addr("MSG", 24'h43A000);
    CFG_DIR_CQ_INT_ENB[58].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[58].set_space_addr("MEM-SB",24'h43A000);
    CFG_DIR_CQ_INT_ENB[58].set_space_addr("MEM", 24'h43A000);
      CFG_DIR_CQ_INT_ENB[58].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[58].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[58].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[58].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[58].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[58].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[58].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[58].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[58]:dont_test") ) CFG_DIR_CQ_INT_ENB[58].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[58] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[58]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[59]";
    `endif
    CFG_DIR_CQ_INT_ENB[59] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[59]", this);
    CFG_DIR_CQ_INT_ENB[59].set_cfg(16'h0, 16'h0, 16'h0, 24'h43B000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[59].set_space_addr("MSG", 24'h43B000);
    CFG_DIR_CQ_INT_ENB[59].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[59].set_space_addr("MEM-SB",24'h43B000);
    CFG_DIR_CQ_INT_ENB[59].set_space_addr("MEM", 24'h43B000);
      CFG_DIR_CQ_INT_ENB[59].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[59].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[59].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[59].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[59].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[59].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[59].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[59].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[59]:dont_test") ) CFG_DIR_CQ_INT_ENB[59].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[59] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[59]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[60]";
    `endif
    CFG_DIR_CQ_INT_ENB[60] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[60]", this);
    CFG_DIR_CQ_INT_ENB[60].set_cfg(16'h0, 16'h0, 16'h0, 24'h43C000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[60].set_space_addr("MSG", 24'h43C000);
    CFG_DIR_CQ_INT_ENB[60].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[60].set_space_addr("MEM-SB",24'h43C000);
    CFG_DIR_CQ_INT_ENB[60].set_space_addr("MEM", 24'h43C000);
      CFG_DIR_CQ_INT_ENB[60].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[60].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[60].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[60].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[60].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[60].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[60].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[60].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[60]:dont_test") ) CFG_DIR_CQ_INT_ENB[60].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[60] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[60]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[61]";
    `endif
    CFG_DIR_CQ_INT_ENB[61] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[61]", this);
    CFG_DIR_CQ_INT_ENB[61].set_cfg(16'h0, 16'h0, 16'h0, 24'h43D000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[61].set_space_addr("MSG", 24'h43D000);
    CFG_DIR_CQ_INT_ENB[61].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[61].set_space_addr("MEM-SB",24'h43D000);
    CFG_DIR_CQ_INT_ENB[61].set_space_addr("MEM", 24'h43D000);
      CFG_DIR_CQ_INT_ENB[61].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[61].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[61].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[61].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[61].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[61].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[61].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[61].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[61]:dont_test") ) CFG_DIR_CQ_INT_ENB[61].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[61] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[61]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[62]";
    `endif
    CFG_DIR_CQ_INT_ENB[62] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[62]", this);
    CFG_DIR_CQ_INT_ENB[62].set_cfg(16'h0, 16'h0, 16'h0, 24'h43E000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[62].set_space_addr("MSG", 24'h43E000);
    CFG_DIR_CQ_INT_ENB[62].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[62].set_space_addr("MEM-SB",24'h43E000);
    CFG_DIR_CQ_INT_ENB[62].set_space_addr("MEM", 24'h43E000);
      CFG_DIR_CQ_INT_ENB[62].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[62].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[62].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[62].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[62].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[62].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[62].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[62].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[62]:dont_test") ) CFG_DIR_CQ_INT_ENB[62].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[62] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[62]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INT_ENB[63]";
    `endif
    CFG_DIR_CQ_INT_ENB[63] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INT_ENB_reg::type_id::create("CFG_DIR_CQ_INT_ENB[63]", this);
    CFG_DIR_CQ_INT_ENB[63].set_cfg(16'h0, 16'h0, 16'h0, 24'h43F000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INT_ENB[63].set_space_addr("MSG", 24'h43F000);
    CFG_DIR_CQ_INT_ENB[63].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INT_ENB[63].set_space_addr("MEM-SB",24'h43F000);
    CFG_DIR_CQ_INT_ENB[63].set_space_addr("MEM", 24'h43F000);
      CFG_DIR_CQ_INT_ENB[63].set_space("MEM");
      CFG_DIR_CQ_INT_ENB[63].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INT_ENB[63].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INT_ENB[63].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INT_ENB[63].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INT_ENB[63].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INT_ENB[63].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INT_ENB[63].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INT_ENB[63]:dont_test") ) CFG_DIR_CQ_INT_ENB[63].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INT_ENB[63] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INT_ENB[63]"));
      end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_DIR_CQ_TIMER_COUNT[%0d]",i);
    `endif
    CFG_DIR_CQ_TIMER_COUNT[i] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_COUNT_reg::type_id::create($psprintf("CFG_DIR_CQ_TIMER_COUNT[%0d]",i), this);
    CFG_DIR_CQ_TIMER_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h480000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_TIMER_COUNT[i].set_space_addr("MSG",  (24'h480000 + (i*4096)) );
    CFG_DIR_CQ_TIMER_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_TIMER_COUNT[i].set_space_addr("MEM-SB", (24'h480000 + (i*4096)) );
    CFG_DIR_CQ_TIMER_COUNT[i].set_space_addr("MEM",  (24'h480000 + (i*4096)) );
      CFG_DIR_CQ_TIMER_COUNT[i].set_space("MEM");
      CFG_DIR_CQ_TIMER_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_TIMER_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_TIMER_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_TIMER_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_TIMER_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_TIMER_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_TIMER_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_DIR_CQ_TIMER_COUNT[%0d]:dont_test",i)) ) CFG_DIR_CQ_TIMER_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_TIMER_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_DIR_CQ_TIMER_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_DIR_CQ_TIMER_THRESHOLD[%0d]",i);
    `endif
    CFG_DIR_CQ_TIMER_THRESHOLD[i] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_THRESHOLD_reg::type_id::create($psprintf("CFG_DIR_CQ_TIMER_THRESHOLD[%0d]",i), this);
    CFG_DIR_CQ_TIMER_THRESHOLD[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h500000 + (i *4096)), 32, 32'b00000000000000000000000000000001);
    CFG_DIR_CQ_TIMER_THRESHOLD[i].set_space_addr("MSG",  (24'h500000 + (i*4096)) );
    CFG_DIR_CQ_TIMER_THRESHOLD[i].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_TIMER_THRESHOLD[i].set_space_addr("MEM-SB", (24'h500000 + (i*4096)) );
    CFG_DIR_CQ_TIMER_THRESHOLD[i].set_space_addr("MEM",  (24'h500000 + (i*4096)) );
      CFG_DIR_CQ_TIMER_THRESHOLD[i].set_space("MEM");
      CFG_DIR_CQ_TIMER_THRESHOLD[i].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_TIMER_THRESHOLD[i].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_TIMER_THRESHOLD[i].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_TIMER_THRESHOLD[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_TIMER_THRESHOLD[i].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_TIMER_THRESHOLD[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_TIMER_THRESHOLD[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_DIR_CQ_TIMER_THRESHOLD[%0d]:dont_test",i)) ) CFG_DIR_CQ_TIMER_THRESHOLD[i].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_TIMER_THRESHOLD[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_DIR_CQ_TIMER_THRESHOLD[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_DIR_CQ_TOKEN_DEPTH_SELECT[%0d]",i);
    `endif
    CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TOKEN_DEPTH_SELECT_reg::type_id::create($psprintf("CFG_DIR_CQ_TOKEN_DEPTH_SELECT[%0d]",i), this);
    CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h580000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_space_addr("MSG",  (24'h580000 + (i*4096)) );
    CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_space_addr("MEM-SB", (24'h580000 + (i*4096)) );
    CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_space_addr("MEM",  (24'h580000 + (i*4096)) );
      CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_space("MEM");
      CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_DIR_CQ_TOKEN_DEPTH_SELECT[%0d]:dont_test",i)) ) CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_TOKEN_DEPTH_SELECT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_DIR_CQ_TOKEN_DEPTH_SELECT[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[0]";
    `endif
    CFG_DIR_CQ_WD_ENB[0] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[0]", this);
    CFG_DIR_CQ_WD_ENB[0].set_cfg(16'h0, 16'h0, 16'h0, 24'h600000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[0].set_space_addr("MSG", 24'h600000);
    CFG_DIR_CQ_WD_ENB[0].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[0].set_space_addr("MEM-SB",24'h600000);
    CFG_DIR_CQ_WD_ENB[0].set_space_addr("MEM", 24'h600000);
      CFG_DIR_CQ_WD_ENB[0].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[0].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[0].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[0].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[0].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[0].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[0].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[0].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[0]:dont_test") ) CFG_DIR_CQ_WD_ENB[0].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[0] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[0]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[1]";
    `endif
    CFG_DIR_CQ_WD_ENB[1] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[1]", this);
    CFG_DIR_CQ_WD_ENB[1].set_cfg(16'h0, 16'h0, 16'h0, 24'h601000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[1].set_space_addr("MSG", 24'h601000);
    CFG_DIR_CQ_WD_ENB[1].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[1].set_space_addr("MEM-SB",24'h601000);
    CFG_DIR_CQ_WD_ENB[1].set_space_addr("MEM", 24'h601000);
      CFG_DIR_CQ_WD_ENB[1].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[1].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[1].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[1].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[1].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[1].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[1].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[1].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[1]:dont_test") ) CFG_DIR_CQ_WD_ENB[1].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[1] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[2]";
    `endif
    CFG_DIR_CQ_WD_ENB[2] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[2]", this);
    CFG_DIR_CQ_WD_ENB[2].set_cfg(16'h0, 16'h0, 16'h0, 24'h602000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[2].set_space_addr("MSG", 24'h602000);
    CFG_DIR_CQ_WD_ENB[2].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[2].set_space_addr("MEM-SB",24'h602000);
    CFG_DIR_CQ_WD_ENB[2].set_space_addr("MEM", 24'h602000);
      CFG_DIR_CQ_WD_ENB[2].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[2].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[2].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[2].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[2].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[2].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[2].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[2].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[2]:dont_test") ) CFG_DIR_CQ_WD_ENB[2].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[2] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[3]";
    `endif
    CFG_DIR_CQ_WD_ENB[3] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[3]", this);
    CFG_DIR_CQ_WD_ENB[3].set_cfg(16'h0, 16'h0, 16'h0, 24'h603000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[3].set_space_addr("MSG", 24'h603000);
    CFG_DIR_CQ_WD_ENB[3].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[3].set_space_addr("MEM-SB",24'h603000);
    CFG_DIR_CQ_WD_ENB[3].set_space_addr("MEM", 24'h603000);
      CFG_DIR_CQ_WD_ENB[3].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[3].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[3].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[3].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[3].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[3].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[3].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[3].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[3]:dont_test") ) CFG_DIR_CQ_WD_ENB[3].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[3] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[4]";
    `endif
    CFG_DIR_CQ_WD_ENB[4] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[4]", this);
    CFG_DIR_CQ_WD_ENB[4].set_cfg(16'h0, 16'h0, 16'h0, 24'h604000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[4].set_space_addr("MSG", 24'h604000);
    CFG_DIR_CQ_WD_ENB[4].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[4].set_space_addr("MEM-SB",24'h604000);
    CFG_DIR_CQ_WD_ENB[4].set_space_addr("MEM", 24'h604000);
      CFG_DIR_CQ_WD_ENB[4].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[4].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[4].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[4].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[4].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[4].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[4].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[4].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[4]:dont_test") ) CFG_DIR_CQ_WD_ENB[4].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[4] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[5]";
    `endif
    CFG_DIR_CQ_WD_ENB[5] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[5]", this);
    CFG_DIR_CQ_WD_ENB[5].set_cfg(16'h0, 16'h0, 16'h0, 24'h605000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[5].set_space_addr("MSG", 24'h605000);
    CFG_DIR_CQ_WD_ENB[5].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[5].set_space_addr("MEM-SB",24'h605000);
    CFG_DIR_CQ_WD_ENB[5].set_space_addr("MEM", 24'h605000);
      CFG_DIR_CQ_WD_ENB[5].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[5].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[5].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[5].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[5].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[5].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[5].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[5].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[5]:dont_test") ) CFG_DIR_CQ_WD_ENB[5].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[5] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[6]";
    `endif
    CFG_DIR_CQ_WD_ENB[6] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[6]", this);
    CFG_DIR_CQ_WD_ENB[6].set_cfg(16'h0, 16'h0, 16'h0, 24'h606000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[6].set_space_addr("MSG", 24'h606000);
    CFG_DIR_CQ_WD_ENB[6].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[6].set_space_addr("MEM-SB",24'h606000);
    CFG_DIR_CQ_WD_ENB[6].set_space_addr("MEM", 24'h606000);
      CFG_DIR_CQ_WD_ENB[6].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[6].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[6].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[6].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[6].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[6].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[6].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[6].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[6]:dont_test") ) CFG_DIR_CQ_WD_ENB[6].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[6] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[7]";
    `endif
    CFG_DIR_CQ_WD_ENB[7] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[7]", this);
    CFG_DIR_CQ_WD_ENB[7].set_cfg(16'h0, 16'h0, 16'h0, 24'h607000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[7].set_space_addr("MSG", 24'h607000);
    CFG_DIR_CQ_WD_ENB[7].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[7].set_space_addr("MEM-SB",24'h607000);
    CFG_DIR_CQ_WD_ENB[7].set_space_addr("MEM", 24'h607000);
      CFG_DIR_CQ_WD_ENB[7].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[7].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[7].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[7].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[7].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[7].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[7].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[7].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[7]:dont_test") ) CFG_DIR_CQ_WD_ENB[7].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[7] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[8]";
    `endif
    CFG_DIR_CQ_WD_ENB[8] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[8]", this);
    CFG_DIR_CQ_WD_ENB[8].set_cfg(16'h0, 16'h0, 16'h0, 24'h608000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[8].set_space_addr("MSG", 24'h608000);
    CFG_DIR_CQ_WD_ENB[8].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[8].set_space_addr("MEM-SB",24'h608000);
    CFG_DIR_CQ_WD_ENB[8].set_space_addr("MEM", 24'h608000);
      CFG_DIR_CQ_WD_ENB[8].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[8].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[8].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[8].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[8].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[8].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[8].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[8].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[8]:dont_test") ) CFG_DIR_CQ_WD_ENB[8].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[8] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[9]";
    `endif
    CFG_DIR_CQ_WD_ENB[9] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[9]", this);
    CFG_DIR_CQ_WD_ENB[9].set_cfg(16'h0, 16'h0, 16'h0, 24'h609000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[9].set_space_addr("MSG", 24'h609000);
    CFG_DIR_CQ_WD_ENB[9].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[9].set_space_addr("MEM-SB",24'h609000);
    CFG_DIR_CQ_WD_ENB[9].set_space_addr("MEM", 24'h609000);
      CFG_DIR_CQ_WD_ENB[9].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[9].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[9].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[9].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[9].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[9].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[9].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[9].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[9]:dont_test") ) CFG_DIR_CQ_WD_ENB[9].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[9] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[10]";
    `endif
    CFG_DIR_CQ_WD_ENB[10] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[10]", this);
    CFG_DIR_CQ_WD_ENB[10].set_cfg(16'h0, 16'h0, 16'h0, 24'h60A000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[10].set_space_addr("MSG", 24'h60A000);
    CFG_DIR_CQ_WD_ENB[10].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[10].set_space_addr("MEM-SB",24'h60A000);
    CFG_DIR_CQ_WD_ENB[10].set_space_addr("MEM", 24'h60A000);
      CFG_DIR_CQ_WD_ENB[10].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[10].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[10].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[10].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[10].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[10].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[10].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[10].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[10]:dont_test") ) CFG_DIR_CQ_WD_ENB[10].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[10] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[11]";
    `endif
    CFG_DIR_CQ_WD_ENB[11] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[11]", this);
    CFG_DIR_CQ_WD_ENB[11].set_cfg(16'h0, 16'h0, 16'h0, 24'h60B000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[11].set_space_addr("MSG", 24'h60B000);
    CFG_DIR_CQ_WD_ENB[11].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[11].set_space_addr("MEM-SB",24'h60B000);
    CFG_DIR_CQ_WD_ENB[11].set_space_addr("MEM", 24'h60B000);
      CFG_DIR_CQ_WD_ENB[11].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[11].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[11].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[11].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[11].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[11].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[11].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[11].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[11]:dont_test") ) CFG_DIR_CQ_WD_ENB[11].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[11] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[12]";
    `endif
    CFG_DIR_CQ_WD_ENB[12] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[12]", this);
    CFG_DIR_CQ_WD_ENB[12].set_cfg(16'h0, 16'h0, 16'h0, 24'h60C000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[12].set_space_addr("MSG", 24'h60C000);
    CFG_DIR_CQ_WD_ENB[12].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[12].set_space_addr("MEM-SB",24'h60C000);
    CFG_DIR_CQ_WD_ENB[12].set_space_addr("MEM", 24'h60C000);
      CFG_DIR_CQ_WD_ENB[12].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[12].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[12].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[12].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[12].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[12].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[12].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[12].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[12]:dont_test") ) CFG_DIR_CQ_WD_ENB[12].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[12] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[13]";
    `endif
    CFG_DIR_CQ_WD_ENB[13] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[13]", this);
    CFG_DIR_CQ_WD_ENB[13].set_cfg(16'h0, 16'h0, 16'h0, 24'h60D000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[13].set_space_addr("MSG", 24'h60D000);
    CFG_DIR_CQ_WD_ENB[13].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[13].set_space_addr("MEM-SB",24'h60D000);
    CFG_DIR_CQ_WD_ENB[13].set_space_addr("MEM", 24'h60D000);
      CFG_DIR_CQ_WD_ENB[13].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[13].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[13].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[13].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[13].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[13].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[13].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[13].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[13]:dont_test") ) CFG_DIR_CQ_WD_ENB[13].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[13] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[14]";
    `endif
    CFG_DIR_CQ_WD_ENB[14] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[14]", this);
    CFG_DIR_CQ_WD_ENB[14].set_cfg(16'h0, 16'h0, 16'h0, 24'h60E000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[14].set_space_addr("MSG", 24'h60E000);
    CFG_DIR_CQ_WD_ENB[14].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[14].set_space_addr("MEM-SB",24'h60E000);
    CFG_DIR_CQ_WD_ENB[14].set_space_addr("MEM", 24'h60E000);
      CFG_DIR_CQ_WD_ENB[14].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[14].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[14].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[14].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[14].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[14].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[14].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[14].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[14]:dont_test") ) CFG_DIR_CQ_WD_ENB[14].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[14] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[15]";
    `endif
    CFG_DIR_CQ_WD_ENB[15] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[15]", this);
    CFG_DIR_CQ_WD_ENB[15].set_cfg(16'h0, 16'h0, 16'h0, 24'h60F000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[15].set_space_addr("MSG", 24'h60F000);
    CFG_DIR_CQ_WD_ENB[15].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[15].set_space_addr("MEM-SB",24'h60F000);
    CFG_DIR_CQ_WD_ENB[15].set_space_addr("MEM", 24'h60F000);
      CFG_DIR_CQ_WD_ENB[15].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[15].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[15].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[15].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[15].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[15].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[15].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[15].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[15]:dont_test") ) CFG_DIR_CQ_WD_ENB[15].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[15] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[16]";
    `endif
    CFG_DIR_CQ_WD_ENB[16] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[16]", this);
    CFG_DIR_CQ_WD_ENB[16].set_cfg(16'h0, 16'h0, 16'h0, 24'h610000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[16].set_space_addr("MSG", 24'h610000);
    CFG_DIR_CQ_WD_ENB[16].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[16].set_space_addr("MEM-SB",24'h610000);
    CFG_DIR_CQ_WD_ENB[16].set_space_addr("MEM", 24'h610000);
      CFG_DIR_CQ_WD_ENB[16].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[16].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[16].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[16].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[16].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[16].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[16].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[16].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[16]:dont_test") ) CFG_DIR_CQ_WD_ENB[16].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[16] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[17]";
    `endif
    CFG_DIR_CQ_WD_ENB[17] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[17]", this);
    CFG_DIR_CQ_WD_ENB[17].set_cfg(16'h0, 16'h0, 16'h0, 24'h611000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[17].set_space_addr("MSG", 24'h611000);
    CFG_DIR_CQ_WD_ENB[17].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[17].set_space_addr("MEM-SB",24'h611000);
    CFG_DIR_CQ_WD_ENB[17].set_space_addr("MEM", 24'h611000);
      CFG_DIR_CQ_WD_ENB[17].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[17].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[17].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[17].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[17].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[17].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[17].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[17].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[17]:dont_test") ) CFG_DIR_CQ_WD_ENB[17].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[17] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[18]";
    `endif
    CFG_DIR_CQ_WD_ENB[18] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[18]", this);
    CFG_DIR_CQ_WD_ENB[18].set_cfg(16'h0, 16'h0, 16'h0, 24'h612000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[18].set_space_addr("MSG", 24'h612000);
    CFG_DIR_CQ_WD_ENB[18].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[18].set_space_addr("MEM-SB",24'h612000);
    CFG_DIR_CQ_WD_ENB[18].set_space_addr("MEM", 24'h612000);
      CFG_DIR_CQ_WD_ENB[18].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[18].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[18].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[18].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[18].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[18].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[18].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[18].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[18]:dont_test") ) CFG_DIR_CQ_WD_ENB[18].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[18] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[19]";
    `endif
    CFG_DIR_CQ_WD_ENB[19] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[19]", this);
    CFG_DIR_CQ_WD_ENB[19].set_cfg(16'h0, 16'h0, 16'h0, 24'h613000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[19].set_space_addr("MSG", 24'h613000);
    CFG_DIR_CQ_WD_ENB[19].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[19].set_space_addr("MEM-SB",24'h613000);
    CFG_DIR_CQ_WD_ENB[19].set_space_addr("MEM", 24'h613000);
      CFG_DIR_CQ_WD_ENB[19].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[19].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[19].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[19].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[19].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[19].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[19].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[19].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[19]:dont_test") ) CFG_DIR_CQ_WD_ENB[19].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[19] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[20]";
    `endif
    CFG_DIR_CQ_WD_ENB[20] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[20]", this);
    CFG_DIR_CQ_WD_ENB[20].set_cfg(16'h0, 16'h0, 16'h0, 24'h614000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[20].set_space_addr("MSG", 24'h614000);
    CFG_DIR_CQ_WD_ENB[20].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[20].set_space_addr("MEM-SB",24'h614000);
    CFG_DIR_CQ_WD_ENB[20].set_space_addr("MEM", 24'h614000);
      CFG_DIR_CQ_WD_ENB[20].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[20].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[20].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[20].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[20].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[20].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[20].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[20].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[20]:dont_test") ) CFG_DIR_CQ_WD_ENB[20].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[20] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[21]";
    `endif
    CFG_DIR_CQ_WD_ENB[21] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[21]", this);
    CFG_DIR_CQ_WD_ENB[21].set_cfg(16'h0, 16'h0, 16'h0, 24'h615000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[21].set_space_addr("MSG", 24'h615000);
    CFG_DIR_CQ_WD_ENB[21].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[21].set_space_addr("MEM-SB",24'h615000);
    CFG_DIR_CQ_WD_ENB[21].set_space_addr("MEM", 24'h615000);
      CFG_DIR_CQ_WD_ENB[21].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[21].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[21].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[21].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[21].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[21].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[21].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[21].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[21]:dont_test") ) CFG_DIR_CQ_WD_ENB[21].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[21] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[22]";
    `endif
    CFG_DIR_CQ_WD_ENB[22] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[22]", this);
    CFG_DIR_CQ_WD_ENB[22].set_cfg(16'h0, 16'h0, 16'h0, 24'h616000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[22].set_space_addr("MSG", 24'h616000);
    CFG_DIR_CQ_WD_ENB[22].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[22].set_space_addr("MEM-SB",24'h616000);
    CFG_DIR_CQ_WD_ENB[22].set_space_addr("MEM", 24'h616000);
      CFG_DIR_CQ_WD_ENB[22].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[22].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[22].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[22].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[22].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[22].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[22].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[22].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[22]:dont_test") ) CFG_DIR_CQ_WD_ENB[22].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[22] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[23]";
    `endif
    CFG_DIR_CQ_WD_ENB[23] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[23]", this);
    CFG_DIR_CQ_WD_ENB[23].set_cfg(16'h0, 16'h0, 16'h0, 24'h617000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[23].set_space_addr("MSG", 24'h617000);
    CFG_DIR_CQ_WD_ENB[23].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[23].set_space_addr("MEM-SB",24'h617000);
    CFG_DIR_CQ_WD_ENB[23].set_space_addr("MEM", 24'h617000);
      CFG_DIR_CQ_WD_ENB[23].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[23].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[23].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[23].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[23].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[23].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[23].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[23].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[23]:dont_test") ) CFG_DIR_CQ_WD_ENB[23].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[23] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[24]";
    `endif
    CFG_DIR_CQ_WD_ENB[24] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[24]", this);
    CFG_DIR_CQ_WD_ENB[24].set_cfg(16'h0, 16'h0, 16'h0, 24'h618000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[24].set_space_addr("MSG", 24'h618000);
    CFG_DIR_CQ_WD_ENB[24].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[24].set_space_addr("MEM-SB",24'h618000);
    CFG_DIR_CQ_WD_ENB[24].set_space_addr("MEM", 24'h618000);
      CFG_DIR_CQ_WD_ENB[24].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[24].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[24].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[24].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[24].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[24].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[24].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[24].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[24]:dont_test") ) CFG_DIR_CQ_WD_ENB[24].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[24] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[25]";
    `endif
    CFG_DIR_CQ_WD_ENB[25] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[25]", this);
    CFG_DIR_CQ_WD_ENB[25].set_cfg(16'h0, 16'h0, 16'h0, 24'h619000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[25].set_space_addr("MSG", 24'h619000);
    CFG_DIR_CQ_WD_ENB[25].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[25].set_space_addr("MEM-SB",24'h619000);
    CFG_DIR_CQ_WD_ENB[25].set_space_addr("MEM", 24'h619000);
      CFG_DIR_CQ_WD_ENB[25].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[25].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[25].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[25].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[25].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[25].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[25].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[25].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[25]:dont_test") ) CFG_DIR_CQ_WD_ENB[25].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[25] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[26]";
    `endif
    CFG_DIR_CQ_WD_ENB[26] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[26]", this);
    CFG_DIR_CQ_WD_ENB[26].set_cfg(16'h0, 16'h0, 16'h0, 24'h61A000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[26].set_space_addr("MSG", 24'h61A000);
    CFG_DIR_CQ_WD_ENB[26].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[26].set_space_addr("MEM-SB",24'h61A000);
    CFG_DIR_CQ_WD_ENB[26].set_space_addr("MEM", 24'h61A000);
      CFG_DIR_CQ_WD_ENB[26].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[26].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[26].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[26].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[26].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[26].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[26].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[26].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[26]:dont_test") ) CFG_DIR_CQ_WD_ENB[26].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[26] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[27]";
    `endif
    CFG_DIR_CQ_WD_ENB[27] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[27]", this);
    CFG_DIR_CQ_WD_ENB[27].set_cfg(16'h0, 16'h0, 16'h0, 24'h61B000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[27].set_space_addr("MSG", 24'h61B000);
    CFG_DIR_CQ_WD_ENB[27].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[27].set_space_addr("MEM-SB",24'h61B000);
    CFG_DIR_CQ_WD_ENB[27].set_space_addr("MEM", 24'h61B000);
      CFG_DIR_CQ_WD_ENB[27].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[27].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[27].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[27].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[27].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[27].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[27].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[27].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[27]:dont_test") ) CFG_DIR_CQ_WD_ENB[27].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[27] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[28]";
    `endif
    CFG_DIR_CQ_WD_ENB[28] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[28]", this);
    CFG_DIR_CQ_WD_ENB[28].set_cfg(16'h0, 16'h0, 16'h0, 24'h61C000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[28].set_space_addr("MSG", 24'h61C000);
    CFG_DIR_CQ_WD_ENB[28].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[28].set_space_addr("MEM-SB",24'h61C000);
    CFG_DIR_CQ_WD_ENB[28].set_space_addr("MEM", 24'h61C000);
      CFG_DIR_CQ_WD_ENB[28].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[28].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[28].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[28].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[28].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[28].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[28].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[28].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[28]:dont_test") ) CFG_DIR_CQ_WD_ENB[28].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[28] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[29]";
    `endif
    CFG_DIR_CQ_WD_ENB[29] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[29]", this);
    CFG_DIR_CQ_WD_ENB[29].set_cfg(16'h0, 16'h0, 16'h0, 24'h61D000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[29].set_space_addr("MSG", 24'h61D000);
    CFG_DIR_CQ_WD_ENB[29].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[29].set_space_addr("MEM-SB",24'h61D000);
    CFG_DIR_CQ_WD_ENB[29].set_space_addr("MEM", 24'h61D000);
      CFG_DIR_CQ_WD_ENB[29].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[29].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[29].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[29].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[29].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[29].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[29].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[29].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[29]:dont_test") ) CFG_DIR_CQ_WD_ENB[29].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[29] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[30]";
    `endif
    CFG_DIR_CQ_WD_ENB[30] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[30]", this);
    CFG_DIR_CQ_WD_ENB[30].set_cfg(16'h0, 16'h0, 16'h0, 24'h61E000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[30].set_space_addr("MSG", 24'h61E000);
    CFG_DIR_CQ_WD_ENB[30].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[30].set_space_addr("MEM-SB",24'h61E000);
    CFG_DIR_CQ_WD_ENB[30].set_space_addr("MEM", 24'h61E000);
      CFG_DIR_CQ_WD_ENB[30].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[30].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[30].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[30].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[30].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[30].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[30].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[30].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[30]:dont_test") ) CFG_DIR_CQ_WD_ENB[30].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[30] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[31]";
    `endif
    CFG_DIR_CQ_WD_ENB[31] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[31]", this);
    CFG_DIR_CQ_WD_ENB[31].set_cfg(16'h0, 16'h0, 16'h0, 24'h61F000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[31].set_space_addr("MSG", 24'h61F000);
    CFG_DIR_CQ_WD_ENB[31].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[31].set_space_addr("MEM-SB",24'h61F000);
    CFG_DIR_CQ_WD_ENB[31].set_space_addr("MEM", 24'h61F000);
      CFG_DIR_CQ_WD_ENB[31].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[31].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[31].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[31].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[31].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[31].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[31].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[31].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[31]:dont_test") ) CFG_DIR_CQ_WD_ENB[31].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[31] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[32]";
    `endif
    CFG_DIR_CQ_WD_ENB[32] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[32]", this);
    CFG_DIR_CQ_WD_ENB[32].set_cfg(16'h0, 16'h0, 16'h0, 24'h620000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[32].set_space_addr("MSG", 24'h620000);
    CFG_DIR_CQ_WD_ENB[32].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[32].set_space_addr("MEM-SB",24'h620000);
    CFG_DIR_CQ_WD_ENB[32].set_space_addr("MEM", 24'h620000);
      CFG_DIR_CQ_WD_ENB[32].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[32].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[32].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[32].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[32].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[32].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[32].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[32].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[32].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[32]:dont_test") ) CFG_DIR_CQ_WD_ENB[32].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[32] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[32]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[33]";
    `endif
    CFG_DIR_CQ_WD_ENB[33] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[33]", this);
    CFG_DIR_CQ_WD_ENB[33].set_cfg(16'h0, 16'h0, 16'h0, 24'h621000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[33].set_space_addr("MSG", 24'h621000);
    CFG_DIR_CQ_WD_ENB[33].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[33].set_space_addr("MEM-SB",24'h621000);
    CFG_DIR_CQ_WD_ENB[33].set_space_addr("MEM", 24'h621000);
      CFG_DIR_CQ_WD_ENB[33].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[33].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[33].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[33].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[33].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[33].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[33].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[33].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[33].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[33]:dont_test") ) CFG_DIR_CQ_WD_ENB[33].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[33] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[33]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[34]";
    `endif
    CFG_DIR_CQ_WD_ENB[34] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[34]", this);
    CFG_DIR_CQ_WD_ENB[34].set_cfg(16'h0, 16'h0, 16'h0, 24'h622000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[34].set_space_addr("MSG", 24'h622000);
    CFG_DIR_CQ_WD_ENB[34].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[34].set_space_addr("MEM-SB",24'h622000);
    CFG_DIR_CQ_WD_ENB[34].set_space_addr("MEM", 24'h622000);
      CFG_DIR_CQ_WD_ENB[34].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[34].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[34].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[34].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[34].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[34].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[34].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[34].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[34].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[34]:dont_test") ) CFG_DIR_CQ_WD_ENB[34].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[34] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[34]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[35]";
    `endif
    CFG_DIR_CQ_WD_ENB[35] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[35]", this);
    CFG_DIR_CQ_WD_ENB[35].set_cfg(16'h0, 16'h0, 16'h0, 24'h623000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[35].set_space_addr("MSG", 24'h623000);
    CFG_DIR_CQ_WD_ENB[35].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[35].set_space_addr("MEM-SB",24'h623000);
    CFG_DIR_CQ_WD_ENB[35].set_space_addr("MEM", 24'h623000);
      CFG_DIR_CQ_WD_ENB[35].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[35].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[35].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[35].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[35].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[35].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[35].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[35].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[35].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[35]:dont_test") ) CFG_DIR_CQ_WD_ENB[35].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[35] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[35]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[36]";
    `endif
    CFG_DIR_CQ_WD_ENB[36] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[36]", this);
    CFG_DIR_CQ_WD_ENB[36].set_cfg(16'h0, 16'h0, 16'h0, 24'h624000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[36].set_space_addr("MSG", 24'h624000);
    CFG_DIR_CQ_WD_ENB[36].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[36].set_space_addr("MEM-SB",24'h624000);
    CFG_DIR_CQ_WD_ENB[36].set_space_addr("MEM", 24'h624000);
      CFG_DIR_CQ_WD_ENB[36].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[36].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[36].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[36].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[36].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[36].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[36].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[36].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[36].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[36]:dont_test") ) CFG_DIR_CQ_WD_ENB[36].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[36] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[36]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[37]";
    `endif
    CFG_DIR_CQ_WD_ENB[37] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[37]", this);
    CFG_DIR_CQ_WD_ENB[37].set_cfg(16'h0, 16'h0, 16'h0, 24'h625000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[37].set_space_addr("MSG", 24'h625000);
    CFG_DIR_CQ_WD_ENB[37].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[37].set_space_addr("MEM-SB",24'h625000);
    CFG_DIR_CQ_WD_ENB[37].set_space_addr("MEM", 24'h625000);
      CFG_DIR_CQ_WD_ENB[37].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[37].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[37].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[37].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[37].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[37].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[37].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[37].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[37].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[37]:dont_test") ) CFG_DIR_CQ_WD_ENB[37].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[37] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[37]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[38]";
    `endif
    CFG_DIR_CQ_WD_ENB[38] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[38]", this);
    CFG_DIR_CQ_WD_ENB[38].set_cfg(16'h0, 16'h0, 16'h0, 24'h626000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[38].set_space_addr("MSG", 24'h626000);
    CFG_DIR_CQ_WD_ENB[38].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[38].set_space_addr("MEM-SB",24'h626000);
    CFG_DIR_CQ_WD_ENB[38].set_space_addr("MEM", 24'h626000);
      CFG_DIR_CQ_WD_ENB[38].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[38].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[38].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[38].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[38].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[38].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[38].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[38].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[38].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[38]:dont_test") ) CFG_DIR_CQ_WD_ENB[38].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[38] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[38]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[39]";
    `endif
    CFG_DIR_CQ_WD_ENB[39] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[39]", this);
    CFG_DIR_CQ_WD_ENB[39].set_cfg(16'h0, 16'h0, 16'h0, 24'h627000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[39].set_space_addr("MSG", 24'h627000);
    CFG_DIR_CQ_WD_ENB[39].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[39].set_space_addr("MEM-SB",24'h627000);
    CFG_DIR_CQ_WD_ENB[39].set_space_addr("MEM", 24'h627000);
      CFG_DIR_CQ_WD_ENB[39].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[39].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[39].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[39].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[39].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[39].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[39].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[39].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[39].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[39]:dont_test") ) CFG_DIR_CQ_WD_ENB[39].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[39] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[39]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[40]";
    `endif
    CFG_DIR_CQ_WD_ENB[40] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[40]", this);
    CFG_DIR_CQ_WD_ENB[40].set_cfg(16'h0, 16'h0, 16'h0, 24'h628000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[40].set_space_addr("MSG", 24'h628000);
    CFG_DIR_CQ_WD_ENB[40].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[40].set_space_addr("MEM-SB",24'h628000);
    CFG_DIR_CQ_WD_ENB[40].set_space_addr("MEM", 24'h628000);
      CFG_DIR_CQ_WD_ENB[40].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[40].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[40].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[40].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[40].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[40].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[40].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[40].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[40].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[40]:dont_test") ) CFG_DIR_CQ_WD_ENB[40].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[40] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[40]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[41]";
    `endif
    CFG_DIR_CQ_WD_ENB[41] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[41]", this);
    CFG_DIR_CQ_WD_ENB[41].set_cfg(16'h0, 16'h0, 16'h0, 24'h629000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[41].set_space_addr("MSG", 24'h629000);
    CFG_DIR_CQ_WD_ENB[41].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[41].set_space_addr("MEM-SB",24'h629000);
    CFG_DIR_CQ_WD_ENB[41].set_space_addr("MEM", 24'h629000);
      CFG_DIR_CQ_WD_ENB[41].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[41].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[41].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[41].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[41].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[41].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[41].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[41].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[41].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[41]:dont_test") ) CFG_DIR_CQ_WD_ENB[41].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[41] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[41]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[42]";
    `endif
    CFG_DIR_CQ_WD_ENB[42] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[42]", this);
    CFG_DIR_CQ_WD_ENB[42].set_cfg(16'h0, 16'h0, 16'h0, 24'h62A000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[42].set_space_addr("MSG", 24'h62A000);
    CFG_DIR_CQ_WD_ENB[42].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[42].set_space_addr("MEM-SB",24'h62A000);
    CFG_DIR_CQ_WD_ENB[42].set_space_addr("MEM", 24'h62A000);
      CFG_DIR_CQ_WD_ENB[42].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[42].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[42].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[42].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[42].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[42].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[42].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[42].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[42].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[42]:dont_test") ) CFG_DIR_CQ_WD_ENB[42].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[42] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[42]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[43]";
    `endif
    CFG_DIR_CQ_WD_ENB[43] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[43]", this);
    CFG_DIR_CQ_WD_ENB[43].set_cfg(16'h0, 16'h0, 16'h0, 24'h62B000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[43].set_space_addr("MSG", 24'h62B000);
    CFG_DIR_CQ_WD_ENB[43].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[43].set_space_addr("MEM-SB",24'h62B000);
    CFG_DIR_CQ_WD_ENB[43].set_space_addr("MEM", 24'h62B000);
      CFG_DIR_CQ_WD_ENB[43].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[43].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[43].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[43].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[43].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[43].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[43].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[43].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[43].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[43]:dont_test") ) CFG_DIR_CQ_WD_ENB[43].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[43] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[43]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[44]";
    `endif
    CFG_DIR_CQ_WD_ENB[44] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[44]", this);
    CFG_DIR_CQ_WD_ENB[44].set_cfg(16'h0, 16'h0, 16'h0, 24'h62C000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[44].set_space_addr("MSG", 24'h62C000);
    CFG_DIR_CQ_WD_ENB[44].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[44].set_space_addr("MEM-SB",24'h62C000);
    CFG_DIR_CQ_WD_ENB[44].set_space_addr("MEM", 24'h62C000);
      CFG_DIR_CQ_WD_ENB[44].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[44].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[44].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[44].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[44].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[44].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[44].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[44].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[44].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[44]:dont_test") ) CFG_DIR_CQ_WD_ENB[44].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[44] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[44]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[45]";
    `endif
    CFG_DIR_CQ_WD_ENB[45] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[45]", this);
    CFG_DIR_CQ_WD_ENB[45].set_cfg(16'h0, 16'h0, 16'h0, 24'h62D000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[45].set_space_addr("MSG", 24'h62D000);
    CFG_DIR_CQ_WD_ENB[45].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[45].set_space_addr("MEM-SB",24'h62D000);
    CFG_DIR_CQ_WD_ENB[45].set_space_addr("MEM", 24'h62D000);
      CFG_DIR_CQ_WD_ENB[45].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[45].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[45].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[45].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[45].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[45].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[45].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[45].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[45].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[45]:dont_test") ) CFG_DIR_CQ_WD_ENB[45].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[45] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[45]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[46]";
    `endif
    CFG_DIR_CQ_WD_ENB[46] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[46]", this);
    CFG_DIR_CQ_WD_ENB[46].set_cfg(16'h0, 16'h0, 16'h0, 24'h62E000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[46].set_space_addr("MSG", 24'h62E000);
    CFG_DIR_CQ_WD_ENB[46].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[46].set_space_addr("MEM-SB",24'h62E000);
    CFG_DIR_CQ_WD_ENB[46].set_space_addr("MEM", 24'h62E000);
      CFG_DIR_CQ_WD_ENB[46].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[46].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[46].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[46].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[46].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[46].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[46].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[46].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[46].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[46]:dont_test") ) CFG_DIR_CQ_WD_ENB[46].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[46] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[46]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[47]";
    `endif
    CFG_DIR_CQ_WD_ENB[47] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[47]", this);
    CFG_DIR_CQ_WD_ENB[47].set_cfg(16'h0, 16'h0, 16'h0, 24'h62F000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[47].set_space_addr("MSG", 24'h62F000);
    CFG_DIR_CQ_WD_ENB[47].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[47].set_space_addr("MEM-SB",24'h62F000);
    CFG_DIR_CQ_WD_ENB[47].set_space_addr("MEM", 24'h62F000);
      CFG_DIR_CQ_WD_ENB[47].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[47].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[47].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[47].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[47].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[47].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[47].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[47].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[47].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[47]:dont_test") ) CFG_DIR_CQ_WD_ENB[47].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[47] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[47]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[48]";
    `endif
    CFG_DIR_CQ_WD_ENB[48] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[48]", this);
    CFG_DIR_CQ_WD_ENB[48].set_cfg(16'h0, 16'h0, 16'h0, 24'h630000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[48].set_space_addr("MSG", 24'h630000);
    CFG_DIR_CQ_WD_ENB[48].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[48].set_space_addr("MEM-SB",24'h630000);
    CFG_DIR_CQ_WD_ENB[48].set_space_addr("MEM", 24'h630000);
      CFG_DIR_CQ_WD_ENB[48].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[48].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[48].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[48].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[48].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[48].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[48].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[48].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[48].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[48]:dont_test") ) CFG_DIR_CQ_WD_ENB[48].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[48] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[48]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[49]";
    `endif
    CFG_DIR_CQ_WD_ENB[49] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[49]", this);
    CFG_DIR_CQ_WD_ENB[49].set_cfg(16'h0, 16'h0, 16'h0, 24'h631000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[49].set_space_addr("MSG", 24'h631000);
    CFG_DIR_CQ_WD_ENB[49].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[49].set_space_addr("MEM-SB",24'h631000);
    CFG_DIR_CQ_WD_ENB[49].set_space_addr("MEM", 24'h631000);
      CFG_DIR_CQ_WD_ENB[49].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[49].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[49].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[49].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[49].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[49].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[49].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[49].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[49].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[49]:dont_test") ) CFG_DIR_CQ_WD_ENB[49].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[49] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[49]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[50]";
    `endif
    CFG_DIR_CQ_WD_ENB[50] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[50]", this);
    CFG_DIR_CQ_WD_ENB[50].set_cfg(16'h0, 16'h0, 16'h0, 24'h632000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[50].set_space_addr("MSG", 24'h632000);
    CFG_DIR_CQ_WD_ENB[50].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[50].set_space_addr("MEM-SB",24'h632000);
    CFG_DIR_CQ_WD_ENB[50].set_space_addr("MEM", 24'h632000);
      CFG_DIR_CQ_WD_ENB[50].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[50].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[50].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[50].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[50].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[50].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[50].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[50].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[50].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[50]:dont_test") ) CFG_DIR_CQ_WD_ENB[50].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[50] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[50]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[51]";
    `endif
    CFG_DIR_CQ_WD_ENB[51] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[51]", this);
    CFG_DIR_CQ_WD_ENB[51].set_cfg(16'h0, 16'h0, 16'h0, 24'h633000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[51].set_space_addr("MSG", 24'h633000);
    CFG_DIR_CQ_WD_ENB[51].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[51].set_space_addr("MEM-SB",24'h633000);
    CFG_DIR_CQ_WD_ENB[51].set_space_addr("MEM", 24'h633000);
      CFG_DIR_CQ_WD_ENB[51].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[51].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[51].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[51].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[51].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[51].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[51].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[51].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[51].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[51]:dont_test") ) CFG_DIR_CQ_WD_ENB[51].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[51] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[51]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[52]";
    `endif
    CFG_DIR_CQ_WD_ENB[52] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[52]", this);
    CFG_DIR_CQ_WD_ENB[52].set_cfg(16'h0, 16'h0, 16'h0, 24'h634000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[52].set_space_addr("MSG", 24'h634000);
    CFG_DIR_CQ_WD_ENB[52].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[52].set_space_addr("MEM-SB",24'h634000);
    CFG_DIR_CQ_WD_ENB[52].set_space_addr("MEM", 24'h634000);
      CFG_DIR_CQ_WD_ENB[52].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[52].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[52].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[52].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[52].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[52].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[52].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[52].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[52].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[52]:dont_test") ) CFG_DIR_CQ_WD_ENB[52].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[52] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[52]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[53]";
    `endif
    CFG_DIR_CQ_WD_ENB[53] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[53]", this);
    CFG_DIR_CQ_WD_ENB[53].set_cfg(16'h0, 16'h0, 16'h0, 24'h635000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[53].set_space_addr("MSG", 24'h635000);
    CFG_DIR_CQ_WD_ENB[53].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[53].set_space_addr("MEM-SB",24'h635000);
    CFG_DIR_CQ_WD_ENB[53].set_space_addr("MEM", 24'h635000);
      CFG_DIR_CQ_WD_ENB[53].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[53].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[53].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[53].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[53].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[53].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[53].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[53].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[53].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[53]:dont_test") ) CFG_DIR_CQ_WD_ENB[53].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[53] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[53]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[54]";
    `endif
    CFG_DIR_CQ_WD_ENB[54] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[54]", this);
    CFG_DIR_CQ_WD_ENB[54].set_cfg(16'h0, 16'h0, 16'h0, 24'h636000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[54].set_space_addr("MSG", 24'h636000);
    CFG_DIR_CQ_WD_ENB[54].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[54].set_space_addr("MEM-SB",24'h636000);
    CFG_DIR_CQ_WD_ENB[54].set_space_addr("MEM", 24'h636000);
      CFG_DIR_CQ_WD_ENB[54].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[54].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[54].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[54].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[54].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[54].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[54].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[54].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[54].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[54]:dont_test") ) CFG_DIR_CQ_WD_ENB[54].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[54] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[54]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[55]";
    `endif
    CFG_DIR_CQ_WD_ENB[55] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[55]", this);
    CFG_DIR_CQ_WD_ENB[55].set_cfg(16'h0, 16'h0, 16'h0, 24'h637000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[55].set_space_addr("MSG", 24'h637000);
    CFG_DIR_CQ_WD_ENB[55].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[55].set_space_addr("MEM-SB",24'h637000);
    CFG_DIR_CQ_WD_ENB[55].set_space_addr("MEM", 24'h637000);
      CFG_DIR_CQ_WD_ENB[55].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[55].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[55].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[55].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[55].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[55].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[55].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[55].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[55].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[55]:dont_test") ) CFG_DIR_CQ_WD_ENB[55].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[55] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[55]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[56]";
    `endif
    CFG_DIR_CQ_WD_ENB[56] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[56]", this);
    CFG_DIR_CQ_WD_ENB[56].set_cfg(16'h0, 16'h0, 16'h0, 24'h638000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[56].set_space_addr("MSG", 24'h638000);
    CFG_DIR_CQ_WD_ENB[56].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[56].set_space_addr("MEM-SB",24'h638000);
    CFG_DIR_CQ_WD_ENB[56].set_space_addr("MEM", 24'h638000);
      CFG_DIR_CQ_WD_ENB[56].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[56].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[56].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[56].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[56].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[56].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[56].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[56].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[56].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[56]:dont_test") ) CFG_DIR_CQ_WD_ENB[56].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[56] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[56]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[57]";
    `endif
    CFG_DIR_CQ_WD_ENB[57] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[57]", this);
    CFG_DIR_CQ_WD_ENB[57].set_cfg(16'h0, 16'h0, 16'h0, 24'h639000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[57].set_space_addr("MSG", 24'h639000);
    CFG_DIR_CQ_WD_ENB[57].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[57].set_space_addr("MEM-SB",24'h639000);
    CFG_DIR_CQ_WD_ENB[57].set_space_addr("MEM", 24'h639000);
      CFG_DIR_CQ_WD_ENB[57].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[57].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[57].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[57].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[57].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[57].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[57].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[57].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[57].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[57]:dont_test") ) CFG_DIR_CQ_WD_ENB[57].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[57] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[57]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[58]";
    `endif
    CFG_DIR_CQ_WD_ENB[58] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[58]", this);
    CFG_DIR_CQ_WD_ENB[58].set_cfg(16'h0, 16'h0, 16'h0, 24'h63A000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[58].set_space_addr("MSG", 24'h63A000);
    CFG_DIR_CQ_WD_ENB[58].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[58].set_space_addr("MEM-SB",24'h63A000);
    CFG_DIR_CQ_WD_ENB[58].set_space_addr("MEM", 24'h63A000);
      CFG_DIR_CQ_WD_ENB[58].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[58].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[58].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[58].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[58].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[58].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[58].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[58].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[58].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[58]:dont_test") ) CFG_DIR_CQ_WD_ENB[58].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[58] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[58]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[59]";
    `endif
    CFG_DIR_CQ_WD_ENB[59] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[59]", this);
    CFG_DIR_CQ_WD_ENB[59].set_cfg(16'h0, 16'h0, 16'h0, 24'h63B000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[59].set_space_addr("MSG", 24'h63B000);
    CFG_DIR_CQ_WD_ENB[59].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[59].set_space_addr("MEM-SB",24'h63B000);
    CFG_DIR_CQ_WD_ENB[59].set_space_addr("MEM", 24'h63B000);
      CFG_DIR_CQ_WD_ENB[59].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[59].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[59].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[59].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[59].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[59].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[59].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[59].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[59].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[59]:dont_test") ) CFG_DIR_CQ_WD_ENB[59].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[59] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[59]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[60]";
    `endif
    CFG_DIR_CQ_WD_ENB[60] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[60]", this);
    CFG_DIR_CQ_WD_ENB[60].set_cfg(16'h0, 16'h0, 16'h0, 24'h63C000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[60].set_space_addr("MSG", 24'h63C000);
    CFG_DIR_CQ_WD_ENB[60].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[60].set_space_addr("MEM-SB",24'h63C000);
    CFG_DIR_CQ_WD_ENB[60].set_space_addr("MEM", 24'h63C000);
      CFG_DIR_CQ_WD_ENB[60].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[60].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[60].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[60].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[60].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[60].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[60].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[60].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[60].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[60]:dont_test") ) CFG_DIR_CQ_WD_ENB[60].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[60] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[60]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[61]";
    `endif
    CFG_DIR_CQ_WD_ENB[61] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[61]", this);
    CFG_DIR_CQ_WD_ENB[61].set_cfg(16'h0, 16'h0, 16'h0, 24'h63D000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[61].set_space_addr("MSG", 24'h63D000);
    CFG_DIR_CQ_WD_ENB[61].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[61].set_space_addr("MEM-SB",24'h63D000);
    CFG_DIR_CQ_WD_ENB[61].set_space_addr("MEM", 24'h63D000);
      CFG_DIR_CQ_WD_ENB[61].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[61].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[61].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[61].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[61].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[61].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[61].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[61].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[61].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[61]:dont_test") ) CFG_DIR_CQ_WD_ENB[61].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[61] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[61]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[62]";
    `endif
    CFG_DIR_CQ_WD_ENB[62] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[62]", this);
    CFG_DIR_CQ_WD_ENB[62].set_cfg(16'h0, 16'h0, 16'h0, 24'h63E000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[62].set_space_addr("MSG", 24'h63E000);
    CFG_DIR_CQ_WD_ENB[62].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[62].set_space_addr("MEM-SB",24'h63E000);
    CFG_DIR_CQ_WD_ENB[62].set_space_addr("MEM", 24'h63E000);
      CFG_DIR_CQ_WD_ENB[62].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[62].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[62].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[62].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[62].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[62].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[62].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[62].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[62].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[62]:dont_test") ) CFG_DIR_CQ_WD_ENB[62].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[62] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[62]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_WD_ENB[63]";
    `endif
    CFG_DIR_CQ_WD_ENB[63] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WD_ENB_reg::type_id::create("CFG_DIR_CQ_WD_ENB[63]", this);
    CFG_DIR_CQ_WD_ENB[63].set_cfg(16'h0, 16'h0, 16'h0, 24'h63F000, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WD_ENB[63].set_space_addr("MSG", 24'h63F000);
    CFG_DIR_CQ_WD_ENB[63].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WD_ENB[63].set_space_addr("MEM-SB",24'h63F000);
    CFG_DIR_CQ_WD_ENB[63].set_space_addr("MEM", 24'h63F000);
      CFG_DIR_CQ_WD_ENB[63].set_space("MEM");
      CFG_DIR_CQ_WD_ENB[63].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WD_ENB[63].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WD_ENB[63].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WD_ENB[63].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WD_ENB[63].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WD_ENB[63].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WD_ENB[63].set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIR_CQ_WD_ENB[63].set_test_reg(0);
      if ( $test$plusargs("CFG_DIR_CQ_WD_ENB[63]:dont_test") ) CFG_DIR_CQ_WD_ENB[63].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WD_ENB[63] )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_WD_ENB[63]"));
      end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_DIR_CQ_WPTR[%0d]",i);
    `endif
    CFG_DIR_CQ_WPTR[i] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_WPTR_reg::type_id::create($psprintf("CFG_DIR_CQ_WPTR[%0d]",i), this);
    CFG_DIR_CQ_WPTR[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h680000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_WPTR[i].set_space_addr("MSG",  (24'h680000 + (i*4096)) );
    CFG_DIR_CQ_WPTR[i].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_WPTR[i].set_space_addr("MEM-SB", (24'h680000 + (i*4096)) );
    CFG_DIR_CQ_WPTR[i].set_space_addr("MEM",  (24'h680000 + (i*4096)) );
      CFG_DIR_CQ_WPTR[i].set_space("MEM");
      CFG_DIR_CQ_WPTR[i].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_WPTR[i].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_WPTR[i].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_WPTR[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_WPTR[i].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_WPTR[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_WPTR[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_DIR_CQ_WPTR[%0d]:dont_test",i)) ) CFG_DIR_CQ_WPTR[i].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_WPTR[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_DIR_CQ_WPTR[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_DIR_CQ2VAS[%0d]",i);
    `endif
    CFG_DIR_CQ2VAS[i] = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ2VAS_reg::type_id::create($psprintf("CFG_DIR_CQ2VAS[%0d]",i), this);
    CFG_DIR_CQ2VAS[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h700000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ2VAS[i].set_space_addr("MSG",  (24'h700000 + (i*4096)) );
    CFG_DIR_CQ2VAS[i].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ2VAS[i].set_space_addr("MEM-SB", (24'h700000 + (i*4096)) );
    CFG_DIR_CQ2VAS[i].set_space_addr("MEM",  (24'h700000 + (i*4096)) );
      CFG_DIR_CQ2VAS[i].set_space("MEM");
      CFG_DIR_CQ2VAS[i].set_msg_opcode("MEM-SB");
      CFG_DIR_CQ2VAS[i].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ2VAS[i].set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ2VAS[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ2VAS[i].set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ2VAS[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ2VAS[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_DIR_CQ2VAS[%0d]:dont_test",i)) ) CFG_DIR_CQ2VAS[i].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ2VAS[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_DIR_CQ2VAS[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_LDB_CQ_ON_OFF_THRESHOLD[%0d]",i);
    `endif
    CFG_LDB_CQ_ON_OFF_THRESHOLD[i] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_ON_OFF_THRESHOLD_reg::type_id::create($psprintf("CFG_LDB_CQ_ON_OFF_THRESHOLD[%0d]",i), this);
    CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h780000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_space_addr("MSG",  (24'h780000 + (i*4096)) );
    CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_space_addr("MEM-SB", (24'h780000 + (i*4096)) );
    CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_space_addr("MEM",  (24'h780000 + (i*4096)) );
      CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_space("MEM");
      CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_LDB_CQ_ON_OFF_THRESHOLD[%0d]:dont_test",i)) ) CFG_LDB_CQ_ON_OFF_THRESHOLD[i].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_ON_OFF_THRESHOLD[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_LDB_CQ_ON_OFF_THRESHOLD[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_HIST_LIST_MODE[%0d]",i);
    `endif
    CFG_HIST_LIST_MODE[i] = hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_MODE_reg::type_id::create($psprintf("CFG_HIST_LIST_MODE[%0d]",i), this);
    CFG_HIST_LIST_MODE[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h800000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_HIST_LIST_MODE[i].set_space_addr("MSG",  (24'h800000 + (i*4096)) );
    CFG_HIST_LIST_MODE[i].set_space_addr("msg_bus_port", 'h21);
    CFG_HIST_LIST_MODE[i].set_space_addr("MEM-SB", (24'h800000 + (i*4096)) );
    CFG_HIST_LIST_MODE[i].set_space_addr("MEM",  (24'h800000 + (i*4096)) );
      CFG_HIST_LIST_MODE[i].set_space("MEM");
      CFG_HIST_LIST_MODE[i].set_msg_opcode("MEM-SB");
      CFG_HIST_LIST_MODE[i].set_fid(4'h0, "MEM-SB");
  	CFG_HIST_LIST_MODE[i].set_bar(4'h2, "MEM-SB");
      CFG_HIST_LIST_MODE[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HIST_LIST_MODE[i].set_user_attribute("diag_reg", "0");
      CFG_HIST_LIST_MODE[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_HIST_LIST_MODE[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_HIST_LIST_MODE[%0d]:dont_test",i)) ) CFG_HIST_LIST_MODE[i].set_test_reg(1'b0);
      if (!add_reg( CFG_HIST_LIST_MODE[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_HIST_LIST_MODE[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_HIST_LIST_BASE[%0d]",i);
    `endif
    CFG_HIST_LIST_BASE[i] = hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_BASE_reg::type_id::create($psprintf("CFG_HIST_LIST_BASE[%0d]",i), this);
    CFG_HIST_LIST_BASE[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h880000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_HIST_LIST_BASE[i].set_space_addr("MSG",  (24'h880000 + (i*4096)) );
    CFG_HIST_LIST_BASE[i].set_space_addr("msg_bus_port", 'h21);
    CFG_HIST_LIST_BASE[i].set_space_addr("MEM-SB", (24'h880000 + (i*4096)) );
    CFG_HIST_LIST_BASE[i].set_space_addr("MEM",  (24'h880000 + (i*4096)) );
      CFG_HIST_LIST_BASE[i].set_space("MEM");
      CFG_HIST_LIST_BASE[i].set_msg_opcode("MEM-SB");
      CFG_HIST_LIST_BASE[i].set_fid(4'h0, "MEM-SB");
  	CFG_HIST_LIST_BASE[i].set_bar(4'h2, "MEM-SB");
      CFG_HIST_LIST_BASE[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HIST_LIST_BASE[i].set_user_attribute("diag_reg", "0");
      CFG_HIST_LIST_BASE[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_HIST_LIST_BASE[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_HIST_LIST_BASE[%0d]:dont_test",i)) ) CFG_HIST_LIST_BASE[i].set_test_reg(1'b0);
      if (!add_reg( CFG_HIST_LIST_BASE[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_HIST_LIST_BASE[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_HIST_LIST_LIMIT[%0d]",i);
    `endif
    CFG_HIST_LIST_LIMIT[i] = hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_LIMIT_reg::type_id::create($psprintf("CFG_HIST_LIST_LIMIT[%0d]",i), this);
    CFG_HIST_LIST_LIMIT[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h900000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_HIST_LIST_LIMIT[i].set_space_addr("MSG",  (24'h900000 + (i*4096)) );
    CFG_HIST_LIST_LIMIT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_HIST_LIST_LIMIT[i].set_space_addr("MEM-SB", (24'h900000 + (i*4096)) );
    CFG_HIST_LIST_LIMIT[i].set_space_addr("MEM",  (24'h900000 + (i*4096)) );
      CFG_HIST_LIST_LIMIT[i].set_space("MEM");
      CFG_HIST_LIST_LIMIT[i].set_msg_opcode("MEM-SB");
      CFG_HIST_LIST_LIMIT[i].set_fid(4'h0, "MEM-SB");
  	CFG_HIST_LIST_LIMIT[i].set_bar(4'h2, "MEM-SB");
      CFG_HIST_LIST_LIMIT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HIST_LIST_LIMIT[i].set_user_attribute("diag_reg", "0");
      CFG_HIST_LIST_LIMIT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_HIST_LIST_LIMIT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_HIST_LIST_LIMIT[%0d]:dont_test",i)) ) CFG_HIST_LIST_LIMIT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_HIST_LIST_LIMIT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_HIST_LIST_LIMIT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_HIST_LIST_POP_PTR[%0d]",i);
    `endif
    CFG_HIST_LIST_POP_PTR[i] = hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_POP_PTR_reg::type_id::create($psprintf("CFG_HIST_LIST_POP_PTR[%0d]",i), this);
    CFG_HIST_LIST_POP_PTR[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h980000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_HIST_LIST_POP_PTR[i].set_space_addr("MSG",  (24'h980000 + (i*4096)) );
    CFG_HIST_LIST_POP_PTR[i].set_space_addr("msg_bus_port", 'h21);
    CFG_HIST_LIST_POP_PTR[i].set_space_addr("MEM-SB", (24'h980000 + (i*4096)) );
    CFG_HIST_LIST_POP_PTR[i].set_space_addr("MEM",  (24'h980000 + (i*4096)) );
      CFG_HIST_LIST_POP_PTR[i].set_space("MEM");
      CFG_HIST_LIST_POP_PTR[i].set_msg_opcode("MEM-SB");
      CFG_HIST_LIST_POP_PTR[i].set_fid(4'h0, "MEM-SB");
  	CFG_HIST_LIST_POP_PTR[i].set_bar(4'h2, "MEM-SB");
      CFG_HIST_LIST_POP_PTR[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HIST_LIST_POP_PTR[i].set_user_attribute("diag_reg", "0");
      CFG_HIST_LIST_POP_PTR[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_HIST_LIST_POP_PTR[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_HIST_LIST_POP_PTR[%0d]:dont_test",i)) ) CFG_HIST_LIST_POP_PTR[i].set_test_reg(1'b0);
      if (!add_reg( CFG_HIST_LIST_POP_PTR[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_HIST_LIST_POP_PTR[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_HIST_LIST_PUSH_PTR[%0d]",i);
    `endif
    CFG_HIST_LIST_PUSH_PTR[i] = hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_PUSH_PTR_reg::type_id::create($psprintf("CFG_HIST_LIST_PUSH_PTR[%0d]",i), this);
    CFG_HIST_LIST_PUSH_PTR[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0A00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_HIST_LIST_PUSH_PTR[i].set_space_addr("MSG",  (28'h0A00000 + (i*4096)) );
    CFG_HIST_LIST_PUSH_PTR[i].set_space_addr("msg_bus_port", 'h21);
    CFG_HIST_LIST_PUSH_PTR[i].set_space_addr("MEM-SB", (24'hA00000 + (i*4096)) );
    CFG_HIST_LIST_PUSH_PTR[i].set_space_addr("MEM",  (28'h0A00000 + (i*4096)) );
      CFG_HIST_LIST_PUSH_PTR[i].set_space("MEM");
      CFG_HIST_LIST_PUSH_PTR[i].set_msg_opcode("MEM-SB");
      CFG_HIST_LIST_PUSH_PTR[i].set_fid(4'h0, "MEM-SB");
  	CFG_HIST_LIST_PUSH_PTR[i].set_bar(4'h2, "MEM-SB");
      CFG_HIST_LIST_PUSH_PTR[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HIST_LIST_PUSH_PTR[i].set_user_attribute("diag_reg", "0");
      CFG_HIST_LIST_PUSH_PTR[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_HIST_LIST_PUSH_PTR[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_HIST_LIST_PUSH_PTR[%0d]:dont_test",i)) ) CFG_HIST_LIST_PUSH_PTR[i].set_test_reg(1'b0);
      if (!add_reg( CFG_HIST_LIST_PUSH_PTR[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_HIST_LIST_PUSH_PTR[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_HIST_LIST_A_BASE[%0d]",i);
    `endif
    CFG_HIST_LIST_A_BASE[i] = hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_BASE_reg::type_id::create($psprintf("CFG_HIST_LIST_A_BASE[%0d]",i), this);
    CFG_HIST_LIST_A_BASE[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0A80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_HIST_LIST_A_BASE[i].set_space_addr("MSG",  (28'h0A80000 + (i*4096)) );
    CFG_HIST_LIST_A_BASE[i].set_space_addr("msg_bus_port", 'h21);
    CFG_HIST_LIST_A_BASE[i].set_space_addr("MEM-SB", (24'hA80000 + (i*4096)) );
    CFG_HIST_LIST_A_BASE[i].set_space_addr("MEM",  (28'h0A80000 + (i*4096)) );
      CFG_HIST_LIST_A_BASE[i].set_space("MEM");
      CFG_HIST_LIST_A_BASE[i].set_msg_opcode("MEM-SB");
      CFG_HIST_LIST_A_BASE[i].set_fid(4'h0, "MEM-SB");
  	CFG_HIST_LIST_A_BASE[i].set_bar(4'h2, "MEM-SB");
      CFG_HIST_LIST_A_BASE[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HIST_LIST_A_BASE[i].set_user_attribute("diag_reg", "0");
      CFG_HIST_LIST_A_BASE[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_HIST_LIST_A_BASE[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_HIST_LIST_A_BASE[%0d]:dont_test",i)) ) CFG_HIST_LIST_A_BASE[i].set_test_reg(1'b0);
      if (!add_reg( CFG_HIST_LIST_A_BASE[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_HIST_LIST_A_BASE[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_HIST_LIST_A_LIMIT[%0d]",i);
    `endif
    CFG_HIST_LIST_A_LIMIT[i] = hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_LIMIT_reg::type_id::create($psprintf("CFG_HIST_LIST_A_LIMIT[%0d]",i), this);
    CFG_HIST_LIST_A_LIMIT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0B00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_HIST_LIST_A_LIMIT[i].set_space_addr("MSG",  (28'h0B00000 + (i*4096)) );
    CFG_HIST_LIST_A_LIMIT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_HIST_LIST_A_LIMIT[i].set_space_addr("MEM-SB", (24'hB00000 + (i*4096)) );
    CFG_HIST_LIST_A_LIMIT[i].set_space_addr("MEM",  (28'h0B00000 + (i*4096)) );
      CFG_HIST_LIST_A_LIMIT[i].set_space("MEM");
      CFG_HIST_LIST_A_LIMIT[i].set_msg_opcode("MEM-SB");
      CFG_HIST_LIST_A_LIMIT[i].set_fid(4'h0, "MEM-SB");
  	CFG_HIST_LIST_A_LIMIT[i].set_bar(4'h2, "MEM-SB");
      CFG_HIST_LIST_A_LIMIT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HIST_LIST_A_LIMIT[i].set_user_attribute("diag_reg", "0");
      CFG_HIST_LIST_A_LIMIT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_HIST_LIST_A_LIMIT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_HIST_LIST_A_LIMIT[%0d]:dont_test",i)) ) CFG_HIST_LIST_A_LIMIT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_HIST_LIST_A_LIMIT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_HIST_LIST_A_LIMIT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_HIST_LIST_A_POP_PTR[%0d]",i);
    `endif
    CFG_HIST_LIST_A_POP_PTR[i] = hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_POP_PTR_reg::type_id::create($psprintf("CFG_HIST_LIST_A_POP_PTR[%0d]",i), this);
    CFG_HIST_LIST_A_POP_PTR[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0B80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_HIST_LIST_A_POP_PTR[i].set_space_addr("MSG",  (28'h0B80000 + (i*4096)) );
    CFG_HIST_LIST_A_POP_PTR[i].set_space_addr("msg_bus_port", 'h21);
    CFG_HIST_LIST_A_POP_PTR[i].set_space_addr("MEM-SB", (24'hB80000 + (i*4096)) );
    CFG_HIST_LIST_A_POP_PTR[i].set_space_addr("MEM",  (28'h0B80000 + (i*4096)) );
      CFG_HIST_LIST_A_POP_PTR[i].set_space("MEM");
      CFG_HIST_LIST_A_POP_PTR[i].set_msg_opcode("MEM-SB");
      CFG_HIST_LIST_A_POP_PTR[i].set_fid(4'h0, "MEM-SB");
  	CFG_HIST_LIST_A_POP_PTR[i].set_bar(4'h2, "MEM-SB");
      CFG_HIST_LIST_A_POP_PTR[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HIST_LIST_A_POP_PTR[i].set_user_attribute("diag_reg", "0");
      CFG_HIST_LIST_A_POP_PTR[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_HIST_LIST_A_POP_PTR[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_HIST_LIST_A_POP_PTR[%0d]:dont_test",i)) ) CFG_HIST_LIST_A_POP_PTR[i].set_test_reg(1'b0);
      if (!add_reg( CFG_HIST_LIST_A_POP_PTR[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_HIST_LIST_A_POP_PTR[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_HIST_LIST_A_PUSH_PTR[%0d]",i);
    `endif
    CFG_HIST_LIST_A_PUSH_PTR[i] = hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_PUSH_PTR_reg::type_id::create($psprintf("CFG_HIST_LIST_A_PUSH_PTR[%0d]",i), this);
    CFG_HIST_LIST_A_PUSH_PTR[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0C00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_HIST_LIST_A_PUSH_PTR[i].set_space_addr("MSG",  (28'h0C00000 + (i*4096)) );
    CFG_HIST_LIST_A_PUSH_PTR[i].set_space_addr("msg_bus_port", 'h21);
    CFG_HIST_LIST_A_PUSH_PTR[i].set_space_addr("MEM-SB", (24'hC00000 + (i*4096)) );
    CFG_HIST_LIST_A_PUSH_PTR[i].set_space_addr("MEM",  (28'h0C00000 + (i*4096)) );
      CFG_HIST_LIST_A_PUSH_PTR[i].set_space("MEM");
      CFG_HIST_LIST_A_PUSH_PTR[i].set_msg_opcode("MEM-SB");
      CFG_HIST_LIST_A_PUSH_PTR[i].set_fid(4'h0, "MEM-SB");
  	CFG_HIST_LIST_A_PUSH_PTR[i].set_bar(4'h2, "MEM-SB");
      CFG_HIST_LIST_A_PUSH_PTR[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HIST_LIST_A_PUSH_PTR[i].set_user_attribute("diag_reg", "0");
      CFG_HIST_LIST_A_PUSH_PTR[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_HIST_LIST_A_PUSH_PTR[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_HIST_LIST_A_PUSH_PTR[%0d]:dont_test",i)) ) CFG_HIST_LIST_A_PUSH_PTR[i].set_test_reg(1'b0);
      if (!add_reg( CFG_HIST_LIST_A_PUSH_PTR[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_HIST_LIST_A_PUSH_PTR[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_LDB_CQ_INT_MASK[%0d]",i);
    `endif
    CFG_LDB_CQ_INT_MASK[i] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_MASK_reg::type_id::create($psprintf("CFG_LDB_CQ_INT_MASK[%0d]",i), this);
    CFG_LDB_CQ_INT_MASK[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0C80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_MASK[i].set_space_addr("MSG",  (28'h0C80000 + (i*4096)) );
    CFG_LDB_CQ_INT_MASK[i].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_MASK[i].set_space_addr("MEM-SB", (24'hC80000 + (i*4096)) );
    CFG_LDB_CQ_INT_MASK[i].set_space_addr("MEM",  (28'h0C80000 + (i*4096)) );
      CFG_LDB_CQ_INT_MASK[i].set_space("MEM");
      CFG_LDB_CQ_INT_MASK[i].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_MASK[i].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_MASK[i].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_MASK[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_MASK[i].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_MASK[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_MASK[i].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_INT_MASK[i].set_test_reg(0);
    if ( $test$plusargs($psprintf("CFG_LDB_CQ_INT_MASK[%0d]:dont_test",i)) ) CFG_LDB_CQ_INT_MASK[i].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_MASK[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_LDB_CQ_INT_MASK[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_LDB_CQ_IRQ_PENDING[%0d]",i);
    `endif
    CFG_LDB_CQ_IRQ_PENDING[i] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_IRQ_PENDING_reg::type_id::create($psprintf("CFG_LDB_CQ_IRQ_PENDING[%0d]",i), this);
    CFG_LDB_CQ_IRQ_PENDING[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0D00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_IRQ_PENDING[i].set_space_addr("MSG",  (28'h0D00000 + (i*4096)) );
    CFG_LDB_CQ_IRQ_PENDING[i].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_IRQ_PENDING[i].set_space_addr("MEM-SB", (24'hD00000 + (i*4096)) );
    CFG_LDB_CQ_IRQ_PENDING[i].set_space_addr("MEM",  (28'h0D00000 + (i*4096)) );
      CFG_LDB_CQ_IRQ_PENDING[i].set_space("MEM");
      CFG_LDB_CQ_IRQ_PENDING[i].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_IRQ_PENDING[i].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_IRQ_PENDING[i].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_IRQ_PENDING[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_IRQ_PENDING[i].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_IRQ_PENDING[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_IRQ_PENDING[i].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_IRQ_PENDING[i].set_test_reg(0);
    if ( $test$plusargs($psprintf("CFG_LDB_CQ_IRQ_PENDING[%0d]:dont_test",i)) ) CFG_LDB_CQ_IRQ_PENDING[i].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_IRQ_PENDING[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_LDB_CQ_IRQ_PENDING[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_LDB_CQ_DEPTH[%0d]",i);
    `endif
    CFG_LDB_CQ_DEPTH[i] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_DEPTH_reg::type_id::create($psprintf("CFG_LDB_CQ_DEPTH[%0d]",i), this);
    CFG_LDB_CQ_DEPTH[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0D80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_DEPTH[i].set_space_addr("MSG",  (28'h0D80000 + (i*4096)) );
    CFG_LDB_CQ_DEPTH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_DEPTH[i].set_space_addr("MEM-SB", (24'hD80000 + (i*4096)) );
    CFG_LDB_CQ_DEPTH[i].set_space_addr("MEM",  (28'h0D80000 + (i*4096)) );
      CFG_LDB_CQ_DEPTH[i].set_space("MEM");
      CFG_LDB_CQ_DEPTH[i].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_DEPTH[i].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_DEPTH[i].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_DEPTH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_DEPTH[i].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_DEPTH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_DEPTH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_LDB_CQ_DEPTH[%0d]:dont_test",i)) ) CFG_LDB_CQ_DEPTH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_DEPTH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_LDB_CQ_DEPTH[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[0]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[0] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[0]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E00000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_space_addr("MSG", 28'h0E00000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_space_addr("MEM-SB",24'hE00000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_space_addr("MEM", 28'h0E00000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[0]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[0].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[0] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[0]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[1]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[1] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[1]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E01000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_space_addr("MSG", 28'h0E01000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_space_addr("MEM-SB",24'hE01000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_space_addr("MEM", 28'h0E01000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[1]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[1].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[1] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[2]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[2] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[2]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E02000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_space_addr("MSG", 28'h0E02000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_space_addr("MEM-SB",24'hE02000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_space_addr("MEM", 28'h0E02000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[2]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[2].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[2] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[3]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[3] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[3]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E03000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_space_addr("MSG", 28'h0E03000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_space_addr("MEM-SB",24'hE03000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_space_addr("MEM", 28'h0E03000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[3]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[3].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[3] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[4]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[4] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[4]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E04000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_space_addr("MSG", 28'h0E04000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_space_addr("MEM-SB",24'hE04000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_space_addr("MEM", 28'h0E04000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[4]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[4].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[4] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[5]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[5] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[5]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E05000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_space_addr("MSG", 28'h0E05000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_space_addr("MEM-SB",24'hE05000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_space_addr("MEM", 28'h0E05000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[5]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[5].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[5] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[6]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[6] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[6]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E06000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_space_addr("MSG", 28'h0E06000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_space_addr("MEM-SB",24'hE06000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_space_addr("MEM", 28'h0E06000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[6]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[6].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[6] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[7]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[7] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[7]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E07000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_space_addr("MSG", 28'h0E07000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_space_addr("MEM-SB",24'hE07000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_space_addr("MEM", 28'h0E07000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[7]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[7].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[7] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[8]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[8] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[8]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E08000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_space_addr("MSG", 28'h0E08000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_space_addr("MEM-SB",24'hE08000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_space_addr("MEM", 28'h0E08000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[8]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[8].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[8] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[9]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[9] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[9]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E09000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_space_addr("MSG", 28'h0E09000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_space_addr("MEM-SB",24'hE09000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_space_addr("MEM", 28'h0E09000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[9]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[9].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[9] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[10]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[10] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[10]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E0A000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_space_addr("MSG", 28'h0E0A000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_space_addr("MEM-SB",24'hE0A000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_space_addr("MEM", 28'h0E0A000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[10]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[10].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[10] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[11]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[11] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[11]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E0B000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_space_addr("MSG", 28'h0E0B000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_space_addr("MEM-SB",24'hE0B000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_space_addr("MEM", 28'h0E0B000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[11]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[11].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[11] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[12]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[12] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[12]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E0C000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_space_addr("MSG", 28'h0E0C000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_space_addr("MEM-SB",24'hE0C000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_space_addr("MEM", 28'h0E0C000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[12]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[12].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[12] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[13]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[13] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[13]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E0D000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_space_addr("MSG", 28'h0E0D000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_space_addr("MEM-SB",24'hE0D000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_space_addr("MEM", 28'h0E0D000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[13]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[13].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[13] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[14]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[14] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[14]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E0E000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_space_addr("MSG", 28'h0E0E000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_space_addr("MEM-SB",24'hE0E000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_space_addr("MEM", 28'h0E0E000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[14]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[14].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[14] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[15]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[15] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[15]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E0F000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_space_addr("MSG", 28'h0E0F000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_space_addr("MEM-SB",24'hE0F000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_space_addr("MEM", 28'h0E0F000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[15]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[15].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[15] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[16]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[16] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[16]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E10000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_space_addr("MSG", 28'h0E10000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_space_addr("MEM-SB",24'hE10000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_space_addr("MEM", 28'h0E10000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[16]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[16].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[16] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[17]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[17] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[17]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E11000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_space_addr("MSG", 28'h0E11000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_space_addr("MEM-SB",24'hE11000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_space_addr("MEM", 28'h0E11000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[17]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[17].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[17] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[18]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[18] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[18]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E12000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_space_addr("MSG", 28'h0E12000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_space_addr("MEM-SB",24'hE12000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_space_addr("MEM", 28'h0E12000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[18]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[18].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[18] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[19]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[19] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[19]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E13000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_space_addr("MSG", 28'h0E13000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_space_addr("MEM-SB",24'hE13000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_space_addr("MEM", 28'h0E13000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[19]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[19].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[19] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[20]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[20] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[20]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E14000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_space_addr("MSG", 28'h0E14000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_space_addr("MEM-SB",24'hE14000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_space_addr("MEM", 28'h0E14000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[20]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[20].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[20] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[21]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[21] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[21]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E15000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_space_addr("MSG", 28'h0E15000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_space_addr("MEM-SB",24'hE15000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_space_addr("MEM", 28'h0E15000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[21]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[21].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[21] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[22]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[22] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[22]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E16000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_space_addr("MSG", 28'h0E16000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_space_addr("MEM-SB",24'hE16000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_space_addr("MEM", 28'h0E16000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[22]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[22].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[22] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[23]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[23] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[23]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E17000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_space_addr("MSG", 28'h0E17000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_space_addr("MEM-SB",24'hE17000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_space_addr("MEM", 28'h0E17000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[23]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[23].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[23] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[24]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[24] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[24]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E18000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_space_addr("MSG", 28'h0E18000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_space_addr("MEM-SB",24'hE18000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_space_addr("MEM", 28'h0E18000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[24]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[24].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[24] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[25]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[25] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[25]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E19000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_space_addr("MSG", 28'h0E19000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_space_addr("MEM-SB",24'hE19000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_space_addr("MEM", 28'h0E19000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[25]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[25].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[25] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[26]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[26] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[26]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E1A000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_space_addr("MSG", 28'h0E1A000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_space_addr("MEM-SB",24'hE1A000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_space_addr("MEM", 28'h0E1A000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[26]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[26].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[26] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[27]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[27] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[27]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E1B000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_space_addr("MSG", 28'h0E1B000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_space_addr("MEM-SB",24'hE1B000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_space_addr("MEM", 28'h0E1B000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[27]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[27].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[27] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[28]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[28] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[28]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E1C000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_space_addr("MSG", 28'h0E1C000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_space_addr("MEM-SB",24'hE1C000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_space_addr("MEM", 28'h0E1C000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[28]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[28].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[28] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[29]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[29] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[29]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E1D000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_space_addr("MSG", 28'h0E1D000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_space_addr("MEM-SB",24'hE1D000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_space_addr("MEM", 28'h0E1D000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[29]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[29].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[29] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[30]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[30] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[30]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E1E000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_space_addr("MSG", 28'h0E1E000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_space_addr("MEM-SB",24'hE1E000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_space_addr("MEM", 28'h0E1E000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[30]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[30].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[30] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[31]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[31] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[31]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E1F000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_space_addr("MSG", 28'h0E1F000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_space_addr("MEM-SB",24'hE1F000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_space_addr("MEM", 28'h0E1F000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[31]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[31].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[31] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[32]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[32] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[32]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E20000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_space_addr("MSG", 28'h0E20000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_space_addr("MEM-SB",24'hE20000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_space_addr("MEM", 28'h0E20000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[32]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[32].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[32] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[32]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[33]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[33] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[33]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E21000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_space_addr("MSG", 28'h0E21000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_space_addr("MEM-SB",24'hE21000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_space_addr("MEM", 28'h0E21000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[33]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[33].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[33] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[33]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[34]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[34] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[34]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E22000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_space_addr("MSG", 28'h0E22000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_space_addr("MEM-SB",24'hE22000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_space_addr("MEM", 28'h0E22000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[34]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[34].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[34] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[34]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[35]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[35] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[35]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E23000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_space_addr("MSG", 28'h0E23000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_space_addr("MEM-SB",24'hE23000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_space_addr("MEM", 28'h0E23000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[35]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[35].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[35] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[35]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[36]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[36] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[36]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E24000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_space_addr("MSG", 28'h0E24000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_space_addr("MEM-SB",24'hE24000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_space_addr("MEM", 28'h0E24000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[36]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[36].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[36] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[36]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[37]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[37] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[37]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E25000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_space_addr("MSG", 28'h0E25000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_space_addr("MEM-SB",24'hE25000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_space_addr("MEM", 28'h0E25000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[37]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[37].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[37] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[37]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[38]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[38] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[38]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E26000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_space_addr("MSG", 28'h0E26000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_space_addr("MEM-SB",24'hE26000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_space_addr("MEM", 28'h0E26000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[38]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[38].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[38] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[38]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[39]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[39] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[39]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E27000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_space_addr("MSG", 28'h0E27000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_space_addr("MEM-SB",24'hE27000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_space_addr("MEM", 28'h0E27000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[39]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[39].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[39] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[39]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[40]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[40] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[40]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E28000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_space_addr("MSG", 28'h0E28000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_space_addr("MEM-SB",24'hE28000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_space_addr("MEM", 28'h0E28000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[40]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[40].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[40] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[40]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[41]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[41] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[41]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E29000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_space_addr("MSG", 28'h0E29000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_space_addr("MEM-SB",24'hE29000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_space_addr("MEM", 28'h0E29000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[41]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[41].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[41] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[41]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[42]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[42] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[42]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E2A000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_space_addr("MSG", 28'h0E2A000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_space_addr("MEM-SB",24'hE2A000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_space_addr("MEM", 28'h0E2A000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[42]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[42].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[42] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[42]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[43]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[43] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[43]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E2B000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_space_addr("MSG", 28'h0E2B000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_space_addr("MEM-SB",24'hE2B000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_space_addr("MEM", 28'h0E2B000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[43]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[43].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[43] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[43]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[44]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[44] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[44]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E2C000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_space_addr("MSG", 28'h0E2C000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_space_addr("MEM-SB",24'hE2C000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_space_addr("MEM", 28'h0E2C000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[44]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[44].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[44] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[44]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[45]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[45] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[45]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E2D000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_space_addr("MSG", 28'h0E2D000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_space_addr("MEM-SB",24'hE2D000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_space_addr("MEM", 28'h0E2D000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[45]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[45].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[45] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[45]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[46]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[46] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[46]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E2E000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_space_addr("MSG", 28'h0E2E000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_space_addr("MEM-SB",24'hE2E000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_space_addr("MEM", 28'h0E2E000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[46]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[46].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[46] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[46]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[47]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[47] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[47]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E2F000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_space_addr("MSG", 28'h0E2F000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_space_addr("MEM-SB",24'hE2F000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_space_addr("MEM", 28'h0E2F000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[47]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[47].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[47] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[47]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[48]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[48] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[48]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E30000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_space_addr("MSG", 28'h0E30000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_space_addr("MEM-SB",24'hE30000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_space_addr("MEM", 28'h0E30000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[48]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[48].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[48] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[48]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[49]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[49] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[49]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E31000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_space_addr("MSG", 28'h0E31000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_space_addr("MEM-SB",24'hE31000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_space_addr("MEM", 28'h0E31000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[49]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[49].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[49] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[49]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[50]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[50] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[50]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E32000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_space_addr("MSG", 28'h0E32000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_space_addr("MEM-SB",24'hE32000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_space_addr("MEM", 28'h0E32000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[50]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[50].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[50] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[50]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[51]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[51] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[51]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E33000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_space_addr("MSG", 28'h0E33000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_space_addr("MEM-SB",24'hE33000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_space_addr("MEM", 28'h0E33000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[51]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[51].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[51] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[51]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[52]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[52] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[52]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E34000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_space_addr("MSG", 28'h0E34000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_space_addr("MEM-SB",24'hE34000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_space_addr("MEM", 28'h0E34000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[52]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[52].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[52] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[52]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[53]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[53] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[53]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E35000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_space_addr("MSG", 28'h0E35000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_space_addr("MEM-SB",24'hE35000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_space_addr("MEM", 28'h0E35000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[53]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[53].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[53] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[53]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[54]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[54] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[54]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E36000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_space_addr("MSG", 28'h0E36000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_space_addr("MEM-SB",24'hE36000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_space_addr("MEM", 28'h0E36000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[54]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[54].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[54] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[54]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[55]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[55] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[55]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E37000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_space_addr("MSG", 28'h0E37000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_space_addr("MEM-SB",24'hE37000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_space_addr("MEM", 28'h0E37000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[55]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[55].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[55] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[55]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[56]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[56] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[56]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E38000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_space_addr("MSG", 28'h0E38000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_space_addr("MEM-SB",24'hE38000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_space_addr("MEM", 28'h0E38000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[56]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[56].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[56] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[56]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[57]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[57] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[57]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E39000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_space_addr("MSG", 28'h0E39000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_space_addr("MEM-SB",24'hE39000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_space_addr("MEM", 28'h0E39000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[57]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[57].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[57] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[57]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[58]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[58] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[58]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E3A000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_space_addr("MSG", 28'h0E3A000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_space_addr("MEM-SB",24'hE3A000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_space_addr("MEM", 28'h0E3A000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[58]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[58].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[58] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[58]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[59]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[59] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[59]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E3B000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_space_addr("MSG", 28'h0E3B000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_space_addr("MEM-SB",24'hE3B000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_space_addr("MEM", 28'h0E3B000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[59]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[59].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[59] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[59]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[60]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[60] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[60]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E3C000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_space_addr("MSG", 28'h0E3C000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_space_addr("MEM-SB",24'hE3C000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_space_addr("MEM", 28'h0E3C000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[60]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[60].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[60] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[60]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[61]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[61] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[61]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E3D000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_space_addr("MSG", 28'h0E3D000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_space_addr("MEM-SB",24'hE3D000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_space_addr("MEM", 28'h0E3D000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[61]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[61].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[61] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[61]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[62]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[62] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[62]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E3E000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_space_addr("MSG", 28'h0E3E000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_space_addr("MEM-SB",24'hE3E000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_space_addr("MEM", 28'h0E3E000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[62]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[62].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[62] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[62]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_DEPTH_THRSH[63]";
    `endif
    CFG_LDB_CQ_INT_DEPTH_THRSH[63] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_DEPTH_THRSH_reg::type_id::create("CFG_LDB_CQ_INT_DEPTH_THRSH[63]", this);
    CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E3F000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_space_addr("MSG", 28'h0E3F000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_space_addr("MEM-SB",24'hE3F000);
    CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_space_addr("MEM", 28'h0E3F000);
      CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_space("MEM");
      CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_DEPTH_THRSH[63]:dont_test") ) CFG_LDB_CQ_INT_DEPTH_THRSH[63].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_DEPTH_THRSH[63] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_DEPTH_THRSH[63]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[0]";
    `endif
    CFG_LDB_CQ_INT_ENB[0] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[0]", this);
    CFG_LDB_CQ_INT_ENB[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E80000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[0].set_space_addr("MSG", 28'h0E80000);
    CFG_LDB_CQ_INT_ENB[0].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[0].set_space_addr("MEM-SB",24'hE80000);
    CFG_LDB_CQ_INT_ENB[0].set_space_addr("MEM", 28'h0E80000);
      CFG_LDB_CQ_INT_ENB[0].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[0].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[0].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[0].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[0].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[0].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[0]:dont_test") ) CFG_LDB_CQ_INT_ENB[0].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[0] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[0]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[1]";
    `endif
    CFG_LDB_CQ_INT_ENB[1] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[1]", this);
    CFG_LDB_CQ_INT_ENB[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E81000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[1].set_space_addr("MSG", 28'h0E81000);
    CFG_LDB_CQ_INT_ENB[1].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[1].set_space_addr("MEM-SB",24'hE81000);
    CFG_LDB_CQ_INT_ENB[1].set_space_addr("MEM", 28'h0E81000);
      CFG_LDB_CQ_INT_ENB[1].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[1].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[1].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[1].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[1].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[1].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[1]:dont_test") ) CFG_LDB_CQ_INT_ENB[1].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[1] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[2]";
    `endif
    CFG_LDB_CQ_INT_ENB[2] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[2]", this);
    CFG_LDB_CQ_INT_ENB[2].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E82000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[2].set_space_addr("MSG", 28'h0E82000);
    CFG_LDB_CQ_INT_ENB[2].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[2].set_space_addr("MEM-SB",24'hE82000);
    CFG_LDB_CQ_INT_ENB[2].set_space_addr("MEM", 28'h0E82000);
      CFG_LDB_CQ_INT_ENB[2].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[2].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[2].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[2].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[2].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[2].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[2].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[2]:dont_test") ) CFG_LDB_CQ_INT_ENB[2].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[2] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[3]";
    `endif
    CFG_LDB_CQ_INT_ENB[3] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[3]", this);
    CFG_LDB_CQ_INT_ENB[3].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E83000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[3].set_space_addr("MSG", 28'h0E83000);
    CFG_LDB_CQ_INT_ENB[3].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[3].set_space_addr("MEM-SB",24'hE83000);
    CFG_LDB_CQ_INT_ENB[3].set_space_addr("MEM", 28'h0E83000);
      CFG_LDB_CQ_INT_ENB[3].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[3].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[3].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[3].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[3].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[3].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[3].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[3]:dont_test") ) CFG_LDB_CQ_INT_ENB[3].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[3] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[4]";
    `endif
    CFG_LDB_CQ_INT_ENB[4] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[4]", this);
    CFG_LDB_CQ_INT_ENB[4].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E84000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[4].set_space_addr("MSG", 28'h0E84000);
    CFG_LDB_CQ_INT_ENB[4].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[4].set_space_addr("MEM-SB",24'hE84000);
    CFG_LDB_CQ_INT_ENB[4].set_space_addr("MEM", 28'h0E84000);
      CFG_LDB_CQ_INT_ENB[4].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[4].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[4].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[4].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[4].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[4].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[4].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[4]:dont_test") ) CFG_LDB_CQ_INT_ENB[4].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[4] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[5]";
    `endif
    CFG_LDB_CQ_INT_ENB[5] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[5]", this);
    CFG_LDB_CQ_INT_ENB[5].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E85000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[5].set_space_addr("MSG", 28'h0E85000);
    CFG_LDB_CQ_INT_ENB[5].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[5].set_space_addr("MEM-SB",24'hE85000);
    CFG_LDB_CQ_INT_ENB[5].set_space_addr("MEM", 28'h0E85000);
      CFG_LDB_CQ_INT_ENB[5].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[5].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[5].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[5].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[5].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[5].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[5].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[5]:dont_test") ) CFG_LDB_CQ_INT_ENB[5].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[5] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[6]";
    `endif
    CFG_LDB_CQ_INT_ENB[6] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[6]", this);
    CFG_LDB_CQ_INT_ENB[6].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E86000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[6].set_space_addr("MSG", 28'h0E86000);
    CFG_LDB_CQ_INT_ENB[6].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[6].set_space_addr("MEM-SB",24'hE86000);
    CFG_LDB_CQ_INT_ENB[6].set_space_addr("MEM", 28'h0E86000);
      CFG_LDB_CQ_INT_ENB[6].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[6].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[6].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[6].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[6].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[6].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[6].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[6]:dont_test") ) CFG_LDB_CQ_INT_ENB[6].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[6] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[7]";
    `endif
    CFG_LDB_CQ_INT_ENB[7] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[7]", this);
    CFG_LDB_CQ_INT_ENB[7].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E87000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[7].set_space_addr("MSG", 28'h0E87000);
    CFG_LDB_CQ_INT_ENB[7].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[7].set_space_addr("MEM-SB",24'hE87000);
    CFG_LDB_CQ_INT_ENB[7].set_space_addr("MEM", 28'h0E87000);
      CFG_LDB_CQ_INT_ENB[7].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[7].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[7].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[7].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[7].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[7].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[7].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[7]:dont_test") ) CFG_LDB_CQ_INT_ENB[7].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[7] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[8]";
    `endif
    CFG_LDB_CQ_INT_ENB[8] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[8]", this);
    CFG_LDB_CQ_INT_ENB[8].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E88000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[8].set_space_addr("MSG", 28'h0E88000);
    CFG_LDB_CQ_INT_ENB[8].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[8].set_space_addr("MEM-SB",24'hE88000);
    CFG_LDB_CQ_INT_ENB[8].set_space_addr("MEM", 28'h0E88000);
      CFG_LDB_CQ_INT_ENB[8].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[8].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[8].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[8].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[8].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[8].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[8].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[8]:dont_test") ) CFG_LDB_CQ_INT_ENB[8].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[8] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[9]";
    `endif
    CFG_LDB_CQ_INT_ENB[9] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[9]", this);
    CFG_LDB_CQ_INT_ENB[9].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E89000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[9].set_space_addr("MSG", 28'h0E89000);
    CFG_LDB_CQ_INT_ENB[9].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[9].set_space_addr("MEM-SB",24'hE89000);
    CFG_LDB_CQ_INT_ENB[9].set_space_addr("MEM", 28'h0E89000);
      CFG_LDB_CQ_INT_ENB[9].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[9].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[9].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[9].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[9].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[9].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[9].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[9]:dont_test") ) CFG_LDB_CQ_INT_ENB[9].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[9] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[10]";
    `endif
    CFG_LDB_CQ_INT_ENB[10] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[10]", this);
    CFG_LDB_CQ_INT_ENB[10].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E8A000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[10].set_space_addr("MSG", 28'h0E8A000);
    CFG_LDB_CQ_INT_ENB[10].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[10].set_space_addr("MEM-SB",24'hE8A000);
    CFG_LDB_CQ_INT_ENB[10].set_space_addr("MEM", 28'h0E8A000);
      CFG_LDB_CQ_INT_ENB[10].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[10].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[10].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[10].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[10].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[10].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[10].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[10]:dont_test") ) CFG_LDB_CQ_INT_ENB[10].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[10] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[11]";
    `endif
    CFG_LDB_CQ_INT_ENB[11] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[11]", this);
    CFG_LDB_CQ_INT_ENB[11].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E8B000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[11].set_space_addr("MSG", 28'h0E8B000);
    CFG_LDB_CQ_INT_ENB[11].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[11].set_space_addr("MEM-SB",24'hE8B000);
    CFG_LDB_CQ_INT_ENB[11].set_space_addr("MEM", 28'h0E8B000);
      CFG_LDB_CQ_INT_ENB[11].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[11].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[11].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[11].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[11].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[11].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[11].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[11]:dont_test") ) CFG_LDB_CQ_INT_ENB[11].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[11] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[12]";
    `endif
    CFG_LDB_CQ_INT_ENB[12] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[12]", this);
    CFG_LDB_CQ_INT_ENB[12].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E8C000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[12].set_space_addr("MSG", 28'h0E8C000);
    CFG_LDB_CQ_INT_ENB[12].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[12].set_space_addr("MEM-SB",24'hE8C000);
    CFG_LDB_CQ_INT_ENB[12].set_space_addr("MEM", 28'h0E8C000);
      CFG_LDB_CQ_INT_ENB[12].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[12].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[12].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[12].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[12].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[12].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[12].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[12]:dont_test") ) CFG_LDB_CQ_INT_ENB[12].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[12] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[13]";
    `endif
    CFG_LDB_CQ_INT_ENB[13] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[13]", this);
    CFG_LDB_CQ_INT_ENB[13].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E8D000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[13].set_space_addr("MSG", 28'h0E8D000);
    CFG_LDB_CQ_INT_ENB[13].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[13].set_space_addr("MEM-SB",24'hE8D000);
    CFG_LDB_CQ_INT_ENB[13].set_space_addr("MEM", 28'h0E8D000);
      CFG_LDB_CQ_INT_ENB[13].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[13].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[13].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[13].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[13].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[13].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[13].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[13]:dont_test") ) CFG_LDB_CQ_INT_ENB[13].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[13] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[14]";
    `endif
    CFG_LDB_CQ_INT_ENB[14] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[14]", this);
    CFG_LDB_CQ_INT_ENB[14].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E8E000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[14].set_space_addr("MSG", 28'h0E8E000);
    CFG_LDB_CQ_INT_ENB[14].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[14].set_space_addr("MEM-SB",24'hE8E000);
    CFG_LDB_CQ_INT_ENB[14].set_space_addr("MEM", 28'h0E8E000);
      CFG_LDB_CQ_INT_ENB[14].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[14].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[14].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[14].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[14].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[14].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[14].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[14]:dont_test") ) CFG_LDB_CQ_INT_ENB[14].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[14] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[15]";
    `endif
    CFG_LDB_CQ_INT_ENB[15] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[15]", this);
    CFG_LDB_CQ_INT_ENB[15].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E8F000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[15].set_space_addr("MSG", 28'h0E8F000);
    CFG_LDB_CQ_INT_ENB[15].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[15].set_space_addr("MEM-SB",24'hE8F000);
    CFG_LDB_CQ_INT_ENB[15].set_space_addr("MEM", 28'h0E8F000);
      CFG_LDB_CQ_INT_ENB[15].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[15].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[15].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[15].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[15].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[15].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[15].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[15]:dont_test") ) CFG_LDB_CQ_INT_ENB[15].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[15] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[16]";
    `endif
    CFG_LDB_CQ_INT_ENB[16] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[16]", this);
    CFG_LDB_CQ_INT_ENB[16].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E90000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[16].set_space_addr("MSG", 28'h0E90000);
    CFG_LDB_CQ_INT_ENB[16].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[16].set_space_addr("MEM-SB",24'hE90000);
    CFG_LDB_CQ_INT_ENB[16].set_space_addr("MEM", 28'h0E90000);
      CFG_LDB_CQ_INT_ENB[16].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[16].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[16].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[16].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[16].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[16].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[16].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[16]:dont_test") ) CFG_LDB_CQ_INT_ENB[16].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[16] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[17]";
    `endif
    CFG_LDB_CQ_INT_ENB[17] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[17]", this);
    CFG_LDB_CQ_INT_ENB[17].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E91000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[17].set_space_addr("MSG", 28'h0E91000);
    CFG_LDB_CQ_INT_ENB[17].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[17].set_space_addr("MEM-SB",24'hE91000);
    CFG_LDB_CQ_INT_ENB[17].set_space_addr("MEM", 28'h0E91000);
      CFG_LDB_CQ_INT_ENB[17].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[17].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[17].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[17].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[17].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[17].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[17].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[17]:dont_test") ) CFG_LDB_CQ_INT_ENB[17].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[17] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[18]";
    `endif
    CFG_LDB_CQ_INT_ENB[18] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[18]", this);
    CFG_LDB_CQ_INT_ENB[18].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E92000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[18].set_space_addr("MSG", 28'h0E92000);
    CFG_LDB_CQ_INT_ENB[18].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[18].set_space_addr("MEM-SB",24'hE92000);
    CFG_LDB_CQ_INT_ENB[18].set_space_addr("MEM", 28'h0E92000);
      CFG_LDB_CQ_INT_ENB[18].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[18].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[18].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[18].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[18].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[18].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[18].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[18]:dont_test") ) CFG_LDB_CQ_INT_ENB[18].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[18] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[19]";
    `endif
    CFG_LDB_CQ_INT_ENB[19] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[19]", this);
    CFG_LDB_CQ_INT_ENB[19].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E93000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[19].set_space_addr("MSG", 28'h0E93000);
    CFG_LDB_CQ_INT_ENB[19].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[19].set_space_addr("MEM-SB",24'hE93000);
    CFG_LDB_CQ_INT_ENB[19].set_space_addr("MEM", 28'h0E93000);
      CFG_LDB_CQ_INT_ENB[19].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[19].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[19].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[19].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[19].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[19].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[19].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[19]:dont_test") ) CFG_LDB_CQ_INT_ENB[19].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[19] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[20]";
    `endif
    CFG_LDB_CQ_INT_ENB[20] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[20]", this);
    CFG_LDB_CQ_INT_ENB[20].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E94000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[20].set_space_addr("MSG", 28'h0E94000);
    CFG_LDB_CQ_INT_ENB[20].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[20].set_space_addr("MEM-SB",24'hE94000);
    CFG_LDB_CQ_INT_ENB[20].set_space_addr("MEM", 28'h0E94000);
      CFG_LDB_CQ_INT_ENB[20].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[20].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[20].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[20].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[20].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[20].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[20].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[20]:dont_test") ) CFG_LDB_CQ_INT_ENB[20].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[20] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[21]";
    `endif
    CFG_LDB_CQ_INT_ENB[21] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[21]", this);
    CFG_LDB_CQ_INT_ENB[21].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E95000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[21].set_space_addr("MSG", 28'h0E95000);
    CFG_LDB_CQ_INT_ENB[21].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[21].set_space_addr("MEM-SB",24'hE95000);
    CFG_LDB_CQ_INT_ENB[21].set_space_addr("MEM", 28'h0E95000);
      CFG_LDB_CQ_INT_ENB[21].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[21].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[21].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[21].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[21].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[21].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[21].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[21]:dont_test") ) CFG_LDB_CQ_INT_ENB[21].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[21] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[22]";
    `endif
    CFG_LDB_CQ_INT_ENB[22] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[22]", this);
    CFG_LDB_CQ_INT_ENB[22].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E96000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[22].set_space_addr("MSG", 28'h0E96000);
    CFG_LDB_CQ_INT_ENB[22].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[22].set_space_addr("MEM-SB",24'hE96000);
    CFG_LDB_CQ_INT_ENB[22].set_space_addr("MEM", 28'h0E96000);
      CFG_LDB_CQ_INT_ENB[22].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[22].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[22].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[22].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[22].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[22].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[22].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[22]:dont_test") ) CFG_LDB_CQ_INT_ENB[22].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[22] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[23]";
    `endif
    CFG_LDB_CQ_INT_ENB[23] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[23]", this);
    CFG_LDB_CQ_INT_ENB[23].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E97000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[23].set_space_addr("MSG", 28'h0E97000);
    CFG_LDB_CQ_INT_ENB[23].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[23].set_space_addr("MEM-SB",24'hE97000);
    CFG_LDB_CQ_INT_ENB[23].set_space_addr("MEM", 28'h0E97000);
      CFG_LDB_CQ_INT_ENB[23].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[23].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[23].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[23].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[23].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[23].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[23].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[23]:dont_test") ) CFG_LDB_CQ_INT_ENB[23].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[23] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[24]";
    `endif
    CFG_LDB_CQ_INT_ENB[24] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[24]", this);
    CFG_LDB_CQ_INT_ENB[24].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E98000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[24].set_space_addr("MSG", 28'h0E98000);
    CFG_LDB_CQ_INT_ENB[24].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[24].set_space_addr("MEM-SB",24'hE98000);
    CFG_LDB_CQ_INT_ENB[24].set_space_addr("MEM", 28'h0E98000);
      CFG_LDB_CQ_INT_ENB[24].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[24].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[24].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[24].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[24].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[24].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[24].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[24]:dont_test") ) CFG_LDB_CQ_INT_ENB[24].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[24] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[25]";
    `endif
    CFG_LDB_CQ_INT_ENB[25] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[25]", this);
    CFG_LDB_CQ_INT_ENB[25].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E99000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[25].set_space_addr("MSG", 28'h0E99000);
    CFG_LDB_CQ_INT_ENB[25].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[25].set_space_addr("MEM-SB",24'hE99000);
    CFG_LDB_CQ_INT_ENB[25].set_space_addr("MEM", 28'h0E99000);
      CFG_LDB_CQ_INT_ENB[25].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[25].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[25].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[25].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[25].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[25].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[25].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[25]:dont_test") ) CFG_LDB_CQ_INT_ENB[25].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[25] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[26]";
    `endif
    CFG_LDB_CQ_INT_ENB[26] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[26]", this);
    CFG_LDB_CQ_INT_ENB[26].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E9A000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[26].set_space_addr("MSG", 28'h0E9A000);
    CFG_LDB_CQ_INT_ENB[26].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[26].set_space_addr("MEM-SB",24'hE9A000);
    CFG_LDB_CQ_INT_ENB[26].set_space_addr("MEM", 28'h0E9A000);
      CFG_LDB_CQ_INT_ENB[26].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[26].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[26].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[26].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[26].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[26].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[26].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[26]:dont_test") ) CFG_LDB_CQ_INT_ENB[26].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[26] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[27]";
    `endif
    CFG_LDB_CQ_INT_ENB[27] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[27]", this);
    CFG_LDB_CQ_INT_ENB[27].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E9B000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[27].set_space_addr("MSG", 28'h0E9B000);
    CFG_LDB_CQ_INT_ENB[27].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[27].set_space_addr("MEM-SB",24'hE9B000);
    CFG_LDB_CQ_INT_ENB[27].set_space_addr("MEM", 28'h0E9B000);
      CFG_LDB_CQ_INT_ENB[27].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[27].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[27].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[27].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[27].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[27].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[27].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[27]:dont_test") ) CFG_LDB_CQ_INT_ENB[27].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[27] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[28]";
    `endif
    CFG_LDB_CQ_INT_ENB[28] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[28]", this);
    CFG_LDB_CQ_INT_ENB[28].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E9C000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[28].set_space_addr("MSG", 28'h0E9C000);
    CFG_LDB_CQ_INT_ENB[28].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[28].set_space_addr("MEM-SB",24'hE9C000);
    CFG_LDB_CQ_INT_ENB[28].set_space_addr("MEM", 28'h0E9C000);
      CFG_LDB_CQ_INT_ENB[28].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[28].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[28].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[28].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[28].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[28].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[28].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[28]:dont_test") ) CFG_LDB_CQ_INT_ENB[28].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[28] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[29]";
    `endif
    CFG_LDB_CQ_INT_ENB[29] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[29]", this);
    CFG_LDB_CQ_INT_ENB[29].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E9D000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[29].set_space_addr("MSG", 28'h0E9D000);
    CFG_LDB_CQ_INT_ENB[29].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[29].set_space_addr("MEM-SB",24'hE9D000);
    CFG_LDB_CQ_INT_ENB[29].set_space_addr("MEM", 28'h0E9D000);
      CFG_LDB_CQ_INT_ENB[29].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[29].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[29].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[29].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[29].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[29].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[29].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[29]:dont_test") ) CFG_LDB_CQ_INT_ENB[29].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[29] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[30]";
    `endif
    CFG_LDB_CQ_INT_ENB[30] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[30]", this);
    CFG_LDB_CQ_INT_ENB[30].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E9E000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[30].set_space_addr("MSG", 28'h0E9E000);
    CFG_LDB_CQ_INT_ENB[30].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[30].set_space_addr("MEM-SB",24'hE9E000);
    CFG_LDB_CQ_INT_ENB[30].set_space_addr("MEM", 28'h0E9E000);
      CFG_LDB_CQ_INT_ENB[30].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[30].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[30].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[30].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[30].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[30].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[30].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[30]:dont_test") ) CFG_LDB_CQ_INT_ENB[30].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[30] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[31]";
    `endif
    CFG_LDB_CQ_INT_ENB[31] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[31]", this);
    CFG_LDB_CQ_INT_ENB[31].set_cfg(16'h0, 16'h0, 16'h0, 28'h0E9F000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[31].set_space_addr("MSG", 28'h0E9F000);
    CFG_LDB_CQ_INT_ENB[31].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[31].set_space_addr("MEM-SB",24'hE9F000);
    CFG_LDB_CQ_INT_ENB[31].set_space_addr("MEM", 28'h0E9F000);
      CFG_LDB_CQ_INT_ENB[31].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[31].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[31].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[31].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[31].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[31].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[31].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[31]:dont_test") ) CFG_LDB_CQ_INT_ENB[31].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[31] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[32]";
    `endif
    CFG_LDB_CQ_INT_ENB[32] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[32]", this);
    CFG_LDB_CQ_INT_ENB[32].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EA0000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[32].set_space_addr("MSG", 28'h0EA0000);
    CFG_LDB_CQ_INT_ENB[32].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[32].set_space_addr("MEM-SB",24'hEA0000);
    CFG_LDB_CQ_INT_ENB[32].set_space_addr("MEM", 28'h0EA0000);
      CFG_LDB_CQ_INT_ENB[32].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[32].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[32].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[32].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[32].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[32].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[32].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[32].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[32]:dont_test") ) CFG_LDB_CQ_INT_ENB[32].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[32] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[32]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[33]";
    `endif
    CFG_LDB_CQ_INT_ENB[33] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[33]", this);
    CFG_LDB_CQ_INT_ENB[33].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EA1000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[33].set_space_addr("MSG", 28'h0EA1000);
    CFG_LDB_CQ_INT_ENB[33].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[33].set_space_addr("MEM-SB",24'hEA1000);
    CFG_LDB_CQ_INT_ENB[33].set_space_addr("MEM", 28'h0EA1000);
      CFG_LDB_CQ_INT_ENB[33].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[33].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[33].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[33].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[33].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[33].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[33].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[33].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[33]:dont_test") ) CFG_LDB_CQ_INT_ENB[33].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[33] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[33]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[34]";
    `endif
    CFG_LDB_CQ_INT_ENB[34] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[34]", this);
    CFG_LDB_CQ_INT_ENB[34].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EA2000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[34].set_space_addr("MSG", 28'h0EA2000);
    CFG_LDB_CQ_INT_ENB[34].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[34].set_space_addr("MEM-SB",24'hEA2000);
    CFG_LDB_CQ_INT_ENB[34].set_space_addr("MEM", 28'h0EA2000);
      CFG_LDB_CQ_INT_ENB[34].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[34].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[34].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[34].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[34].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[34].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[34].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[34].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[34]:dont_test") ) CFG_LDB_CQ_INT_ENB[34].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[34] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[34]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[35]";
    `endif
    CFG_LDB_CQ_INT_ENB[35] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[35]", this);
    CFG_LDB_CQ_INT_ENB[35].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EA3000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[35].set_space_addr("MSG", 28'h0EA3000);
    CFG_LDB_CQ_INT_ENB[35].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[35].set_space_addr("MEM-SB",24'hEA3000);
    CFG_LDB_CQ_INT_ENB[35].set_space_addr("MEM", 28'h0EA3000);
      CFG_LDB_CQ_INT_ENB[35].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[35].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[35].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[35].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[35].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[35].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[35].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[35].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[35]:dont_test") ) CFG_LDB_CQ_INT_ENB[35].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[35] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[35]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[36]";
    `endif
    CFG_LDB_CQ_INT_ENB[36] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[36]", this);
    CFG_LDB_CQ_INT_ENB[36].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EA4000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[36].set_space_addr("MSG", 28'h0EA4000);
    CFG_LDB_CQ_INT_ENB[36].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[36].set_space_addr("MEM-SB",24'hEA4000);
    CFG_LDB_CQ_INT_ENB[36].set_space_addr("MEM", 28'h0EA4000);
      CFG_LDB_CQ_INT_ENB[36].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[36].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[36].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[36].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[36].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[36].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[36].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[36].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[36]:dont_test") ) CFG_LDB_CQ_INT_ENB[36].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[36] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[36]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[37]";
    `endif
    CFG_LDB_CQ_INT_ENB[37] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[37]", this);
    CFG_LDB_CQ_INT_ENB[37].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EA5000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[37].set_space_addr("MSG", 28'h0EA5000);
    CFG_LDB_CQ_INT_ENB[37].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[37].set_space_addr("MEM-SB",24'hEA5000);
    CFG_LDB_CQ_INT_ENB[37].set_space_addr("MEM", 28'h0EA5000);
      CFG_LDB_CQ_INT_ENB[37].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[37].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[37].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[37].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[37].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[37].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[37].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[37].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[37]:dont_test") ) CFG_LDB_CQ_INT_ENB[37].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[37] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[37]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[38]";
    `endif
    CFG_LDB_CQ_INT_ENB[38] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[38]", this);
    CFG_LDB_CQ_INT_ENB[38].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EA6000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[38].set_space_addr("MSG", 28'h0EA6000);
    CFG_LDB_CQ_INT_ENB[38].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[38].set_space_addr("MEM-SB",24'hEA6000);
    CFG_LDB_CQ_INT_ENB[38].set_space_addr("MEM", 28'h0EA6000);
      CFG_LDB_CQ_INT_ENB[38].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[38].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[38].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[38].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[38].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[38].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[38].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[38].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[38]:dont_test") ) CFG_LDB_CQ_INT_ENB[38].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[38] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[38]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[39]";
    `endif
    CFG_LDB_CQ_INT_ENB[39] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[39]", this);
    CFG_LDB_CQ_INT_ENB[39].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EA7000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[39].set_space_addr("MSG", 28'h0EA7000);
    CFG_LDB_CQ_INT_ENB[39].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[39].set_space_addr("MEM-SB",24'hEA7000);
    CFG_LDB_CQ_INT_ENB[39].set_space_addr("MEM", 28'h0EA7000);
      CFG_LDB_CQ_INT_ENB[39].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[39].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[39].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[39].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[39].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[39].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[39].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[39].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[39]:dont_test") ) CFG_LDB_CQ_INT_ENB[39].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[39] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[39]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[40]";
    `endif
    CFG_LDB_CQ_INT_ENB[40] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[40]", this);
    CFG_LDB_CQ_INT_ENB[40].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EA8000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[40].set_space_addr("MSG", 28'h0EA8000);
    CFG_LDB_CQ_INT_ENB[40].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[40].set_space_addr("MEM-SB",24'hEA8000);
    CFG_LDB_CQ_INT_ENB[40].set_space_addr("MEM", 28'h0EA8000);
      CFG_LDB_CQ_INT_ENB[40].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[40].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[40].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[40].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[40].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[40].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[40].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[40].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[40]:dont_test") ) CFG_LDB_CQ_INT_ENB[40].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[40] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[40]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[41]";
    `endif
    CFG_LDB_CQ_INT_ENB[41] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[41]", this);
    CFG_LDB_CQ_INT_ENB[41].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EA9000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[41].set_space_addr("MSG", 28'h0EA9000);
    CFG_LDB_CQ_INT_ENB[41].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[41].set_space_addr("MEM-SB",24'hEA9000);
    CFG_LDB_CQ_INT_ENB[41].set_space_addr("MEM", 28'h0EA9000);
      CFG_LDB_CQ_INT_ENB[41].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[41].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[41].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[41].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[41].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[41].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[41].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[41].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[41]:dont_test") ) CFG_LDB_CQ_INT_ENB[41].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[41] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[41]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[42]";
    `endif
    CFG_LDB_CQ_INT_ENB[42] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[42]", this);
    CFG_LDB_CQ_INT_ENB[42].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EAA000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[42].set_space_addr("MSG", 28'h0EAA000);
    CFG_LDB_CQ_INT_ENB[42].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[42].set_space_addr("MEM-SB",24'hEAA000);
    CFG_LDB_CQ_INT_ENB[42].set_space_addr("MEM", 28'h0EAA000);
      CFG_LDB_CQ_INT_ENB[42].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[42].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[42].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[42].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[42].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[42].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[42].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[42].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[42]:dont_test") ) CFG_LDB_CQ_INT_ENB[42].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[42] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[42]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[43]";
    `endif
    CFG_LDB_CQ_INT_ENB[43] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[43]", this);
    CFG_LDB_CQ_INT_ENB[43].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EAB000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[43].set_space_addr("MSG", 28'h0EAB000);
    CFG_LDB_CQ_INT_ENB[43].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[43].set_space_addr("MEM-SB",24'hEAB000);
    CFG_LDB_CQ_INT_ENB[43].set_space_addr("MEM", 28'h0EAB000);
      CFG_LDB_CQ_INT_ENB[43].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[43].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[43].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[43].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[43].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[43].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[43].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[43].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[43]:dont_test") ) CFG_LDB_CQ_INT_ENB[43].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[43] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[43]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[44]";
    `endif
    CFG_LDB_CQ_INT_ENB[44] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[44]", this);
    CFG_LDB_CQ_INT_ENB[44].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EAC000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[44].set_space_addr("MSG", 28'h0EAC000);
    CFG_LDB_CQ_INT_ENB[44].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[44].set_space_addr("MEM-SB",24'hEAC000);
    CFG_LDB_CQ_INT_ENB[44].set_space_addr("MEM", 28'h0EAC000);
      CFG_LDB_CQ_INT_ENB[44].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[44].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[44].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[44].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[44].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[44].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[44].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[44].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[44]:dont_test") ) CFG_LDB_CQ_INT_ENB[44].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[44] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[44]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[45]";
    `endif
    CFG_LDB_CQ_INT_ENB[45] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[45]", this);
    CFG_LDB_CQ_INT_ENB[45].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EAD000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[45].set_space_addr("MSG", 28'h0EAD000);
    CFG_LDB_CQ_INT_ENB[45].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[45].set_space_addr("MEM-SB",24'hEAD000);
    CFG_LDB_CQ_INT_ENB[45].set_space_addr("MEM", 28'h0EAD000);
      CFG_LDB_CQ_INT_ENB[45].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[45].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[45].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[45].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[45].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[45].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[45].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[45].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[45]:dont_test") ) CFG_LDB_CQ_INT_ENB[45].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[45] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[45]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[46]";
    `endif
    CFG_LDB_CQ_INT_ENB[46] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[46]", this);
    CFG_LDB_CQ_INT_ENB[46].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EAE000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[46].set_space_addr("MSG", 28'h0EAE000);
    CFG_LDB_CQ_INT_ENB[46].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[46].set_space_addr("MEM-SB",24'hEAE000);
    CFG_LDB_CQ_INT_ENB[46].set_space_addr("MEM", 28'h0EAE000);
      CFG_LDB_CQ_INT_ENB[46].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[46].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[46].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[46].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[46].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[46].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[46].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[46].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[46]:dont_test") ) CFG_LDB_CQ_INT_ENB[46].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[46] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[46]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[47]";
    `endif
    CFG_LDB_CQ_INT_ENB[47] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[47]", this);
    CFG_LDB_CQ_INT_ENB[47].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EAF000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[47].set_space_addr("MSG", 28'h0EAF000);
    CFG_LDB_CQ_INT_ENB[47].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[47].set_space_addr("MEM-SB",24'hEAF000);
    CFG_LDB_CQ_INT_ENB[47].set_space_addr("MEM", 28'h0EAF000);
      CFG_LDB_CQ_INT_ENB[47].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[47].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[47].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[47].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[47].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[47].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[47].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[47].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[47]:dont_test") ) CFG_LDB_CQ_INT_ENB[47].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[47] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[47]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[48]";
    `endif
    CFG_LDB_CQ_INT_ENB[48] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[48]", this);
    CFG_LDB_CQ_INT_ENB[48].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EB0000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[48].set_space_addr("MSG", 28'h0EB0000);
    CFG_LDB_CQ_INT_ENB[48].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[48].set_space_addr("MEM-SB",24'hEB0000);
    CFG_LDB_CQ_INT_ENB[48].set_space_addr("MEM", 28'h0EB0000);
      CFG_LDB_CQ_INT_ENB[48].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[48].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[48].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[48].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[48].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[48].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[48].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[48].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[48]:dont_test") ) CFG_LDB_CQ_INT_ENB[48].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[48] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[48]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[49]";
    `endif
    CFG_LDB_CQ_INT_ENB[49] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[49]", this);
    CFG_LDB_CQ_INT_ENB[49].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EB1000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[49].set_space_addr("MSG", 28'h0EB1000);
    CFG_LDB_CQ_INT_ENB[49].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[49].set_space_addr("MEM-SB",24'hEB1000);
    CFG_LDB_CQ_INT_ENB[49].set_space_addr("MEM", 28'h0EB1000);
      CFG_LDB_CQ_INT_ENB[49].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[49].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[49].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[49].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[49].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[49].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[49].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[49].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[49]:dont_test") ) CFG_LDB_CQ_INT_ENB[49].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[49] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[49]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[50]";
    `endif
    CFG_LDB_CQ_INT_ENB[50] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[50]", this);
    CFG_LDB_CQ_INT_ENB[50].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EB2000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[50].set_space_addr("MSG", 28'h0EB2000);
    CFG_LDB_CQ_INT_ENB[50].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[50].set_space_addr("MEM-SB",24'hEB2000);
    CFG_LDB_CQ_INT_ENB[50].set_space_addr("MEM", 28'h0EB2000);
      CFG_LDB_CQ_INT_ENB[50].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[50].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[50].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[50].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[50].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[50].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[50].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[50].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[50]:dont_test") ) CFG_LDB_CQ_INT_ENB[50].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[50] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[50]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[51]";
    `endif
    CFG_LDB_CQ_INT_ENB[51] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[51]", this);
    CFG_LDB_CQ_INT_ENB[51].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EB3000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[51].set_space_addr("MSG", 28'h0EB3000);
    CFG_LDB_CQ_INT_ENB[51].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[51].set_space_addr("MEM-SB",24'hEB3000);
    CFG_LDB_CQ_INT_ENB[51].set_space_addr("MEM", 28'h0EB3000);
      CFG_LDB_CQ_INT_ENB[51].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[51].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[51].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[51].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[51].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[51].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[51].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[51].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[51]:dont_test") ) CFG_LDB_CQ_INT_ENB[51].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[51] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[51]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[52]";
    `endif
    CFG_LDB_CQ_INT_ENB[52] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[52]", this);
    CFG_LDB_CQ_INT_ENB[52].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EB4000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[52].set_space_addr("MSG", 28'h0EB4000);
    CFG_LDB_CQ_INT_ENB[52].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[52].set_space_addr("MEM-SB",24'hEB4000);
    CFG_LDB_CQ_INT_ENB[52].set_space_addr("MEM", 28'h0EB4000);
      CFG_LDB_CQ_INT_ENB[52].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[52].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[52].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[52].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[52].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[52].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[52].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[52].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[52]:dont_test") ) CFG_LDB_CQ_INT_ENB[52].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[52] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[52]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[53]";
    `endif
    CFG_LDB_CQ_INT_ENB[53] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[53]", this);
    CFG_LDB_CQ_INT_ENB[53].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EB5000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[53].set_space_addr("MSG", 28'h0EB5000);
    CFG_LDB_CQ_INT_ENB[53].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[53].set_space_addr("MEM-SB",24'hEB5000);
    CFG_LDB_CQ_INT_ENB[53].set_space_addr("MEM", 28'h0EB5000);
      CFG_LDB_CQ_INT_ENB[53].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[53].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[53].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[53].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[53].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[53].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[53].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[53].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[53]:dont_test") ) CFG_LDB_CQ_INT_ENB[53].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[53] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[53]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[54]";
    `endif
    CFG_LDB_CQ_INT_ENB[54] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[54]", this);
    CFG_LDB_CQ_INT_ENB[54].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EB6000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[54].set_space_addr("MSG", 28'h0EB6000);
    CFG_LDB_CQ_INT_ENB[54].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[54].set_space_addr("MEM-SB",24'hEB6000);
    CFG_LDB_CQ_INT_ENB[54].set_space_addr("MEM", 28'h0EB6000);
      CFG_LDB_CQ_INT_ENB[54].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[54].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[54].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[54].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[54].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[54].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[54].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[54].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[54]:dont_test") ) CFG_LDB_CQ_INT_ENB[54].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[54] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[54]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[55]";
    `endif
    CFG_LDB_CQ_INT_ENB[55] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[55]", this);
    CFG_LDB_CQ_INT_ENB[55].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EB7000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[55].set_space_addr("MSG", 28'h0EB7000);
    CFG_LDB_CQ_INT_ENB[55].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[55].set_space_addr("MEM-SB",24'hEB7000);
    CFG_LDB_CQ_INT_ENB[55].set_space_addr("MEM", 28'h0EB7000);
      CFG_LDB_CQ_INT_ENB[55].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[55].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[55].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[55].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[55].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[55].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[55].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[55].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[55]:dont_test") ) CFG_LDB_CQ_INT_ENB[55].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[55] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[55]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[56]";
    `endif
    CFG_LDB_CQ_INT_ENB[56] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[56]", this);
    CFG_LDB_CQ_INT_ENB[56].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EB8000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[56].set_space_addr("MSG", 28'h0EB8000);
    CFG_LDB_CQ_INT_ENB[56].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[56].set_space_addr("MEM-SB",24'hEB8000);
    CFG_LDB_CQ_INT_ENB[56].set_space_addr("MEM", 28'h0EB8000);
      CFG_LDB_CQ_INT_ENB[56].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[56].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[56].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[56].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[56].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[56].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[56].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[56].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[56]:dont_test") ) CFG_LDB_CQ_INT_ENB[56].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[56] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[56]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[57]";
    `endif
    CFG_LDB_CQ_INT_ENB[57] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[57]", this);
    CFG_LDB_CQ_INT_ENB[57].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EB9000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[57].set_space_addr("MSG", 28'h0EB9000);
    CFG_LDB_CQ_INT_ENB[57].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[57].set_space_addr("MEM-SB",24'hEB9000);
    CFG_LDB_CQ_INT_ENB[57].set_space_addr("MEM", 28'h0EB9000);
      CFG_LDB_CQ_INT_ENB[57].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[57].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[57].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[57].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[57].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[57].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[57].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[57].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[57]:dont_test") ) CFG_LDB_CQ_INT_ENB[57].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[57] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[57]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[58]";
    `endif
    CFG_LDB_CQ_INT_ENB[58] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[58]", this);
    CFG_LDB_CQ_INT_ENB[58].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EBA000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[58].set_space_addr("MSG", 28'h0EBA000);
    CFG_LDB_CQ_INT_ENB[58].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[58].set_space_addr("MEM-SB",24'hEBA000);
    CFG_LDB_CQ_INT_ENB[58].set_space_addr("MEM", 28'h0EBA000);
      CFG_LDB_CQ_INT_ENB[58].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[58].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[58].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[58].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[58].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[58].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[58].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[58].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[58]:dont_test") ) CFG_LDB_CQ_INT_ENB[58].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[58] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[58]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[59]";
    `endif
    CFG_LDB_CQ_INT_ENB[59] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[59]", this);
    CFG_LDB_CQ_INT_ENB[59].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EBB000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[59].set_space_addr("MSG", 28'h0EBB000);
    CFG_LDB_CQ_INT_ENB[59].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[59].set_space_addr("MEM-SB",24'hEBB000);
    CFG_LDB_CQ_INT_ENB[59].set_space_addr("MEM", 28'h0EBB000);
      CFG_LDB_CQ_INT_ENB[59].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[59].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[59].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[59].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[59].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[59].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[59].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[59].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[59]:dont_test") ) CFG_LDB_CQ_INT_ENB[59].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[59] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[59]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[60]";
    `endif
    CFG_LDB_CQ_INT_ENB[60] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[60]", this);
    CFG_LDB_CQ_INT_ENB[60].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EBC000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[60].set_space_addr("MSG", 28'h0EBC000);
    CFG_LDB_CQ_INT_ENB[60].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[60].set_space_addr("MEM-SB",24'hEBC000);
    CFG_LDB_CQ_INT_ENB[60].set_space_addr("MEM", 28'h0EBC000);
      CFG_LDB_CQ_INT_ENB[60].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[60].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[60].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[60].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[60].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[60].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[60].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[60].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[60]:dont_test") ) CFG_LDB_CQ_INT_ENB[60].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[60] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[60]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[61]";
    `endif
    CFG_LDB_CQ_INT_ENB[61] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[61]", this);
    CFG_LDB_CQ_INT_ENB[61].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EBD000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[61].set_space_addr("MSG", 28'h0EBD000);
    CFG_LDB_CQ_INT_ENB[61].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[61].set_space_addr("MEM-SB",24'hEBD000);
    CFG_LDB_CQ_INT_ENB[61].set_space_addr("MEM", 28'h0EBD000);
      CFG_LDB_CQ_INT_ENB[61].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[61].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[61].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[61].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[61].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[61].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[61].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[61].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[61]:dont_test") ) CFG_LDB_CQ_INT_ENB[61].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[61] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[61]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[62]";
    `endif
    CFG_LDB_CQ_INT_ENB[62] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[62]", this);
    CFG_LDB_CQ_INT_ENB[62].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EBE000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[62].set_space_addr("MSG", 28'h0EBE000);
    CFG_LDB_CQ_INT_ENB[62].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[62].set_space_addr("MEM-SB",24'hEBE000);
    CFG_LDB_CQ_INT_ENB[62].set_space_addr("MEM", 28'h0EBE000);
      CFG_LDB_CQ_INT_ENB[62].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[62].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[62].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[62].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[62].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[62].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[62].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[62].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[62]:dont_test") ) CFG_LDB_CQ_INT_ENB[62].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[62] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[62]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INT_ENB[63]";
    `endif
    CFG_LDB_CQ_INT_ENB[63] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INT_ENB_reg::type_id::create("CFG_LDB_CQ_INT_ENB[63]", this);
    CFG_LDB_CQ_INT_ENB[63].set_cfg(16'h0, 16'h0, 16'h0, 28'h0EBF000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INT_ENB[63].set_space_addr("MSG", 28'h0EBF000);
    CFG_LDB_CQ_INT_ENB[63].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INT_ENB[63].set_space_addr("MEM-SB",24'hEBF000);
    CFG_LDB_CQ_INT_ENB[63].set_space_addr("MEM", 28'h0EBF000);
      CFG_LDB_CQ_INT_ENB[63].set_space("MEM");
      CFG_LDB_CQ_INT_ENB[63].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INT_ENB[63].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INT_ENB[63].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INT_ENB[63].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INT_ENB[63].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INT_ENB[63].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INT_ENB[63].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INT_ENB[63]:dont_test") ) CFG_LDB_CQ_INT_ENB[63].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INT_ENB[63] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INT_ENB[63]"));
      end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_LDB_CQ_TIMER_COUNT[%0d]",i);
    `endif
    CFG_LDB_CQ_TIMER_COUNT[i] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_COUNT_reg::type_id::create($psprintf("CFG_LDB_CQ_TIMER_COUNT[%0d]",i), this);
    CFG_LDB_CQ_TIMER_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0F00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_TIMER_COUNT[i].set_space_addr("MSG",  (28'h0F00000 + (i*4096)) );
    CFG_LDB_CQ_TIMER_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_TIMER_COUNT[i].set_space_addr("MEM-SB", (24'hF00000 + (i*4096)) );
    CFG_LDB_CQ_TIMER_COUNT[i].set_space_addr("MEM",  (28'h0F00000 + (i*4096)) );
      CFG_LDB_CQ_TIMER_COUNT[i].set_space("MEM");
      CFG_LDB_CQ_TIMER_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_TIMER_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_TIMER_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_TIMER_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_TIMER_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_TIMER_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_TIMER_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_LDB_CQ_TIMER_COUNT[%0d]:dont_test",i)) ) CFG_LDB_CQ_TIMER_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_TIMER_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_LDB_CQ_TIMER_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_LDB_CQ_TIMER_THRESHOLD[%0d]",i);
    `endif
    CFG_LDB_CQ_TIMER_THRESHOLD[i] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_THRESHOLD_reg::type_id::create($psprintf("CFG_LDB_CQ_TIMER_THRESHOLD[%0d]",i), this);
    CFG_LDB_CQ_TIMER_THRESHOLD[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0F80000 + (i *4096)), 32, 32'b00000000000000000000000000000001);
    CFG_LDB_CQ_TIMER_THRESHOLD[i].set_space_addr("MSG",  (28'h0F80000 + (i*4096)) );
    CFG_LDB_CQ_TIMER_THRESHOLD[i].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_TIMER_THRESHOLD[i].set_space_addr("MEM-SB", (24'hF80000 + (i*4096)) );
    CFG_LDB_CQ_TIMER_THRESHOLD[i].set_space_addr("MEM",  (28'h0F80000 + (i*4096)) );
      CFG_LDB_CQ_TIMER_THRESHOLD[i].set_space("MEM");
      CFG_LDB_CQ_TIMER_THRESHOLD[i].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_TIMER_THRESHOLD[i].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_TIMER_THRESHOLD[i].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_TIMER_THRESHOLD[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_TIMER_THRESHOLD[i].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_TIMER_THRESHOLD[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_TIMER_THRESHOLD[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_LDB_CQ_TIMER_THRESHOLD[%0d]:dont_test",i)) ) CFG_LDB_CQ_TIMER_THRESHOLD[i].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_TIMER_THRESHOLD[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_LDB_CQ_TIMER_THRESHOLD[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_LDB_CQ_TOKEN_DEPTH_SELECT[%0d]",i);
    `endif
    CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TOKEN_DEPTH_SELECT_reg::type_id::create($psprintf("CFG_LDB_CQ_TOKEN_DEPTH_SELECT[%0d]",i), this);
    CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1000000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_space_addr("MSG",  (28'h1000000 + (i*4096)) );
    CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_space_addr("MEM-SB", (28'h1000000 + (i*4096)) );
    CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_space_addr("MEM",  (28'h1000000 + (i*4096)) );
      CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_space("MEM");
      CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_LDB_CQ_TOKEN_DEPTH_SELECT[%0d]:dont_test",i)) ) CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_TOKEN_DEPTH_SELECT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_LDB_CQ_TOKEN_DEPTH_SELECT[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[0]";
    `endif
    CFG_LDB_CQ_WD_ENB[0] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[0]", this);
    CFG_LDB_CQ_WD_ENB[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h1080000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[0].set_space_addr("MSG", 28'h1080000);
    CFG_LDB_CQ_WD_ENB[0].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[0].set_space_addr("MEM-SB",28'h1080000);
    CFG_LDB_CQ_WD_ENB[0].set_space_addr("MEM", 28'h1080000);
      CFG_LDB_CQ_WD_ENB[0].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[0].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[0].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[0].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[0].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[0].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[0].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[0].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[0]:dont_test") ) CFG_LDB_CQ_WD_ENB[0].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[0] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[0]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[1]";
    `endif
    CFG_LDB_CQ_WD_ENB[1] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[1]", this);
    CFG_LDB_CQ_WD_ENB[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h1081000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[1].set_space_addr("MSG", 28'h1081000);
    CFG_LDB_CQ_WD_ENB[1].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[1].set_space_addr("MEM-SB",28'h1081000);
    CFG_LDB_CQ_WD_ENB[1].set_space_addr("MEM", 28'h1081000);
      CFG_LDB_CQ_WD_ENB[1].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[1].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[1].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[1].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[1].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[1].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[1].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[1].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[1]:dont_test") ) CFG_LDB_CQ_WD_ENB[1].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[1] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[1]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[2]";
    `endif
    CFG_LDB_CQ_WD_ENB[2] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[2]", this);
    CFG_LDB_CQ_WD_ENB[2].set_cfg(16'h0, 16'h0, 16'h0, 28'h1082000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[2].set_space_addr("MSG", 28'h1082000);
    CFG_LDB_CQ_WD_ENB[2].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[2].set_space_addr("MEM-SB",28'h1082000);
    CFG_LDB_CQ_WD_ENB[2].set_space_addr("MEM", 28'h1082000);
      CFG_LDB_CQ_WD_ENB[2].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[2].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[2].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[2].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[2].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[2].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[2].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[2].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[2].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[2]:dont_test") ) CFG_LDB_CQ_WD_ENB[2].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[2] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[2]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[3]";
    `endif
    CFG_LDB_CQ_WD_ENB[3] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[3]", this);
    CFG_LDB_CQ_WD_ENB[3].set_cfg(16'h0, 16'h0, 16'h0, 28'h1083000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[3].set_space_addr("MSG", 28'h1083000);
    CFG_LDB_CQ_WD_ENB[3].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[3].set_space_addr("MEM-SB",28'h1083000);
    CFG_LDB_CQ_WD_ENB[3].set_space_addr("MEM", 28'h1083000);
      CFG_LDB_CQ_WD_ENB[3].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[3].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[3].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[3].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[3].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[3].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[3].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[3].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[3].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[3]:dont_test") ) CFG_LDB_CQ_WD_ENB[3].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[3] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[3]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[4]";
    `endif
    CFG_LDB_CQ_WD_ENB[4] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[4]", this);
    CFG_LDB_CQ_WD_ENB[4].set_cfg(16'h0, 16'h0, 16'h0, 28'h1084000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[4].set_space_addr("MSG", 28'h1084000);
    CFG_LDB_CQ_WD_ENB[4].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[4].set_space_addr("MEM-SB",28'h1084000);
    CFG_LDB_CQ_WD_ENB[4].set_space_addr("MEM", 28'h1084000);
      CFG_LDB_CQ_WD_ENB[4].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[4].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[4].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[4].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[4].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[4].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[4].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[4].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[4].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[4]:dont_test") ) CFG_LDB_CQ_WD_ENB[4].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[4] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[4]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[5]";
    `endif
    CFG_LDB_CQ_WD_ENB[5] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[5]", this);
    CFG_LDB_CQ_WD_ENB[5].set_cfg(16'h0, 16'h0, 16'h0, 28'h1085000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[5].set_space_addr("MSG", 28'h1085000);
    CFG_LDB_CQ_WD_ENB[5].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[5].set_space_addr("MEM-SB",28'h1085000);
    CFG_LDB_CQ_WD_ENB[5].set_space_addr("MEM", 28'h1085000);
      CFG_LDB_CQ_WD_ENB[5].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[5].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[5].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[5].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[5].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[5].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[5].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[5].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[5].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[5]:dont_test") ) CFG_LDB_CQ_WD_ENB[5].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[5] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[5]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[6]";
    `endif
    CFG_LDB_CQ_WD_ENB[6] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[6]", this);
    CFG_LDB_CQ_WD_ENB[6].set_cfg(16'h0, 16'h0, 16'h0, 28'h1086000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[6].set_space_addr("MSG", 28'h1086000);
    CFG_LDB_CQ_WD_ENB[6].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[6].set_space_addr("MEM-SB",28'h1086000);
    CFG_LDB_CQ_WD_ENB[6].set_space_addr("MEM", 28'h1086000);
      CFG_LDB_CQ_WD_ENB[6].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[6].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[6].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[6].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[6].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[6].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[6].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[6].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[6].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[6]:dont_test") ) CFG_LDB_CQ_WD_ENB[6].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[6] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[6]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[7]";
    `endif
    CFG_LDB_CQ_WD_ENB[7] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[7]", this);
    CFG_LDB_CQ_WD_ENB[7].set_cfg(16'h0, 16'h0, 16'h0, 28'h1087000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[7].set_space_addr("MSG", 28'h1087000);
    CFG_LDB_CQ_WD_ENB[7].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[7].set_space_addr("MEM-SB",28'h1087000);
    CFG_LDB_CQ_WD_ENB[7].set_space_addr("MEM", 28'h1087000);
      CFG_LDB_CQ_WD_ENB[7].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[7].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[7].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[7].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[7].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[7].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[7].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[7].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[7].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[7]:dont_test") ) CFG_LDB_CQ_WD_ENB[7].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[7] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[7]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[8]";
    `endif
    CFG_LDB_CQ_WD_ENB[8] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[8]", this);
    CFG_LDB_CQ_WD_ENB[8].set_cfg(16'h0, 16'h0, 16'h0, 28'h1088000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[8].set_space_addr("MSG", 28'h1088000);
    CFG_LDB_CQ_WD_ENB[8].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[8].set_space_addr("MEM-SB",28'h1088000);
    CFG_LDB_CQ_WD_ENB[8].set_space_addr("MEM", 28'h1088000);
      CFG_LDB_CQ_WD_ENB[8].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[8].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[8].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[8].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[8].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[8].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[8].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[8].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[8].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[8]:dont_test") ) CFG_LDB_CQ_WD_ENB[8].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[8] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[8]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[9]";
    `endif
    CFG_LDB_CQ_WD_ENB[9] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[9]", this);
    CFG_LDB_CQ_WD_ENB[9].set_cfg(16'h0, 16'h0, 16'h0, 28'h1089000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[9].set_space_addr("MSG", 28'h1089000);
    CFG_LDB_CQ_WD_ENB[9].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[9].set_space_addr("MEM-SB",28'h1089000);
    CFG_LDB_CQ_WD_ENB[9].set_space_addr("MEM", 28'h1089000);
      CFG_LDB_CQ_WD_ENB[9].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[9].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[9].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[9].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[9].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[9].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[9].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[9].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[9].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[9]:dont_test") ) CFG_LDB_CQ_WD_ENB[9].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[9] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[9]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[10]";
    `endif
    CFG_LDB_CQ_WD_ENB[10] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[10]", this);
    CFG_LDB_CQ_WD_ENB[10].set_cfg(16'h0, 16'h0, 16'h0, 28'h108A000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[10].set_space_addr("MSG", 28'h108A000);
    CFG_LDB_CQ_WD_ENB[10].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[10].set_space_addr("MEM-SB",28'h108A000);
    CFG_LDB_CQ_WD_ENB[10].set_space_addr("MEM", 28'h108A000);
      CFG_LDB_CQ_WD_ENB[10].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[10].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[10].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[10].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[10].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[10].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[10].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[10].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[10].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[10]:dont_test") ) CFG_LDB_CQ_WD_ENB[10].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[10] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[10]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[11]";
    `endif
    CFG_LDB_CQ_WD_ENB[11] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[11]", this);
    CFG_LDB_CQ_WD_ENB[11].set_cfg(16'h0, 16'h0, 16'h0, 28'h108B000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[11].set_space_addr("MSG", 28'h108B000);
    CFG_LDB_CQ_WD_ENB[11].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[11].set_space_addr("MEM-SB",28'h108B000);
    CFG_LDB_CQ_WD_ENB[11].set_space_addr("MEM", 28'h108B000);
      CFG_LDB_CQ_WD_ENB[11].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[11].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[11].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[11].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[11].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[11].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[11].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[11].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[11].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[11]:dont_test") ) CFG_LDB_CQ_WD_ENB[11].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[11] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[11]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[12]";
    `endif
    CFG_LDB_CQ_WD_ENB[12] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[12]", this);
    CFG_LDB_CQ_WD_ENB[12].set_cfg(16'h0, 16'h0, 16'h0, 28'h108C000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[12].set_space_addr("MSG", 28'h108C000);
    CFG_LDB_CQ_WD_ENB[12].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[12].set_space_addr("MEM-SB",28'h108C000);
    CFG_LDB_CQ_WD_ENB[12].set_space_addr("MEM", 28'h108C000);
      CFG_LDB_CQ_WD_ENB[12].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[12].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[12].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[12].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[12].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[12].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[12].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[12].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[12].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[12]:dont_test") ) CFG_LDB_CQ_WD_ENB[12].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[12] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[12]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[13]";
    `endif
    CFG_LDB_CQ_WD_ENB[13] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[13]", this);
    CFG_LDB_CQ_WD_ENB[13].set_cfg(16'h0, 16'h0, 16'h0, 28'h108D000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[13].set_space_addr("MSG", 28'h108D000);
    CFG_LDB_CQ_WD_ENB[13].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[13].set_space_addr("MEM-SB",28'h108D000);
    CFG_LDB_CQ_WD_ENB[13].set_space_addr("MEM", 28'h108D000);
      CFG_LDB_CQ_WD_ENB[13].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[13].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[13].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[13].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[13].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[13].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[13].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[13].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[13].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[13]:dont_test") ) CFG_LDB_CQ_WD_ENB[13].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[13] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[13]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[14]";
    `endif
    CFG_LDB_CQ_WD_ENB[14] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[14]", this);
    CFG_LDB_CQ_WD_ENB[14].set_cfg(16'h0, 16'h0, 16'h0, 28'h108E000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[14].set_space_addr("MSG", 28'h108E000);
    CFG_LDB_CQ_WD_ENB[14].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[14].set_space_addr("MEM-SB",28'h108E000);
    CFG_LDB_CQ_WD_ENB[14].set_space_addr("MEM", 28'h108E000);
      CFG_LDB_CQ_WD_ENB[14].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[14].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[14].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[14].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[14].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[14].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[14].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[14].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[14].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[14]:dont_test") ) CFG_LDB_CQ_WD_ENB[14].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[14] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[14]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[15]";
    `endif
    CFG_LDB_CQ_WD_ENB[15] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[15]", this);
    CFG_LDB_CQ_WD_ENB[15].set_cfg(16'h0, 16'h0, 16'h0, 28'h108F000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[15].set_space_addr("MSG", 28'h108F000);
    CFG_LDB_CQ_WD_ENB[15].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[15].set_space_addr("MEM-SB",28'h108F000);
    CFG_LDB_CQ_WD_ENB[15].set_space_addr("MEM", 28'h108F000);
      CFG_LDB_CQ_WD_ENB[15].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[15].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[15].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[15].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[15].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[15].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[15].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[15].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[15].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[15]:dont_test") ) CFG_LDB_CQ_WD_ENB[15].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[15] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[15]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[16]";
    `endif
    CFG_LDB_CQ_WD_ENB[16] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[16]", this);
    CFG_LDB_CQ_WD_ENB[16].set_cfg(16'h0, 16'h0, 16'h0, 28'h1090000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[16].set_space_addr("MSG", 28'h1090000);
    CFG_LDB_CQ_WD_ENB[16].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[16].set_space_addr("MEM-SB",28'h1090000);
    CFG_LDB_CQ_WD_ENB[16].set_space_addr("MEM", 28'h1090000);
      CFG_LDB_CQ_WD_ENB[16].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[16].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[16].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[16].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[16].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[16].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[16].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[16].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[16].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[16]:dont_test") ) CFG_LDB_CQ_WD_ENB[16].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[16] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[16]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[17]";
    `endif
    CFG_LDB_CQ_WD_ENB[17] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[17]", this);
    CFG_LDB_CQ_WD_ENB[17].set_cfg(16'h0, 16'h0, 16'h0, 28'h1091000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[17].set_space_addr("MSG", 28'h1091000);
    CFG_LDB_CQ_WD_ENB[17].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[17].set_space_addr("MEM-SB",28'h1091000);
    CFG_LDB_CQ_WD_ENB[17].set_space_addr("MEM", 28'h1091000);
      CFG_LDB_CQ_WD_ENB[17].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[17].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[17].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[17].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[17].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[17].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[17].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[17].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[17].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[17]:dont_test") ) CFG_LDB_CQ_WD_ENB[17].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[17] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[17]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[18]";
    `endif
    CFG_LDB_CQ_WD_ENB[18] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[18]", this);
    CFG_LDB_CQ_WD_ENB[18].set_cfg(16'h0, 16'h0, 16'h0, 28'h1092000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[18].set_space_addr("MSG", 28'h1092000);
    CFG_LDB_CQ_WD_ENB[18].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[18].set_space_addr("MEM-SB",28'h1092000);
    CFG_LDB_CQ_WD_ENB[18].set_space_addr("MEM", 28'h1092000);
      CFG_LDB_CQ_WD_ENB[18].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[18].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[18].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[18].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[18].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[18].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[18].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[18].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[18].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[18]:dont_test") ) CFG_LDB_CQ_WD_ENB[18].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[18] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[18]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[19]";
    `endif
    CFG_LDB_CQ_WD_ENB[19] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[19]", this);
    CFG_LDB_CQ_WD_ENB[19].set_cfg(16'h0, 16'h0, 16'h0, 28'h1093000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[19].set_space_addr("MSG", 28'h1093000);
    CFG_LDB_CQ_WD_ENB[19].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[19].set_space_addr("MEM-SB",28'h1093000);
    CFG_LDB_CQ_WD_ENB[19].set_space_addr("MEM", 28'h1093000);
      CFG_LDB_CQ_WD_ENB[19].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[19].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[19].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[19].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[19].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[19].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[19].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[19].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[19].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[19]:dont_test") ) CFG_LDB_CQ_WD_ENB[19].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[19] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[19]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[20]";
    `endif
    CFG_LDB_CQ_WD_ENB[20] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[20]", this);
    CFG_LDB_CQ_WD_ENB[20].set_cfg(16'h0, 16'h0, 16'h0, 28'h1094000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[20].set_space_addr("MSG", 28'h1094000);
    CFG_LDB_CQ_WD_ENB[20].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[20].set_space_addr("MEM-SB",28'h1094000);
    CFG_LDB_CQ_WD_ENB[20].set_space_addr("MEM", 28'h1094000);
      CFG_LDB_CQ_WD_ENB[20].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[20].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[20].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[20].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[20].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[20].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[20].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[20].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[20].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[20]:dont_test") ) CFG_LDB_CQ_WD_ENB[20].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[20] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[20]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[21]";
    `endif
    CFG_LDB_CQ_WD_ENB[21] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[21]", this);
    CFG_LDB_CQ_WD_ENB[21].set_cfg(16'h0, 16'h0, 16'h0, 28'h1095000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[21].set_space_addr("MSG", 28'h1095000);
    CFG_LDB_CQ_WD_ENB[21].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[21].set_space_addr("MEM-SB",28'h1095000);
    CFG_LDB_CQ_WD_ENB[21].set_space_addr("MEM", 28'h1095000);
      CFG_LDB_CQ_WD_ENB[21].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[21].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[21].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[21].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[21].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[21].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[21].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[21].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[21].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[21]:dont_test") ) CFG_LDB_CQ_WD_ENB[21].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[21] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[21]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[22]";
    `endif
    CFG_LDB_CQ_WD_ENB[22] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[22]", this);
    CFG_LDB_CQ_WD_ENB[22].set_cfg(16'h0, 16'h0, 16'h0, 28'h1096000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[22].set_space_addr("MSG", 28'h1096000);
    CFG_LDB_CQ_WD_ENB[22].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[22].set_space_addr("MEM-SB",28'h1096000);
    CFG_LDB_CQ_WD_ENB[22].set_space_addr("MEM", 28'h1096000);
      CFG_LDB_CQ_WD_ENB[22].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[22].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[22].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[22].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[22].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[22].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[22].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[22].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[22].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[22]:dont_test") ) CFG_LDB_CQ_WD_ENB[22].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[22] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[22]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[23]";
    `endif
    CFG_LDB_CQ_WD_ENB[23] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[23]", this);
    CFG_LDB_CQ_WD_ENB[23].set_cfg(16'h0, 16'h0, 16'h0, 28'h1097000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[23].set_space_addr("MSG", 28'h1097000);
    CFG_LDB_CQ_WD_ENB[23].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[23].set_space_addr("MEM-SB",28'h1097000);
    CFG_LDB_CQ_WD_ENB[23].set_space_addr("MEM", 28'h1097000);
      CFG_LDB_CQ_WD_ENB[23].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[23].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[23].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[23].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[23].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[23].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[23].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[23].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[23].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[23]:dont_test") ) CFG_LDB_CQ_WD_ENB[23].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[23] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[23]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[24]";
    `endif
    CFG_LDB_CQ_WD_ENB[24] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[24]", this);
    CFG_LDB_CQ_WD_ENB[24].set_cfg(16'h0, 16'h0, 16'h0, 28'h1098000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[24].set_space_addr("MSG", 28'h1098000);
    CFG_LDB_CQ_WD_ENB[24].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[24].set_space_addr("MEM-SB",28'h1098000);
    CFG_LDB_CQ_WD_ENB[24].set_space_addr("MEM", 28'h1098000);
      CFG_LDB_CQ_WD_ENB[24].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[24].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[24].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[24].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[24].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[24].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[24].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[24].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[24].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[24]:dont_test") ) CFG_LDB_CQ_WD_ENB[24].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[24] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[24]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[25]";
    `endif
    CFG_LDB_CQ_WD_ENB[25] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[25]", this);
    CFG_LDB_CQ_WD_ENB[25].set_cfg(16'h0, 16'h0, 16'h0, 28'h1099000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[25].set_space_addr("MSG", 28'h1099000);
    CFG_LDB_CQ_WD_ENB[25].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[25].set_space_addr("MEM-SB",28'h1099000);
    CFG_LDB_CQ_WD_ENB[25].set_space_addr("MEM", 28'h1099000);
      CFG_LDB_CQ_WD_ENB[25].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[25].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[25].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[25].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[25].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[25].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[25].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[25].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[25].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[25]:dont_test") ) CFG_LDB_CQ_WD_ENB[25].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[25] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[25]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[26]";
    `endif
    CFG_LDB_CQ_WD_ENB[26] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[26]", this);
    CFG_LDB_CQ_WD_ENB[26].set_cfg(16'h0, 16'h0, 16'h0, 28'h109A000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[26].set_space_addr("MSG", 28'h109A000);
    CFG_LDB_CQ_WD_ENB[26].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[26].set_space_addr("MEM-SB",28'h109A000);
    CFG_LDB_CQ_WD_ENB[26].set_space_addr("MEM", 28'h109A000);
      CFG_LDB_CQ_WD_ENB[26].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[26].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[26].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[26].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[26].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[26].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[26].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[26].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[26].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[26]:dont_test") ) CFG_LDB_CQ_WD_ENB[26].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[26] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[26]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[27]";
    `endif
    CFG_LDB_CQ_WD_ENB[27] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[27]", this);
    CFG_LDB_CQ_WD_ENB[27].set_cfg(16'h0, 16'h0, 16'h0, 28'h109B000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[27].set_space_addr("MSG", 28'h109B000);
    CFG_LDB_CQ_WD_ENB[27].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[27].set_space_addr("MEM-SB",28'h109B000);
    CFG_LDB_CQ_WD_ENB[27].set_space_addr("MEM", 28'h109B000);
      CFG_LDB_CQ_WD_ENB[27].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[27].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[27].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[27].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[27].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[27].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[27].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[27].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[27].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[27]:dont_test") ) CFG_LDB_CQ_WD_ENB[27].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[27] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[27]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[28]";
    `endif
    CFG_LDB_CQ_WD_ENB[28] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[28]", this);
    CFG_LDB_CQ_WD_ENB[28].set_cfg(16'h0, 16'h0, 16'h0, 28'h109C000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[28].set_space_addr("MSG", 28'h109C000);
    CFG_LDB_CQ_WD_ENB[28].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[28].set_space_addr("MEM-SB",28'h109C000);
    CFG_LDB_CQ_WD_ENB[28].set_space_addr("MEM", 28'h109C000);
      CFG_LDB_CQ_WD_ENB[28].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[28].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[28].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[28].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[28].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[28].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[28].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[28].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[28].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[28]:dont_test") ) CFG_LDB_CQ_WD_ENB[28].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[28] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[28]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[29]";
    `endif
    CFG_LDB_CQ_WD_ENB[29] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[29]", this);
    CFG_LDB_CQ_WD_ENB[29].set_cfg(16'h0, 16'h0, 16'h0, 28'h109D000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[29].set_space_addr("MSG", 28'h109D000);
    CFG_LDB_CQ_WD_ENB[29].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[29].set_space_addr("MEM-SB",28'h109D000);
    CFG_LDB_CQ_WD_ENB[29].set_space_addr("MEM", 28'h109D000);
      CFG_LDB_CQ_WD_ENB[29].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[29].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[29].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[29].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[29].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[29].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[29].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[29].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[29].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[29]:dont_test") ) CFG_LDB_CQ_WD_ENB[29].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[29] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[29]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[30]";
    `endif
    CFG_LDB_CQ_WD_ENB[30] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[30]", this);
    CFG_LDB_CQ_WD_ENB[30].set_cfg(16'h0, 16'h0, 16'h0, 28'h109E000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[30].set_space_addr("MSG", 28'h109E000);
    CFG_LDB_CQ_WD_ENB[30].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[30].set_space_addr("MEM-SB",28'h109E000);
    CFG_LDB_CQ_WD_ENB[30].set_space_addr("MEM", 28'h109E000);
      CFG_LDB_CQ_WD_ENB[30].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[30].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[30].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[30].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[30].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[30].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[30].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[30].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[30].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[30]:dont_test") ) CFG_LDB_CQ_WD_ENB[30].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[30] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[30]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[31]";
    `endif
    CFG_LDB_CQ_WD_ENB[31] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[31]", this);
    CFG_LDB_CQ_WD_ENB[31].set_cfg(16'h0, 16'h0, 16'h0, 28'h109F000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[31].set_space_addr("MSG", 28'h109F000);
    CFG_LDB_CQ_WD_ENB[31].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[31].set_space_addr("MEM-SB",28'h109F000);
    CFG_LDB_CQ_WD_ENB[31].set_space_addr("MEM", 28'h109F000);
      CFG_LDB_CQ_WD_ENB[31].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[31].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[31].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[31].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[31].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[31].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[31].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[31].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[31].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[31]:dont_test") ) CFG_LDB_CQ_WD_ENB[31].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[31] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[31]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[32]";
    `endif
    CFG_LDB_CQ_WD_ENB[32] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[32]", this);
    CFG_LDB_CQ_WD_ENB[32].set_cfg(16'h0, 16'h0, 16'h0, 28'h10A0000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[32].set_space_addr("MSG", 28'h10A0000);
    CFG_LDB_CQ_WD_ENB[32].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[32].set_space_addr("MEM-SB",28'h10A0000);
    CFG_LDB_CQ_WD_ENB[32].set_space_addr("MEM", 28'h10A0000);
      CFG_LDB_CQ_WD_ENB[32].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[32].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[32].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[32].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[32].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[32].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[32].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[32].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[32].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[32]:dont_test") ) CFG_LDB_CQ_WD_ENB[32].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[32] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[32]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[33]";
    `endif
    CFG_LDB_CQ_WD_ENB[33] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[33]", this);
    CFG_LDB_CQ_WD_ENB[33].set_cfg(16'h0, 16'h0, 16'h0, 28'h10A1000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[33].set_space_addr("MSG", 28'h10A1000);
    CFG_LDB_CQ_WD_ENB[33].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[33].set_space_addr("MEM-SB",28'h10A1000);
    CFG_LDB_CQ_WD_ENB[33].set_space_addr("MEM", 28'h10A1000);
      CFG_LDB_CQ_WD_ENB[33].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[33].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[33].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[33].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[33].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[33].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[33].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[33].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[33].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[33]:dont_test") ) CFG_LDB_CQ_WD_ENB[33].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[33] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[33]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[34]";
    `endif
    CFG_LDB_CQ_WD_ENB[34] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[34]", this);
    CFG_LDB_CQ_WD_ENB[34].set_cfg(16'h0, 16'h0, 16'h0, 28'h10A2000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[34].set_space_addr("MSG", 28'h10A2000);
    CFG_LDB_CQ_WD_ENB[34].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[34].set_space_addr("MEM-SB",28'h10A2000);
    CFG_LDB_CQ_WD_ENB[34].set_space_addr("MEM", 28'h10A2000);
      CFG_LDB_CQ_WD_ENB[34].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[34].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[34].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[34].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[34].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[34].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[34].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[34].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[34].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[34]:dont_test") ) CFG_LDB_CQ_WD_ENB[34].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[34] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[34]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[35]";
    `endif
    CFG_LDB_CQ_WD_ENB[35] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[35]", this);
    CFG_LDB_CQ_WD_ENB[35].set_cfg(16'h0, 16'h0, 16'h0, 28'h10A3000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[35].set_space_addr("MSG", 28'h10A3000);
    CFG_LDB_CQ_WD_ENB[35].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[35].set_space_addr("MEM-SB",28'h10A3000);
    CFG_LDB_CQ_WD_ENB[35].set_space_addr("MEM", 28'h10A3000);
      CFG_LDB_CQ_WD_ENB[35].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[35].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[35].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[35].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[35].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[35].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[35].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[35].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[35].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[35]:dont_test") ) CFG_LDB_CQ_WD_ENB[35].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[35] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[35]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[36]";
    `endif
    CFG_LDB_CQ_WD_ENB[36] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[36]", this);
    CFG_LDB_CQ_WD_ENB[36].set_cfg(16'h0, 16'h0, 16'h0, 28'h10A4000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[36].set_space_addr("MSG", 28'h10A4000);
    CFG_LDB_CQ_WD_ENB[36].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[36].set_space_addr("MEM-SB",28'h10A4000);
    CFG_LDB_CQ_WD_ENB[36].set_space_addr("MEM", 28'h10A4000);
      CFG_LDB_CQ_WD_ENB[36].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[36].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[36].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[36].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[36].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[36].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[36].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[36].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[36].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[36]:dont_test") ) CFG_LDB_CQ_WD_ENB[36].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[36] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[36]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[37]";
    `endif
    CFG_LDB_CQ_WD_ENB[37] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[37]", this);
    CFG_LDB_CQ_WD_ENB[37].set_cfg(16'h0, 16'h0, 16'h0, 28'h10A5000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[37].set_space_addr("MSG", 28'h10A5000);
    CFG_LDB_CQ_WD_ENB[37].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[37].set_space_addr("MEM-SB",28'h10A5000);
    CFG_LDB_CQ_WD_ENB[37].set_space_addr("MEM", 28'h10A5000);
      CFG_LDB_CQ_WD_ENB[37].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[37].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[37].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[37].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[37].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[37].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[37].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[37].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[37].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[37]:dont_test") ) CFG_LDB_CQ_WD_ENB[37].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[37] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[37]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[38]";
    `endif
    CFG_LDB_CQ_WD_ENB[38] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[38]", this);
    CFG_LDB_CQ_WD_ENB[38].set_cfg(16'h0, 16'h0, 16'h0, 28'h10A6000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[38].set_space_addr("MSG", 28'h10A6000);
    CFG_LDB_CQ_WD_ENB[38].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[38].set_space_addr("MEM-SB",28'h10A6000);
    CFG_LDB_CQ_WD_ENB[38].set_space_addr("MEM", 28'h10A6000);
      CFG_LDB_CQ_WD_ENB[38].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[38].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[38].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[38].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[38].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[38].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[38].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[38].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[38].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[38]:dont_test") ) CFG_LDB_CQ_WD_ENB[38].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[38] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[38]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[39]";
    `endif
    CFG_LDB_CQ_WD_ENB[39] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[39]", this);
    CFG_LDB_CQ_WD_ENB[39].set_cfg(16'h0, 16'h0, 16'h0, 28'h10A7000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[39].set_space_addr("MSG", 28'h10A7000);
    CFG_LDB_CQ_WD_ENB[39].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[39].set_space_addr("MEM-SB",28'h10A7000);
    CFG_LDB_CQ_WD_ENB[39].set_space_addr("MEM", 28'h10A7000);
      CFG_LDB_CQ_WD_ENB[39].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[39].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[39].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[39].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[39].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[39].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[39].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[39].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[39].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[39]:dont_test") ) CFG_LDB_CQ_WD_ENB[39].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[39] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[39]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[40]";
    `endif
    CFG_LDB_CQ_WD_ENB[40] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[40]", this);
    CFG_LDB_CQ_WD_ENB[40].set_cfg(16'h0, 16'h0, 16'h0, 28'h10A8000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[40].set_space_addr("MSG", 28'h10A8000);
    CFG_LDB_CQ_WD_ENB[40].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[40].set_space_addr("MEM-SB",28'h10A8000);
    CFG_LDB_CQ_WD_ENB[40].set_space_addr("MEM", 28'h10A8000);
      CFG_LDB_CQ_WD_ENB[40].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[40].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[40].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[40].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[40].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[40].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[40].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[40].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[40].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[40]:dont_test") ) CFG_LDB_CQ_WD_ENB[40].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[40] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[40]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[41]";
    `endif
    CFG_LDB_CQ_WD_ENB[41] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[41]", this);
    CFG_LDB_CQ_WD_ENB[41].set_cfg(16'h0, 16'h0, 16'h0, 28'h10A9000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[41].set_space_addr("MSG", 28'h10A9000);
    CFG_LDB_CQ_WD_ENB[41].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[41].set_space_addr("MEM-SB",28'h10A9000);
    CFG_LDB_CQ_WD_ENB[41].set_space_addr("MEM", 28'h10A9000);
      CFG_LDB_CQ_WD_ENB[41].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[41].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[41].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[41].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[41].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[41].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[41].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[41].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[41].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[41]:dont_test") ) CFG_LDB_CQ_WD_ENB[41].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[41] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[41]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[42]";
    `endif
    CFG_LDB_CQ_WD_ENB[42] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[42]", this);
    CFG_LDB_CQ_WD_ENB[42].set_cfg(16'h0, 16'h0, 16'h0, 28'h10AA000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[42].set_space_addr("MSG", 28'h10AA000);
    CFG_LDB_CQ_WD_ENB[42].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[42].set_space_addr("MEM-SB",28'h10AA000);
    CFG_LDB_CQ_WD_ENB[42].set_space_addr("MEM", 28'h10AA000);
      CFG_LDB_CQ_WD_ENB[42].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[42].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[42].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[42].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[42].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[42].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[42].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[42].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[42].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[42]:dont_test") ) CFG_LDB_CQ_WD_ENB[42].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[42] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[42]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[43]";
    `endif
    CFG_LDB_CQ_WD_ENB[43] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[43]", this);
    CFG_LDB_CQ_WD_ENB[43].set_cfg(16'h0, 16'h0, 16'h0, 28'h10AB000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[43].set_space_addr("MSG", 28'h10AB000);
    CFG_LDB_CQ_WD_ENB[43].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[43].set_space_addr("MEM-SB",28'h10AB000);
    CFG_LDB_CQ_WD_ENB[43].set_space_addr("MEM", 28'h10AB000);
      CFG_LDB_CQ_WD_ENB[43].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[43].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[43].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[43].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[43].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[43].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[43].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[43].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[43].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[43]:dont_test") ) CFG_LDB_CQ_WD_ENB[43].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[43] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[43]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[44]";
    `endif
    CFG_LDB_CQ_WD_ENB[44] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[44]", this);
    CFG_LDB_CQ_WD_ENB[44].set_cfg(16'h0, 16'h0, 16'h0, 28'h10AC000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[44].set_space_addr("MSG", 28'h10AC000);
    CFG_LDB_CQ_WD_ENB[44].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[44].set_space_addr("MEM-SB",28'h10AC000);
    CFG_LDB_CQ_WD_ENB[44].set_space_addr("MEM", 28'h10AC000);
      CFG_LDB_CQ_WD_ENB[44].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[44].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[44].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[44].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[44].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[44].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[44].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[44].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[44].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[44]:dont_test") ) CFG_LDB_CQ_WD_ENB[44].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[44] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[44]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[45]";
    `endif
    CFG_LDB_CQ_WD_ENB[45] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[45]", this);
    CFG_LDB_CQ_WD_ENB[45].set_cfg(16'h0, 16'h0, 16'h0, 28'h10AD000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[45].set_space_addr("MSG", 28'h10AD000);
    CFG_LDB_CQ_WD_ENB[45].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[45].set_space_addr("MEM-SB",28'h10AD000);
    CFG_LDB_CQ_WD_ENB[45].set_space_addr("MEM", 28'h10AD000);
      CFG_LDB_CQ_WD_ENB[45].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[45].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[45].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[45].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[45].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[45].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[45].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[45].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[45].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[45]:dont_test") ) CFG_LDB_CQ_WD_ENB[45].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[45] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[45]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[46]";
    `endif
    CFG_LDB_CQ_WD_ENB[46] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[46]", this);
    CFG_LDB_CQ_WD_ENB[46].set_cfg(16'h0, 16'h0, 16'h0, 28'h10AE000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[46].set_space_addr("MSG", 28'h10AE000);
    CFG_LDB_CQ_WD_ENB[46].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[46].set_space_addr("MEM-SB",28'h10AE000);
    CFG_LDB_CQ_WD_ENB[46].set_space_addr("MEM", 28'h10AE000);
      CFG_LDB_CQ_WD_ENB[46].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[46].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[46].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[46].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[46].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[46].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[46].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[46].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[46].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[46]:dont_test") ) CFG_LDB_CQ_WD_ENB[46].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[46] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[46]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[47]";
    `endif
    CFG_LDB_CQ_WD_ENB[47] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[47]", this);
    CFG_LDB_CQ_WD_ENB[47].set_cfg(16'h0, 16'h0, 16'h0, 28'h10AF000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[47].set_space_addr("MSG", 28'h10AF000);
    CFG_LDB_CQ_WD_ENB[47].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[47].set_space_addr("MEM-SB",28'h10AF000);
    CFG_LDB_CQ_WD_ENB[47].set_space_addr("MEM", 28'h10AF000);
      CFG_LDB_CQ_WD_ENB[47].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[47].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[47].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[47].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[47].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[47].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[47].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[47].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[47].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[47]:dont_test") ) CFG_LDB_CQ_WD_ENB[47].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[47] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[47]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[48]";
    `endif
    CFG_LDB_CQ_WD_ENB[48] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[48]", this);
    CFG_LDB_CQ_WD_ENB[48].set_cfg(16'h0, 16'h0, 16'h0, 28'h10B0000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[48].set_space_addr("MSG", 28'h10B0000);
    CFG_LDB_CQ_WD_ENB[48].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[48].set_space_addr("MEM-SB",28'h10B0000);
    CFG_LDB_CQ_WD_ENB[48].set_space_addr("MEM", 28'h10B0000);
      CFG_LDB_CQ_WD_ENB[48].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[48].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[48].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[48].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[48].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[48].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[48].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[48].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[48].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[48]:dont_test") ) CFG_LDB_CQ_WD_ENB[48].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[48] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[48]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[49]";
    `endif
    CFG_LDB_CQ_WD_ENB[49] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[49]", this);
    CFG_LDB_CQ_WD_ENB[49].set_cfg(16'h0, 16'h0, 16'h0, 28'h10B1000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[49].set_space_addr("MSG", 28'h10B1000);
    CFG_LDB_CQ_WD_ENB[49].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[49].set_space_addr("MEM-SB",28'h10B1000);
    CFG_LDB_CQ_WD_ENB[49].set_space_addr("MEM", 28'h10B1000);
      CFG_LDB_CQ_WD_ENB[49].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[49].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[49].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[49].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[49].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[49].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[49].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[49].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[49].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[49]:dont_test") ) CFG_LDB_CQ_WD_ENB[49].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[49] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[49]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[50]";
    `endif
    CFG_LDB_CQ_WD_ENB[50] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[50]", this);
    CFG_LDB_CQ_WD_ENB[50].set_cfg(16'h0, 16'h0, 16'h0, 28'h10B2000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[50].set_space_addr("MSG", 28'h10B2000);
    CFG_LDB_CQ_WD_ENB[50].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[50].set_space_addr("MEM-SB",28'h10B2000);
    CFG_LDB_CQ_WD_ENB[50].set_space_addr("MEM", 28'h10B2000);
      CFG_LDB_CQ_WD_ENB[50].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[50].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[50].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[50].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[50].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[50].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[50].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[50].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[50].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[50]:dont_test") ) CFG_LDB_CQ_WD_ENB[50].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[50] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[50]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[51]";
    `endif
    CFG_LDB_CQ_WD_ENB[51] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[51]", this);
    CFG_LDB_CQ_WD_ENB[51].set_cfg(16'h0, 16'h0, 16'h0, 28'h10B3000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[51].set_space_addr("MSG", 28'h10B3000);
    CFG_LDB_CQ_WD_ENB[51].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[51].set_space_addr("MEM-SB",28'h10B3000);
    CFG_LDB_CQ_WD_ENB[51].set_space_addr("MEM", 28'h10B3000);
      CFG_LDB_CQ_WD_ENB[51].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[51].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[51].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[51].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[51].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[51].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[51].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[51].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[51].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[51]:dont_test") ) CFG_LDB_CQ_WD_ENB[51].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[51] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[51]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[52]";
    `endif
    CFG_LDB_CQ_WD_ENB[52] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[52]", this);
    CFG_LDB_CQ_WD_ENB[52].set_cfg(16'h0, 16'h0, 16'h0, 28'h10B4000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[52].set_space_addr("MSG", 28'h10B4000);
    CFG_LDB_CQ_WD_ENB[52].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[52].set_space_addr("MEM-SB",28'h10B4000);
    CFG_LDB_CQ_WD_ENB[52].set_space_addr("MEM", 28'h10B4000);
      CFG_LDB_CQ_WD_ENB[52].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[52].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[52].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[52].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[52].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[52].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[52].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[52].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[52].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[52]:dont_test") ) CFG_LDB_CQ_WD_ENB[52].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[52] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[52]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[53]";
    `endif
    CFG_LDB_CQ_WD_ENB[53] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[53]", this);
    CFG_LDB_CQ_WD_ENB[53].set_cfg(16'h0, 16'h0, 16'h0, 28'h10B5000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[53].set_space_addr("MSG", 28'h10B5000);
    CFG_LDB_CQ_WD_ENB[53].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[53].set_space_addr("MEM-SB",28'h10B5000);
    CFG_LDB_CQ_WD_ENB[53].set_space_addr("MEM", 28'h10B5000);
      CFG_LDB_CQ_WD_ENB[53].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[53].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[53].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[53].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[53].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[53].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[53].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[53].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[53].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[53]:dont_test") ) CFG_LDB_CQ_WD_ENB[53].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[53] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[53]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[54]";
    `endif
    CFG_LDB_CQ_WD_ENB[54] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[54]", this);
    CFG_LDB_CQ_WD_ENB[54].set_cfg(16'h0, 16'h0, 16'h0, 28'h10B6000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[54].set_space_addr("MSG", 28'h10B6000);
    CFG_LDB_CQ_WD_ENB[54].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[54].set_space_addr("MEM-SB",28'h10B6000);
    CFG_LDB_CQ_WD_ENB[54].set_space_addr("MEM", 28'h10B6000);
      CFG_LDB_CQ_WD_ENB[54].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[54].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[54].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[54].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[54].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[54].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[54].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[54].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[54].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[54]:dont_test") ) CFG_LDB_CQ_WD_ENB[54].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[54] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[54]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[55]";
    `endif
    CFG_LDB_CQ_WD_ENB[55] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[55]", this);
    CFG_LDB_CQ_WD_ENB[55].set_cfg(16'h0, 16'h0, 16'h0, 28'h10B7000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[55].set_space_addr("MSG", 28'h10B7000);
    CFG_LDB_CQ_WD_ENB[55].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[55].set_space_addr("MEM-SB",28'h10B7000);
    CFG_LDB_CQ_WD_ENB[55].set_space_addr("MEM", 28'h10B7000);
      CFG_LDB_CQ_WD_ENB[55].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[55].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[55].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[55].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[55].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[55].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[55].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[55].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[55].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[55]:dont_test") ) CFG_LDB_CQ_WD_ENB[55].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[55] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[55]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[56]";
    `endif
    CFG_LDB_CQ_WD_ENB[56] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[56]", this);
    CFG_LDB_CQ_WD_ENB[56].set_cfg(16'h0, 16'h0, 16'h0, 28'h10B8000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[56].set_space_addr("MSG", 28'h10B8000);
    CFG_LDB_CQ_WD_ENB[56].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[56].set_space_addr("MEM-SB",28'h10B8000);
    CFG_LDB_CQ_WD_ENB[56].set_space_addr("MEM", 28'h10B8000);
      CFG_LDB_CQ_WD_ENB[56].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[56].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[56].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[56].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[56].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[56].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[56].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[56].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[56].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[56]:dont_test") ) CFG_LDB_CQ_WD_ENB[56].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[56] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[56]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[57]";
    `endif
    CFG_LDB_CQ_WD_ENB[57] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[57]", this);
    CFG_LDB_CQ_WD_ENB[57].set_cfg(16'h0, 16'h0, 16'h0, 28'h10B9000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[57].set_space_addr("MSG", 28'h10B9000);
    CFG_LDB_CQ_WD_ENB[57].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[57].set_space_addr("MEM-SB",28'h10B9000);
    CFG_LDB_CQ_WD_ENB[57].set_space_addr("MEM", 28'h10B9000);
      CFG_LDB_CQ_WD_ENB[57].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[57].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[57].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[57].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[57].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[57].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[57].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[57].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[57].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[57]:dont_test") ) CFG_LDB_CQ_WD_ENB[57].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[57] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[57]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[58]";
    `endif
    CFG_LDB_CQ_WD_ENB[58] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[58]", this);
    CFG_LDB_CQ_WD_ENB[58].set_cfg(16'h0, 16'h0, 16'h0, 28'h10BA000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[58].set_space_addr("MSG", 28'h10BA000);
    CFG_LDB_CQ_WD_ENB[58].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[58].set_space_addr("MEM-SB",28'h10BA000);
    CFG_LDB_CQ_WD_ENB[58].set_space_addr("MEM", 28'h10BA000);
      CFG_LDB_CQ_WD_ENB[58].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[58].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[58].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[58].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[58].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[58].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[58].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[58].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[58].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[58]:dont_test") ) CFG_LDB_CQ_WD_ENB[58].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[58] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[58]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[59]";
    `endif
    CFG_LDB_CQ_WD_ENB[59] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[59]", this);
    CFG_LDB_CQ_WD_ENB[59].set_cfg(16'h0, 16'h0, 16'h0, 28'h10BB000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[59].set_space_addr("MSG", 28'h10BB000);
    CFG_LDB_CQ_WD_ENB[59].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[59].set_space_addr("MEM-SB",28'h10BB000);
    CFG_LDB_CQ_WD_ENB[59].set_space_addr("MEM", 28'h10BB000);
      CFG_LDB_CQ_WD_ENB[59].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[59].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[59].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[59].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[59].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[59].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[59].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[59].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[59].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[59]:dont_test") ) CFG_LDB_CQ_WD_ENB[59].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[59] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[59]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[60]";
    `endif
    CFG_LDB_CQ_WD_ENB[60] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[60]", this);
    CFG_LDB_CQ_WD_ENB[60].set_cfg(16'h0, 16'h0, 16'h0, 28'h10BC000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[60].set_space_addr("MSG", 28'h10BC000);
    CFG_LDB_CQ_WD_ENB[60].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[60].set_space_addr("MEM-SB",28'h10BC000);
    CFG_LDB_CQ_WD_ENB[60].set_space_addr("MEM", 28'h10BC000);
      CFG_LDB_CQ_WD_ENB[60].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[60].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[60].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[60].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[60].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[60].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[60].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[60].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[60].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[60]:dont_test") ) CFG_LDB_CQ_WD_ENB[60].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[60] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[60]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[61]";
    `endif
    CFG_LDB_CQ_WD_ENB[61] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[61]", this);
    CFG_LDB_CQ_WD_ENB[61].set_cfg(16'h0, 16'h0, 16'h0, 28'h10BD000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[61].set_space_addr("MSG", 28'h10BD000);
    CFG_LDB_CQ_WD_ENB[61].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[61].set_space_addr("MEM-SB",28'h10BD000);
    CFG_LDB_CQ_WD_ENB[61].set_space_addr("MEM", 28'h10BD000);
      CFG_LDB_CQ_WD_ENB[61].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[61].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[61].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[61].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[61].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[61].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[61].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[61].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[61].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[61]:dont_test") ) CFG_LDB_CQ_WD_ENB[61].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[61] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[61]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[62]";
    `endif
    CFG_LDB_CQ_WD_ENB[62] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[62]", this);
    CFG_LDB_CQ_WD_ENB[62].set_cfg(16'h0, 16'h0, 16'h0, 28'h10BE000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[62].set_space_addr("MSG", 28'h10BE000);
    CFG_LDB_CQ_WD_ENB[62].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[62].set_space_addr("MEM-SB",28'h10BE000);
    CFG_LDB_CQ_WD_ENB[62].set_space_addr("MEM", 28'h10BE000);
      CFG_LDB_CQ_WD_ENB[62].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[62].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[62].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[62].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[62].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[62].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[62].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[62].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[62].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[62]:dont_test") ) CFG_LDB_CQ_WD_ENB[62].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[62] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[62]"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_WD_ENB[63]";
    `endif
    CFG_LDB_CQ_WD_ENB[63] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WD_ENB_reg::type_id::create("CFG_LDB_CQ_WD_ENB[63]", this);
    CFG_LDB_CQ_WD_ENB[63].set_cfg(16'h0, 16'h0, 16'h0, 28'h10BF000, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WD_ENB[63].set_space_addr("MSG", 28'h10BF000);
    CFG_LDB_CQ_WD_ENB[63].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WD_ENB[63].set_space_addr("MEM-SB",28'h10BF000);
    CFG_LDB_CQ_WD_ENB[63].set_space_addr("MEM", 28'h10BF000);
      CFG_LDB_CQ_WD_ENB[63].set_space("MEM");
      CFG_LDB_CQ_WD_ENB[63].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WD_ENB[63].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WD_ENB[63].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WD_ENB[63].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WD_ENB[63].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WD_ENB[63].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WD_ENB[63].set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_CQ_WD_ENB[63].set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_CQ_WD_ENB[63]:dont_test") ) CFG_LDB_CQ_WD_ENB[63].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WD_ENB[63] )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_WD_ENB[63]"));
      end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_LDB_CQ_WPTR[%0d]",i);
    `endif
    CFG_LDB_CQ_WPTR[i] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_WPTR_reg::type_id::create($psprintf("CFG_LDB_CQ_WPTR[%0d]",i), this);
    CFG_LDB_CQ_WPTR[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1100000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_WPTR[i].set_space_addr("MSG",  (28'h1100000 + (i*4096)) );
    CFG_LDB_CQ_WPTR[i].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_WPTR[i].set_space_addr("MEM-SB", (28'h1100000 + (i*4096)) );
    CFG_LDB_CQ_WPTR[i].set_space_addr("MEM",  (28'h1100000 + (i*4096)) );
      CFG_LDB_CQ_WPTR[i].set_space("MEM");
      CFG_LDB_CQ_WPTR[i].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_WPTR[i].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_WPTR[i].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_WPTR[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_WPTR[i].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_WPTR[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_WPTR[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_LDB_CQ_WPTR[%0d]:dont_test",i)) ) CFG_LDB_CQ_WPTR[i].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_WPTR[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_LDB_CQ_WPTR[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_LDB_CQ2VAS[%0d]",i);
    `endif
    CFG_LDB_CQ2VAS[i] = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ2VAS_reg::type_id::create($psprintf("CFG_LDB_CQ2VAS[%0d]",i), this);
    CFG_LDB_CQ2VAS[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1180000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ2VAS[i].set_space_addr("MSG",  (28'h1180000 + (i*4096)) );
    CFG_LDB_CQ2VAS[i].set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ2VAS[i].set_space_addr("MEM-SB", (28'h1180000 + (i*4096)) );
    CFG_LDB_CQ2VAS[i].set_space_addr("MEM",  (28'h1180000 + (i*4096)) );
      CFG_LDB_CQ2VAS[i].set_space("MEM");
      CFG_LDB_CQ2VAS[i].set_msg_opcode("MEM-SB");
      CFG_LDB_CQ2VAS[i].set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ2VAS[i].set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ2VAS[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ2VAS[i].set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ2VAS[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ2VAS[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_LDB_CQ2VAS[%0d]:dont_test",i)) ) CFG_LDB_CQ2VAS[i].set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ2VAS[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_LDB_CQ2VAS[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CHP_FRAG_COUNT[%0d]",i);
    `endif
    CFG_CHP_FRAG_COUNT[i] = hqm_credit_hist_pipe_bridge_CFG_CHP_FRAG_COUNT_reg::type_id::create($psprintf("CFG_CHP_FRAG_COUNT[%0d]",i), this);
    CFG_CHP_FRAG_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1200000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CHP_FRAG_COUNT[i].set_space_addr("MSG",  (28'h1200000 + (i*4096)) );
    CFG_CHP_FRAG_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_FRAG_COUNT[i].set_space_addr("MEM-SB", (28'h1200000 + (i*4096)) );
    CFG_CHP_FRAG_COUNT[i].set_space_addr("MEM",  (28'h1200000 + (i*4096)) );
      CFG_CHP_FRAG_COUNT[i].set_space("MEM");
      CFG_CHP_FRAG_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_CHP_FRAG_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_CHP_FRAG_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_CHP_FRAG_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_FRAG_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_CHP_FRAG_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_FRAG_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CHP_FRAG_COUNT[%0d]:dont_test",i)) ) CFG_CHP_FRAG_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_FRAG_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CHP_FRAG_COUNT[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CORRECTIBLE_COUNT_L";
    `endif
    CFG_CHP_CORRECTIBLE_COUNT_L = hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_L_reg::type_id::create("CFG_CHP_CORRECTIBLE_COUNT_L", this);
    CFG_CHP_CORRECTIBLE_COUNT_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000000, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CORRECTIBLE_COUNT_L.set_space_addr("MSG", 28'h4000000);
    CFG_CHP_CORRECTIBLE_COUNT_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CORRECTIBLE_COUNT_L.set_space_addr("MEM-SB",28'h4000000);
    CFG_CHP_CORRECTIBLE_COUNT_L.set_space_addr("MEM", 28'h4000000);
      CFG_CHP_CORRECTIBLE_COUNT_L.set_space("MEM");
      CFG_CHP_CORRECTIBLE_COUNT_L.set_msg_opcode("MEM-SB");
      CFG_CHP_CORRECTIBLE_COUNT_L.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CORRECTIBLE_COUNT_L.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CORRECTIBLE_COUNT_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CORRECTIBLE_COUNT_L.set_user_attribute("diag_reg", "1");
      CFG_CHP_CORRECTIBLE_COUNT_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CORRECTIBLE_COUNT_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CORRECTIBLE_COUNT_L:dont_test") ) CFG_CHP_CORRECTIBLE_COUNT_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CORRECTIBLE_COUNT_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CORRECTIBLE_COUNT_L"));
      end
   CFG_CHP_CORRECTIBLE_COUNT_L.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_correctible_count.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CORRECTIBLE_COUNT_H";
    `endif
    CFG_CHP_CORRECTIBLE_COUNT_H = hqm_credit_hist_pipe_bridge_CFG_CHP_CORRECTIBLE_COUNT_H_reg::type_id::create("CFG_CHP_CORRECTIBLE_COUNT_H", this);
    CFG_CHP_CORRECTIBLE_COUNT_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000004, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CORRECTIBLE_COUNT_H.set_space_addr("MSG", 28'h4000004);
    CFG_CHP_CORRECTIBLE_COUNT_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CORRECTIBLE_COUNT_H.set_space_addr("MEM-SB",28'h4000004);
    CFG_CHP_CORRECTIBLE_COUNT_H.set_space_addr("MEM", 28'h4000004);
      CFG_CHP_CORRECTIBLE_COUNT_H.set_space("MEM");
      CFG_CHP_CORRECTIBLE_COUNT_H.set_msg_opcode("MEM-SB");
      CFG_CHP_CORRECTIBLE_COUNT_H.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CORRECTIBLE_COUNT_H.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CORRECTIBLE_COUNT_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CORRECTIBLE_COUNT_H.set_user_attribute("diag_reg", "1");
      CFG_CHP_CORRECTIBLE_COUNT_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CORRECTIBLE_COUNT_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CORRECTIBLE_COUNT_H:dont_test") ) CFG_CHP_CORRECTIBLE_COUNT_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CORRECTIBLE_COUNT_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CORRECTIBLE_COUNT_H"));
      end
   CFG_CHP_CORRECTIBLE_COUNT_H.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_correctible_count.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_PALB_CONTROL";
    `endif
    CFG_CHP_PALB_CONTROL = hqm_credit_hist_pipe_bridge_CFG_CHP_PALB_CONTROL_reg::type_id::create("CFG_CHP_PALB_CONTROL", this);
    CFG_CHP_PALB_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000008, 32, 32'b00000000000000000000000000001000);
    CFG_CHP_PALB_CONTROL.set_space_addr("MSG", 28'h4000008);
    CFG_CHP_PALB_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_PALB_CONTROL.set_space_addr("MEM-SB",28'h4000008);
    CFG_CHP_PALB_CONTROL.set_space_addr("MEM", 28'h4000008);
      CFG_CHP_PALB_CONTROL.set_space("MEM");
      CFG_CHP_PALB_CONTROL.set_msg_opcode("MEM-SB");
      CFG_CHP_PALB_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_PALB_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_CHP_PALB_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_PALB_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_CHP_PALB_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_PALB_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_PALB_CONTROL:dont_test") ) CFG_CHP_PALB_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_PALB_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_PALB_CONTROL"));
      end
   CFG_CHP_PALB_CONTROL.PALB_PERIOD.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_palb_control.internal_f[3:0]"});
   CFG_CHP_PALB_CONTROL.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_palb_control.internal_f[30:4]"});
   CFG_CHP_PALB_CONTROL.PALB_ENABLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_palb_control.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CSR_CONTROL";
    `endif
    CFG_CHP_CSR_CONTROL = hqm_credit_hist_pipe_bridge_CFG_CHP_CSR_CONTROL_reg::type_id::create("CFG_CHP_CSR_CONTROL", this);
    CFG_CHP_CSR_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h400000C, 32, 32'b00000000000110000000000000000010);
    CFG_CHP_CSR_CONTROL.set_space_addr("MSG", 28'h400000C);
    CFG_CHP_CSR_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CSR_CONTROL.set_space_addr("MEM-SB",28'h400000C);
    CFG_CHP_CSR_CONTROL.set_space_addr("MEM", 28'h400000C);
      CFG_CHP_CSR_CONTROL.set_space("MEM");
      CFG_CHP_CSR_CONTROL.set_msg_opcode("MEM-SB");
      CFG_CHP_CSR_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CSR_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CSR_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CSR_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_CHP_CSR_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CSR_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CSR_CONTROL:dont_test") ) CFG_CHP_CSR_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CSR_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CSR_CONTROL"));
      end
   CFG_CHP_CSR_CONTROL.INT_COR_ALARM_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[0:0]"});
   CFG_CHP_CSR_CONTROL.INT_COR_SYND_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[1:1]"});
   CFG_CHP_CSR_CONTROL.INT_UNCR_ALARM_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[2:2]"});
   CFG_CHP_CSR_CONTROL.INT_UNC_SYND_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[3:3]"});
   CFG_CHP_CSR_CONTROL.INT_INF0_ALARM_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[4:4]"});
   CFG_CHP_CSR_CONTROL.INT_INF0_SYND_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[5:5]"});
   CFG_CHP_CSR_CONTROL.INT_INF1_ALARM_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[6:6]"});
   CFG_CHP_CSR_CONTROL.INT_INF1_SYND_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[7:7]"});
   CFG_CHP_CSR_CONTROL.INT_INF2_ALARM_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[8:8]"});
   CFG_CHP_CSR_CONTROL.INT_INF2_SYND_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[9:9]"});
   CFG_CHP_CSR_CONTROL.INT_INF3_ALARM_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[10:10]"});
   CFG_CHP_CSR_CONTROL.INT_INF3_SYND_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[11:11]"});
   CFG_CHP_CSR_CONTROL.INT_INF4_ALARM_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[12:12]"});
   CFG_CHP_CSR_CONTROL.INT_INF4_SYND_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[13:13]"});
   CFG_CHP_CSR_CONTROL.INT_INF5_ALARM_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[14:14]"});
   CFG_CHP_CSR_CONTROL.INT_INF5_SYND_DIS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[15:15]"});
   CFG_CHP_CSR_CONTROL.HQM_COR_ALARM_ENABLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[16:16]"});
   CFG_CHP_CSR_CONTROL.CFG_64BYTES_QE_LDB_CQ_MODE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[17:17]"});
   CFG_CHP_CSR_CONTROL.CFG_64BYTES_QE_DIR_CQ_MODE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[18:18]"});
   CFG_CHP_CSR_CONTROL.PAD_WRITE_LDB.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[19:19]"});
   CFG_CHP_CSR_CONTROL.PAD_WRITE_DIR.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[20:20]"});
   CFG_CHP_CSR_CONTROL.PAD_FIRST_WRITE_LDB.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[21:21]"});
   CFG_CHP_CSR_CONTROL.PAD_FIRST_WRITE_DIR.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[22:22]"});
   CFG_CHP_CSR_CONTROL.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_csr_control.internal_f[31:23]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_COUNTER_CHP_ERROR_DROP_L";
    `endif
    CFG_COUNTER_CHP_ERROR_DROP_L = hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_L_reg::type_id::create("CFG_COUNTER_CHP_ERROR_DROP_L", this);
    CFG_COUNTER_CHP_ERROR_DROP_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000010, 32, 32'b00000000000000000000000000000000);
    CFG_COUNTER_CHP_ERROR_DROP_L.set_space_addr("MSG", 28'h4000010);
    CFG_COUNTER_CHP_ERROR_DROP_L.set_space_addr("msg_bus_port", 'h21);
    CFG_COUNTER_CHP_ERROR_DROP_L.set_space_addr("MEM-SB",28'h4000010);
    CFG_COUNTER_CHP_ERROR_DROP_L.set_space_addr("MEM", 28'h4000010);
      CFG_COUNTER_CHP_ERROR_DROP_L.set_space("MEM");
      CFG_COUNTER_CHP_ERROR_DROP_L.set_msg_opcode("MEM-SB");
      CFG_COUNTER_CHP_ERROR_DROP_L.set_fid(4'h0, "MEM-SB");
  	CFG_COUNTER_CHP_ERROR_DROP_L.set_bar(4'h2, "MEM-SB");
      CFG_COUNTER_CHP_ERROR_DROP_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_COUNTER_CHP_ERROR_DROP_L.set_user_attribute("diag_reg", "0");
      CFG_COUNTER_CHP_ERROR_DROP_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_COUNTER_CHP_ERROR_DROP_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_COUNTER_CHP_ERROR_DROP_L:dont_test") ) CFG_COUNTER_CHP_ERROR_DROP_L.set_test_reg(1'b0);
      if (!add_reg( CFG_COUNTER_CHP_ERROR_DROP_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_COUNTER_CHP_ERROR_DROP_L"));
      end
   CFG_COUNTER_CHP_ERROR_DROP_L.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_counter_chp_error_drop.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_COUNTER_CHP_ERROR_DROP_H";
    `endif
    CFG_COUNTER_CHP_ERROR_DROP_H = hqm_credit_hist_pipe_bridge_CFG_COUNTER_CHP_ERROR_DROP_H_reg::type_id::create("CFG_COUNTER_CHP_ERROR_DROP_H", this);
    CFG_COUNTER_CHP_ERROR_DROP_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000014, 32, 32'b00000000000000000000000000000000);
    CFG_COUNTER_CHP_ERROR_DROP_H.set_space_addr("MSG", 28'h4000014);
    CFG_COUNTER_CHP_ERROR_DROP_H.set_space_addr("msg_bus_port", 'h21);
    CFG_COUNTER_CHP_ERROR_DROP_H.set_space_addr("MEM-SB",28'h4000014);
    CFG_COUNTER_CHP_ERROR_DROP_H.set_space_addr("MEM", 28'h4000014);
      CFG_COUNTER_CHP_ERROR_DROP_H.set_space("MEM");
      CFG_COUNTER_CHP_ERROR_DROP_H.set_msg_opcode("MEM-SB");
      CFG_COUNTER_CHP_ERROR_DROP_H.set_fid(4'h0, "MEM-SB");
  	CFG_COUNTER_CHP_ERROR_DROP_H.set_bar(4'h2, "MEM-SB");
      CFG_COUNTER_CHP_ERROR_DROP_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_COUNTER_CHP_ERROR_DROP_H.set_user_attribute("diag_reg", "0");
      CFG_COUNTER_CHP_ERROR_DROP_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_COUNTER_CHP_ERROR_DROP_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_COUNTER_CHP_ERROR_DROP_H:dont_test") ) CFG_COUNTER_CHP_ERROR_DROP_H.set_test_reg(1'b0);
      if (!add_reg( CFG_COUNTER_CHP_ERROR_DROP_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_COUNTER_CHP_ERROR_DROP_H"));
      end
   CFG_COUNTER_CHP_ERROR_DROP_H.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_counter_chp_error_drop.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_DIR_HCW_ENQ_L";
    `endif
    CFG_CHP_CNT_DIR_HCW_ENQ_L = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_L_reg::type_id::create("CFG_CHP_CNT_DIR_HCW_ENQ_L", this);
    CFG_CHP_CNT_DIR_HCW_ENQ_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000018, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_DIR_HCW_ENQ_L.set_space_addr("MSG", 28'h4000018);
    CFG_CHP_CNT_DIR_HCW_ENQ_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_DIR_HCW_ENQ_L.set_space_addr("MEM-SB",28'h4000018);
    CFG_CHP_CNT_DIR_HCW_ENQ_L.set_space_addr("MEM", 28'h4000018);
      CFG_CHP_CNT_DIR_HCW_ENQ_L.set_space("MEM");
      CFG_CHP_CNT_DIR_HCW_ENQ_L.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_DIR_HCW_ENQ_L.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_DIR_HCW_ENQ_L.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_DIR_HCW_ENQ_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_DIR_HCW_ENQ_L.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_DIR_HCW_ENQ_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_DIR_HCW_ENQ_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_DIR_HCW_ENQ_L:dont_test") ) CFG_CHP_CNT_DIR_HCW_ENQ_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_DIR_HCW_ENQ_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_DIR_HCW_ENQ_L"));
      end
   CFG_CHP_CNT_DIR_HCW_ENQ_L.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_dir_hcw_enq.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_DIR_HCW_ENQ_H";
    `endif
    CFG_CHP_CNT_DIR_HCW_ENQ_H = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_HCW_ENQ_H_reg::type_id::create("CFG_CHP_CNT_DIR_HCW_ENQ_H", this);
    CFG_CHP_CNT_DIR_HCW_ENQ_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h400001C, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_DIR_HCW_ENQ_H.set_space_addr("MSG", 28'h400001C);
    CFG_CHP_CNT_DIR_HCW_ENQ_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_DIR_HCW_ENQ_H.set_space_addr("MEM-SB",28'h400001C);
    CFG_CHP_CNT_DIR_HCW_ENQ_H.set_space_addr("MEM", 28'h400001C);
      CFG_CHP_CNT_DIR_HCW_ENQ_H.set_space("MEM");
      CFG_CHP_CNT_DIR_HCW_ENQ_H.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_DIR_HCW_ENQ_H.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_DIR_HCW_ENQ_H.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_DIR_HCW_ENQ_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_DIR_HCW_ENQ_H.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_DIR_HCW_ENQ_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_DIR_HCW_ENQ_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_DIR_HCW_ENQ_H:dont_test") ) CFG_CHP_CNT_DIR_HCW_ENQ_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_DIR_HCW_ENQ_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_DIR_HCW_ENQ_H"));
      end
   CFG_CHP_CNT_DIR_HCW_ENQ_H.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_dir_hcw_enq.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_LDB_HCW_ENQ_L";
    `endif
    CFG_CHP_CNT_LDB_HCW_ENQ_L = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_L_reg::type_id::create("CFG_CHP_CNT_LDB_HCW_ENQ_L", this);
    CFG_CHP_CNT_LDB_HCW_ENQ_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000020, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_LDB_HCW_ENQ_L.set_space_addr("MSG", 28'h4000020);
    CFG_CHP_CNT_LDB_HCW_ENQ_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_LDB_HCW_ENQ_L.set_space_addr("MEM-SB",28'h4000020);
    CFG_CHP_CNT_LDB_HCW_ENQ_L.set_space_addr("MEM", 28'h4000020);
      CFG_CHP_CNT_LDB_HCW_ENQ_L.set_space("MEM");
      CFG_CHP_CNT_LDB_HCW_ENQ_L.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_LDB_HCW_ENQ_L.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_LDB_HCW_ENQ_L.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_LDB_HCW_ENQ_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_LDB_HCW_ENQ_L.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_LDB_HCW_ENQ_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_LDB_HCW_ENQ_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_LDB_HCW_ENQ_L:dont_test") ) CFG_CHP_CNT_LDB_HCW_ENQ_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_LDB_HCW_ENQ_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_LDB_HCW_ENQ_L"));
      end
   CFG_CHP_CNT_LDB_HCW_ENQ_L.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_ldb_hcw_enq.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_LDB_HCW_ENQ_H";
    `endif
    CFG_CHP_CNT_LDB_HCW_ENQ_H = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_HCW_ENQ_H_reg::type_id::create("CFG_CHP_CNT_LDB_HCW_ENQ_H", this);
    CFG_CHP_CNT_LDB_HCW_ENQ_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000024, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_LDB_HCW_ENQ_H.set_space_addr("MSG", 28'h4000024);
    CFG_CHP_CNT_LDB_HCW_ENQ_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_LDB_HCW_ENQ_H.set_space_addr("MEM-SB",28'h4000024);
    CFG_CHP_CNT_LDB_HCW_ENQ_H.set_space_addr("MEM", 28'h4000024);
      CFG_CHP_CNT_LDB_HCW_ENQ_H.set_space("MEM");
      CFG_CHP_CNT_LDB_HCW_ENQ_H.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_LDB_HCW_ENQ_H.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_LDB_HCW_ENQ_H.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_LDB_HCW_ENQ_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_LDB_HCW_ENQ_H.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_LDB_HCW_ENQ_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_LDB_HCW_ENQ_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_LDB_HCW_ENQ_H:dont_test") ) CFG_CHP_CNT_LDB_HCW_ENQ_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_LDB_HCW_ENQ_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_LDB_HCW_ENQ_H"));
      end
   CFG_CHP_CNT_LDB_HCW_ENQ_H.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_ldb_hcw_enq.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_FRAG_REPLAYED_L";
    `endif
    CFG_CHP_CNT_FRAG_REPLAYED_L = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_L_reg::type_id::create("CFG_CHP_CNT_FRAG_REPLAYED_L", this);
    CFG_CHP_CNT_FRAG_REPLAYED_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000028, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_FRAG_REPLAYED_L.set_space_addr("MSG", 28'h4000028);
    CFG_CHP_CNT_FRAG_REPLAYED_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_FRAG_REPLAYED_L.set_space_addr("MEM-SB",28'h4000028);
    CFG_CHP_CNT_FRAG_REPLAYED_L.set_space_addr("MEM", 28'h4000028);
      CFG_CHP_CNT_FRAG_REPLAYED_L.set_space("MEM");
      CFG_CHP_CNT_FRAG_REPLAYED_L.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_FRAG_REPLAYED_L.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_FRAG_REPLAYED_L.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_FRAG_REPLAYED_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_FRAG_REPLAYED_L.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_FRAG_REPLAYED_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_FRAG_REPLAYED_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_FRAG_REPLAYED_L:dont_test") ) CFG_CHP_CNT_FRAG_REPLAYED_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_FRAG_REPLAYED_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_FRAG_REPLAYED_L"));
      end
   CFG_CHP_CNT_FRAG_REPLAYED_L.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_frag_replayed.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_FRAG_REPLAYED_H";
    `endif
    CFG_CHP_CNT_FRAG_REPLAYED_H = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_FRAG_REPLAYED_H_reg::type_id::create("CFG_CHP_CNT_FRAG_REPLAYED_H", this);
    CFG_CHP_CNT_FRAG_REPLAYED_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h400002C, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_FRAG_REPLAYED_H.set_space_addr("MSG", 28'h400002C);
    CFG_CHP_CNT_FRAG_REPLAYED_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_FRAG_REPLAYED_H.set_space_addr("MEM-SB",28'h400002C);
    CFG_CHP_CNT_FRAG_REPLAYED_H.set_space_addr("MEM", 28'h400002C);
      CFG_CHP_CNT_FRAG_REPLAYED_H.set_space("MEM");
      CFG_CHP_CNT_FRAG_REPLAYED_H.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_FRAG_REPLAYED_H.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_FRAG_REPLAYED_H.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_FRAG_REPLAYED_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_FRAG_REPLAYED_H.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_FRAG_REPLAYED_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_FRAG_REPLAYED_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_FRAG_REPLAYED_H:dont_test") ) CFG_CHP_CNT_FRAG_REPLAYED_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_FRAG_REPLAYED_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_FRAG_REPLAYED_H"));
      end
   CFG_CHP_CNT_FRAG_REPLAYED_H.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_frag_replayed.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_DIR_QE_SCH_L";
    `endif
    CFG_CHP_CNT_DIR_QE_SCH_L = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_L_reg::type_id::create("CFG_CHP_CNT_DIR_QE_SCH_L", this);
    CFG_CHP_CNT_DIR_QE_SCH_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000030, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_DIR_QE_SCH_L.set_space_addr("MSG", 28'h4000030);
    CFG_CHP_CNT_DIR_QE_SCH_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_DIR_QE_SCH_L.set_space_addr("MEM-SB",28'h4000030);
    CFG_CHP_CNT_DIR_QE_SCH_L.set_space_addr("MEM", 28'h4000030);
      CFG_CHP_CNT_DIR_QE_SCH_L.set_space("MEM");
      CFG_CHP_CNT_DIR_QE_SCH_L.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_DIR_QE_SCH_L.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_DIR_QE_SCH_L.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_DIR_QE_SCH_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_DIR_QE_SCH_L.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_DIR_QE_SCH_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_DIR_QE_SCH_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_DIR_QE_SCH_L:dont_test") ) CFG_CHP_CNT_DIR_QE_SCH_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_DIR_QE_SCH_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_DIR_QE_SCH_L"));
      end
   CFG_CHP_CNT_DIR_QE_SCH_L.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_dir_qe_sch.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_DIR_QE_SCH_H";
    `endif
    CFG_CHP_CNT_DIR_QE_SCH_H = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_DIR_QE_SCH_H_reg::type_id::create("CFG_CHP_CNT_DIR_QE_SCH_H", this);
    CFG_CHP_CNT_DIR_QE_SCH_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000034, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_DIR_QE_SCH_H.set_space_addr("MSG", 28'h4000034);
    CFG_CHP_CNT_DIR_QE_SCH_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_DIR_QE_SCH_H.set_space_addr("MEM-SB",28'h4000034);
    CFG_CHP_CNT_DIR_QE_SCH_H.set_space_addr("MEM", 28'h4000034);
      CFG_CHP_CNT_DIR_QE_SCH_H.set_space("MEM");
      CFG_CHP_CNT_DIR_QE_SCH_H.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_DIR_QE_SCH_H.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_DIR_QE_SCH_H.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_DIR_QE_SCH_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_DIR_QE_SCH_H.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_DIR_QE_SCH_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_DIR_QE_SCH_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_DIR_QE_SCH_H:dont_test") ) CFG_CHP_CNT_DIR_QE_SCH_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_DIR_QE_SCH_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_DIR_QE_SCH_H"));
      end
   CFG_CHP_CNT_DIR_QE_SCH_H.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_dir_qe_sch.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_LDB_QE_SCH_L";
    `endif
    CFG_CHP_CNT_LDB_QE_SCH_L = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_L_reg::type_id::create("CFG_CHP_CNT_LDB_QE_SCH_L", this);
    CFG_CHP_CNT_LDB_QE_SCH_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000038, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_LDB_QE_SCH_L.set_space_addr("MSG", 28'h4000038);
    CFG_CHP_CNT_LDB_QE_SCH_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_LDB_QE_SCH_L.set_space_addr("MEM-SB",28'h4000038);
    CFG_CHP_CNT_LDB_QE_SCH_L.set_space_addr("MEM", 28'h4000038);
      CFG_CHP_CNT_LDB_QE_SCH_L.set_space("MEM");
      CFG_CHP_CNT_LDB_QE_SCH_L.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_LDB_QE_SCH_L.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_LDB_QE_SCH_L.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_LDB_QE_SCH_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_LDB_QE_SCH_L.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_LDB_QE_SCH_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_LDB_QE_SCH_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_LDB_QE_SCH_L:dont_test") ) CFG_CHP_CNT_LDB_QE_SCH_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_LDB_QE_SCH_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_LDB_QE_SCH_L"));
      end
   CFG_CHP_CNT_LDB_QE_SCH_L.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_ldb_qe_sch.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_LDB_QE_SCH_H";
    `endif
    CFG_CHP_CNT_LDB_QE_SCH_H = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_LDB_QE_SCH_H_reg::type_id::create("CFG_CHP_CNT_LDB_QE_SCH_H", this);
    CFG_CHP_CNT_LDB_QE_SCH_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h400003C, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_LDB_QE_SCH_H.set_space_addr("MSG", 28'h400003C);
    CFG_CHP_CNT_LDB_QE_SCH_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_LDB_QE_SCH_H.set_space_addr("MEM-SB",28'h400003C);
    CFG_CHP_CNT_LDB_QE_SCH_H.set_space_addr("MEM", 28'h400003C);
      CFG_CHP_CNT_LDB_QE_SCH_H.set_space("MEM");
      CFG_CHP_CNT_LDB_QE_SCH_H.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_LDB_QE_SCH_H.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_LDB_QE_SCH_H.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_LDB_QE_SCH_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_LDB_QE_SCH_H.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_LDB_QE_SCH_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_LDB_QE_SCH_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_LDB_QE_SCH_H:dont_test") ) CFG_CHP_CNT_LDB_QE_SCH_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_LDB_QE_SCH_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_LDB_QE_SCH_H"));
      end
   CFG_CHP_CNT_LDB_QE_SCH_H.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_ldb_qe_sch.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_ATM_QE_SCH_L";
    `endif
    CFG_CHP_CNT_ATM_QE_SCH_L = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_L_reg::type_id::create("CFG_CHP_CNT_ATM_QE_SCH_L", this);
    CFG_CHP_CNT_ATM_QE_SCH_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000040, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_ATM_QE_SCH_L.set_space_addr("MSG", 28'h4000040);
    CFG_CHP_CNT_ATM_QE_SCH_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_ATM_QE_SCH_L.set_space_addr("MEM-SB",28'h4000040);
    CFG_CHP_CNT_ATM_QE_SCH_L.set_space_addr("MEM", 28'h4000040);
      CFG_CHP_CNT_ATM_QE_SCH_L.set_space("MEM");
      CFG_CHP_CNT_ATM_QE_SCH_L.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_ATM_QE_SCH_L.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_ATM_QE_SCH_L.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_ATM_QE_SCH_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_ATM_QE_SCH_L.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_ATM_QE_SCH_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_ATM_QE_SCH_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_ATM_QE_SCH_L:dont_test") ) CFG_CHP_CNT_ATM_QE_SCH_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_ATM_QE_SCH_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_ATM_QE_SCH_L"));
      end
   CFG_CHP_CNT_ATM_QE_SCH_L.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_atm_qe_sch.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_ATM_QE_SCH_H";
    `endif
    CFG_CHP_CNT_ATM_QE_SCH_H = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATM_QE_SCH_H_reg::type_id::create("CFG_CHP_CNT_ATM_QE_SCH_H", this);
    CFG_CHP_CNT_ATM_QE_SCH_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000044, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_ATM_QE_SCH_H.set_space_addr("MSG", 28'h4000044);
    CFG_CHP_CNT_ATM_QE_SCH_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_ATM_QE_SCH_H.set_space_addr("MEM-SB",28'h4000044);
    CFG_CHP_CNT_ATM_QE_SCH_H.set_space_addr("MEM", 28'h4000044);
      CFG_CHP_CNT_ATM_QE_SCH_H.set_space("MEM");
      CFG_CHP_CNT_ATM_QE_SCH_H.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_ATM_QE_SCH_H.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_ATM_QE_SCH_H.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_ATM_QE_SCH_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_ATM_QE_SCH_H.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_ATM_QE_SCH_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_ATM_QE_SCH_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_ATM_QE_SCH_H:dont_test") ) CFG_CHP_CNT_ATM_QE_SCH_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_ATM_QE_SCH_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_ATM_QE_SCH_H"));
      end
   CFG_CHP_CNT_ATM_QE_SCH_H.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_atm_qe_sch.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_ATQ_TO_ATM_L";
    `endif
    CFG_CHP_CNT_ATQ_TO_ATM_L = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_L_reg::type_id::create("CFG_CHP_CNT_ATQ_TO_ATM_L", this);
    CFG_CHP_CNT_ATQ_TO_ATM_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000048, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_ATQ_TO_ATM_L.set_space_addr("MSG", 28'h4000048);
    CFG_CHP_CNT_ATQ_TO_ATM_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_ATQ_TO_ATM_L.set_space_addr("MEM-SB",28'h4000048);
    CFG_CHP_CNT_ATQ_TO_ATM_L.set_space_addr("MEM", 28'h4000048);
      CFG_CHP_CNT_ATQ_TO_ATM_L.set_space("MEM");
      CFG_CHP_CNT_ATQ_TO_ATM_L.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_ATQ_TO_ATM_L.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_ATQ_TO_ATM_L.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_ATQ_TO_ATM_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_ATQ_TO_ATM_L.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_ATQ_TO_ATM_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_ATQ_TO_ATM_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_ATQ_TO_ATM_L:dont_test") ) CFG_CHP_CNT_ATQ_TO_ATM_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_ATQ_TO_ATM_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_ATQ_TO_ATM_L"));
      end
   CFG_CHP_CNT_ATQ_TO_ATM_L.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_atq_to_atm.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_CNT_ATQ_TO_ATM_H";
    `endif
    CFG_CHP_CNT_ATQ_TO_ATM_H = hqm_credit_hist_pipe_bridge_CFG_CHP_CNT_ATQ_TO_ATM_H_reg::type_id::create("CFG_CHP_CNT_ATQ_TO_ATM_H", this);
    CFG_CHP_CNT_ATQ_TO_ATM_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h400004C, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_CNT_ATQ_TO_ATM_H.set_space_addr("MSG", 28'h400004C);
    CFG_CHP_CNT_ATQ_TO_ATM_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_CNT_ATQ_TO_ATM_H.set_space_addr("MEM-SB",28'h400004C);
    CFG_CHP_CNT_ATQ_TO_ATM_H.set_space_addr("MEM", 28'h400004C);
      CFG_CHP_CNT_ATQ_TO_ATM_H.set_space("MEM");
      CFG_CHP_CNT_ATQ_TO_ATM_H.set_msg_opcode("MEM-SB");
      CFG_CHP_CNT_ATQ_TO_ATM_H.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_CNT_ATQ_TO_ATM_H.set_bar(4'h2, "MEM-SB");
      CFG_CHP_CNT_ATQ_TO_ATM_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_CNT_ATQ_TO_ATM_H.set_user_attribute("diag_reg", "0");
      CFG_CHP_CNT_ATQ_TO_ATM_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CHP_CNT_ATQ_TO_ATM_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_CNT_ATQ_TO_ATM_H:dont_test") ) CFG_CHP_CNT_ATQ_TO_ATM_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_CNT_ATQ_TO_ATM_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_CNT_ATQ_TO_ATM_H"));
      end
   CFG_CHP_CNT_ATQ_TO_ATM_H.COUNT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_cnt_atq_to_atm.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INTR_ARMED0";
    `endif
    CFG_DIR_CQ_INTR_ARMED0 = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED0_reg::type_id::create("CFG_DIR_CQ_INTR_ARMED0", this);
    CFG_DIR_CQ_INTR_ARMED0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000050, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INTR_ARMED0.set_space_addr("MSG", 28'h4000050);
    CFG_DIR_CQ_INTR_ARMED0.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INTR_ARMED0.set_space_addr("MEM-SB",28'h4000050);
    CFG_DIR_CQ_INTR_ARMED0.set_space_addr("MEM", 28'h4000050);
      CFG_DIR_CQ_INTR_ARMED0.set_space("MEM");
      CFG_DIR_CQ_INTR_ARMED0.set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INTR_ARMED0.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INTR_ARMED0.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INTR_ARMED0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INTR_ARMED0.set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INTR_ARMED0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INTR_ARMED0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INTR_ARMED0:dont_test") ) CFG_DIR_CQ_INTR_ARMED0.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INTR_ARMED0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INTR_ARMED0"));
      end
   CFG_DIR_CQ_INTR_ARMED0.ARMED.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_armed0.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INTR_ARMED1";
    `endif
    CFG_DIR_CQ_INTR_ARMED1 = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_ARMED1_reg::type_id::create("CFG_DIR_CQ_INTR_ARMED1", this);
    CFG_DIR_CQ_INTR_ARMED1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000054, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INTR_ARMED1.set_space_addr("MSG", 28'h4000054);
    CFG_DIR_CQ_INTR_ARMED1.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INTR_ARMED1.set_space_addr("MEM-SB",28'h4000054);
    CFG_DIR_CQ_INTR_ARMED1.set_space_addr("MEM", 28'h4000054);
      CFG_DIR_CQ_INTR_ARMED1.set_space("MEM");
      CFG_DIR_CQ_INTR_ARMED1.set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INTR_ARMED1.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INTR_ARMED1.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INTR_ARMED1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INTR_ARMED1.set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INTR_ARMED1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INTR_ARMED1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INTR_ARMED1:dont_test") ) CFG_DIR_CQ_INTR_ARMED1.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INTR_ARMED1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INTR_ARMED1"));
      end
   CFG_DIR_CQ_INTR_ARMED1.ARMED.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_armed1.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INTR_EXPIRED0";
    `endif
    CFG_DIR_CQ_INTR_EXPIRED0 = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED0_reg::type_id::create("CFG_DIR_CQ_INTR_EXPIRED0", this);
    CFG_DIR_CQ_INTR_EXPIRED0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000058, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INTR_EXPIRED0.set_space_addr("MSG", 28'h4000058);
    CFG_DIR_CQ_INTR_EXPIRED0.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INTR_EXPIRED0.set_space_addr("MEM-SB",28'h4000058);
    CFG_DIR_CQ_INTR_EXPIRED0.set_space_addr("MEM", 28'h4000058);
      CFG_DIR_CQ_INTR_EXPIRED0.set_space("MEM");
      CFG_DIR_CQ_INTR_EXPIRED0.set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INTR_EXPIRED0.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INTR_EXPIRED0.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INTR_EXPIRED0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INTR_EXPIRED0.set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INTR_EXPIRED0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INTR_EXPIRED0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INTR_EXPIRED0:dont_test") ) CFG_DIR_CQ_INTR_EXPIRED0.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INTR_EXPIRED0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INTR_EXPIRED0"));
      end
   CFG_DIR_CQ_INTR_EXPIRED0.EXPIRED.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_expired0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INTR_EXPIRED1";
    `endif
    CFG_DIR_CQ_INTR_EXPIRED1 = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_EXPIRED1_reg::type_id::create("CFG_DIR_CQ_INTR_EXPIRED1", this);
    CFG_DIR_CQ_INTR_EXPIRED1.set_cfg(16'h0, 16'h0, 16'h0, 28'h400005C, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INTR_EXPIRED1.set_space_addr("MSG", 28'h400005C);
    CFG_DIR_CQ_INTR_EXPIRED1.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INTR_EXPIRED1.set_space_addr("MEM-SB",28'h400005C);
    CFG_DIR_CQ_INTR_EXPIRED1.set_space_addr("MEM", 28'h400005C);
      CFG_DIR_CQ_INTR_EXPIRED1.set_space("MEM");
      CFG_DIR_CQ_INTR_EXPIRED1.set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INTR_EXPIRED1.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INTR_EXPIRED1.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INTR_EXPIRED1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INTR_EXPIRED1.set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INTR_EXPIRED1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INTR_EXPIRED1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INTR_EXPIRED1:dont_test") ) CFG_DIR_CQ_INTR_EXPIRED1.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INTR_EXPIRED1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INTR_EXPIRED1"));
      end
   CFG_DIR_CQ_INTR_EXPIRED1.EXPIRED.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_expired1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INTR_IRQ0";
    `endif
    CFG_DIR_CQ_INTR_IRQ0 = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ0_reg::type_id::create("CFG_DIR_CQ_INTR_IRQ0", this);
    CFG_DIR_CQ_INTR_IRQ0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000060, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INTR_IRQ0.set_space_addr("MSG", 28'h4000060);
    CFG_DIR_CQ_INTR_IRQ0.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INTR_IRQ0.set_space_addr("MEM-SB",28'h4000060);
    CFG_DIR_CQ_INTR_IRQ0.set_space_addr("MEM", 28'h4000060);
      CFG_DIR_CQ_INTR_IRQ0.set_space("MEM");
      CFG_DIR_CQ_INTR_IRQ0.set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INTR_IRQ0.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INTR_IRQ0.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INTR_IRQ0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INTR_IRQ0.set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INTR_IRQ0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INTR_IRQ0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INTR_IRQ0:dont_test") ) CFG_DIR_CQ_INTR_IRQ0.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INTR_IRQ0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INTR_IRQ0"));
      end
   CFG_DIR_CQ_INTR_IRQ0.IRQ.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_irq0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INTR_IRQ1";
    `endif
    CFG_DIR_CQ_INTR_IRQ1 = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_IRQ1_reg::type_id::create("CFG_DIR_CQ_INTR_IRQ1", this);
    CFG_DIR_CQ_INTR_IRQ1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000064, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INTR_IRQ1.set_space_addr("MSG", 28'h4000064);
    CFG_DIR_CQ_INTR_IRQ1.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INTR_IRQ1.set_space_addr("MEM-SB",28'h4000064);
    CFG_DIR_CQ_INTR_IRQ1.set_space_addr("MEM", 28'h4000064);
      CFG_DIR_CQ_INTR_IRQ1.set_space("MEM");
      CFG_DIR_CQ_INTR_IRQ1.set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INTR_IRQ1.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INTR_IRQ1.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INTR_IRQ1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INTR_IRQ1.set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INTR_IRQ1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INTR_IRQ1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INTR_IRQ1:dont_test") ) CFG_DIR_CQ_INTR_IRQ1.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INTR_IRQ1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INTR_IRQ1"));
      end
   CFG_DIR_CQ_INTR_IRQ1.IRQ.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_irq1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INTR_RUN_TIMER0";
    `endif
    CFG_DIR_CQ_INTR_RUN_TIMER0 = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER0_reg::type_id::create("CFG_DIR_CQ_INTR_RUN_TIMER0", this);
    CFG_DIR_CQ_INTR_RUN_TIMER0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000068, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INTR_RUN_TIMER0.set_space_addr("MSG", 28'h4000068);
    CFG_DIR_CQ_INTR_RUN_TIMER0.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INTR_RUN_TIMER0.set_space_addr("MEM-SB",28'h4000068);
    CFG_DIR_CQ_INTR_RUN_TIMER0.set_space_addr("MEM", 28'h4000068);
      CFG_DIR_CQ_INTR_RUN_TIMER0.set_space("MEM");
      CFG_DIR_CQ_INTR_RUN_TIMER0.set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INTR_RUN_TIMER0.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INTR_RUN_TIMER0.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INTR_RUN_TIMER0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INTR_RUN_TIMER0.set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INTR_RUN_TIMER0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INTR_RUN_TIMER0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INTR_RUN_TIMER0:dont_test") ) CFG_DIR_CQ_INTR_RUN_TIMER0.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INTR_RUN_TIMER0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INTR_RUN_TIMER0"));
      end
   CFG_DIR_CQ_INTR_RUN_TIMER0.RUN_TIMER.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_run_timer0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INTR_RUN_TIMER1";
    `endif
    CFG_DIR_CQ_INTR_RUN_TIMER1 = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_RUN_TIMER1_reg::type_id::create("CFG_DIR_CQ_INTR_RUN_TIMER1", this);
    CFG_DIR_CQ_INTR_RUN_TIMER1.set_cfg(16'h0, 16'h0, 16'h0, 28'h400006C, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INTR_RUN_TIMER1.set_space_addr("MSG", 28'h400006C);
    CFG_DIR_CQ_INTR_RUN_TIMER1.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INTR_RUN_TIMER1.set_space_addr("MEM-SB",28'h400006C);
    CFG_DIR_CQ_INTR_RUN_TIMER1.set_space_addr("MEM", 28'h400006C);
      CFG_DIR_CQ_INTR_RUN_TIMER1.set_space("MEM");
      CFG_DIR_CQ_INTR_RUN_TIMER1.set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INTR_RUN_TIMER1.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INTR_RUN_TIMER1.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INTR_RUN_TIMER1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INTR_RUN_TIMER1.set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INTR_RUN_TIMER1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INTR_RUN_TIMER1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INTR_RUN_TIMER1:dont_test") ) CFG_DIR_CQ_INTR_RUN_TIMER1.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INTR_RUN_TIMER1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INTR_RUN_TIMER1"));
      end
   CFG_DIR_CQ_INTR_RUN_TIMER1.RUN_TIMER.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_run_timer1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INTR_URGENT0";
    `endif
    CFG_DIR_CQ_INTR_URGENT0 = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT0_reg::type_id::create("CFG_DIR_CQ_INTR_URGENT0", this);
    CFG_DIR_CQ_INTR_URGENT0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000070, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INTR_URGENT0.set_space_addr("MSG", 28'h4000070);
    CFG_DIR_CQ_INTR_URGENT0.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INTR_URGENT0.set_space_addr("MEM-SB",28'h4000070);
    CFG_DIR_CQ_INTR_URGENT0.set_space_addr("MEM", 28'h4000070);
      CFG_DIR_CQ_INTR_URGENT0.set_space("MEM");
      CFG_DIR_CQ_INTR_URGENT0.set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INTR_URGENT0.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INTR_URGENT0.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INTR_URGENT0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INTR_URGENT0.set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INTR_URGENT0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INTR_URGENT0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INTR_URGENT0:dont_test") ) CFG_DIR_CQ_INTR_URGENT0.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INTR_URGENT0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INTR_URGENT0"));
      end
   CFG_DIR_CQ_INTR_URGENT0.URGENT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_urgent0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_INTR_URGENT1";
    `endif
    CFG_DIR_CQ_INTR_URGENT1 = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_INTR_URGENT1_reg::type_id::create("CFG_DIR_CQ_INTR_URGENT1", this);
    CFG_DIR_CQ_INTR_URGENT1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000074, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_INTR_URGENT1.set_space_addr("MSG", 28'h4000074);
    CFG_DIR_CQ_INTR_URGENT1.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_INTR_URGENT1.set_space_addr("MEM-SB",28'h4000074);
    CFG_DIR_CQ_INTR_URGENT1.set_space_addr("MEM", 28'h4000074);
      CFG_DIR_CQ_INTR_URGENT1.set_space("MEM");
      CFG_DIR_CQ_INTR_URGENT1.set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_INTR_URGENT1.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_INTR_URGENT1.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_INTR_URGENT1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_INTR_URGENT1.set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_INTR_URGENT1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_INTR_URGENT1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_INTR_URGENT1:dont_test") ) CFG_DIR_CQ_INTR_URGENT1.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_INTR_URGENT1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_INTR_URGENT1"));
      end
   CFG_DIR_CQ_INTR_URGENT1.URGENT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_intr_urgent1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CQ_TIMER_CTL";
    `endif
    CFG_DIR_CQ_TIMER_CTL = hqm_credit_hist_pipe_bridge_CFG_DIR_CQ_TIMER_CTL_reg::type_id::create("CFG_DIR_CQ_TIMER_CTL", this);
    CFG_DIR_CQ_TIMER_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000078, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CQ_TIMER_CTL.set_space_addr("MSG", 28'h4000078);
    CFG_DIR_CQ_TIMER_CTL.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CQ_TIMER_CTL.set_space_addr("MEM-SB",28'h4000078);
    CFG_DIR_CQ_TIMER_CTL.set_space_addr("MEM", 28'h4000078);
      CFG_DIR_CQ_TIMER_CTL.set_space("MEM");
      CFG_DIR_CQ_TIMER_CTL.set_msg_opcode("MEM-SB");
      CFG_DIR_CQ_TIMER_CTL.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CQ_TIMER_CTL.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CQ_TIMER_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CQ_TIMER_CTL.set_user_attribute("diag_reg", "0");
      CFG_DIR_CQ_TIMER_CTL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CQ_TIMER_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CQ_TIMER_CTL:dont_test") ) CFG_DIR_CQ_TIMER_CTL.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CQ_TIMER_CTL )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CQ_TIMER_CTL"));
      end
   CFG_DIR_CQ_TIMER_CTL.SAMPLE_INTERVAL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_timer_ctl.internal_f[7:0]"});
   CFG_DIR_CQ_TIMER_CTL.ENB.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_timer_ctl.internal_f[8:8]"});
   CFG_DIR_CQ_TIMER_CTL.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_cq_timer_ctl.internal_f[31:9]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_WDTO_0";
    `endif
    CFG_DIR_WDTO_0 = hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_0_reg::type_id::create("CFG_DIR_WDTO_0", this);
    CFG_DIR_WDTO_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h400007C, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_WDTO_0.set_space_addr("MSG", 28'h400007C);
    CFG_DIR_WDTO_0.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_WDTO_0.set_space_addr("MEM-SB",28'h400007C);
    CFG_DIR_WDTO_0.set_space_addr("MEM", 28'h400007C);
      CFG_DIR_WDTO_0.set_space("MEM");
      CFG_DIR_WDTO_0.set_msg_opcode("MEM-SB");
      CFG_DIR_WDTO_0.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_WDTO_0.set_bar(4'h2, "MEM-SB");
      CFG_DIR_WDTO_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_WDTO_0.set_user_attribute("diag_reg", "0");
      CFG_DIR_WDTO_0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_WDTO_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_WDTO_0:dont_test") ) CFG_DIR_WDTO_0.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_WDTO_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_WDTO_0"));
      end
   CFG_DIR_WDTO_0.WDTO.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wdto_0.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_WDTO_1";
    `endif
    CFG_DIR_WDTO_1 = hqm_credit_hist_pipe_bridge_CFG_DIR_WDTO_1_reg::type_id::create("CFG_DIR_WDTO_1", this);
    CFG_DIR_WDTO_1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000080, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_WDTO_1.set_space_addr("MSG", 28'h4000080);
    CFG_DIR_WDTO_1.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_WDTO_1.set_space_addr("MEM-SB",28'h4000080);
    CFG_DIR_WDTO_1.set_space_addr("MEM", 28'h4000080);
      CFG_DIR_WDTO_1.set_space("MEM");
      CFG_DIR_WDTO_1.set_msg_opcode("MEM-SB");
      CFG_DIR_WDTO_1.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_WDTO_1.set_bar(4'h2, "MEM-SB");
      CFG_DIR_WDTO_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_WDTO_1.set_user_attribute("diag_reg", "0");
      CFG_DIR_WDTO_1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_WDTO_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_WDTO_1:dont_test") ) CFG_DIR_WDTO_1.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_WDTO_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_WDTO_1"));
      end
   CFG_DIR_WDTO_1.WDTO.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wdto_1.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_WDRT_0";
    `endif
    CFG_DIR_WDRT_0 = hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_0_reg::type_id::create("CFG_DIR_WDRT_0", this);
    CFG_DIR_WDRT_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000084, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_WDRT_0.set_space_addr("MSG", 28'h4000084);
    CFG_DIR_WDRT_0.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_WDRT_0.set_space_addr("MEM-SB",28'h4000084);
    CFG_DIR_WDRT_0.set_space_addr("MEM", 28'h4000084);
      CFG_DIR_WDRT_0.set_space("MEM");
      CFG_DIR_WDRT_0.set_msg_opcode("MEM-SB");
      CFG_DIR_WDRT_0.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_WDRT_0.set_bar(4'h2, "MEM-SB");
      CFG_DIR_WDRT_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_WDRT_0.set_user_attribute("diag_reg", "0");
      CFG_DIR_WDRT_0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_WDRT_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_WDRT_0:dont_test") ) CFG_DIR_WDRT_0.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_WDRT_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_WDRT_0"));
      end
   CFG_DIR_WDRT_0.TIMER_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wdrt_0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_WDRT_1";
    `endif
    CFG_DIR_WDRT_1 = hqm_credit_hist_pipe_bridge_CFG_DIR_WDRT_1_reg::type_id::create("CFG_DIR_WDRT_1", this);
    CFG_DIR_WDRT_1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000088, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_WDRT_1.set_space_addr("MSG", 28'h4000088);
    CFG_DIR_WDRT_1.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_WDRT_1.set_space_addr("MEM-SB",28'h4000088);
    CFG_DIR_WDRT_1.set_space_addr("MEM", 28'h4000088);
      CFG_DIR_WDRT_1.set_space("MEM");
      CFG_DIR_WDRT_1.set_msg_opcode("MEM-SB");
      CFG_DIR_WDRT_1.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_WDRT_1.set_bar(4'h2, "MEM-SB");
      CFG_DIR_WDRT_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_WDRT_1.set_user_attribute("diag_reg", "0");
      CFG_DIR_WDRT_1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_WDRT_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_WDRT_1:dont_test") ) CFG_DIR_WDRT_1.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_WDRT_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_WDRT_1"));
      end
   CFG_DIR_WDRT_1.TIMER_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wdrt_1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_WD_DISABLE0";
    `endif
    CFG_DIR_WD_DISABLE0 = hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE0_reg::type_id::create("CFG_DIR_WD_DISABLE0", this);
    CFG_DIR_WD_DISABLE0.set_cfg(16'h0, 16'h0, 16'h0, 28'h400008C, 32, 32'b11111111111111111111111111111111);
    CFG_DIR_WD_DISABLE0.set_space_addr("MSG", 28'h400008C);
    CFG_DIR_WD_DISABLE0.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_WD_DISABLE0.set_space_addr("MEM-SB",28'h400008C);
    CFG_DIR_WD_DISABLE0.set_space_addr("MEM", 28'h400008C);
      CFG_DIR_WD_DISABLE0.set_space("MEM");
      CFG_DIR_WD_DISABLE0.set_msg_opcode("MEM-SB");
      CFG_DIR_WD_DISABLE0.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_WD_DISABLE0.set_bar(4'h2, "MEM-SB");
      CFG_DIR_WD_DISABLE0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_WD_DISABLE0.set_user_attribute("diag_reg", "0");
      CFG_DIR_WD_DISABLE0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_WD_DISABLE0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_WD_DISABLE0:dont_test") ) CFG_DIR_WD_DISABLE0.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_WD_DISABLE0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_WD_DISABLE0"));
      end
   CFG_DIR_WD_DISABLE0.WD_DISABLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_disable0.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_WD_DISABLE1";
    `endif
    CFG_DIR_WD_DISABLE1 = hqm_credit_hist_pipe_bridge_CFG_DIR_WD_DISABLE1_reg::type_id::create("CFG_DIR_WD_DISABLE1", this);
    CFG_DIR_WD_DISABLE1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000090, 32, 32'b11111111111111111111111111111111);
    CFG_DIR_WD_DISABLE1.set_space_addr("MSG", 28'h4000090);
    CFG_DIR_WD_DISABLE1.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_WD_DISABLE1.set_space_addr("MEM-SB",28'h4000090);
    CFG_DIR_WD_DISABLE1.set_space_addr("MEM", 28'h4000090);
      CFG_DIR_WD_DISABLE1.set_space("MEM");
      CFG_DIR_WD_DISABLE1.set_msg_opcode("MEM-SB");
      CFG_DIR_WD_DISABLE1.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_WD_DISABLE1.set_bar(4'h2, "MEM-SB");
      CFG_DIR_WD_DISABLE1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_WD_DISABLE1.set_user_attribute("diag_reg", "0");
      CFG_DIR_WD_DISABLE1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_WD_DISABLE1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_WD_DISABLE1:dont_test") ) CFG_DIR_WD_DISABLE1.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_WD_DISABLE1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_WD_DISABLE1"));
      end
   CFG_DIR_WD_DISABLE1.WD_DISABLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_disable1.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_WD_ENB_INTERVAL";
    `endif
    CFG_DIR_WD_ENB_INTERVAL = hqm_credit_hist_pipe_bridge_CFG_DIR_WD_ENB_INTERVAL_reg::type_id::create("CFG_DIR_WD_ENB_INTERVAL", this);
    CFG_DIR_WD_ENB_INTERVAL.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000094, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_WD_ENB_INTERVAL.set_space_addr("MSG", 28'h4000094);
    CFG_DIR_WD_ENB_INTERVAL.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_WD_ENB_INTERVAL.set_space_addr("MEM-SB",28'h4000094);
    CFG_DIR_WD_ENB_INTERVAL.set_space_addr("MEM", 28'h4000094);
      CFG_DIR_WD_ENB_INTERVAL.set_space("MEM");
      CFG_DIR_WD_ENB_INTERVAL.set_msg_opcode("MEM-SB");
      CFG_DIR_WD_ENB_INTERVAL.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_WD_ENB_INTERVAL.set_bar(4'h2, "MEM-SB");
      CFG_DIR_WD_ENB_INTERVAL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_WD_ENB_INTERVAL.set_user_attribute("diag_reg", "0");
      CFG_DIR_WD_ENB_INTERVAL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_WD_ENB_INTERVAL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_WD_ENB_INTERVAL:dont_test") ) CFG_DIR_WD_ENB_INTERVAL.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_WD_ENB_INTERVAL )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_WD_ENB_INTERVAL"));
      end
   CFG_DIR_WD_ENB_INTERVAL.SAMPLE_INTERVAL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_enb_interval.internal_f[27:0]"});
   CFG_DIR_WD_ENB_INTERVAL.ENB.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_enb_interval.internal_f[28:28]"});
   CFG_DIR_WD_ENB_INTERVAL.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_enb_interval.internal_f[31:29]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_WD_IRQ0";
    `endif
    CFG_DIR_WD_IRQ0 = hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ0_reg::type_id::create("CFG_DIR_WD_IRQ0", this);
    CFG_DIR_WD_IRQ0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000098, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_WD_IRQ0.set_space_addr("MSG", 28'h4000098);
    CFG_DIR_WD_IRQ0.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_WD_IRQ0.set_space_addr("MEM-SB",28'h4000098);
    CFG_DIR_WD_IRQ0.set_space_addr("MEM", 28'h4000098);
      CFG_DIR_WD_IRQ0.set_space("MEM");
      CFG_DIR_WD_IRQ0.set_msg_opcode("MEM-SB");
      CFG_DIR_WD_IRQ0.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_WD_IRQ0.set_bar(4'h2, "MEM-SB");
      CFG_DIR_WD_IRQ0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_WD_IRQ0.set_user_attribute("diag_reg", "0");
      CFG_DIR_WD_IRQ0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_WD_IRQ0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_WD_IRQ0:dont_test") ) CFG_DIR_WD_IRQ0.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_WD_IRQ0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_WD_IRQ0"));
      end
   CFG_DIR_WD_IRQ0.IRQ.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_irq0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_WD_IRQ1";
    `endif
    CFG_DIR_WD_IRQ1 = hqm_credit_hist_pipe_bridge_CFG_DIR_WD_IRQ1_reg::type_id::create("CFG_DIR_WD_IRQ1", this);
    CFG_DIR_WD_IRQ1.set_cfg(16'h0, 16'h0, 16'h0, 28'h400009C, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_WD_IRQ1.set_space_addr("MSG", 28'h400009C);
    CFG_DIR_WD_IRQ1.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_WD_IRQ1.set_space_addr("MEM-SB",28'h400009C);
    CFG_DIR_WD_IRQ1.set_space_addr("MEM", 28'h400009C);
      CFG_DIR_WD_IRQ1.set_space("MEM");
      CFG_DIR_WD_IRQ1.set_msg_opcode("MEM-SB");
      CFG_DIR_WD_IRQ1.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_WD_IRQ1.set_bar(4'h2, "MEM-SB");
      CFG_DIR_WD_IRQ1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_WD_IRQ1.set_user_attribute("diag_reg", "0");
      CFG_DIR_WD_IRQ1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_WD_IRQ1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_WD_IRQ1:dont_test") ) CFG_DIR_WD_IRQ1.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_WD_IRQ1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_WD_IRQ1"));
      end
   CFG_DIR_WD_IRQ1.IRQ.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_irq1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_WD_THRESHOLD";
    `endif
    CFG_DIR_WD_THRESHOLD = hqm_credit_hist_pipe_bridge_CFG_DIR_WD_THRESHOLD_reg::type_id::create("CFG_DIR_WD_THRESHOLD", this);
    CFG_DIR_WD_THRESHOLD.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000A0, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_WD_THRESHOLD.set_space_addr("MSG", 28'h40000A0);
    CFG_DIR_WD_THRESHOLD.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_WD_THRESHOLD.set_space_addr("MEM-SB",28'h40000A0);
    CFG_DIR_WD_THRESHOLD.set_space_addr("MEM", 28'h40000A0);
      CFG_DIR_WD_THRESHOLD.set_space("MEM");
      CFG_DIR_WD_THRESHOLD.set_msg_opcode("MEM-SB");
      CFG_DIR_WD_THRESHOLD.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_WD_THRESHOLD.set_bar(4'h2, "MEM-SB");
      CFG_DIR_WD_THRESHOLD.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_WD_THRESHOLD.set_user_attribute("diag_reg", "0");
      CFG_DIR_WD_THRESHOLD.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_WD_THRESHOLD.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_WD_THRESHOLD:dont_test") ) CFG_DIR_WD_THRESHOLD.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_WD_THRESHOLD )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_WD_THRESHOLD"));
      end
   CFG_DIR_WD_THRESHOLD.WD_THRESHOLD.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_threshold.internal_f[7:0]"});
   CFG_DIR_WD_THRESHOLD.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_dir_wd_threshold.internal_f[31:8]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INTR_ARMED0";
    `endif
    CFG_LDB_CQ_INTR_ARMED0 = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED0_reg::type_id::create("CFG_LDB_CQ_INTR_ARMED0", this);
    CFG_LDB_CQ_INTR_ARMED0.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000A4, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INTR_ARMED0.set_space_addr("MSG", 28'h40000A4);
    CFG_LDB_CQ_INTR_ARMED0.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INTR_ARMED0.set_space_addr("MEM-SB",28'h40000A4);
    CFG_LDB_CQ_INTR_ARMED0.set_space_addr("MEM", 28'h40000A4);
      CFG_LDB_CQ_INTR_ARMED0.set_space("MEM");
      CFG_LDB_CQ_INTR_ARMED0.set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INTR_ARMED0.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INTR_ARMED0.set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INTR_ARMED0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INTR_ARMED0.set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INTR_ARMED0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INTR_ARMED0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INTR_ARMED0:dont_test") ) CFG_LDB_CQ_INTR_ARMED0.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INTR_ARMED0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INTR_ARMED0"));
      end
   CFG_LDB_CQ_INTR_ARMED0.ARMED.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_armed0.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INTR_ARMED1";
    `endif
    CFG_LDB_CQ_INTR_ARMED1 = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_ARMED1_reg::type_id::create("CFG_LDB_CQ_INTR_ARMED1", this);
    CFG_LDB_CQ_INTR_ARMED1.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000A8, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INTR_ARMED1.set_space_addr("MSG", 28'h40000A8);
    CFG_LDB_CQ_INTR_ARMED1.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INTR_ARMED1.set_space_addr("MEM-SB",28'h40000A8);
    CFG_LDB_CQ_INTR_ARMED1.set_space_addr("MEM", 28'h40000A8);
      CFG_LDB_CQ_INTR_ARMED1.set_space("MEM");
      CFG_LDB_CQ_INTR_ARMED1.set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INTR_ARMED1.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INTR_ARMED1.set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INTR_ARMED1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INTR_ARMED1.set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INTR_ARMED1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INTR_ARMED1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INTR_ARMED1:dont_test") ) CFG_LDB_CQ_INTR_ARMED1.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INTR_ARMED1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INTR_ARMED1"));
      end
   CFG_LDB_CQ_INTR_ARMED1.ARMED.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_armed1.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INTR_EXPIRED0";
    `endif
    CFG_LDB_CQ_INTR_EXPIRED0 = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED0_reg::type_id::create("CFG_LDB_CQ_INTR_EXPIRED0", this);
    CFG_LDB_CQ_INTR_EXPIRED0.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000AC, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INTR_EXPIRED0.set_space_addr("MSG", 28'h40000AC);
    CFG_LDB_CQ_INTR_EXPIRED0.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INTR_EXPIRED0.set_space_addr("MEM-SB",28'h40000AC);
    CFG_LDB_CQ_INTR_EXPIRED0.set_space_addr("MEM", 28'h40000AC);
      CFG_LDB_CQ_INTR_EXPIRED0.set_space("MEM");
      CFG_LDB_CQ_INTR_EXPIRED0.set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INTR_EXPIRED0.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INTR_EXPIRED0.set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INTR_EXPIRED0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INTR_EXPIRED0.set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INTR_EXPIRED0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INTR_EXPIRED0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INTR_EXPIRED0:dont_test") ) CFG_LDB_CQ_INTR_EXPIRED0.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INTR_EXPIRED0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INTR_EXPIRED0"));
      end
   CFG_LDB_CQ_INTR_EXPIRED0.EXPIRED.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_expired0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INTR_EXPIRED1";
    `endif
    CFG_LDB_CQ_INTR_EXPIRED1 = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_EXPIRED1_reg::type_id::create("CFG_LDB_CQ_INTR_EXPIRED1", this);
    CFG_LDB_CQ_INTR_EXPIRED1.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000B0, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INTR_EXPIRED1.set_space_addr("MSG", 28'h40000B0);
    CFG_LDB_CQ_INTR_EXPIRED1.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INTR_EXPIRED1.set_space_addr("MEM-SB",28'h40000B0);
    CFG_LDB_CQ_INTR_EXPIRED1.set_space_addr("MEM", 28'h40000B0);
      CFG_LDB_CQ_INTR_EXPIRED1.set_space("MEM");
      CFG_LDB_CQ_INTR_EXPIRED1.set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INTR_EXPIRED1.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INTR_EXPIRED1.set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INTR_EXPIRED1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INTR_EXPIRED1.set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INTR_EXPIRED1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INTR_EXPIRED1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INTR_EXPIRED1:dont_test") ) CFG_LDB_CQ_INTR_EXPIRED1.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INTR_EXPIRED1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INTR_EXPIRED1"));
      end
   CFG_LDB_CQ_INTR_EXPIRED1.EXPIRED.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_expired1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INTR_IRQ0";
    `endif
    CFG_LDB_CQ_INTR_IRQ0 = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ0_reg::type_id::create("CFG_LDB_CQ_INTR_IRQ0", this);
    CFG_LDB_CQ_INTR_IRQ0.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000B4, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INTR_IRQ0.set_space_addr("MSG", 28'h40000B4);
    CFG_LDB_CQ_INTR_IRQ0.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INTR_IRQ0.set_space_addr("MEM-SB",28'h40000B4);
    CFG_LDB_CQ_INTR_IRQ0.set_space_addr("MEM", 28'h40000B4);
      CFG_LDB_CQ_INTR_IRQ0.set_space("MEM");
      CFG_LDB_CQ_INTR_IRQ0.set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INTR_IRQ0.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INTR_IRQ0.set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INTR_IRQ0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INTR_IRQ0.set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INTR_IRQ0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INTR_IRQ0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INTR_IRQ0:dont_test") ) CFG_LDB_CQ_INTR_IRQ0.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INTR_IRQ0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INTR_IRQ0"));
      end
   CFG_LDB_CQ_INTR_IRQ0.IRQ.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_irq0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INTR_IRQ1";
    `endif
    CFG_LDB_CQ_INTR_IRQ1 = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_IRQ1_reg::type_id::create("CFG_LDB_CQ_INTR_IRQ1", this);
    CFG_LDB_CQ_INTR_IRQ1.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000B8, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INTR_IRQ1.set_space_addr("MSG", 28'h40000B8);
    CFG_LDB_CQ_INTR_IRQ1.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INTR_IRQ1.set_space_addr("MEM-SB",28'h40000B8);
    CFG_LDB_CQ_INTR_IRQ1.set_space_addr("MEM", 28'h40000B8);
      CFG_LDB_CQ_INTR_IRQ1.set_space("MEM");
      CFG_LDB_CQ_INTR_IRQ1.set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INTR_IRQ1.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INTR_IRQ1.set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INTR_IRQ1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INTR_IRQ1.set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INTR_IRQ1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INTR_IRQ1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INTR_IRQ1:dont_test") ) CFG_LDB_CQ_INTR_IRQ1.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INTR_IRQ1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INTR_IRQ1"));
      end
   CFG_LDB_CQ_INTR_IRQ1.IRQ.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_irq1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INTR_RUN_TIMER0";
    `endif
    CFG_LDB_CQ_INTR_RUN_TIMER0 = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER0_reg::type_id::create("CFG_LDB_CQ_INTR_RUN_TIMER0", this);
    CFG_LDB_CQ_INTR_RUN_TIMER0.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000BC, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INTR_RUN_TIMER0.set_space_addr("MSG", 28'h40000BC);
    CFG_LDB_CQ_INTR_RUN_TIMER0.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INTR_RUN_TIMER0.set_space_addr("MEM-SB",28'h40000BC);
    CFG_LDB_CQ_INTR_RUN_TIMER0.set_space_addr("MEM", 28'h40000BC);
      CFG_LDB_CQ_INTR_RUN_TIMER0.set_space("MEM");
      CFG_LDB_CQ_INTR_RUN_TIMER0.set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INTR_RUN_TIMER0.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INTR_RUN_TIMER0.set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INTR_RUN_TIMER0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INTR_RUN_TIMER0.set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INTR_RUN_TIMER0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INTR_RUN_TIMER0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INTR_RUN_TIMER0:dont_test") ) CFG_LDB_CQ_INTR_RUN_TIMER0.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INTR_RUN_TIMER0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INTR_RUN_TIMER0"));
      end
   CFG_LDB_CQ_INTR_RUN_TIMER0.RUN_TIMER.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_run_timer0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INTR_RUN_TIMER1";
    `endif
    CFG_LDB_CQ_INTR_RUN_TIMER1 = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_RUN_TIMER1_reg::type_id::create("CFG_LDB_CQ_INTR_RUN_TIMER1", this);
    CFG_LDB_CQ_INTR_RUN_TIMER1.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000C0, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INTR_RUN_TIMER1.set_space_addr("MSG", 28'h40000C0);
    CFG_LDB_CQ_INTR_RUN_TIMER1.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INTR_RUN_TIMER1.set_space_addr("MEM-SB",28'h40000C0);
    CFG_LDB_CQ_INTR_RUN_TIMER1.set_space_addr("MEM", 28'h40000C0);
      CFG_LDB_CQ_INTR_RUN_TIMER1.set_space("MEM");
      CFG_LDB_CQ_INTR_RUN_TIMER1.set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INTR_RUN_TIMER1.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INTR_RUN_TIMER1.set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INTR_RUN_TIMER1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INTR_RUN_TIMER1.set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INTR_RUN_TIMER1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INTR_RUN_TIMER1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INTR_RUN_TIMER1:dont_test") ) CFG_LDB_CQ_INTR_RUN_TIMER1.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INTR_RUN_TIMER1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INTR_RUN_TIMER1"));
      end
   CFG_LDB_CQ_INTR_RUN_TIMER1.RUN_TIMER.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_run_timer1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INTR_URGENT0";
    `endif
    CFG_LDB_CQ_INTR_URGENT0 = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT0_reg::type_id::create("CFG_LDB_CQ_INTR_URGENT0", this);
    CFG_LDB_CQ_INTR_URGENT0.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000C4, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INTR_URGENT0.set_space_addr("MSG", 28'h40000C4);
    CFG_LDB_CQ_INTR_URGENT0.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INTR_URGENT0.set_space_addr("MEM-SB",28'h40000C4);
    CFG_LDB_CQ_INTR_URGENT0.set_space_addr("MEM", 28'h40000C4);
      CFG_LDB_CQ_INTR_URGENT0.set_space("MEM");
      CFG_LDB_CQ_INTR_URGENT0.set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INTR_URGENT0.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INTR_URGENT0.set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INTR_URGENT0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INTR_URGENT0.set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INTR_URGENT0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INTR_URGENT0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INTR_URGENT0:dont_test") ) CFG_LDB_CQ_INTR_URGENT0.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INTR_URGENT0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INTR_URGENT0"));
      end
   CFG_LDB_CQ_INTR_URGENT0.URGENT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_urgent0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_INTR_URGENT1";
    `endif
    CFG_LDB_CQ_INTR_URGENT1 = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_INTR_URGENT1_reg::type_id::create("CFG_LDB_CQ_INTR_URGENT1", this);
    CFG_LDB_CQ_INTR_URGENT1.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000C8, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_INTR_URGENT1.set_space_addr("MSG", 28'h40000C8);
    CFG_LDB_CQ_INTR_URGENT1.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_INTR_URGENT1.set_space_addr("MEM-SB",28'h40000C8);
    CFG_LDB_CQ_INTR_URGENT1.set_space_addr("MEM", 28'h40000C8);
      CFG_LDB_CQ_INTR_URGENT1.set_space("MEM");
      CFG_LDB_CQ_INTR_URGENT1.set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_INTR_URGENT1.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_INTR_URGENT1.set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_INTR_URGENT1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_INTR_URGENT1.set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_INTR_URGENT1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_INTR_URGENT1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_INTR_URGENT1:dont_test") ) CFG_LDB_CQ_INTR_URGENT1.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_INTR_URGENT1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_INTR_URGENT1"));
      end
   CFG_LDB_CQ_INTR_URGENT1.URGENT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_intr_urgent1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_CQ_TIMER_CTL";
    `endif
    CFG_LDB_CQ_TIMER_CTL = hqm_credit_hist_pipe_bridge_CFG_LDB_CQ_TIMER_CTL_reg::type_id::create("CFG_LDB_CQ_TIMER_CTL", this);
    CFG_LDB_CQ_TIMER_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000CC, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_CQ_TIMER_CTL.set_space_addr("MSG", 28'h40000CC);
    CFG_LDB_CQ_TIMER_CTL.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_CQ_TIMER_CTL.set_space_addr("MEM-SB",28'h40000CC);
    CFG_LDB_CQ_TIMER_CTL.set_space_addr("MEM", 28'h40000CC);
      CFG_LDB_CQ_TIMER_CTL.set_space("MEM");
      CFG_LDB_CQ_TIMER_CTL.set_msg_opcode("MEM-SB");
      CFG_LDB_CQ_TIMER_CTL.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_CQ_TIMER_CTL.set_bar(4'h2, "MEM-SB");
      CFG_LDB_CQ_TIMER_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_CQ_TIMER_CTL.set_user_attribute("diag_reg", "0");
      CFG_LDB_CQ_TIMER_CTL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_CQ_TIMER_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_CQ_TIMER_CTL:dont_test") ) CFG_LDB_CQ_TIMER_CTL.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_CQ_TIMER_CTL )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_CQ_TIMER_CTL"));
      end
   CFG_LDB_CQ_TIMER_CTL.SAMPLE_INTERVAL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_timer_ctl.internal_f[7:0]"});
   CFG_LDB_CQ_TIMER_CTL.ENB.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_timer_ctl.internal_f[8:8]"});
   CFG_LDB_CQ_TIMER_CTL.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_cq_timer_ctl.internal_f[31:9]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_WDTO_0";
    `endif
    CFG_LDB_WDTO_0 = hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_0_reg::type_id::create("CFG_LDB_WDTO_0", this);
    CFG_LDB_WDTO_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000D0, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_WDTO_0.set_space_addr("MSG", 28'h40000D0);
    CFG_LDB_WDTO_0.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_WDTO_0.set_space_addr("MEM-SB",28'h40000D0);
    CFG_LDB_WDTO_0.set_space_addr("MEM", 28'h40000D0);
      CFG_LDB_WDTO_0.set_space("MEM");
      CFG_LDB_WDTO_0.set_msg_opcode("MEM-SB");
      CFG_LDB_WDTO_0.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_WDTO_0.set_bar(4'h2, "MEM-SB");
      CFG_LDB_WDTO_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_WDTO_0.set_user_attribute("diag_reg", "0");
      CFG_LDB_WDTO_0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_WDTO_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_WDTO_0:dont_test") ) CFG_LDB_WDTO_0.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_WDTO_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_WDTO_0"));
      end
   CFG_LDB_WDTO_0.WDTO.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wdto_0.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_WDTO_1";
    `endif
    CFG_LDB_WDTO_1 = hqm_credit_hist_pipe_bridge_CFG_LDB_WDTO_1_reg::type_id::create("CFG_LDB_WDTO_1", this);
    CFG_LDB_WDTO_1.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000D4, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_WDTO_1.set_space_addr("MSG", 28'h40000D4);
    CFG_LDB_WDTO_1.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_WDTO_1.set_space_addr("MEM-SB",28'h40000D4);
    CFG_LDB_WDTO_1.set_space_addr("MEM", 28'h40000D4);
      CFG_LDB_WDTO_1.set_space("MEM");
      CFG_LDB_WDTO_1.set_msg_opcode("MEM-SB");
      CFG_LDB_WDTO_1.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_WDTO_1.set_bar(4'h2, "MEM-SB");
      CFG_LDB_WDTO_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_WDTO_1.set_user_attribute("diag_reg", "0");
      CFG_LDB_WDTO_1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_WDTO_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_WDTO_1:dont_test") ) CFG_LDB_WDTO_1.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_WDTO_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_WDTO_1"));
      end
   CFG_LDB_WDTO_1.WDTO.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wdto_1.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_WDRT_0";
    `endif
    CFG_LDB_WDRT_0 = hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_0_reg::type_id::create("CFG_LDB_WDRT_0", this);
    CFG_LDB_WDRT_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000D8, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_WDRT_0.set_space_addr("MSG", 28'h40000D8);
    CFG_LDB_WDRT_0.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_WDRT_0.set_space_addr("MEM-SB",28'h40000D8);
    CFG_LDB_WDRT_0.set_space_addr("MEM", 28'h40000D8);
      CFG_LDB_WDRT_0.set_space("MEM");
      CFG_LDB_WDRT_0.set_msg_opcode("MEM-SB");
      CFG_LDB_WDRT_0.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_WDRT_0.set_bar(4'h2, "MEM-SB");
      CFG_LDB_WDRT_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_WDRT_0.set_user_attribute("diag_reg", "0");
      CFG_LDB_WDRT_0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_WDRT_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_WDRT_0:dont_test") ) CFG_LDB_WDRT_0.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_WDRT_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_WDRT_0"));
      end
   CFG_LDB_WDRT_0.TIMER_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wdrt_0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_WDRT_1";
    `endif
    CFG_LDB_WDRT_1 = hqm_credit_hist_pipe_bridge_CFG_LDB_WDRT_1_reg::type_id::create("CFG_LDB_WDRT_1", this);
    CFG_LDB_WDRT_1.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000DC, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_WDRT_1.set_space_addr("MSG", 28'h40000DC);
    CFG_LDB_WDRT_1.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_WDRT_1.set_space_addr("MEM-SB",28'h40000DC);
    CFG_LDB_WDRT_1.set_space_addr("MEM", 28'h40000DC);
      CFG_LDB_WDRT_1.set_space("MEM");
      CFG_LDB_WDRT_1.set_msg_opcode("MEM-SB");
      CFG_LDB_WDRT_1.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_WDRT_1.set_bar(4'h2, "MEM-SB");
      CFG_LDB_WDRT_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_WDRT_1.set_user_attribute("diag_reg", "0");
      CFG_LDB_WDRT_1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_WDRT_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_WDRT_1:dont_test") ) CFG_LDB_WDRT_1.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_WDRT_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_WDRT_1"));
      end
   CFG_LDB_WDRT_1.TIMER_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wdrt_1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_WD_DISABLE0";
    `endif
    CFG_LDB_WD_DISABLE0 = hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE0_reg::type_id::create("CFG_LDB_WD_DISABLE0", this);
    CFG_LDB_WD_DISABLE0.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000E0, 32, 32'b11111111111111111111111111111111);
    CFG_LDB_WD_DISABLE0.set_space_addr("MSG", 28'h40000E0);
    CFG_LDB_WD_DISABLE0.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_WD_DISABLE0.set_space_addr("MEM-SB",28'h40000E0);
    CFG_LDB_WD_DISABLE0.set_space_addr("MEM", 28'h40000E0);
      CFG_LDB_WD_DISABLE0.set_space("MEM");
      CFG_LDB_WD_DISABLE0.set_msg_opcode("MEM-SB");
      CFG_LDB_WD_DISABLE0.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_WD_DISABLE0.set_bar(4'h2, "MEM-SB");
      CFG_LDB_WD_DISABLE0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_WD_DISABLE0.set_user_attribute("diag_reg", "0");
      CFG_LDB_WD_DISABLE0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_WD_DISABLE0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_WD_DISABLE0:dont_test") ) CFG_LDB_WD_DISABLE0.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_WD_DISABLE0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_WD_DISABLE0"));
      end
   CFG_LDB_WD_DISABLE0.WD_DISABLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_disable0.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_WD_DISABLE1";
    `endif
    CFG_LDB_WD_DISABLE1 = hqm_credit_hist_pipe_bridge_CFG_LDB_WD_DISABLE1_reg::type_id::create("CFG_LDB_WD_DISABLE1", this);
    CFG_LDB_WD_DISABLE1.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000E4, 32, 32'b11111111111111111111111111111111);
    CFG_LDB_WD_DISABLE1.set_space_addr("MSG", 28'h40000E4);
    CFG_LDB_WD_DISABLE1.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_WD_DISABLE1.set_space_addr("MEM-SB",28'h40000E4);
    CFG_LDB_WD_DISABLE1.set_space_addr("MEM", 28'h40000E4);
      CFG_LDB_WD_DISABLE1.set_space("MEM");
      CFG_LDB_WD_DISABLE1.set_msg_opcode("MEM-SB");
      CFG_LDB_WD_DISABLE1.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_WD_DISABLE1.set_bar(4'h2, "MEM-SB");
      CFG_LDB_WD_DISABLE1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_WD_DISABLE1.set_user_attribute("diag_reg", "0");
      CFG_LDB_WD_DISABLE1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_WD_DISABLE1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_WD_DISABLE1:dont_test") ) CFG_LDB_WD_DISABLE1.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_WD_DISABLE1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_WD_DISABLE1"));
      end
   CFG_LDB_WD_DISABLE1.WD_DISABLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_disable1.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_WD_ENB_INTERVAL";
    `endif
    CFG_LDB_WD_ENB_INTERVAL = hqm_credit_hist_pipe_bridge_CFG_LDB_WD_ENB_INTERVAL_reg::type_id::create("CFG_LDB_WD_ENB_INTERVAL", this);
    CFG_LDB_WD_ENB_INTERVAL.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000E8, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_WD_ENB_INTERVAL.set_space_addr("MSG", 28'h40000E8);
    CFG_LDB_WD_ENB_INTERVAL.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_WD_ENB_INTERVAL.set_space_addr("MEM-SB",28'h40000E8);
    CFG_LDB_WD_ENB_INTERVAL.set_space_addr("MEM", 28'h40000E8);
      CFG_LDB_WD_ENB_INTERVAL.set_space("MEM");
      CFG_LDB_WD_ENB_INTERVAL.set_msg_opcode("MEM-SB");
      CFG_LDB_WD_ENB_INTERVAL.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_WD_ENB_INTERVAL.set_bar(4'h2, "MEM-SB");
      CFG_LDB_WD_ENB_INTERVAL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_WD_ENB_INTERVAL.set_user_attribute("diag_reg", "0");
      CFG_LDB_WD_ENB_INTERVAL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_WD_ENB_INTERVAL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_WD_ENB_INTERVAL:dont_test") ) CFG_LDB_WD_ENB_INTERVAL.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_WD_ENB_INTERVAL )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_WD_ENB_INTERVAL"));
      end
   CFG_LDB_WD_ENB_INTERVAL.SAMPLE_INTERVAL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_enb_interval.internal_f[27:0]"});
   CFG_LDB_WD_ENB_INTERVAL.ENB.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_enb_interval.internal_f[28:28]"});
   CFG_LDB_WD_ENB_INTERVAL.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_enb_interval.internal_f[31:29]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_WD_IRQ0";
    `endif
    CFG_LDB_WD_IRQ0 = hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ0_reg::type_id::create("CFG_LDB_WD_IRQ0", this);
    CFG_LDB_WD_IRQ0.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000EC, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_WD_IRQ0.set_space_addr("MSG", 28'h40000EC);
    CFG_LDB_WD_IRQ0.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_WD_IRQ0.set_space_addr("MEM-SB",28'h40000EC);
    CFG_LDB_WD_IRQ0.set_space_addr("MEM", 28'h40000EC);
      CFG_LDB_WD_IRQ0.set_space("MEM");
      CFG_LDB_WD_IRQ0.set_msg_opcode("MEM-SB");
      CFG_LDB_WD_IRQ0.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_WD_IRQ0.set_bar(4'h2, "MEM-SB");
      CFG_LDB_WD_IRQ0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_WD_IRQ0.set_user_attribute("diag_reg", "0");
      CFG_LDB_WD_IRQ0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_WD_IRQ0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_WD_IRQ0:dont_test") ) CFG_LDB_WD_IRQ0.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_WD_IRQ0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_WD_IRQ0"));
      end
   CFG_LDB_WD_IRQ0.IRQ.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_irq0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_WD_IRQ1";
    `endif
    CFG_LDB_WD_IRQ1 = hqm_credit_hist_pipe_bridge_CFG_LDB_WD_IRQ1_reg::type_id::create("CFG_LDB_WD_IRQ1", this);
    CFG_LDB_WD_IRQ1.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000F0, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_WD_IRQ1.set_space_addr("MSG", 28'h40000F0);
    CFG_LDB_WD_IRQ1.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_WD_IRQ1.set_space_addr("MEM-SB",28'h40000F0);
    CFG_LDB_WD_IRQ1.set_space_addr("MEM", 28'h40000F0);
      CFG_LDB_WD_IRQ1.set_space("MEM");
      CFG_LDB_WD_IRQ1.set_msg_opcode("MEM-SB");
      CFG_LDB_WD_IRQ1.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_WD_IRQ1.set_bar(4'h2, "MEM-SB");
      CFG_LDB_WD_IRQ1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_WD_IRQ1.set_user_attribute("diag_reg", "0");
      CFG_LDB_WD_IRQ1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_WD_IRQ1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_WD_IRQ1:dont_test") ) CFG_LDB_WD_IRQ1.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_WD_IRQ1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_WD_IRQ1"));
      end
   CFG_LDB_WD_IRQ1.IRQ.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_irq1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_WD_THRESHOLD";
    `endif
    CFG_LDB_WD_THRESHOLD = hqm_credit_hist_pipe_bridge_CFG_LDB_WD_THRESHOLD_reg::type_id::create("CFG_LDB_WD_THRESHOLD", this);
    CFG_LDB_WD_THRESHOLD.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000F4, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_WD_THRESHOLD.set_space_addr("MSG", 28'h40000F4);
    CFG_LDB_WD_THRESHOLD.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_WD_THRESHOLD.set_space_addr("MEM-SB",28'h40000F4);
    CFG_LDB_WD_THRESHOLD.set_space_addr("MEM", 28'h40000F4);
      CFG_LDB_WD_THRESHOLD.set_space("MEM");
      CFG_LDB_WD_THRESHOLD.set_msg_opcode("MEM-SB");
      CFG_LDB_WD_THRESHOLD.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_WD_THRESHOLD.set_bar(4'h2, "MEM-SB");
      CFG_LDB_WD_THRESHOLD.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_WD_THRESHOLD.set_user_attribute("diag_reg", "0");
      CFG_LDB_WD_THRESHOLD.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_WD_THRESHOLD.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_WD_THRESHOLD:dont_test") ) CFG_LDB_WD_THRESHOLD.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_WD_THRESHOLD )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_WD_THRESHOLD"));
      end
   CFG_LDB_WD_THRESHOLD.WD_THRESHOLD.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_threshold.internal_f[7:0]"});
   CFG_LDB_WD_THRESHOLD.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_ldb_wd_threshold.internal_f[31:8]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RETN_ZERO";
    `endif
    CFG_RETN_ZERO = hqm_credit_hist_pipe_bridge_CFG_RETN_ZERO_reg::type_id::create("CFG_RETN_ZERO", this);
    CFG_RETN_ZERO.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000F8, 32, 32'b00000000000000000000000000000000);
    CFG_RETN_ZERO.set_space_addr("MSG", 28'h40000F8);
    CFG_RETN_ZERO.set_space_addr("msg_bus_port", 'h21);
    CFG_RETN_ZERO.set_space_addr("MEM-SB",28'h40000F8);
    CFG_RETN_ZERO.set_space_addr("MEM", 28'h40000F8);
      CFG_RETN_ZERO.set_space("MEM");
      CFG_RETN_ZERO.set_msg_opcode("MEM-SB");
      CFG_RETN_ZERO.set_fid(4'h0, "MEM-SB");
  	CFG_RETN_ZERO.set_bar(4'h2, "MEM-SB");
      CFG_RETN_ZERO.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RETN_ZERO.set_user_attribute("diag_reg", "0");
      CFG_RETN_ZERO.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RETN_ZERO.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RETN_ZERO:dont_test") ) CFG_RETN_ZERO.set_test_reg(1'b0);
      if (!add_reg( CFG_RETN_ZERO )) begin
        `sla_error(get_name(), ("Could not add register CFG_RETN_ZERO"));
      end
   CFG_RETN_ZERO.RETURN_ZERO.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_retn_zero.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SYNDROME_00";
    `endif
    CFG_SYNDROME_00 = hqm_credit_hist_pipe_bridge_CFG_SYNDROME_00_reg::type_id::create("CFG_SYNDROME_00", this);
    CFG_SYNDROME_00.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000FC, 32, 32'b00000000000000000000000000000000);
    CFG_SYNDROME_00.set_space_addr("MSG", 28'h40000FC);
    CFG_SYNDROME_00.set_space_addr("msg_bus_port", 'h21);
    CFG_SYNDROME_00.set_space_addr("MEM-SB",28'h40000FC);
    CFG_SYNDROME_00.set_space_addr("MEM", 28'h40000FC);
      CFG_SYNDROME_00.set_space("MEM");
      CFG_SYNDROME_00.set_msg_opcode("MEM-SB");
      CFG_SYNDROME_00.set_fid(4'h0, "MEM-SB");
  	CFG_SYNDROME_00.set_bar(4'h2, "MEM-SB");
      CFG_SYNDROME_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SYNDROME_00.set_user_attribute("diag_reg", "0");
      CFG_SYNDROME_00.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SYNDROME_00.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SYNDROME_00:dont_test") ) CFG_SYNDROME_00.set_test_reg(1'b0);
      if (!add_reg( CFG_SYNDROME_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SYNDROME_00"));
      end
   CFG_SYNDROME_00.SYNDDATA.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
   CFG_SYNDROME_00.SYNDTYPE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
   CFG_SYNDROME_00.SYNDVALID.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_VERSION";
    `endif
    CFG_UNIT_VERSION = hqm_credit_hist_pipe_bridge_CFG_UNIT_VERSION_reg::type_id::create("CFG_UNIT_VERSION", this);
    CFG_UNIT_VERSION.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000100, 32, 32'b00001000000000000000000000000000);
    CFG_UNIT_VERSION.set_space_addr("MSG", 28'h4000100);
    CFG_UNIT_VERSION.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_VERSION.set_space_addr("MEM-SB",28'h4000100);
    CFG_UNIT_VERSION.set_space_addr("MEM", 28'h4000100);
      CFG_UNIT_VERSION.set_space("MEM");
      CFG_UNIT_VERSION.set_msg_opcode("MEM-SB");
      CFG_UNIT_VERSION.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_VERSION.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_VERSION.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_VERSION.set_user_attribute("diag_reg", "0");
      CFG_UNIT_VERSION.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_UNIT_VERSION.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_VERSION.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_VERSION:dont_test") ) CFG_UNIT_VERSION.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_VERSION )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_VERSION"));
      end
   CFG_UNIT_VERSION.UNIT_VERSION.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_version.status[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_SMON_COMPARE0";
    `endif
    CFG_CHP_SMON_COMPARE0 = hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE0_reg::type_id::create("CFG_CHP_SMON_COMPARE0", this);
    CFG_CHP_SMON_COMPARE0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000000, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_SMON_COMPARE0.set_space_addr("MSG", 32'h0C000000);
    CFG_CHP_SMON_COMPARE0.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_SMON_COMPARE0.set_space_addr("MEM-SB",28'hC000000);
    CFG_CHP_SMON_COMPARE0.set_space_addr("MEM", 32'h0C000000);
      CFG_CHP_SMON_COMPARE0.set_space("MEM");
      CFG_CHP_SMON_COMPARE0.set_msg_opcode("MEM-SB");
      CFG_CHP_SMON_COMPARE0.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_SMON_COMPARE0.set_bar(4'h2, "MEM-SB");
      CFG_CHP_SMON_COMPARE0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_SMON_COMPARE0.set_user_attribute("diag_reg", "0");
      CFG_CHP_SMON_COMPARE0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CHP_SMON_COMPARE0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_SMON_COMPARE0:dont_test") ) CFG_CHP_SMON_COMPARE0.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_SMON_COMPARE0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_SMON_COMPARE0"));
      end
   CFG_CHP_SMON_COMPARE0.COMPARE0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_comp0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_SMON_COMPARE1";
    `endif
    CFG_CHP_SMON_COMPARE1 = hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_COMPARE1_reg::type_id::create("CFG_CHP_SMON_COMPARE1", this);
    CFG_CHP_SMON_COMPARE1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000004, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_SMON_COMPARE1.set_space_addr("MSG", 32'h0C000004);
    CFG_CHP_SMON_COMPARE1.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_SMON_COMPARE1.set_space_addr("MEM-SB",28'hC000004);
    CFG_CHP_SMON_COMPARE1.set_space_addr("MEM", 32'h0C000004);
      CFG_CHP_SMON_COMPARE1.set_space("MEM");
      CFG_CHP_SMON_COMPARE1.set_msg_opcode("MEM-SB");
      CFG_CHP_SMON_COMPARE1.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_SMON_COMPARE1.set_bar(4'h2, "MEM-SB");
      CFG_CHP_SMON_COMPARE1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_SMON_COMPARE1.set_user_attribute("diag_reg", "0");
      CFG_CHP_SMON_COMPARE1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CHP_SMON_COMPARE1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_SMON_COMPARE1:dont_test") ) CFG_CHP_SMON_COMPARE1.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_SMON_COMPARE1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_SMON_COMPARE1"));
      end
   CFG_CHP_SMON_COMPARE1.COMPARE1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_comp1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_SMON_CONFIGURATION0";
    `endif
    CFG_CHP_SMON_CONFIGURATION0 = hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION0_reg::type_id::create("CFG_CHP_SMON_CONFIGURATION0", this);
    CFG_CHP_SMON_CONFIGURATION0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000008, 32, 32'b01000000000000000000000000000000);
    CFG_CHP_SMON_CONFIGURATION0.set_space_addr("MSG", 32'h0C000008);
    CFG_CHP_SMON_CONFIGURATION0.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_SMON_CONFIGURATION0.set_space_addr("MEM-SB",28'hC000008);
    CFG_CHP_SMON_CONFIGURATION0.set_space_addr("MEM", 32'h0C000008);
      CFG_CHP_SMON_CONFIGURATION0.set_space("MEM");
      CFG_CHP_SMON_CONFIGURATION0.set_msg_opcode("MEM-SB");
      CFG_CHP_SMON_CONFIGURATION0.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_SMON_CONFIGURATION0.set_bar(4'h2, "MEM-SB");
      CFG_CHP_SMON_CONFIGURATION0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_SMON_CONFIGURATION0.set_user_attribute("diag_reg", "0");
      CFG_CHP_SMON_CONFIGURATION0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CHP_SMON_CONFIGURATION0.set_user_attribute("SubnetPortID", "8'h00");
      CFG_CHP_SMON_CONFIGURATION0.set_test_reg(0);
      if ( $test$plusargs("CFG_CHP_SMON_CONFIGURATION0:dont_test") ) CFG_CHP_SMON_CONFIGURATION0.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_SMON_CONFIGURATION0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_SMON_CONFIGURATION0"));
      end
   CFG_CHP_SMON_CONFIGURATION0.SMON_ENABLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[0:0]"});
   CFG_CHP_SMON_CONFIGURATION0.SMON_0TRIGGER_ENABLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[1:1]"});
   CFG_CHP_SMON_CONFIGURATION0.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[3:2]"});
   CFG_CHP_SMON_CONFIGURATION0.SMON0_FUNCTION.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[6:4]"});
   CFG_CHP_SMON_CONFIGURATION0.SMON0_FUNCTION_COMPARE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[7:7]"});
   CFG_CHP_SMON_CONFIGURATION0.SMON1_FUNCTION.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[10:8]"});
   CFG_CHP_SMON_CONFIGURATION0.SMON1_FUNCTION_COMPARE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[11:11]"});
   CFG_CHP_SMON_CONFIGURATION0.SMON_MODE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[15:12]"});
   CFG_CHP_SMON_CONFIGURATION0.STOPCOUNTEROVFL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[16:16]"});
   CFG_CHP_SMON_CONFIGURATION0.INTCOUNTEROVFL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[17:17]"});
   CFG_CHP_SMON_CONFIGURATION0.STATCOUNTER0OVFL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[18:18]"});
   CFG_CHP_SMON_CONFIGURATION0.STATCOUNTER1OVFL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[19:19]"});
   CFG_CHP_SMON_CONFIGURATION0.STOPTIMEROVFL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[20:20]"});
   CFG_CHP_SMON_CONFIGURATION0.INTTIMEROVFL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[21:21]"});
   CFG_CHP_SMON_CONFIGURATION0.STATTIMEROVFL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[22:22]"});
   CFG_CHP_SMON_CONFIGURATION0.RSVZ1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[23:23]"});
   CFG_CHP_SMON_CONFIGURATION0.TIMER_PRESCALE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[28:24]"});
   CFG_CHP_SMON_CONFIGURATION0.RSVZ2.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg0_q[29:29]"});
   CFG_CHP_SMON_CONFIGURATION0.VERSION.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_SMON_CONFIGURATION1";
    `endif
    CFG_CHP_SMON_CONFIGURATION1 = hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_CONFIGURATION1_reg::type_id::create("CFG_CHP_SMON_CONFIGURATION1", this);
    CFG_CHP_SMON_CONFIGURATION1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00000C, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_SMON_CONFIGURATION1.set_space_addr("MSG", 32'h0C00000C);
    CFG_CHP_SMON_CONFIGURATION1.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_SMON_CONFIGURATION1.set_space_addr("MEM-SB",28'hC00000C);
    CFG_CHP_SMON_CONFIGURATION1.set_space_addr("MEM", 32'h0C00000C);
      CFG_CHP_SMON_CONFIGURATION1.set_space("MEM");
      CFG_CHP_SMON_CONFIGURATION1.set_msg_opcode("MEM-SB");
      CFG_CHP_SMON_CONFIGURATION1.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_SMON_CONFIGURATION1.set_bar(4'h2, "MEM-SB");
      CFG_CHP_SMON_CONFIGURATION1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_SMON_CONFIGURATION1.set_user_attribute("diag_reg", "0");
      CFG_CHP_SMON_CONFIGURATION1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CHP_SMON_CONFIGURATION1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_SMON_CONFIGURATION1:dont_test") ) CFG_CHP_SMON_CONFIGURATION1.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_SMON_CONFIGURATION1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_SMON_CONFIGURATION1"));
      end
   CFG_CHP_SMON_CONFIGURATION1.MODE0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg1_q[7:0]"});
   CFG_CHP_SMON_CONFIGURATION1.MODE1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg1_q[15:8]"});
   CFG_CHP_SMON_CONFIGURATION1.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cfg1_q[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_SMON_ACTIVITYCOUNTER0";
    `endif
    CFG_CHP_SMON_ACTIVITYCOUNTER0 = hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER0_reg::type_id::create("CFG_CHP_SMON_ACTIVITYCOUNTER0", this);
    CFG_CHP_SMON_ACTIVITYCOUNTER0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000010, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_SMON_ACTIVITYCOUNTER0.set_space_addr("MSG", 32'h0C000010);
    CFG_CHP_SMON_ACTIVITYCOUNTER0.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_SMON_ACTIVITYCOUNTER0.set_space_addr("MEM-SB",28'hC000010);
    CFG_CHP_SMON_ACTIVITYCOUNTER0.set_space_addr("MEM", 32'h0C000010);
      CFG_CHP_SMON_ACTIVITYCOUNTER0.set_space("MEM");
      CFG_CHP_SMON_ACTIVITYCOUNTER0.set_msg_opcode("MEM-SB");
      CFG_CHP_SMON_ACTIVITYCOUNTER0.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_SMON_ACTIVITYCOUNTER0.set_bar(4'h2, "MEM-SB");
      CFG_CHP_SMON_ACTIVITYCOUNTER0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_SMON_ACTIVITYCOUNTER0.set_user_attribute("diag_reg", "0");
      CFG_CHP_SMON_ACTIVITYCOUNTER0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CHP_SMON_ACTIVITYCOUNTER0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_SMON_ACTIVITYCOUNTER0:dont_test") ) CFG_CHP_SMON_ACTIVITYCOUNTER0.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_SMON_ACTIVITYCOUNTER0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_SMON_ACTIVITYCOUNTER0"));
      end
   CFG_CHP_SMON_ACTIVITYCOUNTER0.COUNTER0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cnt0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_SMON_ACTIVITYCOUNTER1";
    `endif
    CFG_CHP_SMON_ACTIVITYCOUNTER1 = hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_ACTIVITYCOUNTER1_reg::type_id::create("CFG_CHP_SMON_ACTIVITYCOUNTER1", this);
    CFG_CHP_SMON_ACTIVITYCOUNTER1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000014, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_SMON_ACTIVITYCOUNTER1.set_space_addr("MSG", 32'h0C000014);
    CFG_CHP_SMON_ACTIVITYCOUNTER1.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_SMON_ACTIVITYCOUNTER1.set_space_addr("MEM-SB",28'hC000014);
    CFG_CHP_SMON_ACTIVITYCOUNTER1.set_space_addr("MEM", 32'h0C000014);
      CFG_CHP_SMON_ACTIVITYCOUNTER1.set_space("MEM");
      CFG_CHP_SMON_ACTIVITYCOUNTER1.set_msg_opcode("MEM-SB");
      CFG_CHP_SMON_ACTIVITYCOUNTER1.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_SMON_ACTIVITYCOUNTER1.set_bar(4'h2, "MEM-SB");
      CFG_CHP_SMON_ACTIVITYCOUNTER1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_SMON_ACTIVITYCOUNTER1.set_user_attribute("diag_reg", "0");
      CFG_CHP_SMON_ACTIVITYCOUNTER1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CHP_SMON_ACTIVITYCOUNTER1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_SMON_ACTIVITYCOUNTER1:dont_test") ) CFG_CHP_SMON_ACTIVITYCOUNTER1.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_SMON_ACTIVITYCOUNTER1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_SMON_ACTIVITYCOUNTER1"));
      end
   CFG_CHP_SMON_ACTIVITYCOUNTER1.COUNTER1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_cnt1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_SMON_MAXIMUM_TIMER";
    `endif
    CFG_CHP_SMON_MAXIMUM_TIMER = hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_MAXIMUM_TIMER_reg::type_id::create("CFG_CHP_SMON_MAXIMUM_TIMER", this);
    CFG_CHP_SMON_MAXIMUM_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000018, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_SMON_MAXIMUM_TIMER.set_space_addr("MSG", 32'h0C000018);
    CFG_CHP_SMON_MAXIMUM_TIMER.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_SMON_MAXIMUM_TIMER.set_space_addr("MEM-SB",28'hC000018);
    CFG_CHP_SMON_MAXIMUM_TIMER.set_space_addr("MEM", 32'h0C000018);
      CFG_CHP_SMON_MAXIMUM_TIMER.set_space("MEM");
      CFG_CHP_SMON_MAXIMUM_TIMER.set_msg_opcode("MEM-SB");
      CFG_CHP_SMON_MAXIMUM_TIMER.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_SMON_MAXIMUM_TIMER.set_bar(4'h2, "MEM-SB");
      CFG_CHP_SMON_MAXIMUM_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_SMON_MAXIMUM_TIMER.set_user_attribute("diag_reg", "0");
      CFG_CHP_SMON_MAXIMUM_TIMER.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CHP_SMON_MAXIMUM_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_SMON_MAXIMUM_TIMER:dont_test") ) CFG_CHP_SMON_MAXIMUM_TIMER.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_SMON_MAXIMUM_TIMER )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_SMON_MAXIMUM_TIMER"));
      end
   CFG_CHP_SMON_MAXIMUM_TIMER.MAXVALUE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_maxval_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CHP_SMON_TIMER";
    `endif
    CFG_CHP_SMON_TIMER = hqm_credit_hist_pipe_bridge_CFG_CHP_SMON_TIMER_reg::type_id::create("CFG_CHP_SMON_TIMER", this);
    CFG_CHP_SMON_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00001C, 32, 32'b00000000000000000000000000000000);
    CFG_CHP_SMON_TIMER.set_space_addr("MSG", 32'h0C00001C);
    CFG_CHP_SMON_TIMER.set_space_addr("msg_bus_port", 'h21);
    CFG_CHP_SMON_TIMER.set_space_addr("MEM-SB",28'hC00001C);
    CFG_CHP_SMON_TIMER.set_space_addr("MEM", 32'h0C00001C);
      CFG_CHP_SMON_TIMER.set_space("MEM");
      CFG_CHP_SMON_TIMER.set_msg_opcode("MEM-SB");
      CFG_CHP_SMON_TIMER.set_fid(4'h0, "MEM-SB");
  	CFG_CHP_SMON_TIMER.set_bar(4'h2, "MEM-SB");
      CFG_CHP_SMON_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CHP_SMON_TIMER.set_user_attribute("diag_reg", "0");
      CFG_CHP_SMON_TIMER.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CHP_SMON_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CHP_SMON_TIMER:dont_test") ) CFG_CHP_SMON_TIMER.set_test_reg(1'b0);
      if (!add_reg( CFG_CHP_SMON_TIMER )) begin
        `sla_error(get_name(), ("Could not add register CFG_CHP_SMON_TIMER"));
      end
   CFG_CHP_SMON_TIMER.TIMER.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_chp_smon.i_hqm_AW_smon.reg_smon_timer_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_DIAGNOSTIC_00";
    `endif
    CFG_CONTROL_DIAGNOSTIC_00 = hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_00_reg::type_id::create("CFG_CONTROL_DIAGNOSTIC_00", this);
    CFG_CONTROL_DIAGNOSTIC_00.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000020, 32, 32'b00000010010101010101000101000101);
    CFG_CONTROL_DIAGNOSTIC_00.set_space_addr("MSG", 32'h0C000020);
    CFG_CONTROL_DIAGNOSTIC_00.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_DIAGNOSTIC_00.set_space_addr("MEM-SB",28'hC000020);
    CFG_CONTROL_DIAGNOSTIC_00.set_space_addr("MEM", 32'h0C000020);
      CFG_CONTROL_DIAGNOSTIC_00.set_space("MEM");
      CFG_CONTROL_DIAGNOSTIC_00.set_msg_opcode("MEM-SB");
      CFG_CONTROL_DIAGNOSTIC_00.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_DIAGNOSTIC_00.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_DIAGNOSTIC_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_DIAGNOSTIC_00.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_DIAGNOSTIC_00.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_DIAGNOSTIC_00.set_user_attribute("SubnetPortID", "8'h00");
      CFG_CONTROL_DIAGNOSTIC_00.set_test_reg(0);
      if ( $test$plusargs("CFG_CONTROL_DIAGNOSTIC_00:dont_test") ) CFG_CONTROL_DIAGNOSTIC_00.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_DIAGNOSTIC_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_DIAGNOSTIC_00"));
      end
   CFG_CONTROL_DIAGNOSTIC_00.CFG_RX_FIFO_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[0:0]"});
   CFG_CONTROL_DIAGNOSTIC_00.CFG_RX_FIFO_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[1:1]"});
   CFG_CONTROL_DIAGNOSTIC_00.AQED_CHP_SCH_RX_SYNC_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[2:2]"});
   CFG_CONTROL_DIAGNOSTIC_00.AQED_CHP_SCH_RX_SYNC_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[3:3]"});
   CFG_CONTROL_DIAGNOSTIC_00.STATUS_NOT_USED_BIT_4.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[4:4]"});
   CFG_CONTROL_DIAGNOSTIC_00.STATUS_NOT_USED_BIT_5.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[5:5]"});
   CFG_CONTROL_DIAGNOSTIC_00.QED_CHP_SCH_RX_SYNC_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[6:6]"});
   CFG_CONTROL_DIAGNOSTIC_00.QED_CHP_SCH_RX_SYNC_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[7:7]"});
   CFG_CONTROL_DIAGNOSTIC_00.QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[8:8]"});
   CFG_CONTROL_DIAGNOSTIC_00.QED_CHP_SCH_FLID_RET_RX_SYNC_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[9:9]"});
   CFG_CONTROL_DIAGNOSTIC_00.STATUS_NOT_USE_BIT_10.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[10:10]"});
   CFG_CONTROL_DIAGNOSTIC_00.STATUS_NOT_USE_BIT_11.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[11:11]"});
   CFG_CONTROL_DIAGNOSTIC_00.HCW_ENQ_W_RX_SYNC_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[12:12]"});
   CFG_CONTROL_DIAGNOSTIC_00.HCW_ENQ_W_RX_SYNC_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[13:13]"});
   CFG_CONTROL_DIAGNOSTIC_00.FIFO_OUTBOUND_HCW_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[14:14]"});
   CFG_CONTROL_DIAGNOSTIC_00.FIFO_OUTBOUND_HCW_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[15:15]"});
   CFG_CONTROL_DIAGNOSTIC_00.FIFO_CHP_LSP_AP_CMP_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[16:16]"});
   CFG_CONTROL_DIAGNOSTIC_00.FIFO_CHP_LSP_AP_CMP_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[17:17]"});
   CFG_CONTROL_DIAGNOSTIC_00.FIFO_CHP_LSP_TOK_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[18:18]"});
   CFG_CONTROL_DIAGNOSTIC_00.FIFO_CHP_LSP_TOK_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[19:19]"});
   CFG_CONTROL_DIAGNOSTIC_00.FIFO_CHP_ROP_HCW_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[20:20]"});
   CFG_CONTROL_DIAGNOSTIC_00.FIFO_CHP_ROP_HCW_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[21:21]"});
   CFG_CONTROL_DIAGNOSTIC_00.FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[22:22]"});
   CFG_CONTROL_DIAGNOSTIC_00.FIFO_CHP_SYS_TX_FIFO_MEM_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[23:23]"});
   CFG_CONTROL_DIAGNOSTIC_00.FREELIST_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[24:24]"});
   CFG_CONTROL_DIAGNOSTIC_00.FREELIST_FULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_00.internal_f[25:25]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_DIAGNOSTIC_01";
    `endif
    CFG_CONTROL_DIAGNOSTIC_01 = hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_01_reg::type_id::create("CFG_CONTROL_DIAGNOSTIC_01", this);
    CFG_CONTROL_DIAGNOSTIC_01.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000024, 32, 32'b00000000000000000000000000000000);
    CFG_CONTROL_DIAGNOSTIC_01.set_space_addr("MSG", 32'h0C000024);
    CFG_CONTROL_DIAGNOSTIC_01.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_DIAGNOSTIC_01.set_space_addr("MEM-SB",28'hC000024);
    CFG_CONTROL_DIAGNOSTIC_01.set_space_addr("MEM", 32'h0C000024);
      CFG_CONTROL_DIAGNOSTIC_01.set_space("MEM");
      CFG_CONTROL_DIAGNOSTIC_01.set_msg_opcode("MEM-SB");
      CFG_CONTROL_DIAGNOSTIC_01.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_DIAGNOSTIC_01.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_DIAGNOSTIC_01.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_DIAGNOSTIC_01.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_DIAGNOSTIC_01.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_DIAGNOSTIC_01.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_DIAGNOSTIC_01:dont_test") ) CFG_CONTROL_DIAGNOSTIC_01.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_DIAGNOSTIC_01 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_DIAGNOSTIC_01"));
      end
   CFG_CONTROL_DIAGNOSTIC_01.INT_STATUS_IN.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[1:0]"});
   CFG_CONTROL_DIAGNOSTIC_01.INT_STATUS_OUT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[3:2]"});
   CFG_CONTROL_DIAGNOSTIC_01.LDB_REPLAY_DB_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[5:4]"});
   CFG_CONTROL_DIAGNOSTIC_01.DIR_REPLAY_DB_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[7:6]"});
   CFG_CONTROL_DIAGNOSTIC_01.DQED_SCH_DB_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[9:8]"});
   CFG_CONTROL_DIAGNOSTIC_01.WD_TX_SYNC_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[11:10]"});
   CFG_CONTROL_DIAGNOSTIC_01.EGRESS_TX_SYNC_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[13:12]"});
   CFG_CONTROL_DIAGNOSTIC_01.CHP_LSP_CMP_TX_SYNC_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[15:14]"});
   CFG_CONTROL_DIAGNOSTIC_01.CHP_LSP_TOKEN_TX_SYNC_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[17:16]"});
   CFG_CONTROL_DIAGNOSTIC_01.CHP_ROP_HCW_TX_SYNC_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[19:18]"});
   CFG_CONTROL_DIAGNOSTIC_01.WD_CLKREQ_SYNC2INP_INV.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[20:20]"});
   CFG_CONTROL_DIAGNOSTIC_01.AQED_CHP_SCH_RX_SYNC_IDLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[21:21]"});
   CFG_CONTROL_DIAGNOSTIC_01.ATQ2ATM_RX_SYNC_IDLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[22:22]"});
   CFG_CONTROL_DIAGNOSTIC_01.QED_CHP_SCH_RX_SYNC_IDLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[23:23]"});
   CFG_CONTROL_DIAGNOSTIC_01.DQED_CHP_SCH_RX_SYNC_IDLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[24:24]"});
   CFG_CONTROL_DIAGNOSTIC_01.LDB_PP_HCW_ENQ_RX_SYNC_IDLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[25:25]"});
   CFG_CONTROL_DIAGNOSTIC_01.DIR_PP_HCW_ENQ_RX_SYNC_IDLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[26:26]"});
   CFG_CONTROL_DIAGNOSTIC_01.ROP_CLK_IDLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[27:27]"});
   CFG_CONTROL_DIAGNOSTIC_01.CIAL_TX_SYNC_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[29:28]"});
   CFG_CONTROL_DIAGNOSTIC_01.INT_IDLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_01.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_DIAGNOSTIC_02";
    `endif
    CFG_CONTROL_DIAGNOSTIC_02 = hqm_credit_hist_pipe_bridge_CFG_CONTROL_DIAGNOSTIC_02_reg::type_id::create("CFG_CONTROL_DIAGNOSTIC_02", this);
    CFG_CONTROL_DIAGNOSTIC_02.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000028, 32, 32'b10000000000000000001010101010101);
    CFG_CONTROL_DIAGNOSTIC_02.set_space_addr("MSG", 32'h0C000028);
    CFG_CONTROL_DIAGNOSTIC_02.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_DIAGNOSTIC_02.set_space_addr("MEM-SB",28'hC000028);
    CFG_CONTROL_DIAGNOSTIC_02.set_space_addr("MEM", 32'h0C000028);
      CFG_CONTROL_DIAGNOSTIC_02.set_space("MEM");
      CFG_CONTROL_DIAGNOSTIC_02.set_msg_opcode("MEM-SB");
      CFG_CONTROL_DIAGNOSTIC_02.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_DIAGNOSTIC_02.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_DIAGNOSTIC_02.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_DIAGNOSTIC_02.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_DIAGNOSTIC_02.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_DIAGNOSTIC_02.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_DIAGNOSTIC_02:dont_test") ) CFG_CONTROL_DIAGNOSTIC_02.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_DIAGNOSTIC_02 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_DIAGNOSTIC_02"));
      end
   CFG_CONTROL_DIAGNOSTIC_02.EGRESS_CREDIT_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[0:0]"});
   CFG_CONTROL_DIAGNOSTIC_02.EGRESS_CREDIT_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[1:1]"});
   CFG_CONTROL_DIAGNOSTIC_02.CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[2:2]"});
   CFG_CONTROL_DIAGNOSTIC_02.CHP_OUTBOUND_HCW_PIPE_CREDIT_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[3:3]"});
   CFG_CONTROL_DIAGNOSTIC_02.CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[4:4]"});
   CFG_CONTROL_DIAGNOSTIC_02.CHP_LSP_AP_CMP_PIPE_CREDIT_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[5:5]"});
   CFG_CONTROL_DIAGNOSTIC_02.CHP_LSP_TOK_PIPE_CREDIT_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[6:6]"});
   CFG_CONTROL_DIAGNOSTIC_02.CHP_LSP_TOK_PIPE_CREDIT_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[7:7]"});
   CFG_CONTROL_DIAGNOSTIC_02.CHP_ROP_PIPE_CREDIT_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[8:8]"});
   CFG_CONTROL_DIAGNOSTIC_02.CHP_ROP_PIPE_CREDIT_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[9:9]"});
   CFG_CONTROL_DIAGNOSTIC_02.QED_TO_CQ_PIPE_CREDIT_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[10:10]"});
   CFG_CONTROL_DIAGNOSTIC_02.QED_TO_CQ_PIPE_CREDIT_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[11:11]"});
   CFG_CONTROL_DIAGNOSTIC_02.EGRESS_LSP_TOKEN_CREDIT_STATUS_EMPTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[12:12]"});
   CFG_CONTROL_DIAGNOSTIC_02.EGRESS_LSP_TOKEN_CREDIT_STATUS_AFULL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[13:13]"});
   CFG_CONTROL_DIAGNOSTIC_02.CHP_LSP_TOKEN_QB_STATUS_SIZE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[16:14]"});
   CFG_CONTROL_DIAGNOSTIC_02.FREELIST_SIZE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_diagnostic_02.internal_f[31:17]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_GENERAL_00";
    `endif
    CFG_CONTROL_GENERAL_00 = hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_00_reg::type_id::create("CFG_CONTROL_GENERAL_00", this);
    CFG_CONTROL_GENERAL_00.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00002C, 32, 32'b01001000100010000100001000010000);
    CFG_CONTROL_GENERAL_00.set_space_addr("MSG", 32'h0C00002C);
    CFG_CONTROL_GENERAL_00.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_GENERAL_00.set_space_addr("MEM-SB",28'hC00002C);
    CFG_CONTROL_GENERAL_00.set_space_addr("MEM", 32'h0C00002C);
      CFG_CONTROL_GENERAL_00.set_space("MEM");
      CFG_CONTROL_GENERAL_00.set_msg_opcode("MEM-SB");
      CFG_CONTROL_GENERAL_00.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_GENERAL_00.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_GENERAL_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_GENERAL_00.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_GENERAL_00.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_GENERAL_00.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_GENERAL_00:dont_test") ) CFG_CONTROL_GENERAL_00.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_GENERAL_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_GENERAL_00"));
      end
   CFG_CONTROL_GENERAL_00.OUTBOUND_HCW_PIPE_CREDIT_HWM.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[4:0]"});
   CFG_CONTROL_GENERAL_00.LSP_AP_CMP_PIPE_CREDIT_HWM.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[9:5]"});
   CFG_CONTROL_GENERAL_00.LSP_TOK_PIPE_CREDIT_HWM.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[14:10]"});
   CFG_CONTROL_GENERAL_00.ROP_PIPE_CREDIT_HWM.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[19:15]"});
   CFG_CONTROL_GENERAL_00.EGRESS_PIPE_CREDIT_HWM.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[23:20]"});
   CFG_CONTROL_GENERAL_00.QED_TO_CQ_PIPE_CREDIT_HWM.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[27:24]"});
   CFG_CONTROL_GENERAL_00.EGRESS_LSP_TOKEN_PIPE_CREDIT.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[30:28]"});
   CFG_CONTROL_GENERAL_00.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_00.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_GENERAL_01";
    `endif
    CFG_CONTROL_GENERAL_01 = hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_01_reg::type_id::create("CFG_CONTROL_GENERAL_01", this);
    CFG_CONTROL_GENERAL_01.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000030, 32, 32'b00000000000000000000000000000000);
    CFG_CONTROL_GENERAL_01.set_space_addr("MSG", 32'h0C000030);
    CFG_CONTROL_GENERAL_01.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_GENERAL_01.set_space_addr("MEM-SB",28'hC000030);
    CFG_CONTROL_GENERAL_01.set_space_addr("MEM", 32'h0C000030);
      CFG_CONTROL_GENERAL_01.set_space("MEM");
      CFG_CONTROL_GENERAL_01.set_msg_opcode("MEM-SB");
      CFG_CONTROL_GENERAL_01.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_GENERAL_01.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_GENERAL_01.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_GENERAL_01.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_GENERAL_01.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_GENERAL_01.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_GENERAL_01:dont_test") ) CFG_CONTROL_GENERAL_01.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_GENERAL_01 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_GENERAL_01"));
      end
   CFG_CONTROL_GENERAL_01.CHP_BLK_DUAL_ISSUE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_01.internal_f[0:0]"});
   CFG_CONTROL_GENERAL_01.INCLUDE_CWDI_TIMER_IDLE_EN.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_01.internal_f[1:1]"});
   CFG_CONTROL_GENERAL_01.RSVZ.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_01.internal_f[2:2]"});
   CFG_CONTROL_GENERAL_01.CIAL_CLOCK_GATE_CONTROL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_01.internal_f[3:3]"});
   CFG_CONTROL_GENERAL_01.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_01.internal_f[31:4]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_GENERAL_02";
    `endif
    CFG_CONTROL_GENERAL_02 = hqm_credit_hist_pipe_bridge_CFG_CONTROL_GENERAL_02_reg::type_id::create("CFG_CONTROL_GENERAL_02", this);
    CFG_CONTROL_GENERAL_02.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000034, 32, 32'b00000000000000000000000000000000);
    CFG_CONTROL_GENERAL_02.set_space_addr("MSG", 32'h0C000034);
    CFG_CONTROL_GENERAL_02.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_GENERAL_02.set_space_addr("MEM-SB",28'hC000034);
    CFG_CONTROL_GENERAL_02.set_space_addr("MEM", 32'h0C000034);
      CFG_CONTROL_GENERAL_02.set_space("MEM");
      CFG_CONTROL_GENERAL_02.set_msg_opcode("MEM-SB");
      CFG_CONTROL_GENERAL_02.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_GENERAL_02.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_GENERAL_02.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_GENERAL_02.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_GENERAL_02.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_GENERAL_02.set_user_attribute("SubnetPortID", "8'h00");
      CFG_CONTROL_GENERAL_02.set_test_reg(0);
      if ( $test$plusargs("CFG_CONTROL_GENERAL_02:dont_test") ) CFG_CONTROL_GENERAL_02.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_GENERAL_02 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_GENERAL_02"));
      end
   CFG_CONTROL_GENERAL_02.ENQPIPE_ERROR_INJECTION_L0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[0:0]"});
   CFG_CONTROL_GENERAL_02.ENQPIPE_ERROR_INJECTION_H0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[1:1]"});
   CFG_CONTROL_GENERAL_02.ENQPIPE_ERROR_INJECTION_L1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[2:2]"});
   CFG_CONTROL_GENERAL_02.ENQPIPE_ERROR_INJECTION_H1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[3:3]"});
   CFG_CONTROL_GENERAL_02.SCHPIPE_ERROR_INJECTION_L0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[4:4]"});
   CFG_CONTROL_GENERAL_02.SCHPIPE_ERROR_INJECTION_H0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[5:5]"});
   CFG_CONTROL_GENERAL_02.SCHPIPE_ERROR_INJECTION_L1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[6:6]"});
   CFG_CONTROL_GENERAL_02.SCHPIPE_ERROR_INJECTION_H1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[7:7]"});
   CFG_CONTROL_GENERAL_02.EGRESS_ERROR_INJECTION_L0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[8:8]"});
   CFG_CONTROL_GENERAL_02.EGRESS_ERROR_INJECTION_H0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[9:9]"});
   CFG_CONTROL_GENERAL_02.EGRESS_ERROR_INJECTION_L1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[10:10]"});
   CFG_CONTROL_GENERAL_02.EGRESS_ERROR_INJECTION_H1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[11:11]"});
   CFG_CONTROL_GENERAL_02.INGRESS_ERROR_INJECTION_L0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[12:12]"});
   CFG_CONTROL_GENERAL_02.INGRESS_ERROR_INJECTION_H0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[13:13]"});
   CFG_CONTROL_GENERAL_02.INGRESS_ERROR_INJECTION_L1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[14:14]"});
   CFG_CONTROL_GENERAL_02.INGRESS_ERROR_INJECTION_H1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[15:15]"});
   CFG_CONTROL_GENERAL_02.INGRESS_FLID_PARITY_ERROR_INJECTION_0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[16:16]"});
   CFG_CONTROL_GENERAL_02.INGRESS_FLID_PARITY_ERROR_INJECTION_1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[17:17]"});
   CFG_CONTROL_GENERAL_02.ENGPIPE_FLID_PARITY_ERROR_INJECTION.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[18:18]"});
   CFG_CONTROL_GENERAL_02.EGRESS_WBO_ERROR_INJECTION_0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[19:19]"});
   CFG_CONTROL_GENERAL_02.EGRESS_WBO_ERROR_INJECTION_1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[20:20]"});
   CFG_CONTROL_GENERAL_02.EGRESS_WBO_ERROR_INJECTION_2.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[21:21]"});
   CFG_CONTROL_GENERAL_02.EGRESS_WBO_ERROR_INJECTION_3.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[22:22]"});
   CFG_CONTROL_GENERAL_02.CONTROL.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_control_general_02.internal_f[31:23]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DB_FIFO_STATUS_0";
    `endif
    CFG_DB_FIFO_STATUS_0 = hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_0_reg::type_id::create("CFG_DB_FIFO_STATUS_0", this);
    CFG_DB_FIFO_STATUS_0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000038, 32, 32'b00010000000000000000000000000000);
    CFG_DB_FIFO_STATUS_0.set_space_addr("MSG", 32'h0C000038);
    CFG_DB_FIFO_STATUS_0.set_space_addr("msg_bus_port", 'h21);
    CFG_DB_FIFO_STATUS_0.set_space_addr("MEM-SB",28'hC000038);
    CFG_DB_FIFO_STATUS_0.set_space_addr("MEM", 32'h0C000038);
      CFG_DB_FIFO_STATUS_0.set_space("MEM");
      CFG_DB_FIFO_STATUS_0.set_msg_opcode("MEM-SB");
      CFG_DB_FIFO_STATUS_0.set_fid(4'h0, "MEM-SB");
  	CFG_DB_FIFO_STATUS_0.set_bar(4'h2, "MEM-SB");
      CFG_DB_FIFO_STATUS_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DB_FIFO_STATUS_0.set_user_attribute("diag_reg", "0");
      CFG_DB_FIFO_STATUS_0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DB_FIFO_STATUS_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DB_FIFO_STATUS_0:dont_test") ) CFG_DB_FIFO_STATUS_0.set_test_reg(1'b0);
      if (!add_reg( CFG_DB_FIFO_STATUS_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DB_FIFO_STATUS_0"));
      end
   CFG_DB_FIFO_STATUS_0.LDB_WD_PIPE_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_db_fifo_status_0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DB_FIFO_STATUS_1";
    `endif
    CFG_DB_FIFO_STATUS_1 = hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_1_reg::type_id::create("CFG_DB_FIFO_STATUS_1", this);
    CFG_DB_FIFO_STATUS_1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00003C, 32, 32'b00010000000000000000000000000000);
    CFG_DB_FIFO_STATUS_1.set_space_addr("MSG", 32'h0C00003C);
    CFG_DB_FIFO_STATUS_1.set_space_addr("msg_bus_port", 'h21);
    CFG_DB_FIFO_STATUS_1.set_space_addr("MEM-SB",28'hC00003C);
    CFG_DB_FIFO_STATUS_1.set_space_addr("MEM", 32'h0C00003C);
      CFG_DB_FIFO_STATUS_1.set_space("MEM");
      CFG_DB_FIFO_STATUS_1.set_msg_opcode("MEM-SB");
      CFG_DB_FIFO_STATUS_1.set_fid(4'h0, "MEM-SB");
  	CFG_DB_FIFO_STATUS_1.set_bar(4'h2, "MEM-SB");
      CFG_DB_FIFO_STATUS_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DB_FIFO_STATUS_1.set_user_attribute("diag_reg", "0");
      CFG_DB_FIFO_STATUS_1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DB_FIFO_STATUS_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DB_FIFO_STATUS_1:dont_test") ) CFG_DB_FIFO_STATUS_1.set_test_reg(1'b0);
      if (!add_reg( CFG_DB_FIFO_STATUS_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DB_FIFO_STATUS_1"));
      end
   CFG_DB_FIFO_STATUS_1.DIR_WD_PIPE_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_db_fifo_status_1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DB_FIFO_STATUS_2";
    `endif
    CFG_DB_FIFO_STATUS_2 = hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_2_reg::type_id::create("CFG_DB_FIFO_STATUS_2", this);
    CFG_DB_FIFO_STATUS_2.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000040, 32, 32'b00010000000000000000000000000000);
    CFG_DB_FIFO_STATUS_2.set_space_addr("MSG", 32'h0C000040);
    CFG_DB_FIFO_STATUS_2.set_space_addr("msg_bus_port", 'h21);
    CFG_DB_FIFO_STATUS_2.set_space_addr("MEM-SB",28'hC000040);
    CFG_DB_FIFO_STATUS_2.set_space_addr("MEM", 32'h0C000040);
      CFG_DB_FIFO_STATUS_2.set_space("MEM");
      CFG_DB_FIFO_STATUS_2.set_msg_opcode("MEM-SB");
      CFG_DB_FIFO_STATUS_2.set_fid(4'h0, "MEM-SB");
  	CFG_DB_FIFO_STATUS_2.set_bar(4'h2, "MEM-SB");
      CFG_DB_FIFO_STATUS_2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DB_FIFO_STATUS_2.set_user_attribute("diag_reg", "0");
      CFG_DB_FIFO_STATUS_2.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DB_FIFO_STATUS_2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DB_FIFO_STATUS_2:dont_test") ) CFG_DB_FIFO_STATUS_2.set_test_reg(1'b0);
      if (!add_reg( CFG_DB_FIFO_STATUS_2 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DB_FIFO_STATUS_2"));
      end
   CFG_DB_FIFO_STATUS_2.LDB_CIAL_PIPE_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_db_fifo_status_2.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DB_FIFO_STATUS_3";
    `endif
    CFG_DB_FIFO_STATUS_3 = hqm_credit_hist_pipe_bridge_CFG_DB_FIFO_STATUS_3_reg::type_id::create("CFG_DB_FIFO_STATUS_3", this);
    CFG_DB_FIFO_STATUS_3.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000044, 32, 32'b00010000000000000000000000000000);
    CFG_DB_FIFO_STATUS_3.set_space_addr("MSG", 32'h0C000044);
    CFG_DB_FIFO_STATUS_3.set_space_addr("msg_bus_port", 'h21);
    CFG_DB_FIFO_STATUS_3.set_space_addr("MEM-SB",28'hC000044);
    CFG_DB_FIFO_STATUS_3.set_space_addr("MEM", 32'h0C000044);
      CFG_DB_FIFO_STATUS_3.set_space("MEM");
      CFG_DB_FIFO_STATUS_3.set_msg_opcode("MEM-SB");
      CFG_DB_FIFO_STATUS_3.set_fid(4'h0, "MEM-SB");
  	CFG_DB_FIFO_STATUS_3.set_bar(4'h2, "MEM-SB");
      CFG_DB_FIFO_STATUS_3.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DB_FIFO_STATUS_3.set_user_attribute("diag_reg", "0");
      CFG_DB_FIFO_STATUS_3.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DB_FIFO_STATUS_3.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DB_FIFO_STATUS_3:dont_test") ) CFG_DB_FIFO_STATUS_3.set_test_reg(1'b0);
      if (!add_reg( CFG_DB_FIFO_STATUS_3 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DB_FIFO_STATUS_3"));
      end
   CFG_DB_FIFO_STATUS_3.DIR_CIAL_PIPE_STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_db_fifo_status_3.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_AW_STATUS_0";
    `endif
    CFG_DIAGNOSTIC_AW_STATUS_0 = hqm_credit_hist_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_0_reg::type_id::create("CFG_DIAGNOSTIC_AW_STATUS_0", this);
    CFG_DIAGNOSTIC_AW_STATUS_0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000048, 32, 32'b00000000000000000000000000000000);
    CFG_DIAGNOSTIC_AW_STATUS_0.set_space_addr("MSG", 32'h0C000048);
    CFG_DIAGNOSTIC_AW_STATUS_0.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_AW_STATUS_0.set_space_addr("MEM-SB",28'hC000048);
    CFG_DIAGNOSTIC_AW_STATUS_0.set_space_addr("MEM", 32'h0C000048);
      CFG_DIAGNOSTIC_AW_STATUS_0.set_space("MEM");
      CFG_DIAGNOSTIC_AW_STATUS_0.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS_0.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_AW_STATUS_0.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_AW_STATUS_0.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_AW_STATUS_0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_AW_STATUS_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_AW_STATUS_0:dont_test") ) CFG_DIAGNOSTIC_AW_STATUS_0.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_AW_STATUS_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_AW_STATUS_0"));
      end
   CFG_DIAGNOSTIC_AW_STATUS_0.STATUS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_diagnostic_aw_status_0.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HW_AGITATE_CONTROL";
    `endif
    CFG_HW_AGITATE_CONTROL = hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg::type_id::create("CFG_HW_AGITATE_CONTROL", this);
    CFG_HW_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00004C, 32, 32'b00000000000000000000000000000000);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MSG", 32'h0C00004C);
    CFG_HW_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MEM-SB",28'hC00004C);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MEM", 32'h0C00004C);
      CFG_HW_AGITATE_CONTROL.set_space("MEM");
      CFG_HW_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      CFG_HW_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_HW_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_HW_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HW_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_HW_AGITATE_CONTROL:dont_test") ) CFG_HW_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_HW_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_HW_AGITATE_CONTROL"));
      end
   CFG_HW_AGITATE_CONTROL.MODE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_control.internal_f[1:0]"});
   CFG_HW_AGITATE_CONTROL.DUTY.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_control.internal_f[4:2]"});
   CFG_HW_AGITATE_CONTROL.PERIOD.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_control.internal_f[15:5]"});
   CFG_HW_AGITATE_CONTROL.PROB1ST.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_control.internal_f[23:16]"});
   CFG_HW_AGITATE_CONTROL.PROB2ND.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_control.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HW_AGITATE_SELECT";
    `endif
    CFG_HW_AGITATE_SELECT = hqm_credit_hist_pipe_bridge_CFG_HW_AGITATE_SELECT_reg::type_id::create("CFG_HW_AGITATE_SELECT", this);
    CFG_HW_AGITATE_SELECT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000050, 32, 32'b00000000000000000000000000000000);
    CFG_HW_AGITATE_SELECT.set_space_addr("MSG", 32'h0C000050);
    CFG_HW_AGITATE_SELECT.set_space_addr("msg_bus_port", 'h21);
    CFG_HW_AGITATE_SELECT.set_space_addr("MEM-SB",28'hC000050);
    CFG_HW_AGITATE_SELECT.set_space_addr("MEM", 32'h0C000050);
      CFG_HW_AGITATE_SELECT.set_space("MEM");
      CFG_HW_AGITATE_SELECT.set_msg_opcode("MEM-SB");
      CFG_HW_AGITATE_SELECT.set_fid(4'h0, "MEM-SB");
  	CFG_HW_AGITATE_SELECT.set_bar(4'h2, "MEM-SB");
      CFG_HW_AGITATE_SELECT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HW_AGITATE_SELECT.set_user_attribute("diag_reg", "0");
      CFG_HW_AGITATE_SELECT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HW_AGITATE_SELECT.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HW_AGITATE_SELECT.set_test_reg(0);
      if ( $test$plusargs("CFG_HW_AGITATE_SELECT:dont_test") ) CFG_HW_AGITATE_SELECT.set_test_reg(1'b0);
      if (!add_reg( CFG_HW_AGITATE_SELECT )) begin
        `sla_error(get_name(), ("Could not add register CFG_HW_AGITATE_SELECT"));
      end
   CFG_HW_AGITATE_SELECT.AGG_IF_00.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[0:0]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_01.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[1:1]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_02.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[2:2]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_03.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[3:3]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_04.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[4:4]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_05.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[5:5]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_06.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[6:6]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_07.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[7:7]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_08.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[8:8]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_09.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[9:9]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_10.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[10:10]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_11.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[11:11]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_12.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[12:12]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_13.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[13:13]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_14.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[14:14]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_15.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[15:15]"});
   CFG_HW_AGITATE_SELECT.RSVZ.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_hw_agitate_select.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_HOLD";
    `endif
    CFG_PIPE_HEALTH_HOLD = hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_HOLD_reg::type_id::create("CFG_PIPE_HEALTH_HOLD", this);
    CFG_PIPE_HEALTH_HOLD.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000054, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_HOLD.set_space_addr("MSG", 32'h0C000054);
    CFG_PIPE_HEALTH_HOLD.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_HOLD.set_space_addr("MEM-SB",28'hC000054);
    CFG_PIPE_HEALTH_HOLD.set_space_addr("MEM", 32'h0C000054);
      CFG_PIPE_HEALTH_HOLD.set_space("MEM");
      CFG_PIPE_HEALTH_HOLD.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_HOLD.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_HOLD.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_HOLD.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_HOLD.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_HOLD.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_HOLD.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_HOLD:dont_test") ) CFG_PIPE_HEALTH_HOLD.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_HOLD )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_HOLD"));
      end
   CFG_PIPE_HEALTH_HOLD.OUTPUTDRAIN.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_hold.status[0:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_VALID";
    `endif
    CFG_PIPE_HEALTH_VALID = hqm_credit_hist_pipe_bridge_CFG_PIPE_HEALTH_VALID_reg::type_id::create("CFG_PIPE_HEALTH_VALID", this);
    CFG_PIPE_HEALTH_VALID.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000058, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_VALID.set_space_addr("MSG", 32'h0C000058);
    CFG_PIPE_HEALTH_VALID.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_VALID.set_space_addr("MEM-SB",28'hC000058);
    CFG_PIPE_HEALTH_VALID.set_space_addr("MEM", 32'h0C000058);
      CFG_PIPE_HEALTH_VALID.set_space("MEM");
      CFG_PIPE_HEALTH_VALID.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_VALID.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_VALID.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_VALID.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_VALID.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_VALID.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_VALID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_VALID:dont_test") ) CFG_PIPE_HEALTH_VALID.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_VALID )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_VALID"));
      end
   CFG_PIPE_HEALTH_VALID.SCHPIPE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_valid.status[0:0]"});
   CFG_PIPE_HEALTH_VALID.ENQPIPE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_valid.status[1:1]"});
   CFG_PIPE_HEALTH_VALID.ARB.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_valid.status[2:2]"});
   CFG_PIPE_HEALTH_VALID.EGRESS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_valid.status[3:3]"});
   CFG_PIPE_HEALTH_VALID.INGRESS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_pipe_health_valid.status[4:4]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SYNDROME_01";
    `endif
    CFG_SYNDROME_01 = hqm_credit_hist_pipe_bridge_CFG_SYNDROME_01_reg::type_id::create("CFG_SYNDROME_01", this);
    CFG_SYNDROME_01.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00005C, 32, 32'b00000000000000000000000000000000);
    CFG_SYNDROME_01.set_space_addr("MSG", 32'h0C00005C);
    CFG_SYNDROME_01.set_space_addr("msg_bus_port", 'h21);
    CFG_SYNDROME_01.set_space_addr("MEM-SB",28'hC00005C);
    CFG_SYNDROME_01.set_space_addr("MEM", 32'h0C00005C);
      CFG_SYNDROME_01.set_space("MEM");
      CFG_SYNDROME_01.set_msg_opcode("MEM-SB");
      CFG_SYNDROME_01.set_fid(4'h0, "MEM-SB");
  	CFG_SYNDROME_01.set_bar(4'h2, "MEM-SB");
      CFG_SYNDROME_01.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SYNDROME_01.set_user_attribute("diag_reg", "0");
      CFG_SYNDROME_01.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SYNDROME_01.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SYNDROME_01:dont_test") ) CFG_SYNDROME_01.set_test_reg(1'b0);
      if (!add_reg( CFG_SYNDROME_01 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SYNDROME_01"));
      end
   CFG_SYNDROME_01.SYNDDATA.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
   CFG_SYNDROME_01.SYNDTYPE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
   CFG_SYNDROME_01.SYNDVALID.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_IDLE";
    `endif
    CFG_UNIT_IDLE = hqm_credit_hist_pipe_bridge_CFG_UNIT_IDLE_reg::type_id::create("CFG_UNIT_IDLE", this);
    CFG_UNIT_IDLE.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000060, 32, 32'b00000000000000000000000000000011);
    CFG_UNIT_IDLE.set_space_addr("MSG", 32'h0C000060);
    CFG_UNIT_IDLE.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_IDLE.set_space_addr("MEM-SB",28'hC000060);
    CFG_UNIT_IDLE.set_space_addr("MEM", 32'h0C000060);
      CFG_UNIT_IDLE.set_space("MEM");
      CFG_UNIT_IDLE.set_msg_opcode("MEM-SB");
      CFG_UNIT_IDLE.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_IDLE.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_IDLE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_IDLE.set_user_attribute("diag_reg", "0");
      CFG_UNIT_IDLE.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_UNIT_IDLE.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_IDLE.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_IDLE:dont_test") ) CFG_UNIT_IDLE.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_IDLE )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_IDLE"));
      end
   CFG_UNIT_IDLE.PIPE_IDLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_idle.internal_f[0:0]"});
   CFG_UNIT_IDLE.UNIT_IDLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_idle.internal_f[1:1]"});
   CFG_UNIT_IDLE.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_idle.internal_f[31:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_TIMEOUT";
    `endif
    CFG_UNIT_TIMEOUT = hqm_credit_hist_pipe_bridge_CFG_UNIT_TIMEOUT_reg::type_id::create("CFG_UNIT_TIMEOUT", this);
    CFG_UNIT_TIMEOUT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000064, 32, 32'b10000000000000001111111111111111);
    CFG_UNIT_TIMEOUT.set_space_addr("MSG", 32'h0C000064);
    CFG_UNIT_TIMEOUT.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_TIMEOUT.set_space_addr("MEM-SB",28'hC000064);
    CFG_UNIT_TIMEOUT.set_space_addr("MEM", 32'h0C000064);
      CFG_UNIT_TIMEOUT.set_space("MEM");
      CFG_UNIT_TIMEOUT.set_msg_opcode("MEM-SB");
      CFG_UNIT_TIMEOUT.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_TIMEOUT.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_TIMEOUT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_TIMEOUT.set_user_attribute("diag_reg", "0");
      CFG_UNIT_TIMEOUT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_UNIT_TIMEOUT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_UNIT_TIMEOUT:dont_test") ) CFG_UNIT_TIMEOUT.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_TIMEOUT )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_TIMEOUT"));
      end
   CFG_UNIT_TIMEOUT.MULTIPLIER.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_timeout.internal_f[4:0]"});
   CFG_UNIT_TIMEOUT.THRESHOLD.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_timeout.internal_f[15:5]"});
   CFG_UNIT_TIMEOUT.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_timeout.internal_f[30:16]"});
   CFG_UNIT_TIMEOUT.ENABLE.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_unit_timeout.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PATCH_CONTROL";
    `endif
    CFG_PATCH_CONTROL = hqm_credit_hist_pipe_bridge_CFG_PATCH_CONTROL_reg::type_id::create("CFG_PATCH_CONTROL", this);
    CFG_PATCH_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000068, 32, 32'b00000000000000000000011101000000);
    CFG_PATCH_CONTROL.set_space_addr("MSG", 32'h0C000068);
    CFG_PATCH_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_PATCH_CONTROL.set_space_addr("MEM-SB",28'hC000068);
    CFG_PATCH_CONTROL.set_space_addr("MEM", 32'h0C000068);
      CFG_PATCH_CONTROL.set_space("MEM");
      CFG_PATCH_CONTROL.set_msg_opcode("MEM-SB");
      CFG_PATCH_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_PATCH_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_PATCH_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PATCH_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_PATCH_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PATCH_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_PATCH_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_PATCH_CONTROL:dont_test") ) CFG_PATCH_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_PATCH_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_PATCH_CONTROL"));
      end
   CFG_PATCH_CONTROL.DELAY_CLOCKOFF.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_patch_control.internal_f[7:0]"});
   CFG_PATCH_CONTROL.DELAY_CLKOFF_BYPASS.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_patch_control.internal_f[13:8]"});
   CFG_PATCH_CONTROL.RSVZ1.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_patch_control.internal_f[15:14]"});
   CFG_PATCH_CONTROL.RSVZ0.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_patch_control.internal_f[30:16]"});
   CFG_PATCH_CONTROL.DISABLE_CLOCKOFF.set_paths({"i_hqm_credit_hist_pipe_core.i_hqm_credit_hist_pipe_register_pfcsr.i_hqm_chp_target_cfg_patch_control.internal_f[31:31]"});

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_HIST_LIST_A_0[%0d]",i);
    `endif
    CFG_HIST_LIST_A_0[i] = hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_0_reg::type_id::create($psprintf("CFG_HIST_LIST_A_0[%0d]",i), this);
    CFG_HIST_LIST_A_0[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E030000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_HIST_LIST_A_0[i].set_space_addr("MSG",  (32'h0E030000 + (i*4)) );
    CFG_HIST_LIST_A_0[i].set_space_addr("msg_bus_port", 'h21);
    CFG_HIST_LIST_A_0[i].set_space_addr("MEM-SB", (28'hE030000 + (i*4)) );
    CFG_HIST_LIST_A_0[i].set_space_addr("MEM",  (32'h0E030000 + (i*4)) );
      CFG_HIST_LIST_A_0[i].set_space("MEM");
      CFG_HIST_LIST_A_0[i].set_msg_opcode("MEM-SB");
      CFG_HIST_LIST_A_0[i].set_fid(4'h0, "MEM-SB");
  	CFG_HIST_LIST_A_0[i].set_bar(4'h2, "MEM-SB");
      CFG_HIST_LIST_A_0[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HIST_LIST_A_0[i].set_user_attribute("diag_reg", "0");
      CFG_HIST_LIST_A_0[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HIST_LIST_A_0[i].set_user_attribute("SubnetPortID", "8'h00");
      CFG_HIST_LIST_A_0[i].set_test_reg(0);
    if ( $test$plusargs($psprintf("CFG_HIST_LIST_A_0[%0d]:dont_test",i)) ) CFG_HIST_LIST_A_0[i].set_test_reg(1'b0);
      if (!add_reg( CFG_HIST_LIST_A_0[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_HIST_LIST_A_0[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<2048; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_HIST_LIST_A_1[%0d]",i);
    `endif
    CFG_HIST_LIST_A_1[i] = hqm_credit_hist_pipe_bridge_CFG_HIST_LIST_A_1_reg::type_id::create($psprintf("CFG_HIST_LIST_A_1[%0d]",i), this);
    CFG_HIST_LIST_A_1[i].set_cfg(16'h0, 16'h0, 16'h0, (32'h0E040000 + (i *4)), 32, 32'b00000000000000000000000000000000);
    CFG_HIST_LIST_A_1[i].set_space_addr("MSG",  (32'h0E040000 + (i*4)) );
    CFG_HIST_LIST_A_1[i].set_space_addr("msg_bus_port", 'h21);
    CFG_HIST_LIST_A_1[i].set_space_addr("MEM-SB", (28'hE040000 + (i*4)) );
    CFG_HIST_LIST_A_1[i].set_space_addr("MEM",  (32'h0E040000 + (i*4)) );
      CFG_HIST_LIST_A_1[i].set_space("MEM");
      CFG_HIST_LIST_A_1[i].set_msg_opcode("MEM-SB");
      CFG_HIST_LIST_A_1[i].set_fid(4'h0, "MEM-SB");
  	CFG_HIST_LIST_A_1[i].set_bar(4'h2, "MEM-SB");
      CFG_HIST_LIST_A_1[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HIST_LIST_A_1[i].set_user_attribute("diag_reg", "0");
      CFG_HIST_LIST_A_1[i].set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HIST_LIST_A_1[i].set_user_attribute("SubnetPortID", "8'h00");
      CFG_HIST_LIST_A_1[i].set_test_reg(0);
    if ( $test$plusargs($psprintf("CFG_HIST_LIST_A_1[%0d]:dont_test",i)) ) CFG_HIST_LIST_A_1[i].set_test_reg(1'b0);
      if (!add_reg( CFG_HIST_LIST_A_1[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_HIST_LIST_A_1[%0d]",i)));
      end
   cnt++;
end

  endfunction

 virtual function void print_sv_ral_file();  
    $display("RAL File Type [%s], RAL File Instance [%s], SV File ---> %s", get_type_name(), get_name(), `__FILE__); 
 endfunction 
endclass : hqm_credit_hist_pipe_bridge_file

// ================================================


`endif
