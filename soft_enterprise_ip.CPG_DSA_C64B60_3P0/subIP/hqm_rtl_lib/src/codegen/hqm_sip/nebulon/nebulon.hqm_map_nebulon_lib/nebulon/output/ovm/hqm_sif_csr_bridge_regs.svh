//                                                                             
// File:            hqm_sif_csr_bridge_regs.svh                                
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             


//RAL code compatible with Saola versions: 16.2.06 and newer 

`ifndef RAL_HQM_SIF_CSR_BRIDGE_FILE
`define RAL_HQM_SIF_CSR_BRIDGE_FILE

class hqm_sif_csr_bridge_HQM_CSR_CP_LO_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAI_MASK;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_CSR_CP_LO_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.desired)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.actual)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAI_MASK = new("SAI_MASK", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_CP_LO.SAI_MASK"});
    SAI_MASK.set_powerwell("vcccfn");
    SAI_MASK.set_rand_mode(0);
   SAI_MASK.set_reset_signame("prim_gated_rst_b");
    SAI_MASK.set_logical_path("HQMID");
    void'(add_field( SAI_MASK ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_CSR_CP_LO_reg) 
endclass : hqm_sif_csr_bridge_HQM_CSR_CP_LO_reg

// ================================================

class hqm_sif_csr_bridge_HQM_CSR_CP_HI_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAI_MASK;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_CSR_CP_HI_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.desired)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.actual)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAI_MASK = new("SAI_MASK", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_CP_HI.SAI_MASK"});
    SAI_MASK.set_powerwell("vcccfn");
    SAI_MASK.set_rand_mode(0);
   SAI_MASK.set_reset_signame("prim_gated_rst_b");
    SAI_MASK.set_logical_path("HQMID");
    void'(add_field( SAI_MASK ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_CSR_CP_HI_reg) 
endclass : hqm_sif_csr_bridge_HQM_CSR_CP_HI_reg

// ================================================

class hqm_sif_csr_bridge_HQM_CSR_RAC_LO_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAI_MASK;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_CSR_RAC_LO_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.desired)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.actual)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAI_MASK = new("SAI_MASK", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_RAC_LO.SAI_MASK"});
    SAI_MASK.set_powerwell("vcccfn");
    SAI_MASK.set_rand_mode(0);
   SAI_MASK.set_reset_signame("prim_gated_rst_b");
    SAI_MASK.set_logical_path("HQMID");
    void'(add_field( SAI_MASK ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_CSR_RAC_LO_reg) 
endclass : hqm_sif_csr_bridge_HQM_CSR_RAC_LO_reg

// ================================================

class hqm_sif_csr_bridge_HQM_CSR_RAC_HI_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAI_MASK;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_CSR_RAC_HI_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.desired)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.actual)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAI_MASK = new("SAI_MASK", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_RAC_HI.SAI_MASK"});
    SAI_MASK.set_powerwell("vcccfn");
    SAI_MASK.set_rand_mode(0);
   SAI_MASK.set_reset_signame("prim_gated_rst_b");
    SAI_MASK.set_logical_path("HQMID");
    void'(add_field( SAI_MASK ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_CSR_RAC_HI_reg) 
endclass : hqm_sif_csr_bridge_HQM_CSR_RAC_HI_reg

// ================================================

class hqm_sif_csr_bridge_HQM_CSR_WAC_LO_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAI_MASK;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_CSR_WAC_LO_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.desired)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.actual)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAI_MASK = new("SAI_MASK", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_WAC_LO.SAI_MASK"});
    SAI_MASK.set_powerwell("vcccfn");
    SAI_MASK.set_rand_mode(0);
   SAI_MASK.set_reset_signame("prim_gated_rst_b");
    SAI_MASK.set_logical_path("HQMID");
    void'(add_field( SAI_MASK ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_CSR_WAC_LO_reg) 
endclass : hqm_sif_csr_bridge_HQM_CSR_WAC_LO_reg

// ================================================

class hqm_sif_csr_bridge_HQM_CSR_WAC_HI_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAI_MASK;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_CSR_WAC_HI_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.desired)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAI_MASK, SAI_MASK.actual)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SAI_MASK, SAI_MASK.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAI_MASK = new("SAI_MASK", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_WAC_HI.SAI_MASK"});
    SAI_MASK.set_powerwell("vcccfn");
    SAI_MASK.set_rand_mode(0);
   SAI_MASK.set_reset_signame("prim_gated_rst_b");
    SAI_MASK.set_logical_path("HQMID");
    void'(add_field( SAI_MASK ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_CSR_WAC_HI_reg) 
endclass : hqm_sif_csr_bridge_HQM_CSR_WAC_HI_reg

// ================================================

class hqm_sif_csr_bridge_SIF_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SIF_CON_DLY;
  sla_ral_field IDLE_DLY;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_SIF_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SIF_CON_DLY, SIF_CON_DLY.desired)
     `RAL_FIELD_CP_4(SIF_CON_DLY, SIF_CON_DLY.desired, 0,1,2,3)
     `RAL_FIELD_CP(IDLE_DLY, IDLE_DLY.desired)
     `RAL_FIELD_CP_3(IDLE_DLY, IDLE_DLY.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SIF_CON_DLY, SIF_CON_DLY.actual)
     `RAL_FIELD_CP_4(SIF_CON_DLY, SIF_CON_DLY.actual, 0,1,2,3)
     `RAL_FIELD_CP(IDLE_DLY, IDLE_DLY.actual)
     `RAL_FIELD_CP_3(IDLE_DLY, IDLE_DLY.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SIF_CON_DLY = new("SIF_CON_DLY", "RW", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_CTL.SIF_CON_DLY"});
    SIF_CON_DLY.set_powerwell("vcccfn");
    SIF_CON_DLY.set_rand_mode(0);
   SIF_CON_DLY.set_reset_signame("hqm_csr_mmio_rst_n");
    SIF_CON_DLY.set_logical_path("HQMID");
    void'(add_field( SIF_CON_DLY ));

    IDLE_DLY = new("IDLE_DLY", "RW", 3, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_CTL.IDLE_DLY"});
    IDLE_DLY.set_powerwell("vcccfn");
    IDLE_DLY.set_rand_mode(0);
   IDLE_DLY.set_reset_signame("hqm_csr_mmio_rst_n");
    IDLE_DLY.set_logical_path("HQMID");
    void'(add_field( IDLE_DLY ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_SIF_CTL_reg) 
endclass : hqm_sif_csr_bridge_SIF_CTL_reg

// ================================================

class hqm_sif_csr_bridge_SIF_VC_RXMAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VC0_MAP;
  sla_ral_field VC1_MAP;
  sla_ral_field VC2_MAP;
  sla_ral_field VC3_MAP;
  sla_ral_field VC4_MAP;
  sla_ral_field VC5_MAP;
  sla_ral_field VC6_MAP;
  sla_ral_field VC7_MAP;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_SIF_VC_RXMAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VC0_MAP, VC0_MAP.desired)
     `RAL_FIELD_CP_3(VC0_MAP, VC0_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC1_MAP, VC1_MAP.desired)
     `RAL_FIELD_CP_3(VC1_MAP, VC1_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC2_MAP, VC2_MAP.desired)
     `RAL_FIELD_CP_3(VC2_MAP, VC2_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC3_MAP, VC3_MAP.desired)
     `RAL_FIELD_CP_3(VC3_MAP, VC3_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC4_MAP, VC4_MAP.desired)
     `RAL_FIELD_CP_3(VC4_MAP, VC4_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC5_MAP, VC5_MAP.desired)
     `RAL_FIELD_CP_3(VC5_MAP, VC5_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC6_MAP, VC6_MAP.desired)
     `RAL_FIELD_CP_3(VC6_MAP, VC6_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC7_MAP, VC7_MAP.desired)
     `RAL_FIELD_CP_3(VC7_MAP, VC7_MAP.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VC0_MAP, VC0_MAP.actual)
     `RAL_FIELD_CP_3(VC0_MAP, VC0_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC1_MAP, VC1_MAP.actual)
     `RAL_FIELD_CP_3(VC1_MAP, VC1_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC2_MAP, VC2_MAP.actual)
     `RAL_FIELD_CP_3(VC2_MAP, VC2_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC3_MAP, VC3_MAP.actual)
     `RAL_FIELD_CP_3(VC3_MAP, VC3_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC4_MAP, VC4_MAP.actual)
     `RAL_FIELD_CP_3(VC4_MAP, VC4_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC5_MAP, VC5_MAP.actual)
     `RAL_FIELD_CP_3(VC5_MAP, VC5_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC6_MAP, VC6_MAP.actual)
     `RAL_FIELD_CP_3(VC6_MAP, VC6_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC7_MAP, VC7_MAP.actual)
     `RAL_FIELD_CP_3(VC7_MAP, VC7_MAP.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VC0_MAP = new("VC0_MAP", "RW", 3, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC0_MAP"});
    VC0_MAP.set_powerwell("vcccfn");
    VC0_MAP.set_rand_mode(0);
   VC0_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC0_MAP.set_logical_path("HQMID");
    void'(add_field( VC0_MAP ));

    VC1_MAP = new("VC1_MAP", "RW", 3, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC1_MAP"});
    VC1_MAP.set_powerwell("vcccfn");
    VC1_MAP.set_rand_mode(0);
   VC1_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC1_MAP.set_logical_path("HQMID");
    void'(add_field( VC1_MAP ));

    VC2_MAP = new("VC2_MAP", "RW", 3, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC2_MAP"});
    VC2_MAP.set_powerwell("vcccfn");
    VC2_MAP.set_rand_mode(0);
   VC2_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC2_MAP.set_logical_path("HQMID");
    void'(add_field( VC2_MAP ));

    VC3_MAP = new("VC3_MAP", "RW", 3, 12, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC3_MAP"});
    VC3_MAP.set_powerwell("vcccfn");
    VC3_MAP.set_rand_mode(0);
   VC3_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC3_MAP.set_logical_path("HQMID");
    void'(add_field( VC3_MAP ));

    VC4_MAP = new("VC4_MAP", "RW", 3, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC4_MAP"});
    VC4_MAP.set_powerwell("vcccfn");
    VC4_MAP.set_rand_mode(0);
   VC4_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC4_MAP.set_logical_path("HQMID");
    void'(add_field( VC4_MAP ));

    VC5_MAP = new("VC5_MAP", "RW", 3, 20, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC5_MAP"});
    VC5_MAP.set_powerwell("vcccfn");
    VC5_MAP.set_rand_mode(0);
   VC5_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC5_MAP.set_logical_path("HQMID");
    void'(add_field( VC5_MAP ));

    VC6_MAP = new("VC6_MAP", "RW", 3, 24, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC6_MAP"});
    VC6_MAP.set_powerwell("vcccfn");
    VC6_MAP.set_rand_mode(0);
   VC6_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC6_MAP.set_logical_path("HQMID");
    void'(add_field( VC6_MAP ));

    VC7_MAP = new("VC7_MAP", "RW", 3, 28, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC7_MAP"});
    VC7_MAP.set_powerwell("vcccfn");
    VC7_MAP.set_rand_mode(0);
   VC7_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC7_MAP.set_logical_path("HQMID");
    void'(add_field( VC7_MAP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_SIF_VC_RXMAP_reg) 
endclass : hqm_sif_csr_bridge_SIF_VC_RXMAP_reg

// ================================================

class hqm_sif_csr_bridge_SIF_VC_TXMAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VC0_MAP;
  sla_ral_field VC1_MAP;
  sla_ral_field VC2_MAP;
  sla_ral_field VC3_MAP;
  sla_ral_field VC4_MAP;
  sla_ral_field VC5_MAP;
  sla_ral_field VC6_MAP;
  sla_ral_field VC7_MAP;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_SIF_VC_TXMAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VC0_MAP, VC0_MAP.desired)
     `RAL_FIELD_CP_3(VC0_MAP, VC0_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC1_MAP, VC1_MAP.desired)
     `RAL_FIELD_CP_3(VC1_MAP, VC1_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC2_MAP, VC2_MAP.desired)
     `RAL_FIELD_CP_3(VC2_MAP, VC2_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC3_MAP, VC3_MAP.desired)
     `RAL_FIELD_CP_3(VC3_MAP, VC3_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC4_MAP, VC4_MAP.desired)
     `RAL_FIELD_CP_3(VC4_MAP, VC4_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC5_MAP, VC5_MAP.desired)
     `RAL_FIELD_CP_3(VC5_MAP, VC5_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC6_MAP, VC6_MAP.desired)
     `RAL_FIELD_CP_3(VC6_MAP, VC6_MAP.desired, 0,1,2)
     `RAL_FIELD_CP(VC7_MAP, VC7_MAP.desired)
     `RAL_FIELD_CP_3(VC7_MAP, VC7_MAP.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VC0_MAP, VC0_MAP.actual)
     `RAL_FIELD_CP_3(VC0_MAP, VC0_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC1_MAP, VC1_MAP.actual)
     `RAL_FIELD_CP_3(VC1_MAP, VC1_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC2_MAP, VC2_MAP.actual)
     `RAL_FIELD_CP_3(VC2_MAP, VC2_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC3_MAP, VC3_MAP.actual)
     `RAL_FIELD_CP_3(VC3_MAP, VC3_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC4_MAP, VC4_MAP.actual)
     `RAL_FIELD_CP_3(VC4_MAP, VC4_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC5_MAP, VC5_MAP.actual)
     `RAL_FIELD_CP_3(VC5_MAP, VC5_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC6_MAP, VC6_MAP.actual)
     `RAL_FIELD_CP_3(VC6_MAP, VC6_MAP.actual, 0,1,2)
     `RAL_FIELD_CP(VC7_MAP, VC7_MAP.actual)
     `RAL_FIELD_CP_3(VC7_MAP, VC7_MAP.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VC0_MAP = new("VC0_MAP", "RW", 3, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC0_MAP"});
    VC0_MAP.set_powerwell("vcccfn");
    VC0_MAP.set_rand_mode(0);
   VC0_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC0_MAP.set_logical_path("HQMID");
    void'(add_field( VC0_MAP ));

    VC1_MAP = new("VC1_MAP", "RW", 3, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC1_MAP"});
    VC1_MAP.set_powerwell("vcccfn");
    VC1_MAP.set_rand_mode(0);
   VC1_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC1_MAP.set_logical_path("HQMID");
    void'(add_field( VC1_MAP ));

    VC2_MAP = new("VC2_MAP", "RW", 3, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC2_MAP"});
    VC2_MAP.set_powerwell("vcccfn");
    VC2_MAP.set_rand_mode(0);
   VC2_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC2_MAP.set_logical_path("HQMID");
    void'(add_field( VC2_MAP ));

    VC3_MAP = new("VC3_MAP", "RW", 3, 12, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC3_MAP"});
    VC3_MAP.set_powerwell("vcccfn");
    VC3_MAP.set_rand_mode(0);
   VC3_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC3_MAP.set_logical_path("HQMID");
    void'(add_field( VC3_MAP ));

    VC4_MAP = new("VC4_MAP", "RW", 3, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC4_MAP"});
    VC4_MAP.set_powerwell("vcccfn");
    VC4_MAP.set_rand_mode(0);
   VC4_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC4_MAP.set_logical_path("HQMID");
    void'(add_field( VC4_MAP ));

    VC5_MAP = new("VC5_MAP", "RW", 3, 20, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC5_MAP"});
    VC5_MAP.set_powerwell("vcccfn");
    VC5_MAP.set_rand_mode(0);
   VC5_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC5_MAP.set_logical_path("HQMID");
    void'(add_field( VC5_MAP ));

    VC6_MAP = new("VC6_MAP", "RW", 3, 24, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC6_MAP"});
    VC6_MAP.set_powerwell("vcccfn");
    VC6_MAP.set_rand_mode(0);
   VC6_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC6_MAP.set_logical_path("HQMID");
    void'(add_field( VC6_MAP ));

    VC7_MAP = new("VC7_MAP", "RW", 3, 28, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC7_MAP"});
    VC7_MAP.set_powerwell("vcccfn");
    VC7_MAP.set_rand_mode(0);
   VC7_MAP.set_reset_signame("hqm_csr_mmio_rst_n");
    VC7_MAP.set_logical_path("HQMID");
    void'(add_field( VC7_MAP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_SIF_VC_TXMAP_reg) 
endclass : hqm_sif_csr_bridge_SIF_VC_TXMAP_reg

// ================================================

class hqm_sif_csr_bridge_DEVTLB_ATS_ERR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field BAD_RESULT;
  sla_ral_field HDRERROR;
  sla_ral_field DPERROR;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_DEVTLB_ATS_ERR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BAD_RESULT, BAD_RESULT.desired)
     `RAL_FIELD_CP_1(BAD_RESULT, BAD_RESULT.desired, 0)
     `RAL_FIELD_CP(HDRERROR, HDRERROR.desired)
     `RAL_FIELD_CP_1(HDRERROR, HDRERROR.desired, 0)
     `RAL_FIELD_CP(DPERROR, DPERROR.desired)
     `RAL_FIELD_CP_1(DPERROR, DPERROR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BAD_RESULT, BAD_RESULT.actual)
     `RAL_FIELD_CP_1(BAD_RESULT, BAD_RESULT.actual, 0)
     `RAL_FIELD_CP(HDRERROR, HDRERROR.actual)
     `RAL_FIELD_CP_1(HDRERROR, HDRERROR.actual, 0)
     `RAL_FIELD_CP(DPERROR, DPERROR.actual)
     `RAL_FIELD_CP_1(DPERROR, DPERROR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    BAD_RESULT = new("BAD_RESULT", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_ATS_ERR.BAD_RESULT"});
    BAD_RESULT.set_powerwell("vcccfn");
    BAD_RESULT.set_rand_mode(0);
   BAD_RESULT.set_reset_signame("hqm_csr_mmio_rst_n");
    BAD_RESULT.set_logical_path("HQMID");
    void'(add_field( BAD_RESULT ));

    HDRERROR = new("HDRERROR", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_ATS_ERR.HDRERROR"});
    HDRERROR.set_powerwell("vcccfn");
    HDRERROR.set_rand_mode(0);
   HDRERROR.set_reset_signame("hqm_csr_mmio_rst_n");
    HDRERROR.set_logical_path("HQMID");
    void'(add_field( HDRERROR ));

    DPERROR = new("DPERROR", "RW/1C/V", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_ATS_ERR.DPERROR"});
    DPERROR.set_powerwell("vcccfn");
    DPERROR.set_rand_mode(0);
   DPERROR.set_reset_signame("hqm_csr_mmio_rst_n");
    DPERROR.set_logical_path("HQMID");
    void'(add_field( DPERROR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_DEVTLB_ATS_ERR_reg) 
endclass : hqm_sif_csr_bridge_DEVTLB_ATS_ERR_reg

// ================================================

class hqm_sif_csr_bridge_SIF_ALARM_ERR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMEOUT;
  sla_ral_field SB_EP_PARITY_ERR;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field RI_PARITY_ERR;
  sla_ral_field SIF_PARITY_ERR;
  sla_ral_field CFGM_TARGET_ERR;
  sla_ral_field RF_IPAR_ERROR;
  sla_ral_field CPL_ERROR;
  sla_ral_field DEVTLB_ATS_ERROR;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_SIF_ALARM_ERR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMEOUT, TIMEOUT.desired)
     `RAL_FIELD_CP_1(TIMEOUT, TIMEOUT.desired, 0)
     `RAL_FIELD_CP(SB_EP_PARITY_ERR, SB_EP_PARITY_ERR.desired)
     `RAL_FIELD_CP_1(SB_EP_PARITY_ERR, SB_EP_PARITY_ERR.desired, 0)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(RI_PARITY_ERR, RI_PARITY_ERR.desired)
     `RAL_FIELD_CP_1(RI_PARITY_ERR, RI_PARITY_ERR.desired, 0)
     `RAL_FIELD_CP(SIF_PARITY_ERR, SIF_PARITY_ERR.desired)
     `RAL_FIELD_CP_1(SIF_PARITY_ERR, SIF_PARITY_ERR.desired, 0)
     `RAL_FIELD_CP(CFGM_TARGET_ERR, CFGM_TARGET_ERR.desired)
     `RAL_FIELD_CP_1(CFGM_TARGET_ERR, CFGM_TARGET_ERR.desired, 0)
     `RAL_FIELD_CP(RF_IPAR_ERROR, RF_IPAR_ERROR.desired)
     `RAL_FIELD_CP_1(RF_IPAR_ERROR, RF_IPAR_ERROR.desired, 0)
     `RAL_FIELD_CP(CPL_ERROR, CPL_ERROR.desired)
     `RAL_FIELD_CP_1(CPL_ERROR, CPL_ERROR.desired, 0)
     `RAL_FIELD_CP(DEVTLB_ATS_ERROR, DEVTLB_ATS_ERROR.desired)
     `RAL_FIELD_CP_1(DEVTLB_ATS_ERROR, DEVTLB_ATS_ERROR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMEOUT, TIMEOUT.actual)
     `RAL_FIELD_CP_1(TIMEOUT, TIMEOUT.actual, 0)
     `RAL_FIELD_CP(SB_EP_PARITY_ERR, SB_EP_PARITY_ERR.actual)
     `RAL_FIELD_CP_1(SB_EP_PARITY_ERR, SB_EP_PARITY_ERR.actual, 0)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(RI_PARITY_ERR, RI_PARITY_ERR.actual)
     `RAL_FIELD_CP_1(RI_PARITY_ERR, RI_PARITY_ERR.actual, 0)
     `RAL_FIELD_CP(SIF_PARITY_ERR, SIF_PARITY_ERR.actual)
     `RAL_FIELD_CP_1(SIF_PARITY_ERR, SIF_PARITY_ERR.actual, 0)
     `RAL_FIELD_CP(CFGM_TARGET_ERR, CFGM_TARGET_ERR.actual)
     `RAL_FIELD_CP_1(CFGM_TARGET_ERR, CFGM_TARGET_ERR.actual, 0)
     `RAL_FIELD_CP(RF_IPAR_ERROR, RF_IPAR_ERROR.actual)
     `RAL_FIELD_CP_1(RF_IPAR_ERROR, RF_IPAR_ERROR.actual, 0)
     `RAL_FIELD_CP(CPL_ERROR, CPL_ERROR.actual)
     `RAL_FIELD_CP_1(CPL_ERROR, CPL_ERROR.actual, 0)
     `RAL_FIELD_CP(DEVTLB_ATS_ERROR, DEVTLB_ATS_ERROR.actual)
     `RAL_FIELD_CP_1(DEVTLB_ATS_ERROR, DEVTLB_ATS_ERROR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMEOUT = new("TIMEOUT", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.TIMEOUT"});
    TIMEOUT.set_powerwell("vcccfn");
    TIMEOUT.set_rand_mode(0);
   TIMEOUT.set_reset_signame("side_gated_rst_prim_b");
    TIMEOUT.set_logical_path("HQMID");
    void'(add_field( TIMEOUT ));

    SB_EP_PARITY_ERR = new("SB_EP_PARITY_ERR", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.SB_EP_PARITY_ERR"});
    SB_EP_PARITY_ERR.set_powerwell("vcccfn");
    SB_EP_PARITY_ERR.set_rand_mode(0);
   SB_EP_PARITY_ERR.set_reset_signame("side_gated_rst_prim_b");
    SB_EP_PARITY_ERR.set_logical_path("HQMID");
    void'(add_field( SB_EP_PARITY_ERR ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RW/1C/V", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.FIFO_UNDERFLOW"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("side_gated_rst_prim_b");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RW/1C/V", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.FIFO_OVERFLOW"});
    FIFO_OVERFLOW.set_powerwell("vcccfn");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("side_gated_rst_prim_b");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    RI_PARITY_ERR = new("RI_PARITY_ERR", "RW/1C/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.RI_PARITY_ERR"});
    RI_PARITY_ERR.set_powerwell("vcccfn");
    RI_PARITY_ERR.set_rand_mode(0);
   RI_PARITY_ERR.set_reset_signame("side_gated_rst_prim_b");
    RI_PARITY_ERR.set_logical_path("HQMID");
    void'(add_field( RI_PARITY_ERR ));

    SIF_PARITY_ERR = new("SIF_PARITY_ERR", "RW/1C/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.SIF_PARITY_ERR"});
    SIF_PARITY_ERR.set_powerwell("vcccfn");
    SIF_PARITY_ERR.set_rand_mode(0);
   SIF_PARITY_ERR.set_reset_signame("side_gated_rst_prim_b");
    SIF_PARITY_ERR.set_logical_path("HQMID");
    void'(add_field( SIF_PARITY_ERR ));

    CFGM_TARGET_ERR = new("CFGM_TARGET_ERR", "RW/1C/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.CFGM_TARGET_ERR"});
    CFGM_TARGET_ERR.set_powerwell("vcccfn");
    CFGM_TARGET_ERR.set_rand_mode(0);
   CFGM_TARGET_ERR.set_reset_signame("side_gated_rst_prim_b");
    CFGM_TARGET_ERR.set_logical_path("HQMID");
    void'(add_field( CFGM_TARGET_ERR ));

    RF_IPAR_ERROR = new("RF_IPAR_ERROR", "RW/1C/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.RF_IPAR_ERROR"});
    RF_IPAR_ERROR.set_powerwell("vcccfn");
    RF_IPAR_ERROR.set_rand_mode(0);
   RF_IPAR_ERROR.set_reset_signame("side_gated_rst_prim_b");
    RF_IPAR_ERROR.set_logical_path("HQMID");
    void'(add_field( RF_IPAR_ERROR ));

    CPL_ERROR = new("CPL_ERROR", "RW/1C/V", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.CPL_ERROR"});
    CPL_ERROR.set_powerwell("vcccfn");
    CPL_ERROR.set_rand_mode(0);
   CPL_ERROR.set_reset_signame("side_gated_rst_prim_b");
    CPL_ERROR.set_logical_path("HQMID");
    void'(add_field( CPL_ERROR ));

    DEVTLB_ATS_ERROR = new("DEVTLB_ATS_ERROR", "RW/1C/V", 1, 9, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.DEVTLB_ATS_ERROR"});
    DEVTLB_ATS_ERROR.set_powerwell("vcccfn");
    DEVTLB_ATS_ERROR.set_rand_mode(0);
   DEVTLB_ATS_ERROR.set_reset_signame("side_gated_rst_prim_b");
    DEVTLB_ATS_ERROR.set_logical_path("HQMID");
    void'(add_field( DEVTLB_ATS_ERROR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_SIF_ALARM_ERR_reg) 
endclass : hqm_sif_csr_bridge_SIF_ALARM_ERR_reg

// ================================================

class hqm_sif_csr_bridge_RI_PARITY_ERR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field NPD_FIFO_PERR;
  sla_ral_field NPH_FIFO_PERR;
  sla_ral_field NPH_FIFO_SCREAM;
  sla_ral_field PD_FIFO_PERR;
  sla_ral_field PH_FIFO_PERR;
  sla_ral_field PH_FIFO_SCREAM;
  sla_ral_field HCW_DATA_PERR;
  sla_ral_field CBD_DATA_PERR;
  sla_ral_field CBD_HDR_PERR;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_PARITY_ERR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(NPD_FIFO_PERR, NPD_FIFO_PERR.desired)
     `RAL_FIELD_CP_1(NPD_FIFO_PERR, NPD_FIFO_PERR.desired, 0)
     `RAL_FIELD_CP(NPH_FIFO_PERR, NPH_FIFO_PERR.desired)
     `RAL_FIELD_CP_1(NPH_FIFO_PERR, NPH_FIFO_PERR.desired, 0)
     `RAL_FIELD_CP(NPH_FIFO_SCREAM, NPH_FIFO_SCREAM.desired)
     `RAL_FIELD_CP_1(NPH_FIFO_SCREAM, NPH_FIFO_SCREAM.desired, 0)
     `RAL_FIELD_CP(PD_FIFO_PERR, PD_FIFO_PERR.desired)
     `RAL_FIELD_CP_1(PD_FIFO_PERR, PD_FIFO_PERR.desired, 0)
     `RAL_FIELD_CP(PH_FIFO_PERR, PH_FIFO_PERR.desired)
     `RAL_FIELD_CP_1(PH_FIFO_PERR, PH_FIFO_PERR.desired, 0)
     `RAL_FIELD_CP(PH_FIFO_SCREAM, PH_FIFO_SCREAM.desired)
     `RAL_FIELD_CP_1(PH_FIFO_SCREAM, PH_FIFO_SCREAM.desired, 0)
     `RAL_FIELD_CP(HCW_DATA_PERR, HCW_DATA_PERR.desired)
     `RAL_FIELD_CP_1(HCW_DATA_PERR, HCW_DATA_PERR.desired, 0)
     `RAL_FIELD_CP(CBD_DATA_PERR, CBD_DATA_PERR.desired)
     `RAL_FIELD_CP_1(CBD_DATA_PERR, CBD_DATA_PERR.desired, 0)
     `RAL_FIELD_CP(CBD_HDR_PERR, CBD_HDR_PERR.desired)
     `RAL_FIELD_CP_1(CBD_HDR_PERR, CBD_HDR_PERR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(NPD_FIFO_PERR, NPD_FIFO_PERR.actual)
     `RAL_FIELD_CP_1(NPD_FIFO_PERR, NPD_FIFO_PERR.actual, 0)
     `RAL_FIELD_CP(NPH_FIFO_PERR, NPH_FIFO_PERR.actual)
     `RAL_FIELD_CP_1(NPH_FIFO_PERR, NPH_FIFO_PERR.actual, 0)
     `RAL_FIELD_CP(NPH_FIFO_SCREAM, NPH_FIFO_SCREAM.actual)
     `RAL_FIELD_CP_1(NPH_FIFO_SCREAM, NPH_FIFO_SCREAM.actual, 0)
     `RAL_FIELD_CP(PD_FIFO_PERR, PD_FIFO_PERR.actual)
     `RAL_FIELD_CP_1(PD_FIFO_PERR, PD_FIFO_PERR.actual, 0)
     `RAL_FIELD_CP(PH_FIFO_PERR, PH_FIFO_PERR.actual)
     `RAL_FIELD_CP_1(PH_FIFO_PERR, PH_FIFO_PERR.actual, 0)
     `RAL_FIELD_CP(PH_FIFO_SCREAM, PH_FIFO_SCREAM.actual)
     `RAL_FIELD_CP_1(PH_FIFO_SCREAM, PH_FIFO_SCREAM.actual, 0)
     `RAL_FIELD_CP(HCW_DATA_PERR, HCW_DATA_PERR.actual)
     `RAL_FIELD_CP_1(HCW_DATA_PERR, HCW_DATA_PERR.actual, 0)
     `RAL_FIELD_CP(CBD_DATA_PERR, CBD_DATA_PERR.actual)
     `RAL_FIELD_CP_1(CBD_DATA_PERR, CBD_DATA_PERR.actual, 0)
     `RAL_FIELD_CP(CBD_HDR_PERR, CBD_HDR_PERR.actual)
     `RAL_FIELD_CP_1(CBD_HDR_PERR, CBD_HDR_PERR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    NPD_FIFO_PERR = new("NPD_FIFO_PERR", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.NPD_FIFO_PERR"});
    NPD_FIFO_PERR.set_powerwell("vcccfn");
    NPD_FIFO_PERR.set_rand_mode(0);
   NPD_FIFO_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    NPD_FIFO_PERR.set_logical_path("HQMID");
    void'(add_field( NPD_FIFO_PERR ));

    NPH_FIFO_PERR = new("NPH_FIFO_PERR", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.NPH_FIFO_PERR"});
    NPH_FIFO_PERR.set_powerwell("vcccfn");
    NPH_FIFO_PERR.set_rand_mode(0);
   NPH_FIFO_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    NPH_FIFO_PERR.set_logical_path("HQMID");
    void'(add_field( NPH_FIFO_PERR ));

    NPH_FIFO_SCREAM = new("NPH_FIFO_SCREAM", "RW/1C/V", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.NPH_FIFO_SCREAM"});
    NPH_FIFO_SCREAM.set_powerwell("vcccfn");
    NPH_FIFO_SCREAM.set_rand_mode(0);
   NPH_FIFO_SCREAM.set_reset_signame("hqm_csr_mmio_rst_n");
    NPH_FIFO_SCREAM.set_logical_path("HQMID");
    void'(add_field( NPH_FIFO_SCREAM ));

    PD_FIFO_PERR = new("PD_FIFO_PERR", "RW/1C/V", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.PD_FIFO_PERR"});
    PD_FIFO_PERR.set_powerwell("vcccfn");
    PD_FIFO_PERR.set_rand_mode(0);
   PD_FIFO_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    PD_FIFO_PERR.set_logical_path("HQMID");
    void'(add_field( PD_FIFO_PERR ));

    PH_FIFO_PERR = new("PH_FIFO_PERR", "RW/1C/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.PH_FIFO_PERR"});
    PH_FIFO_PERR.set_powerwell("vcccfn");
    PH_FIFO_PERR.set_rand_mode(0);
   PH_FIFO_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    PH_FIFO_PERR.set_logical_path("HQMID");
    void'(add_field( PH_FIFO_PERR ));

    PH_FIFO_SCREAM = new("PH_FIFO_SCREAM", "RW/1C/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.PH_FIFO_SCREAM"});
    PH_FIFO_SCREAM.set_powerwell("vcccfn");
    PH_FIFO_SCREAM.set_rand_mode(0);
   PH_FIFO_SCREAM.set_reset_signame("hqm_csr_mmio_rst_n");
    PH_FIFO_SCREAM.set_logical_path("HQMID");
    void'(add_field( PH_FIFO_SCREAM ));

    HCW_DATA_PERR = new("HCW_DATA_PERR", "RW/1C/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.HCW_DATA_PERR"});
    HCW_DATA_PERR.set_powerwell("vcccfn");
    HCW_DATA_PERR.set_rand_mode(0);
   HCW_DATA_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    HCW_DATA_PERR.set_logical_path("HQMID");
    void'(add_field( HCW_DATA_PERR ));

    CBD_DATA_PERR = new("CBD_DATA_PERR", "RW/1C/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.CBD_DATA_PERR"});
    CBD_DATA_PERR.set_powerwell("vcccfn");
    CBD_DATA_PERR.set_rand_mode(0);
   CBD_DATA_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    CBD_DATA_PERR.set_logical_path("HQMID");
    void'(add_field( CBD_DATA_PERR ));

    CBD_HDR_PERR = new("CBD_HDR_PERR", "RW/1C/V", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.CBD_HDR_PERR"});
    CBD_HDR_PERR.set_powerwell("vcccfn");
    CBD_HDR_PERR.set_rand_mode(0);
   CBD_HDR_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    CBD_HDR_PERR.set_logical_path("HQMID");
    void'(add_field( CBD_HDR_PERR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_PARITY_ERR_reg) 
endclass : hqm_sif_csr_bridge_RI_PARITY_ERR_reg

// ================================================

class hqm_sif_csr_bridge_SIF_PARITY_ERR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TLB_TAG_4K_PERR;
  sla_ral_field TLB_TAG_2M_PERR;
  sla_ral_field TLB_TAG_1G_PERR;
  sla_ral_field TLB_DATA_4K_PERR;
  sla_ral_field TLB_DATA_2M_PERR;
  sla_ral_field TLB_DATA_1G_PERR;
  sla_ral_field IBCPL_HDR_FIFO_PERR;
  sla_ral_field IBCPL_DATA_FIFO_PERR;
  sla_ral_field SCRBD_PERR;
  sla_ral_field GPSB_PERR;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_SIF_PARITY_ERR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TLB_TAG_4K_PERR, TLB_TAG_4K_PERR.desired)
     `RAL_FIELD_CP_1(TLB_TAG_4K_PERR, TLB_TAG_4K_PERR.desired, 0)
     `RAL_FIELD_CP(TLB_TAG_2M_PERR, TLB_TAG_2M_PERR.desired)
     `RAL_FIELD_CP_1(TLB_TAG_2M_PERR, TLB_TAG_2M_PERR.desired, 0)
     `RAL_FIELD_CP(TLB_TAG_1G_PERR, TLB_TAG_1G_PERR.desired)
     `RAL_FIELD_CP_1(TLB_TAG_1G_PERR, TLB_TAG_1G_PERR.desired, 0)
     `RAL_FIELD_CP(TLB_DATA_4K_PERR, TLB_DATA_4K_PERR.desired)
     `RAL_FIELD_CP_1(TLB_DATA_4K_PERR, TLB_DATA_4K_PERR.desired, 0)
     `RAL_FIELD_CP(TLB_DATA_2M_PERR, TLB_DATA_2M_PERR.desired)
     `RAL_FIELD_CP_1(TLB_DATA_2M_PERR, TLB_DATA_2M_PERR.desired, 0)
     `RAL_FIELD_CP(TLB_DATA_1G_PERR, TLB_DATA_1G_PERR.desired)
     `RAL_FIELD_CP_1(TLB_DATA_1G_PERR, TLB_DATA_1G_PERR.desired, 0)
     `RAL_FIELD_CP(IBCPL_HDR_FIFO_PERR, IBCPL_HDR_FIFO_PERR.desired)
     `RAL_FIELD_CP_1(IBCPL_HDR_FIFO_PERR, IBCPL_HDR_FIFO_PERR.desired, 0)
     `RAL_FIELD_CP(IBCPL_DATA_FIFO_PERR, IBCPL_DATA_FIFO_PERR.desired)
     `RAL_FIELD_CP_1(IBCPL_DATA_FIFO_PERR, IBCPL_DATA_FIFO_PERR.desired, 0)
     `RAL_FIELD_CP(SCRBD_PERR, SCRBD_PERR.desired)
     `RAL_FIELD_CP_1(SCRBD_PERR, SCRBD_PERR.desired, 0)
     `RAL_FIELD_CP(GPSB_PERR, GPSB_PERR.desired)
     `RAL_FIELD_CP_1(GPSB_PERR, GPSB_PERR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TLB_TAG_4K_PERR, TLB_TAG_4K_PERR.actual)
     `RAL_FIELD_CP_1(TLB_TAG_4K_PERR, TLB_TAG_4K_PERR.actual, 0)
     `RAL_FIELD_CP(TLB_TAG_2M_PERR, TLB_TAG_2M_PERR.actual)
     `RAL_FIELD_CP_1(TLB_TAG_2M_PERR, TLB_TAG_2M_PERR.actual, 0)
     `RAL_FIELD_CP(TLB_TAG_1G_PERR, TLB_TAG_1G_PERR.actual)
     `RAL_FIELD_CP_1(TLB_TAG_1G_PERR, TLB_TAG_1G_PERR.actual, 0)
     `RAL_FIELD_CP(TLB_DATA_4K_PERR, TLB_DATA_4K_PERR.actual)
     `RAL_FIELD_CP_1(TLB_DATA_4K_PERR, TLB_DATA_4K_PERR.actual, 0)
     `RAL_FIELD_CP(TLB_DATA_2M_PERR, TLB_DATA_2M_PERR.actual)
     `RAL_FIELD_CP_1(TLB_DATA_2M_PERR, TLB_DATA_2M_PERR.actual, 0)
     `RAL_FIELD_CP(TLB_DATA_1G_PERR, TLB_DATA_1G_PERR.actual)
     `RAL_FIELD_CP_1(TLB_DATA_1G_PERR, TLB_DATA_1G_PERR.actual, 0)
     `RAL_FIELD_CP(IBCPL_HDR_FIFO_PERR, IBCPL_HDR_FIFO_PERR.actual)
     `RAL_FIELD_CP_1(IBCPL_HDR_FIFO_PERR, IBCPL_HDR_FIFO_PERR.actual, 0)
     `RAL_FIELD_CP(IBCPL_DATA_FIFO_PERR, IBCPL_DATA_FIFO_PERR.actual)
     `RAL_FIELD_CP_1(IBCPL_DATA_FIFO_PERR, IBCPL_DATA_FIFO_PERR.actual, 0)
     `RAL_FIELD_CP(SCRBD_PERR, SCRBD_PERR.actual)
     `RAL_FIELD_CP_1(SCRBD_PERR, SCRBD_PERR.actual, 0)
     `RAL_FIELD_CP(GPSB_PERR, GPSB_PERR.actual)
     `RAL_FIELD_CP_1(GPSB_PERR, GPSB_PERR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TLB_TAG_4K_PERR = new("TLB_TAG_4K_PERR", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_TAG_4K_PERR"});
    TLB_TAG_4K_PERR.set_powerwell("vcccfn");
    TLB_TAG_4K_PERR.set_rand_mode(0);
   TLB_TAG_4K_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    TLB_TAG_4K_PERR.set_logical_path("HQMID");
    void'(add_field( TLB_TAG_4K_PERR ));

    TLB_TAG_2M_PERR = new("TLB_TAG_2M_PERR", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_TAG_2M_PERR"});
    TLB_TAG_2M_PERR.set_powerwell("vcccfn");
    TLB_TAG_2M_PERR.set_rand_mode(0);
   TLB_TAG_2M_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    TLB_TAG_2M_PERR.set_logical_path("HQMID");
    void'(add_field( TLB_TAG_2M_PERR ));

    TLB_TAG_1G_PERR = new("TLB_TAG_1G_PERR", "RW/1C/V", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_TAG_1G_PERR"});
    TLB_TAG_1G_PERR.set_powerwell("vcccfn");
    TLB_TAG_1G_PERR.set_rand_mode(0);
   TLB_TAG_1G_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    TLB_TAG_1G_PERR.set_logical_path("HQMID");
    void'(add_field( TLB_TAG_1G_PERR ));

    TLB_DATA_4K_PERR = new("TLB_DATA_4K_PERR", "RW/1C/V", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_DATA_4K_PERR"});
    TLB_DATA_4K_PERR.set_powerwell("vcccfn");
    TLB_DATA_4K_PERR.set_rand_mode(0);
   TLB_DATA_4K_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    TLB_DATA_4K_PERR.set_logical_path("HQMID");
    void'(add_field( TLB_DATA_4K_PERR ));

    TLB_DATA_2M_PERR = new("TLB_DATA_2M_PERR", "RW/1C/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_DATA_2M_PERR"});
    TLB_DATA_2M_PERR.set_powerwell("vcccfn");
    TLB_DATA_2M_PERR.set_rand_mode(0);
   TLB_DATA_2M_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    TLB_DATA_2M_PERR.set_logical_path("HQMID");
    void'(add_field( TLB_DATA_2M_PERR ));

    TLB_DATA_1G_PERR = new("TLB_DATA_1G_PERR", "RW/1C/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_DATA_1G_PERR"});
    TLB_DATA_1G_PERR.set_powerwell("vcccfn");
    TLB_DATA_1G_PERR.set_rand_mode(0);
   TLB_DATA_1G_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    TLB_DATA_1G_PERR.set_logical_path("HQMID");
    void'(add_field( TLB_DATA_1G_PERR ));

    IBCPL_HDR_FIFO_PERR = new("IBCPL_HDR_FIFO_PERR", "RW/1C/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.IBCPL_HDR_FIFO_PERR"});
    IBCPL_HDR_FIFO_PERR.set_powerwell("vcccfn");
    IBCPL_HDR_FIFO_PERR.set_rand_mode(0);
   IBCPL_HDR_FIFO_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    IBCPL_HDR_FIFO_PERR.set_logical_path("HQMID");
    void'(add_field( IBCPL_HDR_FIFO_PERR ));

    IBCPL_DATA_FIFO_PERR = new("IBCPL_DATA_FIFO_PERR", "RW/1C/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.IBCPL_DATA_FIFO_PERR"});
    IBCPL_DATA_FIFO_PERR.set_powerwell("vcccfn");
    IBCPL_DATA_FIFO_PERR.set_rand_mode(0);
   IBCPL_DATA_FIFO_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    IBCPL_DATA_FIFO_PERR.set_logical_path("HQMID");
    void'(add_field( IBCPL_DATA_FIFO_PERR ));

    SCRBD_PERR = new("SCRBD_PERR", "RW/1C/V", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.SCRBD_PERR"});
    SCRBD_PERR.set_powerwell("vcccfn");
    SCRBD_PERR.set_rand_mode(0);
   SCRBD_PERR.set_reset_signame("hqm_csr_mmio_rst_n");
    SCRBD_PERR.set_logical_path("HQMID");
    void'(add_field( SCRBD_PERR ));

    GPSB_PERR = new("GPSB_PERR", "RW/1C/V/P", 1, 9, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.GPSB_PERR"});
    GPSB_PERR.set_powerwell("vcccfn");
    GPSB_PERR.set_rand_mode(0);
   GPSB_PERR.set_reset_signame("powergood_rst_b");
    GPSB_PERR.set_logical_path("HQMID");
    void'(add_field( GPSB_PERR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_SIF_PARITY_ERR_reg) 
endclass : hqm_sif_csr_bridge_SIF_PARITY_ERR_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT_CLR;
  sla_ral_field CNT_CLRV;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT_CLR, CNT_CLR.desired)
     `RAL_FIELD_CP_1(CNT_CLR, CNT_CLR.desired, 0)
     `RAL_FIELD_CP(CNT_CLRV, CNT_CLRV.desired)
     `RAL_FIELD_CP_1(CNT_CLRV, CNT_CLRV.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT_CLR, CNT_CLR.actual)
     `RAL_FIELD_CP_1(CNT_CLR, CNT_CLR.actual, 0)
     `RAL_FIELD_CP(CNT_CLRV, CNT_CLRV.actual)
     `RAL_FIELD_CP_1(CNT_CLRV, CNT_CLRV.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT_CLR = new("CNT_CLR", "RW", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_CTL.CNT_CLR"});
    CNT_CLR.set_powerwell("vcccfn");
    CNT_CLR.set_rand_mode(0);
   CNT_CLR.set_reset_signame("side_gated_rst_prim_b");
    CNT_CLR.set_logical_path("HQMID");
    void'(add_field( CNT_CLR ));

    CNT_CLRV = new("CNT_CLRV", "RW", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_CTL.CNT_CLRV"});
    CNT_CLRV.set_powerwell("vcccfn");
    CNT_CLRV.set_rand_mode(0);
   CNT_CLRV.set_reset_signame("side_gated_rst_prim_b");
    CNT_CLRV.set_logical_path("HQMID");
    void'(add_field( CNT_CLRV ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_CTL_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_CTL_reg

// ================================================

class hqm_sif_csr_bridge_DIR_CQ2TC_MAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DIR0_TC;
  sla_ral_field DIR1_TC;
  sla_ral_field DIR2_TC;
  sla_ral_field DIR3_TC;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_DIR_CQ2TC_MAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR0_TC, DIR0_TC.desired)
     `RAL_FIELD_CP_4(DIR0_TC, DIR0_TC.desired, 0,1,2,3)
     `RAL_FIELD_CP(DIR1_TC, DIR1_TC.desired)
     `RAL_FIELD_CP_4(DIR1_TC, DIR1_TC.desired, 0,1,2,3)
     `RAL_FIELD_CP(DIR2_TC, DIR2_TC.desired)
     `RAL_FIELD_CP_4(DIR2_TC, DIR2_TC.desired, 0,1,2,3)
     `RAL_FIELD_CP(DIR3_TC, DIR3_TC.desired)
     `RAL_FIELD_CP_4(DIR3_TC, DIR3_TC.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DIR0_TC, DIR0_TC.actual)
     `RAL_FIELD_CP_4(DIR0_TC, DIR0_TC.actual, 0,1,2,3)
     `RAL_FIELD_CP(DIR1_TC, DIR1_TC.actual)
     `RAL_FIELD_CP_4(DIR1_TC, DIR1_TC.actual, 0,1,2,3)
     `RAL_FIELD_CP(DIR2_TC, DIR2_TC.actual)
     `RAL_FIELD_CP_4(DIR2_TC, DIR2_TC.actual, 0,1,2,3)
     `RAL_FIELD_CP(DIR3_TC, DIR3_TC.actual)
     `RAL_FIELD_CP_4(DIR3_TC, DIR3_TC.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DIR0_TC = new("DIR0_TC", "RW", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DIR_CQ2TC_MAP.DIR0_TC"});
    DIR0_TC.set_powerwell("vcccfn");
    DIR0_TC.set_rand_mode(0);
   DIR0_TC.set_reset_signame("hqm_csr_mmio_rst_n");
    DIR0_TC.set_logical_path("HQMID");
    void'(add_field( DIR0_TC ));

    DIR1_TC = new("DIR1_TC", "RW", 4, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DIR_CQ2TC_MAP.DIR1_TC"});
    DIR1_TC.set_powerwell("vcccfn");
    DIR1_TC.set_rand_mode(0);
   DIR1_TC.set_reset_signame("hqm_csr_mmio_rst_n");
    DIR1_TC.set_logical_path("HQMID");
    void'(add_field( DIR1_TC ));

    DIR2_TC = new("DIR2_TC", "RW", 4, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DIR_CQ2TC_MAP.DIR2_TC"});
    DIR2_TC.set_powerwell("vcccfn");
    DIR2_TC.set_rand_mode(0);
   DIR2_TC.set_reset_signame("hqm_csr_mmio_rst_n");
    DIR2_TC.set_logical_path("HQMID");
    void'(add_field( DIR2_TC ));

    DIR3_TC = new("DIR3_TC", "RW", 4, 12, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DIR_CQ2TC_MAP.DIR3_TC"});
    DIR3_TC.set_powerwell("vcccfn");
    DIR3_TC.set_rand_mode(0);
   DIR3_TC.set_reset_signame("hqm_csr_mmio_rst_n");
    DIR3_TC.set_logical_path("HQMID");
    void'(add_field( DIR3_TC ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_DIR_CQ2TC_MAP_reg) 
endclass : hqm_sif_csr_bridge_DIR_CQ2TC_MAP_reg

// ================================================

class hqm_sif_csr_bridge_LDB_CQ2TC_MAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LDB0_TC;
  sla_ral_field LDB1_TC;
  sla_ral_field LDB2_TC;
  sla_ral_field LDB3_TC;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_LDB_CQ2TC_MAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LDB0_TC, LDB0_TC.desired)
     `RAL_FIELD_CP_4(LDB0_TC, LDB0_TC.desired, 0,1,2,3)
     `RAL_FIELD_CP(LDB1_TC, LDB1_TC.desired)
     `RAL_FIELD_CP_4(LDB1_TC, LDB1_TC.desired, 0,1,2,3)
     `RAL_FIELD_CP(LDB2_TC, LDB2_TC.desired)
     `RAL_FIELD_CP_4(LDB2_TC, LDB2_TC.desired, 0,1,2,3)
     `RAL_FIELD_CP(LDB3_TC, LDB3_TC.desired)
     `RAL_FIELD_CP_4(LDB3_TC, LDB3_TC.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LDB0_TC, LDB0_TC.actual)
     `RAL_FIELD_CP_4(LDB0_TC, LDB0_TC.actual, 0,1,2,3)
     `RAL_FIELD_CP(LDB1_TC, LDB1_TC.actual)
     `RAL_FIELD_CP_4(LDB1_TC, LDB1_TC.actual, 0,1,2,3)
     `RAL_FIELD_CP(LDB2_TC, LDB2_TC.actual)
     `RAL_FIELD_CP_4(LDB2_TC, LDB2_TC.actual, 0,1,2,3)
     `RAL_FIELD_CP(LDB3_TC, LDB3_TC.actual)
     `RAL_FIELD_CP_4(LDB3_TC, LDB3_TC.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LDB0_TC = new("LDB0_TC", "RW", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LDB_CQ2TC_MAP.LDB0_TC"});
    LDB0_TC.set_powerwell("vcccfn");
    LDB0_TC.set_rand_mode(0);
   LDB0_TC.set_reset_signame("hqm_csr_mmio_rst_n");
    LDB0_TC.set_logical_path("HQMID");
    void'(add_field( LDB0_TC ));

    LDB1_TC = new("LDB1_TC", "RW", 4, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LDB_CQ2TC_MAP.LDB1_TC"});
    LDB1_TC.set_powerwell("vcccfn");
    LDB1_TC.set_rand_mode(0);
   LDB1_TC.set_reset_signame("hqm_csr_mmio_rst_n");
    LDB1_TC.set_logical_path("HQMID");
    void'(add_field( LDB1_TC ));

    LDB2_TC = new("LDB2_TC", "RW", 4, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LDB_CQ2TC_MAP.LDB2_TC"});
    LDB2_TC.set_powerwell("vcccfn");
    LDB2_TC.set_rand_mode(0);
   LDB2_TC.set_reset_signame("hqm_csr_mmio_rst_n");
    LDB2_TC.set_logical_path("HQMID");
    void'(add_field( LDB2_TC ));

    LDB3_TC = new("LDB3_TC", "RW", 4, 12, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LDB_CQ2TC_MAP.LDB3_TC"});
    LDB3_TC.set_powerwell("vcccfn");
    LDB3_TC.set_rand_mode(0);
   LDB3_TC.set_reset_signame("hqm_csr_mmio_rst_n");
    LDB3_TC.set_logical_path("HQMID");
    void'(add_field( LDB3_TC ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_LDB_CQ2TC_MAP_reg) 
endclass : hqm_sif_csr_bridge_LDB_CQ2TC_MAP_reg

// ================================================

class hqm_sif_csr_bridge_INT2TC_MAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INT_TC;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_INT2TC_MAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_TC, INT_TC.desired)
     `RAL_FIELD_CP_4(INT_TC, INT_TC.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_TC, INT_TC.actual)
     `RAL_FIELD_CP_4(INT_TC, INT_TC.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INT_TC = new("INT_TC", "RW", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.INT2TC_MAP.INT_TC"});
    INT_TC.set_powerwell("vcccfn");
    INT_TC.set_rand_mode(0);
   INT_TC.set_reset_signame("hqm_csr_mmio_rst_n");
    INT_TC.set_logical_path("HQMID");
    void'(add_field( INT_TC ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_INT2TC_MAP_reg) 
endclass : hqm_sif_csr_bridge_INT2TC_MAP_reg

// ================================================

class hqm_sif_csr_bridge_CFG_UNIT_VERSION_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNIT_VERSION;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_CFG_UNIT_VERSION_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.desired)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.actual)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNIT_VERSION = new("UNIT_VERSION", "RO", 8, 24, {""});
    UNIT_VERSION.set_powerwell("vcccfn");
    UNIT_VERSION.set_rand_mode(0);
   UNIT_VERSION.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( UNIT_VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_CFG_UNIT_VERSION_reg) 
endclass : hqm_sif_csr_bridge_CFG_UNIT_VERSION_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_0.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_0_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_0_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_1.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_1_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_1_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_2.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_2_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_2_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_3_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_3_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_3.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_3_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_3_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_4_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_4_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_4.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_4_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_4_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_5_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_5_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_5.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_5_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_5_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_6_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_6_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_6.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_6_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_6_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_7_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_7_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_7.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_7_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_7_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_8_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_8_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_8.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_8_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_8_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_9_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_9_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_9.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_9_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_9_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_10_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_10_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_10.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_10_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_10_reg

// ================================================

class hqm_sif_csr_bridge_HQM_SIF_CNT_11_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_SIF_CNT_11_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.desired)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CNT, CNT.actual)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(CNT, CNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CNT = new("CNT", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_11.CNT"});
    CNT.set_powerwell("vcccfn");
    CNT.set_rand_mode(0);
   CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CNT.set_logical_path("HQMID");
    void'(add_field( CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_SIF_CNT_11_reg) 
endclass : hqm_sif_csr_bridge_HQM_SIF_CNT_11_reg

// ================================================

class hqm_sif_csr_bridge_OBCPL_AFULL_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field CTRL;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_OBCPL_AFULL_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.desired)
     `RAL_FIELD_CP_16(CTRL, CTRL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(CTRL, CTRL.actual)
     `RAL_FIELD_CP_16(CTRL, CTRL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(CTRL, CTRL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_AFULL_AGITATE_CONTROL.MODE"});
    MODE.set_powerwell("vcccfn");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("side_gated_rst_prim_b");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    CTRL = new("CTRL", "RW", 30, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_AFULL_AGITATE_CONTROL.CTRL"});
    CTRL.set_powerwell("vcccfn");
    CTRL.set_rand_mode(0);
   CTRL.set_reset_signame("side_gated_rst_prim_b");
    CTRL.set_logical_path("HQMID");
    void'(add_field( CTRL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_OBCPL_AFULL_AGITATE_CONTROL_reg) 
endclass : hqm_sif_csr_bridge_OBCPL_AFULL_AGITATE_CONTROL_reg

// ================================================

class hqm_sif_csr_bridge_PRIM_CDC_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CLKREQ_SYNCOFF_HOLDOFF;
  sla_ral_field CLKREQ_OFF_HOLDOFF;
  sla_ral_field PWRGATE_HOLDOFF;
  sla_ral_field CLKGATE_HOLDOFF;
  sla_ral_field CLKREQ_CTL_DISABLED;
  sla_ral_field CLKGATE_DISABLED;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_PRIM_CDC_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.desired)
     `RAL_FIELD_CP_4(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_OFF_HOLDOFF, CLKREQ_OFF_HOLDOFF.desired)
     `RAL_FIELD_CP_4(CLKREQ_OFF_HOLDOFF, CLKREQ_OFF_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.desired)
     `RAL_FIELD_CP_4(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.desired)
     `RAL_FIELD_CP_4(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.desired)
     `RAL_FIELD_CP_1(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.desired, 0)
     `RAL_FIELD_CP(CLKGATE_DISABLED, CLKGATE_DISABLED.desired)
     `RAL_FIELD_CP_1(CLKGATE_DISABLED, CLKGATE_DISABLED.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.actual)
     `RAL_FIELD_CP_4(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_OFF_HOLDOFF, CLKREQ_OFF_HOLDOFF.actual)
     `RAL_FIELD_CP_4(CLKREQ_OFF_HOLDOFF, CLKREQ_OFF_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.actual)
     `RAL_FIELD_CP_4(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.actual)
     `RAL_FIELD_CP_4(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.actual)
     `RAL_FIELD_CP_1(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.actual, 0)
     `RAL_FIELD_CP(CLKGATE_DISABLED, CLKGATE_DISABLED.actual)
     `RAL_FIELD_CP_1(CLKGATE_DISABLED, CLKGATE_DISABLED.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CLKREQ_SYNCOFF_HOLDOFF = new("CLKREQ_SYNCOFF_HOLDOFF", "RW", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.CLKREQ_SYNCOFF_HOLDOFF"});
    CLKREQ_SYNCOFF_HOLDOFF.set_powerwell("vcccfn");
    CLKREQ_SYNCOFF_HOLDOFF.set_rand_mode(0);
   CLKREQ_SYNCOFF_HOLDOFF.set_reset_signame("side_gated_rst_prim_b");
    CLKREQ_SYNCOFF_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( CLKREQ_SYNCOFF_HOLDOFF ));

    CLKREQ_OFF_HOLDOFF = new("CLKREQ_OFF_HOLDOFF", "RW", 4, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.CLKREQ_OFF_HOLDOFF"});
    CLKREQ_OFF_HOLDOFF.set_powerwell("vcccfn");
    CLKREQ_OFF_HOLDOFF.set_rand_mode(0);
   CLKREQ_OFF_HOLDOFF.set_reset_signame("side_gated_rst_prim_b");
    CLKREQ_OFF_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( CLKREQ_OFF_HOLDOFF ));

    PWRGATE_HOLDOFF = new("PWRGATE_HOLDOFF", "RW", 4, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.PWRGATE_HOLDOFF"});
    PWRGATE_HOLDOFF.set_powerwell("vcccfn");
    PWRGATE_HOLDOFF.set_rand_mode(0);
   PWRGATE_HOLDOFF.set_reset_signame("side_gated_rst_prim_b");
    PWRGATE_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( PWRGATE_HOLDOFF ));

    CLKGATE_HOLDOFF = new("CLKGATE_HOLDOFF", "RW", 4, 12, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.CLKGATE_HOLDOFF"});
    CLKGATE_HOLDOFF.set_powerwell("vcccfn");
    CLKGATE_HOLDOFF.set_rand_mode(0);
   CLKGATE_HOLDOFF.set_reset_signame("side_gated_rst_prim_b");
    CLKGATE_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( CLKGATE_HOLDOFF ));

    CLKREQ_CTL_DISABLED = new("CLKREQ_CTL_DISABLED", "RW", 1, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.CLKREQ_CTL_DISABLED"});
    CLKREQ_CTL_DISABLED.set_powerwell("vcccfn");
    CLKREQ_CTL_DISABLED.set_rand_mode(0);
   CLKREQ_CTL_DISABLED.set_reset_signame("side_gated_rst_prim_b");
    CLKREQ_CTL_DISABLED.set_logical_path("HQMID");
    void'(add_field( CLKREQ_CTL_DISABLED ));

    CLKGATE_DISABLED = new("CLKGATE_DISABLED", "RW", 1, 17, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.CLKGATE_DISABLED"});
    CLKGATE_DISABLED.set_powerwell("vcccfn");
    CLKGATE_DISABLED.set_rand_mode(0);
   CLKGATE_DISABLED.set_reset_signame("side_gated_rst_prim_b");
    CLKGATE_DISABLED.set_logical_path("HQMID");
    void'(add_field( CLKGATE_DISABLED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_PRIM_CDC_CTL_reg) 
endclass : hqm_sif_csr_bridge_PRIM_CDC_CTL_reg

// ================================================

class hqm_sif_csr_bridge_SIDE_CDC_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CLKREQ_SYNCOFF_HOLDOFF;
  sla_ral_field CLKREQ_OFF_HOLDOFF;
  sla_ral_field PWRGATE_HOLDOFF;
  sla_ral_field CLKGATE_HOLDOFF;
  sla_ral_field CLKREQ_CTL_DISABLED;
  sla_ral_field CLKGATE_DISABLED;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_SIDE_CDC_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.desired)
     `RAL_FIELD_CP_4(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_OFF_HOLDOFF, CLKREQ_OFF_HOLDOFF.desired)
     `RAL_FIELD_CP_4(CLKREQ_OFF_HOLDOFF, CLKREQ_OFF_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.desired)
     `RAL_FIELD_CP_4(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.desired)
     `RAL_FIELD_CP_4(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.desired)
     `RAL_FIELD_CP_1(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.desired, 0)
     `RAL_FIELD_CP(CLKGATE_DISABLED, CLKGATE_DISABLED.desired)
     `RAL_FIELD_CP_1(CLKGATE_DISABLED, CLKGATE_DISABLED.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.actual)
     `RAL_FIELD_CP_4(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_OFF_HOLDOFF, CLKREQ_OFF_HOLDOFF.actual)
     `RAL_FIELD_CP_4(CLKREQ_OFF_HOLDOFF, CLKREQ_OFF_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.actual)
     `RAL_FIELD_CP_4(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.actual)
     `RAL_FIELD_CP_4(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.actual)
     `RAL_FIELD_CP_1(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.actual, 0)
     `RAL_FIELD_CP(CLKGATE_DISABLED, CLKGATE_DISABLED.actual)
     `RAL_FIELD_CP_1(CLKGATE_DISABLED, CLKGATE_DISABLED.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CLKREQ_SYNCOFF_HOLDOFF = new("CLKREQ_SYNCOFF_HOLDOFF", "RW", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.CLKREQ_SYNCOFF_HOLDOFF"});
    CLKREQ_SYNCOFF_HOLDOFF.set_powerwell("vcccfn");
    CLKREQ_SYNCOFF_HOLDOFF.set_rand_mode(0);
   CLKREQ_SYNCOFF_HOLDOFF.set_reset_signame("side_gated_rst_prim_b");
    CLKREQ_SYNCOFF_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( CLKREQ_SYNCOFF_HOLDOFF ));

    CLKREQ_OFF_HOLDOFF = new("CLKREQ_OFF_HOLDOFF", "RW", 4, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.CLKREQ_OFF_HOLDOFF"});
    CLKREQ_OFF_HOLDOFF.set_powerwell("vcccfn");
    CLKREQ_OFF_HOLDOFF.set_rand_mode(0);
   CLKREQ_OFF_HOLDOFF.set_reset_signame("side_gated_rst_prim_b");
    CLKREQ_OFF_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( CLKREQ_OFF_HOLDOFF ));

    PWRGATE_HOLDOFF = new("PWRGATE_HOLDOFF", "RW", 4, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.PWRGATE_HOLDOFF"});
    PWRGATE_HOLDOFF.set_powerwell("vcccfn");
    PWRGATE_HOLDOFF.set_rand_mode(0);
   PWRGATE_HOLDOFF.set_reset_signame("side_gated_rst_prim_b");
    PWRGATE_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( PWRGATE_HOLDOFF ));

    CLKGATE_HOLDOFF = new("CLKGATE_HOLDOFF", "RW", 4, 12, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.CLKGATE_HOLDOFF"});
    CLKGATE_HOLDOFF.set_powerwell("vcccfn");
    CLKGATE_HOLDOFF.set_rand_mode(0);
   CLKGATE_HOLDOFF.set_reset_signame("side_gated_rst_prim_b");
    CLKGATE_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( CLKGATE_HOLDOFF ));

    CLKREQ_CTL_DISABLED = new("CLKREQ_CTL_DISABLED", "RW", 1, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.CLKREQ_CTL_DISABLED"});
    CLKREQ_CTL_DISABLED.set_powerwell("vcccfn");
    CLKREQ_CTL_DISABLED.set_rand_mode(0);
   CLKREQ_CTL_DISABLED.set_reset_signame("side_gated_rst_prim_b");
    CLKREQ_CTL_DISABLED.set_logical_path("HQMID");
    void'(add_field( CLKREQ_CTL_DISABLED ));

    CLKGATE_DISABLED = new("CLKGATE_DISABLED", "RW", 1, 17, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.CLKGATE_DISABLED"});
    CLKGATE_DISABLED.set_powerwell("vcccfn");
    CLKGATE_DISABLED.set_rand_mode(0);
   CLKGATE_DISABLED.set_reset_signame("side_gated_rst_prim_b");
    CLKGATE_DISABLED.set_logical_path("HQMID");
    void'(add_field( CLKGATE_DISABLED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_SIDE_CDC_CTL_reg) 
endclass : hqm_sif_csr_bridge_SIDE_CDC_CTL_reg

// ================================================

class hqm_sif_csr_bridge_IOSFP_CGCTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IDLE_COUNT;
  sla_ral_field CLKGATE_ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_IOSFP_CGCTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IDLE_COUNT, IDLE_COUNT.desired)
     `RAL_FIELD_CP_8(IDLE_COUNT, IDLE_COUNT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CLKGATE_ENABLE, CLKGATE_ENABLE.desired)
     `RAL_FIELD_CP_1(CLKGATE_ENABLE, CLKGATE_ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IDLE_COUNT, IDLE_COUNT.actual)
     `RAL_FIELD_CP_8(IDLE_COUNT, IDLE_COUNT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CLKGATE_ENABLE, CLKGATE_ENABLE.actual)
     `RAL_FIELD_CP_1(CLKGATE_ENABLE, CLKGATE_ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IDLE_COUNT = new("IDLE_COUNT", "RW", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IOSFP_CGCTL.IDLE_COUNT"});
    IDLE_COUNT.set_powerwell("vcccfn");
    IDLE_COUNT.set_rand_mode(0);
   IDLE_COUNT.set_reset_signame("side_gated_rst_prim_b");
    IDLE_COUNT.set_logical_path("HQMID");
    void'(add_field( IDLE_COUNT ));

    CLKGATE_ENABLE = new("CLKGATE_ENABLE", "RW", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IOSFP_CGCTL.CLKGATE_ENABLE"});
    CLKGATE_ENABLE.set_powerwell("vcccfn");
    CLKGATE_ENABLE.set_rand_mode(0);
   CLKGATE_ENABLE.set_reset_signame("side_gated_rst_prim_b");
    CLKGATE_ENABLE.set_logical_path("HQMID");
    void'(add_field( CLKGATE_ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_IOSFP_CGCTL_reg) 
endclass : hqm_sif_csr_bridge_IOSFP_CGCTL_reg

// ================================================

class hqm_sif_csr_bridge_IOSFS_CGCTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IDLE_COUNT;
  sla_ral_field CLKGATE_ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_IOSFS_CGCTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IDLE_COUNT, IDLE_COUNT.desired)
     `RAL_FIELD_CP_8(IDLE_COUNT, IDLE_COUNT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CLKGATE_ENABLE, CLKGATE_ENABLE.desired)
     `RAL_FIELD_CP_1(CLKGATE_ENABLE, CLKGATE_ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IDLE_COUNT, IDLE_COUNT.actual)
     `RAL_FIELD_CP_8(IDLE_COUNT, IDLE_COUNT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CLKGATE_ENABLE, CLKGATE_ENABLE.actual)
     `RAL_FIELD_CP_1(CLKGATE_ENABLE, CLKGATE_ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IDLE_COUNT = new("IDLE_COUNT", "RW", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IOSFS_CGCTL.IDLE_COUNT"});
    IDLE_COUNT.set_powerwell("vcccfn");
    IDLE_COUNT.set_rand_mode(0);
   IDLE_COUNT.set_reset_signame("side_gated_rst_prim_b");
    IDLE_COUNT.set_logical_path("HQMID");
    void'(add_field( IDLE_COUNT ));

    CLKGATE_ENABLE = new("CLKGATE_ENABLE", "RW", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IOSFS_CGCTL.CLKGATE_ENABLE"});
    CLKGATE_ENABLE.set_powerwell("vcccfn");
    CLKGATE_ENABLE.set_rand_mode(0);
   CLKGATE_ENABLE.set_reset_signame("side_gated_rst_prim_b");
    CLKGATE_ENABLE.set_logical_path("HQMID");
    void'(add_field( CLKGATE_ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_IOSFS_CGCTL_reg) 
endclass : hqm_sif_csr_bridge_IOSFS_CGCTL_reg

// ================================================

class hqm_sif_csr_bridge_PARITY_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SIFP_PAR_OFF;
  sla_ral_field MSTR_PAR_OFF;
  sla_ral_field RI_PAR_OFF;
  sla_ral_field INJ_SIF_MCPERR;
  sla_ral_field INJ_SIF_MDPERR;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_PARITY_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SIFP_PAR_OFF, SIFP_PAR_OFF.desired)
     `RAL_FIELD_CP_1(SIFP_PAR_OFF, SIFP_PAR_OFF.desired, 0)
     `RAL_FIELD_CP(MSTR_PAR_OFF, MSTR_PAR_OFF.desired)
     `RAL_FIELD_CP_1(MSTR_PAR_OFF, MSTR_PAR_OFF.desired, 0)
     `RAL_FIELD_CP(RI_PAR_OFF, RI_PAR_OFF.desired)
     `RAL_FIELD_CP_1(RI_PAR_OFF, RI_PAR_OFF.desired, 0)
     `RAL_FIELD_CP(INJ_SIF_MCPERR, INJ_SIF_MCPERR.desired)
     `RAL_FIELD_CP_1(INJ_SIF_MCPERR, INJ_SIF_MCPERR.desired, 0)
     `RAL_FIELD_CP(INJ_SIF_MDPERR, INJ_SIF_MDPERR.desired)
     `RAL_FIELD_CP_1(INJ_SIF_MDPERR, INJ_SIF_MDPERR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SIFP_PAR_OFF, SIFP_PAR_OFF.actual)
     `RAL_FIELD_CP_1(SIFP_PAR_OFF, SIFP_PAR_OFF.actual, 0)
     `RAL_FIELD_CP(MSTR_PAR_OFF, MSTR_PAR_OFF.actual)
     `RAL_FIELD_CP_1(MSTR_PAR_OFF, MSTR_PAR_OFF.actual, 0)
     `RAL_FIELD_CP(RI_PAR_OFF, RI_PAR_OFF.actual)
     `RAL_FIELD_CP_1(RI_PAR_OFF, RI_PAR_OFF.actual, 0)
     `RAL_FIELD_CP(INJ_SIF_MCPERR, INJ_SIF_MCPERR.actual)
     `RAL_FIELD_CP_1(INJ_SIF_MCPERR, INJ_SIF_MCPERR.actual, 0)
     `RAL_FIELD_CP(INJ_SIF_MDPERR, INJ_SIF_MDPERR.actual)
     `RAL_FIELD_CP_1(INJ_SIF_MDPERR, INJ_SIF_MDPERR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SIFP_PAR_OFF = new("SIFP_PAR_OFF", "RW", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PARITY_CTL.SIFP_PAR_OFF"});
    SIFP_PAR_OFF.set_powerwell("vcccfn");
    SIFP_PAR_OFF.set_rand_mode(0);
   SIFP_PAR_OFF.set_reset_signame("side_gated_rst_prim_b");
    SIFP_PAR_OFF.set_logical_path("HQMID");
    void'(add_field( SIFP_PAR_OFF ));

    MSTR_PAR_OFF = new("MSTR_PAR_OFF", "RW", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PARITY_CTL.MSTR_PAR_OFF"});
    MSTR_PAR_OFF.set_powerwell("vcccfn");
    MSTR_PAR_OFF.set_rand_mode(0);
   MSTR_PAR_OFF.set_reset_signame("side_gated_rst_prim_b");
    MSTR_PAR_OFF.set_logical_path("HQMID");
    void'(add_field( MSTR_PAR_OFF ));

    RI_PAR_OFF = new("RI_PAR_OFF", "RW", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PARITY_CTL.RI_PAR_OFF"});
    RI_PAR_OFF.set_powerwell("vcccfn");
    RI_PAR_OFF.set_rand_mode(0);
   RI_PAR_OFF.set_reset_signame("side_gated_rst_prim_b");
    RI_PAR_OFF.set_logical_path("HQMID");
    void'(add_field( RI_PAR_OFF ));

    INJ_SIF_MCPERR = new("INJ_SIF_MCPERR", "RW", 1, 3, {""});
    INJ_SIF_MCPERR.set_powerwell("vcccfn");
    INJ_SIF_MCPERR.set_rand_mode(0);
   INJ_SIF_MCPERR.set_reset_signame("side_gated_rst_prim_b");
    void'(add_field( INJ_SIF_MCPERR ));

    INJ_SIF_MDPERR = new("INJ_SIF_MDPERR", "RW", 1, 4, {""});
    INJ_SIF_MDPERR.set_powerwell("vcccfn");
    INJ_SIF_MDPERR.set_rand_mode(0);
   INJ_SIF_MDPERR.set_reset_signame("side_gated_rst_prim_b");
    void'(add_field( INJ_SIF_MDPERR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_PARITY_CTL_reg) 
endclass : hqm_sif_csr_bridge_PARITY_CTL_reg

// ================================================

class hqm_sif_csr_bridge_CFG_MASTER_TIMEOUT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMEOUT_PWR2;
  sla_ral_field TIMEOUT_ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_CFG_MASTER_TIMEOUT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMEOUT_PWR2, TIMEOUT_PWR2.desired)
     `RAL_FIELD_CP_5(TIMEOUT_PWR2, TIMEOUT_PWR2.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(TIMEOUT_ENABLE, TIMEOUT_ENABLE.desired)
     `RAL_FIELD_CP_1(TIMEOUT_ENABLE, TIMEOUT_ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMEOUT_PWR2, TIMEOUT_PWR2.actual)
     `RAL_FIELD_CP_5(TIMEOUT_PWR2, TIMEOUT_PWR2.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(TIMEOUT_ENABLE, TIMEOUT_ENABLE.actual)
     `RAL_FIELD_CP_1(TIMEOUT_ENABLE, TIMEOUT_ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMEOUT_PWR2 = new("TIMEOUT_PWR2", "RW", 5, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_MASTER_TIMEOUT.TIMEOUT_PWR2"});
    TIMEOUT_PWR2.set_powerwell("vcccfn");
    TIMEOUT_PWR2.set_rand_mode(0);
   TIMEOUT_PWR2.set_reset_signame("side_gated_rst_prim_b");
    TIMEOUT_PWR2.set_logical_path("HQMID");
    void'(add_field( TIMEOUT_PWR2 ));

    TIMEOUT_ENABLE = new("TIMEOUT_ENABLE", "RW", 1, 31, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_MASTER_TIMEOUT.TIMEOUT_ENABLE"});
    TIMEOUT_ENABLE.set_powerwell("vcccfn");
    TIMEOUT_ENABLE.set_rand_mode(0);
   TIMEOUT_ENABLE.set_reset_signame("side_gated_rst_prim_b");
    TIMEOUT_ENABLE.set_logical_path("HQMID");
    void'(add_field( TIMEOUT_ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_CFG_MASTER_TIMEOUT_reg) 
endclass : hqm_sif_csr_bridge_CFG_MASTER_TIMEOUT_reg

// ================================================

class hqm_sif_csr_bridge_MMIO_TIMEOUT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMEOUT_PWR2;
  sla_ral_field TIMEOUT_ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_MMIO_TIMEOUT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMEOUT_PWR2, TIMEOUT_PWR2.desired)
     `RAL_FIELD_CP_5(TIMEOUT_PWR2, TIMEOUT_PWR2.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(TIMEOUT_ENABLE, TIMEOUT_ENABLE.desired)
     `RAL_FIELD_CP_1(TIMEOUT_ENABLE, TIMEOUT_ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMEOUT_PWR2, TIMEOUT_PWR2.actual)
     `RAL_FIELD_CP_5(TIMEOUT_PWR2, TIMEOUT_PWR2.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(TIMEOUT_ENABLE, TIMEOUT_ENABLE.actual)
     `RAL_FIELD_CP_1(TIMEOUT_ENABLE, TIMEOUT_ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMEOUT_PWR2 = new("TIMEOUT_PWR2", "RW", 5, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MMIO_TIMEOUT.TIMEOUT_PWR2"});
    TIMEOUT_PWR2.set_powerwell("vcccfn");
    TIMEOUT_PWR2.set_rand_mode(0);
   TIMEOUT_PWR2.set_reset_signame("side_gated_rst_prim_b");
    TIMEOUT_PWR2.set_logical_path("HQMID");
    void'(add_field( TIMEOUT_PWR2 ));

    TIMEOUT_ENABLE = new("TIMEOUT_ENABLE", "RW", 1, 31, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MMIO_TIMEOUT.TIMEOUT_ENABLE"});
    TIMEOUT_ENABLE.set_powerwell("vcccfn");
    TIMEOUT_ENABLE.set_rand_mode(0);
   TIMEOUT_ENABLE.set_reset_signame("side_gated_rst_prim_b");
    TIMEOUT_ENABLE.set_logical_path("HQMID");
    void'(add_field( TIMEOUT_ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_MMIO_TIMEOUT_reg) 
endclass : hqm_sif_csr_bridge_MMIO_TIMEOUT_reg

// ================================================

class hqm_sif_csr_bridge_HCW_TIMEOUT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMEOUT_PWR2;
  sla_ral_field TIMEOUT_ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HCW_TIMEOUT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMEOUT_PWR2, TIMEOUT_PWR2.desired)
     `RAL_FIELD_CP_5(TIMEOUT_PWR2, TIMEOUT_PWR2.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(TIMEOUT_ENABLE, TIMEOUT_ENABLE.desired)
     `RAL_FIELD_CP_1(TIMEOUT_ENABLE, TIMEOUT_ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMEOUT_PWR2, TIMEOUT_PWR2.actual)
     `RAL_FIELD_CP_5(TIMEOUT_PWR2, TIMEOUT_PWR2.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(TIMEOUT_ENABLE, TIMEOUT_ENABLE.actual)
     `RAL_FIELD_CP_1(TIMEOUT_ENABLE, TIMEOUT_ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMEOUT_PWR2 = new("TIMEOUT_PWR2", "RW", 5, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HCW_TIMEOUT.TIMEOUT_PWR2"});
    TIMEOUT_PWR2.set_powerwell("vcccfn");
    TIMEOUT_PWR2.set_rand_mode(0);
   TIMEOUT_PWR2.set_reset_signame("side_gated_rst_prim_b");
    TIMEOUT_PWR2.set_logical_path("HQMID");
    void'(add_field( TIMEOUT_PWR2 ));

    TIMEOUT_ENABLE = new("TIMEOUT_ENABLE", "RW", 1, 31, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HCW_TIMEOUT.TIMEOUT_ENABLE"});
    TIMEOUT_ENABLE.set_powerwell("vcccfn");
    TIMEOUT_ENABLE.set_rand_mode(0);
   TIMEOUT_ENABLE.set_reset_signame("side_gated_rst_prim_b");
    TIMEOUT_ENABLE.set_logical_path("HQMID");
    void'(add_field( TIMEOUT_ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HCW_TIMEOUT_reg) 
endclass : hqm_sif_csr_bridge_HCW_TIMEOUT_reg

// ================================================

class hqm_sif_csr_bridge_VISA_SW_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TRIGGER_MASK;
  sla_ral_field SW_TRIGGER;
  sla_ral_field PH_TRIGGER_ENABLE;
  sla_ral_field SW_SPARE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_VISA_SW_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TRIGGER_MASK, TRIGGER_MASK.desired)
     `RAL_FIELD_CP_1(TRIGGER_MASK, TRIGGER_MASK.desired, 0)
     `RAL_FIELD_CP(SW_TRIGGER, SW_TRIGGER.desired)
     `RAL_FIELD_CP_1(SW_TRIGGER, SW_TRIGGER.desired, 0)
     `RAL_FIELD_CP(PH_TRIGGER_ENABLE, PH_TRIGGER_ENABLE.desired)
     `RAL_FIELD_CP_1(PH_TRIGGER_ENABLE, PH_TRIGGER_ENABLE.desired, 0)
     `RAL_FIELD_CP(SW_SPARE, SW_SPARE.desired)
     `RAL_FIELD_CP_16(SW_SPARE, SW_SPARE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_13(SW_SPARE, SW_SPARE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TRIGGER_MASK, TRIGGER_MASK.actual)
     `RAL_FIELD_CP_1(TRIGGER_MASK, TRIGGER_MASK.actual, 0)
     `RAL_FIELD_CP(SW_TRIGGER, SW_TRIGGER.actual)
     `RAL_FIELD_CP_1(SW_TRIGGER, SW_TRIGGER.actual, 0)
     `RAL_FIELD_CP(PH_TRIGGER_ENABLE, PH_TRIGGER_ENABLE.actual)
     `RAL_FIELD_CP_1(PH_TRIGGER_ENABLE, PH_TRIGGER_ENABLE.actual, 0)
     `RAL_FIELD_CP(SW_SPARE, SW_SPARE.actual)
     `RAL_FIELD_CP_16(SW_SPARE, SW_SPARE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_13(SW_SPARE, SW_SPARE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TRIGGER_MASK = new("TRIGGER_MASK", "RW", 1, 0, {"i_hqm_sif_core.i_hqm_iosfsb_core.i_hqm_sb_ep_xlate.VISA_SW_CONTROL.TRIGGER_MASK"});
    TRIGGER_MASK.set_powerwell("vcccfn");
    TRIGGER_MASK.set_rand_mode(0);
   TRIGGER_MASK.set_reset_signame("side_gated_rst_prim_b");
    TRIGGER_MASK.set_logical_path("HQMID");
    void'(add_field( TRIGGER_MASK ));

    SW_TRIGGER = new("SW_TRIGGER", "RW", 1, 1, {"i_hqm_sif_core.i_hqm_iosfsb_core.i_hqm_sb_ep_xlate.VISA_SW_CONTROL.SW_TRIGGER"});
    SW_TRIGGER.set_powerwell("vcccfn");
    SW_TRIGGER.set_rand_mode(0);
   SW_TRIGGER.set_reset_signame("side_gated_rst_prim_b");
    SW_TRIGGER.set_logical_path("HQMID");
    void'(add_field( SW_TRIGGER ));

    PH_TRIGGER_ENABLE = new("PH_TRIGGER_ENABLE", "RW", 1, 2, {"i_hqm_sif_core.i_hqm_iosfsb_core.i_hqm_sb_ep_xlate.VISA_SW_CONTROL.PH_TRIGGER_ENABLE"});
    PH_TRIGGER_ENABLE.set_powerwell("vcccfn");
    PH_TRIGGER_ENABLE.set_rand_mode(0);
   PH_TRIGGER_ENABLE.set_reset_signame("side_gated_rst_prim_b");
    PH_TRIGGER_ENABLE.set_logical_path("HQMID");
    void'(add_field( PH_TRIGGER_ENABLE ));

    SW_SPARE = new("SW_SPARE", "RW", 29, 3, {"i_hqm_sif_core.i_hqm_iosfsb_core.i_hqm_sb_ep_xlate.VISA_SW_CONTROL.SW_SPARE"});
    SW_SPARE.set_powerwell("vcccfn");
    SW_SPARE.set_rand_mode(0);
   SW_SPARE.set_reset_signame("side_gated_rst_prim_b");
    SW_SPARE.set_logical_path("HQMID");
    void'(add_field( SW_SPARE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_VISA_SW_CONTROL_reg) 
endclass : hqm_sif_csr_bridge_VISA_SW_CONTROL_reg

// ================================================

class hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ADDR_L;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_L, ADDR_L.desired)
     `RAL_FIELD_CP_16(ADDR_L, ADDR_L.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR_L, ADDR_L.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_L, ADDR_L.actual)
     `RAL_FIELD_CP_16(ADDR_L, ADDR_L.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR_L, ADDR_L.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ADDR_L = new("ADDR_L", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_PH_TRIGGER_ADDR_L.ADDR_L"});
    ADDR_L.set_powerwell("vcccfn");
    ADDR_L.set_rand_mode(0);
   ADDR_L.set_reset_signame("hqm_csr_mmio_rst_n");
    ADDR_L.set_logical_path("HQMID");
    void'(add_field( ADDR_L ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_L_reg) 
endclass : hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_L_reg

// ================================================

class hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_U_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ADDR_U;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_U_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_U, ADDR_U.desired)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR_U, ADDR_U.actual)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR_U, ADDR_U.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ADDR_U = new("ADDR_U", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_PH_TRIGGER_ADDR_U.ADDR_U"});
    ADDR_U.set_powerwell("vcccfn");
    ADDR_U.set_rand_mode(0);
   ADDR_U.set_reset_signame("hqm_csr_mmio_rst_n");
    ADDR_U.set_logical_path("HQMID");
    void'(add_field( ADDR_U ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_U_reg) 
endclass : hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_U_reg

// ================================================

class hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MASK_L;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MASK_L, MASK_L.desired)
     `RAL_FIELD_CP_16(MASK_L, MASK_L.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MASK_L, MASK_L.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MASK_L, MASK_L.actual)
     `RAL_FIELD_CP_16(MASK_L, MASK_L.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MASK_L, MASK_L.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MASK_L = new("MASK_L", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_PH_TRIGGER_MASK_L.MASK_L"});
    MASK_L.set_powerwell("vcccfn");
    MASK_L.set_rand_mode(0);
   MASK_L.set_reset_signame("hqm_csr_mmio_rst_n");
    MASK_L.set_logical_path("HQMID");
    void'(add_field( MASK_L ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_L_reg) 
endclass : hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_L_reg

// ================================================

class hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_U_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MASK_U;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_U_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MASK_U, MASK_U.desired)
     `RAL_FIELD_CP_16(MASK_U, MASK_U.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MASK_U, MASK_U.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MASK_U, MASK_U.actual)
     `RAL_FIELD_CP_16(MASK_U, MASK_U.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MASK_U, MASK_U.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MASK_U = new("MASK_U", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_PH_TRIGGER_MASK_U.MASK_U"});
    MASK_U.set_powerwell("vcccfn");
    MASK_U.set_rand_mode(0);
   MASK_U.set_reset_signame("hqm_csr_mmio_rst_n");
    MASK_U.set_logical_path("HQMID");
    void'(add_field( MASK_U ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_U_reg) 
endclass : hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_U_reg

// ================================================

class hqm_sif_csr_bridge_SIF_IDLE_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CFGM_IDLE;
  sla_ral_field RI_IDLE;
  sla_ral_field TGT_IDLE;
  sla_ral_field MSTR_INTF_IDLE;
  sla_ral_field MSTR_IDLE;
  sla_ral_field INT_IDLE;
  sla_ral_field PROC_IDLE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_SIF_IDLE_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFGM_IDLE, CFGM_IDLE.desired)
     `RAL_FIELD_CP_1(CFGM_IDLE, CFGM_IDLE.desired, 0)
     `RAL_FIELD_CP(RI_IDLE, RI_IDLE.desired)
     `RAL_FIELD_CP_1(RI_IDLE, RI_IDLE.desired, 0)
     `RAL_FIELD_CP(TGT_IDLE, TGT_IDLE.desired)
     `RAL_FIELD_CP_1(TGT_IDLE, TGT_IDLE.desired, 0)
     `RAL_FIELD_CP(MSTR_INTF_IDLE, MSTR_INTF_IDLE.desired)
     `RAL_FIELD_CP_1(MSTR_INTF_IDLE, MSTR_INTF_IDLE.desired, 0)
     `RAL_FIELD_CP(MSTR_IDLE, MSTR_IDLE.desired)
     `RAL_FIELD_CP_1(MSTR_IDLE, MSTR_IDLE.desired, 0)
     `RAL_FIELD_CP(INT_IDLE, INT_IDLE.desired)
     `RAL_FIELD_CP_1(INT_IDLE, INT_IDLE.desired, 0)
     `RAL_FIELD_CP(PROC_IDLE, PROC_IDLE.desired)
     `RAL_FIELD_CP_1(PROC_IDLE, PROC_IDLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFGM_IDLE, CFGM_IDLE.actual)
     `RAL_FIELD_CP_1(CFGM_IDLE, CFGM_IDLE.actual, 0)
     `RAL_FIELD_CP(RI_IDLE, RI_IDLE.actual)
     `RAL_FIELD_CP_1(RI_IDLE, RI_IDLE.actual, 0)
     `RAL_FIELD_CP(TGT_IDLE, TGT_IDLE.actual)
     `RAL_FIELD_CP_1(TGT_IDLE, TGT_IDLE.actual, 0)
     `RAL_FIELD_CP(MSTR_INTF_IDLE, MSTR_INTF_IDLE.actual)
     `RAL_FIELD_CP_1(MSTR_INTF_IDLE, MSTR_INTF_IDLE.actual, 0)
     `RAL_FIELD_CP(MSTR_IDLE, MSTR_IDLE.actual)
     `RAL_FIELD_CP_1(MSTR_IDLE, MSTR_IDLE.actual, 0)
     `RAL_FIELD_CP(INT_IDLE, INT_IDLE.actual)
     `RAL_FIELD_CP_1(INT_IDLE, INT_IDLE.actual, 0)
     `RAL_FIELD_CP(PROC_IDLE, PROC_IDLE.actual)
     `RAL_FIELD_CP_1(PROC_IDLE, PROC_IDLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CFGM_IDLE = new("CFGM_IDLE", "RO/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.CFGM_IDLE"});
    CFGM_IDLE.set_powerwell("vcccfn");
    CFGM_IDLE.set_rand_mode(0);
   CFGM_IDLE.set_reset_signame("hqm_csr_mmio_rst_n");
    CFGM_IDLE.set_logical_path("HQMID");
    void'(add_field( CFGM_IDLE ));

    RI_IDLE = new("RI_IDLE", "RO/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.RI_IDLE"});
    RI_IDLE.set_powerwell("vcccfn");
    RI_IDLE.set_rand_mode(0);
   RI_IDLE.set_reset_signame("hqm_csr_mmio_rst_n");
    RI_IDLE.set_logical_path("HQMID");
    void'(add_field( RI_IDLE ));

    TGT_IDLE = new("TGT_IDLE", "RO/V", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.TGT_IDLE"});
    TGT_IDLE.set_powerwell("vcccfn");
    TGT_IDLE.set_rand_mode(0);
   TGT_IDLE.set_reset_signame("hqm_csr_mmio_rst_n");
    TGT_IDLE.set_logical_path("HQMID");
    void'(add_field( TGT_IDLE ));

    MSTR_INTF_IDLE = new("MSTR_INTF_IDLE", "RO/V", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.MSTR_INTF_IDLE"});
    MSTR_INTF_IDLE.set_powerwell("vcccfn");
    MSTR_INTF_IDLE.set_rand_mode(0);
   MSTR_INTF_IDLE.set_reset_signame("hqm_csr_mmio_rst_n");
    MSTR_INTF_IDLE.set_logical_path("HQMID");
    void'(add_field( MSTR_INTF_IDLE ));

    MSTR_IDLE = new("MSTR_IDLE", "RO/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.MSTR_IDLE"});
    MSTR_IDLE.set_powerwell("vcccfn");
    MSTR_IDLE.set_rand_mode(0);
   MSTR_IDLE.set_reset_signame("hqm_csr_mmio_rst_n");
    MSTR_IDLE.set_logical_path("HQMID");
    void'(add_field( MSTR_IDLE ));

    INT_IDLE = new("INT_IDLE", "RO/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.INT_IDLE"});
    INT_IDLE.set_powerwell("vcccfn");
    INT_IDLE.set_rand_mode(0);
   INT_IDLE.set_reset_signame("hqm_csr_mmio_rst_n");
    INT_IDLE.set_logical_path("HQMID");
    void'(add_field( INT_IDLE ));

    PROC_IDLE = new("PROC_IDLE", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.PROC_IDLE"});
    PROC_IDLE.set_powerwell("vcccfn");
    PROC_IDLE.set_rand_mode(0);
   PROC_IDLE.set_reset_signame("hqm_csr_mmio_rst_n");
    PROC_IDLE.set_logical_path("HQMID");
    void'(add_field( PROC_IDLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_SIF_IDLE_STATUS_reg) 
endclass : hqm_sif_csr_bridge_SIF_IDLE_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_SIF_DB_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ALARM_DB_DEPTH;
  sla_ral_field ALARM_DB_READY;
  sla_ral_field P_REQ_DB_DEPTH;
  sla_ral_field P_REQ_DB_READY;
  sla_ral_field NP_REQ_DB_DEPTH;
  sla_ral_field NP_REQ_DB_READY;
  sla_ral_field CPL_REQ_DB_DEPTH;
  sla_ral_field CPL_REQ_DB_READY;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_SIF_DB_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ALARM_DB_DEPTH, ALARM_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(ALARM_DB_DEPTH, ALARM_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(ALARM_DB_READY, ALARM_DB_READY.desired)
     `RAL_FIELD_CP_1(ALARM_DB_READY, ALARM_DB_READY.desired, 0)
     `RAL_FIELD_CP(P_REQ_DB_DEPTH, P_REQ_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(P_REQ_DB_DEPTH, P_REQ_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(P_REQ_DB_READY, P_REQ_DB_READY.desired)
     `RAL_FIELD_CP_1(P_REQ_DB_READY, P_REQ_DB_READY.desired, 0)
     `RAL_FIELD_CP(NP_REQ_DB_DEPTH, NP_REQ_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(NP_REQ_DB_DEPTH, NP_REQ_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(NP_REQ_DB_READY, NP_REQ_DB_READY.desired)
     `RAL_FIELD_CP_1(NP_REQ_DB_READY, NP_REQ_DB_READY.desired, 0)
     `RAL_FIELD_CP(CPL_REQ_DB_DEPTH, CPL_REQ_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(CPL_REQ_DB_DEPTH, CPL_REQ_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(CPL_REQ_DB_READY, CPL_REQ_DB_READY.desired)
     `RAL_FIELD_CP_1(CPL_REQ_DB_READY, CPL_REQ_DB_READY.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ALARM_DB_DEPTH, ALARM_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(ALARM_DB_DEPTH, ALARM_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(ALARM_DB_READY, ALARM_DB_READY.actual)
     `RAL_FIELD_CP_1(ALARM_DB_READY, ALARM_DB_READY.actual, 0)
     `RAL_FIELD_CP(P_REQ_DB_DEPTH, P_REQ_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(P_REQ_DB_DEPTH, P_REQ_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(P_REQ_DB_READY, P_REQ_DB_READY.actual)
     `RAL_FIELD_CP_1(P_REQ_DB_READY, P_REQ_DB_READY.actual, 0)
     `RAL_FIELD_CP(NP_REQ_DB_DEPTH, NP_REQ_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(NP_REQ_DB_DEPTH, NP_REQ_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(NP_REQ_DB_READY, NP_REQ_DB_READY.actual)
     `RAL_FIELD_CP_1(NP_REQ_DB_READY, NP_REQ_DB_READY.actual, 0)
     `RAL_FIELD_CP(CPL_REQ_DB_DEPTH, CPL_REQ_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(CPL_REQ_DB_DEPTH, CPL_REQ_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(CPL_REQ_DB_READY, CPL_REQ_DB_READY.actual)
     `RAL_FIELD_CP_1(CPL_REQ_DB_READY, CPL_REQ_DB_READY.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ALARM_DB_DEPTH = new("ALARM_DB_DEPTH", "RO/V", 2, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.ALARM_DB_DEPTH"});
    ALARM_DB_DEPTH.set_powerwell("vcccfn");
    ALARM_DB_DEPTH.set_rand_mode(0);
   ALARM_DB_DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    ALARM_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( ALARM_DB_DEPTH ));

    ALARM_DB_READY = new("ALARM_DB_READY", "RO/V", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.ALARM_DB_READY"});
    ALARM_DB_READY.set_powerwell("vcccfn");
    ALARM_DB_READY.set_rand_mode(0);
   ALARM_DB_READY.set_reset_signame("hqm_csr_mmio_rst_n");
    ALARM_DB_READY.set_logical_path("HQMID");
    void'(add_field( ALARM_DB_READY ));

    P_REQ_DB_DEPTH = new("P_REQ_DB_DEPTH", "RO/V", 2, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.P_REQ_DB_DEPTH"});
    P_REQ_DB_DEPTH.set_powerwell("vcccfn");
    P_REQ_DB_DEPTH.set_rand_mode(0);
   P_REQ_DB_DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    P_REQ_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( P_REQ_DB_DEPTH ));

    P_REQ_DB_READY = new("P_REQ_DB_READY", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.P_REQ_DB_READY"});
    P_REQ_DB_READY.set_powerwell("vcccfn");
    P_REQ_DB_READY.set_rand_mode(0);
   P_REQ_DB_READY.set_reset_signame("hqm_csr_mmio_rst_n");
    P_REQ_DB_READY.set_logical_path("HQMID");
    void'(add_field( P_REQ_DB_READY ));

    NP_REQ_DB_DEPTH = new("NP_REQ_DB_DEPTH", "RO/V", 2, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.NP_REQ_DB_DEPTH"});
    NP_REQ_DB_DEPTH.set_powerwell("vcccfn");
    NP_REQ_DB_DEPTH.set_rand_mode(0);
   NP_REQ_DB_DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    NP_REQ_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( NP_REQ_DB_DEPTH ));

    NP_REQ_DB_READY = new("NP_REQ_DB_READY", "RO/V", 1, 10, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.NP_REQ_DB_READY"});
    NP_REQ_DB_READY.set_powerwell("vcccfn");
    NP_REQ_DB_READY.set_rand_mode(0);
   NP_REQ_DB_READY.set_reset_signame("hqm_csr_mmio_rst_n");
    NP_REQ_DB_READY.set_logical_path("HQMID");
    void'(add_field( NP_REQ_DB_READY ));

    CPL_REQ_DB_DEPTH = new("CPL_REQ_DB_DEPTH", "RO/V", 2, 12, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.CPL_REQ_DB_DEPTH"});
    CPL_REQ_DB_DEPTH.set_powerwell("vcccfn");
    CPL_REQ_DB_DEPTH.set_rand_mode(0);
   CPL_REQ_DB_DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    CPL_REQ_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( CPL_REQ_DB_DEPTH ));

    CPL_REQ_DB_READY = new("CPL_REQ_DB_READY", "RO/V", 1, 14, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.CPL_REQ_DB_READY"});
    CPL_REQ_DB_READY.set_powerwell("vcccfn");
    CPL_REQ_DB_READY.set_rand_mode(0);
   CPL_REQ_DB_READY.set_reset_signame("hqm_csr_mmio_rst_n");
    CPL_REQ_DB_READY.set_logical_path("HQMID");
    void'(add_field( CPL_REQ_DB_READY ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_SIF_DB_STATUS_reg) 
endclass : hqm_sif_csr_bridge_SIF_DB_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_RI_DB_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PH_DB_DEPTH;
  sla_ral_field PH_DB_READY;
  sla_ral_field PD_DB_DEPTH;
  sla_ral_field PD_DB_READY;
  sla_ral_field NPH_DB_DEPTH;
  sla_ral_field NPH_DB_READY;
  sla_ral_field NPD_DB_DEPTH;
  sla_ral_field NPD_DB_READY;
  sla_ral_field IOQ_DB_DEPTH;
  sla_ral_field IOQ_DB_READY;
  sla_ral_field HCW_DB_DEPTH;
  sla_ral_field HCW_DB_READY;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_DB_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PH_DB_DEPTH, PH_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(PH_DB_DEPTH, PH_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(PH_DB_READY, PH_DB_READY.desired)
     `RAL_FIELD_CP_1(PH_DB_READY, PH_DB_READY.desired, 0)
     `RAL_FIELD_CP(PD_DB_DEPTH, PD_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(PD_DB_DEPTH, PD_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(PD_DB_READY, PD_DB_READY.desired)
     `RAL_FIELD_CP_1(PD_DB_READY, PD_DB_READY.desired, 0)
     `RAL_FIELD_CP(NPH_DB_DEPTH, NPH_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(NPH_DB_DEPTH, NPH_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(NPH_DB_READY, NPH_DB_READY.desired)
     `RAL_FIELD_CP_1(NPH_DB_READY, NPH_DB_READY.desired, 0)
     `RAL_FIELD_CP(NPD_DB_DEPTH, NPD_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(NPD_DB_DEPTH, NPD_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(NPD_DB_READY, NPD_DB_READY.desired)
     `RAL_FIELD_CP_1(NPD_DB_READY, NPD_DB_READY.desired, 0)
     `RAL_FIELD_CP(IOQ_DB_DEPTH, IOQ_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(IOQ_DB_DEPTH, IOQ_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(IOQ_DB_READY, IOQ_DB_READY.desired)
     `RAL_FIELD_CP_1(IOQ_DB_READY, IOQ_DB_READY.desired, 0)
     `RAL_FIELD_CP(HCW_DB_DEPTH, HCW_DB_DEPTH.desired)
     `RAL_FIELD_CP_2(HCW_DB_DEPTH, HCW_DB_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(HCW_DB_READY, HCW_DB_READY.desired)
     `RAL_FIELD_CP_1(HCW_DB_READY, HCW_DB_READY.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PH_DB_DEPTH, PH_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(PH_DB_DEPTH, PH_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(PH_DB_READY, PH_DB_READY.actual)
     `RAL_FIELD_CP_1(PH_DB_READY, PH_DB_READY.actual, 0)
     `RAL_FIELD_CP(PD_DB_DEPTH, PD_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(PD_DB_DEPTH, PD_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(PD_DB_READY, PD_DB_READY.actual)
     `RAL_FIELD_CP_1(PD_DB_READY, PD_DB_READY.actual, 0)
     `RAL_FIELD_CP(NPH_DB_DEPTH, NPH_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(NPH_DB_DEPTH, NPH_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(NPH_DB_READY, NPH_DB_READY.actual)
     `RAL_FIELD_CP_1(NPH_DB_READY, NPH_DB_READY.actual, 0)
     `RAL_FIELD_CP(NPD_DB_DEPTH, NPD_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(NPD_DB_DEPTH, NPD_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(NPD_DB_READY, NPD_DB_READY.actual)
     `RAL_FIELD_CP_1(NPD_DB_READY, NPD_DB_READY.actual, 0)
     `RAL_FIELD_CP(IOQ_DB_DEPTH, IOQ_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(IOQ_DB_DEPTH, IOQ_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(IOQ_DB_READY, IOQ_DB_READY.actual)
     `RAL_FIELD_CP_1(IOQ_DB_READY, IOQ_DB_READY.actual, 0)
     `RAL_FIELD_CP(HCW_DB_DEPTH, HCW_DB_DEPTH.actual)
     `RAL_FIELD_CP_2(HCW_DB_DEPTH, HCW_DB_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(HCW_DB_READY, HCW_DB_READY.actual)
     `RAL_FIELD_CP_1(HCW_DB_READY, HCW_DB_READY.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PH_DB_DEPTH = new("PH_DB_DEPTH", "RO/V", 2, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.PH_DB_DEPTH"});
    PH_DB_DEPTH.set_powerwell("vcccfn");
    PH_DB_DEPTH.set_rand_mode(0);
   PH_DB_DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    PH_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( PH_DB_DEPTH ));

    PH_DB_READY = new("PH_DB_READY", "RO/V", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.PH_DB_READY"});
    PH_DB_READY.set_powerwell("vcccfn");
    PH_DB_READY.set_rand_mode(0);
   PH_DB_READY.set_reset_signame("hqm_csr_mmio_rst_n");
    PH_DB_READY.set_logical_path("HQMID");
    void'(add_field( PH_DB_READY ));

    PD_DB_DEPTH = new("PD_DB_DEPTH", "RO/V", 2, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.PD_DB_DEPTH"});
    PD_DB_DEPTH.set_powerwell("vcccfn");
    PD_DB_DEPTH.set_rand_mode(0);
   PD_DB_DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    PD_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( PD_DB_DEPTH ));

    PD_DB_READY = new("PD_DB_READY", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.PD_DB_READY"});
    PD_DB_READY.set_powerwell("vcccfn");
    PD_DB_READY.set_rand_mode(0);
   PD_DB_READY.set_reset_signame("hqm_csr_mmio_rst_n");
    PD_DB_READY.set_logical_path("HQMID");
    void'(add_field( PD_DB_READY ));

    NPH_DB_DEPTH = new("NPH_DB_DEPTH", "RO/V", 2, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.NPH_DB_DEPTH"});
    NPH_DB_DEPTH.set_powerwell("vcccfn");
    NPH_DB_DEPTH.set_rand_mode(0);
   NPH_DB_DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    NPH_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( NPH_DB_DEPTH ));

    NPH_DB_READY = new("NPH_DB_READY", "RO/V", 1, 10, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.NPH_DB_READY"});
    NPH_DB_READY.set_powerwell("vcccfn");
    NPH_DB_READY.set_rand_mode(0);
   NPH_DB_READY.set_reset_signame("hqm_csr_mmio_rst_n");
    NPH_DB_READY.set_logical_path("HQMID");
    void'(add_field( NPH_DB_READY ));

    NPD_DB_DEPTH = new("NPD_DB_DEPTH", "RO/V", 2, 12, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.NPD_DB_DEPTH"});
    NPD_DB_DEPTH.set_powerwell("vcccfn");
    NPD_DB_DEPTH.set_rand_mode(0);
   NPD_DB_DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    NPD_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( NPD_DB_DEPTH ));

    NPD_DB_READY = new("NPD_DB_READY", "RO/V", 1, 14, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.NPD_DB_READY"});
    NPD_DB_READY.set_powerwell("vcccfn");
    NPD_DB_READY.set_rand_mode(0);
   NPD_DB_READY.set_reset_signame("hqm_csr_mmio_rst_n");
    NPD_DB_READY.set_logical_path("HQMID");
    void'(add_field( NPD_DB_READY ));

    IOQ_DB_DEPTH = new("IOQ_DB_DEPTH", "RO/V", 2, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.IOQ_DB_DEPTH"});
    IOQ_DB_DEPTH.set_powerwell("vcccfn");
    IOQ_DB_DEPTH.set_rand_mode(0);
   IOQ_DB_DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    IOQ_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( IOQ_DB_DEPTH ));

    IOQ_DB_READY = new("IOQ_DB_READY", "RO/V", 1, 18, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.IOQ_DB_READY"});
    IOQ_DB_READY.set_powerwell("vcccfn");
    IOQ_DB_READY.set_rand_mode(0);
   IOQ_DB_READY.set_reset_signame("hqm_csr_mmio_rst_n");
    IOQ_DB_READY.set_logical_path("HQMID");
    void'(add_field( IOQ_DB_READY ));

    HCW_DB_DEPTH = new("HCW_DB_DEPTH", "RO/V", 2, 20, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.HCW_DB_DEPTH"});
    HCW_DB_DEPTH.set_powerwell("vcccfn");
    HCW_DB_DEPTH.set_rand_mode(0);
   HCW_DB_DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    HCW_DB_DEPTH.set_logical_path("HQMID");
    void'(add_field( HCW_DB_DEPTH ));

    HCW_DB_READY = new("HCW_DB_READY", "RO/V", 1, 22, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.HCW_DB_READY"});
    HCW_DB_READY.set_powerwell("vcccfn");
    HCW_DB_READY.set_rand_mode(0);
   HCW_DB_READY.set_reset_signame("hqm_csr_mmio_rst_n");
    HCW_DB_READY.set_logical_path("HQMID");
    void'(add_field( HCW_DB_READY ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_DB_STATUS_reg) 
endclass : hqm_sif_csr_bridge_RI_DB_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_RI_PHDR_FIFO_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HIGH_WM;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_PHDR_FIFO_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.desired)
     `RAL_FIELD_CP_5(HIGH_WM, HIGH_WM.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.actual)
     `RAL_FIELD_CP_5(HIGH_WM, HIGH_WM.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HIGH_WM = new("HIGH_WM", "RW", 5, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_CTL.HIGH_WM"});
    HIGH_WM.set_powerwell("vcccfn");
    HIGH_WM.set_rand_mode(0);
   HIGH_WM.set_reset_signame("side_gated_rst_prim_b");
    HIGH_WM.set_logical_path("HQMID");
    void'(add_field( HIGH_WM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_PHDR_FIFO_CTL_reg) 
endclass : hqm_sif_csr_bridge_RI_PHDR_FIFO_CTL_reg

// ================================================

class hqm_sif_csr_bridge_RI_PDATA_FIFO_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HIGH_WM;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_PDATA_FIFO_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.desired)
     `RAL_FIELD_CP_6(HIGH_WM, HIGH_WM.desired, 0,1,2,3,4,5)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.actual)
     `RAL_FIELD_CP_6(HIGH_WM, HIGH_WM.actual, 0,1,2,3,4,5)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HIGH_WM = new("HIGH_WM", "RW", 6, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_CTL.HIGH_WM"});
    HIGH_WM.set_powerwell("vcccfn");
    HIGH_WM.set_rand_mode(0);
   HIGH_WM.set_reset_signame("side_gated_rst_prim_b");
    HIGH_WM.set_logical_path("HQMID");
    void'(add_field( HIGH_WM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_PDATA_FIFO_CTL_reg) 
endclass : hqm_sif_csr_bridge_RI_PDATA_FIFO_CTL_reg

// ================================================

class hqm_sif_csr_bridge_RI_NPHDR_FIFO_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HIGH_WM;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_NPHDR_FIFO_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.desired)
     `RAL_FIELD_CP_4(HIGH_WM, HIGH_WM.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.actual)
     `RAL_FIELD_CP_4(HIGH_WM, HIGH_WM.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HIGH_WM = new("HIGH_WM", "RW", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_CTL.HIGH_WM"});
    HIGH_WM.set_powerwell("vcccfn");
    HIGH_WM.set_rand_mode(0);
   HIGH_WM.set_reset_signame("side_gated_rst_prim_b");
    HIGH_WM.set_logical_path("HQMID");
    void'(add_field( HIGH_WM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_NPHDR_FIFO_CTL_reg) 
endclass : hqm_sif_csr_bridge_RI_NPHDR_FIFO_CTL_reg

// ================================================

class hqm_sif_csr_bridge_RI_NPDATA_FIFO_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HIGH_WM;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_NPDATA_FIFO_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.desired)
     `RAL_FIELD_CP_4(HIGH_WM, HIGH_WM.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.actual)
     `RAL_FIELD_CP_4(HIGH_WM, HIGH_WM.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HIGH_WM = new("HIGH_WM", "RW", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_CTL.HIGH_WM"});
    HIGH_WM.set_powerwell("vcccfn");
    HIGH_WM.set_rand_mode(0);
   HIGH_WM.set_reset_signame("side_gated_rst_prim_b");
    HIGH_WM.set_logical_path("HQMID");
    void'(add_field( HIGH_WM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_NPDATA_FIFO_CTL_reg) 
endclass : hqm_sif_csr_bridge_RI_NPDATA_FIFO_CTL_reg

// ================================================

class hqm_sif_csr_bridge_RI_IOQ_FIFO_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HIGH_WM;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_IOQ_FIFO_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.desired)
     `RAL_FIELD_CP_6(HIGH_WM, HIGH_WM.desired, 0,1,2,3,4,5)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.actual)
     `RAL_FIELD_CP_6(HIGH_WM, HIGH_WM.actual, 0,1,2,3,4,5)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HIGH_WM = new("HIGH_WM", "RW", 6, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_CTL.HIGH_WM"});
    HIGH_WM.set_powerwell("vcccfn");
    HIGH_WM.set_rand_mode(0);
   HIGH_WM.set_reset_signame("side_gated_rst_prim_b");
    HIGH_WM.set_logical_path("HQMID");
    void'(add_field( HIGH_WM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_IOQ_FIFO_CTL_reg) 
endclass : hqm_sif_csr_bridge_RI_IOQ_FIFO_CTL_reg

// ================================================

class hqm_sif_csr_bridge_IBCPL_HDR_FIFO_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HIGH_WM;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_IBCPL_HDR_FIFO_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.desired)
     `RAL_FIELD_CP_9(HIGH_WM, HIGH_WM.desired, 0,1,2,3,4,5,6,7,8)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.actual)
     `RAL_FIELD_CP_9(HIGH_WM, HIGH_WM.actual, 0,1,2,3,4,5,6,7,8)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HIGH_WM = new("HIGH_WM", "RW", 9, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_CTL.HIGH_WM"});
    HIGH_WM.set_powerwell("vcccfn");
    HIGH_WM.set_rand_mode(0);
   HIGH_WM.set_reset_signame("side_gated_rst_prim_b");
    HIGH_WM.set_logical_path("HQMID");
    void'(add_field( HIGH_WM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_IBCPL_HDR_FIFO_CTL_reg) 
endclass : hqm_sif_csr_bridge_IBCPL_HDR_FIFO_CTL_reg

// ================================================

class hqm_sif_csr_bridge_IBCPL_DATA_FIFO_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HIGH_WM;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_IBCPL_DATA_FIFO_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.desired)
     `RAL_FIELD_CP_9(HIGH_WM, HIGH_WM.desired, 0,1,2,3,4,5,6,7,8)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HIGH_WM, HIGH_WM.actual)
     `RAL_FIELD_CP_9(HIGH_WM, HIGH_WM.actual, 0,1,2,3,4,5,6,7,8)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HIGH_WM = new("HIGH_WM", "RW", 9, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_CTL.HIGH_WM"});
    HIGH_WM.set_powerwell("vcccfn");
    HIGH_WM.set_rand_mode(0);
   HIGH_WM.set_reset_signame("side_gated_rst_prim_b");
    HIGH_WM.set_logical_path("HQMID");
    void'(add_field( HIGH_WM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_IBCPL_DATA_FIFO_CTL_reg) 
endclass : hqm_sif_csr_bridge_IBCPL_DATA_FIFO_CTL_reg

// ================================================

class hqm_sif_csr_bridge_SCRBD_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SCRBD_LIMIT;
  sla_ral_field ATS_LIMIT;
  sla_ral_field TIMEOUT8;
  sla_ral_field XREQ_LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_SCRBD_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCRBD_LIMIT, SCRBD_LIMIT.desired)
     `RAL_FIELD_CP_9(SCRBD_LIMIT, SCRBD_LIMIT.desired, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(ATS_LIMIT, ATS_LIMIT.desired)
     `RAL_FIELD_CP_6(ATS_LIMIT, ATS_LIMIT.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(TIMEOUT8, TIMEOUT8.desired)
     `RAL_FIELD_CP_1(TIMEOUT8, TIMEOUT8.desired, 0)
     `RAL_FIELD_CP(XREQ_LIMIT, XREQ_LIMIT.desired)
     `RAL_FIELD_CP_7(XREQ_LIMIT, XREQ_LIMIT.desired, 0,1,2,3,4,5,6)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCRBD_LIMIT, SCRBD_LIMIT.actual)
     `RAL_FIELD_CP_9(SCRBD_LIMIT, SCRBD_LIMIT.actual, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(ATS_LIMIT, ATS_LIMIT.actual)
     `RAL_FIELD_CP_6(ATS_LIMIT, ATS_LIMIT.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(TIMEOUT8, TIMEOUT8.actual)
     `RAL_FIELD_CP_1(TIMEOUT8, TIMEOUT8.actual, 0)
     `RAL_FIELD_CP(XREQ_LIMIT, XREQ_LIMIT.actual)
     `RAL_FIELD_CP_7(XREQ_LIMIT, XREQ_LIMIT.actual, 0,1,2,3,4,5,6)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SCRBD_LIMIT = new("SCRBD_LIMIT", "RW", 9, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_CTL.SCRBD_LIMIT"});
    SCRBD_LIMIT.set_powerwell("vcccfn");
    SCRBD_LIMIT.set_rand_mode(0);
   SCRBD_LIMIT.set_reset_signame("hqm_csr_mmio_rst_n");
    SCRBD_LIMIT.set_logical_path("HQMID");
    void'(add_field( SCRBD_LIMIT ));

    ATS_LIMIT = new("ATS_LIMIT", "RW", 6, 9, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_CTL.ATS_LIMIT"});
    ATS_LIMIT.set_powerwell("vcccfn");
    ATS_LIMIT.set_rand_mode(0);
   ATS_LIMIT.set_reset_signame("hqm_csr_mmio_rst_n");
    ATS_LIMIT.set_logical_path("HQMID");
    void'(add_field( ATS_LIMIT ));

    TIMEOUT8 = new("TIMEOUT8", "RW", 1, 15, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_CTL.TIMEOUT8"});
    TIMEOUT8.set_powerwell("vcccfn");
    TIMEOUT8.set_rand_mode(0);
   TIMEOUT8.set_reset_signame("hqm_csr_mmio_rst_n");
    TIMEOUT8.set_logical_path("HQMID");
    void'(add_field( TIMEOUT8 ));

    XREQ_LIMIT = new("XREQ_LIMIT", "RW", 7, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_CTL.XREQ_LIMIT"});
    XREQ_LIMIT.set_powerwell("vcccfn");
    XREQ_LIMIT.set_rand_mode(0);
   XREQ_LIMIT.set_reset_signame("hqm_csr_mmio_rst_n");
    XREQ_LIMIT.set_logical_path("HQMID");
    void'(add_field( XREQ_LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_SCRBD_CTL_reg) 
endclass : hqm_sif_csr_bridge_SCRBD_CTL_reg

// ================================================

class hqm_sif_csr_bridge_SCRBD_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SCRBD_CNT;
  sla_ral_field TO_PEND;
  sla_ral_field TIM_INUSE;
  sla_ral_field STOPNSCREAM;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_SCRBD_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCRBD_CNT, SCRBD_CNT.desired)
     `RAL_FIELD_CP_9(SCRBD_CNT, SCRBD_CNT.desired, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(TO_PEND, TO_PEND.desired)
     `RAL_FIELD_CP_1(TO_PEND, TO_PEND.desired, 0)
     `RAL_FIELD_CP(TIM_INUSE, TIM_INUSE.desired)
     `RAL_FIELD_CP_1(TIM_INUSE, TIM_INUSE.desired, 0)
     `RAL_FIELD_CP(STOPNSCREAM, STOPNSCREAM.desired)
     `RAL_FIELD_CP_1(STOPNSCREAM, STOPNSCREAM.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SCRBD_CNT, SCRBD_CNT.actual)
     `RAL_FIELD_CP_9(SCRBD_CNT, SCRBD_CNT.actual, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(TO_PEND, TO_PEND.actual)
     `RAL_FIELD_CP_1(TO_PEND, TO_PEND.actual, 0)
     `RAL_FIELD_CP(TIM_INUSE, TIM_INUSE.actual)
     `RAL_FIELD_CP_1(TIM_INUSE, TIM_INUSE.actual, 0)
     `RAL_FIELD_CP(STOPNSCREAM, STOPNSCREAM.actual)
     `RAL_FIELD_CP_1(STOPNSCREAM, STOPNSCREAM.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SCRBD_CNT = new("SCRBD_CNT", "RO/V", 9, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_STATUS.SCRBD_CNT"});
    SCRBD_CNT.set_powerwell("vcccfn");
    SCRBD_CNT.set_rand_mode(0);
   SCRBD_CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    SCRBD_CNT.set_logical_path("HQMID");
    void'(add_field( SCRBD_CNT ));

    TO_PEND = new("TO_PEND", "RO/V", 1, 9, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_STATUS.TO_PEND"});
    TO_PEND.set_powerwell("vcccfn");
    TO_PEND.set_rand_mode(0);
   TO_PEND.set_reset_signame("hqm_csr_mmio_rst_n");
    TO_PEND.set_logical_path("HQMID");
    void'(add_field( TO_PEND ));

    TIM_INUSE = new("TIM_INUSE", "RO/V", 1, 10, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_STATUS.TIM_INUSE"});
    TIM_INUSE.set_powerwell("vcccfn");
    TIM_INUSE.set_rand_mode(0);
   TIM_INUSE.set_reset_signame("hqm_csr_mmio_rst_n");
    TIM_INUSE.set_logical_path("HQMID");
    void'(add_field( TIM_INUSE ));

    STOPNSCREAM = new("STOPNSCREAM", "RO/V", 1, 11, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_STATUS.STOPNSCREAM"});
    STOPNSCREAM.set_powerwell("vcccfn");
    STOPNSCREAM.set_rand_mode(0);
   STOPNSCREAM.set_reset_signame("hqm_csr_mmio_rst_n");
    STOPNSCREAM.set_logical_path("HQMID");
    void'(add_field( STOPNSCREAM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_SCRBD_STATUS_reg) 
endclass : hqm_sif_csr_bridge_SCRBD_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_DEVTLB_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DISABLE_1G;
  sla_ral_field DISABLE_2M;
  sla_ral_field DISABLE_PRS;
  sla_ral_field PRS_CRETRY;
  sla_ral_field FILL_GCNT;
  sla_ral_field PENDQ_GCNT;
  sla_ral_field HIXREQ_GCNT;
  sla_ral_field LOXREQ_GCNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_DEVTLB_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLE_1G, DISABLE_1G.desired)
     `RAL_FIELD_CP_1(DISABLE_1G, DISABLE_1G.desired, 0)
     `RAL_FIELD_CP(DISABLE_2M, DISABLE_2M.desired)
     `RAL_FIELD_CP_1(DISABLE_2M, DISABLE_2M.desired, 0)
     `RAL_FIELD_CP(DISABLE_PRS, DISABLE_PRS.desired)
     `RAL_FIELD_CP_1(DISABLE_PRS, DISABLE_PRS.desired, 0)
     `RAL_FIELD_CP(PRS_CRETRY, PRS_CRETRY.desired)
     `RAL_FIELD_CP_1(PRS_CRETRY, PRS_CRETRY.desired, 0)
     `RAL_FIELD_CP(FILL_GCNT, FILL_GCNT.desired)
     `RAL_FIELD_CP_3(FILL_GCNT, FILL_GCNT.desired, 0,1,2)
     `RAL_FIELD_CP(PENDQ_GCNT, PENDQ_GCNT.desired)
     `RAL_FIELD_CP_3(PENDQ_GCNT, PENDQ_GCNT.desired, 0,1,2)
     `RAL_FIELD_CP(HIXREQ_GCNT, HIXREQ_GCNT.desired)
     `RAL_FIELD_CP_3(HIXREQ_GCNT, HIXREQ_GCNT.desired, 0,1,2)
     `RAL_FIELD_CP(LOXREQ_GCNT, LOXREQ_GCNT.desired)
     `RAL_FIELD_CP_3(LOXREQ_GCNT, LOXREQ_GCNT.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLE_1G, DISABLE_1G.actual)
     `RAL_FIELD_CP_1(DISABLE_1G, DISABLE_1G.actual, 0)
     `RAL_FIELD_CP(DISABLE_2M, DISABLE_2M.actual)
     `RAL_FIELD_CP_1(DISABLE_2M, DISABLE_2M.actual, 0)
     `RAL_FIELD_CP(DISABLE_PRS, DISABLE_PRS.actual)
     `RAL_FIELD_CP_1(DISABLE_PRS, DISABLE_PRS.actual, 0)
     `RAL_FIELD_CP(PRS_CRETRY, PRS_CRETRY.actual)
     `RAL_FIELD_CP_1(PRS_CRETRY, PRS_CRETRY.actual, 0)
     `RAL_FIELD_CP(FILL_GCNT, FILL_GCNT.actual)
     `RAL_FIELD_CP_3(FILL_GCNT, FILL_GCNT.actual, 0,1,2)
     `RAL_FIELD_CP(PENDQ_GCNT, PENDQ_GCNT.actual)
     `RAL_FIELD_CP_3(PENDQ_GCNT, PENDQ_GCNT.actual, 0,1,2)
     `RAL_FIELD_CP(HIXREQ_GCNT, HIXREQ_GCNT.actual)
     `RAL_FIELD_CP_3(HIXREQ_GCNT, HIXREQ_GCNT.actual, 0,1,2)
     `RAL_FIELD_CP(LOXREQ_GCNT, LOXREQ_GCNT.actual)
     `RAL_FIELD_CP_3(LOXREQ_GCNT, LOXREQ_GCNT.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DISABLE_1G = new("DISABLE_1G", "RW", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.DISABLE_1G"});
    DISABLE_1G.set_powerwell("vcccfn");
    DISABLE_1G.set_rand_mode(0);
   DISABLE_1G.set_reset_signame("hqm_csr_mmio_rst_n");
    DISABLE_1G.set_logical_path("HQMID");
    void'(add_field( DISABLE_1G ));

    DISABLE_2M = new("DISABLE_2M", "RW", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.DISABLE_2M"});
    DISABLE_2M.set_powerwell("vcccfn");
    DISABLE_2M.set_rand_mode(0);
   DISABLE_2M.set_reset_signame("hqm_csr_mmio_rst_n");
    DISABLE_2M.set_logical_path("HQMID");
    void'(add_field( DISABLE_2M ));

    DISABLE_PRS = new("DISABLE_PRS", "RW", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.DISABLE_PRS"});
    DISABLE_PRS.set_powerwell("vcccfn");
    DISABLE_PRS.set_rand_mode(0);
   DISABLE_PRS.set_reset_signame("hqm_csr_mmio_rst_n");
    DISABLE_PRS.set_logical_path("HQMID");
    void'(add_field( DISABLE_PRS ));

    PRS_CRETRY = new("PRS_CRETRY", "RW", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.PRS_CRETRY"});
    PRS_CRETRY.set_powerwell("vcccfn");
    PRS_CRETRY.set_rand_mode(0);
   PRS_CRETRY.set_reset_signame("hqm_csr_mmio_rst_n");
    PRS_CRETRY.set_logical_path("HQMID");
    void'(add_field( PRS_CRETRY ));

    FILL_GCNT = new("FILL_GCNT", "RW", 3, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.FILL_GCNT"});
    FILL_GCNT.set_powerwell("vcccfn");
    FILL_GCNT.set_rand_mode(0);
   FILL_GCNT.set_reset_signame("hqm_csr_mmio_rst_n");
    FILL_GCNT.set_logical_path("HQMID");
    void'(add_field( FILL_GCNT ));

    PENDQ_GCNT = new("PENDQ_GCNT", "RW", 3, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.PENDQ_GCNT"});
    PENDQ_GCNT.set_powerwell("vcccfn");
    PENDQ_GCNT.set_rand_mode(0);
   PENDQ_GCNT.set_reset_signame("hqm_csr_mmio_rst_n");
    PENDQ_GCNT.set_logical_path("HQMID");
    void'(add_field( PENDQ_GCNT ));

    HIXREQ_GCNT = new("HIXREQ_GCNT", "RW", 3, 10, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.HIXREQ_GCNT"});
    HIXREQ_GCNT.set_powerwell("vcccfn");
    HIXREQ_GCNT.set_rand_mode(0);
   HIXREQ_GCNT.set_reset_signame("hqm_csr_mmio_rst_n");
    HIXREQ_GCNT.set_logical_path("HQMID");
    void'(add_field( HIXREQ_GCNT ));

    LOXREQ_GCNT = new("LOXREQ_GCNT", "RW", 3, 13, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.LOXREQ_GCNT"});
    LOXREQ_GCNT.set_powerwell("vcccfn");
    LOXREQ_GCNT.set_rand_mode(0);
   LOXREQ_GCNT.set_reset_signame("hqm_csr_mmio_rst_n");
    LOXREQ_GCNT.set_logical_path("HQMID");
    void'(add_field( LOXREQ_GCNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_DEVTLB_CTL_reg) 
endclass : hqm_sif_csr_bridge_DEVTLB_CTL_reg

// ================================================

class hqm_sif_csr_bridge_DEVTLB_SPARE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SPARE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_DEVTLB_SPARE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SPARE, SPARE.desired)
     `RAL_FIELD_CP_16(SPARE, SPARE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SPARE, SPARE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SPARE, SPARE.actual)
     `RAL_FIELD_CP_16(SPARE, SPARE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(SPARE, SPARE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SPARE = new("SPARE", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_SPARE.SPARE"});
    SPARE.set_powerwell("vcccfn");
    SPARE.set_rand_mode(0);
   SPARE.set_reset_signame("hqm_csr_mmio_rst_n");
    SPARE.set_logical_path("HQMID");
    void'(add_field( SPARE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_DEVTLB_SPARE_reg) 
endclass : hqm_sif_csr_bridge_DEVTLB_SPARE_reg

// ================================================

class hqm_sif_csr_bridge_DEVTLB_DEFEATURE0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DEFEATURE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_DEVTLB_DEFEATURE0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEFEATURE, DEFEATURE.desired)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEFEATURE, DEFEATURE.actual)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DEFEATURE = new("DEFEATURE", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_DEFEATURE0.DEFEATURE"});
    DEFEATURE.set_powerwell("vcccfn");
    DEFEATURE.set_rand_mode(0);
   DEFEATURE.set_reset_signame("hqm_csr_mmio_rst_n");
    DEFEATURE.set_logical_path("HQMID");
    void'(add_field( DEFEATURE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_DEVTLB_DEFEATURE0_reg) 
endclass : hqm_sif_csr_bridge_DEVTLB_DEFEATURE0_reg

// ================================================

class hqm_sif_csr_bridge_DEVTLB_DEFEATURE1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DEFEATURE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_DEVTLB_DEFEATURE1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEFEATURE, DEFEATURE.desired)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEFEATURE, DEFEATURE.actual)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DEFEATURE = new("DEFEATURE", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_DEFEATURE1.DEFEATURE"});
    DEFEATURE.set_powerwell("vcccfn");
    DEFEATURE.set_rand_mode(0);
   DEFEATURE.set_reset_signame("hqm_csr_mmio_rst_n");
    DEFEATURE.set_logical_path("HQMID");
    void'(add_field( DEFEATURE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_DEVTLB_DEFEATURE1_reg) 
endclass : hqm_sif_csr_bridge_DEVTLB_DEFEATURE1_reg

// ================================================

class hqm_sif_csr_bridge_DEVTLB_DEFEATURE2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DEFEATURE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_DEVTLB_DEFEATURE2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEFEATURE, DEFEATURE.desired)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEFEATURE, DEFEATURE.actual)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(DEFEATURE, DEFEATURE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DEFEATURE = new("DEFEATURE", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_DEFEATURE2.DEFEATURE"});
    DEFEATURE.set_powerwell("vcccfn");
    DEFEATURE.set_rand_mode(0);
   DEFEATURE.set_reset_signame("hqm_csr_mmio_rst_n");
    DEFEATURE.set_logical_path("HQMID");
    void'(add_field( DEFEATURE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_DEVTLB_DEFEATURE2_reg) 
endclass : hqm_sif_csr_bridge_DEVTLB_DEFEATURE2_reg

// ================================================

class hqm_sif_csr_bridge_DEVTLB_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field XREQS_ACTIVE;
  sla_ral_field INVREQS_ACTIVE;
  sla_ral_field RESET_ACTIVE;
  sla_ral_field ATS_ENABLED;
  sla_ral_field LCRD_CNT;
  sla_ral_field HCRD_CNT;
  sla_ral_field ATS_LREQ_V;
  sla_ral_field ATS_HREQ_V;
  sla_ral_field TX_MSG_V;
  sla_ral_field DRAIN_REQ_V;
  sla_ral_field ATS_REQ_CNT;
  sla_ral_field XREQ_CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_DEVTLB_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(XREQS_ACTIVE, XREQS_ACTIVE.desired)
     `RAL_FIELD_CP_1(XREQS_ACTIVE, XREQS_ACTIVE.desired, 0)
     `RAL_FIELD_CP(INVREQS_ACTIVE, INVREQS_ACTIVE.desired)
     `RAL_FIELD_CP_1(INVREQS_ACTIVE, INVREQS_ACTIVE.desired, 0)
     `RAL_FIELD_CP(RESET_ACTIVE, RESET_ACTIVE.desired)
     `RAL_FIELD_CP_1(RESET_ACTIVE, RESET_ACTIVE.desired, 0)
     `RAL_FIELD_CP(ATS_ENABLED, ATS_ENABLED.desired)
     `RAL_FIELD_CP_1(ATS_ENABLED, ATS_ENABLED.desired, 0)
     `RAL_FIELD_CP(LCRD_CNT, LCRD_CNT.desired)
     `RAL_FIELD_CP_3(LCRD_CNT, LCRD_CNT.desired, 0,1,2)
     `RAL_FIELD_CP(HCRD_CNT, HCRD_CNT.desired)
     `RAL_FIELD_CP_3(HCRD_CNT, HCRD_CNT.desired, 0,1,2)
     `RAL_FIELD_CP(ATS_LREQ_V, ATS_LREQ_V.desired)
     `RAL_FIELD_CP_1(ATS_LREQ_V, ATS_LREQ_V.desired, 0)
     `RAL_FIELD_CP(ATS_HREQ_V, ATS_HREQ_V.desired)
     `RAL_FIELD_CP_1(ATS_HREQ_V, ATS_HREQ_V.desired, 0)
     `RAL_FIELD_CP(TX_MSG_V, TX_MSG_V.desired)
     `RAL_FIELD_CP_1(TX_MSG_V, TX_MSG_V.desired, 0)
     `RAL_FIELD_CP(DRAIN_REQ_V, DRAIN_REQ_V.desired)
     `RAL_FIELD_CP_1(DRAIN_REQ_V, DRAIN_REQ_V.desired, 0)
     `RAL_FIELD_CP(ATS_REQ_CNT, ATS_REQ_CNT.desired)
     `RAL_FIELD_CP_6(ATS_REQ_CNT, ATS_REQ_CNT.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(XREQ_CNT, XREQ_CNT.desired)
     `RAL_FIELD_CP_7(XREQ_CNT, XREQ_CNT.desired, 0,1,2,3,4,5,6)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(XREQS_ACTIVE, XREQS_ACTIVE.actual)
     `RAL_FIELD_CP_1(XREQS_ACTIVE, XREQS_ACTIVE.actual, 0)
     `RAL_FIELD_CP(INVREQS_ACTIVE, INVREQS_ACTIVE.actual)
     `RAL_FIELD_CP_1(INVREQS_ACTIVE, INVREQS_ACTIVE.actual, 0)
     `RAL_FIELD_CP(RESET_ACTIVE, RESET_ACTIVE.actual)
     `RAL_FIELD_CP_1(RESET_ACTIVE, RESET_ACTIVE.actual, 0)
     `RAL_FIELD_CP(ATS_ENABLED, ATS_ENABLED.actual)
     `RAL_FIELD_CP_1(ATS_ENABLED, ATS_ENABLED.actual, 0)
     `RAL_FIELD_CP(LCRD_CNT, LCRD_CNT.actual)
     `RAL_FIELD_CP_3(LCRD_CNT, LCRD_CNT.actual, 0,1,2)
     `RAL_FIELD_CP(HCRD_CNT, HCRD_CNT.actual)
     `RAL_FIELD_CP_3(HCRD_CNT, HCRD_CNT.actual, 0,1,2)
     `RAL_FIELD_CP(ATS_LREQ_V, ATS_LREQ_V.actual)
     `RAL_FIELD_CP_1(ATS_LREQ_V, ATS_LREQ_V.actual, 0)
     `RAL_FIELD_CP(ATS_HREQ_V, ATS_HREQ_V.actual)
     `RAL_FIELD_CP_1(ATS_HREQ_V, ATS_HREQ_V.actual, 0)
     `RAL_FIELD_CP(TX_MSG_V, TX_MSG_V.actual)
     `RAL_FIELD_CP_1(TX_MSG_V, TX_MSG_V.actual, 0)
     `RAL_FIELD_CP(DRAIN_REQ_V, DRAIN_REQ_V.actual)
     `RAL_FIELD_CP_1(DRAIN_REQ_V, DRAIN_REQ_V.actual, 0)
     `RAL_FIELD_CP(ATS_REQ_CNT, ATS_REQ_CNT.actual)
     `RAL_FIELD_CP_6(ATS_REQ_CNT, ATS_REQ_CNT.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(XREQ_CNT, XREQ_CNT.actual)
     `RAL_FIELD_CP_7(XREQ_CNT, XREQ_CNT.actual, 0,1,2,3,4,5,6)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    XREQS_ACTIVE = new("XREQS_ACTIVE", "RO/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.XREQS_ACTIVE"});
    XREQS_ACTIVE.set_powerwell("vcccfn");
    XREQS_ACTIVE.set_rand_mode(0);
   XREQS_ACTIVE.set_reset_signame("hqm_csr_mmio_rst_n");
    XREQS_ACTIVE.set_logical_path("HQMID");
    void'(add_field( XREQS_ACTIVE ));

    INVREQS_ACTIVE = new("INVREQS_ACTIVE", "RO/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.INVREQS_ACTIVE"});
    INVREQS_ACTIVE.set_powerwell("vcccfn");
    INVREQS_ACTIVE.set_rand_mode(0);
   INVREQS_ACTIVE.set_reset_signame("hqm_csr_mmio_rst_n");
    INVREQS_ACTIVE.set_logical_path("HQMID");
    void'(add_field( INVREQS_ACTIVE ));

    RESET_ACTIVE = new("RESET_ACTIVE", "RO/V", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.RESET_ACTIVE"});
    RESET_ACTIVE.set_powerwell("vcccfn");
    RESET_ACTIVE.set_rand_mode(0);
   RESET_ACTIVE.set_reset_signame("hqm_csr_mmio_rst_n");
    RESET_ACTIVE.set_logical_path("HQMID");
    void'(add_field( RESET_ACTIVE ));

    ATS_ENABLED = new("ATS_ENABLED", "RO/V", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.ATS_ENABLED"});
    ATS_ENABLED.set_powerwell("vcccfn");
    ATS_ENABLED.set_rand_mode(0);
   ATS_ENABLED.set_reset_signame("hqm_csr_mmio_rst_n");
    ATS_ENABLED.set_logical_path("HQMID");
    void'(add_field( ATS_ENABLED ));

    LCRD_CNT = new("LCRD_CNT", "RO/V", 3, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.LCRD_CNT"});
    LCRD_CNT.set_powerwell("vcccfn");
    LCRD_CNT.set_rand_mode(0);
   LCRD_CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    LCRD_CNT.set_logical_path("HQMID");
    void'(add_field( LCRD_CNT ));

    HCRD_CNT = new("HCRD_CNT", "RO/V", 3, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.HCRD_CNT"});
    HCRD_CNT.set_powerwell("vcccfn");
    HCRD_CNT.set_rand_mode(0);
   HCRD_CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    HCRD_CNT.set_logical_path("HQMID");
    void'(add_field( HCRD_CNT ));

    ATS_LREQ_V = new("ATS_LREQ_V", "RO/V", 1, 12, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.ATS_LREQ_V"});
    ATS_LREQ_V.set_powerwell("vcccfn");
    ATS_LREQ_V.set_rand_mode(0);
   ATS_LREQ_V.set_reset_signame("hqm_csr_mmio_rst_n");
    ATS_LREQ_V.set_logical_path("HQMID");
    void'(add_field( ATS_LREQ_V ));

    ATS_HREQ_V = new("ATS_HREQ_V", "RO/V", 1, 13, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.ATS_HREQ_V"});
    ATS_HREQ_V.set_powerwell("vcccfn");
    ATS_HREQ_V.set_rand_mode(0);
   ATS_HREQ_V.set_reset_signame("hqm_csr_mmio_rst_n");
    ATS_HREQ_V.set_logical_path("HQMID");
    void'(add_field( ATS_HREQ_V ));

    TX_MSG_V = new("TX_MSG_V", "RO/V", 1, 14, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.TX_MSG_V"});
    TX_MSG_V.set_powerwell("vcccfn");
    TX_MSG_V.set_rand_mode(0);
   TX_MSG_V.set_reset_signame("hqm_csr_mmio_rst_n");
    TX_MSG_V.set_logical_path("HQMID");
    void'(add_field( TX_MSG_V ));

    DRAIN_REQ_V = new("DRAIN_REQ_V", "RO/V", 1, 15, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.DRAIN_REQ_V"});
    DRAIN_REQ_V.set_powerwell("vcccfn");
    DRAIN_REQ_V.set_rand_mode(0);
   DRAIN_REQ_V.set_reset_signame("hqm_csr_mmio_rst_n");
    DRAIN_REQ_V.set_logical_path("HQMID");
    void'(add_field( DRAIN_REQ_V ));

    ATS_REQ_CNT = new("ATS_REQ_CNT", "RO/V", 6, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.ATS_REQ_CNT"});
    ATS_REQ_CNT.set_powerwell("vcccfn");
    ATS_REQ_CNT.set_rand_mode(0);
   ATS_REQ_CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    ATS_REQ_CNT.set_logical_path("HQMID");
    void'(add_field( ATS_REQ_CNT ));

    XREQ_CNT = new("XREQ_CNT", "RO/V", 7, 22, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.XREQ_CNT"});
    XREQ_CNT.set_powerwell("vcccfn");
    XREQ_CNT.set_rand_mode(0);
   XREQ_CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    XREQ_CNT.set_logical_path("HQMID");
    void'(add_field( XREQ_CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_DEVTLB_STATUS_reg) 
endclass : hqm_sif_csr_bridge_DEVTLB_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_CFGM_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PADDR;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_CFGM_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PADDR, PADDR.desired)
     `RAL_FIELD_CP_16(PADDR, PADDR.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(PADDR, PADDR.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PADDR, PADDR.actual)
     `RAL_FIELD_CP_16(PADDR, PADDR.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(PADDR, PADDR.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PADDR = new("PADDR", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFGM_STATUS.PADDR"});
    PADDR.set_powerwell("vcccfn");
    PADDR.set_rand_mode(0);
   PADDR.set_reset_signame("hqm_csr_mmio_rst_n");
    PADDR.set_logical_path("HQMID");
    void'(add_field( PADDR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_CFGM_STATUS_reg) 
endclass : hqm_sif_csr_bridge_CFGM_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_CFGM_STATUS2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PWDATA;
  sla_ral_field PWRITE;
  sla_ral_field PSLVERR;
  sla_ral_field PSEL;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_CFGM_STATUS2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PWDATA, PWDATA.desired)
     `RAL_FIELD_CP_16(PWDATA, PWDATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_13(PWDATA, PWDATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28)
     `RAL_FIELD_CP(PWRITE, PWRITE.desired)
     `RAL_FIELD_CP_1(PWRITE, PWRITE.desired, 0)
     `RAL_FIELD_CP(PSLVERR, PSLVERR.desired)
     `RAL_FIELD_CP_1(PSLVERR, PSLVERR.desired, 0)
     `RAL_FIELD_CP(PSEL, PSEL.desired)
     `RAL_FIELD_CP_1(PSEL, PSEL.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PWDATA, PWDATA.actual)
     `RAL_FIELD_CP_16(PWDATA, PWDATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_13(PWDATA, PWDATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28)
     `RAL_FIELD_CP(PWRITE, PWRITE.actual)
     `RAL_FIELD_CP_1(PWRITE, PWRITE.actual, 0)
     `RAL_FIELD_CP(PSLVERR, PSLVERR.actual)
     `RAL_FIELD_CP_1(PSLVERR, PSLVERR.actual, 0)
     `RAL_FIELD_CP(PSEL, PSEL.actual)
     `RAL_FIELD_CP_1(PSEL, PSEL.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PWDATA = new("PWDATA", "RO/V", 29, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFGM_STATUS2.PWDATA"});
    PWDATA.set_powerwell("vcccfn");
    PWDATA.set_rand_mode(0);
   PWDATA.set_reset_signame("hqm_csr_mmio_rst_n");
    PWDATA.set_logical_path("HQMID");
    void'(add_field( PWDATA ));

    PWRITE = new("PWRITE", "RO/V", 1, 29, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFGM_STATUS2.PWRITE"});
    PWRITE.set_powerwell("vcccfn");
    PWRITE.set_rand_mode(0);
   PWRITE.set_reset_signame("hqm_csr_mmio_rst_n");
    PWRITE.set_logical_path("HQMID");
    void'(add_field( PWRITE ));

    PSLVERR = new("PSLVERR", "RO/V", 1, 30, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFGM_STATUS2.PSLVERR"});
    PSLVERR.set_powerwell("vcccfn");
    PSLVERR.set_rand_mode(0);
   PSLVERR.set_reset_signame("hqm_csr_mmio_rst_n");
    PSLVERR.set_logical_path("HQMID");
    void'(add_field( PSLVERR ));

    PSEL = new("PSEL", "RO/V", 1, 31, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFGM_STATUS2.PSEL"});
    PSEL.set_powerwell("vcccfn");
    PSEL.set_rand_mode(0);
   PSEL.set_reset_signame("hqm_csr_mmio_rst_n");
    PSEL.set_logical_path("HQMID");
    void'(add_field( PSEL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_CFGM_STATUS2_reg) 
endclass : hqm_sif_csr_bridge_CFGM_STATUS2_reg

// ================================================

class hqm_sif_csr_bridge_LOCAL_BME_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field BME_PF;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_LOCAL_BME_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BME_PF, BME_PF.desired)
     `RAL_FIELD_CP_1(BME_PF, BME_PF.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BME_PF, BME_PF.actual)
     `RAL_FIELD_CP_1(BME_PF, BME_PF.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    BME_PF = new("BME_PF", "RO/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LOCAL_BME_STATUS.BME_PF"});
    BME_PF.set_powerwell("vcccfn");
    BME_PF.set_rand_mode(0);
   BME_PF.set_reset_signame("hqm_csr_mmio_rst_n");
    BME_PF.set_logical_path("HQMID");
    void'(add_field( BME_PF ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_LOCAL_BME_STATUS_reg) 
endclass : hqm_sif_csr_bridge_LOCAL_BME_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_LOCAL_MSIXE_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MSIXE_PF;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_LOCAL_MSIXE_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIXE_PF, MSIXE_PF.desired)
     `RAL_FIELD_CP_1(MSIXE_PF, MSIXE_PF.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIXE_PF, MSIXE_PF.actual)
     `RAL_FIELD_CP_1(MSIXE_PF, MSIXE_PF.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MSIXE_PF = new("MSIXE_PF", "RO/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LOCAL_MSIE_STATUS.MSIXE_PF"});
    MSIXE_PF.set_powerwell("vcccfn");
    MSIXE_PF.set_rand_mode(0);
   MSIXE_PF.set_reset_signame("hqm_csr_mmio_rst_n");
    MSIXE_PF.set_logical_path("HQMID");
    void'(add_field( MSIXE_PF ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_LOCAL_MSIXE_STATUS_reg) 
endclass : hqm_sif_csr_bridge_LOCAL_MSIXE_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_MSTR_CRD_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P_REQ_PUT_CNT;
  sla_ral_field NP_REQ_PUT_CNT;
  sla_ral_field CPL_REQ_PUT_CNT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_MSTR_CRD_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P_REQ_PUT_CNT, P_REQ_PUT_CNT.desired)
     `RAL_FIELD_CP_5(P_REQ_PUT_CNT, P_REQ_PUT_CNT.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(NP_REQ_PUT_CNT, NP_REQ_PUT_CNT.desired)
     `RAL_FIELD_CP_5(NP_REQ_PUT_CNT, NP_REQ_PUT_CNT.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(CPL_REQ_PUT_CNT, CPL_REQ_PUT_CNT.desired)
     `RAL_FIELD_CP_5(CPL_REQ_PUT_CNT, CPL_REQ_PUT_CNT.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P_REQ_PUT_CNT, P_REQ_PUT_CNT.actual)
     `RAL_FIELD_CP_5(P_REQ_PUT_CNT, P_REQ_PUT_CNT.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(NP_REQ_PUT_CNT, NP_REQ_PUT_CNT.actual)
     `RAL_FIELD_CP_5(NP_REQ_PUT_CNT, NP_REQ_PUT_CNT.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(CPL_REQ_PUT_CNT, CPL_REQ_PUT_CNT.actual)
     `RAL_FIELD_CP_5(CPL_REQ_PUT_CNT, CPL_REQ_PUT_CNT.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P_REQ_PUT_CNT = new("P_REQ_PUT_CNT", "RO/V", 5, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_CRD_STATUS.P_REQ_PUT_CNT"});
    P_REQ_PUT_CNT.set_powerwell("vcccfn");
    P_REQ_PUT_CNT.set_rand_mode(0);
   P_REQ_PUT_CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    P_REQ_PUT_CNT.set_logical_path("HQMID");
    void'(add_field( P_REQ_PUT_CNT ));

    NP_REQ_PUT_CNT = new("NP_REQ_PUT_CNT", "RO/V", 5, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_CRD_STATUS.NP_REQ_PUT_CNT"});
    NP_REQ_PUT_CNT.set_powerwell("vcccfn");
    NP_REQ_PUT_CNT.set_rand_mode(0);
   NP_REQ_PUT_CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    NP_REQ_PUT_CNT.set_logical_path("HQMID");
    void'(add_field( NP_REQ_PUT_CNT ));

    CPL_REQ_PUT_CNT = new("CPL_REQ_PUT_CNT", "RO/V", 5, 10, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_CRD_STATUS.CPL_REQ_PUT_CNT"});
    CPL_REQ_PUT_CNT.set_powerwell("vcccfn");
    CPL_REQ_PUT_CNT.set_rand_mode(0);
   CPL_REQ_PUT_CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    CPL_REQ_PUT_CNT.set_logical_path("HQMID");
    void'(add_field( CPL_REQ_PUT_CNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_MSTR_CRD_STATUS_reg) 
endclass : hqm_sif_csr_bridge_MSTR_CRD_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_MSTR_FL_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FL_HPTR;
  sla_ral_field FL_CNT;
  sla_ral_field FL_EMPTY;
  sla_ral_field FL_AEMPTY;
  sla_ral_field FL_FULL;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_MSTR_FL_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FL_HPTR, FL_HPTR.desired)
     `RAL_FIELD_CP_8(FL_HPTR, FL_HPTR.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FL_CNT, FL_CNT.desired)
     `RAL_FIELD_CP_9(FL_CNT, FL_CNT.desired, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(FL_EMPTY, FL_EMPTY.desired)
     `RAL_FIELD_CP_1(FL_EMPTY, FL_EMPTY.desired, 0)
     `RAL_FIELD_CP(FL_AEMPTY, FL_AEMPTY.desired)
     `RAL_FIELD_CP_1(FL_AEMPTY, FL_AEMPTY.desired, 0)
     `RAL_FIELD_CP(FL_FULL, FL_FULL.desired)
     `RAL_FIELD_CP_1(FL_FULL, FL_FULL.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FL_HPTR, FL_HPTR.actual)
     `RAL_FIELD_CP_8(FL_HPTR, FL_HPTR.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FL_CNT, FL_CNT.actual)
     `RAL_FIELD_CP_9(FL_CNT, FL_CNT.actual, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(FL_EMPTY, FL_EMPTY.actual)
     `RAL_FIELD_CP_1(FL_EMPTY, FL_EMPTY.actual, 0)
     `RAL_FIELD_CP(FL_AEMPTY, FL_AEMPTY.actual)
     `RAL_FIELD_CP_1(FL_AEMPTY, FL_AEMPTY.actual, 0)
     `RAL_FIELD_CP(FL_FULL, FL_FULL.actual)
     `RAL_FIELD_CP_1(FL_FULL, FL_FULL.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FL_HPTR = new("FL_HPTR", "RO/V", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_FL_STATUS.FL_HPTR"});
    FL_HPTR.set_powerwell("vcccfn");
    FL_HPTR.set_rand_mode(0);
   FL_HPTR.set_reset_signame("hqm_csr_mmio_rst_n");
    FL_HPTR.set_logical_path("HQMID");
    void'(add_field( FL_HPTR ));

    FL_CNT = new("FL_CNT", "RO/V", 9, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_FL_STATUS.FL_CNT"});
    FL_CNT.set_powerwell("vcccfn");
    FL_CNT.set_rand_mode(0);
   FL_CNT.set_reset_signame("hqm_csr_mmio_rst_n");
    FL_CNT.set_logical_path("HQMID");
    void'(add_field( FL_CNT ));

    FL_EMPTY = new("FL_EMPTY", "RO/V", 1, 17, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_FL_STATUS.FL_EMPTY"});
    FL_EMPTY.set_powerwell("vcccfn");
    FL_EMPTY.set_rand_mode(0);
   FL_EMPTY.set_reset_signame("hqm_csr_mmio_rst_n");
    FL_EMPTY.set_logical_path("HQMID");
    void'(add_field( FL_EMPTY ));

    FL_AEMPTY = new("FL_AEMPTY", "RO/V", 1, 18, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_FL_STATUS.FL_AEMPTY"});
    FL_AEMPTY.set_powerwell("vcccfn");
    FL_AEMPTY.set_rand_mode(0);
   FL_AEMPTY.set_reset_signame("hqm_csr_mmio_rst_n");
    FL_AEMPTY.set_logical_path("HQMID");
    void'(add_field( FL_AEMPTY ));

    FL_FULL = new("FL_FULL", "RO/V", 1, 19, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_FL_STATUS.FL_FULL"});
    FL_FULL.set_powerwell("vcccfn");
    FL_FULL.set_rand_mode(0);
   FL_FULL.set_reset_signame("hqm_csr_mmio_rst_n");
    FL_FULL.set_logical_path("HQMID");
    void'(add_field( FL_FULL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_MSTR_FL_STATUS_reg) 
endclass : hqm_sif_csr_bridge_MSTR_FL_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_MSTR_LL_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TPTR;
  sla_ral_field HPTR;
  sla_ral_field VALID;
  sla_ral_field HPA_PND;
  sla_ral_field HPA_ERR;
  sla_ral_field HPA_V;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_MSTR_LL_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TPTR, TPTR.desired)
     `RAL_FIELD_CP_8(TPTR, TPTR.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(HPTR, HPTR.desired)
     `RAL_FIELD_CP_8(HPTR, HPTR.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(VALID, VALID.desired)
     `RAL_FIELD_CP_1(VALID, VALID.desired, 0)
     `RAL_FIELD_CP(HPA_PND, HPA_PND.desired)
     `RAL_FIELD_CP_1(HPA_PND, HPA_PND.desired, 0)
     `RAL_FIELD_CP(HPA_ERR, HPA_ERR.desired)
     `RAL_FIELD_CP_1(HPA_ERR, HPA_ERR.desired, 0)
     `RAL_FIELD_CP(HPA_V, HPA_V.desired)
     `RAL_FIELD_CP_1(HPA_V, HPA_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TPTR, TPTR.actual)
     `RAL_FIELD_CP_8(TPTR, TPTR.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(HPTR, HPTR.actual)
     `RAL_FIELD_CP_8(HPTR, HPTR.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(VALID, VALID.actual)
     `RAL_FIELD_CP_1(VALID, VALID.actual, 0)
     `RAL_FIELD_CP(HPA_PND, HPA_PND.actual)
     `RAL_FIELD_CP_1(HPA_PND, HPA_PND.actual, 0)
     `RAL_FIELD_CP(HPA_ERR, HPA_ERR.actual)
     `RAL_FIELD_CP_1(HPA_ERR, HPA_ERR.actual, 0)
     `RAL_FIELD_CP(HPA_V, HPA_V.actual)
     `RAL_FIELD_CP_1(HPA_V, HPA_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TPTR = new("TPTR", "RO/V", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.TPTR"});
    TPTR.set_powerwell("vcccfn");
    TPTR.set_rand_mode(0);
   TPTR.set_reset_signame("hqm_csr_mmio_rst_n");
    TPTR.set_logical_path("HQMID");
    void'(add_field( TPTR ));

    HPTR = new("HPTR", "RO/V", 8, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.HPTR"});
    HPTR.set_powerwell("vcccfn");
    HPTR.set_rand_mode(0);
   HPTR.set_reset_signame("hqm_csr_mmio_rst_n");
    HPTR.set_logical_path("HQMID");
    void'(add_field( HPTR ));

    VALID = new("VALID", "RO/V", 1, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.VALID"});
    VALID.set_powerwell("vcccfn");
    VALID.set_rand_mode(0);
   VALID.set_reset_signame("hqm_csr_mmio_rst_n");
    VALID.set_logical_path("HQMID");
    void'(add_field( VALID ));

    HPA_PND = new("HPA_PND", "RO/V", 1, 17, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.DRAIN"});
    HPA_PND.set_powerwell("vcccfn");
    HPA_PND.set_rand_mode(0);
   HPA_PND.set_reset_signame("hqm_csr_mmio_rst_n");
    HPA_PND.set_logical_path("HQMID");
    void'(add_field( HPA_PND ));

    HPA_ERR = new("HPA_ERR", "RO/V", 1, 18, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.DRAIN"});
    HPA_ERR.set_powerwell("vcccfn");
    HPA_ERR.set_rand_mode(0);
   HPA_ERR.set_reset_signame("hqm_csr_mmio_rst_n");
    HPA_ERR.set_logical_path("HQMID");
    void'(add_field( HPA_ERR ));

    HPA_V = new("HPA_V", "RO/V", 1, 19, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.DRAIN"});
    HPA_V.set_powerwell("vcccfn");
    HPA_V.set_rand_mode(0);
   HPA_V.set_reset_signame("hqm_csr_mmio_rst_n");
    HPA_V.set_logical_path("HQMID");
    void'(add_field( HPA_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_MSTR_LL_STATUS_reg) 
endclass : hqm_sif_csr_bridge_MSTR_LL_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_MSTR_LL_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PTR;
  sla_ral_field RD_LL;
  sla_ral_field RD_RL;
  sla_ral_field RD_BLK;
  sla_ral_field CLR_HPA_ERR;
  sla_ral_field CQ_LL_LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_MSTR_LL_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PTR, PTR.desired)
     `RAL_FIELD_CP_8(PTR, PTR.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RD_LL, RD_LL.desired)
     `RAL_FIELD_CP_1(RD_LL, RD_LL.desired, 0)
     `RAL_FIELD_CP(RD_RL, RD_RL.desired)
     `RAL_FIELD_CP_1(RD_RL, RD_RL.desired, 0)
     `RAL_FIELD_CP(RD_BLK, RD_BLK.desired)
     `RAL_FIELD_CP_1(RD_BLK, RD_BLK.desired, 0)
     `RAL_FIELD_CP(CLR_HPA_ERR, CLR_HPA_ERR.desired)
     `RAL_FIELD_CP_1(CLR_HPA_ERR, CLR_HPA_ERR.desired, 0)
     `RAL_FIELD_CP(CQ_LL_LIMIT, CQ_LL_LIMIT.desired)
     `RAL_FIELD_CP_8(CQ_LL_LIMIT, CQ_LL_LIMIT.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PTR, PTR.actual)
     `RAL_FIELD_CP_8(PTR, PTR.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RD_LL, RD_LL.actual)
     `RAL_FIELD_CP_1(RD_LL, RD_LL.actual, 0)
     `RAL_FIELD_CP(RD_RL, RD_RL.actual)
     `RAL_FIELD_CP_1(RD_RL, RD_RL.actual, 0)
     `RAL_FIELD_CP(RD_BLK, RD_BLK.actual)
     `RAL_FIELD_CP_1(RD_BLK, RD_BLK.actual, 0)
     `RAL_FIELD_CP(CLR_HPA_ERR, CLR_HPA_ERR.actual)
     `RAL_FIELD_CP_1(CLR_HPA_ERR, CLR_HPA_ERR.actual, 0)
     `RAL_FIELD_CP(CQ_LL_LIMIT, CQ_LL_LIMIT.actual)
     `RAL_FIELD_CP_8(CQ_LL_LIMIT, CQ_LL_LIMIT.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PTR = new("PTR", "RW", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_CTL.PTR"});
    PTR.set_powerwell("vcccfn");
    PTR.set_rand_mode(0);
   PTR.set_reset_signame("hqm_csr_mmio_rst_n");
    PTR.set_logical_path("HQMID");
    void'(add_field( PTR ));

    RD_LL = new("RD_LL", "RW", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_CTL.RD_LL"});
    RD_LL.set_powerwell("vcccfn");
    RD_LL.set_rand_mode(0);
   RD_LL.set_reset_signame("hqm_csr_mmio_rst_n");
    RD_LL.set_logical_path("HQMID");
    void'(add_field( RD_LL ));

    RD_RL = new("RD_RL", "RW", 1, 9, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_CTL.RD_RL"});
    RD_RL.set_powerwell("vcccfn");
    RD_RL.set_rand_mode(0);
   RD_RL.set_reset_signame("hqm_csr_mmio_rst_n");
    RD_RL.set_logical_path("HQMID");
    void'(add_field( RD_RL ));

    RD_BLK = new("RD_BLK", "RW", 1, 10, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_CTL.RD_BLK"});
    RD_BLK.set_powerwell("vcccfn");
    RD_BLK.set_rand_mode(0);
   RD_BLK.set_reset_signame("hqm_csr_mmio_rst_n");
    RD_BLK.set_logical_path("HQMID");
    void'(add_field( RD_BLK ));

    CLR_HPA_ERR = new("CLR_HPA_ERR", "RW", 1, 11, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_CTL.CLR_CQ"});
    CLR_HPA_ERR.set_powerwell("vcccfn");
    CLR_HPA_ERR.set_rand_mode(0);
   CLR_HPA_ERR.set_reset_signame("hqm_csr_mmio_rst_n");
    CLR_HPA_ERR.set_logical_path("HQMID");
    void'(add_field( CLR_HPA_ERR ));

    CQ_LL_LIMIT = new("CQ_LL_LIMIT", "RW", 8, 12, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_CTL.CQ_LL_LIMIT"});
    CQ_LL_LIMIT.set_powerwell("vcccfn");
    CQ_LL_LIMIT.set_rand_mode(0);
   CQ_LL_LIMIT.set_reset_signame("hqm_csr_mmio_rst_n");
    CQ_LL_LIMIT.set_logical_path("HQMID");
    void'(add_field( CQ_LL_LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_MSTR_LL_CTL_reg) 
endclass : hqm_sif_csr_bridge_MSTR_LL_CTL_reg

// ================================================

class hqm_sif_csr_bridge_SIF_MSTR_DEBUG_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FABRIC_P_CREDITS;
  sla_ral_field FABRIC_NP_CREDITS;
  sla_ral_field FABRIC_CPL_CREDITS;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_SIF_MSTR_DEBUG_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FABRIC_P_CREDITS, FABRIC_P_CREDITS.desired)
     `RAL_FIELD_CP_5(FABRIC_P_CREDITS, FABRIC_P_CREDITS.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(FABRIC_NP_CREDITS, FABRIC_NP_CREDITS.desired)
     `RAL_FIELD_CP_5(FABRIC_NP_CREDITS, FABRIC_NP_CREDITS.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(FABRIC_CPL_CREDITS, FABRIC_CPL_CREDITS.desired)
     `RAL_FIELD_CP_5(FABRIC_CPL_CREDITS, FABRIC_CPL_CREDITS.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FABRIC_P_CREDITS, FABRIC_P_CREDITS.actual)
     `RAL_FIELD_CP_5(FABRIC_P_CREDITS, FABRIC_P_CREDITS.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(FABRIC_NP_CREDITS, FABRIC_NP_CREDITS.actual)
     `RAL_FIELD_CP_5(FABRIC_NP_CREDITS, FABRIC_NP_CREDITS.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(FABRIC_CPL_CREDITS, FABRIC_CPL_CREDITS.actual)
     `RAL_FIELD_CP_5(FABRIC_CPL_CREDITS, FABRIC_CPL_CREDITS.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FABRIC_P_CREDITS = new("FABRIC_P_CREDITS", "RO/V", 5, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_MSTR_DEBUG.FABRIC_P_CREDITS"});
    FABRIC_P_CREDITS.set_powerwell("vcccfn");
    FABRIC_P_CREDITS.set_rand_mode(0);
   FABRIC_P_CREDITS.set_reset_signame("hqm_csr_mmio_rst_n");
    FABRIC_P_CREDITS.set_logical_path("HQMID");
    void'(add_field( FABRIC_P_CREDITS ));

    FABRIC_NP_CREDITS = new("FABRIC_NP_CREDITS", "RO/V", 5, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_MSTR_DEBUG.FABRIC_NP_CREDITS"});
    FABRIC_NP_CREDITS.set_powerwell("vcccfn");
    FABRIC_NP_CREDITS.set_rand_mode(0);
   FABRIC_NP_CREDITS.set_reset_signame("hqm_csr_mmio_rst_n");
    FABRIC_NP_CREDITS.set_logical_path("HQMID");
    void'(add_field( FABRIC_NP_CREDITS ));

    FABRIC_CPL_CREDITS = new("FABRIC_CPL_CREDITS", "RO/V", 5, 10, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_MSTR_DEBUG.FABRIC_CPL_CREDITS"});
    FABRIC_CPL_CREDITS.set_powerwell("vcccfn");
    FABRIC_CPL_CREDITS.set_rand_mode(0);
   FABRIC_CPL_CREDITS.set_reset_signame("hqm_csr_mmio_rst_n");
    FABRIC_CPL_CREDITS.set_logical_path("HQMID");
    void'(add_field( FABRIC_CPL_CREDITS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_SIF_MSTR_DEBUG_reg) 
endclass : hqm_sif_csr_bridge_SIF_MSTR_DEBUG_reg

// ================================================

class hqm_sif_csr_bridge_IBCPL_ERR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IBCPL_ABORT;
  sla_ral_field IBCPL_UR;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_IBCPL_ERR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IBCPL_ABORT, IBCPL_ABORT.desired)
     `RAL_FIELD_CP_1(IBCPL_ABORT, IBCPL_ABORT.desired, 0)
     `RAL_FIELD_CP(IBCPL_UR, IBCPL_UR.desired)
     `RAL_FIELD_CP_1(IBCPL_UR, IBCPL_UR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IBCPL_ABORT, IBCPL_ABORT.actual)
     `RAL_FIELD_CP_1(IBCPL_ABORT, IBCPL_ABORT.actual, 0)
     `RAL_FIELD_CP(IBCPL_UR, IBCPL_UR.actual)
     `RAL_FIELD_CP_1(IBCPL_UR, IBCPL_UR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IBCPL_ABORT = new("IBCPL_ABORT", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_ERR.IBCPL_ABORT"});
    IBCPL_ABORT.set_powerwell("vcccfn");
    IBCPL_ABORT.set_rand_mode(0);
   IBCPL_ABORT.set_reset_signame("hqm_csr_mmio_rst_n");
    IBCPL_ABORT.set_logical_path("HQMID");
    void'(add_field( IBCPL_ABORT ));

    IBCPL_UR = new("IBCPL_UR", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_ERR.IBCPL_UR"});
    IBCPL_UR.set_powerwell("vcccfn");
    IBCPL_UR.set_rand_mode(0);
   IBCPL_UR.set_reset_signame("hqm_csr_mmio_rst_n");
    IBCPL_UR.set_logical_path("HQMID");
    void'(add_field( IBCPL_UR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_IBCPL_ERR_reg) 
endclass : hqm_sif_csr_bridge_IBCPL_ERR_reg

// ================================================

class hqm_sif_csr_bridge_IBCPL_ERR_HDR_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HDR;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_IBCPL_ERR_HDR_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDR, HDR.desired)
     `RAL_FIELD_CP_16(HDR, HDR.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDR, HDR.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDR, HDR.actual)
     `RAL_FIELD_CP_16(HDR, HDR.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDR, HDR.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HDR = new("HDR", "RW/1C/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_ERR_HDR_0.HDR"});
    HDR.set_powerwell("vcccfn");
    HDR.set_rand_mode(0);
   HDR.set_reset_signame("hqm_csr_mmio_rst_n");
    HDR.set_logical_path("HQMID");
    void'(add_field( HDR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_IBCPL_ERR_HDR_0_reg) 
endclass : hqm_sif_csr_bridge_IBCPL_ERR_HDR_0_reg

// ================================================

class hqm_sif_csr_bridge_IBCPL_ERR_HDR_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HDR;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_IBCPL_ERR_HDR_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDR, HDR.desired)
     `RAL_FIELD_CP_16(HDR, HDR.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDR, HDR.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDR, HDR.actual)
     `RAL_FIELD_CP_16(HDR, HDR.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDR, HDR.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HDR = new("HDR", "RW/1C/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_ERR_HDR_1.HDR"});
    HDR.set_powerwell("vcccfn");
    HDR.set_rand_mode(0);
   HDR.set_reset_signame("hqm_csr_mmio_rst_n");
    HDR.set_logical_path("HQMID");
    void'(add_field( HDR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_IBCPL_ERR_HDR_1_reg) 
endclass : hqm_sif_csr_bridge_IBCPL_ERR_HDR_1_reg

// ================================================

class hqm_sif_csr_bridge_IBCPL_ERR_HDR_2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HDR;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_IBCPL_ERR_HDR_2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDR, HDR.desired)
     `RAL_FIELD_CP_16(HDR, HDR.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDR, HDR.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDR, HDR.actual)
     `RAL_FIELD_CP_16(HDR, HDR.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDR, HDR.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HDR = new("HDR", "RW/1C/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_ERR_HDR_2.HDR"});
    HDR.set_powerwell("vcccfn");
    HDR.set_rand_mode(0);
   HDR.set_reset_signame("hqm_csr_mmio_rst_n");
    HDR.set_logical_path("HQMID");
    void'(add_field( HDR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_IBCPL_ERR_HDR_2_reg) 
endclass : hqm_sif_csr_bridge_IBCPL_ERR_HDR_2_reg

// ================================================

class hqm_sif_csr_bridge_RI_PHDR_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_PHDR_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_csr_mmio_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_csr_mmio_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_csr_mmio_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_PHDR_FIFO_STATUS_reg) 
endclass : hqm_sif_csr_bridge_RI_PHDR_FIFO_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_RI_PDATA_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_PDATA_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_csr_mmio_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_csr_mmio_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_csr_mmio_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_PDATA_FIFO_STATUS_reg) 
endclass : hqm_sif_csr_bridge_RI_PDATA_FIFO_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_RI_NPHDR_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_NPHDR_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_csr_mmio_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_csr_mmio_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_csr_mmio_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_NPHDR_FIFO_STATUS_reg) 
endclass : hqm_sif_csr_bridge_RI_NPHDR_FIFO_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_RI_NPDATA_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_NPDATA_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_csr_mmio_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_csr_mmio_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_csr_mmio_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_NPDATA_FIFO_STATUS_reg) 
endclass : hqm_sif_csr_bridge_RI_NPDATA_FIFO_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_RI_IOQ_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_RI_IOQ_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_csr_mmio_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_csr_mmio_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_csr_mmio_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_RI_IOQ_FIFO_STATUS_reg) 
endclass : hqm_sif_csr_bridge_RI_IOQ_FIFO_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_IBCPL_DATA_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_IBCPL_DATA_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_csr_mmio_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_csr_mmio_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_csr_mmio_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_IBCPL_DATA_FIFO_STATUS_reg) 
endclass : hqm_sif_csr_bridge_IBCPL_DATA_FIFO_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_OBCPL_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_OBCPL_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_csr_mmio_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_csr_mmio_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_csr_mmio_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_OBCPL_FIFO_STATUS_reg) 
endclass : hqm_sif_csr_bridge_OBCPL_FIFO_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_IBCPL_HDR_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_IBCPL_HDR_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_csr_mmio_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_csr_mmio_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_csr_mmio_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_IBCPL_HDR_FIFO_STATUS_reg) 
endclass : hqm_sif_csr_bridge_IBCPL_HDR_FIFO_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_P_RL_CQ_FIFO_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNDFLOW;
  sla_ral_field OVRFLOW;
  sla_ral_field RSVD32;
  sla_ral_field EMPTY;
  sla_ral_field RSVD5;
  sla_ral_field AFULL;
  sla_ral_field FULL;
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_P_RL_CQ_FIFO_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.desired)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.desired, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.desired)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.desired, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.desired)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.desired, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.desired)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.desired, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.desired)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.desired, 0)
     `RAL_FIELD_CP(AFULL, AFULL.desired)
     `RAL_FIELD_CP_1(AFULL, AFULL.desired, 0)
     `RAL_FIELD_CP(FULL, FULL.desired)
     `RAL_FIELD_CP_1(FULL, FULL.desired, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNDFLOW, UNDFLOW.actual)
     `RAL_FIELD_CP_1(UNDFLOW, UNDFLOW.actual, 0)
     `RAL_FIELD_CP(OVRFLOW, OVRFLOW.actual)
     `RAL_FIELD_CP_1(OVRFLOW, OVRFLOW.actual, 0)
     `RAL_FIELD_CP(RSVD32, RSVD32.actual)
     `RAL_FIELD_CP_2(RSVD32, RSVD32.actual, 0,1)
     `RAL_FIELD_CP(EMPTY, EMPTY.actual)
     `RAL_FIELD_CP_1(EMPTY, EMPTY.actual, 0)
     `RAL_FIELD_CP(RSVD5, RSVD5.actual)
     `RAL_FIELD_CP_1(RSVD5, RSVD5.actual, 0)
     `RAL_FIELD_CP(AFULL, AFULL.actual)
     `RAL_FIELD_CP_1(AFULL, AFULL.actual, 0)
     `RAL_FIELD_CP(FULL, FULL.actual)
     `RAL_FIELD_CP_1(FULL, FULL.actual, 0)
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_16(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(DEPTH, DEPTH.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNDFLOW = new("UNDFLOW", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.UNDFLOW"});
    UNDFLOW.set_powerwell("vcccfn");
    UNDFLOW.set_rand_mode(0);
   UNDFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    UNDFLOW.set_logical_path("HQMID");
    void'(add_field( UNDFLOW ));

    OVRFLOW = new("OVRFLOW", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.OVRFLOW"});
    OVRFLOW.set_powerwell("vcccfn");
    OVRFLOW.set_rand_mode(0);
   OVRFLOW.set_reset_signame("hqm_csr_mmio_rst_n");
    OVRFLOW.set_logical_path("HQMID");
    void'(add_field( OVRFLOW ));

    RSVD32 = new("RSVD32", "RO/V", 2, 2, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.RSVD32"});
    RSVD32.set_powerwell("vcccfn");
    RSVD32.set_rand_mode(0);
   RSVD32.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD32.set_logical_path("HQMID");
    void'(add_field( RSVD32 ));

    EMPTY = new("EMPTY", "RO/V", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.EMPTY"});
    EMPTY.set_powerwell("vcccfn");
    EMPTY.set_rand_mode(0);
   EMPTY.set_reset_signame("hqm_csr_mmio_rst_n");
    EMPTY.set_logical_path("HQMID");
    void'(add_field( EMPTY ));

    RSVD5 = new("RSVD5", "RO/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.RSVD5"});
    RSVD5.set_powerwell("vcccfn");
    RSVD5.set_rand_mode(0);
   RSVD5.set_reset_signame("hqm_csr_mmio_rst_n");
    RSVD5.set_logical_path("HQMID");
    void'(add_field( RSVD5 ));

    AFULL = new("AFULL", "RO/V", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.AFULL"});
    AFULL.set_powerwell("vcccfn");
    AFULL.set_rand_mode(0);
   AFULL.set_reset_signame("hqm_csr_mmio_rst_n");
    AFULL.set_logical_path("HQMID");
    void'(add_field( AFULL ));

    FULL = new("FULL", "RO/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.FULL"});
    FULL.set_powerwell("vcccfn");
    FULL.set_rand_mode(0);
   FULL.set_reset_signame("hqm_csr_mmio_rst_n");
    FULL.set_logical_path("HQMID");
    void'(add_field( FULL ));

    DEPTH = new("DEPTH", "RO/V", 24, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.DEPTH"});
    DEPTH.set_powerwell("vcccfn");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_csr_mmio_rst_n");
    DEPTH.set_logical_path("HQMID");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_P_RL_CQ_FIFO_STATUS_reg) 
endclass : hqm_sif_csr_bridge_P_RL_CQ_FIFO_STATUS_reg

// ================================================

class hqm_sif_csr_bridge_TGT_INIT_HCREDITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INIT_HCREDITS_P;
  sla_ral_field INIT_HCREDITS_NP;
  sla_ral_field INIT_HCREDITS_CPL;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_TGT_INIT_HCREDITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INIT_HCREDITS_P, INIT_HCREDITS_P.desired)
     `RAL_FIELD_CP_8(INIT_HCREDITS_P, INIT_HCREDITS_P.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(INIT_HCREDITS_NP, INIT_HCREDITS_NP.desired)
     `RAL_FIELD_CP_8(INIT_HCREDITS_NP, INIT_HCREDITS_NP.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(INIT_HCREDITS_CPL, INIT_HCREDITS_CPL.desired)
     `RAL_FIELD_CP_8(INIT_HCREDITS_CPL, INIT_HCREDITS_CPL.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INIT_HCREDITS_P, INIT_HCREDITS_P.actual)
     `RAL_FIELD_CP_8(INIT_HCREDITS_P, INIT_HCREDITS_P.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(INIT_HCREDITS_NP, INIT_HCREDITS_NP.actual)
     `RAL_FIELD_CP_8(INIT_HCREDITS_NP, INIT_HCREDITS_NP.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(INIT_HCREDITS_CPL, INIT_HCREDITS_CPL.actual)
     `RAL_FIELD_CP_8(INIT_HCREDITS_CPL, INIT_HCREDITS_CPL.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INIT_HCREDITS_P = new("INIT_HCREDITS_P", "RO/V", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_HCREDITS.INIT_HCREDITS_P"});
    INIT_HCREDITS_P.set_powerwell("vcccfn");
    INIT_HCREDITS_P.set_rand_mode(0);
   INIT_HCREDITS_P.set_reset_signame("hqm_csr_mmio_rst_n");
    INIT_HCREDITS_P.set_logical_path("HQMID");
    void'(add_field( INIT_HCREDITS_P ));

    INIT_HCREDITS_NP = new("INIT_HCREDITS_NP", "RO/V", 8, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_HCREDITS.INIT_HCREDITS_NP"});
    INIT_HCREDITS_NP.set_powerwell("vcccfn");
    INIT_HCREDITS_NP.set_rand_mode(0);
   INIT_HCREDITS_NP.set_reset_signame("hqm_csr_mmio_rst_n");
    INIT_HCREDITS_NP.set_logical_path("HQMID");
    void'(add_field( INIT_HCREDITS_NP ));

    INIT_HCREDITS_CPL = new("INIT_HCREDITS_CPL", "RO/V", 8, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_HCREDITS.INIT_HCREDITS_CPL"});
    INIT_HCREDITS_CPL.set_powerwell("vcccfn");
    INIT_HCREDITS_CPL.set_rand_mode(0);
   INIT_HCREDITS_CPL.set_reset_signame("hqm_csr_mmio_rst_n");
    INIT_HCREDITS_CPL.set_logical_path("HQMID");
    void'(add_field( INIT_HCREDITS_CPL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_TGT_INIT_HCREDITS_reg) 
endclass : hqm_sif_csr_bridge_TGT_INIT_HCREDITS_reg

// ================================================

class hqm_sif_csr_bridge_TGT_INIT_DCREDITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INIT_DCREDITS_P;
  sla_ral_field INIT_DCREDITS_NP;
  sla_ral_field INIT_DCREDITS_CPL;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_TGT_INIT_DCREDITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INIT_DCREDITS_P, INIT_DCREDITS_P.desired)
     `RAL_FIELD_CP_8(INIT_DCREDITS_P, INIT_DCREDITS_P.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(INIT_DCREDITS_NP, INIT_DCREDITS_NP.desired)
     `RAL_FIELD_CP_8(INIT_DCREDITS_NP, INIT_DCREDITS_NP.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(INIT_DCREDITS_CPL, INIT_DCREDITS_CPL.desired)
     `RAL_FIELD_CP_8(INIT_DCREDITS_CPL, INIT_DCREDITS_CPL.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INIT_DCREDITS_P, INIT_DCREDITS_P.actual)
     `RAL_FIELD_CP_8(INIT_DCREDITS_P, INIT_DCREDITS_P.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(INIT_DCREDITS_NP, INIT_DCREDITS_NP.actual)
     `RAL_FIELD_CP_8(INIT_DCREDITS_NP, INIT_DCREDITS_NP.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(INIT_DCREDITS_CPL, INIT_DCREDITS_CPL.actual)
     `RAL_FIELD_CP_8(INIT_DCREDITS_CPL, INIT_DCREDITS_CPL.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INIT_DCREDITS_P = new("INIT_DCREDITS_P", "RO/V", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_DCREDITS.INIT_DCREDITS_P"});
    INIT_DCREDITS_P.set_powerwell("vcccfn");
    INIT_DCREDITS_P.set_rand_mode(0);
   INIT_DCREDITS_P.set_reset_signame("hqm_csr_mmio_rst_n");
    INIT_DCREDITS_P.set_logical_path("HQMID");
    void'(add_field( INIT_DCREDITS_P ));

    INIT_DCREDITS_NP = new("INIT_DCREDITS_NP", "RO/V", 8, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_DCREDITS.INIT_DCREDITS_NP"});
    INIT_DCREDITS_NP.set_powerwell("vcccfn");
    INIT_DCREDITS_NP.set_rand_mode(0);
   INIT_DCREDITS_NP.set_reset_signame("hqm_csr_mmio_rst_n");
    INIT_DCREDITS_NP.set_logical_path("HQMID");
    void'(add_field( INIT_DCREDITS_NP ));

    INIT_DCREDITS_CPL = new("INIT_DCREDITS_CPL", "RO/V", 8, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_DCREDITS.INIT_DCREDITS_CPL"});
    INIT_DCREDITS_CPL.set_powerwell("vcccfn");
    INIT_DCREDITS_CPL.set_rand_mode(0);
   INIT_DCREDITS_CPL.set_reset_signame("hqm_csr_mmio_rst_n");
    INIT_DCREDITS_CPL.set_logical_path("HQMID");
    void'(add_field( INIT_DCREDITS_CPL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_TGT_INIT_DCREDITS_reg) 
endclass : hqm_sif_csr_bridge_TGT_INIT_DCREDITS_reg

// ================================================

class hqm_sif_csr_bridge_TGT_REM_HCREDITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field REM_HCREDITS_P;
  sla_ral_field REM_HCREDITS_NP;
  sla_ral_field REM_HCREDITS_CPL;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_TGT_REM_HCREDITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(REM_HCREDITS_P, REM_HCREDITS_P.desired)
     `RAL_FIELD_CP_8(REM_HCREDITS_P, REM_HCREDITS_P.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(REM_HCREDITS_NP, REM_HCREDITS_NP.desired)
     `RAL_FIELD_CP_8(REM_HCREDITS_NP, REM_HCREDITS_NP.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(REM_HCREDITS_CPL, REM_HCREDITS_CPL.desired)
     `RAL_FIELD_CP_8(REM_HCREDITS_CPL, REM_HCREDITS_CPL.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(REM_HCREDITS_P, REM_HCREDITS_P.actual)
     `RAL_FIELD_CP_8(REM_HCREDITS_P, REM_HCREDITS_P.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(REM_HCREDITS_NP, REM_HCREDITS_NP.actual)
     `RAL_FIELD_CP_8(REM_HCREDITS_NP, REM_HCREDITS_NP.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(REM_HCREDITS_CPL, REM_HCREDITS_CPL.actual)
     `RAL_FIELD_CP_8(REM_HCREDITS_CPL, REM_HCREDITS_CPL.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    REM_HCREDITS_P = new("REM_HCREDITS_P", "RO/V", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_HCREDITS.REM_HCREDITS_P"});
    REM_HCREDITS_P.set_powerwell("vcccfn");
    REM_HCREDITS_P.set_rand_mode(0);
   REM_HCREDITS_P.set_reset_signame("hqm_csr_mmio_rst_n");
    REM_HCREDITS_P.set_logical_path("HQMID");
    void'(add_field( REM_HCREDITS_P ));

    REM_HCREDITS_NP = new("REM_HCREDITS_NP", "RO/V", 8, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_HCREDITS.REM_HCREDITS_NP"});
    REM_HCREDITS_NP.set_powerwell("vcccfn");
    REM_HCREDITS_NP.set_rand_mode(0);
   REM_HCREDITS_NP.set_reset_signame("hqm_csr_mmio_rst_n");
    REM_HCREDITS_NP.set_logical_path("HQMID");
    void'(add_field( REM_HCREDITS_NP ));

    REM_HCREDITS_CPL = new("REM_HCREDITS_CPL", "RO/V", 8, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_HCREDITS.REM_HCREDITS_CPL"});
    REM_HCREDITS_CPL.set_powerwell("vcccfn");
    REM_HCREDITS_CPL.set_rand_mode(0);
   REM_HCREDITS_CPL.set_reset_signame("hqm_csr_mmio_rst_n");
    REM_HCREDITS_CPL.set_logical_path("HQMID");
    void'(add_field( REM_HCREDITS_CPL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_TGT_REM_HCREDITS_reg) 
endclass : hqm_sif_csr_bridge_TGT_REM_HCREDITS_reg

// ================================================

class hqm_sif_csr_bridge_TGT_REM_DCREDITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field REM_DCREDITS_P;
  sla_ral_field REM_DCREDITS_NP;
  sla_ral_field REM_DCREDITS_CPL;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_TGT_REM_DCREDITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(REM_DCREDITS_P, REM_DCREDITS_P.desired)
     `RAL_FIELD_CP_8(REM_DCREDITS_P, REM_DCREDITS_P.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(REM_DCREDITS_NP, REM_DCREDITS_NP.desired)
     `RAL_FIELD_CP_8(REM_DCREDITS_NP, REM_DCREDITS_NP.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(REM_DCREDITS_CPL, REM_DCREDITS_CPL.desired)
     `RAL_FIELD_CP_8(REM_DCREDITS_CPL, REM_DCREDITS_CPL.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(REM_DCREDITS_P, REM_DCREDITS_P.actual)
     `RAL_FIELD_CP_8(REM_DCREDITS_P, REM_DCREDITS_P.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(REM_DCREDITS_NP, REM_DCREDITS_NP.actual)
     `RAL_FIELD_CP_8(REM_DCREDITS_NP, REM_DCREDITS_NP.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(REM_DCREDITS_CPL, REM_DCREDITS_CPL.actual)
     `RAL_FIELD_CP_8(REM_DCREDITS_CPL, REM_DCREDITS_CPL.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    REM_DCREDITS_P = new("REM_DCREDITS_P", "RO/V", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_DCREDITS.REM_DCREDITS_P"});
    REM_DCREDITS_P.set_powerwell("vcccfn");
    REM_DCREDITS_P.set_rand_mode(0);
   REM_DCREDITS_P.set_reset_signame("hqm_csr_mmio_rst_n");
    REM_DCREDITS_P.set_logical_path("HQMID");
    void'(add_field( REM_DCREDITS_P ));

    REM_DCREDITS_NP = new("REM_DCREDITS_NP", "RO/V", 8, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_DCREDITS.REM_DCREDITS_NP"});
    REM_DCREDITS_NP.set_powerwell("vcccfn");
    REM_DCREDITS_NP.set_rand_mode(0);
   REM_DCREDITS_NP.set_reset_signame("hqm_csr_mmio_rst_n");
    REM_DCREDITS_NP.set_logical_path("HQMID");
    void'(add_field( REM_DCREDITS_NP ));

    REM_DCREDITS_CPL = new("REM_DCREDITS_CPL", "RO/V", 8, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_DCREDITS.REM_DCREDITS_CPL"});
    REM_DCREDITS_CPL.set_powerwell("vcccfn");
    REM_DCREDITS_CPL.set_rand_mode(0);
   REM_DCREDITS_CPL.set_reset_signame("hqm_csr_mmio_rst_n");
    REM_DCREDITS_CPL.set_logical_path("HQMID");
    void'(add_field( REM_DCREDITS_CPL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_TGT_REM_DCREDITS_reg) 
endclass : hqm_sif_csr_bridge_TGT_REM_DCREDITS_reg

// ================================================

class hqm_sif_csr_bridge_TGT_RET_HCREDITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RET_HCREDITS_P;
  sla_ral_field RET_HCREDITS_NP;
  sla_ral_field RET_HCREDITS_CPL;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_TGT_RET_HCREDITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RET_HCREDITS_P, RET_HCREDITS_P.desired)
     `RAL_FIELD_CP_8(RET_HCREDITS_P, RET_HCREDITS_P.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RET_HCREDITS_NP, RET_HCREDITS_NP.desired)
     `RAL_FIELD_CP_8(RET_HCREDITS_NP, RET_HCREDITS_NP.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RET_HCREDITS_CPL, RET_HCREDITS_CPL.desired)
     `RAL_FIELD_CP_8(RET_HCREDITS_CPL, RET_HCREDITS_CPL.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RET_HCREDITS_P, RET_HCREDITS_P.actual)
     `RAL_FIELD_CP_8(RET_HCREDITS_P, RET_HCREDITS_P.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RET_HCREDITS_NP, RET_HCREDITS_NP.actual)
     `RAL_FIELD_CP_8(RET_HCREDITS_NP, RET_HCREDITS_NP.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RET_HCREDITS_CPL, RET_HCREDITS_CPL.actual)
     `RAL_FIELD_CP_8(RET_HCREDITS_CPL, RET_HCREDITS_CPL.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RET_HCREDITS_P = new("RET_HCREDITS_P", "RO/V", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_HCREDITS.RET_HCREDITS_P"});
    RET_HCREDITS_P.set_powerwell("vcccfn");
    RET_HCREDITS_P.set_rand_mode(0);
   RET_HCREDITS_P.set_reset_signame("hqm_csr_mmio_rst_n");
    RET_HCREDITS_P.set_logical_path("HQMID");
    void'(add_field( RET_HCREDITS_P ));

    RET_HCREDITS_NP = new("RET_HCREDITS_NP", "RO/V", 8, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_HCREDITS.RET_HCREDITS_NP"});
    RET_HCREDITS_NP.set_powerwell("vcccfn");
    RET_HCREDITS_NP.set_rand_mode(0);
   RET_HCREDITS_NP.set_reset_signame("hqm_csr_mmio_rst_n");
    RET_HCREDITS_NP.set_logical_path("HQMID");
    void'(add_field( RET_HCREDITS_NP ));

    RET_HCREDITS_CPL = new("RET_HCREDITS_CPL", "RO/V", 8, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_HCREDITS.RET_HCREDITS_CPL"});
    RET_HCREDITS_CPL.set_powerwell("vcccfn");
    RET_HCREDITS_CPL.set_rand_mode(0);
   RET_HCREDITS_CPL.set_reset_signame("hqm_csr_mmio_rst_n");
    RET_HCREDITS_CPL.set_logical_path("HQMID");
    void'(add_field( RET_HCREDITS_CPL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_TGT_RET_HCREDITS_reg) 
endclass : hqm_sif_csr_bridge_TGT_RET_HCREDITS_reg

// ================================================

class hqm_sif_csr_bridge_TGT_RET_DCREDITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RET_DCREDITS_P;
  sla_ral_field RET_DCREDITS_NP;
  sla_ral_field RET_DCREDITS_CPL;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_TGT_RET_DCREDITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RET_DCREDITS_P, RET_DCREDITS_P.desired)
     `RAL_FIELD_CP_8(RET_DCREDITS_P, RET_DCREDITS_P.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RET_DCREDITS_NP, RET_DCREDITS_NP.desired)
     `RAL_FIELD_CP_8(RET_DCREDITS_NP, RET_DCREDITS_NP.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RET_DCREDITS_CPL, RET_DCREDITS_CPL.desired)
     `RAL_FIELD_CP_8(RET_DCREDITS_CPL, RET_DCREDITS_CPL.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RET_DCREDITS_P, RET_DCREDITS_P.actual)
     `RAL_FIELD_CP_8(RET_DCREDITS_P, RET_DCREDITS_P.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RET_DCREDITS_NP, RET_DCREDITS_NP.actual)
     `RAL_FIELD_CP_8(RET_DCREDITS_NP, RET_DCREDITS_NP.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RET_DCREDITS_CPL, RET_DCREDITS_CPL.actual)
     `RAL_FIELD_CP_8(RET_DCREDITS_CPL, RET_DCREDITS_CPL.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RET_DCREDITS_P = new("RET_DCREDITS_P", "RO/V", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_DCREDITS.RET_DCREDITS_P"});
    RET_DCREDITS_P.set_powerwell("vcccfn");
    RET_DCREDITS_P.set_rand_mode(0);
   RET_DCREDITS_P.set_reset_signame("hqm_csr_mmio_rst_n");
    RET_DCREDITS_P.set_logical_path("HQMID");
    void'(add_field( RET_DCREDITS_P ));

    RET_DCREDITS_NP = new("RET_DCREDITS_NP", "RO/V", 8, 8, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_DCREDITS.RET_DCREDITS_NP"});
    RET_DCREDITS_NP.set_powerwell("vcccfn");
    RET_DCREDITS_NP.set_rand_mode(0);
   RET_DCREDITS_NP.set_reset_signame("hqm_csr_mmio_rst_n");
    RET_DCREDITS_NP.set_logical_path("HQMID");
    void'(add_field( RET_DCREDITS_NP ));

    RET_DCREDITS_CPL = new("RET_DCREDITS_CPL", "RO/V", 8, 16, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_DCREDITS.RET_DCREDITS_CPL"});
    RET_DCREDITS_CPL.set_powerwell("vcccfn");
    RET_DCREDITS_CPL.set_rand_mode(0);
   RET_DCREDITS_CPL.set_reset_signame("hqm_csr_mmio_rst_n");
    RET_DCREDITS_CPL.set_logical_path("HQMID");
    void'(add_field( RET_DCREDITS_CPL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_TGT_RET_DCREDITS_reg) 
endclass : hqm_sif_csr_bridge_TGT_RET_DCREDITS_reg

// ================================================

class hqm_sif_csr_bridge_AW_SMON_CONFIGURATION0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SMON_ENABLE;
  sla_ral_field SMON0_FUNCTION;
  sla_ral_field SMON0_FUNCTION_COMPARE;
  sla_ral_field SMON1_FUNCTION;
  sla_ral_field SMON1_FUNCTION_COMPARE;
  sla_ral_field SMON_MODE;
  sla_ral_field STOPCOUNTEROVFL;
  sla_ral_field INTCOUNTEROVFL;
  sla_ral_field STATCOUNTER0OVFL;
  sla_ral_field STATCOUNTER1OVFL;
  sla_ral_field STOPTIMEROVFL;
  sla_ral_field INTTIMEROVFL;
  sla_ral_field STATTIMEROVFL;
  sla_ral_field TIMER_PRESCALE;
  sla_ral_field VERSION;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_AW_SMON_CONFIGURATION0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.desired, 0)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.desired)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.desired, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.desired)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.desired)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(VERSION, VERSION.desired)
     `RAL_FIELD_CP_2(VERSION, VERSION.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.actual, 0)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.actual)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.actual, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.actual)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.actual)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(VERSION, VERSION.actual)
     `RAL_FIELD_CP_2(VERSION, VERSION.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SMON_ENABLE = new("SMON_ENABLE", "RW", 1, 0, {""});
    SMON_ENABLE.set_powerwell("vcccfn");
    SMON_ENABLE.set_rand_mode(0);
   SMON_ENABLE.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( SMON_ENABLE ));

    SMON0_FUNCTION = new("SMON0_FUNCTION", "RW", 3, 4, {""});
    SMON0_FUNCTION.set_powerwell("vcccfn");
    SMON0_FUNCTION.set_rand_mode(0);
   SMON0_FUNCTION.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( SMON0_FUNCTION ));

    SMON0_FUNCTION_COMPARE = new("SMON0_FUNCTION_COMPARE", "RW", 1, 7, {""});
    SMON0_FUNCTION_COMPARE.set_powerwell("vcccfn");
    SMON0_FUNCTION_COMPARE.set_rand_mode(0);
   SMON0_FUNCTION_COMPARE.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( SMON0_FUNCTION_COMPARE ));

    SMON1_FUNCTION = new("SMON1_FUNCTION", "RW", 3, 8, {""});
    SMON1_FUNCTION.set_powerwell("vcccfn");
    SMON1_FUNCTION.set_rand_mode(0);
   SMON1_FUNCTION.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( SMON1_FUNCTION ));

    SMON1_FUNCTION_COMPARE = new("SMON1_FUNCTION_COMPARE", "RW", 1, 11, {""});
    SMON1_FUNCTION_COMPARE.set_powerwell("vcccfn");
    SMON1_FUNCTION_COMPARE.set_rand_mode(0);
   SMON1_FUNCTION_COMPARE.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( SMON1_FUNCTION_COMPARE ));

    SMON_MODE = new("SMON_MODE", "RW", 4, 12, {""});
    SMON_MODE.set_powerwell("vcccfn");
    SMON_MODE.set_rand_mode(0);
   SMON_MODE.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( SMON_MODE ));

    STOPCOUNTEROVFL = new("STOPCOUNTEROVFL", "RW", 1, 16, {""});
    STOPCOUNTEROVFL.set_powerwell("vcccfn");
    STOPCOUNTEROVFL.set_rand_mode(0);
   STOPCOUNTEROVFL.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( STOPCOUNTEROVFL ));

    INTCOUNTEROVFL = new("INTCOUNTEROVFL", "RW", 1, 17, {""});
    INTCOUNTEROVFL.set_powerwell("vcccfn");
    INTCOUNTEROVFL.set_rand_mode(0);
   INTCOUNTEROVFL.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( INTCOUNTEROVFL ));

    STATCOUNTER0OVFL = new("STATCOUNTER0OVFL", "RW", 1, 18, {""});
    STATCOUNTER0OVFL.set_powerwell("vcccfn");
    STATCOUNTER0OVFL.set_rand_mode(0);
   STATCOUNTER0OVFL.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( STATCOUNTER0OVFL ));

    STATCOUNTER1OVFL = new("STATCOUNTER1OVFL", "RW", 1, 19, {""});
    STATCOUNTER1OVFL.set_powerwell("vcccfn");
    STATCOUNTER1OVFL.set_rand_mode(0);
   STATCOUNTER1OVFL.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( STATCOUNTER1OVFL ));

    STOPTIMEROVFL = new("STOPTIMEROVFL", "RW", 1, 20, {""});
    STOPTIMEROVFL.set_powerwell("vcccfn");
    STOPTIMEROVFL.set_rand_mode(0);
   STOPTIMEROVFL.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( STOPTIMEROVFL ));

    INTTIMEROVFL = new("INTTIMEROVFL", "RW", 1, 21, {""});
    INTTIMEROVFL.set_powerwell("vcccfn");
    INTTIMEROVFL.set_rand_mode(0);
   INTTIMEROVFL.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( INTTIMEROVFL ));

    STATTIMEROVFL = new("STATTIMEROVFL", "RW", 1, 22, {""});
    STATTIMEROVFL.set_powerwell("vcccfn");
    STATTIMEROVFL.set_rand_mode(0);
   STATTIMEROVFL.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( STATTIMEROVFL ));

    TIMER_PRESCALE = new("TIMER_PRESCALE", "RW", 5, 24, {""});
    TIMER_PRESCALE.set_powerwell("vcccfn");
    TIMER_PRESCALE.set_rand_mode(0);
   TIMER_PRESCALE.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( TIMER_PRESCALE ));

    VERSION = new("VERSION", "RO", 2, 30, {"NoSignal"});
    VERSION.set_powerwell("vcccfn");
    VERSION.set_rand_mode(0);
   VERSION.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_AW_SMON_CONFIGURATION0_reg) 
endclass : hqm_sif_csr_bridge_AW_SMON_CONFIGURATION0_reg

// ================================================

class hqm_sif_csr_bridge_AW_SMON_CONFIGURATION1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE0;
  sla_ral_field MODE1;
  sla_ral_field RSVD;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_AW_SMON_CONFIGURATION1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.desired)
     `RAL_FIELD_CP_8(MODE0, MODE0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.desired)
     `RAL_FIELD_CP_8(MODE1, MODE1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVD, RSVD.desired)
     `RAL_FIELD_CP_16(RSVD, RSVD.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.actual)
     `RAL_FIELD_CP_8(MODE0, MODE0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.actual)
     `RAL_FIELD_CP_8(MODE1, MODE1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVD, RSVD.actual)
     `RAL_FIELD_CP_16(RSVD, RSVD.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE0 = new("MODE0", "RW", 8, 0, {""});
    MODE0.set_powerwell("vcccfn");
    MODE0.set_rand_mode(0);
   MODE0.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( MODE0 ));

    MODE1 = new("MODE1", "RW", 8, 8, {""});
    MODE1.set_powerwell("vcccfn");
    MODE1.set_rand_mode(0);
   MODE1.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( MODE1 ));

    RSVD = new("RSVD", "RW", 16, 16, {""});
    RSVD.set_powerwell("vcccfn");
    RSVD.set_rand_mode(0);
   RSVD.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( RSVD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_AW_SMON_CONFIGURATION1_reg) 
endclass : hqm_sif_csr_bridge_AW_SMON_CONFIGURATION1_reg

// ================================================

class hqm_sif_csr_bridge_AW_SMON_COMPARE0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE0;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_AW_SMON_COMPARE0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.desired)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.actual)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE0 = new("COMPARE0", "RW", 32, 0, {""});
    COMPARE0.set_powerwell("vcccfn");
    COMPARE0.set_rand_mode(0);
   COMPARE0.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( COMPARE0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_AW_SMON_COMPARE0_reg) 
endclass : hqm_sif_csr_bridge_AW_SMON_COMPARE0_reg

// ================================================

class hqm_sif_csr_bridge_AW_SMON_COMPARE1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE1;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_AW_SMON_COMPARE1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.desired)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.actual)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE1 = new("COMPARE1", "RW", 32, 0, {""});
    COMPARE1.set_powerwell("vcccfn");
    COMPARE1.set_rand_mode(0);
   COMPARE1.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( COMPARE1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_AW_SMON_COMPARE1_reg) 
endclass : hqm_sif_csr_bridge_AW_SMON_COMPARE1_reg

// ================================================

class hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER0;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.desired)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.actual)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER0 = new("COUNTER0", "RW", 32, 0, {""});
    COUNTER0.set_powerwell("vcccfn");
    COUNTER0.set_rand_mode(0);
   COUNTER0.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( COUNTER0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg) 
endclass : hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg

// ================================================

class hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER1;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.desired)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.actual)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER1 = new("COUNTER1", "RW", 32, 0, {""});
    COUNTER1.set_powerwell("vcccfn");
    COUNTER1.set_rand_mode(0);
   COUNTER1.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( COUNTER1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg) 
endclass : hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg

// ================================================

class hqm_sif_csr_bridge_AW_SMON_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER_VAL;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_AW_SMON_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_VAL, TIMER_VAL.desired)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER_VAL, TIMER_VAL.actual)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER_VAL, TIMER_VAL.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER_VAL = new("TIMER_VAL", "RW", 32, 0, {""});
    TIMER_VAL.set_powerwell("vcccfn");
    TIMER_VAL.set_rand_mode(0);
   TIMER_VAL.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( TIMER_VAL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_AW_SMON_TIMER_reg) 
endclass : hqm_sif_csr_bridge_AW_SMON_TIMER_reg

// ================================================

class hqm_sif_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MAXVALUE;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.desired)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.actual)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MAXVALUE = new("MAXVALUE", "RW", 32, 0, {""});
    MAXVALUE.set_powerwell("vcccfn");
    MAXVALUE.set_rand_mode(0);
   MAXVALUE.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( MAXVALUE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg) 
endclass : hqm_sif_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg

// ================================================

class hqm_sif_csr_bridge_AW_SMON_COMP_MASK0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMP_MASK0;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_AW_SMON_COMP_MASK0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK0, COMP_MASK0.desired)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK0, COMP_MASK0.actual)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK0, COMP_MASK0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMP_MASK0 = new("COMP_MASK0", "RW", 32, 0, {""});
    COMP_MASK0.set_powerwell("vcccfn");
    COMP_MASK0.set_rand_mode(0);
   COMP_MASK0.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( COMP_MASK0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_AW_SMON_COMP_MASK0_reg) 
endclass : hqm_sif_csr_bridge_AW_SMON_COMP_MASK0_reg

// ================================================

class hqm_sif_csr_bridge_AW_SMON_COMP_MASK1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMP_MASK1;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_AW_SMON_COMP_MASK1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK1, COMP_MASK1.desired)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMP_MASK1, COMP_MASK1.actual)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMP_MASK1, COMP_MASK1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMP_MASK1 = new("COMP_MASK1", "RW", 32, 0, {""});
    COMP_MASK1.set_powerwell("vcccfn");
    COMP_MASK1.set_rand_mode(0);
   COMP_MASK1.set_reset_signame("hqm_csr_mmio_rst_n");
    void'(add_field( COMP_MASK1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_AW_SMON_COMP_MASK1_reg) 
endclass : hqm_sif_csr_bridge_AW_SMON_COMP_MASK1_reg

// ================================================

class hqm_sif_csr_bridge_HQM_PULLED_FUSES_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FUSES;

  // --------------------------
  `ovm_object_utils(hqm_sif_csr_bridge_HQM_PULLED_FUSES_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FUSES, FUSES.desired)
     `RAL_FIELD_CP_16(FUSES, FUSES.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(FUSES, FUSES.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FUSES, FUSES.actual)
     `RAL_FIELD_CP_16(FUSES, FUSES.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(FUSES, FUSES.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FUSES = new("FUSES", "RO/V", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_PULLED_FUSES_0.FUSES"});
    FUSES.set_powerwell("vcccfn");
    FUSES.set_rand_mode(0);
   FUSES.set_reset_signame("hqm_csr_mmio_rst_n");
    FUSES.set_logical_path("HQMID");
    void'(add_field( FUSES ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_sif_csr_bridge_HQM_PULLED_FUSES_0_reg) 
endclass : hqm_sif_csr_bridge_HQM_PULLED_FUSES_0_reg

// ================================================

class hqm_sif_csr_bridge_file extends sla_ral_file;

  rand hqm_sif_csr_bridge_HQM_CSR_CP_LO_reg HQM_CSR_CP_LO;
  rand hqm_sif_csr_bridge_HQM_CSR_CP_HI_reg HQM_CSR_CP_HI;
  rand hqm_sif_csr_bridge_HQM_CSR_RAC_LO_reg HQM_CSR_RAC_LO;
  rand hqm_sif_csr_bridge_HQM_CSR_RAC_HI_reg HQM_CSR_RAC_HI;
  rand hqm_sif_csr_bridge_HQM_CSR_WAC_LO_reg HQM_CSR_WAC_LO;
  rand hqm_sif_csr_bridge_HQM_CSR_WAC_HI_reg HQM_CSR_WAC_HI;
  rand hqm_sif_csr_bridge_SIF_CTL_reg SIF_CTL;
  rand hqm_sif_csr_bridge_SIF_VC_RXMAP_reg SIF_VC_RXMAP;
  rand hqm_sif_csr_bridge_SIF_VC_TXMAP_reg SIF_VC_TXMAP;
  rand hqm_sif_csr_bridge_DEVTLB_ATS_ERR_reg DEVTLB_ATS_ERR;
  rand hqm_sif_csr_bridge_SIF_ALARM_ERR_reg SIF_ALARM_ERR;
  rand hqm_sif_csr_bridge_RI_PARITY_ERR_reg RI_PARITY_ERR;
  rand hqm_sif_csr_bridge_SIF_PARITY_ERR_reg SIF_PARITY_ERR;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_CTL_reg HQM_SIF_CNT_CTL;
  rand hqm_sif_csr_bridge_DIR_CQ2TC_MAP_reg DIR_CQ2TC_MAP;
  rand hqm_sif_csr_bridge_LDB_CQ2TC_MAP_reg LDB_CQ2TC_MAP;
  rand hqm_sif_csr_bridge_INT2TC_MAP_reg INT2TC_MAP;
  rand hqm_sif_csr_bridge_CFG_UNIT_VERSION_reg CFG_UNIT_VERSION;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_0_reg HQM_SIF_CNT_0;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_1_reg HQM_SIF_CNT_1;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_2_reg HQM_SIF_CNT_2;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_3_reg HQM_SIF_CNT_3;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_4_reg HQM_SIF_CNT_4;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_5_reg HQM_SIF_CNT_5;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_6_reg HQM_SIF_CNT_6;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_7_reg HQM_SIF_CNT_7;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_8_reg HQM_SIF_CNT_8;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_9_reg HQM_SIF_CNT_9;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_10_reg HQM_SIF_CNT_10;
  rand hqm_sif_csr_bridge_HQM_SIF_CNT_11_reg HQM_SIF_CNT_11;
  rand hqm_sif_csr_bridge_OBCPL_AFULL_AGITATE_CONTROL_reg OBCPL_AFULL_AGITATE_CONTROL;
  rand hqm_sif_csr_bridge_PRIM_CDC_CTL_reg PRIM_CDC_CTL;
  rand hqm_sif_csr_bridge_SIDE_CDC_CTL_reg SIDE_CDC_CTL;
  rand hqm_sif_csr_bridge_IOSFP_CGCTL_reg IOSFP_CGCTL;
  rand hqm_sif_csr_bridge_IOSFS_CGCTL_reg IOSFS_CGCTL;
  rand hqm_sif_csr_bridge_PARITY_CTL_reg PARITY_CTL;
  rand hqm_sif_csr_bridge_CFG_MASTER_TIMEOUT_reg CFG_MASTER_TIMEOUT;
  rand hqm_sif_csr_bridge_MMIO_TIMEOUT_reg MMIO_TIMEOUT;
  rand hqm_sif_csr_bridge_HCW_TIMEOUT_reg HCW_TIMEOUT;
  rand hqm_sif_csr_bridge_VISA_SW_CONTROL_reg VISA_SW_CONTROL;
  rand hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_L_reg CFG_PH_TRIGGER_ADDR_L;
  rand hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_U_reg CFG_PH_TRIGGER_ADDR_U;
  rand hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_L_reg CFG_PH_TRIGGER_MASK_L;
  rand hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_U_reg CFG_PH_TRIGGER_MASK_U;
  rand hqm_sif_csr_bridge_SIF_IDLE_STATUS_reg SIF_IDLE_STATUS;
  rand hqm_sif_csr_bridge_SIF_DB_STATUS_reg SIF_DB_STATUS;
  rand hqm_sif_csr_bridge_RI_DB_STATUS_reg RI_DB_STATUS;
  rand hqm_sif_csr_bridge_RI_PHDR_FIFO_CTL_reg RI_PHDR_FIFO_CTL;
  rand hqm_sif_csr_bridge_RI_PDATA_FIFO_CTL_reg RI_PDATA_FIFO_CTL;
  rand hqm_sif_csr_bridge_RI_NPHDR_FIFO_CTL_reg RI_NPHDR_FIFO_CTL;
  rand hqm_sif_csr_bridge_RI_NPDATA_FIFO_CTL_reg RI_NPDATA_FIFO_CTL;
  rand hqm_sif_csr_bridge_RI_IOQ_FIFO_CTL_reg RI_IOQ_FIFO_CTL;
  rand hqm_sif_csr_bridge_IBCPL_HDR_FIFO_CTL_reg IBCPL_HDR_FIFO_CTL;
  rand hqm_sif_csr_bridge_IBCPL_DATA_FIFO_CTL_reg IBCPL_DATA_FIFO_CTL;
  rand hqm_sif_csr_bridge_SCRBD_CTL_reg SCRBD_CTL;
  rand hqm_sif_csr_bridge_SCRBD_STATUS_reg SCRBD_STATUS;
  rand hqm_sif_csr_bridge_DEVTLB_CTL_reg DEVTLB_CTL;
  rand hqm_sif_csr_bridge_DEVTLB_SPARE_reg DEVTLB_SPARE;
  rand hqm_sif_csr_bridge_DEVTLB_DEFEATURE0_reg DEVTLB_DEFEATURE0;
  rand hqm_sif_csr_bridge_DEVTLB_DEFEATURE1_reg DEVTLB_DEFEATURE1;
  rand hqm_sif_csr_bridge_DEVTLB_DEFEATURE2_reg DEVTLB_DEFEATURE2;
  rand hqm_sif_csr_bridge_DEVTLB_STATUS_reg DEVTLB_STATUS;
  rand hqm_sif_csr_bridge_CFGM_STATUS_reg CFGM_STATUS;
  rand hqm_sif_csr_bridge_CFGM_STATUS2_reg CFGM_STATUS2;
  rand hqm_sif_csr_bridge_LOCAL_BME_STATUS_reg LOCAL_BME_STATUS;
  rand hqm_sif_csr_bridge_LOCAL_MSIXE_STATUS_reg LOCAL_MSIXE_STATUS;
  rand hqm_sif_csr_bridge_MSTR_CRD_STATUS_reg MSTR_CRD_STATUS;
  rand hqm_sif_csr_bridge_MSTR_FL_STATUS_reg MSTR_FL_STATUS;
  rand hqm_sif_csr_bridge_MSTR_LL_STATUS_reg MSTR_LL_STATUS;
  rand hqm_sif_csr_bridge_MSTR_LL_CTL_reg MSTR_LL_CTL;
  rand hqm_sif_csr_bridge_SIF_MSTR_DEBUG_reg SIF_MSTR_DEBUG;
  rand hqm_sif_csr_bridge_IBCPL_ERR_reg IBCPL_ERR;
  rand hqm_sif_csr_bridge_IBCPL_ERR_HDR_0_reg IBCPL_ERR_HDR_0;
  rand hqm_sif_csr_bridge_IBCPL_ERR_HDR_1_reg IBCPL_ERR_HDR_1;
  rand hqm_sif_csr_bridge_IBCPL_ERR_HDR_2_reg IBCPL_ERR_HDR_2;
  rand hqm_sif_csr_bridge_RI_PHDR_FIFO_STATUS_reg RI_PHDR_FIFO_STATUS;
  rand hqm_sif_csr_bridge_RI_PDATA_FIFO_STATUS_reg RI_PDATA_FIFO_STATUS;
  rand hqm_sif_csr_bridge_RI_NPHDR_FIFO_STATUS_reg RI_NPHDR_FIFO_STATUS;
  rand hqm_sif_csr_bridge_RI_NPDATA_FIFO_STATUS_reg RI_NPDATA_FIFO_STATUS;
  rand hqm_sif_csr_bridge_RI_IOQ_FIFO_STATUS_reg RI_IOQ_FIFO_STATUS;
  rand hqm_sif_csr_bridge_IBCPL_DATA_FIFO_STATUS_reg IBCPL_DATA_FIFO_STATUS;
  rand hqm_sif_csr_bridge_OBCPL_FIFO_STATUS_reg OBCPL_FIFO_STATUS;
  rand hqm_sif_csr_bridge_IBCPL_HDR_FIFO_STATUS_reg IBCPL_HDR_FIFO_STATUS;
  rand hqm_sif_csr_bridge_P_RL_CQ_FIFO_STATUS_reg P_RL_CQ_FIFO_STATUS;
  rand hqm_sif_csr_bridge_TGT_INIT_HCREDITS_reg TGT_INIT_HCREDITS;
  rand hqm_sif_csr_bridge_TGT_INIT_DCREDITS_reg TGT_INIT_DCREDITS;
  rand hqm_sif_csr_bridge_TGT_REM_HCREDITS_reg TGT_REM_HCREDITS;
  rand hqm_sif_csr_bridge_TGT_REM_DCREDITS_reg TGT_REM_DCREDITS;
  rand hqm_sif_csr_bridge_TGT_RET_HCREDITS_reg TGT_RET_HCREDITS;
  rand hqm_sif_csr_bridge_TGT_RET_DCREDITS_reg TGT_RET_DCREDITS;
  rand hqm_sif_csr_bridge_AW_SMON_CONFIGURATION0_reg AW_SMON_CONFIGURATION0[2];
  rand hqm_sif_csr_bridge_AW_SMON_CONFIGURATION1_reg AW_SMON_CONFIGURATION1[2];
  rand hqm_sif_csr_bridge_AW_SMON_COMPARE0_reg AW_SMON_COMPARE0[2];
  rand hqm_sif_csr_bridge_AW_SMON_COMPARE1_reg AW_SMON_COMPARE1[2];
  rand hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg AW_SMON_ACTIVITYCOUNTER0[2];
  rand hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg AW_SMON_ACTIVITYCOUNTER1[2];
  rand hqm_sif_csr_bridge_AW_SMON_TIMER_reg AW_SMON_TIMER[2];
  rand hqm_sif_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg AW_SMON_MAXIMUM_TIMER[2];
  rand hqm_sif_csr_bridge_AW_SMON_COMP_MASK0_reg AW_SMON_COMP_MASK0[2];
  rand hqm_sif_csr_bridge_AW_SMON_COMP_MASK1_reg AW_SMON_COMP_MASK1[2];
  rand hqm_sif_csr_bridge_HQM_PULLED_FUSES_0_reg HQM_PULLED_FUSES_0;

  `ovm_component_utils(hqm_sif_csr_bridge_file)

  function new(string n, ovm_component p);
    super.new(n,p);
  endfunction

  // --------------------------
  function void build();
    regfilename = this.get_name();

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_CSR_CP_LO";
    `endif
    HQM_CSR_CP_LO = hqm_sif_csr_bridge_HQM_CSR_CP_LO_reg::type_id::create("HQM_CSR_CP_LO", this);
    HQM_CSR_CP_LO.set_cfg(16'h0, 16'h0, 16'h0, 4'h0, 32, 32'b00000001000000000000001000011000);
    HQM_CSR_CP_LO.set_space_addr("MSG", 4'h0);
    HQM_CSR_CP_LO.set_space_addr("msg_bus_port", 'h21);
    HQM_CSR_CP_LO.set_space_addr("MEM-SB",4'h0);
    HQM_CSR_CP_LO.set_space_addr("MEM", 4'h0);
      HQM_CSR_CP_LO.set_space("MEM");
      HQM_CSR_CP_LO.set_msg_opcode("MEM-SB");
      HQM_CSR_CP_LO.set_fid(4'h0, "MEM-SB");
  	HQM_CSR_CP_LO.set_bar(4'h2, "MEM-SB");
      HQM_CSR_CP_LO.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_CSR_CP_LO.set_user_attribute("diag_reg", "0");
      HQM_CSR_CP_LO.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_CSR_CP_LO.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_CSR_CP_LO:dont_test") ) HQM_CSR_CP_LO.set_test_reg(1'b0);
      if (!add_reg( HQM_CSR_CP_LO )) begin
        `sla_error(get_name(), ("Could not add register HQM_CSR_CP_LO"));
      end
   HQM_CSR_CP_LO.SAI_MASK.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_CP_LO.SAI_MASK"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_CSR_CP_HI";
    `endif
    HQM_CSR_CP_HI = hqm_sif_csr_bridge_HQM_CSR_CP_HI_reg::type_id::create("HQM_CSR_CP_HI", this);
    HQM_CSR_CP_HI.set_cfg(16'h0, 16'h0, 16'h0, 4'h4, 32, 32'b00000000000000000000010000000000);
    HQM_CSR_CP_HI.set_space_addr("MSG", 4'h4);
    HQM_CSR_CP_HI.set_space_addr("msg_bus_port", 'h21);
    HQM_CSR_CP_HI.set_space_addr("MEM-SB",4'h4);
    HQM_CSR_CP_HI.set_space_addr("MEM", 4'h4);
      HQM_CSR_CP_HI.set_space("MEM");
      HQM_CSR_CP_HI.set_msg_opcode("MEM-SB");
      HQM_CSR_CP_HI.set_fid(4'h0, "MEM-SB");
  	HQM_CSR_CP_HI.set_bar(4'h2, "MEM-SB");
      HQM_CSR_CP_HI.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_CSR_CP_HI.set_user_attribute("diag_reg", "0");
      HQM_CSR_CP_HI.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_CSR_CP_HI.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_CSR_CP_HI:dont_test") ) HQM_CSR_CP_HI.set_test_reg(1'b0);
      if (!add_reg( HQM_CSR_CP_HI )) begin
        `sla_error(get_name(), ("Could not add register HQM_CSR_CP_HI"));
      end
   HQM_CSR_CP_HI.SAI_MASK.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_CP_HI.SAI_MASK"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_CSR_RAC_LO";
    `endif
    HQM_CSR_RAC_LO = hqm_sif_csr_bridge_HQM_CSR_RAC_LO_reg::type_id::create("HQM_CSR_RAC_LO", this);
    HQM_CSR_RAC_LO.set_cfg(16'h0, 16'h0, 16'h0, 4'h8, 32, 32'b11111111111111111111111111111111);
    HQM_CSR_RAC_LO.set_space_addr("MSG", 4'h8);
    HQM_CSR_RAC_LO.set_space_addr("msg_bus_port", 'h21);
    HQM_CSR_RAC_LO.set_space_addr("MEM-SB",4'h8);
    HQM_CSR_RAC_LO.set_space_addr("MEM", 4'h8);
      HQM_CSR_RAC_LO.set_space("MEM");
      HQM_CSR_RAC_LO.set_msg_opcode("MEM-SB");
      HQM_CSR_RAC_LO.set_fid(4'h0, "MEM-SB");
  	HQM_CSR_RAC_LO.set_bar(4'h2, "MEM-SB");
      HQM_CSR_RAC_LO.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_CSR_RAC_LO.set_user_attribute("diag_reg", "0");
      HQM_CSR_RAC_LO.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_CSR_RAC_LO.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_CSR_RAC_LO:dont_test") ) HQM_CSR_RAC_LO.set_test_reg(1'b0);
      if (!add_reg( HQM_CSR_RAC_LO )) begin
        `sla_error(get_name(), ("Could not add register HQM_CSR_RAC_LO"));
      end
   HQM_CSR_RAC_LO.SAI_MASK.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_RAC_LO.SAI_MASK"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_CSR_RAC_HI";
    `endif
    HQM_CSR_RAC_HI = hqm_sif_csr_bridge_HQM_CSR_RAC_HI_reg::type_id::create("HQM_CSR_RAC_HI", this);
    HQM_CSR_RAC_HI.set_cfg(16'h0, 16'h0, 16'h0, 8'h0C, 32, 32'b11111111111111111111111111111111);
    HQM_CSR_RAC_HI.set_space_addr("MSG", 8'h0C);
    HQM_CSR_RAC_HI.set_space_addr("msg_bus_port", 'h21);
    HQM_CSR_RAC_HI.set_space_addr("MEM-SB",4'hC);
    HQM_CSR_RAC_HI.set_space_addr("MEM", 8'h0C);
      HQM_CSR_RAC_HI.set_space("MEM");
      HQM_CSR_RAC_HI.set_msg_opcode("MEM-SB");
      HQM_CSR_RAC_HI.set_fid(4'h0, "MEM-SB");
  	HQM_CSR_RAC_HI.set_bar(4'h2, "MEM-SB");
      HQM_CSR_RAC_HI.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_CSR_RAC_HI.set_user_attribute("diag_reg", "0");
      HQM_CSR_RAC_HI.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_CSR_RAC_HI.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_CSR_RAC_HI:dont_test") ) HQM_CSR_RAC_HI.set_test_reg(1'b0);
      if (!add_reg( HQM_CSR_RAC_HI )) begin
        `sla_error(get_name(), ("Could not add register HQM_CSR_RAC_HI"));
      end
   HQM_CSR_RAC_HI.SAI_MASK.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_RAC_HI.SAI_MASK"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_CSR_WAC_LO";
    `endif
    HQM_CSR_WAC_LO = hqm_sif_csr_bridge_HQM_CSR_WAC_LO_reg::type_id::create("HQM_CSR_WAC_LO", this);
    HQM_CSR_WAC_LO.set_cfg(16'h0, 16'h0, 16'h0, 8'h10, 32, 32'b00000011000000000000001000011111);
    HQM_CSR_WAC_LO.set_space_addr("MSG", 8'h10);
    HQM_CSR_WAC_LO.set_space_addr("msg_bus_port", 'h21);
    HQM_CSR_WAC_LO.set_space_addr("MEM-SB",8'h10);
    HQM_CSR_WAC_LO.set_space_addr("MEM", 8'h10);
      HQM_CSR_WAC_LO.set_space("MEM");
      HQM_CSR_WAC_LO.set_msg_opcode("MEM-SB");
      HQM_CSR_WAC_LO.set_fid(4'h0, "MEM-SB");
  	HQM_CSR_WAC_LO.set_bar(4'h2, "MEM-SB");
      HQM_CSR_WAC_LO.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_CSR_WAC_LO.set_user_attribute("diag_reg", "0");
      HQM_CSR_WAC_LO.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_CSR_WAC_LO.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_CSR_WAC_LO:dont_test") ) HQM_CSR_WAC_LO.set_test_reg(1'b0);
      if (!add_reg( HQM_CSR_WAC_LO )) begin
        `sla_error(get_name(), ("Could not add register HQM_CSR_WAC_LO"));
      end
   HQM_CSR_WAC_LO.SAI_MASK.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_WAC_LO.SAI_MASK"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_CSR_WAC_HI";
    `endif
    HQM_CSR_WAC_HI = hqm_sif_csr_bridge_HQM_CSR_WAC_HI_reg::type_id::create("HQM_CSR_WAC_HI", this);
    HQM_CSR_WAC_HI.set_cfg(16'h0, 16'h0, 16'h0, 8'h14, 32, 32'b00100000000000000000110000000000);
    HQM_CSR_WAC_HI.set_space_addr("MSG", 8'h14);
    HQM_CSR_WAC_HI.set_space_addr("msg_bus_port", 'h21);
    HQM_CSR_WAC_HI.set_space_addr("MEM-SB",8'h14);
    HQM_CSR_WAC_HI.set_space_addr("MEM", 8'h14);
      HQM_CSR_WAC_HI.set_space("MEM");
      HQM_CSR_WAC_HI.set_msg_opcode("MEM-SB");
      HQM_CSR_WAC_HI.set_fid(4'h0, "MEM-SB");
  	HQM_CSR_WAC_HI.set_bar(4'h2, "MEM-SB");
      HQM_CSR_WAC_HI.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_CSR_WAC_HI.set_user_attribute("diag_reg", "0");
      HQM_CSR_WAC_HI.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_CSR_WAC_HI.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_CSR_WAC_HI:dont_test") ) HQM_CSR_WAC_HI.set_test_reg(1'b0);
      if (!add_reg( HQM_CSR_WAC_HI )) begin
        `sla_error(get_name(), ("Could not add register HQM_CSR_WAC_HI"));
      end
   HQM_CSR_WAC_HI.SAI_MASK.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_CSR_WAC_HI.SAI_MASK"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SIF_CTL";
    `endif
    SIF_CTL = hqm_sif_csr_bridge_SIF_CTL_reg::type_id::create("SIF_CTL", this);
    SIF_CTL.set_cfg(16'h0, 16'h0, 16'h0, 12'h0D0, 32, 32'b00000000000000000000000000000000);
    SIF_CTL.set_space_addr("MSG", 12'h0D0);
    SIF_CTL.set_space_addr("msg_bus_port", 'h21);
    SIF_CTL.set_space_addr("MEM-SB",8'hD0);
    SIF_CTL.set_space_addr("MEM", 12'h0D0);
      SIF_CTL.set_space("MEM");
      SIF_CTL.set_msg_opcode("MEM-SB");
      SIF_CTL.set_fid(4'h0, "MEM-SB");
  	SIF_CTL.set_bar(4'h2, "MEM-SB");
      SIF_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SIF_CTL.set_user_attribute("diag_reg", "0");
      SIF_CTL.set_user_attribute("HqmIsFeatureReg", "0");
      SIF_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SIF_CTL:dont_test") ) SIF_CTL.set_test_reg(1'b0);
      if (!add_reg( SIF_CTL )) begin
        `sla_error(get_name(), ("Could not add register SIF_CTL"));
      end
   SIF_CTL.SIF_CON_DLY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_CTL.SIF_CON_DLY"});
   SIF_CTL.IDLE_DLY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_CTL.IDLE_DLY"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SIF_VC_RXMAP";
    `endif
    SIF_VC_RXMAP = hqm_sif_csr_bridge_SIF_VC_RXMAP_reg::type_id::create("SIF_VC_RXMAP", this);
    SIF_VC_RXMAP.set_cfg(16'h0, 16'h0, 16'h0, 12'h0D4, 32, 32'b00000000000000000001001000000000);
    SIF_VC_RXMAP.set_space_addr("MSG", 12'h0D4);
    SIF_VC_RXMAP.set_space_addr("msg_bus_port", 'h21);
    SIF_VC_RXMAP.set_space_addr("MEM-SB",8'hD4);
    SIF_VC_RXMAP.set_space_addr("MEM", 12'h0D4);
      SIF_VC_RXMAP.set_space("MEM");
      SIF_VC_RXMAP.set_msg_opcode("MEM-SB");
      SIF_VC_RXMAP.set_fid(4'h0, "MEM-SB");
  	SIF_VC_RXMAP.set_bar(4'h2, "MEM-SB");
      SIF_VC_RXMAP.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SIF_VC_RXMAP.set_user_attribute("diag_reg", "0");
      SIF_VC_RXMAP.set_user_attribute("HqmIsFeatureReg", "0");
      SIF_VC_RXMAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SIF_VC_RXMAP:dont_test") ) SIF_VC_RXMAP.set_test_reg(1'b0);
      if (!add_reg( SIF_VC_RXMAP )) begin
        `sla_error(get_name(), ("Could not add register SIF_VC_RXMAP"));
      end
   SIF_VC_RXMAP.VC0_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC0_MAP"});
   SIF_VC_RXMAP.VC1_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC1_MAP"});
   SIF_VC_RXMAP.VC2_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC2_MAP"});
   SIF_VC_RXMAP.VC3_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC3_MAP"});
   SIF_VC_RXMAP.VC4_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC4_MAP"});
   SIF_VC_RXMAP.VC5_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC5_MAP"});
   SIF_VC_RXMAP.VC6_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC6_MAP"});
   SIF_VC_RXMAP.VC7_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_RXMAP.VC7_MAP"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SIF_VC_TXMAP";
    `endif
    SIF_VC_TXMAP = hqm_sif_csr_bridge_SIF_VC_TXMAP_reg::type_id::create("SIF_VC_TXMAP", this);
    SIF_VC_TXMAP.set_cfg(16'h0, 16'h0, 16'h0, 12'h0D8, 32, 32'b00000000000000000000001000110000);
    SIF_VC_TXMAP.set_space_addr("MSG", 12'h0D8);
    SIF_VC_TXMAP.set_space_addr("msg_bus_port", 'h21);
    SIF_VC_TXMAP.set_space_addr("MEM-SB",8'hD8);
    SIF_VC_TXMAP.set_space_addr("MEM", 12'h0D8);
      SIF_VC_TXMAP.set_space("MEM");
      SIF_VC_TXMAP.set_msg_opcode("MEM-SB");
      SIF_VC_TXMAP.set_fid(4'h0, "MEM-SB");
  	SIF_VC_TXMAP.set_bar(4'h2, "MEM-SB");
      SIF_VC_TXMAP.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SIF_VC_TXMAP.set_user_attribute("diag_reg", "0");
      SIF_VC_TXMAP.set_user_attribute("HqmIsFeatureReg", "0");
      SIF_VC_TXMAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SIF_VC_TXMAP:dont_test") ) SIF_VC_TXMAP.set_test_reg(1'b0);
      if (!add_reg( SIF_VC_TXMAP )) begin
        `sla_error(get_name(), ("Could not add register SIF_VC_TXMAP"));
      end
   SIF_VC_TXMAP.VC0_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC0_MAP"});
   SIF_VC_TXMAP.VC1_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC1_MAP"});
   SIF_VC_TXMAP.VC2_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC2_MAP"});
   SIF_VC_TXMAP.VC3_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC3_MAP"});
   SIF_VC_TXMAP.VC4_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC4_MAP"});
   SIF_VC_TXMAP.VC5_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC5_MAP"});
   SIF_VC_TXMAP.VC6_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC6_MAP"});
   SIF_VC_TXMAP.VC7_MAP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_VC_TXMAP.VC7_MAP"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DEVTLB_ATS_ERR";
    `endif
    DEVTLB_ATS_ERR = hqm_sif_csr_bridge_DEVTLB_ATS_ERR_reg::type_id::create("DEVTLB_ATS_ERR", this);
    DEVTLB_ATS_ERR.set_cfg(16'h0, 16'h0, 16'h0, 12'h0E0, 32, 32'b00000000000000000000000000000000);
    DEVTLB_ATS_ERR.set_space_addr("MSG", 12'h0E0);
    DEVTLB_ATS_ERR.set_space_addr("msg_bus_port", 'h21);
    DEVTLB_ATS_ERR.set_space_addr("MEM-SB",8'hE0);
    DEVTLB_ATS_ERR.set_space_addr("MEM", 12'h0E0);
      DEVTLB_ATS_ERR.set_space("MEM");
      DEVTLB_ATS_ERR.set_msg_opcode("MEM-SB");
      DEVTLB_ATS_ERR.set_fid(4'h0, "MEM-SB");
  	DEVTLB_ATS_ERR.set_bar(4'h2, "MEM-SB");
      DEVTLB_ATS_ERR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DEVTLB_ATS_ERR.set_user_attribute("diag_reg", "0");
      DEVTLB_ATS_ERR.set_user_attribute("HqmIsFeatureReg", "0");
      DEVTLB_ATS_ERR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DEVTLB_ATS_ERR:dont_test") ) DEVTLB_ATS_ERR.set_test_reg(1'b0);
      if (!add_reg( DEVTLB_ATS_ERR )) begin
        `sla_error(get_name(), ("Could not add register DEVTLB_ATS_ERR"));
      end
   DEVTLB_ATS_ERR.BAD_RESULT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_ATS_ERR.BAD_RESULT"});
   DEVTLB_ATS_ERR.HDRERROR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_ATS_ERR.HDRERROR"});
   DEVTLB_ATS_ERR.DPERROR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_ATS_ERR.DPERROR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SIF_ALARM_ERR";
    `endif
    SIF_ALARM_ERR = hqm_sif_csr_bridge_SIF_ALARM_ERR_reg::type_id::create("SIF_ALARM_ERR", this);
    SIF_ALARM_ERR.set_cfg(16'h0, 16'h0, 16'h0, 12'h0E4, 32, 32'b00000000000000000000000000000000);
    SIF_ALARM_ERR.set_space_addr("MSG", 12'h0E4);
    SIF_ALARM_ERR.set_space_addr("msg_bus_port", 'h21);
    SIF_ALARM_ERR.set_space_addr("MEM-SB",8'hE4);
    SIF_ALARM_ERR.set_space_addr("MEM", 12'h0E4);
      SIF_ALARM_ERR.set_space("MEM");
      SIF_ALARM_ERR.set_msg_opcode("MEM-SB");
      SIF_ALARM_ERR.set_fid(4'h0, "MEM-SB");
  	SIF_ALARM_ERR.set_bar(4'h2, "MEM-SB");
      SIF_ALARM_ERR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SIF_ALARM_ERR.set_user_attribute("diag_reg", "0");
      SIF_ALARM_ERR.set_user_attribute("HqmIsFeatureReg", "0");
      SIF_ALARM_ERR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SIF_ALARM_ERR:dont_test") ) SIF_ALARM_ERR.set_test_reg(1'b0);
      if (!add_reg( SIF_ALARM_ERR )) begin
        `sla_error(get_name(), ("Could not add register SIF_ALARM_ERR"));
      end
   SIF_ALARM_ERR.TIMEOUT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.TIMEOUT"});
   SIF_ALARM_ERR.SB_EP_PARITY_ERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.SB_EP_PARITY_ERR"});
   SIF_ALARM_ERR.FIFO_UNDERFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.FIFO_UNDERFLOW"});
   SIF_ALARM_ERR.FIFO_OVERFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.FIFO_OVERFLOW"});
   SIF_ALARM_ERR.RI_PARITY_ERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.RI_PARITY_ERR"});
   SIF_ALARM_ERR.SIF_PARITY_ERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.SIF_PARITY_ERR"});
   SIF_ALARM_ERR.CFGM_TARGET_ERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.CFGM_TARGET_ERR"});
   SIF_ALARM_ERR.RF_IPAR_ERROR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.RF_IPAR_ERROR"});
   SIF_ALARM_ERR.CPL_ERROR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.CPL_ERROR"});
   SIF_ALARM_ERR.DEVTLB_ATS_ERROR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_ALARM_ERR.DEVTLB_ATS_ERROR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_PARITY_ERR";
    `endif
    RI_PARITY_ERR = hqm_sif_csr_bridge_RI_PARITY_ERR_reg::type_id::create("RI_PARITY_ERR", this);
    RI_PARITY_ERR.set_cfg(16'h0, 16'h0, 16'h0, 12'h0E8, 32, 32'b00000000000000000000000000000000);
    RI_PARITY_ERR.set_space_addr("MSG", 12'h0E8);
    RI_PARITY_ERR.set_space_addr("msg_bus_port", 'h21);
    RI_PARITY_ERR.set_space_addr("MEM-SB",8'hE8);
    RI_PARITY_ERR.set_space_addr("MEM", 12'h0E8);
      RI_PARITY_ERR.set_space("MEM");
      RI_PARITY_ERR.set_msg_opcode("MEM-SB");
      RI_PARITY_ERR.set_fid(4'h0, "MEM-SB");
  	RI_PARITY_ERR.set_bar(4'h2, "MEM-SB");
      RI_PARITY_ERR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_PARITY_ERR.set_user_attribute("diag_reg", "0");
      RI_PARITY_ERR.set_user_attribute("HqmIsFeatureReg", "0");
      RI_PARITY_ERR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("RI_PARITY_ERR:dont_test") ) RI_PARITY_ERR.set_test_reg(1'b0);
      if (!add_reg( RI_PARITY_ERR )) begin
        `sla_error(get_name(), ("Could not add register RI_PARITY_ERR"));
      end
   RI_PARITY_ERR.NPD_FIFO_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.NPD_FIFO_PERR"});
   RI_PARITY_ERR.NPH_FIFO_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.NPH_FIFO_PERR"});
   RI_PARITY_ERR.NPH_FIFO_SCREAM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.NPH_FIFO_SCREAM"});
   RI_PARITY_ERR.PD_FIFO_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.PD_FIFO_PERR"});
   RI_PARITY_ERR.PH_FIFO_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.PH_FIFO_PERR"});
   RI_PARITY_ERR.PH_FIFO_SCREAM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.PH_FIFO_SCREAM"});
   RI_PARITY_ERR.HCW_DATA_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.HCW_DATA_PERR"});
   RI_PARITY_ERR.CBD_DATA_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.CBD_DATA_PERR"});
   RI_PARITY_ERR.CBD_HDR_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PARITY_ERR.CBD_HDR_PERR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SIF_PARITY_ERR";
    `endif
    SIF_PARITY_ERR = hqm_sif_csr_bridge_SIF_PARITY_ERR_reg::type_id::create("SIF_PARITY_ERR", this);
    SIF_PARITY_ERR.set_cfg(16'h0, 16'h0, 16'h0, 12'h0EC, 32, 32'b00000000000000000000000000000000);
    SIF_PARITY_ERR.set_space_addr("MSG", 12'h0EC);
    SIF_PARITY_ERR.set_space_addr("msg_bus_port", 'h21);
    SIF_PARITY_ERR.set_space_addr("MEM-SB",8'hEC);
    SIF_PARITY_ERR.set_space_addr("MEM", 12'h0EC);
      SIF_PARITY_ERR.set_space("MEM");
      SIF_PARITY_ERR.set_msg_opcode("MEM-SB");
      SIF_PARITY_ERR.set_fid(4'h0, "MEM-SB");
  	SIF_PARITY_ERR.set_bar(4'h2, "MEM-SB");
      SIF_PARITY_ERR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SIF_PARITY_ERR.set_user_attribute("diag_reg", "0");
      SIF_PARITY_ERR.set_user_attribute("HqmIsFeatureReg", "0");
      SIF_PARITY_ERR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SIF_PARITY_ERR:dont_test") ) SIF_PARITY_ERR.set_test_reg(1'b0);
      if (!add_reg( SIF_PARITY_ERR )) begin
        `sla_error(get_name(), ("Could not add register SIF_PARITY_ERR"));
      end
   SIF_PARITY_ERR.TLB_TAG_4K_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_TAG_4K_PERR"});
   SIF_PARITY_ERR.TLB_TAG_2M_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_TAG_2M_PERR"});
   SIF_PARITY_ERR.TLB_TAG_1G_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_TAG_1G_PERR"});
   SIF_PARITY_ERR.TLB_DATA_4K_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_DATA_4K_PERR"});
   SIF_PARITY_ERR.TLB_DATA_2M_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_DATA_2M_PERR"});
   SIF_PARITY_ERR.TLB_DATA_1G_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.TLB_DATA_1G_PERR"});
   SIF_PARITY_ERR.IBCPL_HDR_FIFO_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.IBCPL_HDR_FIFO_PERR"});
   SIF_PARITY_ERR.IBCPL_DATA_FIFO_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.IBCPL_DATA_FIFO_PERR"});
   SIF_PARITY_ERR.SCRBD_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.SCRBD_PERR"});
   SIF_PARITY_ERR.GPSB_PERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_PARITY_ERR.GPSB_PERR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_CTL";
    `endif
    HQM_SIF_CNT_CTL = hqm_sif_csr_bridge_HQM_SIF_CNT_CTL_reg::type_id::create("HQM_SIF_CNT_CTL", this);
    HQM_SIF_CNT_CTL.set_cfg(16'h0, 16'h0, 16'h0, 12'h0F0, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_CTL.set_space_addr("MSG", 12'h0F0);
    HQM_SIF_CNT_CTL.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_CTL.set_space_addr("MEM-SB",8'hF0);
    HQM_SIF_CNT_CTL.set_space_addr("MEM", 12'h0F0);
      HQM_SIF_CNT_CTL.set_space("MEM");
      HQM_SIF_CNT_CTL.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_CTL.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_CTL.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_CTL.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_CTL.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HQM_SIF_CNT_CTL:dont_test") ) HQM_SIF_CNT_CTL.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_CTL )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_CTL"));
      end
   HQM_SIF_CNT_CTL.CNT_CLR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_CTL.CNT_CLR"});
   HQM_SIF_CNT_CTL.CNT_CLRV.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_CTL.CNT_CLRV"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DIR_CQ2TC_MAP";
    `endif
    DIR_CQ2TC_MAP = hqm_sif_csr_bridge_DIR_CQ2TC_MAP_reg::type_id::create("DIR_CQ2TC_MAP", this);
    DIR_CQ2TC_MAP.set_cfg(16'h0, 16'h0, 16'h0, 12'h0F4, 32, 32'b00000000000000000000000000000000);
    DIR_CQ2TC_MAP.set_space_addr("MSG", 12'h0F4);
    DIR_CQ2TC_MAP.set_space_addr("msg_bus_port", 'h21);
    DIR_CQ2TC_MAP.set_space_addr("MEM-SB",8'hF4);
    DIR_CQ2TC_MAP.set_space_addr("MEM", 12'h0F4);
      DIR_CQ2TC_MAP.set_space("MEM");
      DIR_CQ2TC_MAP.set_msg_opcode("MEM-SB");
      DIR_CQ2TC_MAP.set_fid(4'h0, "MEM-SB");
  	DIR_CQ2TC_MAP.set_bar(4'h2, "MEM-SB");
      DIR_CQ2TC_MAP.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DIR_CQ2TC_MAP.set_user_attribute("diag_reg", "0");
      DIR_CQ2TC_MAP.set_user_attribute("HqmIsFeatureReg", "0");
      DIR_CQ2TC_MAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DIR_CQ2TC_MAP:dont_test") ) DIR_CQ2TC_MAP.set_test_reg(1'b0);
      if (!add_reg( DIR_CQ2TC_MAP )) begin
        `sla_error(get_name(), ("Could not add register DIR_CQ2TC_MAP"));
      end
   DIR_CQ2TC_MAP.DIR0_TC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DIR_CQ2TC_MAP.DIR0_TC"});
   DIR_CQ2TC_MAP.DIR1_TC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DIR_CQ2TC_MAP.DIR1_TC"});
   DIR_CQ2TC_MAP.DIR2_TC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DIR_CQ2TC_MAP.DIR2_TC"});
   DIR_CQ2TC_MAP.DIR3_TC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DIR_CQ2TC_MAP.DIR3_TC"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LDB_CQ2TC_MAP";
    `endif
    LDB_CQ2TC_MAP = hqm_sif_csr_bridge_LDB_CQ2TC_MAP_reg::type_id::create("LDB_CQ2TC_MAP", this);
    LDB_CQ2TC_MAP.set_cfg(16'h0, 16'h0, 16'h0, 12'h0F8, 32, 32'b00000000000000000000000000000000);
    LDB_CQ2TC_MAP.set_space_addr("MSG", 12'h0F8);
    LDB_CQ2TC_MAP.set_space_addr("msg_bus_port", 'h21);
    LDB_CQ2TC_MAP.set_space_addr("MEM-SB",8'hF8);
    LDB_CQ2TC_MAP.set_space_addr("MEM", 12'h0F8);
      LDB_CQ2TC_MAP.set_space("MEM");
      LDB_CQ2TC_MAP.set_msg_opcode("MEM-SB");
      LDB_CQ2TC_MAP.set_fid(4'h0, "MEM-SB");
  	LDB_CQ2TC_MAP.set_bar(4'h2, "MEM-SB");
      LDB_CQ2TC_MAP.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LDB_CQ2TC_MAP.set_user_attribute("diag_reg", "0");
      LDB_CQ2TC_MAP.set_user_attribute("HqmIsFeatureReg", "0");
      LDB_CQ2TC_MAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("LDB_CQ2TC_MAP:dont_test") ) LDB_CQ2TC_MAP.set_test_reg(1'b0);
      if (!add_reg( LDB_CQ2TC_MAP )) begin
        `sla_error(get_name(), ("Could not add register LDB_CQ2TC_MAP"));
      end
   LDB_CQ2TC_MAP.LDB0_TC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LDB_CQ2TC_MAP.LDB0_TC"});
   LDB_CQ2TC_MAP.LDB1_TC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LDB_CQ2TC_MAP.LDB1_TC"});
   LDB_CQ2TC_MAP.LDB2_TC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LDB_CQ2TC_MAP.LDB2_TC"});
   LDB_CQ2TC_MAP.LDB3_TC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LDB_CQ2TC_MAP.LDB3_TC"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "INT2TC_MAP";
    `endif
    INT2TC_MAP = hqm_sif_csr_bridge_INT2TC_MAP_reg::type_id::create("INT2TC_MAP", this);
    INT2TC_MAP.set_cfg(16'h0, 16'h0, 16'h0, 12'h0FC, 32, 32'b00000000000000000000000000000000);
    INT2TC_MAP.set_space_addr("MSG", 12'h0FC);
    INT2TC_MAP.set_space_addr("msg_bus_port", 'h21);
    INT2TC_MAP.set_space_addr("MEM-SB",8'hFC);
    INT2TC_MAP.set_space_addr("MEM", 12'h0FC);
      INT2TC_MAP.set_space("MEM");
      INT2TC_MAP.set_msg_opcode("MEM-SB");
      INT2TC_MAP.set_fid(4'h0, "MEM-SB");
  	INT2TC_MAP.set_bar(4'h2, "MEM-SB");
      INT2TC_MAP.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      INT2TC_MAP.set_user_attribute("diag_reg", "0");
      INT2TC_MAP.set_user_attribute("HqmIsFeatureReg", "0");
      INT2TC_MAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("INT2TC_MAP:dont_test") ) INT2TC_MAP.set_test_reg(1'b0);
      if (!add_reg( INT2TC_MAP )) begin
        `sla_error(get_name(), ("Could not add register INT2TC_MAP"));
      end
   INT2TC_MAP.INT_TC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.INT2TC_MAP.INT_TC"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_VERSION";
    `endif
    CFG_UNIT_VERSION = hqm_sif_csr_bridge_CFG_UNIT_VERSION_reg::type_id::create("CFG_UNIT_VERSION", this);
    CFG_UNIT_VERSION.set_cfg(16'h0, 16'h0, 16'h0, 12'h200, 32, 32'b00000011000000000000000000000000);
    CFG_UNIT_VERSION.set_space_addr("MSG", 12'h200);
    CFG_UNIT_VERSION.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_VERSION.set_space_addr("MEM-SB",12'h200);
    CFG_UNIT_VERSION.set_space_addr("MEM", 12'h200);
      CFG_UNIT_VERSION.set_space("MEM");
      CFG_UNIT_VERSION.set_msg_opcode("MEM-SB");
      CFG_UNIT_VERSION.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_VERSION.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_VERSION.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_VERSION.set_user_attribute("diag_reg", "0");
      CFG_UNIT_VERSION.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_UNIT_VERSION.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_VERSION.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_VERSION:dont_test") ) CFG_UNIT_VERSION.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_VERSION )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_VERSION"));
      end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_0";
    `endif
    HQM_SIF_CNT_0 = hqm_sif_csr_bridge_HQM_SIF_CNT_0_reg::type_id::create("HQM_SIF_CNT_0", this);
    HQM_SIF_CNT_0.set_cfg(16'h0, 16'h0, 16'h0, 16'h1000, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_0.set_space_addr("MSG", 16'h1000);
    HQM_SIF_CNT_0.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_0.set_space_addr("MEM-SB",16'h1000);
    HQM_SIF_CNT_0.set_space_addr("MEM", 16'h1000);
      HQM_SIF_CNT_0.set_space("MEM");
      HQM_SIF_CNT_0.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_0.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_0.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_0.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_0.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_0.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_0.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_0:dont_test") ) HQM_SIF_CNT_0.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_0 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_0"));
      end
   HQM_SIF_CNT_0.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_0.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_1";
    `endif
    HQM_SIF_CNT_1 = hqm_sif_csr_bridge_HQM_SIF_CNT_1_reg::type_id::create("HQM_SIF_CNT_1", this);
    HQM_SIF_CNT_1.set_cfg(16'h0, 16'h0, 16'h0, 16'h1004, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_1.set_space_addr("MSG", 16'h1004);
    HQM_SIF_CNT_1.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_1.set_space_addr("MEM-SB",16'h1004);
    HQM_SIF_CNT_1.set_space_addr("MEM", 16'h1004);
      HQM_SIF_CNT_1.set_space("MEM");
      HQM_SIF_CNT_1.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_1.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_1.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_1.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_1.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_1.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_1.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_1:dont_test") ) HQM_SIF_CNT_1.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_1 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_1"));
      end
   HQM_SIF_CNT_1.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_1.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_2";
    `endif
    HQM_SIF_CNT_2 = hqm_sif_csr_bridge_HQM_SIF_CNT_2_reg::type_id::create("HQM_SIF_CNT_2", this);
    HQM_SIF_CNT_2.set_cfg(16'h0, 16'h0, 16'h0, 16'h1008, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_2.set_space_addr("MSG", 16'h1008);
    HQM_SIF_CNT_2.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_2.set_space_addr("MEM-SB",16'h1008);
    HQM_SIF_CNT_2.set_space_addr("MEM", 16'h1008);
      HQM_SIF_CNT_2.set_space("MEM");
      HQM_SIF_CNT_2.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_2.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_2.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_2.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_2.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_2.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_2.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_2:dont_test") ) HQM_SIF_CNT_2.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_2 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_2"));
      end
   HQM_SIF_CNT_2.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_2.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_3";
    `endif
    HQM_SIF_CNT_3 = hqm_sif_csr_bridge_HQM_SIF_CNT_3_reg::type_id::create("HQM_SIF_CNT_3", this);
    HQM_SIF_CNT_3.set_cfg(16'h0, 16'h0, 16'h0, 16'h100C, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_3.set_space_addr("MSG", 16'h100C);
    HQM_SIF_CNT_3.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_3.set_space_addr("MEM-SB",16'h100C);
    HQM_SIF_CNT_3.set_space_addr("MEM", 16'h100C);
      HQM_SIF_CNT_3.set_space("MEM");
      HQM_SIF_CNT_3.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_3.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_3.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_3.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_3.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_3.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_3.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_3.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_3:dont_test") ) HQM_SIF_CNT_3.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_3 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_3"));
      end
   HQM_SIF_CNT_3.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_3.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_4";
    `endif
    HQM_SIF_CNT_4 = hqm_sif_csr_bridge_HQM_SIF_CNT_4_reg::type_id::create("HQM_SIF_CNT_4", this);
    HQM_SIF_CNT_4.set_cfg(16'h0, 16'h0, 16'h0, 16'h1010, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_4.set_space_addr("MSG", 16'h1010);
    HQM_SIF_CNT_4.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_4.set_space_addr("MEM-SB",16'h1010);
    HQM_SIF_CNT_4.set_space_addr("MEM", 16'h1010);
      HQM_SIF_CNT_4.set_space("MEM");
      HQM_SIF_CNT_4.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_4.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_4.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_4.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_4.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_4.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_4.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_4.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_4:dont_test") ) HQM_SIF_CNT_4.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_4 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_4"));
      end
   HQM_SIF_CNT_4.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_4.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_5";
    `endif
    HQM_SIF_CNT_5 = hqm_sif_csr_bridge_HQM_SIF_CNT_5_reg::type_id::create("HQM_SIF_CNT_5", this);
    HQM_SIF_CNT_5.set_cfg(16'h0, 16'h0, 16'h0, 16'h1014, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_5.set_space_addr("MSG", 16'h1014);
    HQM_SIF_CNT_5.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_5.set_space_addr("MEM-SB",16'h1014);
    HQM_SIF_CNT_5.set_space_addr("MEM", 16'h1014);
      HQM_SIF_CNT_5.set_space("MEM");
      HQM_SIF_CNT_5.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_5.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_5.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_5.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_5.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_5.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_5.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_5.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_5:dont_test") ) HQM_SIF_CNT_5.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_5 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_5"));
      end
   HQM_SIF_CNT_5.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_5.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_6";
    `endif
    HQM_SIF_CNT_6 = hqm_sif_csr_bridge_HQM_SIF_CNT_6_reg::type_id::create("HQM_SIF_CNT_6", this);
    HQM_SIF_CNT_6.set_cfg(16'h0, 16'h0, 16'h0, 16'h1018, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_6.set_space_addr("MSG", 16'h1018);
    HQM_SIF_CNT_6.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_6.set_space_addr("MEM-SB",16'h1018);
    HQM_SIF_CNT_6.set_space_addr("MEM", 16'h1018);
      HQM_SIF_CNT_6.set_space("MEM");
      HQM_SIF_CNT_6.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_6.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_6.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_6.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_6.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_6.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_6.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_6.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_6:dont_test") ) HQM_SIF_CNT_6.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_6 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_6"));
      end
   HQM_SIF_CNT_6.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_6.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_7";
    `endif
    HQM_SIF_CNT_7 = hqm_sif_csr_bridge_HQM_SIF_CNT_7_reg::type_id::create("HQM_SIF_CNT_7", this);
    HQM_SIF_CNT_7.set_cfg(16'h0, 16'h0, 16'h0, 16'h101C, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_7.set_space_addr("MSG", 16'h101C);
    HQM_SIF_CNT_7.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_7.set_space_addr("MEM-SB",16'h101C);
    HQM_SIF_CNT_7.set_space_addr("MEM", 16'h101C);
      HQM_SIF_CNT_7.set_space("MEM");
      HQM_SIF_CNT_7.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_7.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_7.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_7.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_7.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_7.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_7.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_7.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_7:dont_test") ) HQM_SIF_CNT_7.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_7 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_7"));
      end
   HQM_SIF_CNT_7.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_7.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_8";
    `endif
    HQM_SIF_CNT_8 = hqm_sif_csr_bridge_HQM_SIF_CNT_8_reg::type_id::create("HQM_SIF_CNT_8", this);
    HQM_SIF_CNT_8.set_cfg(16'h0, 16'h0, 16'h0, 16'h1020, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_8.set_space_addr("MSG", 16'h1020);
    HQM_SIF_CNT_8.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_8.set_space_addr("MEM-SB",16'h1020);
    HQM_SIF_CNT_8.set_space_addr("MEM", 16'h1020);
      HQM_SIF_CNT_8.set_space("MEM");
      HQM_SIF_CNT_8.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_8.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_8.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_8.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_8.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_8.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_8.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_8.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_8:dont_test") ) HQM_SIF_CNT_8.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_8 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_8"));
      end
   HQM_SIF_CNT_8.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_8.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_9";
    `endif
    HQM_SIF_CNT_9 = hqm_sif_csr_bridge_HQM_SIF_CNT_9_reg::type_id::create("HQM_SIF_CNT_9", this);
    HQM_SIF_CNT_9.set_cfg(16'h0, 16'h0, 16'h0, 16'h1024, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_9.set_space_addr("MSG", 16'h1024);
    HQM_SIF_CNT_9.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_9.set_space_addr("MEM-SB",16'h1024);
    HQM_SIF_CNT_9.set_space_addr("MEM", 16'h1024);
      HQM_SIF_CNT_9.set_space("MEM");
      HQM_SIF_CNT_9.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_9.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_9.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_9.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_9.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_9.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_9.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_9.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_9:dont_test") ) HQM_SIF_CNT_9.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_9 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_9"));
      end
   HQM_SIF_CNT_9.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_9.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_10";
    `endif
    HQM_SIF_CNT_10 = hqm_sif_csr_bridge_HQM_SIF_CNT_10_reg::type_id::create("HQM_SIF_CNT_10", this);
    HQM_SIF_CNT_10.set_cfg(16'h0, 16'h0, 16'h0, 16'h1028, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_10.set_space_addr("MSG", 16'h1028);
    HQM_SIF_CNT_10.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_10.set_space_addr("MEM-SB",16'h1028);
    HQM_SIF_CNT_10.set_space_addr("MEM", 16'h1028);
      HQM_SIF_CNT_10.set_space("MEM");
      HQM_SIF_CNT_10.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_10.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_10.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_10.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_10.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_10.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_10.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_10.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_10:dont_test") ) HQM_SIF_CNT_10.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_10 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_10"));
      end
   HQM_SIF_CNT_10.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_10.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_SIF_CNT_11";
    `endif
    HQM_SIF_CNT_11 = hqm_sif_csr_bridge_HQM_SIF_CNT_11_reg::type_id::create("HQM_SIF_CNT_11", this);
    HQM_SIF_CNT_11.set_cfg(16'h0, 16'h0, 16'h0, 16'h102C, 32, 32'b00000000000000000000000000000000);
    HQM_SIF_CNT_11.set_space_addr("MSG", 16'h102C);
    HQM_SIF_CNT_11.set_space_addr("msg_bus_port", 'h21);
    HQM_SIF_CNT_11.set_space_addr("MEM-SB",16'h102C);
    HQM_SIF_CNT_11.set_space_addr("MEM", 16'h102C);
      HQM_SIF_CNT_11.set_space("MEM");
      HQM_SIF_CNT_11.set_msg_opcode("MEM-SB");
      HQM_SIF_CNT_11.set_fid(4'h0, "MEM-SB");
  	HQM_SIF_CNT_11.set_bar(4'h2, "MEM-SB");
      HQM_SIF_CNT_11.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_SIF_CNT_11.set_user_attribute("diag_reg", "0");
      HQM_SIF_CNT_11.set_user_attribute("HqmIsFeatureReg", "0");
      HQM_SIF_CNT_11.set_user_attribute("SubnetPortID", "8'h00");
      HQM_SIF_CNT_11.set_test_reg(0);
      if ( $test$plusargs("HQM_SIF_CNT_11:dont_test") ) HQM_SIF_CNT_11.set_test_reg(1'b0);
      if (!add_reg( HQM_SIF_CNT_11 )) begin
        `sla_error(get_name(), ("Could not add register HQM_SIF_CNT_11"));
      end
   HQM_SIF_CNT_11.CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_SIF_CNT_11.CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "OBCPL_AFULL_AGITATE_CONTROL";
    `endif
    OBCPL_AFULL_AGITATE_CONTROL = hqm_sif_csr_bridge_OBCPL_AFULL_AGITATE_CONTROL_reg::type_id::create("OBCPL_AFULL_AGITATE_CONTROL", this);
    OBCPL_AFULL_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8000014, 32, 32'b00000000000000000000000000000000);
    OBCPL_AFULL_AGITATE_CONTROL.set_space_addr("MSG", 28'h8000014);
    OBCPL_AFULL_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    OBCPL_AFULL_AGITATE_CONTROL.set_space_addr("MEM-SB",28'h8000014);
    OBCPL_AFULL_AGITATE_CONTROL.set_space_addr("MEM", 28'h8000014);
      OBCPL_AFULL_AGITATE_CONTROL.set_space("MEM");
      OBCPL_AFULL_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      OBCPL_AFULL_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	OBCPL_AFULL_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      OBCPL_AFULL_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      OBCPL_AFULL_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      OBCPL_AFULL_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      OBCPL_AFULL_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      OBCPL_AFULL_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("OBCPL_AFULL_AGITATE_CONTROL:dont_test") ) OBCPL_AFULL_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( OBCPL_AFULL_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register OBCPL_AFULL_AGITATE_CONTROL"));
      end
   OBCPL_AFULL_AGITATE_CONTROL.MODE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_AFULL_AGITATE_CONTROL.MODE"});
   OBCPL_AFULL_AGITATE_CONTROL.CTRL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_AFULL_AGITATE_CONTROL.CTRL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PRIM_CDC_CTL";
    `endif
    PRIM_CDC_CTL = hqm_sif_csr_bridge_PRIM_CDC_CTL_reg::type_id::create("PRIM_CDC_CTL", this);
    PRIM_CDC_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001000, 32, 32'b00000000000000000100010001000100);
    PRIM_CDC_CTL.set_space_addr("MSG", 28'h8001000);
    PRIM_CDC_CTL.set_space_addr("msg_bus_port", 'h21);
    PRIM_CDC_CTL.set_space_addr("MEM-SB",28'h8001000);
    PRIM_CDC_CTL.set_space_addr("MEM", 28'h8001000);
      PRIM_CDC_CTL.set_space("MEM");
      PRIM_CDC_CTL.set_msg_opcode("MEM-SB");
      PRIM_CDC_CTL.set_fid(4'h0, "MEM-SB");
  	PRIM_CDC_CTL.set_bar(4'h2, "MEM-SB");
      PRIM_CDC_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PRIM_CDC_CTL.set_user_attribute("diag_reg", "0");
      PRIM_CDC_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      PRIM_CDC_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PRIM_CDC_CTL:dont_test") ) PRIM_CDC_CTL.set_test_reg(1'b0);
      if (!add_reg( PRIM_CDC_CTL )) begin
        `sla_error(get_name(), ("Could not add register PRIM_CDC_CTL"));
      end
   PRIM_CDC_CTL.CLKREQ_SYNCOFF_HOLDOFF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.CLKREQ_SYNCOFF_HOLDOFF"});
   PRIM_CDC_CTL.CLKREQ_OFF_HOLDOFF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.CLKREQ_OFF_HOLDOFF"});
   PRIM_CDC_CTL.PWRGATE_HOLDOFF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.PWRGATE_HOLDOFF"});
   PRIM_CDC_CTL.CLKGATE_HOLDOFF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.CLKGATE_HOLDOFF"});
   PRIM_CDC_CTL.CLKREQ_CTL_DISABLED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.CLKREQ_CTL_DISABLED"});
   PRIM_CDC_CTL.CLKGATE_DISABLED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PRIM_CDC_CTL.CLKGATE_DISABLED"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SIDE_CDC_CTL";
    `endif
    SIDE_CDC_CTL = hqm_sif_csr_bridge_SIDE_CDC_CTL_reg::type_id::create("SIDE_CDC_CTL", this);
    SIDE_CDC_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001004, 32, 32'b00000000000000000100010001000100);
    SIDE_CDC_CTL.set_space_addr("MSG", 28'h8001004);
    SIDE_CDC_CTL.set_space_addr("msg_bus_port", 'h21);
    SIDE_CDC_CTL.set_space_addr("MEM-SB",28'h8001004);
    SIDE_CDC_CTL.set_space_addr("MEM", 28'h8001004);
      SIDE_CDC_CTL.set_space("MEM");
      SIDE_CDC_CTL.set_msg_opcode("MEM-SB");
      SIDE_CDC_CTL.set_fid(4'h0, "MEM-SB");
  	SIDE_CDC_CTL.set_bar(4'h2, "MEM-SB");
      SIDE_CDC_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SIDE_CDC_CTL.set_user_attribute("diag_reg", "0");
      SIDE_CDC_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      SIDE_CDC_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SIDE_CDC_CTL:dont_test") ) SIDE_CDC_CTL.set_test_reg(1'b0);
      if (!add_reg( SIDE_CDC_CTL )) begin
        `sla_error(get_name(), ("Could not add register SIDE_CDC_CTL"));
      end
   SIDE_CDC_CTL.CLKREQ_SYNCOFF_HOLDOFF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.CLKREQ_SYNCOFF_HOLDOFF"});
   SIDE_CDC_CTL.CLKREQ_OFF_HOLDOFF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.CLKREQ_OFF_HOLDOFF"});
   SIDE_CDC_CTL.PWRGATE_HOLDOFF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.PWRGATE_HOLDOFF"});
   SIDE_CDC_CTL.CLKGATE_HOLDOFF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.CLKGATE_HOLDOFF"});
   SIDE_CDC_CTL.CLKREQ_CTL_DISABLED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.CLKREQ_CTL_DISABLED"});
   SIDE_CDC_CTL.CLKGATE_DISABLED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIDE_CDC_CTL.CLKGATE_DISABLED"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IOSFP_CGCTL";
    `endif
    IOSFP_CGCTL = hqm_sif_csr_bridge_IOSFP_CGCTL_reg::type_id::create("IOSFP_CGCTL", this);
    IOSFP_CGCTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001008, 32, 32'b00000000000000000000000100010000);
    IOSFP_CGCTL.set_space_addr("MSG", 28'h8001008);
    IOSFP_CGCTL.set_space_addr("msg_bus_port", 'h21);
    IOSFP_CGCTL.set_space_addr("MEM-SB",28'h8001008);
    IOSFP_CGCTL.set_space_addr("MEM", 28'h8001008);
      IOSFP_CGCTL.set_space("MEM");
      IOSFP_CGCTL.set_msg_opcode("MEM-SB");
      IOSFP_CGCTL.set_fid(4'h0, "MEM-SB");
  	IOSFP_CGCTL.set_bar(4'h2, "MEM-SB");
      IOSFP_CGCTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IOSFP_CGCTL.set_user_attribute("diag_reg", "0");
      IOSFP_CGCTL.set_user_attribute("HqmIsFeatureReg", "1");
      IOSFP_CGCTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("IOSFP_CGCTL:dont_test") ) IOSFP_CGCTL.set_test_reg(1'b0);
      if (!add_reg( IOSFP_CGCTL )) begin
        `sla_error(get_name(), ("Could not add register IOSFP_CGCTL"));
      end
   IOSFP_CGCTL.IDLE_COUNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IOSFP_CGCTL.IDLE_COUNT"});
   IOSFP_CGCTL.CLKGATE_ENABLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IOSFP_CGCTL.CLKGATE_ENABLE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IOSFS_CGCTL";
    `endif
    IOSFS_CGCTL = hqm_sif_csr_bridge_IOSFS_CGCTL_reg::type_id::create("IOSFS_CGCTL", this);
    IOSFS_CGCTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h800100C, 32, 32'b00000000000000000000000100010000);
    IOSFS_CGCTL.set_space_addr("MSG", 28'h800100C);
    IOSFS_CGCTL.set_space_addr("msg_bus_port", 'h21);
    IOSFS_CGCTL.set_space_addr("MEM-SB",28'h800100C);
    IOSFS_CGCTL.set_space_addr("MEM", 28'h800100C);
      IOSFS_CGCTL.set_space("MEM");
      IOSFS_CGCTL.set_msg_opcode("MEM-SB");
      IOSFS_CGCTL.set_fid(4'h0, "MEM-SB");
  	IOSFS_CGCTL.set_bar(4'h2, "MEM-SB");
      IOSFS_CGCTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IOSFS_CGCTL.set_user_attribute("diag_reg", "0");
      IOSFS_CGCTL.set_user_attribute("HqmIsFeatureReg", "1");
      IOSFS_CGCTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("IOSFS_CGCTL:dont_test") ) IOSFS_CGCTL.set_test_reg(1'b0);
      if (!add_reg( IOSFS_CGCTL )) begin
        `sla_error(get_name(), ("Could not add register IOSFS_CGCTL"));
      end
   IOSFS_CGCTL.IDLE_COUNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IOSFS_CGCTL.IDLE_COUNT"});
   IOSFS_CGCTL.CLKGATE_ENABLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IOSFS_CGCTL.CLKGATE_ENABLE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PARITY_CTL";
    `endif
    PARITY_CTL = hqm_sif_csr_bridge_PARITY_CTL_reg::type_id::create("PARITY_CTL", this);
    PARITY_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001010, 32, 32'b00000000000000000000000000000000);
    PARITY_CTL.set_space_addr("MSG", 28'h8001010);
    PARITY_CTL.set_space_addr("msg_bus_port", 'h21);
    PARITY_CTL.set_space_addr("MEM-SB",28'h8001010);
    PARITY_CTL.set_space_addr("MEM", 28'h8001010);
      PARITY_CTL.set_space("MEM");
      PARITY_CTL.set_msg_opcode("MEM-SB");
      PARITY_CTL.set_fid(4'h0, "MEM-SB");
  	PARITY_CTL.set_bar(4'h2, "MEM-SB");
      PARITY_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      PARITY_CTL.set_user_attribute("diag_reg", "0");
      PARITY_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      PARITY_CTL.set_user_attribute("SubnetPortID", "8'h00");
      PARITY_CTL.set_test_reg(0);
      if ( $test$plusargs("PARITY_CTL:dont_test") ) PARITY_CTL.set_test_reg(1'b0);
      if (!add_reg( PARITY_CTL )) begin
        `sla_error(get_name(), ("Could not add register PARITY_CTL"));
      end
   PARITY_CTL.SIFP_PAR_OFF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PARITY_CTL.SIFP_PAR_OFF"});
   PARITY_CTL.MSTR_PAR_OFF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PARITY_CTL.MSTR_PAR_OFF"});
   PARITY_CTL.RI_PAR_OFF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.PARITY_CTL.RI_PAR_OFF"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_MASTER_TIMEOUT";
    `endif
    CFG_MASTER_TIMEOUT = hqm_sif_csr_bridge_CFG_MASTER_TIMEOUT_reg::type_id::create("CFG_MASTER_TIMEOUT", this);
    CFG_MASTER_TIMEOUT.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001020, 32, 32'b10000000000000000000000000010101);
    CFG_MASTER_TIMEOUT.set_space_addr("MSG", 28'h8001020);
    CFG_MASTER_TIMEOUT.set_space_addr("msg_bus_port", 'h21);
    CFG_MASTER_TIMEOUT.set_space_addr("MEM-SB",28'h8001020);
    CFG_MASTER_TIMEOUT.set_space_addr("MEM", 28'h8001020);
      CFG_MASTER_TIMEOUT.set_space("MEM");
      CFG_MASTER_TIMEOUT.set_msg_opcode("MEM-SB");
      CFG_MASTER_TIMEOUT.set_fid(4'h0, "MEM-SB");
  	CFG_MASTER_TIMEOUT.set_bar(4'h2, "MEM-SB");
      CFG_MASTER_TIMEOUT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_MASTER_TIMEOUT.set_user_attribute("diag_reg", "0");
      CFG_MASTER_TIMEOUT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_MASTER_TIMEOUT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_MASTER_TIMEOUT:dont_test") ) CFG_MASTER_TIMEOUT.set_test_reg(1'b0);
      if (!add_reg( CFG_MASTER_TIMEOUT )) begin
        `sla_error(get_name(), ("Could not add register CFG_MASTER_TIMEOUT"));
      end
   CFG_MASTER_TIMEOUT.TIMEOUT_PWR2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_MASTER_TIMEOUT.TIMEOUT_PWR2"});
   CFG_MASTER_TIMEOUT.TIMEOUT_ENABLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_MASTER_TIMEOUT.TIMEOUT_ENABLE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MMIO_TIMEOUT";
    `endif
    MMIO_TIMEOUT = hqm_sif_csr_bridge_MMIO_TIMEOUT_reg::type_id::create("MMIO_TIMEOUT", this);
    MMIO_TIMEOUT.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001024, 32, 32'b10000000000000000000000000010101);
    MMIO_TIMEOUT.set_space_addr("MSG", 28'h8001024);
    MMIO_TIMEOUT.set_space_addr("msg_bus_port", 'h21);
    MMIO_TIMEOUT.set_space_addr("MEM-SB",28'h8001024);
    MMIO_TIMEOUT.set_space_addr("MEM", 28'h8001024);
      MMIO_TIMEOUT.set_space("MEM");
      MMIO_TIMEOUT.set_msg_opcode("MEM-SB");
      MMIO_TIMEOUT.set_fid(4'h0, "MEM-SB");
  	MMIO_TIMEOUT.set_bar(4'h2, "MEM-SB");
      MMIO_TIMEOUT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MMIO_TIMEOUT.set_user_attribute("diag_reg", "0");
      MMIO_TIMEOUT.set_user_attribute("HqmIsFeatureReg", "1");
      MMIO_TIMEOUT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MMIO_TIMEOUT:dont_test") ) MMIO_TIMEOUT.set_test_reg(1'b0);
      if (!add_reg( MMIO_TIMEOUT )) begin
        `sla_error(get_name(), ("Could not add register MMIO_TIMEOUT"));
      end
   MMIO_TIMEOUT.TIMEOUT_PWR2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MMIO_TIMEOUT.TIMEOUT_PWR2"});
   MMIO_TIMEOUT.TIMEOUT_ENABLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MMIO_TIMEOUT.TIMEOUT_ENABLE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HCW_TIMEOUT";
    `endif
    HCW_TIMEOUT = hqm_sif_csr_bridge_HCW_TIMEOUT_reg::type_id::create("HCW_TIMEOUT", this);
    HCW_TIMEOUT.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001028, 32, 32'b10000000000000000000000000010101);
    HCW_TIMEOUT.set_space_addr("MSG", 28'h8001028);
    HCW_TIMEOUT.set_space_addr("msg_bus_port", 'h21);
    HCW_TIMEOUT.set_space_addr("MEM-SB",28'h8001028);
    HCW_TIMEOUT.set_space_addr("MEM", 28'h8001028);
      HCW_TIMEOUT.set_space("MEM");
      HCW_TIMEOUT.set_msg_opcode("MEM-SB");
      HCW_TIMEOUT.set_fid(4'h0, "MEM-SB");
  	HCW_TIMEOUT.set_bar(4'h2, "MEM-SB");
      HCW_TIMEOUT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HCW_TIMEOUT.set_user_attribute("diag_reg", "0");
      HCW_TIMEOUT.set_user_attribute("HqmIsFeatureReg", "1");
      HCW_TIMEOUT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HCW_TIMEOUT:dont_test") ) HCW_TIMEOUT.set_test_reg(1'b0);
      if (!add_reg( HCW_TIMEOUT )) begin
        `sla_error(get_name(), ("Could not add register HCW_TIMEOUT"));
      end
   HCW_TIMEOUT.TIMEOUT_PWR2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HCW_TIMEOUT.TIMEOUT_PWR2"});
   HCW_TIMEOUT.TIMEOUT_ENABLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HCW_TIMEOUT.TIMEOUT_ENABLE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "VISA_SW_CONTROL";
    `endif
    VISA_SW_CONTROL = hqm_sif_csr_bridge_VISA_SW_CONTROL_reg::type_id::create("VISA_SW_CONTROL", this);
    VISA_SW_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001030, 32, 32'b00000000000000000000000000000000);
    VISA_SW_CONTROL.set_space_addr("MSG", 28'h8001030);
    VISA_SW_CONTROL.set_space_addr("msg_bus_port", 'h21);
    VISA_SW_CONTROL.set_space_addr("MEM-SB",28'h8001030);
    VISA_SW_CONTROL.set_space_addr("MEM", 28'h8001030);
      VISA_SW_CONTROL.set_space("MEM");
      VISA_SW_CONTROL.set_msg_opcode("MEM-SB");
      VISA_SW_CONTROL.set_fid(4'h0, "MEM-SB");
  	VISA_SW_CONTROL.set_bar(4'h2, "MEM-SB");
      VISA_SW_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      VISA_SW_CONTROL.set_user_attribute("diag_reg", "0");
      VISA_SW_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      VISA_SW_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("VISA_SW_CONTROL:dont_test") ) VISA_SW_CONTROL.set_test_reg(1'b0);
      if (!add_reg( VISA_SW_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register VISA_SW_CONTROL"));
      end
   VISA_SW_CONTROL.TRIGGER_MASK.set_paths({"i_hqm_sif_core.i_hqm_iosfsb_core.i_hqm_sb_ep_xlate.VISA_SW_CONTROL.TRIGGER_MASK"});
   VISA_SW_CONTROL.SW_TRIGGER.set_paths({"i_hqm_sif_core.i_hqm_iosfsb_core.i_hqm_sb_ep_xlate.VISA_SW_CONTROL.SW_TRIGGER"});
   VISA_SW_CONTROL.PH_TRIGGER_ENABLE.set_paths({"i_hqm_sif_core.i_hqm_iosfsb_core.i_hqm_sb_ep_xlate.VISA_SW_CONTROL.PH_TRIGGER_ENABLE"});
   VISA_SW_CONTROL.SW_SPARE.set_paths({"i_hqm_sif_core.i_hqm_iosfsb_core.i_hqm_sb_ep_xlate.VISA_SW_CONTROL.SW_SPARE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PH_TRIGGER_ADDR_L";
    `endif
    CFG_PH_TRIGGER_ADDR_L = hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_L_reg::type_id::create("CFG_PH_TRIGGER_ADDR_L", this);
    CFG_PH_TRIGGER_ADDR_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001040, 32, 32'b00000000000000000000000000000000);
    CFG_PH_TRIGGER_ADDR_L.set_space_addr("MSG", 28'h8001040);
    CFG_PH_TRIGGER_ADDR_L.set_space_addr("msg_bus_port", 'h21);
    CFG_PH_TRIGGER_ADDR_L.set_space_addr("MEM-SB",28'h8001040);
    CFG_PH_TRIGGER_ADDR_L.set_space_addr("MEM", 28'h8001040);
      CFG_PH_TRIGGER_ADDR_L.set_space("MEM");
      CFG_PH_TRIGGER_ADDR_L.set_msg_opcode("MEM-SB");
      CFG_PH_TRIGGER_ADDR_L.set_fid(4'h0, "MEM-SB");
  	CFG_PH_TRIGGER_ADDR_L.set_bar(4'h2, "MEM-SB");
      CFG_PH_TRIGGER_ADDR_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PH_TRIGGER_ADDR_L.set_user_attribute("diag_reg", "0");
      CFG_PH_TRIGGER_ADDR_L.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PH_TRIGGER_ADDR_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PH_TRIGGER_ADDR_L:dont_test") ) CFG_PH_TRIGGER_ADDR_L.set_test_reg(1'b0);
      if (!add_reg( CFG_PH_TRIGGER_ADDR_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_PH_TRIGGER_ADDR_L"));
      end
   CFG_PH_TRIGGER_ADDR_L.ADDR_L.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_PH_TRIGGER_ADDR_L.ADDR_L"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PH_TRIGGER_ADDR_U";
    `endif
    CFG_PH_TRIGGER_ADDR_U = hqm_sif_csr_bridge_CFG_PH_TRIGGER_ADDR_U_reg::type_id::create("CFG_PH_TRIGGER_ADDR_U", this);
    CFG_PH_TRIGGER_ADDR_U.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001044, 32, 32'b00000000000000000000000000000000);
    CFG_PH_TRIGGER_ADDR_U.set_space_addr("MSG", 28'h8001044);
    CFG_PH_TRIGGER_ADDR_U.set_space_addr("msg_bus_port", 'h21);
    CFG_PH_TRIGGER_ADDR_U.set_space_addr("MEM-SB",28'h8001044);
    CFG_PH_TRIGGER_ADDR_U.set_space_addr("MEM", 28'h8001044);
      CFG_PH_TRIGGER_ADDR_U.set_space("MEM");
      CFG_PH_TRIGGER_ADDR_U.set_msg_opcode("MEM-SB");
      CFG_PH_TRIGGER_ADDR_U.set_fid(4'h0, "MEM-SB");
  	CFG_PH_TRIGGER_ADDR_U.set_bar(4'h2, "MEM-SB");
      CFG_PH_TRIGGER_ADDR_U.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PH_TRIGGER_ADDR_U.set_user_attribute("diag_reg", "0");
      CFG_PH_TRIGGER_ADDR_U.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PH_TRIGGER_ADDR_U.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PH_TRIGGER_ADDR_U:dont_test") ) CFG_PH_TRIGGER_ADDR_U.set_test_reg(1'b0);
      if (!add_reg( CFG_PH_TRIGGER_ADDR_U )) begin
        `sla_error(get_name(), ("Could not add register CFG_PH_TRIGGER_ADDR_U"));
      end
   CFG_PH_TRIGGER_ADDR_U.ADDR_U.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_PH_TRIGGER_ADDR_U.ADDR_U"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PH_TRIGGER_MASK_L";
    `endif
    CFG_PH_TRIGGER_MASK_L = hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_L_reg::type_id::create("CFG_PH_TRIGGER_MASK_L", this);
    CFG_PH_TRIGGER_MASK_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001048, 32, 32'b00000000000000000000000000000000);
    CFG_PH_TRIGGER_MASK_L.set_space_addr("MSG", 28'h8001048);
    CFG_PH_TRIGGER_MASK_L.set_space_addr("msg_bus_port", 'h21);
    CFG_PH_TRIGGER_MASK_L.set_space_addr("MEM-SB",28'h8001048);
    CFG_PH_TRIGGER_MASK_L.set_space_addr("MEM", 28'h8001048);
      CFG_PH_TRIGGER_MASK_L.set_space("MEM");
      CFG_PH_TRIGGER_MASK_L.set_msg_opcode("MEM-SB");
      CFG_PH_TRIGGER_MASK_L.set_fid(4'h0, "MEM-SB");
  	CFG_PH_TRIGGER_MASK_L.set_bar(4'h2, "MEM-SB");
      CFG_PH_TRIGGER_MASK_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PH_TRIGGER_MASK_L.set_user_attribute("diag_reg", "0");
      CFG_PH_TRIGGER_MASK_L.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PH_TRIGGER_MASK_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PH_TRIGGER_MASK_L:dont_test") ) CFG_PH_TRIGGER_MASK_L.set_test_reg(1'b0);
      if (!add_reg( CFG_PH_TRIGGER_MASK_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_PH_TRIGGER_MASK_L"));
      end
   CFG_PH_TRIGGER_MASK_L.MASK_L.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_PH_TRIGGER_MASK_L.MASK_L"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PH_TRIGGER_MASK_U";
    `endif
    CFG_PH_TRIGGER_MASK_U = hqm_sif_csr_bridge_CFG_PH_TRIGGER_MASK_U_reg::type_id::create("CFG_PH_TRIGGER_MASK_U", this);
    CFG_PH_TRIGGER_MASK_U.set_cfg(16'h0, 16'h0, 16'h0, 28'h800104C, 32, 32'b00000000000000000000000000000000);
    CFG_PH_TRIGGER_MASK_U.set_space_addr("MSG", 28'h800104C);
    CFG_PH_TRIGGER_MASK_U.set_space_addr("msg_bus_port", 'h21);
    CFG_PH_TRIGGER_MASK_U.set_space_addr("MEM-SB",28'h800104C);
    CFG_PH_TRIGGER_MASK_U.set_space_addr("MEM", 28'h800104C);
      CFG_PH_TRIGGER_MASK_U.set_space("MEM");
      CFG_PH_TRIGGER_MASK_U.set_msg_opcode("MEM-SB");
      CFG_PH_TRIGGER_MASK_U.set_fid(4'h0, "MEM-SB");
  	CFG_PH_TRIGGER_MASK_U.set_bar(4'h2, "MEM-SB");
      CFG_PH_TRIGGER_MASK_U.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PH_TRIGGER_MASK_U.set_user_attribute("diag_reg", "0");
      CFG_PH_TRIGGER_MASK_U.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PH_TRIGGER_MASK_U.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PH_TRIGGER_MASK_U:dont_test") ) CFG_PH_TRIGGER_MASK_U.set_test_reg(1'b0);
      if (!add_reg( CFG_PH_TRIGGER_MASK_U )) begin
        `sla_error(get_name(), ("Could not add register CFG_PH_TRIGGER_MASK_U"));
      end
   CFG_PH_TRIGGER_MASK_U.MASK_U.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFG_PH_TRIGGER_MASK_U.MASK_U"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SIF_IDLE_STATUS";
    `endif
    SIF_IDLE_STATUS = hqm_sif_csr_bridge_SIF_IDLE_STATUS_reg::type_id::create("SIF_IDLE_STATUS", this);
    SIF_IDLE_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001050, 32, 32'b00000000000000000000000001111111);
    SIF_IDLE_STATUS.set_space_addr("MSG", 28'h8001050);
    SIF_IDLE_STATUS.set_space_addr("msg_bus_port", 'h21);
    SIF_IDLE_STATUS.set_space_addr("MEM-SB",28'h8001050);
    SIF_IDLE_STATUS.set_space_addr("MEM", 28'h8001050);
      SIF_IDLE_STATUS.set_space("MEM");
      SIF_IDLE_STATUS.set_msg_opcode("MEM-SB");
      SIF_IDLE_STATUS.set_fid(4'h0, "MEM-SB");
  	SIF_IDLE_STATUS.set_bar(4'h2, "MEM-SB");
      SIF_IDLE_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SIF_IDLE_STATUS.set_user_attribute("diag_reg", "0");
      SIF_IDLE_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      SIF_IDLE_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      SIF_IDLE_STATUS.set_test_reg(0);
      if ( $test$plusargs("SIF_IDLE_STATUS:dont_test") ) SIF_IDLE_STATUS.set_test_reg(1'b0);
      if (!add_reg( SIF_IDLE_STATUS )) begin
        `sla_error(get_name(), ("Could not add register SIF_IDLE_STATUS"));
      end
   SIF_IDLE_STATUS.CFGM_IDLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.CFGM_IDLE"});
   SIF_IDLE_STATUS.RI_IDLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.RI_IDLE"});
   SIF_IDLE_STATUS.TGT_IDLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.TGT_IDLE"});
   SIF_IDLE_STATUS.MSTR_INTF_IDLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.MSTR_INTF_IDLE"});
   SIF_IDLE_STATUS.MSTR_IDLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.MSTR_IDLE"});
   SIF_IDLE_STATUS.INT_IDLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.INT_IDLE"});
   SIF_IDLE_STATUS.PROC_IDLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_IDLE_STATUS.PROC_IDLE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SIF_DB_STATUS";
    `endif
    SIF_DB_STATUS = hqm_sif_csr_bridge_SIF_DB_STATUS_reg::type_id::create("SIF_DB_STATUS", this);
    SIF_DB_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001054, 32, 32'b00000000000000000000000000000100);
    SIF_DB_STATUS.set_space_addr("MSG", 28'h8001054);
    SIF_DB_STATUS.set_space_addr("msg_bus_port", 'h21);
    SIF_DB_STATUS.set_space_addr("MEM-SB",28'h8001054);
    SIF_DB_STATUS.set_space_addr("MEM", 28'h8001054);
      SIF_DB_STATUS.set_space("MEM");
      SIF_DB_STATUS.set_msg_opcode("MEM-SB");
      SIF_DB_STATUS.set_fid(4'h0, "MEM-SB");
  	SIF_DB_STATUS.set_bar(4'h2, "MEM-SB");
      SIF_DB_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SIF_DB_STATUS.set_user_attribute("diag_reg", "0");
      SIF_DB_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      SIF_DB_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SIF_DB_STATUS:dont_test") ) SIF_DB_STATUS.set_test_reg(1'b0);
      if (!add_reg( SIF_DB_STATUS )) begin
        `sla_error(get_name(), ("Could not add register SIF_DB_STATUS"));
      end
   SIF_DB_STATUS.ALARM_DB_DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.ALARM_DB_DEPTH"});
   SIF_DB_STATUS.ALARM_DB_READY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.ALARM_DB_READY"});
   SIF_DB_STATUS.P_REQ_DB_DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.P_REQ_DB_DEPTH"});
   SIF_DB_STATUS.P_REQ_DB_READY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.P_REQ_DB_READY"});
   SIF_DB_STATUS.NP_REQ_DB_DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.NP_REQ_DB_DEPTH"});
   SIF_DB_STATUS.NP_REQ_DB_READY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.NP_REQ_DB_READY"});
   SIF_DB_STATUS.CPL_REQ_DB_DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.CPL_REQ_DB_DEPTH"});
   SIF_DB_STATUS.CPL_REQ_DB_READY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_DB_STATUS.CPL_REQ_DB_READY"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_DB_STATUS";
    `endif
    RI_DB_STATUS = hqm_sif_csr_bridge_RI_DB_STATUS_reg::type_id::create("RI_DB_STATUS", this);
    RI_DB_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001058, 32, 32'b00000000000000000000000000000000);
    RI_DB_STATUS.set_space_addr("MSG", 28'h8001058);
    RI_DB_STATUS.set_space_addr("msg_bus_port", 'h21);
    RI_DB_STATUS.set_space_addr("MEM-SB",28'h8001058);
    RI_DB_STATUS.set_space_addr("MEM", 28'h8001058);
      RI_DB_STATUS.set_space("MEM");
      RI_DB_STATUS.set_msg_opcode("MEM-SB");
      RI_DB_STATUS.set_fid(4'h0, "MEM-SB");
  	RI_DB_STATUS.set_bar(4'h2, "MEM-SB");
      RI_DB_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_DB_STATUS.set_user_attribute("diag_reg", "0");
      RI_DB_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      RI_DB_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("RI_DB_STATUS:dont_test") ) RI_DB_STATUS.set_test_reg(1'b0);
      if (!add_reg( RI_DB_STATUS )) begin
        `sla_error(get_name(), ("Could not add register RI_DB_STATUS"));
      end
   RI_DB_STATUS.PH_DB_DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.PH_DB_DEPTH"});
   RI_DB_STATUS.PH_DB_READY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.PH_DB_READY"});
   RI_DB_STATUS.PD_DB_DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.PD_DB_DEPTH"});
   RI_DB_STATUS.PD_DB_READY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.PD_DB_READY"});
   RI_DB_STATUS.NPH_DB_DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.NPH_DB_DEPTH"});
   RI_DB_STATUS.NPH_DB_READY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.NPH_DB_READY"});
   RI_DB_STATUS.NPD_DB_DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.NPD_DB_DEPTH"});
   RI_DB_STATUS.NPD_DB_READY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.NPD_DB_READY"});
   RI_DB_STATUS.IOQ_DB_DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.IOQ_DB_DEPTH"});
   RI_DB_STATUS.IOQ_DB_READY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.IOQ_DB_READY"});
   RI_DB_STATUS.HCW_DB_DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.HCW_DB_DEPTH"});
   RI_DB_STATUS.HCW_DB_READY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_DB_STATUS.HCW_DB_READY"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_PHDR_FIFO_CTL";
    `endif
    RI_PHDR_FIFO_CTL = hqm_sif_csr_bridge_RI_PHDR_FIFO_CTL_reg::type_id::create("RI_PHDR_FIFO_CTL", this);
    RI_PHDR_FIFO_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001070, 32, 32'b00000000000000000000000000001111);
    RI_PHDR_FIFO_CTL.set_space_addr("MSG", 28'h8001070);
    RI_PHDR_FIFO_CTL.set_space_addr("msg_bus_port", 'h21);
    RI_PHDR_FIFO_CTL.set_space_addr("MEM-SB",28'h8001070);
    RI_PHDR_FIFO_CTL.set_space_addr("MEM", 28'h8001070);
      RI_PHDR_FIFO_CTL.set_space("MEM");
      RI_PHDR_FIFO_CTL.set_msg_opcode("MEM-SB");
      RI_PHDR_FIFO_CTL.set_fid(4'h0, "MEM-SB");
  	RI_PHDR_FIFO_CTL.set_bar(4'h2, "MEM-SB");
      RI_PHDR_FIFO_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_PHDR_FIFO_CTL.set_user_attribute("diag_reg", "0");
      RI_PHDR_FIFO_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      RI_PHDR_FIFO_CTL.set_user_attribute("SubnetPortID", "8'h00");
      RI_PHDR_FIFO_CTL.set_test_reg(0);
      if ( $test$plusargs("RI_PHDR_FIFO_CTL:dont_test") ) RI_PHDR_FIFO_CTL.set_test_reg(1'b0);
      if (!add_reg( RI_PHDR_FIFO_CTL )) begin
        `sla_error(get_name(), ("Could not add register RI_PHDR_FIFO_CTL"));
      end
   RI_PHDR_FIFO_CTL.HIGH_WM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_CTL.HIGH_WM"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_PDATA_FIFO_CTL";
    `endif
    RI_PDATA_FIFO_CTL = hqm_sif_csr_bridge_RI_PDATA_FIFO_CTL_reg::type_id::create("RI_PDATA_FIFO_CTL", this);
    RI_PDATA_FIFO_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001074, 32, 32'b00000000000000000000000000011111);
    RI_PDATA_FIFO_CTL.set_space_addr("MSG", 28'h8001074);
    RI_PDATA_FIFO_CTL.set_space_addr("msg_bus_port", 'h21);
    RI_PDATA_FIFO_CTL.set_space_addr("MEM-SB",28'h8001074);
    RI_PDATA_FIFO_CTL.set_space_addr("MEM", 28'h8001074);
      RI_PDATA_FIFO_CTL.set_space("MEM");
      RI_PDATA_FIFO_CTL.set_msg_opcode("MEM-SB");
      RI_PDATA_FIFO_CTL.set_fid(4'h0, "MEM-SB");
  	RI_PDATA_FIFO_CTL.set_bar(4'h2, "MEM-SB");
      RI_PDATA_FIFO_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_PDATA_FIFO_CTL.set_user_attribute("diag_reg", "0");
      RI_PDATA_FIFO_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      RI_PDATA_FIFO_CTL.set_user_attribute("SubnetPortID", "8'h00");
      RI_PDATA_FIFO_CTL.set_test_reg(0);
      if ( $test$plusargs("RI_PDATA_FIFO_CTL:dont_test") ) RI_PDATA_FIFO_CTL.set_test_reg(1'b0);
      if (!add_reg( RI_PDATA_FIFO_CTL )) begin
        `sla_error(get_name(), ("Could not add register RI_PDATA_FIFO_CTL"));
      end
   RI_PDATA_FIFO_CTL.HIGH_WM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_CTL.HIGH_WM"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_NPHDR_FIFO_CTL";
    `endif
    RI_NPHDR_FIFO_CTL = hqm_sif_csr_bridge_RI_NPHDR_FIFO_CTL_reg::type_id::create("RI_NPHDR_FIFO_CTL", this);
    RI_NPHDR_FIFO_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001078, 32, 32'b00000000000000000000000000000111);
    RI_NPHDR_FIFO_CTL.set_space_addr("MSG", 28'h8001078);
    RI_NPHDR_FIFO_CTL.set_space_addr("msg_bus_port", 'h21);
    RI_NPHDR_FIFO_CTL.set_space_addr("MEM-SB",28'h8001078);
    RI_NPHDR_FIFO_CTL.set_space_addr("MEM", 28'h8001078);
      RI_NPHDR_FIFO_CTL.set_space("MEM");
      RI_NPHDR_FIFO_CTL.set_msg_opcode("MEM-SB");
      RI_NPHDR_FIFO_CTL.set_fid(4'h0, "MEM-SB");
  	RI_NPHDR_FIFO_CTL.set_bar(4'h2, "MEM-SB");
      RI_NPHDR_FIFO_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_NPHDR_FIFO_CTL.set_user_attribute("diag_reg", "0");
      RI_NPHDR_FIFO_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      RI_NPHDR_FIFO_CTL.set_user_attribute("SubnetPortID", "8'h00");
      RI_NPHDR_FIFO_CTL.set_test_reg(0);
      if ( $test$plusargs("RI_NPHDR_FIFO_CTL:dont_test") ) RI_NPHDR_FIFO_CTL.set_test_reg(1'b0);
      if (!add_reg( RI_NPHDR_FIFO_CTL )) begin
        `sla_error(get_name(), ("Could not add register RI_NPHDR_FIFO_CTL"));
      end
   RI_NPHDR_FIFO_CTL.HIGH_WM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_CTL.HIGH_WM"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_NPDATA_FIFO_CTL";
    `endif
    RI_NPDATA_FIFO_CTL = hqm_sif_csr_bridge_RI_NPDATA_FIFO_CTL_reg::type_id::create("RI_NPDATA_FIFO_CTL", this);
    RI_NPDATA_FIFO_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h800107C, 32, 32'b00000000000000000000000000000111);
    RI_NPDATA_FIFO_CTL.set_space_addr("MSG", 28'h800107C);
    RI_NPDATA_FIFO_CTL.set_space_addr("msg_bus_port", 'h21);
    RI_NPDATA_FIFO_CTL.set_space_addr("MEM-SB",28'h800107C);
    RI_NPDATA_FIFO_CTL.set_space_addr("MEM", 28'h800107C);
      RI_NPDATA_FIFO_CTL.set_space("MEM");
      RI_NPDATA_FIFO_CTL.set_msg_opcode("MEM-SB");
      RI_NPDATA_FIFO_CTL.set_fid(4'h0, "MEM-SB");
  	RI_NPDATA_FIFO_CTL.set_bar(4'h2, "MEM-SB");
      RI_NPDATA_FIFO_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_NPDATA_FIFO_CTL.set_user_attribute("diag_reg", "0");
      RI_NPDATA_FIFO_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      RI_NPDATA_FIFO_CTL.set_user_attribute("SubnetPortID", "8'h00");
      RI_NPDATA_FIFO_CTL.set_test_reg(0);
      if ( $test$plusargs("RI_NPDATA_FIFO_CTL:dont_test") ) RI_NPDATA_FIFO_CTL.set_test_reg(1'b0);
      if (!add_reg( RI_NPDATA_FIFO_CTL )) begin
        `sla_error(get_name(), ("Could not add register RI_NPDATA_FIFO_CTL"));
      end
   RI_NPDATA_FIFO_CTL.HIGH_WM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_CTL.HIGH_WM"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_IOQ_FIFO_CTL";
    `endif
    RI_IOQ_FIFO_CTL = hqm_sif_csr_bridge_RI_IOQ_FIFO_CTL_reg::type_id::create("RI_IOQ_FIFO_CTL", this);
    RI_IOQ_FIFO_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001080, 32, 32'b00000000000000000000000000011111);
    RI_IOQ_FIFO_CTL.set_space_addr("MSG", 28'h8001080);
    RI_IOQ_FIFO_CTL.set_space_addr("msg_bus_port", 'h21);
    RI_IOQ_FIFO_CTL.set_space_addr("MEM-SB",28'h8001080);
    RI_IOQ_FIFO_CTL.set_space_addr("MEM", 28'h8001080);
      RI_IOQ_FIFO_CTL.set_space("MEM");
      RI_IOQ_FIFO_CTL.set_msg_opcode("MEM-SB");
      RI_IOQ_FIFO_CTL.set_fid(4'h0, "MEM-SB");
  	RI_IOQ_FIFO_CTL.set_bar(4'h2, "MEM-SB");
      RI_IOQ_FIFO_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_IOQ_FIFO_CTL.set_user_attribute("diag_reg", "0");
      RI_IOQ_FIFO_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      RI_IOQ_FIFO_CTL.set_user_attribute("SubnetPortID", "8'h00");
      RI_IOQ_FIFO_CTL.set_test_reg(0);
      if ( $test$plusargs("RI_IOQ_FIFO_CTL:dont_test") ) RI_IOQ_FIFO_CTL.set_test_reg(1'b0);
      if (!add_reg( RI_IOQ_FIFO_CTL )) begin
        `sla_error(get_name(), ("Could not add register RI_IOQ_FIFO_CTL"));
      end
   RI_IOQ_FIFO_CTL.HIGH_WM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_CTL.HIGH_WM"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IBCPL_HDR_FIFO_CTL";
    `endif
    IBCPL_HDR_FIFO_CTL = hqm_sif_csr_bridge_IBCPL_HDR_FIFO_CTL_reg::type_id::create("IBCPL_HDR_FIFO_CTL", this);
    IBCPL_HDR_FIFO_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001084, 32, 32'b00000000000000000000000100000000);
    IBCPL_HDR_FIFO_CTL.set_space_addr("MSG", 28'h8001084);
    IBCPL_HDR_FIFO_CTL.set_space_addr("msg_bus_port", 'h21);
    IBCPL_HDR_FIFO_CTL.set_space_addr("MEM-SB",28'h8001084);
    IBCPL_HDR_FIFO_CTL.set_space_addr("MEM", 28'h8001084);
      IBCPL_HDR_FIFO_CTL.set_space("MEM");
      IBCPL_HDR_FIFO_CTL.set_msg_opcode("MEM-SB");
      IBCPL_HDR_FIFO_CTL.set_fid(4'h0, "MEM-SB");
  	IBCPL_HDR_FIFO_CTL.set_bar(4'h2, "MEM-SB");
      IBCPL_HDR_FIFO_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IBCPL_HDR_FIFO_CTL.set_user_attribute("diag_reg", "0");
      IBCPL_HDR_FIFO_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      IBCPL_HDR_FIFO_CTL.set_user_attribute("SubnetPortID", "8'h00");
      IBCPL_HDR_FIFO_CTL.set_test_reg(0);
      if ( $test$plusargs("IBCPL_HDR_FIFO_CTL:dont_test") ) IBCPL_HDR_FIFO_CTL.set_test_reg(1'b0);
      if (!add_reg( IBCPL_HDR_FIFO_CTL )) begin
        `sla_error(get_name(), ("Could not add register IBCPL_HDR_FIFO_CTL"));
      end
   IBCPL_HDR_FIFO_CTL.HIGH_WM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_CTL.HIGH_WM"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IBCPL_DATA_FIFO_CTL";
    `endif
    IBCPL_DATA_FIFO_CTL = hqm_sif_csr_bridge_IBCPL_DATA_FIFO_CTL_reg::type_id::create("IBCPL_DATA_FIFO_CTL", this);
    IBCPL_DATA_FIFO_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001088, 32, 32'b00000000000000000000000100000000);
    IBCPL_DATA_FIFO_CTL.set_space_addr("MSG", 28'h8001088);
    IBCPL_DATA_FIFO_CTL.set_space_addr("msg_bus_port", 'h21);
    IBCPL_DATA_FIFO_CTL.set_space_addr("MEM-SB",28'h8001088);
    IBCPL_DATA_FIFO_CTL.set_space_addr("MEM", 28'h8001088);
      IBCPL_DATA_FIFO_CTL.set_space("MEM");
      IBCPL_DATA_FIFO_CTL.set_msg_opcode("MEM-SB");
      IBCPL_DATA_FIFO_CTL.set_fid(4'h0, "MEM-SB");
  	IBCPL_DATA_FIFO_CTL.set_bar(4'h2, "MEM-SB");
      IBCPL_DATA_FIFO_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IBCPL_DATA_FIFO_CTL.set_user_attribute("diag_reg", "0");
      IBCPL_DATA_FIFO_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      IBCPL_DATA_FIFO_CTL.set_user_attribute("SubnetPortID", "8'h00");
      IBCPL_DATA_FIFO_CTL.set_test_reg(0);
      if ( $test$plusargs("IBCPL_DATA_FIFO_CTL:dont_test") ) IBCPL_DATA_FIFO_CTL.set_test_reg(1'b0);
      if (!add_reg( IBCPL_DATA_FIFO_CTL )) begin
        `sla_error(get_name(), ("Could not add register IBCPL_DATA_FIFO_CTL"));
      end
   IBCPL_DATA_FIFO_CTL.HIGH_WM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_CTL.HIGH_WM"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SCRBD_CTL";
    `endif
    SCRBD_CTL = hqm_sif_csr_bridge_SCRBD_CTL_reg::type_id::create("SCRBD_CTL", this);
    SCRBD_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001090, 32, 32'b00000000010000000100000100000000);
    SCRBD_CTL.set_space_addr("MSG", 28'h8001090);
    SCRBD_CTL.set_space_addr("msg_bus_port", 'h21);
    SCRBD_CTL.set_space_addr("MEM-SB",28'h8001090);
    SCRBD_CTL.set_space_addr("MEM", 28'h8001090);
      SCRBD_CTL.set_space("MEM");
      SCRBD_CTL.set_msg_opcode("MEM-SB");
      SCRBD_CTL.set_fid(4'h0, "MEM-SB");
  	SCRBD_CTL.set_bar(4'h2, "MEM-SB");
      SCRBD_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SCRBD_CTL.set_user_attribute("diag_reg", "0");
      SCRBD_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      SCRBD_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SCRBD_CTL:dont_test") ) SCRBD_CTL.set_test_reg(1'b0);
      if (!add_reg( SCRBD_CTL )) begin
        `sla_error(get_name(), ("Could not add register SCRBD_CTL"));
      end
   SCRBD_CTL.SCRBD_LIMIT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_CTL.SCRBD_LIMIT"});
   SCRBD_CTL.ATS_LIMIT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_CTL.ATS_LIMIT"});
   SCRBD_CTL.TIMEOUT8.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_CTL.TIMEOUT8"});
   SCRBD_CTL.XREQ_LIMIT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_CTL.XREQ_LIMIT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SCRBD_STATUS";
    `endif
    SCRBD_STATUS = hqm_sif_csr_bridge_SCRBD_STATUS_reg::type_id::create("SCRBD_STATUS", this);
    SCRBD_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001094, 32, 32'b00000000000000000000000000000000);
    SCRBD_STATUS.set_space_addr("MSG", 28'h8001094);
    SCRBD_STATUS.set_space_addr("msg_bus_port", 'h21);
    SCRBD_STATUS.set_space_addr("MEM-SB",28'h8001094);
    SCRBD_STATUS.set_space_addr("MEM", 28'h8001094);
      SCRBD_STATUS.set_space("MEM");
      SCRBD_STATUS.set_msg_opcode("MEM-SB");
      SCRBD_STATUS.set_fid(4'h0, "MEM-SB");
  	SCRBD_STATUS.set_bar(4'h2, "MEM-SB");
      SCRBD_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SCRBD_STATUS.set_user_attribute("diag_reg", "0");
      SCRBD_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      SCRBD_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SCRBD_STATUS:dont_test") ) SCRBD_STATUS.set_test_reg(1'b0);
      if (!add_reg( SCRBD_STATUS )) begin
        `sla_error(get_name(), ("Could not add register SCRBD_STATUS"));
      end
   SCRBD_STATUS.SCRBD_CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_STATUS.SCRBD_CNT"});
   SCRBD_STATUS.TO_PEND.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_STATUS.TO_PEND"});
   SCRBD_STATUS.TIM_INUSE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_STATUS.TIM_INUSE"});
   SCRBD_STATUS.STOPNSCREAM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_STATUS.STOPNSCREAM"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DEVTLB_CTL";
    `endif
    DEVTLB_CTL = hqm_sif_csr_bridge_DEVTLB_CTL_reg::type_id::create("DEVTLB_CTL", this);
    DEVTLB_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001098, 32, 32'b00000000000000001001001001000000);
    DEVTLB_CTL.set_space_addr("MSG", 28'h8001098);
    DEVTLB_CTL.set_space_addr("msg_bus_port", 'h21);
    DEVTLB_CTL.set_space_addr("MEM-SB",28'h8001098);
    DEVTLB_CTL.set_space_addr("MEM", 28'h8001098);
      DEVTLB_CTL.set_space("MEM");
      DEVTLB_CTL.set_msg_opcode("MEM-SB");
      DEVTLB_CTL.set_fid(4'h0, "MEM-SB");
  	DEVTLB_CTL.set_bar(4'h2, "MEM-SB");
      DEVTLB_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DEVTLB_CTL.set_user_attribute("diag_reg", "0");
      DEVTLB_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      DEVTLB_CTL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DEVTLB_CTL:dont_test") ) DEVTLB_CTL.set_test_reg(1'b0);
      if (!add_reg( DEVTLB_CTL )) begin
        `sla_error(get_name(), ("Could not add register DEVTLB_CTL"));
      end
   DEVTLB_CTL.DISABLE_1G.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.DISABLE_1G"});
   DEVTLB_CTL.DISABLE_2M.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.DISABLE_2M"});
   DEVTLB_CTL.DISABLE_PRS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.DISABLE_PRS"});
   DEVTLB_CTL.PRS_CRETRY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.PRS_CRETRY"});
   DEVTLB_CTL.FILL_GCNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.FILL_GCNT"});
   DEVTLB_CTL.PENDQ_GCNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.PENDQ_GCNT"});
   DEVTLB_CTL.HIXREQ_GCNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.HIXREQ_GCNT"});
   DEVTLB_CTL.LOXREQ_GCNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_CTL.LOXREQ_GCNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DEVTLB_SPARE";
    `endif
    DEVTLB_SPARE = hqm_sif_csr_bridge_DEVTLB_SPARE_reg::type_id::create("DEVTLB_SPARE", this);
    DEVTLB_SPARE.set_cfg(16'h0, 16'h0, 16'h0, 28'h800109C, 32, 32'b00000000000000000000000000000000);
    DEVTLB_SPARE.set_space_addr("MSG", 28'h800109C);
    DEVTLB_SPARE.set_space_addr("msg_bus_port", 'h21);
    DEVTLB_SPARE.set_space_addr("MEM-SB",28'h800109C);
    DEVTLB_SPARE.set_space_addr("MEM", 28'h800109C);
      DEVTLB_SPARE.set_space("MEM");
      DEVTLB_SPARE.set_msg_opcode("MEM-SB");
      DEVTLB_SPARE.set_fid(4'h0, "MEM-SB");
  	DEVTLB_SPARE.set_bar(4'h2, "MEM-SB");
      DEVTLB_SPARE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DEVTLB_SPARE.set_user_attribute("diag_reg", "0");
      DEVTLB_SPARE.set_user_attribute("HqmIsFeatureReg", "1");
      DEVTLB_SPARE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DEVTLB_SPARE:dont_test") ) DEVTLB_SPARE.set_test_reg(1'b0);
      if (!add_reg( DEVTLB_SPARE )) begin
        `sla_error(get_name(), ("Could not add register DEVTLB_SPARE"));
      end
   DEVTLB_SPARE.SPARE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_SPARE.SPARE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DEVTLB_DEFEATURE0";
    `endif
    DEVTLB_DEFEATURE0 = hqm_sif_csr_bridge_DEVTLB_DEFEATURE0_reg::type_id::create("DEVTLB_DEFEATURE0", this);
    DEVTLB_DEFEATURE0.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010A0, 32, 32'b00000000000000000000000000000000);
    DEVTLB_DEFEATURE0.set_space_addr("MSG", 28'h80010A0);
    DEVTLB_DEFEATURE0.set_space_addr("msg_bus_port", 'h21);
    DEVTLB_DEFEATURE0.set_space_addr("MEM-SB",28'h80010A0);
    DEVTLB_DEFEATURE0.set_space_addr("MEM", 28'h80010A0);
      DEVTLB_DEFEATURE0.set_space("MEM");
      DEVTLB_DEFEATURE0.set_msg_opcode("MEM-SB");
      DEVTLB_DEFEATURE0.set_fid(4'h0, "MEM-SB");
  	DEVTLB_DEFEATURE0.set_bar(4'h2, "MEM-SB");
      DEVTLB_DEFEATURE0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DEVTLB_DEFEATURE0.set_user_attribute("diag_reg", "0");
      DEVTLB_DEFEATURE0.set_user_attribute("HqmIsFeatureReg", "1");
      DEVTLB_DEFEATURE0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DEVTLB_DEFEATURE0:dont_test") ) DEVTLB_DEFEATURE0.set_test_reg(1'b0);
      if (!add_reg( DEVTLB_DEFEATURE0 )) begin
        `sla_error(get_name(), ("Could not add register DEVTLB_DEFEATURE0"));
      end
   DEVTLB_DEFEATURE0.DEFEATURE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_DEFEATURE0.DEFEATURE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DEVTLB_DEFEATURE1";
    `endif
    DEVTLB_DEFEATURE1 = hqm_sif_csr_bridge_DEVTLB_DEFEATURE1_reg::type_id::create("DEVTLB_DEFEATURE1", this);
    DEVTLB_DEFEATURE1.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010A4, 32, 32'b00000000000000000000000000000000);
    DEVTLB_DEFEATURE1.set_space_addr("MSG", 28'h80010A4);
    DEVTLB_DEFEATURE1.set_space_addr("msg_bus_port", 'h21);
    DEVTLB_DEFEATURE1.set_space_addr("MEM-SB",28'h80010A4);
    DEVTLB_DEFEATURE1.set_space_addr("MEM", 28'h80010A4);
      DEVTLB_DEFEATURE1.set_space("MEM");
      DEVTLB_DEFEATURE1.set_msg_opcode("MEM-SB");
      DEVTLB_DEFEATURE1.set_fid(4'h0, "MEM-SB");
  	DEVTLB_DEFEATURE1.set_bar(4'h2, "MEM-SB");
      DEVTLB_DEFEATURE1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DEVTLB_DEFEATURE1.set_user_attribute("diag_reg", "0");
      DEVTLB_DEFEATURE1.set_user_attribute("HqmIsFeatureReg", "1");
      DEVTLB_DEFEATURE1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DEVTLB_DEFEATURE1:dont_test") ) DEVTLB_DEFEATURE1.set_test_reg(1'b0);
      if (!add_reg( DEVTLB_DEFEATURE1 )) begin
        `sla_error(get_name(), ("Could not add register DEVTLB_DEFEATURE1"));
      end
   DEVTLB_DEFEATURE1.DEFEATURE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_DEFEATURE1.DEFEATURE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DEVTLB_DEFEATURE2";
    `endif
    DEVTLB_DEFEATURE2 = hqm_sif_csr_bridge_DEVTLB_DEFEATURE2_reg::type_id::create("DEVTLB_DEFEATURE2", this);
    DEVTLB_DEFEATURE2.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010A8, 32, 32'b00000000000000000000000000000000);
    DEVTLB_DEFEATURE2.set_space_addr("MSG", 28'h80010A8);
    DEVTLB_DEFEATURE2.set_space_addr("msg_bus_port", 'h21);
    DEVTLB_DEFEATURE2.set_space_addr("MEM-SB",28'h80010A8);
    DEVTLB_DEFEATURE2.set_space_addr("MEM", 28'h80010A8);
      DEVTLB_DEFEATURE2.set_space("MEM");
      DEVTLB_DEFEATURE2.set_msg_opcode("MEM-SB");
      DEVTLB_DEFEATURE2.set_fid(4'h0, "MEM-SB");
  	DEVTLB_DEFEATURE2.set_bar(4'h2, "MEM-SB");
      DEVTLB_DEFEATURE2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DEVTLB_DEFEATURE2.set_user_attribute("diag_reg", "0");
      DEVTLB_DEFEATURE2.set_user_attribute("HqmIsFeatureReg", "1");
      DEVTLB_DEFEATURE2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DEVTLB_DEFEATURE2:dont_test") ) DEVTLB_DEFEATURE2.set_test_reg(1'b0);
      if (!add_reg( DEVTLB_DEFEATURE2 )) begin
        `sla_error(get_name(), ("Could not add register DEVTLB_DEFEATURE2"));
      end
   DEVTLB_DEFEATURE2.DEFEATURE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_DEFEATURE2.DEFEATURE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DEVTLB_STATUS";
    `endif
    DEVTLB_STATUS = hqm_sif_csr_bridge_DEVTLB_STATUS_reg::type_id::create("DEVTLB_STATUS", this);
    DEVTLB_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010AC, 32, 32'b00000000000000000000010001000000);
    DEVTLB_STATUS.set_space_addr("MSG", 28'h80010AC);
    DEVTLB_STATUS.set_space_addr("msg_bus_port", 'h21);
    DEVTLB_STATUS.set_space_addr("MEM-SB",28'h80010AC);
    DEVTLB_STATUS.set_space_addr("MEM", 28'h80010AC);
      DEVTLB_STATUS.set_space("MEM");
      DEVTLB_STATUS.set_msg_opcode("MEM-SB");
      DEVTLB_STATUS.set_fid(4'h0, "MEM-SB");
  	DEVTLB_STATUS.set_bar(4'h2, "MEM-SB");
      DEVTLB_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      DEVTLB_STATUS.set_user_attribute("diag_reg", "0");
      DEVTLB_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      DEVTLB_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DEVTLB_STATUS:dont_test") ) DEVTLB_STATUS.set_test_reg(1'b0);
      if (!add_reg( DEVTLB_STATUS )) begin
        `sla_error(get_name(), ("Could not add register DEVTLB_STATUS"));
      end
   DEVTLB_STATUS.XREQS_ACTIVE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.XREQS_ACTIVE"});
   DEVTLB_STATUS.INVREQS_ACTIVE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.INVREQS_ACTIVE"});
   DEVTLB_STATUS.RESET_ACTIVE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.RESET_ACTIVE"});
   DEVTLB_STATUS.ATS_ENABLED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.ATS_ENABLED"});
   DEVTLB_STATUS.LCRD_CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.LCRD_CNT"});
   DEVTLB_STATUS.HCRD_CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.HCRD_CNT"});
   DEVTLB_STATUS.ATS_LREQ_V.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.ATS_LREQ_V"});
   DEVTLB_STATUS.ATS_HREQ_V.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.ATS_HREQ_V"});
   DEVTLB_STATUS.TX_MSG_V.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.TX_MSG_V"});
   DEVTLB_STATUS.DRAIN_REQ_V.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.DRAIN_REQ_V"});
   DEVTLB_STATUS.ATS_REQ_CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.ATS_REQ_CNT"});
   DEVTLB_STATUS.XREQ_CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.DEVTLB_STATUS.XREQ_CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFGM_STATUS";
    `endif
    CFGM_STATUS = hqm_sif_csr_bridge_CFGM_STATUS_reg::type_id::create("CFGM_STATUS", this);
    CFGM_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010B0, 32, 32'b00000000000000000000000000000000);
    CFGM_STATUS.set_space_addr("MSG", 28'h80010B0);
    CFGM_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFGM_STATUS.set_space_addr("MEM-SB",28'h80010B0);
    CFGM_STATUS.set_space_addr("MEM", 28'h80010B0);
      CFGM_STATUS.set_space("MEM");
      CFGM_STATUS.set_msg_opcode("MEM-SB");
      CFGM_STATUS.set_fid(4'h0, "MEM-SB");
  	CFGM_STATUS.set_bar(4'h2, "MEM-SB");
      CFGM_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFGM_STATUS.set_user_attribute("diag_reg", "0");
      CFGM_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFGM_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      CFGM_STATUS.set_test_reg(0);
      if ( $test$plusargs("CFGM_STATUS:dont_test") ) CFGM_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFGM_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFGM_STATUS"));
      end
   CFGM_STATUS.PADDR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFGM_STATUS.PADDR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFGM_STATUS2";
    `endif
    CFGM_STATUS2 = hqm_sif_csr_bridge_CFGM_STATUS2_reg::type_id::create("CFGM_STATUS2", this);
    CFGM_STATUS2.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010B4, 32, 32'b00000000000000000000000000000000);
    CFGM_STATUS2.set_space_addr("MSG", 28'h80010B4);
    CFGM_STATUS2.set_space_addr("msg_bus_port", 'h21);
    CFGM_STATUS2.set_space_addr("MEM-SB",28'h80010B4);
    CFGM_STATUS2.set_space_addr("MEM", 28'h80010B4);
      CFGM_STATUS2.set_space("MEM");
      CFGM_STATUS2.set_msg_opcode("MEM-SB");
      CFGM_STATUS2.set_fid(4'h0, "MEM-SB");
  	CFGM_STATUS2.set_bar(4'h2, "MEM-SB");
      CFGM_STATUS2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFGM_STATUS2.set_user_attribute("diag_reg", "0");
      CFGM_STATUS2.set_user_attribute("HqmIsFeatureReg", "1");
      CFGM_STATUS2.set_user_attribute("SubnetPortID", "8'h00");
      CFGM_STATUS2.set_test_reg(0);
      if ( $test$plusargs("CFGM_STATUS2:dont_test") ) CFGM_STATUS2.set_test_reg(1'b0);
      if (!add_reg( CFGM_STATUS2 )) begin
        `sla_error(get_name(), ("Could not add register CFGM_STATUS2"));
      end
   CFGM_STATUS2.PWDATA.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFGM_STATUS2.PWDATA"});
   CFGM_STATUS2.PWRITE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFGM_STATUS2.PWRITE"});
   CFGM_STATUS2.PSLVERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFGM_STATUS2.PSLVERR"});
   CFGM_STATUS2.PSEL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.CFGM_STATUS2.PSEL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LOCAL_BME_STATUS";
    `endif
    LOCAL_BME_STATUS = hqm_sif_csr_bridge_LOCAL_BME_STATUS_reg::type_id::create("LOCAL_BME_STATUS", this);
    LOCAL_BME_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010B8, 32, 32'b00000000000000000000000000000000);
    LOCAL_BME_STATUS.set_space_addr("MSG", 28'h80010B8);
    LOCAL_BME_STATUS.set_space_addr("msg_bus_port", 'h21);
    LOCAL_BME_STATUS.set_space_addr("MEM-SB",28'h80010B8);
    LOCAL_BME_STATUS.set_space_addr("MEM", 28'h80010B8);
      LOCAL_BME_STATUS.set_space("MEM");
      LOCAL_BME_STATUS.set_msg_opcode("MEM-SB");
      LOCAL_BME_STATUS.set_fid(4'h0, "MEM-SB");
  	LOCAL_BME_STATUS.set_bar(4'h2, "MEM-SB");
      LOCAL_BME_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LOCAL_BME_STATUS.set_user_attribute("diag_reg", "0");
      LOCAL_BME_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      LOCAL_BME_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      LOCAL_BME_STATUS.set_test_reg(0);
      if ( $test$plusargs("LOCAL_BME_STATUS:dont_test") ) LOCAL_BME_STATUS.set_test_reg(1'b0);
      if (!add_reg( LOCAL_BME_STATUS )) begin
        `sla_error(get_name(), ("Could not add register LOCAL_BME_STATUS"));
      end
   LOCAL_BME_STATUS.BME_PF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LOCAL_BME_STATUS.BME_PF"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "LOCAL_MSIXE_STATUS";
    `endif
    LOCAL_MSIXE_STATUS = hqm_sif_csr_bridge_LOCAL_MSIXE_STATUS_reg::type_id::create("LOCAL_MSIXE_STATUS", this);
    LOCAL_MSIXE_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010BC, 32, 32'b00000000000000000000000000000000);
    LOCAL_MSIXE_STATUS.set_space_addr("MSG", 28'h80010BC);
    LOCAL_MSIXE_STATUS.set_space_addr("msg_bus_port", 'h21);
    LOCAL_MSIXE_STATUS.set_space_addr("MEM-SB",28'h80010BC);
    LOCAL_MSIXE_STATUS.set_space_addr("MEM", 28'h80010BC);
      LOCAL_MSIXE_STATUS.set_space("MEM");
      LOCAL_MSIXE_STATUS.set_msg_opcode("MEM-SB");
      LOCAL_MSIXE_STATUS.set_fid(4'h0, "MEM-SB");
  	LOCAL_MSIXE_STATUS.set_bar(4'h2, "MEM-SB");
      LOCAL_MSIXE_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      LOCAL_MSIXE_STATUS.set_user_attribute("diag_reg", "0");
      LOCAL_MSIXE_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      LOCAL_MSIXE_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      LOCAL_MSIXE_STATUS.set_test_reg(0);
      if ( $test$plusargs("LOCAL_MSIXE_STATUS:dont_test") ) LOCAL_MSIXE_STATUS.set_test_reg(1'b0);
      if (!add_reg( LOCAL_MSIXE_STATUS )) begin
        `sla_error(get_name(), ("Could not add register LOCAL_MSIXE_STATUS"));
      end
   LOCAL_MSIXE_STATUS.MSIXE_PF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.LOCAL_MSIE_STATUS.MSIXE_PF"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSTR_CRD_STATUS";
    `endif
    MSTR_CRD_STATUS = hqm_sif_csr_bridge_MSTR_CRD_STATUS_reg::type_id::create("MSTR_CRD_STATUS", this);
    MSTR_CRD_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010C0, 32, 32'b00000000000000000000000000000000);
    MSTR_CRD_STATUS.set_space_addr("MSG", 28'h80010C0);
    MSTR_CRD_STATUS.set_space_addr("msg_bus_port", 'h21);
    MSTR_CRD_STATUS.set_space_addr("MEM-SB",28'h80010C0);
    MSTR_CRD_STATUS.set_space_addr("MEM", 28'h80010C0);
      MSTR_CRD_STATUS.set_space("MEM");
      MSTR_CRD_STATUS.set_msg_opcode("MEM-SB");
      MSTR_CRD_STATUS.set_fid(4'h0, "MEM-SB");
  	MSTR_CRD_STATUS.set_bar(4'h2, "MEM-SB");
      MSTR_CRD_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSTR_CRD_STATUS.set_user_attribute("diag_reg", "0");
      MSTR_CRD_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      MSTR_CRD_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      MSTR_CRD_STATUS.set_test_reg(0);
      if ( $test$plusargs("MSTR_CRD_STATUS:dont_test") ) MSTR_CRD_STATUS.set_test_reg(1'b0);
      if (!add_reg( MSTR_CRD_STATUS )) begin
        `sla_error(get_name(), ("Could not add register MSTR_CRD_STATUS"));
      end
   MSTR_CRD_STATUS.P_REQ_PUT_CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_CRD_STATUS.P_REQ_PUT_CNT"});
   MSTR_CRD_STATUS.NP_REQ_PUT_CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_CRD_STATUS.NP_REQ_PUT_CNT"});
   MSTR_CRD_STATUS.CPL_REQ_PUT_CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_CRD_STATUS.CPL_REQ_PUT_CNT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSTR_FL_STATUS";
    `endif
    MSTR_FL_STATUS = hqm_sif_csr_bridge_MSTR_FL_STATUS_reg::type_id::create("MSTR_FL_STATUS", this);
    MSTR_FL_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010C4, 32, 32'b00000000000010010000000000000000);
    MSTR_FL_STATUS.set_space_addr("MSG", 28'h80010C4);
    MSTR_FL_STATUS.set_space_addr("msg_bus_port", 'h21);
    MSTR_FL_STATUS.set_space_addr("MEM-SB",28'h80010C4);
    MSTR_FL_STATUS.set_space_addr("MEM", 28'h80010C4);
      MSTR_FL_STATUS.set_space("MEM");
      MSTR_FL_STATUS.set_msg_opcode("MEM-SB");
      MSTR_FL_STATUS.set_fid(4'h0, "MEM-SB");
  	MSTR_FL_STATUS.set_bar(4'h2, "MEM-SB");
      MSTR_FL_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSTR_FL_STATUS.set_user_attribute("diag_reg", "0");
      MSTR_FL_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      MSTR_FL_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      MSTR_FL_STATUS.set_test_reg(0);
      if ( $test$plusargs("MSTR_FL_STATUS:dont_test") ) MSTR_FL_STATUS.set_test_reg(1'b0);
      if (!add_reg( MSTR_FL_STATUS )) begin
        `sla_error(get_name(), ("Could not add register MSTR_FL_STATUS"));
      end
   MSTR_FL_STATUS.FL_HPTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_FL_STATUS.FL_HPTR"});
   MSTR_FL_STATUS.FL_CNT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_FL_STATUS.FL_CNT"});
   MSTR_FL_STATUS.FL_EMPTY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_FL_STATUS.FL_EMPTY"});
   MSTR_FL_STATUS.FL_AEMPTY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_FL_STATUS.FL_AEMPTY"});
   MSTR_FL_STATUS.FL_FULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_FL_STATUS.FL_FULL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSTR_LL_STATUS";
    `endif
    MSTR_LL_STATUS = hqm_sif_csr_bridge_MSTR_LL_STATUS_reg::type_id::create("MSTR_LL_STATUS", this);
    MSTR_LL_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010C8, 32, 32'b00000000000000000000000000000000);
    MSTR_LL_STATUS.set_space_addr("MSG", 28'h80010C8);
    MSTR_LL_STATUS.set_space_addr("msg_bus_port", 'h21);
    MSTR_LL_STATUS.set_space_addr("MEM-SB",28'h80010C8);
    MSTR_LL_STATUS.set_space_addr("MEM", 28'h80010C8);
      MSTR_LL_STATUS.set_space("MEM");
      MSTR_LL_STATUS.set_msg_opcode("MEM-SB");
      MSTR_LL_STATUS.set_fid(4'h0, "MEM-SB");
  	MSTR_LL_STATUS.set_bar(4'h2, "MEM-SB");
      MSTR_LL_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSTR_LL_STATUS.set_user_attribute("diag_reg", "0");
      MSTR_LL_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      MSTR_LL_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      MSTR_LL_STATUS.set_test_reg(0);
      if ( $test$plusargs("MSTR_LL_STATUS:dont_test") ) MSTR_LL_STATUS.set_test_reg(1'b0);
      if (!add_reg( MSTR_LL_STATUS )) begin
        `sla_error(get_name(), ("Could not add register MSTR_LL_STATUS"));
      end
   MSTR_LL_STATUS.TPTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.TPTR"});
   MSTR_LL_STATUS.HPTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.HPTR"});
   MSTR_LL_STATUS.VALID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.VALID"});
   MSTR_LL_STATUS.HPA_PND.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.DRAIN"});
   MSTR_LL_STATUS.HPA_ERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.DRAIN"});
   MSTR_LL_STATUS.HPA_V.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_STATUS.DRAIN"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSTR_LL_CTL";
    `endif
    MSTR_LL_CTL = hqm_sif_csr_bridge_MSTR_LL_CTL_reg::type_id::create("MSTR_LL_CTL", this);
    MSTR_LL_CTL.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010CC, 32, 32'b00000000000000010000000000000000);
    MSTR_LL_CTL.set_space_addr("MSG", 28'h80010CC);
    MSTR_LL_CTL.set_space_addr("msg_bus_port", 'h21);
    MSTR_LL_CTL.set_space_addr("MEM-SB",28'h80010CC);
    MSTR_LL_CTL.set_space_addr("MEM", 28'h80010CC);
      MSTR_LL_CTL.set_space("MEM");
      MSTR_LL_CTL.set_msg_opcode("MEM-SB");
      MSTR_LL_CTL.set_fid(4'h0, "MEM-SB");
  	MSTR_LL_CTL.set_bar(4'h2, "MEM-SB");
      MSTR_LL_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      MSTR_LL_CTL.set_user_attribute("diag_reg", "0");
      MSTR_LL_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      MSTR_LL_CTL.set_user_attribute("SubnetPortID", "8'h00");
      MSTR_LL_CTL.set_test_reg(0);
      if ( $test$plusargs("MSTR_LL_CTL:dont_test") ) MSTR_LL_CTL.set_test_reg(1'b0);
      if (!add_reg( MSTR_LL_CTL )) begin
        `sla_error(get_name(), ("Could not add register MSTR_LL_CTL"));
      end
   MSTR_LL_CTL.PTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_CTL.PTR"});
   MSTR_LL_CTL.RD_LL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_CTL.RD_LL"});
   MSTR_LL_CTL.RD_RL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_CTL.RD_RL"});
   MSTR_LL_CTL.RD_BLK.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_CTL.RD_BLK"});
   MSTR_LL_CTL.CLR_HPA_ERR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.MSTR_LL_CTL.CLR_CQ"});
   MSTR_LL_CTL.CQ_LL_LIMIT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SCRBD_CTL.CQ_LL_LIMIT"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SIF_MSTR_DEBUG";
    `endif
    SIF_MSTR_DEBUG = hqm_sif_csr_bridge_SIF_MSTR_DEBUG_reg::type_id::create("SIF_MSTR_DEBUG", this);
    SIF_MSTR_DEBUG.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010D0, 32, 32'b00000000000000000000000000000000);
    SIF_MSTR_DEBUG.set_space_addr("MSG", 28'h80010D0);
    SIF_MSTR_DEBUG.set_space_addr("msg_bus_port", 'h21);
    SIF_MSTR_DEBUG.set_space_addr("MEM-SB",28'h80010D0);
    SIF_MSTR_DEBUG.set_space_addr("MEM", 28'h80010D0);
      SIF_MSTR_DEBUG.set_space("MEM");
      SIF_MSTR_DEBUG.set_msg_opcode("MEM-SB");
      SIF_MSTR_DEBUG.set_fid(4'h0, "MEM-SB");
  	SIF_MSTR_DEBUG.set_bar(4'h2, "MEM-SB");
      SIF_MSTR_DEBUG.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      SIF_MSTR_DEBUG.set_user_attribute("diag_reg", "0");
      SIF_MSTR_DEBUG.set_user_attribute("HqmIsFeatureReg", "1");
      SIF_MSTR_DEBUG.set_user_attribute("SubnetPortID", "8'h00");
      SIF_MSTR_DEBUG.set_test_reg(0);
      if ( $test$plusargs("SIF_MSTR_DEBUG:dont_test") ) SIF_MSTR_DEBUG.set_test_reg(1'b0);
      if (!add_reg( SIF_MSTR_DEBUG )) begin
        `sla_error(get_name(), ("Could not add register SIF_MSTR_DEBUG"));
      end
   SIF_MSTR_DEBUG.FABRIC_P_CREDITS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_MSTR_DEBUG.FABRIC_P_CREDITS"});
   SIF_MSTR_DEBUG.FABRIC_NP_CREDITS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_MSTR_DEBUG.FABRIC_NP_CREDITS"});
   SIF_MSTR_DEBUG.FABRIC_CPL_CREDITS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.SIF_MSTR_DEBUG.FABRIC_CPL_CREDITS"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IBCPL_ERR";
    `endif
    IBCPL_ERR = hqm_sif_csr_bridge_IBCPL_ERR_reg::type_id::create("IBCPL_ERR", this);
    IBCPL_ERR.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010F0, 32, 32'b00000000000000000000000000000000);
    IBCPL_ERR.set_space_addr("MSG", 28'h80010F0);
    IBCPL_ERR.set_space_addr("msg_bus_port", 'h21);
    IBCPL_ERR.set_space_addr("MEM-SB",28'h80010F0);
    IBCPL_ERR.set_space_addr("MEM", 28'h80010F0);
      IBCPL_ERR.set_space("MEM");
      IBCPL_ERR.set_msg_opcode("MEM-SB");
      IBCPL_ERR.set_fid(4'h0, "MEM-SB");
  	IBCPL_ERR.set_bar(4'h2, "MEM-SB");
      IBCPL_ERR.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IBCPL_ERR.set_user_attribute("diag_reg", "0");
      IBCPL_ERR.set_user_attribute("HqmIsFeatureReg", "0");
      IBCPL_ERR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("IBCPL_ERR:dont_test") ) IBCPL_ERR.set_test_reg(1'b0);
      if (!add_reg( IBCPL_ERR )) begin
        `sla_error(get_name(), ("Could not add register IBCPL_ERR"));
      end
   IBCPL_ERR.IBCPL_ABORT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_ERR.IBCPL_ABORT"});
   IBCPL_ERR.IBCPL_UR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_ERR.IBCPL_UR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IBCPL_ERR_HDR_0";
    `endif
    IBCPL_ERR_HDR_0 = hqm_sif_csr_bridge_IBCPL_ERR_HDR_0_reg::type_id::create("IBCPL_ERR_HDR_0", this);
    IBCPL_ERR_HDR_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010F4, 32, 32'b00000000000000000000000000000000);
    IBCPL_ERR_HDR_0.set_space_addr("MSG", 28'h80010F4);
    IBCPL_ERR_HDR_0.set_space_addr("msg_bus_port", 'h21);
    IBCPL_ERR_HDR_0.set_space_addr("MEM-SB",28'h80010F4);
    IBCPL_ERR_HDR_0.set_space_addr("MEM", 28'h80010F4);
      IBCPL_ERR_HDR_0.set_space("MEM");
      IBCPL_ERR_HDR_0.set_msg_opcode("MEM-SB");
      IBCPL_ERR_HDR_0.set_fid(4'h0, "MEM-SB");
  	IBCPL_ERR_HDR_0.set_bar(4'h2, "MEM-SB");
      IBCPL_ERR_HDR_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IBCPL_ERR_HDR_0.set_user_attribute("diag_reg", "0");
      IBCPL_ERR_HDR_0.set_user_attribute("HqmIsFeatureReg", "0");
      IBCPL_ERR_HDR_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("IBCPL_ERR_HDR_0:dont_test") ) IBCPL_ERR_HDR_0.set_test_reg(1'b0);
      if (!add_reg( IBCPL_ERR_HDR_0 )) begin
        `sla_error(get_name(), ("Could not add register IBCPL_ERR_HDR_0"));
      end
   IBCPL_ERR_HDR_0.HDR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_ERR_HDR_0.HDR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IBCPL_ERR_HDR_1";
    `endif
    IBCPL_ERR_HDR_1 = hqm_sif_csr_bridge_IBCPL_ERR_HDR_1_reg::type_id::create("IBCPL_ERR_HDR_1", this);
    IBCPL_ERR_HDR_1.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010F8, 32, 32'b00000000000000000000000000000000);
    IBCPL_ERR_HDR_1.set_space_addr("MSG", 28'h80010F8);
    IBCPL_ERR_HDR_1.set_space_addr("msg_bus_port", 'h21);
    IBCPL_ERR_HDR_1.set_space_addr("MEM-SB",28'h80010F8);
    IBCPL_ERR_HDR_1.set_space_addr("MEM", 28'h80010F8);
      IBCPL_ERR_HDR_1.set_space("MEM");
      IBCPL_ERR_HDR_1.set_msg_opcode("MEM-SB");
      IBCPL_ERR_HDR_1.set_fid(4'h0, "MEM-SB");
  	IBCPL_ERR_HDR_1.set_bar(4'h2, "MEM-SB");
      IBCPL_ERR_HDR_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IBCPL_ERR_HDR_1.set_user_attribute("diag_reg", "0");
      IBCPL_ERR_HDR_1.set_user_attribute("HqmIsFeatureReg", "0");
      IBCPL_ERR_HDR_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("IBCPL_ERR_HDR_1:dont_test") ) IBCPL_ERR_HDR_1.set_test_reg(1'b0);
      if (!add_reg( IBCPL_ERR_HDR_1 )) begin
        `sla_error(get_name(), ("Could not add register IBCPL_ERR_HDR_1"));
      end
   IBCPL_ERR_HDR_1.HDR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_ERR_HDR_1.HDR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IBCPL_ERR_HDR_2";
    `endif
    IBCPL_ERR_HDR_2 = hqm_sif_csr_bridge_IBCPL_ERR_HDR_2_reg::type_id::create("IBCPL_ERR_HDR_2", this);
    IBCPL_ERR_HDR_2.set_cfg(16'h0, 16'h0, 16'h0, 28'h80010FC, 32, 32'b00000000000000000000000000000000);
    IBCPL_ERR_HDR_2.set_space_addr("MSG", 28'h80010FC);
    IBCPL_ERR_HDR_2.set_space_addr("msg_bus_port", 'h21);
    IBCPL_ERR_HDR_2.set_space_addr("MEM-SB",28'h80010FC);
    IBCPL_ERR_HDR_2.set_space_addr("MEM", 28'h80010FC);
      IBCPL_ERR_HDR_2.set_space("MEM");
      IBCPL_ERR_HDR_2.set_msg_opcode("MEM-SB");
      IBCPL_ERR_HDR_2.set_fid(4'h0, "MEM-SB");
  	IBCPL_ERR_HDR_2.set_bar(4'h2, "MEM-SB");
      IBCPL_ERR_HDR_2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IBCPL_ERR_HDR_2.set_user_attribute("diag_reg", "0");
      IBCPL_ERR_HDR_2.set_user_attribute("HqmIsFeatureReg", "0");
      IBCPL_ERR_HDR_2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("IBCPL_ERR_HDR_2:dont_test") ) IBCPL_ERR_HDR_2.set_test_reg(1'b0);
      if (!add_reg( IBCPL_ERR_HDR_2 )) begin
        `sla_error(get_name(), ("Could not add register IBCPL_ERR_HDR_2"));
      end
   IBCPL_ERR_HDR_2.HDR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_ERR_HDR_2.HDR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_PHDR_FIFO_STATUS";
    `endif
    RI_PHDR_FIFO_STATUS = hqm_sif_csr_bridge_RI_PHDR_FIFO_STATUS_reg::type_id::create("RI_PHDR_FIFO_STATUS", this);
    RI_PHDR_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001214, 32, 32'b00000000000000000000000000010000);
    RI_PHDR_FIFO_STATUS.set_space_addr("MSG", 28'h8001214);
    RI_PHDR_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    RI_PHDR_FIFO_STATUS.set_space_addr("MEM-SB",28'h8001214);
    RI_PHDR_FIFO_STATUS.set_space_addr("MEM", 28'h8001214);
      RI_PHDR_FIFO_STATUS.set_space("MEM");
      RI_PHDR_FIFO_STATUS.set_msg_opcode("MEM-SB");
      RI_PHDR_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	RI_PHDR_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      RI_PHDR_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_PHDR_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      RI_PHDR_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      RI_PHDR_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("RI_PHDR_FIFO_STATUS:dont_test") ) RI_PHDR_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( RI_PHDR_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register RI_PHDR_FIFO_STATUS"));
      end
   RI_PHDR_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.UNDFLOW"});
   RI_PHDR_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.OVRFLOW"});
   RI_PHDR_FIFO_STATUS.RSVD32.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.RSVD32"});
   RI_PHDR_FIFO_STATUS.EMPTY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.EMPTY"});
   RI_PHDR_FIFO_STATUS.RSVD5.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.RSVD5"});
   RI_PHDR_FIFO_STATUS.AFULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.AFULL"});
   RI_PHDR_FIFO_STATUS.FULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.FULL"});
   RI_PHDR_FIFO_STATUS.DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PHDR_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_PDATA_FIFO_STATUS";
    `endif
    RI_PDATA_FIFO_STATUS = hqm_sif_csr_bridge_RI_PDATA_FIFO_STATUS_reg::type_id::create("RI_PDATA_FIFO_STATUS", this);
    RI_PDATA_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001218, 32, 32'b00000000000000000000000000010000);
    RI_PDATA_FIFO_STATUS.set_space_addr("MSG", 28'h8001218);
    RI_PDATA_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    RI_PDATA_FIFO_STATUS.set_space_addr("MEM-SB",28'h8001218);
    RI_PDATA_FIFO_STATUS.set_space_addr("MEM", 28'h8001218);
      RI_PDATA_FIFO_STATUS.set_space("MEM");
      RI_PDATA_FIFO_STATUS.set_msg_opcode("MEM-SB");
      RI_PDATA_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	RI_PDATA_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      RI_PDATA_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_PDATA_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      RI_PDATA_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      RI_PDATA_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("RI_PDATA_FIFO_STATUS:dont_test") ) RI_PDATA_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( RI_PDATA_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register RI_PDATA_FIFO_STATUS"));
      end
   RI_PDATA_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.UNDFLOW"});
   RI_PDATA_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.OVRFLOW"});
   RI_PDATA_FIFO_STATUS.RSVD32.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.RSVD32"});
   RI_PDATA_FIFO_STATUS.EMPTY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.EMPTY"});
   RI_PDATA_FIFO_STATUS.RSVD5.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.RSVD5"});
   RI_PDATA_FIFO_STATUS.AFULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.AFULL"});
   RI_PDATA_FIFO_STATUS.FULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.FULL"});
   RI_PDATA_FIFO_STATUS.DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_PDATA_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_NPHDR_FIFO_STATUS";
    `endif
    RI_NPHDR_FIFO_STATUS = hqm_sif_csr_bridge_RI_NPHDR_FIFO_STATUS_reg::type_id::create("RI_NPHDR_FIFO_STATUS", this);
    RI_NPHDR_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h800121C, 32, 32'b00000000000000000000000000010000);
    RI_NPHDR_FIFO_STATUS.set_space_addr("MSG", 28'h800121C);
    RI_NPHDR_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    RI_NPHDR_FIFO_STATUS.set_space_addr("MEM-SB",28'h800121C);
    RI_NPHDR_FIFO_STATUS.set_space_addr("MEM", 28'h800121C);
      RI_NPHDR_FIFO_STATUS.set_space("MEM");
      RI_NPHDR_FIFO_STATUS.set_msg_opcode("MEM-SB");
      RI_NPHDR_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	RI_NPHDR_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      RI_NPHDR_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_NPHDR_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      RI_NPHDR_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      RI_NPHDR_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("RI_NPHDR_FIFO_STATUS:dont_test") ) RI_NPHDR_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( RI_NPHDR_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register RI_NPHDR_FIFO_STATUS"));
      end
   RI_NPHDR_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.UNDFLOW"});
   RI_NPHDR_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.OVRFLOW"});
   RI_NPHDR_FIFO_STATUS.RSVD32.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.RSVD32"});
   RI_NPHDR_FIFO_STATUS.EMPTY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.EMPTY"});
   RI_NPHDR_FIFO_STATUS.RSVD5.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.RSVD5"});
   RI_NPHDR_FIFO_STATUS.AFULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.AFULL"});
   RI_NPHDR_FIFO_STATUS.FULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.FULL"});
   RI_NPHDR_FIFO_STATUS.DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPHDR_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_NPDATA_FIFO_STATUS";
    `endif
    RI_NPDATA_FIFO_STATUS = hqm_sif_csr_bridge_RI_NPDATA_FIFO_STATUS_reg::type_id::create("RI_NPDATA_FIFO_STATUS", this);
    RI_NPDATA_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001220, 32, 32'b00000000000000000000000000010000);
    RI_NPDATA_FIFO_STATUS.set_space_addr("MSG", 28'h8001220);
    RI_NPDATA_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    RI_NPDATA_FIFO_STATUS.set_space_addr("MEM-SB",28'h8001220);
    RI_NPDATA_FIFO_STATUS.set_space_addr("MEM", 28'h8001220);
      RI_NPDATA_FIFO_STATUS.set_space("MEM");
      RI_NPDATA_FIFO_STATUS.set_msg_opcode("MEM-SB");
      RI_NPDATA_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	RI_NPDATA_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      RI_NPDATA_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_NPDATA_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      RI_NPDATA_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      RI_NPDATA_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("RI_NPDATA_FIFO_STATUS:dont_test") ) RI_NPDATA_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( RI_NPDATA_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register RI_NPDATA_FIFO_STATUS"));
      end
   RI_NPDATA_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.UNDFLOW"});
   RI_NPDATA_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.OVRFLOW"});
   RI_NPDATA_FIFO_STATUS.RSVD32.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.RSVD32"});
   RI_NPDATA_FIFO_STATUS.EMPTY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.EMPTY"});
   RI_NPDATA_FIFO_STATUS.RSVD5.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.RSVD5"});
   RI_NPDATA_FIFO_STATUS.AFULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.AFULL"});
   RI_NPDATA_FIFO_STATUS.FULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.FULL"});
   RI_NPDATA_FIFO_STATUS.DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_NPDATA_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "RI_IOQ_FIFO_STATUS";
    `endif
    RI_IOQ_FIFO_STATUS = hqm_sif_csr_bridge_RI_IOQ_FIFO_STATUS_reg::type_id::create("RI_IOQ_FIFO_STATUS", this);
    RI_IOQ_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001224, 32, 32'b00000000000000000000000000010000);
    RI_IOQ_FIFO_STATUS.set_space_addr("MSG", 28'h8001224);
    RI_IOQ_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    RI_IOQ_FIFO_STATUS.set_space_addr("MEM-SB",28'h8001224);
    RI_IOQ_FIFO_STATUS.set_space_addr("MEM", 28'h8001224);
      RI_IOQ_FIFO_STATUS.set_space("MEM");
      RI_IOQ_FIFO_STATUS.set_msg_opcode("MEM-SB");
      RI_IOQ_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	RI_IOQ_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      RI_IOQ_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      RI_IOQ_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      RI_IOQ_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      RI_IOQ_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("RI_IOQ_FIFO_STATUS:dont_test") ) RI_IOQ_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( RI_IOQ_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register RI_IOQ_FIFO_STATUS"));
      end
   RI_IOQ_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.UNDFLOW"});
   RI_IOQ_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.OVRFLOW"});
   RI_IOQ_FIFO_STATUS.RSVD32.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.RSVD32"});
   RI_IOQ_FIFO_STATUS.EMPTY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.EMPTY"});
   RI_IOQ_FIFO_STATUS.RSVD5.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.RSVD5"});
   RI_IOQ_FIFO_STATUS.AFULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.AFULL"});
   RI_IOQ_FIFO_STATUS.FULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.FULL"});
   RI_IOQ_FIFO_STATUS.DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.RI_IOQ_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IBCPL_DATA_FIFO_STATUS";
    `endif
    IBCPL_DATA_FIFO_STATUS = hqm_sif_csr_bridge_IBCPL_DATA_FIFO_STATUS_reg::type_id::create("IBCPL_DATA_FIFO_STATUS", this);
    IBCPL_DATA_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h800122C, 32, 32'b00000000000000000000000000010000);
    IBCPL_DATA_FIFO_STATUS.set_space_addr("MSG", 28'h800122C);
    IBCPL_DATA_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    IBCPL_DATA_FIFO_STATUS.set_space_addr("MEM-SB",28'h800122C);
    IBCPL_DATA_FIFO_STATUS.set_space_addr("MEM", 28'h800122C);
      IBCPL_DATA_FIFO_STATUS.set_space("MEM");
      IBCPL_DATA_FIFO_STATUS.set_msg_opcode("MEM-SB");
      IBCPL_DATA_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	IBCPL_DATA_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      IBCPL_DATA_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IBCPL_DATA_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      IBCPL_DATA_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      IBCPL_DATA_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("IBCPL_DATA_FIFO_STATUS:dont_test") ) IBCPL_DATA_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( IBCPL_DATA_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register IBCPL_DATA_FIFO_STATUS"));
      end
   IBCPL_DATA_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.UNDFLOW"});
   IBCPL_DATA_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.OVRFLOW"});
   IBCPL_DATA_FIFO_STATUS.RSVD32.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.RSVD32"});
   IBCPL_DATA_FIFO_STATUS.EMPTY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.EMPTY"});
   IBCPL_DATA_FIFO_STATUS.RSVD5.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.RSVD5"});
   IBCPL_DATA_FIFO_STATUS.AFULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.AFULL"});
   IBCPL_DATA_FIFO_STATUS.FULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.FULL"});
   IBCPL_DATA_FIFO_STATUS.DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_DATA_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "OBCPL_FIFO_STATUS";
    `endif
    OBCPL_FIFO_STATUS = hqm_sif_csr_bridge_OBCPL_FIFO_STATUS_reg::type_id::create("OBCPL_FIFO_STATUS", this);
    OBCPL_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h800123C, 32, 32'b00000000000000000000000000010000);
    OBCPL_FIFO_STATUS.set_space_addr("MSG", 28'h800123C);
    OBCPL_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    OBCPL_FIFO_STATUS.set_space_addr("MEM-SB",28'h800123C);
    OBCPL_FIFO_STATUS.set_space_addr("MEM", 28'h800123C);
      OBCPL_FIFO_STATUS.set_space("MEM");
      OBCPL_FIFO_STATUS.set_msg_opcode("MEM-SB");
      OBCPL_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	OBCPL_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      OBCPL_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      OBCPL_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      OBCPL_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      OBCPL_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("OBCPL_FIFO_STATUS:dont_test") ) OBCPL_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( OBCPL_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register OBCPL_FIFO_STATUS"));
      end
   OBCPL_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.UNDFLOW"});
   OBCPL_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.OVRFLOW"});
   OBCPL_FIFO_STATUS.RSVD32.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.RSVD32"});
   OBCPL_FIFO_STATUS.EMPTY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.EMPTY"});
   OBCPL_FIFO_STATUS.RSVD5.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.RSVD5"});
   OBCPL_FIFO_STATUS.AFULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.AFULL"});
   OBCPL_FIFO_STATUS.FULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.FULL"});
   OBCPL_FIFO_STATUS.DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.OBCPL_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "IBCPL_HDR_FIFO_STATUS";
    `endif
    IBCPL_HDR_FIFO_STATUS = hqm_sif_csr_bridge_IBCPL_HDR_FIFO_STATUS_reg::type_id::create("IBCPL_HDR_FIFO_STATUS", this);
    IBCPL_HDR_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001240, 32, 32'b00000000000000000000000000010000);
    IBCPL_HDR_FIFO_STATUS.set_space_addr("MSG", 28'h8001240);
    IBCPL_HDR_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    IBCPL_HDR_FIFO_STATUS.set_space_addr("MEM-SB",28'h8001240);
    IBCPL_HDR_FIFO_STATUS.set_space_addr("MEM", 28'h8001240);
      IBCPL_HDR_FIFO_STATUS.set_space("MEM");
      IBCPL_HDR_FIFO_STATUS.set_msg_opcode("MEM-SB");
      IBCPL_HDR_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	IBCPL_HDR_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      IBCPL_HDR_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      IBCPL_HDR_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      IBCPL_HDR_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      IBCPL_HDR_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("IBCPL_HDR_FIFO_STATUS:dont_test") ) IBCPL_HDR_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( IBCPL_HDR_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register IBCPL_HDR_FIFO_STATUS"));
      end
   IBCPL_HDR_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.UNDFLOW"});
   IBCPL_HDR_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.OVRFLOW"});
   IBCPL_HDR_FIFO_STATUS.RSVD32.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.RSVD32"});
   IBCPL_HDR_FIFO_STATUS.EMPTY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.EMPTY"});
   IBCPL_HDR_FIFO_STATUS.RSVD5.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.RSVD5"});
   IBCPL_HDR_FIFO_STATUS.AFULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.AFULL"});
   IBCPL_HDR_FIFO_STATUS.FULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.FULL"});
   IBCPL_HDR_FIFO_STATUS.DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.IBCPL_HDR_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "P_RL_CQ_FIFO_STATUS";
    `endif
    P_RL_CQ_FIFO_STATUS = hqm_sif_csr_bridge_P_RL_CQ_FIFO_STATUS_reg::type_id::create("P_RL_CQ_FIFO_STATUS", this);
    P_RL_CQ_FIFO_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001244, 32, 32'b00000000000000000000000000010000);
    P_RL_CQ_FIFO_STATUS.set_space_addr("MSG", 28'h8001244);
    P_RL_CQ_FIFO_STATUS.set_space_addr("msg_bus_port", 'h21);
    P_RL_CQ_FIFO_STATUS.set_space_addr("MEM-SB",28'h8001244);
    P_RL_CQ_FIFO_STATUS.set_space_addr("MEM", 28'h8001244);
      P_RL_CQ_FIFO_STATUS.set_space("MEM");
      P_RL_CQ_FIFO_STATUS.set_msg_opcode("MEM-SB");
      P_RL_CQ_FIFO_STATUS.set_fid(4'h0, "MEM-SB");
  	P_RL_CQ_FIFO_STATUS.set_bar(4'h2, "MEM-SB");
      P_RL_CQ_FIFO_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      P_RL_CQ_FIFO_STATUS.set_user_attribute("diag_reg", "0");
      P_RL_CQ_FIFO_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      P_RL_CQ_FIFO_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("P_RL_CQ_FIFO_STATUS:dont_test") ) P_RL_CQ_FIFO_STATUS.set_test_reg(1'b0);
      if (!add_reg( P_RL_CQ_FIFO_STATUS )) begin
        `sla_error(get_name(), ("Could not add register P_RL_CQ_FIFO_STATUS"));
      end
   P_RL_CQ_FIFO_STATUS.UNDFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.UNDFLOW"});
   P_RL_CQ_FIFO_STATUS.OVRFLOW.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.OVRFLOW"});
   P_RL_CQ_FIFO_STATUS.RSVD32.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.RSVD32"});
   P_RL_CQ_FIFO_STATUS.EMPTY.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.EMPTY"});
   P_RL_CQ_FIFO_STATUS.RSVD5.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.RSVD5"});
   P_RL_CQ_FIFO_STATUS.AFULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.AFULL"});
   P_RL_CQ_FIFO_STATUS.FULL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.FULL"});
   P_RL_CQ_FIFO_STATUS.DEPTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.P_RL_CQ_FIFO_STATUS.DEPTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TGT_INIT_HCREDITS";
    `endif
    TGT_INIT_HCREDITS = hqm_sif_csr_bridge_TGT_INIT_HCREDITS_reg::type_id::create("TGT_INIT_HCREDITS", this);
    TGT_INIT_HCREDITS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001280, 32, 32'b00000000000000000000100000010000);
    TGT_INIT_HCREDITS.set_space_addr("MSG", 28'h8001280);
    TGT_INIT_HCREDITS.set_space_addr("msg_bus_port", 'h21);
    TGT_INIT_HCREDITS.set_space_addr("MEM-SB",28'h8001280);
    TGT_INIT_HCREDITS.set_space_addr("MEM", 28'h8001280);
      TGT_INIT_HCREDITS.set_space("MEM");
      TGT_INIT_HCREDITS.set_msg_opcode("MEM-SB");
      TGT_INIT_HCREDITS.set_fid(4'h0, "MEM-SB");
  	TGT_INIT_HCREDITS.set_bar(4'h2, "MEM-SB");
      TGT_INIT_HCREDITS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TGT_INIT_HCREDITS.set_user_attribute("diag_reg", "0");
      TGT_INIT_HCREDITS.set_user_attribute("HqmIsFeatureReg", "1");
      TGT_INIT_HCREDITS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("TGT_INIT_HCREDITS:dont_test") ) TGT_INIT_HCREDITS.set_test_reg(1'b0);
      if (!add_reg( TGT_INIT_HCREDITS )) begin
        `sla_error(get_name(), ("Could not add register TGT_INIT_HCREDITS"));
      end
   TGT_INIT_HCREDITS.INIT_HCREDITS_P.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_HCREDITS.INIT_HCREDITS_P"});
   TGT_INIT_HCREDITS.INIT_HCREDITS_NP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_HCREDITS.INIT_HCREDITS_NP"});
   TGT_INIT_HCREDITS.INIT_HCREDITS_CPL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_HCREDITS.INIT_HCREDITS_CPL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TGT_INIT_DCREDITS";
    `endif
    TGT_INIT_DCREDITS = hqm_sif_csr_bridge_TGT_INIT_DCREDITS_reg::type_id::create("TGT_INIT_DCREDITS", this);
    TGT_INIT_DCREDITS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001284, 32, 32'b00000000000000000000100000110000);
    TGT_INIT_DCREDITS.set_space_addr("MSG", 28'h8001284);
    TGT_INIT_DCREDITS.set_space_addr("msg_bus_port", 'h21);
    TGT_INIT_DCREDITS.set_space_addr("MEM-SB",28'h8001284);
    TGT_INIT_DCREDITS.set_space_addr("MEM", 28'h8001284);
      TGT_INIT_DCREDITS.set_space("MEM");
      TGT_INIT_DCREDITS.set_msg_opcode("MEM-SB");
      TGT_INIT_DCREDITS.set_fid(4'h0, "MEM-SB");
  	TGT_INIT_DCREDITS.set_bar(4'h2, "MEM-SB");
      TGT_INIT_DCREDITS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TGT_INIT_DCREDITS.set_user_attribute("diag_reg", "0");
      TGT_INIT_DCREDITS.set_user_attribute("HqmIsFeatureReg", "1");
      TGT_INIT_DCREDITS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("TGT_INIT_DCREDITS:dont_test") ) TGT_INIT_DCREDITS.set_test_reg(1'b0);
      if (!add_reg( TGT_INIT_DCREDITS )) begin
        `sla_error(get_name(), ("Could not add register TGT_INIT_DCREDITS"));
      end
   TGT_INIT_DCREDITS.INIT_DCREDITS_P.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_DCREDITS.INIT_DCREDITS_P"});
   TGT_INIT_DCREDITS.INIT_DCREDITS_NP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_DCREDITS.INIT_DCREDITS_NP"});
   TGT_INIT_DCREDITS.INIT_DCREDITS_CPL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_INIT_DCREDITS.INIT_DCREDITS_CPL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TGT_REM_HCREDITS";
    `endif
    TGT_REM_HCREDITS = hqm_sif_csr_bridge_TGT_REM_HCREDITS_reg::type_id::create("TGT_REM_HCREDITS", this);
    TGT_REM_HCREDITS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001288, 32, 32'b00000000000000000000100000010000);
    TGT_REM_HCREDITS.set_space_addr("MSG", 28'h8001288);
    TGT_REM_HCREDITS.set_space_addr("msg_bus_port", 'h21);
    TGT_REM_HCREDITS.set_space_addr("MEM-SB",28'h8001288);
    TGT_REM_HCREDITS.set_space_addr("MEM", 28'h8001288);
      TGT_REM_HCREDITS.set_space("MEM");
      TGT_REM_HCREDITS.set_msg_opcode("MEM-SB");
      TGT_REM_HCREDITS.set_fid(4'h0, "MEM-SB");
  	TGT_REM_HCREDITS.set_bar(4'h2, "MEM-SB");
      TGT_REM_HCREDITS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TGT_REM_HCREDITS.set_user_attribute("diag_reg", "0");
      TGT_REM_HCREDITS.set_user_attribute("HqmIsFeatureReg", "1");
      TGT_REM_HCREDITS.set_user_attribute("SubnetPortID", "8'h00");
      TGT_REM_HCREDITS.set_test_reg(0);
      if ( $test$plusargs("TGT_REM_HCREDITS:dont_test") ) TGT_REM_HCREDITS.set_test_reg(1'b0);
      if (!add_reg( TGT_REM_HCREDITS )) begin
        `sla_error(get_name(), ("Could not add register TGT_REM_HCREDITS"));
      end
   TGT_REM_HCREDITS.REM_HCREDITS_P.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_HCREDITS.REM_HCREDITS_P"});
   TGT_REM_HCREDITS.REM_HCREDITS_NP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_HCREDITS.REM_HCREDITS_NP"});
   TGT_REM_HCREDITS.REM_HCREDITS_CPL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_HCREDITS.REM_HCREDITS_CPL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TGT_REM_DCREDITS";
    `endif
    TGT_REM_DCREDITS = hqm_sif_csr_bridge_TGT_REM_DCREDITS_reg::type_id::create("TGT_REM_DCREDITS", this);
    TGT_REM_DCREDITS.set_cfg(16'h0, 16'h0, 16'h0, 28'h800128C, 32, 32'b00000000000000000000100000110000);
    TGT_REM_DCREDITS.set_space_addr("MSG", 28'h800128C);
    TGT_REM_DCREDITS.set_space_addr("msg_bus_port", 'h21);
    TGT_REM_DCREDITS.set_space_addr("MEM-SB",28'h800128C);
    TGT_REM_DCREDITS.set_space_addr("MEM", 28'h800128C);
      TGT_REM_DCREDITS.set_space("MEM");
      TGT_REM_DCREDITS.set_msg_opcode("MEM-SB");
      TGT_REM_DCREDITS.set_fid(4'h0, "MEM-SB");
  	TGT_REM_DCREDITS.set_bar(4'h2, "MEM-SB");
      TGT_REM_DCREDITS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TGT_REM_DCREDITS.set_user_attribute("diag_reg", "0");
      TGT_REM_DCREDITS.set_user_attribute("HqmIsFeatureReg", "1");
      TGT_REM_DCREDITS.set_user_attribute("SubnetPortID", "8'h00");
      TGT_REM_DCREDITS.set_test_reg(0);
      if ( $test$plusargs("TGT_REM_DCREDITS:dont_test") ) TGT_REM_DCREDITS.set_test_reg(1'b0);
      if (!add_reg( TGT_REM_DCREDITS )) begin
        `sla_error(get_name(), ("Could not add register TGT_REM_DCREDITS"));
      end
   TGT_REM_DCREDITS.REM_DCREDITS_P.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_DCREDITS.REM_DCREDITS_P"});
   TGT_REM_DCREDITS.REM_DCREDITS_NP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_DCREDITS.REM_DCREDITS_NP"});
   TGT_REM_DCREDITS.REM_DCREDITS_CPL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_REM_DCREDITS.REM_DCREDITS_CPL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TGT_RET_HCREDITS";
    `endif
    TGT_RET_HCREDITS = hqm_sif_csr_bridge_TGT_RET_HCREDITS_reg::type_id::create("TGT_RET_HCREDITS", this);
    TGT_RET_HCREDITS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001290, 32, 32'b00000000000000000000000000000000);
    TGT_RET_HCREDITS.set_space_addr("MSG", 28'h8001290);
    TGT_RET_HCREDITS.set_space_addr("msg_bus_port", 'h21);
    TGT_RET_HCREDITS.set_space_addr("MEM-SB",28'h8001290);
    TGT_RET_HCREDITS.set_space_addr("MEM", 28'h8001290);
      TGT_RET_HCREDITS.set_space("MEM");
      TGT_RET_HCREDITS.set_msg_opcode("MEM-SB");
      TGT_RET_HCREDITS.set_fid(4'h0, "MEM-SB");
  	TGT_RET_HCREDITS.set_bar(4'h2, "MEM-SB");
      TGT_RET_HCREDITS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TGT_RET_HCREDITS.set_user_attribute("diag_reg", "0");
      TGT_RET_HCREDITS.set_user_attribute("HqmIsFeatureReg", "1");
      TGT_RET_HCREDITS.set_user_attribute("SubnetPortID", "8'h00");
      TGT_RET_HCREDITS.set_test_reg(0);
      if ( $test$plusargs("TGT_RET_HCREDITS:dont_test") ) TGT_RET_HCREDITS.set_test_reg(1'b0);
      if (!add_reg( TGT_RET_HCREDITS )) begin
        `sla_error(get_name(), ("Could not add register TGT_RET_HCREDITS"));
      end
   TGT_RET_HCREDITS.RET_HCREDITS_P.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_HCREDITS.RET_HCREDITS_P"});
   TGT_RET_HCREDITS.RET_HCREDITS_NP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_HCREDITS.RET_HCREDITS_NP"});
   TGT_RET_HCREDITS.RET_HCREDITS_CPL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_HCREDITS.RET_HCREDITS_CPL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "TGT_RET_DCREDITS";
    `endif
    TGT_RET_DCREDITS = hqm_sif_csr_bridge_TGT_RET_DCREDITS_reg::type_id::create("TGT_RET_DCREDITS", this);
    TGT_RET_DCREDITS.set_cfg(16'h0, 16'h0, 16'h0, 28'h8001294, 32, 32'b00000000000000000000000000000000);
    TGT_RET_DCREDITS.set_space_addr("MSG", 28'h8001294);
    TGT_RET_DCREDITS.set_space_addr("msg_bus_port", 'h21);
    TGT_RET_DCREDITS.set_space_addr("MEM-SB",28'h8001294);
    TGT_RET_DCREDITS.set_space_addr("MEM", 28'h8001294);
      TGT_RET_DCREDITS.set_space("MEM");
      TGT_RET_DCREDITS.set_msg_opcode("MEM-SB");
      TGT_RET_DCREDITS.set_fid(4'h0, "MEM-SB");
  	TGT_RET_DCREDITS.set_bar(4'h2, "MEM-SB");
      TGT_RET_DCREDITS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      TGT_RET_DCREDITS.set_user_attribute("diag_reg", "0");
      TGT_RET_DCREDITS.set_user_attribute("HqmIsFeatureReg", "1");
      TGT_RET_DCREDITS.set_user_attribute("SubnetPortID", "8'h00");
      TGT_RET_DCREDITS.set_test_reg(0);
      if ( $test$plusargs("TGT_RET_DCREDITS:dont_test") ) TGT_RET_DCREDITS.set_test_reg(1'b0);
      if (!add_reg( TGT_RET_DCREDITS )) begin
        `sla_error(get_name(), ("Could not add register TGT_RET_DCREDITS"));
      end
   TGT_RET_DCREDITS.RET_DCREDITS_P.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_DCREDITS.RET_DCREDITS_P"});
   TGT_RET_DCREDITS.RET_DCREDITS_NP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_DCREDITS.RET_DCREDITS_NP"});
   TGT_RET_DCREDITS.RET_DCREDITS_CPL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.TGT_RET_DCREDITS.RET_DCREDITS_CPL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_CONFIGURATION0[0]";
    `endif
    AW_SMON_CONFIGURATION0[0] = hqm_sif_csr_bridge_AW_SMON_CONFIGURATION0_reg::type_id::create("AW_SMON_CONFIGURATION0[0]", this);
    AW_SMON_CONFIGURATION0[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002000, 32, 32'b01000000000000000000000000000000);
    AW_SMON_CONFIGURATION0[0].set_space_addr("MSG", 28'h8002000);
    AW_SMON_CONFIGURATION0[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_CONFIGURATION0[0].set_space_addr("MEM-SB",28'h8002000);
    AW_SMON_CONFIGURATION0[0].set_space_addr("MEM", 28'h8002000);
      AW_SMON_CONFIGURATION0[0].set_space("MEM");
      AW_SMON_CONFIGURATION0[0].set_msg_opcode("MEM-SB");
      AW_SMON_CONFIGURATION0[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_CONFIGURATION0[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_CONFIGURATION0[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_CONFIGURATION0[0].set_user_attribute("diag_reg", "0");
      AW_SMON_CONFIGURATION0[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_CONFIGURATION0[0].set_user_attribute("SubnetPortID", "8'h00");
      AW_SMON_CONFIGURATION0[0].set_test_reg(0);
      if ( $test$plusargs("AW_SMON_CONFIGURATION0[0]:dont_test") ) AW_SMON_CONFIGURATION0[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_CONFIGURATION0[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_CONFIGURATION0[0]"));
      end
   AW_SMON_CONFIGURATION0[0].SMON_ENABLE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[0:0]"});
   AW_SMON_CONFIGURATION0[0].SMON_ENABLE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].SMON0_FUNCTION.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[6:4]"});
   AW_SMON_CONFIGURATION0[0].SMON0_FUNCTION.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].SMON0_FUNCTION_COMPARE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[7:7]"});
   AW_SMON_CONFIGURATION0[0].SMON0_FUNCTION_COMPARE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].SMON1_FUNCTION.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[10:8]"});
   AW_SMON_CONFIGURATION0[0].SMON1_FUNCTION.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].SMON1_FUNCTION_COMPARE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[11:11]"});
   AW_SMON_CONFIGURATION0[0].SMON1_FUNCTION_COMPARE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].SMON_MODE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[15:12]"});
   AW_SMON_CONFIGURATION0[0].SMON_MODE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].STOPCOUNTEROVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[16:16]"});
   AW_SMON_CONFIGURATION0[0].STOPCOUNTEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].INTCOUNTEROVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[17:17]"});
   AW_SMON_CONFIGURATION0[0].INTCOUNTEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].STATCOUNTER0OVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[18:18]"});
   AW_SMON_CONFIGURATION0[0].STATCOUNTER0OVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].STATCOUNTER1OVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[19:19]"});
   AW_SMON_CONFIGURATION0[0].STATCOUNTER1OVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].STOPTIMEROVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[20:20]"});
   AW_SMON_CONFIGURATION0[0].STOPTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].INTTIMEROVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[21:21]"});
   AW_SMON_CONFIGURATION0[0].INTTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].STATTIMEROVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[22:22]"});
   AW_SMON_CONFIGURATION0[0].STATTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].TIMER_PRESCALE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg0_q[28:24]"});
   AW_SMON_CONFIGURATION0[0].TIMER_PRESCALE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[0].VERSION.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_CONFIGURATION1[0]";
    `endif
    AW_SMON_CONFIGURATION1[0] = hqm_sif_csr_bridge_AW_SMON_CONFIGURATION1_reg::type_id::create("AW_SMON_CONFIGURATION1[0]", this);
    AW_SMON_CONFIGURATION1[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002004, 32, 32'b00000000000000000000000000000000);
    AW_SMON_CONFIGURATION1[0].set_space_addr("MSG", 28'h8002004);
    AW_SMON_CONFIGURATION1[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_CONFIGURATION1[0].set_space_addr("MEM-SB",28'h8002004);
    AW_SMON_CONFIGURATION1[0].set_space_addr("MEM", 28'h8002004);
      AW_SMON_CONFIGURATION1[0].set_space("MEM");
      AW_SMON_CONFIGURATION1[0].set_msg_opcode("MEM-SB");
      AW_SMON_CONFIGURATION1[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_CONFIGURATION1[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_CONFIGURATION1[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_CONFIGURATION1[0].set_user_attribute("diag_reg", "0");
      AW_SMON_CONFIGURATION1[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_CONFIGURATION1[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_CONFIGURATION1[0]:dont_test") ) AW_SMON_CONFIGURATION1[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_CONFIGURATION1[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_CONFIGURATION1[0]"));
      end
   AW_SMON_CONFIGURATION1[0].MODE0.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg1_q[7:0]"});
   AW_SMON_CONFIGURATION1[0].MODE0.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION1[0].MODE1.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg1_q[15:8]"});
   AW_SMON_CONFIGURATION1[0].MODE1.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION1[0].RSVD.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cfg1_q[31:16]"});
   AW_SMON_CONFIGURATION1[0].RSVD.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMPARE0[0]";
    `endif
    AW_SMON_COMPARE0[0] = hqm_sif_csr_bridge_AW_SMON_COMPARE0_reg::type_id::create("AW_SMON_COMPARE0[0]", this);
    AW_SMON_COMPARE0[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002008, 32, 32'b00000000000000000000000000000000);
    AW_SMON_COMPARE0[0].set_space_addr("MSG", 28'h8002008);
    AW_SMON_COMPARE0[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMPARE0[0].set_space_addr("MEM-SB",28'h8002008);
    AW_SMON_COMPARE0[0].set_space_addr("MEM", 28'h8002008);
      AW_SMON_COMPARE0[0].set_space("MEM");
      AW_SMON_COMPARE0[0].set_msg_opcode("MEM-SB");
      AW_SMON_COMPARE0[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMPARE0[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMPARE0[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMPARE0[0].set_user_attribute("diag_reg", "0");
      AW_SMON_COMPARE0[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMPARE0[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMPARE0[0]:dont_test") ) AW_SMON_COMPARE0[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMPARE0[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMPARE0[0]"));
      end
   AW_SMON_COMPARE0[0].COMPARE0.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_comp0_q[31:0]"});
   AW_SMON_COMPARE0[0].COMPARE0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMPARE1[0]";
    `endif
    AW_SMON_COMPARE1[0] = hqm_sif_csr_bridge_AW_SMON_COMPARE1_reg::type_id::create("AW_SMON_COMPARE1[0]", this);
    AW_SMON_COMPARE1[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h800200C, 32, 32'b00000000000000000000000000000000);
    AW_SMON_COMPARE1[0].set_space_addr("MSG", 28'h800200C);
    AW_SMON_COMPARE1[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMPARE1[0].set_space_addr("MEM-SB",28'h800200C);
    AW_SMON_COMPARE1[0].set_space_addr("MEM", 28'h800200C);
      AW_SMON_COMPARE1[0].set_space("MEM");
      AW_SMON_COMPARE1[0].set_msg_opcode("MEM-SB");
      AW_SMON_COMPARE1[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMPARE1[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMPARE1[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMPARE1[0].set_user_attribute("diag_reg", "0");
      AW_SMON_COMPARE1[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMPARE1[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMPARE1[0]:dont_test") ) AW_SMON_COMPARE1[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMPARE1[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMPARE1[0]"));
      end
   AW_SMON_COMPARE1[0].COMPARE1.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_comp1_q[31:0]"});
   AW_SMON_COMPARE1[0].COMPARE1.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_ACTIVITYCOUNTER0[0]";
    `endif
    AW_SMON_ACTIVITYCOUNTER0[0] = hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg::type_id::create("AW_SMON_ACTIVITYCOUNTER0[0]", this);
    AW_SMON_ACTIVITYCOUNTER0[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002010, 32, 32'b00000000000000000000000000000000);
    AW_SMON_ACTIVITYCOUNTER0[0].set_space_addr("MSG", 28'h8002010);
    AW_SMON_ACTIVITYCOUNTER0[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_ACTIVITYCOUNTER0[0].set_space_addr("MEM-SB",28'h8002010);
    AW_SMON_ACTIVITYCOUNTER0[0].set_space_addr("MEM", 28'h8002010);
      AW_SMON_ACTIVITYCOUNTER0[0].set_space("MEM");
      AW_SMON_ACTIVITYCOUNTER0[0].set_msg_opcode("MEM-SB");
      AW_SMON_ACTIVITYCOUNTER0[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_ACTIVITYCOUNTER0[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_ACTIVITYCOUNTER0[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_ACTIVITYCOUNTER0[0].set_user_attribute("diag_reg", "0");
      AW_SMON_ACTIVITYCOUNTER0[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_ACTIVITYCOUNTER0[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_ACTIVITYCOUNTER0[0]:dont_test") ) AW_SMON_ACTIVITYCOUNTER0[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_ACTIVITYCOUNTER0[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_ACTIVITYCOUNTER0[0]"));
      end
   AW_SMON_ACTIVITYCOUNTER0[0].COUNTER0.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cnt0_q[31:0]"});
   AW_SMON_ACTIVITYCOUNTER0[0].COUNTER0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_ACTIVITYCOUNTER1[0]";
    `endif
    AW_SMON_ACTIVITYCOUNTER1[0] = hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg::type_id::create("AW_SMON_ACTIVITYCOUNTER1[0]", this);
    AW_SMON_ACTIVITYCOUNTER1[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002014, 32, 32'b00000000000000000000000000000000);
    AW_SMON_ACTIVITYCOUNTER1[0].set_space_addr("MSG", 28'h8002014);
    AW_SMON_ACTIVITYCOUNTER1[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_ACTIVITYCOUNTER1[0].set_space_addr("MEM-SB",28'h8002014);
    AW_SMON_ACTIVITYCOUNTER1[0].set_space_addr("MEM", 28'h8002014);
      AW_SMON_ACTIVITYCOUNTER1[0].set_space("MEM");
      AW_SMON_ACTIVITYCOUNTER1[0].set_msg_opcode("MEM-SB");
      AW_SMON_ACTIVITYCOUNTER1[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_ACTIVITYCOUNTER1[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_ACTIVITYCOUNTER1[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_ACTIVITYCOUNTER1[0].set_user_attribute("diag_reg", "0");
      AW_SMON_ACTIVITYCOUNTER1[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_ACTIVITYCOUNTER1[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_ACTIVITYCOUNTER1[0]:dont_test") ) AW_SMON_ACTIVITYCOUNTER1[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_ACTIVITYCOUNTER1[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_ACTIVITYCOUNTER1[0]"));
      end
   AW_SMON_ACTIVITYCOUNTER1[0].COUNTER1.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_cnt1_q[31:0]"});
   AW_SMON_ACTIVITYCOUNTER1[0].COUNTER1.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_TIMER[0]";
    `endif
    AW_SMON_TIMER[0] = hqm_sif_csr_bridge_AW_SMON_TIMER_reg::type_id::create("AW_SMON_TIMER[0]", this);
    AW_SMON_TIMER[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002018, 32, 32'b00000000000000000000000000000000);
    AW_SMON_TIMER[0].set_space_addr("MSG", 28'h8002018);
    AW_SMON_TIMER[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_TIMER[0].set_space_addr("MEM-SB",28'h8002018);
    AW_SMON_TIMER[0].set_space_addr("MEM", 28'h8002018);
      AW_SMON_TIMER[0].set_space("MEM");
      AW_SMON_TIMER[0].set_msg_opcode("MEM-SB");
      AW_SMON_TIMER[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_TIMER[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_TIMER[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_TIMER[0].set_user_attribute("diag_reg", "0");
      AW_SMON_TIMER[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_TIMER[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_TIMER[0]:dont_test") ) AW_SMON_TIMER[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_TIMER[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_TIMER[0]"));
      end
   AW_SMON_TIMER[0].TIMER_VAL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_timer_q[31:0]"});
   AW_SMON_TIMER[0].TIMER_VAL.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_MAXIMUM_TIMER[0]";
    `endif
    AW_SMON_MAXIMUM_TIMER[0] = hqm_sif_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg::type_id::create("AW_SMON_MAXIMUM_TIMER[0]", this);
    AW_SMON_MAXIMUM_TIMER[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h800201C, 32, 32'b00000000000000000000000000000000);
    AW_SMON_MAXIMUM_TIMER[0].set_space_addr("MSG", 28'h800201C);
    AW_SMON_MAXIMUM_TIMER[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_MAXIMUM_TIMER[0].set_space_addr("MEM-SB",28'h800201C);
    AW_SMON_MAXIMUM_TIMER[0].set_space_addr("MEM", 28'h800201C);
      AW_SMON_MAXIMUM_TIMER[0].set_space("MEM");
      AW_SMON_MAXIMUM_TIMER[0].set_msg_opcode("MEM-SB");
      AW_SMON_MAXIMUM_TIMER[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_MAXIMUM_TIMER[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_MAXIMUM_TIMER[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_MAXIMUM_TIMER[0].set_user_attribute("diag_reg", "0");
      AW_SMON_MAXIMUM_TIMER[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_MAXIMUM_TIMER[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_MAXIMUM_TIMER[0]:dont_test") ) AW_SMON_MAXIMUM_TIMER[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_MAXIMUM_TIMER[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_MAXIMUM_TIMER[0]"));
      end
   AW_SMON_MAXIMUM_TIMER[0].MAXVALUE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_maxval_q[31:0]"});
   AW_SMON_MAXIMUM_TIMER[0].MAXVALUE.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMP_MASK0[0]";
    `endif
    AW_SMON_COMP_MASK0[0] = hqm_sif_csr_bridge_AW_SMON_COMP_MASK0_reg::type_id::create("AW_SMON_COMP_MASK0[0]", this);
    AW_SMON_COMP_MASK0[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002020, 32, 32'b11111111111111111111111111111111);
    AW_SMON_COMP_MASK0[0].set_space_addr("MSG", 28'h8002020);
    AW_SMON_COMP_MASK0[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMP_MASK0[0].set_space_addr("MEM-SB",28'h8002020);
    AW_SMON_COMP_MASK0[0].set_space_addr("MEM", 28'h8002020);
      AW_SMON_COMP_MASK0[0].set_space("MEM");
      AW_SMON_COMP_MASK0[0].set_msg_opcode("MEM-SB");
      AW_SMON_COMP_MASK0[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMP_MASK0[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMP_MASK0[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMP_MASK0[0].set_user_attribute("diag_reg", "0");
      AW_SMON_COMP_MASK0[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMP_MASK0[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMP_MASK0[0]:dont_test") ) AW_SMON_COMP_MASK0[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMP_MASK0[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMP_MASK0[0]"));
      end
   AW_SMON_COMP_MASK0[0].COMP_MASK0.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_mask0_q[31:0]"});
   AW_SMON_COMP_MASK0[0].COMP_MASK0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMP_MASK1[0]";
    `endif
    AW_SMON_COMP_MASK1[0] = hqm_sif_csr_bridge_AW_SMON_COMP_MASK1_reg::type_id::create("AW_SMON_COMP_MASK1[0]", this);
    AW_SMON_COMP_MASK1[0].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002024, 32, 32'b11111111111111111111111111111111);
    AW_SMON_COMP_MASK1[0].set_space_addr("MSG", 28'h8002024);
    AW_SMON_COMP_MASK1[0].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMP_MASK1[0].set_space_addr("MEM-SB",28'h8002024);
    AW_SMON_COMP_MASK1[0].set_space_addr("MEM", 28'h8002024);
      AW_SMON_COMP_MASK1[0].set_space("MEM");
      AW_SMON_COMP_MASK1[0].set_msg_opcode("MEM-SB");
      AW_SMON_COMP_MASK1[0].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMP_MASK1[0].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMP_MASK1[0].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMP_MASK1[0].set_user_attribute("diag_reg", "0");
      AW_SMON_COMP_MASK1[0].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMP_MASK1[0].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMP_MASK1[0]:dont_test") ) AW_SMON_COMP_MASK1[0].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMP_MASK1[0] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMP_MASK1[0]"));
      end
   AW_SMON_COMP_MASK1[0].COMP_MASK1.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon0.reg_smon_mask1_q[31:0]"});
   AW_SMON_COMP_MASK1[0].COMP_MASK1.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_CONFIGURATION0[1]";
    `endif
    AW_SMON_CONFIGURATION0[1] = hqm_sif_csr_bridge_AW_SMON_CONFIGURATION0_reg::type_id::create("AW_SMON_CONFIGURATION0[1]", this);
    AW_SMON_CONFIGURATION0[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002040, 32, 32'b01000000000000000000000000000000);
    AW_SMON_CONFIGURATION0[1].set_space_addr("MSG", 28'h8002040);
    AW_SMON_CONFIGURATION0[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_CONFIGURATION0[1].set_space_addr("MEM-SB",28'h8002040);
    AW_SMON_CONFIGURATION0[1].set_space_addr("MEM", 28'h8002040);
      AW_SMON_CONFIGURATION0[1].set_space("MEM");
      AW_SMON_CONFIGURATION0[1].set_msg_opcode("MEM-SB");
      AW_SMON_CONFIGURATION0[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_CONFIGURATION0[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_CONFIGURATION0[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_CONFIGURATION0[1].set_user_attribute("diag_reg", "0");
      AW_SMON_CONFIGURATION0[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_CONFIGURATION0[1].set_user_attribute("SubnetPortID", "8'h00");
      AW_SMON_CONFIGURATION0[1].set_test_reg(0);
      if ( $test$plusargs("AW_SMON_CONFIGURATION0[1]:dont_test") ) AW_SMON_CONFIGURATION0[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_CONFIGURATION0[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_CONFIGURATION0[1]"));
      end
   AW_SMON_CONFIGURATION0[1].SMON_ENABLE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[0:0]"});
   AW_SMON_CONFIGURATION0[1].SMON_ENABLE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].SMON0_FUNCTION.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[6:4]"});
   AW_SMON_CONFIGURATION0[1].SMON0_FUNCTION.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].SMON0_FUNCTION_COMPARE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[7:7]"});
   AW_SMON_CONFIGURATION0[1].SMON0_FUNCTION_COMPARE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].SMON1_FUNCTION.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[10:8]"});
   AW_SMON_CONFIGURATION0[1].SMON1_FUNCTION.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].SMON1_FUNCTION_COMPARE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[11:11]"});
   AW_SMON_CONFIGURATION0[1].SMON1_FUNCTION_COMPARE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].SMON_MODE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[15:12]"});
   AW_SMON_CONFIGURATION0[1].SMON_MODE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].STOPCOUNTEROVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[16:16]"});
   AW_SMON_CONFIGURATION0[1].STOPCOUNTEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].INTCOUNTEROVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[17:17]"});
   AW_SMON_CONFIGURATION0[1].INTCOUNTEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].STATCOUNTER0OVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[18:18]"});
   AW_SMON_CONFIGURATION0[1].STATCOUNTER0OVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].STATCOUNTER1OVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[19:19]"});
   AW_SMON_CONFIGURATION0[1].STATCOUNTER1OVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].STOPTIMEROVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[20:20]"});
   AW_SMON_CONFIGURATION0[1].STOPTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].INTTIMEROVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[21:21]"});
   AW_SMON_CONFIGURATION0[1].INTTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].STATTIMEROVFL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[22:22]"});
   AW_SMON_CONFIGURATION0[1].STATTIMEROVFL.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].TIMER_PRESCALE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg0_q[28:24]"});
   AW_SMON_CONFIGURATION0[1].TIMER_PRESCALE.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION0[1].VERSION.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_CONFIGURATION1[1]";
    `endif
    AW_SMON_CONFIGURATION1[1] = hqm_sif_csr_bridge_AW_SMON_CONFIGURATION1_reg::type_id::create("AW_SMON_CONFIGURATION1[1]", this);
    AW_SMON_CONFIGURATION1[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002044, 32, 32'b00000000000000000000000000000000);
    AW_SMON_CONFIGURATION1[1].set_space_addr("MSG", 28'h8002044);
    AW_SMON_CONFIGURATION1[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_CONFIGURATION1[1].set_space_addr("MEM-SB",28'h8002044);
    AW_SMON_CONFIGURATION1[1].set_space_addr("MEM", 28'h8002044);
      AW_SMON_CONFIGURATION1[1].set_space("MEM");
      AW_SMON_CONFIGURATION1[1].set_msg_opcode("MEM-SB");
      AW_SMON_CONFIGURATION1[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_CONFIGURATION1[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_CONFIGURATION1[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_CONFIGURATION1[1].set_user_attribute("diag_reg", "0");
      AW_SMON_CONFIGURATION1[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_CONFIGURATION1[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_CONFIGURATION1[1]:dont_test") ) AW_SMON_CONFIGURATION1[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_CONFIGURATION1[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_CONFIGURATION1[1]"));
      end
   AW_SMON_CONFIGURATION1[1].MODE0.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg1_q[7:0]"});
   AW_SMON_CONFIGURATION1[1].MODE0.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION1[1].MODE1.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg1_q[15:8]"});
   AW_SMON_CONFIGURATION1[1].MODE1.set_logical_path("HQMID");
   AW_SMON_CONFIGURATION1[1].RSVD.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cfg1_q[31:16]"});
   AW_SMON_CONFIGURATION1[1].RSVD.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMPARE0[1]";
    `endif
    AW_SMON_COMPARE0[1] = hqm_sif_csr_bridge_AW_SMON_COMPARE0_reg::type_id::create("AW_SMON_COMPARE0[1]", this);
    AW_SMON_COMPARE0[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002048, 32, 32'b00000000000000000000000000000000);
    AW_SMON_COMPARE0[1].set_space_addr("MSG", 28'h8002048);
    AW_SMON_COMPARE0[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMPARE0[1].set_space_addr("MEM-SB",28'h8002048);
    AW_SMON_COMPARE0[1].set_space_addr("MEM", 28'h8002048);
      AW_SMON_COMPARE0[1].set_space("MEM");
      AW_SMON_COMPARE0[1].set_msg_opcode("MEM-SB");
      AW_SMON_COMPARE0[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMPARE0[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMPARE0[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMPARE0[1].set_user_attribute("diag_reg", "0");
      AW_SMON_COMPARE0[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMPARE0[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMPARE0[1]:dont_test") ) AW_SMON_COMPARE0[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMPARE0[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMPARE0[1]"));
      end
   AW_SMON_COMPARE0[1].COMPARE0.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_comp0_q[31:0]"});
   AW_SMON_COMPARE0[1].COMPARE0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMPARE1[1]";
    `endif
    AW_SMON_COMPARE1[1] = hqm_sif_csr_bridge_AW_SMON_COMPARE1_reg::type_id::create("AW_SMON_COMPARE1[1]", this);
    AW_SMON_COMPARE1[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h800204C, 32, 32'b00000000000000000000000000000000);
    AW_SMON_COMPARE1[1].set_space_addr("MSG", 28'h800204C);
    AW_SMON_COMPARE1[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMPARE1[1].set_space_addr("MEM-SB",28'h800204C);
    AW_SMON_COMPARE1[1].set_space_addr("MEM", 28'h800204C);
      AW_SMON_COMPARE1[1].set_space("MEM");
      AW_SMON_COMPARE1[1].set_msg_opcode("MEM-SB");
      AW_SMON_COMPARE1[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMPARE1[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMPARE1[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMPARE1[1].set_user_attribute("diag_reg", "0");
      AW_SMON_COMPARE1[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMPARE1[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMPARE1[1]:dont_test") ) AW_SMON_COMPARE1[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMPARE1[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMPARE1[1]"));
      end
   AW_SMON_COMPARE1[1].COMPARE1.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_comp1_q[31:0]"});
   AW_SMON_COMPARE1[1].COMPARE1.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_ACTIVITYCOUNTER0[1]";
    `endif
    AW_SMON_ACTIVITYCOUNTER0[1] = hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER0_reg::type_id::create("AW_SMON_ACTIVITYCOUNTER0[1]", this);
    AW_SMON_ACTIVITYCOUNTER0[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002050, 32, 32'b00000000000000000000000000000000);
    AW_SMON_ACTIVITYCOUNTER0[1].set_space_addr("MSG", 28'h8002050);
    AW_SMON_ACTIVITYCOUNTER0[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_ACTIVITYCOUNTER0[1].set_space_addr("MEM-SB",28'h8002050);
    AW_SMON_ACTIVITYCOUNTER0[1].set_space_addr("MEM", 28'h8002050);
      AW_SMON_ACTIVITYCOUNTER0[1].set_space("MEM");
      AW_SMON_ACTIVITYCOUNTER0[1].set_msg_opcode("MEM-SB");
      AW_SMON_ACTIVITYCOUNTER0[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_ACTIVITYCOUNTER0[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_ACTIVITYCOUNTER0[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_ACTIVITYCOUNTER0[1].set_user_attribute("diag_reg", "0");
      AW_SMON_ACTIVITYCOUNTER0[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_ACTIVITYCOUNTER0[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_ACTIVITYCOUNTER0[1]:dont_test") ) AW_SMON_ACTIVITYCOUNTER0[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_ACTIVITYCOUNTER0[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_ACTIVITYCOUNTER0[1]"));
      end
   AW_SMON_ACTIVITYCOUNTER0[1].COUNTER0.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cnt0_q[31:0]"});
   AW_SMON_ACTIVITYCOUNTER0[1].COUNTER0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_ACTIVITYCOUNTER1[1]";
    `endif
    AW_SMON_ACTIVITYCOUNTER1[1] = hqm_sif_csr_bridge_AW_SMON_ACTIVITYCOUNTER1_reg::type_id::create("AW_SMON_ACTIVITYCOUNTER1[1]", this);
    AW_SMON_ACTIVITYCOUNTER1[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002054, 32, 32'b00000000000000000000000000000000);
    AW_SMON_ACTIVITYCOUNTER1[1].set_space_addr("MSG", 28'h8002054);
    AW_SMON_ACTIVITYCOUNTER1[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_ACTIVITYCOUNTER1[1].set_space_addr("MEM-SB",28'h8002054);
    AW_SMON_ACTIVITYCOUNTER1[1].set_space_addr("MEM", 28'h8002054);
      AW_SMON_ACTIVITYCOUNTER1[1].set_space("MEM");
      AW_SMON_ACTIVITYCOUNTER1[1].set_msg_opcode("MEM-SB");
      AW_SMON_ACTIVITYCOUNTER1[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_ACTIVITYCOUNTER1[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_ACTIVITYCOUNTER1[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_ACTIVITYCOUNTER1[1].set_user_attribute("diag_reg", "0");
      AW_SMON_ACTIVITYCOUNTER1[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_ACTIVITYCOUNTER1[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_ACTIVITYCOUNTER1[1]:dont_test") ) AW_SMON_ACTIVITYCOUNTER1[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_ACTIVITYCOUNTER1[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_ACTIVITYCOUNTER1[1]"));
      end
   AW_SMON_ACTIVITYCOUNTER1[1].COUNTER1.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_cnt1_q[31:0]"});
   AW_SMON_ACTIVITYCOUNTER1[1].COUNTER1.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_TIMER[1]";
    `endif
    AW_SMON_TIMER[1] = hqm_sif_csr_bridge_AW_SMON_TIMER_reg::type_id::create("AW_SMON_TIMER[1]", this);
    AW_SMON_TIMER[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002058, 32, 32'b00000000000000000000000000000000);
    AW_SMON_TIMER[1].set_space_addr("MSG", 28'h8002058);
    AW_SMON_TIMER[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_TIMER[1].set_space_addr("MEM-SB",28'h8002058);
    AW_SMON_TIMER[1].set_space_addr("MEM", 28'h8002058);
      AW_SMON_TIMER[1].set_space("MEM");
      AW_SMON_TIMER[1].set_msg_opcode("MEM-SB");
      AW_SMON_TIMER[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_TIMER[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_TIMER[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_TIMER[1].set_user_attribute("diag_reg", "0");
      AW_SMON_TIMER[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_TIMER[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_TIMER[1]:dont_test") ) AW_SMON_TIMER[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_TIMER[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_TIMER[1]"));
      end
   AW_SMON_TIMER[1].TIMER_VAL.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_timer_q[31:0]"});
   AW_SMON_TIMER[1].TIMER_VAL.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_MAXIMUM_TIMER[1]";
    `endif
    AW_SMON_MAXIMUM_TIMER[1] = hqm_sif_csr_bridge_AW_SMON_MAXIMUM_TIMER_reg::type_id::create("AW_SMON_MAXIMUM_TIMER[1]", this);
    AW_SMON_MAXIMUM_TIMER[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h800205C, 32, 32'b00000000000000000000000000000000);
    AW_SMON_MAXIMUM_TIMER[1].set_space_addr("MSG", 28'h800205C);
    AW_SMON_MAXIMUM_TIMER[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_MAXIMUM_TIMER[1].set_space_addr("MEM-SB",28'h800205C);
    AW_SMON_MAXIMUM_TIMER[1].set_space_addr("MEM", 28'h800205C);
      AW_SMON_MAXIMUM_TIMER[1].set_space("MEM");
      AW_SMON_MAXIMUM_TIMER[1].set_msg_opcode("MEM-SB");
      AW_SMON_MAXIMUM_TIMER[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_MAXIMUM_TIMER[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_MAXIMUM_TIMER[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_MAXIMUM_TIMER[1].set_user_attribute("diag_reg", "0");
      AW_SMON_MAXIMUM_TIMER[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_MAXIMUM_TIMER[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_MAXIMUM_TIMER[1]:dont_test") ) AW_SMON_MAXIMUM_TIMER[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_MAXIMUM_TIMER[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_MAXIMUM_TIMER[1]"));
      end
   AW_SMON_MAXIMUM_TIMER[1].MAXVALUE.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_maxval_q[31:0]"});
   AW_SMON_MAXIMUM_TIMER[1].MAXVALUE.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMP_MASK0[1]";
    `endif
    AW_SMON_COMP_MASK0[1] = hqm_sif_csr_bridge_AW_SMON_COMP_MASK0_reg::type_id::create("AW_SMON_COMP_MASK0[1]", this);
    AW_SMON_COMP_MASK0[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002060, 32, 32'b11111111111111111111111111111111);
    AW_SMON_COMP_MASK0[1].set_space_addr("MSG", 28'h8002060);
    AW_SMON_COMP_MASK0[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMP_MASK0[1].set_space_addr("MEM-SB",28'h8002060);
    AW_SMON_COMP_MASK0[1].set_space_addr("MEM", 28'h8002060);
      AW_SMON_COMP_MASK0[1].set_space("MEM");
      AW_SMON_COMP_MASK0[1].set_msg_opcode("MEM-SB");
      AW_SMON_COMP_MASK0[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMP_MASK0[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMP_MASK0[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMP_MASK0[1].set_user_attribute("diag_reg", "0");
      AW_SMON_COMP_MASK0[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMP_MASK0[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMP_MASK0[1]:dont_test") ) AW_SMON_COMP_MASK0[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMP_MASK0[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMP_MASK0[1]"));
      end
   AW_SMON_COMP_MASK0[1].COMP_MASK0.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_mask0_q[31:0]"});
   AW_SMON_COMP_MASK0[1].COMP_MASK0.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AW_SMON_COMP_MASK1[1]";
    `endif
    AW_SMON_COMP_MASK1[1] = hqm_sif_csr_bridge_AW_SMON_COMP_MASK1_reg::type_id::create("AW_SMON_COMP_MASK1[1]", this);
    AW_SMON_COMP_MASK1[1].set_cfg(16'h0, 16'h0, 16'h0, 28'h8002064, 32, 32'b11111111111111111111111111111111);
    AW_SMON_COMP_MASK1[1].set_space_addr("MSG", 28'h8002064);
    AW_SMON_COMP_MASK1[1].set_space_addr("msg_bus_port", 'h21);
    AW_SMON_COMP_MASK1[1].set_space_addr("MEM-SB",28'h8002064);
    AW_SMON_COMP_MASK1[1].set_space_addr("MEM", 28'h8002064);
      AW_SMON_COMP_MASK1[1].set_space("MEM");
      AW_SMON_COMP_MASK1[1].set_msg_opcode("MEM-SB");
      AW_SMON_COMP_MASK1[1].set_fid(4'h0, "MEM-SB");
  	AW_SMON_COMP_MASK1[1].set_bar(4'h2, "MEM-SB");
      AW_SMON_COMP_MASK1[1].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      AW_SMON_COMP_MASK1[1].set_user_attribute("diag_reg", "0");
      AW_SMON_COMP_MASK1[1].set_user_attribute("HqmIsFeatureReg", "1");
      AW_SMON_COMP_MASK1[1].set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AW_SMON_COMP_MASK1[1]:dont_test") ) AW_SMON_COMP_MASK1[1].set_test_reg(1'b0);
      if (!add_reg( AW_SMON_COMP_MASK1[1] )) begin
        `sla_error(get_name(), ("Could not add register AW_SMON_COMP_MASK1[1]"));
      end
   AW_SMON_COMP_MASK1[1].COMP_MASK1.set_paths({"i_hqm_sif_core.i_hqm_sif_infra_core.i_smon1.reg_smon_mask1_q[31:0]"});
   AW_SMON_COMP_MASK1[1].COMP_MASK1.set_logical_path("HQMID");

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HQM_PULLED_FUSES_0";
    `endif
    HQM_PULLED_FUSES_0 = hqm_sif_csr_bridge_HQM_PULLED_FUSES_0_reg::type_id::create("HQM_PULLED_FUSES_0", this);
    HQM_PULLED_FUSES_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h8003000, 32, 32'b00000000000000000000000000000000);
    HQM_PULLED_FUSES_0.set_space_addr("MSG", 28'h8003000);
    HQM_PULLED_FUSES_0.set_space_addr("msg_bus_port", 'h21);
    HQM_PULLED_FUSES_0.set_space_addr("MEM-SB",28'h8003000);
    HQM_PULLED_FUSES_0.set_space_addr("MEM", 28'h8003000);
      HQM_PULLED_FUSES_0.set_space("MEM");
      HQM_PULLED_FUSES_0.set_msg_opcode("MEM-SB");
      HQM_PULLED_FUSES_0.set_fid(4'h0, "MEM-SB");
  	HQM_PULLED_FUSES_0.set_bar(4'h2, "MEM-SB");
      HQM_PULLED_FUSES_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      HQM_PULLED_FUSES_0.set_user_attribute("diag_reg", "0");
      HQM_PULLED_FUSES_0.set_user_attribute("HqmIsFeatureReg", "1");
      HQM_PULLED_FUSES_0.set_user_attribute("SubnetPortID", "8'h00");
      HQM_PULLED_FUSES_0.set_test_reg(0);
      if ( $test$plusargs("HQM_PULLED_FUSES_0:dont_test") ) HQM_PULLED_FUSES_0.set_test_reg(1'b0);
      if (!add_reg( HQM_PULLED_FUSES_0 )) begin
        `sla_error(get_name(), ("Could not add register HQM_PULLED_FUSES_0"));
      end
   HQM_PULLED_FUSES_0.FUSES.set_paths({"i_hqm_sif_core.i_hqm_ri.i_sif_csr_wrap.i_hqm_sif_csr.HQM_PULLED_FUSES_0.FUSES"});

      _ral_env.set_policy_mapping("HQM_OS_W", "WAC",  HQM_CSR_WAC_LO , HQM_CSR_WAC_HI );  
      _ral_env.set_policy_mapping("HQM_OS_W", "CP",  HQM_CSR_CP_LO , HQM_CSR_CP_HI );  
      _ral_env.set_policy_mapping("HQM_OS_W", "RAC",  HQM_CSR_RAC_LO , HQM_CSR_RAC_HI );  
  endfunction

 virtual function void print_sv_ral_file();  
    $display("RAL File Type [%s], RAL File Instance [%s], SV File ---> %s", get_type_name(), get_name(), `__FILE__); 
 endfunction 
endclass : hqm_sif_csr_bridge_file

// ================================================


`endif
