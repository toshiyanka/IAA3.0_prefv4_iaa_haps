//                                                                             
// File:            hqm_config_master_bridge_regs.svh                          
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             


//RAL code compatible with Saola versions: 16.2.06 and newer 

`ifndef RAL_HQM_CONFIG_MASTER_BRIDGE_FILE
`define RAL_HQM_CONFIG_MASTER_BRIDGE_FILE

class hqm_config_master_bridge_CFG_DIAGNOSTIC_RESET_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CHP_PF_RESET_DONE;
  sla_ral_field ROP_PF_RESET_DONE;
  sla_ral_field LSP_PF_RESET_DONE;
  sla_ral_field NALB_PF_RESET_DONE;
  sla_ral_field AP_PF_RESET_DONE;
  sla_ral_field DP_PF_RESET_DONE;
  sla_ral_field QED_PF_RESET_DONE;
  sla_ral_field DQED_PF_RESET_DONE;
  sla_ral_field AQED_PF_RESET_DONE;
  sla_ral_field SYS_PF_RESET_DONE;
  sla_ral_field PF_RESET_ACTIVE;
  sla_ral_field FLRSM_STATE;
  sla_ral_field HQM_PROC_RESET_DONE;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_DIAGNOSTIC_RESET_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHP_PF_RESET_DONE, CHP_PF_RESET_DONE.desired)
     `RAL_FIELD_CP_1(CHP_PF_RESET_DONE, CHP_PF_RESET_DONE.desired, 0)
     `RAL_FIELD_CP(ROP_PF_RESET_DONE, ROP_PF_RESET_DONE.desired)
     `RAL_FIELD_CP_1(ROP_PF_RESET_DONE, ROP_PF_RESET_DONE.desired, 0)
     `RAL_FIELD_CP(LSP_PF_RESET_DONE, LSP_PF_RESET_DONE.desired)
     `RAL_FIELD_CP_1(LSP_PF_RESET_DONE, LSP_PF_RESET_DONE.desired, 0)
     `RAL_FIELD_CP(NALB_PF_RESET_DONE, NALB_PF_RESET_DONE.desired)
     `RAL_FIELD_CP_1(NALB_PF_RESET_DONE, NALB_PF_RESET_DONE.desired, 0)
     `RAL_FIELD_CP(AP_PF_RESET_DONE, AP_PF_RESET_DONE.desired)
     `RAL_FIELD_CP_1(AP_PF_RESET_DONE, AP_PF_RESET_DONE.desired, 0)
     `RAL_FIELD_CP(DP_PF_RESET_DONE, DP_PF_RESET_DONE.desired)
     `RAL_FIELD_CP_1(DP_PF_RESET_DONE, DP_PF_RESET_DONE.desired, 0)
     `RAL_FIELD_CP(QED_PF_RESET_DONE, QED_PF_RESET_DONE.desired)
     `RAL_FIELD_CP_1(QED_PF_RESET_DONE, QED_PF_RESET_DONE.desired, 0)
     `RAL_FIELD_CP(DQED_PF_RESET_DONE, DQED_PF_RESET_DONE.desired)
     `RAL_FIELD_CP_1(DQED_PF_RESET_DONE, DQED_PF_RESET_DONE.desired, 0)
     `RAL_FIELD_CP(AQED_PF_RESET_DONE, AQED_PF_RESET_DONE.desired)
     `RAL_FIELD_CP_1(AQED_PF_RESET_DONE, AQED_PF_RESET_DONE.desired, 0)
     `RAL_FIELD_CP(SYS_PF_RESET_DONE, SYS_PF_RESET_DONE.desired)
     `RAL_FIELD_CP_1(SYS_PF_RESET_DONE, SYS_PF_RESET_DONE.desired, 0)
     `RAL_FIELD_CP(PF_RESET_ACTIVE, PF_RESET_ACTIVE.desired)
     `RAL_FIELD_CP_1(PF_RESET_ACTIVE, PF_RESET_ACTIVE.desired, 0)
     `RAL_FIELD_CP(FLRSM_STATE, FLRSM_STATE.desired)
     `RAL_FIELD_CP_7(FLRSM_STATE, FLRSM_STATE.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(HQM_PROC_RESET_DONE, HQM_PROC_RESET_DONE.desired)
     `RAL_FIELD_CP_1(HQM_PROC_RESET_DONE, HQM_PROC_RESET_DONE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHP_PF_RESET_DONE, CHP_PF_RESET_DONE.actual)
     `RAL_FIELD_CP_1(CHP_PF_RESET_DONE, CHP_PF_RESET_DONE.actual, 0)
     `RAL_FIELD_CP(ROP_PF_RESET_DONE, ROP_PF_RESET_DONE.actual)
     `RAL_FIELD_CP_1(ROP_PF_RESET_DONE, ROP_PF_RESET_DONE.actual, 0)
     `RAL_FIELD_CP(LSP_PF_RESET_DONE, LSP_PF_RESET_DONE.actual)
     `RAL_FIELD_CP_1(LSP_PF_RESET_DONE, LSP_PF_RESET_DONE.actual, 0)
     `RAL_FIELD_CP(NALB_PF_RESET_DONE, NALB_PF_RESET_DONE.actual)
     `RAL_FIELD_CP_1(NALB_PF_RESET_DONE, NALB_PF_RESET_DONE.actual, 0)
     `RAL_FIELD_CP(AP_PF_RESET_DONE, AP_PF_RESET_DONE.actual)
     `RAL_FIELD_CP_1(AP_PF_RESET_DONE, AP_PF_RESET_DONE.actual, 0)
     `RAL_FIELD_CP(DP_PF_RESET_DONE, DP_PF_RESET_DONE.actual)
     `RAL_FIELD_CP_1(DP_PF_RESET_DONE, DP_PF_RESET_DONE.actual, 0)
     `RAL_FIELD_CP(QED_PF_RESET_DONE, QED_PF_RESET_DONE.actual)
     `RAL_FIELD_CP_1(QED_PF_RESET_DONE, QED_PF_RESET_DONE.actual, 0)
     `RAL_FIELD_CP(DQED_PF_RESET_DONE, DQED_PF_RESET_DONE.actual)
     `RAL_FIELD_CP_1(DQED_PF_RESET_DONE, DQED_PF_RESET_DONE.actual, 0)
     `RAL_FIELD_CP(AQED_PF_RESET_DONE, AQED_PF_RESET_DONE.actual)
     `RAL_FIELD_CP_1(AQED_PF_RESET_DONE, AQED_PF_RESET_DONE.actual, 0)
     `RAL_FIELD_CP(SYS_PF_RESET_DONE, SYS_PF_RESET_DONE.actual)
     `RAL_FIELD_CP_1(SYS_PF_RESET_DONE, SYS_PF_RESET_DONE.actual, 0)
     `RAL_FIELD_CP(PF_RESET_ACTIVE, PF_RESET_ACTIVE.actual)
     `RAL_FIELD_CP_1(PF_RESET_ACTIVE, PF_RESET_ACTIVE.actual, 0)
     `RAL_FIELD_CP(FLRSM_STATE, FLRSM_STATE.actual)
     `RAL_FIELD_CP_7(FLRSM_STATE, FLRSM_STATE.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(HQM_PROC_RESET_DONE, HQM_PROC_RESET_DONE.actual)
     `RAL_FIELD_CP_1(HQM_PROC_RESET_DONE, HQM_PROC_RESET_DONE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CHP_PF_RESET_DONE = new("CHP_PF_RESET_DONE", "RO/V", 1, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[0:0]"});
    CHP_PF_RESET_DONE.set_powerwell("vcccfn");
    CHP_PF_RESET_DONE.set_rand_mode(0);
   CHP_PF_RESET_DONE.set_reset_signame("prim_gated_rst_b");
    CHP_PF_RESET_DONE.set_logical_path("HQMID");
    void'(add_field( CHP_PF_RESET_DONE ));

    ROP_PF_RESET_DONE = new("ROP_PF_RESET_DONE", "RO/V", 1, 1, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[1:1]"});
    ROP_PF_RESET_DONE.set_powerwell("vcccfn");
    ROP_PF_RESET_DONE.set_rand_mode(0);
   ROP_PF_RESET_DONE.set_reset_signame("prim_gated_rst_b");
    ROP_PF_RESET_DONE.set_logical_path("HQMID");
    void'(add_field( ROP_PF_RESET_DONE ));

    LSP_PF_RESET_DONE = new("LSP_PF_RESET_DONE", "RO/V", 1, 2, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[2:2]"});
    LSP_PF_RESET_DONE.set_powerwell("vcccfn");
    LSP_PF_RESET_DONE.set_rand_mode(0);
   LSP_PF_RESET_DONE.set_reset_signame("prim_gated_rst_b");
    LSP_PF_RESET_DONE.set_logical_path("HQMID");
    void'(add_field( LSP_PF_RESET_DONE ));

    NALB_PF_RESET_DONE = new("NALB_PF_RESET_DONE", "RO/V", 1, 3, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[3:3]"});
    NALB_PF_RESET_DONE.set_powerwell("vcccfn");
    NALB_PF_RESET_DONE.set_rand_mode(0);
   NALB_PF_RESET_DONE.set_reset_signame("prim_gated_rst_b");
    NALB_PF_RESET_DONE.set_logical_path("HQMID");
    void'(add_field( NALB_PF_RESET_DONE ));

    AP_PF_RESET_DONE = new("AP_PF_RESET_DONE", "RO/V", 1, 4, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[4:4]"});
    AP_PF_RESET_DONE.set_powerwell("vcccfn");
    AP_PF_RESET_DONE.set_rand_mode(0);
   AP_PF_RESET_DONE.set_reset_signame("prim_gated_rst_b");
    AP_PF_RESET_DONE.set_logical_path("HQMID");
    void'(add_field( AP_PF_RESET_DONE ));

    DP_PF_RESET_DONE = new("DP_PF_RESET_DONE", "RO/V", 1, 5, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[5:5]"});
    DP_PF_RESET_DONE.set_powerwell("vcccfn");
    DP_PF_RESET_DONE.set_rand_mode(0);
   DP_PF_RESET_DONE.set_reset_signame("prim_gated_rst_b");
    DP_PF_RESET_DONE.set_logical_path("HQMID");
    void'(add_field( DP_PF_RESET_DONE ));

    QED_PF_RESET_DONE = new("QED_PF_RESET_DONE", "RO/V", 1, 6, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[6:6]"});
    QED_PF_RESET_DONE.set_powerwell("vcccfn");
    QED_PF_RESET_DONE.set_rand_mode(0);
   QED_PF_RESET_DONE.set_reset_signame("prim_gated_rst_b");
    QED_PF_RESET_DONE.set_logical_path("HQMID");
    void'(add_field( QED_PF_RESET_DONE ));

    DQED_PF_RESET_DONE = new("DQED_PF_RESET_DONE", "RO/V", 1, 7, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[7:7]"});
    DQED_PF_RESET_DONE.set_powerwell("vcccfn");
    DQED_PF_RESET_DONE.set_rand_mode(0);
   DQED_PF_RESET_DONE.set_reset_signame("prim_gated_rst_b");
    DQED_PF_RESET_DONE.set_logical_path("HQMID");
    void'(add_field( DQED_PF_RESET_DONE ));

    AQED_PF_RESET_DONE = new("AQED_PF_RESET_DONE", "RO/V", 1, 8, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[8:8]"});
    AQED_PF_RESET_DONE.set_powerwell("vcccfn");
    AQED_PF_RESET_DONE.set_rand_mode(0);
   AQED_PF_RESET_DONE.set_reset_signame("prim_gated_rst_b");
    AQED_PF_RESET_DONE.set_logical_path("HQMID");
    void'(add_field( AQED_PF_RESET_DONE ));

    SYS_PF_RESET_DONE = new("SYS_PF_RESET_DONE", "RO/V", 1, 9, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[9:9]"});
    SYS_PF_RESET_DONE.set_powerwell("vcccfn");
    SYS_PF_RESET_DONE.set_rand_mode(0);
   SYS_PF_RESET_DONE.set_reset_signame("prim_gated_rst_b");
    SYS_PF_RESET_DONE.set_logical_path("HQMID");
    void'(add_field( SYS_PF_RESET_DONE ));

    PF_RESET_ACTIVE = new("PF_RESET_ACTIVE", "RO/V", 1, 10, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[10:10]"});
    PF_RESET_ACTIVE.set_powerwell("vcccfn");
    PF_RESET_ACTIVE.set_rand_mode(0);
   PF_RESET_ACTIVE.set_reset_signame("prim_gated_rst_b");
    PF_RESET_ACTIVE.set_logical_path("HQMID");
    void'(add_field( PF_RESET_ACTIVE ));

    FLRSM_STATE = new("FLRSM_STATE", "RO/V", 7, 11, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[17:11]"});
    FLRSM_STATE.set_powerwell("vcccfn");
    FLRSM_STATE.set_rand_mode(0);
   FLRSM_STATE.set_reset_signame("prim_gated_rst_b");
    FLRSM_STATE.set_logical_path("HQMID");
    void'(add_field( FLRSM_STATE ));

    HQM_PROC_RESET_DONE = new("HQM_PROC_RESET_DONE", "RO/V", 1, 31, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[31:31]"});
    HQM_PROC_RESET_DONE.set_powerwell("vcccfn");
    HQM_PROC_RESET_DONE.set_rand_mode(0);
   HQM_PROC_RESET_DONE.set_reset_signame("prim_gated_rst_b");
    HQM_PROC_RESET_DONE.set_logical_path("HQMID");
    void'(add_field( HQM_PROC_RESET_DONE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_DIAGNOSTIC_RESET_STATUS_reg) 
endclass : hqm_config_master_bridge_CFG_DIAGNOSTIC_RESET_STATUS_reg

// ================================================

class hqm_config_master_bridge_CFG_DIAGNOSTIC_IDLE_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CHP_PIPEIDLE;
  sla_ral_field ROP_PIPEIDLE;
  sla_ral_field LSP_PIPEIDLE;
  sla_ral_field NALB_PIPEIDLE;
  sla_ral_field AP_PIPEIDLE;
  sla_ral_field DP_PIPEIDLE;
  sla_ral_field QED_PIPEIDLE;
  sla_ral_field DQED_PIPEIDLE;
  sla_ral_field AQED_PIPEIDLE;
  sla_ral_field SYS_PIPEIDLE;
  sla_ral_field CHP_UNIT_IDLE;
  sla_ral_field ROP_UNIT_IDLE;
  sla_ral_field LSP_UNIT_IDLE;
  sla_ral_field NALB_UNIT_IDLE;
  sla_ral_field AP_UNIT_IDLE;
  sla_ral_field DP_UNIT_IDLE;
  sla_ral_field QED_UNIT_IDLE;
  sla_ral_field DQED_UNIT_IDLE;
  sla_ral_field AQED_UNIT_IDLE;
  sla_ral_field SYS_UNIT_IDLE;
  sla_ral_field MSTR_CFG_RING_IDLE;
  sla_ral_field MSTR_CFG_MSTR_IDLE;
  sla_ral_field MSTR_FLR_CLKREQ_B;
  sla_ral_field MSTR_PROC_IDLE;
  sla_ral_field MSTR_PROC_IDLE_MASKED;
  sla_ral_field HQM_FUNC_IDLE;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_DIAGNOSTIC_IDLE_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHP_PIPEIDLE, CHP_PIPEIDLE.desired)
     `RAL_FIELD_CP_1(CHP_PIPEIDLE, CHP_PIPEIDLE.desired, 0)
     `RAL_FIELD_CP(ROP_PIPEIDLE, ROP_PIPEIDLE.desired)
     `RAL_FIELD_CP_1(ROP_PIPEIDLE, ROP_PIPEIDLE.desired, 0)
     `RAL_FIELD_CP(LSP_PIPEIDLE, LSP_PIPEIDLE.desired)
     `RAL_FIELD_CP_1(LSP_PIPEIDLE, LSP_PIPEIDLE.desired, 0)
     `RAL_FIELD_CP(NALB_PIPEIDLE, NALB_PIPEIDLE.desired)
     `RAL_FIELD_CP_1(NALB_PIPEIDLE, NALB_PIPEIDLE.desired, 0)
     `RAL_FIELD_CP(AP_PIPEIDLE, AP_PIPEIDLE.desired)
     `RAL_FIELD_CP_1(AP_PIPEIDLE, AP_PIPEIDLE.desired, 0)
     `RAL_FIELD_CP(DP_PIPEIDLE, DP_PIPEIDLE.desired)
     `RAL_FIELD_CP_1(DP_PIPEIDLE, DP_PIPEIDLE.desired, 0)
     `RAL_FIELD_CP(QED_PIPEIDLE, QED_PIPEIDLE.desired)
     `RAL_FIELD_CP_1(QED_PIPEIDLE, QED_PIPEIDLE.desired, 0)
     `RAL_FIELD_CP(DQED_PIPEIDLE, DQED_PIPEIDLE.desired)
     `RAL_FIELD_CP_1(DQED_PIPEIDLE, DQED_PIPEIDLE.desired, 0)
     `RAL_FIELD_CP(AQED_PIPEIDLE, AQED_PIPEIDLE.desired)
     `RAL_FIELD_CP_1(AQED_PIPEIDLE, AQED_PIPEIDLE.desired, 0)
     `RAL_FIELD_CP(SYS_PIPEIDLE, SYS_PIPEIDLE.desired)
     `RAL_FIELD_CP_1(SYS_PIPEIDLE, SYS_PIPEIDLE.desired, 0)
     `RAL_FIELD_CP(CHP_UNIT_IDLE, CHP_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(CHP_UNIT_IDLE, CHP_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(ROP_UNIT_IDLE, ROP_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(ROP_UNIT_IDLE, ROP_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(LSP_UNIT_IDLE, LSP_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(LSP_UNIT_IDLE, LSP_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(NALB_UNIT_IDLE, NALB_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(NALB_UNIT_IDLE, NALB_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(AP_UNIT_IDLE, AP_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(AP_UNIT_IDLE, AP_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(DP_UNIT_IDLE, DP_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(DP_UNIT_IDLE, DP_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(QED_UNIT_IDLE, QED_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(QED_UNIT_IDLE, QED_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(DQED_UNIT_IDLE, DQED_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(DQED_UNIT_IDLE, DQED_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(AQED_UNIT_IDLE, AQED_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(AQED_UNIT_IDLE, AQED_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(SYS_UNIT_IDLE, SYS_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(SYS_UNIT_IDLE, SYS_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(MSTR_CFG_RING_IDLE, MSTR_CFG_RING_IDLE.desired)
     `RAL_FIELD_CP_1(MSTR_CFG_RING_IDLE, MSTR_CFG_RING_IDLE.desired, 0)
     `RAL_FIELD_CP(MSTR_CFG_MSTR_IDLE, MSTR_CFG_MSTR_IDLE.desired)
     `RAL_FIELD_CP_1(MSTR_CFG_MSTR_IDLE, MSTR_CFG_MSTR_IDLE.desired, 0)
     `RAL_FIELD_CP(MSTR_FLR_CLKREQ_B, MSTR_FLR_CLKREQ_B.desired)
     `RAL_FIELD_CP_1(MSTR_FLR_CLKREQ_B, MSTR_FLR_CLKREQ_B.desired, 0)
     `RAL_FIELD_CP(MSTR_PROC_IDLE, MSTR_PROC_IDLE.desired)
     `RAL_FIELD_CP_1(MSTR_PROC_IDLE, MSTR_PROC_IDLE.desired, 0)
     `RAL_FIELD_CP(MSTR_PROC_IDLE_MASKED, MSTR_PROC_IDLE_MASKED.desired)
     `RAL_FIELD_CP_1(MSTR_PROC_IDLE_MASKED, MSTR_PROC_IDLE_MASKED.desired, 0)
     `RAL_FIELD_CP(HQM_FUNC_IDLE, HQM_FUNC_IDLE.desired)
     `RAL_FIELD_CP_1(HQM_FUNC_IDLE, HQM_FUNC_IDLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHP_PIPEIDLE, CHP_PIPEIDLE.actual)
     `RAL_FIELD_CP_1(CHP_PIPEIDLE, CHP_PIPEIDLE.actual, 0)
     `RAL_FIELD_CP(ROP_PIPEIDLE, ROP_PIPEIDLE.actual)
     `RAL_FIELD_CP_1(ROP_PIPEIDLE, ROP_PIPEIDLE.actual, 0)
     `RAL_FIELD_CP(LSP_PIPEIDLE, LSP_PIPEIDLE.actual)
     `RAL_FIELD_CP_1(LSP_PIPEIDLE, LSP_PIPEIDLE.actual, 0)
     `RAL_FIELD_CP(NALB_PIPEIDLE, NALB_PIPEIDLE.actual)
     `RAL_FIELD_CP_1(NALB_PIPEIDLE, NALB_PIPEIDLE.actual, 0)
     `RAL_FIELD_CP(AP_PIPEIDLE, AP_PIPEIDLE.actual)
     `RAL_FIELD_CP_1(AP_PIPEIDLE, AP_PIPEIDLE.actual, 0)
     `RAL_FIELD_CP(DP_PIPEIDLE, DP_PIPEIDLE.actual)
     `RAL_FIELD_CP_1(DP_PIPEIDLE, DP_PIPEIDLE.actual, 0)
     `RAL_FIELD_CP(QED_PIPEIDLE, QED_PIPEIDLE.actual)
     `RAL_FIELD_CP_1(QED_PIPEIDLE, QED_PIPEIDLE.actual, 0)
     `RAL_FIELD_CP(DQED_PIPEIDLE, DQED_PIPEIDLE.actual)
     `RAL_FIELD_CP_1(DQED_PIPEIDLE, DQED_PIPEIDLE.actual, 0)
     `RAL_FIELD_CP(AQED_PIPEIDLE, AQED_PIPEIDLE.actual)
     `RAL_FIELD_CP_1(AQED_PIPEIDLE, AQED_PIPEIDLE.actual, 0)
     `RAL_FIELD_CP(SYS_PIPEIDLE, SYS_PIPEIDLE.actual)
     `RAL_FIELD_CP_1(SYS_PIPEIDLE, SYS_PIPEIDLE.actual, 0)
     `RAL_FIELD_CP(CHP_UNIT_IDLE, CHP_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(CHP_UNIT_IDLE, CHP_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(ROP_UNIT_IDLE, ROP_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(ROP_UNIT_IDLE, ROP_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(LSP_UNIT_IDLE, LSP_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(LSP_UNIT_IDLE, LSP_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(NALB_UNIT_IDLE, NALB_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(NALB_UNIT_IDLE, NALB_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(AP_UNIT_IDLE, AP_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(AP_UNIT_IDLE, AP_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(DP_UNIT_IDLE, DP_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(DP_UNIT_IDLE, DP_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(QED_UNIT_IDLE, QED_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(QED_UNIT_IDLE, QED_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(DQED_UNIT_IDLE, DQED_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(DQED_UNIT_IDLE, DQED_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(AQED_UNIT_IDLE, AQED_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(AQED_UNIT_IDLE, AQED_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(SYS_UNIT_IDLE, SYS_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(SYS_UNIT_IDLE, SYS_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(MSTR_CFG_RING_IDLE, MSTR_CFG_RING_IDLE.actual)
     `RAL_FIELD_CP_1(MSTR_CFG_RING_IDLE, MSTR_CFG_RING_IDLE.actual, 0)
     `RAL_FIELD_CP(MSTR_CFG_MSTR_IDLE, MSTR_CFG_MSTR_IDLE.actual)
     `RAL_FIELD_CP_1(MSTR_CFG_MSTR_IDLE, MSTR_CFG_MSTR_IDLE.actual, 0)
     `RAL_FIELD_CP(MSTR_FLR_CLKREQ_B, MSTR_FLR_CLKREQ_B.actual)
     `RAL_FIELD_CP_1(MSTR_FLR_CLKREQ_B, MSTR_FLR_CLKREQ_B.actual, 0)
     `RAL_FIELD_CP(MSTR_PROC_IDLE, MSTR_PROC_IDLE.actual)
     `RAL_FIELD_CP_1(MSTR_PROC_IDLE, MSTR_PROC_IDLE.actual, 0)
     `RAL_FIELD_CP(MSTR_PROC_IDLE_MASKED, MSTR_PROC_IDLE_MASKED.actual)
     `RAL_FIELD_CP_1(MSTR_PROC_IDLE_MASKED, MSTR_PROC_IDLE_MASKED.actual, 0)
     `RAL_FIELD_CP(HQM_FUNC_IDLE, HQM_FUNC_IDLE.actual)
     `RAL_FIELD_CP_1(HQM_FUNC_IDLE, HQM_FUNC_IDLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CHP_PIPEIDLE = new("CHP_PIPEIDLE", "RO/V", 1, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[0:0]"});
    CHP_PIPEIDLE.set_powerwell("vcccfn");
    CHP_PIPEIDLE.set_rand_mode(0);
   CHP_PIPEIDLE.set_reset_signame("prim_gated_rst_b");
    CHP_PIPEIDLE.set_logical_path("HQMID");
    void'(add_field( CHP_PIPEIDLE ));

    ROP_PIPEIDLE = new("ROP_PIPEIDLE", "RO/V", 1, 1, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[1:1]"});
    ROP_PIPEIDLE.set_powerwell("vcccfn");
    ROP_PIPEIDLE.set_rand_mode(0);
   ROP_PIPEIDLE.set_reset_signame("prim_gated_rst_b");
    ROP_PIPEIDLE.set_logical_path("HQMID");
    void'(add_field( ROP_PIPEIDLE ));

    LSP_PIPEIDLE = new("LSP_PIPEIDLE", "RO/V", 1, 2, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[2:2]"});
    LSP_PIPEIDLE.set_powerwell("vcccfn");
    LSP_PIPEIDLE.set_rand_mode(0);
   LSP_PIPEIDLE.set_reset_signame("prim_gated_rst_b");
    LSP_PIPEIDLE.set_logical_path("HQMID");
    void'(add_field( LSP_PIPEIDLE ));

    NALB_PIPEIDLE = new("NALB_PIPEIDLE", "RO/V", 1, 3, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[3:3]"});
    NALB_PIPEIDLE.set_powerwell("vcccfn");
    NALB_PIPEIDLE.set_rand_mode(0);
   NALB_PIPEIDLE.set_reset_signame("prim_gated_rst_b");
    NALB_PIPEIDLE.set_logical_path("HQMID");
    void'(add_field( NALB_PIPEIDLE ));

    AP_PIPEIDLE = new("AP_PIPEIDLE", "RO/V", 1, 4, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[4:4]"});
    AP_PIPEIDLE.set_powerwell("vcccfn");
    AP_PIPEIDLE.set_rand_mode(0);
   AP_PIPEIDLE.set_reset_signame("prim_gated_rst_b");
    AP_PIPEIDLE.set_logical_path("HQMID");
    void'(add_field( AP_PIPEIDLE ));

    DP_PIPEIDLE = new("DP_PIPEIDLE", "RO/V", 1, 5, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[5:5]"});
    DP_PIPEIDLE.set_powerwell("vcccfn");
    DP_PIPEIDLE.set_rand_mode(0);
   DP_PIPEIDLE.set_reset_signame("prim_gated_rst_b");
    DP_PIPEIDLE.set_logical_path("HQMID");
    void'(add_field( DP_PIPEIDLE ));

    QED_PIPEIDLE = new("QED_PIPEIDLE", "RO/V", 1, 6, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[6:6]"});
    QED_PIPEIDLE.set_powerwell("vcccfn");
    QED_PIPEIDLE.set_rand_mode(0);
   QED_PIPEIDLE.set_reset_signame("prim_gated_rst_b");
    QED_PIPEIDLE.set_logical_path("HQMID");
    void'(add_field( QED_PIPEIDLE ));

    DQED_PIPEIDLE = new("DQED_PIPEIDLE", "RO/V", 1, 7, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[7:7]"});
    DQED_PIPEIDLE.set_powerwell("vcccfn");
    DQED_PIPEIDLE.set_rand_mode(0);
   DQED_PIPEIDLE.set_reset_signame("prim_gated_rst_b");
    DQED_PIPEIDLE.set_logical_path("HQMID");
    void'(add_field( DQED_PIPEIDLE ));

    AQED_PIPEIDLE = new("AQED_PIPEIDLE", "RO/V", 1, 8, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[8:8]"});
    AQED_PIPEIDLE.set_powerwell("vcccfn");
    AQED_PIPEIDLE.set_rand_mode(0);
   AQED_PIPEIDLE.set_reset_signame("prim_gated_rst_b");
    AQED_PIPEIDLE.set_logical_path("HQMID");
    void'(add_field( AQED_PIPEIDLE ));

    SYS_PIPEIDLE = new("SYS_PIPEIDLE", "RO/V", 1, 9, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[9:9]"});
    SYS_PIPEIDLE.set_powerwell("vcccfn");
    SYS_PIPEIDLE.set_rand_mode(0);
   SYS_PIPEIDLE.set_reset_signame("prim_gated_rst_b");
    SYS_PIPEIDLE.set_logical_path("HQMID");
    void'(add_field( SYS_PIPEIDLE ));

    CHP_UNIT_IDLE = new("CHP_UNIT_IDLE", "RO/V", 1, 10, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[10:10]"});
    CHP_UNIT_IDLE.set_powerwell("vcccfn");
    CHP_UNIT_IDLE.set_rand_mode(0);
   CHP_UNIT_IDLE.set_reset_signame("prim_gated_rst_b");
    CHP_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( CHP_UNIT_IDLE ));

    ROP_UNIT_IDLE = new("ROP_UNIT_IDLE", "RO/V", 1, 11, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[11:11]"});
    ROP_UNIT_IDLE.set_powerwell("vcccfn");
    ROP_UNIT_IDLE.set_rand_mode(0);
   ROP_UNIT_IDLE.set_reset_signame("prim_gated_rst_b");
    ROP_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( ROP_UNIT_IDLE ));

    LSP_UNIT_IDLE = new("LSP_UNIT_IDLE", "RO/V", 1, 12, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[12:12]"});
    LSP_UNIT_IDLE.set_powerwell("vcccfn");
    LSP_UNIT_IDLE.set_rand_mode(0);
   LSP_UNIT_IDLE.set_reset_signame("prim_gated_rst_b");
    LSP_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( LSP_UNIT_IDLE ));

    NALB_UNIT_IDLE = new("NALB_UNIT_IDLE", "RO/V", 1, 13, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[13:13]"});
    NALB_UNIT_IDLE.set_powerwell("vcccfn");
    NALB_UNIT_IDLE.set_rand_mode(0);
   NALB_UNIT_IDLE.set_reset_signame("prim_gated_rst_b");
    NALB_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( NALB_UNIT_IDLE ));

    AP_UNIT_IDLE = new("AP_UNIT_IDLE", "RO/V", 1, 14, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[14:14]"});
    AP_UNIT_IDLE.set_powerwell("vcccfn");
    AP_UNIT_IDLE.set_rand_mode(0);
   AP_UNIT_IDLE.set_reset_signame("prim_gated_rst_b");
    AP_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( AP_UNIT_IDLE ));

    DP_UNIT_IDLE = new("DP_UNIT_IDLE", "RO/V", 1, 15, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[15:15]"});
    DP_UNIT_IDLE.set_powerwell("vcccfn");
    DP_UNIT_IDLE.set_rand_mode(0);
   DP_UNIT_IDLE.set_reset_signame("prim_gated_rst_b");
    DP_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( DP_UNIT_IDLE ));

    QED_UNIT_IDLE = new("QED_UNIT_IDLE", "RO/V", 1, 16, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[16:16]"});
    QED_UNIT_IDLE.set_powerwell("vcccfn");
    QED_UNIT_IDLE.set_rand_mode(0);
   QED_UNIT_IDLE.set_reset_signame("prim_gated_rst_b");
    QED_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( QED_UNIT_IDLE ));

    DQED_UNIT_IDLE = new("DQED_UNIT_IDLE", "RO/V", 1, 17, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[17:17]"});
    DQED_UNIT_IDLE.set_powerwell("vcccfn");
    DQED_UNIT_IDLE.set_rand_mode(0);
   DQED_UNIT_IDLE.set_reset_signame("prim_gated_rst_b");
    DQED_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( DQED_UNIT_IDLE ));

    AQED_UNIT_IDLE = new("AQED_UNIT_IDLE", "RO/V", 1, 18, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[18:18]"});
    AQED_UNIT_IDLE.set_powerwell("vcccfn");
    AQED_UNIT_IDLE.set_rand_mode(0);
   AQED_UNIT_IDLE.set_reset_signame("prim_gated_rst_b");
    AQED_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( AQED_UNIT_IDLE ));

    SYS_UNIT_IDLE = new("SYS_UNIT_IDLE", "RO/V", 1, 19, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[19:19]"});
    SYS_UNIT_IDLE.set_powerwell("vcccfn");
    SYS_UNIT_IDLE.set_rand_mode(0);
   SYS_UNIT_IDLE.set_reset_signame("prim_gated_rst_b");
    SYS_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( SYS_UNIT_IDLE ));

    MSTR_CFG_RING_IDLE = new("MSTR_CFG_RING_IDLE", "RO/V", 1, 24, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[24:24]"});
    MSTR_CFG_RING_IDLE.set_powerwell("vcccfn");
    MSTR_CFG_RING_IDLE.set_rand_mode(0);
   MSTR_CFG_RING_IDLE.set_reset_signame("prim_gated_rst_b");
    MSTR_CFG_RING_IDLE.set_logical_path("HQMID");
    void'(add_field( MSTR_CFG_RING_IDLE ));

    MSTR_CFG_MSTR_IDLE = new("MSTR_CFG_MSTR_IDLE", "RO/V", 1, 25, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[25:25]"});
    MSTR_CFG_MSTR_IDLE.set_powerwell("vcccfn");
    MSTR_CFG_MSTR_IDLE.set_rand_mode(0);
   MSTR_CFG_MSTR_IDLE.set_reset_signame("prim_gated_rst_b");
    MSTR_CFG_MSTR_IDLE.set_logical_path("HQMID");
    void'(add_field( MSTR_CFG_MSTR_IDLE ));

    MSTR_FLR_CLKREQ_B = new("MSTR_FLR_CLKREQ_B", "RO/V", 1, 26, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[26:26]"});
    MSTR_FLR_CLKREQ_B.set_powerwell("vcccfn");
    MSTR_FLR_CLKREQ_B.set_rand_mode(0);
   MSTR_FLR_CLKREQ_B.set_reset_signame("prim_gated_rst_b");
    MSTR_FLR_CLKREQ_B.set_logical_path("HQMID");
    void'(add_field( MSTR_FLR_CLKREQ_B ));

    MSTR_PROC_IDLE = new("MSTR_PROC_IDLE", "RO/V", 1, 27, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[27:27]"});
    MSTR_PROC_IDLE.set_powerwell("vcccfn");
    MSTR_PROC_IDLE.set_rand_mode(0);
   MSTR_PROC_IDLE.set_reset_signame("prim_gated_rst_b");
    MSTR_PROC_IDLE.set_logical_path("HQMID");
    void'(add_field( MSTR_PROC_IDLE ));

    MSTR_PROC_IDLE_MASKED = new("MSTR_PROC_IDLE_MASKED", "RO/V", 1, 28, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[28:28]"});
    MSTR_PROC_IDLE_MASKED.set_powerwell("vcccfn");
    MSTR_PROC_IDLE_MASKED.set_rand_mode(0);
   MSTR_PROC_IDLE_MASKED.set_reset_signame("prim_gated_rst_b");
    MSTR_PROC_IDLE_MASKED.set_logical_path("HQMID");
    void'(add_field( MSTR_PROC_IDLE_MASKED ));

    HQM_FUNC_IDLE = new("HQM_FUNC_IDLE", "RO/V", 1, 31, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[31:31]"});
    HQM_FUNC_IDLE.set_powerwell("vcccfn");
    HQM_FUNC_IDLE.set_rand_mode(0);
   HQM_FUNC_IDLE.set_reset_signame("prim_gated_rst_b");
    HQM_FUNC_IDLE.set_logical_path("HQMID");
    void'(add_field( HQM_FUNC_IDLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_DIAGNOSTIC_IDLE_STATUS_reg) 
endclass : hqm_config_master_bridge_CFG_DIAGNOSTIC_IDLE_STATUS_reg

// ================================================

class hqm_config_master_bridge_CFG_DIAGNOSTIC_HEARTBEAT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HQM_GATED_RST_B;
  sla_ral_field HQM_FLR_PREP;
  sla_ral_field RSVZ0;
  sla_ral_field FLR_TRIGGERED;
  sla_ral_field HQM_INP_GATED_CLK;
  sla_ral_field HQM_CDC_CLK;
  sla_ral_field PGCB_CLK;
  sla_ral_field CONSTANT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_DIAGNOSTIC_HEARTBEAT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HQM_GATED_RST_B, HQM_GATED_RST_B.desired)
     `RAL_FIELD_CP_4(HQM_GATED_RST_B, HQM_GATED_RST_B.desired, 0,1,2,3)
     `RAL_FIELD_CP(HQM_FLR_PREP, HQM_FLR_PREP.desired)
     `RAL_FIELD_CP_4(HQM_FLR_PREP, HQM_FLR_PREP.desired, 0,1,2,3)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_4(RSVZ0, RSVZ0.desired, 0,1,2,3)
     `RAL_FIELD_CP(FLR_TRIGGERED, FLR_TRIGGERED.desired)
     `RAL_FIELD_CP_4(FLR_TRIGGERED, FLR_TRIGGERED.desired, 0,1,2,3)
     `RAL_FIELD_CP(HQM_INP_GATED_CLK, HQM_INP_GATED_CLK.desired)
     `RAL_FIELD_CP_4(HQM_INP_GATED_CLK, HQM_INP_GATED_CLK.desired, 0,1,2,3)
     `RAL_FIELD_CP(HQM_CDC_CLK, HQM_CDC_CLK.desired)
     `RAL_FIELD_CP_4(HQM_CDC_CLK, HQM_CDC_CLK.desired, 0,1,2,3)
     `RAL_FIELD_CP(PGCB_CLK, PGCB_CLK.desired)
     `RAL_FIELD_CP_4(PGCB_CLK, PGCB_CLK.desired, 0,1,2,3)
     `RAL_FIELD_CP(CONSTANT, CONSTANT.desired)
     `RAL_FIELD_CP_4(CONSTANT, CONSTANT.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HQM_GATED_RST_B, HQM_GATED_RST_B.actual)
     `RAL_FIELD_CP_4(HQM_GATED_RST_B, HQM_GATED_RST_B.actual, 0,1,2,3)
     `RAL_FIELD_CP(HQM_FLR_PREP, HQM_FLR_PREP.actual)
     `RAL_FIELD_CP_4(HQM_FLR_PREP, HQM_FLR_PREP.actual, 0,1,2,3)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_4(RSVZ0, RSVZ0.actual, 0,1,2,3)
     `RAL_FIELD_CP(FLR_TRIGGERED, FLR_TRIGGERED.actual)
     `RAL_FIELD_CP_4(FLR_TRIGGERED, FLR_TRIGGERED.actual, 0,1,2,3)
     `RAL_FIELD_CP(HQM_INP_GATED_CLK, HQM_INP_GATED_CLK.actual)
     `RAL_FIELD_CP_4(HQM_INP_GATED_CLK, HQM_INP_GATED_CLK.actual, 0,1,2,3)
     `RAL_FIELD_CP(HQM_CDC_CLK, HQM_CDC_CLK.actual)
     `RAL_FIELD_CP_4(HQM_CDC_CLK, HQM_CDC_CLK.actual, 0,1,2,3)
     `RAL_FIELD_CP(PGCB_CLK, PGCB_CLK.actual)
     `RAL_FIELD_CP_4(PGCB_CLK, PGCB_CLK.actual, 0,1,2,3)
     `RAL_FIELD_CP(CONSTANT, CONSTANT.actual)
     `RAL_FIELD_CP_4(CONSTANT, CONSTANT.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HQM_GATED_RST_B = new("HQM_GATED_RST_B", "RO/V", 4, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[3:0]"});
    HQM_GATED_RST_B.set_powerwell("vcccfn");
    HQM_GATED_RST_B.set_rand_mode(0);
   HQM_GATED_RST_B.set_reset_signame("prim_gated_rst_b");
    HQM_GATED_RST_B.set_logical_path("HQMID");
    void'(add_field( HQM_GATED_RST_B ));

    HQM_FLR_PREP = new("HQM_FLR_PREP", "RO/V", 4, 4, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[7:4]"});
    HQM_FLR_PREP.set_powerwell("vcccfn");
    HQM_FLR_PREP.set_rand_mode(0);
   HQM_FLR_PREP.set_reset_signame("prim_gated_rst_b");
    HQM_FLR_PREP.set_logical_path("HQMID");
    void'(add_field( HQM_FLR_PREP ));

    RSVZ0 = new("RSVZ0", "RO/V", 4, 8, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[11:8]"});
    RSVZ0.set_powerwell("vcccfn");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("prim_gated_rst_b");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    FLR_TRIGGERED = new("FLR_TRIGGERED", "RO/V", 4, 12, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[15:12]"});
    FLR_TRIGGERED.set_powerwell("vcccfn");
    FLR_TRIGGERED.set_rand_mode(0);
   FLR_TRIGGERED.set_reset_signame("prim_gated_rst_b");
    FLR_TRIGGERED.set_logical_path("HQMID");
    void'(add_field( FLR_TRIGGERED ));

    HQM_INP_GATED_CLK = new("HQM_INP_GATED_CLK", "RO/V", 4, 16, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[19:16]"});
    HQM_INP_GATED_CLK.set_powerwell("vcccfn");
    HQM_INP_GATED_CLK.set_rand_mode(0);
   HQM_INP_GATED_CLK.set_reset_signame("prim_gated_rst_b");
    HQM_INP_GATED_CLK.set_logical_path("HQMID");
    void'(add_field( HQM_INP_GATED_CLK ));

    HQM_CDC_CLK = new("HQM_CDC_CLK", "RO/V", 4, 20, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[23:20]"});
    HQM_CDC_CLK.set_powerwell("vcccfn");
    HQM_CDC_CLK.set_rand_mode(0);
   HQM_CDC_CLK.set_reset_signame("prim_gated_rst_b");
    HQM_CDC_CLK.set_logical_path("HQMID");
    void'(add_field( HQM_CDC_CLK ));

    PGCB_CLK = new("PGCB_CLK", "RO/V", 4, 24, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[27:24]"});
    PGCB_CLK.set_powerwell("vcccfn");
    PGCB_CLK.set_rand_mode(0);
   PGCB_CLK.set_reset_signame("prim_gated_rst_b");
    PGCB_CLK.set_logical_path("HQMID");
    void'(add_field( PGCB_CLK ));

    CONSTANT = new("CONSTANT", "RO/V", 4, 28, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[31:28]"});
    CONSTANT.set_powerwell("vcccfn");
    CONSTANT.set_rand_mode(0);
   CONSTANT.set_reset_signame("prim_gated_rst_b");
    CONSTANT.set_logical_path("HQMID");
    void'(add_field( CONSTANT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_DIAGNOSTIC_HEARTBEAT_reg) 
endclass : hqm_config_master_bridge_CFG_DIAGNOSTIC_HEARTBEAT_reg

// ================================================

class hqm_config_master_bridge_CFG_FLR_COUNT_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_FLR_COUNT_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_flr_count_l.internal_f[31:0]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_FLR_COUNT_L_reg) 
endclass : hqm_config_master_bridge_CFG_FLR_COUNT_L_reg

// ================================================

class hqm_config_master_bridge_CFG_FLR_COUNT_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_FLR_COUNT_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_flr_count_h.internal_f[31:0]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_FLR_COUNT_H_reg) 
endclass : hqm_config_master_bridge_CFG_FLR_COUNT_H_reg

// ================================================

class hqm_config_master_bridge_CFG_PM_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PROCHOT;
  sla_ral_field PGCB_HQM_IDLE;
  sla_ral_field PGCB_HQM_PG_RDY_ACK_B;
  sla_ral_field PMSM_PGCB_REQ_B;
  sla_ral_field PGBC_PMC_PG_REQ_B;
  sla_ral_field PMC_PGCB_PG_ACK_B;
  sla_ral_field PMC_PGCB_FET_EN_B;
  sla_ral_field PGCB_FET_EN_B;
  sla_ral_field RSVZ0;
  sla_ral_field RSVZ1;
  sla_ral_field FUSE_FORCE_ON;
  sla_ral_field FUSE_PROC_DISABLE;
  sla_ral_field RSVZ2;
  sla_ral_field RSVZ3;
  sla_ral_field PM_FSM_D0TOD3_OK;
  sla_ral_field PM_FSM_D3TOD0_OK;
  sla_ral_field HQM_IN_D3;
  sla_ral_field RSVZ4;
  sla_ral_field PMSM;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_PM_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PROCHOT, PROCHOT.desired)
     `RAL_FIELD_CP_1(PROCHOT, PROCHOT.desired, 0)
     `RAL_FIELD_CP(PGCB_HQM_IDLE, PGCB_HQM_IDLE.desired)
     `RAL_FIELD_CP_1(PGCB_HQM_IDLE, PGCB_HQM_IDLE.desired, 0)
     `RAL_FIELD_CP(PGCB_HQM_PG_RDY_ACK_B, PGCB_HQM_PG_RDY_ACK_B.desired)
     `RAL_FIELD_CP_1(PGCB_HQM_PG_RDY_ACK_B, PGCB_HQM_PG_RDY_ACK_B.desired, 0)
     `RAL_FIELD_CP(PMSM_PGCB_REQ_B, PMSM_PGCB_REQ_B.desired)
     `RAL_FIELD_CP_1(PMSM_PGCB_REQ_B, PMSM_PGCB_REQ_B.desired, 0)
     `RAL_FIELD_CP(PGBC_PMC_PG_REQ_B, PGBC_PMC_PG_REQ_B.desired)
     `RAL_FIELD_CP_1(PGBC_PMC_PG_REQ_B, PGBC_PMC_PG_REQ_B.desired, 0)
     `RAL_FIELD_CP(PMC_PGCB_PG_ACK_B, PMC_PGCB_PG_ACK_B.desired)
     `RAL_FIELD_CP_1(PMC_PGCB_PG_ACK_B, PMC_PGCB_PG_ACK_B.desired, 0)
     `RAL_FIELD_CP(PMC_PGCB_FET_EN_B, PMC_PGCB_FET_EN_B.desired)
     `RAL_FIELD_CP_1(PMC_PGCB_FET_EN_B, PMC_PGCB_FET_EN_B.desired, 0)
     `RAL_FIELD_CP(PGCB_FET_EN_B, PGCB_FET_EN_B.desired)
     `RAL_FIELD_CP_1(PGCB_FET_EN_B, PGCB_FET_EN_B.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.desired, 0)
     `RAL_FIELD_CP(FUSE_FORCE_ON, FUSE_FORCE_ON.desired)
     `RAL_FIELD_CP_1(FUSE_FORCE_ON, FUSE_FORCE_ON.desired, 0)
     `RAL_FIELD_CP(FUSE_PROC_DISABLE, FUSE_PROC_DISABLE.desired)
     `RAL_FIELD_CP_1(FUSE_PROC_DISABLE, FUSE_PROC_DISABLE.desired, 0)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.desired)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.desired, 0)
     `RAL_FIELD_CP(RSVZ3, RSVZ3.desired)
     `RAL_FIELD_CP_1(RSVZ3, RSVZ3.desired, 0)
     `RAL_FIELD_CP(PM_FSM_D0TOD3_OK, PM_FSM_D0TOD3_OK.desired)
     `RAL_FIELD_CP_1(PM_FSM_D0TOD3_OK, PM_FSM_D0TOD3_OK.desired, 0)
     `RAL_FIELD_CP(PM_FSM_D3TOD0_OK, PM_FSM_D3TOD0_OK.desired)
     `RAL_FIELD_CP_1(PM_FSM_D3TOD0_OK, PM_FSM_D3TOD0_OK.desired, 0)
     `RAL_FIELD_CP(HQM_IN_D3, HQM_IN_D3.desired)
     `RAL_FIELD_CP_1(HQM_IN_D3, HQM_IN_D3.desired, 0)
     `RAL_FIELD_CP(RSVZ4, RSVZ4.desired)
     `RAL_FIELD_CP_7(RSVZ4, RSVZ4.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(PMSM, PMSM.desired)
     `RAL_FIELD_CP_8(PMSM, PMSM.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PROCHOT, PROCHOT.actual)
     `RAL_FIELD_CP_1(PROCHOT, PROCHOT.actual, 0)
     `RAL_FIELD_CP(PGCB_HQM_IDLE, PGCB_HQM_IDLE.actual)
     `RAL_FIELD_CP_1(PGCB_HQM_IDLE, PGCB_HQM_IDLE.actual, 0)
     `RAL_FIELD_CP(PGCB_HQM_PG_RDY_ACK_B, PGCB_HQM_PG_RDY_ACK_B.actual)
     `RAL_FIELD_CP_1(PGCB_HQM_PG_RDY_ACK_B, PGCB_HQM_PG_RDY_ACK_B.actual, 0)
     `RAL_FIELD_CP(PMSM_PGCB_REQ_B, PMSM_PGCB_REQ_B.actual)
     `RAL_FIELD_CP_1(PMSM_PGCB_REQ_B, PMSM_PGCB_REQ_B.actual, 0)
     `RAL_FIELD_CP(PGBC_PMC_PG_REQ_B, PGBC_PMC_PG_REQ_B.actual)
     `RAL_FIELD_CP_1(PGBC_PMC_PG_REQ_B, PGBC_PMC_PG_REQ_B.actual, 0)
     `RAL_FIELD_CP(PMC_PGCB_PG_ACK_B, PMC_PGCB_PG_ACK_B.actual)
     `RAL_FIELD_CP_1(PMC_PGCB_PG_ACK_B, PMC_PGCB_PG_ACK_B.actual, 0)
     `RAL_FIELD_CP(PMC_PGCB_FET_EN_B, PMC_PGCB_FET_EN_B.actual)
     `RAL_FIELD_CP_1(PMC_PGCB_FET_EN_B, PMC_PGCB_FET_EN_B.actual, 0)
     `RAL_FIELD_CP(PGCB_FET_EN_B, PGCB_FET_EN_B.actual)
     `RAL_FIELD_CP_1(PGCB_FET_EN_B, PGCB_FET_EN_B.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.actual, 0)
     `RAL_FIELD_CP(FUSE_FORCE_ON, FUSE_FORCE_ON.actual)
     `RAL_FIELD_CP_1(FUSE_FORCE_ON, FUSE_FORCE_ON.actual, 0)
     `RAL_FIELD_CP(FUSE_PROC_DISABLE, FUSE_PROC_DISABLE.actual)
     `RAL_FIELD_CP_1(FUSE_PROC_DISABLE, FUSE_PROC_DISABLE.actual, 0)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.actual)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.actual, 0)
     `RAL_FIELD_CP(RSVZ3, RSVZ3.actual)
     `RAL_FIELD_CP_1(RSVZ3, RSVZ3.actual, 0)
     `RAL_FIELD_CP(PM_FSM_D0TOD3_OK, PM_FSM_D0TOD3_OK.actual)
     `RAL_FIELD_CP_1(PM_FSM_D0TOD3_OK, PM_FSM_D0TOD3_OK.actual, 0)
     `RAL_FIELD_CP(PM_FSM_D3TOD0_OK, PM_FSM_D3TOD0_OK.actual)
     `RAL_FIELD_CP_1(PM_FSM_D3TOD0_OK, PM_FSM_D3TOD0_OK.actual, 0)
     `RAL_FIELD_CP(HQM_IN_D3, HQM_IN_D3.actual)
     `RAL_FIELD_CP_1(HQM_IN_D3, HQM_IN_D3.actual, 0)
     `RAL_FIELD_CP(RSVZ4, RSVZ4.actual)
     `RAL_FIELD_CP_7(RSVZ4, RSVZ4.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(PMSM, PMSM.actual)
     `RAL_FIELD_CP_8(PMSM, PMSM.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PROCHOT = new("PROCHOT", "RO/V", 1, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[0:0]"});
    PROCHOT.set_powerwell("vcccfn");
    PROCHOT.set_rand_mode(0);
   PROCHOT.set_reset_signame("prim_gated_rst_b");
    PROCHOT.set_logical_path("HQMID");
    void'(add_field( PROCHOT ));

    PGCB_HQM_IDLE = new("PGCB_HQM_IDLE", "RO/V", 1, 1, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[1:1]"});
    PGCB_HQM_IDLE.set_powerwell("vcccfn");
    PGCB_HQM_IDLE.set_rand_mode(0);
   PGCB_HQM_IDLE.set_reset_signame("prim_gated_rst_b");
    PGCB_HQM_IDLE.set_logical_path("HQMID");
    void'(add_field( PGCB_HQM_IDLE ));

    PGCB_HQM_PG_RDY_ACK_B = new("PGCB_HQM_PG_RDY_ACK_B", "RO/V", 1, 2, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[2:2]"});
    PGCB_HQM_PG_RDY_ACK_B.set_powerwell("vcccfn");
    PGCB_HQM_PG_RDY_ACK_B.set_rand_mode(0);
   PGCB_HQM_PG_RDY_ACK_B.set_reset_signame("prim_gated_rst_b");
    PGCB_HQM_PG_RDY_ACK_B.set_logical_path("HQMID");
    void'(add_field( PGCB_HQM_PG_RDY_ACK_B ));

    PMSM_PGCB_REQ_B = new("PMSM_PGCB_REQ_B", "RO/V", 1, 3, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[3:3]"});
    PMSM_PGCB_REQ_B.set_powerwell("vcccfn");
    PMSM_PGCB_REQ_B.set_rand_mode(0);
   PMSM_PGCB_REQ_B.set_reset_signame("prim_gated_rst_b");
    PMSM_PGCB_REQ_B.set_logical_path("HQMID");
    void'(add_field( PMSM_PGCB_REQ_B ));

    PGBC_PMC_PG_REQ_B = new("PGBC_PMC_PG_REQ_B", "RO/V", 1, 4, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[4:4]"});
    PGBC_PMC_PG_REQ_B.set_powerwell("vcccfn");
    PGBC_PMC_PG_REQ_B.set_rand_mode(0);
   PGBC_PMC_PG_REQ_B.set_reset_signame("prim_gated_rst_b");
    PGBC_PMC_PG_REQ_B.set_logical_path("HQMID");
    void'(add_field( PGBC_PMC_PG_REQ_B ));

    PMC_PGCB_PG_ACK_B = new("PMC_PGCB_PG_ACK_B", "RO/V", 1, 5, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[5:5]"});
    PMC_PGCB_PG_ACK_B.set_powerwell("vcccfn");
    PMC_PGCB_PG_ACK_B.set_rand_mode(0);
   PMC_PGCB_PG_ACK_B.set_reset_signame("prim_gated_rst_b");
    PMC_PGCB_PG_ACK_B.set_logical_path("HQMID");
    void'(add_field( PMC_PGCB_PG_ACK_B ));

    PMC_PGCB_FET_EN_B = new("PMC_PGCB_FET_EN_B", "RO/V", 1, 6, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[6:6]"});
    PMC_PGCB_FET_EN_B.set_powerwell("vcccfn");
    PMC_PGCB_FET_EN_B.set_rand_mode(0);
   PMC_PGCB_FET_EN_B.set_reset_signame("prim_gated_rst_b");
    PMC_PGCB_FET_EN_B.set_logical_path("HQMID");
    void'(add_field( PMC_PGCB_FET_EN_B ));

    PGCB_FET_EN_B = new("PGCB_FET_EN_B", "RO/V", 1, 7, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[7:7]"});
    PGCB_FET_EN_B.set_powerwell("vcccfn");
    PGCB_FET_EN_B.set_rand_mode(0);
   PGCB_FET_EN_B.set_reset_signame("prim_gated_rst_b");
    PGCB_FET_EN_B.set_logical_path("HQMID");
    void'(add_field( PGCB_FET_EN_B ));

    RSVZ0 = new("RSVZ0", "RO/V", 1, 8, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[8:8]"});
    RSVZ0.set_powerwell("vcccfn");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("prim_gated_rst_b");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    RSVZ1 = new("RSVZ1", "RO/V", 1, 9, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[9:9]"});
    RSVZ1.set_powerwell("vcccfn");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("prim_gated_rst_b");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    FUSE_FORCE_ON = new("FUSE_FORCE_ON", "RO/V", 1, 10, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[10:10]"});
    FUSE_FORCE_ON.set_powerwell("vcccfn");
    FUSE_FORCE_ON.set_rand_mode(0);
   FUSE_FORCE_ON.set_reset_signame("prim_gated_rst_b");
    FUSE_FORCE_ON.set_logical_path("HQMID");
    void'(add_field( FUSE_FORCE_ON ));

    FUSE_PROC_DISABLE = new("FUSE_PROC_DISABLE", "RO/V", 1, 11, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[11:11]"});
    FUSE_PROC_DISABLE.set_powerwell("vcccfn");
    FUSE_PROC_DISABLE.set_rand_mode(0);
   FUSE_PROC_DISABLE.set_reset_signame("prim_gated_rst_b");
    FUSE_PROC_DISABLE.set_logical_path("HQMID");
    void'(add_field( FUSE_PROC_DISABLE ));

    RSVZ2 = new("RSVZ2", "RO/V", 1, 12, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[12:12]"});
    RSVZ2.set_powerwell("vcccfn");
    RSVZ2.set_rand_mode(0);
   RSVZ2.set_reset_signame("prim_gated_rst_b");
    RSVZ2.set_logical_path("HQMID");
    void'(add_field( RSVZ2 ));

    RSVZ3 = new("RSVZ3", "RO/V", 1, 13, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[13:13]"});
    RSVZ3.set_powerwell("vcccfn");
    RSVZ3.set_rand_mode(0);
   RSVZ3.set_reset_signame("prim_gated_rst_b");
    RSVZ3.set_logical_path("HQMID");
    void'(add_field( RSVZ3 ));

    PM_FSM_D0TOD3_OK = new("PM_FSM_D0TOD3_OK", "RO/V", 1, 14, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[14:14]"});
    PM_FSM_D0TOD3_OK.set_powerwell("vcccfn");
    PM_FSM_D0TOD3_OK.set_rand_mode(0);
   PM_FSM_D0TOD3_OK.set_reset_signame("prim_gated_rst_b");
    PM_FSM_D0TOD3_OK.set_logical_path("HQMID");
    void'(add_field( PM_FSM_D0TOD3_OK ));

    PM_FSM_D3TOD0_OK = new("PM_FSM_D3TOD0_OK", "RO/V", 1, 15, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[15:15]"});
    PM_FSM_D3TOD0_OK.set_powerwell("vcccfn");
    PM_FSM_D3TOD0_OK.set_rand_mode(0);
   PM_FSM_D3TOD0_OK.set_reset_signame("prim_gated_rst_b");
    PM_FSM_D3TOD0_OK.set_logical_path("HQMID");
    void'(add_field( PM_FSM_D3TOD0_OK ));

    HQM_IN_D3 = new("HQM_IN_D3", "RO/V", 1, 16, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[16:16]"});
    HQM_IN_D3.set_powerwell("vcccfn");
    HQM_IN_D3.set_rand_mode(0);
   HQM_IN_D3.set_reset_signame("prim_gated_rst_b");
    HQM_IN_D3.set_logical_path("HQMID");
    void'(add_field( HQM_IN_D3 ));

    RSVZ4 = new("RSVZ4", "RO/V", 7, 17, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[23:17]"});
    RSVZ4.set_powerwell("vcccfn");
    RSVZ4.set_rand_mode(0);
   RSVZ4.set_reset_signame("prim_gated_rst_b");
    RSVZ4.set_logical_path("HQMID");
    void'(add_field( RSVZ4 ));

    PMSM = new("PMSM", "RO/V", 8, 24, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[31:24]"});
    PMSM.set_powerwell("vcccfn");
    PMSM.set_rand_mode(0);
   PMSM.set_reset_signame("prim_gated_rst_b");
    PMSM.set_logical_path("HQMID");
    void'(add_field( PMSM ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_PM_STATUS_reg) 
endclass : hqm_config_master_bridge_CFG_PM_STATUS_reg

// ================================================

class hqm_config_master_bridge_CFG_PM_PMCSR_DISABLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DISABLE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_PM_PMCSR_DISABLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLE, DISABLE.desired)
     `RAL_FIELD_CP_1(DISABLE, DISABLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLE, DISABLE.actual)
     `RAL_FIELD_CP_1(DISABLE, DISABLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DISABLE = new("DISABLE", "RW/0C/V", 1, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_pmcsr_disable.internal_f[0:0]"});
    DISABLE.set_powerwell("vcccfn");
    DISABLE.set_rand_mode(0);
   DISABLE.set_reset_signame("prim_gated_rst_b");
    DISABLE.set_logical_path("HQMID");
    void'(add_field( DISABLE ));

    RSVZ0 = new("RSVZ0", "RO", 31, 1, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_pmcsr_disable.internal_f[31:1]"});
    RSVZ0.set_powerwell("vcccfn");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("prim_gated_rst_b");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_PM_PMCSR_DISABLE_reg) 
endclass : hqm_config_master_bridge_CFG_PM_PMCSR_DISABLE_reg

// ================================================

class hqm_config_master_bridge_CFG_CLK_ON_CNT_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_CLK_ON_CNT_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_clk_on_cnt.count[31:0]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_CLK_ON_CNT_L_reg) 
endclass : hqm_config_master_bridge_CFG_CLK_ON_CNT_L_reg

// ================================================

class hqm_config_master_bridge_CFG_CLK_ON_CNT_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_CLK_ON_CNT_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_clk_on_cnt.count[63:32]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_CLK_ON_CNT_H_reg) 
endclass : hqm_config_master_bridge_CFG_CLK_ON_CNT_H_reg

// ================================================

class hqm_config_master_bridge_CFG_PROC_ON_CNT_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_PROC_ON_CNT_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_proc_on_cnt.count[31:0]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_PROC_ON_CNT_L_reg) 
endclass : hqm_config_master_bridge_CFG_PROC_ON_CNT_L_reg

// ================================================

class hqm_config_master_bridge_CFG_PROC_ON_CNT_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_PROC_ON_CNT_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_proc_on_cnt.count[63:32]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_PROC_ON_CNT_H_reg) 
endclass : hqm_config_master_bridge_CFG_PROC_ON_CNT_H_reg

// ================================================

class hqm_config_master_bridge_CFG_PROCHOT_CNT_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_PROCHOT_CNT_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_prochot_cnt.count[31:0]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_PROCHOT_CNT_L_reg) 
endclass : hqm_config_master_bridge_CFG_PROCHOT_CNT_L_reg

// ================================================

class hqm_config_master_bridge_CFG_PROCHOT_CNT_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_PROCHOT_CNT_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_prochot_cnt.count[63:32]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_PROCHOT_CNT_H_reg) 
endclass : hqm_config_master_bridge_CFG_PROCHOT_CNT_H_reg

// ================================================

class hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_prochot_event_cnt.count[31:0]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_L_reg) 
endclass : hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_L_reg

// ================================================

class hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_prochot_event_cnt.count[63:32]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_H_reg) 
endclass : hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_H_reg

// ================================================

class hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_d3tod0_event_cnt.count[31:0]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_L_reg) 
endclass : hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_L_reg

// ================================================

class hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_d3tod0_event_cnt.count[63:32]"});
    COUNT.set_powerwell("vcccfn");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("prim_gated_rst_b");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_H_reg) 
endclass : hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_H_reg

// ================================================

class hqm_config_master_bridge_CFG_CLK_CNT_DISABLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DISABLE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_CLK_CNT_DISABLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLE, DISABLE.desired)
     `RAL_FIELD_CP_1(DISABLE, DISABLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLE, DISABLE.actual)
     `RAL_FIELD_CP_1(DISABLE, DISABLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DISABLE = new("DISABLE", "RW", 1, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_clk_cnt_disable.internal_f[0:0]"});
    DISABLE.set_powerwell("vcccfn");
    DISABLE.set_rand_mode(0);
   DISABLE.set_reset_signame("prim_gated_rst_b");
    DISABLE.set_logical_path("HQMID");
    void'(add_field( DISABLE ));

    RSVZ0 = new("RSVZ0", "RW", 31, 1, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_clk_cnt_disable.internal_f[31:1]"});
    RSVZ0.set_powerwell("vcccfn");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("prim_gated_rst_b");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_CLK_CNT_DISABLE_reg) 
endclass : hqm_config_master_bridge_CFG_CLK_CNT_DISABLE_reg

// ================================================

class hqm_config_master_bridge_CFG_TS_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CFG_TS_DIV;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_TS_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFG_TS_DIV, CFG_TS_DIV.desired)
     `RAL_FIELD_CP_16(CFG_TS_DIV, CFG_TS_DIV.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFG_TS_DIV, CFG_TS_DIV.actual)
     `RAL_FIELD_CP_16(CFG_TS_DIV, CFG_TS_DIV.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CFG_TS_DIV = new("CFG_TS_DIV", "RW", 16, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_ts_control.internal_f[15:0]"});
    CFG_TS_DIV.set_powerwell("vcccfn");
    CFG_TS_DIV.set_rand_mode(0);
   CFG_TS_DIV.set_reset_signame("prim_gated_rst_b");
    CFG_TS_DIV.set_logical_path("HQMID");
    void'(add_field( CFG_TS_DIV ));

    RSVZ0 = new("RSVZ0", "RW", 16, 16, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_ts_control.internal_f[31:16]"});
    RSVZ0.set_powerwell("vcccfn");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("prim_gated_rst_b");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_TS_CONTROL_reg) 
endclass : hqm_config_master_bridge_CFG_TS_CONTROL_reg

// ================================================

class hqm_config_master_bridge_CFG_UNIT_VERSION_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNIT_VERSION;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_UNIT_VERSION_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.desired)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.actual)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNIT_VERSION = new("UNIT_VERSION", "RO", 8, 24, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_unit_version.status[31:24]"});
    UNIT_VERSION.set_powerwell("vcccfn_gated");
    UNIT_VERSION.set_rand_mode(0);
   UNIT_VERSION.set_reset_signame("prim_gated_rst_b");
    UNIT_VERSION.set_logical_path("HQMID");
    void'(add_field( UNIT_VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_UNIT_VERSION_reg) 
endclass : hqm_config_master_bridge_CFG_UNIT_VERSION_reg

// ================================================

class hqm_config_master_bridge_CFG_PM_OVERRIDE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field OVERRIDE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_PM_OVERRIDE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(OVERRIDE, OVERRIDE.desired)
     `RAL_FIELD_CP_1(OVERRIDE, OVERRIDE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(OVERRIDE, OVERRIDE.actual)
     `RAL_FIELD_CP_1(OVERRIDE, OVERRIDE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    OVERRIDE = new("OVERRIDE", "RW", 1, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_override.internal_f[0:0]"});
    OVERRIDE.set_powerwell("vcccfn");
    OVERRIDE.set_rand_mode(0);
   OVERRIDE.set_reset_signame("prim_gated_rst_b");
    OVERRIDE.set_logical_path("HQMID");
    void'(add_field( OVERRIDE ));

    RSVZ0 = new("RSVZ0", "RO", 31, 1, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_override.internal_f[31:1]"});
    RSVZ0.set_powerwell("vcccfn");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("prim_gated_rst_b");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_PM_OVERRIDE_reg) 
endclass : hqm_config_master_bridge_CFG_PM_OVERRIDE_reg

// ================================================

class hqm_config_master_bridge_CFG_HQM_PGCB_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TRSTUP2FRCCLKS;
  sla_ral_field TCLKSOONACK_CP;
  sla_ral_field TCLKSOFFACK_SRST;
  sla_ral_field TCLKSONACK_SRST;
  sla_ral_field TRSTDOWN;
  sla_ral_field TISOLATE;
  sla_ral_field TSLEEPACT;
  sla_ral_field TLATCHDIS;
  sla_ral_field TPOKDOWN;
  sla_ral_field TLATCHEN;
  sla_ral_field ACCRSTUP;
  sla_ral_field INACCRUSTUP;
  sla_ral_field TPOKUP;
  sla_ral_field TDEISOLATE;
  sla_ral_field SLEEP_INACT;
  sla_ral_field SLEEP_EN;
  sla_ral_field RSVD;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_HQM_PGCB_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TRSTUP2FRCCLKS, TRSTUP2FRCCLKS.desired)
     `RAL_FIELD_CP_2(TRSTUP2FRCCLKS, TRSTUP2FRCCLKS.desired, 0,1)
     `RAL_FIELD_CP(TCLKSOONACK_CP, TCLKSOONACK_CP.desired)
     `RAL_FIELD_CP_2(TCLKSOONACK_CP, TCLKSOONACK_CP.desired, 0,1)
     `RAL_FIELD_CP(TCLKSOFFACK_SRST, TCLKSOFFACK_SRST.desired)
     `RAL_FIELD_CP_2(TCLKSOFFACK_SRST, TCLKSOFFACK_SRST.desired, 0,1)
     `RAL_FIELD_CP(TCLKSONACK_SRST, TCLKSONACK_SRST.desired)
     `RAL_FIELD_CP_2(TCLKSONACK_SRST, TCLKSONACK_SRST.desired, 0,1)
     `RAL_FIELD_CP(TRSTDOWN, TRSTDOWN.desired)
     `RAL_FIELD_CP_2(TRSTDOWN, TRSTDOWN.desired, 0,1)
     `RAL_FIELD_CP(TISOLATE, TISOLATE.desired)
     `RAL_FIELD_CP_2(TISOLATE, TISOLATE.desired, 0,1)
     `RAL_FIELD_CP(TSLEEPACT, TSLEEPACT.desired)
     `RAL_FIELD_CP_2(TSLEEPACT, TSLEEPACT.desired, 0,1)
     `RAL_FIELD_CP(TLATCHDIS, TLATCHDIS.desired)
     `RAL_FIELD_CP_2(TLATCHDIS, TLATCHDIS.desired, 0,1)
     `RAL_FIELD_CP(TPOKDOWN, TPOKDOWN.desired)
     `RAL_FIELD_CP_2(TPOKDOWN, TPOKDOWN.desired, 0,1)
     `RAL_FIELD_CP(TLATCHEN, TLATCHEN.desired)
     `RAL_FIELD_CP_2(TLATCHEN, TLATCHEN.desired, 0,1)
     `RAL_FIELD_CP(ACCRSTUP, ACCRSTUP.desired)
     `RAL_FIELD_CP_2(ACCRSTUP, ACCRSTUP.desired, 0,1)
     `RAL_FIELD_CP(INACCRUSTUP, INACCRUSTUP.desired)
     `RAL_FIELD_CP_2(INACCRUSTUP, INACCRUSTUP.desired, 0,1)
     `RAL_FIELD_CP(TPOKUP, TPOKUP.desired)
     `RAL_FIELD_CP_2(TPOKUP, TPOKUP.desired, 0,1)
     `RAL_FIELD_CP(TDEISOLATE, TDEISOLATE.desired)
     `RAL_FIELD_CP_2(TDEISOLATE, TDEISOLATE.desired, 0,1)
     `RAL_FIELD_CP(SLEEP_INACT, SLEEP_INACT.desired)
     `RAL_FIELD_CP_2(SLEEP_INACT, SLEEP_INACT.desired, 0,1)
     `RAL_FIELD_CP(SLEEP_EN, SLEEP_EN.desired)
     `RAL_FIELD_CP_1(SLEEP_EN, SLEEP_EN.desired, 0)
     `RAL_FIELD_CP(RSVD, RSVD.desired)
     `RAL_FIELD_CP_1(RSVD, RSVD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TRSTUP2FRCCLKS, TRSTUP2FRCCLKS.actual)
     `RAL_FIELD_CP_2(TRSTUP2FRCCLKS, TRSTUP2FRCCLKS.actual, 0,1)
     `RAL_FIELD_CP(TCLKSOONACK_CP, TCLKSOONACK_CP.actual)
     `RAL_FIELD_CP_2(TCLKSOONACK_CP, TCLKSOONACK_CP.actual, 0,1)
     `RAL_FIELD_CP(TCLKSOFFACK_SRST, TCLKSOFFACK_SRST.actual)
     `RAL_FIELD_CP_2(TCLKSOFFACK_SRST, TCLKSOFFACK_SRST.actual, 0,1)
     `RAL_FIELD_CP(TCLKSONACK_SRST, TCLKSONACK_SRST.actual)
     `RAL_FIELD_CP_2(TCLKSONACK_SRST, TCLKSONACK_SRST.actual, 0,1)
     `RAL_FIELD_CP(TRSTDOWN, TRSTDOWN.actual)
     `RAL_FIELD_CP_2(TRSTDOWN, TRSTDOWN.actual, 0,1)
     `RAL_FIELD_CP(TISOLATE, TISOLATE.actual)
     `RAL_FIELD_CP_2(TISOLATE, TISOLATE.actual, 0,1)
     `RAL_FIELD_CP(TSLEEPACT, TSLEEPACT.actual)
     `RAL_FIELD_CP_2(TSLEEPACT, TSLEEPACT.actual, 0,1)
     `RAL_FIELD_CP(TLATCHDIS, TLATCHDIS.actual)
     `RAL_FIELD_CP_2(TLATCHDIS, TLATCHDIS.actual, 0,1)
     `RAL_FIELD_CP(TPOKDOWN, TPOKDOWN.actual)
     `RAL_FIELD_CP_2(TPOKDOWN, TPOKDOWN.actual, 0,1)
     `RAL_FIELD_CP(TLATCHEN, TLATCHEN.actual)
     `RAL_FIELD_CP_2(TLATCHEN, TLATCHEN.actual, 0,1)
     `RAL_FIELD_CP(ACCRSTUP, ACCRSTUP.actual)
     `RAL_FIELD_CP_2(ACCRSTUP, ACCRSTUP.actual, 0,1)
     `RAL_FIELD_CP(INACCRUSTUP, INACCRUSTUP.actual)
     `RAL_FIELD_CP_2(INACCRUSTUP, INACCRUSTUP.actual, 0,1)
     `RAL_FIELD_CP(TPOKUP, TPOKUP.actual)
     `RAL_FIELD_CP_2(TPOKUP, TPOKUP.actual, 0,1)
     `RAL_FIELD_CP(TDEISOLATE, TDEISOLATE.actual)
     `RAL_FIELD_CP_2(TDEISOLATE, TDEISOLATE.actual, 0,1)
     `RAL_FIELD_CP(SLEEP_INACT, SLEEP_INACT.actual)
     `RAL_FIELD_CP_2(SLEEP_INACT, SLEEP_INACT.actual, 0,1)
     `RAL_FIELD_CP(SLEEP_EN, SLEEP_EN.actual)
     `RAL_FIELD_CP_1(SLEEP_EN, SLEEP_EN.actual, 0)
     `RAL_FIELD_CP(RSVD, RSVD.actual)
     `RAL_FIELD_CP_1(RSVD, RSVD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TRSTUP2FRCCLKS = new("TRSTUP2FRCCLKS", "RW", 2, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[1:0]"});
    TRSTUP2FRCCLKS.set_powerwell("vcccfn");
    TRSTUP2FRCCLKS.set_rand_mode(0);
   TRSTUP2FRCCLKS.set_reset_signame("prim_gated_rst_b");
    TRSTUP2FRCCLKS.set_logical_path("HQMID");
    void'(add_field( TRSTUP2FRCCLKS ));

    TCLKSOONACK_CP = new("TCLKSOONACK_CP", "RW", 2, 2, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[3:2]"});
    TCLKSOONACK_CP.set_powerwell("vcccfn");
    TCLKSOONACK_CP.set_rand_mode(0);
   TCLKSOONACK_CP.set_reset_signame("prim_gated_rst_b");
    TCLKSOONACK_CP.set_logical_path("HQMID");
    void'(add_field( TCLKSOONACK_CP ));

    TCLKSOFFACK_SRST = new("TCLKSOFFACK_SRST", "RW", 2, 4, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[5:4]"});
    TCLKSOFFACK_SRST.set_powerwell("vcccfn");
    TCLKSOFFACK_SRST.set_rand_mode(0);
   TCLKSOFFACK_SRST.set_reset_signame("prim_gated_rst_b");
    TCLKSOFFACK_SRST.set_logical_path("HQMID");
    void'(add_field( TCLKSOFFACK_SRST ));

    TCLKSONACK_SRST = new("TCLKSONACK_SRST", "RW", 2, 6, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[7:6]"});
    TCLKSONACK_SRST.set_powerwell("vcccfn");
    TCLKSONACK_SRST.set_rand_mode(0);
   TCLKSONACK_SRST.set_reset_signame("prim_gated_rst_b");
    TCLKSONACK_SRST.set_logical_path("HQMID");
    void'(add_field( TCLKSONACK_SRST ));

    TRSTDOWN = new("TRSTDOWN", "RW", 2, 8, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[9:8]"});
    TRSTDOWN.set_powerwell("vcccfn");
    TRSTDOWN.set_rand_mode(0);
   TRSTDOWN.set_reset_signame("prim_gated_rst_b");
    TRSTDOWN.set_logical_path("HQMID");
    void'(add_field( TRSTDOWN ));

    TISOLATE = new("TISOLATE", "RW", 2, 10, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[11:10]"});
    TISOLATE.set_powerwell("vcccfn");
    TISOLATE.set_rand_mode(0);
   TISOLATE.set_reset_signame("prim_gated_rst_b");
    TISOLATE.set_logical_path("HQMID");
    void'(add_field( TISOLATE ));

    TSLEEPACT = new("TSLEEPACT", "RW", 2, 12, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[13:12]"});
    TSLEEPACT.set_powerwell("vcccfn");
    TSLEEPACT.set_rand_mode(0);
   TSLEEPACT.set_reset_signame("prim_gated_rst_b");
    TSLEEPACT.set_logical_path("HQMID");
    void'(add_field( TSLEEPACT ));

    TLATCHDIS = new("TLATCHDIS", "RW", 2, 14, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[15:14]"});
    TLATCHDIS.set_powerwell("vcccfn");
    TLATCHDIS.set_rand_mode(0);
   TLATCHDIS.set_reset_signame("prim_gated_rst_b");
    TLATCHDIS.set_logical_path("HQMID");
    void'(add_field( TLATCHDIS ));

    TPOKDOWN = new("TPOKDOWN", "RW", 2, 16, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[17:16]"});
    TPOKDOWN.set_powerwell("vcccfn");
    TPOKDOWN.set_rand_mode(0);
   TPOKDOWN.set_reset_signame("prim_gated_rst_b");
    TPOKDOWN.set_logical_path("HQMID");
    void'(add_field( TPOKDOWN ));

    TLATCHEN = new("TLATCHEN", "RW", 2, 18, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[19:18]"});
    TLATCHEN.set_powerwell("vcccfn");
    TLATCHEN.set_rand_mode(0);
   TLATCHEN.set_reset_signame("prim_gated_rst_b");
    TLATCHEN.set_logical_path("HQMID");
    void'(add_field( TLATCHEN ));

    ACCRSTUP = new("ACCRSTUP", "RW", 2, 20, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[21:20]"});
    ACCRSTUP.set_powerwell("vcccfn");
    ACCRSTUP.set_rand_mode(0);
   ACCRSTUP.set_reset_signame("prim_gated_rst_b");
    ACCRSTUP.set_logical_path("HQMID");
    void'(add_field( ACCRSTUP ));

    INACCRUSTUP = new("INACCRUSTUP", "RW", 2, 22, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[23:22]"});
    INACCRUSTUP.set_powerwell("vcccfn");
    INACCRUSTUP.set_rand_mode(0);
   INACCRUSTUP.set_reset_signame("prim_gated_rst_b");
    INACCRUSTUP.set_logical_path("HQMID");
    void'(add_field( INACCRUSTUP ));

    TPOKUP = new("TPOKUP", "RW", 2, 24, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[25:24]"});
    TPOKUP.set_powerwell("vcccfn");
    TPOKUP.set_rand_mode(0);
   TPOKUP.set_reset_signame("prim_gated_rst_b");
    TPOKUP.set_logical_path("HQMID");
    void'(add_field( TPOKUP ));

    TDEISOLATE = new("TDEISOLATE", "RW", 2, 26, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[27:26]"});
    TDEISOLATE.set_powerwell("vcccfn");
    TDEISOLATE.set_rand_mode(0);
   TDEISOLATE.set_reset_signame("prim_gated_rst_b");
    TDEISOLATE.set_logical_path("HQMID");
    void'(add_field( TDEISOLATE ));

    SLEEP_INACT = new("SLEEP_INACT", "RW", 2, 28, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[29:28]"});
    SLEEP_INACT.set_powerwell("vcccfn");
    SLEEP_INACT.set_rand_mode(0);
   SLEEP_INACT.set_reset_signame("prim_gated_rst_b");
    SLEEP_INACT.set_logical_path("HQMID");
    void'(add_field( SLEEP_INACT ));

    SLEEP_EN = new("SLEEP_EN", "RW", 1, 30, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[30:30]"});
    SLEEP_EN.set_powerwell("vcccfn");
    SLEEP_EN.set_rand_mode(0);
   SLEEP_EN.set_reset_signame("prim_gated_rst_b");
    SLEEP_EN.set_logical_path("HQMID");
    void'(add_field( SLEEP_EN ));

    RSVD = new("RSVD", "RW", 1, 31, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[31:31]"});
    RSVD.set_powerwell("vcccfn");
    RSVD.set_rand_mode(0);
   RSVD.set_reset_signame("prim_gated_rst_b");
    RSVD.set_logical_path("HQMID");
    void'(add_field( RSVD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_HQM_PGCB_CONTROL_reg) 
endclass : hqm_config_master_bridge_CFG_HQM_PGCB_CONTROL_reg

// ================================================

class hqm_config_master_bridge_CFG_HQM_CDC_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CLKREQ_SYNCOFF_HOLDOFF;
  sla_ral_field CLKREQ_HOLDOFF;
  sla_ral_field PWRGATE_HOLDOFF;
  sla_ral_field CLKGATE_HOLDOFF;
  sla_ral_field CLKREQ_CTL_DISABLED;
  sla_ral_field CLKGATE_DISABLED;
  sla_ral_field PWRGATE_DISABLED;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_HQM_CDC_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.desired)
     `RAL_FIELD_CP_4(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_HOLDOFF, CLKREQ_HOLDOFF.desired)
     `RAL_FIELD_CP_4(CLKREQ_HOLDOFF, CLKREQ_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.desired)
     `RAL_FIELD_CP_4(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.desired)
     `RAL_FIELD_CP_4(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.desired, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.desired)
     `RAL_FIELD_CP_1(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.desired, 0)
     `RAL_FIELD_CP(CLKGATE_DISABLED, CLKGATE_DISABLED.desired)
     `RAL_FIELD_CP_1(CLKGATE_DISABLED, CLKGATE_DISABLED.desired, 0)
     `RAL_FIELD_CP(PWRGATE_DISABLED, PWRGATE_DISABLED.desired)
     `RAL_FIELD_CP_1(PWRGATE_DISABLED, PWRGATE_DISABLED.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.actual)
     `RAL_FIELD_CP_4(CLKREQ_SYNCOFF_HOLDOFF, CLKREQ_SYNCOFF_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_HOLDOFF, CLKREQ_HOLDOFF.actual)
     `RAL_FIELD_CP_4(CLKREQ_HOLDOFF, CLKREQ_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.actual)
     `RAL_FIELD_CP_4(PWRGATE_HOLDOFF, PWRGATE_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.actual)
     `RAL_FIELD_CP_4(CLKGATE_HOLDOFF, CLKGATE_HOLDOFF.actual, 0,1,2,3)
     `RAL_FIELD_CP(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.actual)
     `RAL_FIELD_CP_1(CLKREQ_CTL_DISABLED, CLKREQ_CTL_DISABLED.actual, 0)
     `RAL_FIELD_CP(CLKGATE_DISABLED, CLKGATE_DISABLED.actual)
     `RAL_FIELD_CP_1(CLKGATE_DISABLED, CLKGATE_DISABLED.actual, 0)
     `RAL_FIELD_CP(PWRGATE_DISABLED, PWRGATE_DISABLED.actual)
     `RAL_FIELD_CP_1(PWRGATE_DISABLED, PWRGATE_DISABLED.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CLKREQ_SYNCOFF_HOLDOFF = new("CLKREQ_SYNCOFF_HOLDOFF", "RW", 4, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[3:0]"});
    CLKREQ_SYNCOFF_HOLDOFF.set_powerwell("vcccfn");
    CLKREQ_SYNCOFF_HOLDOFF.set_rand_mode(0);
   CLKREQ_SYNCOFF_HOLDOFF.set_reset_signame("prim_gated_rst_b");
    CLKREQ_SYNCOFF_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( CLKREQ_SYNCOFF_HOLDOFF ));

    CLKREQ_HOLDOFF = new("CLKREQ_HOLDOFF", "RW", 4, 4, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[7:4]"});
    CLKREQ_HOLDOFF.set_powerwell("vcccfn");
    CLKREQ_HOLDOFF.set_rand_mode(0);
   CLKREQ_HOLDOFF.set_reset_signame("prim_gated_rst_b");
    CLKREQ_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( CLKREQ_HOLDOFF ));

    PWRGATE_HOLDOFF = new("PWRGATE_HOLDOFF", "RW", 4, 8, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[11:8]"});
    PWRGATE_HOLDOFF.set_powerwell("vcccfn");
    PWRGATE_HOLDOFF.set_rand_mode(0);
   PWRGATE_HOLDOFF.set_reset_signame("prim_gated_rst_b");
    PWRGATE_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( PWRGATE_HOLDOFF ));

    CLKGATE_HOLDOFF = new("CLKGATE_HOLDOFF", "RW", 4, 12, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[15:12]"});
    CLKGATE_HOLDOFF.set_powerwell("vcccfn");
    CLKGATE_HOLDOFF.set_rand_mode(0);
   CLKGATE_HOLDOFF.set_reset_signame("prim_gated_rst_b");
    CLKGATE_HOLDOFF.set_logical_path("HQMID");
    void'(add_field( CLKGATE_HOLDOFF ));

    CLKREQ_CTL_DISABLED = new("CLKREQ_CTL_DISABLED", "RW", 1, 16, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[16:16]"});
    CLKREQ_CTL_DISABLED.set_powerwell("vcccfn");
    CLKREQ_CTL_DISABLED.set_rand_mode(0);
   CLKREQ_CTL_DISABLED.set_reset_signame("prim_gated_rst_b");
    CLKREQ_CTL_DISABLED.set_logical_path("HQMID");
    void'(add_field( CLKREQ_CTL_DISABLED ));

    CLKGATE_DISABLED = new("CLKGATE_DISABLED", "RW", 1, 17, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[17:17]"});
    CLKGATE_DISABLED.set_powerwell("vcccfn");
    CLKGATE_DISABLED.set_rand_mode(0);
   CLKGATE_DISABLED.set_reset_signame("prim_gated_rst_b");
    CLKGATE_DISABLED.set_logical_path("HQMID");
    void'(add_field( CLKGATE_DISABLED ));

    PWRGATE_DISABLED = new("PWRGATE_DISABLED", "RW", 1, 18, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[18:18]"});
    PWRGATE_DISABLED.set_powerwell("vcccfn");
    PWRGATE_DISABLED.set_rand_mode(0);
   PWRGATE_DISABLED.set_reset_signame("prim_gated_rst_b");
    PWRGATE_DISABLED.set_logical_path("HQMID");
    void'(add_field( PWRGATE_DISABLED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_HQM_CDC_CONTROL_reg) 
endclass : hqm_config_master_bridge_CFG_HQM_CDC_CONTROL_reg

// ================================================

class hqm_config_master_bridge_CFG_CONTROL_GENERAL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CFG_IDLE_DLY;
  sla_ral_field CFG_PROCHOT_DISABLE;
  sla_ral_field RSVZ0;
  sla_ral_field CFG_DISABLE_PSLVERR_TIMEOUT;
  sla_ral_field CFG_ENABLE_INJ_PAR_ERR_RDATA;
  sla_ral_field CFG_ENABLE_INJ_PAR_ERR_ADDR;
  sla_ral_field CFG_ENABLE_INJ_PAR_ERR_WDATA;
  sla_ral_field CFG_DISABLE_RING_PAR_CK;
  sla_ral_field CFG_ENABLE_ALARMS;
  sla_ral_field CFG_PM_ALLOW_ING_DROP;
  sla_ral_field CFG_ENABLE_UNIT_IDLE;
  sla_ral_field IGNORE_PIPE_BUSY;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_CONTROL_GENERAL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFG_IDLE_DLY, CFG_IDLE_DLY.desired)
     `RAL_FIELD_CP_16(CFG_IDLE_DLY, CFG_IDLE_DLY.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(CFG_PROCHOT_DISABLE, CFG_PROCHOT_DISABLE.desired)
     `RAL_FIELD_CP_1(CFG_PROCHOT_DISABLE, CFG_PROCHOT_DISABLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(CFG_DISABLE_PSLVERR_TIMEOUT, CFG_DISABLE_PSLVERR_TIMEOUT.desired)
     `RAL_FIELD_CP_1(CFG_DISABLE_PSLVERR_TIMEOUT, CFG_DISABLE_PSLVERR_TIMEOUT.desired, 0)
     `RAL_FIELD_CP(CFG_ENABLE_INJ_PAR_ERR_RDATA, CFG_ENABLE_INJ_PAR_ERR_RDATA.desired)
     `RAL_FIELD_CP_1(CFG_ENABLE_INJ_PAR_ERR_RDATA, CFG_ENABLE_INJ_PAR_ERR_RDATA.desired, 0)
     `RAL_FIELD_CP(CFG_ENABLE_INJ_PAR_ERR_ADDR, CFG_ENABLE_INJ_PAR_ERR_ADDR.desired)
     `RAL_FIELD_CP_1(CFG_ENABLE_INJ_PAR_ERR_ADDR, CFG_ENABLE_INJ_PAR_ERR_ADDR.desired, 0)
     `RAL_FIELD_CP(CFG_ENABLE_INJ_PAR_ERR_WDATA, CFG_ENABLE_INJ_PAR_ERR_WDATA.desired)
     `RAL_FIELD_CP_1(CFG_ENABLE_INJ_PAR_ERR_WDATA, CFG_ENABLE_INJ_PAR_ERR_WDATA.desired, 0)
     `RAL_FIELD_CP(CFG_DISABLE_RING_PAR_CK, CFG_DISABLE_RING_PAR_CK.desired)
     `RAL_FIELD_CP_1(CFG_DISABLE_RING_PAR_CK, CFG_DISABLE_RING_PAR_CK.desired, 0)
     `RAL_FIELD_CP(CFG_ENABLE_ALARMS, CFG_ENABLE_ALARMS.desired)
     `RAL_FIELD_CP_1(CFG_ENABLE_ALARMS, CFG_ENABLE_ALARMS.desired, 0)
     `RAL_FIELD_CP(CFG_PM_ALLOW_ING_DROP, CFG_PM_ALLOW_ING_DROP.desired)
     `RAL_FIELD_CP_1(CFG_PM_ALLOW_ING_DROP, CFG_PM_ALLOW_ING_DROP.desired, 0)
     `RAL_FIELD_CP(CFG_ENABLE_UNIT_IDLE, CFG_ENABLE_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(CFG_ENABLE_UNIT_IDLE, CFG_ENABLE_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(IGNORE_PIPE_BUSY, IGNORE_PIPE_BUSY.desired)
     `RAL_FIELD_CP_1(IGNORE_PIPE_BUSY, IGNORE_PIPE_BUSY.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFG_IDLE_DLY, CFG_IDLE_DLY.actual)
     `RAL_FIELD_CP_16(CFG_IDLE_DLY, CFG_IDLE_DLY.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(CFG_PROCHOT_DISABLE, CFG_PROCHOT_DISABLE.actual)
     `RAL_FIELD_CP_1(CFG_PROCHOT_DISABLE, CFG_PROCHOT_DISABLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(CFG_DISABLE_PSLVERR_TIMEOUT, CFG_DISABLE_PSLVERR_TIMEOUT.actual)
     `RAL_FIELD_CP_1(CFG_DISABLE_PSLVERR_TIMEOUT, CFG_DISABLE_PSLVERR_TIMEOUT.actual, 0)
     `RAL_FIELD_CP(CFG_ENABLE_INJ_PAR_ERR_RDATA, CFG_ENABLE_INJ_PAR_ERR_RDATA.actual)
     `RAL_FIELD_CP_1(CFG_ENABLE_INJ_PAR_ERR_RDATA, CFG_ENABLE_INJ_PAR_ERR_RDATA.actual, 0)
     `RAL_FIELD_CP(CFG_ENABLE_INJ_PAR_ERR_ADDR, CFG_ENABLE_INJ_PAR_ERR_ADDR.actual)
     `RAL_FIELD_CP_1(CFG_ENABLE_INJ_PAR_ERR_ADDR, CFG_ENABLE_INJ_PAR_ERR_ADDR.actual, 0)
     `RAL_FIELD_CP(CFG_ENABLE_INJ_PAR_ERR_WDATA, CFG_ENABLE_INJ_PAR_ERR_WDATA.actual)
     `RAL_FIELD_CP_1(CFG_ENABLE_INJ_PAR_ERR_WDATA, CFG_ENABLE_INJ_PAR_ERR_WDATA.actual, 0)
     `RAL_FIELD_CP(CFG_DISABLE_RING_PAR_CK, CFG_DISABLE_RING_PAR_CK.actual)
     `RAL_FIELD_CP_1(CFG_DISABLE_RING_PAR_CK, CFG_DISABLE_RING_PAR_CK.actual, 0)
     `RAL_FIELD_CP(CFG_ENABLE_ALARMS, CFG_ENABLE_ALARMS.actual)
     `RAL_FIELD_CP_1(CFG_ENABLE_ALARMS, CFG_ENABLE_ALARMS.actual, 0)
     `RAL_FIELD_CP(CFG_PM_ALLOW_ING_DROP, CFG_PM_ALLOW_ING_DROP.actual)
     `RAL_FIELD_CP_1(CFG_PM_ALLOW_ING_DROP, CFG_PM_ALLOW_ING_DROP.actual, 0)
     `RAL_FIELD_CP(CFG_ENABLE_UNIT_IDLE, CFG_ENABLE_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(CFG_ENABLE_UNIT_IDLE, CFG_ENABLE_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(IGNORE_PIPE_BUSY, IGNORE_PIPE_BUSY.actual)
     `RAL_FIELD_CP_1(IGNORE_PIPE_BUSY, IGNORE_PIPE_BUSY.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CFG_IDLE_DLY = new("CFG_IDLE_DLY", "RW", 16, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[15:0]"});
    CFG_IDLE_DLY.set_powerwell("vcccfn");
    CFG_IDLE_DLY.set_rand_mode(0);
   CFG_IDLE_DLY.set_reset_signame("prim_gated_rst_b");
    CFG_IDLE_DLY.set_logical_path("HQMID");
    void'(add_field( CFG_IDLE_DLY ));

    CFG_PROCHOT_DISABLE = new("CFG_PROCHOT_DISABLE", "RW", 1, 16, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[16:16]"});
    CFG_PROCHOT_DISABLE.set_powerwell("vcccfn");
    CFG_PROCHOT_DISABLE.set_rand_mode(0);
   CFG_PROCHOT_DISABLE.set_reset_signame("prim_gated_rst_b");
    CFG_PROCHOT_DISABLE.set_logical_path("HQMID");
    void'(add_field( CFG_PROCHOT_DISABLE ));

    RSVZ0 = new("RSVZ0", "RW", 6, 17, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[22:17]"});
    RSVZ0.set_powerwell("vcccfn");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("prim_gated_rst_b");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    CFG_DISABLE_PSLVERR_TIMEOUT = new("CFG_DISABLE_PSLVERR_TIMEOUT", "RW", 1, 23, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[23:23]"});
    CFG_DISABLE_PSLVERR_TIMEOUT.set_powerwell("vcccfn");
    CFG_DISABLE_PSLVERR_TIMEOUT.set_rand_mode(0);
   CFG_DISABLE_PSLVERR_TIMEOUT.set_reset_signame("prim_gated_rst_b");
    CFG_DISABLE_PSLVERR_TIMEOUT.set_logical_path("HQMID");
    void'(add_field( CFG_DISABLE_PSLVERR_TIMEOUT ));

    CFG_ENABLE_INJ_PAR_ERR_RDATA = new("CFG_ENABLE_INJ_PAR_ERR_RDATA", "RW/V", 1, 24, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[24:24]"});
    CFG_ENABLE_INJ_PAR_ERR_RDATA.set_powerwell("vcccfn");
    CFG_ENABLE_INJ_PAR_ERR_RDATA.set_rand_mode(0);
   CFG_ENABLE_INJ_PAR_ERR_RDATA.set_reset_signame("prim_gated_rst_b");
    CFG_ENABLE_INJ_PAR_ERR_RDATA.set_logical_path("HQMID");
    void'(add_field( CFG_ENABLE_INJ_PAR_ERR_RDATA ));

    CFG_ENABLE_INJ_PAR_ERR_ADDR = new("CFG_ENABLE_INJ_PAR_ERR_ADDR", "RW/V", 1, 25, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[25:25]"});
    CFG_ENABLE_INJ_PAR_ERR_ADDR.set_powerwell("vcccfn");
    CFG_ENABLE_INJ_PAR_ERR_ADDR.set_rand_mode(0);
   CFG_ENABLE_INJ_PAR_ERR_ADDR.set_reset_signame("prim_gated_rst_b");
    CFG_ENABLE_INJ_PAR_ERR_ADDR.set_logical_path("HQMID");
    void'(add_field( CFG_ENABLE_INJ_PAR_ERR_ADDR ));

    CFG_ENABLE_INJ_PAR_ERR_WDATA = new("CFG_ENABLE_INJ_PAR_ERR_WDATA", "RW/V", 1, 26, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[26:26]"});
    CFG_ENABLE_INJ_PAR_ERR_WDATA.set_powerwell("vcccfn");
    CFG_ENABLE_INJ_PAR_ERR_WDATA.set_rand_mode(0);
   CFG_ENABLE_INJ_PAR_ERR_WDATA.set_reset_signame("prim_gated_rst_b");
    CFG_ENABLE_INJ_PAR_ERR_WDATA.set_logical_path("HQMID");
    void'(add_field( CFG_ENABLE_INJ_PAR_ERR_WDATA ));

    CFG_DISABLE_RING_PAR_CK = new("CFG_DISABLE_RING_PAR_CK", "RW", 1, 27, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[27:27]"});
    CFG_DISABLE_RING_PAR_CK.set_powerwell("vcccfn");
    CFG_DISABLE_RING_PAR_CK.set_rand_mode(0);
   CFG_DISABLE_RING_PAR_CK.set_reset_signame("prim_gated_rst_b");
    CFG_DISABLE_RING_PAR_CK.set_logical_path("HQMID");
    void'(add_field( CFG_DISABLE_RING_PAR_CK ));

    CFG_ENABLE_ALARMS = new("CFG_ENABLE_ALARMS", "RW", 1, 28, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[28:28]"});
    CFG_ENABLE_ALARMS.set_powerwell("vcccfn");
    CFG_ENABLE_ALARMS.set_rand_mode(0);
   CFG_ENABLE_ALARMS.set_reset_signame("prim_gated_rst_b");
    CFG_ENABLE_ALARMS.set_logical_path("HQMID");
    void'(add_field( CFG_ENABLE_ALARMS ));

    CFG_PM_ALLOW_ING_DROP = new("CFG_PM_ALLOW_ING_DROP", "RW", 1, 29, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[29:29]"});
    CFG_PM_ALLOW_ING_DROP.set_powerwell("vcccfn");
    CFG_PM_ALLOW_ING_DROP.set_rand_mode(0);
   CFG_PM_ALLOW_ING_DROP.set_reset_signame("prim_gated_rst_b");
    CFG_PM_ALLOW_ING_DROP.set_logical_path("HQMID");
    void'(add_field( CFG_PM_ALLOW_ING_DROP ));

    CFG_ENABLE_UNIT_IDLE = new("CFG_ENABLE_UNIT_IDLE", "RW", 1, 30, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[30:30]"});
    CFG_ENABLE_UNIT_IDLE.set_powerwell("vcccfn");
    CFG_ENABLE_UNIT_IDLE.set_rand_mode(0);
   CFG_ENABLE_UNIT_IDLE.set_reset_signame("prim_gated_rst_b");
    CFG_ENABLE_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( CFG_ENABLE_UNIT_IDLE ));

    IGNORE_PIPE_BUSY = new("IGNORE_PIPE_BUSY", "RW", 1, 31, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[31:31]"});
    IGNORE_PIPE_BUSY.set_powerwell("vcccfn");
    IGNORE_PIPE_BUSY.set_rand_mode(0);
   IGNORE_PIPE_BUSY.set_reset_signame("prim_gated_rst_b");
    IGNORE_PIPE_BUSY.set_logical_path("HQMID");
    void'(add_field( IGNORE_PIPE_BUSY ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_CONTROL_GENERAL_reg) 
endclass : hqm_config_master_bridge_CFG_CONTROL_GENERAL_reg

// ================================================

class hqm_config_master_bridge_CFG_MSTR_INTERNAL_TIMEOUT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MULTIPLIER;
  sla_ral_field THRESHOLD;
  sla_ral_field RSVZ0;
  sla_ral_field ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_MSTR_INTERNAL_TIMEOUT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.desired)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.desired)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.desired)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.actual)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.actual)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.actual)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MULTIPLIER = new("MULTIPLIER", "RO", 5, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_mstr_internal_timeout.internal_f[4:0]"});
    MULTIPLIER.set_powerwell("vcccfn");
    MULTIPLIER.set_rand_mode(0);
   MULTIPLIER.set_reset_signame("prim_gated_rst_b");
    MULTIPLIER.set_logical_path("HQMID");
    void'(add_field( MULTIPLIER ));

    THRESHOLD = new("THRESHOLD", "RW", 11, 5, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_mstr_internal_timeout.internal_f[15:5]"});
    THRESHOLD.set_powerwell("vcccfn");
    THRESHOLD.set_rand_mode(0);
   THRESHOLD.set_reset_signame("prim_gated_rst_b");
    THRESHOLD.set_logical_path("HQMID");
    void'(add_field( THRESHOLD ));

    RSVZ0 = new("RSVZ0", "RW", 15, 16, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_mstr_internal_timeout.internal_f[30:16]"});
    RSVZ0.set_powerwell("vcccfn");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("prim_gated_rst_b");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    ENABLE = new("ENABLE", "RW", 1, 31, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_mstr_internal_timeout.internal_f[31:31]"});
    ENABLE.set_powerwell("vcccfn");
    ENABLE.set_rand_mode(0);
   ENABLE.set_reset_signame("prim_gated_rst_b");
    ENABLE.set_logical_path("HQMID");
    void'(add_field( ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_MSTR_INTERNAL_TIMEOUT_reg) 
endclass : hqm_config_master_bridge_CFG_MSTR_INTERNAL_TIMEOUT_reg

// ================================================

class hqm_config_master_bridge_CFG_DIAGNOSTIC_PROC_LCB_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CHP_LCB_ENABLE;
  sla_ral_field ROP_LCB_ENABLE;
  sla_ral_field LSP_LCB_ENABLE;
  sla_ral_field NALB_LCB_ENABLE;
  sla_ral_field AP_LCB_ENABLE;
  sla_ral_field DP_LCB_ENABLE;
  sla_ral_field QED_LCB_ENABLE;
  sla_ral_field DQED_LCB_ENABLE;
  sla_ral_field AQED_LCB_ENABLE;
  sla_ral_field SYS_LCB_ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_DIAGNOSTIC_PROC_LCB_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHP_LCB_ENABLE, CHP_LCB_ENABLE.desired)
     `RAL_FIELD_CP_1(CHP_LCB_ENABLE, CHP_LCB_ENABLE.desired, 0)
     `RAL_FIELD_CP(ROP_LCB_ENABLE, ROP_LCB_ENABLE.desired)
     `RAL_FIELD_CP_1(ROP_LCB_ENABLE, ROP_LCB_ENABLE.desired, 0)
     `RAL_FIELD_CP(LSP_LCB_ENABLE, LSP_LCB_ENABLE.desired)
     `RAL_FIELD_CP_1(LSP_LCB_ENABLE, LSP_LCB_ENABLE.desired, 0)
     `RAL_FIELD_CP(NALB_LCB_ENABLE, NALB_LCB_ENABLE.desired)
     `RAL_FIELD_CP_1(NALB_LCB_ENABLE, NALB_LCB_ENABLE.desired, 0)
     `RAL_FIELD_CP(AP_LCB_ENABLE, AP_LCB_ENABLE.desired)
     `RAL_FIELD_CP_1(AP_LCB_ENABLE, AP_LCB_ENABLE.desired, 0)
     `RAL_FIELD_CP(DP_LCB_ENABLE, DP_LCB_ENABLE.desired)
     `RAL_FIELD_CP_1(DP_LCB_ENABLE, DP_LCB_ENABLE.desired, 0)
     `RAL_FIELD_CP(QED_LCB_ENABLE, QED_LCB_ENABLE.desired)
     `RAL_FIELD_CP_1(QED_LCB_ENABLE, QED_LCB_ENABLE.desired, 0)
     `RAL_FIELD_CP(DQED_LCB_ENABLE, DQED_LCB_ENABLE.desired)
     `RAL_FIELD_CP_1(DQED_LCB_ENABLE, DQED_LCB_ENABLE.desired, 0)
     `RAL_FIELD_CP(AQED_LCB_ENABLE, AQED_LCB_ENABLE.desired)
     `RAL_FIELD_CP_1(AQED_LCB_ENABLE, AQED_LCB_ENABLE.desired, 0)
     `RAL_FIELD_CP(SYS_LCB_ENABLE, SYS_LCB_ENABLE.desired)
     `RAL_FIELD_CP_1(SYS_LCB_ENABLE, SYS_LCB_ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHP_LCB_ENABLE, CHP_LCB_ENABLE.actual)
     `RAL_FIELD_CP_1(CHP_LCB_ENABLE, CHP_LCB_ENABLE.actual, 0)
     `RAL_FIELD_CP(ROP_LCB_ENABLE, ROP_LCB_ENABLE.actual)
     `RAL_FIELD_CP_1(ROP_LCB_ENABLE, ROP_LCB_ENABLE.actual, 0)
     `RAL_FIELD_CP(LSP_LCB_ENABLE, LSP_LCB_ENABLE.actual)
     `RAL_FIELD_CP_1(LSP_LCB_ENABLE, LSP_LCB_ENABLE.actual, 0)
     `RAL_FIELD_CP(NALB_LCB_ENABLE, NALB_LCB_ENABLE.actual)
     `RAL_FIELD_CP_1(NALB_LCB_ENABLE, NALB_LCB_ENABLE.actual, 0)
     `RAL_FIELD_CP(AP_LCB_ENABLE, AP_LCB_ENABLE.actual)
     `RAL_FIELD_CP_1(AP_LCB_ENABLE, AP_LCB_ENABLE.actual, 0)
     `RAL_FIELD_CP(DP_LCB_ENABLE, DP_LCB_ENABLE.actual)
     `RAL_FIELD_CP_1(DP_LCB_ENABLE, DP_LCB_ENABLE.actual, 0)
     `RAL_FIELD_CP(QED_LCB_ENABLE, QED_LCB_ENABLE.actual)
     `RAL_FIELD_CP_1(QED_LCB_ENABLE, QED_LCB_ENABLE.actual, 0)
     `RAL_FIELD_CP(DQED_LCB_ENABLE, DQED_LCB_ENABLE.actual)
     `RAL_FIELD_CP_1(DQED_LCB_ENABLE, DQED_LCB_ENABLE.actual, 0)
     `RAL_FIELD_CP(AQED_LCB_ENABLE, AQED_LCB_ENABLE.actual)
     `RAL_FIELD_CP_1(AQED_LCB_ENABLE, AQED_LCB_ENABLE.actual, 0)
     `RAL_FIELD_CP(SYS_LCB_ENABLE, SYS_LCB_ENABLE.actual)
     `RAL_FIELD_CP_1(SYS_LCB_ENABLE, SYS_LCB_ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CHP_LCB_ENABLE = new("CHP_LCB_ENABLE", "RO/V", 1, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[0:0]"});
    CHP_LCB_ENABLE.set_powerwell("vcccfn");
    CHP_LCB_ENABLE.set_rand_mode(0);
   CHP_LCB_ENABLE.set_reset_signame("prim_gated_rst_b");
    CHP_LCB_ENABLE.set_logical_path("HQMID");
    void'(add_field( CHP_LCB_ENABLE ));

    ROP_LCB_ENABLE = new("ROP_LCB_ENABLE", "RO/V", 1, 1, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[1:1]"});
    ROP_LCB_ENABLE.set_powerwell("vcccfn");
    ROP_LCB_ENABLE.set_rand_mode(0);
   ROP_LCB_ENABLE.set_reset_signame("prim_gated_rst_b");
    ROP_LCB_ENABLE.set_logical_path("HQMID");
    void'(add_field( ROP_LCB_ENABLE ));

    LSP_LCB_ENABLE = new("LSP_LCB_ENABLE", "RO/V", 1, 2, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[2:2]"});
    LSP_LCB_ENABLE.set_powerwell("vcccfn");
    LSP_LCB_ENABLE.set_rand_mode(0);
   LSP_LCB_ENABLE.set_reset_signame("prim_gated_rst_b");
    LSP_LCB_ENABLE.set_logical_path("HQMID");
    void'(add_field( LSP_LCB_ENABLE ));

    NALB_LCB_ENABLE = new("NALB_LCB_ENABLE", "RO/V", 1, 3, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[3:3]"});
    NALB_LCB_ENABLE.set_powerwell("vcccfn");
    NALB_LCB_ENABLE.set_rand_mode(0);
   NALB_LCB_ENABLE.set_reset_signame("prim_gated_rst_b");
    NALB_LCB_ENABLE.set_logical_path("HQMID");
    void'(add_field( NALB_LCB_ENABLE ));

    AP_LCB_ENABLE = new("AP_LCB_ENABLE", "RO/V", 1, 4, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[4:4]"});
    AP_LCB_ENABLE.set_powerwell("vcccfn");
    AP_LCB_ENABLE.set_rand_mode(0);
   AP_LCB_ENABLE.set_reset_signame("prim_gated_rst_b");
    AP_LCB_ENABLE.set_logical_path("HQMID");
    void'(add_field( AP_LCB_ENABLE ));

    DP_LCB_ENABLE = new("DP_LCB_ENABLE", "RO/V", 1, 5, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[5:5]"});
    DP_LCB_ENABLE.set_powerwell("vcccfn");
    DP_LCB_ENABLE.set_rand_mode(0);
   DP_LCB_ENABLE.set_reset_signame("prim_gated_rst_b");
    DP_LCB_ENABLE.set_logical_path("HQMID");
    void'(add_field( DP_LCB_ENABLE ));

    QED_LCB_ENABLE = new("QED_LCB_ENABLE", "RO/V", 1, 6, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[6:6]"});
    QED_LCB_ENABLE.set_powerwell("vcccfn");
    QED_LCB_ENABLE.set_rand_mode(0);
   QED_LCB_ENABLE.set_reset_signame("prim_gated_rst_b");
    QED_LCB_ENABLE.set_logical_path("HQMID");
    void'(add_field( QED_LCB_ENABLE ));

    DQED_LCB_ENABLE = new("DQED_LCB_ENABLE", "RO/V", 1, 7, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[7:7]"});
    DQED_LCB_ENABLE.set_powerwell("vcccfn");
    DQED_LCB_ENABLE.set_rand_mode(0);
   DQED_LCB_ENABLE.set_reset_signame("prim_gated_rst_b");
    DQED_LCB_ENABLE.set_logical_path("HQMID");
    void'(add_field( DQED_LCB_ENABLE ));

    AQED_LCB_ENABLE = new("AQED_LCB_ENABLE", "RO/V", 1, 8, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[8:8]"});
    AQED_LCB_ENABLE.set_powerwell("vcccfn");
    AQED_LCB_ENABLE.set_rand_mode(0);
   AQED_LCB_ENABLE.set_reset_signame("prim_gated_rst_b");
    AQED_LCB_ENABLE.set_logical_path("HQMID");
    void'(add_field( AQED_LCB_ENABLE ));

    SYS_LCB_ENABLE = new("SYS_LCB_ENABLE", "RO/V", 1, 9, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[9:9]"});
    SYS_LCB_ENABLE.set_powerwell("vcccfn");
    SYS_LCB_ENABLE.set_rand_mode(0);
   SYS_LCB_ENABLE.set_reset_signame("prim_gated_rst_b");
    SYS_LCB_ENABLE.set_logical_path("HQMID");
    void'(add_field( SYS_LCB_ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_DIAGNOSTIC_PROC_LCB_STATUS_reg) 
endclass : hqm_config_master_bridge_CFG_DIAGNOSTIC_PROC_LCB_STATUS_reg

// ================================================

class hqm_config_master_bridge_CFG_DIAGNOSTIC_STATUS_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CFG_TIMEOUT_ERR;
  sla_ral_field CFG_REQRSP_UNSOL_ERR;
  sla_ral_field CFG_PROTOCOL_ERR;
  sla_ral_field CFG_SLV_PAR_ERR;
  sla_ral_field CFG_DECODE_PAR_ERR;
  sla_ral_field CFG_REQ_DROP_ERR;
  sla_ral_field CFG_REQ_UP_MISS_ERR;
  sla_ral_field CFG_DECODE_ERR;
  sla_ral_field CFG_SLAVE_ACCESS_ERR;
  sla_ral_field CFG_SLAVE_TIMEOUT_ERR;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_DIAGNOSTIC_STATUS_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFG_TIMEOUT_ERR, CFG_TIMEOUT_ERR.desired)
     `RAL_FIELD_CP_1(CFG_TIMEOUT_ERR, CFG_TIMEOUT_ERR.desired, 0)
     `RAL_FIELD_CP(CFG_REQRSP_UNSOL_ERR, CFG_REQRSP_UNSOL_ERR.desired)
     `RAL_FIELD_CP_1(CFG_REQRSP_UNSOL_ERR, CFG_REQRSP_UNSOL_ERR.desired, 0)
     `RAL_FIELD_CP(CFG_PROTOCOL_ERR, CFG_PROTOCOL_ERR.desired)
     `RAL_FIELD_CP_1(CFG_PROTOCOL_ERR, CFG_PROTOCOL_ERR.desired, 0)
     `RAL_FIELD_CP(CFG_SLV_PAR_ERR, CFG_SLV_PAR_ERR.desired)
     `RAL_FIELD_CP_1(CFG_SLV_PAR_ERR, CFG_SLV_PAR_ERR.desired, 0)
     `RAL_FIELD_CP(CFG_DECODE_PAR_ERR, CFG_DECODE_PAR_ERR.desired)
     `RAL_FIELD_CP_1(CFG_DECODE_PAR_ERR, CFG_DECODE_PAR_ERR.desired, 0)
     `RAL_FIELD_CP(CFG_REQ_DROP_ERR, CFG_REQ_DROP_ERR.desired)
     `RAL_FIELD_CP_1(CFG_REQ_DROP_ERR, CFG_REQ_DROP_ERR.desired, 0)
     `RAL_FIELD_CP(CFG_REQ_UP_MISS_ERR, CFG_REQ_UP_MISS_ERR.desired)
     `RAL_FIELD_CP_1(CFG_REQ_UP_MISS_ERR, CFG_REQ_UP_MISS_ERR.desired, 0)
     `RAL_FIELD_CP(CFG_DECODE_ERR, CFG_DECODE_ERR.desired)
     `RAL_FIELD_CP_1(CFG_DECODE_ERR, CFG_DECODE_ERR.desired, 0)
     `RAL_FIELD_CP(CFG_SLAVE_ACCESS_ERR, CFG_SLAVE_ACCESS_ERR.desired)
     `RAL_FIELD_CP_1(CFG_SLAVE_ACCESS_ERR, CFG_SLAVE_ACCESS_ERR.desired, 0)
     `RAL_FIELD_CP(CFG_SLAVE_TIMEOUT_ERR, CFG_SLAVE_TIMEOUT_ERR.desired)
     `RAL_FIELD_CP_1(CFG_SLAVE_TIMEOUT_ERR, CFG_SLAVE_TIMEOUT_ERR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFG_TIMEOUT_ERR, CFG_TIMEOUT_ERR.actual)
     `RAL_FIELD_CP_1(CFG_TIMEOUT_ERR, CFG_TIMEOUT_ERR.actual, 0)
     `RAL_FIELD_CP(CFG_REQRSP_UNSOL_ERR, CFG_REQRSP_UNSOL_ERR.actual)
     `RAL_FIELD_CP_1(CFG_REQRSP_UNSOL_ERR, CFG_REQRSP_UNSOL_ERR.actual, 0)
     `RAL_FIELD_CP(CFG_PROTOCOL_ERR, CFG_PROTOCOL_ERR.actual)
     `RAL_FIELD_CP_1(CFG_PROTOCOL_ERR, CFG_PROTOCOL_ERR.actual, 0)
     `RAL_FIELD_CP(CFG_SLV_PAR_ERR, CFG_SLV_PAR_ERR.actual)
     `RAL_FIELD_CP_1(CFG_SLV_PAR_ERR, CFG_SLV_PAR_ERR.actual, 0)
     `RAL_FIELD_CP(CFG_DECODE_PAR_ERR, CFG_DECODE_PAR_ERR.actual)
     `RAL_FIELD_CP_1(CFG_DECODE_PAR_ERR, CFG_DECODE_PAR_ERR.actual, 0)
     `RAL_FIELD_CP(CFG_REQ_DROP_ERR, CFG_REQ_DROP_ERR.actual)
     `RAL_FIELD_CP_1(CFG_REQ_DROP_ERR, CFG_REQ_DROP_ERR.actual, 0)
     `RAL_FIELD_CP(CFG_REQ_UP_MISS_ERR, CFG_REQ_UP_MISS_ERR.actual)
     `RAL_FIELD_CP_1(CFG_REQ_UP_MISS_ERR, CFG_REQ_UP_MISS_ERR.actual, 0)
     `RAL_FIELD_CP(CFG_DECODE_ERR, CFG_DECODE_ERR.actual)
     `RAL_FIELD_CP_1(CFG_DECODE_ERR, CFG_DECODE_ERR.actual, 0)
     `RAL_FIELD_CP(CFG_SLAVE_ACCESS_ERR, CFG_SLAVE_ACCESS_ERR.actual)
     `RAL_FIELD_CP_1(CFG_SLAVE_ACCESS_ERR, CFG_SLAVE_ACCESS_ERR.actual, 0)
     `RAL_FIELD_CP(CFG_SLAVE_TIMEOUT_ERR, CFG_SLAVE_TIMEOUT_ERR.actual)
     `RAL_FIELD_CP_1(CFG_SLAVE_TIMEOUT_ERR, CFG_SLAVE_TIMEOUT_ERR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CFG_TIMEOUT_ERR = new("CFG_TIMEOUT_ERR", "RW/1C/V", 1, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[0:0]"});
    CFG_TIMEOUT_ERR.set_powerwell("vcccfn");
    CFG_TIMEOUT_ERR.set_rand_mode(0);
   CFG_TIMEOUT_ERR.set_reset_signame("prim_gated_rst_b");
    CFG_TIMEOUT_ERR.set_logical_path("HQMID");
    void'(add_field( CFG_TIMEOUT_ERR ));

    CFG_REQRSP_UNSOL_ERR = new("CFG_REQRSP_UNSOL_ERR", "RW/1C/V", 1, 1, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[1:1]"});
    CFG_REQRSP_UNSOL_ERR.set_powerwell("vcccfn");
    CFG_REQRSP_UNSOL_ERR.set_rand_mode(0);
   CFG_REQRSP_UNSOL_ERR.set_reset_signame("prim_gated_rst_b");
    CFG_REQRSP_UNSOL_ERR.set_logical_path("HQMID");
    void'(add_field( CFG_REQRSP_UNSOL_ERR ));

    CFG_PROTOCOL_ERR = new("CFG_PROTOCOL_ERR", "RW/1C/V", 1, 2, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[2:2]"});
    CFG_PROTOCOL_ERR.set_powerwell("vcccfn");
    CFG_PROTOCOL_ERR.set_rand_mode(0);
   CFG_PROTOCOL_ERR.set_reset_signame("prim_gated_rst_b");
    CFG_PROTOCOL_ERR.set_logical_path("HQMID");
    void'(add_field( CFG_PROTOCOL_ERR ));

    CFG_SLV_PAR_ERR = new("CFG_SLV_PAR_ERR", "RW/1C/V", 1, 3, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[3:3]"});
    CFG_SLV_PAR_ERR.set_powerwell("vcccfn");
    CFG_SLV_PAR_ERR.set_rand_mode(0);
   CFG_SLV_PAR_ERR.set_reset_signame("prim_gated_rst_b");
    CFG_SLV_PAR_ERR.set_logical_path("HQMID");
    void'(add_field( CFG_SLV_PAR_ERR ));

    CFG_DECODE_PAR_ERR = new("CFG_DECODE_PAR_ERR", "RW/1C/V", 1, 4, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[4:4]"});
    CFG_DECODE_PAR_ERR.set_powerwell("vcccfn");
    CFG_DECODE_PAR_ERR.set_rand_mode(0);
   CFG_DECODE_PAR_ERR.set_reset_signame("prim_gated_rst_b");
    CFG_DECODE_PAR_ERR.set_logical_path("HQMID");
    void'(add_field( CFG_DECODE_PAR_ERR ));

    CFG_REQ_DROP_ERR = new("CFG_REQ_DROP_ERR", "RW/1C/V", 1, 16, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[16:16]"});
    CFG_REQ_DROP_ERR.set_powerwell("vcccfn");
    CFG_REQ_DROP_ERR.set_rand_mode(0);
   CFG_REQ_DROP_ERR.set_reset_signame("prim_gated_rst_b");
    CFG_REQ_DROP_ERR.set_logical_path("HQMID");
    void'(add_field( CFG_REQ_DROP_ERR ));

    CFG_REQ_UP_MISS_ERR = new("CFG_REQ_UP_MISS_ERR", "RW/1C/V", 1, 17, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[17:17]"});
    CFG_REQ_UP_MISS_ERR.set_powerwell("vcccfn");
    CFG_REQ_UP_MISS_ERR.set_rand_mode(0);
   CFG_REQ_UP_MISS_ERR.set_reset_signame("prim_gated_rst_b");
    CFG_REQ_UP_MISS_ERR.set_logical_path("HQMID");
    void'(add_field( CFG_REQ_UP_MISS_ERR ));

    CFG_DECODE_ERR = new("CFG_DECODE_ERR", "RW/1C/V", 1, 18, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[18:18]"});
    CFG_DECODE_ERR.set_powerwell("vcccfn");
    CFG_DECODE_ERR.set_rand_mode(0);
   CFG_DECODE_ERR.set_reset_signame("prim_gated_rst_b");
    CFG_DECODE_ERR.set_logical_path("HQMID");
    void'(add_field( CFG_DECODE_ERR ));

    CFG_SLAVE_ACCESS_ERR = new("CFG_SLAVE_ACCESS_ERR", "RW/1C/V", 1, 19, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[19:19]"});
    CFG_SLAVE_ACCESS_ERR.set_powerwell("vcccfn");
    CFG_SLAVE_ACCESS_ERR.set_rand_mode(0);
   CFG_SLAVE_ACCESS_ERR.set_reset_signame("prim_gated_rst_b");
    CFG_SLAVE_ACCESS_ERR.set_logical_path("HQMID");
    void'(add_field( CFG_SLAVE_ACCESS_ERR ));

    CFG_SLAVE_TIMEOUT_ERR = new("CFG_SLAVE_TIMEOUT_ERR", "RW/1C/V", 1, 20, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[20:20]"});
    CFG_SLAVE_TIMEOUT_ERR.set_powerwell("vcccfn");
    CFG_SLAVE_TIMEOUT_ERR.set_rand_mode(0);
   CFG_SLAVE_TIMEOUT_ERR.set_reset_signame("prim_gated_rst_b");
    CFG_SLAVE_TIMEOUT_ERR.set_logical_path("HQMID");
    void'(add_field( CFG_SLAVE_TIMEOUT_ERR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_DIAGNOSTIC_STATUS_1_reg) 
endclass : hqm_config_master_bridge_CFG_DIAGNOSTIC_STATUS_1_reg

// ================================================

class hqm_config_master_bridge_CFG_DIAGNOSTIC_SYNDROME_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CFG_SYNDROME_ADDR_MODE_F;
  sla_ral_field CFG_SYNDROME_ADDR_TARG_F;
  sla_ral_field CFG_SYNDROME_ADDR_NODE_F;
  sla_ral_field CFG_SYNDROME_ERR_ENC;
  sla_ral_field CFG_SYNDROME_RSP_UID_F;
  sla_ral_field CFG_SYNDROME_VALID;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_DIAGNOSTIC_SYNDROME_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFG_SYNDROME_ADDR_MODE_F, CFG_SYNDROME_ADDR_MODE_F.desired)
     `RAL_FIELD_CP_4(CFG_SYNDROME_ADDR_MODE_F, CFG_SYNDROME_ADDR_MODE_F.desired, 0,1,2,3)
     `RAL_FIELD_CP(CFG_SYNDROME_ADDR_TARG_F, CFG_SYNDROME_ADDR_TARG_F.desired)
     `RAL_FIELD_CP_16(CFG_SYNDROME_ADDR_TARG_F, CFG_SYNDROME_ADDR_TARG_F.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(CFG_SYNDROME_ADDR_NODE_F, CFG_SYNDROME_ADDR_NODE_F.desired)
     `RAL_FIELD_CP_4(CFG_SYNDROME_ADDR_NODE_F, CFG_SYNDROME_ADDR_NODE_F.desired, 0,1,2,3)
     `RAL_FIELD_CP(CFG_SYNDROME_ERR_ENC, CFG_SYNDROME_ERR_ENC.desired)
     `RAL_FIELD_CP_3(CFG_SYNDROME_ERR_ENC, CFG_SYNDROME_ERR_ENC.desired, 0,1,2)
     `RAL_FIELD_CP(CFG_SYNDROME_RSP_UID_F, CFG_SYNDROME_RSP_UID_F.desired)
     `RAL_FIELD_CP_4(CFG_SYNDROME_RSP_UID_F, CFG_SYNDROME_RSP_UID_F.desired, 0,1,2,3)
     `RAL_FIELD_CP(CFG_SYNDROME_VALID, CFG_SYNDROME_VALID.desired)
     `RAL_FIELD_CP_1(CFG_SYNDROME_VALID, CFG_SYNDROME_VALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CFG_SYNDROME_ADDR_MODE_F, CFG_SYNDROME_ADDR_MODE_F.actual)
     `RAL_FIELD_CP_4(CFG_SYNDROME_ADDR_MODE_F, CFG_SYNDROME_ADDR_MODE_F.actual, 0,1,2,3)
     `RAL_FIELD_CP(CFG_SYNDROME_ADDR_TARG_F, CFG_SYNDROME_ADDR_TARG_F.actual)
     `RAL_FIELD_CP_16(CFG_SYNDROME_ADDR_TARG_F, CFG_SYNDROME_ADDR_TARG_F.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(CFG_SYNDROME_ADDR_NODE_F, CFG_SYNDROME_ADDR_NODE_F.actual)
     `RAL_FIELD_CP_4(CFG_SYNDROME_ADDR_NODE_F, CFG_SYNDROME_ADDR_NODE_F.actual, 0,1,2,3)
     `RAL_FIELD_CP(CFG_SYNDROME_ERR_ENC, CFG_SYNDROME_ERR_ENC.actual)
     `RAL_FIELD_CP_3(CFG_SYNDROME_ERR_ENC, CFG_SYNDROME_ERR_ENC.actual, 0,1,2)
     `RAL_FIELD_CP(CFG_SYNDROME_RSP_UID_F, CFG_SYNDROME_RSP_UID_F.actual)
     `RAL_FIELD_CP_4(CFG_SYNDROME_RSP_UID_F, CFG_SYNDROME_RSP_UID_F.actual, 0,1,2,3)
     `RAL_FIELD_CP(CFG_SYNDROME_VALID, CFG_SYNDROME_VALID.actual)
     `RAL_FIELD_CP_1(CFG_SYNDROME_VALID, CFG_SYNDROME_VALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CFG_SYNDROME_ADDR_MODE_F = new("CFG_SYNDROME_ADDR_MODE_F", "RO/V", 4, 0, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[3:0]"});
    CFG_SYNDROME_ADDR_MODE_F.set_powerwell("vcccfn");
    CFG_SYNDROME_ADDR_MODE_F.set_rand_mode(0);
   CFG_SYNDROME_ADDR_MODE_F.set_reset_signame("prim_gated_rst_b");
    CFG_SYNDROME_ADDR_MODE_F.set_logical_path("HQMID");
    void'(add_field( CFG_SYNDROME_ADDR_MODE_F ));

    CFG_SYNDROME_ADDR_TARG_F = new("CFG_SYNDROME_ADDR_TARG_F", "RO/V", 16, 4, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[19:4]"});
    CFG_SYNDROME_ADDR_TARG_F.set_powerwell("vcccfn");
    CFG_SYNDROME_ADDR_TARG_F.set_rand_mode(0);
   CFG_SYNDROME_ADDR_TARG_F.set_reset_signame("prim_gated_rst_b");
    CFG_SYNDROME_ADDR_TARG_F.set_logical_path("HQMID");
    void'(add_field( CFG_SYNDROME_ADDR_TARG_F ));

    CFG_SYNDROME_ADDR_NODE_F = new("CFG_SYNDROME_ADDR_NODE_F", "RO/V", 4, 20, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[23:20]"});
    CFG_SYNDROME_ADDR_NODE_F.set_powerwell("vcccfn");
    CFG_SYNDROME_ADDR_NODE_F.set_rand_mode(0);
   CFG_SYNDROME_ADDR_NODE_F.set_reset_signame("prim_gated_rst_b");
    CFG_SYNDROME_ADDR_NODE_F.set_logical_path("HQMID");
    void'(add_field( CFG_SYNDROME_ADDR_NODE_F ));

    CFG_SYNDROME_ERR_ENC = new("CFG_SYNDROME_ERR_ENC", "RO/V", 3, 24, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[26:24]"});
    CFG_SYNDROME_ERR_ENC.set_powerwell("vcccfn");
    CFG_SYNDROME_ERR_ENC.set_rand_mode(0);
   CFG_SYNDROME_ERR_ENC.set_reset_signame("prim_gated_rst_b");
    CFG_SYNDROME_ERR_ENC.set_logical_path("HQMID");
    void'(add_field( CFG_SYNDROME_ERR_ENC ));

    CFG_SYNDROME_RSP_UID_F = new("CFG_SYNDROME_RSP_UID_F", "RO/V", 4, 27, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[30:27]"});
    CFG_SYNDROME_RSP_UID_F.set_powerwell("vcccfn");
    CFG_SYNDROME_RSP_UID_F.set_rand_mode(0);
   CFG_SYNDROME_RSP_UID_F.set_reset_signame("prim_gated_rst_b");
    CFG_SYNDROME_RSP_UID_F.set_logical_path("HQMID");
    void'(add_field( CFG_SYNDROME_RSP_UID_F ));

    CFG_SYNDROME_VALID = new("CFG_SYNDROME_VALID", "RW/1C/V", 1, 31, {"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[31:31]"});
    CFG_SYNDROME_VALID.set_powerwell("vcccfn");
    CFG_SYNDROME_VALID.set_rand_mode(0);
   CFG_SYNDROME_VALID.set_reset_signame("prim_gated_rst_b");
    CFG_SYNDROME_VALID.set_logical_path("HQMID");
    void'(add_field( CFG_SYNDROME_VALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_DIAGNOSTIC_SYNDROME_reg) 
endclass : hqm_config_master_bridge_CFG_DIAGNOSTIC_SYNDROME_reg

// ================================================

class hqm_config_master_bridge_CFG_MASTER_CTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field OVERRIDE_PMC_PGCB_ACK_B;
  sla_ral_field OVERRIDE_FET_EN_B;
  sla_ral_field OVERRIDE_PM_CFG_CONTROL;
  sla_ral_field OVERRIDE_PMSM_PGCB_REQ_B;
  sla_ral_field OVERRIDE_CLK_SWITCH_CONTROL;
  sla_ral_field RSVZ1;
  sla_ral_field PWRGATE_PMC_WAKE;
  sla_ral_field OVERRIDE_CLK_GATE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_config_master_bridge_CFG_MASTER_CTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(OVERRIDE_PMC_PGCB_ACK_B, OVERRIDE_PMC_PGCB_ACK_B.desired)
     `RAL_FIELD_CP_2(OVERRIDE_PMC_PGCB_ACK_B, OVERRIDE_PMC_PGCB_ACK_B.desired, 0,1)
     `RAL_FIELD_CP(OVERRIDE_FET_EN_B, OVERRIDE_FET_EN_B.desired)
     `RAL_FIELD_CP_2(OVERRIDE_FET_EN_B, OVERRIDE_FET_EN_B.desired, 0,1)
     `RAL_FIELD_CP(OVERRIDE_PM_CFG_CONTROL, OVERRIDE_PM_CFG_CONTROL.desired)
     `RAL_FIELD_CP_3(OVERRIDE_PM_CFG_CONTROL, OVERRIDE_PM_CFG_CONTROL.desired, 0,1,2)
     `RAL_FIELD_CP(OVERRIDE_PMSM_PGCB_REQ_B, OVERRIDE_PMSM_PGCB_REQ_B.desired)
     `RAL_FIELD_CP_2(OVERRIDE_PMSM_PGCB_REQ_B, OVERRIDE_PMSM_PGCB_REQ_B.desired, 0,1)
     `RAL_FIELD_CP(OVERRIDE_CLK_SWITCH_CONTROL, OVERRIDE_CLK_SWITCH_CONTROL.desired)
     `RAL_FIELD_CP_3(OVERRIDE_CLK_SWITCH_CONTROL, OVERRIDE_CLK_SWITCH_CONTROL.desired, 0,1,2)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_3(RSVZ1, RSVZ1.desired, 0,1,2)
     `RAL_FIELD_CP(PWRGATE_PMC_WAKE, PWRGATE_PMC_WAKE.desired)
     `RAL_FIELD_CP_1(PWRGATE_PMC_WAKE, PWRGATE_PMC_WAKE.desired, 0)
     `RAL_FIELD_CP(OVERRIDE_CLK_GATE, OVERRIDE_CLK_GATE.desired)
     `RAL_FIELD_CP_1(OVERRIDE_CLK_GATE, OVERRIDE_CLK_GATE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(OVERRIDE_PMC_PGCB_ACK_B, OVERRIDE_PMC_PGCB_ACK_B.actual)
     `RAL_FIELD_CP_2(OVERRIDE_PMC_PGCB_ACK_B, OVERRIDE_PMC_PGCB_ACK_B.actual, 0,1)
     `RAL_FIELD_CP(OVERRIDE_FET_EN_B, OVERRIDE_FET_EN_B.actual)
     `RAL_FIELD_CP_2(OVERRIDE_FET_EN_B, OVERRIDE_FET_EN_B.actual, 0,1)
     `RAL_FIELD_CP(OVERRIDE_PM_CFG_CONTROL, OVERRIDE_PM_CFG_CONTROL.actual)
     `RAL_FIELD_CP_3(OVERRIDE_PM_CFG_CONTROL, OVERRIDE_PM_CFG_CONTROL.actual, 0,1,2)
     `RAL_FIELD_CP(OVERRIDE_PMSM_PGCB_REQ_B, OVERRIDE_PMSM_PGCB_REQ_B.actual)
     `RAL_FIELD_CP_2(OVERRIDE_PMSM_PGCB_REQ_B, OVERRIDE_PMSM_PGCB_REQ_B.actual, 0,1)
     `RAL_FIELD_CP(OVERRIDE_CLK_SWITCH_CONTROL, OVERRIDE_CLK_SWITCH_CONTROL.actual)
     `RAL_FIELD_CP_3(OVERRIDE_CLK_SWITCH_CONTROL, OVERRIDE_CLK_SWITCH_CONTROL.actual, 0,1,2)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_3(RSVZ1, RSVZ1.actual, 0,1,2)
     `RAL_FIELD_CP(PWRGATE_PMC_WAKE, PWRGATE_PMC_WAKE.actual)
     `RAL_FIELD_CP_1(PWRGATE_PMC_WAKE, PWRGATE_PMC_WAKE.actual, 0)
     `RAL_FIELD_CP(OVERRIDE_CLK_GATE, OVERRIDE_CLK_GATE.actual)
     `RAL_FIELD_CP_1(OVERRIDE_CLK_GATE, OVERRIDE_CLK_GATE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    OVERRIDE_PMC_PGCB_ACK_B = new("OVERRIDE_PMC_PGCB_ACK_B", "RW", 2, 0, {""});
    OVERRIDE_PMC_PGCB_ACK_B.set_powerwell("vcccfn");
    OVERRIDE_PMC_PGCB_ACK_B.set_rand_mode(0);
   OVERRIDE_PMC_PGCB_ACK_B.set_reset_signame("prim_gated_rst_b");
    void'(add_field( OVERRIDE_PMC_PGCB_ACK_B ));

    OVERRIDE_FET_EN_B = new("OVERRIDE_FET_EN_B", "RW", 2, 2, {""});
    OVERRIDE_FET_EN_B.set_powerwell("vcccfn");
    OVERRIDE_FET_EN_B.set_rand_mode(0);
   OVERRIDE_FET_EN_B.set_reset_signame("prim_gated_rst_b");
    void'(add_field( OVERRIDE_FET_EN_B ));

    OVERRIDE_PM_CFG_CONTROL = new("OVERRIDE_PM_CFG_CONTROL", "RW", 3, 4, {""});
    OVERRIDE_PM_CFG_CONTROL.set_powerwell("vcccfn");
    OVERRIDE_PM_CFG_CONTROL.set_rand_mode(0);
   OVERRIDE_PM_CFG_CONTROL.set_reset_signame("prim_gated_rst_b");
    void'(add_field( OVERRIDE_PM_CFG_CONTROL ));

    OVERRIDE_PMSM_PGCB_REQ_B = new("OVERRIDE_PMSM_PGCB_REQ_B", "RW", 2, 7, {""});
    OVERRIDE_PMSM_PGCB_REQ_B.set_powerwell("vcccfn");
    OVERRIDE_PMSM_PGCB_REQ_B.set_rand_mode(0);
   OVERRIDE_PMSM_PGCB_REQ_B.set_reset_signame("prim_gated_rst_b");
    void'(add_field( OVERRIDE_PMSM_PGCB_REQ_B ));

    OVERRIDE_CLK_SWITCH_CONTROL = new("OVERRIDE_CLK_SWITCH_CONTROL", "RW", 3, 9, {""});
    OVERRIDE_CLK_SWITCH_CONTROL.set_powerwell("vcccfn");
    OVERRIDE_CLK_SWITCH_CONTROL.set_rand_mode(0);
   OVERRIDE_CLK_SWITCH_CONTROL.set_reset_signame("prim_gated_rst_b");
    void'(add_field( OVERRIDE_CLK_SWITCH_CONTROL ));

    RSVZ1 = new("RSVZ1", "RW", 3, 12, {""});
    RSVZ1.set_powerwell("vcccfn");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("prim_gated_rst_b");
    void'(add_field( RSVZ1 ));

    PWRGATE_PMC_WAKE = new("PWRGATE_PMC_WAKE", "RW", 1, 15, {""});
    PWRGATE_PMC_WAKE.set_powerwell("vcccfn");
    PWRGATE_PMC_WAKE.set_rand_mode(0);
   PWRGATE_PMC_WAKE.set_reset_signame("prim_gated_rst_b");
    void'(add_field( PWRGATE_PMC_WAKE ));

    OVERRIDE_CLK_GATE = new("OVERRIDE_CLK_GATE", "RW", 1, 16, {""});
    OVERRIDE_CLK_GATE.set_powerwell("vcccfn");
    OVERRIDE_CLK_GATE.set_rand_mode(0);
   OVERRIDE_CLK_GATE.set_reset_signame("prim_gated_rst_b");
    void'(add_field( OVERRIDE_CLK_GATE ));

    RSVZ0 = new("RSVZ0", "RW", 15, 17, {""});
    RSVZ0.set_powerwell("vcccfn");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("prim_gated_rst_b");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_config_master_bridge_CFG_MASTER_CTL_reg) 
endclass : hqm_config_master_bridge_CFG_MASTER_CTL_reg

// ================================================

class hqm_config_master_bridge_file extends sla_ral_file;

  rand hqm_config_master_bridge_CFG_DIAGNOSTIC_RESET_STATUS_reg CFG_DIAGNOSTIC_RESET_STATUS;
  rand hqm_config_master_bridge_CFG_DIAGNOSTIC_IDLE_STATUS_reg CFG_DIAGNOSTIC_IDLE_STATUS;
  rand hqm_config_master_bridge_CFG_DIAGNOSTIC_HEARTBEAT_reg CFG_DIAGNOSTIC_HEARTBEAT;
  rand hqm_config_master_bridge_CFG_FLR_COUNT_L_reg CFG_FLR_COUNT_L;
  rand hqm_config_master_bridge_CFG_FLR_COUNT_H_reg CFG_FLR_COUNT_H;
  rand hqm_config_master_bridge_CFG_PM_STATUS_reg CFG_PM_STATUS;
  rand hqm_config_master_bridge_CFG_PM_PMCSR_DISABLE_reg CFG_PM_PMCSR_DISABLE;
  rand hqm_config_master_bridge_CFG_CLK_ON_CNT_L_reg CFG_CLK_ON_CNT_L;
  rand hqm_config_master_bridge_CFG_CLK_ON_CNT_H_reg CFG_CLK_ON_CNT_H;
  rand hqm_config_master_bridge_CFG_PROC_ON_CNT_L_reg CFG_PROC_ON_CNT_L;
  rand hqm_config_master_bridge_CFG_PROC_ON_CNT_H_reg CFG_PROC_ON_CNT_H;
  rand hqm_config_master_bridge_CFG_PROCHOT_CNT_L_reg CFG_PROCHOT_CNT_L;
  rand hqm_config_master_bridge_CFG_PROCHOT_CNT_H_reg CFG_PROCHOT_CNT_H;
  rand hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_L_reg CFG_PROCHOT_EVENT_CNT_L;
  rand hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_H_reg CFG_PROCHOT_EVENT_CNT_H;
  rand hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_L_reg CFG_D3TOD0_EVENT_CNT_L;
  rand hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_H_reg CFG_D3TOD0_EVENT_CNT_H;
  rand hqm_config_master_bridge_CFG_CLK_CNT_DISABLE_reg CFG_CLK_CNT_DISABLE;
  rand hqm_config_master_bridge_CFG_TS_CONTROL_reg CFG_TS_CONTROL;
  rand hqm_config_master_bridge_CFG_UNIT_VERSION_reg CFG_UNIT_VERSION;
  rand hqm_config_master_bridge_CFG_PM_OVERRIDE_reg CFG_PM_OVERRIDE;
  rand hqm_config_master_bridge_CFG_HQM_PGCB_CONTROL_reg CFG_HQM_PGCB_CONTROL;
  rand hqm_config_master_bridge_CFG_HQM_CDC_CONTROL_reg CFG_HQM_CDC_CONTROL;
  rand hqm_config_master_bridge_CFG_CONTROL_GENERAL_reg CFG_CONTROL_GENERAL;
  rand hqm_config_master_bridge_CFG_MSTR_INTERNAL_TIMEOUT_reg CFG_MSTR_INTERNAL_TIMEOUT;
  rand hqm_config_master_bridge_CFG_DIAGNOSTIC_PROC_LCB_STATUS_reg CFG_DIAGNOSTIC_PROC_LCB_STATUS;
  rand hqm_config_master_bridge_CFG_DIAGNOSTIC_STATUS_1_reg CFG_DIAGNOSTIC_STATUS_1;
  rand hqm_config_master_bridge_CFG_DIAGNOSTIC_SYNDROME_reg CFG_DIAGNOSTIC_SYNDROME;
  rand hqm_config_master_bridge_CFG_MASTER_CTL_reg CFG_MASTER_CTL;

  `ovm_component_utils(hqm_config_master_bridge_file)

  function new(string n, ovm_component p);
    super.new(n,p);
  endfunction

  // --------------------------
  function void build();
    regfilename = this.get_name();

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_RESET_STATUS";
    `endif
    CFG_DIAGNOSTIC_RESET_STATUS = hqm_config_master_bridge_CFG_DIAGNOSTIC_RESET_STATUS_reg::type_id::create("CFG_DIAGNOSTIC_RESET_STATUS", this);
    CFG_DIAGNOSTIC_RESET_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000000, 32, 32'b10000000000000000000101111111111);
    CFG_DIAGNOSTIC_RESET_STATUS.set_space_addr("MSG", 28'h4000000);
    CFG_DIAGNOSTIC_RESET_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_RESET_STATUS.set_space_addr("MEM-SB",28'h4000000);
    CFG_DIAGNOSTIC_RESET_STATUS.set_space_addr("MEM", 28'h4000000);
      CFG_DIAGNOSTIC_RESET_STATUS.set_space("MEM");
      CFG_DIAGNOSTIC_RESET_STATUS.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_RESET_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_RESET_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_RESET_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_RESET_STATUS.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_RESET_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIAGNOSTIC_RESET_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_RESET_STATUS:dont_test") ) CFG_DIAGNOSTIC_RESET_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_RESET_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_RESET_STATUS"));
      end
   CFG_DIAGNOSTIC_RESET_STATUS.CHP_PF_RESET_DONE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[0:0]"});
   CFG_DIAGNOSTIC_RESET_STATUS.ROP_PF_RESET_DONE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[1:1]"});
   CFG_DIAGNOSTIC_RESET_STATUS.LSP_PF_RESET_DONE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[2:2]"});
   CFG_DIAGNOSTIC_RESET_STATUS.NALB_PF_RESET_DONE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[3:3]"});
   CFG_DIAGNOSTIC_RESET_STATUS.AP_PF_RESET_DONE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[4:4]"});
   CFG_DIAGNOSTIC_RESET_STATUS.DP_PF_RESET_DONE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[5:5]"});
   CFG_DIAGNOSTIC_RESET_STATUS.QED_PF_RESET_DONE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[6:6]"});
   CFG_DIAGNOSTIC_RESET_STATUS.DQED_PF_RESET_DONE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[7:7]"});
   CFG_DIAGNOSTIC_RESET_STATUS.AQED_PF_RESET_DONE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[8:8]"});
   CFG_DIAGNOSTIC_RESET_STATUS.SYS_PF_RESET_DONE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[9:9]"});
   CFG_DIAGNOSTIC_RESET_STATUS.PF_RESET_ACTIVE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[10:10]"});
   CFG_DIAGNOSTIC_RESET_STATUS.FLRSM_STATE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[17:11]"});
   CFG_DIAGNOSTIC_RESET_STATUS.HQM_PROC_RESET_DONE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_reset_status.status[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_IDLE_STATUS";
    `endif
    CFG_DIAGNOSTIC_IDLE_STATUS = hqm_config_master_bridge_CFG_DIAGNOSTIC_IDLE_STATUS_reg::type_id::create("CFG_DIAGNOSTIC_IDLE_STATUS", this);
    CFG_DIAGNOSTIC_IDLE_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000004, 32, 32'b10011101000011111111111111111111);
    CFG_DIAGNOSTIC_IDLE_STATUS.set_space_addr("MSG", 28'h4000004);
    CFG_DIAGNOSTIC_IDLE_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_IDLE_STATUS.set_space_addr("MEM-SB",28'h4000004);
    CFG_DIAGNOSTIC_IDLE_STATUS.set_space_addr("MEM", 28'h4000004);
      CFG_DIAGNOSTIC_IDLE_STATUS.set_space("MEM");
      CFG_DIAGNOSTIC_IDLE_STATUS.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_IDLE_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_IDLE_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_IDLE_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_IDLE_STATUS.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_IDLE_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIAGNOSTIC_IDLE_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIAGNOSTIC_IDLE_STATUS.set_test_reg(0);
      if ( $test$plusargs("CFG_DIAGNOSTIC_IDLE_STATUS:dont_test") ) CFG_DIAGNOSTIC_IDLE_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_IDLE_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_IDLE_STATUS"));
      end
   CFG_DIAGNOSTIC_IDLE_STATUS.CHP_PIPEIDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[0:0]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.ROP_PIPEIDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[1:1]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.LSP_PIPEIDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[2:2]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.NALB_PIPEIDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[3:3]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.AP_PIPEIDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[4:4]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.DP_PIPEIDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[5:5]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.QED_PIPEIDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[6:6]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.DQED_PIPEIDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[7:7]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.AQED_PIPEIDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[8:8]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.SYS_PIPEIDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[9:9]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.CHP_UNIT_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[10:10]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.ROP_UNIT_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[11:11]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.LSP_UNIT_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[12:12]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.NALB_UNIT_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[13:13]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.AP_UNIT_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[14:14]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.DP_UNIT_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[15:15]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.QED_UNIT_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[16:16]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.DQED_UNIT_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[17:17]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.AQED_UNIT_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[18:18]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.SYS_UNIT_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[19:19]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.MSTR_CFG_RING_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[24:24]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.MSTR_CFG_MSTR_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[25:25]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.MSTR_FLR_CLKREQ_B.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[26:26]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.MSTR_PROC_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[27:27]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.MSTR_PROC_IDLE_MASKED.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[28:28]"});
   CFG_DIAGNOSTIC_IDLE_STATUS.HQM_FUNC_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_idle_status.status[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_HEARTBEAT";
    `endif
    CFG_DIAGNOSTIC_HEARTBEAT = hqm_config_master_bridge_CFG_DIAGNOSTIC_HEARTBEAT_reg::type_id::create("CFG_DIAGNOSTIC_HEARTBEAT", this);
    CFG_DIAGNOSTIC_HEARTBEAT.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000008, 32, 32'b11000000000000000000000000010000);
    CFG_DIAGNOSTIC_HEARTBEAT.set_space_addr("MSG", 28'h4000008);
    CFG_DIAGNOSTIC_HEARTBEAT.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_HEARTBEAT.set_space_addr("MEM-SB",28'h4000008);
    CFG_DIAGNOSTIC_HEARTBEAT.set_space_addr("MEM", 28'h4000008);
      CFG_DIAGNOSTIC_HEARTBEAT.set_space("MEM");
      CFG_DIAGNOSTIC_HEARTBEAT.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_HEARTBEAT.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_HEARTBEAT.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_HEARTBEAT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_HEARTBEAT.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_HEARTBEAT.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIAGNOSTIC_HEARTBEAT.set_user_attribute("SubnetPortID", "8'h00");
      CFG_DIAGNOSTIC_HEARTBEAT.set_test_reg(0);
      if ( $test$plusargs("CFG_DIAGNOSTIC_HEARTBEAT:dont_test") ) CFG_DIAGNOSTIC_HEARTBEAT.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_HEARTBEAT )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_HEARTBEAT"));
      end
   CFG_DIAGNOSTIC_HEARTBEAT.HQM_GATED_RST_B.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[3:0]"});
   CFG_DIAGNOSTIC_HEARTBEAT.HQM_FLR_PREP.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[7:4]"});
   CFG_DIAGNOSTIC_HEARTBEAT.RSVZ0.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[11:8]"});
   CFG_DIAGNOSTIC_HEARTBEAT.FLR_TRIGGERED.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[15:12]"});
   CFG_DIAGNOSTIC_HEARTBEAT.HQM_INP_GATED_CLK.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[19:16]"});
   CFG_DIAGNOSTIC_HEARTBEAT.HQM_CDC_CLK.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[23:20]"});
   CFG_DIAGNOSTIC_HEARTBEAT.PGCB_CLK.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[27:24]"});
   CFG_DIAGNOSTIC_HEARTBEAT.CONSTANT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_heartbeat.status[31:28]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FLR_COUNT_L";
    `endif
    CFG_FLR_COUNT_L = hqm_config_master_bridge_CFG_FLR_COUNT_L_reg::type_id::create("CFG_FLR_COUNT_L", this);
    CFG_FLR_COUNT_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h400000C, 32, 32'b00000000000000000000000000000001);
    CFG_FLR_COUNT_L.set_space_addr("MSG", 28'h400000C);
    CFG_FLR_COUNT_L.set_space_addr("msg_bus_port", 'h21);
    CFG_FLR_COUNT_L.set_space_addr("MEM-SB",28'h400000C);
    CFG_FLR_COUNT_L.set_space_addr("MEM", 28'h400000C);
      CFG_FLR_COUNT_L.set_space("MEM");
      CFG_FLR_COUNT_L.set_msg_opcode("MEM-SB");
      CFG_FLR_COUNT_L.set_fid(4'h0, "MEM-SB");
  	CFG_FLR_COUNT_L.set_bar(4'h2, "MEM-SB");
      CFG_FLR_COUNT_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FLR_COUNT_L.set_user_attribute("diag_reg", "0");
      CFG_FLR_COUNT_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_FLR_COUNT_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FLR_COUNT_L:dont_test") ) CFG_FLR_COUNT_L.set_test_reg(1'b0);
      if (!add_reg( CFG_FLR_COUNT_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_FLR_COUNT_L"));
      end
   CFG_FLR_COUNT_L.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_flr_count_l.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FLR_COUNT_H";
    `endif
    CFG_FLR_COUNT_H = hqm_config_master_bridge_CFG_FLR_COUNT_H_reg::type_id::create("CFG_FLR_COUNT_H", this);
    CFG_FLR_COUNT_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000010, 32, 32'b00000000000000000000000000000000);
    CFG_FLR_COUNT_H.set_space_addr("MSG", 28'h4000010);
    CFG_FLR_COUNT_H.set_space_addr("msg_bus_port", 'h21);
    CFG_FLR_COUNT_H.set_space_addr("MEM-SB",28'h4000010);
    CFG_FLR_COUNT_H.set_space_addr("MEM", 28'h4000010);
      CFG_FLR_COUNT_H.set_space("MEM");
      CFG_FLR_COUNT_H.set_msg_opcode("MEM-SB");
      CFG_FLR_COUNT_H.set_fid(4'h0, "MEM-SB");
  	CFG_FLR_COUNT_H.set_bar(4'h2, "MEM-SB");
      CFG_FLR_COUNT_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FLR_COUNT_H.set_user_attribute("diag_reg", "0");
      CFG_FLR_COUNT_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_FLR_COUNT_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FLR_COUNT_H:dont_test") ) CFG_FLR_COUNT_H.set_test_reg(1'b0);
      if (!add_reg( CFG_FLR_COUNT_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_FLR_COUNT_H"));
      end
   CFG_FLR_COUNT_H.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_flr_count_h.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PM_STATUS";
    `endif
    CFG_PM_STATUS = hqm_config_master_bridge_CFG_PM_STATUS_reg::type_id::create("CFG_PM_STATUS", this);
    CFG_PM_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000014, 32, 32'b00000001000000000100000000111110);
    CFG_PM_STATUS.set_space_addr("MSG", 28'h4000014);
    CFG_PM_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_PM_STATUS.set_space_addr("MEM-SB",28'h4000014);
    CFG_PM_STATUS.set_space_addr("MEM", 28'h4000014);
      CFG_PM_STATUS.set_space("MEM");
      CFG_PM_STATUS.set_msg_opcode("MEM-SB");
      CFG_PM_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_PM_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_PM_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PM_STATUS.set_user_attribute("diag_reg", "0");
      CFG_PM_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_PM_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PM_STATUS:dont_test") ) CFG_PM_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_PM_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_PM_STATUS"));
      end
   CFG_PM_STATUS.PROCHOT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[0:0]"});
   CFG_PM_STATUS.PGCB_HQM_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[1:1]"});
   CFG_PM_STATUS.PGCB_HQM_PG_RDY_ACK_B.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[2:2]"});
   CFG_PM_STATUS.PMSM_PGCB_REQ_B.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[3:3]"});
   CFG_PM_STATUS.PGBC_PMC_PG_REQ_B.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[4:4]"});
   CFG_PM_STATUS.PMC_PGCB_PG_ACK_B.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[5:5]"});
   CFG_PM_STATUS.PMC_PGCB_FET_EN_B.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[6:6]"});
   CFG_PM_STATUS.PGCB_FET_EN_B.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[7:7]"});
   CFG_PM_STATUS.RSVZ0.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[8:8]"});
   CFG_PM_STATUS.RSVZ1.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[9:9]"});
   CFG_PM_STATUS.FUSE_FORCE_ON.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[10:10]"});
   CFG_PM_STATUS.FUSE_PROC_DISABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[11:11]"});
   CFG_PM_STATUS.RSVZ2.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[12:12]"});
   CFG_PM_STATUS.RSVZ3.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[13:13]"});
   CFG_PM_STATUS.PM_FSM_D0TOD3_OK.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[14:14]"});
   CFG_PM_STATUS.PM_FSM_D3TOD0_OK.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[15:15]"});
   CFG_PM_STATUS.HQM_IN_D3.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[16:16]"});
   CFG_PM_STATUS.RSVZ4.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[23:17]"});
   CFG_PM_STATUS.PMSM.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_status.status[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PM_PMCSR_DISABLE";
    `endif
    CFG_PM_PMCSR_DISABLE = hqm_config_master_bridge_CFG_PM_PMCSR_DISABLE_reg::type_id::create("CFG_PM_PMCSR_DISABLE", this);
    CFG_PM_PMCSR_DISABLE.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000018, 32, 32'b00000000000000000000000000000001);
    CFG_PM_PMCSR_DISABLE.set_space_addr("MSG", 28'h4000018);
    CFG_PM_PMCSR_DISABLE.set_space_addr("msg_bus_port", 'h21);
    CFG_PM_PMCSR_DISABLE.set_space_addr("MEM-SB",28'h4000018);
    CFG_PM_PMCSR_DISABLE.set_space_addr("MEM", 28'h4000018);
      CFG_PM_PMCSR_DISABLE.set_space("MEM");
      CFG_PM_PMCSR_DISABLE.set_msg_opcode("MEM-SB");
      CFG_PM_PMCSR_DISABLE.set_fid(4'h0, "MEM-SB");
  	CFG_PM_PMCSR_DISABLE.set_bar(4'h2, "MEM-SB");
      CFG_PM_PMCSR_DISABLE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PM_PMCSR_DISABLE.set_user_attribute("diag_reg", "0");
      CFG_PM_PMCSR_DISABLE.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_PM_PMCSR_DISABLE.set_user_attribute("SubnetPortID", "8'h00");
      CFG_PM_PMCSR_DISABLE.set_test_reg(0);
      if ( $test$plusargs("CFG_PM_PMCSR_DISABLE:dont_test") ) CFG_PM_PMCSR_DISABLE.set_test_reg(1'b0);
      if (!add_reg( CFG_PM_PMCSR_DISABLE )) begin
        `sla_error(get_name(), ("Could not add register CFG_PM_PMCSR_DISABLE"));
      end
   CFG_PM_PMCSR_DISABLE.DISABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_pmcsr_disable.internal_f[0:0]"});
   CFG_PM_PMCSR_DISABLE.RSVZ0.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_pmcsr_disable.internal_f[31:1]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CLK_ON_CNT_L";
    `endif
    CFG_CLK_ON_CNT_L = hqm_config_master_bridge_CFG_CLK_ON_CNT_L_reg::type_id::create("CFG_CLK_ON_CNT_L", this);
    CFG_CLK_ON_CNT_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h400001C, 32, 32'b00000000000000000000000000000000);
    CFG_CLK_ON_CNT_L.set_space_addr("MSG", 28'h400001C);
    CFG_CLK_ON_CNT_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CLK_ON_CNT_L.set_space_addr("MEM-SB",28'h400001C);
    CFG_CLK_ON_CNT_L.set_space_addr("MEM", 28'h400001C);
      CFG_CLK_ON_CNT_L.set_space("MEM");
      CFG_CLK_ON_CNT_L.set_msg_opcode("MEM-SB");
      CFG_CLK_ON_CNT_L.set_fid(4'h0, "MEM-SB");
  	CFG_CLK_ON_CNT_L.set_bar(4'h2, "MEM-SB");
      CFG_CLK_ON_CNT_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CLK_ON_CNT_L.set_user_attribute("diag_reg", "0");
      CFG_CLK_ON_CNT_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CLK_ON_CNT_L.set_user_attribute("SubnetPortID", "8'h00");
      CFG_CLK_ON_CNT_L.set_test_reg(0);
      if ( $test$plusargs("CFG_CLK_ON_CNT_L:dont_test") ) CFG_CLK_ON_CNT_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CLK_ON_CNT_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CLK_ON_CNT_L"));
      end
   CFG_CLK_ON_CNT_L.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_clk_on_cnt.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CLK_ON_CNT_H";
    `endif
    CFG_CLK_ON_CNT_H = hqm_config_master_bridge_CFG_CLK_ON_CNT_H_reg::type_id::create("CFG_CLK_ON_CNT_H", this);
    CFG_CLK_ON_CNT_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000020, 32, 32'b00000000000000000000000000000000);
    CFG_CLK_ON_CNT_H.set_space_addr("MSG", 28'h4000020);
    CFG_CLK_ON_CNT_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CLK_ON_CNT_H.set_space_addr("MEM-SB",28'h4000020);
    CFG_CLK_ON_CNT_H.set_space_addr("MEM", 28'h4000020);
      CFG_CLK_ON_CNT_H.set_space("MEM");
      CFG_CLK_ON_CNT_H.set_msg_opcode("MEM-SB");
      CFG_CLK_ON_CNT_H.set_fid(4'h0, "MEM-SB");
  	CFG_CLK_ON_CNT_H.set_bar(4'h2, "MEM-SB");
      CFG_CLK_ON_CNT_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CLK_ON_CNT_H.set_user_attribute("diag_reg", "0");
      CFG_CLK_ON_CNT_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CLK_ON_CNT_H.set_user_attribute("SubnetPortID", "8'h00");
      CFG_CLK_ON_CNT_H.set_test_reg(0);
      if ( $test$plusargs("CFG_CLK_ON_CNT_H:dont_test") ) CFG_CLK_ON_CNT_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CLK_ON_CNT_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CLK_ON_CNT_H"));
      end
   CFG_CLK_ON_CNT_H.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_clk_on_cnt.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PROC_ON_CNT_L";
    `endif
    CFG_PROC_ON_CNT_L = hqm_config_master_bridge_CFG_PROC_ON_CNT_L_reg::type_id::create("CFG_PROC_ON_CNT_L", this);
    CFG_PROC_ON_CNT_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000024, 32, 32'b00000000000000000000000000000000);
    CFG_PROC_ON_CNT_L.set_space_addr("MSG", 28'h4000024);
    CFG_PROC_ON_CNT_L.set_space_addr("msg_bus_port", 'h21);
    CFG_PROC_ON_CNT_L.set_space_addr("MEM-SB",28'h4000024);
    CFG_PROC_ON_CNT_L.set_space_addr("MEM", 28'h4000024);
      CFG_PROC_ON_CNT_L.set_space("MEM");
      CFG_PROC_ON_CNT_L.set_msg_opcode("MEM-SB");
      CFG_PROC_ON_CNT_L.set_fid(4'h0, "MEM-SB");
  	CFG_PROC_ON_CNT_L.set_bar(4'h2, "MEM-SB");
      CFG_PROC_ON_CNT_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PROC_ON_CNT_L.set_user_attribute("diag_reg", "0");
      CFG_PROC_ON_CNT_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_PROC_ON_CNT_L.set_user_attribute("SubnetPortID", "8'h00");
      CFG_PROC_ON_CNT_L.set_test_reg(0);
      if ( $test$plusargs("CFG_PROC_ON_CNT_L:dont_test") ) CFG_PROC_ON_CNT_L.set_test_reg(1'b0);
      if (!add_reg( CFG_PROC_ON_CNT_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_PROC_ON_CNT_L"));
      end
   CFG_PROC_ON_CNT_L.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_proc_on_cnt.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PROC_ON_CNT_H";
    `endif
    CFG_PROC_ON_CNT_H = hqm_config_master_bridge_CFG_PROC_ON_CNT_H_reg::type_id::create("CFG_PROC_ON_CNT_H", this);
    CFG_PROC_ON_CNT_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000028, 32, 32'b00000000000000000000000000000000);
    CFG_PROC_ON_CNT_H.set_space_addr("MSG", 28'h4000028);
    CFG_PROC_ON_CNT_H.set_space_addr("msg_bus_port", 'h21);
    CFG_PROC_ON_CNT_H.set_space_addr("MEM-SB",28'h4000028);
    CFG_PROC_ON_CNT_H.set_space_addr("MEM", 28'h4000028);
      CFG_PROC_ON_CNT_H.set_space("MEM");
      CFG_PROC_ON_CNT_H.set_msg_opcode("MEM-SB");
      CFG_PROC_ON_CNT_H.set_fid(4'h0, "MEM-SB");
  	CFG_PROC_ON_CNT_H.set_bar(4'h2, "MEM-SB");
      CFG_PROC_ON_CNT_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PROC_ON_CNT_H.set_user_attribute("diag_reg", "0");
      CFG_PROC_ON_CNT_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_PROC_ON_CNT_H.set_user_attribute("SubnetPortID", "8'h00");
      CFG_PROC_ON_CNT_H.set_test_reg(0);
      if ( $test$plusargs("CFG_PROC_ON_CNT_H:dont_test") ) CFG_PROC_ON_CNT_H.set_test_reg(1'b0);
      if (!add_reg( CFG_PROC_ON_CNT_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_PROC_ON_CNT_H"));
      end
   CFG_PROC_ON_CNT_H.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_proc_on_cnt.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PROCHOT_CNT_L";
    `endif
    CFG_PROCHOT_CNT_L = hqm_config_master_bridge_CFG_PROCHOT_CNT_L_reg::type_id::create("CFG_PROCHOT_CNT_L", this);
    CFG_PROCHOT_CNT_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h400002C, 32, 32'b00000000000000000000000000000000);
    CFG_PROCHOT_CNT_L.set_space_addr("MSG", 28'h400002C);
    CFG_PROCHOT_CNT_L.set_space_addr("msg_bus_port", 'h21);
    CFG_PROCHOT_CNT_L.set_space_addr("MEM-SB",28'h400002C);
    CFG_PROCHOT_CNT_L.set_space_addr("MEM", 28'h400002C);
      CFG_PROCHOT_CNT_L.set_space("MEM");
      CFG_PROCHOT_CNT_L.set_msg_opcode("MEM-SB");
      CFG_PROCHOT_CNT_L.set_fid(4'h0, "MEM-SB");
  	CFG_PROCHOT_CNT_L.set_bar(4'h2, "MEM-SB");
      CFG_PROCHOT_CNT_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PROCHOT_CNT_L.set_user_attribute("diag_reg", "0");
      CFG_PROCHOT_CNT_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_PROCHOT_CNT_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PROCHOT_CNT_L:dont_test") ) CFG_PROCHOT_CNT_L.set_test_reg(1'b0);
      if (!add_reg( CFG_PROCHOT_CNT_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_PROCHOT_CNT_L"));
      end
   CFG_PROCHOT_CNT_L.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_prochot_cnt.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PROCHOT_CNT_H";
    `endif
    CFG_PROCHOT_CNT_H = hqm_config_master_bridge_CFG_PROCHOT_CNT_H_reg::type_id::create("CFG_PROCHOT_CNT_H", this);
    CFG_PROCHOT_CNT_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000030, 32, 32'b00000000000000000000000000000000);
    CFG_PROCHOT_CNT_H.set_space_addr("MSG", 28'h4000030);
    CFG_PROCHOT_CNT_H.set_space_addr("msg_bus_port", 'h21);
    CFG_PROCHOT_CNT_H.set_space_addr("MEM-SB",28'h4000030);
    CFG_PROCHOT_CNT_H.set_space_addr("MEM", 28'h4000030);
      CFG_PROCHOT_CNT_H.set_space("MEM");
      CFG_PROCHOT_CNT_H.set_msg_opcode("MEM-SB");
      CFG_PROCHOT_CNT_H.set_fid(4'h0, "MEM-SB");
  	CFG_PROCHOT_CNT_H.set_bar(4'h2, "MEM-SB");
      CFG_PROCHOT_CNT_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PROCHOT_CNT_H.set_user_attribute("diag_reg", "0");
      CFG_PROCHOT_CNT_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_PROCHOT_CNT_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PROCHOT_CNT_H:dont_test") ) CFG_PROCHOT_CNT_H.set_test_reg(1'b0);
      if (!add_reg( CFG_PROCHOT_CNT_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_PROCHOT_CNT_H"));
      end
   CFG_PROCHOT_CNT_H.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_prochot_cnt.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PROCHOT_EVENT_CNT_L";
    `endif
    CFG_PROCHOT_EVENT_CNT_L = hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_L_reg::type_id::create("CFG_PROCHOT_EVENT_CNT_L", this);
    CFG_PROCHOT_EVENT_CNT_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000034, 32, 32'b00000000000000000000000000000000);
    CFG_PROCHOT_EVENT_CNT_L.set_space_addr("MSG", 28'h4000034);
    CFG_PROCHOT_EVENT_CNT_L.set_space_addr("msg_bus_port", 'h21);
    CFG_PROCHOT_EVENT_CNT_L.set_space_addr("MEM-SB",28'h4000034);
    CFG_PROCHOT_EVENT_CNT_L.set_space_addr("MEM", 28'h4000034);
      CFG_PROCHOT_EVENT_CNT_L.set_space("MEM");
      CFG_PROCHOT_EVENT_CNT_L.set_msg_opcode("MEM-SB");
      CFG_PROCHOT_EVENT_CNT_L.set_fid(4'h0, "MEM-SB");
  	CFG_PROCHOT_EVENT_CNT_L.set_bar(4'h2, "MEM-SB");
      CFG_PROCHOT_EVENT_CNT_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PROCHOT_EVENT_CNT_L.set_user_attribute("diag_reg", "0");
      CFG_PROCHOT_EVENT_CNT_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_PROCHOT_EVENT_CNT_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PROCHOT_EVENT_CNT_L:dont_test") ) CFG_PROCHOT_EVENT_CNT_L.set_test_reg(1'b0);
      if (!add_reg( CFG_PROCHOT_EVENT_CNT_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_PROCHOT_EVENT_CNT_L"));
      end
   CFG_PROCHOT_EVENT_CNT_L.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_prochot_event_cnt.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PROCHOT_EVENT_CNT_H";
    `endif
    CFG_PROCHOT_EVENT_CNT_H = hqm_config_master_bridge_CFG_PROCHOT_EVENT_CNT_H_reg::type_id::create("CFG_PROCHOT_EVENT_CNT_H", this);
    CFG_PROCHOT_EVENT_CNT_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000038, 32, 32'b00000000000000000000000000000000);
    CFG_PROCHOT_EVENT_CNT_H.set_space_addr("MSG", 28'h4000038);
    CFG_PROCHOT_EVENT_CNT_H.set_space_addr("msg_bus_port", 'h21);
    CFG_PROCHOT_EVENT_CNT_H.set_space_addr("MEM-SB",28'h4000038);
    CFG_PROCHOT_EVENT_CNT_H.set_space_addr("MEM", 28'h4000038);
      CFG_PROCHOT_EVENT_CNT_H.set_space("MEM");
      CFG_PROCHOT_EVENT_CNT_H.set_msg_opcode("MEM-SB");
      CFG_PROCHOT_EVENT_CNT_H.set_fid(4'h0, "MEM-SB");
  	CFG_PROCHOT_EVENT_CNT_H.set_bar(4'h2, "MEM-SB");
      CFG_PROCHOT_EVENT_CNT_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PROCHOT_EVENT_CNT_H.set_user_attribute("diag_reg", "0");
      CFG_PROCHOT_EVENT_CNT_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_PROCHOT_EVENT_CNT_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PROCHOT_EVENT_CNT_H:dont_test") ) CFG_PROCHOT_EVENT_CNT_H.set_test_reg(1'b0);
      if (!add_reg( CFG_PROCHOT_EVENT_CNT_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_PROCHOT_EVENT_CNT_H"));
      end
   CFG_PROCHOT_EVENT_CNT_H.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_prochot_event_cnt.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_D3TOD0_EVENT_CNT_L";
    `endif
    CFG_D3TOD0_EVENT_CNT_L = hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_L_reg::type_id::create("CFG_D3TOD0_EVENT_CNT_L", this);
    CFG_D3TOD0_EVENT_CNT_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h400003C, 32, 32'b00000000000000000000000000000001);
    CFG_D3TOD0_EVENT_CNT_L.set_space_addr("MSG", 28'h400003C);
    CFG_D3TOD0_EVENT_CNT_L.set_space_addr("msg_bus_port", 'h21);
    CFG_D3TOD0_EVENT_CNT_L.set_space_addr("MEM-SB",28'h400003C);
    CFG_D3TOD0_EVENT_CNT_L.set_space_addr("MEM", 28'h400003C);
      CFG_D3TOD0_EVENT_CNT_L.set_space("MEM");
      CFG_D3TOD0_EVENT_CNT_L.set_msg_opcode("MEM-SB");
      CFG_D3TOD0_EVENT_CNT_L.set_fid(4'h0, "MEM-SB");
  	CFG_D3TOD0_EVENT_CNT_L.set_bar(4'h2, "MEM-SB");
      CFG_D3TOD0_EVENT_CNT_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_D3TOD0_EVENT_CNT_L.set_user_attribute("diag_reg", "0");
      CFG_D3TOD0_EVENT_CNT_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_D3TOD0_EVENT_CNT_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_D3TOD0_EVENT_CNT_L:dont_test") ) CFG_D3TOD0_EVENT_CNT_L.set_test_reg(1'b0);
      if (!add_reg( CFG_D3TOD0_EVENT_CNT_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_D3TOD0_EVENT_CNT_L"));
      end
   CFG_D3TOD0_EVENT_CNT_L.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_d3tod0_event_cnt.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_D3TOD0_EVENT_CNT_H";
    `endif
    CFG_D3TOD0_EVENT_CNT_H = hqm_config_master_bridge_CFG_D3TOD0_EVENT_CNT_H_reg::type_id::create("CFG_D3TOD0_EVENT_CNT_H", this);
    CFG_D3TOD0_EVENT_CNT_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000040, 32, 32'b00000000000000000000000000000000);
    CFG_D3TOD0_EVENT_CNT_H.set_space_addr("MSG", 28'h4000040);
    CFG_D3TOD0_EVENT_CNT_H.set_space_addr("msg_bus_port", 'h21);
    CFG_D3TOD0_EVENT_CNT_H.set_space_addr("MEM-SB",28'h4000040);
    CFG_D3TOD0_EVENT_CNT_H.set_space_addr("MEM", 28'h4000040);
      CFG_D3TOD0_EVENT_CNT_H.set_space("MEM");
      CFG_D3TOD0_EVENT_CNT_H.set_msg_opcode("MEM-SB");
      CFG_D3TOD0_EVENT_CNT_H.set_fid(4'h0, "MEM-SB");
  	CFG_D3TOD0_EVENT_CNT_H.set_bar(4'h2, "MEM-SB");
      CFG_D3TOD0_EVENT_CNT_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_D3TOD0_EVENT_CNT_H.set_user_attribute("diag_reg", "0");
      CFG_D3TOD0_EVENT_CNT_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_D3TOD0_EVENT_CNT_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_D3TOD0_EVENT_CNT_H:dont_test") ) CFG_D3TOD0_EVENT_CNT_H.set_test_reg(1'b0);
      if (!add_reg( CFG_D3TOD0_EVENT_CNT_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_D3TOD0_EVENT_CNT_H"));
      end
   CFG_D3TOD0_EVENT_CNT_H.COUNT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_d3tod0_event_cnt.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CLK_CNT_DISABLE";
    `endif
    CFG_CLK_CNT_DISABLE = hqm_config_master_bridge_CFG_CLK_CNT_DISABLE_reg::type_id::create("CFG_CLK_CNT_DISABLE", this);
    CFG_CLK_CNT_DISABLE.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000044, 32, 32'b00000000000000000000000000000000);
    CFG_CLK_CNT_DISABLE.set_space_addr("MSG", 28'h4000044);
    CFG_CLK_CNT_DISABLE.set_space_addr("msg_bus_port", 'h21);
    CFG_CLK_CNT_DISABLE.set_space_addr("MEM-SB",28'h4000044);
    CFG_CLK_CNT_DISABLE.set_space_addr("MEM", 28'h4000044);
      CFG_CLK_CNT_DISABLE.set_space("MEM");
      CFG_CLK_CNT_DISABLE.set_msg_opcode("MEM-SB");
      CFG_CLK_CNT_DISABLE.set_fid(4'h0, "MEM-SB");
  	CFG_CLK_CNT_DISABLE.set_bar(4'h2, "MEM-SB");
      CFG_CLK_CNT_DISABLE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CLK_CNT_DISABLE.set_user_attribute("diag_reg", "0");
      CFG_CLK_CNT_DISABLE.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CLK_CNT_DISABLE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CLK_CNT_DISABLE:dont_test") ) CFG_CLK_CNT_DISABLE.set_test_reg(1'b0);
      if (!add_reg( CFG_CLK_CNT_DISABLE )) begin
        `sla_error(get_name(), ("Could not add register CFG_CLK_CNT_DISABLE"));
      end
   CFG_CLK_CNT_DISABLE.DISABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_clk_cnt_disable.internal_f[0:0]"});
   CFG_CLK_CNT_DISABLE.RSVZ0.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_clk_cnt_disable.internal_f[31:1]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_TS_CONTROL";
    `endif
    CFG_TS_CONTROL = hqm_config_master_bridge_CFG_TS_CONTROL_reg::type_id::create("CFG_TS_CONTROL", this);
    CFG_TS_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000048, 32, 32'b00000000000000000000000000000000);
    CFG_TS_CONTROL.set_space_addr("MSG", 28'h4000048);
    CFG_TS_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_TS_CONTROL.set_space_addr("MEM-SB",28'h4000048);
    CFG_TS_CONTROL.set_space_addr("MEM", 28'h4000048);
      CFG_TS_CONTROL.set_space("MEM");
      CFG_TS_CONTROL.set_msg_opcode("MEM-SB");
      CFG_TS_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_TS_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_TS_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_TS_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_TS_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_TS_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_TS_CONTROL:dont_test") ) CFG_TS_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_TS_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_TS_CONTROL"));
      end
   CFG_TS_CONTROL.CFG_TS_DIV.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_ts_control.internal_f[15:0]"});
   CFG_TS_CONTROL.RSVZ0.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_ts_control.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_VERSION";
    `endif
    CFG_UNIT_VERSION = hqm_config_master_bridge_CFG_UNIT_VERSION_reg::type_id::create("CFG_UNIT_VERSION", this);
    CFG_UNIT_VERSION.set_cfg(16'h0, 16'h0, 16'h0, 28'h400004C, 32, 32'b00000000000000000000000000000000);
    CFG_UNIT_VERSION.set_space_addr("MSG", 28'h400004C);
    CFG_UNIT_VERSION.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_VERSION.set_space_addr("MEM-SB",28'h400004C);
    CFG_UNIT_VERSION.set_space_addr("MEM", 28'h400004C);
      CFG_UNIT_VERSION.set_space("MEM");
      CFG_UNIT_VERSION.set_msg_opcode("MEM-SB");
      CFG_UNIT_VERSION.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_VERSION.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_VERSION.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_VERSION.set_user_attribute("diag_reg", "0");
      CFG_UNIT_VERSION.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_UNIT_VERSION.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_VERSION.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_VERSION:dont_test") ) CFG_UNIT_VERSION.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_VERSION )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_VERSION"));
      end
   CFG_UNIT_VERSION.UNIT_VERSION.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_unit_version.status[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PM_OVERRIDE";
    `endif
    CFG_PM_OVERRIDE = hqm_config_master_bridge_CFG_PM_OVERRIDE_reg::type_id::create("CFG_PM_OVERRIDE", this);
    CFG_PM_OVERRIDE.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000004, 32, 32'b00000000000000000000000000000000);
    CFG_PM_OVERRIDE.set_space_addr("MSG", 32'h0C000004);
    CFG_PM_OVERRIDE.set_space_addr("msg_bus_port", 'h21);
    CFG_PM_OVERRIDE.set_space_addr("MEM-SB",28'hC000004);
    CFG_PM_OVERRIDE.set_space_addr("MEM", 32'h0C000004);
      CFG_PM_OVERRIDE.set_space("MEM");
      CFG_PM_OVERRIDE.set_msg_opcode("MEM-SB");
      CFG_PM_OVERRIDE.set_fid(4'h0, "MEM-SB");
  	CFG_PM_OVERRIDE.set_bar(4'h2, "MEM-SB");
      CFG_PM_OVERRIDE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PM_OVERRIDE.set_user_attribute("diag_reg", "0");
      CFG_PM_OVERRIDE.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PM_OVERRIDE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PM_OVERRIDE:dont_test") ) CFG_PM_OVERRIDE.set_test_reg(1'b0);
      if (!add_reg( CFG_PM_OVERRIDE )) begin
        `sla_error(get_name(), ("Could not add register CFG_PM_OVERRIDE"));
      end
   CFG_PM_OVERRIDE.OVERRIDE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_override.internal_f[0:0]"});
   CFG_PM_OVERRIDE.RSVZ0.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_pm_override.internal_f[31:1]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HQM_PGCB_CONTROL";
    `endif
    CFG_HQM_PGCB_CONTROL = hqm_config_master_bridge_CFG_HQM_PGCB_CONTROL_reg::type_id::create("CFG_HQM_PGCB_CONTROL", this);
    CFG_HQM_PGCB_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000008, 32, 32'b00101010101010101010101010101010);
    CFG_HQM_PGCB_CONTROL.set_space_addr("MSG", 32'h0C000008);
    CFG_HQM_PGCB_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_HQM_PGCB_CONTROL.set_space_addr("MEM-SB",28'hC000008);
    CFG_HQM_PGCB_CONTROL.set_space_addr("MEM", 32'h0C000008);
      CFG_HQM_PGCB_CONTROL.set_space("MEM");
      CFG_HQM_PGCB_CONTROL.set_msg_opcode("MEM-SB");
      CFG_HQM_PGCB_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_HQM_PGCB_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_HQM_PGCB_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HQM_PGCB_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_HQM_PGCB_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HQM_PGCB_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HQM_PGCB_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_HQM_PGCB_CONTROL:dont_test") ) CFG_HQM_PGCB_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_HQM_PGCB_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_HQM_PGCB_CONTROL"));
      end
   CFG_HQM_PGCB_CONTROL.TRSTUP2FRCCLKS.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[1:0]"});
   CFG_HQM_PGCB_CONTROL.TCLKSOONACK_CP.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[3:2]"});
   CFG_HQM_PGCB_CONTROL.TCLKSOFFACK_SRST.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[5:4]"});
   CFG_HQM_PGCB_CONTROL.TCLKSONACK_SRST.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[7:6]"});
   CFG_HQM_PGCB_CONTROL.TRSTDOWN.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[9:8]"});
   CFG_HQM_PGCB_CONTROL.TISOLATE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[11:10]"});
   CFG_HQM_PGCB_CONTROL.TSLEEPACT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[13:12]"});
   CFG_HQM_PGCB_CONTROL.TLATCHDIS.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[15:14]"});
   CFG_HQM_PGCB_CONTROL.TPOKDOWN.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[17:16]"});
   CFG_HQM_PGCB_CONTROL.TLATCHEN.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[19:18]"});
   CFG_HQM_PGCB_CONTROL.ACCRSTUP.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[21:20]"});
   CFG_HQM_PGCB_CONTROL.INACCRUSTUP.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[23:22]"});
   CFG_HQM_PGCB_CONTROL.TPOKUP.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[25:24]"});
   CFG_HQM_PGCB_CONTROL.TDEISOLATE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[27:26]"});
   CFG_HQM_PGCB_CONTROL.SLEEP_INACT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[29:28]"});
   CFG_HQM_PGCB_CONTROL.SLEEP_EN.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[30:30]"});
   CFG_HQM_PGCB_CONTROL.RSVD.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_pgcb_control.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HQM_CDC_CONTROL";
    `endif
    CFG_HQM_CDC_CONTROL = hqm_config_master_bridge_CFG_HQM_CDC_CONTROL_reg::type_id::create("CFG_HQM_CDC_CONTROL", this);
    CFG_HQM_CDC_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00000C, 32, 32'b00000000000000000100010001000100);
    CFG_HQM_CDC_CONTROL.set_space_addr("MSG", 32'h0C00000C);
    CFG_HQM_CDC_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_HQM_CDC_CONTROL.set_space_addr("MEM-SB",28'hC00000C);
    CFG_HQM_CDC_CONTROL.set_space_addr("MEM", 32'h0C00000C);
      CFG_HQM_CDC_CONTROL.set_space("MEM");
      CFG_HQM_CDC_CONTROL.set_msg_opcode("MEM-SB");
      CFG_HQM_CDC_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_HQM_CDC_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_HQM_CDC_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HQM_CDC_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_HQM_CDC_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HQM_CDC_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HQM_CDC_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_HQM_CDC_CONTROL:dont_test") ) CFG_HQM_CDC_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_HQM_CDC_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_HQM_CDC_CONTROL"));
      end
   CFG_HQM_CDC_CONTROL.CLKREQ_SYNCOFF_HOLDOFF.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[3:0]"});
   CFG_HQM_CDC_CONTROL.CLKREQ_HOLDOFF.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[7:4]"});
   CFG_HQM_CDC_CONTROL.PWRGATE_HOLDOFF.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[11:8]"});
   CFG_HQM_CDC_CONTROL.CLKGATE_HOLDOFF.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[15:12]"});
   CFG_HQM_CDC_CONTROL.CLKREQ_CTL_DISABLED.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[16:16]"});
   CFG_HQM_CDC_CONTROL.CLKGATE_DISABLED.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[17:17]"});
   CFG_HQM_CDC_CONTROL.PWRGATE_DISABLED.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_hqm_cdc_control.internal_f[18:18]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_GENERAL";
    `endif
    CFG_CONTROL_GENERAL = hqm_config_master_bridge_CFG_CONTROL_GENERAL_reg::type_id::create("CFG_CONTROL_GENERAL", this);
    CFG_CONTROL_GENERAL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000010, 32, 32'b01110000000000000000000010000000);
    CFG_CONTROL_GENERAL.set_space_addr("MSG", 32'h0C000010);
    CFG_CONTROL_GENERAL.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_GENERAL.set_space_addr("MEM-SB",28'hC000010);
    CFG_CONTROL_GENERAL.set_space_addr("MEM", 32'h0C000010);
      CFG_CONTROL_GENERAL.set_space("MEM");
      CFG_CONTROL_GENERAL.set_msg_opcode("MEM-SB");
      CFG_CONTROL_GENERAL.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_GENERAL.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_GENERAL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_GENERAL.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_GENERAL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_GENERAL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_CONTROL_GENERAL.set_test_reg(0);
      if ( $test$plusargs("CFG_CONTROL_GENERAL:dont_test") ) CFG_CONTROL_GENERAL.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_GENERAL )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_GENERAL"));
      end
   CFG_CONTROL_GENERAL.CFG_IDLE_DLY.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[15:0]"});
   CFG_CONTROL_GENERAL.CFG_PROCHOT_DISABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[16:16]"});
   CFG_CONTROL_GENERAL.RSVZ0.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[22:17]"});
   CFG_CONTROL_GENERAL.CFG_DISABLE_PSLVERR_TIMEOUT.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[23:23]"});
   CFG_CONTROL_GENERAL.CFG_ENABLE_INJ_PAR_ERR_RDATA.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[24:24]"});
   CFG_CONTROL_GENERAL.CFG_ENABLE_INJ_PAR_ERR_ADDR.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[25:25]"});
   CFG_CONTROL_GENERAL.CFG_ENABLE_INJ_PAR_ERR_WDATA.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[26:26]"});
   CFG_CONTROL_GENERAL.CFG_DISABLE_RING_PAR_CK.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[27:27]"});
   CFG_CONTROL_GENERAL.CFG_ENABLE_ALARMS.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[28:28]"});
   CFG_CONTROL_GENERAL.CFG_PM_ALLOW_ING_DROP.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[29:29]"});
   CFG_CONTROL_GENERAL.CFG_ENABLE_UNIT_IDLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[30:30]"});
   CFG_CONTROL_GENERAL.IGNORE_PIPE_BUSY.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_control_general.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_MSTR_INTERNAL_TIMEOUT";
    `endif
    CFG_MSTR_INTERNAL_TIMEOUT = hqm_config_master_bridge_CFG_MSTR_INTERNAL_TIMEOUT_reg::type_id::create("CFG_MSTR_INTERNAL_TIMEOUT", this);
    CFG_MSTR_INTERNAL_TIMEOUT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000014, 32, 32'b10000000000000001111111111111111);
    CFG_MSTR_INTERNAL_TIMEOUT.set_space_addr("MSG", 32'h0C000014);
    CFG_MSTR_INTERNAL_TIMEOUT.set_space_addr("msg_bus_port", 'h21);
    CFG_MSTR_INTERNAL_TIMEOUT.set_space_addr("MEM-SB",28'hC000014);
    CFG_MSTR_INTERNAL_TIMEOUT.set_space_addr("MEM", 32'h0C000014);
      CFG_MSTR_INTERNAL_TIMEOUT.set_space("MEM");
      CFG_MSTR_INTERNAL_TIMEOUT.set_msg_opcode("MEM-SB");
      CFG_MSTR_INTERNAL_TIMEOUT.set_fid(4'h0, "MEM-SB");
  	CFG_MSTR_INTERNAL_TIMEOUT.set_bar(4'h2, "MEM-SB");
      CFG_MSTR_INTERNAL_TIMEOUT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_MSTR_INTERNAL_TIMEOUT.set_user_attribute("diag_reg", "0");
      CFG_MSTR_INTERNAL_TIMEOUT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_MSTR_INTERNAL_TIMEOUT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_MSTR_INTERNAL_TIMEOUT:dont_test") ) CFG_MSTR_INTERNAL_TIMEOUT.set_test_reg(1'b0);
      if (!add_reg( CFG_MSTR_INTERNAL_TIMEOUT )) begin
        `sla_error(get_name(), ("Could not add register CFG_MSTR_INTERNAL_TIMEOUT"));
      end
   CFG_MSTR_INTERNAL_TIMEOUT.MULTIPLIER.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_mstr_internal_timeout.internal_f[4:0]"});
   CFG_MSTR_INTERNAL_TIMEOUT.THRESHOLD.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_mstr_internal_timeout.internal_f[15:5]"});
   CFG_MSTR_INTERNAL_TIMEOUT.RSVZ0.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_mstr_internal_timeout.internal_f[30:16]"});
   CFG_MSTR_INTERNAL_TIMEOUT.ENABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_mstr_internal_timeout.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_PROC_LCB_STATUS";
    `endif
    CFG_DIAGNOSTIC_PROC_LCB_STATUS = hqm_config_master_bridge_CFG_DIAGNOSTIC_PROC_LCB_STATUS_reg::type_id::create("CFG_DIAGNOSTIC_PROC_LCB_STATUS", this);
    CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000018, 32, 32'b00000000000000000000000000000000);
    CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_space_addr("MSG", 32'h0C000018);
    CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_space_addr("MEM-SB",28'hC000018);
    CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_space_addr("MEM", 32'h0C000018);
      CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_space("MEM");
      CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_PROC_LCB_STATUS:dont_test") ) CFG_DIAGNOSTIC_PROC_LCB_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_PROC_LCB_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_PROC_LCB_STATUS"));
      end
   CFG_DIAGNOSTIC_PROC_LCB_STATUS.CHP_LCB_ENABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[0:0]"});
   CFG_DIAGNOSTIC_PROC_LCB_STATUS.ROP_LCB_ENABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[1:1]"});
   CFG_DIAGNOSTIC_PROC_LCB_STATUS.LSP_LCB_ENABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[2:2]"});
   CFG_DIAGNOSTIC_PROC_LCB_STATUS.NALB_LCB_ENABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[3:3]"});
   CFG_DIAGNOSTIC_PROC_LCB_STATUS.AP_LCB_ENABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[4:4]"});
   CFG_DIAGNOSTIC_PROC_LCB_STATUS.DP_LCB_ENABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[5:5]"});
   CFG_DIAGNOSTIC_PROC_LCB_STATUS.QED_LCB_ENABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[6:6]"});
   CFG_DIAGNOSTIC_PROC_LCB_STATUS.DQED_LCB_ENABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[7:7]"});
   CFG_DIAGNOSTIC_PROC_LCB_STATUS.AQED_LCB_ENABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[8:8]"});
   CFG_DIAGNOSTIC_PROC_LCB_STATUS.SYS_LCB_ENABLE.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_proc_lcb_status.status[9:9]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_STATUS_1";
    `endif
    CFG_DIAGNOSTIC_STATUS_1 = hqm_config_master_bridge_CFG_DIAGNOSTIC_STATUS_1_reg::type_id::create("CFG_DIAGNOSTIC_STATUS_1", this);
    CFG_DIAGNOSTIC_STATUS_1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00001C, 32, 32'b00000000000000000000000000000000);
    CFG_DIAGNOSTIC_STATUS_1.set_space_addr("MSG", 32'h0C00001C);
    CFG_DIAGNOSTIC_STATUS_1.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_STATUS_1.set_space_addr("MEM-SB",28'hC00001C);
    CFG_DIAGNOSTIC_STATUS_1.set_space_addr("MEM", 32'h0C00001C);
      CFG_DIAGNOSTIC_STATUS_1.set_space("MEM");
      CFG_DIAGNOSTIC_STATUS_1.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_STATUS_1.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_STATUS_1.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_STATUS_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_STATUS_1.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_STATUS_1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_STATUS_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_STATUS_1:dont_test") ) CFG_DIAGNOSTIC_STATUS_1.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_STATUS_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_STATUS_1"));
      end
   CFG_DIAGNOSTIC_STATUS_1.CFG_TIMEOUT_ERR.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[0:0]"});
   CFG_DIAGNOSTIC_STATUS_1.CFG_REQRSP_UNSOL_ERR.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[1:1]"});
   CFG_DIAGNOSTIC_STATUS_1.CFG_PROTOCOL_ERR.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[2:2]"});
   CFG_DIAGNOSTIC_STATUS_1.CFG_SLV_PAR_ERR.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[3:3]"});
   CFG_DIAGNOSTIC_STATUS_1.CFG_DECODE_PAR_ERR.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[4:4]"});
   CFG_DIAGNOSTIC_STATUS_1.CFG_REQ_DROP_ERR.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[16:16]"});
   CFG_DIAGNOSTIC_STATUS_1.CFG_REQ_UP_MISS_ERR.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[17:17]"});
   CFG_DIAGNOSTIC_STATUS_1.CFG_DECODE_ERR.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[18:18]"});
   CFG_DIAGNOSTIC_STATUS_1.CFG_SLAVE_ACCESS_ERR.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[19:19]"});
   CFG_DIAGNOSTIC_STATUS_1.CFG_SLAVE_TIMEOUT_ERR.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_status_1.internal_f[20:20]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_SYNDROME";
    `endif
    CFG_DIAGNOSTIC_SYNDROME = hqm_config_master_bridge_CFG_DIAGNOSTIC_SYNDROME_reg::type_id::create("CFG_DIAGNOSTIC_SYNDROME", this);
    CFG_DIAGNOSTIC_SYNDROME.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000020, 32, 32'b00000000000000000000000000000000);
    CFG_DIAGNOSTIC_SYNDROME.set_space_addr("MSG", 32'h0C000020);
    CFG_DIAGNOSTIC_SYNDROME.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_SYNDROME.set_space_addr("MEM-SB",28'hC000020);
    CFG_DIAGNOSTIC_SYNDROME.set_space_addr("MEM", 32'h0C000020);
      CFG_DIAGNOSTIC_SYNDROME.set_space("MEM");
      CFG_DIAGNOSTIC_SYNDROME.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_SYNDROME.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_SYNDROME.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_SYNDROME.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_SYNDROME.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_SYNDROME.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_SYNDROME.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_SYNDROME:dont_test") ) CFG_DIAGNOSTIC_SYNDROME.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_SYNDROME )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_SYNDROME"));
      end
   CFG_DIAGNOSTIC_SYNDROME.CFG_SYNDROME_ADDR_MODE_F.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[3:0]"});
   CFG_DIAGNOSTIC_SYNDROME.CFG_SYNDROME_ADDR_TARG_F.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[19:4]"});
   CFG_DIAGNOSTIC_SYNDROME.CFG_SYNDROME_ADDR_NODE_F.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[23:20]"});
   CFG_DIAGNOSTIC_SYNDROME.CFG_SYNDROME_ERR_ENC.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[26:24]"});
   CFG_DIAGNOSTIC_SYNDROME.CFG_SYNDROME_RSP_UID_F.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[30:27]"});
   CFG_DIAGNOSTIC_SYNDROME.CFG_SYNDROME_VALID.set_paths({"i_hqm_master_core.i_hqm_cfg_master.i_hqm_cfg_master_register_prim.i_hqm_mstr_target_cfg_diagnostic_syndrome.i_hqm_AW_register_wtcfg.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_MASTER_CTL";
    `endif
    CFG_MASTER_CTL = hqm_config_master_bridge_CFG_MASTER_CTL_reg::type_id::create("CFG_MASTER_CTL", this);
    CFG_MASTER_CTL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000000, 32, 32'b00000000000000000000000000000000);
    CFG_MASTER_CTL.set_space_addr("MSG", 32'h0C000000);
    CFG_MASTER_CTL.set_space_addr("msg_bus_port", 'h21);
    CFG_MASTER_CTL.set_space_addr("MEM-SB",28'hC000000);
      CFG_MASTER_CTL.set_space("MSG");
      CFG_MASTER_CTL.set_msg_opcode("MEM-SB");
      CFG_MASTER_CTL.set_fid(4'h0, "MEM-SB");
  	CFG_MASTER_CTL.set_bar(4'h2, "MEM-SB");
      CFG_MASTER_CTL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_MASTER_CTL.set_user_attribute("diag_reg", "0");
      CFG_MASTER_CTL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_MASTER_CTL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_MASTER_CTL.set_test_reg(0);
      if ( $test$plusargs("CFG_MASTER_CTL:dont_test") ) CFG_MASTER_CTL.set_test_reg(1'b0);
      if (!add_reg( CFG_MASTER_CTL )) begin
        `sla_error(get_name(), ("Could not add register CFG_MASTER_CTL"));
      end

  endfunction

 virtual function void print_sv_ral_file();  
    $display("RAL File Type [%s], RAL File Instance [%s], SV File ---> %s", get_type_name(), get_name(), `__FILE__); 
 endfunction 
endclass : hqm_config_master_bridge_file

// ================================================


`endif
