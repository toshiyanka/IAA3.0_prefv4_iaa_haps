//                                                                             
// File:            hqm_dir_pipe_bridge_regs.svh                               
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             


//RAL code compatible with Saola versions: 16.2.06 and newer 

`ifndef RAL_HQM_DIR_PIPE_BRIDGE_FILE
`define RAL_HQM_DIR_PIPE_BRIDGE_FILE

class hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PRI0;
  sla_ral_field PRI1;
  sla_ral_field PRI2;
  sla_ral_field PRI3;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI0, PRI0.desired)
     `RAL_FIELD_CP_8(PRI0, PRI0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI1, PRI1.desired)
     `RAL_FIELD_CP_8(PRI1, PRI1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI2, PRI2.desired)
     `RAL_FIELD_CP_8(PRI2, PRI2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI3, PRI3.desired)
     `RAL_FIELD_CP_8(PRI3, PRI3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI0, PRI0.actual)
     `RAL_FIELD_CP_8(PRI0, PRI0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI1, PRI1.actual)
     `RAL_FIELD_CP_8(PRI1, PRI1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI2, PRI2.actual)
     `RAL_FIELD_CP_8(PRI2, PRI2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI3, PRI3.actual)
     `RAL_FIELD_CP_8(PRI3, PRI3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PRI0 = new("PRI0", "RW", 8, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_dir_0.internal_f[7:0]"});
    PRI0.set_powerwell("vcccfn_gated");
    PRI0.set_rand_mode(0);
   PRI0.set_reset_signame("hqm_inp_gated_rst_n");
    PRI0.set_logical_path("HQMID");
    void'(add_field( PRI0 ));

    PRI1 = new("PRI1", "RW", 8, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_dir_0.internal_f[15:8]"});
    PRI1.set_powerwell("vcccfn_gated");
    PRI1.set_rand_mode(0);
   PRI1.set_reset_signame("hqm_inp_gated_rst_n");
    PRI1.set_logical_path("HQMID");
    void'(add_field( PRI1 ));

    PRI2 = new("PRI2", "RW", 8, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_dir_0.internal_f[23:16]"});
    PRI2.set_powerwell("vcccfn_gated");
    PRI2.set_rand_mode(0);
   PRI2.set_reset_signame("hqm_inp_gated_rst_n");
    PRI2.set_logical_path("HQMID");
    void'(add_field( PRI2 ));

    PRI3 = new("PRI3", "RW", 8, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_dir_0.internal_f[31:24]"});
    PRI3.set_powerwell("vcccfn_gated");
    PRI3.set_rand_mode(0);
   PRI3.set_reset_signame("hqm_inp_gated_rst_n");
    PRI3.set_logical_path("HQMID");
    void'(add_field( PRI3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0_reg) 
endclass : hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RSVZ0 = new("RSVZ0", "RO/V", 32, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_dir_1.status[31:0]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1_reg) 
endclass : hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PRI0;
  sla_ral_field PRI1;
  sla_ral_field PRI2;
  sla_ral_field PRI3;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI0, PRI0.desired)
     `RAL_FIELD_CP_8(PRI0, PRI0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI1, PRI1.desired)
     `RAL_FIELD_CP_8(PRI1, PRI1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI2, PRI2.desired)
     `RAL_FIELD_CP_8(PRI2, PRI2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI3, PRI3.desired)
     `RAL_FIELD_CP_8(PRI3, PRI3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI0, PRI0.actual)
     `RAL_FIELD_CP_8(PRI0, PRI0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI1, PRI1.actual)
     `RAL_FIELD_CP_8(PRI1, PRI1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI2, PRI2.actual)
     `RAL_FIELD_CP_8(PRI2, PRI2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI3, PRI3.actual)
     `RAL_FIELD_CP_8(PRI3, PRI3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PRI0 = new("PRI0", "RW", 8, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_replay_0.internal_f[7:0]"});
    PRI0.set_powerwell("vcccfn_gated");
    PRI0.set_rand_mode(0);
   PRI0.set_reset_signame("hqm_inp_gated_rst_n");
    PRI0.set_logical_path("HQMID");
    void'(add_field( PRI0 ));

    PRI1 = new("PRI1", "RW", 8, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_replay_0.internal_f[15:8]"});
    PRI1.set_powerwell("vcccfn_gated");
    PRI1.set_rand_mode(0);
   PRI1.set_reset_signame("hqm_inp_gated_rst_n");
    PRI1.set_logical_path("HQMID");
    void'(add_field( PRI1 ));

    PRI2 = new("PRI2", "RW", 8, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_replay_0.internal_f[23:16]"});
    PRI2.set_powerwell("vcccfn_gated");
    PRI2.set_rand_mode(0);
   PRI2.set_reset_signame("hqm_inp_gated_rst_n");
    PRI2.set_logical_path("HQMID");
    void'(add_field( PRI2 ));

    PRI3 = new("PRI3", "RW", 8, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_replay_0.internal_f[31:24]"});
    PRI3.set_powerwell("vcccfn_gated");
    PRI3.set_rand_mode(0);
   PRI3.set_reset_signame("hqm_inp_gated_rst_n");
    PRI3.set_logical_path("HQMID");
    void'(add_field( PRI3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0_reg) 
endclass : hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RSVZ0 = new("RSVZ0", "RO/V", 32, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_replay_1.status[31:0]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1_reg) 
endclass : hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_DIR_CSR_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field INT_COR_ALARM_DIS;
  sla_ral_field INT_COR_SYND_DIS;
  sla_ral_field INT_UNCR_ALARM_DIS;
  sla_ral_field INT_UNC_SYND_DIS;
  sla_ral_field INT_INF0_ALARM_DIS;
  sla_ral_field INT_INF0_SYND_DIS;
  sla_ral_field INT_INF1_ALARM_DIS;
  sla_ral_field INT_INF1_SYND_DIS;
  sla_ral_field INT_INF2_ALARM_DIS;
  sla_ral_field INT_INF2_SYND_DIS;
  sla_ral_field INT_INF3_ALARM_DIS;
  sla_ral_field INT_INF3_SYND_DIS;
  sla_ral_field INT_INF4_ALARM_DIS;
  sla_ral_field INT_INF4_SYND_DIS;
  sla_ral_field INT_INF5_ALARM_DIS;
  sla_ral_field INT_INF5_SYND_DIS;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_DIR_CSR_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_COR_SYND_DIS, INT_COR_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_COR_SYND_DIS, INT_COR_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_COR_ALARM_DIS, INT_COR_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_COR_SYND_DIS, INT_COR_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_COR_SYND_DIS, INT_COR_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_UNCR_ALARM_DIS, INT_UNCR_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_UNC_SYND_DIS, INT_UNC_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF0_ALARM_DIS, INT_INF0_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF0_SYND_DIS, INT_INF0_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF1_ALARM_DIS, INT_INF1_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF1_SYND_DIS, INT_INF1_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF2_ALARM_DIS, INT_INF2_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF2_SYND_DIS, INT_INF2_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF3_ALARM_DIS, INT_INF3_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF3_SYND_DIS, INT_INF3_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF4_ALARM_DIS, INT_INF4_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF4_SYND_DIS, INT_INF4_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF5_ALARM_DIS, INT_INF5_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT_INF5_SYND_DIS, INT_INF5_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    INT_COR_ALARM_DIS = new("INT_COR_ALARM_DIS", "RW", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[0:0]"});
    INT_COR_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_COR_ALARM_DIS.set_rand_mode(0);
   INT_COR_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_COR_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_COR_ALARM_DIS ));

    INT_COR_SYND_DIS = new("INT_COR_SYND_DIS", "RW", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[1:1]"});
    INT_COR_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_COR_SYND_DIS.set_rand_mode(0);
   INT_COR_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_COR_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_COR_SYND_DIS ));

    INT_UNCR_ALARM_DIS = new("INT_UNCR_ALARM_DIS", "RW", 1, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[2:2]"});
    INT_UNCR_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_UNCR_ALARM_DIS.set_rand_mode(0);
   INT_UNCR_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_UNCR_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_UNCR_ALARM_DIS ));

    INT_UNC_SYND_DIS = new("INT_UNC_SYND_DIS", "RW", 1, 3, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[3:3]"});
    INT_UNC_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_UNC_SYND_DIS.set_rand_mode(0);
   INT_UNC_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_UNC_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_UNC_SYND_DIS ));

    INT_INF0_ALARM_DIS = new("INT_INF0_ALARM_DIS", "RW", 1, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[4:4]"});
    INT_INF0_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF0_ALARM_DIS.set_rand_mode(0);
   INT_INF0_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF0_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF0_ALARM_DIS ));

    INT_INF0_SYND_DIS = new("INT_INF0_SYND_DIS", "RW", 1, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[5:5]"});
    INT_INF0_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF0_SYND_DIS.set_rand_mode(0);
   INT_INF0_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF0_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF0_SYND_DIS ));

    INT_INF1_ALARM_DIS = new("INT_INF1_ALARM_DIS", "RW", 1, 6, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[6:6]"});
    INT_INF1_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF1_ALARM_DIS.set_rand_mode(0);
   INT_INF1_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF1_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF1_ALARM_DIS ));

    INT_INF1_SYND_DIS = new("INT_INF1_SYND_DIS", "RW", 1, 7, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[7:7]"});
    INT_INF1_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF1_SYND_DIS.set_rand_mode(0);
   INT_INF1_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF1_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF1_SYND_DIS ));

    INT_INF2_ALARM_DIS = new("INT_INF2_ALARM_DIS", "RW", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[8:8]"});
    INT_INF2_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF2_ALARM_DIS.set_rand_mode(0);
   INT_INF2_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF2_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF2_ALARM_DIS ));

    INT_INF2_SYND_DIS = new("INT_INF2_SYND_DIS", "RW", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[9:9]"});
    INT_INF2_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF2_SYND_DIS.set_rand_mode(0);
   INT_INF2_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF2_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF2_SYND_DIS ));

    INT_INF3_ALARM_DIS = new("INT_INF3_ALARM_DIS", "RW", 1, 10, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[10:10]"});
    INT_INF3_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF3_ALARM_DIS.set_rand_mode(0);
   INT_INF3_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF3_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF3_ALARM_DIS ));

    INT_INF3_SYND_DIS = new("INT_INF3_SYND_DIS", "RW", 1, 11, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[11:11]"});
    INT_INF3_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF3_SYND_DIS.set_rand_mode(0);
   INT_INF3_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF3_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF3_SYND_DIS ));

    INT_INF4_ALARM_DIS = new("INT_INF4_ALARM_DIS", "RW", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[12:12]"});
    INT_INF4_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF4_ALARM_DIS.set_rand_mode(0);
   INT_INF4_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF4_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF4_ALARM_DIS ));

    INT_INF4_SYND_DIS = new("INT_INF4_SYND_DIS", "RW", 1, 13, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[13:13]"});
    INT_INF4_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF4_SYND_DIS.set_rand_mode(0);
   INT_INF4_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF4_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF4_SYND_DIS ));

    INT_INF5_ALARM_DIS = new("INT_INF5_ALARM_DIS", "RW", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[14:14]"});
    INT_INF5_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT_INF5_ALARM_DIS.set_rand_mode(0);
   INT_INF5_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF5_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF5_ALARM_DIS ));

    INT_INF5_SYND_DIS = new("INT_INF5_SYND_DIS", "RW", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[15:15]"});
    INT_INF5_SYND_DIS.set_powerwell("vcccfn_gated");
    INT_INF5_SYND_DIS.set_rand_mode(0);
   INT_INF5_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT_INF5_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT_INF5_SYND_DIS ));

    RSVZ0 = new("RSVZ0", "RW", 16, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[31:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_DIR_CSR_CONTROL_reg) 
endclass : hqm_dir_pipe_bridge_CFG_DIR_CSR_CONTROL_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_UNIT_VERSION_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNIT_VERSION;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_UNIT_VERSION_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.desired)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.actual)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNIT_VERSION = new("UNIT_VERSION", "RO", 8, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_version.status[31:24]"});
    UNIT_VERSION.set_powerwell("vcccfn_gated");
    UNIT_VERSION.set_rand_mode(0);
   UNIT_VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT_VERSION.set_logical_path("HQMID");
    void'(add_field( UNIT_VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_UNIT_VERSION_reg) 
endclass : hqm_dir_pipe_bridge_CFG_UNIT_VERSION_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_CONTROL_GENERAL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CHICKEN_SIM;
  sla_ral_field CHICKEN_50;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_CONTROL_GENERAL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHICKEN_SIM, CHICKEN_SIM.desired)
     `RAL_FIELD_CP_1(CHICKEN_SIM, CHICKEN_SIM.desired, 0)
     `RAL_FIELD_CP(CHICKEN_50, CHICKEN_50.desired)
     `RAL_FIELD_CP_1(CHICKEN_50, CHICKEN_50.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CHICKEN_SIM, CHICKEN_SIM.actual)
     `RAL_FIELD_CP_1(CHICKEN_SIM, CHICKEN_SIM.actual, 0)
     `RAL_FIELD_CP(CHICKEN_50, CHICKEN_50.actual)
     `RAL_FIELD_CP_1(CHICKEN_50, CHICKEN_50.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CHICKEN_SIM = new("CHICKEN_SIM", "RW", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_general.internal_f[0:0]"});
    CHICKEN_SIM.set_powerwell("vcccfn_gated");
    CHICKEN_SIM.set_rand_mode(0);
   CHICKEN_SIM.set_reset_signame("hqm_inp_gated_rst_n");
    CHICKEN_SIM.set_logical_path("HQMID");
    void'(add_field( CHICKEN_SIM ));

    CHICKEN_50 = new("CHICKEN_50", "RW", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_general.internal_f[1:1]"});
    CHICKEN_50.set_powerwell("vcccfn_gated");
    CHICKEN_50.set_rand_mode(0);
   CHICKEN_50.set_reset_signame("hqm_inp_gated_rst_n");
    CHICKEN_50.set_logical_path("HQMID");
    void'(add_field( CHICKEN_50 ));

    RSVZ0 = new("RSVZ0", "RW", 30, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_general.internal_f[31:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_CONTROL_GENERAL_reg) 
endclass : hqm_dir_pipe_bridge_CFG_CONTROL_GENERAL_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DP_LSP_ENQ_DIR;
  sla_ral_field DP_DQED_DIR;
  sla_ral_field DP_LSP_ENQ_DIR_RORPLY;
  sla_ral_field DP_DQED_RORPLY;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DP_LSP_ENQ_DIR, DP_LSP_ENQ_DIR.desired)
     `RAL_FIELD_CP_5(DP_LSP_ENQ_DIR, DP_LSP_ENQ_DIR.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(DP_DQED_DIR, DP_DQED_DIR.desired)
     `RAL_FIELD_CP_5(DP_DQED_DIR, DP_DQED_DIR.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(DP_LSP_ENQ_DIR_RORPLY, DP_LSP_ENQ_DIR_RORPLY.desired)
     `RAL_FIELD_CP_5(DP_LSP_ENQ_DIR_RORPLY, DP_LSP_ENQ_DIR_RORPLY.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(DP_DQED_RORPLY, DP_DQED_RORPLY.desired)
     `RAL_FIELD_CP_5(DP_DQED_RORPLY, DP_DQED_RORPLY.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_12(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DP_LSP_ENQ_DIR, DP_LSP_ENQ_DIR.actual)
     `RAL_FIELD_CP_5(DP_LSP_ENQ_DIR, DP_LSP_ENQ_DIR.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(DP_DQED_DIR, DP_DQED_DIR.actual)
     `RAL_FIELD_CP_5(DP_DQED_DIR, DP_DQED_DIR.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(DP_LSP_ENQ_DIR_RORPLY, DP_LSP_ENQ_DIR_RORPLY.actual)
     `RAL_FIELD_CP_5(DP_LSP_ENQ_DIR_RORPLY, DP_LSP_ENQ_DIR_RORPLY.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(DP_DQED_RORPLY, DP_DQED_RORPLY.actual)
     `RAL_FIELD_CP_5(DP_DQED_RORPLY, DP_DQED_RORPLY.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_12(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DP_LSP_ENQ_DIR = new("DP_LSP_ENQ_DIR", "RW", 5, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_pipeline_credits.internal_f[4:0]"});
    DP_LSP_ENQ_DIR.set_powerwell("vcccfn_gated");
    DP_LSP_ENQ_DIR.set_rand_mode(0);
   DP_LSP_ENQ_DIR.set_reset_signame("hqm_inp_gated_rst_n");
    DP_LSP_ENQ_DIR.set_logical_path("HQMID");
    void'(add_field( DP_LSP_ENQ_DIR ));

    DP_DQED_DIR = new("DP_DQED_DIR", "RW", 5, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_pipeline_credits.internal_f[9:5]"});
    DP_DQED_DIR.set_powerwell("vcccfn_gated");
    DP_DQED_DIR.set_rand_mode(0);
   DP_DQED_DIR.set_reset_signame("hqm_inp_gated_rst_n");
    DP_DQED_DIR.set_logical_path("HQMID");
    void'(add_field( DP_DQED_DIR ));

    DP_LSP_ENQ_DIR_RORPLY = new("DP_LSP_ENQ_DIR_RORPLY", "RW", 5, 10, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_pipeline_credits.internal_f[14:10]"});
    DP_LSP_ENQ_DIR_RORPLY.set_powerwell("vcccfn_gated");
    DP_LSP_ENQ_DIR_RORPLY.set_rand_mode(0);
   DP_LSP_ENQ_DIR_RORPLY.set_reset_signame("hqm_inp_gated_rst_n");
    DP_LSP_ENQ_DIR_RORPLY.set_logical_path("HQMID");
    void'(add_field( DP_LSP_ENQ_DIR_RORPLY ));

    DP_DQED_RORPLY = new("DP_DQED_RORPLY", "RW", 5, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_pipeline_credits.internal_f[19:15]"});
    DP_DQED_RORPLY.set_powerwell("vcccfn_gated");
    DP_DQED_RORPLY.set_rand_mode(0);
   DP_DQED_RORPLY.set_reset_signame("hqm_inp_gated_rst_n");
    DP_DQED_RORPLY.set_logical_path("HQMID");
    void'(add_field( DP_DQED_RORPLY ));

    RSVZ0 = new("RSVZ0", "RW", 12, 20, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_pipeline_credits.internal_f[31:20]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg) 
endclass : hqm_dir_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field F_DIR_CNT_PRI0;
  sla_ral_field F_DIR_CNT_PRI1;
  sla_ral_field F_DIR_CNT_PRI2;
  sla_ral_field F_DIR_CNT_PRI3;
  sla_ral_field F_DIR_CNT_PRI4;
  sla_ral_field F_DIR_CNT_PRI5;
  sla_ral_field F_DIR_CNT_PRI6;
  sla_ral_field F_DIR_CNT_PRI7;
  sla_ral_field F_ROFRAG_CNT;
  sla_ral_field RSVZ0;
  sla_ral_field F_REPLAY_CNT_PRI0;
  sla_ral_field F_REPLAY_CNT_PRI1;
  sla_ral_field F_REPLAY_CNT_PRI2;
  sla_ral_field F_REPLAY_CNT_PRI3;
  sla_ral_field F_REPLAY_CNT_PRI4;
  sla_ral_field F_REPLAY_CNT_PRI5;
  sla_ral_field F_REPLAY_CNT_PRI6;
  sla_ral_field F_REPLAY_CNT_PRI7;
  sla_ral_field RSVZ1;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(F_DIR_CNT_PRI0, F_DIR_CNT_PRI0.desired)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI0, F_DIR_CNT_PRI0.desired, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI1, F_DIR_CNT_PRI1.desired)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI1, F_DIR_CNT_PRI1.desired, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI2, F_DIR_CNT_PRI2.desired)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI2, F_DIR_CNT_PRI2.desired, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI3, F_DIR_CNT_PRI3.desired)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI3, F_DIR_CNT_PRI3.desired, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI4, F_DIR_CNT_PRI4.desired)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI4, F_DIR_CNT_PRI4.desired, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI5, F_DIR_CNT_PRI5.desired)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI5, F_DIR_CNT_PRI5.desired, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI6, F_DIR_CNT_PRI6.desired)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI6, F_DIR_CNT_PRI6.desired, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI7, F_DIR_CNT_PRI7.desired)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI7, F_DIR_CNT_PRI7.desired, 0)
     `RAL_FIELD_CP(F_ROFRAG_CNT, F_ROFRAG_CNT.desired)
     `RAL_FIELD_CP_1(F_ROFRAG_CNT, F_ROFRAG_CNT.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_7(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI0, F_REPLAY_CNT_PRI0.desired)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI0, F_REPLAY_CNT_PRI0.desired, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI1, F_REPLAY_CNT_PRI1.desired)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI1, F_REPLAY_CNT_PRI1.desired, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI2, F_REPLAY_CNT_PRI2.desired)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI2, F_REPLAY_CNT_PRI2.desired, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI3, F_REPLAY_CNT_PRI3.desired)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI3, F_REPLAY_CNT_PRI3.desired, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI4, F_REPLAY_CNT_PRI4.desired)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI4, F_REPLAY_CNT_PRI4.desired, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI5, F_REPLAY_CNT_PRI5.desired)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI5, F_REPLAY_CNT_PRI5.desired, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI6, F_REPLAY_CNT_PRI6.desired)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI6, F_REPLAY_CNT_PRI6.desired, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI7, F_REPLAY_CNT_PRI7.desired)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI7, F_REPLAY_CNT_PRI7.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_8(RSVZ1, RSVZ1.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(F_DIR_CNT_PRI0, F_DIR_CNT_PRI0.actual)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI0, F_DIR_CNT_PRI0.actual, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI1, F_DIR_CNT_PRI1.actual)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI1, F_DIR_CNT_PRI1.actual, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI2, F_DIR_CNT_PRI2.actual)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI2, F_DIR_CNT_PRI2.actual, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI3, F_DIR_CNT_PRI3.actual)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI3, F_DIR_CNT_PRI3.actual, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI4, F_DIR_CNT_PRI4.actual)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI4, F_DIR_CNT_PRI4.actual, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI5, F_DIR_CNT_PRI5.actual)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI5, F_DIR_CNT_PRI5.actual, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI6, F_DIR_CNT_PRI6.actual)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI6, F_DIR_CNT_PRI6.actual, 0)
     `RAL_FIELD_CP(F_DIR_CNT_PRI7, F_DIR_CNT_PRI7.actual)
     `RAL_FIELD_CP_1(F_DIR_CNT_PRI7, F_DIR_CNT_PRI7.actual, 0)
     `RAL_FIELD_CP(F_ROFRAG_CNT, F_ROFRAG_CNT.actual)
     `RAL_FIELD_CP_1(F_ROFRAG_CNT, F_ROFRAG_CNT.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_7(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI0, F_REPLAY_CNT_PRI0.actual)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI0, F_REPLAY_CNT_PRI0.actual, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI1, F_REPLAY_CNT_PRI1.actual)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI1, F_REPLAY_CNT_PRI1.actual, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI2, F_REPLAY_CNT_PRI2.actual)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI2, F_REPLAY_CNT_PRI2.actual, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI3, F_REPLAY_CNT_PRI3.actual)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI3, F_REPLAY_CNT_PRI3.actual, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI4, F_REPLAY_CNT_PRI4.actual)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI4, F_REPLAY_CNT_PRI4.actual, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI5, F_REPLAY_CNT_PRI5.actual)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI5, F_REPLAY_CNT_PRI5.actual, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI6, F_REPLAY_CNT_PRI6.actual)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI6, F_REPLAY_CNT_PRI6.actual, 0)
     `RAL_FIELD_CP(F_REPLAY_CNT_PRI7, F_REPLAY_CNT_PRI7.actual)
     `RAL_FIELD_CP_1(F_REPLAY_CNT_PRI7, F_REPLAY_CNT_PRI7.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_8(RSVZ1, RSVZ1.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    F_DIR_CNT_PRI0 = new("F_DIR_CNT_PRI0", "RW/V", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[0:0]"});
    F_DIR_CNT_PRI0.set_powerwell("vcccfn_gated");
    F_DIR_CNT_PRI0.set_rand_mode(0);
   F_DIR_CNT_PRI0.set_reset_signame("hqm_inp_gated_rst_n");
    F_DIR_CNT_PRI0.set_logical_path("HQMID");
    void'(add_field( F_DIR_CNT_PRI0 ));

    F_DIR_CNT_PRI1 = new("F_DIR_CNT_PRI1", "RW/V", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[1:1]"});
    F_DIR_CNT_PRI1.set_powerwell("vcccfn_gated");
    F_DIR_CNT_PRI1.set_rand_mode(0);
   F_DIR_CNT_PRI1.set_reset_signame("hqm_inp_gated_rst_n");
    F_DIR_CNT_PRI1.set_logical_path("HQMID");
    void'(add_field( F_DIR_CNT_PRI1 ));

    F_DIR_CNT_PRI2 = new("F_DIR_CNT_PRI2", "RW/V", 1, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[2:2]"});
    F_DIR_CNT_PRI2.set_powerwell("vcccfn_gated");
    F_DIR_CNT_PRI2.set_rand_mode(0);
   F_DIR_CNT_PRI2.set_reset_signame("hqm_inp_gated_rst_n");
    F_DIR_CNT_PRI2.set_logical_path("HQMID");
    void'(add_field( F_DIR_CNT_PRI2 ));

    F_DIR_CNT_PRI3 = new("F_DIR_CNT_PRI3", "RW/V", 1, 3, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[3:3]"});
    F_DIR_CNT_PRI3.set_powerwell("vcccfn_gated");
    F_DIR_CNT_PRI3.set_rand_mode(0);
   F_DIR_CNT_PRI3.set_reset_signame("hqm_inp_gated_rst_n");
    F_DIR_CNT_PRI3.set_logical_path("HQMID");
    void'(add_field( F_DIR_CNT_PRI3 ));

    F_DIR_CNT_PRI4 = new("F_DIR_CNT_PRI4", "RW/V", 1, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[4:4]"});
    F_DIR_CNT_PRI4.set_powerwell("vcccfn_gated");
    F_DIR_CNT_PRI4.set_rand_mode(0);
   F_DIR_CNT_PRI4.set_reset_signame("hqm_inp_gated_rst_n");
    F_DIR_CNT_PRI4.set_logical_path("HQMID");
    void'(add_field( F_DIR_CNT_PRI4 ));

    F_DIR_CNT_PRI5 = new("F_DIR_CNT_PRI5", "RW/V", 1, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[5:5]"});
    F_DIR_CNT_PRI5.set_powerwell("vcccfn_gated");
    F_DIR_CNT_PRI5.set_rand_mode(0);
   F_DIR_CNT_PRI5.set_reset_signame("hqm_inp_gated_rst_n");
    F_DIR_CNT_PRI5.set_logical_path("HQMID");
    void'(add_field( F_DIR_CNT_PRI5 ));

    F_DIR_CNT_PRI6 = new("F_DIR_CNT_PRI6", "RW/V", 1, 6, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[6:6]"});
    F_DIR_CNT_PRI6.set_powerwell("vcccfn_gated");
    F_DIR_CNT_PRI6.set_rand_mode(0);
   F_DIR_CNT_PRI6.set_reset_signame("hqm_inp_gated_rst_n");
    F_DIR_CNT_PRI6.set_logical_path("HQMID");
    void'(add_field( F_DIR_CNT_PRI6 ));

    F_DIR_CNT_PRI7 = new("F_DIR_CNT_PRI7", "RW/V", 1, 7, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[7:7]"});
    F_DIR_CNT_PRI7.set_powerwell("vcccfn_gated");
    F_DIR_CNT_PRI7.set_rand_mode(0);
   F_DIR_CNT_PRI7.set_reset_signame("hqm_inp_gated_rst_n");
    F_DIR_CNT_PRI7.set_logical_path("HQMID");
    void'(add_field( F_DIR_CNT_PRI7 ));

    F_ROFRAG_CNT = new("F_ROFRAG_CNT", "RW/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[8:8]"});
    F_ROFRAG_CNT.set_powerwell("vcccfn_gated");
    F_ROFRAG_CNT.set_rand_mode(0);
   F_ROFRAG_CNT.set_reset_signame("hqm_inp_gated_rst_n");
    F_ROFRAG_CNT.set_logical_path("HQMID");
    void'(add_field( F_ROFRAG_CNT ));

    RSVZ0 = new("RSVZ0", "RW/V", 7, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[15:9]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    F_REPLAY_CNT_PRI0 = new("F_REPLAY_CNT_PRI0", "RW/V", 1, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[16:16]"});
    F_REPLAY_CNT_PRI0.set_powerwell("vcccfn_gated");
    F_REPLAY_CNT_PRI0.set_rand_mode(0);
   F_REPLAY_CNT_PRI0.set_reset_signame("hqm_inp_gated_rst_n");
    F_REPLAY_CNT_PRI0.set_logical_path("HQMID");
    void'(add_field( F_REPLAY_CNT_PRI0 ));

    F_REPLAY_CNT_PRI1 = new("F_REPLAY_CNT_PRI1", "RW/V", 1, 17, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[17:17]"});
    F_REPLAY_CNT_PRI1.set_powerwell("vcccfn_gated");
    F_REPLAY_CNT_PRI1.set_rand_mode(0);
   F_REPLAY_CNT_PRI1.set_reset_signame("hqm_inp_gated_rst_n");
    F_REPLAY_CNT_PRI1.set_logical_path("HQMID");
    void'(add_field( F_REPLAY_CNT_PRI1 ));

    F_REPLAY_CNT_PRI2 = new("F_REPLAY_CNT_PRI2", "RW/V", 1, 18, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[18:18]"});
    F_REPLAY_CNT_PRI2.set_powerwell("vcccfn_gated");
    F_REPLAY_CNT_PRI2.set_rand_mode(0);
   F_REPLAY_CNT_PRI2.set_reset_signame("hqm_inp_gated_rst_n");
    F_REPLAY_CNT_PRI2.set_logical_path("HQMID");
    void'(add_field( F_REPLAY_CNT_PRI2 ));

    F_REPLAY_CNT_PRI3 = new("F_REPLAY_CNT_PRI3", "RW/V", 1, 19, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[19:19]"});
    F_REPLAY_CNT_PRI3.set_powerwell("vcccfn_gated");
    F_REPLAY_CNT_PRI3.set_rand_mode(0);
   F_REPLAY_CNT_PRI3.set_reset_signame("hqm_inp_gated_rst_n");
    F_REPLAY_CNT_PRI3.set_logical_path("HQMID");
    void'(add_field( F_REPLAY_CNT_PRI3 ));

    F_REPLAY_CNT_PRI4 = new("F_REPLAY_CNT_PRI4", "RW/V", 1, 20, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[20:20]"});
    F_REPLAY_CNT_PRI4.set_powerwell("vcccfn_gated");
    F_REPLAY_CNT_PRI4.set_rand_mode(0);
   F_REPLAY_CNT_PRI4.set_reset_signame("hqm_inp_gated_rst_n");
    F_REPLAY_CNT_PRI4.set_logical_path("HQMID");
    void'(add_field( F_REPLAY_CNT_PRI4 ));

    F_REPLAY_CNT_PRI5 = new("F_REPLAY_CNT_PRI5", "RW/V", 1, 21, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[21:21]"});
    F_REPLAY_CNT_PRI5.set_powerwell("vcccfn_gated");
    F_REPLAY_CNT_PRI5.set_rand_mode(0);
   F_REPLAY_CNT_PRI5.set_reset_signame("hqm_inp_gated_rst_n");
    F_REPLAY_CNT_PRI5.set_logical_path("HQMID");
    void'(add_field( F_REPLAY_CNT_PRI5 ));

    F_REPLAY_CNT_PRI6 = new("F_REPLAY_CNT_PRI6", "RW/V", 1, 22, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[22:22]"});
    F_REPLAY_CNT_PRI6.set_powerwell("vcccfn_gated");
    F_REPLAY_CNT_PRI6.set_rand_mode(0);
   F_REPLAY_CNT_PRI6.set_reset_signame("hqm_inp_gated_rst_n");
    F_REPLAY_CNT_PRI6.set_logical_path("HQMID");
    void'(add_field( F_REPLAY_CNT_PRI6 ));

    F_REPLAY_CNT_PRI7 = new("F_REPLAY_CNT_PRI7", "RW/V", 1, 23, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[23:23]"});
    F_REPLAY_CNT_PRI7.set_powerwell("vcccfn_gated");
    F_REPLAY_CNT_PRI7.set_rand_mode(0);
   F_REPLAY_CNT_PRI7.set_reset_signame("hqm_inp_gated_rst_n");
    F_REPLAY_CNT_PRI7.set_logical_path("HQMID");
    void'(add_field( F_REPLAY_CNT_PRI7 ));

    RSVZ1 = new("RSVZ1", "RW/V", 8, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[31:24]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg) 
endclass : hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field A_DIR_CNT_PRI0;
  sla_ral_field A_DIR_CNT_PRI1;
  sla_ral_field A_DIR_CNT_PRI2;
  sla_ral_field A_DIR_CNT_PRI3;
  sla_ral_field A_DIR_CNT_PRI4;
  sla_ral_field A_DIR_CNT_PRI5;
  sla_ral_field A_DIR_CNT_PRI6;
  sla_ral_field A_DIR_CNT_PRI7;
  sla_ral_field A_ROFRAG_CNT;
  sla_ral_field RSVZ0;
  sla_ral_field A_REPLAY_CNT_PRI0;
  sla_ral_field A_REPLAY_CNT_PRI1;
  sla_ral_field A_REPLAY_CNT_PRI2;
  sla_ral_field A_REPLAY_CNT_PRI3;
  sla_ral_field A_REPLAY_CNT_PRI4;
  sla_ral_field A_REPLAY_CNT_PRI5;
  sla_ral_field A_REPLAY_CNT_PRI6;
  sla_ral_field A_REPLAY_CNT_PRI7;
  sla_ral_field RSVZ1;
  sla_ral_field INTERRUPT;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(A_DIR_CNT_PRI0, A_DIR_CNT_PRI0.desired)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI0, A_DIR_CNT_PRI0.desired, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI1, A_DIR_CNT_PRI1.desired)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI1, A_DIR_CNT_PRI1.desired, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI2, A_DIR_CNT_PRI2.desired)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI2, A_DIR_CNT_PRI2.desired, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI3, A_DIR_CNT_PRI3.desired)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI3, A_DIR_CNT_PRI3.desired, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI4, A_DIR_CNT_PRI4.desired)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI4, A_DIR_CNT_PRI4.desired, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI5, A_DIR_CNT_PRI5.desired)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI5, A_DIR_CNT_PRI5.desired, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI6, A_DIR_CNT_PRI6.desired)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI6, A_DIR_CNT_PRI6.desired, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI7, A_DIR_CNT_PRI7.desired)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI7, A_DIR_CNT_PRI7.desired, 0)
     `RAL_FIELD_CP(A_ROFRAG_CNT, A_ROFRAG_CNT.desired)
     `RAL_FIELD_CP_1(A_ROFRAG_CNT, A_ROFRAG_CNT.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_7(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI0, A_REPLAY_CNT_PRI0.desired)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI0, A_REPLAY_CNT_PRI0.desired, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI1, A_REPLAY_CNT_PRI1.desired)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI1, A_REPLAY_CNT_PRI1.desired, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI2, A_REPLAY_CNT_PRI2.desired)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI2, A_REPLAY_CNT_PRI2.desired, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI3, A_REPLAY_CNT_PRI3.desired)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI3, A_REPLAY_CNT_PRI3.desired, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI4, A_REPLAY_CNT_PRI4.desired)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI4, A_REPLAY_CNT_PRI4.desired, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI5, A_REPLAY_CNT_PRI5.desired)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI5, A_REPLAY_CNT_PRI5.desired, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI6, A_REPLAY_CNT_PRI6.desired)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI6, A_REPLAY_CNT_PRI6.desired, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI7, A_REPLAY_CNT_PRI7.desired)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI7, A_REPLAY_CNT_PRI7.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_7(RSVZ1, RSVZ1.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(INTERRUPT, INTERRUPT.desired)
     `RAL_FIELD_CP_1(INTERRUPT, INTERRUPT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(A_DIR_CNT_PRI0, A_DIR_CNT_PRI0.actual)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI0, A_DIR_CNT_PRI0.actual, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI1, A_DIR_CNT_PRI1.actual)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI1, A_DIR_CNT_PRI1.actual, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI2, A_DIR_CNT_PRI2.actual)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI2, A_DIR_CNT_PRI2.actual, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI3, A_DIR_CNT_PRI3.actual)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI3, A_DIR_CNT_PRI3.actual, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI4, A_DIR_CNT_PRI4.actual)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI4, A_DIR_CNT_PRI4.actual, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI5, A_DIR_CNT_PRI5.actual)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI5, A_DIR_CNT_PRI5.actual, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI6, A_DIR_CNT_PRI6.actual)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI6, A_DIR_CNT_PRI6.actual, 0)
     `RAL_FIELD_CP(A_DIR_CNT_PRI7, A_DIR_CNT_PRI7.actual)
     `RAL_FIELD_CP_1(A_DIR_CNT_PRI7, A_DIR_CNT_PRI7.actual, 0)
     `RAL_FIELD_CP(A_ROFRAG_CNT, A_ROFRAG_CNT.actual)
     `RAL_FIELD_CP_1(A_ROFRAG_CNT, A_ROFRAG_CNT.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_7(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI0, A_REPLAY_CNT_PRI0.actual)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI0, A_REPLAY_CNT_PRI0.actual, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI1, A_REPLAY_CNT_PRI1.actual)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI1, A_REPLAY_CNT_PRI1.actual, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI2, A_REPLAY_CNT_PRI2.actual)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI2, A_REPLAY_CNT_PRI2.actual, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI3, A_REPLAY_CNT_PRI3.actual)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI3, A_REPLAY_CNT_PRI3.actual, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI4, A_REPLAY_CNT_PRI4.actual)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI4, A_REPLAY_CNT_PRI4.actual, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI5, A_REPLAY_CNT_PRI5.actual)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI5, A_REPLAY_CNT_PRI5.actual, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI6, A_REPLAY_CNT_PRI6.actual)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI6, A_REPLAY_CNT_PRI6.actual, 0)
     `RAL_FIELD_CP(A_REPLAY_CNT_PRI7, A_REPLAY_CNT_PRI7.actual)
     `RAL_FIELD_CP_1(A_REPLAY_CNT_PRI7, A_REPLAY_CNT_PRI7.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_7(RSVZ1, RSVZ1.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(INTERRUPT, INTERRUPT.actual)
     `RAL_FIELD_CP_1(INTERRUPT, INTERRUPT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    A_DIR_CNT_PRI0 = new("A_DIR_CNT_PRI0", "RW/V", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[0:0]"});
    A_DIR_CNT_PRI0.set_powerwell("vcccfn_gated");
    A_DIR_CNT_PRI0.set_rand_mode(0);
   A_DIR_CNT_PRI0.set_reset_signame("hqm_inp_gated_rst_n");
    A_DIR_CNT_PRI0.set_logical_path("HQMID");
    void'(add_field( A_DIR_CNT_PRI0 ));

    A_DIR_CNT_PRI1 = new("A_DIR_CNT_PRI1", "RW/V", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[1:1]"});
    A_DIR_CNT_PRI1.set_powerwell("vcccfn_gated");
    A_DIR_CNT_PRI1.set_rand_mode(0);
   A_DIR_CNT_PRI1.set_reset_signame("hqm_inp_gated_rst_n");
    A_DIR_CNT_PRI1.set_logical_path("HQMID");
    void'(add_field( A_DIR_CNT_PRI1 ));

    A_DIR_CNT_PRI2 = new("A_DIR_CNT_PRI2", "RW/V", 1, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[2:2]"});
    A_DIR_CNT_PRI2.set_powerwell("vcccfn_gated");
    A_DIR_CNT_PRI2.set_rand_mode(0);
   A_DIR_CNT_PRI2.set_reset_signame("hqm_inp_gated_rst_n");
    A_DIR_CNT_PRI2.set_logical_path("HQMID");
    void'(add_field( A_DIR_CNT_PRI2 ));

    A_DIR_CNT_PRI3 = new("A_DIR_CNT_PRI3", "RW/V", 1, 3, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[3:3]"});
    A_DIR_CNT_PRI3.set_powerwell("vcccfn_gated");
    A_DIR_CNT_PRI3.set_rand_mode(0);
   A_DIR_CNT_PRI3.set_reset_signame("hqm_inp_gated_rst_n");
    A_DIR_CNT_PRI3.set_logical_path("HQMID");
    void'(add_field( A_DIR_CNT_PRI3 ));

    A_DIR_CNT_PRI4 = new("A_DIR_CNT_PRI4", "RW/V", 1, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[4:4]"});
    A_DIR_CNT_PRI4.set_powerwell("vcccfn_gated");
    A_DIR_CNT_PRI4.set_rand_mode(0);
   A_DIR_CNT_PRI4.set_reset_signame("hqm_inp_gated_rst_n");
    A_DIR_CNT_PRI4.set_logical_path("HQMID");
    void'(add_field( A_DIR_CNT_PRI4 ));

    A_DIR_CNT_PRI5 = new("A_DIR_CNT_PRI5", "RW/V", 1, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[5:5]"});
    A_DIR_CNT_PRI5.set_powerwell("vcccfn_gated");
    A_DIR_CNT_PRI5.set_rand_mode(0);
   A_DIR_CNT_PRI5.set_reset_signame("hqm_inp_gated_rst_n");
    A_DIR_CNT_PRI5.set_logical_path("HQMID");
    void'(add_field( A_DIR_CNT_PRI5 ));

    A_DIR_CNT_PRI6 = new("A_DIR_CNT_PRI6", "RW/V", 1, 6, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[6:6]"});
    A_DIR_CNT_PRI6.set_powerwell("vcccfn_gated");
    A_DIR_CNT_PRI6.set_rand_mode(0);
   A_DIR_CNT_PRI6.set_reset_signame("hqm_inp_gated_rst_n");
    A_DIR_CNT_PRI6.set_logical_path("HQMID");
    void'(add_field( A_DIR_CNT_PRI6 ));

    A_DIR_CNT_PRI7 = new("A_DIR_CNT_PRI7", "RW/V", 1, 7, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[7:7]"});
    A_DIR_CNT_PRI7.set_powerwell("vcccfn_gated");
    A_DIR_CNT_PRI7.set_rand_mode(0);
   A_DIR_CNT_PRI7.set_reset_signame("hqm_inp_gated_rst_n");
    A_DIR_CNT_PRI7.set_logical_path("HQMID");
    void'(add_field( A_DIR_CNT_PRI7 ));

    A_ROFRAG_CNT = new("A_ROFRAG_CNT", "RW/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[8:8]"});
    A_ROFRAG_CNT.set_powerwell("vcccfn_gated");
    A_ROFRAG_CNT.set_rand_mode(0);
   A_ROFRAG_CNT.set_reset_signame("hqm_inp_gated_rst_n");
    A_ROFRAG_CNT.set_logical_path("HQMID");
    void'(add_field( A_ROFRAG_CNT ));

    RSVZ0 = new("RSVZ0", "RW/V", 7, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[15:9]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    A_REPLAY_CNT_PRI0 = new("A_REPLAY_CNT_PRI0", "RW/V", 1, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[16:16]"});
    A_REPLAY_CNT_PRI0.set_powerwell("vcccfn_gated");
    A_REPLAY_CNT_PRI0.set_rand_mode(0);
   A_REPLAY_CNT_PRI0.set_reset_signame("hqm_inp_gated_rst_n");
    A_REPLAY_CNT_PRI0.set_logical_path("HQMID");
    void'(add_field( A_REPLAY_CNT_PRI0 ));

    A_REPLAY_CNT_PRI1 = new("A_REPLAY_CNT_PRI1", "RW/V", 1, 17, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[17:17]"});
    A_REPLAY_CNT_PRI1.set_powerwell("vcccfn_gated");
    A_REPLAY_CNT_PRI1.set_rand_mode(0);
   A_REPLAY_CNT_PRI1.set_reset_signame("hqm_inp_gated_rst_n");
    A_REPLAY_CNT_PRI1.set_logical_path("HQMID");
    void'(add_field( A_REPLAY_CNT_PRI1 ));

    A_REPLAY_CNT_PRI2 = new("A_REPLAY_CNT_PRI2", "RW/V", 1, 18, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[18:18]"});
    A_REPLAY_CNT_PRI2.set_powerwell("vcccfn_gated");
    A_REPLAY_CNT_PRI2.set_rand_mode(0);
   A_REPLAY_CNT_PRI2.set_reset_signame("hqm_inp_gated_rst_n");
    A_REPLAY_CNT_PRI2.set_logical_path("HQMID");
    void'(add_field( A_REPLAY_CNT_PRI2 ));

    A_REPLAY_CNT_PRI3 = new("A_REPLAY_CNT_PRI3", "RW/V", 1, 19, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[19:19]"});
    A_REPLAY_CNT_PRI3.set_powerwell("vcccfn_gated");
    A_REPLAY_CNT_PRI3.set_rand_mode(0);
   A_REPLAY_CNT_PRI3.set_reset_signame("hqm_inp_gated_rst_n");
    A_REPLAY_CNT_PRI3.set_logical_path("HQMID");
    void'(add_field( A_REPLAY_CNT_PRI3 ));

    A_REPLAY_CNT_PRI4 = new("A_REPLAY_CNT_PRI4", "RW/V", 1, 20, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[20:20]"});
    A_REPLAY_CNT_PRI4.set_powerwell("vcccfn_gated");
    A_REPLAY_CNT_PRI4.set_rand_mode(0);
   A_REPLAY_CNT_PRI4.set_reset_signame("hqm_inp_gated_rst_n");
    A_REPLAY_CNT_PRI4.set_logical_path("HQMID");
    void'(add_field( A_REPLAY_CNT_PRI4 ));

    A_REPLAY_CNT_PRI5 = new("A_REPLAY_CNT_PRI5", "RW/V", 1, 21, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[21:21]"});
    A_REPLAY_CNT_PRI5.set_powerwell("vcccfn_gated");
    A_REPLAY_CNT_PRI5.set_rand_mode(0);
   A_REPLAY_CNT_PRI5.set_reset_signame("hqm_inp_gated_rst_n");
    A_REPLAY_CNT_PRI5.set_logical_path("HQMID");
    void'(add_field( A_REPLAY_CNT_PRI5 ));

    A_REPLAY_CNT_PRI6 = new("A_REPLAY_CNT_PRI6", "RW/V", 1, 22, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[22:22]"});
    A_REPLAY_CNT_PRI6.set_powerwell("vcccfn_gated");
    A_REPLAY_CNT_PRI6.set_rand_mode(0);
   A_REPLAY_CNT_PRI6.set_reset_signame("hqm_inp_gated_rst_n");
    A_REPLAY_CNT_PRI6.set_logical_path("HQMID");
    void'(add_field( A_REPLAY_CNT_PRI6 ));

    A_REPLAY_CNT_PRI7 = new("A_REPLAY_CNT_PRI7", "RW/V", 1, 23, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[23:23]"});
    A_REPLAY_CNT_PRI7.set_powerwell("vcccfn_gated");
    A_REPLAY_CNT_PRI7.set_rand_mode(0);
   A_REPLAY_CNT_PRI7.set_reset_signame("hqm_inp_gated_rst_n");
    A_REPLAY_CNT_PRI7.set_logical_path("HQMID");
    void'(add_field( A_REPLAY_CNT_PRI7 ));

    RSVZ1 = new("RSVZ1", "RW/V", 7, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[30:24]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    INTERRUPT = new("INTERRUPT", "RW/V", 1, 31, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[31:31]"});
    INTERRUPT.set_powerwell("vcccfn_gated");
    INTERRUPT.set_rand_mode(0);
   INTERRUPT.set_reset_signame("hqm_inp_gated_rst_n");
    INTERRUPT.set_logical_path("HQMID");
    void'(add_field( INTERRUPT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_01_reg) 
endclass : hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_01_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RW_NXTHP_P2_HOLD;
  sla_ral_field RW_NXTHP_P3_HOLD;
  sla_ral_field RW_NXTHP_P0_V_F;
  sla_ral_field RW_NXTHP_P1_V_F;
  sla_ral_field RW_NXTHP_P2_V_F;
  sla_ral_field RW_NXTHP_P3_V_F;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RW_NXTHP_P2_HOLD, RW_NXTHP_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RW_NXTHP_P2_HOLD, RW_NXTHP_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RW_NXTHP_P3_HOLD, RW_NXTHP_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RW_NXTHP_P3_HOLD, RW_NXTHP_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RW_NXTHP_P0_V_F, RW_NXTHP_P0_V_F.desired)
     `RAL_FIELD_CP_1(RW_NXTHP_P0_V_F, RW_NXTHP_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RW_NXTHP_P1_V_F, RW_NXTHP_P1_V_F.desired)
     `RAL_FIELD_CP_1(RW_NXTHP_P1_V_F, RW_NXTHP_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RW_NXTHP_P2_V_F, RW_NXTHP_P2_V_F.desired)
     `RAL_FIELD_CP_1(RW_NXTHP_P2_V_F, RW_NXTHP_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RW_NXTHP_P3_V_F, RW_NXTHP_P3_V_F.desired)
     `RAL_FIELD_CP_1(RW_NXTHP_P3_V_F, RW_NXTHP_P3_V_F.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RW_NXTHP_P2_HOLD, RW_NXTHP_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RW_NXTHP_P2_HOLD, RW_NXTHP_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RW_NXTHP_P3_HOLD, RW_NXTHP_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RW_NXTHP_P3_HOLD, RW_NXTHP_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RW_NXTHP_P0_V_F, RW_NXTHP_P0_V_F.actual)
     `RAL_FIELD_CP_1(RW_NXTHP_P0_V_F, RW_NXTHP_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RW_NXTHP_P1_V_F, RW_NXTHP_P1_V_F.actual)
     `RAL_FIELD_CP_1(RW_NXTHP_P1_V_F, RW_NXTHP_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RW_NXTHP_P2_V_F, RW_NXTHP_P2_V_F.actual)
     `RAL_FIELD_CP_1(RW_NXTHP_P2_V_F, RW_NXTHP_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RW_NXTHP_P3_V_F, RW_NXTHP_P3_V_F.actual)
     `RAL_FIELD_CP_1(RW_NXTHP_P3_V_F, RW_NXTHP_P3_V_F.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RW_NXTHP_P2_HOLD = new("RW_NXTHP_P2_HOLD", "RO/V", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[0:0]"});
    RW_NXTHP_P2_HOLD.set_powerwell("vcccfn_gated");
    RW_NXTHP_P2_HOLD.set_rand_mode(0);
   RW_NXTHP_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RW_NXTHP_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RW_NXTHP_P2_HOLD ));

    RW_NXTHP_P3_HOLD = new("RW_NXTHP_P3_HOLD", "RO/V", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[1:1]"});
    RW_NXTHP_P3_HOLD.set_powerwell("vcccfn_gated");
    RW_NXTHP_P3_HOLD.set_rand_mode(0);
   RW_NXTHP_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RW_NXTHP_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RW_NXTHP_P3_HOLD ));

    RW_NXTHP_P0_V_F = new("RW_NXTHP_P0_V_F", "RO/V", 1, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[2:2]"});
    RW_NXTHP_P0_V_F.set_powerwell("vcccfn_gated");
    RW_NXTHP_P0_V_F.set_rand_mode(0);
   RW_NXTHP_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_NXTHP_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RW_NXTHP_P0_V_F ));

    RW_NXTHP_P1_V_F = new("RW_NXTHP_P1_V_F", "RO/V", 1, 3, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[3:3]"});
    RW_NXTHP_P1_V_F.set_powerwell("vcccfn_gated");
    RW_NXTHP_P1_V_F.set_rand_mode(0);
   RW_NXTHP_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_NXTHP_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RW_NXTHP_P1_V_F ));

    RW_NXTHP_P2_V_F = new("RW_NXTHP_P2_V_F", "RO/V", 1, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[4:4]"});
    RW_NXTHP_P2_V_F.set_powerwell("vcccfn_gated");
    RW_NXTHP_P2_V_F.set_rand_mode(0);
   RW_NXTHP_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_NXTHP_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RW_NXTHP_P2_V_F ));

    RW_NXTHP_P3_V_F = new("RW_NXTHP_P3_V_F", "RO/V", 1, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[5:5]"});
    RW_NXTHP_P3_V_F.set_powerwell("vcccfn_gated");
    RW_NXTHP_P3_V_F.set_rand_mode(0);
   RW_NXTHP_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RW_NXTHP_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RW_NXTHP_P3_V_F ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg) 
endclass : hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RMW_ROFRAG_HP_P1_V_F;
  sla_ral_field RMW_ROFRAG_HP_P2_V_F;
  sla_ral_field RMW_ROFRAG_HP_P3_V_F;
  sla_ral_field RMW_ROFRAG_CNT_P1_HOLD;
  sla_ral_field RMW_ROFRAG_CNT_P2_HOLD;
  sla_ral_field RMW_ROFRAG_CNT_P3_HOLD;
  sla_ral_field RMW_ROFRAG_CNT_P0_V_F;
  sla_ral_field RMW_ROFRAG_CNT_P1_V_F;
  sla_ral_field RMW_ROFRAG_CNT_P2_V_F;
  sla_ral_field RMW_ROFRAG_CNT_P3_V_F;
  sla_ral_field RMW_DIR_TP_P1_HOLD;
  sla_ral_field RMW_DIR_TP_P2_HOLD;
  sla_ral_field RMW_DIR_TP_P3_HOLD;
  sla_ral_field RMW_DIR_TP_P0_V_F;
  sla_ral_field RMW_DIR_TP_P1_V_F;
  sla_ral_field RMW_DIR_TP_P2_V_F;
  sla_ral_field RMW_DIR_TP_P3_V_F;
  sla_ral_field RMW_DIR_HP_P1_HOLD;
  sla_ral_field RMW_DIR_HP_P2_HOLD;
  sla_ral_field RMW_DIR_HP_P3_HOLD;
  sla_ral_field RMW_DIR_HP_P0_V_F;
  sla_ral_field RMW_DIR_HP_P1_V_F;
  sla_ral_field RMW_DIR_HP_P2_V_F;
  sla_ral_field RMW_DIR_HP_P3_V_F;
  sla_ral_field RMW_DIR_CNT_P1_HOLD;
  sla_ral_field RMW_DIR_CNT_P2_HOLD;
  sla_ral_field RMW_DIR_CNT_P3_HOLD;
  sla_ral_field RMW_DIR_CNT_P0_V_F;
  sla_ral_field RMW_DIR_CNT_P1_V_F;
  sla_ral_field RMW_DIR_CNT_P2_V_F;
  sla_ral_field RMW_DIR_CNT_P3_V_F;
  sla_ral_field RW_NXTHP_P1_HOLD;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P1_V_F, RMW_ROFRAG_HP_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P1_V_F, RMW_ROFRAG_HP_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P2_V_F, RMW_ROFRAG_HP_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P2_V_F, RMW_ROFRAG_HP_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P3_V_F, RMW_ROFRAG_HP_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P3_V_F, RMW_ROFRAG_HP_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P1_HOLD, RMW_ROFRAG_CNT_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P1_HOLD, RMW_ROFRAG_CNT_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P2_HOLD, RMW_ROFRAG_CNT_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P2_HOLD, RMW_ROFRAG_CNT_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P3_HOLD, RMW_ROFRAG_CNT_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P3_HOLD, RMW_ROFRAG_CNT_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P0_V_F, RMW_ROFRAG_CNT_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P0_V_F, RMW_ROFRAG_CNT_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P1_V_F, RMW_ROFRAG_CNT_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P1_V_F, RMW_ROFRAG_CNT_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P2_V_F, RMW_ROFRAG_CNT_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P2_V_F, RMW_ROFRAG_CNT_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P3_V_F, RMW_ROFRAG_CNT_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P3_V_F, RMW_ROFRAG_CNT_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P1_HOLD, RMW_DIR_TP_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P1_HOLD, RMW_DIR_TP_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P2_HOLD, RMW_DIR_TP_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P2_HOLD, RMW_DIR_TP_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P3_HOLD, RMW_DIR_TP_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P3_HOLD, RMW_DIR_TP_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P0_V_F, RMW_DIR_TP_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P0_V_F, RMW_DIR_TP_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P1_V_F, RMW_DIR_TP_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P1_V_F, RMW_DIR_TP_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P2_V_F, RMW_DIR_TP_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P2_V_F, RMW_DIR_TP_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P3_V_F, RMW_DIR_TP_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P3_V_F, RMW_DIR_TP_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P1_HOLD, RMW_DIR_HP_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P1_HOLD, RMW_DIR_HP_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P2_HOLD, RMW_DIR_HP_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P2_HOLD, RMW_DIR_HP_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P3_HOLD, RMW_DIR_HP_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P3_HOLD, RMW_DIR_HP_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P0_V_F, RMW_DIR_HP_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P0_V_F, RMW_DIR_HP_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P1_V_F, RMW_DIR_HP_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P1_V_F, RMW_DIR_HP_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P2_V_F, RMW_DIR_HP_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P2_V_F, RMW_DIR_HP_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P3_V_F, RMW_DIR_HP_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P3_V_F, RMW_DIR_HP_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P1_HOLD, RMW_DIR_CNT_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P1_HOLD, RMW_DIR_CNT_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P2_HOLD, RMW_DIR_CNT_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P2_HOLD, RMW_DIR_CNT_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P3_HOLD, RMW_DIR_CNT_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P3_HOLD, RMW_DIR_CNT_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P0_V_F, RMW_DIR_CNT_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P0_V_F, RMW_DIR_CNT_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P1_V_F, RMW_DIR_CNT_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P1_V_F, RMW_DIR_CNT_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P2_V_F, RMW_DIR_CNT_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P2_V_F, RMW_DIR_CNT_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P3_V_F, RMW_DIR_CNT_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P3_V_F, RMW_DIR_CNT_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RW_NXTHP_P1_HOLD, RW_NXTHP_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RW_NXTHP_P1_HOLD, RW_NXTHP_P1_HOLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P1_V_F, RMW_ROFRAG_HP_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P1_V_F, RMW_ROFRAG_HP_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P2_V_F, RMW_ROFRAG_HP_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P2_V_F, RMW_ROFRAG_HP_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P3_V_F, RMW_ROFRAG_HP_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P3_V_F, RMW_ROFRAG_HP_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P1_HOLD, RMW_ROFRAG_CNT_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P1_HOLD, RMW_ROFRAG_CNT_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P2_HOLD, RMW_ROFRAG_CNT_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P2_HOLD, RMW_ROFRAG_CNT_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P3_HOLD, RMW_ROFRAG_CNT_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P3_HOLD, RMW_ROFRAG_CNT_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P0_V_F, RMW_ROFRAG_CNT_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P0_V_F, RMW_ROFRAG_CNT_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P1_V_F, RMW_ROFRAG_CNT_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P1_V_F, RMW_ROFRAG_CNT_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P2_V_F, RMW_ROFRAG_CNT_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P2_V_F, RMW_ROFRAG_CNT_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_CNT_P3_V_F, RMW_ROFRAG_CNT_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_CNT_P3_V_F, RMW_ROFRAG_CNT_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P1_HOLD, RMW_DIR_TP_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P1_HOLD, RMW_DIR_TP_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P2_HOLD, RMW_DIR_TP_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P2_HOLD, RMW_DIR_TP_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P3_HOLD, RMW_DIR_TP_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P3_HOLD, RMW_DIR_TP_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P0_V_F, RMW_DIR_TP_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P0_V_F, RMW_DIR_TP_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P1_V_F, RMW_DIR_TP_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P1_V_F, RMW_DIR_TP_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P2_V_F, RMW_DIR_TP_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P2_V_F, RMW_DIR_TP_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_TP_P3_V_F, RMW_DIR_TP_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_TP_P3_V_F, RMW_DIR_TP_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P1_HOLD, RMW_DIR_HP_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P1_HOLD, RMW_DIR_HP_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P2_HOLD, RMW_DIR_HP_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P2_HOLD, RMW_DIR_HP_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P3_HOLD, RMW_DIR_HP_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P3_HOLD, RMW_DIR_HP_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P0_V_F, RMW_DIR_HP_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P0_V_F, RMW_DIR_HP_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P1_V_F, RMW_DIR_HP_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P1_V_F, RMW_DIR_HP_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P2_V_F, RMW_DIR_HP_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P2_V_F, RMW_DIR_HP_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_HP_P3_V_F, RMW_DIR_HP_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_HP_P3_V_F, RMW_DIR_HP_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P1_HOLD, RMW_DIR_CNT_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P1_HOLD, RMW_DIR_CNT_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P2_HOLD, RMW_DIR_CNT_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P2_HOLD, RMW_DIR_CNT_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P3_HOLD, RMW_DIR_CNT_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P3_HOLD, RMW_DIR_CNT_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P0_V_F, RMW_DIR_CNT_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P0_V_F, RMW_DIR_CNT_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P1_V_F, RMW_DIR_CNT_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P1_V_F, RMW_DIR_CNT_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P2_V_F, RMW_DIR_CNT_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P2_V_F, RMW_DIR_CNT_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_DIR_CNT_P3_V_F, RMW_DIR_CNT_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_DIR_CNT_P3_V_F, RMW_DIR_CNT_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RW_NXTHP_P1_HOLD, RW_NXTHP_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RW_NXTHP_P1_HOLD, RW_NXTHP_P1_HOLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RMW_ROFRAG_HP_P1_V_F = new("RMW_ROFRAG_HP_P1_V_F", "RO/V", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[0:0]"});
    RMW_ROFRAG_HP_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_HP_P1_V_F.set_rand_mode(0);
   RMW_ROFRAG_HP_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_HP_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_HP_P1_V_F ));

    RMW_ROFRAG_HP_P2_V_F = new("RMW_ROFRAG_HP_P2_V_F", "RO/V", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[1:1]"});
    RMW_ROFRAG_HP_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_HP_P2_V_F.set_rand_mode(0);
   RMW_ROFRAG_HP_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_HP_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_HP_P2_V_F ));

    RMW_ROFRAG_HP_P3_V_F = new("RMW_ROFRAG_HP_P3_V_F", "RO/V", 1, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[2:2]"});
    RMW_ROFRAG_HP_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_HP_P3_V_F.set_rand_mode(0);
   RMW_ROFRAG_HP_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_HP_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_HP_P3_V_F ));

    RMW_ROFRAG_CNT_P1_HOLD = new("RMW_ROFRAG_CNT_P1_HOLD", "RO/V", 1, 3, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[3:3]"});
    RMW_ROFRAG_CNT_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_CNT_P1_HOLD.set_rand_mode(0);
   RMW_ROFRAG_CNT_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_CNT_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_CNT_P1_HOLD ));

    RMW_ROFRAG_CNT_P2_HOLD = new("RMW_ROFRAG_CNT_P2_HOLD", "RO/V", 1, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[4:4]"});
    RMW_ROFRAG_CNT_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_CNT_P2_HOLD.set_rand_mode(0);
   RMW_ROFRAG_CNT_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_CNT_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_CNT_P2_HOLD ));

    RMW_ROFRAG_CNT_P3_HOLD = new("RMW_ROFRAG_CNT_P3_HOLD", "RO/V", 1, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[5:5]"});
    RMW_ROFRAG_CNT_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_CNT_P3_HOLD.set_rand_mode(0);
   RMW_ROFRAG_CNT_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_CNT_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_CNT_P3_HOLD ));

    RMW_ROFRAG_CNT_P0_V_F = new("RMW_ROFRAG_CNT_P0_V_F", "RO/V", 1, 6, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[6:6]"});
    RMW_ROFRAG_CNT_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_CNT_P0_V_F.set_rand_mode(0);
   RMW_ROFRAG_CNT_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_CNT_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_CNT_P0_V_F ));

    RMW_ROFRAG_CNT_P1_V_F = new("RMW_ROFRAG_CNT_P1_V_F", "RO/V", 1, 7, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[7:7]"});
    RMW_ROFRAG_CNT_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_CNT_P1_V_F.set_rand_mode(0);
   RMW_ROFRAG_CNT_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_CNT_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_CNT_P1_V_F ));

    RMW_ROFRAG_CNT_P2_V_F = new("RMW_ROFRAG_CNT_P2_V_F", "RO/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[8:8]"});
    RMW_ROFRAG_CNT_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_CNT_P2_V_F.set_rand_mode(0);
   RMW_ROFRAG_CNT_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_CNT_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_CNT_P2_V_F ));

    RMW_ROFRAG_CNT_P3_V_F = new("RMW_ROFRAG_CNT_P3_V_F", "RO/V", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[9:9]"});
    RMW_ROFRAG_CNT_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_CNT_P3_V_F.set_rand_mode(0);
   RMW_ROFRAG_CNT_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_CNT_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_CNT_P3_V_F ));

    RMW_DIR_TP_P1_HOLD = new("RMW_DIR_TP_P1_HOLD", "RO/V", 1, 10, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[10:10]"});
    RMW_DIR_TP_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_DIR_TP_P1_HOLD.set_rand_mode(0);
   RMW_DIR_TP_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_TP_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_TP_P1_HOLD ));

    RMW_DIR_TP_P2_HOLD = new("RMW_DIR_TP_P2_HOLD", "RO/V", 1, 11, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[11:11]"});
    RMW_DIR_TP_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_DIR_TP_P2_HOLD.set_rand_mode(0);
   RMW_DIR_TP_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_TP_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_TP_P2_HOLD ));

    RMW_DIR_TP_P3_HOLD = new("RMW_DIR_TP_P3_HOLD", "RO/V", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[12:12]"});
    RMW_DIR_TP_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_DIR_TP_P3_HOLD.set_rand_mode(0);
   RMW_DIR_TP_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_TP_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_TP_P3_HOLD ));

    RMW_DIR_TP_P0_V_F = new("RMW_DIR_TP_P0_V_F", "RO/V", 1, 13, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[13:13]"});
    RMW_DIR_TP_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_TP_P0_V_F.set_rand_mode(0);
   RMW_DIR_TP_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_TP_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_TP_P0_V_F ));

    RMW_DIR_TP_P1_V_F = new("RMW_DIR_TP_P1_V_F", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[14:14]"});
    RMW_DIR_TP_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_TP_P1_V_F.set_rand_mode(0);
   RMW_DIR_TP_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_TP_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_TP_P1_V_F ));

    RMW_DIR_TP_P2_V_F = new("RMW_DIR_TP_P2_V_F", "RO/V", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[15:15]"});
    RMW_DIR_TP_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_TP_P2_V_F.set_rand_mode(0);
   RMW_DIR_TP_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_TP_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_TP_P2_V_F ));

    RMW_DIR_TP_P3_V_F = new("RMW_DIR_TP_P3_V_F", "RO/V", 1, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[16:16]"});
    RMW_DIR_TP_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_TP_P3_V_F.set_rand_mode(0);
   RMW_DIR_TP_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_TP_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_TP_P3_V_F ));

    RMW_DIR_HP_P1_HOLD = new("RMW_DIR_HP_P1_HOLD", "RO/V", 1, 17, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[17:17]"});
    RMW_DIR_HP_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_DIR_HP_P1_HOLD.set_rand_mode(0);
   RMW_DIR_HP_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_HP_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_HP_P1_HOLD ));

    RMW_DIR_HP_P2_HOLD = new("RMW_DIR_HP_P2_HOLD", "RO/V", 1, 18, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[18:18]"});
    RMW_DIR_HP_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_DIR_HP_P2_HOLD.set_rand_mode(0);
   RMW_DIR_HP_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_HP_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_HP_P2_HOLD ));

    RMW_DIR_HP_P3_HOLD = new("RMW_DIR_HP_P3_HOLD", "RO/V", 1, 19, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[19:19]"});
    RMW_DIR_HP_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_DIR_HP_P3_HOLD.set_rand_mode(0);
   RMW_DIR_HP_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_HP_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_HP_P3_HOLD ));

    RMW_DIR_HP_P0_V_F = new("RMW_DIR_HP_P0_V_F", "RO/V", 1, 20, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[20:20]"});
    RMW_DIR_HP_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_HP_P0_V_F.set_rand_mode(0);
   RMW_DIR_HP_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_HP_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_HP_P0_V_F ));

    RMW_DIR_HP_P1_V_F = new("RMW_DIR_HP_P1_V_F", "RO/V", 1, 21, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[21:21]"});
    RMW_DIR_HP_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_HP_P1_V_F.set_rand_mode(0);
   RMW_DIR_HP_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_HP_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_HP_P1_V_F ));

    RMW_DIR_HP_P2_V_F = new("RMW_DIR_HP_P2_V_F", "RO/V", 1, 22, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[22:22]"});
    RMW_DIR_HP_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_HP_P2_V_F.set_rand_mode(0);
   RMW_DIR_HP_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_HP_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_HP_P2_V_F ));

    RMW_DIR_HP_P3_V_F = new("RMW_DIR_HP_P3_V_F", "RO/V", 1, 23, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[23:23]"});
    RMW_DIR_HP_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_HP_P3_V_F.set_rand_mode(0);
   RMW_DIR_HP_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_HP_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_HP_P3_V_F ));

    RMW_DIR_CNT_P1_HOLD = new("RMW_DIR_CNT_P1_HOLD", "RO/V", 1, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[24:24]"});
    RMW_DIR_CNT_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_DIR_CNT_P1_HOLD.set_rand_mode(0);
   RMW_DIR_CNT_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_CNT_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_CNT_P1_HOLD ));

    RMW_DIR_CNT_P2_HOLD = new("RMW_DIR_CNT_P2_HOLD", "RO/V", 1, 25, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[25:25]"});
    RMW_DIR_CNT_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_DIR_CNT_P2_HOLD.set_rand_mode(0);
   RMW_DIR_CNT_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_CNT_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_CNT_P2_HOLD ));

    RMW_DIR_CNT_P3_HOLD = new("RMW_DIR_CNT_P3_HOLD", "RO/V", 1, 26, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[26:26]"});
    RMW_DIR_CNT_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_DIR_CNT_P3_HOLD.set_rand_mode(0);
   RMW_DIR_CNT_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_CNT_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_CNT_P3_HOLD ));

    RMW_DIR_CNT_P0_V_F = new("RMW_DIR_CNT_P0_V_F", "RO/V", 1, 27, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[27:27]"});
    RMW_DIR_CNT_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_CNT_P0_V_F.set_rand_mode(0);
   RMW_DIR_CNT_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_CNT_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_CNT_P0_V_F ));

    RMW_DIR_CNT_P1_V_F = new("RMW_DIR_CNT_P1_V_F", "RO/V", 1, 28, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[28:28]"});
    RMW_DIR_CNT_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_CNT_P1_V_F.set_rand_mode(0);
   RMW_DIR_CNT_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_CNT_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_CNT_P1_V_F ));

    RMW_DIR_CNT_P2_V_F = new("RMW_DIR_CNT_P2_V_F", "RO/V", 1, 29, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[29:29]"});
    RMW_DIR_CNT_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_CNT_P2_V_F.set_rand_mode(0);
   RMW_DIR_CNT_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_CNT_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_CNT_P2_V_F ));

    RMW_DIR_CNT_P3_V_F = new("RMW_DIR_CNT_P3_V_F", "RO/V", 1, 30, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[30:30]"});
    RMW_DIR_CNT_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_DIR_CNT_P3_V_F.set_rand_mode(0);
   RMW_DIR_CNT_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_DIR_CNT_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_DIR_CNT_P3_V_F ));

    RW_NXTHP_P1_HOLD = new("RW_NXTHP_P1_HOLD", "RO/V", 1, 31, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[31:31]"});
    RW_NXTHP_P1_HOLD.set_powerwell("vcccfn_gated");
    RW_NXTHP_P1_HOLD.set_rand_mode(0);
   RW_NXTHP_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RW_NXTHP_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RW_NXTHP_P1_HOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg) 
endclass : hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RMW_REPLAY_TP_P1_HOLD;
  sla_ral_field RMW_REPLAY_TP_P2_HOLD;
  sla_ral_field RMW_REPLAY_TP_P3_HOLD;
  sla_ral_field RMW_REPLAY_TP_P0_V_F;
  sla_ral_field RMW_REPLAY_TP_P1_V_F;
  sla_ral_field RMW_REPLAY_TP_P2_V_F;
  sla_ral_field RMW_REPLAY_TP_P3_V_F;
  sla_ral_field RMW_REPLAY_HP_P1_HOLD;
  sla_ral_field RMW_REPLAY_HP_P2_HOLD;
  sla_ral_field RMW_REPLAY_HP_P3_HOLD;
  sla_ral_field RMW_REPLAY_HP_P0_V_F;
  sla_ral_field RMW_REPLAY_HP_P1_V_F;
  sla_ral_field RMW_REPLAY_HP_P2_V_F;
  sla_ral_field RMW_REPLAY_HP_P3_V_F;
  sla_ral_field RMW_REPLAY_CNT_P1_HOLD;
  sla_ral_field RMW_REPLAY_CNT_P2_HOLD;
  sla_ral_field RMW_REPLAY_CNT_P3_HOLD;
  sla_ral_field RMW_REPLAY_CNT_P0_V_F;
  sla_ral_field RMW_REPLAY_CNT_P1_V_F;
  sla_ral_field RMW_REPLAY_CNT_P2_V_F;
  sla_ral_field RMW_REPLAY_CNT_P3_V_F;
  sla_ral_field RMW_ROFRAG_TP_P1_HOLD;
  sla_ral_field RMW_ROFRAG_TP_P2_HOLD;
  sla_ral_field RMW_ROFRAG_TP_P3_HOLD;
  sla_ral_field RMW_ROFRAG_TP_P0_V_F;
  sla_ral_field RMW_ROFRAG_TP_P1_V_F;
  sla_ral_field RMW_ROFRAG_TP_P2_V_F;
  sla_ral_field RMW_ROFRAG_TP_P3_V_F;
  sla_ral_field RMW_ROFRAG_HP_P1_HOLD;
  sla_ral_field RMW_ROFRAG_HP_P2_HOLD;
  sla_ral_field RMW_ROFRAG_HP_P3_HOLD;
  sla_ral_field RMW_ROFRAG_HP_P0_V_F;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RMW_REPLAY_TP_P1_HOLD, RMW_REPLAY_TP_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P1_HOLD, RMW_REPLAY_TP_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P2_HOLD, RMW_REPLAY_TP_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P2_HOLD, RMW_REPLAY_TP_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P3_HOLD, RMW_REPLAY_TP_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P3_HOLD, RMW_REPLAY_TP_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P0_V_F, RMW_REPLAY_TP_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P0_V_F, RMW_REPLAY_TP_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P1_V_F, RMW_REPLAY_TP_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P1_V_F, RMW_REPLAY_TP_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P2_V_F, RMW_REPLAY_TP_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P2_V_F, RMW_REPLAY_TP_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P3_V_F, RMW_REPLAY_TP_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P3_V_F, RMW_REPLAY_TP_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P1_HOLD, RMW_REPLAY_HP_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P1_HOLD, RMW_REPLAY_HP_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P2_HOLD, RMW_REPLAY_HP_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P2_HOLD, RMW_REPLAY_HP_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P3_HOLD, RMW_REPLAY_HP_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P3_HOLD, RMW_REPLAY_HP_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P0_V_F, RMW_REPLAY_HP_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P0_V_F, RMW_REPLAY_HP_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P1_V_F, RMW_REPLAY_HP_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P1_V_F, RMW_REPLAY_HP_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P2_V_F, RMW_REPLAY_HP_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P2_V_F, RMW_REPLAY_HP_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P3_V_F, RMW_REPLAY_HP_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P3_V_F, RMW_REPLAY_HP_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P1_HOLD, RMW_REPLAY_CNT_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P1_HOLD, RMW_REPLAY_CNT_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P2_HOLD, RMW_REPLAY_CNT_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P2_HOLD, RMW_REPLAY_CNT_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P3_HOLD, RMW_REPLAY_CNT_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P3_HOLD, RMW_REPLAY_CNT_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P0_V_F, RMW_REPLAY_CNT_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P0_V_F, RMW_REPLAY_CNT_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P1_V_F, RMW_REPLAY_CNT_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P1_V_F, RMW_REPLAY_CNT_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P2_V_F, RMW_REPLAY_CNT_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P2_V_F, RMW_REPLAY_CNT_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P3_V_F, RMW_REPLAY_CNT_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P3_V_F, RMW_REPLAY_CNT_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P1_HOLD, RMW_ROFRAG_TP_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P1_HOLD, RMW_ROFRAG_TP_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P2_HOLD, RMW_ROFRAG_TP_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P2_HOLD, RMW_ROFRAG_TP_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P3_HOLD, RMW_ROFRAG_TP_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P3_HOLD, RMW_ROFRAG_TP_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P0_V_F, RMW_ROFRAG_TP_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P0_V_F, RMW_ROFRAG_TP_P0_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P1_V_F, RMW_ROFRAG_TP_P1_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P1_V_F, RMW_ROFRAG_TP_P1_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P2_V_F, RMW_ROFRAG_TP_P2_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P2_V_F, RMW_ROFRAG_TP_P2_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P3_V_F, RMW_ROFRAG_TP_P3_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P3_V_F, RMW_ROFRAG_TP_P3_V_F.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P1_HOLD, RMW_ROFRAG_HP_P1_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P1_HOLD, RMW_ROFRAG_HP_P1_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P2_HOLD, RMW_ROFRAG_HP_P2_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P2_HOLD, RMW_ROFRAG_HP_P2_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P3_HOLD, RMW_ROFRAG_HP_P3_HOLD.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P3_HOLD, RMW_ROFRAG_HP_P3_HOLD.desired, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P0_V_F, RMW_ROFRAG_HP_P0_V_F.desired)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P0_V_F, RMW_ROFRAG_HP_P0_V_F.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RMW_REPLAY_TP_P1_HOLD, RMW_REPLAY_TP_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P1_HOLD, RMW_REPLAY_TP_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P2_HOLD, RMW_REPLAY_TP_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P2_HOLD, RMW_REPLAY_TP_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P3_HOLD, RMW_REPLAY_TP_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P3_HOLD, RMW_REPLAY_TP_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P0_V_F, RMW_REPLAY_TP_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P0_V_F, RMW_REPLAY_TP_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P1_V_F, RMW_REPLAY_TP_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P1_V_F, RMW_REPLAY_TP_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P2_V_F, RMW_REPLAY_TP_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P2_V_F, RMW_REPLAY_TP_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_TP_P3_V_F, RMW_REPLAY_TP_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_TP_P3_V_F, RMW_REPLAY_TP_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P1_HOLD, RMW_REPLAY_HP_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P1_HOLD, RMW_REPLAY_HP_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P2_HOLD, RMW_REPLAY_HP_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P2_HOLD, RMW_REPLAY_HP_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P3_HOLD, RMW_REPLAY_HP_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P3_HOLD, RMW_REPLAY_HP_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P0_V_F, RMW_REPLAY_HP_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P0_V_F, RMW_REPLAY_HP_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P1_V_F, RMW_REPLAY_HP_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P1_V_F, RMW_REPLAY_HP_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P2_V_F, RMW_REPLAY_HP_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P2_V_F, RMW_REPLAY_HP_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_HP_P3_V_F, RMW_REPLAY_HP_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_HP_P3_V_F, RMW_REPLAY_HP_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P1_HOLD, RMW_REPLAY_CNT_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P1_HOLD, RMW_REPLAY_CNT_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P2_HOLD, RMW_REPLAY_CNT_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P2_HOLD, RMW_REPLAY_CNT_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P3_HOLD, RMW_REPLAY_CNT_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P3_HOLD, RMW_REPLAY_CNT_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P0_V_F, RMW_REPLAY_CNT_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P0_V_F, RMW_REPLAY_CNT_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P1_V_F, RMW_REPLAY_CNT_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P1_V_F, RMW_REPLAY_CNT_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P2_V_F, RMW_REPLAY_CNT_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P2_V_F, RMW_REPLAY_CNT_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_REPLAY_CNT_P3_V_F, RMW_REPLAY_CNT_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_REPLAY_CNT_P3_V_F, RMW_REPLAY_CNT_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P1_HOLD, RMW_ROFRAG_TP_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P1_HOLD, RMW_ROFRAG_TP_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P2_HOLD, RMW_ROFRAG_TP_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P2_HOLD, RMW_ROFRAG_TP_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P3_HOLD, RMW_ROFRAG_TP_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P3_HOLD, RMW_ROFRAG_TP_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P0_V_F, RMW_ROFRAG_TP_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P0_V_F, RMW_ROFRAG_TP_P0_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P1_V_F, RMW_ROFRAG_TP_P1_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P1_V_F, RMW_ROFRAG_TP_P1_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P2_V_F, RMW_ROFRAG_TP_P2_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P2_V_F, RMW_ROFRAG_TP_P2_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_TP_P3_V_F, RMW_ROFRAG_TP_P3_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_TP_P3_V_F, RMW_ROFRAG_TP_P3_V_F.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P1_HOLD, RMW_ROFRAG_HP_P1_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P1_HOLD, RMW_ROFRAG_HP_P1_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P2_HOLD, RMW_ROFRAG_HP_P2_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P2_HOLD, RMW_ROFRAG_HP_P2_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P3_HOLD, RMW_ROFRAG_HP_P3_HOLD.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P3_HOLD, RMW_ROFRAG_HP_P3_HOLD.actual, 0)
     `RAL_FIELD_CP(RMW_ROFRAG_HP_P0_V_F, RMW_ROFRAG_HP_P0_V_F.actual)
     `RAL_FIELD_CP_1(RMW_ROFRAG_HP_P0_V_F, RMW_ROFRAG_HP_P0_V_F.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RMW_REPLAY_TP_P1_HOLD = new("RMW_REPLAY_TP_P1_HOLD", "RO/V", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[0:0]"});
    RMW_REPLAY_TP_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_REPLAY_TP_P1_HOLD.set_rand_mode(0);
   RMW_REPLAY_TP_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_TP_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_TP_P1_HOLD ));

    RMW_REPLAY_TP_P2_HOLD = new("RMW_REPLAY_TP_P2_HOLD", "RO/V", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[1:1]"});
    RMW_REPLAY_TP_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_REPLAY_TP_P2_HOLD.set_rand_mode(0);
   RMW_REPLAY_TP_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_TP_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_TP_P2_HOLD ));

    RMW_REPLAY_TP_P3_HOLD = new("RMW_REPLAY_TP_P3_HOLD", "RO/V", 1, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[2:2]"});
    RMW_REPLAY_TP_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_REPLAY_TP_P3_HOLD.set_rand_mode(0);
   RMW_REPLAY_TP_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_TP_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_TP_P3_HOLD ));

    RMW_REPLAY_TP_P0_V_F = new("RMW_REPLAY_TP_P0_V_F", "RO/V", 1, 3, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[3:3]"});
    RMW_REPLAY_TP_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_TP_P0_V_F.set_rand_mode(0);
   RMW_REPLAY_TP_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_TP_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_TP_P0_V_F ));

    RMW_REPLAY_TP_P1_V_F = new("RMW_REPLAY_TP_P1_V_F", "RO/V", 1, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[4:4]"});
    RMW_REPLAY_TP_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_TP_P1_V_F.set_rand_mode(0);
   RMW_REPLAY_TP_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_TP_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_TP_P1_V_F ));

    RMW_REPLAY_TP_P2_V_F = new("RMW_REPLAY_TP_P2_V_F", "RO/V", 1, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[5:5]"});
    RMW_REPLAY_TP_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_TP_P2_V_F.set_rand_mode(0);
   RMW_REPLAY_TP_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_TP_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_TP_P2_V_F ));

    RMW_REPLAY_TP_P3_V_F = new("RMW_REPLAY_TP_P3_V_F", "RO/V", 1, 6, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[6:6]"});
    RMW_REPLAY_TP_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_TP_P3_V_F.set_rand_mode(0);
   RMW_REPLAY_TP_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_TP_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_TP_P3_V_F ));

    RMW_REPLAY_HP_P1_HOLD = new("RMW_REPLAY_HP_P1_HOLD", "RO/V", 1, 7, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[7:7]"});
    RMW_REPLAY_HP_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_REPLAY_HP_P1_HOLD.set_rand_mode(0);
   RMW_REPLAY_HP_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_HP_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_HP_P1_HOLD ));

    RMW_REPLAY_HP_P2_HOLD = new("RMW_REPLAY_HP_P2_HOLD", "RO/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[8:8]"});
    RMW_REPLAY_HP_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_REPLAY_HP_P2_HOLD.set_rand_mode(0);
   RMW_REPLAY_HP_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_HP_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_HP_P2_HOLD ));

    RMW_REPLAY_HP_P3_HOLD = new("RMW_REPLAY_HP_P3_HOLD", "RO/V", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[9:9]"});
    RMW_REPLAY_HP_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_REPLAY_HP_P3_HOLD.set_rand_mode(0);
   RMW_REPLAY_HP_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_HP_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_HP_P3_HOLD ));

    RMW_REPLAY_HP_P0_V_F = new("RMW_REPLAY_HP_P0_V_F", "RO/V", 1, 10, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[10:10]"});
    RMW_REPLAY_HP_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_HP_P0_V_F.set_rand_mode(0);
   RMW_REPLAY_HP_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_HP_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_HP_P0_V_F ));

    RMW_REPLAY_HP_P1_V_F = new("RMW_REPLAY_HP_P1_V_F", "RO/V", 1, 11, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[11:11]"});
    RMW_REPLAY_HP_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_HP_P1_V_F.set_rand_mode(0);
   RMW_REPLAY_HP_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_HP_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_HP_P1_V_F ));

    RMW_REPLAY_HP_P2_V_F = new("RMW_REPLAY_HP_P2_V_F", "RO/V", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[12:12]"});
    RMW_REPLAY_HP_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_HP_P2_V_F.set_rand_mode(0);
   RMW_REPLAY_HP_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_HP_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_HP_P2_V_F ));

    RMW_REPLAY_HP_P3_V_F = new("RMW_REPLAY_HP_P3_V_F", "RO/V", 1, 13, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[13:13]"});
    RMW_REPLAY_HP_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_HP_P3_V_F.set_rand_mode(0);
   RMW_REPLAY_HP_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_HP_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_HP_P3_V_F ));

    RMW_REPLAY_CNT_P1_HOLD = new("RMW_REPLAY_CNT_P1_HOLD", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[14:14]"});
    RMW_REPLAY_CNT_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_REPLAY_CNT_P1_HOLD.set_rand_mode(0);
   RMW_REPLAY_CNT_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_CNT_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_CNT_P1_HOLD ));

    RMW_REPLAY_CNT_P2_HOLD = new("RMW_REPLAY_CNT_P2_HOLD", "RO/V", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[15:15]"});
    RMW_REPLAY_CNT_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_REPLAY_CNT_P2_HOLD.set_rand_mode(0);
   RMW_REPLAY_CNT_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_CNT_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_CNT_P2_HOLD ));

    RMW_REPLAY_CNT_P3_HOLD = new("RMW_REPLAY_CNT_P3_HOLD", "RO/V", 1, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[16:16]"});
    RMW_REPLAY_CNT_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_REPLAY_CNT_P3_HOLD.set_rand_mode(0);
   RMW_REPLAY_CNT_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_CNT_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_CNT_P3_HOLD ));

    RMW_REPLAY_CNT_P0_V_F = new("RMW_REPLAY_CNT_P0_V_F", "RO/V", 1, 17, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[17:17]"});
    RMW_REPLAY_CNT_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_CNT_P0_V_F.set_rand_mode(0);
   RMW_REPLAY_CNT_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_CNT_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_CNT_P0_V_F ));

    RMW_REPLAY_CNT_P1_V_F = new("RMW_REPLAY_CNT_P1_V_F", "RO/V", 1, 18, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[18:18]"});
    RMW_REPLAY_CNT_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_CNT_P1_V_F.set_rand_mode(0);
   RMW_REPLAY_CNT_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_CNT_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_CNT_P1_V_F ));

    RMW_REPLAY_CNT_P2_V_F = new("RMW_REPLAY_CNT_P2_V_F", "RO/V", 1, 19, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[19:19]"});
    RMW_REPLAY_CNT_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_CNT_P2_V_F.set_rand_mode(0);
   RMW_REPLAY_CNT_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_CNT_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_CNT_P2_V_F ));

    RMW_REPLAY_CNT_P3_V_F = new("RMW_REPLAY_CNT_P3_V_F", "RO/V", 1, 20, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[20:20]"});
    RMW_REPLAY_CNT_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_REPLAY_CNT_P3_V_F.set_rand_mode(0);
   RMW_REPLAY_CNT_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_REPLAY_CNT_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_REPLAY_CNT_P3_V_F ));

    RMW_ROFRAG_TP_P1_HOLD = new("RMW_ROFRAG_TP_P1_HOLD", "RO/V", 1, 21, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[21:21]"});
    RMW_ROFRAG_TP_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_TP_P1_HOLD.set_rand_mode(0);
   RMW_ROFRAG_TP_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_TP_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_TP_P1_HOLD ));

    RMW_ROFRAG_TP_P2_HOLD = new("RMW_ROFRAG_TP_P2_HOLD", "RO/V", 1, 22, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[22:22]"});
    RMW_ROFRAG_TP_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_TP_P2_HOLD.set_rand_mode(0);
   RMW_ROFRAG_TP_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_TP_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_TP_P2_HOLD ));

    RMW_ROFRAG_TP_P3_HOLD = new("RMW_ROFRAG_TP_P3_HOLD", "RO/V", 1, 23, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[23:23]"});
    RMW_ROFRAG_TP_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_TP_P3_HOLD.set_rand_mode(0);
   RMW_ROFRAG_TP_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_TP_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_TP_P3_HOLD ));

    RMW_ROFRAG_TP_P0_V_F = new("RMW_ROFRAG_TP_P0_V_F", "RO/V", 1, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[24:24]"});
    RMW_ROFRAG_TP_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_TP_P0_V_F.set_rand_mode(0);
   RMW_ROFRAG_TP_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_TP_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_TP_P0_V_F ));

    RMW_ROFRAG_TP_P1_V_F = new("RMW_ROFRAG_TP_P1_V_F", "RO/V", 1, 25, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[25:25]"});
    RMW_ROFRAG_TP_P1_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_TP_P1_V_F.set_rand_mode(0);
   RMW_ROFRAG_TP_P1_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_TP_P1_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_TP_P1_V_F ));

    RMW_ROFRAG_TP_P2_V_F = new("RMW_ROFRAG_TP_P2_V_F", "RO/V", 1, 26, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[26:26]"});
    RMW_ROFRAG_TP_P2_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_TP_P2_V_F.set_rand_mode(0);
   RMW_ROFRAG_TP_P2_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_TP_P2_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_TP_P2_V_F ));

    RMW_ROFRAG_TP_P3_V_F = new("RMW_ROFRAG_TP_P3_V_F", "RO/V", 1, 27, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[27:27]"});
    RMW_ROFRAG_TP_P3_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_TP_P3_V_F.set_rand_mode(0);
   RMW_ROFRAG_TP_P3_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_TP_P3_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_TP_P3_V_F ));

    RMW_ROFRAG_HP_P1_HOLD = new("RMW_ROFRAG_HP_P1_HOLD", "RO/V", 1, 28, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[28:28]"});
    RMW_ROFRAG_HP_P1_HOLD.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_HP_P1_HOLD.set_rand_mode(0);
   RMW_ROFRAG_HP_P1_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_HP_P1_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_HP_P1_HOLD ));

    RMW_ROFRAG_HP_P2_HOLD = new("RMW_ROFRAG_HP_P2_HOLD", "RO/V", 1, 29, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[29:29]"});
    RMW_ROFRAG_HP_P2_HOLD.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_HP_P2_HOLD.set_rand_mode(0);
   RMW_ROFRAG_HP_P2_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_HP_P2_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_HP_P2_HOLD ));

    RMW_ROFRAG_HP_P3_HOLD = new("RMW_ROFRAG_HP_P3_HOLD", "RO/V", 1, 30, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[30:30]"});
    RMW_ROFRAG_HP_P3_HOLD.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_HP_P3_HOLD.set_rand_mode(0);
   RMW_ROFRAG_HP_P3_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_HP_P3_HOLD.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_HP_P3_HOLD ));

    RMW_ROFRAG_HP_P0_V_F = new("RMW_ROFRAG_HP_P0_V_F", "RO/V", 1, 31, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[31:31]"});
    RMW_ROFRAG_HP_P0_V_F.set_powerwell("vcccfn_gated");
    RMW_ROFRAG_HP_P0_V_F.set_rand_mode(0);
   RMW_ROFRAG_HP_P0_V_F.set_reset_signame("hqm_inp_gated_rst_n");
    RMW_ROFRAG_HP_P0_V_F.set_logical_path("HQMID");
    void'(add_field( RMW_ROFRAG_HP_P0_V_F ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg) 
endclass : hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_ERROR_INJECT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ROP_DP_0;
  sla_ral_field LSP_DP_0;
  sla_ral_field LSP_DP_1;
  sla_ral_field ROP_DP_1;
  sla_ral_field ROP_DP_2;
  sla_ral_field ROP_DP_3;
  sla_ral_field ROP_DP_4;
  sla_ral_field ROP_DP_5;
  sla_ral_field LSP_DP_2;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_ERROR_INJECT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ROP_DP_0, ROP_DP_0.desired)
     `RAL_FIELD_CP_1(ROP_DP_0, ROP_DP_0.desired, 0)
     `RAL_FIELD_CP(LSP_DP_0, LSP_DP_0.desired)
     `RAL_FIELD_CP_1(LSP_DP_0, LSP_DP_0.desired, 0)
     `RAL_FIELD_CP(LSP_DP_1, LSP_DP_1.desired)
     `RAL_FIELD_CP_1(LSP_DP_1, LSP_DP_1.desired, 0)
     `RAL_FIELD_CP(ROP_DP_1, ROP_DP_1.desired)
     `RAL_FIELD_CP_1(ROP_DP_1, ROP_DP_1.desired, 0)
     `RAL_FIELD_CP(ROP_DP_2, ROP_DP_2.desired)
     `RAL_FIELD_CP_1(ROP_DP_2, ROP_DP_2.desired, 0)
     `RAL_FIELD_CP(ROP_DP_3, ROP_DP_3.desired)
     `RAL_FIELD_CP_1(ROP_DP_3, ROP_DP_3.desired, 0)
     `RAL_FIELD_CP(ROP_DP_4, ROP_DP_4.desired)
     `RAL_FIELD_CP_1(ROP_DP_4, ROP_DP_4.desired, 0)
     `RAL_FIELD_CP(ROP_DP_5, ROP_DP_5.desired)
     `RAL_FIELD_CP_1(ROP_DP_5, ROP_DP_5.desired, 0)
     `RAL_FIELD_CP(LSP_DP_2, LSP_DP_2.desired)
     `RAL_FIELD_CP_1(LSP_DP_2, LSP_DP_2.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_7(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ROP_DP_0, ROP_DP_0.actual)
     `RAL_FIELD_CP_1(ROP_DP_0, ROP_DP_0.actual, 0)
     `RAL_FIELD_CP(LSP_DP_0, LSP_DP_0.actual)
     `RAL_FIELD_CP_1(LSP_DP_0, LSP_DP_0.actual, 0)
     `RAL_FIELD_CP(LSP_DP_1, LSP_DP_1.actual)
     `RAL_FIELD_CP_1(LSP_DP_1, LSP_DP_1.actual, 0)
     `RAL_FIELD_CP(ROP_DP_1, ROP_DP_1.actual)
     `RAL_FIELD_CP_1(ROP_DP_1, ROP_DP_1.actual, 0)
     `RAL_FIELD_CP(ROP_DP_2, ROP_DP_2.actual)
     `RAL_FIELD_CP_1(ROP_DP_2, ROP_DP_2.actual, 0)
     `RAL_FIELD_CP(ROP_DP_3, ROP_DP_3.actual)
     `RAL_FIELD_CP_1(ROP_DP_3, ROP_DP_3.actual, 0)
     `RAL_FIELD_CP(ROP_DP_4, ROP_DP_4.actual)
     `RAL_FIELD_CP_1(ROP_DP_4, ROP_DP_4.actual, 0)
     `RAL_FIELD_CP(ROP_DP_5, ROP_DP_5.actual)
     `RAL_FIELD_CP_1(ROP_DP_5, ROP_DP_5.actual, 0)
     `RAL_FIELD_CP(LSP_DP_2, LSP_DP_2.actual)
     `RAL_FIELD_CP_1(LSP_DP_2, LSP_DP_2.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_7(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ROP_DP_0 = new("ROP_DP_0", "RW", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[0:0]"});
    ROP_DP_0.set_powerwell("vcccfn_gated");
    ROP_DP_0.set_rand_mode(0);
   ROP_DP_0.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_DP_0.set_logical_path("HQMID");
    void'(add_field( ROP_DP_0 ));

    LSP_DP_0 = new("LSP_DP_0", "RW", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[1:1]"});
    LSP_DP_0.set_powerwell("vcccfn_gated");
    LSP_DP_0.set_rand_mode(0);
   LSP_DP_0.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_DP_0.set_logical_path("HQMID");
    void'(add_field( LSP_DP_0 ));

    LSP_DP_1 = new("LSP_DP_1", "RW", 1, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[2:2]"});
    LSP_DP_1.set_powerwell("vcccfn_gated");
    LSP_DP_1.set_rand_mode(0);
   LSP_DP_1.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_DP_1.set_logical_path("HQMID");
    void'(add_field( LSP_DP_1 ));

    ROP_DP_1 = new("ROP_DP_1", "RW", 1, 3, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[3:3]"});
    ROP_DP_1.set_powerwell("vcccfn_gated");
    ROP_DP_1.set_rand_mode(0);
   ROP_DP_1.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_DP_1.set_logical_path("HQMID");
    void'(add_field( ROP_DP_1 ));

    ROP_DP_2 = new("ROP_DP_2", "RW", 1, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[4:4]"});
    ROP_DP_2.set_powerwell("vcccfn_gated");
    ROP_DP_2.set_rand_mode(0);
   ROP_DP_2.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_DP_2.set_logical_path("HQMID");
    void'(add_field( ROP_DP_2 ));

    ROP_DP_3 = new("ROP_DP_3", "RW", 1, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[5:5]"});
    ROP_DP_3.set_powerwell("vcccfn_gated");
    ROP_DP_3.set_rand_mode(0);
   ROP_DP_3.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_DP_3.set_logical_path("HQMID");
    void'(add_field( ROP_DP_3 ));

    ROP_DP_4 = new("ROP_DP_4", "RW", 1, 6, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[6:6]"});
    ROP_DP_4.set_powerwell("vcccfn_gated");
    ROP_DP_4.set_rand_mode(0);
   ROP_DP_4.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_DP_4.set_logical_path("HQMID");
    void'(add_field( ROP_DP_4 ));

    ROP_DP_5 = new("ROP_DP_5", "RW", 1, 7, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[7:7]"});
    ROP_DP_5.set_powerwell("vcccfn_gated");
    ROP_DP_5.set_rand_mode(0);
   ROP_DP_5.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_DP_5.set_logical_path("HQMID");
    void'(add_field( ROP_DP_5 ));

    LSP_DP_2 = new("LSP_DP_2", "RW", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[8:8]"});
    LSP_DP_2.set_powerwell("vcccfn_gated");
    LSP_DP_2.set_rand_mode(0);
   LSP_DP_2.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_DP_2.set_logical_path("HQMID");
    void'(add_field( LSP_DP_2 ));

    RSVZ0 = new("RSVZ0", "RW", 23, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[31:9]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_ERROR_INJECT_reg) 
endclass : hqm_dir_pipe_bridge_CFG_ERROR_INJECT_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_DQED_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_DQED_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_DQED_IF_reg) 
endclass : hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_DQED_IF_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF_reg) 
endclass : hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF_reg) 
endclass : hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF_reg) 
endclass : hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF_reg) 
endclass : hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF_reg) 
endclass : hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FIFO_HWM;
  sla_ral_field FIFO_UNDERFLOW;
  sla_ral_field FIFO_OVERFLOW;
  sla_ral_field FIFO_EMPTY;
  sla_ral_field FIFO_AFULL;
  sla_ral_field FIFO_FULL;
  sla_ral_field FIFO_DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.desired)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.desired)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.desired, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.desired)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.desired, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.desired)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.desired, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.desired)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.desired, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.desired)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FIFO_HWM, FIFO_HWM.actual)
     `RAL_FIELD_CP_8(FIFO_HWM, FIFO_HWM.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_UNDERFLOW, FIFO_UNDERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_OVERFLOW, FIFO_OVERFLOW.actual)
     `RAL_FIELD_CP_1(FIFO_OVERFLOW, FIFO_OVERFLOW.actual, 0)
     `RAL_FIELD_CP(FIFO_EMPTY, FIFO_EMPTY.actual)
     `RAL_FIELD_CP_1(FIFO_EMPTY, FIFO_EMPTY.actual, 0)
     `RAL_FIELD_CP(FIFO_AFULL, FIFO_AFULL.actual)
     `RAL_FIELD_CP_1(FIFO_AFULL, FIFO_AFULL.actual, 0)
     `RAL_FIELD_CP(FIFO_FULL, FIFO_FULL.actual)
     `RAL_FIELD_CP_1(FIFO_FULL, FIFO_FULL.actual, 0)
     `RAL_FIELD_CP(FIFO_DEPTH, FIFO_DEPTH.actual)
     `RAL_FIELD_CP_16(FIFO_DEPTH, FIFO_DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FIFO_HWM = new("FIFO_HWM", "RW", 8, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[7:0]"});
    FIFO_HWM.set_powerwell("vcccfn_gated");
    FIFO_HWM.set_rand_mode(0);
   FIFO_HWM.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_HWM.set_logical_path("HQMID");
    void'(add_field( FIFO_HWM ));

    FIFO_UNDERFLOW = new("FIFO_UNDERFLOW", "RO/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[8:8]"});
    FIFO_UNDERFLOW.set_powerwell("vcccfn_gated");
    FIFO_UNDERFLOW.set_rand_mode(0);
   FIFO_UNDERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_UNDERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_UNDERFLOW ));

    FIFO_OVERFLOW = new("FIFO_OVERFLOW", "RO/V", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[9:9]"});
    FIFO_OVERFLOW.set_powerwell("vcccfn_gated");
    FIFO_OVERFLOW.set_rand_mode(0);
   FIFO_OVERFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_OVERFLOW.set_logical_path("HQMID");
    void'(add_field( FIFO_OVERFLOW ));

    FIFO_EMPTY = new("FIFO_EMPTY", "RO/V", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[12:12]"});
    FIFO_EMPTY.set_powerwell("vcccfn_gated");
    FIFO_EMPTY.set_rand_mode(0);
   FIFO_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_EMPTY.set_logical_path("HQMID");
    void'(add_field( FIFO_EMPTY ));

    FIFO_AFULL = new("FIFO_AFULL", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[14:14]"});
    FIFO_AFULL.set_powerwell("vcccfn_gated");
    FIFO_AFULL.set_rand_mode(0);
   FIFO_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_AFULL.set_logical_path("HQMID");
    void'(add_field( FIFO_AFULL ));

    FIFO_FULL = new("FIFO_FULL", "RO/V", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[15:15]"});
    FIFO_FULL.set_powerwell("vcccfn_gated");
    FIFO_FULL.set_rand_mode(0);
   FIFO_FULL.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_FULL.set_logical_path("HQMID");
    void'(add_field( FIFO_FULL ));

    FIFO_DEPTH = new("FIFO_DEPTH", "RO/V", 16, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[31:16]"});
    FIFO_DEPTH.set_powerwell("vcccfn_gated");
    FIFO_DEPTH.set_rand_mode(0);
   FIFO_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    FIFO_DEPTH.set_logical_path("HQMID");
    void'(add_field( FIFO_DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF_reg) 
endclass : hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field DUTY;
  sla_ral_field PERIOD;
  sla_ral_field PROB1ST;
  sla_ral_field PROB2ND;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(DUTY, DUTY.desired)
     `RAL_FIELD_CP_3(DUTY, DUTY.desired, 0,1,2)
     `RAL_FIELD_CP(PERIOD, PERIOD.desired)
     `RAL_FIELD_CP_11(PERIOD, PERIOD.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(PROB1ST, PROB1ST.desired)
     `RAL_FIELD_CP_8(PROB1ST, PROB1ST.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PROB2ND, PROB2ND.desired)
     `RAL_FIELD_CP_8(PROB2ND, PROB2ND.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(DUTY, DUTY.actual)
     `RAL_FIELD_CP_3(DUTY, DUTY.actual, 0,1,2)
     `RAL_FIELD_CP(PERIOD, PERIOD.actual)
     `RAL_FIELD_CP_11(PERIOD, PERIOD.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(PROB1ST, PROB1ST.actual)
     `RAL_FIELD_CP_8(PROB1ST, PROB1ST.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PROB2ND, PROB2ND.actual)
     `RAL_FIELD_CP_8(PROB2ND, PROB2ND.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_control.internal_f[1:0]"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    DUTY = new("DUTY", "RW", 3, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_control.internal_f[4:2]"});
    DUTY.set_powerwell("vcccfn_gated");
    DUTY.set_rand_mode(0);
   DUTY.set_reset_signame("hqm_inp_gated_rst_n");
    DUTY.set_logical_path("HQMID");
    void'(add_field( DUTY ));

    PERIOD = new("PERIOD", "RW", 11, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_control.internal_f[15:5]"});
    PERIOD.set_powerwell("vcccfn_gated");
    PERIOD.set_rand_mode(0);
   PERIOD.set_reset_signame("hqm_inp_gated_rst_n");
    PERIOD.set_logical_path("HQMID");
    void'(add_field( PERIOD ));

    PROB1ST = new("PROB1ST", "RW", 8, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_control.internal_f[23:16]"});
    PROB1ST.set_powerwell("vcccfn_gated");
    PROB1ST.set_rand_mode(0);
   PROB1ST.set_reset_signame("hqm_inp_gated_rst_n");
    PROB1ST.set_logical_path("HQMID");
    void'(add_field( PROB1ST ));

    PROB2ND = new("PROB2ND", "RW", 8, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_control.internal_f[31:24]"});
    PROB2ND.set_powerwell("vcccfn_gated");
    PROB2ND.set_rand_mode(0);
   PROB2ND.set_reset_signame("hqm_inp_gated_rst_n");
    PROB2ND.set_logical_path("HQMID");
    void'(add_field( PROB2ND ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg) 
endclass : hqm_dir_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_HW_AGITATE_SELECT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field AGG_IF_00;
  sla_ral_field AGG_IF_01;
  sla_ral_field AGG_IF_02;
  sla_ral_field AGG_IF_03;
  sla_ral_field AGG_IF_04;
  sla_ral_field AGG_IF_05;
  sla_ral_field AGG_IF_06;
  sla_ral_field AGG_IF_07;
  sla_ral_field AGG_IF_08;
  sla_ral_field AGG_IF_09;
  sla_ral_field AGG_IF_10;
  sla_ral_field AGG_IF_11;
  sla_ral_field AGG_IF_12;
  sla_ral_field AGG_IF_13;
  sla_ral_field AGG_IF_14;
  sla_ral_field AGG_IF_15;
  sla_ral_field RSVZ;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_HW_AGITATE_SELECT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AGG_IF_00, AGG_IF_00.desired)
     `RAL_FIELD_CP_1(AGG_IF_00, AGG_IF_00.desired, 0)
     `RAL_FIELD_CP(AGG_IF_01, AGG_IF_01.desired)
     `RAL_FIELD_CP_1(AGG_IF_01, AGG_IF_01.desired, 0)
     `RAL_FIELD_CP(AGG_IF_02, AGG_IF_02.desired)
     `RAL_FIELD_CP_1(AGG_IF_02, AGG_IF_02.desired, 0)
     `RAL_FIELD_CP(AGG_IF_03, AGG_IF_03.desired)
     `RAL_FIELD_CP_1(AGG_IF_03, AGG_IF_03.desired, 0)
     `RAL_FIELD_CP(AGG_IF_04, AGG_IF_04.desired)
     `RAL_FIELD_CP_1(AGG_IF_04, AGG_IF_04.desired, 0)
     `RAL_FIELD_CP(AGG_IF_05, AGG_IF_05.desired)
     `RAL_FIELD_CP_1(AGG_IF_05, AGG_IF_05.desired, 0)
     `RAL_FIELD_CP(AGG_IF_06, AGG_IF_06.desired)
     `RAL_FIELD_CP_1(AGG_IF_06, AGG_IF_06.desired, 0)
     `RAL_FIELD_CP(AGG_IF_07, AGG_IF_07.desired)
     `RAL_FIELD_CP_1(AGG_IF_07, AGG_IF_07.desired, 0)
     `RAL_FIELD_CP(AGG_IF_08, AGG_IF_08.desired)
     `RAL_FIELD_CP_1(AGG_IF_08, AGG_IF_08.desired, 0)
     `RAL_FIELD_CP(AGG_IF_09, AGG_IF_09.desired)
     `RAL_FIELD_CP_1(AGG_IF_09, AGG_IF_09.desired, 0)
     `RAL_FIELD_CP(AGG_IF_10, AGG_IF_10.desired)
     `RAL_FIELD_CP_1(AGG_IF_10, AGG_IF_10.desired, 0)
     `RAL_FIELD_CP(AGG_IF_11, AGG_IF_11.desired)
     `RAL_FIELD_CP_1(AGG_IF_11, AGG_IF_11.desired, 0)
     `RAL_FIELD_CP(AGG_IF_12, AGG_IF_12.desired)
     `RAL_FIELD_CP_1(AGG_IF_12, AGG_IF_12.desired, 0)
     `RAL_FIELD_CP(AGG_IF_13, AGG_IF_13.desired)
     `RAL_FIELD_CP_1(AGG_IF_13, AGG_IF_13.desired, 0)
     `RAL_FIELD_CP(AGG_IF_14, AGG_IF_14.desired)
     `RAL_FIELD_CP_1(AGG_IF_14, AGG_IF_14.desired, 0)
     `RAL_FIELD_CP(AGG_IF_15, AGG_IF_15.desired)
     `RAL_FIELD_CP_1(AGG_IF_15, AGG_IF_15.desired, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.desired)
     `RAL_FIELD_CP_16(RSVZ, RSVZ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AGG_IF_00, AGG_IF_00.actual)
     `RAL_FIELD_CP_1(AGG_IF_00, AGG_IF_00.actual, 0)
     `RAL_FIELD_CP(AGG_IF_01, AGG_IF_01.actual)
     `RAL_FIELD_CP_1(AGG_IF_01, AGG_IF_01.actual, 0)
     `RAL_FIELD_CP(AGG_IF_02, AGG_IF_02.actual)
     `RAL_FIELD_CP_1(AGG_IF_02, AGG_IF_02.actual, 0)
     `RAL_FIELD_CP(AGG_IF_03, AGG_IF_03.actual)
     `RAL_FIELD_CP_1(AGG_IF_03, AGG_IF_03.actual, 0)
     `RAL_FIELD_CP(AGG_IF_04, AGG_IF_04.actual)
     `RAL_FIELD_CP_1(AGG_IF_04, AGG_IF_04.actual, 0)
     `RAL_FIELD_CP(AGG_IF_05, AGG_IF_05.actual)
     `RAL_FIELD_CP_1(AGG_IF_05, AGG_IF_05.actual, 0)
     `RAL_FIELD_CP(AGG_IF_06, AGG_IF_06.actual)
     `RAL_FIELD_CP_1(AGG_IF_06, AGG_IF_06.actual, 0)
     `RAL_FIELD_CP(AGG_IF_07, AGG_IF_07.actual)
     `RAL_FIELD_CP_1(AGG_IF_07, AGG_IF_07.actual, 0)
     `RAL_FIELD_CP(AGG_IF_08, AGG_IF_08.actual)
     `RAL_FIELD_CP_1(AGG_IF_08, AGG_IF_08.actual, 0)
     `RAL_FIELD_CP(AGG_IF_09, AGG_IF_09.actual)
     `RAL_FIELD_CP_1(AGG_IF_09, AGG_IF_09.actual, 0)
     `RAL_FIELD_CP(AGG_IF_10, AGG_IF_10.actual)
     `RAL_FIELD_CP_1(AGG_IF_10, AGG_IF_10.actual, 0)
     `RAL_FIELD_CP(AGG_IF_11, AGG_IF_11.actual)
     `RAL_FIELD_CP_1(AGG_IF_11, AGG_IF_11.actual, 0)
     `RAL_FIELD_CP(AGG_IF_12, AGG_IF_12.actual)
     `RAL_FIELD_CP_1(AGG_IF_12, AGG_IF_12.actual, 0)
     `RAL_FIELD_CP(AGG_IF_13, AGG_IF_13.actual)
     `RAL_FIELD_CP_1(AGG_IF_13, AGG_IF_13.actual, 0)
     `RAL_FIELD_CP(AGG_IF_14, AGG_IF_14.actual)
     `RAL_FIELD_CP_1(AGG_IF_14, AGG_IF_14.actual, 0)
     `RAL_FIELD_CP(AGG_IF_15, AGG_IF_15.actual)
     `RAL_FIELD_CP_1(AGG_IF_15, AGG_IF_15.actual, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.actual)
     `RAL_FIELD_CP_16(RSVZ, RSVZ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    AGG_IF_00 = new("AGG_IF_00", "RW", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[0:0]"});
    AGG_IF_00.set_powerwell("vcccfn_gated");
    AGG_IF_00.set_rand_mode(0);
   AGG_IF_00.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_00.set_logical_path("HQMID");
    void'(add_field( AGG_IF_00 ));

    AGG_IF_01 = new("AGG_IF_01", "RW", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[1:1]"});
    AGG_IF_01.set_powerwell("vcccfn_gated");
    AGG_IF_01.set_rand_mode(0);
   AGG_IF_01.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_01.set_logical_path("HQMID");
    void'(add_field( AGG_IF_01 ));

    AGG_IF_02 = new("AGG_IF_02", "RW", 1, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[2:2]"});
    AGG_IF_02.set_powerwell("vcccfn_gated");
    AGG_IF_02.set_rand_mode(0);
   AGG_IF_02.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_02.set_logical_path("HQMID");
    void'(add_field( AGG_IF_02 ));

    AGG_IF_03 = new("AGG_IF_03", "RW", 1, 3, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[3:3]"});
    AGG_IF_03.set_powerwell("vcccfn_gated");
    AGG_IF_03.set_rand_mode(0);
   AGG_IF_03.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_03.set_logical_path("HQMID");
    void'(add_field( AGG_IF_03 ));

    AGG_IF_04 = new("AGG_IF_04", "RW", 1, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[4:4]"});
    AGG_IF_04.set_powerwell("vcccfn_gated");
    AGG_IF_04.set_rand_mode(0);
   AGG_IF_04.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_04.set_logical_path("HQMID");
    void'(add_field( AGG_IF_04 ));

    AGG_IF_05 = new("AGG_IF_05", "RW", 1, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[5:5]"});
    AGG_IF_05.set_powerwell("vcccfn_gated");
    AGG_IF_05.set_rand_mode(0);
   AGG_IF_05.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_05.set_logical_path("HQMID");
    void'(add_field( AGG_IF_05 ));

    AGG_IF_06 = new("AGG_IF_06", "RW", 1, 6, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[6:6]"});
    AGG_IF_06.set_powerwell("vcccfn_gated");
    AGG_IF_06.set_rand_mode(0);
   AGG_IF_06.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_06.set_logical_path("HQMID");
    void'(add_field( AGG_IF_06 ));

    AGG_IF_07 = new("AGG_IF_07", "RW", 1, 7, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[7:7]"});
    AGG_IF_07.set_powerwell("vcccfn_gated");
    AGG_IF_07.set_rand_mode(0);
   AGG_IF_07.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_07.set_logical_path("HQMID");
    void'(add_field( AGG_IF_07 ));

    AGG_IF_08 = new("AGG_IF_08", "RW", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[8:8]"});
    AGG_IF_08.set_powerwell("vcccfn_gated");
    AGG_IF_08.set_rand_mode(0);
   AGG_IF_08.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_08.set_logical_path("HQMID");
    void'(add_field( AGG_IF_08 ));

    AGG_IF_09 = new("AGG_IF_09", "RW", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[9:9]"});
    AGG_IF_09.set_powerwell("vcccfn_gated");
    AGG_IF_09.set_rand_mode(0);
   AGG_IF_09.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_09.set_logical_path("HQMID");
    void'(add_field( AGG_IF_09 ));

    AGG_IF_10 = new("AGG_IF_10", "RW", 1, 10, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[10:10]"});
    AGG_IF_10.set_powerwell("vcccfn_gated");
    AGG_IF_10.set_rand_mode(0);
   AGG_IF_10.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_10.set_logical_path("HQMID");
    void'(add_field( AGG_IF_10 ));

    AGG_IF_11 = new("AGG_IF_11", "RW", 1, 11, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[11:11]"});
    AGG_IF_11.set_powerwell("vcccfn_gated");
    AGG_IF_11.set_rand_mode(0);
   AGG_IF_11.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_11.set_logical_path("HQMID");
    void'(add_field( AGG_IF_11 ));

    AGG_IF_12 = new("AGG_IF_12", "RW", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[12:12]"});
    AGG_IF_12.set_powerwell("vcccfn_gated");
    AGG_IF_12.set_rand_mode(0);
   AGG_IF_12.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_12.set_logical_path("HQMID");
    void'(add_field( AGG_IF_12 ));

    AGG_IF_13 = new("AGG_IF_13", "RW", 1, 13, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[13:13]"});
    AGG_IF_13.set_powerwell("vcccfn_gated");
    AGG_IF_13.set_rand_mode(0);
   AGG_IF_13.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_13.set_logical_path("HQMID");
    void'(add_field( AGG_IF_13 ));

    AGG_IF_14 = new("AGG_IF_14", "RW", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[14:14]"});
    AGG_IF_14.set_powerwell("vcccfn_gated");
    AGG_IF_14.set_rand_mode(0);
   AGG_IF_14.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_14.set_logical_path("HQMID");
    void'(add_field( AGG_IF_14 ));

    AGG_IF_15 = new("AGG_IF_15", "RW", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[15:15]"});
    AGG_IF_15.set_powerwell("vcccfn_gated");
    AGG_IF_15.set_rand_mode(0);
   AGG_IF_15.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_15.set_logical_path("HQMID");
    void'(add_field( AGG_IF_15 ));

    RSVZ = new("RSVZ", "RW", 16, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[31:16]"});
    RSVZ.set_powerwell("vcccfn_gated");
    RSVZ.set_rand_mode(0);
   RSVZ.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ.set_logical_path("HQMID");
    void'(add_field( RSVZ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_HW_AGITATE_SELECT_reg) 
endclass : hqm_dir_pipe_bridge_CFG_HW_AGITATE_SELECT_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_INTERFACE_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DB_DP_DQED_STATUS_DEPTH;
  sla_ral_field DB_DP_DQED_STATUS_READY;
  sla_ral_field DP_DQED_STATUS_DEPTH;
  sla_ral_field DP_DQED_STATUS_READY;
  sla_ral_field DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH;
  sla_ral_field DB_DP_LSP_ENQ_RORPLY_STATUS_READY;
  sla_ral_field DB_DP_LSP_ENQ_DIR_STATUS_DEPTH;
  sla_ral_field DB_DP_LSP_ENQ_DIR_STATUS_READY;
  sla_ral_field DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH;
  sla_ral_field DB_LSP_DP_SCH_RORPLY_STATUS_READY;
  sla_ral_field DB_LSP_DP_SCH_DIR_STATUS_DEPTH;
  sla_ral_field DB_LSP_DP_SCH_DIR_STATUS_READY;
  sla_ral_field DB_ROP_DP_ENQ_STATUS_DEPTH;
  sla_ral_field DB_ROP_DP_ENQ_STATUS_READY;
  sla_ral_field INT_IDLE_B;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_INTERFACE_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DB_DP_DQED_STATUS_DEPTH, DB_DP_DQED_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_DP_DQED_STATUS_DEPTH, DB_DP_DQED_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_DP_DQED_STATUS_READY, DB_DP_DQED_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_DP_DQED_STATUS_READY, DB_DP_DQED_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(DP_DQED_STATUS_DEPTH, DP_DQED_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DP_DQED_STATUS_DEPTH, DP_DQED_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DP_DQED_STATUS_READY, DP_DQED_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DP_DQED_STATUS_READY, DP_DQED_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH, DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH, DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_DP_LSP_ENQ_RORPLY_STATUS_READY, DB_DP_LSP_ENQ_RORPLY_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_DP_LSP_ENQ_RORPLY_STATUS_READY, DB_DP_LSP_ENQ_RORPLY_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(DB_DP_LSP_ENQ_DIR_STATUS_DEPTH, DB_DP_LSP_ENQ_DIR_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_DP_LSP_ENQ_DIR_STATUS_DEPTH, DB_DP_LSP_ENQ_DIR_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_DP_LSP_ENQ_DIR_STATUS_READY, DB_DP_LSP_ENQ_DIR_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_DP_LSP_ENQ_DIR_STATUS_READY, DB_DP_LSP_ENQ_DIR_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH, DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH, DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_LSP_DP_SCH_RORPLY_STATUS_READY, DB_LSP_DP_SCH_RORPLY_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_LSP_DP_SCH_RORPLY_STATUS_READY, DB_LSP_DP_SCH_RORPLY_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(DB_LSP_DP_SCH_DIR_STATUS_DEPTH, DB_LSP_DP_SCH_DIR_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_LSP_DP_SCH_DIR_STATUS_DEPTH, DB_LSP_DP_SCH_DIR_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_LSP_DP_SCH_DIR_STATUS_READY, DB_LSP_DP_SCH_DIR_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_LSP_DP_SCH_DIR_STATUS_READY, DB_LSP_DP_SCH_DIR_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(DB_ROP_DP_ENQ_STATUS_DEPTH, DB_ROP_DP_ENQ_STATUS_DEPTH.desired)
     `RAL_FIELD_CP_2(DB_ROP_DP_ENQ_STATUS_DEPTH, DB_ROP_DP_ENQ_STATUS_DEPTH.desired, 0,1)
     `RAL_FIELD_CP(DB_ROP_DP_ENQ_STATUS_READY, DB_ROP_DP_ENQ_STATUS_READY.desired)
     `RAL_FIELD_CP_1(DB_ROP_DP_ENQ_STATUS_READY, DB_ROP_DP_ENQ_STATUS_READY.desired, 0)
     `RAL_FIELD_CP(INT_IDLE_B, INT_IDLE_B.desired)
     `RAL_FIELD_CP_1(INT_IDLE_B, INT_IDLE_B.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DB_DP_DQED_STATUS_DEPTH, DB_DP_DQED_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_DP_DQED_STATUS_DEPTH, DB_DP_DQED_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_DP_DQED_STATUS_READY, DB_DP_DQED_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_DP_DQED_STATUS_READY, DB_DP_DQED_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(DP_DQED_STATUS_DEPTH, DP_DQED_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DP_DQED_STATUS_DEPTH, DP_DQED_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DP_DQED_STATUS_READY, DP_DQED_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DP_DQED_STATUS_READY, DP_DQED_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH, DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH, DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_DP_LSP_ENQ_RORPLY_STATUS_READY, DB_DP_LSP_ENQ_RORPLY_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_DP_LSP_ENQ_RORPLY_STATUS_READY, DB_DP_LSP_ENQ_RORPLY_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(DB_DP_LSP_ENQ_DIR_STATUS_DEPTH, DB_DP_LSP_ENQ_DIR_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_DP_LSP_ENQ_DIR_STATUS_DEPTH, DB_DP_LSP_ENQ_DIR_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_DP_LSP_ENQ_DIR_STATUS_READY, DB_DP_LSP_ENQ_DIR_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_DP_LSP_ENQ_DIR_STATUS_READY, DB_DP_LSP_ENQ_DIR_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH, DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH, DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_LSP_DP_SCH_RORPLY_STATUS_READY, DB_LSP_DP_SCH_RORPLY_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_LSP_DP_SCH_RORPLY_STATUS_READY, DB_LSP_DP_SCH_RORPLY_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(DB_LSP_DP_SCH_DIR_STATUS_DEPTH, DB_LSP_DP_SCH_DIR_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_LSP_DP_SCH_DIR_STATUS_DEPTH, DB_LSP_DP_SCH_DIR_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_LSP_DP_SCH_DIR_STATUS_READY, DB_LSP_DP_SCH_DIR_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_LSP_DP_SCH_DIR_STATUS_READY, DB_LSP_DP_SCH_DIR_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(DB_ROP_DP_ENQ_STATUS_DEPTH, DB_ROP_DP_ENQ_STATUS_DEPTH.actual)
     `RAL_FIELD_CP_2(DB_ROP_DP_ENQ_STATUS_DEPTH, DB_ROP_DP_ENQ_STATUS_DEPTH.actual, 0,1)
     `RAL_FIELD_CP(DB_ROP_DP_ENQ_STATUS_READY, DB_ROP_DP_ENQ_STATUS_READY.actual)
     `RAL_FIELD_CP_1(DB_ROP_DP_ENQ_STATUS_READY, DB_ROP_DP_ENQ_STATUS_READY.actual, 0)
     `RAL_FIELD_CP(INT_IDLE_B, INT_IDLE_B.actual)
     `RAL_FIELD_CP_1(INT_IDLE_B, INT_IDLE_B.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DB_DP_DQED_STATUS_DEPTH = new("DB_DP_DQED_STATUS_DEPTH", "RO/V", 2, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[1:0]"});
    DB_DP_DQED_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_DP_DQED_STATUS_DEPTH.set_rand_mode(0);
   DB_DP_DQED_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DP_DQED_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_DP_DQED_STATUS_DEPTH ));

    DB_DP_DQED_STATUS_READY = new("DB_DP_DQED_STATUS_READY", "RO/V", 1, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[2:2]"});
    DB_DP_DQED_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_DP_DQED_STATUS_READY.set_rand_mode(0);
   DB_DP_DQED_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DP_DQED_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_DP_DQED_STATUS_READY ));

    DP_DQED_STATUS_DEPTH = new("DP_DQED_STATUS_DEPTH", "RO/V", 2, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[5:4]"});
    DP_DQED_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DP_DQED_STATUS_DEPTH.set_rand_mode(0);
   DP_DQED_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DP_DQED_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DP_DQED_STATUS_DEPTH ));

    DP_DQED_STATUS_READY = new("DP_DQED_STATUS_READY", "RO/V", 1, 6, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[6:6]"});
    DP_DQED_STATUS_READY.set_powerwell("vcccfn_gated");
    DP_DQED_STATUS_READY.set_rand_mode(0);
   DP_DQED_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DP_DQED_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DP_DQED_STATUS_READY ));

    DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH = new("DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH", "RO/V", 2, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[9:8]"});
    DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH.set_rand_mode(0);
   DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH ));

    DB_DP_LSP_ENQ_RORPLY_STATUS_READY = new("DB_DP_LSP_ENQ_RORPLY_STATUS_READY", "RO/V", 1, 10, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[10:10]"});
    DB_DP_LSP_ENQ_RORPLY_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_DP_LSP_ENQ_RORPLY_STATUS_READY.set_rand_mode(0);
   DB_DP_LSP_ENQ_RORPLY_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DP_LSP_ENQ_RORPLY_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_DP_LSP_ENQ_RORPLY_STATUS_READY ));

    DB_DP_LSP_ENQ_DIR_STATUS_DEPTH = new("DB_DP_LSP_ENQ_DIR_STATUS_DEPTH", "RO/V", 2, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[13:12]"});
    DB_DP_LSP_ENQ_DIR_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_DP_LSP_ENQ_DIR_STATUS_DEPTH.set_rand_mode(0);
   DB_DP_LSP_ENQ_DIR_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DP_LSP_ENQ_DIR_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_DP_LSP_ENQ_DIR_STATUS_DEPTH ));

    DB_DP_LSP_ENQ_DIR_STATUS_READY = new("DB_DP_LSP_ENQ_DIR_STATUS_READY", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[14:14]"});
    DB_DP_LSP_ENQ_DIR_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_DP_LSP_ENQ_DIR_STATUS_READY.set_rand_mode(0);
   DB_DP_LSP_ENQ_DIR_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_DP_LSP_ENQ_DIR_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_DP_LSP_ENQ_DIR_STATUS_READY ));

    DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH = new("DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH", "RO/V", 2, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[17:16]"});
    DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH.set_rand_mode(0);
   DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH ));

    DB_LSP_DP_SCH_RORPLY_STATUS_READY = new("DB_LSP_DP_SCH_RORPLY_STATUS_READY", "RO/V", 1, 18, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[18:18]"});
    DB_LSP_DP_SCH_RORPLY_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_LSP_DP_SCH_RORPLY_STATUS_READY.set_rand_mode(0);
   DB_LSP_DP_SCH_RORPLY_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_LSP_DP_SCH_RORPLY_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_LSP_DP_SCH_RORPLY_STATUS_READY ));

    DB_LSP_DP_SCH_DIR_STATUS_DEPTH = new("DB_LSP_DP_SCH_DIR_STATUS_DEPTH", "RO/V", 2, 20, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[21:20]"});
    DB_LSP_DP_SCH_DIR_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_LSP_DP_SCH_DIR_STATUS_DEPTH.set_rand_mode(0);
   DB_LSP_DP_SCH_DIR_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_LSP_DP_SCH_DIR_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_LSP_DP_SCH_DIR_STATUS_DEPTH ));

    DB_LSP_DP_SCH_DIR_STATUS_READY = new("DB_LSP_DP_SCH_DIR_STATUS_READY", "RO/V", 1, 22, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[22:22]"});
    DB_LSP_DP_SCH_DIR_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_LSP_DP_SCH_DIR_STATUS_READY.set_rand_mode(0);
   DB_LSP_DP_SCH_DIR_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_LSP_DP_SCH_DIR_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_LSP_DP_SCH_DIR_STATUS_READY ));

    DB_ROP_DP_ENQ_STATUS_DEPTH = new("DB_ROP_DP_ENQ_STATUS_DEPTH", "RO/V", 2, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[25:24]"});
    DB_ROP_DP_ENQ_STATUS_DEPTH.set_powerwell("vcccfn_gated");
    DB_ROP_DP_ENQ_STATUS_DEPTH.set_rand_mode(0);
   DB_ROP_DP_ENQ_STATUS_DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    DB_ROP_DP_ENQ_STATUS_DEPTH.set_logical_path("HQMID");
    void'(add_field( DB_ROP_DP_ENQ_STATUS_DEPTH ));

    DB_ROP_DP_ENQ_STATUS_READY = new("DB_ROP_DP_ENQ_STATUS_READY", "RO/V", 1, 26, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[26:26]"});
    DB_ROP_DP_ENQ_STATUS_READY.set_powerwell("vcccfn_gated");
    DB_ROP_DP_ENQ_STATUS_READY.set_rand_mode(0);
   DB_ROP_DP_ENQ_STATUS_READY.set_reset_signame("hqm_inp_gated_rst_n");
    DB_ROP_DP_ENQ_STATUS_READY.set_logical_path("HQMID");
    void'(add_field( DB_ROP_DP_ENQ_STATUS_READY ));

    INT_IDLE_B = new("INT_IDLE_B", "RO/V", 1, 31, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[31:31]"});
    INT_IDLE_B.set_powerwell("vcccfn_gated");
    INT_IDLE_B.set_rand_mode(0);
   INT_IDLE_B.set_reset_signame("hqm_inp_gated_rst_n");
    INT_IDLE_B.set_logical_path("HQMID");
    void'(add_field( INT_IDLE_B ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_INTERFACE_STATUS_reg) 
endclass : hqm_dir_pipe_bridge_CFG_INTERFACE_STATUS_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_DIR_HOLD;
  sla_ral_field P1_DIR_HOLD;
  sla_ral_field P2_DIR_HOLD;
  sla_ral_field P3_DIR_HOLD;
  sla_ral_field P4_DIR_HOLD;
  sla_ral_field P5_DIR_HOLD;
  sla_ral_field P6_DIR_HOLD;
  sla_ral_field P7_DIR_HOLD;
  sla_ral_field P8_DIR_HOLD;
  sla_ral_field P0_ROFRAG_HOLD;
  sla_ral_field P1_ROFRAG_HOLD;
  sla_ral_field P2_ROFRAG_HOLD;
  sla_ral_field P3_ROFRAG_HOLD;
  sla_ral_field P4_ROFRAG_HOLD;
  sla_ral_field P5_ROFRAG_HOLD;
  sla_ral_field P6_ROFRAG_HOLD;
  sla_ral_field P7_ROFRAG_HOLD;
  sla_ral_field P8_ROFRAG_HOLD;
  sla_ral_field P0_REPLAY_HOLD;
  sla_ral_field P1_REPLAY_HOLD;
  sla_ral_field P2_REPLAY_HOLD;
  sla_ral_field P3_REPLAY_HOLD;
  sla_ral_field P4_REPLAY_HOLD;
  sla_ral_field P5_REPLAY_HOLD;
  sla_ral_field P6_REPLAY_HOLD;
  sla_ral_field P7_REPLAY_HOLD;
  sla_ral_field P8_REPLAY_HOLD;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_DIR_HOLD, P0_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P0_DIR_HOLD, P0_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_DIR_HOLD, P1_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P1_DIR_HOLD, P1_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_DIR_HOLD, P2_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P2_DIR_HOLD, P2_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_DIR_HOLD, P3_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P3_DIR_HOLD, P3_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P4_DIR_HOLD, P4_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P4_DIR_HOLD, P4_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P5_DIR_HOLD, P5_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P5_DIR_HOLD, P5_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P6_DIR_HOLD, P6_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P6_DIR_HOLD, P6_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P7_DIR_HOLD, P7_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P7_DIR_HOLD, P7_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P8_DIR_HOLD, P8_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P8_DIR_HOLD, P8_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_ROFRAG_HOLD, P0_ROFRAG_HOLD.desired)
     `RAL_FIELD_CP_1(P0_ROFRAG_HOLD, P0_ROFRAG_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_ROFRAG_HOLD, P1_ROFRAG_HOLD.desired)
     `RAL_FIELD_CP_1(P1_ROFRAG_HOLD, P1_ROFRAG_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_ROFRAG_HOLD, P2_ROFRAG_HOLD.desired)
     `RAL_FIELD_CP_1(P2_ROFRAG_HOLD, P2_ROFRAG_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_ROFRAG_HOLD, P3_ROFRAG_HOLD.desired)
     `RAL_FIELD_CP_1(P3_ROFRAG_HOLD, P3_ROFRAG_HOLD.desired, 0)
     `RAL_FIELD_CP(P4_ROFRAG_HOLD, P4_ROFRAG_HOLD.desired)
     `RAL_FIELD_CP_1(P4_ROFRAG_HOLD, P4_ROFRAG_HOLD.desired, 0)
     `RAL_FIELD_CP(P5_ROFRAG_HOLD, P5_ROFRAG_HOLD.desired)
     `RAL_FIELD_CP_1(P5_ROFRAG_HOLD, P5_ROFRAG_HOLD.desired, 0)
     `RAL_FIELD_CP(P6_ROFRAG_HOLD, P6_ROFRAG_HOLD.desired)
     `RAL_FIELD_CP_1(P6_ROFRAG_HOLD, P6_ROFRAG_HOLD.desired, 0)
     `RAL_FIELD_CP(P7_ROFRAG_HOLD, P7_ROFRAG_HOLD.desired)
     `RAL_FIELD_CP_1(P7_ROFRAG_HOLD, P7_ROFRAG_HOLD.desired, 0)
     `RAL_FIELD_CP(P8_ROFRAG_HOLD, P8_ROFRAG_HOLD.desired)
     `RAL_FIELD_CP_1(P8_ROFRAG_HOLD, P8_ROFRAG_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_REPLAY_HOLD, P0_REPLAY_HOLD.desired)
     `RAL_FIELD_CP_1(P0_REPLAY_HOLD, P0_REPLAY_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_REPLAY_HOLD, P1_REPLAY_HOLD.desired)
     `RAL_FIELD_CP_1(P1_REPLAY_HOLD, P1_REPLAY_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_REPLAY_HOLD, P2_REPLAY_HOLD.desired)
     `RAL_FIELD_CP_1(P2_REPLAY_HOLD, P2_REPLAY_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_REPLAY_HOLD, P3_REPLAY_HOLD.desired)
     `RAL_FIELD_CP_1(P3_REPLAY_HOLD, P3_REPLAY_HOLD.desired, 0)
     `RAL_FIELD_CP(P4_REPLAY_HOLD, P4_REPLAY_HOLD.desired)
     `RAL_FIELD_CP_1(P4_REPLAY_HOLD, P4_REPLAY_HOLD.desired, 0)
     `RAL_FIELD_CP(P5_REPLAY_HOLD, P5_REPLAY_HOLD.desired)
     `RAL_FIELD_CP_1(P5_REPLAY_HOLD, P5_REPLAY_HOLD.desired, 0)
     `RAL_FIELD_CP(P6_REPLAY_HOLD, P6_REPLAY_HOLD.desired)
     `RAL_FIELD_CP_1(P6_REPLAY_HOLD, P6_REPLAY_HOLD.desired, 0)
     `RAL_FIELD_CP(P7_REPLAY_HOLD, P7_REPLAY_HOLD.desired)
     `RAL_FIELD_CP_1(P7_REPLAY_HOLD, P7_REPLAY_HOLD.desired, 0)
     `RAL_FIELD_CP(P8_REPLAY_HOLD, P8_REPLAY_HOLD.desired)
     `RAL_FIELD_CP_1(P8_REPLAY_HOLD, P8_REPLAY_HOLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_DIR_HOLD, P0_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P0_DIR_HOLD, P0_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_DIR_HOLD, P1_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P1_DIR_HOLD, P1_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_DIR_HOLD, P2_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P2_DIR_HOLD, P2_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_DIR_HOLD, P3_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P3_DIR_HOLD, P3_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P4_DIR_HOLD, P4_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P4_DIR_HOLD, P4_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P5_DIR_HOLD, P5_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P5_DIR_HOLD, P5_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P6_DIR_HOLD, P6_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P6_DIR_HOLD, P6_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P7_DIR_HOLD, P7_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P7_DIR_HOLD, P7_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P8_DIR_HOLD, P8_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P8_DIR_HOLD, P8_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_ROFRAG_HOLD, P0_ROFRAG_HOLD.actual)
     `RAL_FIELD_CP_1(P0_ROFRAG_HOLD, P0_ROFRAG_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_ROFRAG_HOLD, P1_ROFRAG_HOLD.actual)
     `RAL_FIELD_CP_1(P1_ROFRAG_HOLD, P1_ROFRAG_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_ROFRAG_HOLD, P2_ROFRAG_HOLD.actual)
     `RAL_FIELD_CP_1(P2_ROFRAG_HOLD, P2_ROFRAG_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_ROFRAG_HOLD, P3_ROFRAG_HOLD.actual)
     `RAL_FIELD_CP_1(P3_ROFRAG_HOLD, P3_ROFRAG_HOLD.actual, 0)
     `RAL_FIELD_CP(P4_ROFRAG_HOLD, P4_ROFRAG_HOLD.actual)
     `RAL_FIELD_CP_1(P4_ROFRAG_HOLD, P4_ROFRAG_HOLD.actual, 0)
     `RAL_FIELD_CP(P5_ROFRAG_HOLD, P5_ROFRAG_HOLD.actual)
     `RAL_FIELD_CP_1(P5_ROFRAG_HOLD, P5_ROFRAG_HOLD.actual, 0)
     `RAL_FIELD_CP(P6_ROFRAG_HOLD, P6_ROFRAG_HOLD.actual)
     `RAL_FIELD_CP_1(P6_ROFRAG_HOLD, P6_ROFRAG_HOLD.actual, 0)
     `RAL_FIELD_CP(P7_ROFRAG_HOLD, P7_ROFRAG_HOLD.actual)
     `RAL_FIELD_CP_1(P7_ROFRAG_HOLD, P7_ROFRAG_HOLD.actual, 0)
     `RAL_FIELD_CP(P8_ROFRAG_HOLD, P8_ROFRAG_HOLD.actual)
     `RAL_FIELD_CP_1(P8_ROFRAG_HOLD, P8_ROFRAG_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_REPLAY_HOLD, P0_REPLAY_HOLD.actual)
     `RAL_FIELD_CP_1(P0_REPLAY_HOLD, P0_REPLAY_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_REPLAY_HOLD, P1_REPLAY_HOLD.actual)
     `RAL_FIELD_CP_1(P1_REPLAY_HOLD, P1_REPLAY_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_REPLAY_HOLD, P2_REPLAY_HOLD.actual)
     `RAL_FIELD_CP_1(P2_REPLAY_HOLD, P2_REPLAY_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_REPLAY_HOLD, P3_REPLAY_HOLD.actual)
     `RAL_FIELD_CP_1(P3_REPLAY_HOLD, P3_REPLAY_HOLD.actual, 0)
     `RAL_FIELD_CP(P4_REPLAY_HOLD, P4_REPLAY_HOLD.actual)
     `RAL_FIELD_CP_1(P4_REPLAY_HOLD, P4_REPLAY_HOLD.actual, 0)
     `RAL_FIELD_CP(P5_REPLAY_HOLD, P5_REPLAY_HOLD.actual)
     `RAL_FIELD_CP_1(P5_REPLAY_HOLD, P5_REPLAY_HOLD.actual, 0)
     `RAL_FIELD_CP(P6_REPLAY_HOLD, P6_REPLAY_HOLD.actual)
     `RAL_FIELD_CP_1(P6_REPLAY_HOLD, P6_REPLAY_HOLD.actual, 0)
     `RAL_FIELD_CP(P7_REPLAY_HOLD, P7_REPLAY_HOLD.actual)
     `RAL_FIELD_CP_1(P7_REPLAY_HOLD, P7_REPLAY_HOLD.actual, 0)
     `RAL_FIELD_CP(P8_REPLAY_HOLD, P8_REPLAY_HOLD.actual)
     `RAL_FIELD_CP_1(P8_REPLAY_HOLD, P8_REPLAY_HOLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_DIR_HOLD = new("P0_DIR_HOLD", "RO/V", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[0:0]"});
    P0_DIR_HOLD.set_powerwell("vcccfn_gated");
    P0_DIR_HOLD.set_rand_mode(0);
   P0_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_DIR_HOLD ));

    P1_DIR_HOLD = new("P1_DIR_HOLD", "RO/V", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[1:1]"});
    P1_DIR_HOLD.set_powerwell("vcccfn_gated");
    P1_DIR_HOLD.set_rand_mode(0);
   P1_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_DIR_HOLD ));

    P2_DIR_HOLD = new("P2_DIR_HOLD", "RO/V", 1, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[2:2]"});
    P2_DIR_HOLD.set_powerwell("vcccfn_gated");
    P2_DIR_HOLD.set_rand_mode(0);
   P2_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_DIR_HOLD ));

    P3_DIR_HOLD = new("P3_DIR_HOLD", "RO/V", 1, 3, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[3:3]"});
    P3_DIR_HOLD.set_powerwell("vcccfn_gated");
    P3_DIR_HOLD.set_rand_mode(0);
   P3_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_DIR_HOLD ));

    P4_DIR_HOLD = new("P4_DIR_HOLD", "RO/V", 1, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[4:4]"});
    P4_DIR_HOLD.set_powerwell("vcccfn_gated");
    P4_DIR_HOLD.set_rand_mode(0);
   P4_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P4_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P4_DIR_HOLD ));

    P5_DIR_HOLD = new("P5_DIR_HOLD", "RO/V", 1, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[5:5]"});
    P5_DIR_HOLD.set_powerwell("vcccfn_gated");
    P5_DIR_HOLD.set_rand_mode(0);
   P5_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P5_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P5_DIR_HOLD ));

    P6_DIR_HOLD = new("P6_DIR_HOLD", "RO/V", 1, 6, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[6:6]"});
    P6_DIR_HOLD.set_powerwell("vcccfn_gated");
    P6_DIR_HOLD.set_rand_mode(0);
   P6_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P6_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P6_DIR_HOLD ));

    P7_DIR_HOLD = new("P7_DIR_HOLD", "RO/V", 1, 7, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[7:7]"});
    P7_DIR_HOLD.set_powerwell("vcccfn_gated");
    P7_DIR_HOLD.set_rand_mode(0);
   P7_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P7_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P7_DIR_HOLD ));

    P8_DIR_HOLD = new("P8_DIR_HOLD", "RO/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[8:8]"});
    P8_DIR_HOLD.set_powerwell("vcccfn_gated");
    P8_DIR_HOLD.set_rand_mode(0);
   P8_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P8_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P8_DIR_HOLD ));

    P0_ROFRAG_HOLD = new("P0_ROFRAG_HOLD", "RO/V", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[9:9]"});
    P0_ROFRAG_HOLD.set_powerwell("vcccfn_gated");
    P0_ROFRAG_HOLD.set_rand_mode(0);
   P0_ROFRAG_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_ROFRAG_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_ROFRAG_HOLD ));

    P1_ROFRAG_HOLD = new("P1_ROFRAG_HOLD", "RO/V", 1, 10, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[10:10]"});
    P1_ROFRAG_HOLD.set_powerwell("vcccfn_gated");
    P1_ROFRAG_HOLD.set_rand_mode(0);
   P1_ROFRAG_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_ROFRAG_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_ROFRAG_HOLD ));

    P2_ROFRAG_HOLD = new("P2_ROFRAG_HOLD", "RO/V", 1, 11, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[11:11]"});
    P2_ROFRAG_HOLD.set_powerwell("vcccfn_gated");
    P2_ROFRAG_HOLD.set_rand_mode(0);
   P2_ROFRAG_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_ROFRAG_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_ROFRAG_HOLD ));

    P3_ROFRAG_HOLD = new("P3_ROFRAG_HOLD", "RO/V", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[12:12]"});
    P3_ROFRAG_HOLD.set_powerwell("vcccfn_gated");
    P3_ROFRAG_HOLD.set_rand_mode(0);
   P3_ROFRAG_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_ROFRAG_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_ROFRAG_HOLD ));

    P4_ROFRAG_HOLD = new("P4_ROFRAG_HOLD", "RO/V", 1, 13, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[13:13]"});
    P4_ROFRAG_HOLD.set_powerwell("vcccfn_gated");
    P4_ROFRAG_HOLD.set_rand_mode(0);
   P4_ROFRAG_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P4_ROFRAG_HOLD.set_logical_path("HQMID");
    void'(add_field( P4_ROFRAG_HOLD ));

    P5_ROFRAG_HOLD = new("P5_ROFRAG_HOLD", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[14:14]"});
    P5_ROFRAG_HOLD.set_powerwell("vcccfn_gated");
    P5_ROFRAG_HOLD.set_rand_mode(0);
   P5_ROFRAG_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P5_ROFRAG_HOLD.set_logical_path("HQMID");
    void'(add_field( P5_ROFRAG_HOLD ));

    P6_ROFRAG_HOLD = new("P6_ROFRAG_HOLD", "RO/V", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[15:15]"});
    P6_ROFRAG_HOLD.set_powerwell("vcccfn_gated");
    P6_ROFRAG_HOLD.set_rand_mode(0);
   P6_ROFRAG_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P6_ROFRAG_HOLD.set_logical_path("HQMID");
    void'(add_field( P6_ROFRAG_HOLD ));

    P7_ROFRAG_HOLD = new("P7_ROFRAG_HOLD", "RO/V", 1, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[16:16]"});
    P7_ROFRAG_HOLD.set_powerwell("vcccfn_gated");
    P7_ROFRAG_HOLD.set_rand_mode(0);
   P7_ROFRAG_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P7_ROFRAG_HOLD.set_logical_path("HQMID");
    void'(add_field( P7_ROFRAG_HOLD ));

    P8_ROFRAG_HOLD = new("P8_ROFRAG_HOLD", "RO/V", 1, 17, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[17:17]"});
    P8_ROFRAG_HOLD.set_powerwell("vcccfn_gated");
    P8_ROFRAG_HOLD.set_rand_mode(0);
   P8_ROFRAG_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P8_ROFRAG_HOLD.set_logical_path("HQMID");
    void'(add_field( P8_ROFRAG_HOLD ));

    P0_REPLAY_HOLD = new("P0_REPLAY_HOLD", "RO/V", 1, 18, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[18:18]"});
    P0_REPLAY_HOLD.set_powerwell("vcccfn_gated");
    P0_REPLAY_HOLD.set_rand_mode(0);
   P0_REPLAY_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REPLAY_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_REPLAY_HOLD ));

    P1_REPLAY_HOLD = new("P1_REPLAY_HOLD", "RO/V", 1, 19, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[19:19]"});
    P1_REPLAY_HOLD.set_powerwell("vcccfn_gated");
    P1_REPLAY_HOLD.set_rand_mode(0);
   P1_REPLAY_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REPLAY_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_REPLAY_HOLD ));

    P2_REPLAY_HOLD = new("P2_REPLAY_HOLD", "RO/V", 1, 20, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[20:20]"});
    P2_REPLAY_HOLD.set_powerwell("vcccfn_gated");
    P2_REPLAY_HOLD.set_rand_mode(0);
   P2_REPLAY_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REPLAY_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_REPLAY_HOLD ));

    P3_REPLAY_HOLD = new("P3_REPLAY_HOLD", "RO/V", 1, 21, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[21:21]"});
    P3_REPLAY_HOLD.set_powerwell("vcccfn_gated");
    P3_REPLAY_HOLD.set_rand_mode(0);
   P3_REPLAY_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REPLAY_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_REPLAY_HOLD ));

    P4_REPLAY_HOLD = new("P4_REPLAY_HOLD", "RO/V", 1, 22, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[22:22]"});
    P4_REPLAY_HOLD.set_powerwell("vcccfn_gated");
    P4_REPLAY_HOLD.set_rand_mode(0);
   P4_REPLAY_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P4_REPLAY_HOLD.set_logical_path("HQMID");
    void'(add_field( P4_REPLAY_HOLD ));

    P5_REPLAY_HOLD = new("P5_REPLAY_HOLD", "RO/V", 1, 23, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[23:23]"});
    P5_REPLAY_HOLD.set_powerwell("vcccfn_gated");
    P5_REPLAY_HOLD.set_rand_mode(0);
   P5_REPLAY_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P5_REPLAY_HOLD.set_logical_path("HQMID");
    void'(add_field( P5_REPLAY_HOLD ));

    P6_REPLAY_HOLD = new("P6_REPLAY_HOLD", "RO/V", 1, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[24:24]"});
    P6_REPLAY_HOLD.set_powerwell("vcccfn_gated");
    P6_REPLAY_HOLD.set_rand_mode(0);
   P6_REPLAY_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P6_REPLAY_HOLD.set_logical_path("HQMID");
    void'(add_field( P6_REPLAY_HOLD ));

    P7_REPLAY_HOLD = new("P7_REPLAY_HOLD", "RO/V", 1, 25, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[25:25]"});
    P7_REPLAY_HOLD.set_powerwell("vcccfn_gated");
    P7_REPLAY_HOLD.set_rand_mode(0);
   P7_REPLAY_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P7_REPLAY_HOLD.set_logical_path("HQMID");
    void'(add_field( P7_REPLAY_HOLD ));

    P8_REPLAY_HOLD = new("P8_REPLAY_HOLD", "RO/V", 1, 26, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[26:26]"});
    P8_REPLAY_HOLD.set_powerwell("vcccfn_gated");
    P8_REPLAY_HOLD.set_rand_mode(0);
   P8_REPLAY_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P8_REPLAY_HOLD.set_logical_path("HQMID");
    void'(add_field( P8_REPLAY_HOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg) 
endclass : hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_DIR_VALID;
  sla_ral_field P1_DIR_VALID;
  sla_ral_field P2_DIR_VALID;
  sla_ral_field P3_DIR_VALID;
  sla_ral_field P4_DIR_VALID;
  sla_ral_field P5_DIR_VALID;
  sla_ral_field P6_DIR_VALID;
  sla_ral_field P7_DIR_VALID;
  sla_ral_field P8_DIR_VALID;
  sla_ral_field P0_ROFRAG_VALID;
  sla_ral_field P1_ROFRAG_VALID;
  sla_ral_field P2_ROFRAG_VALID;
  sla_ral_field P3_ROFRAG_VALID;
  sla_ral_field P4_ROFRAG_VALID;
  sla_ral_field P5_ROFRAG_VALID;
  sla_ral_field P6_ROFRAG_VALID;
  sla_ral_field P7_ROFRAG_VALID;
  sla_ral_field P8_ROFRAG_VALID;
  sla_ral_field P0_REPLAY_VALID;
  sla_ral_field P1_REPLAY_VALID;
  sla_ral_field P2_REPLAY_VALID;
  sla_ral_field P3_REPLAY_VALID;
  sla_ral_field P4_REPLAY_VALID;
  sla_ral_field P5_REPLAY_VALID;
  sla_ral_field P6_REPLAY_VALID;
  sla_ral_field P7_REPLAY_VALID;
  sla_ral_field P8_REPLAY_VALID;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_DIR_VALID, P0_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P0_DIR_VALID, P0_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P1_DIR_VALID, P1_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P1_DIR_VALID, P1_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P2_DIR_VALID, P2_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P2_DIR_VALID, P2_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P3_DIR_VALID, P3_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P3_DIR_VALID, P3_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P4_DIR_VALID, P4_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P4_DIR_VALID, P4_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P5_DIR_VALID, P5_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P5_DIR_VALID, P5_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P6_DIR_VALID, P6_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P6_DIR_VALID, P6_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P7_DIR_VALID, P7_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P7_DIR_VALID, P7_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P8_DIR_VALID, P8_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P8_DIR_VALID, P8_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P0_ROFRAG_VALID, P0_ROFRAG_VALID.desired)
     `RAL_FIELD_CP_1(P0_ROFRAG_VALID, P0_ROFRAG_VALID.desired, 0)
     `RAL_FIELD_CP(P1_ROFRAG_VALID, P1_ROFRAG_VALID.desired)
     `RAL_FIELD_CP_1(P1_ROFRAG_VALID, P1_ROFRAG_VALID.desired, 0)
     `RAL_FIELD_CP(P2_ROFRAG_VALID, P2_ROFRAG_VALID.desired)
     `RAL_FIELD_CP_1(P2_ROFRAG_VALID, P2_ROFRAG_VALID.desired, 0)
     `RAL_FIELD_CP(P3_ROFRAG_VALID, P3_ROFRAG_VALID.desired)
     `RAL_FIELD_CP_1(P3_ROFRAG_VALID, P3_ROFRAG_VALID.desired, 0)
     `RAL_FIELD_CP(P4_ROFRAG_VALID, P4_ROFRAG_VALID.desired)
     `RAL_FIELD_CP_1(P4_ROFRAG_VALID, P4_ROFRAG_VALID.desired, 0)
     `RAL_FIELD_CP(P5_ROFRAG_VALID, P5_ROFRAG_VALID.desired)
     `RAL_FIELD_CP_1(P5_ROFRAG_VALID, P5_ROFRAG_VALID.desired, 0)
     `RAL_FIELD_CP(P6_ROFRAG_VALID, P6_ROFRAG_VALID.desired)
     `RAL_FIELD_CP_1(P6_ROFRAG_VALID, P6_ROFRAG_VALID.desired, 0)
     `RAL_FIELD_CP(P7_ROFRAG_VALID, P7_ROFRAG_VALID.desired)
     `RAL_FIELD_CP_1(P7_ROFRAG_VALID, P7_ROFRAG_VALID.desired, 0)
     `RAL_FIELD_CP(P8_ROFRAG_VALID, P8_ROFRAG_VALID.desired)
     `RAL_FIELD_CP_1(P8_ROFRAG_VALID, P8_ROFRAG_VALID.desired, 0)
     `RAL_FIELD_CP(P0_REPLAY_VALID, P0_REPLAY_VALID.desired)
     `RAL_FIELD_CP_1(P0_REPLAY_VALID, P0_REPLAY_VALID.desired, 0)
     `RAL_FIELD_CP(P1_REPLAY_VALID, P1_REPLAY_VALID.desired)
     `RAL_FIELD_CP_1(P1_REPLAY_VALID, P1_REPLAY_VALID.desired, 0)
     `RAL_FIELD_CP(P2_REPLAY_VALID, P2_REPLAY_VALID.desired)
     `RAL_FIELD_CP_1(P2_REPLAY_VALID, P2_REPLAY_VALID.desired, 0)
     `RAL_FIELD_CP(P3_REPLAY_VALID, P3_REPLAY_VALID.desired)
     `RAL_FIELD_CP_1(P3_REPLAY_VALID, P3_REPLAY_VALID.desired, 0)
     `RAL_FIELD_CP(P4_REPLAY_VALID, P4_REPLAY_VALID.desired)
     `RAL_FIELD_CP_1(P4_REPLAY_VALID, P4_REPLAY_VALID.desired, 0)
     `RAL_FIELD_CP(P5_REPLAY_VALID, P5_REPLAY_VALID.desired)
     `RAL_FIELD_CP_1(P5_REPLAY_VALID, P5_REPLAY_VALID.desired, 0)
     `RAL_FIELD_CP(P6_REPLAY_VALID, P6_REPLAY_VALID.desired)
     `RAL_FIELD_CP_1(P6_REPLAY_VALID, P6_REPLAY_VALID.desired, 0)
     `RAL_FIELD_CP(P7_REPLAY_VALID, P7_REPLAY_VALID.desired)
     `RAL_FIELD_CP_1(P7_REPLAY_VALID, P7_REPLAY_VALID.desired, 0)
     `RAL_FIELD_CP(P8_REPLAY_VALID, P8_REPLAY_VALID.desired)
     `RAL_FIELD_CP_1(P8_REPLAY_VALID, P8_REPLAY_VALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_DIR_VALID, P0_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P0_DIR_VALID, P0_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P1_DIR_VALID, P1_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P1_DIR_VALID, P1_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P2_DIR_VALID, P2_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P2_DIR_VALID, P2_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P3_DIR_VALID, P3_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P3_DIR_VALID, P3_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P4_DIR_VALID, P4_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P4_DIR_VALID, P4_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P5_DIR_VALID, P5_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P5_DIR_VALID, P5_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P6_DIR_VALID, P6_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P6_DIR_VALID, P6_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P7_DIR_VALID, P7_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P7_DIR_VALID, P7_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P8_DIR_VALID, P8_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P8_DIR_VALID, P8_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P0_ROFRAG_VALID, P0_ROFRAG_VALID.actual)
     `RAL_FIELD_CP_1(P0_ROFRAG_VALID, P0_ROFRAG_VALID.actual, 0)
     `RAL_FIELD_CP(P1_ROFRAG_VALID, P1_ROFRAG_VALID.actual)
     `RAL_FIELD_CP_1(P1_ROFRAG_VALID, P1_ROFRAG_VALID.actual, 0)
     `RAL_FIELD_CP(P2_ROFRAG_VALID, P2_ROFRAG_VALID.actual)
     `RAL_FIELD_CP_1(P2_ROFRAG_VALID, P2_ROFRAG_VALID.actual, 0)
     `RAL_FIELD_CP(P3_ROFRAG_VALID, P3_ROFRAG_VALID.actual)
     `RAL_FIELD_CP_1(P3_ROFRAG_VALID, P3_ROFRAG_VALID.actual, 0)
     `RAL_FIELD_CP(P4_ROFRAG_VALID, P4_ROFRAG_VALID.actual)
     `RAL_FIELD_CP_1(P4_ROFRAG_VALID, P4_ROFRAG_VALID.actual, 0)
     `RAL_FIELD_CP(P5_ROFRAG_VALID, P5_ROFRAG_VALID.actual)
     `RAL_FIELD_CP_1(P5_ROFRAG_VALID, P5_ROFRAG_VALID.actual, 0)
     `RAL_FIELD_CP(P6_ROFRAG_VALID, P6_ROFRAG_VALID.actual)
     `RAL_FIELD_CP_1(P6_ROFRAG_VALID, P6_ROFRAG_VALID.actual, 0)
     `RAL_FIELD_CP(P7_ROFRAG_VALID, P7_ROFRAG_VALID.actual)
     `RAL_FIELD_CP_1(P7_ROFRAG_VALID, P7_ROFRAG_VALID.actual, 0)
     `RAL_FIELD_CP(P8_ROFRAG_VALID, P8_ROFRAG_VALID.actual)
     `RAL_FIELD_CP_1(P8_ROFRAG_VALID, P8_ROFRAG_VALID.actual, 0)
     `RAL_FIELD_CP(P0_REPLAY_VALID, P0_REPLAY_VALID.actual)
     `RAL_FIELD_CP_1(P0_REPLAY_VALID, P0_REPLAY_VALID.actual, 0)
     `RAL_FIELD_CP(P1_REPLAY_VALID, P1_REPLAY_VALID.actual)
     `RAL_FIELD_CP_1(P1_REPLAY_VALID, P1_REPLAY_VALID.actual, 0)
     `RAL_FIELD_CP(P2_REPLAY_VALID, P2_REPLAY_VALID.actual)
     `RAL_FIELD_CP_1(P2_REPLAY_VALID, P2_REPLAY_VALID.actual, 0)
     `RAL_FIELD_CP(P3_REPLAY_VALID, P3_REPLAY_VALID.actual)
     `RAL_FIELD_CP_1(P3_REPLAY_VALID, P3_REPLAY_VALID.actual, 0)
     `RAL_FIELD_CP(P4_REPLAY_VALID, P4_REPLAY_VALID.actual)
     `RAL_FIELD_CP_1(P4_REPLAY_VALID, P4_REPLAY_VALID.actual, 0)
     `RAL_FIELD_CP(P5_REPLAY_VALID, P5_REPLAY_VALID.actual)
     `RAL_FIELD_CP_1(P5_REPLAY_VALID, P5_REPLAY_VALID.actual, 0)
     `RAL_FIELD_CP(P6_REPLAY_VALID, P6_REPLAY_VALID.actual)
     `RAL_FIELD_CP_1(P6_REPLAY_VALID, P6_REPLAY_VALID.actual, 0)
     `RAL_FIELD_CP(P7_REPLAY_VALID, P7_REPLAY_VALID.actual)
     `RAL_FIELD_CP_1(P7_REPLAY_VALID, P7_REPLAY_VALID.actual, 0)
     `RAL_FIELD_CP(P8_REPLAY_VALID, P8_REPLAY_VALID.actual)
     `RAL_FIELD_CP_1(P8_REPLAY_VALID, P8_REPLAY_VALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_DIR_VALID = new("P0_DIR_VALID", "RO/V", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[0:0]"});
    P0_DIR_VALID.set_powerwell("vcccfn_gated");
    P0_DIR_VALID.set_rand_mode(0);
   P0_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P0_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P0_DIR_VALID ));

    P1_DIR_VALID = new("P1_DIR_VALID", "RO/V", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[1:1]"});
    P1_DIR_VALID.set_powerwell("vcccfn_gated");
    P1_DIR_VALID.set_rand_mode(0);
   P1_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P1_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P1_DIR_VALID ));

    P2_DIR_VALID = new("P2_DIR_VALID", "RO/V", 1, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[2:2]"});
    P2_DIR_VALID.set_powerwell("vcccfn_gated");
    P2_DIR_VALID.set_rand_mode(0);
   P2_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P2_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P2_DIR_VALID ));

    P3_DIR_VALID = new("P3_DIR_VALID", "RO/V", 1, 3, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[3:3]"});
    P3_DIR_VALID.set_powerwell("vcccfn_gated");
    P3_DIR_VALID.set_rand_mode(0);
   P3_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P3_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P3_DIR_VALID ));

    P4_DIR_VALID = new("P4_DIR_VALID", "RO/V", 1, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[4:4]"});
    P4_DIR_VALID.set_powerwell("vcccfn_gated");
    P4_DIR_VALID.set_rand_mode(0);
   P4_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P4_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P4_DIR_VALID ));

    P5_DIR_VALID = new("P5_DIR_VALID", "RO/V", 1, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[5:5]"});
    P5_DIR_VALID.set_powerwell("vcccfn_gated");
    P5_DIR_VALID.set_rand_mode(0);
   P5_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P5_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P5_DIR_VALID ));

    P6_DIR_VALID = new("P6_DIR_VALID", "RO/V", 1, 6, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[6:6]"});
    P6_DIR_VALID.set_powerwell("vcccfn_gated");
    P6_DIR_VALID.set_rand_mode(0);
   P6_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P6_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P6_DIR_VALID ));

    P7_DIR_VALID = new("P7_DIR_VALID", "RO/V", 1, 7, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[7:7]"});
    P7_DIR_VALID.set_powerwell("vcccfn_gated");
    P7_DIR_VALID.set_rand_mode(0);
   P7_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P7_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P7_DIR_VALID ));

    P8_DIR_VALID = new("P8_DIR_VALID", "RO/V", 1, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[8:8]"});
    P8_DIR_VALID.set_powerwell("vcccfn_gated");
    P8_DIR_VALID.set_rand_mode(0);
   P8_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P8_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P8_DIR_VALID ));

    P0_ROFRAG_VALID = new("P0_ROFRAG_VALID", "RO/V", 1, 9, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[9:9]"});
    P0_ROFRAG_VALID.set_powerwell("vcccfn_gated");
    P0_ROFRAG_VALID.set_rand_mode(0);
   P0_ROFRAG_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P0_ROFRAG_VALID.set_logical_path("HQMID");
    void'(add_field( P0_ROFRAG_VALID ));

    P1_ROFRAG_VALID = new("P1_ROFRAG_VALID", "RO/V", 1, 10, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[10:10]"});
    P1_ROFRAG_VALID.set_powerwell("vcccfn_gated");
    P1_ROFRAG_VALID.set_rand_mode(0);
   P1_ROFRAG_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P1_ROFRAG_VALID.set_logical_path("HQMID");
    void'(add_field( P1_ROFRAG_VALID ));

    P2_ROFRAG_VALID = new("P2_ROFRAG_VALID", "RO/V", 1, 11, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[11:11]"});
    P2_ROFRAG_VALID.set_powerwell("vcccfn_gated");
    P2_ROFRAG_VALID.set_rand_mode(0);
   P2_ROFRAG_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P2_ROFRAG_VALID.set_logical_path("HQMID");
    void'(add_field( P2_ROFRAG_VALID ));

    P3_ROFRAG_VALID = new("P3_ROFRAG_VALID", "RO/V", 1, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[12:12]"});
    P3_ROFRAG_VALID.set_powerwell("vcccfn_gated");
    P3_ROFRAG_VALID.set_rand_mode(0);
   P3_ROFRAG_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P3_ROFRAG_VALID.set_logical_path("HQMID");
    void'(add_field( P3_ROFRAG_VALID ));

    P4_ROFRAG_VALID = new("P4_ROFRAG_VALID", "RO/V", 1, 13, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[13:13]"});
    P4_ROFRAG_VALID.set_powerwell("vcccfn_gated");
    P4_ROFRAG_VALID.set_rand_mode(0);
   P4_ROFRAG_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P4_ROFRAG_VALID.set_logical_path("HQMID");
    void'(add_field( P4_ROFRAG_VALID ));

    P5_ROFRAG_VALID = new("P5_ROFRAG_VALID", "RO/V", 1, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[14:14]"});
    P5_ROFRAG_VALID.set_powerwell("vcccfn_gated");
    P5_ROFRAG_VALID.set_rand_mode(0);
   P5_ROFRAG_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P5_ROFRAG_VALID.set_logical_path("HQMID");
    void'(add_field( P5_ROFRAG_VALID ));

    P6_ROFRAG_VALID = new("P6_ROFRAG_VALID", "RO/V", 1, 15, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[15:15]"});
    P6_ROFRAG_VALID.set_powerwell("vcccfn_gated");
    P6_ROFRAG_VALID.set_rand_mode(0);
   P6_ROFRAG_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P6_ROFRAG_VALID.set_logical_path("HQMID");
    void'(add_field( P6_ROFRAG_VALID ));

    P7_ROFRAG_VALID = new("P7_ROFRAG_VALID", "RO/V", 1, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[16:16]"});
    P7_ROFRAG_VALID.set_powerwell("vcccfn_gated");
    P7_ROFRAG_VALID.set_rand_mode(0);
   P7_ROFRAG_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P7_ROFRAG_VALID.set_logical_path("HQMID");
    void'(add_field( P7_ROFRAG_VALID ));

    P8_ROFRAG_VALID = new("P8_ROFRAG_VALID", "RO/V", 1, 17, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[17:17]"});
    P8_ROFRAG_VALID.set_powerwell("vcccfn_gated");
    P8_ROFRAG_VALID.set_rand_mode(0);
   P8_ROFRAG_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P8_ROFRAG_VALID.set_logical_path("HQMID");
    void'(add_field( P8_ROFRAG_VALID ));

    P0_REPLAY_VALID = new("P0_REPLAY_VALID", "RO/V", 1, 18, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[18:18]"});
    P0_REPLAY_VALID.set_powerwell("vcccfn_gated");
    P0_REPLAY_VALID.set_rand_mode(0);
   P0_REPLAY_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P0_REPLAY_VALID.set_logical_path("HQMID");
    void'(add_field( P0_REPLAY_VALID ));

    P1_REPLAY_VALID = new("P1_REPLAY_VALID", "RO/V", 1, 19, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[19:19]"});
    P1_REPLAY_VALID.set_powerwell("vcccfn_gated");
    P1_REPLAY_VALID.set_rand_mode(0);
   P1_REPLAY_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P1_REPLAY_VALID.set_logical_path("HQMID");
    void'(add_field( P1_REPLAY_VALID ));

    P2_REPLAY_VALID = new("P2_REPLAY_VALID", "RO/V", 1, 20, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[20:20]"});
    P2_REPLAY_VALID.set_powerwell("vcccfn_gated");
    P2_REPLAY_VALID.set_rand_mode(0);
   P2_REPLAY_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P2_REPLAY_VALID.set_logical_path("HQMID");
    void'(add_field( P2_REPLAY_VALID ));

    P3_REPLAY_VALID = new("P3_REPLAY_VALID", "RO/V", 1, 21, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[21:21]"});
    P3_REPLAY_VALID.set_powerwell("vcccfn_gated");
    P3_REPLAY_VALID.set_rand_mode(0);
   P3_REPLAY_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P3_REPLAY_VALID.set_logical_path("HQMID");
    void'(add_field( P3_REPLAY_VALID ));

    P4_REPLAY_VALID = new("P4_REPLAY_VALID", "RO/V", 1, 22, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[22:22]"});
    P4_REPLAY_VALID.set_powerwell("vcccfn_gated");
    P4_REPLAY_VALID.set_rand_mode(0);
   P4_REPLAY_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P4_REPLAY_VALID.set_logical_path("HQMID");
    void'(add_field( P4_REPLAY_VALID ));

    P5_REPLAY_VALID = new("P5_REPLAY_VALID", "RO/V", 1, 23, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[23:23]"});
    P5_REPLAY_VALID.set_powerwell("vcccfn_gated");
    P5_REPLAY_VALID.set_rand_mode(0);
   P5_REPLAY_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P5_REPLAY_VALID.set_logical_path("HQMID");
    void'(add_field( P5_REPLAY_VALID ));

    P6_REPLAY_VALID = new("P6_REPLAY_VALID", "RO/V", 1, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[24:24]"});
    P6_REPLAY_VALID.set_powerwell("vcccfn_gated");
    P6_REPLAY_VALID.set_rand_mode(0);
   P6_REPLAY_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P6_REPLAY_VALID.set_logical_path("HQMID");
    void'(add_field( P6_REPLAY_VALID ));

    P7_REPLAY_VALID = new("P7_REPLAY_VALID", "RO/V", 1, 25, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[25:25]"});
    P7_REPLAY_VALID.set_powerwell("vcccfn_gated");
    P7_REPLAY_VALID.set_rand_mode(0);
   P7_REPLAY_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P7_REPLAY_VALID.set_logical_path("HQMID");
    void'(add_field( P7_REPLAY_VALID ));

    P8_REPLAY_VALID = new("P8_REPLAY_VALID", "RO/V", 1, 26, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[26:26]"});
    P8_REPLAY_VALID.set_powerwell("vcccfn_gated");
    P8_REPLAY_VALID.set_rand_mode(0);
   P8_REPLAY_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P8_REPLAY_VALID.set_logical_path("HQMID");
    void'(add_field( P8_REPLAY_VALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg) 
endclass : hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER0;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.desired)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.actual)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER0 = new("COUNTER0", "RW/V", 32, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt0_q[31:0]"});
    COUNTER0.set_powerwell("vcccfn_gated");
    COUNTER0.set_rand_mode(0);
   COUNTER0.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER0.set_logical_path("HQMID");
    void'(add_field( COUNTER0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg) 
endclass : hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER1;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.desired)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.actual)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER1 = new("COUNTER1", "RW/V", 32, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt1_q[31:0]"});
    COUNTER1.set_powerwell("vcccfn_gated");
    COUNTER1.set_rand_mode(0);
   COUNTER1.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER1.set_logical_path("HQMID");
    void'(add_field( COUNTER1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg) 
endclass : hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_SMON_COMPARE0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE0;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_SMON_COMPARE0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.desired)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.actual)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE0 = new("COMPARE0", "RW/V", 32, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp0_q[31:0]"});
    COMPARE0.set_powerwell("vcccfn_gated");
    COMPARE0.set_rand_mode(0);
   COMPARE0.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE0.set_logical_path("HQMID");
    void'(add_field( COMPARE0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_SMON_COMPARE0_reg) 
endclass : hqm_dir_pipe_bridge_CFG_SMON_COMPARE0_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_SMON_COMPARE1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE1;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_SMON_COMPARE1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.desired)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.actual)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE1 = new("COMPARE1", "RW/V", 32, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp1_q[31:0]"});
    COMPARE1.set_powerwell("vcccfn_gated");
    COMPARE1.set_rand_mode(0);
   COMPARE1.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE1.set_logical_path("HQMID");
    void'(add_field( COMPARE1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_SMON_COMPARE1_reg) 
endclass : hqm_dir_pipe_bridge_CFG_SMON_COMPARE1_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SMON_ENABLE;
  sla_ral_field SMON_0TRIGGER_ENABLE;
  sla_ral_field RSVZ0;
  sla_ral_field SMON0_FUNCTION;
  sla_ral_field SMON0_FUNCTION_COMPARE;
  sla_ral_field SMON1_FUNCTION;
  sla_ral_field SMON1_FUNCTION_COMPARE;
  sla_ral_field SMON_MODE;
  sla_ral_field STOPCOUNTEROVFL;
  sla_ral_field INTCOUNTEROVFL;
  sla_ral_field STATCOUNTER0OVFL;
  sla_ral_field STATCOUNTER1OVFL;
  sla_ral_field STOPTIMEROVFL;
  sla_ral_field INTTIMEROVFL;
  sla_ral_field STATTIMEROVFL;
  sla_ral_field RSVZ1;
  sla_ral_field TIMER_PRESCALE;
  sla_ral_field RSVZ2;
  sla_ral_field VERSION;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.desired, 0)
     `RAL_FIELD_CP(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.desired, 0,1)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.desired)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.desired, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.desired)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.desired, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.desired)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.desired)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.desired, 0)
     `RAL_FIELD_CP(VERSION, VERSION.desired)
     `RAL_FIELD_CP_2(VERSION, VERSION.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.actual, 0)
     `RAL_FIELD_CP(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.actual, 0,1)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.actual)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.actual, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.actual)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.actual, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.actual)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.actual)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.actual, 0)
     `RAL_FIELD_CP(VERSION, VERSION.actual)
     `RAL_FIELD_CP_2(VERSION, VERSION.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SMON_ENABLE = new("SMON_ENABLE", "RW/V", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[0:0]"});
    SMON_ENABLE.set_powerwell("vcccfn_gated");
    SMON_ENABLE.set_rand_mode(0);
   SMON_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_ENABLE.set_logical_path("HQMID");
    void'(add_field( SMON_ENABLE ));

    SMON_0TRIGGER_ENABLE = new("SMON_0TRIGGER_ENABLE", "RW/V", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[1:1]"});
    SMON_0TRIGGER_ENABLE.set_powerwell("vcccfn_gated");
    SMON_0TRIGGER_ENABLE.set_rand_mode(0);
   SMON_0TRIGGER_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_0TRIGGER_ENABLE.set_logical_path("HQMID");
    void'(add_field( SMON_0TRIGGER_ENABLE ));

    RSVZ0 = new("RSVZ0", "RW/V", 2, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[3:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    SMON0_FUNCTION = new("SMON0_FUNCTION", "RW/V", 3, 4, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[6:4]"});
    SMON0_FUNCTION.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION.set_rand_mode(0);
   SMON0_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION ));

    SMON0_FUNCTION_COMPARE = new("SMON0_FUNCTION_COMPARE", "RW/V", 1, 7, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[7:7]"});
    SMON0_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION_COMPARE.set_rand_mode(0);
   SMON0_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION_COMPARE ));

    SMON1_FUNCTION = new("SMON1_FUNCTION", "RW/V", 3, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[10:8]"});
    SMON1_FUNCTION.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION.set_rand_mode(0);
   SMON1_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION ));

    SMON1_FUNCTION_COMPARE = new("SMON1_FUNCTION_COMPARE", "RW/V", 1, 11, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[11:11]"});
    SMON1_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION_COMPARE.set_rand_mode(0);
   SMON1_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION_COMPARE ));

    SMON_MODE = new("SMON_MODE", "RW/V", 4, 12, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[15:12]"});
    SMON_MODE.set_powerwell("vcccfn_gated");
    SMON_MODE.set_rand_mode(0);
   SMON_MODE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_MODE.set_logical_path("HQMID");
    void'(add_field( SMON_MODE ));

    STOPCOUNTEROVFL = new("STOPCOUNTEROVFL", "RW/V", 1, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[16:16]"});
    STOPCOUNTEROVFL.set_powerwell("vcccfn_gated");
    STOPCOUNTEROVFL.set_rand_mode(0);
   STOPCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPCOUNTEROVFL ));

    INTCOUNTEROVFL = new("INTCOUNTEROVFL", "RW/V", 1, 17, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[17:17]"});
    INTCOUNTEROVFL.set_powerwell("vcccfn_gated");
    INTCOUNTEROVFL.set_rand_mode(0);
   INTCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( INTCOUNTEROVFL ));

    STATCOUNTER0OVFL = new("STATCOUNTER0OVFL", "RW/V", 1, 18, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[18:18]"});
    STATCOUNTER0OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER0OVFL.set_rand_mode(0);
   STATCOUNTER0OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER0OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER0OVFL ));

    STATCOUNTER1OVFL = new("STATCOUNTER1OVFL", "RW/V", 1, 19, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[19:19]"});
    STATCOUNTER1OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER1OVFL.set_rand_mode(0);
   STATCOUNTER1OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER1OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER1OVFL ));

    STOPTIMEROVFL = new("STOPTIMEROVFL", "RW/V", 1, 20, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[20:20]"});
    STOPTIMEROVFL.set_powerwell("vcccfn_gated");
    STOPTIMEROVFL.set_rand_mode(0);
   STOPTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPTIMEROVFL ));

    INTTIMEROVFL = new("INTTIMEROVFL", "RW/V", 1, 21, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[21:21]"});
    INTTIMEROVFL.set_powerwell("vcccfn_gated");
    INTTIMEROVFL.set_rand_mode(0);
   INTTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( INTTIMEROVFL ));

    STATTIMEROVFL = new("STATTIMEROVFL", "RW/V", 1, 22, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[22:22]"});
    STATTIMEROVFL.set_powerwell("vcccfn_gated");
    STATTIMEROVFL.set_rand_mode(0);
   STATTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STATTIMEROVFL ));

    RSVZ1 = new("RSVZ1", "RW/V", 1, 23, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[23:23]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    TIMER_PRESCALE = new("TIMER_PRESCALE", "RW/V", 5, 24, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[28:24]"});
    TIMER_PRESCALE.set_powerwell("vcccfn_gated");
    TIMER_PRESCALE.set_rand_mode(0);
   TIMER_PRESCALE.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER_PRESCALE.set_logical_path("HQMID");
    void'(add_field( TIMER_PRESCALE ));

    RSVZ2 = new("RSVZ2", "RW/V", 1, 29, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[29:29]"});
    RSVZ2.set_powerwell("vcccfn_gated");
    RSVZ2.set_rand_mode(0);
   RSVZ2.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ2.set_logical_path("HQMID");
    void'(add_field( RSVZ2 ));

    VERSION = new("VERSION", "RO", 2, 30, {"NoSignal"});
    VERSION.set_powerwell("vcccfn_gated");
    VERSION.set_rand_mode(0);
   VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION0_reg) 
endclass : hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION0_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE0;
  sla_ral_field MODE1;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.desired)
     `RAL_FIELD_CP_8(MODE0, MODE0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.desired)
     `RAL_FIELD_CP_8(MODE1, MODE1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.actual)
     `RAL_FIELD_CP_8(MODE0, MODE0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.actual)
     `RAL_FIELD_CP_8(MODE1, MODE1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE0 = new("MODE0", "RW/V", 8, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[7:0]"});
    MODE0.set_powerwell("vcccfn_gated");
    MODE0.set_rand_mode(0);
   MODE0.set_reset_signame("hqm_inp_gated_rst_n");
    MODE0.set_logical_path("HQMID");
    void'(add_field( MODE0 ));

    MODE1 = new("MODE1", "RW/V", 8, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[15:8]"});
    MODE1.set_powerwell("vcccfn_gated");
    MODE1.set_rand_mode(0);
   MODE1.set_reset_signame("hqm_inp_gated_rst_n");
    MODE1.set_logical_path("HQMID");
    void'(add_field( MODE1 ));

    RSVZ0 = new("RSVZ0", "RW", 16, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[31:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION1_reg) 
endclass : hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION1_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MAXVALUE;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.desired)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.actual)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MAXVALUE = new("MAXVALUE", "RW/V", 32, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_maxval_q[31:0]"});
    MAXVALUE.set_powerwell("vcccfn_gated");
    MAXVALUE.set_rand_mode(0);
   MAXVALUE.set_reset_signame("hqm_inp_gated_rst_n");
    MAXVALUE.set_logical_path("HQMID");
    void'(add_field( MAXVALUE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg) 
endclass : hqm_dir_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_SMON_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_SMON_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER, TIMER.desired)
     `RAL_FIELD_CP_16(TIMER, TIMER.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER, TIMER.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER, TIMER.actual)
     `RAL_FIELD_CP_16(TIMER, TIMER.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER, TIMER.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER = new("TIMER", "RW/V", 32, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_timer_q[31:0]"});
    TIMER.set_powerwell("vcccfn_gated");
    TIMER.set_rand_mode(0);
   TIMER.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER.set_logical_path("HQMID");
    void'(add_field( TIMER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_SMON_TIMER_reg) 
endclass : hqm_dir_pipe_bridge_CFG_SMON_TIMER_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_SYNDROME_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDDATA;
  sla_ral_field SYNDTYPE;
  sla_ral_field SYNDVALID;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_SYNDROME_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.desired)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.desired)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.desired, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.desired)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.actual)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.actual)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.actual, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.actual)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDDATA = new("SYNDDATA", "RO/V", 28, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
    SYNDDATA.set_powerwell("vcccfn_gated");
    SYNDDATA.set_rand_mode(0);
   SYNDDATA.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDDATA.set_logical_path("HQMID");
    void'(add_field( SYNDDATA ));

    SYNDTYPE = new("SYNDTYPE", "RO/V", 3, 28, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
    SYNDTYPE.set_powerwell("vcccfn_gated");
    SYNDTYPE.set_rand_mode(0);
   SYNDTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDTYPE.set_logical_path("HQMID");
    void'(add_field( SYNDTYPE ));

    SYNDVALID = new("SYNDVALID", "RW/1C/V", 1, 31, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[31:31]"});
    SYNDVALID.set_powerwell("vcccfn_gated");
    SYNDVALID.set_rand_mode(0);
   SYNDVALID.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDVALID.set_logical_path("HQMID");
    void'(add_field( SYNDVALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_SYNDROME_00_reg) 
endclass : hqm_dir_pipe_bridge_CFG_SYNDROME_00_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_SYNDROME_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDDATA;
  sla_ral_field SYNDTYPE;
  sla_ral_field SYNDVALID;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_SYNDROME_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.desired)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.desired)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.desired, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.desired)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.actual)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.actual)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.actual, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.actual)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDDATA = new("SYNDDATA", "RO/V", 28, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
    SYNDDATA.set_powerwell("vcccfn_gated");
    SYNDDATA.set_rand_mode(0);
   SYNDDATA.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDDATA.set_logical_path("HQMID");
    void'(add_field( SYNDDATA ));

    SYNDTYPE = new("SYNDTYPE", "RO/V", 3, 28, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
    SYNDTYPE.set_powerwell("vcccfn_gated");
    SYNDTYPE.set_rand_mode(0);
   SYNDTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDTYPE.set_logical_path("HQMID");
    void'(add_field( SYNDTYPE ));

    SYNDVALID = new("SYNDVALID", "RW/1C/V", 1, 31, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[31:31]"});
    SYNDVALID.set_powerwell("vcccfn_gated");
    SYNDVALID.set_rand_mode(0);
   SYNDVALID.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDVALID.set_logical_path("HQMID");
    void'(add_field( SYNDVALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_SYNDROME_01_reg) 
endclass : hqm_dir_pipe_bridge_CFG_SYNDROME_01_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_UNIT_IDLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PIPE_IDLE;
  sla_ral_field UNIT_IDLE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_UNIT_IDLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PIPE_IDLE, PIPE_IDLE.desired)
     `RAL_FIELD_CP_1(PIPE_IDLE, PIPE_IDLE.desired, 0)
     `RAL_FIELD_CP(UNIT_IDLE, UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(UNIT_IDLE, UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PIPE_IDLE, PIPE_IDLE.actual)
     `RAL_FIELD_CP_1(PIPE_IDLE, PIPE_IDLE.actual, 0)
     `RAL_FIELD_CP(UNIT_IDLE, UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(UNIT_IDLE, UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PIPE_IDLE = new("PIPE_IDLE", "RO/V", 1, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_idle.internal_f[0:0]"});
    PIPE_IDLE.set_powerwell("vcccfn_gated");
    PIPE_IDLE.set_rand_mode(0);
   PIPE_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    PIPE_IDLE.set_logical_path("HQMID");
    void'(add_field( PIPE_IDLE ));

    UNIT_IDLE = new("UNIT_IDLE", "RO/V", 1, 1, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_idle.internal_f[1:1]"});
    UNIT_IDLE.set_powerwell("vcccfn_gated");
    UNIT_IDLE.set_rand_mode(0);
   UNIT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( UNIT_IDLE ));

    RSVZ0 = new("RSVZ0", "RO/V", 30, 2, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_idle.internal_f[31:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_UNIT_IDLE_reg) 
endclass : hqm_dir_pipe_bridge_CFG_UNIT_IDLE_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_UNIT_TIMEOUT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MULTIPLIER;
  sla_ral_field THRESHOLD;
  sla_ral_field RSVZ0;
  sla_ral_field ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_UNIT_TIMEOUT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.desired)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.desired)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.desired)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.actual)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.actual)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.actual)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MULTIPLIER = new("MULTIPLIER", "RO", 5, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_timeout.internal_f[4:0]"});
    MULTIPLIER.set_powerwell("vcccfn_gated");
    MULTIPLIER.set_rand_mode(0);
   MULTIPLIER.set_reset_signame("hqm_inp_gated_rst_n");
    MULTIPLIER.set_logical_path("HQMID");
    void'(add_field( MULTIPLIER ));

    THRESHOLD = new("THRESHOLD", "RW", 11, 5, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_timeout.internal_f[15:5]"});
    THRESHOLD.set_powerwell("vcccfn_gated");
    THRESHOLD.set_rand_mode(0);
   THRESHOLD.set_reset_signame("hqm_inp_gated_rst_n");
    THRESHOLD.set_logical_path("HQMID");
    void'(add_field( THRESHOLD ));

    RSVZ0 = new("RSVZ0", "RW/V", 15, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_timeout.internal_f[30:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    ENABLE = new("ENABLE", "RW", 1, 31, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_timeout.internal_f[31:31]"});
    ENABLE.set_powerwell("vcccfn_gated");
    ENABLE.set_rand_mode(0);
   ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE.set_logical_path("HQMID");
    void'(add_field( ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_UNIT_TIMEOUT_reg) 
endclass : hqm_dir_pipe_bridge_CFG_UNIT_TIMEOUT_reg

// ================================================

class hqm_dir_pipe_bridge_CFG_PATCH_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DELAY_CLOCKOFF;
  sla_ral_field DELAY_CLKOFF_BYPASS;
  sla_ral_field RSVZ1;
  sla_ral_field RSVZ0;
  sla_ral_field DISABLE_CLOCKOFF;

  // --------------------------
  `ovm_object_utils(hqm_dir_pipe_bridge_CFG_PATCH_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.desired, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.actual, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DELAY_CLOCKOFF = new("DELAY_CLOCKOFF", "RW", 8, 0, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_patch_control.internal_f[7:0]"});
    DELAY_CLOCKOFF.set_powerwell("vcccfn_gated");
    DELAY_CLOCKOFF.set_rand_mode(0);
   DELAY_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DELAY_CLOCKOFF ));

    DELAY_CLKOFF_BYPASS = new("DELAY_CLKOFF_BYPASS", "RW", 6, 8, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_patch_control.internal_f[13:8]"});
    DELAY_CLKOFF_BYPASS.set_powerwell("vcccfn_gated");
    DELAY_CLKOFF_BYPASS.set_rand_mode(0);
   DELAY_CLKOFF_BYPASS.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLKOFF_BYPASS.set_logical_path("HQMID");
    void'(add_field( DELAY_CLKOFF_BYPASS ));

    RSVZ1 = new("RSVZ1", "RW", 2, 14, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_patch_control.internal_f[15:14]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    RSVZ0 = new("RSVZ0", "RW", 15, 16, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_patch_control.internal_f[30:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    DISABLE_CLOCKOFF = new("DISABLE_CLOCKOFF", "RW", 1, 31, {"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_patch_control.internal_f[31:31]"});
    DISABLE_CLOCKOFF.set_powerwell("vcccfn_gated");
    DISABLE_CLOCKOFF.set_rand_mode(0);
   DISABLE_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DISABLE_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DISABLE_CLOCKOFF ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_dir_pipe_bridge_CFG_PATCH_CONTROL_reg) 
endclass : hqm_dir_pipe_bridge_CFG_PATCH_CONTROL_reg

// ================================================

class hqm_dir_pipe_bridge_file extends sla_ral_file;

  rand hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0_reg CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0;
  rand hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1_reg CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1;
  rand hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0_reg CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0;
  rand hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1_reg CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1;
  rand hqm_dir_pipe_bridge_CFG_DIR_CSR_CONTROL_reg CFG_DIR_CSR_CONTROL;
  rand hqm_dir_pipe_bridge_CFG_UNIT_VERSION_reg CFG_UNIT_VERSION;
  rand hqm_dir_pipe_bridge_CFG_CONTROL_GENERAL_reg CFG_CONTROL_GENERAL;
  rand hqm_dir_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg CFG_CONTROL_PIPELINE_CREDITS;
  rand hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg CFG_DETECT_FEATURE_OPERATION_00;
  rand hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_01_reg CFG_DETECT_FEATURE_OPERATION_01;
  rand hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg CFG_DIAGNOSTIC_AW_STATUS;
  rand hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg CFG_DIAGNOSTIC_AW_STATUS_01;
  rand hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg CFG_DIAGNOSTIC_AW_STATUS_02;
  rand hqm_dir_pipe_bridge_CFG_ERROR_INJECT_reg CFG_ERROR_INJECT;
  rand hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_DQED_IF_reg CFG_FIFO_WMSTAT_DP_DQED_IF;
  rand hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF_reg CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF;
  rand hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF_reg CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF;
  rand hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF_reg CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF;
  rand hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF_reg CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF;
  rand hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF_reg CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF;
  rand hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF_reg CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF;
  rand hqm_dir_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg CFG_HW_AGITATE_CONTROL;
  rand hqm_dir_pipe_bridge_CFG_HW_AGITATE_SELECT_reg CFG_HW_AGITATE_SELECT;
  rand hqm_dir_pipe_bridge_CFG_INTERFACE_STATUS_reg CFG_INTERFACE_STATUS;
  rand hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg CFG_PIPE_HEALTH_HOLD_00;
  rand hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg CFG_PIPE_HEALTH_VALID_00;
  rand hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg CFG_SMON_ACTIVITYCOUNTER0;
  rand hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg CFG_SMON_ACTIVITYCOUNTER1;
  rand hqm_dir_pipe_bridge_CFG_SMON_COMPARE0_reg CFG_SMON_COMPARE0;
  rand hqm_dir_pipe_bridge_CFG_SMON_COMPARE1_reg CFG_SMON_COMPARE1;
  rand hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION0_reg CFG_SMON_CONFIGURATION0;
  rand hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION1_reg CFG_SMON_CONFIGURATION1;
  rand hqm_dir_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg CFG_SMON_MAXIMUM_TIMER;
  rand hqm_dir_pipe_bridge_CFG_SMON_TIMER_reg CFG_SMON_TIMER;
  rand hqm_dir_pipe_bridge_CFG_SYNDROME_00_reg CFG_SYNDROME_00;
  rand hqm_dir_pipe_bridge_CFG_SYNDROME_01_reg CFG_SYNDROME_01;
  rand hqm_dir_pipe_bridge_CFG_UNIT_IDLE_reg CFG_UNIT_IDLE;
  rand hqm_dir_pipe_bridge_CFG_UNIT_TIMEOUT_reg CFG_UNIT_TIMEOUT;
  rand hqm_dir_pipe_bridge_CFG_PATCH_CONTROL_reg CFG_PATCH_CONTROL;

  `ovm_component_utils(hqm_dir_pipe_bridge_file)

  function new(string n, ovm_component p);
    super.new(n,p);
  endfunction

  // --------------------------
  function void build();
    regfilename = this.get_name();

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0";
    `endif
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0 = hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0_reg::type_id::create("CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0", this);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000000, 32, 32'b11111110111111001111101011111000);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_space_addr("MSG", 28'h4000000);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_space_addr("MEM-SB",28'h4000000);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_space_addr("MEM", 28'h4000000);
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_space("MEM");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_msg_opcode("MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0:dont_test") ) CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0"));
      end
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.PRI0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_dir_0.internal_f[7:0]"});
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.PRI1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_dir_0.internal_f[15:8]"});
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.PRI2.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_dir_0.internal_f[23:16]"});
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_0.PRI3.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_dir_0.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1";
    `endif
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1 = hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1_reg::type_id::create("CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1", this);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000004, 32, 32'b00000000000000000000000000000000);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_space_addr("MSG", 28'h4000004);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_space_addr("MEM-SB",28'h4000004);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_space_addr("MEM", 28'h4000004);
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_space("MEM");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_msg_opcode("MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1:dont_test") ) CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1"));
      end
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_DIR_1.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_dir_1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0";
    `endif
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0 = hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0_reg::type_id::create("CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0", this);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000008, 32, 32'b11111110111111001111101011111000);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_space_addr("MSG", 28'h4000008);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_space_addr("MEM-SB",28'h4000008);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_space_addr("MEM", 28'h4000008);
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_space("MEM");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_msg_opcode("MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0:dont_test") ) CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0"));
      end
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.PRI0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_replay_0.internal_f[7:0]"});
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.PRI1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_replay_0.internal_f[15:8]"});
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.PRI2.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_replay_0.internal_f[23:16]"});
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_0.PRI3.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_replay_0.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1";
    `endif
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1 = hqm_dir_pipe_bridge_CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1_reg::type_id::create("CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1", this);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_cfg(16'h0, 16'h0, 16'h0, 28'h400000C, 32, 32'b00000000000000000000000000000000);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_space_addr("MSG", 28'h400000C);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_space_addr("MEM-SB",28'h400000C);
    CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_space_addr("MEM", 28'h400000C);
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_space("MEM");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_msg_opcode("MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1:dont_test") ) CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1"));
      end
   CFG_CONTROL_ARB_WEIGHTS_TQPRI_REPLAY_1.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_arb_weights_tqpri_replay_1.status[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIR_CSR_CONTROL";
    `endif
    CFG_DIR_CSR_CONTROL = hqm_dir_pipe_bridge_CFG_DIR_CSR_CONTROL_reg::type_id::create("CFG_DIR_CSR_CONTROL", this);
    CFG_DIR_CSR_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000010, 32, 32'b00000000000000000000000000000000);
    CFG_DIR_CSR_CONTROL.set_space_addr("MSG", 28'h4000010);
    CFG_DIR_CSR_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_CSR_CONTROL.set_space_addr("MEM-SB",28'h4000010);
    CFG_DIR_CSR_CONTROL.set_space_addr("MEM", 28'h4000010);
      CFG_DIR_CSR_CONTROL.set_space("MEM");
      CFG_DIR_CSR_CONTROL.set_msg_opcode("MEM-SB");
      CFG_DIR_CSR_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_DIR_CSR_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_DIR_CSR_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_CSR_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_DIR_CSR_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_CSR_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIR_CSR_CONTROL:dont_test") ) CFG_DIR_CSR_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_CSR_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIR_CSR_CONTROL"));
      end
   CFG_DIR_CSR_CONTROL.INT_COR_ALARM_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[0:0]"});
   CFG_DIR_CSR_CONTROL.INT_COR_SYND_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[1:1]"});
   CFG_DIR_CSR_CONTROL.INT_UNCR_ALARM_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[2:2]"});
   CFG_DIR_CSR_CONTROL.INT_UNC_SYND_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[3:3]"});
   CFG_DIR_CSR_CONTROL.INT_INF0_ALARM_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[4:4]"});
   CFG_DIR_CSR_CONTROL.INT_INF0_SYND_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[5:5]"});
   CFG_DIR_CSR_CONTROL.INT_INF1_ALARM_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[6:6]"});
   CFG_DIR_CSR_CONTROL.INT_INF1_SYND_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[7:7]"});
   CFG_DIR_CSR_CONTROL.INT_INF2_ALARM_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[8:8]"});
   CFG_DIR_CSR_CONTROL.INT_INF2_SYND_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[9:9]"});
   CFG_DIR_CSR_CONTROL.INT_INF3_ALARM_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[10:10]"});
   CFG_DIR_CSR_CONTROL.INT_INF3_SYND_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[11:11]"});
   CFG_DIR_CSR_CONTROL.INT_INF4_ALARM_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[12:12]"});
   CFG_DIR_CSR_CONTROL.INT_INF4_SYND_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[13:13]"});
   CFG_DIR_CSR_CONTROL.INT_INF5_ALARM_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[14:14]"});
   CFG_DIR_CSR_CONTROL.INT_INF5_SYND_DIS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[15:15]"});
   CFG_DIR_CSR_CONTROL.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_dir_csr_control.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_VERSION";
    `endif
    CFG_UNIT_VERSION = hqm_dir_pipe_bridge_CFG_UNIT_VERSION_reg::type_id::create("CFG_UNIT_VERSION", this);
    CFG_UNIT_VERSION.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000014, 32, 32'b00000000000000000000000000000000);
    CFG_UNIT_VERSION.set_space_addr("MSG", 28'h4000014);
    CFG_UNIT_VERSION.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_VERSION.set_space_addr("MEM-SB",28'h4000014);
    CFG_UNIT_VERSION.set_space_addr("MEM", 28'h4000014);
      CFG_UNIT_VERSION.set_space("MEM");
      CFG_UNIT_VERSION.set_msg_opcode("MEM-SB");
      CFG_UNIT_VERSION.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_VERSION.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_VERSION.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_VERSION.set_user_attribute("diag_reg", "0");
      CFG_UNIT_VERSION.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_UNIT_VERSION.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_VERSION.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_VERSION:dont_test") ) CFG_UNIT_VERSION.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_VERSION )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_VERSION"));
      end
   CFG_UNIT_VERSION.UNIT_VERSION.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_version.status[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_GENERAL";
    `endif
    CFG_CONTROL_GENERAL = hqm_dir_pipe_bridge_CFG_CONTROL_GENERAL_reg::type_id::create("CFG_CONTROL_GENERAL", this);
    CFG_CONTROL_GENERAL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000000, 32, 32'b00000000000000000000000000000000);
    CFG_CONTROL_GENERAL.set_space_addr("MSG", 32'h0C000000);
    CFG_CONTROL_GENERAL.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_GENERAL.set_space_addr("MEM-SB",28'hC000000);
    CFG_CONTROL_GENERAL.set_space_addr("MEM", 32'h0C000000);
      CFG_CONTROL_GENERAL.set_space("MEM");
      CFG_CONTROL_GENERAL.set_msg_opcode("MEM-SB");
      CFG_CONTROL_GENERAL.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_GENERAL.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_GENERAL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_GENERAL.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_GENERAL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_GENERAL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_GENERAL:dont_test") ) CFG_CONTROL_GENERAL.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_GENERAL )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_GENERAL"));
      end
   CFG_CONTROL_GENERAL.CHICKEN_SIM.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_general.internal_f[0:0]"});
   CFG_CONTROL_GENERAL.CHICKEN_50.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_general.internal_f[1:1]"});
   CFG_CONTROL_GENERAL.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_general.internal_f[31:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_PIPELINE_CREDITS";
    `endif
    CFG_CONTROL_PIPELINE_CREDITS = hqm_dir_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg::type_id::create("CFG_CONTROL_PIPELINE_CREDITS", this);
    CFG_CONTROL_PIPELINE_CREDITS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000004, 32, 32'b00000000000001001010010100101001);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("MSG", 32'h0C000004);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("MEM-SB",28'hC000004);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("MEM", 32'h0C000004);
      CFG_CONTROL_PIPELINE_CREDITS.set_space("MEM");
      CFG_CONTROL_PIPELINE_CREDITS.set_msg_opcode("MEM-SB");
      CFG_CONTROL_PIPELINE_CREDITS.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_PIPELINE_CREDITS.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_PIPELINE_CREDITS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_PIPELINE_CREDITS.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_PIPELINE_CREDITS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_PIPELINE_CREDITS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_PIPELINE_CREDITS:dont_test") ) CFG_CONTROL_PIPELINE_CREDITS.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_PIPELINE_CREDITS )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_PIPELINE_CREDITS"));
      end
   CFG_CONTROL_PIPELINE_CREDITS.DP_LSP_ENQ_DIR.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_pipeline_credits.internal_f[4:0]"});
   CFG_CONTROL_PIPELINE_CREDITS.DP_DQED_DIR.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_pipeline_credits.internal_f[9:5]"});
   CFG_CONTROL_PIPELINE_CREDITS.DP_LSP_ENQ_DIR_RORPLY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_pipeline_credits.internal_f[14:10]"});
   CFG_CONTROL_PIPELINE_CREDITS.DP_DQED_RORPLY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_pipeline_credits.internal_f[19:15]"});
   CFG_CONTROL_PIPELINE_CREDITS.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_control_pipeline_credits.internal_f[31:20]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DETECT_FEATURE_OPERATION_00";
    `endif
    CFG_DETECT_FEATURE_OPERATION_00 = hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_00_reg::type_id::create("CFG_DETECT_FEATURE_OPERATION_00", this);
    CFG_DETECT_FEATURE_OPERATION_00.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000008, 32, 32'b00000000000000000000000000000000);
    CFG_DETECT_FEATURE_OPERATION_00.set_space_addr("MSG", 32'h0C000008);
    CFG_DETECT_FEATURE_OPERATION_00.set_space_addr("msg_bus_port", 'h21);
    CFG_DETECT_FEATURE_OPERATION_00.set_space_addr("MEM-SB",28'hC000008);
    CFG_DETECT_FEATURE_OPERATION_00.set_space_addr("MEM", 32'h0C000008);
      CFG_DETECT_FEATURE_OPERATION_00.set_space("MEM");
      CFG_DETECT_FEATURE_OPERATION_00.set_msg_opcode("MEM-SB");
      CFG_DETECT_FEATURE_OPERATION_00.set_fid(4'h0, "MEM-SB");
  	CFG_DETECT_FEATURE_OPERATION_00.set_bar(4'h2, "MEM-SB");
      CFG_DETECT_FEATURE_OPERATION_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DETECT_FEATURE_OPERATION_00.set_user_attribute("diag_reg", "0");
      CFG_DETECT_FEATURE_OPERATION_00.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DETECT_FEATURE_OPERATION_00.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DETECT_FEATURE_OPERATION_00:dont_test") ) CFG_DETECT_FEATURE_OPERATION_00.set_test_reg(1'b0);
      if (!add_reg( CFG_DETECT_FEATURE_OPERATION_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DETECT_FEATURE_OPERATION_00"));
      end
   CFG_DETECT_FEATURE_OPERATION_00.F_DIR_CNT_PRI0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[0:0]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_DIR_CNT_PRI1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[1:1]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_DIR_CNT_PRI2.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[2:2]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_DIR_CNT_PRI3.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[3:3]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_DIR_CNT_PRI4.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[4:4]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_DIR_CNT_PRI5.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[5:5]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_DIR_CNT_PRI6.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[6:6]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_DIR_CNT_PRI7.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[7:7]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_ROFRAG_CNT.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[8:8]"});
   CFG_DETECT_FEATURE_OPERATION_00.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[15:9]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_REPLAY_CNT_PRI0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[16:16]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_REPLAY_CNT_PRI1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[17:17]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_REPLAY_CNT_PRI2.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[18:18]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_REPLAY_CNT_PRI3.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[19:19]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_REPLAY_CNT_PRI4.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[20:20]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_REPLAY_CNT_PRI5.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[21:21]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_REPLAY_CNT_PRI6.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[22:22]"});
   CFG_DETECT_FEATURE_OPERATION_00.F_REPLAY_CNT_PRI7.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[23:23]"});
   CFG_DETECT_FEATURE_OPERATION_00.RSVZ1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_00.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DETECT_FEATURE_OPERATION_01";
    `endif
    CFG_DETECT_FEATURE_OPERATION_01 = hqm_dir_pipe_bridge_CFG_DETECT_FEATURE_OPERATION_01_reg::type_id::create("CFG_DETECT_FEATURE_OPERATION_01", this);
    CFG_DETECT_FEATURE_OPERATION_01.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00000C, 32, 32'b00000000000000000000000000000000);
    CFG_DETECT_FEATURE_OPERATION_01.set_space_addr("MSG", 32'h0C00000C);
    CFG_DETECT_FEATURE_OPERATION_01.set_space_addr("msg_bus_port", 'h21);
    CFG_DETECT_FEATURE_OPERATION_01.set_space_addr("MEM-SB",28'hC00000C);
    CFG_DETECT_FEATURE_OPERATION_01.set_space_addr("MEM", 32'h0C00000C);
      CFG_DETECT_FEATURE_OPERATION_01.set_space("MEM");
      CFG_DETECT_FEATURE_OPERATION_01.set_msg_opcode("MEM-SB");
      CFG_DETECT_FEATURE_OPERATION_01.set_fid(4'h0, "MEM-SB");
  	CFG_DETECT_FEATURE_OPERATION_01.set_bar(4'h2, "MEM-SB");
      CFG_DETECT_FEATURE_OPERATION_01.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DETECT_FEATURE_OPERATION_01.set_user_attribute("diag_reg", "0");
      CFG_DETECT_FEATURE_OPERATION_01.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DETECT_FEATURE_OPERATION_01.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DETECT_FEATURE_OPERATION_01:dont_test") ) CFG_DETECT_FEATURE_OPERATION_01.set_test_reg(1'b0);
      if (!add_reg( CFG_DETECT_FEATURE_OPERATION_01 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DETECT_FEATURE_OPERATION_01"));
      end
   CFG_DETECT_FEATURE_OPERATION_01.A_DIR_CNT_PRI0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[0:0]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_DIR_CNT_PRI1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[1:1]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_DIR_CNT_PRI2.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[2:2]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_DIR_CNT_PRI3.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[3:3]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_DIR_CNT_PRI4.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[4:4]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_DIR_CNT_PRI5.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[5:5]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_DIR_CNT_PRI6.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[6:6]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_DIR_CNT_PRI7.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[7:7]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_ROFRAG_CNT.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[8:8]"});
   CFG_DETECT_FEATURE_OPERATION_01.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[15:9]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_REPLAY_CNT_PRI0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[16:16]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_REPLAY_CNT_PRI1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[17:17]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_REPLAY_CNT_PRI2.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[18:18]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_REPLAY_CNT_PRI3.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[19:19]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_REPLAY_CNT_PRI4.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[20:20]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_REPLAY_CNT_PRI5.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[21:21]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_REPLAY_CNT_PRI6.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[22:22]"});
   CFG_DETECT_FEATURE_OPERATION_01.A_REPLAY_CNT_PRI7.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[23:23]"});
   CFG_DETECT_FEATURE_OPERATION_01.RSVZ1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[30:24]"});
   CFG_DETECT_FEATURE_OPERATION_01.INTERRUPT.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_detect_feature_operation_01.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_AW_STATUS";
    `endif
    CFG_DIAGNOSTIC_AW_STATUS = hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg::type_id::create("CFG_DIAGNOSTIC_AW_STATUS", this);
    CFG_DIAGNOSTIC_AW_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000010, 32, 32'b00000000000000000000000000000000);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MSG", 32'h0C000010);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MEM-SB",28'hC000010);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MEM", 32'h0C000010);
      CFG_DIAGNOSTIC_AW_STATUS.set_space("MEM");
      CFG_DIAGNOSTIC_AW_STATUS.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_AW_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_AW_STATUS:dont_test") ) CFG_DIAGNOSTIC_AW_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_AW_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_AW_STATUS"));
      end
   CFG_DIAGNOSTIC_AW_STATUS.RW_NXTHP_P2_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[0:0]"});
   CFG_DIAGNOSTIC_AW_STATUS.RW_NXTHP_P3_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[1:1]"});
   CFG_DIAGNOSTIC_AW_STATUS.RW_NXTHP_P0_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[2:2]"});
   CFG_DIAGNOSTIC_AW_STATUS.RW_NXTHP_P1_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[3:3]"});
   CFG_DIAGNOSTIC_AW_STATUS.RW_NXTHP_P2_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[4:4]"});
   CFG_DIAGNOSTIC_AW_STATUS.RW_NXTHP_P3_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status.status[5:5]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_AW_STATUS_01";
    `endif
    CFG_DIAGNOSTIC_AW_STATUS_01 = hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_01_reg::type_id::create("CFG_DIAGNOSTIC_AW_STATUS_01", this);
    CFG_DIAGNOSTIC_AW_STATUS_01.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000014, 32, 32'b00000000000000000000000000000000);
    CFG_DIAGNOSTIC_AW_STATUS_01.set_space_addr("MSG", 32'h0C000014);
    CFG_DIAGNOSTIC_AW_STATUS_01.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_AW_STATUS_01.set_space_addr("MEM-SB",28'hC000014);
    CFG_DIAGNOSTIC_AW_STATUS_01.set_space_addr("MEM", 32'h0C000014);
      CFG_DIAGNOSTIC_AW_STATUS_01.set_space("MEM");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_AW_STATUS_01.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_AW_STATUS_01.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_AW_STATUS_01:dont_test") ) CFG_DIAGNOSTIC_AW_STATUS_01.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_AW_STATUS_01 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_AW_STATUS_01"));
      end
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_ROFRAG_HP_P1_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[0:0]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_ROFRAG_HP_P2_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[1:1]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_ROFRAG_HP_P3_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[2:2]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_ROFRAG_CNT_P1_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[3:3]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_ROFRAG_CNT_P2_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[4:4]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_ROFRAG_CNT_P3_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[5:5]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_ROFRAG_CNT_P0_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[6:6]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_ROFRAG_CNT_P1_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[7:7]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_ROFRAG_CNT_P2_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[8:8]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_ROFRAG_CNT_P3_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[9:9]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_TP_P1_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[10:10]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_TP_P2_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[11:11]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_TP_P3_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[12:12]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_TP_P0_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[13:13]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_TP_P1_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[14:14]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_TP_P2_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[15:15]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_TP_P3_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[16:16]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_HP_P1_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[17:17]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_HP_P2_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[18:18]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_HP_P3_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[19:19]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_HP_P0_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[20:20]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_HP_P1_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[21:21]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_HP_P2_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[22:22]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_HP_P3_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[23:23]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_CNT_P1_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[24:24]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_CNT_P2_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[25:25]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_CNT_P3_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[26:26]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_CNT_P0_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[27:27]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_CNT_P1_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[28:28]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_CNT_P2_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[29:29]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RMW_DIR_CNT_P3_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[30:30]"});
   CFG_DIAGNOSTIC_AW_STATUS_01.RW_NXTHP_P1_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_01.status[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_AW_STATUS_02";
    `endif
    CFG_DIAGNOSTIC_AW_STATUS_02 = hqm_dir_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_02_reg::type_id::create("CFG_DIAGNOSTIC_AW_STATUS_02", this);
    CFG_DIAGNOSTIC_AW_STATUS_02.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000018, 32, 32'b00000000000000000000000000000000);
    CFG_DIAGNOSTIC_AW_STATUS_02.set_space_addr("MSG", 32'h0C000018);
    CFG_DIAGNOSTIC_AW_STATUS_02.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_AW_STATUS_02.set_space_addr("MEM-SB",28'hC000018);
    CFG_DIAGNOSTIC_AW_STATUS_02.set_space_addr("MEM", 32'h0C000018);
      CFG_DIAGNOSTIC_AW_STATUS_02.set_space("MEM");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_AW_STATUS_02.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_AW_STATUS_02.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_AW_STATUS_02:dont_test") ) CFG_DIAGNOSTIC_AW_STATUS_02.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_AW_STATUS_02 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_AW_STATUS_02"));
      end
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_TP_P1_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[0:0]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_TP_P2_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[1:1]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_TP_P3_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[2:2]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_TP_P0_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[3:3]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_TP_P1_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[4:4]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_TP_P2_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[5:5]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_TP_P3_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[6:6]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_HP_P1_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[7:7]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_HP_P2_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[8:8]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_HP_P3_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[9:9]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_HP_P0_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[10:10]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_HP_P1_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[11:11]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_HP_P2_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[12:12]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_HP_P3_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[13:13]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_CNT_P1_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[14:14]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_CNT_P2_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[15:15]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_CNT_P3_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[16:16]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_CNT_P0_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[17:17]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_CNT_P1_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[18:18]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_CNT_P2_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[19:19]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_REPLAY_CNT_P3_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[20:20]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_ROFRAG_TP_P1_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[21:21]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_ROFRAG_TP_P2_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[22:22]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_ROFRAG_TP_P3_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[23:23]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_ROFRAG_TP_P0_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[24:24]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_ROFRAG_TP_P1_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[25:25]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_ROFRAG_TP_P2_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[26:26]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_ROFRAG_TP_P3_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[27:27]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_ROFRAG_HP_P1_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[28:28]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_ROFRAG_HP_P2_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[29:29]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_ROFRAG_HP_P3_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[30:30]"});
   CFG_DIAGNOSTIC_AW_STATUS_02.RMW_ROFRAG_HP_P0_V_F.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_diagnostic_aw_status_02.status[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_ERROR_INJECT";
    `endif
    CFG_ERROR_INJECT = hqm_dir_pipe_bridge_CFG_ERROR_INJECT_reg::type_id::create("CFG_ERROR_INJECT", this);
    CFG_ERROR_INJECT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00001C, 32, 32'b00000000000000000000000000000000);
    CFG_ERROR_INJECT.set_space_addr("MSG", 32'h0C00001C);
    CFG_ERROR_INJECT.set_space_addr("msg_bus_port", 'h21);
    CFG_ERROR_INJECT.set_space_addr("MEM-SB",28'hC00001C);
    CFG_ERROR_INJECT.set_space_addr("MEM", 32'h0C00001C);
      CFG_ERROR_INJECT.set_space("MEM");
      CFG_ERROR_INJECT.set_msg_opcode("MEM-SB");
      CFG_ERROR_INJECT.set_fid(4'h0, "MEM-SB");
  	CFG_ERROR_INJECT.set_bar(4'h2, "MEM-SB");
      CFG_ERROR_INJECT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ERROR_INJECT.set_user_attribute("diag_reg", "0");
      CFG_ERROR_INJECT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_ERROR_INJECT.set_user_attribute("SubnetPortID", "8'h00");
      CFG_ERROR_INJECT.set_test_reg(0);
      if ( $test$plusargs("CFG_ERROR_INJECT:dont_test") ) CFG_ERROR_INJECT.set_test_reg(1'b0);
      if (!add_reg( CFG_ERROR_INJECT )) begin
        `sla_error(get_name(), ("Could not add register CFG_ERROR_INJECT"));
      end
   CFG_ERROR_INJECT.ROP_DP_0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[0:0]"});
   CFG_ERROR_INJECT.LSP_DP_0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[1:1]"});
   CFG_ERROR_INJECT.LSP_DP_1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[2:2]"});
   CFG_ERROR_INJECT.ROP_DP_1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[3:3]"});
   CFG_ERROR_INJECT.ROP_DP_2.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[4:4]"});
   CFG_ERROR_INJECT.ROP_DP_3.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[5:5]"});
   CFG_ERROR_INJECT.ROP_DP_4.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[6:6]"});
   CFG_ERROR_INJECT.ROP_DP_5.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[7:7]"});
   CFG_ERROR_INJECT.LSP_DP_2.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[8:8]"});
   CFG_ERROR_INJECT.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_error_inject.internal_f[31:9]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_DP_DQED_IF";
    `endif
    CFG_FIFO_WMSTAT_DP_DQED_IF = hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_DQED_IF_reg::type_id::create("CFG_FIFO_WMSTAT_DP_DQED_IF", this);
    CFG_FIFO_WMSTAT_DP_DQED_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000020, 32, 32'b00000000000000000001000000011101);
    CFG_FIFO_WMSTAT_DP_DQED_IF.set_space_addr("MSG", 32'h0C000020);
    CFG_FIFO_WMSTAT_DP_DQED_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_DP_DQED_IF.set_space_addr("MEM-SB",28'hC000020);
    CFG_FIFO_WMSTAT_DP_DQED_IF.set_space_addr("MEM", 32'h0C000020);
      CFG_FIFO_WMSTAT_DP_DQED_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_DP_DQED_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_DP_DQED_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_DP_DQED_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_DP_DQED_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_DP_DQED_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_DP_DQED_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_DP_DQED_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_DP_DQED_IF:dont_test") ) CFG_FIFO_WMSTAT_DP_DQED_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_DP_DQED_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_DP_DQED_IF"));
      end
   CFG_FIFO_WMSTAT_DP_DQED_IF.FIFO_HWM.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_DP_DQED_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_DP_DQED_IF.FIFO_OVERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_DP_DQED_IF.FIFO_EMPTY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_DP_DQED_IF.FIFO_AFULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_DP_DQED_IF.FIFO_FULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_DP_DQED_IF.FIFO_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_dqed_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF";
    `endif
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF = hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF_reg::type_id::create("CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF", this);
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000024, 32, 32'b00000000000000000001000000001101);
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_space_addr("MSG", 32'h0C000024);
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_space_addr("MEM-SB",28'hC000024);
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_space_addr("MEM", 32'h0C000024);
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF:dont_test") ) CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF"));
      end
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.FIFO_HWM.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.FIFO_OVERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.FIFO_EMPTY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.FIFO_AFULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.FIFO_FULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_DIR_IF.FIFO_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_dir_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF";
    `endif
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF = hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF_reg::type_id::create("CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF", this);
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000028, 32, 32'b00000000000000000001000000001101);
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_space_addr("MSG", 32'h0C000028);
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_space_addr("MEM-SB",28'hC000028);
    CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_space_addr("MEM", 32'h0C000028);
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF:dont_test") ) CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF"));
      end
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.FIFO_HWM.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.FIFO_OVERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.FIFO_EMPTY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.FIFO_AFULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.FIFO_FULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_DP_LSP_ENQ_RORPLY_IF.FIFO_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_dp_lsp_enq_rorply_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF";
    `endif
    CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF = hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF_reg::type_id::create("CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF", this);
    CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00002C, 32, 32'b00000000000000000001000000000100);
    CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_space_addr("MSG", 32'h0C00002C);
    CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_space_addr("MEM-SB",28'hC00002C);
    CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_space_addr("MEM", 32'h0C00002C);
      CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF:dont_test") ) CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF"));
      end
   CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.FIFO_HWM.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.FIFO_OVERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.FIFO_EMPTY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.FIFO_AFULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.FIFO_FULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_DIR_IF.FIFO_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_dir_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF";
    `endif
    CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF = hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF_reg::type_id::create("CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF", this);
    CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000030, 32, 32'b00000000000000000001000000000100);
    CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_space_addr("MSG", 32'h0C000030);
    CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_space_addr("MEM-SB",28'hC000030);
    CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_space_addr("MEM", 32'h0C000030);
      CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF:dont_test") ) CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF"));
      end
   CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.FIFO_HWM.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.FIFO_OVERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.FIFO_EMPTY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.FIFO_AFULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.FIFO_FULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_LSP_DP_SCH_RORPLY_IF.FIFO_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_lsp_dp_sch_rorply_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF";
    `endif
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF = hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF_reg::type_id::create("CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF", this);
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000034, 32, 32'b00000000000000000001000000000100);
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_space_addr("MSG", 32'h0C000034);
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_space_addr("MEM-SB",28'hC000034);
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_space_addr("MEM", 32'h0C000034);
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF:dont_test") ) CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF"));
      end
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.FIFO_HWM.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.FIFO_OVERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.FIFO_EMPTY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.FIFO_AFULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.FIFO_FULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_DIR_IF.FIFO_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_dir_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF";
    `endif
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF = hqm_dir_pipe_bridge_CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF_reg::type_id::create("CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF", this);
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000038, 32, 32'b00000000000000000001000000000100);
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_space_addr("MSG", 32'h0C000038);
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_space_addr("msg_bus_port", 'h21);
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_space_addr("MEM-SB",28'hC000038);
    CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_space_addr("MEM", 32'h0C000038);
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_space("MEM");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_msg_opcode("MEM-SB");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_fid(4'h0, "MEM-SB");
  	CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_bar(4'h2, "MEM-SB");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_user_attribute("diag_reg", "0");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF:dont_test") ) CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.set_test_reg(1'b0);
      if (!add_reg( CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF )) begin
        `sla_error(get_name(), ("Could not add register CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF"));
      end
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.FIFO_HWM.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[7:0]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.FIFO_UNDERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[8:8]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.FIFO_OVERFLOW.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[9:9]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.FIFO_EMPTY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[12:12]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.FIFO_AFULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[14:14]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.FIFO_FULL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[15:15]"});
   CFG_FIFO_WMSTAT_ROP_DP_ENQ_RO_IF.FIFO_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_fifo_wmstat_rop_dp_enq_ro_if.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HW_AGITATE_CONTROL";
    `endif
    CFG_HW_AGITATE_CONTROL = hqm_dir_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg::type_id::create("CFG_HW_AGITATE_CONTROL", this);
    CFG_HW_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00003C, 32, 32'b00000000000000000000000000000000);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MSG", 32'h0C00003C);
    CFG_HW_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MEM-SB",28'hC00003C);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MEM", 32'h0C00003C);
      CFG_HW_AGITATE_CONTROL.set_space("MEM");
      CFG_HW_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      CFG_HW_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_HW_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_HW_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HW_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_HW_AGITATE_CONTROL:dont_test") ) CFG_HW_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_HW_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_HW_AGITATE_CONTROL"));
      end
   CFG_HW_AGITATE_CONTROL.MODE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_control.internal_f[1:0]"});
   CFG_HW_AGITATE_CONTROL.DUTY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_control.internal_f[4:2]"});
   CFG_HW_AGITATE_CONTROL.PERIOD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_control.internal_f[15:5]"});
   CFG_HW_AGITATE_CONTROL.PROB1ST.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_control.internal_f[23:16]"});
   CFG_HW_AGITATE_CONTROL.PROB2ND.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_control.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HW_AGITATE_SELECT";
    `endif
    CFG_HW_AGITATE_SELECT = hqm_dir_pipe_bridge_CFG_HW_AGITATE_SELECT_reg::type_id::create("CFG_HW_AGITATE_SELECT", this);
    CFG_HW_AGITATE_SELECT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000040, 32, 32'b00000000000000000000000000000000);
    CFG_HW_AGITATE_SELECT.set_space_addr("MSG", 32'h0C000040);
    CFG_HW_AGITATE_SELECT.set_space_addr("msg_bus_port", 'h21);
    CFG_HW_AGITATE_SELECT.set_space_addr("MEM-SB",28'hC000040);
    CFG_HW_AGITATE_SELECT.set_space_addr("MEM", 32'h0C000040);
      CFG_HW_AGITATE_SELECT.set_space("MEM");
      CFG_HW_AGITATE_SELECT.set_msg_opcode("MEM-SB");
      CFG_HW_AGITATE_SELECT.set_fid(4'h0, "MEM-SB");
  	CFG_HW_AGITATE_SELECT.set_bar(4'h2, "MEM-SB");
      CFG_HW_AGITATE_SELECT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HW_AGITATE_SELECT.set_user_attribute("diag_reg", "0");
      CFG_HW_AGITATE_SELECT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HW_AGITATE_SELECT.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HW_AGITATE_SELECT.set_test_reg(0);
      if ( $test$plusargs("CFG_HW_AGITATE_SELECT:dont_test") ) CFG_HW_AGITATE_SELECT.set_test_reg(1'b0);
      if (!add_reg( CFG_HW_AGITATE_SELECT )) begin
        `sla_error(get_name(), ("Could not add register CFG_HW_AGITATE_SELECT"));
      end
   CFG_HW_AGITATE_SELECT.AGG_IF_00.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[0:0]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_01.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[1:1]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_02.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[2:2]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_03.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[3:3]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_04.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[4:4]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_05.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[5:5]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_06.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[6:6]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_07.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[7:7]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_08.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[8:8]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_09.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[9:9]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_10.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[10:10]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_11.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[11:11]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_12.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[12:12]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_13.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[13:13]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_14.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[14:14]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_15.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[15:15]"});
   CFG_HW_AGITATE_SELECT.RSVZ.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_hw_agitate_select.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_INTERFACE_STATUS";
    `endif
    CFG_INTERFACE_STATUS = hqm_dir_pipe_bridge_CFG_INTERFACE_STATUS_reg::type_id::create("CFG_INTERFACE_STATUS", this);
    CFG_INTERFACE_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000044, 32, 32'b00000100010001000100010001000100);
    CFG_INTERFACE_STATUS.set_space_addr("MSG", 32'h0C000044);
    CFG_INTERFACE_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_INTERFACE_STATUS.set_space_addr("MEM-SB",28'hC000044);
    CFG_INTERFACE_STATUS.set_space_addr("MEM", 32'h0C000044);
      CFG_INTERFACE_STATUS.set_space("MEM");
      CFG_INTERFACE_STATUS.set_msg_opcode("MEM-SB");
      CFG_INTERFACE_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_INTERFACE_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_INTERFACE_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_INTERFACE_STATUS.set_user_attribute("diag_reg", "0");
      CFG_INTERFACE_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_INTERFACE_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_INTERFACE_STATUS:dont_test") ) CFG_INTERFACE_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_INTERFACE_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_INTERFACE_STATUS"));
      end
   CFG_INTERFACE_STATUS.DB_DP_DQED_STATUS_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[1:0]"});
   CFG_INTERFACE_STATUS.DB_DP_DQED_STATUS_READY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[2:2]"});
   CFG_INTERFACE_STATUS.DP_DQED_STATUS_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[5:4]"});
   CFG_INTERFACE_STATUS.DP_DQED_STATUS_READY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[6:6]"});
   CFG_INTERFACE_STATUS.DB_DP_LSP_ENQ_RORPLY_STATUS_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[9:8]"});
   CFG_INTERFACE_STATUS.DB_DP_LSP_ENQ_RORPLY_STATUS_READY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[10:10]"});
   CFG_INTERFACE_STATUS.DB_DP_LSP_ENQ_DIR_STATUS_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[13:12]"});
   CFG_INTERFACE_STATUS.DB_DP_LSP_ENQ_DIR_STATUS_READY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[14:14]"});
   CFG_INTERFACE_STATUS.DB_LSP_DP_SCH_RORPLY_STATUS_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[17:16]"});
   CFG_INTERFACE_STATUS.DB_LSP_DP_SCH_RORPLY_STATUS_READY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[18:18]"});
   CFG_INTERFACE_STATUS.DB_LSP_DP_SCH_DIR_STATUS_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[21:20]"});
   CFG_INTERFACE_STATUS.DB_LSP_DP_SCH_DIR_STATUS_READY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[22:22]"});
   CFG_INTERFACE_STATUS.DB_ROP_DP_ENQ_STATUS_DEPTH.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[25:24]"});
   CFG_INTERFACE_STATUS.DB_ROP_DP_ENQ_STATUS_READY.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[26:26]"});
   CFG_INTERFACE_STATUS.INT_IDLE_B.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_interface_status.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_HOLD_00";
    `endif
    CFG_PIPE_HEALTH_HOLD_00 = hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg::type_id::create("CFG_PIPE_HEALTH_HOLD_00", this);
    CFG_PIPE_HEALTH_HOLD_00.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000048, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_HOLD_00.set_space_addr("MSG", 32'h0C000048);
    CFG_PIPE_HEALTH_HOLD_00.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_HOLD_00.set_space_addr("MEM-SB",28'hC000048);
    CFG_PIPE_HEALTH_HOLD_00.set_space_addr("MEM", 32'h0C000048);
      CFG_PIPE_HEALTH_HOLD_00.set_space("MEM");
      CFG_PIPE_HEALTH_HOLD_00.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_HOLD_00.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_HOLD_00.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_HOLD_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_HOLD_00.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_HOLD_00.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_HOLD_00.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_HOLD_00:dont_test") ) CFG_PIPE_HEALTH_HOLD_00.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_HOLD_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_HOLD_00"));
      end
   CFG_PIPE_HEALTH_HOLD_00.P0_DIR_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[0:0]"});
   CFG_PIPE_HEALTH_HOLD_00.P1_DIR_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[1:1]"});
   CFG_PIPE_HEALTH_HOLD_00.P2_DIR_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[2:2]"});
   CFG_PIPE_HEALTH_HOLD_00.P3_DIR_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[3:3]"});
   CFG_PIPE_HEALTH_HOLD_00.P4_DIR_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[4:4]"});
   CFG_PIPE_HEALTH_HOLD_00.P5_DIR_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[5:5]"});
   CFG_PIPE_HEALTH_HOLD_00.P6_DIR_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[6:6]"});
   CFG_PIPE_HEALTH_HOLD_00.P7_DIR_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[7:7]"});
   CFG_PIPE_HEALTH_HOLD_00.P8_DIR_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[8:8]"});
   CFG_PIPE_HEALTH_HOLD_00.P0_ROFRAG_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[9:9]"});
   CFG_PIPE_HEALTH_HOLD_00.P1_ROFRAG_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[10:10]"});
   CFG_PIPE_HEALTH_HOLD_00.P2_ROFRAG_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[11:11]"});
   CFG_PIPE_HEALTH_HOLD_00.P3_ROFRAG_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[12:12]"});
   CFG_PIPE_HEALTH_HOLD_00.P4_ROFRAG_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[13:13]"});
   CFG_PIPE_HEALTH_HOLD_00.P5_ROFRAG_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[14:14]"});
   CFG_PIPE_HEALTH_HOLD_00.P6_ROFRAG_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[15:15]"});
   CFG_PIPE_HEALTH_HOLD_00.P7_ROFRAG_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[16:16]"});
   CFG_PIPE_HEALTH_HOLD_00.P8_ROFRAG_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[17:17]"});
   CFG_PIPE_HEALTH_HOLD_00.P0_REPLAY_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[18:18]"});
   CFG_PIPE_HEALTH_HOLD_00.P1_REPLAY_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[19:19]"});
   CFG_PIPE_HEALTH_HOLD_00.P2_REPLAY_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[20:20]"});
   CFG_PIPE_HEALTH_HOLD_00.P3_REPLAY_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[21:21]"});
   CFG_PIPE_HEALTH_HOLD_00.P4_REPLAY_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[22:22]"});
   CFG_PIPE_HEALTH_HOLD_00.P5_REPLAY_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[23:23]"});
   CFG_PIPE_HEALTH_HOLD_00.P6_REPLAY_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[24:24]"});
   CFG_PIPE_HEALTH_HOLD_00.P7_REPLAY_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[25:25]"});
   CFG_PIPE_HEALTH_HOLD_00.P8_REPLAY_HOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_hold_00.internal_f[26:26]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_VALID_00";
    `endif
    CFG_PIPE_HEALTH_VALID_00 = hqm_dir_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg::type_id::create("CFG_PIPE_HEALTH_VALID_00", this);
    CFG_PIPE_HEALTH_VALID_00.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00004C, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_VALID_00.set_space_addr("MSG", 32'h0C00004C);
    CFG_PIPE_HEALTH_VALID_00.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_VALID_00.set_space_addr("MEM-SB",28'hC00004C);
    CFG_PIPE_HEALTH_VALID_00.set_space_addr("MEM", 32'h0C00004C);
      CFG_PIPE_HEALTH_VALID_00.set_space("MEM");
      CFG_PIPE_HEALTH_VALID_00.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_VALID_00.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_VALID_00.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_VALID_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_VALID_00.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_VALID_00.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_VALID_00.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_VALID_00:dont_test") ) CFG_PIPE_HEALTH_VALID_00.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_VALID_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_VALID_00"));
      end
   CFG_PIPE_HEALTH_VALID_00.P0_DIR_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[0:0]"});
   CFG_PIPE_HEALTH_VALID_00.P1_DIR_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[1:1]"});
   CFG_PIPE_HEALTH_VALID_00.P2_DIR_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[2:2]"});
   CFG_PIPE_HEALTH_VALID_00.P3_DIR_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[3:3]"});
   CFG_PIPE_HEALTH_VALID_00.P4_DIR_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[4:4]"});
   CFG_PIPE_HEALTH_VALID_00.P5_DIR_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[5:5]"});
   CFG_PIPE_HEALTH_VALID_00.P6_DIR_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[6:6]"});
   CFG_PIPE_HEALTH_VALID_00.P7_DIR_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[7:7]"});
   CFG_PIPE_HEALTH_VALID_00.P8_DIR_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[8:8]"});
   CFG_PIPE_HEALTH_VALID_00.P0_ROFRAG_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[9:9]"});
   CFG_PIPE_HEALTH_VALID_00.P1_ROFRAG_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[10:10]"});
   CFG_PIPE_HEALTH_VALID_00.P2_ROFRAG_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[11:11]"});
   CFG_PIPE_HEALTH_VALID_00.P3_ROFRAG_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[12:12]"});
   CFG_PIPE_HEALTH_VALID_00.P4_ROFRAG_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[13:13]"});
   CFG_PIPE_HEALTH_VALID_00.P5_ROFRAG_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[14:14]"});
   CFG_PIPE_HEALTH_VALID_00.P6_ROFRAG_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[15:15]"});
   CFG_PIPE_HEALTH_VALID_00.P7_ROFRAG_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[16:16]"});
   CFG_PIPE_HEALTH_VALID_00.P8_ROFRAG_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[17:17]"});
   CFG_PIPE_HEALTH_VALID_00.P0_REPLAY_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[18:18]"});
   CFG_PIPE_HEALTH_VALID_00.P1_REPLAY_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[19:19]"});
   CFG_PIPE_HEALTH_VALID_00.P2_REPLAY_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[20:20]"});
   CFG_PIPE_HEALTH_VALID_00.P3_REPLAY_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[21:21]"});
   CFG_PIPE_HEALTH_VALID_00.P4_REPLAY_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[22:22]"});
   CFG_PIPE_HEALTH_VALID_00.P5_REPLAY_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[23:23]"});
   CFG_PIPE_HEALTH_VALID_00.P6_REPLAY_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[24:24]"});
   CFG_PIPE_HEALTH_VALID_00.P7_REPLAY_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[25:25]"});
   CFG_PIPE_HEALTH_VALID_00.P8_REPLAY_VALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_pipe_health_valid_00.internal_f[26:26]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_ACTIVITYCOUNTER0";
    `endif
    CFG_SMON_ACTIVITYCOUNTER0 = hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER0_reg::type_id::create("CFG_SMON_ACTIVITYCOUNTER0", this);
    CFG_SMON_ACTIVITYCOUNTER0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000050, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("MSG", 32'h0C000050);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("MEM-SB",28'hC000050);
    CFG_SMON_ACTIVITYCOUNTER0.set_space_addr("MEM", 32'h0C000050);
      CFG_SMON_ACTIVITYCOUNTER0.set_space("MEM");
      CFG_SMON_ACTIVITYCOUNTER0.set_msg_opcode("MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_ACTIVITYCOUNTER0.set_bar(4'h2, "MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_ACTIVITYCOUNTER0.set_user_attribute("diag_reg", "0");
      CFG_SMON_ACTIVITYCOUNTER0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_ACTIVITYCOUNTER0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_ACTIVITYCOUNTER0:dont_test") ) CFG_SMON_ACTIVITYCOUNTER0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_ACTIVITYCOUNTER0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_ACTIVITYCOUNTER0"));
      end
   CFG_SMON_ACTIVITYCOUNTER0.COUNTER0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_ACTIVITYCOUNTER1";
    `endif
    CFG_SMON_ACTIVITYCOUNTER1 = hqm_dir_pipe_bridge_CFG_SMON_ACTIVITYCOUNTER1_reg::type_id::create("CFG_SMON_ACTIVITYCOUNTER1", this);
    CFG_SMON_ACTIVITYCOUNTER1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000054, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("MSG", 32'h0C000054);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("MEM-SB",28'hC000054);
    CFG_SMON_ACTIVITYCOUNTER1.set_space_addr("MEM", 32'h0C000054);
      CFG_SMON_ACTIVITYCOUNTER1.set_space("MEM");
      CFG_SMON_ACTIVITYCOUNTER1.set_msg_opcode("MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_ACTIVITYCOUNTER1.set_bar(4'h2, "MEM-SB");
      CFG_SMON_ACTIVITYCOUNTER1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_ACTIVITYCOUNTER1.set_user_attribute("diag_reg", "0");
      CFG_SMON_ACTIVITYCOUNTER1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_ACTIVITYCOUNTER1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_ACTIVITYCOUNTER1:dont_test") ) CFG_SMON_ACTIVITYCOUNTER1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_ACTIVITYCOUNTER1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_ACTIVITYCOUNTER1"));
      end
   CFG_SMON_ACTIVITYCOUNTER1.COUNTER1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cnt1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_COMPARE0";
    `endif
    CFG_SMON_COMPARE0 = hqm_dir_pipe_bridge_CFG_SMON_COMPARE0_reg::type_id::create("CFG_SMON_COMPARE0", this);
    CFG_SMON_COMPARE0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000058, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_COMPARE0.set_space_addr("MSG", 32'h0C000058);
    CFG_SMON_COMPARE0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_COMPARE0.set_space_addr("MEM-SB",28'hC000058);
    CFG_SMON_COMPARE0.set_space_addr("MEM", 32'h0C000058);
      CFG_SMON_COMPARE0.set_space("MEM");
      CFG_SMON_COMPARE0.set_msg_opcode("MEM-SB");
      CFG_SMON_COMPARE0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_COMPARE0.set_bar(4'h2, "MEM-SB");
      CFG_SMON_COMPARE0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_COMPARE0.set_user_attribute("diag_reg", "0");
      CFG_SMON_COMPARE0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_COMPARE0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_COMPARE0:dont_test") ) CFG_SMON_COMPARE0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_COMPARE0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_COMPARE0"));
      end
   CFG_SMON_COMPARE0.COMPARE0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_COMPARE1";
    `endif
    CFG_SMON_COMPARE1 = hqm_dir_pipe_bridge_CFG_SMON_COMPARE1_reg::type_id::create("CFG_SMON_COMPARE1", this);
    CFG_SMON_COMPARE1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00005C, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_COMPARE1.set_space_addr("MSG", 32'h0C00005C);
    CFG_SMON_COMPARE1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_COMPARE1.set_space_addr("MEM-SB",28'hC00005C);
    CFG_SMON_COMPARE1.set_space_addr("MEM", 32'h0C00005C);
      CFG_SMON_COMPARE1.set_space("MEM");
      CFG_SMON_COMPARE1.set_msg_opcode("MEM-SB");
      CFG_SMON_COMPARE1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_COMPARE1.set_bar(4'h2, "MEM-SB");
      CFG_SMON_COMPARE1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_COMPARE1.set_user_attribute("diag_reg", "0");
      CFG_SMON_COMPARE1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_COMPARE1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_COMPARE1:dont_test") ) CFG_SMON_COMPARE1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_COMPARE1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_COMPARE1"));
      end
   CFG_SMON_COMPARE1.COMPARE1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_comp1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_CONFIGURATION0";
    `endif
    CFG_SMON_CONFIGURATION0 = hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION0_reg::type_id::create("CFG_SMON_CONFIGURATION0", this);
    CFG_SMON_CONFIGURATION0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000060, 32, 32'b01000000000000000000000000000000);
    CFG_SMON_CONFIGURATION0.set_space_addr("MSG", 32'h0C000060);
    CFG_SMON_CONFIGURATION0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_CONFIGURATION0.set_space_addr("MEM-SB",28'hC000060);
    CFG_SMON_CONFIGURATION0.set_space_addr("MEM", 32'h0C000060);
      CFG_SMON_CONFIGURATION0.set_space("MEM");
      CFG_SMON_CONFIGURATION0.set_msg_opcode("MEM-SB");
      CFG_SMON_CONFIGURATION0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_CONFIGURATION0.set_bar(4'h2, "MEM-SB");
      CFG_SMON_CONFIGURATION0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_CONFIGURATION0.set_user_attribute("diag_reg", "0");
      CFG_SMON_CONFIGURATION0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_CONFIGURATION0.set_user_attribute("SubnetPortID", "8'h00");
      CFG_SMON_CONFIGURATION0.set_test_reg(0);
      if ( $test$plusargs("CFG_SMON_CONFIGURATION0:dont_test") ) CFG_SMON_CONFIGURATION0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_CONFIGURATION0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_CONFIGURATION0"));
      end
   CFG_SMON_CONFIGURATION0.SMON_ENABLE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[0:0]"});
   CFG_SMON_CONFIGURATION0.SMON_0TRIGGER_ENABLE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[1:1]"});
   CFG_SMON_CONFIGURATION0.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[3:2]"});
   CFG_SMON_CONFIGURATION0.SMON0_FUNCTION.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[6:4]"});
   CFG_SMON_CONFIGURATION0.SMON0_FUNCTION_COMPARE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[7:7]"});
   CFG_SMON_CONFIGURATION0.SMON1_FUNCTION.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[10:8]"});
   CFG_SMON_CONFIGURATION0.SMON1_FUNCTION_COMPARE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[11:11]"});
   CFG_SMON_CONFIGURATION0.SMON_MODE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[15:12]"});
   CFG_SMON_CONFIGURATION0.STOPCOUNTEROVFL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[16:16]"});
   CFG_SMON_CONFIGURATION0.INTCOUNTEROVFL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[17:17]"});
   CFG_SMON_CONFIGURATION0.STATCOUNTER0OVFL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[18:18]"});
   CFG_SMON_CONFIGURATION0.STATCOUNTER1OVFL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[19:19]"});
   CFG_SMON_CONFIGURATION0.STOPTIMEROVFL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[20:20]"});
   CFG_SMON_CONFIGURATION0.INTTIMEROVFL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[21:21]"});
   CFG_SMON_CONFIGURATION0.STATTIMEROVFL.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[22:22]"});
   CFG_SMON_CONFIGURATION0.RSVZ1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[23:23]"});
   CFG_SMON_CONFIGURATION0.TIMER_PRESCALE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[28:24]"});
   CFG_SMON_CONFIGURATION0.RSVZ2.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg0_q[29:29]"});
   CFG_SMON_CONFIGURATION0.VERSION.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_CONFIGURATION1";
    `endif
    CFG_SMON_CONFIGURATION1 = hqm_dir_pipe_bridge_CFG_SMON_CONFIGURATION1_reg::type_id::create("CFG_SMON_CONFIGURATION1", this);
    CFG_SMON_CONFIGURATION1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000064, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_CONFIGURATION1.set_space_addr("MSG", 32'h0C000064);
    CFG_SMON_CONFIGURATION1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_CONFIGURATION1.set_space_addr("MEM-SB",28'hC000064);
    CFG_SMON_CONFIGURATION1.set_space_addr("MEM", 32'h0C000064);
      CFG_SMON_CONFIGURATION1.set_space("MEM");
      CFG_SMON_CONFIGURATION1.set_msg_opcode("MEM-SB");
      CFG_SMON_CONFIGURATION1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_CONFIGURATION1.set_bar(4'h2, "MEM-SB");
      CFG_SMON_CONFIGURATION1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_CONFIGURATION1.set_user_attribute("diag_reg", "0");
      CFG_SMON_CONFIGURATION1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_CONFIGURATION1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_CONFIGURATION1:dont_test") ) CFG_SMON_CONFIGURATION1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_CONFIGURATION1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_CONFIGURATION1"));
      end
   CFG_SMON_CONFIGURATION1.MODE0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[7:0]"});
   CFG_SMON_CONFIGURATION1.MODE1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[15:8]"});
   CFG_SMON_CONFIGURATION1.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_cfg1_q[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_MAXIMUM_TIMER";
    `endif
    CFG_SMON_MAXIMUM_TIMER = hqm_dir_pipe_bridge_CFG_SMON_MAXIMUM_TIMER_reg::type_id::create("CFG_SMON_MAXIMUM_TIMER", this);
    CFG_SMON_MAXIMUM_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000068, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("MSG", 32'h0C000068);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("MEM-SB",28'hC000068);
    CFG_SMON_MAXIMUM_TIMER.set_space_addr("MEM", 32'h0C000068);
      CFG_SMON_MAXIMUM_TIMER.set_space("MEM");
      CFG_SMON_MAXIMUM_TIMER.set_msg_opcode("MEM-SB");
      CFG_SMON_MAXIMUM_TIMER.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_MAXIMUM_TIMER.set_bar(4'h2, "MEM-SB");
      CFG_SMON_MAXIMUM_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_MAXIMUM_TIMER.set_user_attribute("diag_reg", "0");
      CFG_SMON_MAXIMUM_TIMER.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_MAXIMUM_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_MAXIMUM_TIMER:dont_test") ) CFG_SMON_MAXIMUM_TIMER.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_MAXIMUM_TIMER )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_MAXIMUM_TIMER"));
      end
   CFG_SMON_MAXIMUM_TIMER.MAXVALUE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_maxval_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON_TIMER";
    `endif
    CFG_SMON_TIMER = hqm_dir_pipe_bridge_CFG_SMON_TIMER_reg::type_id::create("CFG_SMON_TIMER", this);
    CFG_SMON_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00006C, 32, 32'b00000000000000000000000000000000);
    CFG_SMON_TIMER.set_space_addr("MSG", 32'h0C00006C);
    CFG_SMON_TIMER.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON_TIMER.set_space_addr("MEM-SB",28'hC00006C);
    CFG_SMON_TIMER.set_space_addr("MEM", 32'h0C00006C);
      CFG_SMON_TIMER.set_space("MEM");
      CFG_SMON_TIMER.set_msg_opcode("MEM-SB");
      CFG_SMON_TIMER.set_fid(4'h0, "MEM-SB");
  	CFG_SMON_TIMER.set_bar(4'h2, "MEM-SB");
      CFG_SMON_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON_TIMER.set_user_attribute("diag_reg", "0");
      CFG_SMON_TIMER.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON_TIMER:dont_test") ) CFG_SMON_TIMER.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON_TIMER )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON_TIMER"));
      end
   CFG_SMON_TIMER.TIMER.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_smon.i_hqm_AW_smon.reg_smon_timer_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SYNDROME_00";
    `endif
    CFG_SYNDROME_00 = hqm_dir_pipe_bridge_CFG_SYNDROME_00_reg::type_id::create("CFG_SYNDROME_00", this);
    CFG_SYNDROME_00.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000070, 32, 32'b00000000000000000000000000000000);
    CFG_SYNDROME_00.set_space_addr("MSG", 32'h0C000070);
    CFG_SYNDROME_00.set_space_addr("msg_bus_port", 'h21);
    CFG_SYNDROME_00.set_space_addr("MEM-SB",28'hC000070);
    CFG_SYNDROME_00.set_space_addr("MEM", 32'h0C000070);
      CFG_SYNDROME_00.set_space("MEM");
      CFG_SYNDROME_00.set_msg_opcode("MEM-SB");
      CFG_SYNDROME_00.set_fid(4'h0, "MEM-SB");
  	CFG_SYNDROME_00.set_bar(4'h2, "MEM-SB");
      CFG_SYNDROME_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SYNDROME_00.set_user_attribute("diag_reg", "0");
      CFG_SYNDROME_00.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SYNDROME_00.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SYNDROME_00:dont_test") ) CFG_SYNDROME_00.set_test_reg(1'b0);
      if (!add_reg( CFG_SYNDROME_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SYNDROME_00"));
      end
   CFG_SYNDROME_00.SYNDDATA.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
   CFG_SYNDROME_00.SYNDTYPE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
   CFG_SYNDROME_00.SYNDVALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_00.i_hqm_AW_register_wtcfg.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SYNDROME_01";
    `endif
    CFG_SYNDROME_01 = hqm_dir_pipe_bridge_CFG_SYNDROME_01_reg::type_id::create("CFG_SYNDROME_01", this);
    CFG_SYNDROME_01.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000074, 32, 32'b00000000000000000000000000000000);
    CFG_SYNDROME_01.set_space_addr("MSG", 32'h0C000074);
    CFG_SYNDROME_01.set_space_addr("msg_bus_port", 'h21);
    CFG_SYNDROME_01.set_space_addr("MEM-SB",28'hC000074);
    CFG_SYNDROME_01.set_space_addr("MEM", 32'h0C000074);
      CFG_SYNDROME_01.set_space("MEM");
      CFG_SYNDROME_01.set_msg_opcode("MEM-SB");
      CFG_SYNDROME_01.set_fid(4'h0, "MEM-SB");
  	CFG_SYNDROME_01.set_bar(4'h2, "MEM-SB");
      CFG_SYNDROME_01.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SYNDROME_01.set_user_attribute("diag_reg", "0");
      CFG_SYNDROME_01.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SYNDROME_01.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SYNDROME_01:dont_test") ) CFG_SYNDROME_01.set_test_reg(1'b0);
      if (!add_reg( CFG_SYNDROME_01 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SYNDROME_01"));
      end
   CFG_SYNDROME_01.SYNDDATA.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
   CFG_SYNDROME_01.SYNDTYPE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
   CFG_SYNDROME_01.SYNDVALID.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_syndrome_01.i_hqm_AW_register_wtcfg.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_IDLE";
    `endif
    CFG_UNIT_IDLE = hqm_dir_pipe_bridge_CFG_UNIT_IDLE_reg::type_id::create("CFG_UNIT_IDLE", this);
    CFG_UNIT_IDLE.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000078, 32, 32'b00000000000000000000000000000011);
    CFG_UNIT_IDLE.set_space_addr("MSG", 32'h0C000078);
    CFG_UNIT_IDLE.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_IDLE.set_space_addr("MEM-SB",28'hC000078);
    CFG_UNIT_IDLE.set_space_addr("MEM", 32'h0C000078);
      CFG_UNIT_IDLE.set_space("MEM");
      CFG_UNIT_IDLE.set_msg_opcode("MEM-SB");
      CFG_UNIT_IDLE.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_IDLE.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_IDLE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_IDLE.set_user_attribute("diag_reg", "0");
      CFG_UNIT_IDLE.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_UNIT_IDLE.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_IDLE.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_IDLE:dont_test") ) CFG_UNIT_IDLE.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_IDLE )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_IDLE"));
      end
   CFG_UNIT_IDLE.PIPE_IDLE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_idle.internal_f[0:0]"});
   CFG_UNIT_IDLE.UNIT_IDLE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_idle.internal_f[1:1]"});
   CFG_UNIT_IDLE.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_idle.internal_f[31:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_TIMEOUT";
    `endif
    CFG_UNIT_TIMEOUT = hqm_dir_pipe_bridge_CFG_UNIT_TIMEOUT_reg::type_id::create("CFG_UNIT_TIMEOUT", this);
    CFG_UNIT_TIMEOUT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00007C, 32, 32'b10000000000000001111111111111111);
    CFG_UNIT_TIMEOUT.set_space_addr("MSG", 32'h0C00007C);
    CFG_UNIT_TIMEOUT.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_TIMEOUT.set_space_addr("MEM-SB",28'hC00007C);
    CFG_UNIT_TIMEOUT.set_space_addr("MEM", 32'h0C00007C);
      CFG_UNIT_TIMEOUT.set_space("MEM");
      CFG_UNIT_TIMEOUT.set_msg_opcode("MEM-SB");
      CFG_UNIT_TIMEOUT.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_TIMEOUT.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_TIMEOUT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_TIMEOUT.set_user_attribute("diag_reg", "0");
      CFG_UNIT_TIMEOUT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_UNIT_TIMEOUT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_UNIT_TIMEOUT:dont_test") ) CFG_UNIT_TIMEOUT.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_TIMEOUT )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_TIMEOUT"));
      end
   CFG_UNIT_TIMEOUT.MULTIPLIER.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_timeout.internal_f[4:0]"});
   CFG_UNIT_TIMEOUT.THRESHOLD.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_timeout.internal_f[15:5]"});
   CFG_UNIT_TIMEOUT.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_timeout.internal_f[30:16]"});
   CFG_UNIT_TIMEOUT.ENABLE.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_unit_timeout.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PATCH_CONTROL";
    `endif
    CFG_PATCH_CONTROL = hqm_dir_pipe_bridge_CFG_PATCH_CONTROL_reg::type_id::create("CFG_PATCH_CONTROL", this);
    CFG_PATCH_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000080, 32, 32'b00000000000000000000011101000000);
    CFG_PATCH_CONTROL.set_space_addr("MSG", 32'h0C000080);
    CFG_PATCH_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_PATCH_CONTROL.set_space_addr("MEM-SB",28'hC000080);
    CFG_PATCH_CONTROL.set_space_addr("MEM", 32'h0C000080);
      CFG_PATCH_CONTROL.set_space("MEM");
      CFG_PATCH_CONTROL.set_msg_opcode("MEM-SB");
      CFG_PATCH_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_PATCH_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_PATCH_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PATCH_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_PATCH_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PATCH_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_PATCH_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_PATCH_CONTROL:dont_test") ) CFG_PATCH_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_PATCH_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_PATCH_CONTROL"));
      end
   CFG_PATCH_CONTROL.DELAY_CLOCKOFF.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_patch_control.internal_f[7:0]"});
   CFG_PATCH_CONTROL.DELAY_CLKOFF_BYPASS.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_patch_control.internal_f[13:8]"});
   CFG_PATCH_CONTROL.RSVZ1.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_patch_control.internal_f[15:14]"});
   CFG_PATCH_CONTROL.RSVZ0.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_patch_control.internal_f[30:16]"});
   CFG_PATCH_CONTROL.DISABLE_CLOCKOFF.set_paths({"i_hqm_dir_pipe_core.i_hqm_dp_pipe_register_pfcsr.i_hqm_dp_target_cfg_patch_control.internal_f[31:31]"});

  endfunction

 virtual function void print_sv_ral_file();  
    $display("RAL File Type [%s], RAL File Instance [%s], SV File ---> %s", get_type_name(), get_name(), `__FILE__); 
 endfunction 
endclass : hqm_dir_pipe_bridge_file

// ================================================


`endif
