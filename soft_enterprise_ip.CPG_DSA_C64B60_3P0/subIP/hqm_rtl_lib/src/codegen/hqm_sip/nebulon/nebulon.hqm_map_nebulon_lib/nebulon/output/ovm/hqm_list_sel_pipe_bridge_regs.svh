//                                                                             
// File:            hqm_list_sel_pipe_bridge_regs.svh                          
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             


//RAL code compatible with Saola versions: 16.2.06 and newer 

`ifndef RAL_HQM_LIST_SEL_PIPE_BRIDGE_FILE
`define RAL_HQM_LIST_SEL_PIPE_BRIDGE_FILE

class hqm_list_sel_pipe_bridge_CFG_CQ2PRIOV_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PRIO;
  sla_ral_field V;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ2PRIOV_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRIO, PRIO.desired)
     `RAL_FIELD_CP_16(PRIO, PRIO.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(PRIO, PRIO.desired, 16,17,18,19,20,21,22,23)
     `RAL_FIELD_CP(V, V.desired)
     `RAL_FIELD_CP_8(V, V.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRIO, PRIO.actual)
     `RAL_FIELD_CP_16(PRIO, PRIO.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(PRIO, PRIO.actual, 16,17,18,19,20,21,22,23)
     `RAL_FIELD_CP(V, V.actual)
     `RAL_FIELD_CP_8(V, V.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PRIO = new("PRIO", "RW", 24, 0, {""});
    PRIO.set_powerwell("vcccfn_gated");
    PRIO.set_rand_mode(0);
   PRIO.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( PRIO ));

    V = new("V", "RW", 8, 24, {""});
    V.set_powerwell("vcccfn_gated");
    V.set_rand_mode(0);
   V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ2PRIOV_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ2PRIOV_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ2QID0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QID_P0;
  sla_ral_field QID_P1;
  sla_ral_field QID_P2;
  sla_ral_field QID_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ2QID0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_P0, QID_P0.desired)
     `RAL_FIELD_CP_7(QID_P0, QID_P0.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P1, QID_P1.desired)
     `RAL_FIELD_CP_7(QID_P1, QID_P1.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P2, QID_P2.desired)
     `RAL_FIELD_CP_7(QID_P2, QID_P2.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P3, QID_P3.desired)
     `RAL_FIELD_CP_7(QID_P3, QID_P3.desired, 0,1,2,3,4,5,6)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_P0, QID_P0.actual)
     `RAL_FIELD_CP_7(QID_P0, QID_P0.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P1, QID_P1.actual)
     `RAL_FIELD_CP_7(QID_P1, QID_P1.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P2, QID_P2.actual)
     `RAL_FIELD_CP_7(QID_P2, QID_P2.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P3, QID_P3.actual)
     `RAL_FIELD_CP_7(QID_P3, QID_P3.actual, 0,1,2,3,4,5,6)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QID_P0 = new("QID_P0", "RW", 7, 0, {""});
    QID_P0.set_powerwell("vcccfn_gated");
    QID_P0.set_rand_mode(0);
   QID_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_P0 ));

    QID_P1 = new("QID_P1", "RW", 7, 8, {""});
    QID_P1.set_powerwell("vcccfn_gated");
    QID_P1.set_rand_mode(0);
   QID_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_P1 ));

    QID_P2 = new("QID_P2", "RW", 7, 16, {""});
    QID_P2.set_powerwell("vcccfn_gated");
    QID_P2.set_rand_mode(0);
   QID_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_P2 ));

    QID_P3 = new("QID_P3", "RW", 7, 24, {""});
    QID_P3.set_powerwell("vcccfn_gated");
    QID_P3.set_rand_mode(0);
   QID_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ2QID0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ2QID0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ2QID1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QID_P4;
  sla_ral_field QID_P5;
  sla_ral_field QID_P6;
  sla_ral_field QID_P7;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ2QID1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_P4, QID_P4.desired)
     `RAL_FIELD_CP_7(QID_P4, QID_P4.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P5, QID_P5.desired)
     `RAL_FIELD_CP_7(QID_P5, QID_P5.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P6, QID_P6.desired)
     `RAL_FIELD_CP_7(QID_P6, QID_P6.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P7, QID_P7.desired)
     `RAL_FIELD_CP_7(QID_P7, QID_P7.desired, 0,1,2,3,4,5,6)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QID_P4, QID_P4.actual)
     `RAL_FIELD_CP_7(QID_P4, QID_P4.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P5, QID_P5.actual)
     `RAL_FIELD_CP_7(QID_P5, QID_P5.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P6, QID_P6.actual)
     `RAL_FIELD_CP_7(QID_P6, QID_P6.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(QID_P7, QID_P7.actual)
     `RAL_FIELD_CP_7(QID_P7, QID_P7.actual, 0,1,2,3,4,5,6)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QID_P4 = new("QID_P4", "RW", 7, 0, {""});
    QID_P4.set_powerwell("vcccfn_gated");
    QID_P4.set_rand_mode(0);
   QID_P4.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_P4 ));

    QID_P5 = new("QID_P5", "RW", 7, 8, {""});
    QID_P5.set_powerwell("vcccfn_gated");
    QID_P5.set_rand_mode(0);
   QID_P5.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_P5 ));

    QID_P6 = new("QID_P6", "RW", 7, 16, {""});
    QID_P6.set_powerwell("vcccfn_gated");
    QID_P6.set_rand_mode(0);
   QID_P6.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_P6 ));

    QID_P7 = new("QID_P7", "RW", 7, 24, {""});
    QID_P7.set_powerwell("vcccfn_gated");
    QID_P7.set_rand_mode(0);
   QID_P7.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( QID_P7 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ2QID1_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ2QID1_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_DIR_DISABLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DISABLED;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_DIR_DISABLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLED, DISABLED.desired)
     `RAL_FIELD_CP_1(DISABLED, DISABLED.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLED, DISABLED.actual)
     `RAL_FIELD_CP_1(DISABLED, DISABLED.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DISABLED = new("DISABLED", "RW", 1, 0, {""});
    DISABLED.set_powerwell("vcccfn_gated");
    DISABLED.set_rand_mode(0);
   DISABLED.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DISABLED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_DIR_DISABLE_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_DIR_DISABLE_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_11(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_11(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/V", 11, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOKEN_DEPTH_SELECT;
  sla_ral_field DISABLE_WB_OPT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.desired)
     `RAL_FIELD_CP_4(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.desired, 0,1,2,3)
     `RAL_FIELD_CP(DISABLE_WB_OPT, DISABLE_WB_OPT.desired)
     `RAL_FIELD_CP_1(DISABLE_WB_OPT, DISABLE_WB_OPT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.actual)
     `RAL_FIELD_CP_4(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.actual, 0,1,2,3)
     `RAL_FIELD_CP(DISABLE_WB_OPT, DISABLE_WB_OPT.actual)
     `RAL_FIELD_CP_1(DISABLE_WB_OPT, DISABLE_WB_OPT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOKEN_DEPTH_SELECT = new("TOKEN_DEPTH_SELECT", "RW", 4, 0, {""});
    TOKEN_DEPTH_SELECT.set_powerwell("vcccfn_gated");
    TOKEN_DEPTH_SELECT.set_rand_mode(0);
   TOKEN_DEPTH_SELECT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOKEN_DEPTH_SELECT ));

    DISABLE_WB_OPT = new("DISABLE_WB_OPT", "RW", 1, 4, {""});
    DISABLE_WB_OPT.set_powerwell("vcccfn_gated");
    DISABLE_WB_OPT.set_rand_mode(0);
   DISABLE_WB_OPT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DISABLE_WB_OPT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/C", 32, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTL_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/C", 32, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTH_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTH_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_DISABLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DISABLED;
  sla_ral_field ENABLED_PCQ;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_DISABLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLED, DISABLED.desired)
     `RAL_FIELD_CP_1(DISABLED, DISABLED.desired, 0)
     `RAL_FIELD_CP(ENABLED_PCQ, ENABLED_PCQ.desired)
     `RAL_FIELD_CP_1(ENABLED_PCQ, ENABLED_PCQ.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISABLED, DISABLED.actual)
     `RAL_FIELD_CP_1(DISABLED, DISABLED.actual, 0)
     `RAL_FIELD_CP(ENABLED_PCQ, ENABLED_PCQ.actual)
     `RAL_FIELD_CP_1(ENABLED_PCQ, ENABLED_PCQ.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DISABLED = new("DISABLED", "RW", 1, 0, {""});
    DISABLED.set_powerwell("vcccfn_gated");
    DISABLED.set_rand_mode(0);
   DISABLED.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DISABLED ));

    ENABLED_PCQ = new("ENABLED_PCQ", "RW", 1, 1, {""});
    ENABLED_PCQ.set_powerwell("vcccfn_gated");
    ENABLED_PCQ.set_rand_mode(0);
   ENABLED_PCQ.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( ENABLED_PCQ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_DISABLE_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_DISABLE_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_13(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_13(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/V", 13, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_LIMIT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_LIMIT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.desired)
     `RAL_FIELD_CP_13(LIMIT, LIMIT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.actual)
     `RAL_FIELD_CP_13(LIMIT, LIMIT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LIMIT = new("LIMIT", "RW", 13, 0, {""});
    LIMIT.set_powerwell("vcccfn_gated");
    LIMIT.set_rand_mode(0);
   LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_LIMIT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_LIMIT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_THRESHOLD_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field THRESH;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_THRESHOLD_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRESH, THRESH.desired)
     `RAL_FIELD_CP_13(THRESH, THRESH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRESH, THRESH.actual)
     `RAL_FIELD_CP_13(THRESH, THRESH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    THRESH = new("THRESH", "RW", 13, 0, {""});
    THRESH.set_powerwell("vcccfn_gated");
    THRESH.set_rand_mode(0);
   THRESH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( THRESH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_THRESHOLD_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_THRESHOLD_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOKEN_COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOKEN_COUNT, TOKEN_COUNT.desired)
     `RAL_FIELD_CP_11(TOKEN_COUNT, TOKEN_COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOKEN_COUNT, TOKEN_COUNT.actual)
     `RAL_FIELD_CP_11(TOKEN_COUNT, TOKEN_COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOKEN_COUNT = new("TOKEN_COUNT", "RW/V", 11, 0, {""});
    TOKEN_COUNT.set_powerwell("vcccfn_gated");
    TOKEN_COUNT.set_rand_mode(0);
   TOKEN_COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOKEN_COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_DEPTH_SELECT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TOKEN_DEPTH_SELECT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_DEPTH_SELECT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.desired)
     `RAL_FIELD_CP_4(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.actual)
     `RAL_FIELD_CP_4(TOKEN_DEPTH_SELECT, TOKEN_DEPTH_SELECT.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TOKEN_DEPTH_SELECT = new("TOKEN_DEPTH_SELECT", "RW", 4, 0, {""});
    TOKEN_DEPTH_SELECT.set_powerwell("vcccfn_gated");
    TOKEN_DEPTH_SELECT.set_rand_mode(0);
   TOKEN_DEPTH_SELECT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( TOKEN_DEPTH_SELECT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_DEPTH_SELECT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_DEPTH_SELECT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/C", 32, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTL_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/C", 32, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTH_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTH_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_DIR_MAX_DEPTH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_DIR_MAX_DEPTH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_13(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_13(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DEPTH = new("DEPTH", "RW/C", 13, 0, {""});
    DEPTH.set_powerwell("vcccfn_gated");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_DIR_MAX_DEPTH_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_DIR_MAX_DEPTH_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/C", 32, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTL_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/C", 32, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTH_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTH_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_DIR_ENQUEUE_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_DIR_ENQUEUE_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_13(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_13(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 13, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_DIR_ENQUEUE_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_DIR_ENQUEUE_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_DIR_QID_DPTH_THRSH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field THRESH;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_DIR_QID_DPTH_THRSH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRESH, THRESH.desired)
     `RAL_FIELD_CP_15(THRESH, THRESH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRESH, THRESH.actual)
     `RAL_FIELD_CP_15(THRESH, THRESH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    THRESH = new("THRESH", "RW", 15, 0, {""});
    THRESH.set_powerwell("vcccfn_gated");
    THRESH.set_rand_mode(0);
   THRESH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( THRESH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_DIR_QID_DPTH_THRSH_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_DIR_QID_DPTH_THRSH_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_1(COUNT, COUNT.desired, 16)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_1(COUNT, COUNT.actual, 16)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/V", 17, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_LIMIT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LIMIT;
  sla_ral_field V;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_LIMIT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.desired)
     `RAL_FIELD_CP_15(LIMIT, LIMIT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(V, V.desired)
     `RAL_FIELD_CP_1(V, V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.actual)
     `RAL_FIELD_CP_15(LIMIT, LIMIT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(V, V.actual)
     `RAL_FIELD_CP_1(V, V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LIMIT = new("LIMIT", "RW", 15, 0, {""});
    LIMIT.set_powerwell("vcccfn_gated");
    LIMIT.set_rand_mode(0);
   LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( LIMIT ));

    V = new("V", "RW", 1, 15, {""});
    V.set_powerwell("vcccfn_gated");
    V.set_rand_mode(0);
   V.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_LIMIT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_LIMIT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_12(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_12(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 12, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_LIMIT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_LIMIT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.desired)
     `RAL_FIELD_CP_12(LIMIT, LIMIT.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.actual)
     `RAL_FIELD_CP_12(LIMIT, LIMIT.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LIMIT = new("LIMIT", "RW", 12, 0, {""});
    LIMIT.set_powerwell("vcccfn_gated");
    LIMIT.set_rand_mode(0);
   LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_LIMIT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_LIMIT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/C", 32, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTL_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/C", 32, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTH_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTH_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_ATQ_ENQUEUE_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_ATQ_ENQUEUE_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_14(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_14(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 14, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_ATQ_ENQUEUE_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_ATQ_ENQUEUE_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_ENQUEUE_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_ENQUEUE_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_14(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_14(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 14, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_ENQUEUE_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_ENQUEUE_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_12(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_12(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/V", 12, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_LIMIT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_LIMIT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.desired)
     `RAL_FIELD_CP_12(LIMIT, LIMIT.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.actual)
     `RAL_FIELD_CP_12(LIMIT, LIMIT.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LIMIT = new("LIMIT", "RW", 12, 0, {""});
    LIMIT.set_powerwell("vcccfn_gated");
    LIMIT.set_rand_mode(0);
   LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_LIMIT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_LIMIT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_00_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_00_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_01_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_01_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_02_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_02_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_02_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_02_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_03_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_03_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_03_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_03_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_04_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_04_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_04_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_04_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_05_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_05_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_05_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_05_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_06_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_06_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_06_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_06_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_07_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_07_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_07_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_07_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_08_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_08_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_08_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_08_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_09_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_09_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_09_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_09_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_10_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_10_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_10_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_10_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_11_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_11_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_11_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_11_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_12_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_12_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_12_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_12_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_13_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_13_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_13_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_13_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_14_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_14_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_14_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_14_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_15_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_15_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_15_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_15_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_00_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_00_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_01_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_01_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_02_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_02_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_02_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_02_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_03_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_03_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_03_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_03_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_04_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_04_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_04_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_04_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_05_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_05_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_05_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_05_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_06_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_06_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_06_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_06_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_07_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_07_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_07_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_07_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_08_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_08_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_08_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_08_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_09_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_09_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_09_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_09_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_10_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_10_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_10_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_10_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_11_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_11_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_11_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_11_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_12_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_12_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_12_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_12_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_13_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_13_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_13_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_13_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_14_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_14_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_14_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_14_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_15_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ_P0;
  sla_ral_field CQ_P1;
  sla_ral_field CQ_P2;
  sla_ral_field CQ_P3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_15_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.desired)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.desired)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.desired)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.desired)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ_P0, CQ_P0.actual)
     `RAL_FIELD_CP_8(CQ_P0, CQ_P0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P1, CQ_P1.actual)
     `RAL_FIELD_CP_8(CQ_P1, CQ_P1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P2, CQ_P2.actual)
     `RAL_FIELD_CP_8(CQ_P2, CQ_P2.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CQ_P3, CQ_P3.actual)
     `RAL_FIELD_CP_8(CQ_P3, CQ_P3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ_P0 = new("CQ_P0", "RW", 8, 0, {""});
    CQ_P0.set_powerwell("vcccfn_gated");
    CQ_P0.set_rand_mode(0);
   CQ_P0.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P0 ));

    CQ_P1 = new("CQ_P1", "RW", 8, 8, {""});
    CQ_P1.set_powerwell("vcccfn_gated");
    CQ_P1.set_rand_mode(0);
   CQ_P1.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P1 ));

    CQ_P2 = new("CQ_P2", "RW", 8, 16, {""});
    CQ_P2.set_powerwell("vcccfn_gated");
    CQ_P2.set_rand_mode(0);
   CQ_P2.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P2 ));

    CQ_P3 = new("CQ_P3", "RW", 8, 24, {""});
    CQ_P3.set_powerwell("vcccfn_gated");
    CQ_P3.set_rand_mode(0);
   CQ_P3.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( CQ_P3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_15_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_15_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_LDB_REPLAY_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_LDB_REPLAY_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_14(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_14(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 14, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_LDB_REPLAY_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_LDB_REPLAY_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_DIR_REPLAY_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_DIR_REPLAY_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_13(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_13(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 13, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_DIR_REPLAY_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_DIR_REPLAY_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_NALDB_MAX_DEPTH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DEPTH;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_NALDB_MAX_DEPTH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH, DEPTH.desired)
     `RAL_FIELD_CP_14(DEPTH, DEPTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DEPTH, DEPTH.actual)
     `RAL_FIELD_CP_14(DEPTH, DEPTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DEPTH = new("DEPTH", "RW/C", 14, 0, {""});
    DEPTH.set_powerwell("vcccfn_gated");
    DEPTH.set_rand_mode(0);
   DEPTH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( DEPTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_NALDB_MAX_DEPTH_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_NALDB_MAX_DEPTH_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/C", 32, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTL_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RW/C", 32, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTH_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTH_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_ATM_QID_DPTH_THRSH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field THRESH;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_ATM_QID_DPTH_THRSH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRESH, THRESH.desired)
     `RAL_FIELD_CP_15(THRESH, THRESH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRESH, THRESH.actual)
     `RAL_FIELD_CP_15(THRESH, THRESH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    THRESH = new("THRESH", "RW", 15, 0, {""});
    THRESH.set_powerwell("vcccfn_gated");
    THRESH.set_rand_mode(0);
   THRESH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( THRESH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_ATM_QID_DPTH_THRSH_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_ATM_QID_DPTH_THRSH_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_NALB_QID_DPTH_THRSH_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field THRESH;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_NALB_QID_DPTH_THRSH_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRESH, THRESH.desired)
     `RAL_FIELD_CP_15(THRESH, THRESH.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(THRESH, THRESH.actual)
     `RAL_FIELD_CP_15(THRESH, THRESH.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    THRESH = new("THRESH", "RW", 15, 0, {""});
    THRESH.set_powerwell("vcccfn_gated");
    THRESH.set_rand_mode(0);
   THRESH.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( THRESH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_NALB_QID_DPTH_THRSH_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_NALB_QID_DPTH_THRSH_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_QID_ATM_ACTIVE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_QID_ATM_ACTIVE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_15(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_15(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 15, 0, {""});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_QID_ATM_ACTIVE_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_QID_ATM_ACTIVE_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_12(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_12(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 12, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_aqed_tot_enqueue_count.internal_f[11:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_LIMIT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_LIMIT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.desired)
     `RAL_FIELD_CP_12(LIMIT, LIMIT.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.actual)
     `RAL_FIELD_CP_12(LIMIT, LIMIT.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LIMIT = new("LIMIT", "RW", 12, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_aqed_tot_enqueue_limit.internal_f[11:0]"});
    LIMIT.set_powerwell("vcccfn_gated");
    LIMIT.set_rand_mode(0);
   LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    LIMIT.set_logical_path("HQMID");
    void'(add_field( LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_LIMIT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_LIMIT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PRI0_WEIGHT;
  sla_ral_field PRI1_WEIGHT;
  sla_ral_field PRI2_WEIGHT;
  sla_ral_field PRI3_WEIGHT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI0_WEIGHT, PRI0_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI0_WEIGHT, PRI0_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI1_WEIGHT, PRI1_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI1_WEIGHT, PRI1_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI2_WEIGHT, PRI2_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI2_WEIGHT, PRI2_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI3_WEIGHT, PRI3_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI3_WEIGHT, PRI3_WEIGHT.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI0_WEIGHT, PRI0_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI0_WEIGHT, PRI0_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI1_WEIGHT, PRI1_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI1_WEIGHT, PRI1_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI2_WEIGHT, PRI2_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI2_WEIGHT, PRI2_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI3_WEIGHT, PRI3_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI3_WEIGHT, PRI3_WEIGHT.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PRI0_WEIGHT = new("PRI0_WEIGHT", "RW", 8, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[7:0]"});
    PRI0_WEIGHT.set_powerwell("vcccfn_gated");
    PRI0_WEIGHT.set_rand_mode(0);
   PRI0_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI0_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI0_WEIGHT ));

    PRI1_WEIGHT = new("PRI1_WEIGHT", "RW", 8, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[15:8]"});
    PRI1_WEIGHT.set_powerwell("vcccfn_gated");
    PRI1_WEIGHT.set_rand_mode(0);
   PRI1_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI1_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI1_WEIGHT ));

    PRI2_WEIGHT = new("PRI2_WEIGHT", "RW", 8, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[23:16]"});
    PRI2_WEIGHT.set_powerwell("vcccfn_gated");
    PRI2_WEIGHT.set_rand_mode(0);
   PRI2_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI2_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI2_WEIGHT ));

    PRI3_WEIGHT = new("PRI3_WEIGHT", "RW", 8, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[31:24]"});
    PRI3_WEIGHT.set_powerwell("vcccfn_gated");
    PRI3_WEIGHT.set_rand_mode(0);
   PRI3_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI3_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI3_WEIGHT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PRI4_WEIGHT;
  sla_ral_field PRI5_WEIGHT;
  sla_ral_field PRI6_WEIGHT;
  sla_ral_field PRI7_WEIGHT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI4_WEIGHT, PRI4_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI4_WEIGHT, PRI4_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI5_WEIGHT, PRI5_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI5_WEIGHT, PRI5_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI6_WEIGHT, PRI6_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI6_WEIGHT, PRI6_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI7_WEIGHT, PRI7_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI7_WEIGHT, PRI7_WEIGHT.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI4_WEIGHT, PRI4_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI4_WEIGHT, PRI4_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI5_WEIGHT, PRI5_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI5_WEIGHT, PRI5_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI6_WEIGHT, PRI6_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI6_WEIGHT, PRI6_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI7_WEIGHT, PRI7_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI7_WEIGHT, PRI7_WEIGHT.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PRI4_WEIGHT = new("PRI4_WEIGHT", "RW", 8, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[7:0]"});
    PRI4_WEIGHT.set_powerwell("vcccfn_gated");
    PRI4_WEIGHT.set_rand_mode(0);
   PRI4_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI4_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI4_WEIGHT ));

    PRI5_WEIGHT = new("PRI5_WEIGHT", "RW", 8, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[15:8]"});
    PRI5_WEIGHT.set_powerwell("vcccfn_gated");
    PRI5_WEIGHT.set_rand_mode(0);
   PRI5_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI5_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI5_WEIGHT ));

    PRI6_WEIGHT = new("PRI6_WEIGHT", "RW", 8, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[23:16]"});
    PRI6_WEIGHT.set_powerwell("vcccfn_gated");
    PRI6_WEIGHT.set_rand_mode(0);
   PRI6_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI6_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI6_WEIGHT ));

    PRI7_WEIGHT = new("PRI7_WEIGHT", "RW", 8, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[31:24]"});
    PRI7_WEIGHT.set_powerwell("vcccfn_gated");
    PRI7_WEIGHT.set_rand_mode(0);
   PRI7_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI7_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI7_WEIGHT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_1_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_1_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_ISSUE_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ATM_CQ_CMP_WEIGHT;
  sla_ral_field NALB_CQ_CMP_WEIGHT;
  sla_ral_field ORD_QID_CMP_WEIGHT;
  sla_ral_field UNO_QID_CMP_WEIGHT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_ISSUE_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ATM_CQ_CMP_WEIGHT, ATM_CQ_CMP_WEIGHT.desired)
     `RAL_FIELD_CP_8(ATM_CQ_CMP_WEIGHT, ATM_CQ_CMP_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(NALB_CQ_CMP_WEIGHT, NALB_CQ_CMP_WEIGHT.desired)
     `RAL_FIELD_CP_8(NALB_CQ_CMP_WEIGHT, NALB_CQ_CMP_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(ORD_QID_CMP_WEIGHT, ORD_QID_CMP_WEIGHT.desired)
     `RAL_FIELD_CP_8(ORD_QID_CMP_WEIGHT, ORD_QID_CMP_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(UNO_QID_CMP_WEIGHT, UNO_QID_CMP_WEIGHT.desired)
     `RAL_FIELD_CP_8(UNO_QID_CMP_WEIGHT, UNO_QID_CMP_WEIGHT.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ATM_CQ_CMP_WEIGHT, ATM_CQ_CMP_WEIGHT.actual)
     `RAL_FIELD_CP_8(ATM_CQ_CMP_WEIGHT, ATM_CQ_CMP_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(NALB_CQ_CMP_WEIGHT, NALB_CQ_CMP_WEIGHT.actual)
     `RAL_FIELD_CP_8(NALB_CQ_CMP_WEIGHT, NALB_CQ_CMP_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(ORD_QID_CMP_WEIGHT, ORD_QID_CMP_WEIGHT.actual)
     `RAL_FIELD_CP_8(ORD_QID_CMP_WEIGHT, ORD_QID_CMP_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(UNO_QID_CMP_WEIGHT, UNO_QID_CMP_WEIGHT.actual)
     `RAL_FIELD_CP_8(UNO_QID_CMP_WEIGHT, UNO_QID_CMP_WEIGHT.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ATM_CQ_CMP_WEIGHT = new("ATM_CQ_CMP_WEIGHT", "RW", 8, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[7:0]"});
    ATM_CQ_CMP_WEIGHT.set_powerwell("vcccfn_gated");
    ATM_CQ_CMP_WEIGHT.set_rand_mode(0);
   ATM_CQ_CMP_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    ATM_CQ_CMP_WEIGHT.set_logical_path("HQMID");
    void'(add_field( ATM_CQ_CMP_WEIGHT ));

    NALB_CQ_CMP_WEIGHT = new("NALB_CQ_CMP_WEIGHT", "RW", 8, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[15:8]"});
    NALB_CQ_CMP_WEIGHT.set_powerwell("vcccfn_gated");
    NALB_CQ_CMP_WEIGHT.set_rand_mode(0);
   NALB_CQ_CMP_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_CQ_CMP_WEIGHT.set_logical_path("HQMID");
    void'(add_field( NALB_CQ_CMP_WEIGHT ));

    ORD_QID_CMP_WEIGHT = new("ORD_QID_CMP_WEIGHT", "RW", 8, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[23:16]"});
    ORD_QID_CMP_WEIGHT.set_powerwell("vcccfn_gated");
    ORD_QID_CMP_WEIGHT.set_rand_mode(0);
   ORD_QID_CMP_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    ORD_QID_CMP_WEIGHT.set_logical_path("HQMID");
    void'(add_field( ORD_QID_CMP_WEIGHT ));

    UNO_QID_CMP_WEIGHT = new("UNO_QID_CMP_WEIGHT", "RW", 8, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[31:24]"});
    UNO_QID_CMP_WEIGHT.set_powerwell("vcccfn_gated");
    UNO_QID_CMP_WEIGHT.set_rand_mode(0);
   UNO_QID_CMP_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    UNO_QID_CMP_WEIGHT.set_logical_path("HQMID");
    void'(add_field( UNO_QID_CMP_WEIGHT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_ISSUE_0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_ISSUE_0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PRI0_WEIGHT;
  sla_ral_field PRI1_WEIGHT;
  sla_ral_field PRI2_WEIGHT;
  sla_ral_field PRI3_WEIGHT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI0_WEIGHT, PRI0_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI0_WEIGHT, PRI0_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI1_WEIGHT, PRI1_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI1_WEIGHT, PRI1_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI2_WEIGHT, PRI2_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI2_WEIGHT, PRI2_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI3_WEIGHT, PRI3_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI3_WEIGHT, PRI3_WEIGHT.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI0_WEIGHT, PRI0_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI0_WEIGHT, PRI0_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI1_WEIGHT, PRI1_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI1_WEIGHT, PRI1_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI2_WEIGHT, PRI2_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI2_WEIGHT, PRI2_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI3_WEIGHT, PRI3_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI3_WEIGHT, PRI3_WEIGHT.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PRI0_WEIGHT = new("PRI0_WEIGHT", "RW", 8, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[7:0]"});
    PRI0_WEIGHT.set_powerwell("vcccfn_gated");
    PRI0_WEIGHT.set_rand_mode(0);
   PRI0_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI0_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI0_WEIGHT ));

    PRI1_WEIGHT = new("PRI1_WEIGHT", "RW", 8, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[15:8]"});
    PRI1_WEIGHT.set_powerwell("vcccfn_gated");
    PRI1_WEIGHT.set_rand_mode(0);
   PRI1_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI1_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI1_WEIGHT ));

    PRI2_WEIGHT = new("PRI2_WEIGHT", "RW", 8, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[23:16]"});
    PRI2_WEIGHT.set_powerwell("vcccfn_gated");
    PRI2_WEIGHT.set_rand_mode(0);
   PRI2_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI2_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI2_WEIGHT ));

    PRI3_WEIGHT = new("PRI3_WEIGHT", "RW", 8, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[31:24]"});
    PRI3_WEIGHT.set_powerwell("vcccfn_gated");
    PRI3_WEIGHT.set_rand_mode(0);
   PRI3_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI3_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI3_WEIGHT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PRI4_WEIGHT;
  sla_ral_field PRI5_WEIGHT;
  sla_ral_field PRI6_WEIGHT;
  sla_ral_field PRI7_WEIGHT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI4_WEIGHT, PRI4_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI4_WEIGHT, PRI4_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI5_WEIGHT, PRI5_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI5_WEIGHT, PRI5_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI6_WEIGHT, PRI6_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI6_WEIGHT, PRI6_WEIGHT.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI7_WEIGHT, PRI7_WEIGHT.desired)
     `RAL_FIELD_CP_8(PRI7_WEIGHT, PRI7_WEIGHT.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PRI4_WEIGHT, PRI4_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI4_WEIGHT, PRI4_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI5_WEIGHT, PRI5_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI5_WEIGHT, PRI5_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI6_WEIGHT, PRI6_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI6_WEIGHT, PRI6_WEIGHT.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PRI7_WEIGHT, PRI7_WEIGHT.actual)
     `RAL_FIELD_CP_8(PRI7_WEIGHT, PRI7_WEIGHT.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PRI4_WEIGHT = new("PRI4_WEIGHT", "RW", 8, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[7:0]"});
    PRI4_WEIGHT.set_powerwell("vcccfn_gated");
    PRI4_WEIGHT.set_rand_mode(0);
   PRI4_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI4_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI4_WEIGHT ));

    PRI5_WEIGHT = new("PRI5_WEIGHT", "RW", 8, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[15:8]"});
    PRI5_WEIGHT.set_powerwell("vcccfn_gated");
    PRI5_WEIGHT.set_rand_mode(0);
   PRI5_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI5_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI5_WEIGHT ));

    PRI6_WEIGHT = new("PRI6_WEIGHT", "RW", 8, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[23:16]"});
    PRI6_WEIGHT.set_powerwell("vcccfn_gated");
    PRI6_WEIGHT.set_rand_mode(0);
   PRI6_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI6_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI6_WEIGHT ));

    PRI7_WEIGHT = new("PRI7_WEIGHT", "RW", 8, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[31:24]"});
    PRI7_WEIGHT.set_powerwell("vcccfn_gated");
    PRI7_WEIGHT.set_rand_mode(0);
   PRI7_WEIGHT.set_reset_signame("hqm_inp_gated_rst_n");
    PRI7_WEIGHT.set_logical_path("HQMID");
    void'(add_field( PRI7_WEIGHT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_1_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_1_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_13(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_13(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 13, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_tot_inflight_count.internal_f[12:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_LIMIT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_LIMIT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.desired)
     `RAL_FIELD_CP_13(LIMIT, LIMIT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(LIMIT, LIMIT.actual)
     `RAL_FIELD_CP_13(LIMIT, LIMIT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    LIMIT = new("LIMIT", "RW", 13, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_tot_inflight_limit.internal_f[12:0]"});
    LIMIT.set_powerwell("vcccfn_gated");
    LIMIT.set_rand_mode(0);
   LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    LIMIT.set_logical_path("HQMID");
    void'(add_field( LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_LIMIT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_LIMIT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_LIMIT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FID_LIMIT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_LIMIT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FID_LIMIT, FID_LIMIT.desired)
     `RAL_FIELD_CP_12(FID_LIMIT, FID_LIMIT.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FID_LIMIT, FID_LIMIT.actual)
     `RAL_FIELD_CP_12(FID_LIMIT, FID_LIMIT.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FID_LIMIT = new("FID_LIMIT", "RW", 12, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_fid_inflight_limit.internal_f[11:0]"});
    FID_LIMIT.set_powerwell("vcccfn_gated");
    FID_LIMIT.set_rand_mode(0);
   FID_LIMIT.set_reset_signame("hqm_inp_gated_rst_n");
    FID_LIMIT.set_logical_path("HQMID");
    void'(add_field( FID_LIMIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_LIMIT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_LIMIT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field FID_COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FID_COUNT, FID_COUNT.desired)
     `RAL_FIELD_CP_12(FID_COUNT, FID_COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(FID_COUNT, FID_COUNT.actual)
     `RAL_FIELD_CP_12(FID_COUNT, FID_COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    FID_COUNT = new("FID_COUNT", "RO/V", 12, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_fid_inflight_count.internal_f[11:0]"});
    FID_COUNT.set_powerwell("vcccfn_gated");
    FID_COUNT.set_rand_mode(0);
   FID_COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    FID_COUNT.set_logical_path("HQMID");
    void'(add_field( FID_COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CQ;
  sla_ral_field QIDIX;
  sla_ral_field VALUE;
  sla_ral_field NALB_HASWORK_V;
  sla_ral_field RLIST_HASWORK_V;
  sla_ral_field SLIST_HASWORK_V;
  sla_ral_field INFLIGHT_OK_V;
  sla_ral_field AQED_NFULL_V;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ, CQ.desired)
     `RAL_FIELD_CP_8(CQ, CQ.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(QIDIX, QIDIX.desired)
     `RAL_FIELD_CP_3(QIDIX, QIDIX.desired, 0,1,2)
     `RAL_FIELD_CP(VALUE, VALUE.desired)
     `RAL_FIELD_CP_1(VALUE, VALUE.desired, 0)
     `RAL_FIELD_CP(NALB_HASWORK_V, NALB_HASWORK_V.desired)
     `RAL_FIELD_CP_1(NALB_HASWORK_V, NALB_HASWORK_V.desired, 0)
     `RAL_FIELD_CP(RLIST_HASWORK_V, RLIST_HASWORK_V.desired)
     `RAL_FIELD_CP_1(RLIST_HASWORK_V, RLIST_HASWORK_V.desired, 0)
     `RAL_FIELD_CP(SLIST_HASWORK_V, SLIST_HASWORK_V.desired)
     `RAL_FIELD_CP_1(SLIST_HASWORK_V, SLIST_HASWORK_V.desired, 0)
     `RAL_FIELD_CP(INFLIGHT_OK_V, INFLIGHT_OK_V.desired)
     `RAL_FIELD_CP_1(INFLIGHT_OK_V, INFLIGHT_OK_V.desired, 0)
     `RAL_FIELD_CP(AQED_NFULL_V, AQED_NFULL_V.desired)
     `RAL_FIELD_CP_1(AQED_NFULL_V, AQED_NFULL_V.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CQ, CQ.actual)
     `RAL_FIELD_CP_8(CQ, CQ.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(QIDIX, QIDIX.actual)
     `RAL_FIELD_CP_3(QIDIX, QIDIX.actual, 0,1,2)
     `RAL_FIELD_CP(VALUE, VALUE.actual)
     `RAL_FIELD_CP_1(VALUE, VALUE.actual, 0)
     `RAL_FIELD_CP(NALB_HASWORK_V, NALB_HASWORK_V.actual)
     `RAL_FIELD_CP_1(NALB_HASWORK_V, NALB_HASWORK_V.actual, 0)
     `RAL_FIELD_CP(RLIST_HASWORK_V, RLIST_HASWORK_V.actual)
     `RAL_FIELD_CP_1(RLIST_HASWORK_V, RLIST_HASWORK_V.actual, 0)
     `RAL_FIELD_CP(SLIST_HASWORK_V, SLIST_HASWORK_V.actual)
     `RAL_FIELD_CP_1(SLIST_HASWORK_V, SLIST_HASWORK_V.actual, 0)
     `RAL_FIELD_CP(INFLIGHT_OK_V, INFLIGHT_OK_V.actual)
     `RAL_FIELD_CP_1(INFLIGHT_OK_V, INFLIGHT_OK_V.actual, 0)
     `RAL_FIELD_CP(AQED_NFULL_V, AQED_NFULL_V.actual)
     `RAL_FIELD_CP_1(AQED_NFULL_V, AQED_NFULL_V.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CQ = new("CQ", "RW/V", 8, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[7:0]"});
    CQ.set_powerwell("vcccfn_gated");
    CQ.set_rand_mode(0);
   CQ.set_reset_signame("hqm_inp_gated_rst_n");
    CQ.set_logical_path("HQMID");
    void'(add_field( CQ ));

    QIDIX = new("QIDIX", "RW/V", 3, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[10:8]"});
    QIDIX.set_powerwell("vcccfn_gated");
    QIDIX.set_rand_mode(0);
   QIDIX.set_reset_signame("hqm_inp_gated_rst_n");
    QIDIX.set_logical_path("HQMID");
    void'(add_field( QIDIX ));

    VALUE = new("VALUE", "RW/V", 1, 11, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[11:11]"});
    VALUE.set_powerwell("vcccfn_gated");
    VALUE.set_rand_mode(0);
   VALUE.set_reset_signame("hqm_inp_gated_rst_n");
    VALUE.set_logical_path("HQMID");
    void'(add_field( VALUE ));

    NALB_HASWORK_V = new("NALB_HASWORK_V", "RW/V", 1, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[12:12]"});
    NALB_HASWORK_V.set_powerwell("vcccfn_gated");
    NALB_HASWORK_V.set_rand_mode(0);
   NALB_HASWORK_V.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_HASWORK_V.set_logical_path("HQMID");
    void'(add_field( NALB_HASWORK_V ));

    RLIST_HASWORK_V = new("RLIST_HASWORK_V", "RW/V", 1, 13, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[13:13]"});
    RLIST_HASWORK_V.set_powerwell("vcccfn_gated");
    RLIST_HASWORK_V.set_rand_mode(0);
   RLIST_HASWORK_V.set_reset_signame("hqm_inp_gated_rst_n");
    RLIST_HASWORK_V.set_logical_path("HQMID");
    void'(add_field( RLIST_HASWORK_V ));

    SLIST_HASWORK_V = new("SLIST_HASWORK_V", "RW/V", 1, 14, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[14:14]"});
    SLIST_HASWORK_V.set_powerwell("vcccfn_gated");
    SLIST_HASWORK_V.set_rand_mode(0);
   SLIST_HASWORK_V.set_reset_signame("hqm_inp_gated_rst_n");
    SLIST_HASWORK_V.set_logical_path("HQMID");
    void'(add_field( SLIST_HASWORK_V ));

    INFLIGHT_OK_V = new("INFLIGHT_OK_V", "RW/V", 1, 15, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[15:15]"});
    INFLIGHT_OK_V.set_powerwell("vcccfn_gated");
    INFLIGHT_OK_V.set_rand_mode(0);
   INFLIGHT_OK_V.set_reset_signame("hqm_inp_gated_rst_n");
    INFLIGHT_OK_V.set_logical_path("HQMID");
    void'(add_field( INFLIGHT_OK_V ));

    AQED_NFULL_V = new("AQED_NFULL_V", "RW/V", 1, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[16:16]"});
    AQED_NFULL_V.set_powerwell("vcccfn_gated");
    AQED_NFULL_V.set_rand_mode(0);
   AQED_NFULL_V.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_NFULL_V.set_logical_path("HQMID");
    void'(add_field( AQED_NFULL_V ));

    RSVZ0 = new("RSVZ0", "RW/V", 15, 17, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[31:17]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_CONTROL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_CONTROL_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LSP_CSR_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RSVZ0;
  sla_ral_field INT0_QID_IF_UF_ALARM_DIS;
  sla_ral_field INT0_QID_IF_UF_SYND_DIS;
  sla_ral_field INT1_CQ_IF_UF_ALARM_DIS;
  sla_ral_field INT1_CQ_IF_UF_SYND_DIS;
  sla_ral_field INT2_TOK_UF_ALARM_DIS;
  sla_ral_field INT2_TOK_UF_SYND_DIS;
  sla_ral_field INT3_HW_ERR_ALARM_DIS;
  sla_ral_field INT3_HW_ERR_SYND_DIS;
  sla_ral_field INT4_NON_MC_ALARM_DIS;
  sla_ral_field INT4_NON_MC_SYND_DIS;
  sla_ral_field RSVZ1;
  sla_ral_field LDB_WRR_COUNT_BASE;
  sla_ral_field ATM_CQ_QID_PRIORITY_PROT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LSP_CSR_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_4(RSVZ0, RSVZ0.desired, 0,1,2,3)
     `RAL_FIELD_CP(INT0_QID_IF_UF_ALARM_DIS, INT0_QID_IF_UF_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT0_QID_IF_UF_ALARM_DIS, INT0_QID_IF_UF_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT0_QID_IF_UF_SYND_DIS, INT0_QID_IF_UF_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT0_QID_IF_UF_SYND_DIS, INT0_QID_IF_UF_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT1_CQ_IF_UF_ALARM_DIS, INT1_CQ_IF_UF_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT1_CQ_IF_UF_ALARM_DIS, INT1_CQ_IF_UF_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT1_CQ_IF_UF_SYND_DIS, INT1_CQ_IF_UF_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT1_CQ_IF_UF_SYND_DIS, INT1_CQ_IF_UF_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT2_TOK_UF_ALARM_DIS, INT2_TOK_UF_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT2_TOK_UF_ALARM_DIS, INT2_TOK_UF_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT2_TOK_UF_SYND_DIS, INT2_TOK_UF_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT2_TOK_UF_SYND_DIS, INT2_TOK_UF_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT3_HW_ERR_ALARM_DIS, INT3_HW_ERR_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT3_HW_ERR_ALARM_DIS, INT3_HW_ERR_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT3_HW_ERR_SYND_DIS, INT3_HW_ERR_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT3_HW_ERR_SYND_DIS, INT3_HW_ERR_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(INT4_NON_MC_ALARM_DIS, INT4_NON_MC_ALARM_DIS.desired)
     `RAL_FIELD_CP_1(INT4_NON_MC_ALARM_DIS, INT4_NON_MC_ALARM_DIS.desired, 0)
     `RAL_FIELD_CP(INT4_NON_MC_SYND_DIS, INT4_NON_MC_SYND_DIS.desired)
     `RAL_FIELD_CP_1(INT4_NON_MC_SYND_DIS, INT4_NON_MC_SYND_DIS.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_14(RSVZ1, RSVZ1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
     `RAL_FIELD_CP(LDB_WRR_COUNT_BASE, LDB_WRR_COUNT_BASE.desired)
     `RAL_FIELD_CP_3(LDB_WRR_COUNT_BASE, LDB_WRR_COUNT_BASE.desired, 0,1,2)
     `RAL_FIELD_CP(ATM_CQ_QID_PRIORITY_PROT, ATM_CQ_QID_PRIORITY_PROT.desired)
     `RAL_FIELD_CP_1(ATM_CQ_QID_PRIORITY_PROT, ATM_CQ_QID_PRIORITY_PROT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_4(RSVZ0, RSVZ0.actual, 0,1,2,3)
     `RAL_FIELD_CP(INT0_QID_IF_UF_ALARM_DIS, INT0_QID_IF_UF_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT0_QID_IF_UF_ALARM_DIS, INT0_QID_IF_UF_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT0_QID_IF_UF_SYND_DIS, INT0_QID_IF_UF_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT0_QID_IF_UF_SYND_DIS, INT0_QID_IF_UF_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT1_CQ_IF_UF_ALARM_DIS, INT1_CQ_IF_UF_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT1_CQ_IF_UF_ALARM_DIS, INT1_CQ_IF_UF_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT1_CQ_IF_UF_SYND_DIS, INT1_CQ_IF_UF_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT1_CQ_IF_UF_SYND_DIS, INT1_CQ_IF_UF_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT2_TOK_UF_ALARM_DIS, INT2_TOK_UF_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT2_TOK_UF_ALARM_DIS, INT2_TOK_UF_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT2_TOK_UF_SYND_DIS, INT2_TOK_UF_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT2_TOK_UF_SYND_DIS, INT2_TOK_UF_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT3_HW_ERR_ALARM_DIS, INT3_HW_ERR_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT3_HW_ERR_ALARM_DIS, INT3_HW_ERR_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT3_HW_ERR_SYND_DIS, INT3_HW_ERR_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT3_HW_ERR_SYND_DIS, INT3_HW_ERR_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(INT4_NON_MC_ALARM_DIS, INT4_NON_MC_ALARM_DIS.actual)
     `RAL_FIELD_CP_1(INT4_NON_MC_ALARM_DIS, INT4_NON_MC_ALARM_DIS.actual, 0)
     `RAL_FIELD_CP(INT4_NON_MC_SYND_DIS, INT4_NON_MC_SYND_DIS.actual)
     `RAL_FIELD_CP_1(INT4_NON_MC_SYND_DIS, INT4_NON_MC_SYND_DIS.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_14(RSVZ1, RSVZ1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
     `RAL_FIELD_CP(LDB_WRR_COUNT_BASE, LDB_WRR_COUNT_BASE.actual)
     `RAL_FIELD_CP_3(LDB_WRR_COUNT_BASE, LDB_WRR_COUNT_BASE.actual, 0,1,2)
     `RAL_FIELD_CP(ATM_CQ_QID_PRIORITY_PROT, ATM_CQ_QID_PRIORITY_PROT.actual)
     `RAL_FIELD_CP_1(ATM_CQ_QID_PRIORITY_PROT, ATM_CQ_QID_PRIORITY_PROT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RSVZ0 = new("RSVZ0", "RW", 4, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[3:0]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    INT0_QID_IF_UF_ALARM_DIS = new("INT0_QID_IF_UF_ALARM_DIS", "RW", 1, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[4:4]"});
    INT0_QID_IF_UF_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT0_QID_IF_UF_ALARM_DIS.set_rand_mode(0);
   INT0_QID_IF_UF_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT0_QID_IF_UF_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT0_QID_IF_UF_ALARM_DIS ));

    INT0_QID_IF_UF_SYND_DIS = new("INT0_QID_IF_UF_SYND_DIS", "RW", 1, 5, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[5:5]"});
    INT0_QID_IF_UF_SYND_DIS.set_powerwell("vcccfn_gated");
    INT0_QID_IF_UF_SYND_DIS.set_rand_mode(0);
   INT0_QID_IF_UF_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT0_QID_IF_UF_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT0_QID_IF_UF_SYND_DIS ));

    INT1_CQ_IF_UF_ALARM_DIS = new("INT1_CQ_IF_UF_ALARM_DIS", "RW", 1, 6, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[6:6]"});
    INT1_CQ_IF_UF_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT1_CQ_IF_UF_ALARM_DIS.set_rand_mode(0);
   INT1_CQ_IF_UF_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT1_CQ_IF_UF_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT1_CQ_IF_UF_ALARM_DIS ));

    INT1_CQ_IF_UF_SYND_DIS = new("INT1_CQ_IF_UF_SYND_DIS", "RW", 1, 7, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[7:7]"});
    INT1_CQ_IF_UF_SYND_DIS.set_powerwell("vcccfn_gated");
    INT1_CQ_IF_UF_SYND_DIS.set_rand_mode(0);
   INT1_CQ_IF_UF_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT1_CQ_IF_UF_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT1_CQ_IF_UF_SYND_DIS ));

    INT2_TOK_UF_ALARM_DIS = new("INT2_TOK_UF_ALARM_DIS", "RW", 1, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[8:8]"});
    INT2_TOK_UF_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT2_TOK_UF_ALARM_DIS.set_rand_mode(0);
   INT2_TOK_UF_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT2_TOK_UF_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT2_TOK_UF_ALARM_DIS ));

    INT2_TOK_UF_SYND_DIS = new("INT2_TOK_UF_SYND_DIS", "RW", 1, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[9:9]"});
    INT2_TOK_UF_SYND_DIS.set_powerwell("vcccfn_gated");
    INT2_TOK_UF_SYND_DIS.set_rand_mode(0);
   INT2_TOK_UF_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT2_TOK_UF_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT2_TOK_UF_SYND_DIS ));

    INT3_HW_ERR_ALARM_DIS = new("INT3_HW_ERR_ALARM_DIS", "RW", 1, 10, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[10:10]"});
    INT3_HW_ERR_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT3_HW_ERR_ALARM_DIS.set_rand_mode(0);
   INT3_HW_ERR_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT3_HW_ERR_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT3_HW_ERR_ALARM_DIS ));

    INT3_HW_ERR_SYND_DIS = new("INT3_HW_ERR_SYND_DIS", "RW", 1, 11, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[11:11]"});
    INT3_HW_ERR_SYND_DIS.set_powerwell("vcccfn_gated");
    INT3_HW_ERR_SYND_DIS.set_rand_mode(0);
   INT3_HW_ERR_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT3_HW_ERR_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT3_HW_ERR_SYND_DIS ));

    INT4_NON_MC_ALARM_DIS = new("INT4_NON_MC_ALARM_DIS", "RW", 1, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[12:12]"});
    INT4_NON_MC_ALARM_DIS.set_powerwell("vcccfn_gated");
    INT4_NON_MC_ALARM_DIS.set_rand_mode(0);
   INT4_NON_MC_ALARM_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT4_NON_MC_ALARM_DIS.set_logical_path("HQMID");
    void'(add_field( INT4_NON_MC_ALARM_DIS ));

    INT4_NON_MC_SYND_DIS = new("INT4_NON_MC_SYND_DIS", "RW", 1, 13, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[13:13]"});
    INT4_NON_MC_SYND_DIS.set_powerwell("vcccfn_gated");
    INT4_NON_MC_SYND_DIS.set_rand_mode(0);
   INT4_NON_MC_SYND_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    INT4_NON_MC_SYND_DIS.set_logical_path("HQMID");
    void'(add_field( INT4_NON_MC_SYND_DIS ));

    RSVZ1 = new("RSVZ1", "RW", 14, 14, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[27:14]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    LDB_WRR_COUNT_BASE = new("LDB_WRR_COUNT_BASE", "RW", 3, 28, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[30:28]"});
    LDB_WRR_COUNT_BASE.set_powerwell("vcccfn_gated");
    LDB_WRR_COUNT_BASE.set_rand_mode(0);
   LDB_WRR_COUNT_BASE.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_WRR_COUNT_BASE.set_logical_path("HQMID");
    void'(add_field( LDB_WRR_COUNT_BASE ));

    ATM_CQ_QID_PRIORITY_PROT = new("ATM_CQ_QID_PRIORITY_PROT", "RW", 1, 31, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[31:31]"});
    ATM_CQ_QID_PRIORITY_PROT.set_powerwell("vcccfn_gated");
    ATM_CQ_QID_PRIORITY_PROT.set_rand_mode(0);
   ATM_CQ_QID_PRIORITY_PROT.set_reset_signame("hqm_inp_gated_rst_n");
    ATM_CQ_QID_PRIORITY_PROT.set_logical_path("HQMID");
    void'(add_field( ATM_CQ_QID_PRIORITY_PROT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LSP_CSR_CONTROL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LSP_CSR_CONTROL_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_dir_sch_count_l.internal_f[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_dir_sch_count_h.internal_f[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_ldb_sch_count.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_ldb_sch_count.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SYNDROME_SW_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDDATA;
  sla_ral_field SYNDTYPE;
  sla_ral_field SYNDVALID;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SYNDROME_SW_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.desired)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.desired)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.desired, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.desired)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.actual)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.actual)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.actual, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.actual)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDDATA = new("SYNDDATA", "RO/V", 28, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_sw.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
    SYNDDATA.set_powerwell("vcccfn_gated");
    SYNDDATA.set_rand_mode(0);
   SYNDDATA.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDDATA.set_logical_path("HQMID");
    void'(add_field( SYNDDATA ));

    SYNDTYPE = new("SYNDTYPE", "RO/V", 3, 28, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_sw.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
    SYNDTYPE.set_powerwell("vcccfn_gated");
    SYNDTYPE.set_rand_mode(0);
   SYNDTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDTYPE.set_logical_path("HQMID");
    void'(add_field( SYNDTYPE ));

    SYNDVALID = new("SYNDVALID", "RW/1C/V", 1, 31, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_sw.i_hqm_AW_register_wtcfg.internal_f[31:31]"});
    SYNDVALID.set_powerwell("vcccfn_gated");
    SYNDVALID.set_rand_mode(0);
   SYNDVALID.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDVALID.set_logical_path("HQMID");
    void'(add_field( SYNDVALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SYNDROME_SW_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SYNDROME_SW_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_UNIT_VERSION_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field UNIT_VERSION;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_UNIT_VERSION_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.desired)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(UNIT_VERSION, UNIT_VERSION.actual)
     `RAL_FIELD_CP_8(UNIT_VERSION, UNIT_VERSION.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    UNIT_VERSION = new("UNIT_VERSION", "RO", 8, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_version.status[31:24]"});
    UNIT_VERSION.set_powerwell("vcccfn_gated");
    UNIT_VERSION.set_rand_mode(0);
   UNIT_VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT_VERSION.set_logical_path("HQMID");
    void'(add_field( UNIT_VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_UNIT_VERSION_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_UNIT_VERSION_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_COS_CTRL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field STARV_AVOID_MIN_THRESH;
  sla_ral_field STARV_AVOID_MAX_THRESH;
  sla_ral_field RSVZ0;
  sla_ral_field STARV_AVOID_ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_COS_CTRL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(STARV_AVOID_MIN_THRESH, STARV_AVOID_MIN_THRESH.desired)
     `RAL_FIELD_CP_10(STARV_AVOID_MIN_THRESH, STARV_AVOID_MIN_THRESH.desired, 0,1,2,3,4,5,6,7,8,9)
     `RAL_FIELD_CP(STARV_AVOID_MAX_THRESH, STARV_AVOID_MAX_THRESH.desired)
     `RAL_FIELD_CP_10(STARV_AVOID_MAX_THRESH, STARV_AVOID_MAX_THRESH.desired, 0,1,2,3,4,5,6,7,8,9)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_11(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(STARV_AVOID_ENABLE, STARV_AVOID_ENABLE.desired)
     `RAL_FIELD_CP_1(STARV_AVOID_ENABLE, STARV_AVOID_ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(STARV_AVOID_MIN_THRESH, STARV_AVOID_MIN_THRESH.actual)
     `RAL_FIELD_CP_10(STARV_AVOID_MIN_THRESH, STARV_AVOID_MIN_THRESH.actual, 0,1,2,3,4,5,6,7,8,9)
     `RAL_FIELD_CP(STARV_AVOID_MAX_THRESH, STARV_AVOID_MAX_THRESH.actual)
     `RAL_FIELD_CP_10(STARV_AVOID_MAX_THRESH, STARV_AVOID_MAX_THRESH.actual, 0,1,2,3,4,5,6,7,8,9)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_11(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(STARV_AVOID_ENABLE, STARV_AVOID_ENABLE.actual)
     `RAL_FIELD_CP_1(STARV_AVOID_ENABLE, STARV_AVOID_ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    STARV_AVOID_MIN_THRESH = new("STARV_AVOID_MIN_THRESH", "RW", 10, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[9:0]"});
    STARV_AVOID_MIN_THRESH.set_powerwell("vcccfn_gated");
    STARV_AVOID_MIN_THRESH.set_rand_mode(0);
   STARV_AVOID_MIN_THRESH.set_reset_signame("hqm_inp_gated_rst_n");
    STARV_AVOID_MIN_THRESH.set_logical_path("HQMID");
    void'(add_field( STARV_AVOID_MIN_THRESH ));

    STARV_AVOID_MAX_THRESH = new("STARV_AVOID_MAX_THRESH", "RW", 10, 10, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[19:10]"});
    STARV_AVOID_MAX_THRESH.set_powerwell("vcccfn_gated");
    STARV_AVOID_MAX_THRESH.set_rand_mode(0);
   STARV_AVOID_MAX_THRESH.set_reset_signame("hqm_inp_gated_rst_n");
    STARV_AVOID_MAX_THRESH.set_logical_path("HQMID");
    void'(add_field( STARV_AVOID_MAX_THRESH ));

    RSVZ0 = new("RSVZ0", "RW", 11, 20, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[30:20]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    STARV_AVOID_ENABLE = new("STARV_AVOID_ENABLE", "RW", 1, 31, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[31:31]"});
    STARV_AVOID_ENABLE.set_powerwell("vcccfn_gated");
    STARV_AVOID_ENABLE.set_rand_mode(0);
   STARV_AVOID_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    STARV_AVOID_ENABLE.set_logical_path("HQMID");
    void'(add_field( STARV_AVOID_ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_COS_CTRL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_COS_CTRL_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAT_VALUE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAT_VALUE, SAT_VALUE.desired)
     `RAL_FIELD_CP_16(SAT_VALUE, SAT_VALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAT_VALUE, SAT_VALUE.actual)
     `RAL_FIELD_CP_16(SAT_VALUE, SAT_VALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAT_VALUE = new("SAT_VALUE", "RW/V", 16, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos0.internal_f[15:0]"});
    SAT_VALUE.set_powerwell("vcccfn_gated");
    SAT_VALUE.set_rand_mode(0);
   SAT_VALUE.set_reset_signame("hqm_inp_gated_rst_n");
    SAT_VALUE.set_logical_path("HQMID");
    void'(add_field( SAT_VALUE ));

    RSVZ0 = new("RSVZ0", "RW/V", 16, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos0.internal_f[31:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAT_VALUE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAT_VALUE, SAT_VALUE.desired)
     `RAL_FIELD_CP_16(SAT_VALUE, SAT_VALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAT_VALUE, SAT_VALUE.actual)
     `RAL_FIELD_CP_16(SAT_VALUE, SAT_VALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAT_VALUE = new("SAT_VALUE", "RW/V", 16, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos1.internal_f[15:0]"});
    SAT_VALUE.set_powerwell("vcccfn_gated");
    SAT_VALUE.set_rand_mode(0);
   SAT_VALUE.set_reset_signame("hqm_inp_gated_rst_n");
    SAT_VALUE.set_logical_path("HQMID");
    void'(add_field( SAT_VALUE ));

    RSVZ0 = new("RSVZ0", "RW/V", 16, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos1.internal_f[31:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS1_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS1_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAT_VALUE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAT_VALUE, SAT_VALUE.desired)
     `RAL_FIELD_CP_16(SAT_VALUE, SAT_VALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAT_VALUE, SAT_VALUE.actual)
     `RAL_FIELD_CP_16(SAT_VALUE, SAT_VALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAT_VALUE = new("SAT_VALUE", "RW/V", 16, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos2.internal_f[15:0]"});
    SAT_VALUE.set_powerwell("vcccfn_gated");
    SAT_VALUE.set_rand_mode(0);
   SAT_VALUE.set_reset_signame("hqm_inp_gated_rst_n");
    SAT_VALUE.set_logical_path("HQMID");
    void'(add_field( SAT_VALUE ));

    RSVZ0 = new("RSVZ0", "RW/V", 16, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos2.internal_f[31:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS2_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS2_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS3_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SAT_VALUE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS3_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAT_VALUE, SAT_VALUE.desired)
     `RAL_FIELD_CP_16(SAT_VALUE, SAT_VALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SAT_VALUE, SAT_VALUE.actual)
     `RAL_FIELD_CP_16(SAT_VALUE, SAT_VALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SAT_VALUE = new("SAT_VALUE", "RW/V", 16, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos3.internal_f[15:0]"});
    SAT_VALUE.set_powerwell("vcccfn_gated");
    SAT_VALUE.set_rand_mode(0);
   SAT_VALUE.set_reset_signame("hqm_inp_gated_rst_n");
    SAT_VALUE.set_logical_path("HQMID");
    void'(add_field( SAT_VALUE ));

    RSVZ0 = new("RSVZ0", "RW/V", 16, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos3.internal_f[31:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS3_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS3_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;
  sla_ral_field STARV_AVOID_COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(STARV_AVOID_COUNT, STARV_AVOID_COUNT.desired)
     `RAL_FIELD_CP_11(STARV_AVOID_COUNT, STARV_AVOID_COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(STARV_AVOID_COUNT, STARV_AVOID_COUNT.actual)
     `RAL_FIELD_CP_11(STARV_AVOID_COUNT, STARV_AVOID_COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 16, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos0.internal_f[15:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

    STARV_AVOID_COUNT = new("STARV_AVOID_COUNT", "RO/V", 11, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos0.internal_f[26:16]"});
    STARV_AVOID_COUNT.set_powerwell("vcccfn_gated");
    STARV_AVOID_COUNT.set_rand_mode(0);
   STARV_AVOID_COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    STARV_AVOID_COUNT.set_logical_path("HQMID");
    void'(add_field( STARV_AVOID_COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;
  sla_ral_field STARV_AVOID_COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(STARV_AVOID_COUNT, STARV_AVOID_COUNT.desired)
     `RAL_FIELD_CP_11(STARV_AVOID_COUNT, STARV_AVOID_COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(STARV_AVOID_COUNT, STARV_AVOID_COUNT.actual)
     `RAL_FIELD_CP_11(STARV_AVOID_COUNT, STARV_AVOID_COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 16, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos1.internal_f[15:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

    STARV_AVOID_COUNT = new("STARV_AVOID_COUNT", "RO/V", 11, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos1.internal_f[26:16]"});
    STARV_AVOID_COUNT.set_powerwell("vcccfn_gated");
    STARV_AVOID_COUNT.set_rand_mode(0);
   STARV_AVOID_COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    STARV_AVOID_COUNT.set_logical_path("HQMID");
    void'(add_field( STARV_AVOID_COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS1_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS1_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;
  sla_ral_field STARV_AVOID_COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(STARV_AVOID_COUNT, STARV_AVOID_COUNT.desired)
     `RAL_FIELD_CP_11(STARV_AVOID_COUNT, STARV_AVOID_COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(STARV_AVOID_COUNT, STARV_AVOID_COUNT.actual)
     `RAL_FIELD_CP_11(STARV_AVOID_COUNT, STARV_AVOID_COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 16, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos2.internal_f[15:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

    STARV_AVOID_COUNT = new("STARV_AVOID_COUNT", "RO/V", 11, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos2.internal_f[26:16]"});
    STARV_AVOID_COUNT.set_powerwell("vcccfn_gated");
    STARV_AVOID_COUNT.set_rand_mode(0);
   STARV_AVOID_COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    STARV_AVOID_COUNT.set_logical_path("HQMID");
    void'(add_field( STARV_AVOID_COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS2_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS2_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS3_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;
  sla_ral_field STARV_AVOID_COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS3_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(STARV_AVOID_COUNT, STARV_AVOID_COUNT.desired)
     `RAL_FIELD_CP_11(STARV_AVOID_COUNT, STARV_AVOID_COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(STARV_AVOID_COUNT, STARV_AVOID_COUNT.actual)
     `RAL_FIELD_CP_11(STARV_AVOID_COUNT, STARV_AVOID_COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 16, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos3.internal_f[15:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

    STARV_AVOID_COUNT = new("STARV_AVOID_COUNT", "RO/V", 11, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos3.internal_f[26:16]"});
    STARV_AVOID_COUNT.set_powerwell("vcccfn_gated");
    STARV_AVOID_COUNT.set_rand_mode(0);
   STARV_AVOID_COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    STARV_AVOID_COUNT.set_logical_path("HQMID");
    void'(add_field( STARV_AVOID_COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS3_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS3_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SHDW_CTRL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TRANSFER;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SHDW_CTRL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TRANSFER, TRANSFER.desired)
     `RAL_FIELD_CP_1(TRANSFER, TRANSFER.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TRANSFER, TRANSFER.actual)
     `RAL_FIELD_CP_1(TRANSFER, TRANSFER.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TRANSFER = new("TRANSFER", "RW/1S/V", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_ctrl.internal_f[0:0]"});
    TRANSFER.set_powerwell("vcccfn_gated");
    TRANSFER.set_rand_mode(0);
   TRANSFER.set_reset_signame("hqm_inp_gated_rst_n");
    TRANSFER.set_logical_path("HQMID");
    void'(add_field( TRANSFER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SHDW_CTRL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SHDW_CTRL_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field BW_RANGE;
  sla_ral_field RSVZ0;
  sla_ral_field NO_EXTRA_CREDIT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BW_RANGE, BW_RANGE.desired)
     `RAL_FIELD_CP_9(BW_RANGE, BW_RANGE.desired, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21)
     `RAL_FIELD_CP(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.desired)
     `RAL_FIELD_CP_1(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BW_RANGE, BW_RANGE.actual)
     `RAL_FIELD_CP_9(BW_RANGE, BW_RANGE.actual, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21)
     `RAL_FIELD_CP(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.actual)
     `RAL_FIELD_CP_1(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    BW_RANGE = new("BW_RANGE", "RW", 9, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos0.internal_f[8:0]"});
    BW_RANGE.set_powerwell("vcccfn_gated");
    BW_RANGE.set_rand_mode(0);
   BW_RANGE.set_reset_signame("hqm_inp_gated_rst_n");
    BW_RANGE.set_logical_path("HQMID");
    void'(add_field( BW_RANGE ));

    RSVZ0 = new("RSVZ0", "RW", 22, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos0.internal_f[30:9]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    NO_EXTRA_CREDIT = new("NO_EXTRA_CREDIT", "RW", 1, 31, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos0.internal_f[31:31]"});
    NO_EXTRA_CREDIT.set_powerwell("vcccfn_gated");
    NO_EXTRA_CREDIT.set_rand_mode(0);
   NO_EXTRA_CREDIT.set_reset_signame("hqm_inp_gated_rst_n");
    NO_EXTRA_CREDIT.set_logical_path("HQMID");
    void'(add_field( NO_EXTRA_CREDIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field BW_RANGE;
  sla_ral_field RSVZ0;
  sla_ral_field NO_EXTRA_CREDIT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BW_RANGE, BW_RANGE.desired)
     `RAL_FIELD_CP_9(BW_RANGE, BW_RANGE.desired, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21)
     `RAL_FIELD_CP(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.desired)
     `RAL_FIELD_CP_1(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BW_RANGE, BW_RANGE.actual)
     `RAL_FIELD_CP_9(BW_RANGE, BW_RANGE.actual, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21)
     `RAL_FIELD_CP(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.actual)
     `RAL_FIELD_CP_1(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    BW_RANGE = new("BW_RANGE", "RW", 9, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos1.internal_f[8:0]"});
    BW_RANGE.set_powerwell("vcccfn_gated");
    BW_RANGE.set_rand_mode(0);
   BW_RANGE.set_reset_signame("hqm_inp_gated_rst_n");
    BW_RANGE.set_logical_path("HQMID");
    void'(add_field( BW_RANGE ));

    RSVZ0 = new("RSVZ0", "RW", 22, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos1.internal_f[30:9]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    NO_EXTRA_CREDIT = new("NO_EXTRA_CREDIT", "RW", 1, 31, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos1.internal_f[31:31]"});
    NO_EXTRA_CREDIT.set_powerwell("vcccfn_gated");
    NO_EXTRA_CREDIT.set_rand_mode(0);
   NO_EXTRA_CREDIT.set_reset_signame("hqm_inp_gated_rst_n");
    NO_EXTRA_CREDIT.set_logical_path("HQMID");
    void'(add_field( NO_EXTRA_CREDIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS1_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS1_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field BW_RANGE;
  sla_ral_field RSVZ0;
  sla_ral_field NO_EXTRA_CREDIT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BW_RANGE, BW_RANGE.desired)
     `RAL_FIELD_CP_9(BW_RANGE, BW_RANGE.desired, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21)
     `RAL_FIELD_CP(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.desired)
     `RAL_FIELD_CP_1(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BW_RANGE, BW_RANGE.actual)
     `RAL_FIELD_CP_9(BW_RANGE, BW_RANGE.actual, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21)
     `RAL_FIELD_CP(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.actual)
     `RAL_FIELD_CP_1(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    BW_RANGE = new("BW_RANGE", "RW", 9, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos2.internal_f[8:0]"});
    BW_RANGE.set_powerwell("vcccfn_gated");
    BW_RANGE.set_rand_mode(0);
   BW_RANGE.set_reset_signame("hqm_inp_gated_rst_n");
    BW_RANGE.set_logical_path("HQMID");
    void'(add_field( BW_RANGE ));

    RSVZ0 = new("RSVZ0", "RW", 22, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos2.internal_f[30:9]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    NO_EXTRA_CREDIT = new("NO_EXTRA_CREDIT", "RW", 1, 31, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos2.internal_f[31:31]"});
    NO_EXTRA_CREDIT.set_powerwell("vcccfn_gated");
    NO_EXTRA_CREDIT.set_rand_mode(0);
   NO_EXTRA_CREDIT.set_reset_signame("hqm_inp_gated_rst_n");
    NO_EXTRA_CREDIT.set_logical_path("HQMID");
    void'(add_field( NO_EXTRA_CREDIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS2_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS2_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS3_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field BW_RANGE;
  sla_ral_field RSVZ0;
  sla_ral_field NO_EXTRA_CREDIT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS3_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BW_RANGE, BW_RANGE.desired)
     `RAL_FIELD_CP_9(BW_RANGE, BW_RANGE.desired, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21)
     `RAL_FIELD_CP(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.desired)
     `RAL_FIELD_CP_1(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(BW_RANGE, BW_RANGE.actual)
     `RAL_FIELD_CP_9(BW_RANGE, BW_RANGE.actual, 0,1,2,3,4,5,6,7,8)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21)
     `RAL_FIELD_CP(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.actual)
     `RAL_FIELD_CP_1(NO_EXTRA_CREDIT, NO_EXTRA_CREDIT.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    BW_RANGE = new("BW_RANGE", "RW", 9, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos3.internal_f[8:0]"});
    BW_RANGE.set_powerwell("vcccfn_gated");
    BW_RANGE.set_rand_mode(0);
   BW_RANGE.set_reset_signame("hqm_inp_gated_rst_n");
    BW_RANGE.set_logical_path("HQMID");
    void'(add_field( BW_RANGE ));

    RSVZ0 = new("RSVZ0", "RW", 22, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos3.internal_f[30:9]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    NO_EXTRA_CREDIT = new("NO_EXTRA_CREDIT", "RW", 1, 31, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos3.internal_f[31:31]"});
    NO_EXTRA_CREDIT.set_powerwell("vcccfn_gated");
    NO_EXTRA_CREDIT.set_rand_mode(0);
   NO_EXTRA_CREDIT.set_reset_signame("hqm_inp_gated_rst_n");
    NO_EXTRA_CREDIT.set_logical_path("HQMID");
    void'(add_field( NO_EXTRA_CREDIT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS3_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS3_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SCH_RDY_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SCH_RDY_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_sch_rdy.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SCH_RDY_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SCH_RDY_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SCH_RDY_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SCH_RDY_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_sch_rdy.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SCH_RDY_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SCH_RDY_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos0.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos0.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos1.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos1.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos2.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos2.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos3.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos3.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RDY_COS0_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RDY_COS0_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos0.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RDY_COS0_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RDY_COS0_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RDY_COS0_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RDY_COS0_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos0.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RDY_COS0_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RDY_COS0_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RDY_COS1_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RDY_COS1_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos1.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RDY_COS1_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RDY_COS1_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RDY_COS1_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RDY_COS1_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos1.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RDY_COS1_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RDY_COS1_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RDY_COS2_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RDY_COS2_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos2.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RDY_COS2_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RDY_COS2_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RDY_COS2_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RDY_COS2_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos2.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RDY_COS2_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RDY_COS2_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RDY_COS3_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RDY_COS3_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos3.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RDY_COS3_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RDY_COS3_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RDY_COS3_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RDY_COS3_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos3.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RDY_COS3_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RDY_COS3_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos0.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos0.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos1.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos1.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos2.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos2.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos3.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos3.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos0.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos0.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos1.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos1.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos2.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos2.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos3.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos3.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_0.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_0.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_1.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_1.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_2.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_2.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_3.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_3.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_4.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_4.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_5.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_5.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_6.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_6.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_7.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_7.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ENAB;
  sla_ral_field CLR;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ENAB, ENAB.desired)
     `RAL_FIELD_CP_1(ENAB, ENAB.desired, 0)
     `RAL_FIELD_CP(CLR, CLR.desired)
     `RAL_FIELD_CP_1(CLR, CLR.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ENAB, ENAB.actual)
     `RAL_FIELD_CP_1(ENAB, ENAB.actual, 0)
     `RAL_FIELD_CP(CLR, CLR.actual)
     `RAL_FIELD_CP_1(CLR, CLR.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ENAB = new("ENAB", "RW", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_control.internal_f[0:0]"});
    ENAB.set_powerwell("vcccfn_gated");
    ENAB.set_rand_mode(0);
   ENAB.set_reset_signame("hqm_inp_gated_rst_n");
    ENAB.set_logical_path("HQMID");
    void'(add_field( ENAB ));

    CLR = new("CLR", "RW", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_control.internal_f[1:1]"});
    CLR.set_powerwell("vcccfn_gated");
    CLR.set_rand_mode(0);
   CLR.set_reset_signame("hqm_inp_gated_rst_n");
    CLR.set_logical_path("HQMID");
    void'(add_field( CLR ));

    RSVZ0 = new("RSVZ0", "RW", 30, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_control.internal_f[31:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_CONTROL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_CONTROL_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_0.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_0.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_1.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_1.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_2.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_2.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_3.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_3.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_4.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_4.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_5.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_5.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_6.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_6.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_7.count[31:0]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNT;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.desired)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNT, COUNT.actual)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNT, COUNT.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNT = new("COUNT", "RO/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_7.count[63:32]"});
    COUNT.set_powerwell("vcccfn_gated");
    COUNT.set_rand_mode(0);
   COUNT.set_reset_signame("hqm_inp_gated_rst_n");
    COUNT.set_logical_path("HQMID");
    void'(add_field( COUNT ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CONTROL_SCHED_SLOT_COUNT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ENAB;
  sla_ral_field CLR;
  sla_ral_field RSVZ0;
  sla_ral_field CQ;
  sla_ral_field RSVZ1;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CONTROL_SCHED_SLOT_COUNT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ENAB, ENAB.desired)
     `RAL_FIELD_CP_1(ENAB, ENAB.desired, 0)
     `RAL_FIELD_CP(CLR, CLR.desired)
     `RAL_FIELD_CP_1(CLR, CLR.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(CQ, CQ.desired)
     `RAL_FIELD_CP_8(CQ, CQ.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_16(RSVZ1, RSVZ1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ENAB, ENAB.actual)
     `RAL_FIELD_CP_1(ENAB, ENAB.actual, 0)
     `RAL_FIELD_CP(CLR, CLR.actual)
     `RAL_FIELD_CP_1(CLR, CLR.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_6(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(CQ, CQ.actual)
     `RAL_FIELD_CP_8(CQ, CQ.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_16(RSVZ1, RSVZ1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ENAB = new("ENAB", "RW", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[0:0]"});
    ENAB.set_powerwell("vcccfn_gated");
    ENAB.set_rand_mode(0);
   ENAB.set_reset_signame("hqm_inp_gated_rst_n");
    ENAB.set_logical_path("HQMID");
    void'(add_field( ENAB ));

    CLR = new("CLR", "RW", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[1:1]"});
    CLR.set_powerwell("vcccfn_gated");
    CLR.set_rand_mode(0);
   CLR.set_reset_signame("hqm_inp_gated_rst_n");
    CLR.set_logical_path("HQMID");
    void'(add_field( CLR ));

    RSVZ0 = new("RSVZ0", "RW", 6, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[7:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    CQ = new("CQ", "RW", 8, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[15:8]"});
    CQ.set_powerwell("vcccfn_gated");
    CQ.set_rand_mode(0);
   CQ.set_reset_signame("hqm_inp_gated_rst_n");
    CQ.set_logical_path("HQMID");
    void'(add_field( CQ ));

    RSVZ1 = new("RSVZ1", "RW", 16, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[31:16]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CONTROL_SCHED_SLOT_COUNT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CONTROL_SCHED_SLOT_COUNT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DISAB_ATQ_EMPTY_ARB;
  sla_ral_field INC_TOK_UNIT_IDLE;
  sla_ral_field DISAB_RLIST_PRI;
  sla_ral_field INC_CMP_UNIT_IDLE;
  sla_ral_field ENAB_IF_THRESH;
  sla_ral_field RSVZ0;
  sla_ral_field DIR_SINGLE_OP;
  sla_ral_field DIR_HALF_BW;
  sla_ral_field DIR_SINGLE_OUT;
  sla_ral_field DIR_DISAB_MULTI;
  sla_ral_field ATQ_SINGLE_OP;
  sla_ral_field ATQ_HALF_BW;
  sla_ral_field ATQ_SINGLE_OUT;
  sla_ral_field ATQ_DISAB_MULTI;
  sla_ral_field DIRRPL_SINGLE_OP;
  sla_ral_field DIRRPL_HALF_BW;
  sla_ral_field DIRRPL_SINGLE_OUT;
  sla_ral_field LBRPL_SINGLE_OP;
  sla_ral_field LBRPL_HALF_BW;
  sla_ral_field LBRPL_SINGLE_OUT;
  sla_ral_field LDB_SINGLE_OP;
  sla_ral_field LDB_HALF_BW;
  sla_ral_field LDB_DISAB_MULTI;
  sla_ral_field ATM_SINGLE_SCH;
  sla_ral_field ATM_SINGLE_CMP;
  sla_ral_field LDB_CE_TOG_ARB;
  sla_ral_field RSVZ1;
  sla_ral_field SMON0_VALID_SEL;
  sla_ral_field SMON0_VALUE_SEL;
  sla_ral_field SMON0_COMPARE_SEL;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISAB_ATQ_EMPTY_ARB, DISAB_ATQ_EMPTY_ARB.desired)
     `RAL_FIELD_CP_1(DISAB_ATQ_EMPTY_ARB, DISAB_ATQ_EMPTY_ARB.desired, 0)
     `RAL_FIELD_CP(INC_TOK_UNIT_IDLE, INC_TOK_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(INC_TOK_UNIT_IDLE, INC_TOK_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(DISAB_RLIST_PRI, DISAB_RLIST_PRI.desired)
     `RAL_FIELD_CP_1(DISAB_RLIST_PRI, DISAB_RLIST_PRI.desired, 0)
     `RAL_FIELD_CP(INC_CMP_UNIT_IDLE, INC_CMP_UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(INC_CMP_UNIT_IDLE, INC_CMP_UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(ENAB_IF_THRESH, ENAB_IF_THRESH.desired)
     `RAL_FIELD_CP_1(ENAB_IF_THRESH, ENAB_IF_THRESH.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.desired, 0)
     `RAL_FIELD_CP(DIR_SINGLE_OP, DIR_SINGLE_OP.desired)
     `RAL_FIELD_CP_1(DIR_SINGLE_OP, DIR_SINGLE_OP.desired, 0)
     `RAL_FIELD_CP(DIR_HALF_BW, DIR_HALF_BW.desired)
     `RAL_FIELD_CP_1(DIR_HALF_BW, DIR_HALF_BW.desired, 0)
     `RAL_FIELD_CP(DIR_SINGLE_OUT, DIR_SINGLE_OUT.desired)
     `RAL_FIELD_CP_1(DIR_SINGLE_OUT, DIR_SINGLE_OUT.desired, 0)
     `RAL_FIELD_CP(DIR_DISAB_MULTI, DIR_DISAB_MULTI.desired)
     `RAL_FIELD_CP_1(DIR_DISAB_MULTI, DIR_DISAB_MULTI.desired, 0)
     `RAL_FIELD_CP(ATQ_SINGLE_OP, ATQ_SINGLE_OP.desired)
     `RAL_FIELD_CP_1(ATQ_SINGLE_OP, ATQ_SINGLE_OP.desired, 0)
     `RAL_FIELD_CP(ATQ_HALF_BW, ATQ_HALF_BW.desired)
     `RAL_FIELD_CP_1(ATQ_HALF_BW, ATQ_HALF_BW.desired, 0)
     `RAL_FIELD_CP(ATQ_SINGLE_OUT, ATQ_SINGLE_OUT.desired)
     `RAL_FIELD_CP_1(ATQ_SINGLE_OUT, ATQ_SINGLE_OUT.desired, 0)
     `RAL_FIELD_CP(ATQ_DISAB_MULTI, ATQ_DISAB_MULTI.desired)
     `RAL_FIELD_CP_1(ATQ_DISAB_MULTI, ATQ_DISAB_MULTI.desired, 0)
     `RAL_FIELD_CP(DIRRPL_SINGLE_OP, DIRRPL_SINGLE_OP.desired)
     `RAL_FIELD_CP_1(DIRRPL_SINGLE_OP, DIRRPL_SINGLE_OP.desired, 0)
     `RAL_FIELD_CP(DIRRPL_HALF_BW, DIRRPL_HALF_BW.desired)
     `RAL_FIELD_CP_1(DIRRPL_HALF_BW, DIRRPL_HALF_BW.desired, 0)
     `RAL_FIELD_CP(DIRRPL_SINGLE_OUT, DIRRPL_SINGLE_OUT.desired)
     `RAL_FIELD_CP_1(DIRRPL_SINGLE_OUT, DIRRPL_SINGLE_OUT.desired, 0)
     `RAL_FIELD_CP(LBRPL_SINGLE_OP, LBRPL_SINGLE_OP.desired)
     `RAL_FIELD_CP_1(LBRPL_SINGLE_OP, LBRPL_SINGLE_OP.desired, 0)
     `RAL_FIELD_CP(LBRPL_HALF_BW, LBRPL_HALF_BW.desired)
     `RAL_FIELD_CP_1(LBRPL_HALF_BW, LBRPL_HALF_BW.desired, 0)
     `RAL_FIELD_CP(LBRPL_SINGLE_OUT, LBRPL_SINGLE_OUT.desired)
     `RAL_FIELD_CP_1(LBRPL_SINGLE_OUT, LBRPL_SINGLE_OUT.desired, 0)
     `RAL_FIELD_CP(LDB_SINGLE_OP, LDB_SINGLE_OP.desired)
     `RAL_FIELD_CP_1(LDB_SINGLE_OP, LDB_SINGLE_OP.desired, 0)
     `RAL_FIELD_CP(LDB_HALF_BW, LDB_HALF_BW.desired)
     `RAL_FIELD_CP_1(LDB_HALF_BW, LDB_HALF_BW.desired, 0)
     `RAL_FIELD_CP(LDB_DISAB_MULTI, LDB_DISAB_MULTI.desired)
     `RAL_FIELD_CP_1(LDB_DISAB_MULTI, LDB_DISAB_MULTI.desired, 0)
     `RAL_FIELD_CP(ATM_SINGLE_SCH, ATM_SINGLE_SCH.desired)
     `RAL_FIELD_CP_1(ATM_SINGLE_SCH, ATM_SINGLE_SCH.desired, 0)
     `RAL_FIELD_CP(ATM_SINGLE_CMP, ATM_SINGLE_CMP.desired)
     `RAL_FIELD_CP_1(ATM_SINGLE_CMP, ATM_SINGLE_CMP.desired, 0)
     `RAL_FIELD_CP(LDB_CE_TOG_ARB, LDB_CE_TOG_ARB.desired)
     `RAL_FIELD_CP_1(LDB_CE_TOG_ARB, LDB_CE_TOG_ARB.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.desired, 0)
     `RAL_FIELD_CP(SMON0_VALID_SEL, SMON0_VALID_SEL.desired)
     `RAL_FIELD_CP_2(SMON0_VALID_SEL, SMON0_VALID_SEL.desired, 0,1)
     `RAL_FIELD_CP(SMON0_VALUE_SEL, SMON0_VALUE_SEL.desired)
     `RAL_FIELD_CP_1(SMON0_VALUE_SEL, SMON0_VALUE_SEL.desired, 0)
     `RAL_FIELD_CP(SMON0_COMPARE_SEL, SMON0_COMPARE_SEL.desired)
     `RAL_FIELD_CP_2(SMON0_COMPARE_SEL, SMON0_COMPARE_SEL.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DISAB_ATQ_EMPTY_ARB, DISAB_ATQ_EMPTY_ARB.actual)
     `RAL_FIELD_CP_1(DISAB_ATQ_EMPTY_ARB, DISAB_ATQ_EMPTY_ARB.actual, 0)
     `RAL_FIELD_CP(INC_TOK_UNIT_IDLE, INC_TOK_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(INC_TOK_UNIT_IDLE, INC_TOK_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(DISAB_RLIST_PRI, DISAB_RLIST_PRI.actual)
     `RAL_FIELD_CP_1(DISAB_RLIST_PRI, DISAB_RLIST_PRI.actual, 0)
     `RAL_FIELD_CP(INC_CMP_UNIT_IDLE, INC_CMP_UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(INC_CMP_UNIT_IDLE, INC_CMP_UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(ENAB_IF_THRESH, ENAB_IF_THRESH.actual)
     `RAL_FIELD_CP_1(ENAB_IF_THRESH, ENAB_IF_THRESH.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.actual, 0)
     `RAL_FIELD_CP(DIR_SINGLE_OP, DIR_SINGLE_OP.actual)
     `RAL_FIELD_CP_1(DIR_SINGLE_OP, DIR_SINGLE_OP.actual, 0)
     `RAL_FIELD_CP(DIR_HALF_BW, DIR_HALF_BW.actual)
     `RAL_FIELD_CP_1(DIR_HALF_BW, DIR_HALF_BW.actual, 0)
     `RAL_FIELD_CP(DIR_SINGLE_OUT, DIR_SINGLE_OUT.actual)
     `RAL_FIELD_CP_1(DIR_SINGLE_OUT, DIR_SINGLE_OUT.actual, 0)
     `RAL_FIELD_CP(DIR_DISAB_MULTI, DIR_DISAB_MULTI.actual)
     `RAL_FIELD_CP_1(DIR_DISAB_MULTI, DIR_DISAB_MULTI.actual, 0)
     `RAL_FIELD_CP(ATQ_SINGLE_OP, ATQ_SINGLE_OP.actual)
     `RAL_FIELD_CP_1(ATQ_SINGLE_OP, ATQ_SINGLE_OP.actual, 0)
     `RAL_FIELD_CP(ATQ_HALF_BW, ATQ_HALF_BW.actual)
     `RAL_FIELD_CP_1(ATQ_HALF_BW, ATQ_HALF_BW.actual, 0)
     `RAL_FIELD_CP(ATQ_SINGLE_OUT, ATQ_SINGLE_OUT.actual)
     `RAL_FIELD_CP_1(ATQ_SINGLE_OUT, ATQ_SINGLE_OUT.actual, 0)
     `RAL_FIELD_CP(ATQ_DISAB_MULTI, ATQ_DISAB_MULTI.actual)
     `RAL_FIELD_CP_1(ATQ_DISAB_MULTI, ATQ_DISAB_MULTI.actual, 0)
     `RAL_FIELD_CP(DIRRPL_SINGLE_OP, DIRRPL_SINGLE_OP.actual)
     `RAL_FIELD_CP_1(DIRRPL_SINGLE_OP, DIRRPL_SINGLE_OP.actual, 0)
     `RAL_FIELD_CP(DIRRPL_HALF_BW, DIRRPL_HALF_BW.actual)
     `RAL_FIELD_CP_1(DIRRPL_HALF_BW, DIRRPL_HALF_BW.actual, 0)
     `RAL_FIELD_CP(DIRRPL_SINGLE_OUT, DIRRPL_SINGLE_OUT.actual)
     `RAL_FIELD_CP_1(DIRRPL_SINGLE_OUT, DIRRPL_SINGLE_OUT.actual, 0)
     `RAL_FIELD_CP(LBRPL_SINGLE_OP, LBRPL_SINGLE_OP.actual)
     `RAL_FIELD_CP_1(LBRPL_SINGLE_OP, LBRPL_SINGLE_OP.actual, 0)
     `RAL_FIELD_CP(LBRPL_HALF_BW, LBRPL_HALF_BW.actual)
     `RAL_FIELD_CP_1(LBRPL_HALF_BW, LBRPL_HALF_BW.actual, 0)
     `RAL_FIELD_CP(LBRPL_SINGLE_OUT, LBRPL_SINGLE_OUT.actual)
     `RAL_FIELD_CP_1(LBRPL_SINGLE_OUT, LBRPL_SINGLE_OUT.actual, 0)
     `RAL_FIELD_CP(LDB_SINGLE_OP, LDB_SINGLE_OP.actual)
     `RAL_FIELD_CP_1(LDB_SINGLE_OP, LDB_SINGLE_OP.actual, 0)
     `RAL_FIELD_CP(LDB_HALF_BW, LDB_HALF_BW.actual)
     `RAL_FIELD_CP_1(LDB_HALF_BW, LDB_HALF_BW.actual, 0)
     `RAL_FIELD_CP(LDB_DISAB_MULTI, LDB_DISAB_MULTI.actual)
     `RAL_FIELD_CP_1(LDB_DISAB_MULTI, LDB_DISAB_MULTI.actual, 0)
     `RAL_FIELD_CP(ATM_SINGLE_SCH, ATM_SINGLE_SCH.actual)
     `RAL_FIELD_CP_1(ATM_SINGLE_SCH, ATM_SINGLE_SCH.actual, 0)
     `RAL_FIELD_CP(ATM_SINGLE_CMP, ATM_SINGLE_CMP.actual)
     `RAL_FIELD_CP_1(ATM_SINGLE_CMP, ATM_SINGLE_CMP.actual, 0)
     `RAL_FIELD_CP(LDB_CE_TOG_ARB, LDB_CE_TOG_ARB.actual)
     `RAL_FIELD_CP_1(LDB_CE_TOG_ARB, LDB_CE_TOG_ARB.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.actual, 0)
     `RAL_FIELD_CP(SMON0_VALID_SEL, SMON0_VALID_SEL.actual)
     `RAL_FIELD_CP_2(SMON0_VALID_SEL, SMON0_VALID_SEL.actual, 0,1)
     `RAL_FIELD_CP(SMON0_VALUE_SEL, SMON0_VALUE_SEL.actual)
     `RAL_FIELD_CP_1(SMON0_VALUE_SEL, SMON0_VALUE_SEL.actual, 0)
     `RAL_FIELD_CP(SMON0_COMPARE_SEL, SMON0_COMPARE_SEL.actual)
     `RAL_FIELD_CP_2(SMON0_COMPARE_SEL, SMON0_COMPARE_SEL.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DISAB_ATQ_EMPTY_ARB = new("DISAB_ATQ_EMPTY_ARB", "RW", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[0:0]"});
    DISAB_ATQ_EMPTY_ARB.set_powerwell("vcccfn_gated");
    DISAB_ATQ_EMPTY_ARB.set_rand_mode(0);
   DISAB_ATQ_EMPTY_ARB.set_reset_signame("hqm_inp_gated_rst_n");
    DISAB_ATQ_EMPTY_ARB.set_logical_path("HQMID");
    void'(add_field( DISAB_ATQ_EMPTY_ARB ));

    INC_TOK_UNIT_IDLE = new("INC_TOK_UNIT_IDLE", "RW", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[1:1]"});
    INC_TOK_UNIT_IDLE.set_powerwell("vcccfn_gated");
    INC_TOK_UNIT_IDLE.set_rand_mode(0);
   INC_TOK_UNIT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    INC_TOK_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( INC_TOK_UNIT_IDLE ));

    DISAB_RLIST_PRI = new("DISAB_RLIST_PRI", "RW", 1, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[2:2]"});
    DISAB_RLIST_PRI.set_powerwell("vcccfn_gated");
    DISAB_RLIST_PRI.set_rand_mode(0);
   DISAB_RLIST_PRI.set_reset_signame("hqm_inp_gated_rst_n");
    DISAB_RLIST_PRI.set_logical_path("HQMID");
    void'(add_field( DISAB_RLIST_PRI ));

    INC_CMP_UNIT_IDLE = new("INC_CMP_UNIT_IDLE", "RW", 1, 3, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[3:3]"});
    INC_CMP_UNIT_IDLE.set_powerwell("vcccfn_gated");
    INC_CMP_UNIT_IDLE.set_rand_mode(0);
   INC_CMP_UNIT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    INC_CMP_UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( INC_CMP_UNIT_IDLE ));

    ENAB_IF_THRESH = new("ENAB_IF_THRESH", "RW", 1, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[4:4]"});
    ENAB_IF_THRESH.set_powerwell("vcccfn_gated");
    ENAB_IF_THRESH.set_rand_mode(0);
   ENAB_IF_THRESH.set_reset_signame("hqm_inp_gated_rst_n");
    ENAB_IF_THRESH.set_logical_path("HQMID");
    void'(add_field( ENAB_IF_THRESH ));

    RSVZ0 = new("RSVZ0", "RW", 1, 5, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[5:5]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    DIR_SINGLE_OP = new("DIR_SINGLE_OP", "RW", 1, 6, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[6:6]"});
    DIR_SINGLE_OP.set_powerwell("vcccfn_gated");
    DIR_SINGLE_OP.set_rand_mode(0);
   DIR_SINGLE_OP.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_SINGLE_OP.set_logical_path("HQMID");
    void'(add_field( DIR_SINGLE_OP ));

    DIR_HALF_BW = new("DIR_HALF_BW", "RW", 1, 7, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[7:7]"});
    DIR_HALF_BW.set_powerwell("vcccfn_gated");
    DIR_HALF_BW.set_rand_mode(0);
   DIR_HALF_BW.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_HALF_BW.set_logical_path("HQMID");
    void'(add_field( DIR_HALF_BW ));

    DIR_SINGLE_OUT = new("DIR_SINGLE_OUT", "RW", 1, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[8:8]"});
    DIR_SINGLE_OUT.set_powerwell("vcccfn_gated");
    DIR_SINGLE_OUT.set_rand_mode(0);
   DIR_SINGLE_OUT.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_SINGLE_OUT.set_logical_path("HQMID");
    void'(add_field( DIR_SINGLE_OUT ));

    DIR_DISAB_MULTI = new("DIR_DISAB_MULTI", "RW", 1, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[9:9]"});
    DIR_DISAB_MULTI.set_powerwell("vcccfn_gated");
    DIR_DISAB_MULTI.set_rand_mode(0);
   DIR_DISAB_MULTI.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_DISAB_MULTI.set_logical_path("HQMID");
    void'(add_field( DIR_DISAB_MULTI ));

    ATQ_SINGLE_OP = new("ATQ_SINGLE_OP", "RW", 1, 10, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[10:10]"});
    ATQ_SINGLE_OP.set_powerwell("vcccfn_gated");
    ATQ_SINGLE_OP.set_rand_mode(0);
   ATQ_SINGLE_OP.set_reset_signame("hqm_inp_gated_rst_n");
    ATQ_SINGLE_OP.set_logical_path("HQMID");
    void'(add_field( ATQ_SINGLE_OP ));

    ATQ_HALF_BW = new("ATQ_HALF_BW", "RW", 1, 11, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[11:11]"});
    ATQ_HALF_BW.set_powerwell("vcccfn_gated");
    ATQ_HALF_BW.set_rand_mode(0);
   ATQ_HALF_BW.set_reset_signame("hqm_inp_gated_rst_n");
    ATQ_HALF_BW.set_logical_path("HQMID");
    void'(add_field( ATQ_HALF_BW ));

    ATQ_SINGLE_OUT = new("ATQ_SINGLE_OUT", "RW", 1, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[12:12]"});
    ATQ_SINGLE_OUT.set_powerwell("vcccfn_gated");
    ATQ_SINGLE_OUT.set_rand_mode(0);
   ATQ_SINGLE_OUT.set_reset_signame("hqm_inp_gated_rst_n");
    ATQ_SINGLE_OUT.set_logical_path("HQMID");
    void'(add_field( ATQ_SINGLE_OUT ));

    ATQ_DISAB_MULTI = new("ATQ_DISAB_MULTI", "RW", 1, 13, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[13:13]"});
    ATQ_DISAB_MULTI.set_powerwell("vcccfn_gated");
    ATQ_DISAB_MULTI.set_rand_mode(0);
   ATQ_DISAB_MULTI.set_reset_signame("hqm_inp_gated_rst_n");
    ATQ_DISAB_MULTI.set_logical_path("HQMID");
    void'(add_field( ATQ_DISAB_MULTI ));

    DIRRPL_SINGLE_OP = new("DIRRPL_SINGLE_OP", "RW", 1, 14, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[14:14]"});
    DIRRPL_SINGLE_OP.set_powerwell("vcccfn_gated");
    DIRRPL_SINGLE_OP.set_rand_mode(0);
   DIRRPL_SINGLE_OP.set_reset_signame("hqm_inp_gated_rst_n");
    DIRRPL_SINGLE_OP.set_logical_path("HQMID");
    void'(add_field( DIRRPL_SINGLE_OP ));

    DIRRPL_HALF_BW = new("DIRRPL_HALF_BW", "RW", 1, 15, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[15:15]"});
    DIRRPL_HALF_BW.set_powerwell("vcccfn_gated");
    DIRRPL_HALF_BW.set_rand_mode(0);
   DIRRPL_HALF_BW.set_reset_signame("hqm_inp_gated_rst_n");
    DIRRPL_HALF_BW.set_logical_path("HQMID");
    void'(add_field( DIRRPL_HALF_BW ));

    DIRRPL_SINGLE_OUT = new("DIRRPL_SINGLE_OUT", "RW", 1, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[16:16]"});
    DIRRPL_SINGLE_OUT.set_powerwell("vcccfn_gated");
    DIRRPL_SINGLE_OUT.set_rand_mode(0);
   DIRRPL_SINGLE_OUT.set_reset_signame("hqm_inp_gated_rst_n");
    DIRRPL_SINGLE_OUT.set_logical_path("HQMID");
    void'(add_field( DIRRPL_SINGLE_OUT ));

    LBRPL_SINGLE_OP = new("LBRPL_SINGLE_OP", "RW", 1, 17, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[17:17]"});
    LBRPL_SINGLE_OP.set_powerwell("vcccfn_gated");
    LBRPL_SINGLE_OP.set_rand_mode(0);
   LBRPL_SINGLE_OP.set_reset_signame("hqm_inp_gated_rst_n");
    LBRPL_SINGLE_OP.set_logical_path("HQMID");
    void'(add_field( LBRPL_SINGLE_OP ));

    LBRPL_HALF_BW = new("LBRPL_HALF_BW", "RW", 1, 18, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[18:18]"});
    LBRPL_HALF_BW.set_powerwell("vcccfn_gated");
    LBRPL_HALF_BW.set_rand_mode(0);
   LBRPL_HALF_BW.set_reset_signame("hqm_inp_gated_rst_n");
    LBRPL_HALF_BW.set_logical_path("HQMID");
    void'(add_field( LBRPL_HALF_BW ));

    LBRPL_SINGLE_OUT = new("LBRPL_SINGLE_OUT", "RW", 1, 19, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[19:19]"});
    LBRPL_SINGLE_OUT.set_powerwell("vcccfn_gated");
    LBRPL_SINGLE_OUT.set_rand_mode(0);
   LBRPL_SINGLE_OUT.set_reset_signame("hqm_inp_gated_rst_n");
    LBRPL_SINGLE_OUT.set_logical_path("HQMID");
    void'(add_field( LBRPL_SINGLE_OUT ));

    LDB_SINGLE_OP = new("LDB_SINGLE_OP", "RW", 1, 20, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[20:20]"});
    LDB_SINGLE_OP.set_powerwell("vcccfn_gated");
    LDB_SINGLE_OP.set_rand_mode(0);
   LDB_SINGLE_OP.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_SINGLE_OP.set_logical_path("HQMID");
    void'(add_field( LDB_SINGLE_OP ));

    LDB_HALF_BW = new("LDB_HALF_BW", "RW", 1, 21, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[21:21]"});
    LDB_HALF_BW.set_powerwell("vcccfn_gated");
    LDB_HALF_BW.set_rand_mode(0);
   LDB_HALF_BW.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_HALF_BW.set_logical_path("HQMID");
    void'(add_field( LDB_HALF_BW ));

    LDB_DISAB_MULTI = new("LDB_DISAB_MULTI", "RW", 1, 22, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[22:22]"});
    LDB_DISAB_MULTI.set_powerwell("vcccfn_gated");
    LDB_DISAB_MULTI.set_rand_mode(0);
   LDB_DISAB_MULTI.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_DISAB_MULTI.set_logical_path("HQMID");
    void'(add_field( LDB_DISAB_MULTI ));

    ATM_SINGLE_SCH = new("ATM_SINGLE_SCH", "RW", 1, 23, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[23:23]"});
    ATM_SINGLE_SCH.set_powerwell("vcccfn_gated");
    ATM_SINGLE_SCH.set_rand_mode(0);
   ATM_SINGLE_SCH.set_reset_signame("hqm_inp_gated_rst_n");
    ATM_SINGLE_SCH.set_logical_path("HQMID");
    void'(add_field( ATM_SINGLE_SCH ));

    ATM_SINGLE_CMP = new("ATM_SINGLE_CMP", "RW", 1, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[24:24]"});
    ATM_SINGLE_CMP.set_powerwell("vcccfn_gated");
    ATM_SINGLE_CMP.set_rand_mode(0);
   ATM_SINGLE_CMP.set_reset_signame("hqm_inp_gated_rst_n");
    ATM_SINGLE_CMP.set_logical_path("HQMID");
    void'(add_field( ATM_SINGLE_CMP ));

    LDB_CE_TOG_ARB = new("LDB_CE_TOG_ARB", "RW", 1, 25, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[25:25]"});
    LDB_CE_TOG_ARB.set_powerwell("vcccfn_gated");
    LDB_CE_TOG_ARB.set_rand_mode(0);
   LDB_CE_TOG_ARB.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CE_TOG_ARB.set_logical_path("HQMID");
    void'(add_field( LDB_CE_TOG_ARB ));

    RSVZ1 = new("RSVZ1", "RW", 1, 26, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[26:26]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    SMON0_VALID_SEL = new("SMON0_VALID_SEL", "RW", 2, 27, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[28:27]"});
    SMON0_VALID_SEL.set_powerwell("vcccfn_gated");
    SMON0_VALID_SEL.set_rand_mode(0);
   SMON0_VALID_SEL.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_VALID_SEL.set_logical_path("HQMID");
    void'(add_field( SMON0_VALID_SEL ));

    SMON0_VALUE_SEL = new("SMON0_VALUE_SEL", "RW", 1, 29, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[29:29]"});
    SMON0_VALUE_SEL.set_powerwell("vcccfn_gated");
    SMON0_VALUE_SEL.set_rand_mode(0);
   SMON0_VALUE_SEL.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_VALUE_SEL.set_logical_path("HQMID");
    void'(add_field( SMON0_VALUE_SEL ));

    SMON0_COMPARE_SEL = new("SMON0_COMPARE_SEL", "RW", 2, 30, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[31:30]"});
    SMON0_COMPARE_SEL.set_powerwell("vcccfn_gated");
    SMON0_COMPARE_SEL.set_rand_mode(0);
   SMON0_COMPARE_SEL.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_COMPARE_SEL.set_logical_path("HQMID");
    void'(add_field( SMON0_COMPARE_SEL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field QE_WT_FRC;
  sla_ral_field QE_WT_FRCV;
  sla_ral_field QE_WT_BLK;
  sla_ral_field QED_DEQ_HIPRI_WM;
  sla_ral_field DIS_WU_RES_CHK;
  sla_ral_field RSVZ0;
  sla_ral_field AQED_DEQ_HIPRI_WM;
  sla_ral_field RSVZ1;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QE_WT_FRC, QE_WT_FRC.desired)
     `RAL_FIELD_CP_2(QE_WT_FRC, QE_WT_FRC.desired, 0,1)
     `RAL_FIELD_CP(QE_WT_FRCV, QE_WT_FRCV.desired)
     `RAL_FIELD_CP_1(QE_WT_FRCV, QE_WT_FRCV.desired, 0)
     `RAL_FIELD_CP(QE_WT_BLK, QE_WT_BLK.desired)
     `RAL_FIELD_CP_1(QE_WT_BLK, QE_WT_BLK.desired, 0)
     `RAL_FIELD_CP(QED_DEQ_HIPRI_WM, QED_DEQ_HIPRI_WM.desired)
     `RAL_FIELD_CP_5(QED_DEQ_HIPRI_WM, QED_DEQ_HIPRI_WM.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(DIS_WU_RES_CHK, DIS_WU_RES_CHK.desired)
     `RAL_FIELD_CP_1(DIS_WU_RES_CHK, DIS_WU_RES_CHK.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.desired, 0,1)
     `RAL_FIELD_CP(AQED_DEQ_HIPRI_WM, AQED_DEQ_HIPRI_WM.desired)
     `RAL_FIELD_CP_5(AQED_DEQ_HIPRI_WM, AQED_DEQ_HIPRI_WM.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_15(RSVZ1, RSVZ1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(QE_WT_FRC, QE_WT_FRC.actual)
     `RAL_FIELD_CP_2(QE_WT_FRC, QE_WT_FRC.actual, 0,1)
     `RAL_FIELD_CP(QE_WT_FRCV, QE_WT_FRCV.actual)
     `RAL_FIELD_CP_1(QE_WT_FRCV, QE_WT_FRCV.actual, 0)
     `RAL_FIELD_CP(QE_WT_BLK, QE_WT_BLK.actual)
     `RAL_FIELD_CP_1(QE_WT_BLK, QE_WT_BLK.actual, 0)
     `RAL_FIELD_CP(QED_DEQ_HIPRI_WM, QED_DEQ_HIPRI_WM.actual)
     `RAL_FIELD_CP_5(QED_DEQ_HIPRI_WM, QED_DEQ_HIPRI_WM.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(DIS_WU_RES_CHK, DIS_WU_RES_CHK.actual)
     `RAL_FIELD_CP_1(DIS_WU_RES_CHK, DIS_WU_RES_CHK.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.actual, 0,1)
     `RAL_FIELD_CP(AQED_DEQ_HIPRI_WM, AQED_DEQ_HIPRI_WM.actual)
     `RAL_FIELD_CP_5(AQED_DEQ_HIPRI_WM, AQED_DEQ_HIPRI_WM.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_15(RSVZ1, RSVZ1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    QE_WT_FRC = new("QE_WT_FRC", "RW", 2, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[1:0]"});
    QE_WT_FRC.set_powerwell("vcccfn_gated");
    QE_WT_FRC.set_rand_mode(0);
   QE_WT_FRC.set_reset_signame("hqm_inp_gated_rst_n");
    QE_WT_FRC.set_logical_path("HQMID");
    void'(add_field( QE_WT_FRC ));

    QE_WT_FRCV = new("QE_WT_FRCV", "RW", 1, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[2:2]"});
    QE_WT_FRCV.set_powerwell("vcccfn_gated");
    QE_WT_FRCV.set_rand_mode(0);
   QE_WT_FRCV.set_reset_signame("hqm_inp_gated_rst_n");
    QE_WT_FRCV.set_logical_path("HQMID");
    void'(add_field( QE_WT_FRCV ));

    QE_WT_BLK = new("QE_WT_BLK", "RW", 1, 3, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[3:3]"});
    QE_WT_BLK.set_powerwell("vcccfn_gated");
    QE_WT_BLK.set_rand_mode(0);
   QE_WT_BLK.set_reset_signame("hqm_inp_gated_rst_n");
    QE_WT_BLK.set_logical_path("HQMID");
    void'(add_field( QE_WT_BLK ));

    QED_DEQ_HIPRI_WM = new("QED_DEQ_HIPRI_WM", "RW", 5, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[8:4]"});
    QED_DEQ_HIPRI_WM.set_powerwell("vcccfn_gated");
    QED_DEQ_HIPRI_WM.set_rand_mode(0);
   QED_DEQ_HIPRI_WM.set_reset_signame("hqm_inp_gated_rst_n");
    QED_DEQ_HIPRI_WM.set_logical_path("HQMID");
    void'(add_field( QED_DEQ_HIPRI_WM ));

    DIS_WU_RES_CHK = new("DIS_WU_RES_CHK", "RW", 1, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[9:9]"});
    DIS_WU_RES_CHK.set_powerwell("vcccfn_gated");
    DIS_WU_RES_CHK.set_rand_mode(0);
   DIS_WU_RES_CHK.set_reset_signame("hqm_inp_gated_rst_n");
    DIS_WU_RES_CHK.set_logical_path("HQMID");
    void'(add_field( DIS_WU_RES_CHK ));

    RSVZ0 = new("RSVZ0", "RW", 2, 10, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[11:10]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    AQED_DEQ_HIPRI_WM = new("AQED_DEQ_HIPRI_WM", "RW", 5, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[16:12]"});
    AQED_DEQ_HIPRI_WM.set_powerwell("vcccfn_gated");
    AQED_DEQ_HIPRI_WM.set_rand_mode(0);
   AQED_DEQ_HIPRI_WM.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_DEQ_HIPRI_WM.set_logical_path("HQMID");
    void'(add_field( AQED_DEQ_HIPRI_WM ));

    RSVZ1 = new("RSVZ1", "RW", 15, 17, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[31:17]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_1_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_1_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field NALB_PIPE_CREDITS;
  sla_ral_field ATM_PIPE_CREDITS;
  sla_ral_field QED_DEQ_PIPE_CREDITS;
  sla_ral_field RSVZ0;
  sla_ral_field AQED_DEQ_PIPE_CREDITS;
  sla_ral_field RSVZ1;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(NALB_PIPE_CREDITS, NALB_PIPE_CREDITS.desired)
     `RAL_FIELD_CP_8(NALB_PIPE_CREDITS, NALB_PIPE_CREDITS.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(ATM_PIPE_CREDITS, ATM_PIPE_CREDITS.desired)
     `RAL_FIELD_CP_8(ATM_PIPE_CREDITS, ATM_PIPE_CREDITS.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(QED_DEQ_PIPE_CREDITS, QED_DEQ_PIPE_CREDITS.desired)
     `RAL_FIELD_CP_5(QED_DEQ_PIPE_CREDITS, QED_DEQ_PIPE_CREDITS.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_3(RSVZ0, RSVZ0.desired, 0,1,2)
     `RAL_FIELD_CP(AQED_DEQ_PIPE_CREDITS, AQED_DEQ_PIPE_CREDITS.desired)
     `RAL_FIELD_CP_5(AQED_DEQ_PIPE_CREDITS, AQED_DEQ_PIPE_CREDITS.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_3(RSVZ1, RSVZ1.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(NALB_PIPE_CREDITS, NALB_PIPE_CREDITS.actual)
     `RAL_FIELD_CP_8(NALB_PIPE_CREDITS, NALB_PIPE_CREDITS.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(ATM_PIPE_CREDITS, ATM_PIPE_CREDITS.actual)
     `RAL_FIELD_CP_8(ATM_PIPE_CREDITS, ATM_PIPE_CREDITS.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(QED_DEQ_PIPE_CREDITS, QED_DEQ_PIPE_CREDITS.actual)
     `RAL_FIELD_CP_5(QED_DEQ_PIPE_CREDITS, QED_DEQ_PIPE_CREDITS.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_3(RSVZ0, RSVZ0.actual, 0,1,2)
     `RAL_FIELD_CP(AQED_DEQ_PIPE_CREDITS, AQED_DEQ_PIPE_CREDITS.actual)
     `RAL_FIELD_CP_5(AQED_DEQ_PIPE_CREDITS, AQED_DEQ_PIPE_CREDITS.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_3(RSVZ1, RSVZ1.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    NALB_PIPE_CREDITS = new("NALB_PIPE_CREDITS", "RW", 8, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[7:0]"});
    NALB_PIPE_CREDITS.set_powerwell("vcccfn_gated");
    NALB_PIPE_CREDITS.set_rand_mode(0);
   NALB_PIPE_CREDITS.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_PIPE_CREDITS.set_logical_path("HQMID");
    void'(add_field( NALB_PIPE_CREDITS ));

    ATM_PIPE_CREDITS = new("ATM_PIPE_CREDITS", "RW", 8, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[15:8]"});
    ATM_PIPE_CREDITS.set_powerwell("vcccfn_gated");
    ATM_PIPE_CREDITS.set_rand_mode(0);
   ATM_PIPE_CREDITS.set_reset_signame("hqm_inp_gated_rst_n");
    ATM_PIPE_CREDITS.set_logical_path("HQMID");
    void'(add_field( ATM_PIPE_CREDITS ));

    QED_DEQ_PIPE_CREDITS = new("QED_DEQ_PIPE_CREDITS", "RW", 5, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[20:16]"});
    QED_DEQ_PIPE_CREDITS.set_powerwell("vcccfn_gated");
    QED_DEQ_PIPE_CREDITS.set_rand_mode(0);
   QED_DEQ_PIPE_CREDITS.set_reset_signame("hqm_inp_gated_rst_n");
    QED_DEQ_PIPE_CREDITS.set_logical_path("HQMID");
    void'(add_field( QED_DEQ_PIPE_CREDITS ));

    RSVZ0 = new("RSVZ0", "RW", 3, 21, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[23:21]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    AQED_DEQ_PIPE_CREDITS = new("AQED_DEQ_PIPE_CREDITS", "RW", 5, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[28:24]"});
    AQED_DEQ_PIPE_CREDITS.set_powerwell("vcccfn_gated");
    AQED_DEQ_PIPE_CREDITS.set_rand_mode(0);
   AQED_DEQ_PIPE_CREDITS.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_DEQ_PIPE_CREDITS.set_logical_path("HQMID");
    void'(add_field( AQED_DEQ_PIPE_CREDITS ));

    RSVZ1 = new("RSVZ1", "RW", 3, 29, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[31:29]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field NALB_SEL_NALB_V;
  sla_ral_field NALB_SEL_NALB_AFULL;
  sla_ral_field ATM_CMP_V;
  sla_ral_field ATM_CMP_AFULL;
  sla_ral_field ENQ_NALB_V;
  sla_ral_field ENQ_NALB_AFULL;
  sla_ral_field NALB_CMP_V;
  sla_ral_field NALB_CMP_AFULL;
  sla_ral_field UNO_ATM_CMP_V;
  sla_ral_field UNO_ATM_CMP_AFULL;
  sla_ral_field LDB_TOK_RTN_V;
  sla_ral_field LDB_TOK_RTN_AFULL;
  sla_ral_field RSVZ0;
  sla_ral_field ENQ_ATQ_V;
  sla_ral_field ENQ_ATQ_NOT_RDY;
  sla_ral_field DIR_TOK_RTN_V;
  sla_ral_field DIR_TOK_RTN_NOT_RDY;
  sla_ral_field RSVZ1;
  sla_ral_field INT_SER_DOWN_V;
  sla_ral_field INT_SER_DOWN_NOT_RDY;
  sla_ral_field INT_SER_UP_V;
  sla_ral_field INT_SER_UP_NOT_RDY;
  sla_ral_field RSVZ2;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(NALB_SEL_NALB_V, NALB_SEL_NALB_V.desired)
     `RAL_FIELD_CP_1(NALB_SEL_NALB_V, NALB_SEL_NALB_V.desired, 0)
     `RAL_FIELD_CP(NALB_SEL_NALB_AFULL, NALB_SEL_NALB_AFULL.desired)
     `RAL_FIELD_CP_1(NALB_SEL_NALB_AFULL, NALB_SEL_NALB_AFULL.desired, 0)
     `RAL_FIELD_CP(ATM_CMP_V, ATM_CMP_V.desired)
     `RAL_FIELD_CP_1(ATM_CMP_V, ATM_CMP_V.desired, 0)
     `RAL_FIELD_CP(ATM_CMP_AFULL, ATM_CMP_AFULL.desired)
     `RAL_FIELD_CP_1(ATM_CMP_AFULL, ATM_CMP_AFULL.desired, 0)
     `RAL_FIELD_CP(ENQ_NALB_V, ENQ_NALB_V.desired)
     `RAL_FIELD_CP_1(ENQ_NALB_V, ENQ_NALB_V.desired, 0)
     `RAL_FIELD_CP(ENQ_NALB_AFULL, ENQ_NALB_AFULL.desired)
     `RAL_FIELD_CP_1(ENQ_NALB_AFULL, ENQ_NALB_AFULL.desired, 0)
     `RAL_FIELD_CP(NALB_CMP_V, NALB_CMP_V.desired)
     `RAL_FIELD_CP_1(NALB_CMP_V, NALB_CMP_V.desired, 0)
     `RAL_FIELD_CP(NALB_CMP_AFULL, NALB_CMP_AFULL.desired)
     `RAL_FIELD_CP_1(NALB_CMP_AFULL, NALB_CMP_AFULL.desired, 0)
     `RAL_FIELD_CP(UNO_ATM_CMP_V, UNO_ATM_CMP_V.desired)
     `RAL_FIELD_CP_1(UNO_ATM_CMP_V, UNO_ATM_CMP_V.desired, 0)
     `RAL_FIELD_CP(UNO_ATM_CMP_AFULL, UNO_ATM_CMP_AFULL.desired)
     `RAL_FIELD_CP_1(UNO_ATM_CMP_AFULL, UNO_ATM_CMP_AFULL.desired, 0)
     `RAL_FIELD_CP(LDB_TOK_RTN_V, LDB_TOK_RTN_V.desired)
     `RAL_FIELD_CP_1(LDB_TOK_RTN_V, LDB_TOK_RTN_V.desired, 0)
     `RAL_FIELD_CP(LDB_TOK_RTN_AFULL, LDB_TOK_RTN_AFULL.desired)
     `RAL_FIELD_CP_1(LDB_TOK_RTN_AFULL, LDB_TOK_RTN_AFULL.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_4(RSVZ0, RSVZ0.desired, 0,1,2,3)
     `RAL_FIELD_CP(ENQ_ATQ_V, ENQ_ATQ_V.desired)
     `RAL_FIELD_CP_1(ENQ_ATQ_V, ENQ_ATQ_V.desired, 0)
     `RAL_FIELD_CP(ENQ_ATQ_NOT_RDY, ENQ_ATQ_NOT_RDY.desired)
     `RAL_FIELD_CP_1(ENQ_ATQ_NOT_RDY, ENQ_ATQ_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(DIR_TOK_RTN_V, DIR_TOK_RTN_V.desired)
     `RAL_FIELD_CP_1(DIR_TOK_RTN_V, DIR_TOK_RTN_V.desired, 0)
     `RAL_FIELD_CP(DIR_TOK_RTN_NOT_RDY, DIR_TOK_RTN_NOT_RDY.desired)
     `RAL_FIELD_CP_1(DIR_TOK_RTN_NOT_RDY, DIR_TOK_RTN_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_4(RSVZ1, RSVZ1.desired, 0,1,2,3)
     `RAL_FIELD_CP(INT_SER_DOWN_V, INT_SER_DOWN_V.desired)
     `RAL_FIELD_CP_1(INT_SER_DOWN_V, INT_SER_DOWN_V.desired, 0)
     `RAL_FIELD_CP(INT_SER_DOWN_NOT_RDY, INT_SER_DOWN_NOT_RDY.desired)
     `RAL_FIELD_CP_1(INT_SER_DOWN_NOT_RDY, INT_SER_DOWN_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(INT_SER_UP_V, INT_SER_UP_V.desired)
     `RAL_FIELD_CP_1(INT_SER_UP_V, INT_SER_UP_V.desired, 0)
     `RAL_FIELD_CP(INT_SER_UP_NOT_RDY, INT_SER_UP_NOT_RDY.desired)
     `RAL_FIELD_CP_1(INT_SER_UP_NOT_RDY, INT_SER_UP_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.desired)
     `RAL_FIELD_CP_4(RSVZ2, RSVZ2.desired, 0,1,2,3)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(NALB_SEL_NALB_V, NALB_SEL_NALB_V.actual)
     `RAL_FIELD_CP_1(NALB_SEL_NALB_V, NALB_SEL_NALB_V.actual, 0)
     `RAL_FIELD_CP(NALB_SEL_NALB_AFULL, NALB_SEL_NALB_AFULL.actual)
     `RAL_FIELD_CP_1(NALB_SEL_NALB_AFULL, NALB_SEL_NALB_AFULL.actual, 0)
     `RAL_FIELD_CP(ATM_CMP_V, ATM_CMP_V.actual)
     `RAL_FIELD_CP_1(ATM_CMP_V, ATM_CMP_V.actual, 0)
     `RAL_FIELD_CP(ATM_CMP_AFULL, ATM_CMP_AFULL.actual)
     `RAL_FIELD_CP_1(ATM_CMP_AFULL, ATM_CMP_AFULL.actual, 0)
     `RAL_FIELD_CP(ENQ_NALB_V, ENQ_NALB_V.actual)
     `RAL_FIELD_CP_1(ENQ_NALB_V, ENQ_NALB_V.actual, 0)
     `RAL_FIELD_CP(ENQ_NALB_AFULL, ENQ_NALB_AFULL.actual)
     `RAL_FIELD_CP_1(ENQ_NALB_AFULL, ENQ_NALB_AFULL.actual, 0)
     `RAL_FIELD_CP(NALB_CMP_V, NALB_CMP_V.actual)
     `RAL_FIELD_CP_1(NALB_CMP_V, NALB_CMP_V.actual, 0)
     `RAL_FIELD_CP(NALB_CMP_AFULL, NALB_CMP_AFULL.actual)
     `RAL_FIELD_CP_1(NALB_CMP_AFULL, NALB_CMP_AFULL.actual, 0)
     `RAL_FIELD_CP(UNO_ATM_CMP_V, UNO_ATM_CMP_V.actual)
     `RAL_FIELD_CP_1(UNO_ATM_CMP_V, UNO_ATM_CMP_V.actual, 0)
     `RAL_FIELD_CP(UNO_ATM_CMP_AFULL, UNO_ATM_CMP_AFULL.actual)
     `RAL_FIELD_CP_1(UNO_ATM_CMP_AFULL, UNO_ATM_CMP_AFULL.actual, 0)
     `RAL_FIELD_CP(LDB_TOK_RTN_V, LDB_TOK_RTN_V.actual)
     `RAL_FIELD_CP_1(LDB_TOK_RTN_V, LDB_TOK_RTN_V.actual, 0)
     `RAL_FIELD_CP(LDB_TOK_RTN_AFULL, LDB_TOK_RTN_AFULL.actual)
     `RAL_FIELD_CP_1(LDB_TOK_RTN_AFULL, LDB_TOK_RTN_AFULL.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_4(RSVZ0, RSVZ0.actual, 0,1,2,3)
     `RAL_FIELD_CP(ENQ_ATQ_V, ENQ_ATQ_V.actual)
     `RAL_FIELD_CP_1(ENQ_ATQ_V, ENQ_ATQ_V.actual, 0)
     `RAL_FIELD_CP(ENQ_ATQ_NOT_RDY, ENQ_ATQ_NOT_RDY.actual)
     `RAL_FIELD_CP_1(ENQ_ATQ_NOT_RDY, ENQ_ATQ_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(DIR_TOK_RTN_V, DIR_TOK_RTN_V.actual)
     `RAL_FIELD_CP_1(DIR_TOK_RTN_V, DIR_TOK_RTN_V.actual, 0)
     `RAL_FIELD_CP(DIR_TOK_RTN_NOT_RDY, DIR_TOK_RTN_NOT_RDY.actual)
     `RAL_FIELD_CP_1(DIR_TOK_RTN_NOT_RDY, DIR_TOK_RTN_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_4(RSVZ1, RSVZ1.actual, 0,1,2,3)
     `RAL_FIELD_CP(INT_SER_DOWN_V, INT_SER_DOWN_V.actual)
     `RAL_FIELD_CP_1(INT_SER_DOWN_V, INT_SER_DOWN_V.actual, 0)
     `RAL_FIELD_CP(INT_SER_DOWN_NOT_RDY, INT_SER_DOWN_NOT_RDY.actual)
     `RAL_FIELD_CP_1(INT_SER_DOWN_NOT_RDY, INT_SER_DOWN_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(INT_SER_UP_V, INT_SER_UP_V.actual)
     `RAL_FIELD_CP_1(INT_SER_UP_V, INT_SER_UP_V.actual, 0)
     `RAL_FIELD_CP(INT_SER_UP_NOT_RDY, INT_SER_UP_NOT_RDY.actual)
     `RAL_FIELD_CP_1(INT_SER_UP_NOT_RDY, INT_SER_UP_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.actual)
     `RAL_FIELD_CP_4(RSVZ2, RSVZ2.actual, 0,1,2,3)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    NALB_SEL_NALB_V = new("NALB_SEL_NALB_V", "RO/V", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[0:0]"});
    NALB_SEL_NALB_V.set_powerwell("vcccfn_gated");
    NALB_SEL_NALB_V.set_rand_mode(0);
   NALB_SEL_NALB_V.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_SEL_NALB_V.set_logical_path("HQMID");
    void'(add_field( NALB_SEL_NALB_V ));

    NALB_SEL_NALB_AFULL = new("NALB_SEL_NALB_AFULL", "RO/V", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[1:1]"});
    NALB_SEL_NALB_AFULL.set_powerwell("vcccfn_gated");
    NALB_SEL_NALB_AFULL.set_rand_mode(0);
   NALB_SEL_NALB_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_SEL_NALB_AFULL.set_logical_path("HQMID");
    void'(add_field( NALB_SEL_NALB_AFULL ));

    ATM_CMP_V = new("ATM_CMP_V", "RO/V", 1, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[2:2]"});
    ATM_CMP_V.set_powerwell("vcccfn_gated");
    ATM_CMP_V.set_rand_mode(0);
   ATM_CMP_V.set_reset_signame("hqm_inp_gated_rst_n");
    ATM_CMP_V.set_logical_path("HQMID");
    void'(add_field( ATM_CMP_V ));

    ATM_CMP_AFULL = new("ATM_CMP_AFULL", "RO/V", 1, 3, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[3:3]"});
    ATM_CMP_AFULL.set_powerwell("vcccfn_gated");
    ATM_CMP_AFULL.set_rand_mode(0);
   ATM_CMP_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    ATM_CMP_AFULL.set_logical_path("HQMID");
    void'(add_field( ATM_CMP_AFULL ));

    ENQ_NALB_V = new("ENQ_NALB_V", "RO/V", 1, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[4:4]"});
    ENQ_NALB_V.set_powerwell("vcccfn_gated");
    ENQ_NALB_V.set_rand_mode(0);
   ENQ_NALB_V.set_reset_signame("hqm_inp_gated_rst_n");
    ENQ_NALB_V.set_logical_path("HQMID");
    void'(add_field( ENQ_NALB_V ));

    ENQ_NALB_AFULL = new("ENQ_NALB_AFULL", "RO/V", 1, 5, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[5:5]"});
    ENQ_NALB_AFULL.set_powerwell("vcccfn_gated");
    ENQ_NALB_AFULL.set_rand_mode(0);
   ENQ_NALB_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    ENQ_NALB_AFULL.set_logical_path("HQMID");
    void'(add_field( ENQ_NALB_AFULL ));

    NALB_CMP_V = new("NALB_CMP_V", "RO/V", 1, 6, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[6:6]"});
    NALB_CMP_V.set_powerwell("vcccfn_gated");
    NALB_CMP_V.set_rand_mode(0);
   NALB_CMP_V.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_CMP_V.set_logical_path("HQMID");
    void'(add_field( NALB_CMP_V ));

    NALB_CMP_AFULL = new("NALB_CMP_AFULL", "RO/V", 1, 7, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[7:7]"});
    NALB_CMP_AFULL.set_powerwell("vcccfn_gated");
    NALB_CMP_AFULL.set_rand_mode(0);
   NALB_CMP_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_CMP_AFULL.set_logical_path("HQMID");
    void'(add_field( NALB_CMP_AFULL ));

    UNO_ATM_CMP_V = new("UNO_ATM_CMP_V", "RO/V", 1, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[8:8]"});
    UNO_ATM_CMP_V.set_powerwell("vcccfn_gated");
    UNO_ATM_CMP_V.set_rand_mode(0);
   UNO_ATM_CMP_V.set_reset_signame("hqm_inp_gated_rst_n");
    UNO_ATM_CMP_V.set_logical_path("HQMID");
    void'(add_field( UNO_ATM_CMP_V ));

    UNO_ATM_CMP_AFULL = new("UNO_ATM_CMP_AFULL", "RO/V", 1, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[9:9]"});
    UNO_ATM_CMP_AFULL.set_powerwell("vcccfn_gated");
    UNO_ATM_CMP_AFULL.set_rand_mode(0);
   UNO_ATM_CMP_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    UNO_ATM_CMP_AFULL.set_logical_path("HQMID");
    void'(add_field( UNO_ATM_CMP_AFULL ));

    LDB_TOK_RTN_V = new("LDB_TOK_RTN_V", "RO/V", 1, 10, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[10:10]"});
    LDB_TOK_RTN_V.set_powerwell("vcccfn_gated");
    LDB_TOK_RTN_V.set_rand_mode(0);
   LDB_TOK_RTN_V.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_TOK_RTN_V.set_logical_path("HQMID");
    void'(add_field( LDB_TOK_RTN_V ));

    LDB_TOK_RTN_AFULL = new("LDB_TOK_RTN_AFULL", "RO/V", 1, 11, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[11:11]"});
    LDB_TOK_RTN_AFULL.set_powerwell("vcccfn_gated");
    LDB_TOK_RTN_AFULL.set_rand_mode(0);
   LDB_TOK_RTN_AFULL.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_TOK_RTN_AFULL.set_logical_path("HQMID");
    void'(add_field( LDB_TOK_RTN_AFULL ));

    RSVZ0 = new("RSVZ0", "RO/V", 4, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[15:12]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    ENQ_ATQ_V = new("ENQ_ATQ_V", "RO/V", 1, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[16:16]"});
    ENQ_ATQ_V.set_powerwell("vcccfn_gated");
    ENQ_ATQ_V.set_rand_mode(0);
   ENQ_ATQ_V.set_reset_signame("hqm_inp_gated_rst_n");
    ENQ_ATQ_V.set_logical_path("HQMID");
    void'(add_field( ENQ_ATQ_V ));

    ENQ_ATQ_NOT_RDY = new("ENQ_ATQ_NOT_RDY", "RO/V", 1, 17, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[17:17]"});
    ENQ_ATQ_NOT_RDY.set_powerwell("vcccfn_gated");
    ENQ_ATQ_NOT_RDY.set_rand_mode(0);
   ENQ_ATQ_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    ENQ_ATQ_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( ENQ_ATQ_NOT_RDY ));

    DIR_TOK_RTN_V = new("DIR_TOK_RTN_V", "RO/V", 1, 18, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[18:18]"});
    DIR_TOK_RTN_V.set_powerwell("vcccfn_gated");
    DIR_TOK_RTN_V.set_rand_mode(0);
   DIR_TOK_RTN_V.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_TOK_RTN_V.set_logical_path("HQMID");
    void'(add_field( DIR_TOK_RTN_V ));

    DIR_TOK_RTN_NOT_RDY = new("DIR_TOK_RTN_NOT_RDY", "RO/V", 1, 19, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[19:19]"});
    DIR_TOK_RTN_NOT_RDY.set_powerwell("vcccfn_gated");
    DIR_TOK_RTN_NOT_RDY.set_rand_mode(0);
   DIR_TOK_RTN_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_TOK_RTN_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( DIR_TOK_RTN_NOT_RDY ));

    RSVZ1 = new("RSVZ1", "RO/V", 4, 20, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[23:20]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    INT_SER_DOWN_V = new("INT_SER_DOWN_V", "RO/V", 1, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[24:24]"});
    INT_SER_DOWN_V.set_powerwell("vcccfn_gated");
    INT_SER_DOWN_V.set_rand_mode(0);
   INT_SER_DOWN_V.set_reset_signame("hqm_inp_gated_rst_n");
    INT_SER_DOWN_V.set_logical_path("HQMID");
    void'(add_field( INT_SER_DOWN_V ));

    INT_SER_DOWN_NOT_RDY = new("INT_SER_DOWN_NOT_RDY", "RO/V", 1, 25, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[25:25]"});
    INT_SER_DOWN_NOT_RDY.set_powerwell("vcccfn_gated");
    INT_SER_DOWN_NOT_RDY.set_rand_mode(0);
   INT_SER_DOWN_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    INT_SER_DOWN_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( INT_SER_DOWN_NOT_RDY ));

    INT_SER_UP_V = new("INT_SER_UP_V", "RO/V", 1, 26, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[26:26]"});
    INT_SER_UP_V.set_powerwell("vcccfn_gated");
    INT_SER_UP_V.set_rand_mode(0);
   INT_SER_UP_V.set_reset_signame("hqm_inp_gated_rst_n");
    INT_SER_UP_V.set_logical_path("HQMID");
    void'(add_field( INT_SER_UP_V ));

    INT_SER_UP_NOT_RDY = new("INT_SER_UP_NOT_RDY", "RO/V", 1, 27, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[27:27]"});
    INT_SER_UP_NOT_RDY.set_powerwell("vcccfn_gated");
    INT_SER_UP_NOT_RDY.set_rand_mode(0);
   INT_SER_UP_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    INT_SER_UP_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( INT_SER_UP_NOT_RDY ));

    RSVZ2 = new("RSVZ2", "RO/V", 4, 28, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[31:28]"});
    RSVZ2.set_powerwell("vcccfn_gated");
    RSVZ2.set_rand_mode(0);
   RSVZ2.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ2.set_logical_path("HQMID");
    void'(add_field( RSVZ2 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_STATUS_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SLIST_V;
  sla_ral_field SLIST_BLAST;
  sla_ral_field RLIST_V;
  sla_ral_field RLIST_BLAST;
  sla_ral_field NALB_V;
  sla_ral_field NALB_BLAST;
  sla_ral_field CMPBLAST_CHKV;
  sla_ral_field CMPBLAST;
  sla_ral_field ATQ_QID_DIS;
  sla_ral_field LDB_CQ_BUSY;
  sla_ral_field LDB_CQ_NO_SPACE;
  sla_ral_field DIR_TOK_V;
  sla_ral_field AQED_ACT;
  sla_ral_field AP_LSP_ATM_V;
  sla_ral_field LDB_TOK_V;
  sla_ral_field LDB_CMP_V;
  sla_ral_field LDB_CQ_ARB_REQV_COS0;
  sla_ral_field LDB_CQ_ARB_REQV_COS1;
  sla_ral_field LDB_CQ_ARB_REQV_COS2;
  sla_ral_field LDB_CQ_ARB_REQV_COS3;
  sla_ral_field ATQ_STOP_ATQATM;
  sla_ral_field NALB_SN_FCERR_RPTD;
  sla_ral_field AQED_EMPTY;
  sla_ral_field ATM_IF_V;
  sla_ral_field TOT_IF_V;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_STATUS_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SLIST_V, SLIST_V.desired)
     `RAL_FIELD_CP_1(SLIST_V, SLIST_V.desired, 0)
     `RAL_FIELD_CP(SLIST_BLAST, SLIST_BLAST.desired)
     `RAL_FIELD_CP_1(SLIST_BLAST, SLIST_BLAST.desired, 0)
     `RAL_FIELD_CP(RLIST_V, RLIST_V.desired)
     `RAL_FIELD_CP_1(RLIST_V, RLIST_V.desired, 0)
     `RAL_FIELD_CP(RLIST_BLAST, RLIST_BLAST.desired)
     `RAL_FIELD_CP_1(RLIST_BLAST, RLIST_BLAST.desired, 0)
     `RAL_FIELD_CP(NALB_V, NALB_V.desired)
     `RAL_FIELD_CP_1(NALB_V, NALB_V.desired, 0)
     `RAL_FIELD_CP(NALB_BLAST, NALB_BLAST.desired)
     `RAL_FIELD_CP_1(NALB_BLAST, NALB_BLAST.desired, 0)
     `RAL_FIELD_CP(CMPBLAST_CHKV, CMPBLAST_CHKV.desired)
     `RAL_FIELD_CP_1(CMPBLAST_CHKV, CMPBLAST_CHKV.desired, 0)
     `RAL_FIELD_CP(CMPBLAST, CMPBLAST.desired)
     `RAL_FIELD_CP_1(CMPBLAST, CMPBLAST.desired, 0)
     `RAL_FIELD_CP(ATQ_QID_DIS, ATQ_QID_DIS.desired)
     `RAL_FIELD_CP_1(ATQ_QID_DIS, ATQ_QID_DIS.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_BUSY, LDB_CQ_BUSY.desired)
     `RAL_FIELD_CP_1(LDB_CQ_BUSY, LDB_CQ_BUSY.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_NO_SPACE, LDB_CQ_NO_SPACE.desired)
     `RAL_FIELD_CP_1(LDB_CQ_NO_SPACE, LDB_CQ_NO_SPACE.desired, 0)
     `RAL_FIELD_CP(DIR_TOK_V, DIR_TOK_V.desired)
     `RAL_FIELD_CP_1(DIR_TOK_V, DIR_TOK_V.desired, 0)
     `RAL_FIELD_CP(AQED_ACT, AQED_ACT.desired)
     `RAL_FIELD_CP_1(AQED_ACT, AQED_ACT.desired, 0)
     `RAL_FIELD_CP(AP_LSP_ATM_V, AP_LSP_ATM_V.desired)
     `RAL_FIELD_CP_1(AP_LSP_ATM_V, AP_LSP_ATM_V.desired, 0)
     `RAL_FIELD_CP(LDB_TOK_V, LDB_TOK_V.desired)
     `RAL_FIELD_CP_1(LDB_TOK_V, LDB_TOK_V.desired, 0)
     `RAL_FIELD_CP(LDB_CMP_V, LDB_CMP_V.desired)
     `RAL_FIELD_CP_1(LDB_CMP_V, LDB_CMP_V.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_ARB_REQV_COS0, LDB_CQ_ARB_REQV_COS0.desired)
     `RAL_FIELD_CP_1(LDB_CQ_ARB_REQV_COS0, LDB_CQ_ARB_REQV_COS0.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_ARB_REQV_COS1, LDB_CQ_ARB_REQV_COS1.desired)
     `RAL_FIELD_CP_1(LDB_CQ_ARB_REQV_COS1, LDB_CQ_ARB_REQV_COS1.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_ARB_REQV_COS2, LDB_CQ_ARB_REQV_COS2.desired)
     `RAL_FIELD_CP_1(LDB_CQ_ARB_REQV_COS2, LDB_CQ_ARB_REQV_COS2.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_ARB_REQV_COS3, LDB_CQ_ARB_REQV_COS3.desired)
     `RAL_FIELD_CP_1(LDB_CQ_ARB_REQV_COS3, LDB_CQ_ARB_REQV_COS3.desired, 0)
     `RAL_FIELD_CP(ATQ_STOP_ATQATM, ATQ_STOP_ATQATM.desired)
     `RAL_FIELD_CP_1(ATQ_STOP_ATQATM, ATQ_STOP_ATQATM.desired, 0)
     `RAL_FIELD_CP(NALB_SN_FCERR_RPTD, NALB_SN_FCERR_RPTD.desired)
     `RAL_FIELD_CP_1(NALB_SN_FCERR_RPTD, NALB_SN_FCERR_RPTD.desired, 0)
     `RAL_FIELD_CP(AQED_EMPTY, AQED_EMPTY.desired)
     `RAL_FIELD_CP_1(AQED_EMPTY, AQED_EMPTY.desired, 0)
     `RAL_FIELD_CP(ATM_IF_V, ATM_IF_V.desired)
     `RAL_FIELD_CP_1(ATM_IF_V, ATM_IF_V.desired, 0)
     `RAL_FIELD_CP(TOT_IF_V, TOT_IF_V.desired)
     `RAL_FIELD_CP_1(TOT_IF_V, TOT_IF_V.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SLIST_V, SLIST_V.actual)
     `RAL_FIELD_CP_1(SLIST_V, SLIST_V.actual, 0)
     `RAL_FIELD_CP(SLIST_BLAST, SLIST_BLAST.actual)
     `RAL_FIELD_CP_1(SLIST_BLAST, SLIST_BLAST.actual, 0)
     `RAL_FIELD_CP(RLIST_V, RLIST_V.actual)
     `RAL_FIELD_CP_1(RLIST_V, RLIST_V.actual, 0)
     `RAL_FIELD_CP(RLIST_BLAST, RLIST_BLAST.actual)
     `RAL_FIELD_CP_1(RLIST_BLAST, RLIST_BLAST.actual, 0)
     `RAL_FIELD_CP(NALB_V, NALB_V.actual)
     `RAL_FIELD_CP_1(NALB_V, NALB_V.actual, 0)
     `RAL_FIELD_CP(NALB_BLAST, NALB_BLAST.actual)
     `RAL_FIELD_CP_1(NALB_BLAST, NALB_BLAST.actual, 0)
     `RAL_FIELD_CP(CMPBLAST_CHKV, CMPBLAST_CHKV.actual)
     `RAL_FIELD_CP_1(CMPBLAST_CHKV, CMPBLAST_CHKV.actual, 0)
     `RAL_FIELD_CP(CMPBLAST, CMPBLAST.actual)
     `RAL_FIELD_CP_1(CMPBLAST, CMPBLAST.actual, 0)
     `RAL_FIELD_CP(ATQ_QID_DIS, ATQ_QID_DIS.actual)
     `RAL_FIELD_CP_1(ATQ_QID_DIS, ATQ_QID_DIS.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_BUSY, LDB_CQ_BUSY.actual)
     `RAL_FIELD_CP_1(LDB_CQ_BUSY, LDB_CQ_BUSY.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_NO_SPACE, LDB_CQ_NO_SPACE.actual)
     `RAL_FIELD_CP_1(LDB_CQ_NO_SPACE, LDB_CQ_NO_SPACE.actual, 0)
     `RAL_FIELD_CP(DIR_TOK_V, DIR_TOK_V.actual)
     `RAL_FIELD_CP_1(DIR_TOK_V, DIR_TOK_V.actual, 0)
     `RAL_FIELD_CP(AQED_ACT, AQED_ACT.actual)
     `RAL_FIELD_CP_1(AQED_ACT, AQED_ACT.actual, 0)
     `RAL_FIELD_CP(AP_LSP_ATM_V, AP_LSP_ATM_V.actual)
     `RAL_FIELD_CP_1(AP_LSP_ATM_V, AP_LSP_ATM_V.actual, 0)
     `RAL_FIELD_CP(LDB_TOK_V, LDB_TOK_V.actual)
     `RAL_FIELD_CP_1(LDB_TOK_V, LDB_TOK_V.actual, 0)
     `RAL_FIELD_CP(LDB_CMP_V, LDB_CMP_V.actual)
     `RAL_FIELD_CP_1(LDB_CMP_V, LDB_CMP_V.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_ARB_REQV_COS0, LDB_CQ_ARB_REQV_COS0.actual)
     `RAL_FIELD_CP_1(LDB_CQ_ARB_REQV_COS0, LDB_CQ_ARB_REQV_COS0.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_ARB_REQV_COS1, LDB_CQ_ARB_REQV_COS1.actual)
     `RAL_FIELD_CP_1(LDB_CQ_ARB_REQV_COS1, LDB_CQ_ARB_REQV_COS1.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_ARB_REQV_COS2, LDB_CQ_ARB_REQV_COS2.actual)
     `RAL_FIELD_CP_1(LDB_CQ_ARB_REQV_COS2, LDB_CQ_ARB_REQV_COS2.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_ARB_REQV_COS3, LDB_CQ_ARB_REQV_COS3.actual)
     `RAL_FIELD_CP_1(LDB_CQ_ARB_REQV_COS3, LDB_CQ_ARB_REQV_COS3.actual, 0)
     `RAL_FIELD_CP(ATQ_STOP_ATQATM, ATQ_STOP_ATQATM.actual)
     `RAL_FIELD_CP_1(ATQ_STOP_ATQATM, ATQ_STOP_ATQATM.actual, 0)
     `RAL_FIELD_CP(NALB_SN_FCERR_RPTD, NALB_SN_FCERR_RPTD.actual)
     `RAL_FIELD_CP_1(NALB_SN_FCERR_RPTD, NALB_SN_FCERR_RPTD.actual, 0)
     `RAL_FIELD_CP(AQED_EMPTY, AQED_EMPTY.actual)
     `RAL_FIELD_CP_1(AQED_EMPTY, AQED_EMPTY.actual, 0)
     `RAL_FIELD_CP(ATM_IF_V, ATM_IF_V.actual)
     `RAL_FIELD_CP_1(ATM_IF_V, ATM_IF_V.actual, 0)
     `RAL_FIELD_CP(TOT_IF_V, TOT_IF_V.actual)
     `RAL_FIELD_CP_1(TOT_IF_V, TOT_IF_V.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SLIST_V = new("SLIST_V", "RO/V", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[0:0]"});
    SLIST_V.set_powerwell("vcccfn_gated");
    SLIST_V.set_rand_mode(0);
   SLIST_V.set_reset_signame("hqm_inp_gated_rst_n");
    SLIST_V.set_logical_path("HQMID");
    void'(add_field( SLIST_V ));

    SLIST_BLAST = new("SLIST_BLAST", "RO/V", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[1:1]"});
    SLIST_BLAST.set_powerwell("vcccfn_gated");
    SLIST_BLAST.set_rand_mode(0);
   SLIST_BLAST.set_reset_signame("hqm_inp_gated_rst_n");
    SLIST_BLAST.set_logical_path("HQMID");
    void'(add_field( SLIST_BLAST ));

    RLIST_V = new("RLIST_V", "RO/V", 1, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[2:2]"});
    RLIST_V.set_powerwell("vcccfn_gated");
    RLIST_V.set_rand_mode(0);
   RLIST_V.set_reset_signame("hqm_inp_gated_rst_n");
    RLIST_V.set_logical_path("HQMID");
    void'(add_field( RLIST_V ));

    RLIST_BLAST = new("RLIST_BLAST", "RO/V", 1, 3, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[3:3]"});
    RLIST_BLAST.set_powerwell("vcccfn_gated");
    RLIST_BLAST.set_rand_mode(0);
   RLIST_BLAST.set_reset_signame("hqm_inp_gated_rst_n");
    RLIST_BLAST.set_logical_path("HQMID");
    void'(add_field( RLIST_BLAST ));

    NALB_V = new("NALB_V", "RO/V", 1, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[4:4]"});
    NALB_V.set_powerwell("vcccfn_gated");
    NALB_V.set_rand_mode(0);
   NALB_V.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_V.set_logical_path("HQMID");
    void'(add_field( NALB_V ));

    NALB_BLAST = new("NALB_BLAST", "RO/V", 1, 5, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[5:5]"});
    NALB_BLAST.set_powerwell("vcccfn_gated");
    NALB_BLAST.set_rand_mode(0);
   NALB_BLAST.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_BLAST.set_logical_path("HQMID");
    void'(add_field( NALB_BLAST ));

    CMPBLAST_CHKV = new("CMPBLAST_CHKV", "RO/V", 1, 6, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[6:6]"});
    CMPBLAST_CHKV.set_powerwell("vcccfn_gated");
    CMPBLAST_CHKV.set_rand_mode(0);
   CMPBLAST_CHKV.set_reset_signame("hqm_inp_gated_rst_n");
    CMPBLAST_CHKV.set_logical_path("HQMID");
    void'(add_field( CMPBLAST_CHKV ));

    CMPBLAST = new("CMPBLAST", "RO/V", 1, 7, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[7:7]"});
    CMPBLAST.set_powerwell("vcccfn_gated");
    CMPBLAST.set_rand_mode(0);
   CMPBLAST.set_reset_signame("hqm_inp_gated_rst_n");
    CMPBLAST.set_logical_path("HQMID");
    void'(add_field( CMPBLAST ));

    ATQ_QID_DIS = new("ATQ_QID_DIS", "RO/V", 1, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[8:8]"});
    ATQ_QID_DIS.set_powerwell("vcccfn_gated");
    ATQ_QID_DIS.set_rand_mode(0);
   ATQ_QID_DIS.set_reset_signame("hqm_inp_gated_rst_n");
    ATQ_QID_DIS.set_logical_path("HQMID");
    void'(add_field( ATQ_QID_DIS ));

    LDB_CQ_BUSY = new("LDB_CQ_BUSY", "RO/V", 1, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[9:9]"});
    LDB_CQ_BUSY.set_powerwell("vcccfn_gated");
    LDB_CQ_BUSY.set_rand_mode(0);
   LDB_CQ_BUSY.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_BUSY.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_BUSY ));

    LDB_CQ_NO_SPACE = new("LDB_CQ_NO_SPACE", "RO/V", 1, 10, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[10:10]"});
    LDB_CQ_NO_SPACE.set_powerwell("vcccfn_gated");
    LDB_CQ_NO_SPACE.set_rand_mode(0);
   LDB_CQ_NO_SPACE.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_NO_SPACE.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_NO_SPACE ));

    DIR_TOK_V = new("DIR_TOK_V", "RO/V", 1, 11, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[11:11]"});
    DIR_TOK_V.set_powerwell("vcccfn_gated");
    DIR_TOK_V.set_rand_mode(0);
   DIR_TOK_V.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_TOK_V.set_logical_path("HQMID");
    void'(add_field( DIR_TOK_V ));

    AQED_ACT = new("AQED_ACT", "RO/V", 1, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[12:12]"});
    AQED_ACT.set_powerwell("vcccfn_gated");
    AQED_ACT.set_rand_mode(0);
   AQED_ACT.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_ACT.set_logical_path("HQMID");
    void'(add_field( AQED_ACT ));

    AP_LSP_ATM_V = new("AP_LSP_ATM_V", "RO/V", 1, 13, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[13:13]"});
    AP_LSP_ATM_V.set_powerwell("vcccfn_gated");
    AP_LSP_ATM_V.set_rand_mode(0);
   AP_LSP_ATM_V.set_reset_signame("hqm_inp_gated_rst_n");
    AP_LSP_ATM_V.set_logical_path("HQMID");
    void'(add_field( AP_LSP_ATM_V ));

    LDB_TOK_V = new("LDB_TOK_V", "RO/V", 1, 14, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[14:14]"});
    LDB_TOK_V.set_powerwell("vcccfn_gated");
    LDB_TOK_V.set_rand_mode(0);
   LDB_TOK_V.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_TOK_V.set_logical_path("HQMID");
    void'(add_field( LDB_TOK_V ));

    LDB_CMP_V = new("LDB_CMP_V", "RO/V", 1, 15, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[15:15]"});
    LDB_CMP_V.set_powerwell("vcccfn_gated");
    LDB_CMP_V.set_rand_mode(0);
   LDB_CMP_V.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CMP_V.set_logical_path("HQMID");
    void'(add_field( LDB_CMP_V ));

    LDB_CQ_ARB_REQV_COS0 = new("LDB_CQ_ARB_REQV_COS0", "RO/V", 1, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[16:16]"});
    LDB_CQ_ARB_REQV_COS0.set_powerwell("vcccfn_gated");
    LDB_CQ_ARB_REQV_COS0.set_rand_mode(0);
   LDB_CQ_ARB_REQV_COS0.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_ARB_REQV_COS0.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_ARB_REQV_COS0 ));

    LDB_CQ_ARB_REQV_COS1 = new("LDB_CQ_ARB_REQV_COS1", "RO/V", 1, 17, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[17:17]"});
    LDB_CQ_ARB_REQV_COS1.set_powerwell("vcccfn_gated");
    LDB_CQ_ARB_REQV_COS1.set_rand_mode(0);
   LDB_CQ_ARB_REQV_COS1.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_ARB_REQV_COS1.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_ARB_REQV_COS1 ));

    LDB_CQ_ARB_REQV_COS2 = new("LDB_CQ_ARB_REQV_COS2", "RO/V", 1, 18, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[18:18]"});
    LDB_CQ_ARB_REQV_COS2.set_powerwell("vcccfn_gated");
    LDB_CQ_ARB_REQV_COS2.set_rand_mode(0);
   LDB_CQ_ARB_REQV_COS2.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_ARB_REQV_COS2.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_ARB_REQV_COS2 ));

    LDB_CQ_ARB_REQV_COS3 = new("LDB_CQ_ARB_REQV_COS3", "RO/V", 1, 19, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[19:19]"});
    LDB_CQ_ARB_REQV_COS3.set_powerwell("vcccfn_gated");
    LDB_CQ_ARB_REQV_COS3.set_rand_mode(0);
   LDB_CQ_ARB_REQV_COS3.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_ARB_REQV_COS3.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_ARB_REQV_COS3 ));

    ATQ_STOP_ATQATM = new("ATQ_STOP_ATQATM", "RO/V", 1, 23, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[23:23]"});
    ATQ_STOP_ATQATM.set_powerwell("vcccfn_gated");
    ATQ_STOP_ATQATM.set_rand_mode(0);
   ATQ_STOP_ATQATM.set_reset_signame("hqm_inp_gated_rst_n");
    ATQ_STOP_ATQATM.set_logical_path("HQMID");
    void'(add_field( ATQ_STOP_ATQATM ));

    NALB_SN_FCERR_RPTD = new("NALB_SN_FCERR_RPTD", "RO/V", 1, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[24:24]"});
    NALB_SN_FCERR_RPTD.set_powerwell("vcccfn_gated");
    NALB_SN_FCERR_RPTD.set_rand_mode(0);
   NALB_SN_FCERR_RPTD.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_SN_FCERR_RPTD.set_logical_path("HQMID");
    void'(add_field( NALB_SN_FCERR_RPTD ));

    AQED_EMPTY = new("AQED_EMPTY", "RO/V", 1, 25, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[25:25]"});
    AQED_EMPTY.set_powerwell("vcccfn_gated");
    AQED_EMPTY.set_rand_mode(0);
   AQED_EMPTY.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_EMPTY.set_logical_path("HQMID");
    void'(add_field( AQED_EMPTY ));

    ATM_IF_V = new("ATM_IF_V", "RO/V", 1, 26, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[26:26]"});
    ATM_IF_V.set_powerwell("vcccfn_gated");
    ATM_IF_V.set_rand_mode(0);
   ATM_IF_V.set_reset_signame("hqm_inp_gated_rst_n");
    ATM_IF_V.set_logical_path("HQMID");
    void'(add_field( ATM_IF_V ));

    TOT_IF_V = new("TOT_IF_V", "RO/V", 1, 27, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[27:27]"});
    TOT_IF_V.set_powerwell("vcccfn_gated");
    TOT_IF_V.set_rand_mode(0);
   TOT_IF_V.set_reset_signame("hqm_inp_gated_rst_n");
    TOT_IF_V.set_logical_path("HQMID");
    void'(add_field( TOT_IF_V ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_STATUS_0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_STATUS_0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_ERROR_INJECT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RSVZ0;
  sla_ral_field LDB_CQ_IF_CNT_UFLOW;
  sla_ral_field ATQ_AQED_LIM_PERR;
  sla_ral_field DIR_TOK_LIM_PERR;
  sla_ral_field QID2CQIDIX_PERR;
  sla_ral_field CQ2QID_PERR;
  sla_ral_field DIR_INP_PERR;
  sla_ral_field LDB_TOK_FIFO_UFLOW;
  sla_ral_field RSVZ1;
  sla_ral_field DP_QID_PERR;
  sla_ral_field RSVZ2;
  sla_ral_field LDB_QID_PERR;
  sla_ral_field LDB_FLAG_PERR;
  sla_ral_field ATQ_PERR;
  sla_ral_field LDB_RPL_PERR;
  sla_ral_field DP_RPL_PERR;
  sla_ral_field DIR_TOK_CNT_UFLOW;
  sla_ral_field LDB_TOK_CNT_UFLOW;
  sla_ral_field RSVZ3;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_ERROR_INJECT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.desired, 0)
     `RAL_FIELD_CP(LDB_CQ_IF_CNT_UFLOW, LDB_CQ_IF_CNT_UFLOW.desired)
     `RAL_FIELD_CP_1(LDB_CQ_IF_CNT_UFLOW, LDB_CQ_IF_CNT_UFLOW.desired, 0)
     `RAL_FIELD_CP(ATQ_AQED_LIM_PERR, ATQ_AQED_LIM_PERR.desired)
     `RAL_FIELD_CP_1(ATQ_AQED_LIM_PERR, ATQ_AQED_LIM_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_TOK_LIM_PERR, DIR_TOK_LIM_PERR.desired)
     `RAL_FIELD_CP_1(DIR_TOK_LIM_PERR, DIR_TOK_LIM_PERR.desired, 0)
     `RAL_FIELD_CP(QID2CQIDIX_PERR, QID2CQIDIX_PERR.desired)
     `RAL_FIELD_CP_1(QID2CQIDIX_PERR, QID2CQIDIX_PERR.desired, 0)
     `RAL_FIELD_CP(CQ2QID_PERR, CQ2QID_PERR.desired)
     `RAL_FIELD_CP_1(CQ2QID_PERR, CQ2QID_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_INP_PERR, DIR_INP_PERR.desired)
     `RAL_FIELD_CP_1(DIR_INP_PERR, DIR_INP_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_TOK_FIFO_UFLOW, LDB_TOK_FIFO_UFLOW.desired)
     `RAL_FIELD_CP_1(LDB_TOK_FIFO_UFLOW, LDB_TOK_FIFO_UFLOW.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.desired, 0)
     `RAL_FIELD_CP(DP_QID_PERR, DP_QID_PERR.desired)
     `RAL_FIELD_CP_1(DP_QID_PERR, DP_QID_PERR.desired, 0)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.desired)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.desired, 0)
     `RAL_FIELD_CP(LDB_QID_PERR, LDB_QID_PERR.desired)
     `RAL_FIELD_CP_1(LDB_QID_PERR, LDB_QID_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_FLAG_PERR, LDB_FLAG_PERR.desired)
     `RAL_FIELD_CP_1(LDB_FLAG_PERR, LDB_FLAG_PERR.desired, 0)
     `RAL_FIELD_CP(ATQ_PERR, ATQ_PERR.desired)
     `RAL_FIELD_CP_1(ATQ_PERR, ATQ_PERR.desired, 0)
     `RAL_FIELD_CP(LDB_RPL_PERR, LDB_RPL_PERR.desired)
     `RAL_FIELD_CP_1(LDB_RPL_PERR, LDB_RPL_PERR.desired, 0)
     `RAL_FIELD_CP(DP_RPL_PERR, DP_RPL_PERR.desired)
     `RAL_FIELD_CP_1(DP_RPL_PERR, DP_RPL_PERR.desired, 0)
     `RAL_FIELD_CP(DIR_TOK_CNT_UFLOW, DIR_TOK_CNT_UFLOW.desired)
     `RAL_FIELD_CP_1(DIR_TOK_CNT_UFLOW, DIR_TOK_CNT_UFLOW.desired, 0)
     `RAL_FIELD_CP(LDB_TOK_CNT_UFLOW, LDB_TOK_CNT_UFLOW.desired)
     `RAL_FIELD_CP_1(LDB_TOK_CNT_UFLOW, LDB_TOK_CNT_UFLOW.desired, 0)
     `RAL_FIELD_CP(RSVZ3, RSVZ3.desired)
     `RAL_FIELD_CP_14(RSVZ3, RSVZ3.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.actual, 0)
     `RAL_FIELD_CP(LDB_CQ_IF_CNT_UFLOW, LDB_CQ_IF_CNT_UFLOW.actual)
     `RAL_FIELD_CP_1(LDB_CQ_IF_CNT_UFLOW, LDB_CQ_IF_CNT_UFLOW.actual, 0)
     `RAL_FIELD_CP(ATQ_AQED_LIM_PERR, ATQ_AQED_LIM_PERR.actual)
     `RAL_FIELD_CP_1(ATQ_AQED_LIM_PERR, ATQ_AQED_LIM_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_TOK_LIM_PERR, DIR_TOK_LIM_PERR.actual)
     `RAL_FIELD_CP_1(DIR_TOK_LIM_PERR, DIR_TOK_LIM_PERR.actual, 0)
     `RAL_FIELD_CP(QID2CQIDIX_PERR, QID2CQIDIX_PERR.actual)
     `RAL_FIELD_CP_1(QID2CQIDIX_PERR, QID2CQIDIX_PERR.actual, 0)
     `RAL_FIELD_CP(CQ2QID_PERR, CQ2QID_PERR.actual)
     `RAL_FIELD_CP_1(CQ2QID_PERR, CQ2QID_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_INP_PERR, DIR_INP_PERR.actual)
     `RAL_FIELD_CP_1(DIR_INP_PERR, DIR_INP_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_TOK_FIFO_UFLOW, LDB_TOK_FIFO_UFLOW.actual)
     `RAL_FIELD_CP_1(LDB_TOK_FIFO_UFLOW, LDB_TOK_FIFO_UFLOW.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.actual, 0)
     `RAL_FIELD_CP(DP_QID_PERR, DP_QID_PERR.actual)
     `RAL_FIELD_CP_1(DP_QID_PERR, DP_QID_PERR.actual, 0)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.actual)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.actual, 0)
     `RAL_FIELD_CP(LDB_QID_PERR, LDB_QID_PERR.actual)
     `RAL_FIELD_CP_1(LDB_QID_PERR, LDB_QID_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_FLAG_PERR, LDB_FLAG_PERR.actual)
     `RAL_FIELD_CP_1(LDB_FLAG_PERR, LDB_FLAG_PERR.actual, 0)
     `RAL_FIELD_CP(ATQ_PERR, ATQ_PERR.actual)
     `RAL_FIELD_CP_1(ATQ_PERR, ATQ_PERR.actual, 0)
     `RAL_FIELD_CP(LDB_RPL_PERR, LDB_RPL_PERR.actual)
     `RAL_FIELD_CP_1(LDB_RPL_PERR, LDB_RPL_PERR.actual, 0)
     `RAL_FIELD_CP(DP_RPL_PERR, DP_RPL_PERR.actual)
     `RAL_FIELD_CP_1(DP_RPL_PERR, DP_RPL_PERR.actual, 0)
     `RAL_FIELD_CP(DIR_TOK_CNT_UFLOW, DIR_TOK_CNT_UFLOW.actual)
     `RAL_FIELD_CP_1(DIR_TOK_CNT_UFLOW, DIR_TOK_CNT_UFLOW.actual, 0)
     `RAL_FIELD_CP(LDB_TOK_CNT_UFLOW, LDB_TOK_CNT_UFLOW.actual)
     `RAL_FIELD_CP_1(LDB_TOK_CNT_UFLOW, LDB_TOK_CNT_UFLOW.actual, 0)
     `RAL_FIELD_CP(RSVZ3, RSVZ3.actual)
     `RAL_FIELD_CP_14(RSVZ3, RSVZ3.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RSVZ0 = new("RSVZ0", "RW", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[0:0]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    LDB_CQ_IF_CNT_UFLOW = new("LDB_CQ_IF_CNT_UFLOW", "RW", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[1:1]"});
    LDB_CQ_IF_CNT_UFLOW.set_powerwell("vcccfn_gated");
    LDB_CQ_IF_CNT_UFLOW.set_rand_mode(0);
   LDB_CQ_IF_CNT_UFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_CQ_IF_CNT_UFLOW.set_logical_path("HQMID");
    void'(add_field( LDB_CQ_IF_CNT_UFLOW ));

    ATQ_AQED_LIM_PERR = new("ATQ_AQED_LIM_PERR", "RW", 1, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[2:2]"});
    ATQ_AQED_LIM_PERR.set_powerwell("vcccfn_gated");
    ATQ_AQED_LIM_PERR.set_rand_mode(0);
   ATQ_AQED_LIM_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    ATQ_AQED_LIM_PERR.set_logical_path("HQMID");
    void'(add_field( ATQ_AQED_LIM_PERR ));

    DIR_TOK_LIM_PERR = new("DIR_TOK_LIM_PERR", "RW", 1, 3, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[3:3]"});
    DIR_TOK_LIM_PERR.set_powerwell("vcccfn_gated");
    DIR_TOK_LIM_PERR.set_rand_mode(0);
   DIR_TOK_LIM_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_TOK_LIM_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_TOK_LIM_PERR ));

    QID2CQIDIX_PERR = new("QID2CQIDIX_PERR", "RW", 1, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[4:4]"});
    QID2CQIDIX_PERR.set_powerwell("vcccfn_gated");
    QID2CQIDIX_PERR.set_rand_mode(0);
   QID2CQIDIX_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    QID2CQIDIX_PERR.set_logical_path("HQMID");
    void'(add_field( QID2CQIDIX_PERR ));

    CQ2QID_PERR = new("CQ2QID_PERR", "RW", 1, 5, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[5:5]"});
    CQ2QID_PERR.set_powerwell("vcccfn_gated");
    CQ2QID_PERR.set_rand_mode(0);
   CQ2QID_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    CQ2QID_PERR.set_logical_path("HQMID");
    void'(add_field( CQ2QID_PERR ));

    DIR_INP_PERR = new("DIR_INP_PERR", "RW", 1, 6, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[6:6]"});
    DIR_INP_PERR.set_powerwell("vcccfn_gated");
    DIR_INP_PERR.set_rand_mode(0);
   DIR_INP_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_INP_PERR.set_logical_path("HQMID");
    void'(add_field( DIR_INP_PERR ));

    LDB_TOK_FIFO_UFLOW = new("LDB_TOK_FIFO_UFLOW", "RW", 1, 7, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[7:7]"});
    LDB_TOK_FIFO_UFLOW.set_powerwell("vcccfn_gated");
    LDB_TOK_FIFO_UFLOW.set_rand_mode(0);
   LDB_TOK_FIFO_UFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_TOK_FIFO_UFLOW.set_logical_path("HQMID");
    void'(add_field( LDB_TOK_FIFO_UFLOW ));

    RSVZ1 = new("RSVZ1", "RW", 1, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[8:8]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    DP_QID_PERR = new("DP_QID_PERR", "RW", 1, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[9:9]"});
    DP_QID_PERR.set_powerwell("vcccfn_gated");
    DP_QID_PERR.set_rand_mode(0);
   DP_QID_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DP_QID_PERR.set_logical_path("HQMID");
    void'(add_field( DP_QID_PERR ));

    RSVZ2 = new("RSVZ2", "RW", 1, 10, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[10:10]"});
    RSVZ2.set_powerwell("vcccfn_gated");
    RSVZ2.set_rand_mode(0);
   RSVZ2.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ2.set_logical_path("HQMID");
    void'(add_field( RSVZ2 ));

    LDB_QID_PERR = new("LDB_QID_PERR", "RW", 1, 11, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[11:11]"});
    LDB_QID_PERR.set_powerwell("vcccfn_gated");
    LDB_QID_PERR.set_rand_mode(0);
   LDB_QID_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_QID_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_QID_PERR ));

    LDB_FLAG_PERR = new("LDB_FLAG_PERR", "RW", 1, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[12:12]"});
    LDB_FLAG_PERR.set_powerwell("vcccfn_gated");
    LDB_FLAG_PERR.set_rand_mode(0);
   LDB_FLAG_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_FLAG_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_FLAG_PERR ));

    ATQ_PERR = new("ATQ_PERR", "RW", 1, 13, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[13:13]"});
    ATQ_PERR.set_powerwell("vcccfn_gated");
    ATQ_PERR.set_rand_mode(0);
   ATQ_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    ATQ_PERR.set_logical_path("HQMID");
    void'(add_field( ATQ_PERR ));

    LDB_RPL_PERR = new("LDB_RPL_PERR", "RW", 1, 14, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[14:14]"});
    LDB_RPL_PERR.set_powerwell("vcccfn_gated");
    LDB_RPL_PERR.set_rand_mode(0);
   LDB_RPL_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_RPL_PERR.set_logical_path("HQMID");
    void'(add_field( LDB_RPL_PERR ));

    DP_RPL_PERR = new("DP_RPL_PERR", "RW", 1, 15, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[15:15]"});
    DP_RPL_PERR.set_powerwell("vcccfn_gated");
    DP_RPL_PERR.set_rand_mode(0);
   DP_RPL_PERR.set_reset_signame("hqm_inp_gated_rst_n");
    DP_RPL_PERR.set_logical_path("HQMID");
    void'(add_field( DP_RPL_PERR ));

    DIR_TOK_CNT_UFLOW = new("DIR_TOK_CNT_UFLOW", "RW", 1, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[16:16]"});
    DIR_TOK_CNT_UFLOW.set_powerwell("vcccfn_gated");
    DIR_TOK_CNT_UFLOW.set_rand_mode(0);
   DIR_TOK_CNT_UFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    DIR_TOK_CNT_UFLOW.set_logical_path("HQMID");
    void'(add_field( DIR_TOK_CNT_UFLOW ));

    LDB_TOK_CNT_UFLOW = new("LDB_TOK_CNT_UFLOW", "RW", 1, 17, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[17:17]"});
    LDB_TOK_CNT_UFLOW.set_powerwell("vcccfn_gated");
    LDB_TOK_CNT_UFLOW.set_rand_mode(0);
   LDB_TOK_CNT_UFLOW.set_reset_signame("hqm_inp_gated_rst_n");
    LDB_TOK_CNT_UFLOW.set_logical_path("HQMID");
    void'(add_field( LDB_TOK_CNT_UFLOW ));

    RSVZ3 = new("RSVZ3", "RW", 14, 18, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[31:18]"});
    RSVZ3.set_powerwell("vcccfn_gated");
    RSVZ3.set_rand_mode(0);
   RSVZ3.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ3.set_logical_path("HQMID");
    void'(add_field( RSVZ3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_ERROR_INJECT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_ERROR_INJECT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE;
  sla_ral_field DUTY;
  sla_ral_field PERIOD;
  sla_ral_field PROB1ST;
  sla_ral_field PROB2ND;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.desired)
     `RAL_FIELD_CP_2(MODE, MODE.desired, 0,1)
     `RAL_FIELD_CP(DUTY, DUTY.desired)
     `RAL_FIELD_CP_3(DUTY, DUTY.desired, 0,1,2)
     `RAL_FIELD_CP(PERIOD, PERIOD.desired)
     `RAL_FIELD_CP_11(PERIOD, PERIOD.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(PROB1ST, PROB1ST.desired)
     `RAL_FIELD_CP_8(PROB1ST, PROB1ST.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PROB2ND, PROB2ND.desired)
     `RAL_FIELD_CP_8(PROB2ND, PROB2ND.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE, MODE.actual)
     `RAL_FIELD_CP_2(MODE, MODE.actual, 0,1)
     `RAL_FIELD_CP(DUTY, DUTY.actual)
     `RAL_FIELD_CP_3(DUTY, DUTY.actual, 0,1,2)
     `RAL_FIELD_CP(PERIOD, PERIOD.actual)
     `RAL_FIELD_CP_11(PERIOD, PERIOD.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(PROB1ST, PROB1ST.actual)
     `RAL_FIELD_CP_8(PROB1ST, PROB1ST.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(PROB2ND, PROB2ND.actual)
     `RAL_FIELD_CP_8(PROB2ND, PROB2ND.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE = new("MODE", "RW", 2, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_control.internal_f[1:0]"});
    MODE.set_powerwell("vcccfn_gated");
    MODE.set_rand_mode(0);
   MODE.set_reset_signame("hqm_inp_gated_rst_n");
    MODE.set_logical_path("HQMID");
    void'(add_field( MODE ));

    DUTY = new("DUTY", "RW", 3, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_control.internal_f[4:2]"});
    DUTY.set_powerwell("vcccfn_gated");
    DUTY.set_rand_mode(0);
   DUTY.set_reset_signame("hqm_inp_gated_rst_n");
    DUTY.set_logical_path("HQMID");
    void'(add_field( DUTY ));

    PERIOD = new("PERIOD", "RW", 11, 5, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_control.internal_f[15:5]"});
    PERIOD.set_powerwell("vcccfn_gated");
    PERIOD.set_rand_mode(0);
   PERIOD.set_reset_signame("hqm_inp_gated_rst_n");
    PERIOD.set_logical_path("HQMID");
    void'(add_field( PERIOD ));

    PROB1ST = new("PROB1ST", "RW", 8, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_control.internal_f[23:16]"});
    PROB1ST.set_powerwell("vcccfn_gated");
    PROB1ST.set_rand_mode(0);
   PROB1ST.set_reset_signame("hqm_inp_gated_rst_n");
    PROB1ST.set_logical_path("HQMID");
    void'(add_field( PROB1ST ));

    PROB2ND = new("PROB2ND", "RW", 8, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_control.internal_f[31:24]"});
    PROB2ND.set_powerwell("vcccfn_gated");
    PROB2ND.set_rand_mode(0);
   PROB2ND.set_reset_signame("hqm_inp_gated_rst_n");
    PROB2ND.set_logical_path("HQMID");
    void'(add_field( PROB2ND ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_SELECT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field AGG_IF_00;
  sla_ral_field AGG_IF_01;
  sla_ral_field AGG_IF_02;
  sla_ral_field AGG_IF_03;
  sla_ral_field AGG_IF_04;
  sla_ral_field AGG_IF_05;
  sla_ral_field AGG_IF_06;
  sla_ral_field AGG_IF_07;
  sla_ral_field AGG_IF_08;
  sla_ral_field AGG_IF_09;
  sla_ral_field AGG_IF_10;
  sla_ral_field AGG_IF_11;
  sla_ral_field AGG_IF_12;
  sla_ral_field AGG_IF_13;
  sla_ral_field AGG_IF_14;
  sla_ral_field AGG_IF_15;
  sla_ral_field RSVZ;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_SELECT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AGG_IF_00, AGG_IF_00.desired)
     `RAL_FIELD_CP_1(AGG_IF_00, AGG_IF_00.desired, 0)
     `RAL_FIELD_CP(AGG_IF_01, AGG_IF_01.desired)
     `RAL_FIELD_CP_1(AGG_IF_01, AGG_IF_01.desired, 0)
     `RAL_FIELD_CP(AGG_IF_02, AGG_IF_02.desired)
     `RAL_FIELD_CP_1(AGG_IF_02, AGG_IF_02.desired, 0)
     `RAL_FIELD_CP(AGG_IF_03, AGG_IF_03.desired)
     `RAL_FIELD_CP_1(AGG_IF_03, AGG_IF_03.desired, 0)
     `RAL_FIELD_CP(AGG_IF_04, AGG_IF_04.desired)
     `RAL_FIELD_CP_1(AGG_IF_04, AGG_IF_04.desired, 0)
     `RAL_FIELD_CP(AGG_IF_05, AGG_IF_05.desired)
     `RAL_FIELD_CP_1(AGG_IF_05, AGG_IF_05.desired, 0)
     `RAL_FIELD_CP(AGG_IF_06, AGG_IF_06.desired)
     `RAL_FIELD_CP_1(AGG_IF_06, AGG_IF_06.desired, 0)
     `RAL_FIELD_CP(AGG_IF_07, AGG_IF_07.desired)
     `RAL_FIELD_CP_1(AGG_IF_07, AGG_IF_07.desired, 0)
     `RAL_FIELD_CP(AGG_IF_08, AGG_IF_08.desired)
     `RAL_FIELD_CP_1(AGG_IF_08, AGG_IF_08.desired, 0)
     `RAL_FIELD_CP(AGG_IF_09, AGG_IF_09.desired)
     `RAL_FIELD_CP_1(AGG_IF_09, AGG_IF_09.desired, 0)
     `RAL_FIELD_CP(AGG_IF_10, AGG_IF_10.desired)
     `RAL_FIELD_CP_1(AGG_IF_10, AGG_IF_10.desired, 0)
     `RAL_FIELD_CP(AGG_IF_11, AGG_IF_11.desired)
     `RAL_FIELD_CP_1(AGG_IF_11, AGG_IF_11.desired, 0)
     `RAL_FIELD_CP(AGG_IF_12, AGG_IF_12.desired)
     `RAL_FIELD_CP_1(AGG_IF_12, AGG_IF_12.desired, 0)
     `RAL_FIELD_CP(AGG_IF_13, AGG_IF_13.desired)
     `RAL_FIELD_CP_1(AGG_IF_13, AGG_IF_13.desired, 0)
     `RAL_FIELD_CP(AGG_IF_14, AGG_IF_14.desired)
     `RAL_FIELD_CP_1(AGG_IF_14, AGG_IF_14.desired, 0)
     `RAL_FIELD_CP(AGG_IF_15, AGG_IF_15.desired)
     `RAL_FIELD_CP_1(AGG_IF_15, AGG_IF_15.desired, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.desired)
     `RAL_FIELD_CP_16(RSVZ, RSVZ.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AGG_IF_00, AGG_IF_00.actual)
     `RAL_FIELD_CP_1(AGG_IF_00, AGG_IF_00.actual, 0)
     `RAL_FIELD_CP(AGG_IF_01, AGG_IF_01.actual)
     `RAL_FIELD_CP_1(AGG_IF_01, AGG_IF_01.actual, 0)
     `RAL_FIELD_CP(AGG_IF_02, AGG_IF_02.actual)
     `RAL_FIELD_CP_1(AGG_IF_02, AGG_IF_02.actual, 0)
     `RAL_FIELD_CP(AGG_IF_03, AGG_IF_03.actual)
     `RAL_FIELD_CP_1(AGG_IF_03, AGG_IF_03.actual, 0)
     `RAL_FIELD_CP(AGG_IF_04, AGG_IF_04.actual)
     `RAL_FIELD_CP_1(AGG_IF_04, AGG_IF_04.actual, 0)
     `RAL_FIELD_CP(AGG_IF_05, AGG_IF_05.actual)
     `RAL_FIELD_CP_1(AGG_IF_05, AGG_IF_05.actual, 0)
     `RAL_FIELD_CP(AGG_IF_06, AGG_IF_06.actual)
     `RAL_FIELD_CP_1(AGG_IF_06, AGG_IF_06.actual, 0)
     `RAL_FIELD_CP(AGG_IF_07, AGG_IF_07.actual)
     `RAL_FIELD_CP_1(AGG_IF_07, AGG_IF_07.actual, 0)
     `RAL_FIELD_CP(AGG_IF_08, AGG_IF_08.actual)
     `RAL_FIELD_CP_1(AGG_IF_08, AGG_IF_08.actual, 0)
     `RAL_FIELD_CP(AGG_IF_09, AGG_IF_09.actual)
     `RAL_FIELD_CP_1(AGG_IF_09, AGG_IF_09.actual, 0)
     `RAL_FIELD_CP(AGG_IF_10, AGG_IF_10.actual)
     `RAL_FIELD_CP_1(AGG_IF_10, AGG_IF_10.actual, 0)
     `RAL_FIELD_CP(AGG_IF_11, AGG_IF_11.actual)
     `RAL_FIELD_CP_1(AGG_IF_11, AGG_IF_11.actual, 0)
     `RAL_FIELD_CP(AGG_IF_12, AGG_IF_12.actual)
     `RAL_FIELD_CP_1(AGG_IF_12, AGG_IF_12.actual, 0)
     `RAL_FIELD_CP(AGG_IF_13, AGG_IF_13.actual)
     `RAL_FIELD_CP_1(AGG_IF_13, AGG_IF_13.actual, 0)
     `RAL_FIELD_CP(AGG_IF_14, AGG_IF_14.actual)
     `RAL_FIELD_CP_1(AGG_IF_14, AGG_IF_14.actual, 0)
     `RAL_FIELD_CP(AGG_IF_15, AGG_IF_15.actual)
     `RAL_FIELD_CP_1(AGG_IF_15, AGG_IF_15.actual, 0)
     `RAL_FIELD_CP(RSVZ, RSVZ.actual)
     `RAL_FIELD_CP_16(RSVZ, RSVZ.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    AGG_IF_00 = new("AGG_IF_00", "RW", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[0:0]"});
    AGG_IF_00.set_powerwell("vcccfn_gated");
    AGG_IF_00.set_rand_mode(0);
   AGG_IF_00.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_00.set_logical_path("HQMID");
    void'(add_field( AGG_IF_00 ));

    AGG_IF_01 = new("AGG_IF_01", "RW", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[1:1]"});
    AGG_IF_01.set_powerwell("vcccfn_gated");
    AGG_IF_01.set_rand_mode(0);
   AGG_IF_01.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_01.set_logical_path("HQMID");
    void'(add_field( AGG_IF_01 ));

    AGG_IF_02 = new("AGG_IF_02", "RW", 1, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[2:2]"});
    AGG_IF_02.set_powerwell("vcccfn_gated");
    AGG_IF_02.set_rand_mode(0);
   AGG_IF_02.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_02.set_logical_path("HQMID");
    void'(add_field( AGG_IF_02 ));

    AGG_IF_03 = new("AGG_IF_03", "RW", 1, 3, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[3:3]"});
    AGG_IF_03.set_powerwell("vcccfn_gated");
    AGG_IF_03.set_rand_mode(0);
   AGG_IF_03.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_03.set_logical_path("HQMID");
    void'(add_field( AGG_IF_03 ));

    AGG_IF_04 = new("AGG_IF_04", "RW", 1, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[4:4]"});
    AGG_IF_04.set_powerwell("vcccfn_gated");
    AGG_IF_04.set_rand_mode(0);
   AGG_IF_04.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_04.set_logical_path("HQMID");
    void'(add_field( AGG_IF_04 ));

    AGG_IF_05 = new("AGG_IF_05", "RW", 1, 5, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[5:5]"});
    AGG_IF_05.set_powerwell("vcccfn_gated");
    AGG_IF_05.set_rand_mode(0);
   AGG_IF_05.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_05.set_logical_path("HQMID");
    void'(add_field( AGG_IF_05 ));

    AGG_IF_06 = new("AGG_IF_06", "RW", 1, 6, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[6:6]"});
    AGG_IF_06.set_powerwell("vcccfn_gated");
    AGG_IF_06.set_rand_mode(0);
   AGG_IF_06.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_06.set_logical_path("HQMID");
    void'(add_field( AGG_IF_06 ));

    AGG_IF_07 = new("AGG_IF_07", "RW", 1, 7, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[7:7]"});
    AGG_IF_07.set_powerwell("vcccfn_gated");
    AGG_IF_07.set_rand_mode(0);
   AGG_IF_07.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_07.set_logical_path("HQMID");
    void'(add_field( AGG_IF_07 ));

    AGG_IF_08 = new("AGG_IF_08", "RW", 1, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[8:8]"});
    AGG_IF_08.set_powerwell("vcccfn_gated");
    AGG_IF_08.set_rand_mode(0);
   AGG_IF_08.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_08.set_logical_path("HQMID");
    void'(add_field( AGG_IF_08 ));

    AGG_IF_09 = new("AGG_IF_09", "RW", 1, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[9:9]"});
    AGG_IF_09.set_powerwell("vcccfn_gated");
    AGG_IF_09.set_rand_mode(0);
   AGG_IF_09.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_09.set_logical_path("HQMID");
    void'(add_field( AGG_IF_09 ));

    AGG_IF_10 = new("AGG_IF_10", "RW", 1, 10, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[10:10]"});
    AGG_IF_10.set_powerwell("vcccfn_gated");
    AGG_IF_10.set_rand_mode(0);
   AGG_IF_10.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_10.set_logical_path("HQMID");
    void'(add_field( AGG_IF_10 ));

    AGG_IF_11 = new("AGG_IF_11", "RW", 1, 11, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[11:11]"});
    AGG_IF_11.set_powerwell("vcccfn_gated");
    AGG_IF_11.set_rand_mode(0);
   AGG_IF_11.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_11.set_logical_path("HQMID");
    void'(add_field( AGG_IF_11 ));

    AGG_IF_12 = new("AGG_IF_12", "RW", 1, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[12:12]"});
    AGG_IF_12.set_powerwell("vcccfn_gated");
    AGG_IF_12.set_rand_mode(0);
   AGG_IF_12.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_12.set_logical_path("HQMID");
    void'(add_field( AGG_IF_12 ));

    AGG_IF_13 = new("AGG_IF_13", "RW", 1, 13, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[13:13]"});
    AGG_IF_13.set_powerwell("vcccfn_gated");
    AGG_IF_13.set_rand_mode(0);
   AGG_IF_13.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_13.set_logical_path("HQMID");
    void'(add_field( AGG_IF_13 ));

    AGG_IF_14 = new("AGG_IF_14", "RW", 1, 14, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[14:14]"});
    AGG_IF_14.set_powerwell("vcccfn_gated");
    AGG_IF_14.set_rand_mode(0);
   AGG_IF_14.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_14.set_logical_path("HQMID");
    void'(add_field( AGG_IF_14 ));

    AGG_IF_15 = new("AGG_IF_15", "RW", 1, 15, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[15:15]"});
    AGG_IF_15.set_powerwell("vcccfn_gated");
    AGG_IF_15.set_rand_mode(0);
   AGG_IF_15.set_reset_signame("hqm_inp_gated_rst_n");
    AGG_IF_15.set_logical_path("HQMID");
    void'(add_field( AGG_IF_15 ));

    RSVZ = new("RSVZ", "RW", 16, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[31:16]"});
    RSVZ.set_powerwell("vcccfn_gated");
    RSVZ.set_rand_mode(0);
   RSVZ.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ.set_logical_path("HQMID");
    void'(add_field( RSVZ ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_SELECT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_SELECT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_INTERFACE_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field AQED_LSP_SENT_TO_CQ_V;
  sla_ral_field AQED_LSP_SENT_TO_CQ_NOT_RDY;
  sla_ral_field DP_LSP_ENQ_RORPLY_V;
  sla_ral_field DP_LSP_ENQ_RORPLY_NOT_RDY;
  sla_ral_field DP_LSP_ENQ_DIR_V;
  sla_ral_field DP_LSP_ENQ_DIR_NOT_RDY;
  sla_ral_field NALB_LSP_ENQ_RORPLY_V;
  sla_ral_field NALB_LSP_ENQ_RORPLY_NOT_RDY;
  sla_ral_field NALB_LSP_ENQ_LDB_V;
  sla_ral_field NALB_LSP_ENQ_LDB_NOT_RDY;
  sla_ral_field ROP_LSP_REORDCMP_V;
  sla_ral_field ROP_LSP_REORDCMP_NOT_RDY;
  sla_ral_field CHP_LSP_CMP_V;
  sla_ral_field CHP_LSP_CMP_NOT_RDY;
  sla_ral_field CHP_LSP_TOK_V;
  sla_ral_field CHP_LSP_TOK_NOT_RDY;
  sla_ral_field INT_SER_CLOCK_NOT_IDLE;
  sla_ral_field AQED_CLOCK_NOT_IDLE;
  sla_ral_field AP_CLOCK_NOT_IDLE;
  sla_ral_field RSVZ0;
  sla_ral_field LSP_DP_SCH_RORPLY_V;
  sla_ral_field LSP_DP_SCH_RORPLY_NOT_RDY;
  sla_ral_field LSP_NALB_SCH_RORPLY_V;
  sla_ral_field LSP_NALB_SCH_RORPLY_NOT_RDY;
  sla_ral_field LSP_DP_SCH_DIR_V;
  sla_ral_field LSP_DP_SCH_DIR_NOT_RDY;
  sla_ral_field LSP_NALB_SCH_ATQ_V;
  sla_ral_field LSP_NALB_SCH_ATQ_NOT_RDY;
  sla_ral_field LSP_NALB_SCH_UO_V;
  sla_ral_field LSP_NALB_SCH_UO_NOT_RDY;
  sla_ral_field LSP_AP_ATM_V;
  sla_ral_field LSP_AP_ATM_NOT_RDY;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_INTERFACE_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AQED_LSP_SENT_TO_CQ_V, AQED_LSP_SENT_TO_CQ_V.desired)
     `RAL_FIELD_CP_1(AQED_LSP_SENT_TO_CQ_V, AQED_LSP_SENT_TO_CQ_V.desired, 0)
     `RAL_FIELD_CP(AQED_LSP_SENT_TO_CQ_NOT_RDY, AQED_LSP_SENT_TO_CQ_NOT_RDY.desired)
     `RAL_FIELD_CP_1(AQED_LSP_SENT_TO_CQ_NOT_RDY, AQED_LSP_SENT_TO_CQ_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(DP_LSP_ENQ_RORPLY_V, DP_LSP_ENQ_RORPLY_V.desired)
     `RAL_FIELD_CP_1(DP_LSP_ENQ_RORPLY_V, DP_LSP_ENQ_RORPLY_V.desired, 0)
     `RAL_FIELD_CP(DP_LSP_ENQ_RORPLY_NOT_RDY, DP_LSP_ENQ_RORPLY_NOT_RDY.desired)
     `RAL_FIELD_CP_1(DP_LSP_ENQ_RORPLY_NOT_RDY, DP_LSP_ENQ_RORPLY_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(DP_LSP_ENQ_DIR_V, DP_LSP_ENQ_DIR_V.desired)
     `RAL_FIELD_CP_1(DP_LSP_ENQ_DIR_V, DP_LSP_ENQ_DIR_V.desired, 0)
     `RAL_FIELD_CP(DP_LSP_ENQ_DIR_NOT_RDY, DP_LSP_ENQ_DIR_NOT_RDY.desired)
     `RAL_FIELD_CP_1(DP_LSP_ENQ_DIR_NOT_RDY, DP_LSP_ENQ_DIR_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(NALB_LSP_ENQ_RORPLY_V, NALB_LSP_ENQ_RORPLY_V.desired)
     `RAL_FIELD_CP_1(NALB_LSP_ENQ_RORPLY_V, NALB_LSP_ENQ_RORPLY_V.desired, 0)
     `RAL_FIELD_CP(NALB_LSP_ENQ_RORPLY_NOT_RDY, NALB_LSP_ENQ_RORPLY_NOT_RDY.desired)
     `RAL_FIELD_CP_1(NALB_LSP_ENQ_RORPLY_NOT_RDY, NALB_LSP_ENQ_RORPLY_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(NALB_LSP_ENQ_LDB_V, NALB_LSP_ENQ_LDB_V.desired)
     `RAL_FIELD_CP_1(NALB_LSP_ENQ_LDB_V, NALB_LSP_ENQ_LDB_V.desired, 0)
     `RAL_FIELD_CP(NALB_LSP_ENQ_LDB_NOT_RDY, NALB_LSP_ENQ_LDB_NOT_RDY.desired)
     `RAL_FIELD_CP_1(NALB_LSP_ENQ_LDB_NOT_RDY, NALB_LSP_ENQ_LDB_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(ROP_LSP_REORDCMP_V, ROP_LSP_REORDCMP_V.desired)
     `RAL_FIELD_CP_1(ROP_LSP_REORDCMP_V, ROP_LSP_REORDCMP_V.desired, 0)
     `RAL_FIELD_CP(ROP_LSP_REORDCMP_NOT_RDY, ROP_LSP_REORDCMP_NOT_RDY.desired)
     `RAL_FIELD_CP_1(ROP_LSP_REORDCMP_NOT_RDY, ROP_LSP_REORDCMP_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(CHP_LSP_CMP_V, CHP_LSP_CMP_V.desired)
     `RAL_FIELD_CP_1(CHP_LSP_CMP_V, CHP_LSP_CMP_V.desired, 0)
     `RAL_FIELD_CP(CHP_LSP_CMP_NOT_RDY, CHP_LSP_CMP_NOT_RDY.desired)
     `RAL_FIELD_CP_1(CHP_LSP_CMP_NOT_RDY, CHP_LSP_CMP_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(CHP_LSP_TOK_V, CHP_LSP_TOK_V.desired)
     `RAL_FIELD_CP_1(CHP_LSP_TOK_V, CHP_LSP_TOK_V.desired, 0)
     `RAL_FIELD_CP(CHP_LSP_TOK_NOT_RDY, CHP_LSP_TOK_NOT_RDY.desired)
     `RAL_FIELD_CP_1(CHP_LSP_TOK_NOT_RDY, CHP_LSP_TOK_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(INT_SER_CLOCK_NOT_IDLE, INT_SER_CLOCK_NOT_IDLE.desired)
     `RAL_FIELD_CP_1(INT_SER_CLOCK_NOT_IDLE, INT_SER_CLOCK_NOT_IDLE.desired, 0)
     `RAL_FIELD_CP(AQED_CLOCK_NOT_IDLE, AQED_CLOCK_NOT_IDLE.desired)
     `RAL_FIELD_CP_1(AQED_CLOCK_NOT_IDLE, AQED_CLOCK_NOT_IDLE.desired, 0)
     `RAL_FIELD_CP(AP_CLOCK_NOT_IDLE, AP_CLOCK_NOT_IDLE.desired)
     `RAL_FIELD_CP_1(AP_CLOCK_NOT_IDLE, AP_CLOCK_NOT_IDLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.desired, 0)
     `RAL_FIELD_CP(LSP_DP_SCH_RORPLY_V, LSP_DP_SCH_RORPLY_V.desired)
     `RAL_FIELD_CP_1(LSP_DP_SCH_RORPLY_V, LSP_DP_SCH_RORPLY_V.desired, 0)
     `RAL_FIELD_CP(LSP_DP_SCH_RORPLY_NOT_RDY, LSP_DP_SCH_RORPLY_NOT_RDY.desired)
     `RAL_FIELD_CP_1(LSP_DP_SCH_RORPLY_NOT_RDY, LSP_DP_SCH_RORPLY_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_RORPLY_V, LSP_NALB_SCH_RORPLY_V.desired)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_RORPLY_V, LSP_NALB_SCH_RORPLY_V.desired, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_RORPLY_NOT_RDY, LSP_NALB_SCH_RORPLY_NOT_RDY.desired)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_RORPLY_NOT_RDY, LSP_NALB_SCH_RORPLY_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(LSP_DP_SCH_DIR_V, LSP_DP_SCH_DIR_V.desired)
     `RAL_FIELD_CP_1(LSP_DP_SCH_DIR_V, LSP_DP_SCH_DIR_V.desired, 0)
     `RAL_FIELD_CP(LSP_DP_SCH_DIR_NOT_RDY, LSP_DP_SCH_DIR_NOT_RDY.desired)
     `RAL_FIELD_CP_1(LSP_DP_SCH_DIR_NOT_RDY, LSP_DP_SCH_DIR_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_ATQ_V, LSP_NALB_SCH_ATQ_V.desired)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_ATQ_V, LSP_NALB_SCH_ATQ_V.desired, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_ATQ_NOT_RDY, LSP_NALB_SCH_ATQ_NOT_RDY.desired)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_ATQ_NOT_RDY, LSP_NALB_SCH_ATQ_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_UO_V, LSP_NALB_SCH_UO_V.desired)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_UO_V, LSP_NALB_SCH_UO_V.desired, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_UO_NOT_RDY, LSP_NALB_SCH_UO_NOT_RDY.desired)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_UO_NOT_RDY, LSP_NALB_SCH_UO_NOT_RDY.desired, 0)
     `RAL_FIELD_CP(LSP_AP_ATM_V, LSP_AP_ATM_V.desired)
     `RAL_FIELD_CP_1(LSP_AP_ATM_V, LSP_AP_ATM_V.desired, 0)
     `RAL_FIELD_CP(LSP_AP_ATM_NOT_RDY, LSP_AP_ATM_NOT_RDY.desired)
     `RAL_FIELD_CP_1(LSP_AP_ATM_NOT_RDY, LSP_AP_ATM_NOT_RDY.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(AQED_LSP_SENT_TO_CQ_V, AQED_LSP_SENT_TO_CQ_V.actual)
     `RAL_FIELD_CP_1(AQED_LSP_SENT_TO_CQ_V, AQED_LSP_SENT_TO_CQ_V.actual, 0)
     `RAL_FIELD_CP(AQED_LSP_SENT_TO_CQ_NOT_RDY, AQED_LSP_SENT_TO_CQ_NOT_RDY.actual)
     `RAL_FIELD_CP_1(AQED_LSP_SENT_TO_CQ_NOT_RDY, AQED_LSP_SENT_TO_CQ_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(DP_LSP_ENQ_RORPLY_V, DP_LSP_ENQ_RORPLY_V.actual)
     `RAL_FIELD_CP_1(DP_LSP_ENQ_RORPLY_V, DP_LSP_ENQ_RORPLY_V.actual, 0)
     `RAL_FIELD_CP(DP_LSP_ENQ_RORPLY_NOT_RDY, DP_LSP_ENQ_RORPLY_NOT_RDY.actual)
     `RAL_FIELD_CP_1(DP_LSP_ENQ_RORPLY_NOT_RDY, DP_LSP_ENQ_RORPLY_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(DP_LSP_ENQ_DIR_V, DP_LSP_ENQ_DIR_V.actual)
     `RAL_FIELD_CP_1(DP_LSP_ENQ_DIR_V, DP_LSP_ENQ_DIR_V.actual, 0)
     `RAL_FIELD_CP(DP_LSP_ENQ_DIR_NOT_RDY, DP_LSP_ENQ_DIR_NOT_RDY.actual)
     `RAL_FIELD_CP_1(DP_LSP_ENQ_DIR_NOT_RDY, DP_LSP_ENQ_DIR_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(NALB_LSP_ENQ_RORPLY_V, NALB_LSP_ENQ_RORPLY_V.actual)
     `RAL_FIELD_CP_1(NALB_LSP_ENQ_RORPLY_V, NALB_LSP_ENQ_RORPLY_V.actual, 0)
     `RAL_FIELD_CP(NALB_LSP_ENQ_RORPLY_NOT_RDY, NALB_LSP_ENQ_RORPLY_NOT_RDY.actual)
     `RAL_FIELD_CP_1(NALB_LSP_ENQ_RORPLY_NOT_RDY, NALB_LSP_ENQ_RORPLY_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(NALB_LSP_ENQ_LDB_V, NALB_LSP_ENQ_LDB_V.actual)
     `RAL_FIELD_CP_1(NALB_LSP_ENQ_LDB_V, NALB_LSP_ENQ_LDB_V.actual, 0)
     `RAL_FIELD_CP(NALB_LSP_ENQ_LDB_NOT_RDY, NALB_LSP_ENQ_LDB_NOT_RDY.actual)
     `RAL_FIELD_CP_1(NALB_LSP_ENQ_LDB_NOT_RDY, NALB_LSP_ENQ_LDB_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(ROP_LSP_REORDCMP_V, ROP_LSP_REORDCMP_V.actual)
     `RAL_FIELD_CP_1(ROP_LSP_REORDCMP_V, ROP_LSP_REORDCMP_V.actual, 0)
     `RAL_FIELD_CP(ROP_LSP_REORDCMP_NOT_RDY, ROP_LSP_REORDCMP_NOT_RDY.actual)
     `RAL_FIELD_CP_1(ROP_LSP_REORDCMP_NOT_RDY, ROP_LSP_REORDCMP_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(CHP_LSP_CMP_V, CHP_LSP_CMP_V.actual)
     `RAL_FIELD_CP_1(CHP_LSP_CMP_V, CHP_LSP_CMP_V.actual, 0)
     `RAL_FIELD_CP(CHP_LSP_CMP_NOT_RDY, CHP_LSP_CMP_NOT_RDY.actual)
     `RAL_FIELD_CP_1(CHP_LSP_CMP_NOT_RDY, CHP_LSP_CMP_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(CHP_LSP_TOK_V, CHP_LSP_TOK_V.actual)
     `RAL_FIELD_CP_1(CHP_LSP_TOK_V, CHP_LSP_TOK_V.actual, 0)
     `RAL_FIELD_CP(CHP_LSP_TOK_NOT_RDY, CHP_LSP_TOK_NOT_RDY.actual)
     `RAL_FIELD_CP_1(CHP_LSP_TOK_NOT_RDY, CHP_LSP_TOK_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(INT_SER_CLOCK_NOT_IDLE, INT_SER_CLOCK_NOT_IDLE.actual)
     `RAL_FIELD_CP_1(INT_SER_CLOCK_NOT_IDLE, INT_SER_CLOCK_NOT_IDLE.actual, 0)
     `RAL_FIELD_CP(AQED_CLOCK_NOT_IDLE, AQED_CLOCK_NOT_IDLE.actual)
     `RAL_FIELD_CP_1(AQED_CLOCK_NOT_IDLE, AQED_CLOCK_NOT_IDLE.actual, 0)
     `RAL_FIELD_CP(AP_CLOCK_NOT_IDLE, AP_CLOCK_NOT_IDLE.actual)
     `RAL_FIELD_CP_1(AP_CLOCK_NOT_IDLE, AP_CLOCK_NOT_IDLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_1(RSVZ0, RSVZ0.actual, 0)
     `RAL_FIELD_CP(LSP_DP_SCH_RORPLY_V, LSP_DP_SCH_RORPLY_V.actual)
     `RAL_FIELD_CP_1(LSP_DP_SCH_RORPLY_V, LSP_DP_SCH_RORPLY_V.actual, 0)
     `RAL_FIELD_CP(LSP_DP_SCH_RORPLY_NOT_RDY, LSP_DP_SCH_RORPLY_NOT_RDY.actual)
     `RAL_FIELD_CP_1(LSP_DP_SCH_RORPLY_NOT_RDY, LSP_DP_SCH_RORPLY_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_RORPLY_V, LSP_NALB_SCH_RORPLY_V.actual)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_RORPLY_V, LSP_NALB_SCH_RORPLY_V.actual, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_RORPLY_NOT_RDY, LSP_NALB_SCH_RORPLY_NOT_RDY.actual)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_RORPLY_NOT_RDY, LSP_NALB_SCH_RORPLY_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(LSP_DP_SCH_DIR_V, LSP_DP_SCH_DIR_V.actual)
     `RAL_FIELD_CP_1(LSP_DP_SCH_DIR_V, LSP_DP_SCH_DIR_V.actual, 0)
     `RAL_FIELD_CP(LSP_DP_SCH_DIR_NOT_RDY, LSP_DP_SCH_DIR_NOT_RDY.actual)
     `RAL_FIELD_CP_1(LSP_DP_SCH_DIR_NOT_RDY, LSP_DP_SCH_DIR_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_ATQ_V, LSP_NALB_SCH_ATQ_V.actual)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_ATQ_V, LSP_NALB_SCH_ATQ_V.actual, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_ATQ_NOT_RDY, LSP_NALB_SCH_ATQ_NOT_RDY.actual)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_ATQ_NOT_RDY, LSP_NALB_SCH_ATQ_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_UO_V, LSP_NALB_SCH_UO_V.actual)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_UO_V, LSP_NALB_SCH_UO_V.actual, 0)
     `RAL_FIELD_CP(LSP_NALB_SCH_UO_NOT_RDY, LSP_NALB_SCH_UO_NOT_RDY.actual)
     `RAL_FIELD_CP_1(LSP_NALB_SCH_UO_NOT_RDY, LSP_NALB_SCH_UO_NOT_RDY.actual, 0)
     `RAL_FIELD_CP(LSP_AP_ATM_V, LSP_AP_ATM_V.actual)
     `RAL_FIELD_CP_1(LSP_AP_ATM_V, LSP_AP_ATM_V.actual, 0)
     `RAL_FIELD_CP(LSP_AP_ATM_NOT_RDY, LSP_AP_ATM_NOT_RDY.actual)
     `RAL_FIELD_CP_1(LSP_AP_ATM_NOT_RDY, LSP_AP_ATM_NOT_RDY.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    AQED_LSP_SENT_TO_CQ_V = new("AQED_LSP_SENT_TO_CQ_V", "RO/V", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[0:0]"});
    AQED_LSP_SENT_TO_CQ_V.set_powerwell("vcccfn_gated");
    AQED_LSP_SENT_TO_CQ_V.set_rand_mode(0);
   AQED_LSP_SENT_TO_CQ_V.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_LSP_SENT_TO_CQ_V.set_logical_path("HQMID");
    void'(add_field( AQED_LSP_SENT_TO_CQ_V ));

    AQED_LSP_SENT_TO_CQ_NOT_RDY = new("AQED_LSP_SENT_TO_CQ_NOT_RDY", "RO/V", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[1:1]"});
    AQED_LSP_SENT_TO_CQ_NOT_RDY.set_powerwell("vcccfn_gated");
    AQED_LSP_SENT_TO_CQ_NOT_RDY.set_rand_mode(0);
   AQED_LSP_SENT_TO_CQ_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_LSP_SENT_TO_CQ_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( AQED_LSP_SENT_TO_CQ_NOT_RDY ));

    DP_LSP_ENQ_RORPLY_V = new("DP_LSP_ENQ_RORPLY_V", "RO/V", 1, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[2:2]"});
    DP_LSP_ENQ_RORPLY_V.set_powerwell("vcccfn_gated");
    DP_LSP_ENQ_RORPLY_V.set_rand_mode(0);
   DP_LSP_ENQ_RORPLY_V.set_reset_signame("hqm_inp_gated_rst_n");
    DP_LSP_ENQ_RORPLY_V.set_logical_path("HQMID");
    void'(add_field( DP_LSP_ENQ_RORPLY_V ));

    DP_LSP_ENQ_RORPLY_NOT_RDY = new("DP_LSP_ENQ_RORPLY_NOT_RDY", "RO/V", 1, 3, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[3:3]"});
    DP_LSP_ENQ_RORPLY_NOT_RDY.set_powerwell("vcccfn_gated");
    DP_LSP_ENQ_RORPLY_NOT_RDY.set_rand_mode(0);
   DP_LSP_ENQ_RORPLY_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    DP_LSP_ENQ_RORPLY_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( DP_LSP_ENQ_RORPLY_NOT_RDY ));

    DP_LSP_ENQ_DIR_V = new("DP_LSP_ENQ_DIR_V", "RO/V", 1, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[4:4]"});
    DP_LSP_ENQ_DIR_V.set_powerwell("vcccfn_gated");
    DP_LSP_ENQ_DIR_V.set_rand_mode(0);
   DP_LSP_ENQ_DIR_V.set_reset_signame("hqm_inp_gated_rst_n");
    DP_LSP_ENQ_DIR_V.set_logical_path("HQMID");
    void'(add_field( DP_LSP_ENQ_DIR_V ));

    DP_LSP_ENQ_DIR_NOT_RDY = new("DP_LSP_ENQ_DIR_NOT_RDY", "RO/V", 1, 5, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[5:5]"});
    DP_LSP_ENQ_DIR_NOT_RDY.set_powerwell("vcccfn_gated");
    DP_LSP_ENQ_DIR_NOT_RDY.set_rand_mode(0);
   DP_LSP_ENQ_DIR_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    DP_LSP_ENQ_DIR_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( DP_LSP_ENQ_DIR_NOT_RDY ));

    NALB_LSP_ENQ_RORPLY_V = new("NALB_LSP_ENQ_RORPLY_V", "RO/V", 1, 6, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[6:6]"});
    NALB_LSP_ENQ_RORPLY_V.set_powerwell("vcccfn_gated");
    NALB_LSP_ENQ_RORPLY_V.set_rand_mode(0);
   NALB_LSP_ENQ_RORPLY_V.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_LSP_ENQ_RORPLY_V.set_logical_path("HQMID");
    void'(add_field( NALB_LSP_ENQ_RORPLY_V ));

    NALB_LSP_ENQ_RORPLY_NOT_RDY = new("NALB_LSP_ENQ_RORPLY_NOT_RDY", "RO/V", 1, 7, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[7:7]"});
    NALB_LSP_ENQ_RORPLY_NOT_RDY.set_powerwell("vcccfn_gated");
    NALB_LSP_ENQ_RORPLY_NOT_RDY.set_rand_mode(0);
   NALB_LSP_ENQ_RORPLY_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_LSP_ENQ_RORPLY_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( NALB_LSP_ENQ_RORPLY_NOT_RDY ));

    NALB_LSP_ENQ_LDB_V = new("NALB_LSP_ENQ_LDB_V", "RO/V", 1, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[8:8]"});
    NALB_LSP_ENQ_LDB_V.set_powerwell("vcccfn_gated");
    NALB_LSP_ENQ_LDB_V.set_rand_mode(0);
   NALB_LSP_ENQ_LDB_V.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_LSP_ENQ_LDB_V.set_logical_path("HQMID");
    void'(add_field( NALB_LSP_ENQ_LDB_V ));

    NALB_LSP_ENQ_LDB_NOT_RDY = new("NALB_LSP_ENQ_LDB_NOT_RDY", "RO/V", 1, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[9:9]"});
    NALB_LSP_ENQ_LDB_NOT_RDY.set_powerwell("vcccfn_gated");
    NALB_LSP_ENQ_LDB_NOT_RDY.set_rand_mode(0);
   NALB_LSP_ENQ_LDB_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    NALB_LSP_ENQ_LDB_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( NALB_LSP_ENQ_LDB_NOT_RDY ));

    ROP_LSP_REORDCMP_V = new("ROP_LSP_REORDCMP_V", "RO/V", 1, 10, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[10:10]"});
    ROP_LSP_REORDCMP_V.set_powerwell("vcccfn_gated");
    ROP_LSP_REORDCMP_V.set_rand_mode(0);
   ROP_LSP_REORDCMP_V.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_LSP_REORDCMP_V.set_logical_path("HQMID");
    void'(add_field( ROP_LSP_REORDCMP_V ));

    ROP_LSP_REORDCMP_NOT_RDY = new("ROP_LSP_REORDCMP_NOT_RDY", "RO/V", 1, 11, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[11:11]"});
    ROP_LSP_REORDCMP_NOT_RDY.set_powerwell("vcccfn_gated");
    ROP_LSP_REORDCMP_NOT_RDY.set_rand_mode(0);
   ROP_LSP_REORDCMP_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    ROP_LSP_REORDCMP_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( ROP_LSP_REORDCMP_NOT_RDY ));

    CHP_LSP_CMP_V = new("CHP_LSP_CMP_V", "RO/V", 1, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[12:12]"});
    CHP_LSP_CMP_V.set_powerwell("vcccfn_gated");
    CHP_LSP_CMP_V.set_rand_mode(0);
   CHP_LSP_CMP_V.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_LSP_CMP_V.set_logical_path("HQMID");
    void'(add_field( CHP_LSP_CMP_V ));

    CHP_LSP_CMP_NOT_RDY = new("CHP_LSP_CMP_NOT_RDY", "RO/V", 1, 13, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[13:13]"});
    CHP_LSP_CMP_NOT_RDY.set_powerwell("vcccfn_gated");
    CHP_LSP_CMP_NOT_RDY.set_rand_mode(0);
   CHP_LSP_CMP_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_LSP_CMP_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( CHP_LSP_CMP_NOT_RDY ));

    CHP_LSP_TOK_V = new("CHP_LSP_TOK_V", "RO/V", 1, 14, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[14:14]"});
    CHP_LSP_TOK_V.set_powerwell("vcccfn_gated");
    CHP_LSP_TOK_V.set_rand_mode(0);
   CHP_LSP_TOK_V.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_LSP_TOK_V.set_logical_path("HQMID");
    void'(add_field( CHP_LSP_TOK_V ));

    CHP_LSP_TOK_NOT_RDY = new("CHP_LSP_TOK_NOT_RDY", "RO/V", 1, 15, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[15:15]"});
    CHP_LSP_TOK_NOT_RDY.set_powerwell("vcccfn_gated");
    CHP_LSP_TOK_NOT_RDY.set_rand_mode(0);
   CHP_LSP_TOK_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    CHP_LSP_TOK_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( CHP_LSP_TOK_NOT_RDY ));

    INT_SER_CLOCK_NOT_IDLE = new("INT_SER_CLOCK_NOT_IDLE", "RO/V", 1, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[16:16]"});
    INT_SER_CLOCK_NOT_IDLE.set_powerwell("vcccfn_gated");
    INT_SER_CLOCK_NOT_IDLE.set_rand_mode(0);
   INT_SER_CLOCK_NOT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    INT_SER_CLOCK_NOT_IDLE.set_logical_path("HQMID");
    void'(add_field( INT_SER_CLOCK_NOT_IDLE ));

    AQED_CLOCK_NOT_IDLE = new("AQED_CLOCK_NOT_IDLE", "RO/V", 1, 17, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[17:17]"});
    AQED_CLOCK_NOT_IDLE.set_powerwell("vcccfn_gated");
    AQED_CLOCK_NOT_IDLE.set_rand_mode(0);
   AQED_CLOCK_NOT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    AQED_CLOCK_NOT_IDLE.set_logical_path("HQMID");
    void'(add_field( AQED_CLOCK_NOT_IDLE ));

    AP_CLOCK_NOT_IDLE = new("AP_CLOCK_NOT_IDLE", "RO/V", 1, 18, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[18:18]"});
    AP_CLOCK_NOT_IDLE.set_powerwell("vcccfn_gated");
    AP_CLOCK_NOT_IDLE.set_rand_mode(0);
   AP_CLOCK_NOT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    AP_CLOCK_NOT_IDLE.set_logical_path("HQMID");
    void'(add_field( AP_CLOCK_NOT_IDLE ));

    RSVZ0 = new("RSVZ0", "RO/V", 1, 19, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[19:19]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    LSP_DP_SCH_RORPLY_V = new("LSP_DP_SCH_RORPLY_V", "RO/V", 1, 20, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[20:20]"});
    LSP_DP_SCH_RORPLY_V.set_powerwell("vcccfn_gated");
    LSP_DP_SCH_RORPLY_V.set_rand_mode(0);
   LSP_DP_SCH_RORPLY_V.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_DP_SCH_RORPLY_V.set_logical_path("HQMID");
    void'(add_field( LSP_DP_SCH_RORPLY_V ));

    LSP_DP_SCH_RORPLY_NOT_RDY = new("LSP_DP_SCH_RORPLY_NOT_RDY", "RO/V", 1, 21, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[21:21]"});
    LSP_DP_SCH_RORPLY_NOT_RDY.set_powerwell("vcccfn_gated");
    LSP_DP_SCH_RORPLY_NOT_RDY.set_rand_mode(0);
   LSP_DP_SCH_RORPLY_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_DP_SCH_RORPLY_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( LSP_DP_SCH_RORPLY_NOT_RDY ));

    LSP_NALB_SCH_RORPLY_V = new("LSP_NALB_SCH_RORPLY_V", "RO/V", 1, 22, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[22:22]"});
    LSP_NALB_SCH_RORPLY_V.set_powerwell("vcccfn_gated");
    LSP_NALB_SCH_RORPLY_V.set_rand_mode(0);
   LSP_NALB_SCH_RORPLY_V.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_NALB_SCH_RORPLY_V.set_logical_path("HQMID");
    void'(add_field( LSP_NALB_SCH_RORPLY_V ));

    LSP_NALB_SCH_RORPLY_NOT_RDY = new("LSP_NALB_SCH_RORPLY_NOT_RDY", "RO/V", 1, 23, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[23:23]"});
    LSP_NALB_SCH_RORPLY_NOT_RDY.set_powerwell("vcccfn_gated");
    LSP_NALB_SCH_RORPLY_NOT_RDY.set_rand_mode(0);
   LSP_NALB_SCH_RORPLY_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_NALB_SCH_RORPLY_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( LSP_NALB_SCH_RORPLY_NOT_RDY ));

    LSP_DP_SCH_DIR_V = new("LSP_DP_SCH_DIR_V", "RO/V", 1, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[24:24]"});
    LSP_DP_SCH_DIR_V.set_powerwell("vcccfn_gated");
    LSP_DP_SCH_DIR_V.set_rand_mode(0);
   LSP_DP_SCH_DIR_V.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_DP_SCH_DIR_V.set_logical_path("HQMID");
    void'(add_field( LSP_DP_SCH_DIR_V ));

    LSP_DP_SCH_DIR_NOT_RDY = new("LSP_DP_SCH_DIR_NOT_RDY", "RO/V", 1, 25, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[25:25]"});
    LSP_DP_SCH_DIR_NOT_RDY.set_powerwell("vcccfn_gated");
    LSP_DP_SCH_DIR_NOT_RDY.set_rand_mode(0);
   LSP_DP_SCH_DIR_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_DP_SCH_DIR_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( LSP_DP_SCH_DIR_NOT_RDY ));

    LSP_NALB_SCH_ATQ_V = new("LSP_NALB_SCH_ATQ_V", "RO/V", 1, 26, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[26:26]"});
    LSP_NALB_SCH_ATQ_V.set_powerwell("vcccfn_gated");
    LSP_NALB_SCH_ATQ_V.set_rand_mode(0);
   LSP_NALB_SCH_ATQ_V.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_NALB_SCH_ATQ_V.set_logical_path("HQMID");
    void'(add_field( LSP_NALB_SCH_ATQ_V ));

    LSP_NALB_SCH_ATQ_NOT_RDY = new("LSP_NALB_SCH_ATQ_NOT_RDY", "RO/V", 1, 27, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[27:27]"});
    LSP_NALB_SCH_ATQ_NOT_RDY.set_powerwell("vcccfn_gated");
    LSP_NALB_SCH_ATQ_NOT_RDY.set_rand_mode(0);
   LSP_NALB_SCH_ATQ_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_NALB_SCH_ATQ_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( LSP_NALB_SCH_ATQ_NOT_RDY ));

    LSP_NALB_SCH_UO_V = new("LSP_NALB_SCH_UO_V", "RO/V", 1, 28, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[28:28]"});
    LSP_NALB_SCH_UO_V.set_powerwell("vcccfn_gated");
    LSP_NALB_SCH_UO_V.set_rand_mode(0);
   LSP_NALB_SCH_UO_V.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_NALB_SCH_UO_V.set_logical_path("HQMID");
    void'(add_field( LSP_NALB_SCH_UO_V ));

    LSP_NALB_SCH_UO_NOT_RDY = new("LSP_NALB_SCH_UO_NOT_RDY", "RO/V", 1, 29, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[29:29]"});
    LSP_NALB_SCH_UO_NOT_RDY.set_powerwell("vcccfn_gated");
    LSP_NALB_SCH_UO_NOT_RDY.set_rand_mode(0);
   LSP_NALB_SCH_UO_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_NALB_SCH_UO_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( LSP_NALB_SCH_UO_NOT_RDY ));

    LSP_AP_ATM_V = new("LSP_AP_ATM_V", "RO/V", 1, 30, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[30:30]"});
    LSP_AP_ATM_V.set_powerwell("vcccfn_gated");
    LSP_AP_ATM_V.set_rand_mode(0);
   LSP_AP_ATM_V.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_AP_ATM_V.set_logical_path("HQMID");
    void'(add_field( LSP_AP_ATM_V ));

    LSP_AP_ATM_NOT_RDY = new("LSP_AP_ATM_NOT_RDY", "RO/V", 1, 31, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[31:31]"});
    LSP_AP_ATM_NOT_RDY.set_powerwell("vcccfn_gated");
    LSP_AP_ATM_NOT_RDY.set_rand_mode(0);
   LSP_AP_ATM_NOT_RDY.set_reset_signame("hqm_inp_gated_rst_n");
    LSP_AP_ATM_NOT_RDY.set_logical_path("HQMID");
    void'(add_field( LSP_AP_ATM_NOT_RDY ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_INTERFACE_STATUS_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_INTERFACE_STATUS_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P1_LDB_HOLD;
  sla_ral_field P2_LDB_HOLD;
  sla_ral_field P3_LDB_HOLD;
  sla_ral_field P4_LDB_HOLD;
  sla_ral_field P5_LDB_HOLD;
  sla_ral_field P6_LDB_HOLD;
  sla_ral_field P7_LDB_HOLD;
  sla_ral_field P8_LDB_HOLD;
  sla_ral_field P9_LDB_HOLD;
  sla_ral_field P1_LDB_NALB_CRED_HOLD;
  sla_ral_field P1_LDB_ATM_CRED_HOLD;
  sla_ral_field P4_LDB_PIPE_HOLD;
  sla_ral_field P4_LDB_SCH_HOLD;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P1_LDB_HOLD, P1_LDB_HOLD.desired)
     `RAL_FIELD_CP_1(P1_LDB_HOLD, P1_LDB_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_LDB_HOLD, P2_LDB_HOLD.desired)
     `RAL_FIELD_CP_1(P2_LDB_HOLD, P2_LDB_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_LDB_HOLD, P3_LDB_HOLD.desired)
     `RAL_FIELD_CP_1(P3_LDB_HOLD, P3_LDB_HOLD.desired, 0)
     `RAL_FIELD_CP(P4_LDB_HOLD, P4_LDB_HOLD.desired)
     `RAL_FIELD_CP_1(P4_LDB_HOLD, P4_LDB_HOLD.desired, 0)
     `RAL_FIELD_CP(P5_LDB_HOLD, P5_LDB_HOLD.desired)
     `RAL_FIELD_CP_1(P5_LDB_HOLD, P5_LDB_HOLD.desired, 0)
     `RAL_FIELD_CP(P6_LDB_HOLD, P6_LDB_HOLD.desired)
     `RAL_FIELD_CP_1(P6_LDB_HOLD, P6_LDB_HOLD.desired, 0)
     `RAL_FIELD_CP(P7_LDB_HOLD, P7_LDB_HOLD.desired)
     `RAL_FIELD_CP_1(P7_LDB_HOLD, P7_LDB_HOLD.desired, 0)
     `RAL_FIELD_CP(P8_LDB_HOLD, P8_LDB_HOLD.desired)
     `RAL_FIELD_CP_1(P8_LDB_HOLD, P8_LDB_HOLD.desired, 0)
     `RAL_FIELD_CP(P9_LDB_HOLD, P9_LDB_HOLD.desired)
     `RAL_FIELD_CP_1(P9_LDB_HOLD, P9_LDB_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_LDB_NALB_CRED_HOLD, P1_LDB_NALB_CRED_HOLD.desired)
     `RAL_FIELD_CP_1(P1_LDB_NALB_CRED_HOLD, P1_LDB_NALB_CRED_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_LDB_ATM_CRED_HOLD, P1_LDB_ATM_CRED_HOLD.desired)
     `RAL_FIELD_CP_1(P1_LDB_ATM_CRED_HOLD, P1_LDB_ATM_CRED_HOLD.desired, 0)
     `RAL_FIELD_CP(P4_LDB_PIPE_HOLD, P4_LDB_PIPE_HOLD.desired)
     `RAL_FIELD_CP_1(P4_LDB_PIPE_HOLD, P4_LDB_PIPE_HOLD.desired, 0)
     `RAL_FIELD_CP(P4_LDB_SCH_HOLD, P4_LDB_SCH_HOLD.desired)
     `RAL_FIELD_CP_1(P4_LDB_SCH_HOLD, P4_LDB_SCH_HOLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P1_LDB_HOLD, P1_LDB_HOLD.actual)
     `RAL_FIELD_CP_1(P1_LDB_HOLD, P1_LDB_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_LDB_HOLD, P2_LDB_HOLD.actual)
     `RAL_FIELD_CP_1(P2_LDB_HOLD, P2_LDB_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_LDB_HOLD, P3_LDB_HOLD.actual)
     `RAL_FIELD_CP_1(P3_LDB_HOLD, P3_LDB_HOLD.actual, 0)
     `RAL_FIELD_CP(P4_LDB_HOLD, P4_LDB_HOLD.actual)
     `RAL_FIELD_CP_1(P4_LDB_HOLD, P4_LDB_HOLD.actual, 0)
     `RAL_FIELD_CP(P5_LDB_HOLD, P5_LDB_HOLD.actual)
     `RAL_FIELD_CP_1(P5_LDB_HOLD, P5_LDB_HOLD.actual, 0)
     `RAL_FIELD_CP(P6_LDB_HOLD, P6_LDB_HOLD.actual)
     `RAL_FIELD_CP_1(P6_LDB_HOLD, P6_LDB_HOLD.actual, 0)
     `RAL_FIELD_CP(P7_LDB_HOLD, P7_LDB_HOLD.actual)
     `RAL_FIELD_CP_1(P7_LDB_HOLD, P7_LDB_HOLD.actual, 0)
     `RAL_FIELD_CP(P8_LDB_HOLD, P8_LDB_HOLD.actual)
     `RAL_FIELD_CP_1(P8_LDB_HOLD, P8_LDB_HOLD.actual, 0)
     `RAL_FIELD_CP(P9_LDB_HOLD, P9_LDB_HOLD.actual)
     `RAL_FIELD_CP_1(P9_LDB_HOLD, P9_LDB_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_LDB_NALB_CRED_HOLD, P1_LDB_NALB_CRED_HOLD.actual)
     `RAL_FIELD_CP_1(P1_LDB_NALB_CRED_HOLD, P1_LDB_NALB_CRED_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_LDB_ATM_CRED_HOLD, P1_LDB_ATM_CRED_HOLD.actual)
     `RAL_FIELD_CP_1(P1_LDB_ATM_CRED_HOLD, P1_LDB_ATM_CRED_HOLD.actual, 0)
     `RAL_FIELD_CP(P4_LDB_PIPE_HOLD, P4_LDB_PIPE_HOLD.actual)
     `RAL_FIELD_CP_1(P4_LDB_PIPE_HOLD, P4_LDB_PIPE_HOLD.actual, 0)
     `RAL_FIELD_CP(P4_LDB_SCH_HOLD, P4_LDB_SCH_HOLD.actual)
     `RAL_FIELD_CP_1(P4_LDB_SCH_HOLD, P4_LDB_SCH_HOLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P1_LDB_HOLD = new("P1_LDB_HOLD", "RO/V", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[1:1]"});
    P1_LDB_HOLD.set_powerwell("vcccfn_gated");
    P1_LDB_HOLD.set_rand_mode(0);
   P1_LDB_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_LDB_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_LDB_HOLD ));

    P2_LDB_HOLD = new("P2_LDB_HOLD", "RO/V", 1, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[2:2]"});
    P2_LDB_HOLD.set_powerwell("vcccfn_gated");
    P2_LDB_HOLD.set_rand_mode(0);
   P2_LDB_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_LDB_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_LDB_HOLD ));

    P3_LDB_HOLD = new("P3_LDB_HOLD", "RO/V", 1, 3, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[3:3]"});
    P3_LDB_HOLD.set_powerwell("vcccfn_gated");
    P3_LDB_HOLD.set_rand_mode(0);
   P3_LDB_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_LDB_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_LDB_HOLD ));

    P4_LDB_HOLD = new("P4_LDB_HOLD", "RO/V", 1, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[4:4]"});
    P4_LDB_HOLD.set_powerwell("vcccfn_gated");
    P4_LDB_HOLD.set_rand_mode(0);
   P4_LDB_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P4_LDB_HOLD.set_logical_path("HQMID");
    void'(add_field( P4_LDB_HOLD ));

    P5_LDB_HOLD = new("P5_LDB_HOLD", "RO/V", 1, 5, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[5:5]"});
    P5_LDB_HOLD.set_powerwell("vcccfn_gated");
    P5_LDB_HOLD.set_rand_mode(0);
   P5_LDB_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P5_LDB_HOLD.set_logical_path("HQMID");
    void'(add_field( P5_LDB_HOLD ));

    P6_LDB_HOLD = new("P6_LDB_HOLD", "RO/V", 1, 6, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[6:6]"});
    P6_LDB_HOLD.set_powerwell("vcccfn_gated");
    P6_LDB_HOLD.set_rand_mode(0);
   P6_LDB_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P6_LDB_HOLD.set_logical_path("HQMID");
    void'(add_field( P6_LDB_HOLD ));

    P7_LDB_HOLD = new("P7_LDB_HOLD", "RO/V", 1, 7, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[7:7]"});
    P7_LDB_HOLD.set_powerwell("vcccfn_gated");
    P7_LDB_HOLD.set_rand_mode(0);
   P7_LDB_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P7_LDB_HOLD.set_logical_path("HQMID");
    void'(add_field( P7_LDB_HOLD ));

    P8_LDB_HOLD = new("P8_LDB_HOLD", "RO/V", 1, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[8:8]"});
    P8_LDB_HOLD.set_powerwell("vcccfn_gated");
    P8_LDB_HOLD.set_rand_mode(0);
   P8_LDB_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P8_LDB_HOLD.set_logical_path("HQMID");
    void'(add_field( P8_LDB_HOLD ));

    P9_LDB_HOLD = new("P9_LDB_HOLD", "RO/V", 1, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[9:9]"});
    P9_LDB_HOLD.set_powerwell("vcccfn_gated");
    P9_LDB_HOLD.set_rand_mode(0);
   P9_LDB_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P9_LDB_HOLD.set_logical_path("HQMID");
    void'(add_field( P9_LDB_HOLD ));

    P1_LDB_NALB_CRED_HOLD = new("P1_LDB_NALB_CRED_HOLD", "RO/V", 1, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[24:24]"});
    P1_LDB_NALB_CRED_HOLD.set_powerwell("vcccfn_gated");
    P1_LDB_NALB_CRED_HOLD.set_rand_mode(0);
   P1_LDB_NALB_CRED_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_LDB_NALB_CRED_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_LDB_NALB_CRED_HOLD ));

    P1_LDB_ATM_CRED_HOLD = new("P1_LDB_ATM_CRED_HOLD", "RO/V", 1, 25, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[25:25]"});
    P1_LDB_ATM_CRED_HOLD.set_powerwell("vcccfn_gated");
    P1_LDB_ATM_CRED_HOLD.set_rand_mode(0);
   P1_LDB_ATM_CRED_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_LDB_ATM_CRED_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_LDB_ATM_CRED_HOLD ));

    P4_LDB_PIPE_HOLD = new("P4_LDB_PIPE_HOLD", "RO/V", 1, 26, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[26:26]"});
    P4_LDB_PIPE_HOLD.set_powerwell("vcccfn_gated");
    P4_LDB_PIPE_HOLD.set_rand_mode(0);
   P4_LDB_PIPE_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P4_LDB_PIPE_HOLD.set_logical_path("HQMID");
    void'(add_field( P4_LDB_PIPE_HOLD ));

    P4_LDB_SCH_HOLD = new("P4_LDB_SCH_HOLD", "RO/V", 1, 27, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[27:27]"});
    P4_LDB_SCH_HOLD.set_powerwell("vcccfn_gated");
    P4_LDB_SCH_HOLD.set_rand_mode(0);
   P4_LDB_SCH_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P4_LDB_SCH_HOLD.set_logical_path("HQMID");
    void'(add_field( P4_LDB_SCH_HOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_DIR_HOLD;
  sla_ral_field P1_DIR_HOLD;
  sla_ral_field P2_DIR_HOLD;
  sla_ral_field P3_DIR_HOLD;
  sla_ral_field P4_DIR_SCH_HOLD;
  sla_ral_field P0_ATQ_HOLD;
  sla_ral_field P1_ATQ_HOLD;
  sla_ral_field P2_ATQ_HOLD;
  sla_ral_field P3_ATQ_HOLD;
  sla_ral_field P4_ATQ_SCH_HOLD;
  sla_ral_field P0_DIRRPL_HOLD;
  sla_ral_field P1_DIRRPL_HOLD;
  sla_ral_field P2_DIRRPL_HOLD;
  sla_ral_field P3_DIRRPL_HOLD;
  sla_ral_field P4_DIRRPL_SCH_HOLD;
  sla_ral_field P0_LBRPL_HOLD;
  sla_ral_field P1_LBRPL_HOLD;
  sla_ral_field P2_LBRPL_HOLD;
  sla_ral_field P3_LBRPL_HOLD;
  sla_ral_field P4_LBRPL_SCH_HOLD;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_DIR_HOLD, P0_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P0_DIR_HOLD, P0_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_DIR_HOLD, P1_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P1_DIR_HOLD, P1_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_DIR_HOLD, P2_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P2_DIR_HOLD, P2_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_DIR_HOLD, P3_DIR_HOLD.desired)
     `RAL_FIELD_CP_1(P3_DIR_HOLD, P3_DIR_HOLD.desired, 0)
     `RAL_FIELD_CP(P4_DIR_SCH_HOLD, P4_DIR_SCH_HOLD.desired)
     `RAL_FIELD_CP_1(P4_DIR_SCH_HOLD, P4_DIR_SCH_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_ATQ_HOLD, P0_ATQ_HOLD.desired)
     `RAL_FIELD_CP_1(P0_ATQ_HOLD, P0_ATQ_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_ATQ_HOLD, P1_ATQ_HOLD.desired)
     `RAL_FIELD_CP_1(P1_ATQ_HOLD, P1_ATQ_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_ATQ_HOLD, P2_ATQ_HOLD.desired)
     `RAL_FIELD_CP_1(P2_ATQ_HOLD, P2_ATQ_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_ATQ_HOLD, P3_ATQ_HOLD.desired)
     `RAL_FIELD_CP_1(P3_ATQ_HOLD, P3_ATQ_HOLD.desired, 0)
     `RAL_FIELD_CP(P4_ATQ_SCH_HOLD, P4_ATQ_SCH_HOLD.desired)
     `RAL_FIELD_CP_1(P4_ATQ_SCH_HOLD, P4_ATQ_SCH_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_DIRRPL_HOLD, P0_DIRRPL_HOLD.desired)
     `RAL_FIELD_CP_1(P0_DIRRPL_HOLD, P0_DIRRPL_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_DIRRPL_HOLD, P1_DIRRPL_HOLD.desired)
     `RAL_FIELD_CP_1(P1_DIRRPL_HOLD, P1_DIRRPL_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_DIRRPL_HOLD, P2_DIRRPL_HOLD.desired)
     `RAL_FIELD_CP_1(P2_DIRRPL_HOLD, P2_DIRRPL_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_DIRRPL_HOLD, P3_DIRRPL_HOLD.desired)
     `RAL_FIELD_CP_1(P3_DIRRPL_HOLD, P3_DIRRPL_HOLD.desired, 0)
     `RAL_FIELD_CP(P4_DIRRPL_SCH_HOLD, P4_DIRRPL_SCH_HOLD.desired)
     `RAL_FIELD_CP_1(P4_DIRRPL_SCH_HOLD, P4_DIRRPL_SCH_HOLD.desired, 0)
     `RAL_FIELD_CP(P0_LBRPL_HOLD, P0_LBRPL_HOLD.desired)
     `RAL_FIELD_CP_1(P0_LBRPL_HOLD, P0_LBRPL_HOLD.desired, 0)
     `RAL_FIELD_CP(P1_LBRPL_HOLD, P1_LBRPL_HOLD.desired)
     `RAL_FIELD_CP_1(P1_LBRPL_HOLD, P1_LBRPL_HOLD.desired, 0)
     `RAL_FIELD_CP(P2_LBRPL_HOLD, P2_LBRPL_HOLD.desired)
     `RAL_FIELD_CP_1(P2_LBRPL_HOLD, P2_LBRPL_HOLD.desired, 0)
     `RAL_FIELD_CP(P3_LBRPL_HOLD, P3_LBRPL_HOLD.desired)
     `RAL_FIELD_CP_1(P3_LBRPL_HOLD, P3_LBRPL_HOLD.desired, 0)
     `RAL_FIELD_CP(P4_LBRPL_SCH_HOLD, P4_LBRPL_SCH_HOLD.desired)
     `RAL_FIELD_CP_1(P4_LBRPL_SCH_HOLD, P4_LBRPL_SCH_HOLD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_DIR_HOLD, P0_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P0_DIR_HOLD, P0_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_DIR_HOLD, P1_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P1_DIR_HOLD, P1_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_DIR_HOLD, P2_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P2_DIR_HOLD, P2_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_DIR_HOLD, P3_DIR_HOLD.actual)
     `RAL_FIELD_CP_1(P3_DIR_HOLD, P3_DIR_HOLD.actual, 0)
     `RAL_FIELD_CP(P4_DIR_SCH_HOLD, P4_DIR_SCH_HOLD.actual)
     `RAL_FIELD_CP_1(P4_DIR_SCH_HOLD, P4_DIR_SCH_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_ATQ_HOLD, P0_ATQ_HOLD.actual)
     `RAL_FIELD_CP_1(P0_ATQ_HOLD, P0_ATQ_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_ATQ_HOLD, P1_ATQ_HOLD.actual)
     `RAL_FIELD_CP_1(P1_ATQ_HOLD, P1_ATQ_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_ATQ_HOLD, P2_ATQ_HOLD.actual)
     `RAL_FIELD_CP_1(P2_ATQ_HOLD, P2_ATQ_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_ATQ_HOLD, P3_ATQ_HOLD.actual)
     `RAL_FIELD_CP_1(P3_ATQ_HOLD, P3_ATQ_HOLD.actual, 0)
     `RAL_FIELD_CP(P4_ATQ_SCH_HOLD, P4_ATQ_SCH_HOLD.actual)
     `RAL_FIELD_CP_1(P4_ATQ_SCH_HOLD, P4_ATQ_SCH_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_DIRRPL_HOLD, P0_DIRRPL_HOLD.actual)
     `RAL_FIELD_CP_1(P0_DIRRPL_HOLD, P0_DIRRPL_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_DIRRPL_HOLD, P1_DIRRPL_HOLD.actual)
     `RAL_FIELD_CP_1(P1_DIRRPL_HOLD, P1_DIRRPL_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_DIRRPL_HOLD, P2_DIRRPL_HOLD.actual)
     `RAL_FIELD_CP_1(P2_DIRRPL_HOLD, P2_DIRRPL_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_DIRRPL_HOLD, P3_DIRRPL_HOLD.actual)
     `RAL_FIELD_CP_1(P3_DIRRPL_HOLD, P3_DIRRPL_HOLD.actual, 0)
     `RAL_FIELD_CP(P4_DIRRPL_SCH_HOLD, P4_DIRRPL_SCH_HOLD.actual)
     `RAL_FIELD_CP_1(P4_DIRRPL_SCH_HOLD, P4_DIRRPL_SCH_HOLD.actual, 0)
     `RAL_FIELD_CP(P0_LBRPL_HOLD, P0_LBRPL_HOLD.actual)
     `RAL_FIELD_CP_1(P0_LBRPL_HOLD, P0_LBRPL_HOLD.actual, 0)
     `RAL_FIELD_CP(P1_LBRPL_HOLD, P1_LBRPL_HOLD.actual)
     `RAL_FIELD_CP_1(P1_LBRPL_HOLD, P1_LBRPL_HOLD.actual, 0)
     `RAL_FIELD_CP(P2_LBRPL_HOLD, P2_LBRPL_HOLD.actual)
     `RAL_FIELD_CP_1(P2_LBRPL_HOLD, P2_LBRPL_HOLD.actual, 0)
     `RAL_FIELD_CP(P3_LBRPL_HOLD, P3_LBRPL_HOLD.actual)
     `RAL_FIELD_CP_1(P3_LBRPL_HOLD, P3_LBRPL_HOLD.actual, 0)
     `RAL_FIELD_CP(P4_LBRPL_SCH_HOLD, P4_LBRPL_SCH_HOLD.actual)
     `RAL_FIELD_CP_1(P4_LBRPL_SCH_HOLD, P4_LBRPL_SCH_HOLD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_DIR_HOLD = new("P0_DIR_HOLD", "RO/V", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[0:0]"});
    P0_DIR_HOLD.set_powerwell("vcccfn_gated");
    P0_DIR_HOLD.set_rand_mode(0);
   P0_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_DIR_HOLD ));

    P1_DIR_HOLD = new("P1_DIR_HOLD", "RO/V", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[1:1]"});
    P1_DIR_HOLD.set_powerwell("vcccfn_gated");
    P1_DIR_HOLD.set_rand_mode(0);
   P1_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_DIR_HOLD ));

    P2_DIR_HOLD = new("P2_DIR_HOLD", "RO/V", 1, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[2:2]"});
    P2_DIR_HOLD.set_powerwell("vcccfn_gated");
    P2_DIR_HOLD.set_rand_mode(0);
   P2_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_DIR_HOLD ));

    P3_DIR_HOLD = new("P3_DIR_HOLD", "RO/V", 1, 3, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[3:3]"});
    P3_DIR_HOLD.set_powerwell("vcccfn_gated");
    P3_DIR_HOLD.set_rand_mode(0);
   P3_DIR_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_DIR_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_DIR_HOLD ));

    P4_DIR_SCH_HOLD = new("P4_DIR_SCH_HOLD", "RO/V", 1, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[4:4]"});
    P4_DIR_SCH_HOLD.set_powerwell("vcccfn_gated");
    P4_DIR_SCH_HOLD.set_rand_mode(0);
   P4_DIR_SCH_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P4_DIR_SCH_HOLD.set_logical_path("HQMID");
    void'(add_field( P4_DIR_SCH_HOLD ));

    P0_ATQ_HOLD = new("P0_ATQ_HOLD", "RO/V", 1, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[8:8]"});
    P0_ATQ_HOLD.set_powerwell("vcccfn_gated");
    P0_ATQ_HOLD.set_rand_mode(0);
   P0_ATQ_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_ATQ_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_ATQ_HOLD ));

    P1_ATQ_HOLD = new("P1_ATQ_HOLD", "RO/V", 1, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[9:9]"});
    P1_ATQ_HOLD.set_powerwell("vcccfn_gated");
    P1_ATQ_HOLD.set_rand_mode(0);
   P1_ATQ_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_ATQ_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_ATQ_HOLD ));

    P2_ATQ_HOLD = new("P2_ATQ_HOLD", "RO/V", 1, 10, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[10:10]"});
    P2_ATQ_HOLD.set_powerwell("vcccfn_gated");
    P2_ATQ_HOLD.set_rand_mode(0);
   P2_ATQ_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_ATQ_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_ATQ_HOLD ));

    P3_ATQ_HOLD = new("P3_ATQ_HOLD", "RO/V", 1, 11, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[11:11]"});
    P3_ATQ_HOLD.set_powerwell("vcccfn_gated");
    P3_ATQ_HOLD.set_rand_mode(0);
   P3_ATQ_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_ATQ_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_ATQ_HOLD ));

    P4_ATQ_SCH_HOLD = new("P4_ATQ_SCH_HOLD", "RO/V", 1, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[12:12]"});
    P4_ATQ_SCH_HOLD.set_powerwell("vcccfn_gated");
    P4_ATQ_SCH_HOLD.set_rand_mode(0);
   P4_ATQ_SCH_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P4_ATQ_SCH_HOLD.set_logical_path("HQMID");
    void'(add_field( P4_ATQ_SCH_HOLD ));

    P0_DIRRPL_HOLD = new("P0_DIRRPL_HOLD", "RO/V", 1, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[16:16]"});
    P0_DIRRPL_HOLD.set_powerwell("vcccfn_gated");
    P0_DIRRPL_HOLD.set_rand_mode(0);
   P0_DIRRPL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_DIRRPL_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_DIRRPL_HOLD ));

    P1_DIRRPL_HOLD = new("P1_DIRRPL_HOLD", "RO/V", 1, 17, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[17:17]"});
    P1_DIRRPL_HOLD.set_powerwell("vcccfn_gated");
    P1_DIRRPL_HOLD.set_rand_mode(0);
   P1_DIRRPL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_DIRRPL_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_DIRRPL_HOLD ));

    P2_DIRRPL_HOLD = new("P2_DIRRPL_HOLD", "RO/V", 1, 18, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[18:18]"});
    P2_DIRRPL_HOLD.set_powerwell("vcccfn_gated");
    P2_DIRRPL_HOLD.set_rand_mode(0);
   P2_DIRRPL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_DIRRPL_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_DIRRPL_HOLD ));

    P3_DIRRPL_HOLD = new("P3_DIRRPL_HOLD", "RO/V", 1, 19, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[19:19]"});
    P3_DIRRPL_HOLD.set_powerwell("vcccfn_gated");
    P3_DIRRPL_HOLD.set_rand_mode(0);
   P3_DIRRPL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_DIRRPL_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_DIRRPL_HOLD ));

    P4_DIRRPL_SCH_HOLD = new("P4_DIRRPL_SCH_HOLD", "RO/V", 1, 20, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[20:20]"});
    P4_DIRRPL_SCH_HOLD.set_powerwell("vcccfn_gated");
    P4_DIRRPL_SCH_HOLD.set_rand_mode(0);
   P4_DIRRPL_SCH_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P4_DIRRPL_SCH_HOLD.set_logical_path("HQMID");
    void'(add_field( P4_DIRRPL_SCH_HOLD ));

    P0_LBRPL_HOLD = new("P0_LBRPL_HOLD", "RO/V", 1, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[24:24]"});
    P0_LBRPL_HOLD.set_powerwell("vcccfn_gated");
    P0_LBRPL_HOLD.set_rand_mode(0);
   P0_LBRPL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P0_LBRPL_HOLD.set_logical_path("HQMID");
    void'(add_field( P0_LBRPL_HOLD ));

    P1_LBRPL_HOLD = new("P1_LBRPL_HOLD", "RO/V", 1, 25, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[25:25]"});
    P1_LBRPL_HOLD.set_powerwell("vcccfn_gated");
    P1_LBRPL_HOLD.set_rand_mode(0);
   P1_LBRPL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P1_LBRPL_HOLD.set_logical_path("HQMID");
    void'(add_field( P1_LBRPL_HOLD ));

    P2_LBRPL_HOLD = new("P2_LBRPL_HOLD", "RO/V", 1, 26, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[26:26]"});
    P2_LBRPL_HOLD.set_powerwell("vcccfn_gated");
    P2_LBRPL_HOLD.set_rand_mode(0);
   P2_LBRPL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P2_LBRPL_HOLD.set_logical_path("HQMID");
    void'(add_field( P2_LBRPL_HOLD ));

    P3_LBRPL_HOLD = new("P3_LBRPL_HOLD", "RO/V", 1, 27, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[27:27]"});
    P3_LBRPL_HOLD.set_powerwell("vcccfn_gated");
    P3_LBRPL_HOLD.set_rand_mode(0);
   P3_LBRPL_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P3_LBRPL_HOLD.set_logical_path("HQMID");
    void'(add_field( P3_LBRPL_HOLD ));

    P4_LBRPL_SCH_HOLD = new("P4_LBRPL_SCH_HOLD", "RO/V", 1, 28, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[28:28]"});
    P4_LBRPL_SCH_HOLD.set_powerwell("vcccfn_gated");
    P4_LBRPL_SCH_HOLD.set_rand_mode(0);
   P4_LBRPL_SCH_HOLD.set_reset_signame("hqm_inp_gated_rst_n");
    P4_LBRPL_SCH_HOLD.set_logical_path("HQMID");
    void'(add_field( P4_LBRPL_SCH_HOLD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_01_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_01_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P1_LDB_CQ_VALID;
  sla_ral_field P2_LDB_VALID;
  sla_ral_field P3_LDB_VALID;
  sla_ral_field P4_LDB_VALID;
  sla_ral_field P5_LDB_VALID;
  sla_ral_field P6_LDB_VALID;
  sla_ral_field P7_LDB_VALID;
  sla_ral_field P8_LDB_VALID;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P1_LDB_CQ_VALID, P1_LDB_CQ_VALID.desired)
     `RAL_FIELD_CP_1(P1_LDB_CQ_VALID, P1_LDB_CQ_VALID.desired, 0)
     `RAL_FIELD_CP(P2_LDB_VALID, P2_LDB_VALID.desired)
     `RAL_FIELD_CP_1(P2_LDB_VALID, P2_LDB_VALID.desired, 0)
     `RAL_FIELD_CP(P3_LDB_VALID, P3_LDB_VALID.desired)
     `RAL_FIELD_CP_1(P3_LDB_VALID, P3_LDB_VALID.desired, 0)
     `RAL_FIELD_CP(P4_LDB_VALID, P4_LDB_VALID.desired)
     `RAL_FIELD_CP_1(P4_LDB_VALID, P4_LDB_VALID.desired, 0)
     `RAL_FIELD_CP(P5_LDB_VALID, P5_LDB_VALID.desired)
     `RAL_FIELD_CP_1(P5_LDB_VALID, P5_LDB_VALID.desired, 0)
     `RAL_FIELD_CP(P6_LDB_VALID, P6_LDB_VALID.desired)
     `RAL_FIELD_CP_1(P6_LDB_VALID, P6_LDB_VALID.desired, 0)
     `RAL_FIELD_CP(P7_LDB_VALID, P7_LDB_VALID.desired)
     `RAL_FIELD_CP_1(P7_LDB_VALID, P7_LDB_VALID.desired, 0)
     `RAL_FIELD_CP(P8_LDB_VALID, P8_LDB_VALID.desired)
     `RAL_FIELD_CP_1(P8_LDB_VALID, P8_LDB_VALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P1_LDB_CQ_VALID, P1_LDB_CQ_VALID.actual)
     `RAL_FIELD_CP_1(P1_LDB_CQ_VALID, P1_LDB_CQ_VALID.actual, 0)
     `RAL_FIELD_CP(P2_LDB_VALID, P2_LDB_VALID.actual)
     `RAL_FIELD_CP_1(P2_LDB_VALID, P2_LDB_VALID.actual, 0)
     `RAL_FIELD_CP(P3_LDB_VALID, P3_LDB_VALID.actual)
     `RAL_FIELD_CP_1(P3_LDB_VALID, P3_LDB_VALID.actual, 0)
     `RAL_FIELD_CP(P4_LDB_VALID, P4_LDB_VALID.actual)
     `RAL_FIELD_CP_1(P4_LDB_VALID, P4_LDB_VALID.actual, 0)
     `RAL_FIELD_CP(P5_LDB_VALID, P5_LDB_VALID.actual)
     `RAL_FIELD_CP_1(P5_LDB_VALID, P5_LDB_VALID.actual, 0)
     `RAL_FIELD_CP(P6_LDB_VALID, P6_LDB_VALID.actual)
     `RAL_FIELD_CP_1(P6_LDB_VALID, P6_LDB_VALID.actual, 0)
     `RAL_FIELD_CP(P7_LDB_VALID, P7_LDB_VALID.actual)
     `RAL_FIELD_CP_1(P7_LDB_VALID, P7_LDB_VALID.actual, 0)
     `RAL_FIELD_CP(P8_LDB_VALID, P8_LDB_VALID.actual)
     `RAL_FIELD_CP_1(P8_LDB_VALID, P8_LDB_VALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P1_LDB_CQ_VALID = new("P1_LDB_CQ_VALID", "RO/V", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[1:1]"});
    P1_LDB_CQ_VALID.set_powerwell("vcccfn_gated");
    P1_LDB_CQ_VALID.set_rand_mode(0);
   P1_LDB_CQ_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P1_LDB_CQ_VALID.set_logical_path("HQMID");
    void'(add_field( P1_LDB_CQ_VALID ));

    P2_LDB_VALID = new("P2_LDB_VALID", "RO/V", 1, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[2:2]"});
    P2_LDB_VALID.set_powerwell("vcccfn_gated");
    P2_LDB_VALID.set_rand_mode(0);
   P2_LDB_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P2_LDB_VALID.set_logical_path("HQMID");
    void'(add_field( P2_LDB_VALID ));

    P3_LDB_VALID = new("P3_LDB_VALID", "RO/V", 1, 3, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[3:3]"});
    P3_LDB_VALID.set_powerwell("vcccfn_gated");
    P3_LDB_VALID.set_rand_mode(0);
   P3_LDB_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P3_LDB_VALID.set_logical_path("HQMID");
    void'(add_field( P3_LDB_VALID ));

    P4_LDB_VALID = new("P4_LDB_VALID", "RO/V", 1, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[4:4]"});
    P4_LDB_VALID.set_powerwell("vcccfn_gated");
    P4_LDB_VALID.set_rand_mode(0);
   P4_LDB_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P4_LDB_VALID.set_logical_path("HQMID");
    void'(add_field( P4_LDB_VALID ));

    P5_LDB_VALID = new("P5_LDB_VALID", "RO/V", 1, 5, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[5:5]"});
    P5_LDB_VALID.set_powerwell("vcccfn_gated");
    P5_LDB_VALID.set_rand_mode(0);
   P5_LDB_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P5_LDB_VALID.set_logical_path("HQMID");
    void'(add_field( P5_LDB_VALID ));

    P6_LDB_VALID = new("P6_LDB_VALID", "RO/V", 1, 6, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[6:6]"});
    P6_LDB_VALID.set_powerwell("vcccfn_gated");
    P6_LDB_VALID.set_rand_mode(0);
   P6_LDB_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P6_LDB_VALID.set_logical_path("HQMID");
    void'(add_field( P6_LDB_VALID ));

    P7_LDB_VALID = new("P7_LDB_VALID", "RO/V", 1, 7, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[7:7]"});
    P7_LDB_VALID.set_powerwell("vcccfn_gated");
    P7_LDB_VALID.set_rand_mode(0);
   P7_LDB_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P7_LDB_VALID.set_logical_path("HQMID");
    void'(add_field( P7_LDB_VALID ));

    P8_LDB_VALID = new("P8_LDB_VALID", "RO/V", 1, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[8:8]"});
    P8_LDB_VALID.set_powerwell("vcccfn_gated");
    P8_LDB_VALID.set_rand_mode(0);
   P8_LDB_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P8_LDB_VALID.set_logical_path("HQMID");
    void'(add_field( P8_LDB_VALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_01_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field P0_DIR_VALID;
  sla_ral_field P1_DIR_VALID;
  sla_ral_field P2_DIR_VALID;
  sla_ral_field P3_DIR_VALID;
  sla_ral_field P4_DIR_SCH_VALID;
  sla_ral_field P0_ATQ_VALID;
  sla_ral_field P1_ATQ_VALID;
  sla_ral_field P2_ATQ_VALID;
  sla_ral_field P3_ATQ_VALID;
  sla_ral_field P4_ATQ_SCH_VALID;
  sla_ral_field P0_DIRRPL_VALID;
  sla_ral_field P1_DIRRPL_VALID;
  sla_ral_field P2_DIRRPL_VALID;
  sla_ral_field P3_DIRRPL_VALID;
  sla_ral_field P4_DIRRPL_SCH_VALID;
  sla_ral_field P0_LBRPL_VALID;
  sla_ral_field P1_LBRPL_VALID;
  sla_ral_field P2_LBRPL_VALID;
  sla_ral_field P3_LBRPL_VALID;
  sla_ral_field P4_LBRPL_SCH_VALID;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_01_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_DIR_VALID, P0_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P0_DIR_VALID, P0_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P1_DIR_VALID, P1_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P1_DIR_VALID, P1_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P2_DIR_VALID, P2_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P2_DIR_VALID, P2_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P3_DIR_VALID, P3_DIR_VALID.desired)
     `RAL_FIELD_CP_1(P3_DIR_VALID, P3_DIR_VALID.desired, 0)
     `RAL_FIELD_CP(P4_DIR_SCH_VALID, P4_DIR_SCH_VALID.desired)
     `RAL_FIELD_CP_1(P4_DIR_SCH_VALID, P4_DIR_SCH_VALID.desired, 0)
     `RAL_FIELD_CP(P0_ATQ_VALID, P0_ATQ_VALID.desired)
     `RAL_FIELD_CP_1(P0_ATQ_VALID, P0_ATQ_VALID.desired, 0)
     `RAL_FIELD_CP(P1_ATQ_VALID, P1_ATQ_VALID.desired)
     `RAL_FIELD_CP_1(P1_ATQ_VALID, P1_ATQ_VALID.desired, 0)
     `RAL_FIELD_CP(P2_ATQ_VALID, P2_ATQ_VALID.desired)
     `RAL_FIELD_CP_1(P2_ATQ_VALID, P2_ATQ_VALID.desired, 0)
     `RAL_FIELD_CP(P3_ATQ_VALID, P3_ATQ_VALID.desired)
     `RAL_FIELD_CP_1(P3_ATQ_VALID, P3_ATQ_VALID.desired, 0)
     `RAL_FIELD_CP(P4_ATQ_SCH_VALID, P4_ATQ_SCH_VALID.desired)
     `RAL_FIELD_CP_1(P4_ATQ_SCH_VALID, P4_ATQ_SCH_VALID.desired, 0)
     `RAL_FIELD_CP(P0_DIRRPL_VALID, P0_DIRRPL_VALID.desired)
     `RAL_FIELD_CP_1(P0_DIRRPL_VALID, P0_DIRRPL_VALID.desired, 0)
     `RAL_FIELD_CP(P1_DIRRPL_VALID, P1_DIRRPL_VALID.desired)
     `RAL_FIELD_CP_1(P1_DIRRPL_VALID, P1_DIRRPL_VALID.desired, 0)
     `RAL_FIELD_CP(P2_DIRRPL_VALID, P2_DIRRPL_VALID.desired)
     `RAL_FIELD_CP_1(P2_DIRRPL_VALID, P2_DIRRPL_VALID.desired, 0)
     `RAL_FIELD_CP(P3_DIRRPL_VALID, P3_DIRRPL_VALID.desired)
     `RAL_FIELD_CP_1(P3_DIRRPL_VALID, P3_DIRRPL_VALID.desired, 0)
     `RAL_FIELD_CP(P4_DIRRPL_SCH_VALID, P4_DIRRPL_SCH_VALID.desired)
     `RAL_FIELD_CP_1(P4_DIRRPL_SCH_VALID, P4_DIRRPL_SCH_VALID.desired, 0)
     `RAL_FIELD_CP(P0_LBRPL_VALID, P0_LBRPL_VALID.desired)
     `RAL_FIELD_CP_1(P0_LBRPL_VALID, P0_LBRPL_VALID.desired, 0)
     `RAL_FIELD_CP(P1_LBRPL_VALID, P1_LBRPL_VALID.desired)
     `RAL_FIELD_CP_1(P1_LBRPL_VALID, P1_LBRPL_VALID.desired, 0)
     `RAL_FIELD_CP(P2_LBRPL_VALID, P2_LBRPL_VALID.desired)
     `RAL_FIELD_CP_1(P2_LBRPL_VALID, P2_LBRPL_VALID.desired, 0)
     `RAL_FIELD_CP(P3_LBRPL_VALID, P3_LBRPL_VALID.desired)
     `RAL_FIELD_CP_1(P3_LBRPL_VALID, P3_LBRPL_VALID.desired, 0)
     `RAL_FIELD_CP(P4_LBRPL_SCH_VALID, P4_LBRPL_SCH_VALID.desired)
     `RAL_FIELD_CP_1(P4_LBRPL_SCH_VALID, P4_LBRPL_SCH_VALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(P0_DIR_VALID, P0_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P0_DIR_VALID, P0_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P1_DIR_VALID, P1_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P1_DIR_VALID, P1_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P2_DIR_VALID, P2_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P2_DIR_VALID, P2_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P3_DIR_VALID, P3_DIR_VALID.actual)
     `RAL_FIELD_CP_1(P3_DIR_VALID, P3_DIR_VALID.actual, 0)
     `RAL_FIELD_CP(P4_DIR_SCH_VALID, P4_DIR_SCH_VALID.actual)
     `RAL_FIELD_CP_1(P4_DIR_SCH_VALID, P4_DIR_SCH_VALID.actual, 0)
     `RAL_FIELD_CP(P0_ATQ_VALID, P0_ATQ_VALID.actual)
     `RAL_FIELD_CP_1(P0_ATQ_VALID, P0_ATQ_VALID.actual, 0)
     `RAL_FIELD_CP(P1_ATQ_VALID, P1_ATQ_VALID.actual)
     `RAL_FIELD_CP_1(P1_ATQ_VALID, P1_ATQ_VALID.actual, 0)
     `RAL_FIELD_CP(P2_ATQ_VALID, P2_ATQ_VALID.actual)
     `RAL_FIELD_CP_1(P2_ATQ_VALID, P2_ATQ_VALID.actual, 0)
     `RAL_FIELD_CP(P3_ATQ_VALID, P3_ATQ_VALID.actual)
     `RAL_FIELD_CP_1(P3_ATQ_VALID, P3_ATQ_VALID.actual, 0)
     `RAL_FIELD_CP(P4_ATQ_SCH_VALID, P4_ATQ_SCH_VALID.actual)
     `RAL_FIELD_CP_1(P4_ATQ_SCH_VALID, P4_ATQ_SCH_VALID.actual, 0)
     `RAL_FIELD_CP(P0_DIRRPL_VALID, P0_DIRRPL_VALID.actual)
     `RAL_FIELD_CP_1(P0_DIRRPL_VALID, P0_DIRRPL_VALID.actual, 0)
     `RAL_FIELD_CP(P1_DIRRPL_VALID, P1_DIRRPL_VALID.actual)
     `RAL_FIELD_CP_1(P1_DIRRPL_VALID, P1_DIRRPL_VALID.actual, 0)
     `RAL_FIELD_CP(P2_DIRRPL_VALID, P2_DIRRPL_VALID.actual)
     `RAL_FIELD_CP_1(P2_DIRRPL_VALID, P2_DIRRPL_VALID.actual, 0)
     `RAL_FIELD_CP(P3_DIRRPL_VALID, P3_DIRRPL_VALID.actual)
     `RAL_FIELD_CP_1(P3_DIRRPL_VALID, P3_DIRRPL_VALID.actual, 0)
     `RAL_FIELD_CP(P4_DIRRPL_SCH_VALID, P4_DIRRPL_SCH_VALID.actual)
     `RAL_FIELD_CP_1(P4_DIRRPL_SCH_VALID, P4_DIRRPL_SCH_VALID.actual, 0)
     `RAL_FIELD_CP(P0_LBRPL_VALID, P0_LBRPL_VALID.actual)
     `RAL_FIELD_CP_1(P0_LBRPL_VALID, P0_LBRPL_VALID.actual, 0)
     `RAL_FIELD_CP(P1_LBRPL_VALID, P1_LBRPL_VALID.actual)
     `RAL_FIELD_CP_1(P1_LBRPL_VALID, P1_LBRPL_VALID.actual, 0)
     `RAL_FIELD_CP(P2_LBRPL_VALID, P2_LBRPL_VALID.actual)
     `RAL_FIELD_CP_1(P2_LBRPL_VALID, P2_LBRPL_VALID.actual, 0)
     `RAL_FIELD_CP(P3_LBRPL_VALID, P3_LBRPL_VALID.actual)
     `RAL_FIELD_CP_1(P3_LBRPL_VALID, P3_LBRPL_VALID.actual, 0)
     `RAL_FIELD_CP(P4_LBRPL_SCH_VALID, P4_LBRPL_SCH_VALID.actual)
     `RAL_FIELD_CP_1(P4_LBRPL_SCH_VALID, P4_LBRPL_SCH_VALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    P0_DIR_VALID = new("P0_DIR_VALID", "RO/V", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[0:0]"});
    P0_DIR_VALID.set_powerwell("vcccfn_gated");
    P0_DIR_VALID.set_rand_mode(0);
   P0_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P0_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P0_DIR_VALID ));

    P1_DIR_VALID = new("P1_DIR_VALID", "RO/V", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[1:1]"});
    P1_DIR_VALID.set_powerwell("vcccfn_gated");
    P1_DIR_VALID.set_rand_mode(0);
   P1_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P1_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P1_DIR_VALID ));

    P2_DIR_VALID = new("P2_DIR_VALID", "RO/V", 1, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[2:2]"});
    P2_DIR_VALID.set_powerwell("vcccfn_gated");
    P2_DIR_VALID.set_rand_mode(0);
   P2_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P2_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P2_DIR_VALID ));

    P3_DIR_VALID = new("P3_DIR_VALID", "RO/V", 1, 3, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[3:3]"});
    P3_DIR_VALID.set_powerwell("vcccfn_gated");
    P3_DIR_VALID.set_rand_mode(0);
   P3_DIR_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P3_DIR_VALID.set_logical_path("HQMID");
    void'(add_field( P3_DIR_VALID ));

    P4_DIR_SCH_VALID = new("P4_DIR_SCH_VALID", "RO/V", 1, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[4:4]"});
    P4_DIR_SCH_VALID.set_powerwell("vcccfn_gated");
    P4_DIR_SCH_VALID.set_rand_mode(0);
   P4_DIR_SCH_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P4_DIR_SCH_VALID.set_logical_path("HQMID");
    void'(add_field( P4_DIR_SCH_VALID ));

    P0_ATQ_VALID = new("P0_ATQ_VALID", "RO/V", 1, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[8:8]"});
    P0_ATQ_VALID.set_powerwell("vcccfn_gated");
    P0_ATQ_VALID.set_rand_mode(0);
   P0_ATQ_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P0_ATQ_VALID.set_logical_path("HQMID");
    void'(add_field( P0_ATQ_VALID ));

    P1_ATQ_VALID = new("P1_ATQ_VALID", "RO/V", 1, 9, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[9:9]"});
    P1_ATQ_VALID.set_powerwell("vcccfn_gated");
    P1_ATQ_VALID.set_rand_mode(0);
   P1_ATQ_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P1_ATQ_VALID.set_logical_path("HQMID");
    void'(add_field( P1_ATQ_VALID ));

    P2_ATQ_VALID = new("P2_ATQ_VALID", "RO/V", 1, 10, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[10:10]"});
    P2_ATQ_VALID.set_powerwell("vcccfn_gated");
    P2_ATQ_VALID.set_rand_mode(0);
   P2_ATQ_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P2_ATQ_VALID.set_logical_path("HQMID");
    void'(add_field( P2_ATQ_VALID ));

    P3_ATQ_VALID = new("P3_ATQ_VALID", "RO/V", 1, 11, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[11:11]"});
    P3_ATQ_VALID.set_powerwell("vcccfn_gated");
    P3_ATQ_VALID.set_rand_mode(0);
   P3_ATQ_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P3_ATQ_VALID.set_logical_path("HQMID");
    void'(add_field( P3_ATQ_VALID ));

    P4_ATQ_SCH_VALID = new("P4_ATQ_SCH_VALID", "RO/V", 1, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[12:12]"});
    P4_ATQ_SCH_VALID.set_powerwell("vcccfn_gated");
    P4_ATQ_SCH_VALID.set_rand_mode(0);
   P4_ATQ_SCH_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P4_ATQ_SCH_VALID.set_logical_path("HQMID");
    void'(add_field( P4_ATQ_SCH_VALID ));

    P0_DIRRPL_VALID = new("P0_DIRRPL_VALID", "RO/V", 1, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[16:16]"});
    P0_DIRRPL_VALID.set_powerwell("vcccfn_gated");
    P0_DIRRPL_VALID.set_rand_mode(0);
   P0_DIRRPL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P0_DIRRPL_VALID.set_logical_path("HQMID");
    void'(add_field( P0_DIRRPL_VALID ));

    P1_DIRRPL_VALID = new("P1_DIRRPL_VALID", "RO/V", 1, 17, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[17:17]"});
    P1_DIRRPL_VALID.set_powerwell("vcccfn_gated");
    P1_DIRRPL_VALID.set_rand_mode(0);
   P1_DIRRPL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P1_DIRRPL_VALID.set_logical_path("HQMID");
    void'(add_field( P1_DIRRPL_VALID ));

    P2_DIRRPL_VALID = new("P2_DIRRPL_VALID", "RO/V", 1, 18, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[18:18]"});
    P2_DIRRPL_VALID.set_powerwell("vcccfn_gated");
    P2_DIRRPL_VALID.set_rand_mode(0);
   P2_DIRRPL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P2_DIRRPL_VALID.set_logical_path("HQMID");
    void'(add_field( P2_DIRRPL_VALID ));

    P3_DIRRPL_VALID = new("P3_DIRRPL_VALID", "RO/V", 1, 19, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[19:19]"});
    P3_DIRRPL_VALID.set_powerwell("vcccfn_gated");
    P3_DIRRPL_VALID.set_rand_mode(0);
   P3_DIRRPL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P3_DIRRPL_VALID.set_logical_path("HQMID");
    void'(add_field( P3_DIRRPL_VALID ));

    P4_DIRRPL_SCH_VALID = new("P4_DIRRPL_SCH_VALID", "RO/V", 1, 20, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[20:20]"});
    P4_DIRRPL_SCH_VALID.set_powerwell("vcccfn_gated");
    P4_DIRRPL_SCH_VALID.set_rand_mode(0);
   P4_DIRRPL_SCH_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P4_DIRRPL_SCH_VALID.set_logical_path("HQMID");
    void'(add_field( P4_DIRRPL_SCH_VALID ));

    P0_LBRPL_VALID = new("P0_LBRPL_VALID", "RO/V", 1, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[24:24]"});
    P0_LBRPL_VALID.set_powerwell("vcccfn_gated");
    P0_LBRPL_VALID.set_rand_mode(0);
   P0_LBRPL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P0_LBRPL_VALID.set_logical_path("HQMID");
    void'(add_field( P0_LBRPL_VALID ));

    P1_LBRPL_VALID = new("P1_LBRPL_VALID", "RO/V", 1, 25, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[25:25]"});
    P1_LBRPL_VALID.set_powerwell("vcccfn_gated");
    P1_LBRPL_VALID.set_rand_mode(0);
   P1_LBRPL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P1_LBRPL_VALID.set_logical_path("HQMID");
    void'(add_field( P1_LBRPL_VALID ));

    P2_LBRPL_VALID = new("P2_LBRPL_VALID", "RO/V", 1, 26, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[26:26]"});
    P2_LBRPL_VALID.set_powerwell("vcccfn_gated");
    P2_LBRPL_VALID.set_rand_mode(0);
   P2_LBRPL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P2_LBRPL_VALID.set_logical_path("HQMID");
    void'(add_field( P2_LBRPL_VALID ));

    P3_LBRPL_VALID = new("P3_LBRPL_VALID", "RO/V", 1, 27, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[27:27]"});
    P3_LBRPL_VALID.set_powerwell("vcccfn_gated");
    P3_LBRPL_VALID.set_rand_mode(0);
   P3_LBRPL_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P3_LBRPL_VALID.set_logical_path("HQMID");
    void'(add_field( P3_LBRPL_VALID ));

    P4_LBRPL_SCH_VALID = new("P4_LBRPL_SCH_VALID", "RO/V", 1, 28, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[28:28]"});
    P4_LBRPL_SCH_VALID.set_powerwell("vcccfn_gated");
    P4_LBRPL_SCH_VALID.set_rand_mode(0);
   P4_LBRPL_SCH_VALID.set_reset_signame("hqm_inp_gated_rst_n");
    P4_LBRPL_SCH_VALID.set_logical_path("HQMID");
    void'(add_field( P4_LBRPL_SCH_VALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_01_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_01_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE0;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.desired)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE0, COMPARE0.actual)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE0, COMPARE0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE0 = new("COMPARE0", "RW/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_comp0_q[31:0]"});
    COMPARE0.set_powerwell("vcccfn_gated");
    COMPARE0.set_rand_mode(0);
   COMPARE0.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE0.set_logical_path("HQMID");
    void'(add_field( COMPARE0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COMPARE1;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.desired)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COMPARE1, COMPARE1.actual)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COMPARE1, COMPARE1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COMPARE1 = new("COMPARE1", "RW/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_comp1_q[31:0]"});
    COMPARE1.set_powerwell("vcccfn_gated");
    COMPARE1.set_rand_mode(0);
   COMPARE1.set_reset_signame("hqm_inp_gated_rst_n");
    COMPARE1.set_logical_path("HQMID");
    void'(add_field( COMPARE1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE1_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE1_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SMON_ENABLE;
  sla_ral_field SMON_0TRIGGER_ENABLE;
  sla_ral_field RSVZ0;
  sla_ral_field SMON0_FUNCTION;
  sla_ral_field SMON0_FUNCTION_COMPARE;
  sla_ral_field SMON1_FUNCTION;
  sla_ral_field SMON1_FUNCTION_COMPARE;
  sla_ral_field SMON_MODE;
  sla_ral_field STOPCOUNTEROVFL;
  sla_ral_field INTCOUNTEROVFL;
  sla_ral_field STATCOUNTER0OVFL;
  sla_ral_field STATCOUNTER1OVFL;
  sla_ral_field STOPTIMEROVFL;
  sla_ral_field INTTIMEROVFL;
  sla_ral_field STATTIMEROVFL;
  sla_ral_field RSVZ1;
  sla_ral_field TIMER_PRESCALE;
  sla_ral_field RSVZ2;
  sla_ral_field VERSION;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.desired, 0)
     `RAL_FIELD_CP(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.desired)
     `RAL_FIELD_CP_1(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.desired, 0,1)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.desired)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.desired, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.desired, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.desired)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.desired, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.desired)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.desired, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.desired, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.desired)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.desired)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.desired, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.desired, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.desired)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.desired)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.desired, 0)
     `RAL_FIELD_CP(VERSION, VERSION.desired)
     `RAL_FIELD_CP_2(VERSION, VERSION.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SMON_ENABLE, SMON_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_ENABLE, SMON_ENABLE.actual, 0)
     `RAL_FIELD_CP(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.actual)
     `RAL_FIELD_CP_1(SMON_0TRIGGER_ENABLE, SMON_0TRIGGER_ENABLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_2(RSVZ0, RSVZ0.actual, 0,1)
     `RAL_FIELD_CP(SMON0_FUNCTION, SMON0_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON0_FUNCTION, SMON0_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON0_FUNCTION_COMPARE, SMON0_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON1_FUNCTION, SMON1_FUNCTION.actual)
     `RAL_FIELD_CP_3(SMON1_FUNCTION, SMON1_FUNCTION.actual, 0,1,2)
     `RAL_FIELD_CP(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual)
     `RAL_FIELD_CP_1(SMON1_FUNCTION_COMPARE, SMON1_FUNCTION_COMPARE.actual, 0)
     `RAL_FIELD_CP(SMON_MODE, SMON_MODE.actual)
     `RAL_FIELD_CP_4(SMON_MODE, SMON_MODE.actual, 0,1,2,3)
     `RAL_FIELD_CP(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(STOPCOUNTEROVFL, STOPCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(INTCOUNTEROVFL, INTCOUNTEROVFL.actual)
     `RAL_FIELD_CP_1(INTCOUNTEROVFL, INTCOUNTEROVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER0OVFL, STATCOUNTER0OVFL.actual, 0)
     `RAL_FIELD_CP(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual)
     `RAL_FIELD_CP_1(STATCOUNTER1OVFL, STATCOUNTER1OVFL.actual, 0)
     `RAL_FIELD_CP(STOPTIMEROVFL, STOPTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STOPTIMEROVFL, STOPTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(INTTIMEROVFL, INTTIMEROVFL.actual)
     `RAL_FIELD_CP_1(INTTIMEROVFL, INTTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(STATTIMEROVFL, STATTIMEROVFL.actual)
     `RAL_FIELD_CP_1(STATTIMEROVFL, STATTIMEROVFL.actual, 0)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_1(RSVZ1, RSVZ1.actual, 0)
     `RAL_FIELD_CP(TIMER_PRESCALE, TIMER_PRESCALE.actual)
     `RAL_FIELD_CP_5(TIMER_PRESCALE, TIMER_PRESCALE.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RSVZ2, RSVZ2.actual)
     `RAL_FIELD_CP_1(RSVZ2, RSVZ2.actual, 0)
     `RAL_FIELD_CP(VERSION, VERSION.actual)
     `RAL_FIELD_CP_2(VERSION, VERSION.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SMON_ENABLE = new("SMON_ENABLE", "RW/V", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[0:0]"});
    SMON_ENABLE.set_powerwell("vcccfn_gated");
    SMON_ENABLE.set_rand_mode(0);
   SMON_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_ENABLE.set_logical_path("HQMID");
    void'(add_field( SMON_ENABLE ));

    SMON_0TRIGGER_ENABLE = new("SMON_0TRIGGER_ENABLE", "RW/V", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[1:1]"});
    SMON_0TRIGGER_ENABLE.set_powerwell("vcccfn_gated");
    SMON_0TRIGGER_ENABLE.set_rand_mode(0);
   SMON_0TRIGGER_ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_0TRIGGER_ENABLE.set_logical_path("HQMID");
    void'(add_field( SMON_0TRIGGER_ENABLE ));

    RSVZ0 = new("RSVZ0", "RW/V", 2, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[3:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    SMON0_FUNCTION = new("SMON0_FUNCTION", "RW/V", 3, 4, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[6:4]"});
    SMON0_FUNCTION.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION.set_rand_mode(0);
   SMON0_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION ));

    SMON0_FUNCTION_COMPARE = new("SMON0_FUNCTION_COMPARE", "RW/V", 1, 7, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[7:7]"});
    SMON0_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON0_FUNCTION_COMPARE.set_rand_mode(0);
   SMON0_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON0_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON0_FUNCTION_COMPARE ));

    SMON1_FUNCTION = new("SMON1_FUNCTION", "RW/V", 3, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[10:8]"});
    SMON1_FUNCTION.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION.set_rand_mode(0);
   SMON1_FUNCTION.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION ));

    SMON1_FUNCTION_COMPARE = new("SMON1_FUNCTION_COMPARE", "RW/V", 1, 11, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[11:11]"});
    SMON1_FUNCTION_COMPARE.set_powerwell("vcccfn_gated");
    SMON1_FUNCTION_COMPARE.set_rand_mode(0);
   SMON1_FUNCTION_COMPARE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON1_FUNCTION_COMPARE.set_logical_path("HQMID");
    void'(add_field( SMON1_FUNCTION_COMPARE ));

    SMON_MODE = new("SMON_MODE", "RW/V", 4, 12, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[15:12]"});
    SMON_MODE.set_powerwell("vcccfn_gated");
    SMON_MODE.set_rand_mode(0);
   SMON_MODE.set_reset_signame("hqm_inp_gated_rst_n");
    SMON_MODE.set_logical_path("HQMID");
    void'(add_field( SMON_MODE ));

    STOPCOUNTEROVFL = new("STOPCOUNTEROVFL", "RW/V", 1, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[16:16]"});
    STOPCOUNTEROVFL.set_powerwell("vcccfn_gated");
    STOPCOUNTEROVFL.set_rand_mode(0);
   STOPCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPCOUNTEROVFL ));

    INTCOUNTEROVFL = new("INTCOUNTEROVFL", "RW/V", 1, 17, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[17:17]"});
    INTCOUNTEROVFL.set_powerwell("vcccfn_gated");
    INTCOUNTEROVFL.set_rand_mode(0);
   INTCOUNTEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTCOUNTEROVFL.set_logical_path("HQMID");
    void'(add_field( INTCOUNTEROVFL ));

    STATCOUNTER0OVFL = new("STATCOUNTER0OVFL", "RW/V", 1, 18, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[18:18]"});
    STATCOUNTER0OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER0OVFL.set_rand_mode(0);
   STATCOUNTER0OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER0OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER0OVFL ));

    STATCOUNTER1OVFL = new("STATCOUNTER1OVFL", "RW/V", 1, 19, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[19:19]"});
    STATCOUNTER1OVFL.set_powerwell("vcccfn_gated");
    STATCOUNTER1OVFL.set_rand_mode(0);
   STATCOUNTER1OVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATCOUNTER1OVFL.set_logical_path("HQMID");
    void'(add_field( STATCOUNTER1OVFL ));

    STOPTIMEROVFL = new("STOPTIMEROVFL", "RW/V", 1, 20, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[20:20]"});
    STOPTIMEROVFL.set_powerwell("vcccfn_gated");
    STOPTIMEROVFL.set_rand_mode(0);
   STOPTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STOPTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STOPTIMEROVFL ));

    INTTIMEROVFL = new("INTTIMEROVFL", "RW/V", 1, 21, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[21:21]"});
    INTTIMEROVFL.set_powerwell("vcccfn_gated");
    INTTIMEROVFL.set_rand_mode(0);
   INTTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    INTTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( INTTIMEROVFL ));

    STATTIMEROVFL = new("STATTIMEROVFL", "RW/V", 1, 22, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[22:22]"});
    STATTIMEROVFL.set_powerwell("vcccfn_gated");
    STATTIMEROVFL.set_rand_mode(0);
   STATTIMEROVFL.set_reset_signame("hqm_inp_gated_rst_n");
    STATTIMEROVFL.set_logical_path("HQMID");
    void'(add_field( STATTIMEROVFL ));

    RSVZ1 = new("RSVZ1", "RW/V", 1, 23, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[23:23]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    TIMER_PRESCALE = new("TIMER_PRESCALE", "RW/V", 5, 24, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[28:24]"});
    TIMER_PRESCALE.set_powerwell("vcccfn_gated");
    TIMER_PRESCALE.set_rand_mode(0);
   TIMER_PRESCALE.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER_PRESCALE.set_logical_path("HQMID");
    void'(add_field( TIMER_PRESCALE ));

    RSVZ2 = new("RSVZ2", "RW/V", 1, 29, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[29:29]"});
    RSVZ2.set_powerwell("vcccfn_gated");
    RSVZ2.set_rand_mode(0);
   RSVZ2.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ2.set_logical_path("HQMID");
    void'(add_field( RSVZ2 ));

    VERSION = new("VERSION", "RO", 2, 30, {"NoSignal"});
    VERSION.set_powerwell("vcccfn_gated");
    VERSION.set_rand_mode(0);
   VERSION.set_reset_signame("hqm_inp_gated_rst_n");
    void'(add_field( VERSION ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MODE0;
  sla_ral_field MODE1;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.desired)
     `RAL_FIELD_CP_8(MODE0, MODE0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.desired)
     `RAL_FIELD_CP_8(MODE1, MODE1.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MODE0, MODE0.actual)
     `RAL_FIELD_CP_8(MODE0, MODE0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(MODE1, MODE1.actual)
     `RAL_FIELD_CP_8(MODE1, MODE1.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MODE0 = new("MODE0", "RW/V", 8, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg1_q[7:0]"});
    MODE0.set_powerwell("vcccfn_gated");
    MODE0.set_rand_mode(0);
   MODE0.set_reset_signame("hqm_inp_gated_rst_n");
    MODE0.set_logical_path("HQMID");
    void'(add_field( MODE0 ));

    MODE1 = new("MODE1", "RW/V", 8, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg1_q[15:8]"});
    MODE1.set_powerwell("vcccfn_gated");
    MODE1.set_rand_mode(0);
   MODE1.set_reset_signame("hqm_inp_gated_rst_n");
    MODE1.set_logical_path("HQMID");
    void'(add_field( MODE1 ));

    RSVZ0 = new("RSVZ0", "RW", 16, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg1_q[31:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION1_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION1_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER0;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.desired)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER0, COUNTER0.actual)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER0, COUNTER0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER0 = new("COUNTER0", "RW/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cnt0_q[31:0]"});
    COUNTER0.set_powerwell("vcccfn_gated");
    COUNTER0.set_rand_mode(0);
   COUNTER0.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER0.set_logical_path("HQMID");
    void'(add_field( COUNTER0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER0_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER0_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field COUNTER1;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.desired)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(COUNTER1, COUNTER1.actual)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(COUNTER1, COUNTER1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    COUNTER1 = new("COUNTER1", "RW/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cnt1_q[31:0]"});
    COUNTER1.set_powerwell("vcccfn_gated");
    COUNTER1.set_rand_mode(0);
   COUNTER1.set_reset_signame("hqm_inp_gated_rst_n");
    COUNTER1.set_logical_path("HQMID");
    void'(add_field( COUNTER1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER1_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER1_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SMON0_MAXIMUM_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MAXVALUE;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SMON0_MAXIMUM_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.desired)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MAXVALUE, MAXVALUE.actual)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(MAXVALUE, MAXVALUE.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MAXVALUE = new("MAXVALUE", "RW/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_maxval_q[31:0]"});
    MAXVALUE.set_powerwell("vcccfn_gated");
    MAXVALUE.set_rand_mode(0);
   MAXVALUE.set_reset_signame("hqm_inp_gated_rst_n");
    MAXVALUE.set_logical_path("HQMID");
    void'(add_field( MAXVALUE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SMON0_MAXIMUM_TIMER_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SMON0_MAXIMUM_TIMER_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SMON0_TIMER_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TIMER;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SMON0_TIMER_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER, TIMER.desired)
     `RAL_FIELD_CP_16(TIMER, TIMER.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER, TIMER.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TIMER, TIMER.actual)
     `RAL_FIELD_CP_16(TIMER, TIMER.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TIMER, TIMER.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TIMER = new("TIMER", "RW/V", 32, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_timer_q[31:0]"});
    TIMER.set_powerwell("vcccfn_gated");
    TIMER.set_rand_mode(0);
   TIMER.set_reset_signame("hqm_inp_gated_rst_n");
    TIMER.set_logical_path("HQMID");
    void'(add_field( TIMER ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SMON0_TIMER_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SMON0_TIMER_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_SYNDROME_HW_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYNDDATA;
  sla_ral_field SYNDTYPE;
  sla_ral_field SYNDVALID;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_SYNDROME_HW_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.desired)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.desired)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.desired, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.desired)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYNDDATA, SYNDDATA.actual)
     `RAL_FIELD_CP_16(SYNDDATA, SYNDDATA.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(SYNDDATA, SYNDDATA.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
     `RAL_FIELD_CP(SYNDTYPE, SYNDTYPE.actual)
     `RAL_FIELD_CP_3(SYNDTYPE, SYNDTYPE.actual, 0,1,2)
     `RAL_FIELD_CP(SYNDVALID, SYNDVALID.actual)
     `RAL_FIELD_CP_1(SYNDVALID, SYNDVALID.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYNDDATA = new("SYNDDATA", "RO/V", 28, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_hw.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
    SYNDDATA.set_powerwell("vcccfn_gated");
    SYNDDATA.set_rand_mode(0);
   SYNDDATA.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDDATA.set_logical_path("HQMID");
    void'(add_field( SYNDDATA ));

    SYNDTYPE = new("SYNDTYPE", "RO/V", 3, 28, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_hw.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
    SYNDTYPE.set_powerwell("vcccfn_gated");
    SYNDTYPE.set_rand_mode(0);
   SYNDTYPE.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDTYPE.set_logical_path("HQMID");
    void'(add_field( SYNDTYPE ));

    SYNDVALID = new("SYNDVALID", "RW/1C/V", 1, 31, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_hw.i_hqm_AW_register_wtcfg.internal_f[31:31]"});
    SYNDVALID.set_powerwell("vcccfn_gated");
    SYNDVALID.set_rand_mode(0);
   SYNDVALID.set_reset_signame("hqm_inp_gated_rst_n");
    SYNDVALID.set_logical_path("HQMID");
    void'(add_field( SYNDVALID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_SYNDROME_HW_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_SYNDROME_HW_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_UNIT_IDLE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PIPE_IDLE;
  sla_ral_field UNIT_IDLE;
  sla_ral_field RSVZ0;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_UNIT_IDLE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PIPE_IDLE, PIPE_IDLE.desired)
     `RAL_FIELD_CP_1(PIPE_IDLE, PIPE_IDLE.desired, 0)
     `RAL_FIELD_CP(UNIT_IDLE, UNIT_IDLE.desired)
     `RAL_FIELD_CP_1(UNIT_IDLE, UNIT_IDLE.desired, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PIPE_IDLE, PIPE_IDLE.actual)
     `RAL_FIELD_CP_1(PIPE_IDLE, PIPE_IDLE.actual, 0)
     `RAL_FIELD_CP(UNIT_IDLE, UNIT_IDLE.actual)
     `RAL_FIELD_CP_1(UNIT_IDLE, UNIT_IDLE.actual, 0)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_16(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_14(RSVZ0, RSVZ0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PIPE_IDLE = new("PIPE_IDLE", "RO/V", 1, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_idle.internal_f[0:0]"});
    PIPE_IDLE.set_powerwell("vcccfn_gated");
    PIPE_IDLE.set_rand_mode(0);
   PIPE_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    PIPE_IDLE.set_logical_path("HQMID");
    void'(add_field( PIPE_IDLE ));

    UNIT_IDLE = new("UNIT_IDLE", "RO/V", 1, 1, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_idle.internal_f[1:1]"});
    UNIT_IDLE.set_powerwell("vcccfn_gated");
    UNIT_IDLE.set_rand_mode(0);
   UNIT_IDLE.set_reset_signame("hqm_inp_gated_rst_n");
    UNIT_IDLE.set_logical_path("HQMID");
    void'(add_field( UNIT_IDLE ));

    RSVZ0 = new("RSVZ0", "RO/V", 30, 2, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_idle.internal_f[31:2]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_UNIT_IDLE_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_UNIT_IDLE_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_UNIT_TIMEOUT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MULTIPLIER;
  sla_ral_field THRESHOLD;
  sla_ral_field RSVZ0;
  sla_ral_field ENABLE;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_UNIT_TIMEOUT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.desired)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.desired)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.desired)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MULTIPLIER, MULTIPLIER.actual)
     `RAL_FIELD_CP_5(MULTIPLIER, MULTIPLIER.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(THRESHOLD, THRESHOLD.actual)
     `RAL_FIELD_CP_11(THRESHOLD, THRESHOLD.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(ENABLE, ENABLE.actual)
     `RAL_FIELD_CP_1(ENABLE, ENABLE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MULTIPLIER = new("MULTIPLIER", "RO", 5, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_timeout.internal_f[4:0]"});
    MULTIPLIER.set_powerwell("vcccfn_gated");
    MULTIPLIER.set_rand_mode(0);
   MULTIPLIER.set_reset_signame("hqm_inp_gated_rst_n");
    MULTIPLIER.set_logical_path("HQMID");
    void'(add_field( MULTIPLIER ));

    THRESHOLD = new("THRESHOLD", "RW", 11, 5, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_timeout.internal_f[15:5]"});
    THRESHOLD.set_powerwell("vcccfn_gated");
    THRESHOLD.set_rand_mode(0);
   THRESHOLD.set_reset_signame("hqm_inp_gated_rst_n");
    THRESHOLD.set_logical_path("HQMID");
    void'(add_field( THRESHOLD ));

    RSVZ0 = new("RSVZ0", "RW/V", 15, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_timeout.internal_f[30:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    ENABLE = new("ENABLE", "RW", 1, 31, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_timeout.internal_f[31:31]"});
    ENABLE.set_powerwell("vcccfn_gated");
    ENABLE.set_rand_mode(0);
   ENABLE.set_reset_signame("hqm_inp_gated_rst_n");
    ENABLE.set_logical_path("HQMID");
    void'(add_field( ENABLE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_UNIT_TIMEOUT_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_UNIT_TIMEOUT_reg

// ================================================

class hqm_list_sel_pipe_bridge_CFG_PATCH_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DELAY_CLOCKOFF;
  sla_ral_field DELAY_CLKOFF_BYPASS;
  sla_ral_field RSVZ1;
  sla_ral_field RSVZ0;
  sla_ral_field DISABLE_CLOCKOFF;

  // --------------------------
  `ovm_object_utils(hqm_list_sel_pipe_bridge_CFG_PATCH_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.desired)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.desired, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.desired)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual)
     `RAL_FIELD_CP_8(DELAY_CLOCKOFF, DELAY_CLOCKOFF.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual)
     `RAL_FIELD_CP_6(DELAY_CLKOFF_BYPASS, DELAY_CLKOFF_BYPASS.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(RSVZ1, RSVZ1.actual)
     `RAL_FIELD_CP_2(RSVZ1, RSVZ1.actual, 0,1)
     `RAL_FIELD_CP(RSVZ0, RSVZ0.actual)
     `RAL_FIELD_CP_15(RSVZ0, RSVZ0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
     `RAL_FIELD_CP(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual)
     `RAL_FIELD_CP_1(DISABLE_CLOCKOFF, DISABLE_CLOCKOFF.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DELAY_CLOCKOFF = new("DELAY_CLOCKOFF", "RW", 8, 0, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[7:0]"});
    DELAY_CLOCKOFF.set_powerwell("vcccfn_gated");
    DELAY_CLOCKOFF.set_rand_mode(0);
   DELAY_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DELAY_CLOCKOFF ));

    DELAY_CLKOFF_BYPASS = new("DELAY_CLKOFF_BYPASS", "RW", 6, 8, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[13:8]"});
    DELAY_CLKOFF_BYPASS.set_powerwell("vcccfn_gated");
    DELAY_CLKOFF_BYPASS.set_rand_mode(0);
   DELAY_CLKOFF_BYPASS.set_reset_signame("hqm_inp_gated_rst_n");
    DELAY_CLKOFF_BYPASS.set_logical_path("HQMID");
    void'(add_field( DELAY_CLKOFF_BYPASS ));

    RSVZ1 = new("RSVZ1", "RW", 2, 14, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[15:14]"});
    RSVZ1.set_powerwell("vcccfn_gated");
    RSVZ1.set_rand_mode(0);
   RSVZ1.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ1.set_logical_path("HQMID");
    void'(add_field( RSVZ1 ));

    RSVZ0 = new("RSVZ0", "RW", 15, 16, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[30:16]"});
    RSVZ0.set_powerwell("vcccfn_gated");
    RSVZ0.set_rand_mode(0);
   RSVZ0.set_reset_signame("hqm_inp_gated_rst_n");
    RSVZ0.set_logical_path("HQMID");
    void'(add_field( RSVZ0 ));

    DISABLE_CLOCKOFF = new("DISABLE_CLOCKOFF", "RW", 1, 31, {"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[31:31]"});
    DISABLE_CLOCKOFF.set_powerwell("vcccfn_gated");
    DISABLE_CLOCKOFF.set_rand_mode(0);
   DISABLE_CLOCKOFF.set_reset_signame("hqm_inp_gated_rst_n");
    DISABLE_CLOCKOFF.set_logical_path("HQMID");
    void'(add_field( DISABLE_CLOCKOFF ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_list_sel_pipe_bridge_CFG_PATCH_CONTROL_reg) 
endclass : hqm_list_sel_pipe_bridge_CFG_PATCH_CONTROL_reg

// ================================================

class hqm_list_sel_pipe_bridge_file extends sla_ral_file;

  rand hqm_list_sel_pipe_bridge_CFG_CQ2PRIOV_reg CFG_CQ2PRIOV[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ2QID0_reg CFG_CQ2QID0[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ2QID1_reg CFG_CQ2QID1[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_DIR_DISABLE_reg CFG_CQ_DIR_DISABLE[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_COUNT_reg CFG_CQ_DIR_TOKEN_COUNT[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI_reg CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTL_reg CFG_CQ_DIR_TOT_SCH_CNTL[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTH_reg CFG_CQ_DIR_TOT_SCH_CNTH[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_DISABLE_reg CFG_CQ_LDB_DISABLE[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_COUNT_reg CFG_CQ_LDB_INFLIGHT_COUNT[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_LIMIT_reg CFG_CQ_LDB_INFLIGHT_LIMIT[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_THRESHOLD_reg CFG_CQ_LDB_INFLIGHT_THRESHOLD[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_COUNT_reg CFG_CQ_LDB_TOKEN_COUNT[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_DEPTH_SELECT_reg CFG_CQ_LDB_TOKEN_DEPTH_SELECT[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTL_reg CFG_CQ_LDB_TOT_SCH_CNTL[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTH_reg CFG_CQ_LDB_TOT_SCH_CNTH[64];
  rand hqm_list_sel_pipe_bridge_CFG_QID_DIR_MAX_DEPTH_reg CFG_QID_DIR_MAX_DEPTH[64];
  rand hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTL_reg CFG_QID_DIR_TOT_ENQ_CNTL[64];
  rand hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTH_reg CFG_QID_DIR_TOT_ENQ_CNTH[64];
  rand hqm_list_sel_pipe_bridge_CFG_QID_DIR_ENQUEUE_COUNT_reg CFG_QID_DIR_ENQUEUE_COUNT[64];
  rand hqm_list_sel_pipe_bridge_CFG_DIR_QID_DPTH_THRSH_reg CFG_DIR_QID_DPTH_THRSH[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_COUNT_reg CFG_CQ_LDB_WU_COUNT[64];
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_LIMIT_reg CFG_CQ_LDB_WU_LIMIT[64];
  rand hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_COUNT_reg CFG_QID_AQED_ACTIVE_COUNT[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_LIMIT_reg CFG_QID_AQED_ACTIVE_LIMIT[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTL_reg CFG_QID_ATM_TOT_ENQ_CNTL[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTH_reg CFG_QID_ATM_TOT_ENQ_CNTH[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_ATQ_ENQUEUE_COUNT_reg CFG_QID_ATQ_ENQUEUE_COUNT[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_ENQUEUE_COUNT_reg CFG_QID_LDB_ENQUEUE_COUNT[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_COUNT_reg CFG_QID_LDB_INFLIGHT_COUNT[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_LIMIT_reg CFG_QID_LDB_INFLIGHT_LIMIT[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_00_reg CFG_QID_LDB_QID2CQIDIX_00[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_01_reg CFG_QID_LDB_QID2CQIDIX_01[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_02_reg CFG_QID_LDB_QID2CQIDIX_02[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_03_reg CFG_QID_LDB_QID2CQIDIX_03[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_04_reg CFG_QID_LDB_QID2CQIDIX_04[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_05_reg CFG_QID_LDB_QID2CQIDIX_05[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_06_reg CFG_QID_LDB_QID2CQIDIX_06[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_07_reg CFG_QID_LDB_QID2CQIDIX_07[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_08_reg CFG_QID_LDB_QID2CQIDIX_08[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_09_reg CFG_QID_LDB_QID2CQIDIX_09[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_10_reg CFG_QID_LDB_QID2CQIDIX_10[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_11_reg CFG_QID_LDB_QID2CQIDIX_11[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_12_reg CFG_QID_LDB_QID2CQIDIX_12[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_13_reg CFG_QID_LDB_QID2CQIDIX_13[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_14_reg CFG_QID_LDB_QID2CQIDIX_14[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_15_reg CFG_QID_LDB_QID2CQIDIX_15[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_00_reg CFG_QID_LDB_QID2CQIDIX2_00[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_01_reg CFG_QID_LDB_QID2CQIDIX2_01[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_02_reg CFG_QID_LDB_QID2CQIDIX2_02[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_03_reg CFG_QID_LDB_QID2CQIDIX2_03[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_04_reg CFG_QID_LDB_QID2CQIDIX2_04[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_05_reg CFG_QID_LDB_QID2CQIDIX2_05[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_06_reg CFG_QID_LDB_QID2CQIDIX2_06[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_07_reg CFG_QID_LDB_QID2CQIDIX2_07[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_08_reg CFG_QID_LDB_QID2CQIDIX2_08[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_09_reg CFG_QID_LDB_QID2CQIDIX2_09[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_10_reg CFG_QID_LDB_QID2CQIDIX2_10[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_11_reg CFG_QID_LDB_QID2CQIDIX2_11[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_12_reg CFG_QID_LDB_QID2CQIDIX2_12[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_13_reg CFG_QID_LDB_QID2CQIDIX2_13[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_14_reg CFG_QID_LDB_QID2CQIDIX2_14[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_15_reg CFG_QID_LDB_QID2CQIDIX2_15[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_LDB_REPLAY_COUNT_reg CFG_QID_LDB_REPLAY_COUNT[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_DIR_REPLAY_COUNT_reg CFG_QID_DIR_REPLAY_COUNT[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_NALDB_MAX_DEPTH_reg CFG_QID_NALDB_MAX_DEPTH[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTL_reg CFG_QID_NALDB_TOT_ENQ_CNTL[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTH_reg CFG_QID_NALDB_TOT_ENQ_CNTH[32];
  rand hqm_list_sel_pipe_bridge_CFG_ATM_QID_DPTH_THRSH_reg CFG_ATM_QID_DPTH_THRSH[32];
  rand hqm_list_sel_pipe_bridge_CFG_NALB_QID_DPTH_THRSH_reg CFG_NALB_QID_DPTH_THRSH[32];
  rand hqm_list_sel_pipe_bridge_CFG_QID_ATM_ACTIVE_reg CFG_QID_ATM_ACTIVE[32];
  rand hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_COUNT_reg CFG_AQED_TOT_ENQUEUE_COUNT;
  rand hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_LIMIT_reg CFG_AQED_TOT_ENQUEUE_LIMIT;
  rand hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_0_reg CFG_ARB_WEIGHT_ATM_NALB_QID_0;
  rand hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_1_reg CFG_ARB_WEIGHT_ATM_NALB_QID_1;
  rand hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_ISSUE_0_reg CFG_ARB_WEIGHT_LDB_ISSUE_0;
  rand hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_0_reg CFG_ARB_WEIGHT_LDB_QID_0;
  rand hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_1_reg CFG_ARB_WEIGHT_LDB_QID_1;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_COUNT_reg CFG_CQ_LDB_TOT_INFLIGHT_COUNT;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_LIMIT_reg CFG_CQ_LDB_TOT_INFLIGHT_LIMIT;
  rand hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_LIMIT_reg CFG_FID_INFLIGHT_LIMIT;
  rand hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_COUNT_reg CFG_FID_INFLIGHT_COUNT;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_CONTROL_reg CFG_LDB_SCHED_CONTROL;
  rand hqm_list_sel_pipe_bridge_CFG_LSP_CSR_CONTROL_reg CFG_LSP_CSR_CONTROL;
  rand hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_L_reg CFG_LSP_PERF_DIR_SCH_COUNT_L;
  rand hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_H_reg CFG_LSP_PERF_DIR_SCH_COUNT_H;
  rand hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_L_reg CFG_LSP_PERF_LDB_SCH_COUNT_L;
  rand hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_H_reg CFG_LSP_PERF_LDB_SCH_COUNT_H;
  rand hqm_list_sel_pipe_bridge_CFG_SYNDROME_SW_reg CFG_SYNDROME_SW;
  rand hqm_list_sel_pipe_bridge_CFG_UNIT_VERSION_reg CFG_UNIT_VERSION;
  rand hqm_list_sel_pipe_bridge_CFG_COS_CTRL_reg CFG_COS_CTRL;
  rand hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS0_reg CFG_CREDIT_SAT_COS0;
  rand hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS1_reg CFG_CREDIT_SAT_COS1;
  rand hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS2_reg CFG_CREDIT_SAT_COS2;
  rand hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS3_reg CFG_CREDIT_SAT_COS3;
  rand hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS0_reg CFG_CREDIT_CNT_COS0;
  rand hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS1_reg CFG_CREDIT_CNT_COS1;
  rand hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS2_reg CFG_CREDIT_CNT_COS2;
  rand hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS3_reg CFG_CREDIT_CNT_COS3;
  rand hqm_list_sel_pipe_bridge_CFG_SHDW_CTRL_reg CFG_SHDW_CTRL;
  rand hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS0_reg CFG_SHDW_RANGE_COS0;
  rand hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS1_reg CFG_SHDW_RANGE_COS1;
  rand hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS2_reg CFG_SHDW_RANGE_COS2;
  rand hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS3_reg CFG_SHDW_RANGE_COS3;
  rand hqm_list_sel_pipe_bridge_CFG_SCH_RDY_L_reg CFG_SCH_RDY_L;
  rand hqm_list_sel_pipe_bridge_CFG_SCH_RDY_H_reg CFG_SCH_RDY_H;
  rand hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_L_reg CFG_SCHD_COS0_L;
  rand hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_H_reg CFG_SCHD_COS0_H;
  rand hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_L_reg CFG_SCHD_COS1_L;
  rand hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_H_reg CFG_SCHD_COS1_H;
  rand hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_L_reg CFG_SCHD_COS2_L;
  rand hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_H_reg CFG_SCHD_COS2_H;
  rand hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_L_reg CFG_SCHD_COS3_L;
  rand hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_H_reg CFG_SCHD_COS3_H;
  rand hqm_list_sel_pipe_bridge_CFG_RDY_COS0_L_reg CFG_RDY_COS0_L;
  rand hqm_list_sel_pipe_bridge_CFG_RDY_COS0_H_reg CFG_RDY_COS0_H;
  rand hqm_list_sel_pipe_bridge_CFG_RDY_COS1_L_reg CFG_RDY_COS1_L;
  rand hqm_list_sel_pipe_bridge_CFG_RDY_COS1_H_reg CFG_RDY_COS1_H;
  rand hqm_list_sel_pipe_bridge_CFG_RDY_COS2_L_reg CFG_RDY_COS2_L;
  rand hqm_list_sel_pipe_bridge_CFG_RDY_COS2_H_reg CFG_RDY_COS2_H;
  rand hqm_list_sel_pipe_bridge_CFG_RDY_COS3_L_reg CFG_RDY_COS3_L;
  rand hqm_list_sel_pipe_bridge_CFG_RDY_COS3_H_reg CFG_RDY_COS3_H;
  rand hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_L_reg CFG_RND_LOSS_COS0_L;
  rand hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_H_reg CFG_RND_LOSS_COS0_H;
  rand hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_L_reg CFG_RND_LOSS_COS1_L;
  rand hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_H_reg CFG_RND_LOSS_COS1_H;
  rand hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_L_reg CFG_RND_LOSS_COS2_L;
  rand hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_H_reg CFG_RND_LOSS_COS2_H;
  rand hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_L_reg CFG_RND_LOSS_COS3_L;
  rand hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_H_reg CFG_RND_LOSS_COS3_H;
  rand hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_L_reg CFG_CNT_WIN_COS0_L;
  rand hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_H_reg CFG_CNT_WIN_COS0_H;
  rand hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_L_reg CFG_CNT_WIN_COS1_L;
  rand hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_H_reg CFG_CNT_WIN_COS1_H;
  rand hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_L_reg CFG_CNT_WIN_COS2_L;
  rand hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_H_reg CFG_CNT_WIN_COS2_H;
  rand hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_L_reg CFG_CNT_WIN_COS3_L;
  rand hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_H_reg CFG_CNT_WIN_COS3_H;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_L_reg CFG_LDB_SCHED_PERF_0_L;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_H_reg CFG_LDB_SCHED_PERF_0_H;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_L_reg CFG_LDB_SCHED_PERF_1_L;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_H_reg CFG_LDB_SCHED_PERF_1_H;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_L_reg CFG_LDB_SCHED_PERF_2_L;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_H_reg CFG_LDB_SCHED_PERF_2_H;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_L_reg CFG_LDB_SCHED_PERF_3_L;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_H_reg CFG_LDB_SCHED_PERF_3_H;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_L_reg CFG_LDB_SCHED_PERF_4_L;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_H_reg CFG_LDB_SCHED_PERF_4_H;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_L_reg CFG_LDB_SCHED_PERF_5_L;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_H_reg CFG_LDB_SCHED_PERF_5_H;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_L_reg CFG_LDB_SCHED_PERF_6_L;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_H_reg CFG_LDB_SCHED_PERF_6_H;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_L_reg CFG_LDB_SCHED_PERF_7_L;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_H_reg CFG_LDB_SCHED_PERF_7_H;
  rand hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_CONTROL_reg CFG_LDB_SCHED_PERF_CONTROL;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L;
  rand hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H_reg CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H;
  rand hqm_list_sel_pipe_bridge_CFG_CONTROL_SCHED_SLOT_COUNT_reg CFG_CONTROL_SCHED_SLOT_COUNT;
  rand hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_0_reg CFG_CONTROL_GENERAL_0;
  rand hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_1_reg CFG_CONTROL_GENERAL_1;
  rand hqm_list_sel_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg CFG_CONTROL_PIPELINE_CREDITS;
  rand hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg CFG_DIAGNOSTIC_AW_STATUS;
  rand hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_STATUS_0_reg CFG_DIAGNOSTIC_STATUS_0;
  rand hqm_list_sel_pipe_bridge_CFG_ERROR_INJECT_reg CFG_ERROR_INJECT;
  rand hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg CFG_HW_AGITATE_CONTROL;
  rand hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_SELECT_reg CFG_HW_AGITATE_SELECT;
  rand hqm_list_sel_pipe_bridge_CFG_INTERFACE_STATUS_reg CFG_INTERFACE_STATUS;
  rand hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg CFG_PIPE_HEALTH_HOLD_00;
  rand hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_01_reg CFG_PIPE_HEALTH_HOLD_01;
  rand hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg CFG_PIPE_HEALTH_VALID_00;
  rand hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_01_reg CFG_PIPE_HEALTH_VALID_01;
  rand hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE0_reg CFG_SMON0_COMPARE0;
  rand hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE1_reg CFG_SMON0_COMPARE1;
  rand hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION0_reg CFG_SMON0_CONFIGURATION0;
  rand hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION1_reg CFG_SMON0_CONFIGURATION1;
  rand hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER0_reg CFG_SMON0_ACTIVITYCOUNTER0;
  rand hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER1_reg CFG_SMON0_ACTIVITYCOUNTER1;
  rand hqm_list_sel_pipe_bridge_CFG_SMON0_MAXIMUM_TIMER_reg CFG_SMON0_MAXIMUM_TIMER;
  rand hqm_list_sel_pipe_bridge_CFG_SMON0_TIMER_reg CFG_SMON0_TIMER;
  rand hqm_list_sel_pipe_bridge_CFG_SYNDROME_HW_reg CFG_SYNDROME_HW;
  rand hqm_list_sel_pipe_bridge_CFG_UNIT_IDLE_reg CFG_UNIT_IDLE;
  rand hqm_list_sel_pipe_bridge_CFG_UNIT_TIMEOUT_reg CFG_UNIT_TIMEOUT;
  rand hqm_list_sel_pipe_bridge_CFG_PATCH_CONTROL_reg CFG_PATCH_CONTROL;

  `ovm_component_utils(hqm_list_sel_pipe_bridge_file)

  function new(string n, ovm_component p);
    super.new(n,p);
  endfunction

  // --------------------------
  function void build();
    regfilename = this.get_name();

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ2PRIOV[%0d]",i);
    `endif
    CFG_CQ2PRIOV[i] = hqm_list_sel_pipe_bridge_CFG_CQ2PRIOV_reg::type_id::create($psprintf("CFG_CQ2PRIOV[%0d]",i), this);
    CFG_CQ2PRIOV[i].set_cfg(16'h0, 16'h0, 16'h0, (4'h0 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ2PRIOV[i].set_space_addr("MSG",  (4'h0 + (i*4096)) );
    CFG_CQ2PRIOV[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ2PRIOV[i].set_space_addr("MEM-SB", (4'h0 + (i*4096)) );
    CFG_CQ2PRIOV[i].set_space_addr("MEM",  (4'h0 + (i*4096)) );
      CFG_CQ2PRIOV[i].set_space("MEM");
      CFG_CQ2PRIOV[i].set_msg_opcode("MEM-SB");
      CFG_CQ2PRIOV[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ2PRIOV[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ2PRIOV[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ2PRIOV[i].set_user_attribute("diag_reg", "0");
      CFG_CQ2PRIOV[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ2PRIOV[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ2PRIOV[%0d]:dont_test",i)) ) CFG_CQ2PRIOV[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ2PRIOV[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ2PRIOV[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ2QID0[%0d]",i);
    `endif
    CFG_CQ2QID0[i] = hqm_list_sel_pipe_bridge_CFG_CQ2QID0_reg::type_id::create($psprintf("CFG_CQ2QID0[%0d]",i), this);
    CFG_CQ2QID0[i].set_cfg(16'h0, 16'h0, 16'h0, (20'h80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ2QID0[i].set_space_addr("MSG",  (20'h80000 + (i*4096)) );
    CFG_CQ2QID0[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ2QID0[i].set_space_addr("MEM-SB", (20'h80000 + (i*4096)) );
    CFG_CQ2QID0[i].set_space_addr("MEM",  (20'h80000 + (i*4096)) );
      CFG_CQ2QID0[i].set_space("MEM");
      CFG_CQ2QID0[i].set_msg_opcode("MEM-SB");
      CFG_CQ2QID0[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ2QID0[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ2QID0[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ2QID0[i].set_user_attribute("diag_reg", "0");
      CFG_CQ2QID0[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ2QID0[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ2QID0[%0d]:dont_test",i)) ) CFG_CQ2QID0[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ2QID0[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ2QID0[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ2QID1[%0d]",i);
    `endif
    CFG_CQ2QID1[i] = hqm_list_sel_pipe_bridge_CFG_CQ2QID1_reg::type_id::create($psprintf("CFG_CQ2QID1[%0d]",i), this);
    CFG_CQ2QID1[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h100000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ2QID1[i].set_space_addr("MSG",  (24'h100000 + (i*4096)) );
    CFG_CQ2QID1[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ2QID1[i].set_space_addr("MEM-SB", (24'h100000 + (i*4096)) );
    CFG_CQ2QID1[i].set_space_addr("MEM",  (24'h100000 + (i*4096)) );
      CFG_CQ2QID1[i].set_space("MEM");
      CFG_CQ2QID1[i].set_msg_opcode("MEM-SB");
      CFG_CQ2QID1[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ2QID1[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ2QID1[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ2QID1[i].set_user_attribute("diag_reg", "0");
      CFG_CQ2QID1[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ2QID1[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ2QID1[%0d]:dont_test",i)) ) CFG_CQ2QID1[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ2QID1[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ2QID1[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_DIR_DISABLE[%0d]",i);
    `endif
    CFG_CQ_DIR_DISABLE[i] = hqm_list_sel_pipe_bridge_CFG_CQ_DIR_DISABLE_reg::type_id::create($psprintf("CFG_CQ_DIR_DISABLE[%0d]",i), this);
    CFG_CQ_DIR_DISABLE[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h180000 + (i *4096)), 32, 32'b00000000000000000000000000000001);
    CFG_CQ_DIR_DISABLE[i].set_space_addr("MSG",  (24'h180000 + (i*4096)) );
    CFG_CQ_DIR_DISABLE[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_DIR_DISABLE[i].set_space_addr("MEM-SB", (24'h180000 + (i*4096)) );
    CFG_CQ_DIR_DISABLE[i].set_space_addr("MEM",  (24'h180000 + (i*4096)) );
      CFG_CQ_DIR_DISABLE[i].set_space("MEM");
      CFG_CQ_DIR_DISABLE[i].set_msg_opcode("MEM-SB");
      CFG_CQ_DIR_DISABLE[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_DIR_DISABLE[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_DIR_DISABLE[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_DIR_DISABLE[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_DIR_DISABLE[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_DIR_DISABLE[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_DIR_DISABLE[%0d]:dont_test",i)) ) CFG_CQ_DIR_DISABLE[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_DIR_DISABLE[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_DIR_DISABLE[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_DIR_TOKEN_COUNT[%0d]",i);
    `endif
    CFG_CQ_DIR_TOKEN_COUNT[i] = hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_COUNT_reg::type_id::create($psprintf("CFG_CQ_DIR_TOKEN_COUNT[%0d]",i), this);
    CFG_CQ_DIR_TOKEN_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h200000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_DIR_TOKEN_COUNT[i].set_space_addr("MSG",  (24'h200000 + (i*4096)) );
    CFG_CQ_DIR_TOKEN_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_DIR_TOKEN_COUNT[i].set_space_addr("MEM-SB", (24'h200000 + (i*4096)) );
    CFG_CQ_DIR_TOKEN_COUNT[i].set_space_addr("MEM",  (24'h200000 + (i*4096)) );
      CFG_CQ_DIR_TOKEN_COUNT[i].set_space("MEM");
      CFG_CQ_DIR_TOKEN_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_CQ_DIR_TOKEN_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_DIR_TOKEN_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_DIR_TOKEN_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_DIR_TOKEN_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_DIR_TOKEN_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_DIR_TOKEN_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_DIR_TOKEN_COUNT[%0d]:dont_test",i)) ) CFG_CQ_DIR_TOKEN_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_DIR_TOKEN_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_DIR_TOKEN_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[%0d]",i);
    `endif
    CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i] = hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI_reg::type_id::create($psprintf("CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[%0d]",i), this);
    CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h280000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_space_addr("MSG",  (24'h280000 + (i*4096)) );
    CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_space_addr("MEM-SB", (24'h280000 + (i*4096)) );
    CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_space_addr("MEM",  (24'h280000 + (i*4096)) );
      CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_space("MEM");
      CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_msg_opcode("MEM-SB");
      CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[%0d]:dont_test",i)) ) CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_DIR_TOKEN_DEPTH_SELECT_DSI[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_DIR_TOT_SCH_CNTL[%0d]",i);
    `endif
    CFG_CQ_DIR_TOT_SCH_CNTL[i] = hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTL_reg::type_id::create($psprintf("CFG_CQ_DIR_TOT_SCH_CNTL[%0d]",i), this);
    CFG_CQ_DIR_TOT_SCH_CNTL[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h300000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_DIR_TOT_SCH_CNTL[i].set_space_addr("MSG",  (24'h300000 + (i*4096)) );
    CFG_CQ_DIR_TOT_SCH_CNTL[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_DIR_TOT_SCH_CNTL[i].set_space_addr("MEM-SB", (24'h300000 + (i*4096)) );
    CFG_CQ_DIR_TOT_SCH_CNTL[i].set_space_addr("MEM",  (24'h300000 + (i*4096)) );
      CFG_CQ_DIR_TOT_SCH_CNTL[i].set_space("MEM");
      CFG_CQ_DIR_TOT_SCH_CNTL[i].set_msg_opcode("MEM-SB");
      CFG_CQ_DIR_TOT_SCH_CNTL[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_DIR_TOT_SCH_CNTL[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_DIR_TOT_SCH_CNTL[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_DIR_TOT_SCH_CNTL[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_DIR_TOT_SCH_CNTL[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_DIR_TOT_SCH_CNTL[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_DIR_TOT_SCH_CNTL[%0d]:dont_test",i)) ) CFG_CQ_DIR_TOT_SCH_CNTL[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_DIR_TOT_SCH_CNTL[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_DIR_TOT_SCH_CNTL[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_DIR_TOT_SCH_CNTH[%0d]",i);
    `endif
    CFG_CQ_DIR_TOT_SCH_CNTH[i] = hqm_list_sel_pipe_bridge_CFG_CQ_DIR_TOT_SCH_CNTH_reg::type_id::create($psprintf("CFG_CQ_DIR_TOT_SCH_CNTH[%0d]",i), this);
    CFG_CQ_DIR_TOT_SCH_CNTH[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h380000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_DIR_TOT_SCH_CNTH[i].set_space_addr("MSG",  (24'h380000 + (i*4096)) );
    CFG_CQ_DIR_TOT_SCH_CNTH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_DIR_TOT_SCH_CNTH[i].set_space_addr("MEM-SB", (24'h380000 + (i*4096)) );
    CFG_CQ_DIR_TOT_SCH_CNTH[i].set_space_addr("MEM",  (24'h380000 + (i*4096)) );
      CFG_CQ_DIR_TOT_SCH_CNTH[i].set_space("MEM");
      CFG_CQ_DIR_TOT_SCH_CNTH[i].set_msg_opcode("MEM-SB");
      CFG_CQ_DIR_TOT_SCH_CNTH[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_DIR_TOT_SCH_CNTH[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_DIR_TOT_SCH_CNTH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_DIR_TOT_SCH_CNTH[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_DIR_TOT_SCH_CNTH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_DIR_TOT_SCH_CNTH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_DIR_TOT_SCH_CNTH[%0d]:dont_test",i)) ) CFG_CQ_DIR_TOT_SCH_CNTH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_DIR_TOT_SCH_CNTH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_DIR_TOT_SCH_CNTH[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_LDB_DISABLE[%0d]",i);
    `endif
    CFG_CQ_LDB_DISABLE[i] = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_DISABLE_reg::type_id::create($psprintf("CFG_CQ_LDB_DISABLE[%0d]",i), this);
    CFG_CQ_LDB_DISABLE[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h400000 + (i *4096)), 32, 32'b00000000000000000000000000000001);
    CFG_CQ_LDB_DISABLE[i].set_space_addr("MSG",  (24'h400000 + (i*4096)) );
    CFG_CQ_LDB_DISABLE[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_DISABLE[i].set_space_addr("MEM-SB", (24'h400000 + (i*4096)) );
    CFG_CQ_LDB_DISABLE[i].set_space_addr("MEM",  (24'h400000 + (i*4096)) );
      CFG_CQ_LDB_DISABLE[i].set_space("MEM");
      CFG_CQ_LDB_DISABLE[i].set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_DISABLE[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_DISABLE[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_DISABLE[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_DISABLE[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_DISABLE[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_DISABLE[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_LDB_DISABLE[%0d]:dont_test",i)) ) CFG_CQ_LDB_DISABLE[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_DISABLE[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_LDB_DISABLE[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_LDB_INFLIGHT_COUNT[%0d]",i);
    `endif
    CFG_CQ_LDB_INFLIGHT_COUNT[i] = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_COUNT_reg::type_id::create($psprintf("CFG_CQ_LDB_INFLIGHT_COUNT[%0d]",i), this);
    CFG_CQ_LDB_INFLIGHT_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h480000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_INFLIGHT_COUNT[i].set_space_addr("MSG",  (24'h480000 + (i*4096)) );
    CFG_CQ_LDB_INFLIGHT_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_INFLIGHT_COUNT[i].set_space_addr("MEM-SB", (24'h480000 + (i*4096)) );
    CFG_CQ_LDB_INFLIGHT_COUNT[i].set_space_addr("MEM",  (24'h480000 + (i*4096)) );
      CFG_CQ_LDB_INFLIGHT_COUNT[i].set_space("MEM");
      CFG_CQ_LDB_INFLIGHT_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_INFLIGHT_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_INFLIGHT_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_INFLIGHT_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_INFLIGHT_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_INFLIGHT_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_INFLIGHT_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_LDB_INFLIGHT_COUNT[%0d]:dont_test",i)) ) CFG_CQ_LDB_INFLIGHT_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_INFLIGHT_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_LDB_INFLIGHT_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_LDB_INFLIGHT_LIMIT[%0d]",i);
    `endif
    CFG_CQ_LDB_INFLIGHT_LIMIT[i] = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_LIMIT_reg::type_id::create($psprintf("CFG_CQ_LDB_INFLIGHT_LIMIT[%0d]",i), this);
    CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h500000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_space_addr("MSG",  (24'h500000 + (i*4096)) );
    CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_space_addr("MEM-SB", (24'h500000 + (i*4096)) );
    CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_space_addr("MEM",  (24'h500000 + (i*4096)) );
      CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_space("MEM");
      CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_LDB_INFLIGHT_LIMIT[%0d]:dont_test",i)) ) CFG_CQ_LDB_INFLIGHT_LIMIT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_INFLIGHT_LIMIT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_LDB_INFLIGHT_LIMIT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_LDB_INFLIGHT_THRESHOLD[%0d]",i);
    `endif
    CFG_CQ_LDB_INFLIGHT_THRESHOLD[i] = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_INFLIGHT_THRESHOLD_reg::type_id::create($psprintf("CFG_CQ_LDB_INFLIGHT_THRESHOLD[%0d]",i), this);
    CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h580000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_space_addr("MSG",  (24'h580000 + (i*4096)) );
    CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_space_addr("MEM-SB", (24'h580000 + (i*4096)) );
    CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_space_addr("MEM",  (24'h580000 + (i*4096)) );
      CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_space("MEM");
      CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_LDB_INFLIGHT_THRESHOLD[%0d]:dont_test",i)) ) CFG_CQ_LDB_INFLIGHT_THRESHOLD[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_INFLIGHT_THRESHOLD[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_LDB_INFLIGHT_THRESHOLD[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_LDB_TOKEN_COUNT[%0d]",i);
    `endif
    CFG_CQ_LDB_TOKEN_COUNT[i] = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_COUNT_reg::type_id::create($psprintf("CFG_CQ_LDB_TOKEN_COUNT[%0d]",i), this);
    CFG_CQ_LDB_TOKEN_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h600000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_TOKEN_COUNT[i].set_space_addr("MSG",  (24'h600000 + (i*4096)) );
    CFG_CQ_LDB_TOKEN_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_TOKEN_COUNT[i].set_space_addr("MEM-SB", (24'h600000 + (i*4096)) );
    CFG_CQ_LDB_TOKEN_COUNT[i].set_space_addr("MEM",  (24'h600000 + (i*4096)) );
      CFG_CQ_LDB_TOKEN_COUNT[i].set_space("MEM");
      CFG_CQ_LDB_TOKEN_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_TOKEN_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_TOKEN_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_TOKEN_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_TOKEN_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_TOKEN_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_TOKEN_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_LDB_TOKEN_COUNT[%0d]:dont_test",i)) ) CFG_CQ_LDB_TOKEN_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_TOKEN_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_LDB_TOKEN_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_LDB_TOKEN_DEPTH_SELECT[%0d]",i);
    `endif
    CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i] = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOKEN_DEPTH_SELECT_reg::type_id::create($psprintf("CFG_CQ_LDB_TOKEN_DEPTH_SELECT[%0d]",i), this);
    CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h680000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_space_addr("MSG",  (24'h680000 + (i*4096)) );
    CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_space_addr("MEM-SB", (24'h680000 + (i*4096)) );
    CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_space_addr("MEM",  (24'h680000 + (i*4096)) );
      CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_space("MEM");
      CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_LDB_TOKEN_DEPTH_SELECT[%0d]:dont_test",i)) ) CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_TOKEN_DEPTH_SELECT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_LDB_TOKEN_DEPTH_SELECT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_LDB_TOT_SCH_CNTL[%0d]",i);
    `endif
    CFG_CQ_LDB_TOT_SCH_CNTL[i] = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTL_reg::type_id::create($psprintf("CFG_CQ_LDB_TOT_SCH_CNTL[%0d]",i), this);
    CFG_CQ_LDB_TOT_SCH_CNTL[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h700000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_TOT_SCH_CNTL[i].set_space_addr("MSG",  (24'h700000 + (i*4096)) );
    CFG_CQ_LDB_TOT_SCH_CNTL[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_TOT_SCH_CNTL[i].set_space_addr("MEM-SB", (24'h700000 + (i*4096)) );
    CFG_CQ_LDB_TOT_SCH_CNTL[i].set_space_addr("MEM",  (24'h700000 + (i*4096)) );
      CFG_CQ_LDB_TOT_SCH_CNTL[i].set_space("MEM");
      CFG_CQ_LDB_TOT_SCH_CNTL[i].set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_TOT_SCH_CNTL[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_TOT_SCH_CNTL[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_TOT_SCH_CNTL[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_TOT_SCH_CNTL[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_TOT_SCH_CNTL[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_TOT_SCH_CNTL[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_LDB_TOT_SCH_CNTL[%0d]:dont_test",i)) ) CFG_CQ_LDB_TOT_SCH_CNTL[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_TOT_SCH_CNTL[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_LDB_TOT_SCH_CNTL[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_LDB_TOT_SCH_CNTH[%0d]",i);
    `endif
    CFG_CQ_LDB_TOT_SCH_CNTH[i] = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_SCH_CNTH_reg::type_id::create($psprintf("CFG_CQ_LDB_TOT_SCH_CNTH[%0d]",i), this);
    CFG_CQ_LDB_TOT_SCH_CNTH[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h780000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_TOT_SCH_CNTH[i].set_space_addr("MSG",  (24'h780000 + (i*4096)) );
    CFG_CQ_LDB_TOT_SCH_CNTH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_TOT_SCH_CNTH[i].set_space_addr("MEM-SB", (24'h780000 + (i*4096)) );
    CFG_CQ_LDB_TOT_SCH_CNTH[i].set_space_addr("MEM",  (24'h780000 + (i*4096)) );
      CFG_CQ_LDB_TOT_SCH_CNTH[i].set_space("MEM");
      CFG_CQ_LDB_TOT_SCH_CNTH[i].set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_TOT_SCH_CNTH[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_TOT_SCH_CNTH[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_TOT_SCH_CNTH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_TOT_SCH_CNTH[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_TOT_SCH_CNTH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_TOT_SCH_CNTH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_LDB_TOT_SCH_CNTH[%0d]:dont_test",i)) ) CFG_CQ_LDB_TOT_SCH_CNTH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_TOT_SCH_CNTH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_LDB_TOT_SCH_CNTH[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_DIR_MAX_DEPTH[%0d]",i);
    `endif
    CFG_QID_DIR_MAX_DEPTH[i] = hqm_list_sel_pipe_bridge_CFG_QID_DIR_MAX_DEPTH_reg::type_id::create($psprintf("CFG_QID_DIR_MAX_DEPTH[%0d]",i), this);
    CFG_QID_DIR_MAX_DEPTH[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h800000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_DIR_MAX_DEPTH[i].set_space_addr("MSG",  (24'h800000 + (i*4096)) );
    CFG_QID_DIR_MAX_DEPTH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_DIR_MAX_DEPTH[i].set_space_addr("MEM-SB", (24'h800000 + (i*4096)) );
    CFG_QID_DIR_MAX_DEPTH[i].set_space_addr("MEM",  (24'h800000 + (i*4096)) );
      CFG_QID_DIR_MAX_DEPTH[i].set_space("MEM");
      CFG_QID_DIR_MAX_DEPTH[i].set_msg_opcode("MEM-SB");
      CFG_QID_DIR_MAX_DEPTH[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_DIR_MAX_DEPTH[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_DIR_MAX_DEPTH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_DIR_MAX_DEPTH[i].set_user_attribute("diag_reg", "0");
      CFG_QID_DIR_MAX_DEPTH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_DIR_MAX_DEPTH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_DIR_MAX_DEPTH[%0d]:dont_test",i)) ) CFG_QID_DIR_MAX_DEPTH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_DIR_MAX_DEPTH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_DIR_MAX_DEPTH[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_DIR_TOT_ENQ_CNTL[%0d]",i);
    `endif
    CFG_QID_DIR_TOT_ENQ_CNTL[i] = hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTL_reg::type_id::create($psprintf("CFG_QID_DIR_TOT_ENQ_CNTL[%0d]",i), this);
    CFG_QID_DIR_TOT_ENQ_CNTL[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h880000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_DIR_TOT_ENQ_CNTL[i].set_space_addr("MSG",  (24'h880000 + (i*4096)) );
    CFG_QID_DIR_TOT_ENQ_CNTL[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_DIR_TOT_ENQ_CNTL[i].set_space_addr("MEM-SB", (24'h880000 + (i*4096)) );
    CFG_QID_DIR_TOT_ENQ_CNTL[i].set_space_addr("MEM",  (24'h880000 + (i*4096)) );
      CFG_QID_DIR_TOT_ENQ_CNTL[i].set_space("MEM");
      CFG_QID_DIR_TOT_ENQ_CNTL[i].set_msg_opcode("MEM-SB");
      CFG_QID_DIR_TOT_ENQ_CNTL[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_DIR_TOT_ENQ_CNTL[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_DIR_TOT_ENQ_CNTL[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_DIR_TOT_ENQ_CNTL[i].set_user_attribute("diag_reg", "0");
      CFG_QID_DIR_TOT_ENQ_CNTL[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_DIR_TOT_ENQ_CNTL[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_DIR_TOT_ENQ_CNTL[%0d]:dont_test",i)) ) CFG_QID_DIR_TOT_ENQ_CNTL[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_DIR_TOT_ENQ_CNTL[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_DIR_TOT_ENQ_CNTL[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_DIR_TOT_ENQ_CNTH[%0d]",i);
    `endif
    CFG_QID_DIR_TOT_ENQ_CNTH[i] = hqm_list_sel_pipe_bridge_CFG_QID_DIR_TOT_ENQ_CNTH_reg::type_id::create($psprintf("CFG_QID_DIR_TOT_ENQ_CNTH[%0d]",i), this);
    CFG_QID_DIR_TOT_ENQ_CNTH[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h900000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_DIR_TOT_ENQ_CNTH[i].set_space_addr("MSG",  (24'h900000 + (i*4096)) );
    CFG_QID_DIR_TOT_ENQ_CNTH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_DIR_TOT_ENQ_CNTH[i].set_space_addr("MEM-SB", (24'h900000 + (i*4096)) );
    CFG_QID_DIR_TOT_ENQ_CNTH[i].set_space_addr("MEM",  (24'h900000 + (i*4096)) );
      CFG_QID_DIR_TOT_ENQ_CNTH[i].set_space("MEM");
      CFG_QID_DIR_TOT_ENQ_CNTH[i].set_msg_opcode("MEM-SB");
      CFG_QID_DIR_TOT_ENQ_CNTH[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_DIR_TOT_ENQ_CNTH[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_DIR_TOT_ENQ_CNTH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_DIR_TOT_ENQ_CNTH[i].set_user_attribute("diag_reg", "0");
      CFG_QID_DIR_TOT_ENQ_CNTH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_DIR_TOT_ENQ_CNTH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_DIR_TOT_ENQ_CNTH[%0d]:dont_test",i)) ) CFG_QID_DIR_TOT_ENQ_CNTH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_DIR_TOT_ENQ_CNTH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_DIR_TOT_ENQ_CNTH[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_DIR_ENQUEUE_COUNT[%0d]",i);
    `endif
    CFG_QID_DIR_ENQUEUE_COUNT[i] = hqm_list_sel_pipe_bridge_CFG_QID_DIR_ENQUEUE_COUNT_reg::type_id::create($psprintf("CFG_QID_DIR_ENQUEUE_COUNT[%0d]",i), this);
    CFG_QID_DIR_ENQUEUE_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (24'h980000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_DIR_ENQUEUE_COUNT[i].set_space_addr("MSG",  (24'h980000 + (i*4096)) );
    CFG_QID_DIR_ENQUEUE_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_DIR_ENQUEUE_COUNT[i].set_space_addr("MEM-SB", (24'h980000 + (i*4096)) );
    CFG_QID_DIR_ENQUEUE_COUNT[i].set_space_addr("MEM",  (24'h980000 + (i*4096)) );
      CFG_QID_DIR_ENQUEUE_COUNT[i].set_space("MEM");
      CFG_QID_DIR_ENQUEUE_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_QID_DIR_ENQUEUE_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_DIR_ENQUEUE_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_DIR_ENQUEUE_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_DIR_ENQUEUE_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_QID_DIR_ENQUEUE_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_DIR_ENQUEUE_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_DIR_ENQUEUE_COUNT[%0d]:dont_test",i)) ) CFG_QID_DIR_ENQUEUE_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_DIR_ENQUEUE_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_DIR_ENQUEUE_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_DIR_QID_DPTH_THRSH[%0d]",i);
    `endif
    CFG_DIR_QID_DPTH_THRSH[i] = hqm_list_sel_pipe_bridge_CFG_DIR_QID_DPTH_THRSH_reg::type_id::create($psprintf("CFG_DIR_QID_DPTH_THRSH[%0d]",i), this);
    CFG_DIR_QID_DPTH_THRSH[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0A00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_DIR_QID_DPTH_THRSH[i].set_space_addr("MSG",  (28'h0A00000 + (i*4096)) );
    CFG_DIR_QID_DPTH_THRSH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_DIR_QID_DPTH_THRSH[i].set_space_addr("MEM-SB", (24'hA00000 + (i*4096)) );
    CFG_DIR_QID_DPTH_THRSH[i].set_space_addr("MEM",  (28'h0A00000 + (i*4096)) );
      CFG_DIR_QID_DPTH_THRSH[i].set_space("MEM");
      CFG_DIR_QID_DPTH_THRSH[i].set_msg_opcode("MEM-SB");
      CFG_DIR_QID_DPTH_THRSH[i].set_fid(4'h0, "MEM-SB");
  	CFG_DIR_QID_DPTH_THRSH[i].set_bar(4'h2, "MEM-SB");
      CFG_DIR_QID_DPTH_THRSH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIR_QID_DPTH_THRSH[i].set_user_attribute("diag_reg", "0");
      CFG_DIR_QID_DPTH_THRSH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_DIR_QID_DPTH_THRSH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_DIR_QID_DPTH_THRSH[%0d]:dont_test",i)) ) CFG_DIR_QID_DPTH_THRSH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_DIR_QID_DPTH_THRSH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_DIR_QID_DPTH_THRSH[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_LDB_WU_COUNT[%0d]",i);
    `endif
    CFG_CQ_LDB_WU_COUNT[i] = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_COUNT_reg::type_id::create($psprintf("CFG_CQ_LDB_WU_COUNT[%0d]",i), this);
    CFG_CQ_LDB_WU_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0A80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_WU_COUNT[i].set_space_addr("MSG",  (28'h0A80000 + (i*4096)) );
    CFG_CQ_LDB_WU_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_WU_COUNT[i].set_space_addr("MEM-SB", (24'hA80000 + (i*4096)) );
    CFG_CQ_LDB_WU_COUNT[i].set_space_addr("MEM",  (28'h0A80000 + (i*4096)) );
      CFG_CQ_LDB_WU_COUNT[i].set_space("MEM");
      CFG_CQ_LDB_WU_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_WU_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_WU_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_WU_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_WU_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_WU_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_WU_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_LDB_WU_COUNT[%0d]:dont_test",i)) ) CFG_CQ_LDB_WU_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_WU_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_LDB_WU_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<64; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_CQ_LDB_WU_LIMIT[%0d]",i);
    `endif
    CFG_CQ_LDB_WU_LIMIT[i] = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_WU_LIMIT_reg::type_id::create($psprintf("CFG_CQ_LDB_WU_LIMIT[%0d]",i), this);
    CFG_CQ_LDB_WU_LIMIT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0B00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_WU_LIMIT[i].set_space_addr("MSG",  (28'h0B00000 + (i*4096)) );
    CFG_CQ_LDB_WU_LIMIT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_WU_LIMIT[i].set_space_addr("MEM-SB", (24'hB00000 + (i*4096)) );
    CFG_CQ_LDB_WU_LIMIT[i].set_space_addr("MEM",  (28'h0B00000 + (i*4096)) );
      CFG_CQ_LDB_WU_LIMIT[i].set_space("MEM");
      CFG_CQ_LDB_WU_LIMIT[i].set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_WU_LIMIT[i].set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_WU_LIMIT[i].set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_WU_LIMIT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_WU_LIMIT[i].set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_WU_LIMIT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_WU_LIMIT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_CQ_LDB_WU_LIMIT[%0d]:dont_test",i)) ) CFG_CQ_LDB_WU_LIMIT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_WU_LIMIT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_CQ_LDB_WU_LIMIT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_AQED_ACTIVE_COUNT[%0d]",i);
    `endif
    CFG_QID_AQED_ACTIVE_COUNT[i] = hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_COUNT_reg::type_id::create($psprintf("CFG_QID_AQED_ACTIVE_COUNT[%0d]",i), this);
    CFG_QID_AQED_ACTIVE_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0B80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_AQED_ACTIVE_COUNT[i].set_space_addr("MSG",  (28'h0B80000 + (i*4096)) );
    CFG_QID_AQED_ACTIVE_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_AQED_ACTIVE_COUNT[i].set_space_addr("MEM-SB", (24'hB80000 + (i*4096)) );
    CFG_QID_AQED_ACTIVE_COUNT[i].set_space_addr("MEM",  (28'h0B80000 + (i*4096)) );
      CFG_QID_AQED_ACTIVE_COUNT[i].set_space("MEM");
      CFG_QID_AQED_ACTIVE_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_QID_AQED_ACTIVE_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_AQED_ACTIVE_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_AQED_ACTIVE_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_AQED_ACTIVE_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_QID_AQED_ACTIVE_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_AQED_ACTIVE_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_AQED_ACTIVE_COUNT[%0d]:dont_test",i)) ) CFG_QID_AQED_ACTIVE_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_AQED_ACTIVE_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_AQED_ACTIVE_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_AQED_ACTIVE_LIMIT[%0d]",i);
    `endif
    CFG_QID_AQED_ACTIVE_LIMIT[i] = hqm_list_sel_pipe_bridge_CFG_QID_AQED_ACTIVE_LIMIT_reg::type_id::create($psprintf("CFG_QID_AQED_ACTIVE_LIMIT[%0d]",i), this);
    CFG_QID_AQED_ACTIVE_LIMIT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0C00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_AQED_ACTIVE_LIMIT[i].set_space_addr("MSG",  (28'h0C00000 + (i*4096)) );
    CFG_QID_AQED_ACTIVE_LIMIT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_AQED_ACTIVE_LIMIT[i].set_space_addr("MEM-SB", (24'hC00000 + (i*4096)) );
    CFG_QID_AQED_ACTIVE_LIMIT[i].set_space_addr("MEM",  (28'h0C00000 + (i*4096)) );
      CFG_QID_AQED_ACTIVE_LIMIT[i].set_space("MEM");
      CFG_QID_AQED_ACTIVE_LIMIT[i].set_msg_opcode("MEM-SB");
      CFG_QID_AQED_ACTIVE_LIMIT[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_AQED_ACTIVE_LIMIT[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_AQED_ACTIVE_LIMIT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_AQED_ACTIVE_LIMIT[i].set_user_attribute("diag_reg", "0");
      CFG_QID_AQED_ACTIVE_LIMIT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_AQED_ACTIVE_LIMIT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_AQED_ACTIVE_LIMIT[%0d]:dont_test",i)) ) CFG_QID_AQED_ACTIVE_LIMIT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_AQED_ACTIVE_LIMIT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_AQED_ACTIVE_LIMIT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_ATM_TOT_ENQ_CNTL[%0d]",i);
    `endif
    CFG_QID_ATM_TOT_ENQ_CNTL[i] = hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTL_reg::type_id::create($psprintf("CFG_QID_ATM_TOT_ENQ_CNTL[%0d]",i), this);
    CFG_QID_ATM_TOT_ENQ_CNTL[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0C80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_ATM_TOT_ENQ_CNTL[i].set_space_addr("MSG",  (28'h0C80000 + (i*4096)) );
    CFG_QID_ATM_TOT_ENQ_CNTL[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_ATM_TOT_ENQ_CNTL[i].set_space_addr("MEM-SB", (24'hC80000 + (i*4096)) );
    CFG_QID_ATM_TOT_ENQ_CNTL[i].set_space_addr("MEM",  (28'h0C80000 + (i*4096)) );
      CFG_QID_ATM_TOT_ENQ_CNTL[i].set_space("MEM");
      CFG_QID_ATM_TOT_ENQ_CNTL[i].set_msg_opcode("MEM-SB");
      CFG_QID_ATM_TOT_ENQ_CNTL[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_ATM_TOT_ENQ_CNTL[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_ATM_TOT_ENQ_CNTL[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_ATM_TOT_ENQ_CNTL[i].set_user_attribute("diag_reg", "0");
      CFG_QID_ATM_TOT_ENQ_CNTL[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_ATM_TOT_ENQ_CNTL[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_ATM_TOT_ENQ_CNTL[%0d]:dont_test",i)) ) CFG_QID_ATM_TOT_ENQ_CNTL[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_ATM_TOT_ENQ_CNTL[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_ATM_TOT_ENQ_CNTL[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_ATM_TOT_ENQ_CNTH[%0d]",i);
    `endif
    CFG_QID_ATM_TOT_ENQ_CNTH[i] = hqm_list_sel_pipe_bridge_CFG_QID_ATM_TOT_ENQ_CNTH_reg::type_id::create($psprintf("CFG_QID_ATM_TOT_ENQ_CNTH[%0d]",i), this);
    CFG_QID_ATM_TOT_ENQ_CNTH[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0D00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_ATM_TOT_ENQ_CNTH[i].set_space_addr("MSG",  (28'h0D00000 + (i*4096)) );
    CFG_QID_ATM_TOT_ENQ_CNTH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_ATM_TOT_ENQ_CNTH[i].set_space_addr("MEM-SB", (24'hD00000 + (i*4096)) );
    CFG_QID_ATM_TOT_ENQ_CNTH[i].set_space_addr("MEM",  (28'h0D00000 + (i*4096)) );
      CFG_QID_ATM_TOT_ENQ_CNTH[i].set_space("MEM");
      CFG_QID_ATM_TOT_ENQ_CNTH[i].set_msg_opcode("MEM-SB");
      CFG_QID_ATM_TOT_ENQ_CNTH[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_ATM_TOT_ENQ_CNTH[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_ATM_TOT_ENQ_CNTH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_ATM_TOT_ENQ_CNTH[i].set_user_attribute("diag_reg", "0");
      CFG_QID_ATM_TOT_ENQ_CNTH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_ATM_TOT_ENQ_CNTH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_ATM_TOT_ENQ_CNTH[%0d]:dont_test",i)) ) CFG_QID_ATM_TOT_ENQ_CNTH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_ATM_TOT_ENQ_CNTH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_ATM_TOT_ENQ_CNTH[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_ATQ_ENQUEUE_COUNT[%0d]",i);
    `endif
    CFG_QID_ATQ_ENQUEUE_COUNT[i] = hqm_list_sel_pipe_bridge_CFG_QID_ATQ_ENQUEUE_COUNT_reg::type_id::create($psprintf("CFG_QID_ATQ_ENQUEUE_COUNT[%0d]",i), this);
    CFG_QID_ATQ_ENQUEUE_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0D80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_ATQ_ENQUEUE_COUNT[i].set_space_addr("MSG",  (28'h0D80000 + (i*4096)) );
    CFG_QID_ATQ_ENQUEUE_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_ATQ_ENQUEUE_COUNT[i].set_space_addr("MEM-SB", (24'hD80000 + (i*4096)) );
    CFG_QID_ATQ_ENQUEUE_COUNT[i].set_space_addr("MEM",  (28'h0D80000 + (i*4096)) );
      CFG_QID_ATQ_ENQUEUE_COUNT[i].set_space("MEM");
      CFG_QID_ATQ_ENQUEUE_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_QID_ATQ_ENQUEUE_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_ATQ_ENQUEUE_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_ATQ_ENQUEUE_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_ATQ_ENQUEUE_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_QID_ATQ_ENQUEUE_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_ATQ_ENQUEUE_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_ATQ_ENQUEUE_COUNT[%0d]:dont_test",i)) ) CFG_QID_ATQ_ENQUEUE_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_ATQ_ENQUEUE_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_ATQ_ENQUEUE_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_ENQUEUE_COUNT[%0d]",i);
    `endif
    CFG_QID_LDB_ENQUEUE_COUNT[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_ENQUEUE_COUNT_reg::type_id::create($psprintf("CFG_QID_LDB_ENQUEUE_COUNT[%0d]",i), this);
    CFG_QID_LDB_ENQUEUE_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0E00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_ENQUEUE_COUNT[i].set_space_addr("MSG",  (28'h0E00000 + (i*4096)) );
    CFG_QID_LDB_ENQUEUE_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_ENQUEUE_COUNT[i].set_space_addr("MEM-SB", (24'hE00000 + (i*4096)) );
    CFG_QID_LDB_ENQUEUE_COUNT[i].set_space_addr("MEM",  (28'h0E00000 + (i*4096)) );
      CFG_QID_LDB_ENQUEUE_COUNT[i].set_space("MEM");
      CFG_QID_LDB_ENQUEUE_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_ENQUEUE_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_ENQUEUE_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_ENQUEUE_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_ENQUEUE_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_ENQUEUE_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_ENQUEUE_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_ENQUEUE_COUNT[%0d]:dont_test",i)) ) CFG_QID_LDB_ENQUEUE_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_ENQUEUE_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_ENQUEUE_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_INFLIGHT_COUNT[%0d]",i);
    `endif
    CFG_QID_LDB_INFLIGHT_COUNT[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_COUNT_reg::type_id::create($psprintf("CFG_QID_LDB_INFLIGHT_COUNT[%0d]",i), this);
    CFG_QID_LDB_INFLIGHT_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0E80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_INFLIGHT_COUNT[i].set_space_addr("MSG",  (28'h0E80000 + (i*4096)) );
    CFG_QID_LDB_INFLIGHT_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_INFLIGHT_COUNT[i].set_space_addr("MEM-SB", (24'hE80000 + (i*4096)) );
    CFG_QID_LDB_INFLIGHT_COUNT[i].set_space_addr("MEM",  (28'h0E80000 + (i*4096)) );
      CFG_QID_LDB_INFLIGHT_COUNT[i].set_space("MEM");
      CFG_QID_LDB_INFLIGHT_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_INFLIGHT_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_INFLIGHT_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_INFLIGHT_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_INFLIGHT_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_INFLIGHT_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_INFLIGHT_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_INFLIGHT_COUNT[%0d]:dont_test",i)) ) CFG_QID_LDB_INFLIGHT_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_INFLIGHT_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_INFLIGHT_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_INFLIGHT_LIMIT[%0d]",i);
    `endif
    CFG_QID_LDB_INFLIGHT_LIMIT[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_INFLIGHT_LIMIT_reg::type_id::create($psprintf("CFG_QID_LDB_INFLIGHT_LIMIT[%0d]",i), this);
    CFG_QID_LDB_INFLIGHT_LIMIT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0F00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_INFLIGHT_LIMIT[i].set_space_addr("MSG",  (28'h0F00000 + (i*4096)) );
    CFG_QID_LDB_INFLIGHT_LIMIT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_INFLIGHT_LIMIT[i].set_space_addr("MEM-SB", (24'hF00000 + (i*4096)) );
    CFG_QID_LDB_INFLIGHT_LIMIT[i].set_space_addr("MEM",  (28'h0F00000 + (i*4096)) );
      CFG_QID_LDB_INFLIGHT_LIMIT[i].set_space("MEM");
      CFG_QID_LDB_INFLIGHT_LIMIT[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_INFLIGHT_LIMIT[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_INFLIGHT_LIMIT[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_INFLIGHT_LIMIT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_INFLIGHT_LIMIT[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_INFLIGHT_LIMIT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_INFLIGHT_LIMIT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_INFLIGHT_LIMIT[%0d]:dont_test",i)) ) CFG_QID_LDB_INFLIGHT_LIMIT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_INFLIGHT_LIMIT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_INFLIGHT_LIMIT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_00[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_00[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_00_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_00[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_00[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h0F80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_00[i].set_space_addr("MSG",  (28'h0F80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_00[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_00[i].set_space_addr("MEM-SB", (24'hF80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_00[i].set_space_addr("MEM",  (28'h0F80000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_00[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_00[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_00[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_00[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_00[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_00[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_00[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_00[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_00[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_00[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_00[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_00[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_01[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_01[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_01_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_01[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_01[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1000000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_01[i].set_space_addr("MSG",  (28'h1000000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_01[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_01[i].set_space_addr("MEM-SB", (28'h1000000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_01[i].set_space_addr("MEM",  (28'h1000000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_01[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_01[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_01[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_01[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_01[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_01[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_01[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_01[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_01[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_01[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_01[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_01[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_02[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_02[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_02_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_02[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_02[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1080000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_02[i].set_space_addr("MSG",  (28'h1080000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_02[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_02[i].set_space_addr("MEM-SB", (28'h1080000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_02[i].set_space_addr("MEM",  (28'h1080000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_02[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_02[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_02[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_02[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_02[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_02[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_02[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_02[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_02[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_02[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_02[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_02[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_03[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_03[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_03_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_03[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_03[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1100000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_03[i].set_space_addr("MSG",  (28'h1100000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_03[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_03[i].set_space_addr("MEM-SB", (28'h1100000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_03[i].set_space_addr("MEM",  (28'h1100000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_03[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_03[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_03[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_03[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_03[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_03[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_03[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_03[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_03[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_03[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_03[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_03[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_04[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_04[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_04_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_04[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_04[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1180000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_04[i].set_space_addr("MSG",  (28'h1180000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_04[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_04[i].set_space_addr("MEM-SB", (28'h1180000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_04[i].set_space_addr("MEM",  (28'h1180000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_04[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_04[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_04[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_04[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_04[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_04[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_04[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_04[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_04[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_04[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_04[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_04[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_05[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_05[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_05_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_05[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_05[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1200000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_05[i].set_space_addr("MSG",  (28'h1200000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_05[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_05[i].set_space_addr("MEM-SB", (28'h1200000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_05[i].set_space_addr("MEM",  (28'h1200000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_05[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_05[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_05[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_05[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_05[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_05[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_05[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_05[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_05[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_05[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_05[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_05[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_06[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_06[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_06_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_06[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_06[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1280000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_06[i].set_space_addr("MSG",  (28'h1280000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_06[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_06[i].set_space_addr("MEM-SB", (28'h1280000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_06[i].set_space_addr("MEM",  (28'h1280000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_06[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_06[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_06[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_06[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_06[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_06[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_06[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_06[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_06[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_06[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_06[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_06[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_07[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_07[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_07_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_07[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_07[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1300000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_07[i].set_space_addr("MSG",  (28'h1300000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_07[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_07[i].set_space_addr("MEM-SB", (28'h1300000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_07[i].set_space_addr("MEM",  (28'h1300000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_07[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_07[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_07[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_07[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_07[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_07[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_07[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_07[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_07[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_07[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_07[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_07[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_08[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_08[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_08_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_08[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_08[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1380000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_08[i].set_space_addr("MSG",  (28'h1380000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_08[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_08[i].set_space_addr("MEM-SB", (28'h1380000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_08[i].set_space_addr("MEM",  (28'h1380000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_08[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_08[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_08[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_08[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_08[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_08[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_08[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_08[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_08[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_08[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_08[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_08[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_09[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_09[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_09_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_09[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_09[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1400000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_09[i].set_space_addr("MSG",  (28'h1400000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_09[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_09[i].set_space_addr("MEM-SB", (28'h1400000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_09[i].set_space_addr("MEM",  (28'h1400000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_09[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_09[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_09[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_09[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_09[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_09[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_09[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_09[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_09[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_09[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_09[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_09[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_10[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_10[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_10_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_10[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_10[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1480000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_10[i].set_space_addr("MSG",  (28'h1480000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_10[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_10[i].set_space_addr("MEM-SB", (28'h1480000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_10[i].set_space_addr("MEM",  (28'h1480000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_10[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_10[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_10[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_10[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_10[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_10[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_10[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_10[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_10[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_10[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_10[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_10[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_11[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_11[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_11_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_11[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_11[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1500000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_11[i].set_space_addr("MSG",  (28'h1500000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_11[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_11[i].set_space_addr("MEM-SB", (28'h1500000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_11[i].set_space_addr("MEM",  (28'h1500000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_11[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_11[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_11[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_11[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_11[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_11[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_11[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_11[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_11[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_11[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_11[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_11[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_12[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_12[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_12_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_12[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_12[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1580000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_12[i].set_space_addr("MSG",  (28'h1580000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_12[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_12[i].set_space_addr("MEM-SB", (28'h1580000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_12[i].set_space_addr("MEM",  (28'h1580000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_12[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_12[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_12[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_12[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_12[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_12[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_12[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_12[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_12[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_12[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_12[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_12[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_13[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_13[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_13_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_13[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_13[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1600000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_13[i].set_space_addr("MSG",  (28'h1600000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_13[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_13[i].set_space_addr("MEM-SB", (28'h1600000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_13[i].set_space_addr("MEM",  (28'h1600000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_13[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_13[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_13[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_13[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_13[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_13[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_13[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_13[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_13[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_13[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_13[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_13[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_14[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_14[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_14_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_14[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_14[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1680000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_14[i].set_space_addr("MSG",  (28'h1680000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_14[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_14[i].set_space_addr("MEM-SB", (28'h1680000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_14[i].set_space_addr("MEM",  (28'h1680000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_14[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_14[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_14[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_14[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_14[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_14[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_14[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_14[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_14[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_14[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_14[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_14[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX_15[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX_15[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX_15_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX_15[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX_15[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1700000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX_15[i].set_space_addr("MSG",  (28'h1700000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_15[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX_15[i].set_space_addr("MEM-SB", (28'h1700000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX_15[i].set_space_addr("MEM",  (28'h1700000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX_15[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX_15[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_15[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX_15[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX_15[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX_15[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX_15[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX_15[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX_15[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX_15[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX_15[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX_15[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_00[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_00[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_00_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_00[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_00[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1780000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_00[i].set_space_addr("MSG",  (28'h1780000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_00[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_00[i].set_space_addr("MEM-SB", (28'h1780000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_00[i].set_space_addr("MEM",  (28'h1780000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_00[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_00[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_00[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_00[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_00[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_00[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_00[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_00[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_00[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_00[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_00[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_00[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_01[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_01[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_01_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_01[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_01[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1800000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_01[i].set_space_addr("MSG",  (28'h1800000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_01[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_01[i].set_space_addr("MEM-SB", (28'h1800000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_01[i].set_space_addr("MEM",  (28'h1800000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_01[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_01[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_01[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_01[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_01[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_01[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_01[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_01[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_01[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_01[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_01[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_01[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_02[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_02[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_02_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_02[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_02[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1880000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_02[i].set_space_addr("MSG",  (28'h1880000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_02[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_02[i].set_space_addr("MEM-SB", (28'h1880000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_02[i].set_space_addr("MEM",  (28'h1880000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_02[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_02[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_02[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_02[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_02[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_02[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_02[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_02[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_02[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_02[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_02[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_02[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_03[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_03[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_03_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_03[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_03[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1900000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_03[i].set_space_addr("MSG",  (28'h1900000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_03[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_03[i].set_space_addr("MEM-SB", (28'h1900000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_03[i].set_space_addr("MEM",  (28'h1900000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_03[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_03[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_03[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_03[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_03[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_03[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_03[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_03[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_03[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_03[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_03[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_03[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_04[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_04[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_04_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_04[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_04[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1980000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_04[i].set_space_addr("MSG",  (28'h1980000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_04[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_04[i].set_space_addr("MEM-SB", (28'h1980000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_04[i].set_space_addr("MEM",  (28'h1980000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_04[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_04[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_04[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_04[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_04[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_04[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_04[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_04[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_04[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_04[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_04[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_04[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_05[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_05[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_05_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_05[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_05[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1A00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_05[i].set_space_addr("MSG",  (28'h1A00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_05[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_05[i].set_space_addr("MEM-SB", (28'h1A00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_05[i].set_space_addr("MEM",  (28'h1A00000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_05[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_05[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_05[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_05[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_05[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_05[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_05[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_05[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_05[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_05[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_05[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_05[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_06[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_06[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_06_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_06[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_06[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1A80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_06[i].set_space_addr("MSG",  (28'h1A80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_06[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_06[i].set_space_addr("MEM-SB", (28'h1A80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_06[i].set_space_addr("MEM",  (28'h1A80000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_06[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_06[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_06[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_06[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_06[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_06[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_06[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_06[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_06[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_06[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_06[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_06[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_07[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_07[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_07_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_07[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_07[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1B00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_07[i].set_space_addr("MSG",  (28'h1B00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_07[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_07[i].set_space_addr("MEM-SB", (28'h1B00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_07[i].set_space_addr("MEM",  (28'h1B00000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_07[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_07[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_07[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_07[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_07[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_07[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_07[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_07[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_07[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_07[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_07[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_07[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_08[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_08[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_08_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_08[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_08[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1B80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_08[i].set_space_addr("MSG",  (28'h1B80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_08[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_08[i].set_space_addr("MEM-SB", (28'h1B80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_08[i].set_space_addr("MEM",  (28'h1B80000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_08[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_08[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_08[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_08[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_08[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_08[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_08[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_08[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_08[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_08[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_08[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_08[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_09[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_09[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_09_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_09[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_09[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1C00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_09[i].set_space_addr("MSG",  (28'h1C00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_09[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_09[i].set_space_addr("MEM-SB", (28'h1C00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_09[i].set_space_addr("MEM",  (28'h1C00000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_09[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_09[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_09[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_09[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_09[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_09[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_09[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_09[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_09[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_09[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_09[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_09[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_10[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_10[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_10_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_10[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_10[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1C80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_10[i].set_space_addr("MSG",  (28'h1C80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_10[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_10[i].set_space_addr("MEM-SB", (28'h1C80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_10[i].set_space_addr("MEM",  (28'h1C80000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_10[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_10[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_10[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_10[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_10[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_10[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_10[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_10[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_10[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_10[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_10[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_10[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_11[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_11[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_11_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_11[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_11[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1D00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_11[i].set_space_addr("MSG",  (28'h1D00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_11[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_11[i].set_space_addr("MEM-SB", (28'h1D00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_11[i].set_space_addr("MEM",  (28'h1D00000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_11[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_11[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_11[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_11[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_11[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_11[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_11[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_11[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_11[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_11[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_11[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_11[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_12[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_12[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_12_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_12[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_12[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1D80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_12[i].set_space_addr("MSG",  (28'h1D80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_12[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_12[i].set_space_addr("MEM-SB", (28'h1D80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_12[i].set_space_addr("MEM",  (28'h1D80000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_12[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_12[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_12[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_12[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_12[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_12[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_12[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_12[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_12[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_12[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_12[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_12[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_13[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_13[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_13_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_13[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_13[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1E00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_13[i].set_space_addr("MSG",  (28'h1E00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_13[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_13[i].set_space_addr("MEM-SB", (28'h1E00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_13[i].set_space_addr("MEM",  (28'h1E00000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_13[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_13[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_13[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_13[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_13[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_13[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_13[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_13[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_13[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_13[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_13[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_13[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_14[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_14[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_14_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_14[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_14[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1E80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_14[i].set_space_addr("MSG",  (28'h1E80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_14[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_14[i].set_space_addr("MEM-SB", (28'h1E80000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_14[i].set_space_addr("MEM",  (28'h1E80000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_14[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_14[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_14[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_14[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_14[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_14[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_14[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_14[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_14[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_14[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_14[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_14[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_QID2CQIDIX2_15[%0d]",i);
    `endif
    CFG_QID_LDB_QID2CQIDIX2_15[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_QID2CQIDIX2_15_reg::type_id::create($psprintf("CFG_QID_LDB_QID2CQIDIX2_15[%0d]",i), this);
    CFG_QID_LDB_QID2CQIDIX2_15[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1F00000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_QID2CQIDIX2_15[i].set_space_addr("MSG",  (28'h1F00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_15[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_QID2CQIDIX2_15[i].set_space_addr("MEM-SB", (28'h1F00000 + (i*4096)) );
    CFG_QID_LDB_QID2CQIDIX2_15[i].set_space_addr("MEM",  (28'h1F00000 + (i*4096)) );
      CFG_QID_LDB_QID2CQIDIX2_15[i].set_space("MEM");
      CFG_QID_LDB_QID2CQIDIX2_15[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_15[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_QID2CQIDIX2_15[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_QID2CQIDIX2_15[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_QID2CQIDIX2_15[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_QID2CQIDIX2_15[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_QID2CQIDIX2_15[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_QID2CQIDIX2_15[%0d]:dont_test",i)) ) CFG_QID_LDB_QID2CQIDIX2_15[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_QID2CQIDIX2_15[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_QID2CQIDIX2_15[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_LDB_REPLAY_COUNT[%0d]",i);
    `endif
    CFG_QID_LDB_REPLAY_COUNT[i] = hqm_list_sel_pipe_bridge_CFG_QID_LDB_REPLAY_COUNT_reg::type_id::create($psprintf("CFG_QID_LDB_REPLAY_COUNT[%0d]",i), this);
    CFG_QID_LDB_REPLAY_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h1F80000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_LDB_REPLAY_COUNT[i].set_space_addr("MSG",  (28'h1F80000 + (i*4096)) );
    CFG_QID_LDB_REPLAY_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_LDB_REPLAY_COUNT[i].set_space_addr("MEM-SB", (28'h1F80000 + (i*4096)) );
    CFG_QID_LDB_REPLAY_COUNT[i].set_space_addr("MEM",  (28'h1F80000 + (i*4096)) );
      CFG_QID_LDB_REPLAY_COUNT[i].set_space("MEM");
      CFG_QID_LDB_REPLAY_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_QID_LDB_REPLAY_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_LDB_REPLAY_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_LDB_REPLAY_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_LDB_REPLAY_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_QID_LDB_REPLAY_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_LDB_REPLAY_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_LDB_REPLAY_COUNT[%0d]:dont_test",i)) ) CFG_QID_LDB_REPLAY_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_LDB_REPLAY_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_LDB_REPLAY_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_DIR_REPLAY_COUNT[%0d]",i);
    `endif
    CFG_QID_DIR_REPLAY_COUNT[i] = hqm_list_sel_pipe_bridge_CFG_QID_DIR_REPLAY_COUNT_reg::type_id::create($psprintf("CFG_QID_DIR_REPLAY_COUNT[%0d]",i), this);
    CFG_QID_DIR_REPLAY_COUNT[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h2000000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_DIR_REPLAY_COUNT[i].set_space_addr("MSG",  (28'h2000000 + (i*4096)) );
    CFG_QID_DIR_REPLAY_COUNT[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_DIR_REPLAY_COUNT[i].set_space_addr("MEM-SB", (28'h2000000 + (i*4096)) );
    CFG_QID_DIR_REPLAY_COUNT[i].set_space_addr("MEM",  (28'h2000000 + (i*4096)) );
      CFG_QID_DIR_REPLAY_COUNT[i].set_space("MEM");
      CFG_QID_DIR_REPLAY_COUNT[i].set_msg_opcode("MEM-SB");
      CFG_QID_DIR_REPLAY_COUNT[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_DIR_REPLAY_COUNT[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_DIR_REPLAY_COUNT[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_DIR_REPLAY_COUNT[i].set_user_attribute("diag_reg", "0");
      CFG_QID_DIR_REPLAY_COUNT[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_DIR_REPLAY_COUNT[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_DIR_REPLAY_COUNT[%0d]:dont_test",i)) ) CFG_QID_DIR_REPLAY_COUNT[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_DIR_REPLAY_COUNT[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_DIR_REPLAY_COUNT[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_NALDB_MAX_DEPTH[%0d]",i);
    `endif
    CFG_QID_NALDB_MAX_DEPTH[i] = hqm_list_sel_pipe_bridge_CFG_QID_NALDB_MAX_DEPTH_reg::type_id::create($psprintf("CFG_QID_NALDB_MAX_DEPTH[%0d]",i), this);
    CFG_QID_NALDB_MAX_DEPTH[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h2080000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_NALDB_MAX_DEPTH[i].set_space_addr("MSG",  (28'h2080000 + (i*4096)) );
    CFG_QID_NALDB_MAX_DEPTH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_NALDB_MAX_DEPTH[i].set_space_addr("MEM-SB", (28'h2080000 + (i*4096)) );
    CFG_QID_NALDB_MAX_DEPTH[i].set_space_addr("MEM",  (28'h2080000 + (i*4096)) );
      CFG_QID_NALDB_MAX_DEPTH[i].set_space("MEM");
      CFG_QID_NALDB_MAX_DEPTH[i].set_msg_opcode("MEM-SB");
      CFG_QID_NALDB_MAX_DEPTH[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_NALDB_MAX_DEPTH[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_NALDB_MAX_DEPTH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_NALDB_MAX_DEPTH[i].set_user_attribute("diag_reg", "0");
      CFG_QID_NALDB_MAX_DEPTH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_NALDB_MAX_DEPTH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_NALDB_MAX_DEPTH[%0d]:dont_test",i)) ) CFG_QID_NALDB_MAX_DEPTH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_NALDB_MAX_DEPTH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_NALDB_MAX_DEPTH[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_NALDB_TOT_ENQ_CNTL[%0d]",i);
    `endif
    CFG_QID_NALDB_TOT_ENQ_CNTL[i] = hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTL_reg::type_id::create($psprintf("CFG_QID_NALDB_TOT_ENQ_CNTL[%0d]",i), this);
    CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h2100000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_space_addr("MSG",  (28'h2100000 + (i*4096)) );
    CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_space_addr("MEM-SB", (28'h2100000 + (i*4096)) );
    CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_space_addr("MEM",  (28'h2100000 + (i*4096)) );
      CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_space("MEM");
      CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_msg_opcode("MEM-SB");
      CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_user_attribute("diag_reg", "0");
      CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_NALDB_TOT_ENQ_CNTL[%0d]:dont_test",i)) ) CFG_QID_NALDB_TOT_ENQ_CNTL[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_NALDB_TOT_ENQ_CNTL[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_NALDB_TOT_ENQ_CNTL[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_NALDB_TOT_ENQ_CNTH[%0d]",i);
    `endif
    CFG_QID_NALDB_TOT_ENQ_CNTH[i] = hqm_list_sel_pipe_bridge_CFG_QID_NALDB_TOT_ENQ_CNTH_reg::type_id::create($psprintf("CFG_QID_NALDB_TOT_ENQ_CNTH[%0d]",i), this);
    CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h2180000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_space_addr("MSG",  (28'h2180000 + (i*4096)) );
    CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_space_addr("MEM-SB", (28'h2180000 + (i*4096)) );
    CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_space_addr("MEM",  (28'h2180000 + (i*4096)) );
      CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_space("MEM");
      CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_msg_opcode("MEM-SB");
      CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_user_attribute("diag_reg", "0");
      CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_NALDB_TOT_ENQ_CNTH[%0d]:dont_test",i)) ) CFG_QID_NALDB_TOT_ENQ_CNTH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_NALDB_TOT_ENQ_CNTH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_NALDB_TOT_ENQ_CNTH[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_ATM_QID_DPTH_THRSH[%0d]",i);
    `endif
    CFG_ATM_QID_DPTH_THRSH[i] = hqm_list_sel_pipe_bridge_CFG_ATM_QID_DPTH_THRSH_reg::type_id::create($psprintf("CFG_ATM_QID_DPTH_THRSH[%0d]",i), this);
    CFG_ATM_QID_DPTH_THRSH[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h2200000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_ATM_QID_DPTH_THRSH[i].set_space_addr("MSG",  (28'h2200000 + (i*4096)) );
    CFG_ATM_QID_DPTH_THRSH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_ATM_QID_DPTH_THRSH[i].set_space_addr("MEM-SB", (28'h2200000 + (i*4096)) );
    CFG_ATM_QID_DPTH_THRSH[i].set_space_addr("MEM",  (28'h2200000 + (i*4096)) );
      CFG_ATM_QID_DPTH_THRSH[i].set_space("MEM");
      CFG_ATM_QID_DPTH_THRSH[i].set_msg_opcode("MEM-SB");
      CFG_ATM_QID_DPTH_THRSH[i].set_fid(4'h0, "MEM-SB");
  	CFG_ATM_QID_DPTH_THRSH[i].set_bar(4'h2, "MEM-SB");
      CFG_ATM_QID_DPTH_THRSH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ATM_QID_DPTH_THRSH[i].set_user_attribute("diag_reg", "0");
      CFG_ATM_QID_DPTH_THRSH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_ATM_QID_DPTH_THRSH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_ATM_QID_DPTH_THRSH[%0d]:dont_test",i)) ) CFG_ATM_QID_DPTH_THRSH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_ATM_QID_DPTH_THRSH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_ATM_QID_DPTH_THRSH[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_NALB_QID_DPTH_THRSH[%0d]",i);
    `endif
    CFG_NALB_QID_DPTH_THRSH[i] = hqm_list_sel_pipe_bridge_CFG_NALB_QID_DPTH_THRSH_reg::type_id::create($psprintf("CFG_NALB_QID_DPTH_THRSH[%0d]",i), this);
    CFG_NALB_QID_DPTH_THRSH[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h2280000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_NALB_QID_DPTH_THRSH[i].set_space_addr("MSG",  (28'h2280000 + (i*4096)) );
    CFG_NALB_QID_DPTH_THRSH[i].set_space_addr("msg_bus_port", 'h21);
    CFG_NALB_QID_DPTH_THRSH[i].set_space_addr("MEM-SB", (28'h2280000 + (i*4096)) );
    CFG_NALB_QID_DPTH_THRSH[i].set_space_addr("MEM",  (28'h2280000 + (i*4096)) );
      CFG_NALB_QID_DPTH_THRSH[i].set_space("MEM");
      CFG_NALB_QID_DPTH_THRSH[i].set_msg_opcode("MEM-SB");
      CFG_NALB_QID_DPTH_THRSH[i].set_fid(4'h0, "MEM-SB");
  	CFG_NALB_QID_DPTH_THRSH[i].set_bar(4'h2, "MEM-SB");
      CFG_NALB_QID_DPTH_THRSH[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_NALB_QID_DPTH_THRSH[i].set_user_attribute("diag_reg", "0");
      CFG_NALB_QID_DPTH_THRSH[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_NALB_QID_DPTH_THRSH[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_NALB_QID_DPTH_THRSH[%0d]:dont_test",i)) ) CFG_NALB_QID_DPTH_THRSH[i].set_test_reg(1'b0);
      if (!add_reg( CFG_NALB_QID_DPTH_THRSH[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_NALB_QID_DPTH_THRSH[%0d]",i)));
      end
   cnt++;
end

for (int i=0, int cnt=0; i<32; i++) begin
    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = $psprintf("CFG_QID_ATM_ACTIVE[%0d]",i);
    `endif
    CFG_QID_ATM_ACTIVE[i] = hqm_list_sel_pipe_bridge_CFG_QID_ATM_ACTIVE_reg::type_id::create($psprintf("CFG_QID_ATM_ACTIVE[%0d]",i), this);
    CFG_QID_ATM_ACTIVE[i].set_cfg(16'h0, 16'h0, 16'h0, (28'h2300000 + (i *4096)), 32, 32'b00000000000000000000000000000000);
    CFG_QID_ATM_ACTIVE[i].set_space_addr("MSG",  (28'h2300000 + (i*4096)) );
    CFG_QID_ATM_ACTIVE[i].set_space_addr("msg_bus_port", 'h21);
    CFG_QID_ATM_ACTIVE[i].set_space_addr("MEM-SB", (28'h2300000 + (i*4096)) );
    CFG_QID_ATM_ACTIVE[i].set_space_addr("MEM",  (28'h2300000 + (i*4096)) );
      CFG_QID_ATM_ACTIVE[i].set_space("MEM");
      CFG_QID_ATM_ACTIVE[i].set_msg_opcode("MEM-SB");
      CFG_QID_ATM_ACTIVE[i].set_fid(4'h0, "MEM-SB");
  	CFG_QID_ATM_ACTIVE[i].set_bar(4'h2, "MEM-SB");
      CFG_QID_ATM_ACTIVE[i].set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_QID_ATM_ACTIVE[i].set_user_attribute("diag_reg", "0");
      CFG_QID_ATM_ACTIVE[i].set_user_attribute("HqmIsFeatureReg", "0");
      CFG_QID_ATM_ACTIVE[i].set_user_attribute("SubnetPortID", "8'h00");
    if ( $test$plusargs($psprintf("CFG_QID_ATM_ACTIVE[%0d]:dont_test",i)) ) CFG_QID_ATM_ACTIVE[i].set_test_reg(1'b0);
      if (!add_reg( CFG_QID_ATM_ACTIVE[i] )) begin
        `sla_error(get_name(), ($psprintf("Could not add register CFG_QID_ATM_ACTIVE[%0d]",i)));
      end
   cnt++;
end

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_TOT_ENQUEUE_COUNT";
    `endif
    CFG_AQED_TOT_ENQUEUE_COUNT = hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_COUNT_reg::type_id::create("CFG_AQED_TOT_ENQUEUE_COUNT", this);
    CFG_AQED_TOT_ENQUEUE_COUNT.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000000, 32, 32'b00000000000000000000000000000000);
    CFG_AQED_TOT_ENQUEUE_COUNT.set_space_addr("MSG", 28'h4000000);
    CFG_AQED_TOT_ENQUEUE_COUNT.set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_TOT_ENQUEUE_COUNT.set_space_addr("MEM-SB",28'h4000000);
    CFG_AQED_TOT_ENQUEUE_COUNT.set_space_addr("MEM", 28'h4000000);
      CFG_AQED_TOT_ENQUEUE_COUNT.set_space("MEM");
      CFG_AQED_TOT_ENQUEUE_COUNT.set_msg_opcode("MEM-SB");
      CFG_AQED_TOT_ENQUEUE_COUNT.set_fid(4'h0, "MEM-SB");
  	CFG_AQED_TOT_ENQUEUE_COUNT.set_bar(4'h2, "MEM-SB");
      CFG_AQED_TOT_ENQUEUE_COUNT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_TOT_ENQUEUE_COUNT.set_user_attribute("diag_reg", "0");
      CFG_AQED_TOT_ENQUEUE_COUNT.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_TOT_ENQUEUE_COUNT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_TOT_ENQUEUE_COUNT:dont_test") ) CFG_AQED_TOT_ENQUEUE_COUNT.set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_TOT_ENQUEUE_COUNT )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_TOT_ENQUEUE_COUNT"));
      end
   CFG_AQED_TOT_ENQUEUE_COUNT.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_aqed_tot_enqueue_count.internal_f[11:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_AQED_TOT_ENQUEUE_LIMIT";
    `endif
    CFG_AQED_TOT_ENQUEUE_LIMIT = hqm_list_sel_pipe_bridge_CFG_AQED_TOT_ENQUEUE_LIMIT_reg::type_id::create("CFG_AQED_TOT_ENQUEUE_LIMIT", this);
    CFG_AQED_TOT_ENQUEUE_LIMIT.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000004, 32, 32'b00000000000000000000100000000000);
    CFG_AQED_TOT_ENQUEUE_LIMIT.set_space_addr("MSG", 28'h4000004);
    CFG_AQED_TOT_ENQUEUE_LIMIT.set_space_addr("msg_bus_port", 'h21);
    CFG_AQED_TOT_ENQUEUE_LIMIT.set_space_addr("MEM-SB",28'h4000004);
    CFG_AQED_TOT_ENQUEUE_LIMIT.set_space_addr("MEM", 28'h4000004);
      CFG_AQED_TOT_ENQUEUE_LIMIT.set_space("MEM");
      CFG_AQED_TOT_ENQUEUE_LIMIT.set_msg_opcode("MEM-SB");
      CFG_AQED_TOT_ENQUEUE_LIMIT.set_fid(4'h0, "MEM-SB");
  	CFG_AQED_TOT_ENQUEUE_LIMIT.set_bar(4'h2, "MEM-SB");
      CFG_AQED_TOT_ENQUEUE_LIMIT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_AQED_TOT_ENQUEUE_LIMIT.set_user_attribute("diag_reg", "0");
      CFG_AQED_TOT_ENQUEUE_LIMIT.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_AQED_TOT_ENQUEUE_LIMIT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_AQED_TOT_ENQUEUE_LIMIT:dont_test") ) CFG_AQED_TOT_ENQUEUE_LIMIT.set_test_reg(1'b0);
      if (!add_reg( CFG_AQED_TOT_ENQUEUE_LIMIT )) begin
        `sla_error(get_name(), ("Could not add register CFG_AQED_TOT_ENQUEUE_LIMIT"));
      end
   CFG_AQED_TOT_ENQUEUE_LIMIT.LIMIT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_aqed_tot_enqueue_limit.internal_f[11:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_ARB_WEIGHT_ATM_NALB_QID_0";
    `endif
    CFG_ARB_WEIGHT_ATM_NALB_QID_0 = hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_0_reg::type_id::create("CFG_ARB_WEIGHT_ATM_NALB_QID_0", this);
    CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000008, 32, 32'b00000000000000000000000000000000);
    CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_space_addr("MSG", 28'h4000008);
    CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_space_addr("msg_bus_port", 'h21);
    CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_space_addr("MEM-SB",28'h4000008);
    CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_space_addr("MEM", 28'h4000008);
      CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_space("MEM");
      CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_msg_opcode("MEM-SB");
      CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_fid(4'h0, "MEM-SB");
  	CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_bar(4'h2, "MEM-SB");
      CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_user_attribute("diag_reg", "0");
      CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_ARB_WEIGHT_ATM_NALB_QID_0:dont_test") ) CFG_ARB_WEIGHT_ATM_NALB_QID_0.set_test_reg(1'b0);
      if (!add_reg( CFG_ARB_WEIGHT_ATM_NALB_QID_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_ARB_WEIGHT_ATM_NALB_QID_0"));
      end
   CFG_ARB_WEIGHT_ATM_NALB_QID_0.PRI0_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[7:0]"});
   CFG_ARB_WEIGHT_ATM_NALB_QID_0.PRI1_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[15:8]"});
   CFG_ARB_WEIGHT_ATM_NALB_QID_0.PRI2_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[23:16]"});
   CFG_ARB_WEIGHT_ATM_NALB_QID_0.PRI3_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_0.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_ARB_WEIGHT_ATM_NALB_QID_1";
    `endif
    CFG_ARB_WEIGHT_ATM_NALB_QID_1 = hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_ATM_NALB_QID_1_reg::type_id::create("CFG_ARB_WEIGHT_ATM_NALB_QID_1", this);
    CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_cfg(16'h0, 16'h0, 16'h0, 28'h400000C, 32, 32'b00000000000000000000000000000000);
    CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_space_addr("MSG", 28'h400000C);
    CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_space_addr("msg_bus_port", 'h21);
    CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_space_addr("MEM-SB",28'h400000C);
    CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_space_addr("MEM", 28'h400000C);
      CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_space("MEM");
      CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_msg_opcode("MEM-SB");
      CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_fid(4'h0, "MEM-SB");
  	CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_bar(4'h2, "MEM-SB");
      CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_user_attribute("diag_reg", "0");
      CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_ARB_WEIGHT_ATM_NALB_QID_1:dont_test") ) CFG_ARB_WEIGHT_ATM_NALB_QID_1.set_test_reg(1'b0);
      if (!add_reg( CFG_ARB_WEIGHT_ATM_NALB_QID_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_ARB_WEIGHT_ATM_NALB_QID_1"));
      end
   CFG_ARB_WEIGHT_ATM_NALB_QID_1.PRI4_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[7:0]"});
   CFG_ARB_WEIGHT_ATM_NALB_QID_1.PRI5_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[15:8]"});
   CFG_ARB_WEIGHT_ATM_NALB_QID_1.PRI6_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[23:16]"});
   CFG_ARB_WEIGHT_ATM_NALB_QID_1.PRI7_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_atm_nalb_qid_1.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_ARB_WEIGHT_LDB_ISSUE_0";
    `endif
    CFG_ARB_WEIGHT_LDB_ISSUE_0 = hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_ISSUE_0_reg::type_id::create("CFG_ARB_WEIGHT_LDB_ISSUE_0", this);
    CFG_ARB_WEIGHT_LDB_ISSUE_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000010, 32, 32'b11111111011111111111111101111111);
    CFG_ARB_WEIGHT_LDB_ISSUE_0.set_space_addr("MSG", 28'h4000010);
    CFG_ARB_WEIGHT_LDB_ISSUE_0.set_space_addr("msg_bus_port", 'h21);
    CFG_ARB_WEIGHT_LDB_ISSUE_0.set_space_addr("MEM-SB",28'h4000010);
    CFG_ARB_WEIGHT_LDB_ISSUE_0.set_space_addr("MEM", 28'h4000010);
      CFG_ARB_WEIGHT_LDB_ISSUE_0.set_space("MEM");
      CFG_ARB_WEIGHT_LDB_ISSUE_0.set_msg_opcode("MEM-SB");
      CFG_ARB_WEIGHT_LDB_ISSUE_0.set_fid(4'h0, "MEM-SB");
  	CFG_ARB_WEIGHT_LDB_ISSUE_0.set_bar(4'h2, "MEM-SB");
      CFG_ARB_WEIGHT_LDB_ISSUE_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ARB_WEIGHT_LDB_ISSUE_0.set_user_attribute("diag_reg", "0");
      CFG_ARB_WEIGHT_LDB_ISSUE_0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_ARB_WEIGHT_LDB_ISSUE_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_ARB_WEIGHT_LDB_ISSUE_0:dont_test") ) CFG_ARB_WEIGHT_LDB_ISSUE_0.set_test_reg(1'b0);
      if (!add_reg( CFG_ARB_WEIGHT_LDB_ISSUE_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_ARB_WEIGHT_LDB_ISSUE_0"));
      end
   CFG_ARB_WEIGHT_LDB_ISSUE_0.ATM_CQ_CMP_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[7:0]"});
   CFG_ARB_WEIGHT_LDB_ISSUE_0.NALB_CQ_CMP_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[15:8]"});
   CFG_ARB_WEIGHT_LDB_ISSUE_0.ORD_QID_CMP_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[23:16]"});
   CFG_ARB_WEIGHT_LDB_ISSUE_0.UNO_QID_CMP_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_issue_0.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_ARB_WEIGHT_LDB_QID_0";
    `endif
    CFG_ARB_WEIGHT_LDB_QID_0 = hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_0_reg::type_id::create("CFG_ARB_WEIGHT_LDB_QID_0", this);
    CFG_ARB_WEIGHT_LDB_QID_0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000014, 32, 32'b00000000000000000000000000000000);
    CFG_ARB_WEIGHT_LDB_QID_0.set_space_addr("MSG", 28'h4000014);
    CFG_ARB_WEIGHT_LDB_QID_0.set_space_addr("msg_bus_port", 'h21);
    CFG_ARB_WEIGHT_LDB_QID_0.set_space_addr("MEM-SB",28'h4000014);
    CFG_ARB_WEIGHT_LDB_QID_0.set_space_addr("MEM", 28'h4000014);
      CFG_ARB_WEIGHT_LDB_QID_0.set_space("MEM");
      CFG_ARB_WEIGHT_LDB_QID_0.set_msg_opcode("MEM-SB");
      CFG_ARB_WEIGHT_LDB_QID_0.set_fid(4'h0, "MEM-SB");
  	CFG_ARB_WEIGHT_LDB_QID_0.set_bar(4'h2, "MEM-SB");
      CFG_ARB_WEIGHT_LDB_QID_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ARB_WEIGHT_LDB_QID_0.set_user_attribute("diag_reg", "0");
      CFG_ARB_WEIGHT_LDB_QID_0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_ARB_WEIGHT_LDB_QID_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_ARB_WEIGHT_LDB_QID_0:dont_test") ) CFG_ARB_WEIGHT_LDB_QID_0.set_test_reg(1'b0);
      if (!add_reg( CFG_ARB_WEIGHT_LDB_QID_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_ARB_WEIGHT_LDB_QID_0"));
      end
   CFG_ARB_WEIGHT_LDB_QID_0.PRI0_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[7:0]"});
   CFG_ARB_WEIGHT_LDB_QID_0.PRI1_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[15:8]"});
   CFG_ARB_WEIGHT_LDB_QID_0.PRI2_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[23:16]"});
   CFG_ARB_WEIGHT_LDB_QID_0.PRI3_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_0.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_ARB_WEIGHT_LDB_QID_1";
    `endif
    CFG_ARB_WEIGHT_LDB_QID_1 = hqm_list_sel_pipe_bridge_CFG_ARB_WEIGHT_LDB_QID_1_reg::type_id::create("CFG_ARB_WEIGHT_LDB_QID_1", this);
    CFG_ARB_WEIGHT_LDB_QID_1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000018, 32, 32'b00000000000000000000000000000000);
    CFG_ARB_WEIGHT_LDB_QID_1.set_space_addr("MSG", 28'h4000018);
    CFG_ARB_WEIGHT_LDB_QID_1.set_space_addr("msg_bus_port", 'h21);
    CFG_ARB_WEIGHT_LDB_QID_1.set_space_addr("MEM-SB",28'h4000018);
    CFG_ARB_WEIGHT_LDB_QID_1.set_space_addr("MEM", 28'h4000018);
      CFG_ARB_WEIGHT_LDB_QID_1.set_space("MEM");
      CFG_ARB_WEIGHT_LDB_QID_1.set_msg_opcode("MEM-SB");
      CFG_ARB_WEIGHT_LDB_QID_1.set_fid(4'h0, "MEM-SB");
  	CFG_ARB_WEIGHT_LDB_QID_1.set_bar(4'h2, "MEM-SB");
      CFG_ARB_WEIGHT_LDB_QID_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ARB_WEIGHT_LDB_QID_1.set_user_attribute("diag_reg", "0");
      CFG_ARB_WEIGHT_LDB_QID_1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_ARB_WEIGHT_LDB_QID_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_ARB_WEIGHT_LDB_QID_1:dont_test") ) CFG_ARB_WEIGHT_LDB_QID_1.set_test_reg(1'b0);
      if (!add_reg( CFG_ARB_WEIGHT_LDB_QID_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_ARB_WEIGHT_LDB_QID_1"));
      end
   CFG_ARB_WEIGHT_LDB_QID_1.PRI4_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[7:0]"});
   CFG_ARB_WEIGHT_LDB_QID_1.PRI5_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[15:8]"});
   CFG_ARB_WEIGHT_LDB_QID_1.PRI6_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[23:16]"});
   CFG_ARB_WEIGHT_LDB_QID_1.PRI7_WEIGHT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_arb_weight_ldb_qid_1.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_TOT_INFLIGHT_COUNT";
    `endif
    CFG_CQ_LDB_TOT_INFLIGHT_COUNT = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_COUNT_reg::type_id::create("CFG_CQ_LDB_TOT_INFLIGHT_COUNT", this);
    CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_cfg(16'h0, 16'h0, 16'h0, 28'h400001C, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_space_addr("MSG", 28'h400001C);
    CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_space_addr("MEM-SB",28'h400001C);
    CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_space_addr("MEM", 28'h400001C);
      CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_space("MEM");
      CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_TOT_INFLIGHT_COUNT:dont_test") ) CFG_CQ_LDB_TOT_INFLIGHT_COUNT.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_TOT_INFLIGHT_COUNT )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_TOT_INFLIGHT_COUNT"));
      end
   CFG_CQ_LDB_TOT_INFLIGHT_COUNT.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_tot_inflight_count.internal_f[12:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_TOT_INFLIGHT_LIMIT";
    `endif
    CFG_CQ_LDB_TOT_INFLIGHT_LIMIT = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_TOT_INFLIGHT_LIMIT_reg::type_id::create("CFG_CQ_LDB_TOT_INFLIGHT_LIMIT", this);
    CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000020, 32, 32'b00000000000000000000100000000000);
    CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_space_addr("MSG", 28'h4000020);
    CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_space_addr("MEM-SB",28'h4000020);
    CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_space_addr("MEM", 28'h4000020);
      CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_space("MEM");
      CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_TOT_INFLIGHT_LIMIT:dont_test") ) CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_TOT_INFLIGHT_LIMIT )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_TOT_INFLIGHT_LIMIT"));
      end
   CFG_CQ_LDB_TOT_INFLIGHT_LIMIT.LIMIT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_tot_inflight_limit.internal_f[12:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FID_INFLIGHT_LIMIT";
    `endif
    CFG_FID_INFLIGHT_LIMIT = hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_LIMIT_reg::type_id::create("CFG_FID_INFLIGHT_LIMIT", this);
    CFG_FID_INFLIGHT_LIMIT.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000024, 32, 32'b00000000000000000000100000000000);
    CFG_FID_INFLIGHT_LIMIT.set_space_addr("MSG", 28'h4000024);
    CFG_FID_INFLIGHT_LIMIT.set_space_addr("msg_bus_port", 'h21);
    CFG_FID_INFLIGHT_LIMIT.set_space_addr("MEM-SB",28'h4000024);
    CFG_FID_INFLIGHT_LIMIT.set_space_addr("MEM", 28'h4000024);
      CFG_FID_INFLIGHT_LIMIT.set_space("MEM");
      CFG_FID_INFLIGHT_LIMIT.set_msg_opcode("MEM-SB");
      CFG_FID_INFLIGHT_LIMIT.set_fid(4'h0, "MEM-SB");
  	CFG_FID_INFLIGHT_LIMIT.set_bar(4'h2, "MEM-SB");
      CFG_FID_INFLIGHT_LIMIT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FID_INFLIGHT_LIMIT.set_user_attribute("diag_reg", "0");
      CFG_FID_INFLIGHT_LIMIT.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_FID_INFLIGHT_LIMIT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FID_INFLIGHT_LIMIT:dont_test") ) CFG_FID_INFLIGHT_LIMIT.set_test_reg(1'b0);
      if (!add_reg( CFG_FID_INFLIGHT_LIMIT )) begin
        `sla_error(get_name(), ("Could not add register CFG_FID_INFLIGHT_LIMIT"));
      end
   CFG_FID_INFLIGHT_LIMIT.FID_LIMIT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_fid_inflight_limit.internal_f[11:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_FID_INFLIGHT_COUNT";
    `endif
    CFG_FID_INFLIGHT_COUNT = hqm_list_sel_pipe_bridge_CFG_FID_INFLIGHT_COUNT_reg::type_id::create("CFG_FID_INFLIGHT_COUNT", this);
    CFG_FID_INFLIGHT_COUNT.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000028, 32, 32'b00000000000000000000000000000000);
    CFG_FID_INFLIGHT_COUNT.set_space_addr("MSG", 28'h4000028);
    CFG_FID_INFLIGHT_COUNT.set_space_addr("msg_bus_port", 'h21);
    CFG_FID_INFLIGHT_COUNT.set_space_addr("MEM-SB",28'h4000028);
    CFG_FID_INFLIGHT_COUNT.set_space_addr("MEM", 28'h4000028);
      CFG_FID_INFLIGHT_COUNT.set_space("MEM");
      CFG_FID_INFLIGHT_COUNT.set_msg_opcode("MEM-SB");
      CFG_FID_INFLIGHT_COUNT.set_fid(4'h0, "MEM-SB");
  	CFG_FID_INFLIGHT_COUNT.set_bar(4'h2, "MEM-SB");
      CFG_FID_INFLIGHT_COUNT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_FID_INFLIGHT_COUNT.set_user_attribute("diag_reg", "0");
      CFG_FID_INFLIGHT_COUNT.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_FID_INFLIGHT_COUNT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_FID_INFLIGHT_COUNT:dont_test") ) CFG_FID_INFLIGHT_COUNT.set_test_reg(1'b0);
      if (!add_reg( CFG_FID_INFLIGHT_COUNT )) begin
        `sla_error(get_name(), ("Could not add register CFG_FID_INFLIGHT_COUNT"));
      end
   CFG_FID_INFLIGHT_COUNT.FID_COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_fid_inflight_count.internal_f[11:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_CONTROL";
    `endif
    CFG_LDB_SCHED_CONTROL = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_CONTROL_reg::type_id::create("CFG_LDB_SCHED_CONTROL", this);
    CFG_LDB_SCHED_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h400002C, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_CONTROL.set_space_addr("MSG", 28'h400002C);
    CFG_LDB_SCHED_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_CONTROL.set_space_addr("MEM-SB",28'h400002C);
    CFG_LDB_SCHED_CONTROL.set_space_addr("MEM", 28'h400002C);
      CFG_LDB_SCHED_CONTROL.set_space("MEM");
      CFG_LDB_SCHED_CONTROL.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_CONTROL:dont_test") ) CFG_LDB_SCHED_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_CONTROL"));
      end
   CFG_LDB_SCHED_CONTROL.CQ.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[7:0]"});
   CFG_LDB_SCHED_CONTROL.QIDIX.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[10:8]"});
   CFG_LDB_SCHED_CONTROL.VALUE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[11:11]"});
   CFG_LDB_SCHED_CONTROL.NALB_HASWORK_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[12:12]"});
   CFG_LDB_SCHED_CONTROL.RLIST_HASWORK_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[13:13]"});
   CFG_LDB_SCHED_CONTROL.SLIST_HASWORK_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[14:14]"});
   CFG_LDB_SCHED_CONTROL.INFLIGHT_OK_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[15:15]"});
   CFG_LDB_SCHED_CONTROL.AQED_NFULL_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[16:16]"});
   CFG_LDB_SCHED_CONTROL.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_control.internal_f[31:17]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LSP_CSR_CONTROL";
    `endif
    CFG_LSP_CSR_CONTROL = hqm_list_sel_pipe_bridge_CFG_LSP_CSR_CONTROL_reg::type_id::create("CFG_LSP_CSR_CONTROL", this);
    CFG_LSP_CSR_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000030, 32, 32'b00110000000000000000000000000000);
    CFG_LSP_CSR_CONTROL.set_space_addr("MSG", 28'h4000030);
    CFG_LSP_CSR_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_LSP_CSR_CONTROL.set_space_addr("MEM-SB",28'h4000030);
    CFG_LSP_CSR_CONTROL.set_space_addr("MEM", 28'h4000030);
      CFG_LSP_CSR_CONTROL.set_space("MEM");
      CFG_LSP_CSR_CONTROL.set_msg_opcode("MEM-SB");
      CFG_LSP_CSR_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_LSP_CSR_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_LSP_CSR_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LSP_CSR_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_LSP_CSR_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LSP_CSR_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LSP_CSR_CONTROL:dont_test") ) CFG_LSP_CSR_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_LSP_CSR_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_LSP_CSR_CONTROL"));
      end
   CFG_LSP_CSR_CONTROL.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[3:0]"});
   CFG_LSP_CSR_CONTROL.INT0_QID_IF_UF_ALARM_DIS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[4:4]"});
   CFG_LSP_CSR_CONTROL.INT0_QID_IF_UF_SYND_DIS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[5:5]"});
   CFG_LSP_CSR_CONTROL.INT1_CQ_IF_UF_ALARM_DIS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[6:6]"});
   CFG_LSP_CSR_CONTROL.INT1_CQ_IF_UF_SYND_DIS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[7:7]"});
   CFG_LSP_CSR_CONTROL.INT2_TOK_UF_ALARM_DIS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[8:8]"});
   CFG_LSP_CSR_CONTROL.INT2_TOK_UF_SYND_DIS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[9:9]"});
   CFG_LSP_CSR_CONTROL.INT3_HW_ERR_ALARM_DIS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[10:10]"});
   CFG_LSP_CSR_CONTROL.INT3_HW_ERR_SYND_DIS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[11:11]"});
   CFG_LSP_CSR_CONTROL.INT4_NON_MC_ALARM_DIS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[12:12]"});
   CFG_LSP_CSR_CONTROL.INT4_NON_MC_SYND_DIS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[13:13]"});
   CFG_LSP_CSR_CONTROL.RSVZ1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[27:14]"});
   CFG_LSP_CSR_CONTROL.LDB_WRR_COUNT_BASE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[30:28]"});
   CFG_LSP_CSR_CONTROL.ATM_CQ_QID_PRIORITY_PROT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_csr_control.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LSP_PERF_DIR_SCH_COUNT_L";
    `endif
    CFG_LSP_PERF_DIR_SCH_COUNT_L = hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_L_reg::type_id::create("CFG_LSP_PERF_DIR_SCH_COUNT_L", this);
    CFG_LSP_PERF_DIR_SCH_COUNT_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000034, 32, 32'b00000000000000000000000000000000);
    CFG_LSP_PERF_DIR_SCH_COUNT_L.set_space_addr("MSG", 28'h4000034);
    CFG_LSP_PERF_DIR_SCH_COUNT_L.set_space_addr("msg_bus_port", 'h21);
    CFG_LSP_PERF_DIR_SCH_COUNT_L.set_space_addr("MEM-SB",28'h4000034);
    CFG_LSP_PERF_DIR_SCH_COUNT_L.set_space_addr("MEM", 28'h4000034);
      CFG_LSP_PERF_DIR_SCH_COUNT_L.set_space("MEM");
      CFG_LSP_PERF_DIR_SCH_COUNT_L.set_msg_opcode("MEM-SB");
      CFG_LSP_PERF_DIR_SCH_COUNT_L.set_fid(4'h0, "MEM-SB");
  	CFG_LSP_PERF_DIR_SCH_COUNT_L.set_bar(4'h2, "MEM-SB");
      CFG_LSP_PERF_DIR_SCH_COUNT_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LSP_PERF_DIR_SCH_COUNT_L.set_user_attribute("diag_reg", "1");
      CFG_LSP_PERF_DIR_SCH_COUNT_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LSP_PERF_DIR_SCH_COUNT_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LSP_PERF_DIR_SCH_COUNT_L:dont_test") ) CFG_LSP_PERF_DIR_SCH_COUNT_L.set_test_reg(1'b0);
      if (!add_reg( CFG_LSP_PERF_DIR_SCH_COUNT_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_LSP_PERF_DIR_SCH_COUNT_L"));
      end
   CFG_LSP_PERF_DIR_SCH_COUNT_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_dir_sch_count_l.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LSP_PERF_DIR_SCH_COUNT_H";
    `endif
    CFG_LSP_PERF_DIR_SCH_COUNT_H = hqm_list_sel_pipe_bridge_CFG_LSP_PERF_DIR_SCH_COUNT_H_reg::type_id::create("CFG_LSP_PERF_DIR_SCH_COUNT_H", this);
    CFG_LSP_PERF_DIR_SCH_COUNT_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000038, 32, 32'b00000000000000000000000000000000);
    CFG_LSP_PERF_DIR_SCH_COUNT_H.set_space_addr("MSG", 28'h4000038);
    CFG_LSP_PERF_DIR_SCH_COUNT_H.set_space_addr("msg_bus_port", 'h21);
    CFG_LSP_PERF_DIR_SCH_COUNT_H.set_space_addr("MEM-SB",28'h4000038);
    CFG_LSP_PERF_DIR_SCH_COUNT_H.set_space_addr("MEM", 28'h4000038);
      CFG_LSP_PERF_DIR_SCH_COUNT_H.set_space("MEM");
      CFG_LSP_PERF_DIR_SCH_COUNT_H.set_msg_opcode("MEM-SB");
      CFG_LSP_PERF_DIR_SCH_COUNT_H.set_fid(4'h0, "MEM-SB");
  	CFG_LSP_PERF_DIR_SCH_COUNT_H.set_bar(4'h2, "MEM-SB");
      CFG_LSP_PERF_DIR_SCH_COUNT_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LSP_PERF_DIR_SCH_COUNT_H.set_user_attribute("diag_reg", "1");
      CFG_LSP_PERF_DIR_SCH_COUNT_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LSP_PERF_DIR_SCH_COUNT_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LSP_PERF_DIR_SCH_COUNT_H:dont_test") ) CFG_LSP_PERF_DIR_SCH_COUNT_H.set_test_reg(1'b0);
      if (!add_reg( CFG_LSP_PERF_DIR_SCH_COUNT_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_LSP_PERF_DIR_SCH_COUNT_H"));
      end
   CFG_LSP_PERF_DIR_SCH_COUNT_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_dir_sch_count_h.internal_f[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LSP_PERF_LDB_SCH_COUNT_L";
    `endif
    CFG_LSP_PERF_LDB_SCH_COUNT_L = hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_L_reg::type_id::create("CFG_LSP_PERF_LDB_SCH_COUNT_L", this);
    CFG_LSP_PERF_LDB_SCH_COUNT_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h400003C, 32, 32'b00000000000000000000000000000000);
    CFG_LSP_PERF_LDB_SCH_COUNT_L.set_space_addr("MSG", 28'h400003C);
    CFG_LSP_PERF_LDB_SCH_COUNT_L.set_space_addr("msg_bus_port", 'h21);
    CFG_LSP_PERF_LDB_SCH_COUNT_L.set_space_addr("MEM-SB",28'h400003C);
    CFG_LSP_PERF_LDB_SCH_COUNT_L.set_space_addr("MEM", 28'h400003C);
      CFG_LSP_PERF_LDB_SCH_COUNT_L.set_space("MEM");
      CFG_LSP_PERF_LDB_SCH_COUNT_L.set_msg_opcode("MEM-SB");
      CFG_LSP_PERF_LDB_SCH_COUNT_L.set_fid(4'h0, "MEM-SB");
  	CFG_LSP_PERF_LDB_SCH_COUNT_L.set_bar(4'h2, "MEM-SB");
      CFG_LSP_PERF_LDB_SCH_COUNT_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LSP_PERF_LDB_SCH_COUNT_L.set_user_attribute("diag_reg", "1");
      CFG_LSP_PERF_LDB_SCH_COUNT_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LSP_PERF_LDB_SCH_COUNT_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LSP_PERF_LDB_SCH_COUNT_L:dont_test") ) CFG_LSP_PERF_LDB_SCH_COUNT_L.set_test_reg(1'b0);
      if (!add_reg( CFG_LSP_PERF_LDB_SCH_COUNT_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_LSP_PERF_LDB_SCH_COUNT_L"));
      end
   CFG_LSP_PERF_LDB_SCH_COUNT_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_ldb_sch_count.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LSP_PERF_LDB_SCH_COUNT_H";
    `endif
    CFG_LSP_PERF_LDB_SCH_COUNT_H = hqm_list_sel_pipe_bridge_CFG_LSP_PERF_LDB_SCH_COUNT_H_reg::type_id::create("CFG_LSP_PERF_LDB_SCH_COUNT_H", this);
    CFG_LSP_PERF_LDB_SCH_COUNT_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000040, 32, 32'b00000000000000000000000000000000);
    CFG_LSP_PERF_LDB_SCH_COUNT_H.set_space_addr("MSG", 28'h4000040);
    CFG_LSP_PERF_LDB_SCH_COUNT_H.set_space_addr("msg_bus_port", 'h21);
    CFG_LSP_PERF_LDB_SCH_COUNT_H.set_space_addr("MEM-SB",28'h4000040);
    CFG_LSP_PERF_LDB_SCH_COUNT_H.set_space_addr("MEM", 28'h4000040);
      CFG_LSP_PERF_LDB_SCH_COUNT_H.set_space("MEM");
      CFG_LSP_PERF_LDB_SCH_COUNT_H.set_msg_opcode("MEM-SB");
      CFG_LSP_PERF_LDB_SCH_COUNT_H.set_fid(4'h0, "MEM-SB");
  	CFG_LSP_PERF_LDB_SCH_COUNT_H.set_bar(4'h2, "MEM-SB");
      CFG_LSP_PERF_LDB_SCH_COUNT_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LSP_PERF_LDB_SCH_COUNT_H.set_user_attribute("diag_reg", "1");
      CFG_LSP_PERF_LDB_SCH_COUNT_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LSP_PERF_LDB_SCH_COUNT_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LSP_PERF_LDB_SCH_COUNT_H:dont_test") ) CFG_LSP_PERF_LDB_SCH_COUNT_H.set_test_reg(1'b0);
      if (!add_reg( CFG_LSP_PERF_LDB_SCH_COUNT_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_LSP_PERF_LDB_SCH_COUNT_H"));
      end
   CFG_LSP_PERF_LDB_SCH_COUNT_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_lsp_perf_ldb_sch_count.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SYNDROME_SW";
    `endif
    CFG_SYNDROME_SW = hqm_list_sel_pipe_bridge_CFG_SYNDROME_SW_reg::type_id::create("CFG_SYNDROME_SW", this);
    CFG_SYNDROME_SW.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000044, 32, 32'b00000000000000000000000000000000);
    CFG_SYNDROME_SW.set_space_addr("MSG", 28'h4000044);
    CFG_SYNDROME_SW.set_space_addr("msg_bus_port", 'h21);
    CFG_SYNDROME_SW.set_space_addr("MEM-SB",28'h4000044);
    CFG_SYNDROME_SW.set_space_addr("MEM", 28'h4000044);
      CFG_SYNDROME_SW.set_space("MEM");
      CFG_SYNDROME_SW.set_msg_opcode("MEM-SB");
      CFG_SYNDROME_SW.set_fid(4'h0, "MEM-SB");
  	CFG_SYNDROME_SW.set_bar(4'h2, "MEM-SB");
      CFG_SYNDROME_SW.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SYNDROME_SW.set_user_attribute("diag_reg", "0");
      CFG_SYNDROME_SW.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SYNDROME_SW.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SYNDROME_SW:dont_test") ) CFG_SYNDROME_SW.set_test_reg(1'b0);
      if (!add_reg( CFG_SYNDROME_SW )) begin
        `sla_error(get_name(), ("Could not add register CFG_SYNDROME_SW"));
      end
   CFG_SYNDROME_SW.SYNDDATA.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_sw.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
   CFG_SYNDROME_SW.SYNDTYPE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_sw.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
   CFG_SYNDROME_SW.SYNDVALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_sw.i_hqm_AW_register_wtcfg.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_VERSION";
    `endif
    CFG_UNIT_VERSION = hqm_list_sel_pipe_bridge_CFG_UNIT_VERSION_reg::type_id::create("CFG_UNIT_VERSION", this);
    CFG_UNIT_VERSION.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000048, 32, 32'b00000100000000000000000000000000);
    CFG_UNIT_VERSION.set_space_addr("MSG", 28'h4000048);
    CFG_UNIT_VERSION.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_VERSION.set_space_addr("MEM-SB",28'h4000048);
    CFG_UNIT_VERSION.set_space_addr("MEM", 28'h4000048);
      CFG_UNIT_VERSION.set_space("MEM");
      CFG_UNIT_VERSION.set_msg_opcode("MEM-SB");
      CFG_UNIT_VERSION.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_VERSION.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_VERSION.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_VERSION.set_user_attribute("diag_reg", "0");
      CFG_UNIT_VERSION.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_UNIT_VERSION.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_VERSION.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_VERSION:dont_test") ) CFG_UNIT_VERSION.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_VERSION )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_VERSION"));
      end
   CFG_UNIT_VERSION.UNIT_VERSION.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_version.status[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_COS_CTRL";
    `endif
    CFG_COS_CTRL = hqm_list_sel_pipe_bridge_CFG_COS_CTRL_reg::type_id::create("CFG_COS_CTRL", this);
    CFG_COS_CTRL.set_cfg(16'h0, 16'h0, 16'h0, 28'h400004C, 32, 32'b00000000000001000000000000000001);
    CFG_COS_CTRL.set_space_addr("MSG", 28'h400004C);
    CFG_COS_CTRL.set_space_addr("msg_bus_port", 'h21);
    CFG_COS_CTRL.set_space_addr("MEM-SB",28'h400004C);
    CFG_COS_CTRL.set_space_addr("MEM", 28'h400004C);
      CFG_COS_CTRL.set_space("MEM");
      CFG_COS_CTRL.set_msg_opcode("MEM-SB");
      CFG_COS_CTRL.set_fid(4'h0, "MEM-SB");
  	CFG_COS_CTRL.set_bar(4'h2, "MEM-SB");
      CFG_COS_CTRL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_COS_CTRL.set_user_attribute("diag_reg", "0");
      CFG_COS_CTRL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_COS_CTRL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_COS_CTRL:dont_test") ) CFG_COS_CTRL.set_test_reg(1'b0);
      if (!add_reg( CFG_COS_CTRL )) begin
        `sla_error(get_name(), ("Could not add register CFG_COS_CTRL"));
      end
   CFG_COS_CTRL.STARV_AVOID_MIN_THRESH.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[9:0]"});
   CFG_COS_CTRL.STARV_AVOID_MAX_THRESH.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[19:10]"});
   CFG_COS_CTRL.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[30:20]"});
   CFG_COS_CTRL.STARV_AVOID_ENABLE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cos_ctrl.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CREDIT_SAT_COS0";
    `endif
    CFG_CREDIT_SAT_COS0 = hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS0_reg::type_id::create("CFG_CREDIT_SAT_COS0", this);
    CFG_CREDIT_SAT_COS0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000050, 32, 32'b00000000000000000000000100000000);
    CFG_CREDIT_SAT_COS0.set_space_addr("MSG", 28'h4000050);
    CFG_CREDIT_SAT_COS0.set_space_addr("msg_bus_port", 'h21);
    CFG_CREDIT_SAT_COS0.set_space_addr("MEM-SB",28'h4000050);
    CFG_CREDIT_SAT_COS0.set_space_addr("MEM", 28'h4000050);
      CFG_CREDIT_SAT_COS0.set_space("MEM");
      CFG_CREDIT_SAT_COS0.set_msg_opcode("MEM-SB");
      CFG_CREDIT_SAT_COS0.set_fid(4'h0, "MEM-SB");
  	CFG_CREDIT_SAT_COS0.set_bar(4'h2, "MEM-SB");
      CFG_CREDIT_SAT_COS0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CREDIT_SAT_COS0.set_user_attribute("diag_reg", "0");
      CFG_CREDIT_SAT_COS0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CREDIT_SAT_COS0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CREDIT_SAT_COS0:dont_test") ) CFG_CREDIT_SAT_COS0.set_test_reg(1'b0);
      if (!add_reg( CFG_CREDIT_SAT_COS0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CREDIT_SAT_COS0"));
      end
   CFG_CREDIT_SAT_COS0.SAT_VALUE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos0.internal_f[15:0]"});
   CFG_CREDIT_SAT_COS0.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos0.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CREDIT_SAT_COS1";
    `endif
    CFG_CREDIT_SAT_COS1 = hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS1_reg::type_id::create("CFG_CREDIT_SAT_COS1", this);
    CFG_CREDIT_SAT_COS1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000054, 32, 32'b00000000000000000000000100000000);
    CFG_CREDIT_SAT_COS1.set_space_addr("MSG", 28'h4000054);
    CFG_CREDIT_SAT_COS1.set_space_addr("msg_bus_port", 'h21);
    CFG_CREDIT_SAT_COS1.set_space_addr("MEM-SB",28'h4000054);
    CFG_CREDIT_SAT_COS1.set_space_addr("MEM", 28'h4000054);
      CFG_CREDIT_SAT_COS1.set_space("MEM");
      CFG_CREDIT_SAT_COS1.set_msg_opcode("MEM-SB");
      CFG_CREDIT_SAT_COS1.set_fid(4'h0, "MEM-SB");
  	CFG_CREDIT_SAT_COS1.set_bar(4'h2, "MEM-SB");
      CFG_CREDIT_SAT_COS1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CREDIT_SAT_COS1.set_user_attribute("diag_reg", "0");
      CFG_CREDIT_SAT_COS1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CREDIT_SAT_COS1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CREDIT_SAT_COS1:dont_test") ) CFG_CREDIT_SAT_COS1.set_test_reg(1'b0);
      if (!add_reg( CFG_CREDIT_SAT_COS1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CREDIT_SAT_COS1"));
      end
   CFG_CREDIT_SAT_COS1.SAT_VALUE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos1.internal_f[15:0]"});
   CFG_CREDIT_SAT_COS1.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos1.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CREDIT_SAT_COS2";
    `endif
    CFG_CREDIT_SAT_COS2 = hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS2_reg::type_id::create("CFG_CREDIT_SAT_COS2", this);
    CFG_CREDIT_SAT_COS2.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000058, 32, 32'b00000000000000000000000100000000);
    CFG_CREDIT_SAT_COS2.set_space_addr("MSG", 28'h4000058);
    CFG_CREDIT_SAT_COS2.set_space_addr("msg_bus_port", 'h21);
    CFG_CREDIT_SAT_COS2.set_space_addr("MEM-SB",28'h4000058);
    CFG_CREDIT_SAT_COS2.set_space_addr("MEM", 28'h4000058);
      CFG_CREDIT_SAT_COS2.set_space("MEM");
      CFG_CREDIT_SAT_COS2.set_msg_opcode("MEM-SB");
      CFG_CREDIT_SAT_COS2.set_fid(4'h0, "MEM-SB");
  	CFG_CREDIT_SAT_COS2.set_bar(4'h2, "MEM-SB");
      CFG_CREDIT_SAT_COS2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CREDIT_SAT_COS2.set_user_attribute("diag_reg", "0");
      CFG_CREDIT_SAT_COS2.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CREDIT_SAT_COS2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CREDIT_SAT_COS2:dont_test") ) CFG_CREDIT_SAT_COS2.set_test_reg(1'b0);
      if (!add_reg( CFG_CREDIT_SAT_COS2 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CREDIT_SAT_COS2"));
      end
   CFG_CREDIT_SAT_COS2.SAT_VALUE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos2.internal_f[15:0]"});
   CFG_CREDIT_SAT_COS2.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos2.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CREDIT_SAT_COS3";
    `endif
    CFG_CREDIT_SAT_COS3 = hqm_list_sel_pipe_bridge_CFG_CREDIT_SAT_COS3_reg::type_id::create("CFG_CREDIT_SAT_COS3", this);
    CFG_CREDIT_SAT_COS3.set_cfg(16'h0, 16'h0, 16'h0, 28'h400005C, 32, 32'b00000000000000000000000100000000);
    CFG_CREDIT_SAT_COS3.set_space_addr("MSG", 28'h400005C);
    CFG_CREDIT_SAT_COS3.set_space_addr("msg_bus_port", 'h21);
    CFG_CREDIT_SAT_COS3.set_space_addr("MEM-SB",28'h400005C);
    CFG_CREDIT_SAT_COS3.set_space_addr("MEM", 28'h400005C);
      CFG_CREDIT_SAT_COS3.set_space("MEM");
      CFG_CREDIT_SAT_COS3.set_msg_opcode("MEM-SB");
      CFG_CREDIT_SAT_COS3.set_fid(4'h0, "MEM-SB");
  	CFG_CREDIT_SAT_COS3.set_bar(4'h2, "MEM-SB");
      CFG_CREDIT_SAT_COS3.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CREDIT_SAT_COS3.set_user_attribute("diag_reg", "0");
      CFG_CREDIT_SAT_COS3.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CREDIT_SAT_COS3.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CREDIT_SAT_COS3:dont_test") ) CFG_CREDIT_SAT_COS3.set_test_reg(1'b0);
      if (!add_reg( CFG_CREDIT_SAT_COS3 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CREDIT_SAT_COS3"));
      end
   CFG_CREDIT_SAT_COS3.SAT_VALUE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos3.internal_f[15:0]"});
   CFG_CREDIT_SAT_COS3.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_sat_cos3.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CREDIT_CNT_COS0";
    `endif
    CFG_CREDIT_CNT_COS0 = hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS0_reg::type_id::create("CFG_CREDIT_CNT_COS0", this);
    CFG_CREDIT_CNT_COS0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000060, 32, 32'b00000100000000000000000000000000);
    CFG_CREDIT_CNT_COS0.set_space_addr("MSG", 28'h4000060);
    CFG_CREDIT_CNT_COS0.set_space_addr("msg_bus_port", 'h21);
    CFG_CREDIT_CNT_COS0.set_space_addr("MEM-SB",28'h4000060);
    CFG_CREDIT_CNT_COS0.set_space_addr("MEM", 28'h4000060);
      CFG_CREDIT_CNT_COS0.set_space("MEM");
      CFG_CREDIT_CNT_COS0.set_msg_opcode("MEM-SB");
      CFG_CREDIT_CNT_COS0.set_fid(4'h0, "MEM-SB");
  	CFG_CREDIT_CNT_COS0.set_bar(4'h2, "MEM-SB");
      CFG_CREDIT_CNT_COS0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CREDIT_CNT_COS0.set_user_attribute("diag_reg", "0");
      CFG_CREDIT_CNT_COS0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CREDIT_CNT_COS0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CREDIT_CNT_COS0:dont_test") ) CFG_CREDIT_CNT_COS0.set_test_reg(1'b0);
      if (!add_reg( CFG_CREDIT_CNT_COS0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CREDIT_CNT_COS0"));
      end
   CFG_CREDIT_CNT_COS0.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos0.internal_f[15:0]"});
   CFG_CREDIT_CNT_COS0.STARV_AVOID_COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos0.internal_f[26:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CREDIT_CNT_COS1";
    `endif
    CFG_CREDIT_CNT_COS1 = hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS1_reg::type_id::create("CFG_CREDIT_CNT_COS1", this);
    CFG_CREDIT_CNT_COS1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000064, 32, 32'b00000100000000000000000000000000);
    CFG_CREDIT_CNT_COS1.set_space_addr("MSG", 28'h4000064);
    CFG_CREDIT_CNT_COS1.set_space_addr("msg_bus_port", 'h21);
    CFG_CREDIT_CNT_COS1.set_space_addr("MEM-SB",28'h4000064);
    CFG_CREDIT_CNT_COS1.set_space_addr("MEM", 28'h4000064);
      CFG_CREDIT_CNT_COS1.set_space("MEM");
      CFG_CREDIT_CNT_COS1.set_msg_opcode("MEM-SB");
      CFG_CREDIT_CNT_COS1.set_fid(4'h0, "MEM-SB");
  	CFG_CREDIT_CNT_COS1.set_bar(4'h2, "MEM-SB");
      CFG_CREDIT_CNT_COS1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CREDIT_CNT_COS1.set_user_attribute("diag_reg", "0");
      CFG_CREDIT_CNT_COS1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CREDIT_CNT_COS1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CREDIT_CNT_COS1:dont_test") ) CFG_CREDIT_CNT_COS1.set_test_reg(1'b0);
      if (!add_reg( CFG_CREDIT_CNT_COS1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CREDIT_CNT_COS1"));
      end
   CFG_CREDIT_CNT_COS1.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos1.internal_f[15:0]"});
   CFG_CREDIT_CNT_COS1.STARV_AVOID_COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos1.internal_f[26:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CREDIT_CNT_COS2";
    `endif
    CFG_CREDIT_CNT_COS2 = hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS2_reg::type_id::create("CFG_CREDIT_CNT_COS2", this);
    CFG_CREDIT_CNT_COS2.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000068, 32, 32'b00000100000000000000000000000000);
    CFG_CREDIT_CNT_COS2.set_space_addr("MSG", 28'h4000068);
    CFG_CREDIT_CNT_COS2.set_space_addr("msg_bus_port", 'h21);
    CFG_CREDIT_CNT_COS2.set_space_addr("MEM-SB",28'h4000068);
    CFG_CREDIT_CNT_COS2.set_space_addr("MEM", 28'h4000068);
      CFG_CREDIT_CNT_COS2.set_space("MEM");
      CFG_CREDIT_CNT_COS2.set_msg_opcode("MEM-SB");
      CFG_CREDIT_CNT_COS2.set_fid(4'h0, "MEM-SB");
  	CFG_CREDIT_CNT_COS2.set_bar(4'h2, "MEM-SB");
      CFG_CREDIT_CNT_COS2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CREDIT_CNT_COS2.set_user_attribute("diag_reg", "0");
      CFG_CREDIT_CNT_COS2.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CREDIT_CNT_COS2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CREDIT_CNT_COS2:dont_test") ) CFG_CREDIT_CNT_COS2.set_test_reg(1'b0);
      if (!add_reg( CFG_CREDIT_CNT_COS2 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CREDIT_CNT_COS2"));
      end
   CFG_CREDIT_CNT_COS2.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos2.internal_f[15:0]"});
   CFG_CREDIT_CNT_COS2.STARV_AVOID_COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos2.internal_f[26:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CREDIT_CNT_COS3";
    `endif
    CFG_CREDIT_CNT_COS3 = hqm_list_sel_pipe_bridge_CFG_CREDIT_CNT_COS3_reg::type_id::create("CFG_CREDIT_CNT_COS3", this);
    CFG_CREDIT_CNT_COS3.set_cfg(16'h0, 16'h0, 16'h0, 28'h400006C, 32, 32'b00000100000000000000000000000000);
    CFG_CREDIT_CNT_COS3.set_space_addr("MSG", 28'h400006C);
    CFG_CREDIT_CNT_COS3.set_space_addr("msg_bus_port", 'h21);
    CFG_CREDIT_CNT_COS3.set_space_addr("MEM-SB",28'h400006C);
    CFG_CREDIT_CNT_COS3.set_space_addr("MEM", 28'h400006C);
      CFG_CREDIT_CNT_COS3.set_space("MEM");
      CFG_CREDIT_CNT_COS3.set_msg_opcode("MEM-SB");
      CFG_CREDIT_CNT_COS3.set_fid(4'h0, "MEM-SB");
  	CFG_CREDIT_CNT_COS3.set_bar(4'h2, "MEM-SB");
      CFG_CREDIT_CNT_COS3.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CREDIT_CNT_COS3.set_user_attribute("diag_reg", "0");
      CFG_CREDIT_CNT_COS3.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CREDIT_CNT_COS3.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CREDIT_CNT_COS3:dont_test") ) CFG_CREDIT_CNT_COS3.set_test_reg(1'b0);
      if (!add_reg( CFG_CREDIT_CNT_COS3 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CREDIT_CNT_COS3"));
      end
   CFG_CREDIT_CNT_COS3.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos3.internal_f[15:0]"});
   CFG_CREDIT_CNT_COS3.STARV_AVOID_COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_credit_cnt_cos3.internal_f[26:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SHDW_CTRL";
    `endif
    CFG_SHDW_CTRL = hqm_list_sel_pipe_bridge_CFG_SHDW_CTRL_reg::type_id::create("CFG_SHDW_CTRL", this);
    CFG_SHDW_CTRL.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000070, 32, 32'b00000000000000000000000000000000);
    CFG_SHDW_CTRL.set_space_addr("MSG", 28'h4000070);
    CFG_SHDW_CTRL.set_space_addr("msg_bus_port", 'h21);
    CFG_SHDW_CTRL.set_space_addr("MEM-SB",28'h4000070);
    CFG_SHDW_CTRL.set_space_addr("MEM", 28'h4000070);
      CFG_SHDW_CTRL.set_space("MEM");
      CFG_SHDW_CTRL.set_msg_opcode("MEM-SB");
      CFG_SHDW_CTRL.set_fid(4'h0, "MEM-SB");
  	CFG_SHDW_CTRL.set_bar(4'h2, "MEM-SB");
      CFG_SHDW_CTRL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SHDW_CTRL.set_user_attribute("diag_reg", "0");
      CFG_SHDW_CTRL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SHDW_CTRL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_SHDW_CTRL.set_test_reg(0);
      if ( $test$plusargs("CFG_SHDW_CTRL:dont_test") ) CFG_SHDW_CTRL.set_test_reg(1'b0);
      if (!add_reg( CFG_SHDW_CTRL )) begin
        `sla_error(get_name(), ("Could not add register CFG_SHDW_CTRL"));
      end
   CFG_SHDW_CTRL.TRANSFER.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_ctrl.internal_f[0:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SHDW_RANGE_COS0";
    `endif
    CFG_SHDW_RANGE_COS0 = hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS0_reg::type_id::create("CFG_SHDW_RANGE_COS0", this);
    CFG_SHDW_RANGE_COS0.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000074, 32, 32'b00000000000000000000000001000000);
    CFG_SHDW_RANGE_COS0.set_space_addr("MSG", 28'h4000074);
    CFG_SHDW_RANGE_COS0.set_space_addr("msg_bus_port", 'h21);
    CFG_SHDW_RANGE_COS0.set_space_addr("MEM-SB",28'h4000074);
    CFG_SHDW_RANGE_COS0.set_space_addr("MEM", 28'h4000074);
      CFG_SHDW_RANGE_COS0.set_space("MEM");
      CFG_SHDW_RANGE_COS0.set_msg_opcode("MEM-SB");
      CFG_SHDW_RANGE_COS0.set_fid(4'h0, "MEM-SB");
  	CFG_SHDW_RANGE_COS0.set_bar(4'h2, "MEM-SB");
      CFG_SHDW_RANGE_COS0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SHDW_RANGE_COS0.set_user_attribute("diag_reg", "0");
      CFG_SHDW_RANGE_COS0.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SHDW_RANGE_COS0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SHDW_RANGE_COS0:dont_test") ) CFG_SHDW_RANGE_COS0.set_test_reg(1'b0);
      if (!add_reg( CFG_SHDW_RANGE_COS0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SHDW_RANGE_COS0"));
      end
   CFG_SHDW_RANGE_COS0.BW_RANGE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos0.internal_f[8:0]"});
   CFG_SHDW_RANGE_COS0.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos0.internal_f[30:9]"});
   CFG_SHDW_RANGE_COS0.NO_EXTRA_CREDIT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos0.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SHDW_RANGE_COS1";
    `endif
    CFG_SHDW_RANGE_COS1 = hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS1_reg::type_id::create("CFG_SHDW_RANGE_COS1", this);
    CFG_SHDW_RANGE_COS1.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000078, 32, 32'b00000000000000000000000001000000);
    CFG_SHDW_RANGE_COS1.set_space_addr("MSG", 28'h4000078);
    CFG_SHDW_RANGE_COS1.set_space_addr("msg_bus_port", 'h21);
    CFG_SHDW_RANGE_COS1.set_space_addr("MEM-SB",28'h4000078);
    CFG_SHDW_RANGE_COS1.set_space_addr("MEM", 28'h4000078);
      CFG_SHDW_RANGE_COS1.set_space("MEM");
      CFG_SHDW_RANGE_COS1.set_msg_opcode("MEM-SB");
      CFG_SHDW_RANGE_COS1.set_fid(4'h0, "MEM-SB");
  	CFG_SHDW_RANGE_COS1.set_bar(4'h2, "MEM-SB");
      CFG_SHDW_RANGE_COS1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SHDW_RANGE_COS1.set_user_attribute("diag_reg", "0");
      CFG_SHDW_RANGE_COS1.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SHDW_RANGE_COS1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SHDW_RANGE_COS1:dont_test") ) CFG_SHDW_RANGE_COS1.set_test_reg(1'b0);
      if (!add_reg( CFG_SHDW_RANGE_COS1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SHDW_RANGE_COS1"));
      end
   CFG_SHDW_RANGE_COS1.BW_RANGE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos1.internal_f[8:0]"});
   CFG_SHDW_RANGE_COS1.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos1.internal_f[30:9]"});
   CFG_SHDW_RANGE_COS1.NO_EXTRA_CREDIT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos1.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SHDW_RANGE_COS2";
    `endif
    CFG_SHDW_RANGE_COS2 = hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS2_reg::type_id::create("CFG_SHDW_RANGE_COS2", this);
    CFG_SHDW_RANGE_COS2.set_cfg(16'h0, 16'h0, 16'h0, 28'h400007C, 32, 32'b00000000000000000000000001000000);
    CFG_SHDW_RANGE_COS2.set_space_addr("MSG", 28'h400007C);
    CFG_SHDW_RANGE_COS2.set_space_addr("msg_bus_port", 'h21);
    CFG_SHDW_RANGE_COS2.set_space_addr("MEM-SB",28'h400007C);
    CFG_SHDW_RANGE_COS2.set_space_addr("MEM", 28'h400007C);
      CFG_SHDW_RANGE_COS2.set_space("MEM");
      CFG_SHDW_RANGE_COS2.set_msg_opcode("MEM-SB");
      CFG_SHDW_RANGE_COS2.set_fid(4'h0, "MEM-SB");
  	CFG_SHDW_RANGE_COS2.set_bar(4'h2, "MEM-SB");
      CFG_SHDW_RANGE_COS2.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SHDW_RANGE_COS2.set_user_attribute("diag_reg", "0");
      CFG_SHDW_RANGE_COS2.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SHDW_RANGE_COS2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SHDW_RANGE_COS2:dont_test") ) CFG_SHDW_RANGE_COS2.set_test_reg(1'b0);
      if (!add_reg( CFG_SHDW_RANGE_COS2 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SHDW_RANGE_COS2"));
      end
   CFG_SHDW_RANGE_COS2.BW_RANGE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos2.internal_f[8:0]"});
   CFG_SHDW_RANGE_COS2.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos2.internal_f[30:9]"});
   CFG_SHDW_RANGE_COS2.NO_EXTRA_CREDIT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos2.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SHDW_RANGE_COS3";
    `endif
    CFG_SHDW_RANGE_COS3 = hqm_list_sel_pipe_bridge_CFG_SHDW_RANGE_COS3_reg::type_id::create("CFG_SHDW_RANGE_COS3", this);
    CFG_SHDW_RANGE_COS3.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000080, 32, 32'b00000000000000000000000001000000);
    CFG_SHDW_RANGE_COS3.set_space_addr("MSG", 28'h4000080);
    CFG_SHDW_RANGE_COS3.set_space_addr("msg_bus_port", 'h21);
    CFG_SHDW_RANGE_COS3.set_space_addr("MEM-SB",28'h4000080);
    CFG_SHDW_RANGE_COS3.set_space_addr("MEM", 28'h4000080);
      CFG_SHDW_RANGE_COS3.set_space("MEM");
      CFG_SHDW_RANGE_COS3.set_msg_opcode("MEM-SB");
      CFG_SHDW_RANGE_COS3.set_fid(4'h0, "MEM-SB");
  	CFG_SHDW_RANGE_COS3.set_bar(4'h2, "MEM-SB");
      CFG_SHDW_RANGE_COS3.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SHDW_RANGE_COS3.set_user_attribute("diag_reg", "0");
      CFG_SHDW_RANGE_COS3.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SHDW_RANGE_COS3.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SHDW_RANGE_COS3:dont_test") ) CFG_SHDW_RANGE_COS3.set_test_reg(1'b0);
      if (!add_reg( CFG_SHDW_RANGE_COS3 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SHDW_RANGE_COS3"));
      end
   CFG_SHDW_RANGE_COS3.BW_RANGE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos3.internal_f[8:0]"});
   CFG_SHDW_RANGE_COS3.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos3.internal_f[30:9]"});
   CFG_SHDW_RANGE_COS3.NO_EXTRA_CREDIT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_shdw_range_cos3.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SCH_RDY_L";
    `endif
    CFG_SCH_RDY_L = hqm_list_sel_pipe_bridge_CFG_SCH_RDY_L_reg::type_id::create("CFG_SCH_RDY_L", this);
    CFG_SCH_RDY_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000084, 32, 32'b00000000000000000000000000000000);
    CFG_SCH_RDY_L.set_space_addr("MSG", 28'h4000084);
    CFG_SCH_RDY_L.set_space_addr("msg_bus_port", 'h21);
    CFG_SCH_RDY_L.set_space_addr("MEM-SB",28'h4000084);
    CFG_SCH_RDY_L.set_space_addr("MEM", 28'h4000084);
      CFG_SCH_RDY_L.set_space("MEM");
      CFG_SCH_RDY_L.set_msg_opcode("MEM-SB");
      CFG_SCH_RDY_L.set_fid(4'h0, "MEM-SB");
  	CFG_SCH_RDY_L.set_bar(4'h2, "MEM-SB");
      CFG_SCH_RDY_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SCH_RDY_L.set_user_attribute("diag_reg", "0");
      CFG_SCH_RDY_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SCH_RDY_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SCH_RDY_L:dont_test") ) CFG_SCH_RDY_L.set_test_reg(1'b0);
      if (!add_reg( CFG_SCH_RDY_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_SCH_RDY_L"));
      end
   CFG_SCH_RDY_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_sch_rdy.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SCH_RDY_H";
    `endif
    CFG_SCH_RDY_H = hqm_list_sel_pipe_bridge_CFG_SCH_RDY_H_reg::type_id::create("CFG_SCH_RDY_H", this);
    CFG_SCH_RDY_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000088, 32, 32'b00000000000000000000000000000000);
    CFG_SCH_RDY_H.set_space_addr("MSG", 28'h4000088);
    CFG_SCH_RDY_H.set_space_addr("msg_bus_port", 'h21);
    CFG_SCH_RDY_H.set_space_addr("MEM-SB",28'h4000088);
    CFG_SCH_RDY_H.set_space_addr("MEM", 28'h4000088);
      CFG_SCH_RDY_H.set_space("MEM");
      CFG_SCH_RDY_H.set_msg_opcode("MEM-SB");
      CFG_SCH_RDY_H.set_fid(4'h0, "MEM-SB");
  	CFG_SCH_RDY_H.set_bar(4'h2, "MEM-SB");
      CFG_SCH_RDY_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SCH_RDY_H.set_user_attribute("diag_reg", "0");
      CFG_SCH_RDY_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SCH_RDY_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SCH_RDY_H:dont_test") ) CFG_SCH_RDY_H.set_test_reg(1'b0);
      if (!add_reg( CFG_SCH_RDY_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_SCH_RDY_H"));
      end
   CFG_SCH_RDY_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_sch_rdy.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SCHD_COS0_L";
    `endif
    CFG_SCHD_COS0_L = hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_L_reg::type_id::create("CFG_SCHD_COS0_L", this);
    CFG_SCHD_COS0_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h400008C, 32, 32'b00000000000000000000000000000000);
    CFG_SCHD_COS0_L.set_space_addr("MSG", 28'h400008C);
    CFG_SCHD_COS0_L.set_space_addr("msg_bus_port", 'h21);
    CFG_SCHD_COS0_L.set_space_addr("MEM-SB",28'h400008C);
    CFG_SCHD_COS0_L.set_space_addr("MEM", 28'h400008C);
      CFG_SCHD_COS0_L.set_space("MEM");
      CFG_SCHD_COS0_L.set_msg_opcode("MEM-SB");
      CFG_SCHD_COS0_L.set_fid(4'h0, "MEM-SB");
  	CFG_SCHD_COS0_L.set_bar(4'h2, "MEM-SB");
      CFG_SCHD_COS0_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SCHD_COS0_L.set_user_attribute("diag_reg", "0");
      CFG_SCHD_COS0_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SCHD_COS0_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SCHD_COS0_L:dont_test") ) CFG_SCHD_COS0_L.set_test_reg(1'b0);
      if (!add_reg( CFG_SCHD_COS0_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_SCHD_COS0_L"));
      end
   CFG_SCHD_COS0_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos0.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SCHD_COS0_H";
    `endif
    CFG_SCHD_COS0_H = hqm_list_sel_pipe_bridge_CFG_SCHD_COS0_H_reg::type_id::create("CFG_SCHD_COS0_H", this);
    CFG_SCHD_COS0_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000090, 32, 32'b00000000000000000000000000000000);
    CFG_SCHD_COS0_H.set_space_addr("MSG", 28'h4000090);
    CFG_SCHD_COS0_H.set_space_addr("msg_bus_port", 'h21);
    CFG_SCHD_COS0_H.set_space_addr("MEM-SB",28'h4000090);
    CFG_SCHD_COS0_H.set_space_addr("MEM", 28'h4000090);
      CFG_SCHD_COS0_H.set_space("MEM");
      CFG_SCHD_COS0_H.set_msg_opcode("MEM-SB");
      CFG_SCHD_COS0_H.set_fid(4'h0, "MEM-SB");
  	CFG_SCHD_COS0_H.set_bar(4'h2, "MEM-SB");
      CFG_SCHD_COS0_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SCHD_COS0_H.set_user_attribute("diag_reg", "0");
      CFG_SCHD_COS0_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SCHD_COS0_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SCHD_COS0_H:dont_test") ) CFG_SCHD_COS0_H.set_test_reg(1'b0);
      if (!add_reg( CFG_SCHD_COS0_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_SCHD_COS0_H"));
      end
   CFG_SCHD_COS0_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos0.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SCHD_COS1_L";
    `endif
    CFG_SCHD_COS1_L = hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_L_reg::type_id::create("CFG_SCHD_COS1_L", this);
    CFG_SCHD_COS1_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000094, 32, 32'b00000000000000000000000000000000);
    CFG_SCHD_COS1_L.set_space_addr("MSG", 28'h4000094);
    CFG_SCHD_COS1_L.set_space_addr("msg_bus_port", 'h21);
    CFG_SCHD_COS1_L.set_space_addr("MEM-SB",28'h4000094);
    CFG_SCHD_COS1_L.set_space_addr("MEM", 28'h4000094);
      CFG_SCHD_COS1_L.set_space("MEM");
      CFG_SCHD_COS1_L.set_msg_opcode("MEM-SB");
      CFG_SCHD_COS1_L.set_fid(4'h0, "MEM-SB");
  	CFG_SCHD_COS1_L.set_bar(4'h2, "MEM-SB");
      CFG_SCHD_COS1_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SCHD_COS1_L.set_user_attribute("diag_reg", "0");
      CFG_SCHD_COS1_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SCHD_COS1_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SCHD_COS1_L:dont_test") ) CFG_SCHD_COS1_L.set_test_reg(1'b0);
      if (!add_reg( CFG_SCHD_COS1_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_SCHD_COS1_L"));
      end
   CFG_SCHD_COS1_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos1.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SCHD_COS1_H";
    `endif
    CFG_SCHD_COS1_H = hqm_list_sel_pipe_bridge_CFG_SCHD_COS1_H_reg::type_id::create("CFG_SCHD_COS1_H", this);
    CFG_SCHD_COS1_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000098, 32, 32'b00000000000000000000000000000000);
    CFG_SCHD_COS1_H.set_space_addr("MSG", 28'h4000098);
    CFG_SCHD_COS1_H.set_space_addr("msg_bus_port", 'h21);
    CFG_SCHD_COS1_H.set_space_addr("MEM-SB",28'h4000098);
    CFG_SCHD_COS1_H.set_space_addr("MEM", 28'h4000098);
      CFG_SCHD_COS1_H.set_space("MEM");
      CFG_SCHD_COS1_H.set_msg_opcode("MEM-SB");
      CFG_SCHD_COS1_H.set_fid(4'h0, "MEM-SB");
  	CFG_SCHD_COS1_H.set_bar(4'h2, "MEM-SB");
      CFG_SCHD_COS1_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SCHD_COS1_H.set_user_attribute("diag_reg", "0");
      CFG_SCHD_COS1_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SCHD_COS1_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SCHD_COS1_H:dont_test") ) CFG_SCHD_COS1_H.set_test_reg(1'b0);
      if (!add_reg( CFG_SCHD_COS1_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_SCHD_COS1_H"));
      end
   CFG_SCHD_COS1_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos1.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SCHD_COS2_L";
    `endif
    CFG_SCHD_COS2_L = hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_L_reg::type_id::create("CFG_SCHD_COS2_L", this);
    CFG_SCHD_COS2_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h400009C, 32, 32'b00000000000000000000000000000000);
    CFG_SCHD_COS2_L.set_space_addr("MSG", 28'h400009C);
    CFG_SCHD_COS2_L.set_space_addr("msg_bus_port", 'h21);
    CFG_SCHD_COS2_L.set_space_addr("MEM-SB",28'h400009C);
    CFG_SCHD_COS2_L.set_space_addr("MEM", 28'h400009C);
      CFG_SCHD_COS2_L.set_space("MEM");
      CFG_SCHD_COS2_L.set_msg_opcode("MEM-SB");
      CFG_SCHD_COS2_L.set_fid(4'h0, "MEM-SB");
  	CFG_SCHD_COS2_L.set_bar(4'h2, "MEM-SB");
      CFG_SCHD_COS2_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SCHD_COS2_L.set_user_attribute("diag_reg", "0");
      CFG_SCHD_COS2_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SCHD_COS2_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SCHD_COS2_L:dont_test") ) CFG_SCHD_COS2_L.set_test_reg(1'b0);
      if (!add_reg( CFG_SCHD_COS2_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_SCHD_COS2_L"));
      end
   CFG_SCHD_COS2_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos2.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SCHD_COS2_H";
    `endif
    CFG_SCHD_COS2_H = hqm_list_sel_pipe_bridge_CFG_SCHD_COS2_H_reg::type_id::create("CFG_SCHD_COS2_H", this);
    CFG_SCHD_COS2_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000A0, 32, 32'b00000000000000000000000000000000);
    CFG_SCHD_COS2_H.set_space_addr("MSG", 28'h40000A0);
    CFG_SCHD_COS2_H.set_space_addr("msg_bus_port", 'h21);
    CFG_SCHD_COS2_H.set_space_addr("MEM-SB",28'h40000A0);
    CFG_SCHD_COS2_H.set_space_addr("MEM", 28'h40000A0);
      CFG_SCHD_COS2_H.set_space("MEM");
      CFG_SCHD_COS2_H.set_msg_opcode("MEM-SB");
      CFG_SCHD_COS2_H.set_fid(4'h0, "MEM-SB");
  	CFG_SCHD_COS2_H.set_bar(4'h2, "MEM-SB");
      CFG_SCHD_COS2_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SCHD_COS2_H.set_user_attribute("diag_reg", "0");
      CFG_SCHD_COS2_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SCHD_COS2_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SCHD_COS2_H:dont_test") ) CFG_SCHD_COS2_H.set_test_reg(1'b0);
      if (!add_reg( CFG_SCHD_COS2_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_SCHD_COS2_H"));
      end
   CFG_SCHD_COS2_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos2.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SCHD_COS3_L";
    `endif
    CFG_SCHD_COS3_L = hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_L_reg::type_id::create("CFG_SCHD_COS3_L", this);
    CFG_SCHD_COS3_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000A4, 32, 32'b00000000000000000000000000000000);
    CFG_SCHD_COS3_L.set_space_addr("MSG", 28'h40000A4);
    CFG_SCHD_COS3_L.set_space_addr("msg_bus_port", 'h21);
    CFG_SCHD_COS3_L.set_space_addr("MEM-SB",28'h40000A4);
    CFG_SCHD_COS3_L.set_space_addr("MEM", 28'h40000A4);
      CFG_SCHD_COS3_L.set_space("MEM");
      CFG_SCHD_COS3_L.set_msg_opcode("MEM-SB");
      CFG_SCHD_COS3_L.set_fid(4'h0, "MEM-SB");
  	CFG_SCHD_COS3_L.set_bar(4'h2, "MEM-SB");
      CFG_SCHD_COS3_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SCHD_COS3_L.set_user_attribute("diag_reg", "0");
      CFG_SCHD_COS3_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SCHD_COS3_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SCHD_COS3_L:dont_test") ) CFG_SCHD_COS3_L.set_test_reg(1'b0);
      if (!add_reg( CFG_SCHD_COS3_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_SCHD_COS3_L"));
      end
   CFG_SCHD_COS3_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos3.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SCHD_COS3_H";
    `endif
    CFG_SCHD_COS3_H = hqm_list_sel_pipe_bridge_CFG_SCHD_COS3_H_reg::type_id::create("CFG_SCHD_COS3_H", this);
    CFG_SCHD_COS3_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000A8, 32, 32'b00000000000000000000000000000000);
    CFG_SCHD_COS3_H.set_space_addr("MSG", 28'h40000A8);
    CFG_SCHD_COS3_H.set_space_addr("msg_bus_port", 'h21);
    CFG_SCHD_COS3_H.set_space_addr("MEM-SB",28'h40000A8);
    CFG_SCHD_COS3_H.set_space_addr("MEM", 28'h40000A8);
      CFG_SCHD_COS3_H.set_space("MEM");
      CFG_SCHD_COS3_H.set_msg_opcode("MEM-SB");
      CFG_SCHD_COS3_H.set_fid(4'h0, "MEM-SB");
  	CFG_SCHD_COS3_H.set_bar(4'h2, "MEM-SB");
      CFG_SCHD_COS3_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SCHD_COS3_H.set_user_attribute("diag_reg", "0");
      CFG_SCHD_COS3_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_SCHD_COS3_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SCHD_COS3_H:dont_test") ) CFG_SCHD_COS3_H.set_test_reg(1'b0);
      if (!add_reg( CFG_SCHD_COS3_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_SCHD_COS3_H"));
      end
   CFG_SCHD_COS3_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_schd_cos3.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RDY_COS0_L";
    `endif
    CFG_RDY_COS0_L = hqm_list_sel_pipe_bridge_CFG_RDY_COS0_L_reg::type_id::create("CFG_RDY_COS0_L", this);
    CFG_RDY_COS0_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000AC, 32, 32'b00000000000000000000000000000000);
    CFG_RDY_COS0_L.set_space_addr("MSG", 28'h40000AC);
    CFG_RDY_COS0_L.set_space_addr("msg_bus_port", 'h21);
    CFG_RDY_COS0_L.set_space_addr("MEM-SB",28'h40000AC);
    CFG_RDY_COS0_L.set_space_addr("MEM", 28'h40000AC);
      CFG_RDY_COS0_L.set_space("MEM");
      CFG_RDY_COS0_L.set_msg_opcode("MEM-SB");
      CFG_RDY_COS0_L.set_fid(4'h0, "MEM-SB");
  	CFG_RDY_COS0_L.set_bar(4'h2, "MEM-SB");
      CFG_RDY_COS0_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RDY_COS0_L.set_user_attribute("diag_reg", "0");
      CFG_RDY_COS0_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RDY_COS0_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RDY_COS0_L:dont_test") ) CFG_RDY_COS0_L.set_test_reg(1'b0);
      if (!add_reg( CFG_RDY_COS0_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_RDY_COS0_L"));
      end
   CFG_RDY_COS0_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos0.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RDY_COS0_H";
    `endif
    CFG_RDY_COS0_H = hqm_list_sel_pipe_bridge_CFG_RDY_COS0_H_reg::type_id::create("CFG_RDY_COS0_H", this);
    CFG_RDY_COS0_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000B0, 32, 32'b00000000000000000000000000000000);
    CFG_RDY_COS0_H.set_space_addr("MSG", 28'h40000B0);
    CFG_RDY_COS0_H.set_space_addr("msg_bus_port", 'h21);
    CFG_RDY_COS0_H.set_space_addr("MEM-SB",28'h40000B0);
    CFG_RDY_COS0_H.set_space_addr("MEM", 28'h40000B0);
      CFG_RDY_COS0_H.set_space("MEM");
      CFG_RDY_COS0_H.set_msg_opcode("MEM-SB");
      CFG_RDY_COS0_H.set_fid(4'h0, "MEM-SB");
  	CFG_RDY_COS0_H.set_bar(4'h2, "MEM-SB");
      CFG_RDY_COS0_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RDY_COS0_H.set_user_attribute("diag_reg", "0");
      CFG_RDY_COS0_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RDY_COS0_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RDY_COS0_H:dont_test") ) CFG_RDY_COS0_H.set_test_reg(1'b0);
      if (!add_reg( CFG_RDY_COS0_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_RDY_COS0_H"));
      end
   CFG_RDY_COS0_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos0.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RDY_COS1_L";
    `endif
    CFG_RDY_COS1_L = hqm_list_sel_pipe_bridge_CFG_RDY_COS1_L_reg::type_id::create("CFG_RDY_COS1_L", this);
    CFG_RDY_COS1_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000B4, 32, 32'b00000000000000000000000000000000);
    CFG_RDY_COS1_L.set_space_addr("MSG", 28'h40000B4);
    CFG_RDY_COS1_L.set_space_addr("msg_bus_port", 'h21);
    CFG_RDY_COS1_L.set_space_addr("MEM-SB",28'h40000B4);
    CFG_RDY_COS1_L.set_space_addr("MEM", 28'h40000B4);
      CFG_RDY_COS1_L.set_space("MEM");
      CFG_RDY_COS1_L.set_msg_opcode("MEM-SB");
      CFG_RDY_COS1_L.set_fid(4'h0, "MEM-SB");
  	CFG_RDY_COS1_L.set_bar(4'h2, "MEM-SB");
      CFG_RDY_COS1_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RDY_COS1_L.set_user_attribute("diag_reg", "0");
      CFG_RDY_COS1_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RDY_COS1_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RDY_COS1_L:dont_test") ) CFG_RDY_COS1_L.set_test_reg(1'b0);
      if (!add_reg( CFG_RDY_COS1_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_RDY_COS1_L"));
      end
   CFG_RDY_COS1_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos1.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RDY_COS1_H";
    `endif
    CFG_RDY_COS1_H = hqm_list_sel_pipe_bridge_CFG_RDY_COS1_H_reg::type_id::create("CFG_RDY_COS1_H", this);
    CFG_RDY_COS1_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000B8, 32, 32'b00000000000000000000000000000000);
    CFG_RDY_COS1_H.set_space_addr("MSG", 28'h40000B8);
    CFG_RDY_COS1_H.set_space_addr("msg_bus_port", 'h21);
    CFG_RDY_COS1_H.set_space_addr("MEM-SB",28'h40000B8);
    CFG_RDY_COS1_H.set_space_addr("MEM", 28'h40000B8);
      CFG_RDY_COS1_H.set_space("MEM");
      CFG_RDY_COS1_H.set_msg_opcode("MEM-SB");
      CFG_RDY_COS1_H.set_fid(4'h0, "MEM-SB");
  	CFG_RDY_COS1_H.set_bar(4'h2, "MEM-SB");
      CFG_RDY_COS1_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RDY_COS1_H.set_user_attribute("diag_reg", "0");
      CFG_RDY_COS1_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RDY_COS1_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RDY_COS1_H:dont_test") ) CFG_RDY_COS1_H.set_test_reg(1'b0);
      if (!add_reg( CFG_RDY_COS1_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_RDY_COS1_H"));
      end
   CFG_RDY_COS1_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos1.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RDY_COS2_L";
    `endif
    CFG_RDY_COS2_L = hqm_list_sel_pipe_bridge_CFG_RDY_COS2_L_reg::type_id::create("CFG_RDY_COS2_L", this);
    CFG_RDY_COS2_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000BC, 32, 32'b00000000000000000000000000000000);
    CFG_RDY_COS2_L.set_space_addr("MSG", 28'h40000BC);
    CFG_RDY_COS2_L.set_space_addr("msg_bus_port", 'h21);
    CFG_RDY_COS2_L.set_space_addr("MEM-SB",28'h40000BC);
    CFG_RDY_COS2_L.set_space_addr("MEM", 28'h40000BC);
      CFG_RDY_COS2_L.set_space("MEM");
      CFG_RDY_COS2_L.set_msg_opcode("MEM-SB");
      CFG_RDY_COS2_L.set_fid(4'h0, "MEM-SB");
  	CFG_RDY_COS2_L.set_bar(4'h2, "MEM-SB");
      CFG_RDY_COS2_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RDY_COS2_L.set_user_attribute("diag_reg", "0");
      CFG_RDY_COS2_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RDY_COS2_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RDY_COS2_L:dont_test") ) CFG_RDY_COS2_L.set_test_reg(1'b0);
      if (!add_reg( CFG_RDY_COS2_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_RDY_COS2_L"));
      end
   CFG_RDY_COS2_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos2.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RDY_COS2_H";
    `endif
    CFG_RDY_COS2_H = hqm_list_sel_pipe_bridge_CFG_RDY_COS2_H_reg::type_id::create("CFG_RDY_COS2_H", this);
    CFG_RDY_COS2_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000C0, 32, 32'b00000000000000000000000000000000);
    CFG_RDY_COS2_H.set_space_addr("MSG", 28'h40000C0);
    CFG_RDY_COS2_H.set_space_addr("msg_bus_port", 'h21);
    CFG_RDY_COS2_H.set_space_addr("MEM-SB",28'h40000C0);
    CFG_RDY_COS2_H.set_space_addr("MEM", 28'h40000C0);
      CFG_RDY_COS2_H.set_space("MEM");
      CFG_RDY_COS2_H.set_msg_opcode("MEM-SB");
      CFG_RDY_COS2_H.set_fid(4'h0, "MEM-SB");
  	CFG_RDY_COS2_H.set_bar(4'h2, "MEM-SB");
      CFG_RDY_COS2_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RDY_COS2_H.set_user_attribute("diag_reg", "0");
      CFG_RDY_COS2_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RDY_COS2_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RDY_COS2_H:dont_test") ) CFG_RDY_COS2_H.set_test_reg(1'b0);
      if (!add_reg( CFG_RDY_COS2_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_RDY_COS2_H"));
      end
   CFG_RDY_COS2_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos2.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RDY_COS3_L";
    `endif
    CFG_RDY_COS3_L = hqm_list_sel_pipe_bridge_CFG_RDY_COS3_L_reg::type_id::create("CFG_RDY_COS3_L", this);
    CFG_RDY_COS3_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000C4, 32, 32'b00000000000000000000000000000000);
    CFG_RDY_COS3_L.set_space_addr("MSG", 28'h40000C4);
    CFG_RDY_COS3_L.set_space_addr("msg_bus_port", 'h21);
    CFG_RDY_COS3_L.set_space_addr("MEM-SB",28'h40000C4);
    CFG_RDY_COS3_L.set_space_addr("MEM", 28'h40000C4);
      CFG_RDY_COS3_L.set_space("MEM");
      CFG_RDY_COS3_L.set_msg_opcode("MEM-SB");
      CFG_RDY_COS3_L.set_fid(4'h0, "MEM-SB");
  	CFG_RDY_COS3_L.set_bar(4'h2, "MEM-SB");
      CFG_RDY_COS3_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RDY_COS3_L.set_user_attribute("diag_reg", "0");
      CFG_RDY_COS3_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RDY_COS3_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RDY_COS3_L:dont_test") ) CFG_RDY_COS3_L.set_test_reg(1'b0);
      if (!add_reg( CFG_RDY_COS3_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_RDY_COS3_L"));
      end
   CFG_RDY_COS3_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos3.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RDY_COS3_H";
    `endif
    CFG_RDY_COS3_H = hqm_list_sel_pipe_bridge_CFG_RDY_COS3_H_reg::type_id::create("CFG_RDY_COS3_H", this);
    CFG_RDY_COS3_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000C8, 32, 32'b00000000000000000000000000000000);
    CFG_RDY_COS3_H.set_space_addr("MSG", 28'h40000C8);
    CFG_RDY_COS3_H.set_space_addr("msg_bus_port", 'h21);
    CFG_RDY_COS3_H.set_space_addr("MEM-SB",28'h40000C8);
    CFG_RDY_COS3_H.set_space_addr("MEM", 28'h40000C8);
      CFG_RDY_COS3_H.set_space("MEM");
      CFG_RDY_COS3_H.set_msg_opcode("MEM-SB");
      CFG_RDY_COS3_H.set_fid(4'h0, "MEM-SB");
  	CFG_RDY_COS3_H.set_bar(4'h2, "MEM-SB");
      CFG_RDY_COS3_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RDY_COS3_H.set_user_attribute("diag_reg", "0");
      CFG_RDY_COS3_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RDY_COS3_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RDY_COS3_H:dont_test") ) CFG_RDY_COS3_H.set_test_reg(1'b0);
      if (!add_reg( CFG_RDY_COS3_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_RDY_COS3_H"));
      end
   CFG_RDY_COS3_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rdy_cos3.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RND_LOSS_COS0_L";
    `endif
    CFG_RND_LOSS_COS0_L = hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_L_reg::type_id::create("CFG_RND_LOSS_COS0_L", this);
    CFG_RND_LOSS_COS0_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000CC, 32, 32'b00000000000000000000000000000000);
    CFG_RND_LOSS_COS0_L.set_space_addr("MSG", 28'h40000CC);
    CFG_RND_LOSS_COS0_L.set_space_addr("msg_bus_port", 'h21);
    CFG_RND_LOSS_COS0_L.set_space_addr("MEM-SB",28'h40000CC);
    CFG_RND_LOSS_COS0_L.set_space_addr("MEM", 28'h40000CC);
      CFG_RND_LOSS_COS0_L.set_space("MEM");
      CFG_RND_LOSS_COS0_L.set_msg_opcode("MEM-SB");
      CFG_RND_LOSS_COS0_L.set_fid(4'h0, "MEM-SB");
  	CFG_RND_LOSS_COS0_L.set_bar(4'h2, "MEM-SB");
      CFG_RND_LOSS_COS0_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RND_LOSS_COS0_L.set_user_attribute("diag_reg", "0");
      CFG_RND_LOSS_COS0_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RND_LOSS_COS0_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RND_LOSS_COS0_L:dont_test") ) CFG_RND_LOSS_COS0_L.set_test_reg(1'b0);
      if (!add_reg( CFG_RND_LOSS_COS0_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_RND_LOSS_COS0_L"));
      end
   CFG_RND_LOSS_COS0_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos0.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RND_LOSS_COS0_H";
    `endif
    CFG_RND_LOSS_COS0_H = hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS0_H_reg::type_id::create("CFG_RND_LOSS_COS0_H", this);
    CFG_RND_LOSS_COS0_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000D0, 32, 32'b00000000000000000000000000000000);
    CFG_RND_LOSS_COS0_H.set_space_addr("MSG", 28'h40000D0);
    CFG_RND_LOSS_COS0_H.set_space_addr("msg_bus_port", 'h21);
    CFG_RND_LOSS_COS0_H.set_space_addr("MEM-SB",28'h40000D0);
    CFG_RND_LOSS_COS0_H.set_space_addr("MEM", 28'h40000D0);
      CFG_RND_LOSS_COS0_H.set_space("MEM");
      CFG_RND_LOSS_COS0_H.set_msg_opcode("MEM-SB");
      CFG_RND_LOSS_COS0_H.set_fid(4'h0, "MEM-SB");
  	CFG_RND_LOSS_COS0_H.set_bar(4'h2, "MEM-SB");
      CFG_RND_LOSS_COS0_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RND_LOSS_COS0_H.set_user_attribute("diag_reg", "0");
      CFG_RND_LOSS_COS0_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RND_LOSS_COS0_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RND_LOSS_COS0_H:dont_test") ) CFG_RND_LOSS_COS0_H.set_test_reg(1'b0);
      if (!add_reg( CFG_RND_LOSS_COS0_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_RND_LOSS_COS0_H"));
      end
   CFG_RND_LOSS_COS0_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos0.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RND_LOSS_COS1_L";
    `endif
    CFG_RND_LOSS_COS1_L = hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_L_reg::type_id::create("CFG_RND_LOSS_COS1_L", this);
    CFG_RND_LOSS_COS1_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000D4, 32, 32'b00000000000000000000000000000000);
    CFG_RND_LOSS_COS1_L.set_space_addr("MSG", 28'h40000D4);
    CFG_RND_LOSS_COS1_L.set_space_addr("msg_bus_port", 'h21);
    CFG_RND_LOSS_COS1_L.set_space_addr("MEM-SB",28'h40000D4);
    CFG_RND_LOSS_COS1_L.set_space_addr("MEM", 28'h40000D4);
      CFG_RND_LOSS_COS1_L.set_space("MEM");
      CFG_RND_LOSS_COS1_L.set_msg_opcode("MEM-SB");
      CFG_RND_LOSS_COS1_L.set_fid(4'h0, "MEM-SB");
  	CFG_RND_LOSS_COS1_L.set_bar(4'h2, "MEM-SB");
      CFG_RND_LOSS_COS1_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RND_LOSS_COS1_L.set_user_attribute("diag_reg", "0");
      CFG_RND_LOSS_COS1_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RND_LOSS_COS1_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RND_LOSS_COS1_L:dont_test") ) CFG_RND_LOSS_COS1_L.set_test_reg(1'b0);
      if (!add_reg( CFG_RND_LOSS_COS1_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_RND_LOSS_COS1_L"));
      end
   CFG_RND_LOSS_COS1_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos1.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RND_LOSS_COS1_H";
    `endif
    CFG_RND_LOSS_COS1_H = hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS1_H_reg::type_id::create("CFG_RND_LOSS_COS1_H", this);
    CFG_RND_LOSS_COS1_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000D8, 32, 32'b00000000000000000000000000000000);
    CFG_RND_LOSS_COS1_H.set_space_addr("MSG", 28'h40000D8);
    CFG_RND_LOSS_COS1_H.set_space_addr("msg_bus_port", 'h21);
    CFG_RND_LOSS_COS1_H.set_space_addr("MEM-SB",28'h40000D8);
    CFG_RND_LOSS_COS1_H.set_space_addr("MEM", 28'h40000D8);
      CFG_RND_LOSS_COS1_H.set_space("MEM");
      CFG_RND_LOSS_COS1_H.set_msg_opcode("MEM-SB");
      CFG_RND_LOSS_COS1_H.set_fid(4'h0, "MEM-SB");
  	CFG_RND_LOSS_COS1_H.set_bar(4'h2, "MEM-SB");
      CFG_RND_LOSS_COS1_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RND_LOSS_COS1_H.set_user_attribute("diag_reg", "0");
      CFG_RND_LOSS_COS1_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RND_LOSS_COS1_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RND_LOSS_COS1_H:dont_test") ) CFG_RND_LOSS_COS1_H.set_test_reg(1'b0);
      if (!add_reg( CFG_RND_LOSS_COS1_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_RND_LOSS_COS1_H"));
      end
   CFG_RND_LOSS_COS1_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos1.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RND_LOSS_COS2_L";
    `endif
    CFG_RND_LOSS_COS2_L = hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_L_reg::type_id::create("CFG_RND_LOSS_COS2_L", this);
    CFG_RND_LOSS_COS2_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000DC, 32, 32'b00000000000000000000000000000000);
    CFG_RND_LOSS_COS2_L.set_space_addr("MSG", 28'h40000DC);
    CFG_RND_LOSS_COS2_L.set_space_addr("msg_bus_port", 'h21);
    CFG_RND_LOSS_COS2_L.set_space_addr("MEM-SB",28'h40000DC);
    CFG_RND_LOSS_COS2_L.set_space_addr("MEM", 28'h40000DC);
      CFG_RND_LOSS_COS2_L.set_space("MEM");
      CFG_RND_LOSS_COS2_L.set_msg_opcode("MEM-SB");
      CFG_RND_LOSS_COS2_L.set_fid(4'h0, "MEM-SB");
  	CFG_RND_LOSS_COS2_L.set_bar(4'h2, "MEM-SB");
      CFG_RND_LOSS_COS2_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RND_LOSS_COS2_L.set_user_attribute("diag_reg", "0");
      CFG_RND_LOSS_COS2_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RND_LOSS_COS2_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RND_LOSS_COS2_L:dont_test") ) CFG_RND_LOSS_COS2_L.set_test_reg(1'b0);
      if (!add_reg( CFG_RND_LOSS_COS2_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_RND_LOSS_COS2_L"));
      end
   CFG_RND_LOSS_COS2_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos2.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RND_LOSS_COS2_H";
    `endif
    CFG_RND_LOSS_COS2_H = hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS2_H_reg::type_id::create("CFG_RND_LOSS_COS2_H", this);
    CFG_RND_LOSS_COS2_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000E0, 32, 32'b00000000000000000000000000000000);
    CFG_RND_LOSS_COS2_H.set_space_addr("MSG", 28'h40000E0);
    CFG_RND_LOSS_COS2_H.set_space_addr("msg_bus_port", 'h21);
    CFG_RND_LOSS_COS2_H.set_space_addr("MEM-SB",28'h40000E0);
    CFG_RND_LOSS_COS2_H.set_space_addr("MEM", 28'h40000E0);
      CFG_RND_LOSS_COS2_H.set_space("MEM");
      CFG_RND_LOSS_COS2_H.set_msg_opcode("MEM-SB");
      CFG_RND_LOSS_COS2_H.set_fid(4'h0, "MEM-SB");
  	CFG_RND_LOSS_COS2_H.set_bar(4'h2, "MEM-SB");
      CFG_RND_LOSS_COS2_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RND_LOSS_COS2_H.set_user_attribute("diag_reg", "0");
      CFG_RND_LOSS_COS2_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RND_LOSS_COS2_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RND_LOSS_COS2_H:dont_test") ) CFG_RND_LOSS_COS2_H.set_test_reg(1'b0);
      if (!add_reg( CFG_RND_LOSS_COS2_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_RND_LOSS_COS2_H"));
      end
   CFG_RND_LOSS_COS2_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos2.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RND_LOSS_COS3_L";
    `endif
    CFG_RND_LOSS_COS3_L = hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_L_reg::type_id::create("CFG_RND_LOSS_COS3_L", this);
    CFG_RND_LOSS_COS3_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000E4, 32, 32'b00000000000000000000000000000000);
    CFG_RND_LOSS_COS3_L.set_space_addr("MSG", 28'h40000E4);
    CFG_RND_LOSS_COS3_L.set_space_addr("msg_bus_port", 'h21);
    CFG_RND_LOSS_COS3_L.set_space_addr("MEM-SB",28'h40000E4);
    CFG_RND_LOSS_COS3_L.set_space_addr("MEM", 28'h40000E4);
      CFG_RND_LOSS_COS3_L.set_space("MEM");
      CFG_RND_LOSS_COS3_L.set_msg_opcode("MEM-SB");
      CFG_RND_LOSS_COS3_L.set_fid(4'h0, "MEM-SB");
  	CFG_RND_LOSS_COS3_L.set_bar(4'h2, "MEM-SB");
      CFG_RND_LOSS_COS3_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RND_LOSS_COS3_L.set_user_attribute("diag_reg", "0");
      CFG_RND_LOSS_COS3_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RND_LOSS_COS3_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RND_LOSS_COS3_L:dont_test") ) CFG_RND_LOSS_COS3_L.set_test_reg(1'b0);
      if (!add_reg( CFG_RND_LOSS_COS3_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_RND_LOSS_COS3_L"));
      end
   CFG_RND_LOSS_COS3_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos3.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_RND_LOSS_COS3_H";
    `endif
    CFG_RND_LOSS_COS3_H = hqm_list_sel_pipe_bridge_CFG_RND_LOSS_COS3_H_reg::type_id::create("CFG_RND_LOSS_COS3_H", this);
    CFG_RND_LOSS_COS3_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000E8, 32, 32'b00000000000000000000000000000000);
    CFG_RND_LOSS_COS3_H.set_space_addr("MSG", 28'h40000E8);
    CFG_RND_LOSS_COS3_H.set_space_addr("msg_bus_port", 'h21);
    CFG_RND_LOSS_COS3_H.set_space_addr("MEM-SB",28'h40000E8);
    CFG_RND_LOSS_COS3_H.set_space_addr("MEM", 28'h40000E8);
      CFG_RND_LOSS_COS3_H.set_space("MEM");
      CFG_RND_LOSS_COS3_H.set_msg_opcode("MEM-SB");
      CFG_RND_LOSS_COS3_H.set_fid(4'h0, "MEM-SB");
  	CFG_RND_LOSS_COS3_H.set_bar(4'h2, "MEM-SB");
      CFG_RND_LOSS_COS3_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_RND_LOSS_COS3_H.set_user_attribute("diag_reg", "0");
      CFG_RND_LOSS_COS3_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_RND_LOSS_COS3_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_RND_LOSS_COS3_H:dont_test") ) CFG_RND_LOSS_COS3_H.set_test_reg(1'b0);
      if (!add_reg( CFG_RND_LOSS_COS3_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_RND_LOSS_COS3_H"));
      end
   CFG_RND_LOSS_COS3_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_rnd_loss_cos3.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CNT_WIN_COS0_L";
    `endif
    CFG_CNT_WIN_COS0_L = hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_L_reg::type_id::create("CFG_CNT_WIN_COS0_L", this);
    CFG_CNT_WIN_COS0_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000EC, 32, 32'b00000000000000000000000000000000);
    CFG_CNT_WIN_COS0_L.set_space_addr("MSG", 28'h40000EC);
    CFG_CNT_WIN_COS0_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CNT_WIN_COS0_L.set_space_addr("MEM-SB",28'h40000EC);
    CFG_CNT_WIN_COS0_L.set_space_addr("MEM", 28'h40000EC);
      CFG_CNT_WIN_COS0_L.set_space("MEM");
      CFG_CNT_WIN_COS0_L.set_msg_opcode("MEM-SB");
      CFG_CNT_WIN_COS0_L.set_fid(4'h0, "MEM-SB");
  	CFG_CNT_WIN_COS0_L.set_bar(4'h2, "MEM-SB");
      CFG_CNT_WIN_COS0_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CNT_WIN_COS0_L.set_user_attribute("diag_reg", "0");
      CFG_CNT_WIN_COS0_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CNT_WIN_COS0_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CNT_WIN_COS0_L:dont_test") ) CFG_CNT_WIN_COS0_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CNT_WIN_COS0_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CNT_WIN_COS0_L"));
      end
   CFG_CNT_WIN_COS0_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos0.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CNT_WIN_COS0_H";
    `endif
    CFG_CNT_WIN_COS0_H = hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS0_H_reg::type_id::create("CFG_CNT_WIN_COS0_H", this);
    CFG_CNT_WIN_COS0_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000F0, 32, 32'b00000000000000000000000000000000);
    CFG_CNT_WIN_COS0_H.set_space_addr("MSG", 28'h40000F0);
    CFG_CNT_WIN_COS0_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CNT_WIN_COS0_H.set_space_addr("MEM-SB",28'h40000F0);
    CFG_CNT_WIN_COS0_H.set_space_addr("MEM", 28'h40000F0);
      CFG_CNT_WIN_COS0_H.set_space("MEM");
      CFG_CNT_WIN_COS0_H.set_msg_opcode("MEM-SB");
      CFG_CNT_WIN_COS0_H.set_fid(4'h0, "MEM-SB");
  	CFG_CNT_WIN_COS0_H.set_bar(4'h2, "MEM-SB");
      CFG_CNT_WIN_COS0_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CNT_WIN_COS0_H.set_user_attribute("diag_reg", "0");
      CFG_CNT_WIN_COS0_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CNT_WIN_COS0_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CNT_WIN_COS0_H:dont_test") ) CFG_CNT_WIN_COS0_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CNT_WIN_COS0_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CNT_WIN_COS0_H"));
      end
   CFG_CNT_WIN_COS0_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos0.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CNT_WIN_COS1_L";
    `endif
    CFG_CNT_WIN_COS1_L = hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_L_reg::type_id::create("CFG_CNT_WIN_COS1_L", this);
    CFG_CNT_WIN_COS1_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000F4, 32, 32'b00000000000000000000000000000000);
    CFG_CNT_WIN_COS1_L.set_space_addr("MSG", 28'h40000F4);
    CFG_CNT_WIN_COS1_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CNT_WIN_COS1_L.set_space_addr("MEM-SB",28'h40000F4);
    CFG_CNT_WIN_COS1_L.set_space_addr("MEM", 28'h40000F4);
      CFG_CNT_WIN_COS1_L.set_space("MEM");
      CFG_CNT_WIN_COS1_L.set_msg_opcode("MEM-SB");
      CFG_CNT_WIN_COS1_L.set_fid(4'h0, "MEM-SB");
  	CFG_CNT_WIN_COS1_L.set_bar(4'h2, "MEM-SB");
      CFG_CNT_WIN_COS1_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CNT_WIN_COS1_L.set_user_attribute("diag_reg", "0");
      CFG_CNT_WIN_COS1_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CNT_WIN_COS1_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CNT_WIN_COS1_L:dont_test") ) CFG_CNT_WIN_COS1_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CNT_WIN_COS1_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CNT_WIN_COS1_L"));
      end
   CFG_CNT_WIN_COS1_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos1.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CNT_WIN_COS1_H";
    `endif
    CFG_CNT_WIN_COS1_H = hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS1_H_reg::type_id::create("CFG_CNT_WIN_COS1_H", this);
    CFG_CNT_WIN_COS1_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000F8, 32, 32'b00000000000000000000000000000000);
    CFG_CNT_WIN_COS1_H.set_space_addr("MSG", 28'h40000F8);
    CFG_CNT_WIN_COS1_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CNT_WIN_COS1_H.set_space_addr("MEM-SB",28'h40000F8);
    CFG_CNT_WIN_COS1_H.set_space_addr("MEM", 28'h40000F8);
      CFG_CNT_WIN_COS1_H.set_space("MEM");
      CFG_CNT_WIN_COS1_H.set_msg_opcode("MEM-SB");
      CFG_CNT_WIN_COS1_H.set_fid(4'h0, "MEM-SB");
  	CFG_CNT_WIN_COS1_H.set_bar(4'h2, "MEM-SB");
      CFG_CNT_WIN_COS1_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CNT_WIN_COS1_H.set_user_attribute("diag_reg", "0");
      CFG_CNT_WIN_COS1_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CNT_WIN_COS1_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CNT_WIN_COS1_H:dont_test") ) CFG_CNT_WIN_COS1_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CNT_WIN_COS1_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CNT_WIN_COS1_H"));
      end
   CFG_CNT_WIN_COS1_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos1.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CNT_WIN_COS2_L";
    `endif
    CFG_CNT_WIN_COS2_L = hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_L_reg::type_id::create("CFG_CNT_WIN_COS2_L", this);
    CFG_CNT_WIN_COS2_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h40000FC, 32, 32'b00000000000000000000000000000000);
    CFG_CNT_WIN_COS2_L.set_space_addr("MSG", 28'h40000FC);
    CFG_CNT_WIN_COS2_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CNT_WIN_COS2_L.set_space_addr("MEM-SB",28'h40000FC);
    CFG_CNT_WIN_COS2_L.set_space_addr("MEM", 28'h40000FC);
      CFG_CNT_WIN_COS2_L.set_space("MEM");
      CFG_CNT_WIN_COS2_L.set_msg_opcode("MEM-SB");
      CFG_CNT_WIN_COS2_L.set_fid(4'h0, "MEM-SB");
  	CFG_CNT_WIN_COS2_L.set_bar(4'h2, "MEM-SB");
      CFG_CNT_WIN_COS2_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CNT_WIN_COS2_L.set_user_attribute("diag_reg", "0");
      CFG_CNT_WIN_COS2_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CNT_WIN_COS2_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CNT_WIN_COS2_L:dont_test") ) CFG_CNT_WIN_COS2_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CNT_WIN_COS2_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CNT_WIN_COS2_L"));
      end
   CFG_CNT_WIN_COS2_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos2.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CNT_WIN_COS2_H";
    `endif
    CFG_CNT_WIN_COS2_H = hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS2_H_reg::type_id::create("CFG_CNT_WIN_COS2_H", this);
    CFG_CNT_WIN_COS2_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000100, 32, 32'b00000000000000000000000000000000);
    CFG_CNT_WIN_COS2_H.set_space_addr("MSG", 28'h4000100);
    CFG_CNT_WIN_COS2_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CNT_WIN_COS2_H.set_space_addr("MEM-SB",28'h4000100);
    CFG_CNT_WIN_COS2_H.set_space_addr("MEM", 28'h4000100);
      CFG_CNT_WIN_COS2_H.set_space("MEM");
      CFG_CNT_WIN_COS2_H.set_msg_opcode("MEM-SB");
      CFG_CNT_WIN_COS2_H.set_fid(4'h0, "MEM-SB");
  	CFG_CNT_WIN_COS2_H.set_bar(4'h2, "MEM-SB");
      CFG_CNT_WIN_COS2_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CNT_WIN_COS2_H.set_user_attribute("diag_reg", "0");
      CFG_CNT_WIN_COS2_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CNT_WIN_COS2_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CNT_WIN_COS2_H:dont_test") ) CFG_CNT_WIN_COS2_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CNT_WIN_COS2_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CNT_WIN_COS2_H"));
      end
   CFG_CNT_WIN_COS2_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos2.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CNT_WIN_COS3_L";
    `endif
    CFG_CNT_WIN_COS3_L = hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_L_reg::type_id::create("CFG_CNT_WIN_COS3_L", this);
    CFG_CNT_WIN_COS3_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000104, 32, 32'b00000000000000000000000000000000);
    CFG_CNT_WIN_COS3_L.set_space_addr("MSG", 28'h4000104);
    CFG_CNT_WIN_COS3_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CNT_WIN_COS3_L.set_space_addr("MEM-SB",28'h4000104);
    CFG_CNT_WIN_COS3_L.set_space_addr("MEM", 28'h4000104);
      CFG_CNT_WIN_COS3_L.set_space("MEM");
      CFG_CNT_WIN_COS3_L.set_msg_opcode("MEM-SB");
      CFG_CNT_WIN_COS3_L.set_fid(4'h0, "MEM-SB");
  	CFG_CNT_WIN_COS3_L.set_bar(4'h2, "MEM-SB");
      CFG_CNT_WIN_COS3_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CNT_WIN_COS3_L.set_user_attribute("diag_reg", "0");
      CFG_CNT_WIN_COS3_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CNT_WIN_COS3_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CNT_WIN_COS3_L:dont_test") ) CFG_CNT_WIN_COS3_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CNT_WIN_COS3_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CNT_WIN_COS3_L"));
      end
   CFG_CNT_WIN_COS3_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos3.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CNT_WIN_COS3_H";
    `endif
    CFG_CNT_WIN_COS3_H = hqm_list_sel_pipe_bridge_CFG_CNT_WIN_COS3_H_reg::type_id::create("CFG_CNT_WIN_COS3_H", this);
    CFG_CNT_WIN_COS3_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000108, 32, 32'b00000000000000000000000000000000);
    CFG_CNT_WIN_COS3_H.set_space_addr("MSG", 28'h4000108);
    CFG_CNT_WIN_COS3_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CNT_WIN_COS3_H.set_space_addr("MEM-SB",28'h4000108);
    CFG_CNT_WIN_COS3_H.set_space_addr("MEM", 28'h4000108);
      CFG_CNT_WIN_COS3_H.set_space("MEM");
      CFG_CNT_WIN_COS3_H.set_msg_opcode("MEM-SB");
      CFG_CNT_WIN_COS3_H.set_fid(4'h0, "MEM-SB");
  	CFG_CNT_WIN_COS3_H.set_bar(4'h2, "MEM-SB");
      CFG_CNT_WIN_COS3_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CNT_WIN_COS3_H.set_user_attribute("diag_reg", "0");
      CFG_CNT_WIN_COS3_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CNT_WIN_COS3_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CNT_WIN_COS3_H:dont_test") ) CFG_CNT_WIN_COS3_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CNT_WIN_COS3_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CNT_WIN_COS3_H"));
      end
   CFG_CNT_WIN_COS3_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cnt_win_cos3.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_0_L";
    `endif
    CFG_LDB_SCHED_PERF_0_L = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_L_reg::type_id::create("CFG_LDB_SCHED_PERF_0_L", this);
    CFG_LDB_SCHED_PERF_0_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h400010C, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_0_L.set_space_addr("MSG", 28'h400010C);
    CFG_LDB_SCHED_PERF_0_L.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_0_L.set_space_addr("MEM-SB",28'h400010C);
    CFG_LDB_SCHED_PERF_0_L.set_space_addr("MEM", 28'h400010C);
      CFG_LDB_SCHED_PERF_0_L.set_space("MEM");
      CFG_LDB_SCHED_PERF_0_L.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_0_L.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_0_L.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_0_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_0_L.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_0_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_0_L.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_0_L.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_0_L:dont_test") ) CFG_LDB_SCHED_PERF_0_L.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_0_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_0_L"));
      end
   CFG_LDB_SCHED_PERF_0_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_0.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_0_H";
    `endif
    CFG_LDB_SCHED_PERF_0_H = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_0_H_reg::type_id::create("CFG_LDB_SCHED_PERF_0_H", this);
    CFG_LDB_SCHED_PERF_0_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000110, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_0_H.set_space_addr("MSG", 28'h4000110);
    CFG_LDB_SCHED_PERF_0_H.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_0_H.set_space_addr("MEM-SB",28'h4000110);
    CFG_LDB_SCHED_PERF_0_H.set_space_addr("MEM", 28'h4000110);
      CFG_LDB_SCHED_PERF_0_H.set_space("MEM");
      CFG_LDB_SCHED_PERF_0_H.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_0_H.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_0_H.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_0_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_0_H.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_0_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_0_H.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_0_H.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_0_H:dont_test") ) CFG_LDB_SCHED_PERF_0_H.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_0_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_0_H"));
      end
   CFG_LDB_SCHED_PERF_0_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_0.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_1_L";
    `endif
    CFG_LDB_SCHED_PERF_1_L = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_L_reg::type_id::create("CFG_LDB_SCHED_PERF_1_L", this);
    CFG_LDB_SCHED_PERF_1_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000114, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_1_L.set_space_addr("MSG", 28'h4000114);
    CFG_LDB_SCHED_PERF_1_L.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_1_L.set_space_addr("MEM-SB",28'h4000114);
    CFG_LDB_SCHED_PERF_1_L.set_space_addr("MEM", 28'h4000114);
      CFG_LDB_SCHED_PERF_1_L.set_space("MEM");
      CFG_LDB_SCHED_PERF_1_L.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_1_L.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_1_L.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_1_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_1_L.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_1_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_1_L.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_1_L.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_1_L:dont_test") ) CFG_LDB_SCHED_PERF_1_L.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_1_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_1_L"));
      end
   CFG_LDB_SCHED_PERF_1_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_1.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_1_H";
    `endif
    CFG_LDB_SCHED_PERF_1_H = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_1_H_reg::type_id::create("CFG_LDB_SCHED_PERF_1_H", this);
    CFG_LDB_SCHED_PERF_1_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000118, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_1_H.set_space_addr("MSG", 28'h4000118);
    CFG_LDB_SCHED_PERF_1_H.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_1_H.set_space_addr("MEM-SB",28'h4000118);
    CFG_LDB_SCHED_PERF_1_H.set_space_addr("MEM", 28'h4000118);
      CFG_LDB_SCHED_PERF_1_H.set_space("MEM");
      CFG_LDB_SCHED_PERF_1_H.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_1_H.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_1_H.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_1_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_1_H.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_1_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_1_H.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_1_H.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_1_H:dont_test") ) CFG_LDB_SCHED_PERF_1_H.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_1_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_1_H"));
      end
   CFG_LDB_SCHED_PERF_1_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_1.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_2_L";
    `endif
    CFG_LDB_SCHED_PERF_2_L = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_L_reg::type_id::create("CFG_LDB_SCHED_PERF_2_L", this);
    CFG_LDB_SCHED_PERF_2_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h400011C, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_2_L.set_space_addr("MSG", 28'h400011C);
    CFG_LDB_SCHED_PERF_2_L.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_2_L.set_space_addr("MEM-SB",28'h400011C);
    CFG_LDB_SCHED_PERF_2_L.set_space_addr("MEM", 28'h400011C);
      CFG_LDB_SCHED_PERF_2_L.set_space("MEM");
      CFG_LDB_SCHED_PERF_2_L.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_2_L.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_2_L.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_2_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_2_L.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_2_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_2_L.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_2_L.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_2_L:dont_test") ) CFG_LDB_SCHED_PERF_2_L.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_2_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_2_L"));
      end
   CFG_LDB_SCHED_PERF_2_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_2.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_2_H";
    `endif
    CFG_LDB_SCHED_PERF_2_H = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_2_H_reg::type_id::create("CFG_LDB_SCHED_PERF_2_H", this);
    CFG_LDB_SCHED_PERF_2_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000120, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_2_H.set_space_addr("MSG", 28'h4000120);
    CFG_LDB_SCHED_PERF_2_H.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_2_H.set_space_addr("MEM-SB",28'h4000120);
    CFG_LDB_SCHED_PERF_2_H.set_space_addr("MEM", 28'h4000120);
      CFG_LDB_SCHED_PERF_2_H.set_space("MEM");
      CFG_LDB_SCHED_PERF_2_H.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_2_H.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_2_H.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_2_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_2_H.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_2_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_2_H.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_2_H.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_2_H:dont_test") ) CFG_LDB_SCHED_PERF_2_H.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_2_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_2_H"));
      end
   CFG_LDB_SCHED_PERF_2_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_2.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_3_L";
    `endif
    CFG_LDB_SCHED_PERF_3_L = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_L_reg::type_id::create("CFG_LDB_SCHED_PERF_3_L", this);
    CFG_LDB_SCHED_PERF_3_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000124, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_3_L.set_space_addr("MSG", 28'h4000124);
    CFG_LDB_SCHED_PERF_3_L.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_3_L.set_space_addr("MEM-SB",28'h4000124);
    CFG_LDB_SCHED_PERF_3_L.set_space_addr("MEM", 28'h4000124);
      CFG_LDB_SCHED_PERF_3_L.set_space("MEM");
      CFG_LDB_SCHED_PERF_3_L.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_3_L.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_3_L.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_3_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_3_L.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_3_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_3_L.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_3_L.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_3_L:dont_test") ) CFG_LDB_SCHED_PERF_3_L.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_3_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_3_L"));
      end
   CFG_LDB_SCHED_PERF_3_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_3.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_3_H";
    `endif
    CFG_LDB_SCHED_PERF_3_H = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_3_H_reg::type_id::create("CFG_LDB_SCHED_PERF_3_H", this);
    CFG_LDB_SCHED_PERF_3_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000128, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_3_H.set_space_addr("MSG", 28'h4000128);
    CFG_LDB_SCHED_PERF_3_H.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_3_H.set_space_addr("MEM-SB",28'h4000128);
    CFG_LDB_SCHED_PERF_3_H.set_space_addr("MEM", 28'h4000128);
      CFG_LDB_SCHED_PERF_3_H.set_space("MEM");
      CFG_LDB_SCHED_PERF_3_H.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_3_H.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_3_H.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_3_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_3_H.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_3_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_3_H.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_3_H.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_3_H:dont_test") ) CFG_LDB_SCHED_PERF_3_H.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_3_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_3_H"));
      end
   CFG_LDB_SCHED_PERF_3_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_3.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_4_L";
    `endif
    CFG_LDB_SCHED_PERF_4_L = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_L_reg::type_id::create("CFG_LDB_SCHED_PERF_4_L", this);
    CFG_LDB_SCHED_PERF_4_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h400012C, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_4_L.set_space_addr("MSG", 28'h400012C);
    CFG_LDB_SCHED_PERF_4_L.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_4_L.set_space_addr("MEM-SB",28'h400012C);
    CFG_LDB_SCHED_PERF_4_L.set_space_addr("MEM", 28'h400012C);
      CFG_LDB_SCHED_PERF_4_L.set_space("MEM");
      CFG_LDB_SCHED_PERF_4_L.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_4_L.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_4_L.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_4_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_4_L.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_4_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_4_L.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_4_L.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_4_L:dont_test") ) CFG_LDB_SCHED_PERF_4_L.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_4_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_4_L"));
      end
   CFG_LDB_SCHED_PERF_4_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_4.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_4_H";
    `endif
    CFG_LDB_SCHED_PERF_4_H = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_4_H_reg::type_id::create("CFG_LDB_SCHED_PERF_4_H", this);
    CFG_LDB_SCHED_PERF_4_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000130, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_4_H.set_space_addr("MSG", 28'h4000130);
    CFG_LDB_SCHED_PERF_4_H.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_4_H.set_space_addr("MEM-SB",28'h4000130);
    CFG_LDB_SCHED_PERF_4_H.set_space_addr("MEM", 28'h4000130);
      CFG_LDB_SCHED_PERF_4_H.set_space("MEM");
      CFG_LDB_SCHED_PERF_4_H.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_4_H.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_4_H.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_4_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_4_H.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_4_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_4_H.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_4_H.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_4_H:dont_test") ) CFG_LDB_SCHED_PERF_4_H.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_4_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_4_H"));
      end
   CFG_LDB_SCHED_PERF_4_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_4.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_5_L";
    `endif
    CFG_LDB_SCHED_PERF_5_L = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_L_reg::type_id::create("CFG_LDB_SCHED_PERF_5_L", this);
    CFG_LDB_SCHED_PERF_5_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000134, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_5_L.set_space_addr("MSG", 28'h4000134);
    CFG_LDB_SCHED_PERF_5_L.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_5_L.set_space_addr("MEM-SB",28'h4000134);
    CFG_LDB_SCHED_PERF_5_L.set_space_addr("MEM", 28'h4000134);
      CFG_LDB_SCHED_PERF_5_L.set_space("MEM");
      CFG_LDB_SCHED_PERF_5_L.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_5_L.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_5_L.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_5_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_5_L.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_5_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_5_L.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_5_L.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_5_L:dont_test") ) CFG_LDB_SCHED_PERF_5_L.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_5_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_5_L"));
      end
   CFG_LDB_SCHED_PERF_5_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_5.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_5_H";
    `endif
    CFG_LDB_SCHED_PERF_5_H = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_5_H_reg::type_id::create("CFG_LDB_SCHED_PERF_5_H", this);
    CFG_LDB_SCHED_PERF_5_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000138, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_5_H.set_space_addr("MSG", 28'h4000138);
    CFG_LDB_SCHED_PERF_5_H.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_5_H.set_space_addr("MEM-SB",28'h4000138);
    CFG_LDB_SCHED_PERF_5_H.set_space_addr("MEM", 28'h4000138);
      CFG_LDB_SCHED_PERF_5_H.set_space("MEM");
      CFG_LDB_SCHED_PERF_5_H.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_5_H.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_5_H.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_5_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_5_H.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_5_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_5_H.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_5_H.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_5_H:dont_test") ) CFG_LDB_SCHED_PERF_5_H.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_5_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_5_H"));
      end
   CFG_LDB_SCHED_PERF_5_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_5.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_6_L";
    `endif
    CFG_LDB_SCHED_PERF_6_L = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_L_reg::type_id::create("CFG_LDB_SCHED_PERF_6_L", this);
    CFG_LDB_SCHED_PERF_6_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h400013C, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_6_L.set_space_addr("MSG", 28'h400013C);
    CFG_LDB_SCHED_PERF_6_L.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_6_L.set_space_addr("MEM-SB",28'h400013C);
    CFG_LDB_SCHED_PERF_6_L.set_space_addr("MEM", 28'h400013C);
      CFG_LDB_SCHED_PERF_6_L.set_space("MEM");
      CFG_LDB_SCHED_PERF_6_L.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_6_L.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_6_L.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_6_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_6_L.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_6_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_6_L.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_6_L.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_6_L:dont_test") ) CFG_LDB_SCHED_PERF_6_L.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_6_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_6_L"));
      end
   CFG_LDB_SCHED_PERF_6_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_6.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_6_H";
    `endif
    CFG_LDB_SCHED_PERF_6_H = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_6_H_reg::type_id::create("CFG_LDB_SCHED_PERF_6_H", this);
    CFG_LDB_SCHED_PERF_6_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000140, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_6_H.set_space_addr("MSG", 28'h4000140);
    CFG_LDB_SCHED_PERF_6_H.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_6_H.set_space_addr("MEM-SB",28'h4000140);
    CFG_LDB_SCHED_PERF_6_H.set_space_addr("MEM", 28'h4000140);
      CFG_LDB_SCHED_PERF_6_H.set_space("MEM");
      CFG_LDB_SCHED_PERF_6_H.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_6_H.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_6_H.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_6_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_6_H.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_6_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_6_H.set_user_attribute("SubnetPortID", "8'h00");
      CFG_LDB_SCHED_PERF_6_H.set_test_reg(0);
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_6_H:dont_test") ) CFG_LDB_SCHED_PERF_6_H.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_6_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_6_H"));
      end
   CFG_LDB_SCHED_PERF_6_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_6.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_7_L";
    `endif
    CFG_LDB_SCHED_PERF_7_L = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_L_reg::type_id::create("CFG_LDB_SCHED_PERF_7_L", this);
    CFG_LDB_SCHED_PERF_7_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000144, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_7_L.set_space_addr("MSG", 28'h4000144);
    CFG_LDB_SCHED_PERF_7_L.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_7_L.set_space_addr("MEM-SB",28'h4000144);
    CFG_LDB_SCHED_PERF_7_L.set_space_addr("MEM", 28'h4000144);
      CFG_LDB_SCHED_PERF_7_L.set_space("MEM");
      CFG_LDB_SCHED_PERF_7_L.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_7_L.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_7_L.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_7_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_7_L.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_7_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_7_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_7_L:dont_test") ) CFG_LDB_SCHED_PERF_7_L.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_7_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_7_L"));
      end
   CFG_LDB_SCHED_PERF_7_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_7.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_7_H";
    `endif
    CFG_LDB_SCHED_PERF_7_H = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_7_H_reg::type_id::create("CFG_LDB_SCHED_PERF_7_H", this);
    CFG_LDB_SCHED_PERF_7_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4000148, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_7_H.set_space_addr("MSG", 28'h4000148);
    CFG_LDB_SCHED_PERF_7_H.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_7_H.set_space_addr("MEM-SB",28'h4000148);
    CFG_LDB_SCHED_PERF_7_H.set_space_addr("MEM", 28'h4000148);
      CFG_LDB_SCHED_PERF_7_H.set_space("MEM");
      CFG_LDB_SCHED_PERF_7_H.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_7_H.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_7_H.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_7_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_7_H.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_7_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_7_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_7_H:dont_test") ) CFG_LDB_SCHED_PERF_7_H.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_7_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_7_H"));
      end
   CFG_LDB_SCHED_PERF_7_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_7.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_LDB_SCHED_PERF_CONTROL";
    `endif
    CFG_LDB_SCHED_PERF_CONTROL = hqm_list_sel_pipe_bridge_CFG_LDB_SCHED_PERF_CONTROL_reg::type_id::create("CFG_LDB_SCHED_PERF_CONTROL", this);
    CFG_LDB_SCHED_PERF_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 28'h400014C, 32, 32'b00000000000000000000000000000000);
    CFG_LDB_SCHED_PERF_CONTROL.set_space_addr("MSG", 28'h400014C);
    CFG_LDB_SCHED_PERF_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_LDB_SCHED_PERF_CONTROL.set_space_addr("MEM-SB",28'h400014C);
    CFG_LDB_SCHED_PERF_CONTROL.set_space_addr("MEM", 28'h400014C);
      CFG_LDB_SCHED_PERF_CONTROL.set_space("MEM");
      CFG_LDB_SCHED_PERF_CONTROL.set_msg_opcode("MEM-SB");
      CFG_LDB_SCHED_PERF_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_LDB_SCHED_PERF_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_LDB_SCHED_PERF_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_LDB_SCHED_PERF_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_LDB_SCHED_PERF_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_LDB_SCHED_PERF_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_LDB_SCHED_PERF_CONTROL:dont_test") ) CFG_LDB_SCHED_PERF_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_LDB_SCHED_PERF_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_LDB_SCHED_PERF_CONTROL"));
      end
   CFG_LDB_SCHED_PERF_CONTROL.ENAB.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_control.internal_f[0:0]"});
   CFG_LDB_SCHED_PERF_CONTROL.CLR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_control.internal_f[1:1]"});
   CFG_LDB_SCHED_PERF_CONTROL.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_ldb_sched_perf_control.internal_f[31:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001000, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_space_addr("MSG", 28'h4001000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_space_addr("MEM-SB",28'h4001000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_space_addr("MEM", 28'h4001000);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_0_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_0.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001004, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_space_addr("MSG", 28'h4001004);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_space_addr("MEM-SB",28'h4001004);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_space_addr("MEM", 28'h4001004);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_0_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_0.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001008, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_space_addr("MSG", 28'h4001008);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_space_addr("MEM-SB",28'h4001008);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_space_addr("MEM", 28'h4001008);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_1_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_1.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h400100C, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_space_addr("MSG", 28'h400100C);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_space_addr("MEM-SB",28'h400100C);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_space_addr("MEM", 28'h400100C);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_1_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_1.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001010, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_space_addr("MSG", 28'h4001010);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_space_addr("MEM-SB",28'h4001010);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_space_addr("MEM", 28'h4001010);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_2_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_2.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001014, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_space_addr("MSG", 28'h4001014);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_space_addr("MEM-SB",28'h4001014);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_space_addr("MEM", 28'h4001014);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_2_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_2.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001018, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_space_addr("MSG", 28'h4001018);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_space_addr("MEM-SB",28'h4001018);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_space_addr("MEM", 28'h4001018);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_3_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_3.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h400101C, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_space_addr("MSG", 28'h400101C);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_space_addr("MEM-SB",28'h400101C);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_space_addr("MEM", 28'h400101C);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_3_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_3.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001020, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_space_addr("MSG", 28'h4001020);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_space_addr("MEM-SB",28'h4001020);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_space_addr("MEM", 28'h4001020);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_4_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_4.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001024, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_space_addr("MSG", 28'h4001024);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_space_addr("MEM-SB",28'h4001024);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_space_addr("MEM", 28'h4001024);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_4_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_4.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001028, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_space_addr("MSG", 28'h4001028);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_space_addr("MEM-SB",28'h4001028);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_space_addr("MEM", 28'h4001028);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_5_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_5.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h400102C, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_space_addr("MSG", 28'h400102C);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_space_addr("MEM-SB",28'h400102C);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_space_addr("MEM", 28'h400102C);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_5_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_5.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001030, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_space_addr("MSG", 28'h4001030);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_space_addr("MEM-SB",28'h4001030);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_space_addr("MEM", 28'h4001030);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_6_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_6.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001034, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_space_addr("MSG", 28'h4001034);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_space_addr("MEM-SB",28'h4001034);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_space_addr("MEM", 28'h4001034);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_6_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_6.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_cfg(16'h0, 16'h0, 16'h0, 28'h4001038, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_space_addr("MSG", 28'h4001038);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_space_addr("MEM-SB",28'h4001038);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_space_addr("MEM", 28'h4001038);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_7_L.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_7.count[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H";
    `endif
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H = hqm_list_sel_pipe_bridge_CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H_reg::type_id::create("CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H", this);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_cfg(16'h0, 16'h0, 16'h0, 28'h400103C, 32, 32'b00000000000000000000000000000000);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_space_addr("MSG", 28'h400103C);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_space_addr("msg_bus_port", 'h21);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_space_addr("MEM-SB",28'h400103C);
    CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_space_addr("MEM", 28'h400103C);
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_space("MEM");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_msg_opcode("MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_fid(4'h0, "MEM-SB");
  	CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_bar(4'h2, "MEM-SB");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_user_attribute("diag_reg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H:dont_test") ) CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.set_test_reg(1'b0);
      if (!add_reg( CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H )) begin
        `sla_error(get_name(), ("Could not add register CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H"));
      end
   CFG_CQ_LDB_SCHED_SLOT_COUNT_7_H.COUNT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_cq_ldb_sched_slot_count_7.count[63:32]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_SCHED_SLOT_COUNT";
    `endif
    CFG_CONTROL_SCHED_SLOT_COUNT = hqm_list_sel_pipe_bridge_CFG_CONTROL_SCHED_SLOT_COUNT_reg::type_id::create("CFG_CONTROL_SCHED_SLOT_COUNT", this);
    CFG_CONTROL_SCHED_SLOT_COUNT.set_cfg(16'h0, 16'h0, 16'h0, 28'h4002000, 32, 32'b00000000000000000000000000000000);
    CFG_CONTROL_SCHED_SLOT_COUNT.set_space_addr("MSG", 28'h4002000);
    CFG_CONTROL_SCHED_SLOT_COUNT.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_SCHED_SLOT_COUNT.set_space_addr("MEM-SB",28'h4002000);
    CFG_CONTROL_SCHED_SLOT_COUNT.set_space_addr("MEM", 28'h4002000);
      CFG_CONTROL_SCHED_SLOT_COUNT.set_space("MEM");
      CFG_CONTROL_SCHED_SLOT_COUNT.set_msg_opcode("MEM-SB");
      CFG_CONTROL_SCHED_SLOT_COUNT.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_SCHED_SLOT_COUNT.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_SCHED_SLOT_COUNT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_SCHED_SLOT_COUNT.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_SCHED_SLOT_COUNT.set_user_attribute("HqmIsFeatureReg", "0");
      CFG_CONTROL_SCHED_SLOT_COUNT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_SCHED_SLOT_COUNT:dont_test") ) CFG_CONTROL_SCHED_SLOT_COUNT.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_SCHED_SLOT_COUNT )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_SCHED_SLOT_COUNT"));
      end
   CFG_CONTROL_SCHED_SLOT_COUNT.ENAB.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[0:0]"});
   CFG_CONTROL_SCHED_SLOT_COUNT.CLR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[1:1]"});
   CFG_CONTROL_SCHED_SLOT_COUNT.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[7:2]"});
   CFG_CONTROL_SCHED_SLOT_COUNT.CQ.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[15:8]"});
   CFG_CONTROL_SCHED_SLOT_COUNT.RSVZ1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_sched_slot_count.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_GENERAL_0";
    `endif
    CFG_CONTROL_GENERAL_0 = hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_0_reg::type_id::create("CFG_CONTROL_GENERAL_0", this);
    CFG_CONTROL_GENERAL_0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000000, 32, 32'b00000000000000000000000000000000);
    CFG_CONTROL_GENERAL_0.set_space_addr("MSG", 32'h0C000000);
    CFG_CONTROL_GENERAL_0.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_GENERAL_0.set_space_addr("MEM-SB",28'hC000000);
    CFG_CONTROL_GENERAL_0.set_space_addr("MEM", 32'h0C000000);
      CFG_CONTROL_GENERAL_0.set_space("MEM");
      CFG_CONTROL_GENERAL_0.set_msg_opcode("MEM-SB");
      CFG_CONTROL_GENERAL_0.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_GENERAL_0.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_GENERAL_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_GENERAL_0.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_GENERAL_0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_GENERAL_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_GENERAL_0:dont_test") ) CFG_CONTROL_GENERAL_0.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_GENERAL_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_GENERAL_0"));
      end
   CFG_CONTROL_GENERAL_0.DISAB_ATQ_EMPTY_ARB.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[0:0]"});
   CFG_CONTROL_GENERAL_0.INC_TOK_UNIT_IDLE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[1:1]"});
   CFG_CONTROL_GENERAL_0.DISAB_RLIST_PRI.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[2:2]"});
   CFG_CONTROL_GENERAL_0.INC_CMP_UNIT_IDLE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[3:3]"});
   CFG_CONTROL_GENERAL_0.ENAB_IF_THRESH.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[4:4]"});
   CFG_CONTROL_GENERAL_0.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[5:5]"});
   CFG_CONTROL_GENERAL_0.DIR_SINGLE_OP.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[6:6]"});
   CFG_CONTROL_GENERAL_0.DIR_HALF_BW.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[7:7]"});
   CFG_CONTROL_GENERAL_0.DIR_SINGLE_OUT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[8:8]"});
   CFG_CONTROL_GENERAL_0.DIR_DISAB_MULTI.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[9:9]"});
   CFG_CONTROL_GENERAL_0.ATQ_SINGLE_OP.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[10:10]"});
   CFG_CONTROL_GENERAL_0.ATQ_HALF_BW.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[11:11]"});
   CFG_CONTROL_GENERAL_0.ATQ_SINGLE_OUT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[12:12]"});
   CFG_CONTROL_GENERAL_0.ATQ_DISAB_MULTI.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[13:13]"});
   CFG_CONTROL_GENERAL_0.DIRRPL_SINGLE_OP.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[14:14]"});
   CFG_CONTROL_GENERAL_0.DIRRPL_HALF_BW.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[15:15]"});
   CFG_CONTROL_GENERAL_0.DIRRPL_SINGLE_OUT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[16:16]"});
   CFG_CONTROL_GENERAL_0.LBRPL_SINGLE_OP.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[17:17]"});
   CFG_CONTROL_GENERAL_0.LBRPL_HALF_BW.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[18:18]"});
   CFG_CONTROL_GENERAL_0.LBRPL_SINGLE_OUT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[19:19]"});
   CFG_CONTROL_GENERAL_0.LDB_SINGLE_OP.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[20:20]"});
   CFG_CONTROL_GENERAL_0.LDB_HALF_BW.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[21:21]"});
   CFG_CONTROL_GENERAL_0.LDB_DISAB_MULTI.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[22:22]"});
   CFG_CONTROL_GENERAL_0.ATM_SINGLE_SCH.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[23:23]"});
   CFG_CONTROL_GENERAL_0.ATM_SINGLE_CMP.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[24:24]"});
   CFG_CONTROL_GENERAL_0.LDB_CE_TOG_ARB.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[25:25]"});
   CFG_CONTROL_GENERAL_0.RSVZ1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[26:26]"});
   CFG_CONTROL_GENERAL_0.SMON0_VALID_SEL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[28:27]"});
   CFG_CONTROL_GENERAL_0.SMON0_VALUE_SEL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[29:29]"});
   CFG_CONTROL_GENERAL_0.SMON0_COMPARE_SEL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_0.internal_f[31:30]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_GENERAL_1";
    `endif
    CFG_CONTROL_GENERAL_1 = hqm_list_sel_pipe_bridge_CFG_CONTROL_GENERAL_1_reg::type_id::create("CFG_CONTROL_GENERAL_1", this);
    CFG_CONTROL_GENERAL_1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000004, 32, 32'b00000000000000001100000011000000);
    CFG_CONTROL_GENERAL_1.set_space_addr("MSG", 32'h0C000004);
    CFG_CONTROL_GENERAL_1.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_GENERAL_1.set_space_addr("MEM-SB",28'hC000004);
    CFG_CONTROL_GENERAL_1.set_space_addr("MEM", 32'h0C000004);
      CFG_CONTROL_GENERAL_1.set_space("MEM");
      CFG_CONTROL_GENERAL_1.set_msg_opcode("MEM-SB");
      CFG_CONTROL_GENERAL_1.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_GENERAL_1.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_GENERAL_1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_GENERAL_1.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_GENERAL_1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_GENERAL_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_GENERAL_1:dont_test") ) CFG_CONTROL_GENERAL_1.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_GENERAL_1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_GENERAL_1"));
      end
   CFG_CONTROL_GENERAL_1.QE_WT_FRC.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[1:0]"});
   CFG_CONTROL_GENERAL_1.QE_WT_FRCV.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[2:2]"});
   CFG_CONTROL_GENERAL_1.QE_WT_BLK.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[3:3]"});
   CFG_CONTROL_GENERAL_1.QED_DEQ_HIPRI_WM.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[8:4]"});
   CFG_CONTROL_GENERAL_1.DIS_WU_RES_CHK.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[9:9]"});
   CFG_CONTROL_GENERAL_1.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[11:10]"});
   CFG_CONTROL_GENERAL_1.AQED_DEQ_HIPRI_WM.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[16:12]"});
   CFG_CONTROL_GENERAL_1.RSVZ1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_general_1.internal_f[31:17]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_CONTROL_PIPELINE_CREDITS";
    `endif
    CFG_CONTROL_PIPELINE_CREDITS = hqm_list_sel_pipe_bridge_CFG_CONTROL_PIPELINE_CREDITS_reg::type_id::create("CFG_CONTROL_PIPELINE_CREDITS", this);
    CFG_CONTROL_PIPELINE_CREDITS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000008, 32, 32'b00011000000110000000110000001000);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("MSG", 32'h0C000008);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("msg_bus_port", 'h21);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("MEM-SB",28'hC000008);
    CFG_CONTROL_PIPELINE_CREDITS.set_space_addr("MEM", 32'h0C000008);
      CFG_CONTROL_PIPELINE_CREDITS.set_space("MEM");
      CFG_CONTROL_PIPELINE_CREDITS.set_msg_opcode("MEM-SB");
      CFG_CONTROL_PIPELINE_CREDITS.set_fid(4'h0, "MEM-SB");
  	CFG_CONTROL_PIPELINE_CREDITS.set_bar(4'h2, "MEM-SB");
      CFG_CONTROL_PIPELINE_CREDITS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_CONTROL_PIPELINE_CREDITS.set_user_attribute("diag_reg", "0");
      CFG_CONTROL_PIPELINE_CREDITS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_CONTROL_PIPELINE_CREDITS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_CONTROL_PIPELINE_CREDITS:dont_test") ) CFG_CONTROL_PIPELINE_CREDITS.set_test_reg(1'b0);
      if (!add_reg( CFG_CONTROL_PIPELINE_CREDITS )) begin
        `sla_error(get_name(), ("Could not add register CFG_CONTROL_PIPELINE_CREDITS"));
      end
   CFG_CONTROL_PIPELINE_CREDITS.NALB_PIPE_CREDITS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[7:0]"});
   CFG_CONTROL_PIPELINE_CREDITS.ATM_PIPE_CREDITS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[15:8]"});
   CFG_CONTROL_PIPELINE_CREDITS.QED_DEQ_PIPE_CREDITS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[20:16]"});
   CFG_CONTROL_PIPELINE_CREDITS.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[23:21]"});
   CFG_CONTROL_PIPELINE_CREDITS.AQED_DEQ_PIPE_CREDITS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[28:24]"});
   CFG_CONTROL_PIPELINE_CREDITS.RSVZ1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_control_pipeline_credits.internal_f[31:29]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_AW_STATUS";
    `endif
    CFG_DIAGNOSTIC_AW_STATUS = hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_AW_STATUS_reg::type_id::create("CFG_DIAGNOSTIC_AW_STATUS", this);
    CFG_DIAGNOSTIC_AW_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00000C, 32, 32'b00001000000000000000000000000000);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MSG", 32'h0C00000C);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MEM-SB",28'hC00000C);
    CFG_DIAGNOSTIC_AW_STATUS.set_space_addr("MEM", 32'h0C00000C);
      CFG_DIAGNOSTIC_AW_STATUS.set_space("MEM");
      CFG_DIAGNOSTIC_AW_STATUS.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_AW_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_AW_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_AW_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_AW_STATUS:dont_test") ) CFG_DIAGNOSTIC_AW_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_AW_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_AW_STATUS"));
      end
   CFG_DIAGNOSTIC_AW_STATUS.NALB_SEL_NALB_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[0:0]"});
   CFG_DIAGNOSTIC_AW_STATUS.NALB_SEL_NALB_AFULL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[1:1]"});
   CFG_DIAGNOSTIC_AW_STATUS.ATM_CMP_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[2:2]"});
   CFG_DIAGNOSTIC_AW_STATUS.ATM_CMP_AFULL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[3:3]"});
   CFG_DIAGNOSTIC_AW_STATUS.ENQ_NALB_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[4:4]"});
   CFG_DIAGNOSTIC_AW_STATUS.ENQ_NALB_AFULL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[5:5]"});
   CFG_DIAGNOSTIC_AW_STATUS.NALB_CMP_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[6:6]"});
   CFG_DIAGNOSTIC_AW_STATUS.NALB_CMP_AFULL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[7:7]"});
   CFG_DIAGNOSTIC_AW_STATUS.UNO_ATM_CMP_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[8:8]"});
   CFG_DIAGNOSTIC_AW_STATUS.UNO_ATM_CMP_AFULL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[9:9]"});
   CFG_DIAGNOSTIC_AW_STATUS.LDB_TOK_RTN_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[10:10]"});
   CFG_DIAGNOSTIC_AW_STATUS.LDB_TOK_RTN_AFULL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[11:11]"});
   CFG_DIAGNOSTIC_AW_STATUS.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[15:12]"});
   CFG_DIAGNOSTIC_AW_STATUS.ENQ_ATQ_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[16:16]"});
   CFG_DIAGNOSTIC_AW_STATUS.ENQ_ATQ_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[17:17]"});
   CFG_DIAGNOSTIC_AW_STATUS.DIR_TOK_RTN_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[18:18]"});
   CFG_DIAGNOSTIC_AW_STATUS.DIR_TOK_RTN_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[19:19]"});
   CFG_DIAGNOSTIC_AW_STATUS.RSVZ1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[23:20]"});
   CFG_DIAGNOSTIC_AW_STATUS.INT_SER_DOWN_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[24:24]"});
   CFG_DIAGNOSTIC_AW_STATUS.INT_SER_DOWN_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[25:25]"});
   CFG_DIAGNOSTIC_AW_STATUS.INT_SER_UP_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[26:26]"});
   CFG_DIAGNOSTIC_AW_STATUS.INT_SER_UP_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[27:27]"});
   CFG_DIAGNOSTIC_AW_STATUS.RSVZ2.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_aw_status.status[31:28]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_DIAGNOSTIC_STATUS_0";
    `endif
    CFG_DIAGNOSTIC_STATUS_0 = hqm_list_sel_pipe_bridge_CFG_DIAGNOSTIC_STATUS_0_reg::type_id::create("CFG_DIAGNOSTIC_STATUS_0", this);
    CFG_DIAGNOSTIC_STATUS_0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000010, 32, 32'b00001110000000000000000000000000);
    CFG_DIAGNOSTIC_STATUS_0.set_space_addr("MSG", 32'h0C000010);
    CFG_DIAGNOSTIC_STATUS_0.set_space_addr("msg_bus_port", 'h21);
    CFG_DIAGNOSTIC_STATUS_0.set_space_addr("MEM-SB",28'hC000010);
    CFG_DIAGNOSTIC_STATUS_0.set_space_addr("MEM", 32'h0C000010);
      CFG_DIAGNOSTIC_STATUS_0.set_space("MEM");
      CFG_DIAGNOSTIC_STATUS_0.set_msg_opcode("MEM-SB");
      CFG_DIAGNOSTIC_STATUS_0.set_fid(4'h0, "MEM-SB");
  	CFG_DIAGNOSTIC_STATUS_0.set_bar(4'h2, "MEM-SB");
      CFG_DIAGNOSTIC_STATUS_0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_DIAGNOSTIC_STATUS_0.set_user_attribute("diag_reg", "0");
      CFG_DIAGNOSTIC_STATUS_0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_DIAGNOSTIC_STATUS_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_DIAGNOSTIC_STATUS_0:dont_test") ) CFG_DIAGNOSTIC_STATUS_0.set_test_reg(1'b0);
      if (!add_reg( CFG_DIAGNOSTIC_STATUS_0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_DIAGNOSTIC_STATUS_0"));
      end
   CFG_DIAGNOSTIC_STATUS_0.SLIST_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[0:0]"});
   CFG_DIAGNOSTIC_STATUS_0.SLIST_BLAST.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[1:1]"});
   CFG_DIAGNOSTIC_STATUS_0.RLIST_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[2:2]"});
   CFG_DIAGNOSTIC_STATUS_0.RLIST_BLAST.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[3:3]"});
   CFG_DIAGNOSTIC_STATUS_0.NALB_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[4:4]"});
   CFG_DIAGNOSTIC_STATUS_0.NALB_BLAST.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[5:5]"});
   CFG_DIAGNOSTIC_STATUS_0.CMPBLAST_CHKV.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[6:6]"});
   CFG_DIAGNOSTIC_STATUS_0.CMPBLAST.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[7:7]"});
   CFG_DIAGNOSTIC_STATUS_0.ATQ_QID_DIS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[8:8]"});
   CFG_DIAGNOSTIC_STATUS_0.LDB_CQ_BUSY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[9:9]"});
   CFG_DIAGNOSTIC_STATUS_0.LDB_CQ_NO_SPACE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[10:10]"});
   CFG_DIAGNOSTIC_STATUS_0.DIR_TOK_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[11:11]"});
   CFG_DIAGNOSTIC_STATUS_0.AQED_ACT.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[12:12]"});
   CFG_DIAGNOSTIC_STATUS_0.AP_LSP_ATM_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[13:13]"});
   CFG_DIAGNOSTIC_STATUS_0.LDB_TOK_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[14:14]"});
   CFG_DIAGNOSTIC_STATUS_0.LDB_CMP_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[15:15]"});
   CFG_DIAGNOSTIC_STATUS_0.LDB_CQ_ARB_REQV_COS0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[16:16]"});
   CFG_DIAGNOSTIC_STATUS_0.LDB_CQ_ARB_REQV_COS1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[17:17]"});
   CFG_DIAGNOSTIC_STATUS_0.LDB_CQ_ARB_REQV_COS2.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[18:18]"});
   CFG_DIAGNOSTIC_STATUS_0.LDB_CQ_ARB_REQV_COS3.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[19:19]"});
   CFG_DIAGNOSTIC_STATUS_0.ATQ_STOP_ATQATM.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[23:23]"});
   CFG_DIAGNOSTIC_STATUS_0.NALB_SN_FCERR_RPTD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[24:24]"});
   CFG_DIAGNOSTIC_STATUS_0.AQED_EMPTY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[25:25]"});
   CFG_DIAGNOSTIC_STATUS_0.ATM_IF_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[26:26]"});
   CFG_DIAGNOSTIC_STATUS_0.TOT_IF_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_diagnostic_status_0.status[27:27]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_ERROR_INJECT";
    `endif
    CFG_ERROR_INJECT = hqm_list_sel_pipe_bridge_CFG_ERROR_INJECT_reg::type_id::create("CFG_ERROR_INJECT", this);
    CFG_ERROR_INJECT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000014, 32, 32'b00000000000000000000000000000000);
    CFG_ERROR_INJECT.set_space_addr("MSG", 32'h0C000014);
    CFG_ERROR_INJECT.set_space_addr("msg_bus_port", 'h21);
    CFG_ERROR_INJECT.set_space_addr("MEM-SB",28'hC000014);
    CFG_ERROR_INJECT.set_space_addr("MEM", 32'h0C000014);
      CFG_ERROR_INJECT.set_space("MEM");
      CFG_ERROR_INJECT.set_msg_opcode("MEM-SB");
      CFG_ERROR_INJECT.set_fid(4'h0, "MEM-SB");
  	CFG_ERROR_INJECT.set_bar(4'h2, "MEM-SB");
      CFG_ERROR_INJECT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_ERROR_INJECT.set_user_attribute("diag_reg", "0");
      CFG_ERROR_INJECT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_ERROR_INJECT.set_user_attribute("SubnetPortID", "8'h00");
      CFG_ERROR_INJECT.set_test_reg(0);
      if ( $test$plusargs("CFG_ERROR_INJECT:dont_test") ) CFG_ERROR_INJECT.set_test_reg(1'b0);
      if (!add_reg( CFG_ERROR_INJECT )) begin
        `sla_error(get_name(), ("Could not add register CFG_ERROR_INJECT"));
      end
   CFG_ERROR_INJECT.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[0:0]"});
   CFG_ERROR_INJECT.LDB_CQ_IF_CNT_UFLOW.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[1:1]"});
   CFG_ERROR_INJECT.ATQ_AQED_LIM_PERR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[2:2]"});
   CFG_ERROR_INJECT.DIR_TOK_LIM_PERR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[3:3]"});
   CFG_ERROR_INJECT.QID2CQIDIX_PERR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[4:4]"});
   CFG_ERROR_INJECT.CQ2QID_PERR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[5:5]"});
   CFG_ERROR_INJECT.DIR_INP_PERR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[6:6]"});
   CFG_ERROR_INJECT.LDB_TOK_FIFO_UFLOW.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[7:7]"});
   CFG_ERROR_INJECT.RSVZ1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[8:8]"});
   CFG_ERROR_INJECT.DP_QID_PERR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[9:9]"});
   CFG_ERROR_INJECT.RSVZ2.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[10:10]"});
   CFG_ERROR_INJECT.LDB_QID_PERR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[11:11]"});
   CFG_ERROR_INJECT.LDB_FLAG_PERR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[12:12]"});
   CFG_ERROR_INJECT.ATQ_PERR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[13:13]"});
   CFG_ERROR_INJECT.LDB_RPL_PERR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[14:14]"});
   CFG_ERROR_INJECT.DP_RPL_PERR.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[15:15]"});
   CFG_ERROR_INJECT.DIR_TOK_CNT_UFLOW.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[16:16]"});
   CFG_ERROR_INJECT.LDB_TOK_CNT_UFLOW.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[17:17]"});
   CFG_ERROR_INJECT.RSVZ3.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_error_inject.internal_f[31:18]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HW_AGITATE_CONTROL";
    `endif
    CFG_HW_AGITATE_CONTROL = hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_CONTROL_reg::type_id::create("CFG_HW_AGITATE_CONTROL", this);
    CFG_HW_AGITATE_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000018, 32, 32'b00000000000000000000000000000000);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MSG", 32'h0C000018);
    CFG_HW_AGITATE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MEM-SB",28'hC000018);
    CFG_HW_AGITATE_CONTROL.set_space_addr("MEM", 32'h0C000018);
      CFG_HW_AGITATE_CONTROL.set_space("MEM");
      CFG_HW_AGITATE_CONTROL.set_msg_opcode("MEM-SB");
      CFG_HW_AGITATE_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_HW_AGITATE_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_HW_AGITATE_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HW_AGITATE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HW_AGITATE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_HW_AGITATE_CONTROL:dont_test") ) CFG_HW_AGITATE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_HW_AGITATE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_HW_AGITATE_CONTROL"));
      end
   CFG_HW_AGITATE_CONTROL.MODE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_control.internal_f[1:0]"});
   CFG_HW_AGITATE_CONTROL.DUTY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_control.internal_f[4:2]"});
   CFG_HW_AGITATE_CONTROL.PERIOD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_control.internal_f[15:5]"});
   CFG_HW_AGITATE_CONTROL.PROB1ST.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_control.internal_f[23:16]"});
   CFG_HW_AGITATE_CONTROL.PROB2ND.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_control.internal_f[31:24]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_HW_AGITATE_SELECT";
    `endif
    CFG_HW_AGITATE_SELECT = hqm_list_sel_pipe_bridge_CFG_HW_AGITATE_SELECT_reg::type_id::create("CFG_HW_AGITATE_SELECT", this);
    CFG_HW_AGITATE_SELECT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00001C, 32, 32'b00000000000000000000000000000000);
    CFG_HW_AGITATE_SELECT.set_space_addr("MSG", 32'h0C00001C);
    CFG_HW_AGITATE_SELECT.set_space_addr("msg_bus_port", 'h21);
    CFG_HW_AGITATE_SELECT.set_space_addr("MEM-SB",28'hC00001C);
    CFG_HW_AGITATE_SELECT.set_space_addr("MEM", 32'h0C00001C);
      CFG_HW_AGITATE_SELECT.set_space("MEM");
      CFG_HW_AGITATE_SELECT.set_msg_opcode("MEM-SB");
      CFG_HW_AGITATE_SELECT.set_fid(4'h0, "MEM-SB");
  	CFG_HW_AGITATE_SELECT.set_bar(4'h2, "MEM-SB");
      CFG_HW_AGITATE_SELECT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_HW_AGITATE_SELECT.set_user_attribute("diag_reg", "0");
      CFG_HW_AGITATE_SELECT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_HW_AGITATE_SELECT.set_user_attribute("SubnetPortID", "8'h00");
      CFG_HW_AGITATE_SELECT.set_test_reg(0);
      if ( $test$plusargs("CFG_HW_AGITATE_SELECT:dont_test") ) CFG_HW_AGITATE_SELECT.set_test_reg(1'b0);
      if (!add_reg( CFG_HW_AGITATE_SELECT )) begin
        `sla_error(get_name(), ("Could not add register CFG_HW_AGITATE_SELECT"));
      end
   CFG_HW_AGITATE_SELECT.AGG_IF_00.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[0:0]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_01.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[1:1]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_02.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[2:2]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_03.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[3:3]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_04.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[4:4]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_05.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[5:5]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_06.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[6:6]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_07.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[7:7]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_08.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[8:8]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_09.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[9:9]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_10.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[10:10]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_11.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[11:11]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_12.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[12:12]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_13.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[13:13]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_14.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[14:14]"});
   CFG_HW_AGITATE_SELECT.AGG_IF_15.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[15:15]"});
   CFG_HW_AGITATE_SELECT.RSVZ.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_hw_agitate_select.internal_f[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_INTERFACE_STATUS";
    `endif
    CFG_INTERFACE_STATUS = hqm_list_sel_pipe_bridge_CFG_INTERFACE_STATUS_reg::type_id::create("CFG_INTERFACE_STATUS", this);
    CFG_INTERFACE_STATUS.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000020, 32, 32'b00000000000000000000000000000000);
    CFG_INTERFACE_STATUS.set_space_addr("MSG", 32'h0C000020);
    CFG_INTERFACE_STATUS.set_space_addr("msg_bus_port", 'h21);
    CFG_INTERFACE_STATUS.set_space_addr("MEM-SB",28'hC000020);
    CFG_INTERFACE_STATUS.set_space_addr("MEM", 32'h0C000020);
      CFG_INTERFACE_STATUS.set_space("MEM");
      CFG_INTERFACE_STATUS.set_msg_opcode("MEM-SB");
      CFG_INTERFACE_STATUS.set_fid(4'h0, "MEM-SB");
  	CFG_INTERFACE_STATUS.set_bar(4'h2, "MEM-SB");
      CFG_INTERFACE_STATUS.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_INTERFACE_STATUS.set_user_attribute("diag_reg", "0");
      CFG_INTERFACE_STATUS.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_INTERFACE_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_INTERFACE_STATUS:dont_test") ) CFG_INTERFACE_STATUS.set_test_reg(1'b0);
      if (!add_reg( CFG_INTERFACE_STATUS )) begin
        `sla_error(get_name(), ("Could not add register CFG_INTERFACE_STATUS"));
      end
   CFG_INTERFACE_STATUS.AQED_LSP_SENT_TO_CQ_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[0:0]"});
   CFG_INTERFACE_STATUS.AQED_LSP_SENT_TO_CQ_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[1:1]"});
   CFG_INTERFACE_STATUS.DP_LSP_ENQ_RORPLY_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[2:2]"});
   CFG_INTERFACE_STATUS.DP_LSP_ENQ_RORPLY_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[3:3]"});
   CFG_INTERFACE_STATUS.DP_LSP_ENQ_DIR_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[4:4]"});
   CFG_INTERFACE_STATUS.DP_LSP_ENQ_DIR_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[5:5]"});
   CFG_INTERFACE_STATUS.NALB_LSP_ENQ_RORPLY_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[6:6]"});
   CFG_INTERFACE_STATUS.NALB_LSP_ENQ_RORPLY_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[7:7]"});
   CFG_INTERFACE_STATUS.NALB_LSP_ENQ_LDB_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[8:8]"});
   CFG_INTERFACE_STATUS.NALB_LSP_ENQ_LDB_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[9:9]"});
   CFG_INTERFACE_STATUS.ROP_LSP_REORDCMP_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[10:10]"});
   CFG_INTERFACE_STATUS.ROP_LSP_REORDCMP_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[11:11]"});
   CFG_INTERFACE_STATUS.CHP_LSP_CMP_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[12:12]"});
   CFG_INTERFACE_STATUS.CHP_LSP_CMP_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[13:13]"});
   CFG_INTERFACE_STATUS.CHP_LSP_TOK_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[14:14]"});
   CFG_INTERFACE_STATUS.CHP_LSP_TOK_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[15:15]"});
   CFG_INTERFACE_STATUS.INT_SER_CLOCK_NOT_IDLE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[16:16]"});
   CFG_INTERFACE_STATUS.AQED_CLOCK_NOT_IDLE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[17:17]"});
   CFG_INTERFACE_STATUS.AP_CLOCK_NOT_IDLE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[18:18]"});
   CFG_INTERFACE_STATUS.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[19:19]"});
   CFG_INTERFACE_STATUS.LSP_DP_SCH_RORPLY_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[20:20]"});
   CFG_INTERFACE_STATUS.LSP_DP_SCH_RORPLY_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[21:21]"});
   CFG_INTERFACE_STATUS.LSP_NALB_SCH_RORPLY_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[22:22]"});
   CFG_INTERFACE_STATUS.LSP_NALB_SCH_RORPLY_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[23:23]"});
   CFG_INTERFACE_STATUS.LSP_DP_SCH_DIR_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[24:24]"});
   CFG_INTERFACE_STATUS.LSP_DP_SCH_DIR_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[25:25]"});
   CFG_INTERFACE_STATUS.LSP_NALB_SCH_ATQ_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[26:26]"});
   CFG_INTERFACE_STATUS.LSP_NALB_SCH_ATQ_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[27:27]"});
   CFG_INTERFACE_STATUS.LSP_NALB_SCH_UO_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[28:28]"});
   CFG_INTERFACE_STATUS.LSP_NALB_SCH_UO_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[29:29]"});
   CFG_INTERFACE_STATUS.LSP_AP_ATM_V.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[30:30]"});
   CFG_INTERFACE_STATUS.LSP_AP_ATM_NOT_RDY.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_interface_status.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_HOLD_00";
    `endif
    CFG_PIPE_HEALTH_HOLD_00 = hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_00_reg::type_id::create("CFG_PIPE_HEALTH_HOLD_00", this);
    CFG_PIPE_HEALTH_HOLD_00.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000024, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_HOLD_00.set_space_addr("MSG", 32'h0C000024);
    CFG_PIPE_HEALTH_HOLD_00.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_HOLD_00.set_space_addr("MEM-SB",28'hC000024);
    CFG_PIPE_HEALTH_HOLD_00.set_space_addr("MEM", 32'h0C000024);
      CFG_PIPE_HEALTH_HOLD_00.set_space("MEM");
      CFG_PIPE_HEALTH_HOLD_00.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_HOLD_00.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_HOLD_00.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_HOLD_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_HOLD_00.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_HOLD_00.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_HOLD_00.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_HOLD_00:dont_test") ) CFG_PIPE_HEALTH_HOLD_00.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_HOLD_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_HOLD_00"));
      end
   CFG_PIPE_HEALTH_HOLD_00.P1_LDB_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[1:1]"});
   CFG_PIPE_HEALTH_HOLD_00.P2_LDB_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[2:2]"});
   CFG_PIPE_HEALTH_HOLD_00.P3_LDB_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[3:3]"});
   CFG_PIPE_HEALTH_HOLD_00.P4_LDB_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[4:4]"});
   CFG_PIPE_HEALTH_HOLD_00.P5_LDB_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[5:5]"});
   CFG_PIPE_HEALTH_HOLD_00.P6_LDB_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[6:6]"});
   CFG_PIPE_HEALTH_HOLD_00.P7_LDB_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[7:7]"});
   CFG_PIPE_HEALTH_HOLD_00.P8_LDB_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[8:8]"});
   CFG_PIPE_HEALTH_HOLD_00.P9_LDB_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[9:9]"});
   CFG_PIPE_HEALTH_HOLD_00.P1_LDB_NALB_CRED_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[24:24]"});
   CFG_PIPE_HEALTH_HOLD_00.P1_LDB_ATM_CRED_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[25:25]"});
   CFG_PIPE_HEALTH_HOLD_00.P4_LDB_PIPE_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[26:26]"});
   CFG_PIPE_HEALTH_HOLD_00.P4_LDB_SCH_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_00.status[27:27]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_HOLD_01";
    `endif
    CFG_PIPE_HEALTH_HOLD_01 = hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_HOLD_01_reg::type_id::create("CFG_PIPE_HEALTH_HOLD_01", this);
    CFG_PIPE_HEALTH_HOLD_01.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000028, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_HOLD_01.set_space_addr("MSG", 32'h0C000028);
    CFG_PIPE_HEALTH_HOLD_01.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_HOLD_01.set_space_addr("MEM-SB",28'hC000028);
    CFG_PIPE_HEALTH_HOLD_01.set_space_addr("MEM", 32'h0C000028);
      CFG_PIPE_HEALTH_HOLD_01.set_space("MEM");
      CFG_PIPE_HEALTH_HOLD_01.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_HOLD_01.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_HOLD_01.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_HOLD_01.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_HOLD_01.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_HOLD_01.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_HOLD_01.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_HOLD_01:dont_test") ) CFG_PIPE_HEALTH_HOLD_01.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_HOLD_01 )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_HOLD_01"));
      end
   CFG_PIPE_HEALTH_HOLD_01.P0_DIR_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[0:0]"});
   CFG_PIPE_HEALTH_HOLD_01.P1_DIR_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[1:1]"});
   CFG_PIPE_HEALTH_HOLD_01.P2_DIR_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[2:2]"});
   CFG_PIPE_HEALTH_HOLD_01.P3_DIR_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[3:3]"});
   CFG_PIPE_HEALTH_HOLD_01.P4_DIR_SCH_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[4:4]"});
   CFG_PIPE_HEALTH_HOLD_01.P0_ATQ_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[8:8]"});
   CFG_PIPE_HEALTH_HOLD_01.P1_ATQ_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[9:9]"});
   CFG_PIPE_HEALTH_HOLD_01.P2_ATQ_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[10:10]"});
   CFG_PIPE_HEALTH_HOLD_01.P3_ATQ_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[11:11]"});
   CFG_PIPE_HEALTH_HOLD_01.P4_ATQ_SCH_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[12:12]"});
   CFG_PIPE_HEALTH_HOLD_01.P0_DIRRPL_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[16:16]"});
   CFG_PIPE_HEALTH_HOLD_01.P1_DIRRPL_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[17:17]"});
   CFG_PIPE_HEALTH_HOLD_01.P2_DIRRPL_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[18:18]"});
   CFG_PIPE_HEALTH_HOLD_01.P3_DIRRPL_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[19:19]"});
   CFG_PIPE_HEALTH_HOLD_01.P4_DIRRPL_SCH_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[20:20]"});
   CFG_PIPE_HEALTH_HOLD_01.P0_LBRPL_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[24:24]"});
   CFG_PIPE_HEALTH_HOLD_01.P1_LBRPL_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[25:25]"});
   CFG_PIPE_HEALTH_HOLD_01.P2_LBRPL_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[26:26]"});
   CFG_PIPE_HEALTH_HOLD_01.P3_LBRPL_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[27:27]"});
   CFG_PIPE_HEALTH_HOLD_01.P4_LBRPL_SCH_HOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_hold_01.status[28:28]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_VALID_00";
    `endif
    CFG_PIPE_HEALTH_VALID_00 = hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_00_reg::type_id::create("CFG_PIPE_HEALTH_VALID_00", this);
    CFG_PIPE_HEALTH_VALID_00.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00002C, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_VALID_00.set_space_addr("MSG", 32'h0C00002C);
    CFG_PIPE_HEALTH_VALID_00.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_VALID_00.set_space_addr("MEM-SB",28'hC00002C);
    CFG_PIPE_HEALTH_VALID_00.set_space_addr("MEM", 32'h0C00002C);
      CFG_PIPE_HEALTH_VALID_00.set_space("MEM");
      CFG_PIPE_HEALTH_VALID_00.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_VALID_00.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_VALID_00.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_VALID_00.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_VALID_00.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_VALID_00.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_VALID_00.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_VALID_00:dont_test") ) CFG_PIPE_HEALTH_VALID_00.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_VALID_00 )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_VALID_00"));
      end
   CFG_PIPE_HEALTH_VALID_00.P1_LDB_CQ_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[1:1]"});
   CFG_PIPE_HEALTH_VALID_00.P2_LDB_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[2:2]"});
   CFG_PIPE_HEALTH_VALID_00.P3_LDB_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[3:3]"});
   CFG_PIPE_HEALTH_VALID_00.P4_LDB_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[4:4]"});
   CFG_PIPE_HEALTH_VALID_00.P5_LDB_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[5:5]"});
   CFG_PIPE_HEALTH_VALID_00.P6_LDB_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[6:6]"});
   CFG_PIPE_HEALTH_VALID_00.P7_LDB_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[7:7]"});
   CFG_PIPE_HEALTH_VALID_00.P8_LDB_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_00.status[8:8]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PIPE_HEALTH_VALID_01";
    `endif
    CFG_PIPE_HEALTH_VALID_01 = hqm_list_sel_pipe_bridge_CFG_PIPE_HEALTH_VALID_01_reg::type_id::create("CFG_PIPE_HEALTH_VALID_01", this);
    CFG_PIPE_HEALTH_VALID_01.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000030, 32, 32'b00000000000000000000000000000000);
    CFG_PIPE_HEALTH_VALID_01.set_space_addr("MSG", 32'h0C000030);
    CFG_PIPE_HEALTH_VALID_01.set_space_addr("msg_bus_port", 'h21);
    CFG_PIPE_HEALTH_VALID_01.set_space_addr("MEM-SB",28'hC000030);
    CFG_PIPE_HEALTH_VALID_01.set_space_addr("MEM", 32'h0C000030);
      CFG_PIPE_HEALTH_VALID_01.set_space("MEM");
      CFG_PIPE_HEALTH_VALID_01.set_msg_opcode("MEM-SB");
      CFG_PIPE_HEALTH_VALID_01.set_fid(4'h0, "MEM-SB");
  	CFG_PIPE_HEALTH_VALID_01.set_bar(4'h2, "MEM-SB");
      CFG_PIPE_HEALTH_VALID_01.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PIPE_HEALTH_VALID_01.set_user_attribute("diag_reg", "0");
      CFG_PIPE_HEALTH_VALID_01.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PIPE_HEALTH_VALID_01.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_PIPE_HEALTH_VALID_01:dont_test") ) CFG_PIPE_HEALTH_VALID_01.set_test_reg(1'b0);
      if (!add_reg( CFG_PIPE_HEALTH_VALID_01 )) begin
        `sla_error(get_name(), ("Could not add register CFG_PIPE_HEALTH_VALID_01"));
      end
   CFG_PIPE_HEALTH_VALID_01.P0_DIR_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[0:0]"});
   CFG_PIPE_HEALTH_VALID_01.P1_DIR_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[1:1]"});
   CFG_PIPE_HEALTH_VALID_01.P2_DIR_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[2:2]"});
   CFG_PIPE_HEALTH_VALID_01.P3_DIR_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[3:3]"});
   CFG_PIPE_HEALTH_VALID_01.P4_DIR_SCH_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[4:4]"});
   CFG_PIPE_HEALTH_VALID_01.P0_ATQ_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[8:8]"});
   CFG_PIPE_HEALTH_VALID_01.P1_ATQ_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[9:9]"});
   CFG_PIPE_HEALTH_VALID_01.P2_ATQ_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[10:10]"});
   CFG_PIPE_HEALTH_VALID_01.P3_ATQ_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[11:11]"});
   CFG_PIPE_HEALTH_VALID_01.P4_ATQ_SCH_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[12:12]"});
   CFG_PIPE_HEALTH_VALID_01.P0_DIRRPL_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[16:16]"});
   CFG_PIPE_HEALTH_VALID_01.P1_DIRRPL_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[17:17]"});
   CFG_PIPE_HEALTH_VALID_01.P2_DIRRPL_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[18:18]"});
   CFG_PIPE_HEALTH_VALID_01.P3_DIRRPL_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[19:19]"});
   CFG_PIPE_HEALTH_VALID_01.P4_DIRRPL_SCH_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[20:20]"});
   CFG_PIPE_HEALTH_VALID_01.P0_LBRPL_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[24:24]"});
   CFG_PIPE_HEALTH_VALID_01.P1_LBRPL_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[25:25]"});
   CFG_PIPE_HEALTH_VALID_01.P2_LBRPL_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[26:26]"});
   CFG_PIPE_HEALTH_VALID_01.P3_LBRPL_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[27:27]"});
   CFG_PIPE_HEALTH_VALID_01.P4_LBRPL_SCH_VALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_pipe_health_valid_01.status[28:28]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON0_COMPARE0";
    `endif
    CFG_SMON0_COMPARE0 = hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE0_reg::type_id::create("CFG_SMON0_COMPARE0", this);
    CFG_SMON0_COMPARE0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000034, 32, 32'b00000000000000000000000000000000);
    CFG_SMON0_COMPARE0.set_space_addr("MSG", 32'h0C000034);
    CFG_SMON0_COMPARE0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON0_COMPARE0.set_space_addr("MEM-SB",28'hC000034);
    CFG_SMON0_COMPARE0.set_space_addr("MEM", 32'h0C000034);
      CFG_SMON0_COMPARE0.set_space("MEM");
      CFG_SMON0_COMPARE0.set_msg_opcode("MEM-SB");
      CFG_SMON0_COMPARE0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON0_COMPARE0.set_bar(4'h2, "MEM-SB");
      CFG_SMON0_COMPARE0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON0_COMPARE0.set_user_attribute("diag_reg", "0");
      CFG_SMON0_COMPARE0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON0_COMPARE0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON0_COMPARE0:dont_test") ) CFG_SMON0_COMPARE0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON0_COMPARE0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON0_COMPARE0"));
      end
   CFG_SMON0_COMPARE0.COMPARE0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_comp0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON0_COMPARE1";
    `endif
    CFG_SMON0_COMPARE1 = hqm_list_sel_pipe_bridge_CFG_SMON0_COMPARE1_reg::type_id::create("CFG_SMON0_COMPARE1", this);
    CFG_SMON0_COMPARE1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000038, 32, 32'b00000000000000000000000000000000);
    CFG_SMON0_COMPARE1.set_space_addr("MSG", 32'h0C000038);
    CFG_SMON0_COMPARE1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON0_COMPARE1.set_space_addr("MEM-SB",28'hC000038);
    CFG_SMON0_COMPARE1.set_space_addr("MEM", 32'h0C000038);
      CFG_SMON0_COMPARE1.set_space("MEM");
      CFG_SMON0_COMPARE1.set_msg_opcode("MEM-SB");
      CFG_SMON0_COMPARE1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON0_COMPARE1.set_bar(4'h2, "MEM-SB");
      CFG_SMON0_COMPARE1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON0_COMPARE1.set_user_attribute("diag_reg", "0");
      CFG_SMON0_COMPARE1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON0_COMPARE1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON0_COMPARE1:dont_test") ) CFG_SMON0_COMPARE1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON0_COMPARE1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON0_COMPARE1"));
      end
   CFG_SMON0_COMPARE1.COMPARE1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_comp1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON0_CONFIGURATION0";
    `endif
    CFG_SMON0_CONFIGURATION0 = hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION0_reg::type_id::create("CFG_SMON0_CONFIGURATION0", this);
    CFG_SMON0_CONFIGURATION0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00003C, 32, 32'b01000000000000000000000000000000);
    CFG_SMON0_CONFIGURATION0.set_space_addr("MSG", 32'h0C00003C);
    CFG_SMON0_CONFIGURATION0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON0_CONFIGURATION0.set_space_addr("MEM-SB",28'hC00003C);
    CFG_SMON0_CONFIGURATION0.set_space_addr("MEM", 32'h0C00003C);
      CFG_SMON0_CONFIGURATION0.set_space("MEM");
      CFG_SMON0_CONFIGURATION0.set_msg_opcode("MEM-SB");
      CFG_SMON0_CONFIGURATION0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON0_CONFIGURATION0.set_bar(4'h2, "MEM-SB");
      CFG_SMON0_CONFIGURATION0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON0_CONFIGURATION0.set_user_attribute("diag_reg", "0");
      CFG_SMON0_CONFIGURATION0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON0_CONFIGURATION0.set_user_attribute("SubnetPortID", "8'h00");
      CFG_SMON0_CONFIGURATION0.set_test_reg(0);
      if ( $test$plusargs("CFG_SMON0_CONFIGURATION0:dont_test") ) CFG_SMON0_CONFIGURATION0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON0_CONFIGURATION0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON0_CONFIGURATION0"));
      end
   CFG_SMON0_CONFIGURATION0.SMON_ENABLE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[0:0]"});
   CFG_SMON0_CONFIGURATION0.SMON_0TRIGGER_ENABLE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[1:1]"});
   CFG_SMON0_CONFIGURATION0.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[3:2]"});
   CFG_SMON0_CONFIGURATION0.SMON0_FUNCTION.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[6:4]"});
   CFG_SMON0_CONFIGURATION0.SMON0_FUNCTION_COMPARE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[7:7]"});
   CFG_SMON0_CONFIGURATION0.SMON1_FUNCTION.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[10:8]"});
   CFG_SMON0_CONFIGURATION0.SMON1_FUNCTION_COMPARE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[11:11]"});
   CFG_SMON0_CONFIGURATION0.SMON_MODE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[15:12]"});
   CFG_SMON0_CONFIGURATION0.STOPCOUNTEROVFL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[16:16]"});
   CFG_SMON0_CONFIGURATION0.INTCOUNTEROVFL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[17:17]"});
   CFG_SMON0_CONFIGURATION0.STATCOUNTER0OVFL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[18:18]"});
   CFG_SMON0_CONFIGURATION0.STATCOUNTER1OVFL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[19:19]"});
   CFG_SMON0_CONFIGURATION0.STOPTIMEROVFL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[20:20]"});
   CFG_SMON0_CONFIGURATION0.INTTIMEROVFL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[21:21]"});
   CFG_SMON0_CONFIGURATION0.STATTIMEROVFL.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[22:22]"});
   CFG_SMON0_CONFIGURATION0.RSVZ1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[23:23]"});
   CFG_SMON0_CONFIGURATION0.TIMER_PRESCALE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[28:24]"});
   CFG_SMON0_CONFIGURATION0.RSVZ2.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg0_q[29:29]"});
   CFG_SMON0_CONFIGURATION0.VERSION.set_paths({"NoSignal"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON0_CONFIGURATION1";
    `endif
    CFG_SMON0_CONFIGURATION1 = hqm_list_sel_pipe_bridge_CFG_SMON0_CONFIGURATION1_reg::type_id::create("CFG_SMON0_CONFIGURATION1", this);
    CFG_SMON0_CONFIGURATION1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000040, 32, 32'b00000000000000000000000000000000);
    CFG_SMON0_CONFIGURATION1.set_space_addr("MSG", 32'h0C000040);
    CFG_SMON0_CONFIGURATION1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON0_CONFIGURATION1.set_space_addr("MEM-SB",28'hC000040);
    CFG_SMON0_CONFIGURATION1.set_space_addr("MEM", 32'h0C000040);
      CFG_SMON0_CONFIGURATION1.set_space("MEM");
      CFG_SMON0_CONFIGURATION1.set_msg_opcode("MEM-SB");
      CFG_SMON0_CONFIGURATION1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON0_CONFIGURATION1.set_bar(4'h2, "MEM-SB");
      CFG_SMON0_CONFIGURATION1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON0_CONFIGURATION1.set_user_attribute("diag_reg", "0");
      CFG_SMON0_CONFIGURATION1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON0_CONFIGURATION1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON0_CONFIGURATION1:dont_test") ) CFG_SMON0_CONFIGURATION1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON0_CONFIGURATION1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON0_CONFIGURATION1"));
      end
   CFG_SMON0_CONFIGURATION1.MODE0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg1_q[7:0]"});
   CFG_SMON0_CONFIGURATION1.MODE1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg1_q[15:8]"});
   CFG_SMON0_CONFIGURATION1.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cfg1_q[31:16]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON0_ACTIVITYCOUNTER0";
    `endif
    CFG_SMON0_ACTIVITYCOUNTER0 = hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER0_reg::type_id::create("CFG_SMON0_ACTIVITYCOUNTER0", this);
    CFG_SMON0_ACTIVITYCOUNTER0.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000044, 32, 32'b00000000000000000000000000000000);
    CFG_SMON0_ACTIVITYCOUNTER0.set_space_addr("MSG", 32'h0C000044);
    CFG_SMON0_ACTIVITYCOUNTER0.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON0_ACTIVITYCOUNTER0.set_space_addr("MEM-SB",28'hC000044);
    CFG_SMON0_ACTIVITYCOUNTER0.set_space_addr("MEM", 32'h0C000044);
      CFG_SMON0_ACTIVITYCOUNTER0.set_space("MEM");
      CFG_SMON0_ACTIVITYCOUNTER0.set_msg_opcode("MEM-SB");
      CFG_SMON0_ACTIVITYCOUNTER0.set_fid(4'h0, "MEM-SB");
  	CFG_SMON0_ACTIVITYCOUNTER0.set_bar(4'h2, "MEM-SB");
      CFG_SMON0_ACTIVITYCOUNTER0.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON0_ACTIVITYCOUNTER0.set_user_attribute("diag_reg", "0");
      CFG_SMON0_ACTIVITYCOUNTER0.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON0_ACTIVITYCOUNTER0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON0_ACTIVITYCOUNTER0:dont_test") ) CFG_SMON0_ACTIVITYCOUNTER0.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON0_ACTIVITYCOUNTER0 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON0_ACTIVITYCOUNTER0"));
      end
   CFG_SMON0_ACTIVITYCOUNTER0.COUNTER0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cnt0_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON0_ACTIVITYCOUNTER1";
    `endif
    CFG_SMON0_ACTIVITYCOUNTER1 = hqm_list_sel_pipe_bridge_CFG_SMON0_ACTIVITYCOUNTER1_reg::type_id::create("CFG_SMON0_ACTIVITYCOUNTER1", this);
    CFG_SMON0_ACTIVITYCOUNTER1.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000048, 32, 32'b00000000000000000000000000000000);
    CFG_SMON0_ACTIVITYCOUNTER1.set_space_addr("MSG", 32'h0C000048);
    CFG_SMON0_ACTIVITYCOUNTER1.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON0_ACTIVITYCOUNTER1.set_space_addr("MEM-SB",28'hC000048);
    CFG_SMON0_ACTIVITYCOUNTER1.set_space_addr("MEM", 32'h0C000048);
      CFG_SMON0_ACTIVITYCOUNTER1.set_space("MEM");
      CFG_SMON0_ACTIVITYCOUNTER1.set_msg_opcode("MEM-SB");
      CFG_SMON0_ACTIVITYCOUNTER1.set_fid(4'h0, "MEM-SB");
  	CFG_SMON0_ACTIVITYCOUNTER1.set_bar(4'h2, "MEM-SB");
      CFG_SMON0_ACTIVITYCOUNTER1.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON0_ACTIVITYCOUNTER1.set_user_attribute("diag_reg", "0");
      CFG_SMON0_ACTIVITYCOUNTER1.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON0_ACTIVITYCOUNTER1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON0_ACTIVITYCOUNTER1:dont_test") ) CFG_SMON0_ACTIVITYCOUNTER1.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON0_ACTIVITYCOUNTER1 )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON0_ACTIVITYCOUNTER1"));
      end
   CFG_SMON0_ACTIVITYCOUNTER1.COUNTER1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_cnt1_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON0_MAXIMUM_TIMER";
    `endif
    CFG_SMON0_MAXIMUM_TIMER = hqm_list_sel_pipe_bridge_CFG_SMON0_MAXIMUM_TIMER_reg::type_id::create("CFG_SMON0_MAXIMUM_TIMER", this);
    CFG_SMON0_MAXIMUM_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00004C, 32, 32'b00000000000000000000000000000000);
    CFG_SMON0_MAXIMUM_TIMER.set_space_addr("MSG", 32'h0C00004C);
    CFG_SMON0_MAXIMUM_TIMER.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON0_MAXIMUM_TIMER.set_space_addr("MEM-SB",28'hC00004C);
    CFG_SMON0_MAXIMUM_TIMER.set_space_addr("MEM", 32'h0C00004C);
      CFG_SMON0_MAXIMUM_TIMER.set_space("MEM");
      CFG_SMON0_MAXIMUM_TIMER.set_msg_opcode("MEM-SB");
      CFG_SMON0_MAXIMUM_TIMER.set_fid(4'h0, "MEM-SB");
  	CFG_SMON0_MAXIMUM_TIMER.set_bar(4'h2, "MEM-SB");
      CFG_SMON0_MAXIMUM_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON0_MAXIMUM_TIMER.set_user_attribute("diag_reg", "0");
      CFG_SMON0_MAXIMUM_TIMER.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON0_MAXIMUM_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON0_MAXIMUM_TIMER:dont_test") ) CFG_SMON0_MAXIMUM_TIMER.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON0_MAXIMUM_TIMER )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON0_MAXIMUM_TIMER"));
      end
   CFG_SMON0_MAXIMUM_TIMER.MAXVALUE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_maxval_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SMON0_TIMER";
    `endif
    CFG_SMON0_TIMER = hqm_list_sel_pipe_bridge_CFG_SMON0_TIMER_reg::type_id::create("CFG_SMON0_TIMER", this);
    CFG_SMON0_TIMER.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000050, 32, 32'b00000000000000000000000000000000);
    CFG_SMON0_TIMER.set_space_addr("MSG", 32'h0C000050);
    CFG_SMON0_TIMER.set_space_addr("msg_bus_port", 'h21);
    CFG_SMON0_TIMER.set_space_addr("MEM-SB",28'hC000050);
    CFG_SMON0_TIMER.set_space_addr("MEM", 32'h0C000050);
      CFG_SMON0_TIMER.set_space("MEM");
      CFG_SMON0_TIMER.set_msg_opcode("MEM-SB");
      CFG_SMON0_TIMER.set_fid(4'h0, "MEM-SB");
  	CFG_SMON0_TIMER.set_bar(4'h2, "MEM-SB");
      CFG_SMON0_TIMER.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SMON0_TIMER.set_user_attribute("diag_reg", "0");
      CFG_SMON0_TIMER.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SMON0_TIMER.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SMON0_TIMER:dont_test") ) CFG_SMON0_TIMER.set_test_reg(1'b0);
      if (!add_reg( CFG_SMON0_TIMER )) begin
        `sla_error(get_name(), ("Could not add register CFG_SMON0_TIMER"));
      end
   CFG_SMON0_TIMER.TIMER.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_smon0.i_hqm_AW_smon.reg_smon_timer_q[31:0]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_SYNDROME_HW";
    `endif
    CFG_SYNDROME_HW = hqm_list_sel_pipe_bridge_CFG_SYNDROME_HW_reg::type_id::create("CFG_SYNDROME_HW", this);
    CFG_SYNDROME_HW.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000054, 32, 32'b00000000000000000000000000000000);
    CFG_SYNDROME_HW.set_space_addr("MSG", 32'h0C000054);
    CFG_SYNDROME_HW.set_space_addr("msg_bus_port", 'h21);
    CFG_SYNDROME_HW.set_space_addr("MEM-SB",28'hC000054);
    CFG_SYNDROME_HW.set_space_addr("MEM", 32'h0C000054);
      CFG_SYNDROME_HW.set_space("MEM");
      CFG_SYNDROME_HW.set_msg_opcode("MEM-SB");
      CFG_SYNDROME_HW.set_fid(4'h0, "MEM-SB");
  	CFG_SYNDROME_HW.set_bar(4'h2, "MEM-SB");
      CFG_SYNDROME_HW.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_SYNDROME_HW.set_user_attribute("diag_reg", "0");
      CFG_SYNDROME_HW.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_SYNDROME_HW.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_SYNDROME_HW:dont_test") ) CFG_SYNDROME_HW.set_test_reg(1'b0);
      if (!add_reg( CFG_SYNDROME_HW )) begin
        `sla_error(get_name(), ("Could not add register CFG_SYNDROME_HW"));
      end
   CFG_SYNDROME_HW.SYNDDATA.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_hw.i_hqm_AW_register_wtcfg.internal_f[27:0]"});
   CFG_SYNDROME_HW.SYNDTYPE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_hw.i_hqm_AW_register_wtcfg.internal_f[30:28]"});
   CFG_SYNDROME_HW.SYNDVALID.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_syndrome_hw.i_hqm_AW_register_wtcfg.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_IDLE";
    `endif
    CFG_UNIT_IDLE = hqm_list_sel_pipe_bridge_CFG_UNIT_IDLE_reg::type_id::create("CFG_UNIT_IDLE", this);
    CFG_UNIT_IDLE.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000058, 32, 32'b00000000000000000000000000000011);
    CFG_UNIT_IDLE.set_space_addr("MSG", 32'h0C000058);
    CFG_UNIT_IDLE.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_IDLE.set_space_addr("MEM-SB",28'hC000058);
    CFG_UNIT_IDLE.set_space_addr("MEM", 32'h0C000058);
      CFG_UNIT_IDLE.set_space("MEM");
      CFG_UNIT_IDLE.set_msg_opcode("MEM-SB");
      CFG_UNIT_IDLE.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_IDLE.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_IDLE.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_IDLE.set_user_attribute("diag_reg", "0");
      CFG_UNIT_IDLE.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_UNIT_IDLE.set_user_attribute("SubnetPortID", "8'h00");
      CFG_UNIT_IDLE.set_test_reg(0);
      if ( $test$plusargs("CFG_UNIT_IDLE:dont_test") ) CFG_UNIT_IDLE.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_IDLE )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_IDLE"));
      end
   CFG_UNIT_IDLE.PIPE_IDLE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_idle.internal_f[0:0]"});
   CFG_UNIT_IDLE.UNIT_IDLE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_idle.internal_f[1:1]"});
   CFG_UNIT_IDLE.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_idle.internal_f[31:2]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_UNIT_TIMEOUT";
    `endif
    CFG_UNIT_TIMEOUT = hqm_list_sel_pipe_bridge_CFG_UNIT_TIMEOUT_reg::type_id::create("CFG_UNIT_TIMEOUT", this);
    CFG_UNIT_TIMEOUT.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C00005C, 32, 32'b10000000000000001111111111111111);
    CFG_UNIT_TIMEOUT.set_space_addr("MSG", 32'h0C00005C);
    CFG_UNIT_TIMEOUT.set_space_addr("msg_bus_port", 'h21);
    CFG_UNIT_TIMEOUT.set_space_addr("MEM-SB",28'hC00005C);
    CFG_UNIT_TIMEOUT.set_space_addr("MEM", 32'h0C00005C);
      CFG_UNIT_TIMEOUT.set_space("MEM");
      CFG_UNIT_TIMEOUT.set_msg_opcode("MEM-SB");
      CFG_UNIT_TIMEOUT.set_fid(4'h0, "MEM-SB");
  	CFG_UNIT_TIMEOUT.set_bar(4'h2, "MEM-SB");
      CFG_UNIT_TIMEOUT.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_UNIT_TIMEOUT.set_user_attribute("diag_reg", "0");
      CFG_UNIT_TIMEOUT.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_UNIT_TIMEOUT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CFG_UNIT_TIMEOUT:dont_test") ) CFG_UNIT_TIMEOUT.set_test_reg(1'b0);
      if (!add_reg( CFG_UNIT_TIMEOUT )) begin
        `sla_error(get_name(), ("Could not add register CFG_UNIT_TIMEOUT"));
      end
   CFG_UNIT_TIMEOUT.MULTIPLIER.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_timeout.internal_f[4:0]"});
   CFG_UNIT_TIMEOUT.THRESHOLD.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_timeout.internal_f[15:5]"});
   CFG_UNIT_TIMEOUT.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_timeout.internal_f[30:16]"});
   CFG_UNIT_TIMEOUT.ENABLE.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_unit_timeout.internal_f[31:31]"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CFG_PATCH_CONTROL";
    `endif
    CFG_PATCH_CONTROL = hqm_list_sel_pipe_bridge_CFG_PATCH_CONTROL_reg::type_id::create("CFG_PATCH_CONTROL", this);
    CFG_PATCH_CONTROL.set_cfg(16'h0, 16'h0, 16'h0, 32'h0C000060, 32, 32'b00000000000000000000011101000000);
    CFG_PATCH_CONTROL.set_space_addr("MSG", 32'h0C000060);
    CFG_PATCH_CONTROL.set_space_addr("msg_bus_port", 'h21);
    CFG_PATCH_CONTROL.set_space_addr("MEM-SB",28'hC000060);
    CFG_PATCH_CONTROL.set_space_addr("MEM", 32'h0C000060);
      CFG_PATCH_CONTROL.set_space("MEM");
      CFG_PATCH_CONTROL.set_msg_opcode("MEM-SB");
      CFG_PATCH_CONTROL.set_fid(4'h0, "MEM-SB");
  	CFG_PATCH_CONTROL.set_bar(4'h2, "MEM-SB");
      CFG_PATCH_CONTROL.set_security_policy("Security_PolicyGroup", "HQM_OS_W");
      CFG_PATCH_CONTROL.set_user_attribute("diag_reg", "0");
      CFG_PATCH_CONTROL.set_user_attribute("HqmIsFeatureReg", "1");
      CFG_PATCH_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      CFG_PATCH_CONTROL.set_test_reg(0);
      if ( $test$plusargs("CFG_PATCH_CONTROL:dont_test") ) CFG_PATCH_CONTROL.set_test_reg(1'b0);
      if (!add_reg( CFG_PATCH_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register CFG_PATCH_CONTROL"));
      end
   CFG_PATCH_CONTROL.DELAY_CLOCKOFF.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[7:0]"});
   CFG_PATCH_CONTROL.DELAY_CLKOFF_BYPASS.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[13:8]"});
   CFG_PATCH_CONTROL.RSVZ1.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[15:14]"});
   CFG_PATCH_CONTROL.RSVZ0.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[30:16]"});
   CFG_PATCH_CONTROL.DISABLE_CLOCKOFF.set_paths({"i_hqm_list_sel_pipe_core.i_hqm_lsp_pipe_register_pfcsr.i_hqm_lsp_target_cfg_patch_control.internal_f[31:31]"});

  endfunction

 virtual function void print_sv_ral_file();  
    $display("RAL File Type [%s], RAL File Instance [%s], SV File ---> %s", get_type_name(), get_name(), `__FILE__); 
 endfunction 
endclass : hqm_list_sel_pipe_bridge_file

// ================================================


`endif
