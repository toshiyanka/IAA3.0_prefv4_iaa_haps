//                                                                             
// File:            hqm_pf_cfg_bridge_regs.svh                                 
// Nebulon version: d22ww21.1                                                  
// Description:                                                                
//                                                                             
// No Description Provided                                                     
//                                                                             
// Copyright (C) 2022 Intel Corp. All rights reserved                          
// THIS FILE IS AUTOMATICALLY GENERATED BY INTEL RDL GENERATOR, DO NOT EDIT    
//                                                                             


//RAL code compatible with Saola versions: 16.2.06 and newer 

`ifndef RAL_HQM_PF_CFG_BRIDGE_FILE
`define RAL_HQM_PF_CFG_BRIDGE_FILE

class hqm_pf_cfg_bridge_VENDOR_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field VID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_VENDOR_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VID, VID.desired)
     `RAL_FIELD_CP_16(VID, VID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(VID, VID.actual)
     `RAL_FIELD_CP_16(VID, VID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    VID = new("VID", "RO", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.VENDOR_ID.VID"});
    VID.set_powerwell("vcccfn");
    VID.set_rand_mode(0);
   VID.set_reset_signame("hqm_csr_pf0_rst_n");
    VID.set_logical_path("HQMID");
    void'(add_field( VID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_VENDOR_ID_reg) 
endclass : hqm_pf_cfg_bridge_VENDOR_ID_reg

// ================================================

class hqm_pf_cfg_bridge_DEVICE_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_DEVICE_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DID, DID.desired)
     `RAL_FIELD_CP_16(DID, DID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DID, DID.actual)
     `RAL_FIELD_CP_16(DID, DID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DID = new("DID", "RO/V", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_ID.DID"});
    DID.set_powerwell("vcccfn");
    DID.set_rand_mode(0);
   DID.set_reset_signame("hqm_csr_pf0_rst_n");
    DID.set_logical_path("HQMID");
    void'(add_field( DID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_DEVICE_ID_reg) 
endclass : hqm_pf_cfg_bridge_DEVICE_ID_reg

// ================================================

class hqm_pf_cfg_bridge_DEVICE_COMMAND_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IO;
  sla_ral_field MEM;
  sla_ral_field BM;
  sla_ral_field SS;
  sla_ral_field MWE;
  sla_ral_field VPS;
  sla_ral_field PER;
  sla_ral_field RESERVED1;
  sla_ral_field SER;
  sla_ral_field FBTB;
  sla_ral_field INTD;
  sla_ral_field RESERVED;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_DEVICE_COMMAND_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IO, IO.desired)
     `RAL_FIELD_CP_1(IO, IO.desired, 0)
     `RAL_FIELD_CP(MEM, MEM.desired)
     `RAL_FIELD_CP_1(MEM, MEM.desired, 0)
     `RAL_FIELD_CP(BM, BM.desired)
     `RAL_FIELD_CP_1(BM, BM.desired, 0)
     `RAL_FIELD_CP(SS, SS.desired)
     `RAL_FIELD_CP_1(SS, SS.desired, 0)
     `RAL_FIELD_CP(MWE, MWE.desired)
     `RAL_FIELD_CP_1(MWE, MWE.desired, 0)
     `RAL_FIELD_CP(VPS, VPS.desired)
     `RAL_FIELD_CP_1(VPS, VPS.desired, 0)
     `RAL_FIELD_CP(PER, PER.desired)
     `RAL_FIELD_CP_1(PER, PER.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_1(RESERVED1, RESERVED1.desired, 0)
     `RAL_FIELD_CP(SER, SER.desired)
     `RAL_FIELD_CP_1(SER, SER.desired, 0)
     `RAL_FIELD_CP(FBTB, FBTB.desired)
     `RAL_FIELD_CP_1(FBTB, FBTB.desired, 0)
     `RAL_FIELD_CP(INTD, INTD.desired)
     `RAL_FIELD_CP_1(INTD, INTD.desired, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_5(RESERVED, RESERVED.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IO, IO.actual)
     `RAL_FIELD_CP_1(IO, IO.actual, 0)
     `RAL_FIELD_CP(MEM, MEM.actual)
     `RAL_FIELD_CP_1(MEM, MEM.actual, 0)
     `RAL_FIELD_CP(BM, BM.actual)
     `RAL_FIELD_CP_1(BM, BM.actual, 0)
     `RAL_FIELD_CP(SS, SS.actual)
     `RAL_FIELD_CP_1(SS, SS.actual, 0)
     `RAL_FIELD_CP(MWE, MWE.actual)
     `RAL_FIELD_CP_1(MWE, MWE.actual, 0)
     `RAL_FIELD_CP(VPS, VPS.actual)
     `RAL_FIELD_CP_1(VPS, VPS.actual, 0)
     `RAL_FIELD_CP(PER, PER.actual)
     `RAL_FIELD_CP_1(PER, PER.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_1(RESERVED1, RESERVED1.actual, 0)
     `RAL_FIELD_CP(SER, SER.actual)
     `RAL_FIELD_CP_1(SER, SER.actual, 0)
     `RAL_FIELD_CP(FBTB, FBTB.actual)
     `RAL_FIELD_CP_1(FBTB, FBTB.actual, 0)
     `RAL_FIELD_CP(INTD, INTD.actual)
     `RAL_FIELD_CP_1(INTD, INTD.actual, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_5(RESERVED, RESERVED.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IO = new("IO", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.IO"});
    IO.set_powerwell("vcccfn");
    IO.set_rand_mode(0);
   IO.set_reset_signame("hqm_csr_pf0_rst_n");
    IO.set_logical_path("HQMID");
    void'(add_field( IO ));

    MEM = new("MEM", "RW", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.MEM"});
    MEM.set_powerwell("vcccfn");
    MEM.set_rand_mode(0);
   MEM.set_reset_signame("hqm_csr_pf0_rst_n");
    MEM.set_logical_path("HQMID");
    void'(add_field( MEM ));

    BM = new("BM", "RW", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.BM"});
    BM.set_powerwell("vcccfn");
    BM.set_rand_mode(0);
   BM.set_reset_signame("hqm_csr_pf0_rst_n");
    BM.set_logical_path("HQMID");
    void'(add_field( BM ));

    SS = new("SS", "RO", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.SS"});
    SS.set_powerwell("vcccfn");
    SS.set_rand_mode(0);
   SS.set_reset_signame("hqm_csr_pf0_rst_n");
    SS.set_logical_path("HQMID");
    void'(add_field( SS ));

    MWE = new("MWE", "RO", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.MWE"});
    MWE.set_powerwell("vcccfn");
    MWE.set_rand_mode(0);
   MWE.set_reset_signame("hqm_csr_pf0_rst_n");
    MWE.set_logical_path("HQMID");
    void'(add_field( MWE ));

    VPS = new("VPS", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.VPS"});
    VPS.set_powerwell("vcccfn");
    VPS.set_rand_mode(0);
   VPS.set_reset_signame("hqm_csr_pf0_rst_n");
    VPS.set_logical_path("HQMID");
    void'(add_field( VPS ));

    PER = new("PER", "RW", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.PER"});
    PER.set_powerwell("vcccfn");
    PER.set_rand_mode(0);
   PER.set_reset_signame("hqm_csr_pf0_rst_n");
    PER.set_logical_path("HQMID");
    void'(add_field( PER ));

    RESERVED1 = new("RESERVED1", "RO", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

    SER = new("SER", "RW", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.SER"});
    SER.set_powerwell("vcccfn");
    SER.set_rand_mode(0);
   SER.set_reset_signame("hqm_csr_pf0_rst_n");
    SER.set_logical_path("HQMID");
    void'(add_field( SER ));

    FBTB = new("FBTB", "RO", 1, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.FBTB"});
    FBTB.set_powerwell("vcccfn");
    FBTB.set_rand_mode(0);
   FBTB.set_reset_signame("hqm_csr_pf0_rst_n");
    FBTB.set_logical_path("HQMID");
    void'(add_field( FBTB ));

    INTD = new("INTD", "RW", 1, 10, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.INTD"});
    INTD.set_powerwell("vcccfn");
    INTD.set_rand_mode(0);
   INTD.set_reset_signame("hqm_csr_pf0_rst_n");
    INTD.set_logical_path("HQMID");
    void'(add_field( INTD ));

    RESERVED = new("RESERVED", "RO", 5, 11, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_DEVICE_COMMAND_reg) 
endclass : hqm_pf_cfg_bridge_DEVICE_COMMAND_reg

// ================================================

class hqm_pf_cfg_bridge_DEVICE_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RESERVED2;
  sla_ral_field INTSTS;
  sla_ral_field CL;
  sla_ral_field MC66;
  sla_ral_field RESERVED1;
  sla_ral_field FB2B;
  sla_ral_field MDPE;
  sla_ral_field DST;
  sla_ral_field STA;
  sla_ral_field RTA;
  sla_ral_field RMA;
  sla_ral_field SSE;
  sla_ral_field DPE;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_DEVICE_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED2, RESERVED2.desired)
     `RAL_FIELD_CP_3(RESERVED2, RESERVED2.desired, 0,1,2)
     `RAL_FIELD_CP(INTSTS, INTSTS.desired)
     `RAL_FIELD_CP_1(INTSTS, INTSTS.desired, 0)
     `RAL_FIELD_CP(CL, CL.desired)
     `RAL_FIELD_CP_1(CL, CL.desired, 0)
     `RAL_FIELD_CP(MC66, MC66.desired)
     `RAL_FIELD_CP_1(MC66, MC66.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_1(RESERVED1, RESERVED1.desired, 0)
     `RAL_FIELD_CP(FB2B, FB2B.desired)
     `RAL_FIELD_CP_1(FB2B, FB2B.desired, 0)
     `RAL_FIELD_CP(MDPE, MDPE.desired)
     `RAL_FIELD_CP_1(MDPE, MDPE.desired, 0)
     `RAL_FIELD_CP(DST, DST.desired)
     `RAL_FIELD_CP_2(DST, DST.desired, 0,1)
     `RAL_FIELD_CP(STA, STA.desired)
     `RAL_FIELD_CP_1(STA, STA.desired, 0)
     `RAL_FIELD_CP(RTA, RTA.desired)
     `RAL_FIELD_CP_1(RTA, RTA.desired, 0)
     `RAL_FIELD_CP(RMA, RMA.desired)
     `RAL_FIELD_CP_1(RMA, RMA.desired, 0)
     `RAL_FIELD_CP(SSE, SSE.desired)
     `RAL_FIELD_CP_1(SSE, SSE.desired, 0)
     `RAL_FIELD_CP(DPE, DPE.desired)
     `RAL_FIELD_CP_1(DPE, DPE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED2, RESERVED2.actual)
     `RAL_FIELD_CP_3(RESERVED2, RESERVED2.actual, 0,1,2)
     `RAL_FIELD_CP(INTSTS, INTSTS.actual)
     `RAL_FIELD_CP_1(INTSTS, INTSTS.actual, 0)
     `RAL_FIELD_CP(CL, CL.actual)
     `RAL_FIELD_CP_1(CL, CL.actual, 0)
     `RAL_FIELD_CP(MC66, MC66.actual)
     `RAL_FIELD_CP_1(MC66, MC66.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_1(RESERVED1, RESERVED1.actual, 0)
     `RAL_FIELD_CP(FB2B, FB2B.actual)
     `RAL_FIELD_CP_1(FB2B, FB2B.actual, 0)
     `RAL_FIELD_CP(MDPE, MDPE.actual)
     `RAL_FIELD_CP_1(MDPE, MDPE.actual, 0)
     `RAL_FIELD_CP(DST, DST.actual)
     `RAL_FIELD_CP_2(DST, DST.actual, 0,1)
     `RAL_FIELD_CP(STA, STA.actual)
     `RAL_FIELD_CP_1(STA, STA.actual, 0)
     `RAL_FIELD_CP(RTA, RTA.actual)
     `RAL_FIELD_CP_1(RTA, RTA.actual, 0)
     `RAL_FIELD_CP(RMA, RMA.actual)
     `RAL_FIELD_CP_1(RMA, RMA.actual, 0)
     `RAL_FIELD_CP(SSE, SSE.actual)
     `RAL_FIELD_CP_1(SSE, SSE.actual, 0)
     `RAL_FIELD_CP(DPE, DPE.actual)
     `RAL_FIELD_CP_1(DPE, DPE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RESERVED2 = new("RESERVED2", "RO", 3, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.RESERVED2"});
    RESERVED2.set_powerwell("vcccfn");
    RESERVED2.set_rand_mode(0);
   RESERVED2.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED2.set_logical_path("HQMID");
    void'(add_field( RESERVED2 ));

    INTSTS = new("INTSTS", "RO/V", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.INTSTS"});
    INTSTS.set_powerwell("vcccfn");
    INTSTS.set_rand_mode(0);
   INTSTS.set_reset_signame("hqm_csr_pf0_rst_n");
    INTSTS.set_logical_path("HQMID");
    void'(add_field( INTSTS ));

    CL = new("CL", "RO", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.CL"});
    CL.set_powerwell("vcccfn");
    CL.set_rand_mode(0);
   CL.set_reset_signame("hqm_csr_pf0_rst_n");
    CL.set_logical_path("HQMID");
    void'(add_field( CL ));

    MC66 = new("MC66", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.MC66"});
    MC66.set_powerwell("vcccfn");
    MC66.set_rand_mode(0);
   MC66.set_reset_signame("hqm_csr_pf0_rst_n");
    MC66.set_logical_path("HQMID");
    void'(add_field( MC66 ));

    RESERVED1 = new("RESERVED1", "RO", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

    FB2B = new("FB2B", "RO", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.FB2B"});
    FB2B.set_powerwell("vcccfn");
    FB2B.set_rand_mode(0);
   FB2B.set_reset_signame("hqm_csr_pf0_rst_n");
    FB2B.set_logical_path("HQMID");
    void'(add_field( FB2B ));

    MDPE = new("MDPE", "RW/1C/V", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.MDPE"});
    MDPE.set_powerwell("vcccfn");
    MDPE.set_rand_mode(0);
   MDPE.set_reset_signame("hqm_csr_pf0_rst_n");
    MDPE.set_logical_path("HQMID");
    void'(add_field( MDPE ));

    DST = new("DST", "RO", 2, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.DST"});
    DST.set_powerwell("vcccfn");
    DST.set_rand_mode(0);
   DST.set_reset_signame("hqm_csr_pf0_rst_n");
    DST.set_logical_path("HQMID");
    void'(add_field( DST ));

    STA = new("STA", "RW/1C/V", 1, 11, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.STA"});
    STA.set_powerwell("vcccfn");
    STA.set_rand_mode(0);
   STA.set_reset_signame("hqm_csr_pf0_rst_n");
    STA.set_logical_path("HQMID");
    void'(add_field( STA ));

    RTA = new("RTA", "RW/1C/V", 1, 12, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.RTA"});
    RTA.set_powerwell("vcccfn");
    RTA.set_rand_mode(0);
   RTA.set_reset_signame("hqm_csr_pf0_rst_n");
    RTA.set_logical_path("HQMID");
    void'(add_field( RTA ));

    RMA = new("RMA", "RW/1C/V", 1, 13, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.RMA"});
    RMA.set_powerwell("vcccfn");
    RMA.set_rand_mode(0);
   RMA.set_reset_signame("hqm_csr_pf0_rst_n");
    RMA.set_logical_path("HQMID");
    void'(add_field( RMA ));

    SSE = new("SSE", "RW/1C/V", 1, 14, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.SSE"});
    SSE.set_powerwell("vcccfn");
    SSE.set_rand_mode(0);
   SSE.set_reset_signame("hqm_csr_pf0_rst_n");
    SSE.set_logical_path("HQMID");
    void'(add_field( SSE ));

    DPE = new("DPE", "RW/1C/V", 1, 15, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.DPE"});
    DPE.set_powerwell("vcccfn");
    DPE.set_rand_mode(0);
   DPE.set_reset_signame("hqm_csr_pf0_rst_n");
    DPE.set_logical_path("HQMID");
    void'(add_field( DPE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_DEVICE_STATUS_reg) 
endclass : hqm_pf_cfg_bridge_DEVICE_STATUS_reg

// ================================================

class hqm_pf_cfg_bridge_REVISION_ID_CLASS_CODE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RIDL;
  sla_ral_field RIDU;
  sla_ral_field CC;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_REVISION_ID_CLASS_CODE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RIDL, RIDL.desired)
     `RAL_FIELD_CP_4(RIDL, RIDL.desired, 0,1,2,3)
     `RAL_FIELD_CP(RIDU, RIDU.desired)
     `RAL_FIELD_CP_4(RIDU, RIDU.desired, 0,1,2,3)
     `RAL_FIELD_CP(CC, CC.desired)
     `RAL_FIELD_CP_16(CC, CC.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(CC, CC.desired, 16,17,18,19,20,21,22,23)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RIDL, RIDL.actual)
     `RAL_FIELD_CP_4(RIDL, RIDL.actual, 0,1,2,3)
     `RAL_FIELD_CP(RIDU, RIDU.actual)
     `RAL_FIELD_CP_4(RIDU, RIDU.actual, 0,1,2,3)
     `RAL_FIELD_CP(CC, CC.actual)
     `RAL_FIELD_CP_16(CC, CC.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_8(CC, CC.actual, 16,17,18,19,20,21,22,23)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RIDL = new("RIDL", "RO/V", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.REVISION_ID_CLASS_CODE.RIDL"});
    RIDL.set_powerwell("vcccfn");
    RIDL.set_rand_mode(0);
   RIDL.set_reset_signame("hqm_csr_pf0_rst_n");
    RIDL.set_logical_path("HQMID");
    void'(add_field( RIDL ));

    RIDU = new("RIDU", "RO/V", 4, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.REVISION_ID_CLASS_CODE.RIDU"});
    RIDU.set_powerwell("vcccfn");
    RIDU.set_rand_mode(0);
   RIDU.set_reset_signame("hqm_csr_pf0_rst_n");
    RIDU.set_logical_path("HQMID");
    void'(add_field( RIDU ));

    CC = new("CC", "RO", 24, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.REVISION_ID_CLASS_CODE.CC"});
    CC.set_powerwell("vcccfn");
    CC.set_rand_mode(0);
   CC.set_reset_signame("hqm_csr_pf0_rst_n");
    CC.set_logical_path("HQMID");
    void'(add_field( CC ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_REVISION_ID_CLASS_CODE_reg) 
endclass : hqm_pf_cfg_bridge_REVISION_ID_CLASS_CODE_reg

// ================================================

class hqm_pf_cfg_bridge_CACHE_LINE_SIZE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CLS;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_CACHE_LINE_SIZE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CLS, CLS.desired)
     `RAL_FIELD_CP_8(CLS, CLS.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CLS, CLS.actual)
     `RAL_FIELD_CP_8(CLS, CLS.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CLS = new("CLS", "RW", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CACHE_LINE_SIZE.CLS"});
    CLS.set_powerwell("vcccfn");
    CLS.set_rand_mode(0);
   CLS.set_reset_signame("hqm_csr_pf0_rst_n");
    CLS.set_logical_path("HQMID");
    void'(add_field( CLS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_CACHE_LINE_SIZE_reg) 
endclass : hqm_pf_cfg_bridge_CACHE_LINE_SIZE_reg

// ================================================

class hqm_pf_cfg_bridge_HEADER_TYPE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HDR;
  sla_ral_field MFD;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_HEADER_TYPE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDR, HDR.desired)
     `RAL_FIELD_CP_7(HDR, HDR.desired, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(MFD, MFD.desired)
     `RAL_FIELD_CP_1(MFD, MFD.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDR, HDR.actual)
     `RAL_FIELD_CP_7(HDR, HDR.actual, 0,1,2,3,4,5,6)
     `RAL_FIELD_CP(MFD, MFD.actual)
     `RAL_FIELD_CP_1(MFD, MFD.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HDR = new("HDR", "RO", 7, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.HEADER_TYPE.HDR"});
    HDR.set_powerwell("vcccfn");
    HDR.set_rand_mode(0);
   HDR.set_reset_signame("hqm_csr_pf0_rst_n");
    HDR.set_logical_path("HQMID");
    void'(add_field( HDR ));

    MFD = new("MFD", "RO/V", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.HEADER_TYPE.MFD"});
    MFD.set_powerwell("vcccfn");
    MFD.set_rand_mode(0);
   MFD.set_reset_signame("hqm_csr_pf0_rst_n");
    MFD.set_logical_path("HQMID");
    void'(add_field( MFD ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_HEADER_TYPE_reg) 
endclass : hqm_pf_cfg_bridge_HEADER_TYPE_reg

// ================================================

class hqm_pf_cfg_bridge_FUNC_BAR_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MEM;
  sla_ral_field TYP;
  sla_ral_field PREF;
  sla_ral_field ZERO;
  sla_ral_field ADDR_L;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_FUNC_BAR_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MEM, MEM.desired)
     `RAL_FIELD_CP_1(MEM, MEM.desired, 0)
     `RAL_FIELD_CP(TYP, TYP.desired)
     `RAL_FIELD_CP_2(TYP, TYP.desired, 0,1)
     `RAL_FIELD_CP(PREF, PREF.desired)
     `RAL_FIELD_CP_1(PREF, PREF.desired, 0)
     `RAL_FIELD_CP(ZERO, ZERO.desired)
     `RAL_FIELD_CP_16(ZERO, ZERO.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(ZERO, ZERO.desired, 16,17,18,19,20,21)
     `RAL_FIELD_CP(ADDR_L, ADDR_L.desired)
     `RAL_FIELD_CP_6(ADDR_L, ADDR_L.desired, 0,1,2,3,4,5)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MEM, MEM.actual)
     `RAL_FIELD_CP_1(MEM, MEM.actual, 0)
     `RAL_FIELD_CP(TYP, TYP.actual)
     `RAL_FIELD_CP_2(TYP, TYP.actual, 0,1)
     `RAL_FIELD_CP(PREF, PREF.actual)
     `RAL_FIELD_CP_1(PREF, PREF.actual, 0)
     `RAL_FIELD_CP(ZERO, ZERO.actual)
     `RAL_FIELD_CP_16(ZERO, ZERO.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_6(ZERO, ZERO.actual, 16,17,18,19,20,21)
     `RAL_FIELD_CP(ADDR_L, ADDR_L.actual)
     `RAL_FIELD_CP_6(ADDR_L, ADDR_L.actual, 0,1,2,3,4,5)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MEM = new("MEM", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_L.MEM"});
    MEM.set_powerwell("vcccfn");
    MEM.set_rand_mode(0);
   MEM.set_reset_signame("hqm_csr_pf0_rst_n");
    MEM.set_logical_path("HQMID");
    void'(add_field( MEM ));

    TYP = new("TYP", "RO", 2, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_L.TYP"});
    TYP.set_powerwell("vcccfn");
    TYP.set_rand_mode(0);
   TYP.set_reset_signame("hqm_csr_pf0_rst_n");
    TYP.set_logical_path("HQMID");
    void'(add_field( TYP ));

    PREF = new("PREF", "RO", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_L.PREF"});
    PREF.set_powerwell("vcccfn");
    PREF.set_rand_mode(0);
   PREF.set_reset_signame("hqm_csr_pf0_rst_n");
    PREF.set_logical_path("HQMID");
    void'(add_field( PREF ));

    ZERO = new("ZERO", "RO", 22, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_L.ZERO"});
    ZERO.set_powerwell("vcccfn");
    ZERO.set_rand_mode(0);
   ZERO.set_reset_signame("hqm_csr_pf0_rst_n");
    ZERO.set_logical_path("HQMID");
    void'(add_field( ZERO ));

    ADDR_L = new("ADDR_L", "RW", 6, 26, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_L.ADDR_L"});
    ADDR_L.set_powerwell("vcccfn");
    ADDR_L.set_rand_mode(0);
   ADDR_L.set_reset_signame("hqm_csr_pf0_rst_n");
    ADDR_L.set_logical_path("HQMID");
    void'(add_field( ADDR_L ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_FUNC_BAR_L_reg) 
endclass : hqm_pf_cfg_bridge_FUNC_BAR_L_reg

// ================================================

class hqm_pf_cfg_bridge_FUNC_BAR_U_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ADDR;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_FUNC_BAR_U_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR, ADDR.desired)
     `RAL_FIELD_CP_16(ADDR, ADDR.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR, ADDR.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR, ADDR.actual)
     `RAL_FIELD_CP_16(ADDR, ADDR.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR, ADDR.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ADDR = new("ADDR", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_U.ADDR"});
    ADDR.set_powerwell("vcccfn");
    ADDR.set_rand_mode(0);
   ADDR.set_reset_signame("hqm_csr_pf0_rst_n");
    ADDR.set_logical_path("HQMID");
    void'(add_field( ADDR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_FUNC_BAR_U_reg) 
endclass : hqm_pf_cfg_bridge_FUNC_BAR_U_reg

// ================================================

class hqm_pf_cfg_bridge_CSR_BAR_L_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MEM;
  sla_ral_field TYP;
  sla_ral_field PREF;
  sla_ral_field ZERO;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_CSR_BAR_L_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MEM, MEM.desired)
     `RAL_FIELD_CP_1(MEM, MEM.desired, 0)
     `RAL_FIELD_CP(TYP, TYP.desired)
     `RAL_FIELD_CP_2(TYP, TYP.desired, 0,1)
     `RAL_FIELD_CP(PREF, PREF.desired)
     `RAL_FIELD_CP_1(PREF, PREF.desired, 0)
     `RAL_FIELD_CP(ZERO, ZERO.desired)
     `RAL_FIELD_CP_16(ZERO, ZERO.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(ZERO, ZERO.desired, 16,17,18,19,20,21,22,23,24,25,26,27)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MEM, MEM.actual)
     `RAL_FIELD_CP_1(MEM, MEM.actual, 0)
     `RAL_FIELD_CP(TYP, TYP.actual)
     `RAL_FIELD_CP_2(TYP, TYP.actual, 0,1)
     `RAL_FIELD_CP(PREF, PREF.actual)
     `RAL_FIELD_CP_1(PREF, PREF.actual, 0)
     `RAL_FIELD_CP(ZERO, ZERO.actual)
     `RAL_FIELD_CP_16(ZERO, ZERO.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_12(ZERO, ZERO.actual, 16,17,18,19,20,21,22,23,24,25,26,27)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MEM = new("MEM", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CSR_BAR_L.MEM"});
    MEM.set_powerwell("vcccfn");
    MEM.set_rand_mode(0);
   MEM.set_reset_signame("hqm_csr_pf0_rst_n");
    MEM.set_logical_path("HQMID");
    void'(add_field( MEM ));

    TYP = new("TYP", "RO", 2, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CSR_BAR_L.TYP"});
    TYP.set_powerwell("vcccfn");
    TYP.set_rand_mode(0);
   TYP.set_reset_signame("hqm_csr_pf0_rst_n");
    TYP.set_logical_path("HQMID");
    void'(add_field( TYP ));

    PREF = new("PREF", "RO", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CSR_BAR_L.PREF"});
    PREF.set_powerwell("vcccfn");
    PREF.set_rand_mode(0);
   PREF.set_reset_signame("hqm_csr_pf0_rst_n");
    PREF.set_logical_path("HQMID");
    void'(add_field( PREF ));

    ZERO = new("ZERO", "RO", 28, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CSR_BAR_L.ZERO"});
    ZERO.set_powerwell("vcccfn");
    ZERO.set_rand_mode(0);
   ZERO.set_reset_signame("hqm_csr_pf0_rst_n");
    ZERO.set_logical_path("HQMID");
    void'(add_field( ZERO ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_CSR_BAR_L_reg) 
endclass : hqm_pf_cfg_bridge_CSR_BAR_L_reg

// ================================================

class hqm_pf_cfg_bridge_CSR_BAR_U_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ADDR;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_CSR_BAR_U_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR, ADDR.desired)
     `RAL_FIELD_CP_16(ADDR, ADDR.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR, ADDR.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ADDR, ADDR.actual)
     `RAL_FIELD_CP_16(ADDR, ADDR.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(ADDR, ADDR.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ADDR = new("ADDR", "RW", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CSR_BAR_U.ADDR"});
    ADDR.set_powerwell("vcccfn");
    ADDR.set_rand_mode(0);
   ADDR.set_reset_signame("hqm_csr_pf0_rst_n");
    ADDR.set_logical_path("HQMID");
    void'(add_field( ADDR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_CSR_BAR_U_reg) 
endclass : hqm_pf_cfg_bridge_CSR_BAR_U_reg

// ================================================

class hqm_pf_cfg_bridge_SUBSYSTEM_VENDOR_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SVID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_SUBSYSTEM_VENDOR_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SVID, SVID.desired)
     `RAL_FIELD_CP_16(SVID, SVID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SVID, SVID.actual)
     `RAL_FIELD_CP_16(SVID, SVID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SVID = new("SVID", "RW/O", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SUBSYSTEM_VENDOR_ID.SVID"});
    SVID.set_powerwell("vcccfn");
    SVID.set_rand_mode(0);
   SVID.set_reset_signame("hqm_csr_pf0_rst_n");
    SVID.set_logical_path("HQMID");
    void'(add_field( SVID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_SUBSYSTEM_VENDOR_ID_reg) 
endclass : hqm_pf_cfg_bridge_SUBSYSTEM_VENDOR_ID_reg

// ================================================

class hqm_pf_cfg_bridge_SUBSYSTEM_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_SUBSYSTEM_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SID, SID.desired)
     `RAL_FIELD_CP_16(SID, SID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SID, SID.actual)
     `RAL_FIELD_CP_16(SID, SID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SID = new("SID", "RO", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SUBSYSTEM_ID.SID"});
    SID.set_powerwell("vcccfn");
    SID.set_rand_mode(0);
   SID.set_reset_signame("hqm_csr_pf0_rst_n");
    SID.set_logical_path("HQMID");
    void'(add_field( SID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_SUBSYSTEM_ID_reg) 
endclass : hqm_pf_cfg_bridge_SUBSYSTEM_ID_reg

// ================================================

class hqm_pf_cfg_bridge_CAP_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CP;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_CAP_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CP, CP.desired)
     `RAL_FIELD_CP_8(CP, CP.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CP, CP.actual)
     `RAL_FIELD_CP_8(CP, CP.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CP = new("CP", "RO", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CAP_PTR.CP"});
    CP.set_powerwell("vcccfn");
    CP.set_rand_mode(0);
   CP.set_reset_signame("hqm_csr_pf0_rst_n");
    CP.set_logical_path("HQMID");
    void'(add_field( CP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_CAP_PTR_reg) 
endclass : hqm_pf_cfg_bridge_CAP_PTR_reg

// ================================================

class hqm_pf_cfg_bridge_INT_LINE_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQL;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_INT_LINE_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQL, IRQL.desired)
     `RAL_FIELD_CP_8(IRQL, IRQL.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQL, IRQL.actual)
     `RAL_FIELD_CP_8(IRQL, IRQL.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQL = new("IRQL", "RW", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.INT_LINE.IRQL"});
    IRQL.set_powerwell("vcccfn");
    IRQL.set_rand_mode(0);
   IRQL.set_reset_signame("hqm_csr_pf0_rst_n");
    IRQL.set_logical_path("HQMID");
    void'(add_field( IRQL ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_INT_LINE_reg) 
endclass : hqm_pf_cfg_bridge_INT_LINE_reg

// ================================================

class hqm_pf_cfg_bridge_INT_PIN_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IRQP;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_INT_PIN_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQP, IRQP.desired)
     `RAL_FIELD_CP_8(IRQP, IRQP.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IRQP, IRQP.actual)
     `RAL_FIELD_CP_8(IRQP, IRQP.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IRQP = new("IRQP", "RO", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.INT_PIN.IRQP"});
    IRQP.set_powerwell("vcccfn");
    IRQP.set_rand_mode(0);
   IRQP.set_reset_signame("hqm_csr_pf0_rst_n");
    IRQP.set_logical_path("HQMID");
    void'(add_field( IRQP ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_INT_PIN_reg) 
endclass : hqm_pf_cfg_bridge_INT_PIN_reg

// ================================================

class hqm_pf_cfg_bridge_MSIX_CAP_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MSIX;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_MSIX_CAP_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX, MSIX.desired)
     `RAL_FIELD_CP_8(MSIX, MSIX.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MSIX, MSIX.actual)
     `RAL_FIELD_CP_8(MSIX, MSIX.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MSIX = new("MSIX", "RO", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_ID.MSIX"});
    MSIX.set_powerwell("vcccfn");
    MSIX.set_rand_mode(0);
   MSIX.set_reset_signame("hqm_csr_pf0_rst_n");
    MSIX.set_logical_path("HQMID");
    void'(add_field( MSIX ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_MSIX_CAP_ID_reg) 
endclass : hqm_pf_cfg_bridge_MSIX_CAP_ID_reg

// ================================================

class hqm_pf_cfg_bridge_MSIX_CAP_NEXT_CAP_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CAP_PTR;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_MSIX_CAP_NEXT_CAP_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.desired)
     `RAL_FIELD_CP_8(CAP_PTR, CAP_PTR.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.actual)
     `RAL_FIELD_CP_8(CAP_PTR, CAP_PTR.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CAP_PTR = new("CAP_PTR", "RO", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_NEXT_CAP_PTR.CAP_PTR"});
    CAP_PTR.set_powerwell("vcccfn");
    CAP_PTR.set_rand_mode(0);
   CAP_PTR.set_reset_signame("hqm_csr_pf0_rst_n");
    CAP_PTR.set_logical_path("HQMID");
    void'(add_field( CAP_PTR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_MSIX_CAP_NEXT_CAP_PTR_reg) 
endclass : hqm_pf_cfg_bridge_MSIX_CAP_NEXT_CAP_PTR_reg

// ================================================

class hqm_pf_cfg_bridge_MSIX_CAP_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TS;
  sla_ral_field RESERVED;
  sla_ral_field FM;
  sla_ral_field MSIXEN;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_MSIX_CAP_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TS, TS.desired)
     `RAL_FIELD_CP_11(TS, TS.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_3(RESERVED, RESERVED.desired, 0,1,2)
     `RAL_FIELD_CP(FM, FM.desired)
     `RAL_FIELD_CP_1(FM, FM.desired, 0)
     `RAL_FIELD_CP(MSIXEN, MSIXEN.desired)
     `RAL_FIELD_CP_1(MSIXEN, MSIXEN.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TS, TS.actual)
     `RAL_FIELD_CP_11(TS, TS.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_3(RESERVED, RESERVED.actual, 0,1,2)
     `RAL_FIELD_CP(FM, FM.actual)
     `RAL_FIELD_CP_1(FM, FM.actual, 0)
     `RAL_FIELD_CP(MSIXEN, MSIXEN.actual)
     `RAL_FIELD_CP_1(MSIXEN, MSIXEN.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TS = new("TS", "RO", 11, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_CONTROL.TS"});
    TS.set_powerwell("vcccfn");
    TS.set_rand_mode(0);
   TS.set_reset_signame("hqm_csr_pf0_rst_n");
    TS.set_logical_path("HQMID");
    void'(add_field( TS ));

    RESERVED = new("RESERVED", "RO", 3, 11, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_CONTROL.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

    FM = new("FM", "RW", 1, 14, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_CONTROL.FM"});
    FM.set_powerwell("vcccfn");
    FM.set_rand_mode(0);
   FM.set_reset_signame("hqm_csr_pf0_rst_n");
    FM.set_logical_path("HQMID");
    void'(add_field( FM ));

    MSIXEN = new("MSIXEN", "RW", 1, 15, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_CONTROL.MSIXEN"});
    MSIXEN.set_powerwell("vcccfn");
    MSIXEN.set_rand_mode(0);
   MSIXEN.set_reset_signame("hqm_csr_pf0_rst_n");
    MSIXEN.set_logical_path("HQMID");
    void'(add_field( MSIXEN ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_MSIX_CAP_CONTROL_reg) 
endclass : hqm_pf_cfg_bridge_MSIX_CAP_CONTROL_reg

// ================================================

class hqm_pf_cfg_bridge_MSIX_CAP_TABLE_OFFSET_BIR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TBIR;
  sla_ral_field TO;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_MSIX_CAP_TABLE_OFFSET_BIR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TBIR, TBIR.desired)
     `RAL_FIELD_CP_3(TBIR, TBIR.desired, 0,1,2)
     `RAL_FIELD_CP(TO, TO.desired)
     `RAL_FIELD_CP_16(TO, TO.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_13(TO, TO.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TBIR, TBIR.actual)
     `RAL_FIELD_CP_3(TBIR, TBIR.actual, 0,1,2)
     `RAL_FIELD_CP(TO, TO.actual)
     `RAL_FIELD_CP_16(TO, TO.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_13(TO, TO.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TBIR = new("TBIR", "RO", 3, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_TABLE_OFFSET_BIR.TBIR"});
    TBIR.set_powerwell("vcccfn");
    TBIR.set_rand_mode(0);
   TBIR.set_reset_signame("hqm_csr_pf0_rst_n");
    TBIR.set_logical_path("HQMID");
    void'(add_field( TBIR ));

    TO = new("TO", "RO", 29, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_TABLE_OFFSET_BIR.TO"});
    TO.set_powerwell("vcccfn");
    TO.set_rand_mode(0);
   TO.set_reset_signame("hqm_csr_pf0_rst_n");
    TO.set_logical_path("HQMID");
    void'(add_field( TO ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_MSIX_CAP_TABLE_OFFSET_BIR_reg) 
endclass : hqm_pf_cfg_bridge_MSIX_CAP_TABLE_OFFSET_BIR_reg

// ================================================

class hqm_pf_cfg_bridge_MSIX_CAP_PBA_OFFSET_BIR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PBABIR;
  sla_ral_field PBAO;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_MSIX_CAP_PBA_OFFSET_BIR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PBABIR, PBABIR.desired)
     `RAL_FIELD_CP_3(PBABIR, PBABIR.desired, 0,1,2)
     `RAL_FIELD_CP(PBAO, PBAO.desired)
     `RAL_FIELD_CP_16(PBAO, PBAO.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_13(PBAO, PBAO.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PBABIR, PBABIR.actual)
     `RAL_FIELD_CP_3(PBABIR, PBABIR.actual, 0,1,2)
     `RAL_FIELD_CP(PBAO, PBAO.actual)
     `RAL_FIELD_CP_16(PBAO, PBAO.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_13(PBAO, PBAO.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PBABIR = new("PBABIR", "RO", 3, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_PBA_OFFSET_BIR.PBABIR"});
    PBABIR.set_powerwell("vcccfn");
    PBABIR.set_rand_mode(0);
   PBABIR.set_reset_signame("hqm_csr_pf0_rst_n");
    PBABIR.set_logical_path("HQMID");
    void'(add_field( PBABIR ));

    PBAO = new("PBAO", "RO", 29, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_PBA_OFFSET_BIR.PBAO"});
    PBAO.set_powerwell("vcccfn");
    PBAO.set_rand_mode(0);
   PBAO.set_reset_signame("hqm_csr_pf0_rst_n");
    PBAO.set_logical_path("HQMID");
    void'(add_field( PBAO ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_MSIX_CAP_PBA_OFFSET_BIR_reg) 
endclass : hqm_pf_cfg_bridge_MSIX_CAP_PBA_OFFSET_BIR_reg

// ================================================

class hqm_pf_cfg_bridge_PCIE_CAP_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PCIECID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PCIE_CAP_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PCIECID, PCIECID.desired)
     `RAL_FIELD_CP_8(PCIECID, PCIECID.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PCIECID, PCIECID.actual)
     `RAL_FIELD_CP_8(PCIECID, PCIECID.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PCIECID = new("PCIECID", "RO", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_ID.PCIECID"});
    PCIECID.set_powerwell("vcccfn");
    PCIECID.set_rand_mode(0);
   PCIECID.set_reset_signame("hqm_csr_pf0_rst_n");
    PCIECID.set_logical_path("HQMID");
    void'(add_field( PCIECID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PCIE_CAP_ID_reg) 
endclass : hqm_pf_cfg_bridge_PCIE_CAP_ID_reg

// ================================================

class hqm_pf_cfg_bridge_PCIE_CAP_NEXT_CAP_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CAP_PTR;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PCIE_CAP_NEXT_CAP_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.desired)
     `RAL_FIELD_CP_8(CAP_PTR, CAP_PTR.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.actual)
     `RAL_FIELD_CP_8(CAP_PTR, CAP_PTR.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CAP_PTR = new("CAP_PTR", "RO", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_NEXT_CAP_PTR.CAP_PTR"});
    CAP_PTR.set_powerwell("vcccfn");
    CAP_PTR.set_rand_mode(0);
   CAP_PTR.set_reset_signame("hqm_csr_pf0_rst_n");
    CAP_PTR.set_logical_path("HQMID");
    void'(add_field( CAP_PTR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PCIE_CAP_NEXT_CAP_PTR_reg) 
endclass : hqm_pf_cfg_bridge_PCIE_CAP_NEXT_CAP_PTR_reg

// ================================================

class hqm_pf_cfg_bridge_PCIE_CAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CV;
  sla_ral_field DPT;
  sla_ral_field SI;
  sla_ral_field IMN;
  sla_ral_field RESERVED;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PCIE_CAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CV, CV.desired)
     `RAL_FIELD_CP_4(CV, CV.desired, 0,1,2,3)
     `RAL_FIELD_CP(DPT, DPT.desired)
     `RAL_FIELD_CP_4(DPT, DPT.desired, 0,1,2,3)
     `RAL_FIELD_CP(SI, SI.desired)
     `RAL_FIELD_CP_1(SI, SI.desired, 0)
     `RAL_FIELD_CP(IMN, IMN.desired)
     `RAL_FIELD_CP_5(IMN, IMN.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_2(RESERVED, RESERVED.desired, 0,1)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CV, CV.actual)
     `RAL_FIELD_CP_4(CV, CV.actual, 0,1,2,3)
     `RAL_FIELD_CP(DPT, DPT.actual)
     `RAL_FIELD_CP_4(DPT, DPT.actual, 0,1,2,3)
     `RAL_FIELD_CP(SI, SI.actual)
     `RAL_FIELD_CP_1(SI, SI.actual, 0)
     `RAL_FIELD_CP(IMN, IMN.actual)
     `RAL_FIELD_CP_5(IMN, IMN.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_2(RESERVED, RESERVED.actual, 0,1)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CV = new("CV", "RO", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP.CV"});
    CV.set_powerwell("vcccfn");
    CV.set_rand_mode(0);
   CV.set_reset_signame("hqm_csr_pf0_rst_n");
    CV.set_logical_path("HQMID");
    void'(add_field( CV ));

    DPT = new("DPT", "RO/V", 4, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP.DPT"});
    DPT.set_powerwell("vcccfn");
    DPT.set_rand_mode(0);
   DPT.set_reset_signame("hqm_csr_pf0_rst_n");
    DPT.set_logical_path("HQMID");
    void'(add_field( DPT ));

    SI = new("SI", "RO", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP.SI"});
    SI.set_powerwell("vcccfn");
    SI.set_rand_mode(0);
   SI.set_reset_signame("hqm_csr_pf0_rst_n");
    SI.set_logical_path("HQMID");
    void'(add_field( SI ));

    IMN = new("IMN", "RO", 5, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP.IMN"});
    IMN.set_powerwell("vcccfn");
    IMN.set_rand_mode(0);
   IMN.set_reset_signame("hqm_csr_pf0_rst_n");
    IMN.set_logical_path("HQMID");
    void'(add_field( IMN ));

    RESERVED = new("RESERVED", "RO", 2, 14, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PCIE_CAP_reg) 
endclass : hqm_pf_cfg_bridge_PCIE_CAP_reg

// ================================================

class hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field MPS;
  sla_ral_field PFS;
  sla_ral_field ETFS;
  sla_ral_field EL0L;
  sla_ral_field EL1L;
  sla_ral_field ATTN;
  sla_ral_field RBEP;
  sla_ral_field RESERVED1;
  sla_ral_field CSPV;
  sla_ral_field CSPS;
  sla_ral_field FLR;
  sla_ral_field RESERVED0;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MPS, MPS.desired)
     `RAL_FIELD_CP_3(MPS, MPS.desired, 0,1,2)
     `RAL_FIELD_CP(PFS, PFS.desired)
     `RAL_FIELD_CP_2(PFS, PFS.desired, 0,1)
     `RAL_FIELD_CP(ETFS, ETFS.desired)
     `RAL_FIELD_CP_1(ETFS, ETFS.desired, 0)
     `RAL_FIELD_CP(EL0L, EL0L.desired)
     `RAL_FIELD_CP_3(EL0L, EL0L.desired, 0,1,2)
     `RAL_FIELD_CP(EL1L, EL1L.desired)
     `RAL_FIELD_CP_3(EL1L, EL1L.desired, 0,1,2)
     `RAL_FIELD_CP(ATTN, ATTN.desired)
     `RAL_FIELD_CP_3(ATTN, ATTN.desired, 0,1,2)
     `RAL_FIELD_CP(RBEP, RBEP.desired)
     `RAL_FIELD_CP_1(RBEP, RBEP.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_2(RESERVED1, RESERVED1.desired, 0,1)
     `RAL_FIELD_CP(CSPV, CSPV.desired)
     `RAL_FIELD_CP_8(CSPV, CSPV.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CSPS, CSPS.desired)
     `RAL_FIELD_CP_2(CSPS, CSPS.desired, 0,1)
     `RAL_FIELD_CP(FLR, FLR.desired)
     `RAL_FIELD_CP_1(FLR, FLR.desired, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.desired)
     `RAL_FIELD_CP_3(RESERVED0, RESERVED0.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(MPS, MPS.actual)
     `RAL_FIELD_CP_3(MPS, MPS.actual, 0,1,2)
     `RAL_FIELD_CP(PFS, PFS.actual)
     `RAL_FIELD_CP_2(PFS, PFS.actual, 0,1)
     `RAL_FIELD_CP(ETFS, ETFS.actual)
     `RAL_FIELD_CP_1(ETFS, ETFS.actual, 0)
     `RAL_FIELD_CP(EL0L, EL0L.actual)
     `RAL_FIELD_CP_3(EL0L, EL0L.actual, 0,1,2)
     `RAL_FIELD_CP(EL1L, EL1L.actual)
     `RAL_FIELD_CP_3(EL1L, EL1L.actual, 0,1,2)
     `RAL_FIELD_CP(ATTN, ATTN.actual)
     `RAL_FIELD_CP_3(ATTN, ATTN.actual, 0,1,2)
     `RAL_FIELD_CP(RBEP, RBEP.actual)
     `RAL_FIELD_CP_1(RBEP, RBEP.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_2(RESERVED1, RESERVED1.actual, 0,1)
     `RAL_FIELD_CP(CSPV, CSPV.actual)
     `RAL_FIELD_CP_8(CSPV, CSPV.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(CSPS, CSPS.actual)
     `RAL_FIELD_CP_2(CSPS, CSPS.actual, 0,1)
     `RAL_FIELD_CP(FLR, FLR.actual)
     `RAL_FIELD_CP_1(FLR, FLR.actual, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.actual)
     `RAL_FIELD_CP_3(RESERVED0, RESERVED0.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    MPS = new("MPS", "RO", 3, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.MPS"});
    MPS.set_powerwell("vcccfn");
    MPS.set_rand_mode(0);
   MPS.set_reset_signame("hqm_csr_pf0_rst_n");
    MPS.set_logical_path("HQMID");
    void'(add_field( MPS ));

    PFS = new("PFS", "RO", 2, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.PFS"});
    PFS.set_powerwell("vcccfn");
    PFS.set_rand_mode(0);
   PFS.set_reset_signame("hqm_csr_pf0_rst_n");
    PFS.set_logical_path("HQMID");
    void'(add_field( PFS ));

    ETFS = new("ETFS", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.ETFS"});
    ETFS.set_powerwell("vcccfn");
    ETFS.set_rand_mode(0);
   ETFS.set_reset_signame("hqm_csr_pf0_rst_n");
    ETFS.set_logical_path("HQMID");
    void'(add_field( ETFS ));

    EL0L = new("EL0L", "RO", 3, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.EL0L"});
    EL0L.set_powerwell("vcccfn");
    EL0L.set_rand_mode(0);
   EL0L.set_reset_signame("hqm_csr_pf0_rst_n");
    EL0L.set_logical_path("HQMID");
    void'(add_field( EL0L ));

    EL1L = new("EL1L", "RO", 3, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.EL1L"});
    EL1L.set_powerwell("vcccfn");
    EL1L.set_rand_mode(0);
   EL1L.set_reset_signame("hqm_csr_pf0_rst_n");
    EL1L.set_logical_path("HQMID");
    void'(add_field( EL1L ));

    ATTN = new("ATTN", "RO", 3, 12, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.ATTN"});
    ATTN.set_powerwell("vcccfn");
    ATTN.set_rand_mode(0);
   ATTN.set_reset_signame("hqm_csr_pf0_rst_n");
    ATTN.set_logical_path("HQMID");
    void'(add_field( ATTN ));

    RBEP = new("RBEP", "RO", 1, 15, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.RBEP"});
    RBEP.set_powerwell("vcccfn");
    RBEP.set_rand_mode(0);
   RBEP.set_reset_signame("hqm_csr_pf0_rst_n");
    RBEP.set_logical_path("HQMID");
    void'(add_field( RBEP ));

    RESERVED1 = new("RESERVED1", "RO", 2, 16, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

    CSPV = new("CSPV", "RO", 8, 18, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.CSPV"});
    CSPV.set_powerwell("vcccfn");
    CSPV.set_rand_mode(0);
   CSPV.set_reset_signame("hqm_csr_pf0_rst_n");
    CSPV.set_logical_path("HQMID");
    void'(add_field( CSPV ));

    CSPS = new("CSPS", "RO", 2, 26, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.CSPS"});
    CSPS.set_powerwell("vcccfn");
    CSPS.set_rand_mode(0);
   CSPS.set_reset_signame("hqm_csr_pf0_rst_n");
    CSPS.set_logical_path("HQMID");
    void'(add_field( CSPS ));

    FLR = new("FLR", "RO", 1, 28, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.FLR"});
    FLR.set_powerwell("vcccfn");
    FLR.set_rand_mode(0);
   FLR.set_reset_signame("hqm_csr_pf0_rst_n");
    FLR.set_logical_path("HQMID");
    void'(add_field( FLR ));

    RESERVED0 = new("RESERVED0", "RO", 3, 29, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.RESERVED0"});
    RESERVED0.set_powerwell("vcccfn");
    RESERVED0.set_rand_mode(0);
   RESERVED0.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED0.set_logical_path("HQMID");
    void'(add_field( RESERVED0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_reg) 
endclass : hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_reg

// ================================================

class hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CERE;
  sla_ral_field NERE;
  sla_ral_field FERE;
  sla_ral_field URRO;
  sla_ral_field ERO;
  sla_ral_field MPS;
  sla_ral_field ETFE;
  sla_ral_field PFE;
  sla_ral_field APME;
  sla_ral_field ENS;
  sla_ral_field MRS;
  sla_ral_field STARTFLR;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CERE, CERE.desired)
     `RAL_FIELD_CP_1(CERE, CERE.desired, 0)
     `RAL_FIELD_CP(NERE, NERE.desired)
     `RAL_FIELD_CP_1(NERE, NERE.desired, 0)
     `RAL_FIELD_CP(FERE, FERE.desired)
     `RAL_FIELD_CP_1(FERE, FERE.desired, 0)
     `RAL_FIELD_CP(URRO, URRO.desired)
     `RAL_FIELD_CP_1(URRO, URRO.desired, 0)
     `RAL_FIELD_CP(ERO, ERO.desired)
     `RAL_FIELD_CP_1(ERO, ERO.desired, 0)
     `RAL_FIELD_CP(MPS, MPS.desired)
     `RAL_FIELD_CP_3(MPS, MPS.desired, 0,1,2)
     `RAL_FIELD_CP(ETFE, ETFE.desired)
     `RAL_FIELD_CP_1(ETFE, ETFE.desired, 0)
     `RAL_FIELD_CP(PFE, PFE.desired)
     `RAL_FIELD_CP_1(PFE, PFE.desired, 0)
     `RAL_FIELD_CP(APME, APME.desired)
     `RAL_FIELD_CP_1(APME, APME.desired, 0)
     `RAL_FIELD_CP(ENS, ENS.desired)
     `RAL_FIELD_CP_1(ENS, ENS.desired, 0)
     `RAL_FIELD_CP(MRS, MRS.desired)
     `RAL_FIELD_CP_3(MRS, MRS.desired, 0,1,2)
     `RAL_FIELD_CP(STARTFLR, STARTFLR.desired)
     `RAL_FIELD_CP_1(STARTFLR, STARTFLR.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CERE, CERE.actual)
     `RAL_FIELD_CP_1(CERE, CERE.actual, 0)
     `RAL_FIELD_CP(NERE, NERE.actual)
     `RAL_FIELD_CP_1(NERE, NERE.actual, 0)
     `RAL_FIELD_CP(FERE, FERE.actual)
     `RAL_FIELD_CP_1(FERE, FERE.actual, 0)
     `RAL_FIELD_CP(URRO, URRO.actual)
     `RAL_FIELD_CP_1(URRO, URRO.actual, 0)
     `RAL_FIELD_CP(ERO, ERO.actual)
     `RAL_FIELD_CP_1(ERO, ERO.actual, 0)
     `RAL_FIELD_CP(MPS, MPS.actual)
     `RAL_FIELD_CP_3(MPS, MPS.actual, 0,1,2)
     `RAL_FIELD_CP(ETFE, ETFE.actual)
     `RAL_FIELD_CP_1(ETFE, ETFE.actual, 0)
     `RAL_FIELD_CP(PFE, PFE.actual)
     `RAL_FIELD_CP_1(PFE, PFE.actual, 0)
     `RAL_FIELD_CP(APME, APME.actual)
     `RAL_FIELD_CP_1(APME, APME.actual, 0)
     `RAL_FIELD_CP(ENS, ENS.actual)
     `RAL_FIELD_CP_1(ENS, ENS.actual, 0)
     `RAL_FIELD_CP(MRS, MRS.actual)
     `RAL_FIELD_CP_3(MRS, MRS.actual, 0,1,2)
     `RAL_FIELD_CP(STARTFLR, STARTFLR.actual)
     `RAL_FIELD_CP_1(STARTFLR, STARTFLR.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CERE = new("CERE", "RW", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.CERE"});
    CERE.set_powerwell("vcccfn");
    CERE.set_rand_mode(0);
   CERE.set_reset_signame("hqm_csr_pf0_rst_n");
    CERE.set_logical_path("HQMID");
    void'(add_field( CERE ));

    NERE = new("NERE", "RW", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.NERE"});
    NERE.set_powerwell("vcccfn");
    NERE.set_rand_mode(0);
   NERE.set_reset_signame("hqm_csr_pf0_rst_n");
    NERE.set_logical_path("HQMID");
    void'(add_field( NERE ));

    FERE = new("FERE", "RW", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.FERE"});
    FERE.set_powerwell("vcccfn");
    FERE.set_rand_mode(0);
   FERE.set_reset_signame("hqm_csr_pf0_rst_n");
    FERE.set_logical_path("HQMID");
    void'(add_field( FERE ));

    URRO = new("URRO", "RW", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.URRO"});
    URRO.set_powerwell("vcccfn");
    URRO.set_rand_mode(0);
   URRO.set_reset_signame("hqm_csr_pf0_rst_n");
    URRO.set_logical_path("HQMID");
    void'(add_field( URRO ));

    ERO = new("ERO", "RW", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.ERO"});
    ERO.set_powerwell("vcccfn");
    ERO.set_rand_mode(0);
   ERO.set_reset_signame("hqm_csr_pf0_rst_n");
    ERO.set_logical_path("HQMID");
    void'(add_field( ERO ));

    MPS = new("MPS", "RW", 3, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.MPS"});
    MPS.set_powerwell("vcccfn");
    MPS.set_rand_mode(0);
   MPS.set_reset_signame("prim_gated_rst_b");
    MPS.set_logical_path("HQMID");
    void'(add_field( MPS ));

    ETFE = new("ETFE", "RW", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.ETFE"});
    ETFE.set_powerwell("vcccfn");
    ETFE.set_rand_mode(0);
   ETFE.set_reset_signame("hqm_csr_pf0_rst_n");
    ETFE.set_logical_path("HQMID");
    void'(add_field( ETFE ));

    PFE = new("PFE", "RO", 1, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.PFE"});
    PFE.set_powerwell("vcccfn");
    PFE.set_rand_mode(0);
   PFE.set_reset_signame("hqm_csr_pf0_rst_n");
    PFE.set_logical_path("HQMID");
    void'(add_field( PFE ));

    APME = new("APME", "RO", 1, 10, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.APME"});
    APME.set_powerwell("vcccfn");
    APME.set_rand_mode(0);
   APME.set_reset_signame("hqm_csr_pf0_rst_n");
    APME.set_logical_path("HQMID");
    void'(add_field( APME ));

    ENS = new("ENS", "RW", 1, 11, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.ENS"});
    ENS.set_powerwell("vcccfn");
    ENS.set_rand_mode(0);
   ENS.set_reset_signame("hqm_csr_pf0_rst_n");
    ENS.set_logical_path("HQMID");
    void'(add_field( ENS ));

    MRS = new("MRS", "RW", 3, 12, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.MRS"});
    MRS.set_powerwell("vcccfn");
    MRS.set_rand_mode(0);
   MRS.set_reset_signame("hqm_csr_pf0_rst_n");
    MRS.set_logical_path("HQMID");
    void'(add_field( MRS ));

    STARTFLR = new("STARTFLR", "RW", 1, 15, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.STARTFLR"});
    STARTFLR.set_powerwell("vcccfn");
    STARTFLR.set_rand_mode(0);
   STARTFLR.set_reset_signame("hqm_csr_pf0_rst_n");
    STARTFLR.set_logical_path("HQMID");
    void'(add_field( STARTFLR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_reg) 
endclass : hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_reg

// ================================================

class hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CED;
  sla_ral_field NED;
  sla_ral_field FED;
  sla_ral_field URD;
  sla_ral_field APD;
  sla_ral_field TP;
  sla_ral_field RESERVED;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CED, CED.desired)
     `RAL_FIELD_CP_1(CED, CED.desired, 0)
     `RAL_FIELD_CP(NED, NED.desired)
     `RAL_FIELD_CP_1(NED, NED.desired, 0)
     `RAL_FIELD_CP(FED, FED.desired)
     `RAL_FIELD_CP_1(FED, FED.desired, 0)
     `RAL_FIELD_CP(URD, URD.desired)
     `RAL_FIELD_CP_1(URD, URD.desired, 0)
     `RAL_FIELD_CP(APD, APD.desired)
     `RAL_FIELD_CP_1(APD, APD.desired, 0)
     `RAL_FIELD_CP(TP, TP.desired)
     `RAL_FIELD_CP_1(TP, TP.desired, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_10(RESERVED, RESERVED.desired, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CED, CED.actual)
     `RAL_FIELD_CP_1(CED, CED.actual, 0)
     `RAL_FIELD_CP(NED, NED.actual)
     `RAL_FIELD_CP_1(NED, NED.actual, 0)
     `RAL_FIELD_CP(FED, FED.actual)
     `RAL_FIELD_CP_1(FED, FED.actual, 0)
     `RAL_FIELD_CP(URD, URD.actual)
     `RAL_FIELD_CP_1(URD, URD.actual, 0)
     `RAL_FIELD_CP(APD, APD.actual)
     `RAL_FIELD_CP_1(APD, APD.actual, 0)
     `RAL_FIELD_CP(TP, TP.actual)
     `RAL_FIELD_CP_1(TP, TP.actual, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_10(RESERVED, RESERVED.actual, 0,1,2,3,4,5,6,7,8,9)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CED = new("CED", "RW/1C/V", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.CED"});
    CED.set_powerwell("vcccfn");
    CED.set_rand_mode(0);
   CED.set_reset_signame("hqm_csr_pf0_rst_n");
    CED.set_logical_path("HQMID");
    void'(add_field( CED ));

    NED = new("NED", "RW/1C/V", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.NED"});
    NED.set_powerwell("vcccfn");
    NED.set_rand_mode(0);
   NED.set_reset_signame("hqm_csr_pf0_rst_n");
    NED.set_logical_path("HQMID");
    void'(add_field( NED ));

    FED = new("FED", "RW/1C/V", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.FED"});
    FED.set_powerwell("vcccfn");
    FED.set_rand_mode(0);
   FED.set_reset_signame("hqm_csr_pf0_rst_n");
    FED.set_logical_path("HQMID");
    void'(add_field( FED ));

    URD = new("URD", "RW/1C/V", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.URD"});
    URD.set_powerwell("vcccfn");
    URD.set_rand_mode(0);
   URD.set_reset_signame("hqm_csr_pf0_rst_n");
    URD.set_logical_path("HQMID");
    void'(add_field( URD ));

    APD = new("APD", "RO", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.APD"});
    APD.set_powerwell("vcccfn");
    APD.set_rand_mode(0);
   APD.set_reset_signame("hqm_csr_pf0_rst_n");
    APD.set_logical_path("HQMID");
    void'(add_field( APD ));

    TP = new("TP", "RO/V", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.TP"});
    TP.set_powerwell("vcccfn");
    TP.set_rand_mode(0);
   TP.set_reset_signame("hqm_csr_pf0_rst_n");
    TP.set_logical_path("HQMID");
    void'(add_field( TP ));

    RESERVED = new("RESERVED", "RO", 10, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_STATUS_reg) 
endclass : hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_STATUS_reg

// ================================================

class hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CTORS;
  sla_ral_field CTODS;
  sla_ral_field RESERVED;
  sla_ral_field CMP10BTAGS;
  sla_ral_field REQ10BTAGS;
  sla_ral_field RESERVED2;
  sla_ral_field EFFS;
  sla_ral_field E2ETLPPS;
  sla_ral_field MAXE2ETLPP;
  sla_ral_field RESERVED3;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CTORS, CTORS.desired)
     `RAL_FIELD_CP_4(CTORS, CTORS.desired, 0,1,2,3)
     `RAL_FIELD_CP(CTODS, CTODS.desired)
     `RAL_FIELD_CP_1(CTODS, CTODS.desired, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_11(RESERVED, RESERVED.desired, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(CMP10BTAGS, CMP10BTAGS.desired)
     `RAL_FIELD_CP_1(CMP10BTAGS, CMP10BTAGS.desired, 0)
     `RAL_FIELD_CP(REQ10BTAGS, REQ10BTAGS.desired)
     `RAL_FIELD_CP_1(REQ10BTAGS, REQ10BTAGS.desired, 0)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.desired)
     `RAL_FIELD_CP_2(RESERVED2, RESERVED2.desired, 0,1)
     `RAL_FIELD_CP(EFFS, EFFS.desired)
     `RAL_FIELD_CP_1(EFFS, EFFS.desired, 0)
     `RAL_FIELD_CP(E2ETLPPS, E2ETLPPS.desired)
     `RAL_FIELD_CP_1(E2ETLPPS, E2ETLPPS.desired, 0)
     `RAL_FIELD_CP(MAXE2ETLPP, MAXE2ETLPP.desired)
     `RAL_FIELD_CP_2(MAXE2ETLPP, MAXE2ETLPP.desired, 0,1)
     `RAL_FIELD_CP(RESERVED3, RESERVED3.desired)
     `RAL_FIELD_CP_8(RESERVED3, RESERVED3.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CTORS, CTORS.actual)
     `RAL_FIELD_CP_4(CTORS, CTORS.actual, 0,1,2,3)
     `RAL_FIELD_CP(CTODS, CTODS.actual)
     `RAL_FIELD_CP_1(CTODS, CTODS.actual, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_11(RESERVED, RESERVED.actual, 0,1,2,3,4,5,6,7,8,9,10)
     `RAL_FIELD_CP(CMP10BTAGS, CMP10BTAGS.actual)
     `RAL_FIELD_CP_1(CMP10BTAGS, CMP10BTAGS.actual, 0)
     `RAL_FIELD_CP(REQ10BTAGS, REQ10BTAGS.actual)
     `RAL_FIELD_CP_1(REQ10BTAGS, REQ10BTAGS.actual, 0)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.actual)
     `RAL_FIELD_CP_2(RESERVED2, RESERVED2.actual, 0,1)
     `RAL_FIELD_CP(EFFS, EFFS.actual)
     `RAL_FIELD_CP_1(EFFS, EFFS.actual, 0)
     `RAL_FIELD_CP(E2ETLPPS, E2ETLPPS.actual)
     `RAL_FIELD_CP_1(E2ETLPPS, E2ETLPPS.actual, 0)
     `RAL_FIELD_CP(MAXE2ETLPP, MAXE2ETLPP.actual)
     `RAL_FIELD_CP_2(MAXE2ETLPP, MAXE2ETLPP.actual, 0,1)
     `RAL_FIELD_CP(RESERVED3, RESERVED3.actual)
     `RAL_FIELD_CP_8(RESERVED3, RESERVED3.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CTORS = new("CTORS", "RO", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.CTORS"});
    CTORS.set_powerwell("vcccfn");
    CTORS.set_rand_mode(0);
   CTORS.set_reset_signame("hqm_csr_pf0_rst_n");
    CTORS.set_logical_path("HQMID");
    void'(add_field( CTORS ));

    CTODS = new("CTODS", "RO", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.CTODS"});
    CTODS.set_powerwell("vcccfn");
    CTODS.set_rand_mode(0);
   CTODS.set_reset_signame("hqm_csr_pf0_rst_n");
    CTODS.set_logical_path("HQMID");
    void'(add_field( CTODS ));

    RESERVED = new("RESERVED", "RO", 11, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

    CMP10BTAGS = new("CMP10BTAGS", "RO/V", 1, 16, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.CMP10BTAGS"});
    CMP10BTAGS.set_powerwell("vcccfn");
    CMP10BTAGS.set_rand_mode(0);
   CMP10BTAGS.set_reset_signame("hqm_csr_pf0_rst_n");
    CMP10BTAGS.set_logical_path("HQMID");
    void'(add_field( CMP10BTAGS ));

    REQ10BTAGS = new("REQ10BTAGS", "RO", 1, 17, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.REQ10BTAGS"});
    REQ10BTAGS.set_powerwell("vcccfn");
    REQ10BTAGS.set_rand_mode(0);
   REQ10BTAGS.set_reset_signame("hqm_csr_pf0_rst_n");
    REQ10BTAGS.set_logical_path("HQMID");
    void'(add_field( REQ10BTAGS ));

    RESERVED2 = new("RESERVED2", "RO", 2, 18, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.RESERVED2"});
    RESERVED2.set_powerwell("vcccfn");
    RESERVED2.set_rand_mode(0);
   RESERVED2.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED2.set_logical_path("HQMID");
    void'(add_field( RESERVED2 ));

    EFFS = new("EFFS", "RO", 1, 20, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.EFFS"});
    EFFS.set_powerwell("vcccfn");
    EFFS.set_rand_mode(0);
   EFFS.set_reset_signame("hqm_csr_pf0_rst_n");
    EFFS.set_logical_path("HQMID");
    void'(add_field( EFFS ));

    E2ETLPPS = new("E2ETLPPS", "RO", 1, 21, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.E2ETLPPS"});
    E2ETLPPS.set_powerwell("vcccfn");
    E2ETLPPS.set_rand_mode(0);
   E2ETLPPS.set_reset_signame("hqm_csr_pf0_rst_n");
    E2ETLPPS.set_logical_path("HQMID");
    void'(add_field( E2ETLPPS ));

    MAXE2ETLPP = new("MAXE2ETLPP", "RO", 2, 22, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.MAXE2ETLPP"});
    MAXE2ETLPP.set_powerwell("vcccfn");
    MAXE2ETLPP.set_rand_mode(0);
   MAXE2ETLPP.set_reset_signame("hqm_csr_pf0_rst_n");
    MAXE2ETLPP.set_logical_path("HQMID");
    void'(add_field( MAXE2ETLPP ));

    RESERVED3 = new("RESERVED3", "RO", 8, 24, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.RESERVED3"});
    RESERVED3.set_powerwell("vcccfn");
    RESERVED3.set_rand_mode(0);
   RESERVED3.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED3.set_logical_path("HQMID");
    void'(add_field( RESERVED3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_2_reg) 
endclass : hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_2_reg

// ================================================

class hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CTOV;
  sla_ral_field CTODIS;
  sla_ral_field RESERVED0;
  sla_ral_field EIDO;
  sla_ral_field RESERVED1;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CTOV, CTOV.desired)
     `RAL_FIELD_CP_4(CTOV, CTOV.desired, 0,1,2,3)
     `RAL_FIELD_CP(CTODIS, CTODIS.desired)
     `RAL_FIELD_CP_1(CTODIS, CTODIS.desired, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.desired)
     `RAL_FIELD_CP_3(RESERVED0, RESERVED0.desired, 0,1,2)
     `RAL_FIELD_CP(EIDO, EIDO.desired)
     `RAL_FIELD_CP_1(EIDO, EIDO.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_7(RESERVED1, RESERVED1.desired, 0,1,2,3,4,5,6)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CTOV, CTOV.actual)
     `RAL_FIELD_CP_4(CTOV, CTOV.actual, 0,1,2,3)
     `RAL_FIELD_CP(CTODIS, CTODIS.actual)
     `RAL_FIELD_CP_1(CTODIS, CTODIS.actual, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.actual)
     `RAL_FIELD_CP_3(RESERVED0, RESERVED0.actual, 0,1,2)
     `RAL_FIELD_CP(EIDO, EIDO.actual)
     `RAL_FIELD_CP_1(EIDO, EIDO.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_7(RESERVED1, RESERVED1.actual, 0,1,2,3,4,5,6)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CTOV = new("CTOV", "RO", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL_2.CTOV"});
    CTOV.set_powerwell("vcccfn");
    CTOV.set_rand_mode(0);
   CTOV.set_reset_signame("hqm_csr_pf0_rst_n");
    CTOV.set_logical_path("HQMID");
    void'(add_field( CTOV ));

    CTODIS = new("CTODIS", "RW", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL_2.CTODIS"});
    CTODIS.set_powerwell("vcccfn");
    CTODIS.set_rand_mode(0);
   CTODIS.set_reset_signame("hqm_csr_pf0_rst_n");
    CTODIS.set_logical_path("HQMID");
    void'(add_field( CTODIS ));

    RESERVED0 = new("RESERVED0", "RO", 3, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL_2.RESERVED0"});
    RESERVED0.set_powerwell("vcccfn");
    RESERVED0.set_rand_mode(0);
   RESERVED0.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED0.set_logical_path("HQMID");
    void'(add_field( RESERVED0 ));

    EIDO = new("EIDO", "RW", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL_2.EIDO"});
    EIDO.set_powerwell("vcccfn");
    EIDO.set_rand_mode(0);
   EIDO.set_reset_signame("hqm_csr_pf0_rst_n");
    EIDO.set_logical_path("HQMID");
    void'(add_field( EIDO ));

    RESERVED1 = new("RESERVED1", "RO", 7, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL_2.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_2_reg) 
endclass : hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_2_reg

// ================================================

class hqm_pf_cfg_bridge_PM_CAP_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PMID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PM_CAP_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PMID, PMID.desired)
     `RAL_FIELD_CP_8(PMID, PMID.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PMID, PMID.actual)
     `RAL_FIELD_CP_8(PMID, PMID.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PMID = new("PMID", "RO", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_ID.PMID"});
    PMID.set_powerwell("vcccfn");
    PMID.set_rand_mode(0);
   PMID.set_reset_signame("hqm_csr_pf0_rst_n");
    PMID.set_logical_path("HQMID");
    void'(add_field( PMID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PM_CAP_ID_reg) 
endclass : hqm_pf_cfg_bridge_PM_CAP_ID_reg

// ================================================

class hqm_pf_cfg_bridge_PM_CAP_NEXT_CAP_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CAP_PTR;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PM_CAP_NEXT_CAP_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.desired)
     `RAL_FIELD_CP_8(CAP_PTR, CAP_PTR.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.actual)
     `RAL_FIELD_CP_8(CAP_PTR, CAP_PTR.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CAP_PTR = new("CAP_PTR", "RO", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_NEXT_CAP_PTR.CAP_PTR"});
    CAP_PTR.set_powerwell("vcccfn");
    CAP_PTR.set_rand_mode(0);
   CAP_PTR.set_reset_signame("hqm_csr_pf0_rst_n");
    CAP_PTR.set_logical_path("HQMID");
    void'(add_field( CAP_PTR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PM_CAP_NEXT_CAP_PTR_reg) 
endclass : hqm_pf_cfg_bridge_PM_CAP_NEXT_CAP_PTR_reg

// ================================================

class hqm_pf_cfg_bridge_PM_CAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PMV;
  sla_ral_field PMC;
  sla_ral_field IROR2D0;
  sla_ral_field DSI;
  sla_ral_field AC;
  sla_ral_field D1;
  sla_ral_field D2;
  sla_ral_field PME;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PM_CAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PMV, PMV.desired)
     `RAL_FIELD_CP_3(PMV, PMV.desired, 0,1,2)
     `RAL_FIELD_CP(PMC, PMC.desired)
     `RAL_FIELD_CP_1(PMC, PMC.desired, 0)
     `RAL_FIELD_CP(IROR2D0, IROR2D0.desired)
     `RAL_FIELD_CP_1(IROR2D0, IROR2D0.desired, 0)
     `RAL_FIELD_CP(DSI, DSI.desired)
     `RAL_FIELD_CP_1(DSI, DSI.desired, 0)
     `RAL_FIELD_CP(AC, AC.desired)
     `RAL_FIELD_CP_3(AC, AC.desired, 0,1,2)
     `RAL_FIELD_CP(D1, D1.desired)
     `RAL_FIELD_CP_1(D1, D1.desired, 0)
     `RAL_FIELD_CP(D2, D2.desired)
     `RAL_FIELD_CP_1(D2, D2.desired, 0)
     `RAL_FIELD_CP(PME, PME.desired)
     `RAL_FIELD_CP_5(PME, PME.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PMV, PMV.actual)
     `RAL_FIELD_CP_3(PMV, PMV.actual, 0,1,2)
     `RAL_FIELD_CP(PMC, PMC.actual)
     `RAL_FIELD_CP_1(PMC, PMC.actual, 0)
     `RAL_FIELD_CP(IROR2D0, IROR2D0.actual)
     `RAL_FIELD_CP_1(IROR2D0, IROR2D0.actual, 0)
     `RAL_FIELD_CP(DSI, DSI.actual)
     `RAL_FIELD_CP_1(DSI, DSI.actual, 0)
     `RAL_FIELD_CP(AC, AC.actual)
     `RAL_FIELD_CP_3(AC, AC.actual, 0,1,2)
     `RAL_FIELD_CP(D1, D1.actual)
     `RAL_FIELD_CP_1(D1, D1.actual, 0)
     `RAL_FIELD_CP(D2, D2.actual)
     `RAL_FIELD_CP_1(D2, D2.actual, 0)
     `RAL_FIELD_CP(PME, PME.actual)
     `RAL_FIELD_CP_5(PME, PME.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PMV = new("PMV", "RO", 3, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.PMV"});
    PMV.set_powerwell("vcccfn");
    PMV.set_rand_mode(0);
   PMV.set_reset_signame("hqm_csr_pf0_rst_n");
    PMV.set_logical_path("HQMID");
    void'(add_field( PMV ));

    PMC = new("PMC", "RO", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.PMC"});
    PMC.set_powerwell("vcccfn");
    PMC.set_rand_mode(0);
   PMC.set_reset_signame("hqm_csr_pf0_rst_n");
    PMC.set_logical_path("HQMID");
    void'(add_field( PMC ));

    IROR2D0 = new("IROR2D0", "RO", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.IROR2D0"});
    IROR2D0.set_powerwell("vcccfn");
    IROR2D0.set_rand_mode(0);
   IROR2D0.set_reset_signame("hqm_csr_pf0_rst_n");
    IROR2D0.set_logical_path("HQMID");
    void'(add_field( IROR2D0 ));

    DSI = new("DSI", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.DSI"});
    DSI.set_powerwell("vcccfn");
    DSI.set_rand_mode(0);
   DSI.set_reset_signame("hqm_csr_pf0_rst_n");
    DSI.set_logical_path("HQMID");
    void'(add_field( DSI ));

    AC = new("AC", "RO", 3, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.AC"});
    AC.set_powerwell("vcccfn");
    AC.set_rand_mode(0);
   AC.set_reset_signame("hqm_csr_pf0_rst_n");
    AC.set_logical_path("HQMID");
    void'(add_field( AC ));

    D1 = new("D1", "RO", 1, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.D1"});
    D1.set_powerwell("vcccfn");
    D1.set_rand_mode(0);
   D1.set_reset_signame("hqm_csr_pf0_rst_n");
    D1.set_logical_path("HQMID");
    void'(add_field( D1 ));

    D2 = new("D2", "RO", 1, 10, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.D2"});
    D2.set_powerwell("vcccfn");
    D2.set_rand_mode(0);
   D2.set_reset_signame("hqm_csr_pf0_rst_n");
    D2.set_logical_path("HQMID");
    void'(add_field( D2 ));

    PME = new("PME", "RO", 5, 11, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.PME"});
    PME.set_powerwell("vcccfn");
    PME.set_rand_mode(0);
   PME.set_reset_signame("hqm_csr_pf0_rst_n");
    PME.set_logical_path("HQMID");
    void'(add_field( PME ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PM_CAP_reg) 
endclass : hqm_pf_cfg_bridge_PM_CAP_reg

// ================================================

class hqm_pf_cfg_bridge_PM_CAP_CONTROL_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PS;
  sla_ral_field RESERVED2;
  sla_ral_field NSR;
  sla_ral_field RESERVED1;
  sla_ral_field PME;
  sla_ral_field DSEL;
  sla_ral_field DSC;
  sla_ral_field PMS;
  sla_ral_field RESERVED;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PM_CAP_CONTROL_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PS, PS.desired)
     `RAL_FIELD_CP_2(PS, PS.desired, 0,1)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.desired)
     `RAL_FIELD_CP_1(RESERVED2, RESERVED2.desired, 0)
     `RAL_FIELD_CP(NSR, NSR.desired)
     `RAL_FIELD_CP_1(NSR, NSR.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_4(RESERVED1, RESERVED1.desired, 0,1,2,3)
     `RAL_FIELD_CP(PME, PME.desired)
     `RAL_FIELD_CP_1(PME, PME.desired, 0)
     `RAL_FIELD_CP(DSEL, DSEL.desired)
     `RAL_FIELD_CP_4(DSEL, DSEL.desired, 0,1,2,3)
     `RAL_FIELD_CP(DSC, DSC.desired)
     `RAL_FIELD_CP_2(DSC, DSC.desired, 0,1)
     `RAL_FIELD_CP(PMS, PMS.desired)
     `RAL_FIELD_CP_1(PMS, PMS.desired, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_16(RESERVED, RESERVED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PS, PS.actual)
     `RAL_FIELD_CP_2(PS, PS.actual, 0,1)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.actual)
     `RAL_FIELD_CP_1(RESERVED2, RESERVED2.actual, 0)
     `RAL_FIELD_CP(NSR, NSR.actual)
     `RAL_FIELD_CP_1(NSR, NSR.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_4(RESERVED1, RESERVED1.actual, 0,1,2,3)
     `RAL_FIELD_CP(PME, PME.actual)
     `RAL_FIELD_CP_1(PME, PME.actual, 0)
     `RAL_FIELD_CP(DSEL, DSEL.actual)
     `RAL_FIELD_CP_4(DSEL, DSEL.actual, 0,1,2,3)
     `RAL_FIELD_CP(DSC, DSC.actual)
     `RAL_FIELD_CP_2(DSC, DSC.actual, 0,1)
     `RAL_FIELD_CP(PMS, PMS.actual)
     `RAL_FIELD_CP_1(PMS, PMS.actual, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_16(RESERVED, RESERVED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PS = new("PS", "RW", 2, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.PS"});
    PS.set_powerwell("vcccfn");
    PS.set_rand_mode(0);
   PS.set_reset_signame("hqm_csr_pf0_rst_n");
    PS.set_logical_path("HQMID");
    void'(add_field( PS ));

    RESERVED2 = new("RESERVED2", "RO", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.RESERVED2"});
    RESERVED2.set_powerwell("vcccfn");
    RESERVED2.set_rand_mode(0);
   RESERVED2.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED2.set_logical_path("HQMID");
    void'(add_field( RESERVED2 ));

    NSR = new("NSR", "RO", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.NSR"});
    NSR.set_powerwell("vcccfn");
    NSR.set_rand_mode(0);
   NSR.set_reset_signame("hqm_csr_pf0_rst_n");
    NSR.set_logical_path("HQMID");
    void'(add_field( NSR ));

    RESERVED1 = new("RESERVED1", "RO", 4, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

    PME = new("PME", "RO", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.PME"});
    PME.set_powerwell("vcccfn");
    PME.set_rand_mode(0);
   PME.set_reset_signame("hqm_csr_pf0_rst_n");
    PME.set_logical_path("HQMID");
    void'(add_field( PME ));

    DSEL = new("DSEL", "RO", 4, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.DSEL"});
    DSEL.set_powerwell("vcccfn");
    DSEL.set_rand_mode(0);
   DSEL.set_reset_signame("hqm_csr_pf0_rst_n");
    DSEL.set_logical_path("HQMID");
    void'(add_field( DSEL ));

    DSC = new("DSC", "RO", 2, 13, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.DSC"});
    DSC.set_powerwell("vcccfn");
    DSC.set_rand_mode(0);
   DSC.set_reset_signame("hqm_csr_pf0_rst_n");
    DSC.set_logical_path("HQMID");
    void'(add_field( DSC ));

    PMS = new("PMS", "RO", 1, 15, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.PMS"});
    PMS.set_powerwell("vcccfn");
    PMS.set_rand_mode(0);
   PMS.set_reset_signame("hqm_csr_pf0_rst_n");
    PMS.set_logical_path("HQMID");
    void'(add_field( PMS ));

    RESERVED = new("RESERVED", "RO", 16, 16, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PM_CAP_CONTROL_STATUS_reg) 
endclass : hqm_pf_cfg_bridge_PM_CAP_CONTROL_STATUS_reg

// ================================================

class hqm_pf_cfg_bridge_ACS_CAP_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ACSCID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_ACS_CAP_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ACSCID, ACSCID.desired)
     `RAL_FIELD_CP_16(ACSCID, ACSCID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ACSCID, ACSCID.actual)
     `RAL_FIELD_CP_16(ACSCID, ACSCID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ACSCID = new("ACSCID", "RO", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_ID.ACSCID"});
    ACSCID.set_powerwell("vcccfn");
    ACSCID.set_rand_mode(0);
   ACSCID.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSCID.set_logical_path("HQMID");
    void'(add_field( ACSCID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_ACS_CAP_ID_reg) 
endclass : hqm_pf_cfg_bridge_ACS_CAP_ID_reg

// ================================================

class hqm_pf_cfg_bridge_ACS_CAP_VERSION_NEXT_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ACSCV;
  sla_ral_field CAP_PTR;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_ACS_CAP_VERSION_NEXT_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ACSCV, ACSCV.desired)
     `RAL_FIELD_CP_4(ACSCV, ACSCV.desired, 0,1,2,3)
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.desired)
     `RAL_FIELD_CP_12(CAP_PTR, CAP_PTR.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ACSCV, ACSCV.actual)
     `RAL_FIELD_CP_4(ACSCV, ACSCV.actual, 0,1,2,3)
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.actual)
     `RAL_FIELD_CP_12(CAP_PTR, CAP_PTR.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ACSCV = new("ACSCV", "RO", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_VERSION_NEXT_PTR.ACSCV"});
    ACSCV.set_powerwell("vcccfn");
    ACSCV.set_rand_mode(0);
   ACSCV.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSCV.set_logical_path("HQMID");
    void'(add_field( ACSCV ));

    CAP_PTR = new("CAP_PTR", "RO", 12, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_VERSION_NEXT_PTR.CAP_PTR"});
    CAP_PTR.set_powerwell("vcccfn");
    CAP_PTR.set_rand_mode(0);
   CAP_PTR.set_reset_signame("hqm_csr_pf0_rst_n");
    CAP_PTR.set_logical_path("HQMID");
    void'(add_field( CAP_PTR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_ACS_CAP_VERSION_NEXT_PTR_reg) 
endclass : hqm_pf_cfg_bridge_ACS_CAP_VERSION_NEXT_PTR_reg

// ================================================

class hqm_pf_cfg_bridge_ACS_CAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ACSSV;
  sla_ral_field ACSTB;
  sla_ral_field ACSP2PRR;
  sla_ral_field ACSP2PCR;
  sla_ral_field ACSUF;
  sla_ral_field ACSP2PEC;
  sla_ral_field ACSDTP2P;
  sla_ral_field RESERVED1;
  sla_ral_field ACSECVS;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_ACS_CAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ACSSV, ACSSV.desired)
     `RAL_FIELD_CP_1(ACSSV, ACSSV.desired, 0)
     `RAL_FIELD_CP(ACSTB, ACSTB.desired)
     `RAL_FIELD_CP_1(ACSTB, ACSTB.desired, 0)
     `RAL_FIELD_CP(ACSP2PRR, ACSP2PRR.desired)
     `RAL_FIELD_CP_1(ACSP2PRR, ACSP2PRR.desired, 0)
     `RAL_FIELD_CP(ACSP2PCR, ACSP2PCR.desired)
     `RAL_FIELD_CP_1(ACSP2PCR, ACSP2PCR.desired, 0)
     `RAL_FIELD_CP(ACSUF, ACSUF.desired)
     `RAL_FIELD_CP_1(ACSUF, ACSUF.desired, 0)
     `RAL_FIELD_CP(ACSP2PEC, ACSP2PEC.desired)
     `RAL_FIELD_CP_1(ACSP2PEC, ACSP2PEC.desired, 0)
     `RAL_FIELD_CP(ACSDTP2P, ACSDTP2P.desired)
     `RAL_FIELD_CP_1(ACSDTP2P, ACSDTP2P.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_1(RESERVED1, RESERVED1.desired, 0)
     `RAL_FIELD_CP(ACSECVS, ACSECVS.desired)
     `RAL_FIELD_CP_8(ACSECVS, ACSECVS.desired, 0,1,2,3,4,5,6,7)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ACSSV, ACSSV.actual)
     `RAL_FIELD_CP_1(ACSSV, ACSSV.actual, 0)
     `RAL_FIELD_CP(ACSTB, ACSTB.actual)
     `RAL_FIELD_CP_1(ACSTB, ACSTB.actual, 0)
     `RAL_FIELD_CP(ACSP2PRR, ACSP2PRR.actual)
     `RAL_FIELD_CP_1(ACSP2PRR, ACSP2PRR.actual, 0)
     `RAL_FIELD_CP(ACSP2PCR, ACSP2PCR.actual)
     `RAL_FIELD_CP_1(ACSP2PCR, ACSP2PCR.actual, 0)
     `RAL_FIELD_CP(ACSUF, ACSUF.actual)
     `RAL_FIELD_CP_1(ACSUF, ACSUF.actual, 0)
     `RAL_FIELD_CP(ACSP2PEC, ACSP2PEC.actual)
     `RAL_FIELD_CP_1(ACSP2PEC, ACSP2PEC.actual, 0)
     `RAL_FIELD_CP(ACSDTP2P, ACSDTP2P.actual)
     `RAL_FIELD_CP_1(ACSDTP2P, ACSDTP2P.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_1(RESERVED1, RESERVED1.actual, 0)
     `RAL_FIELD_CP(ACSECVS, ACSECVS.actual)
     `RAL_FIELD_CP_8(ACSECVS, ACSECVS.actual, 0,1,2,3,4,5,6,7)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ACSSV = new("ACSSV", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSSV"});
    ACSSV.set_powerwell("vcccfn");
    ACSSV.set_rand_mode(0);
   ACSSV.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSSV.set_logical_path("HQMID");
    void'(add_field( ACSSV ));

    ACSTB = new("ACSTB", "RO", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSTB"});
    ACSTB.set_powerwell("vcccfn");
    ACSTB.set_rand_mode(0);
   ACSTB.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSTB.set_logical_path("HQMID");
    void'(add_field( ACSTB ));

    ACSP2PRR = new("ACSP2PRR", "RO", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSP2PRR"});
    ACSP2PRR.set_powerwell("vcccfn");
    ACSP2PRR.set_rand_mode(0);
   ACSP2PRR.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSP2PRR.set_logical_path("HQMID");
    void'(add_field( ACSP2PRR ));

    ACSP2PCR = new("ACSP2PCR", "RO", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSP2PCR"});
    ACSP2PCR.set_powerwell("vcccfn");
    ACSP2PCR.set_rand_mode(0);
   ACSP2PCR.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSP2PCR.set_logical_path("HQMID");
    void'(add_field( ACSP2PCR ));

    ACSUF = new("ACSUF", "RO", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSUF"});
    ACSUF.set_powerwell("vcccfn");
    ACSUF.set_rand_mode(0);
   ACSUF.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSUF.set_logical_path("HQMID");
    void'(add_field( ACSUF ));

    ACSP2PEC = new("ACSP2PEC", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSP2PEC"});
    ACSP2PEC.set_powerwell("vcccfn");
    ACSP2PEC.set_rand_mode(0);
   ACSP2PEC.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSP2PEC.set_logical_path("HQMID");
    void'(add_field( ACSP2PEC ));

    ACSDTP2P = new("ACSDTP2P", "RO", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSDTP2P"});
    ACSDTP2P.set_powerwell("vcccfn");
    ACSDTP2P.set_rand_mode(0);
   ACSDTP2P.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSDTP2P.set_logical_path("HQMID");
    void'(add_field( ACSDTP2P ));

    RESERVED1 = new("RESERVED1", "RO", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

    ACSECVS = new("ACSECVS", "RO", 8, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSECVS"});
    ACSECVS.set_powerwell("vcccfn");
    ACSECVS.set_rand_mode(0);
   ACSECVS.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSECVS.set_logical_path("HQMID");
    void'(add_field( ACSECVS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_ACS_CAP_reg) 
endclass : hqm_pf_cfg_bridge_ACS_CAP_reg

// ================================================

class hqm_pf_cfg_bridge_ACS_CAP_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ACSSVE;
  sla_ral_field ACSTBE;
  sla_ral_field ACSP2PRRE;
  sla_ral_field ACSP2PCRE;
  sla_ral_field ACSUFE;
  sla_ral_field ACSP2PECE;
  sla_ral_field ACSDTP2PE;
  sla_ral_field RESERVED;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_ACS_CAP_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ACSSVE, ACSSVE.desired)
     `RAL_FIELD_CP_1(ACSSVE, ACSSVE.desired, 0)
     `RAL_FIELD_CP(ACSTBE, ACSTBE.desired)
     `RAL_FIELD_CP_1(ACSTBE, ACSTBE.desired, 0)
     `RAL_FIELD_CP(ACSP2PRRE, ACSP2PRRE.desired)
     `RAL_FIELD_CP_1(ACSP2PRRE, ACSP2PRRE.desired, 0)
     `RAL_FIELD_CP(ACSP2PCRE, ACSP2PCRE.desired)
     `RAL_FIELD_CP_1(ACSP2PCRE, ACSP2PCRE.desired, 0)
     `RAL_FIELD_CP(ACSUFE, ACSUFE.desired)
     `RAL_FIELD_CP_1(ACSUFE, ACSUFE.desired, 0)
     `RAL_FIELD_CP(ACSP2PECE, ACSP2PECE.desired)
     `RAL_FIELD_CP_1(ACSP2PECE, ACSP2PECE.desired, 0)
     `RAL_FIELD_CP(ACSDTP2PE, ACSDTP2PE.desired)
     `RAL_FIELD_CP_1(ACSDTP2PE, ACSDTP2PE.desired, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_9(RESERVED, RESERVED.desired, 0,1,2,3,4,5,6,7,8)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ACSSVE, ACSSVE.actual)
     `RAL_FIELD_CP_1(ACSSVE, ACSSVE.actual, 0)
     `RAL_FIELD_CP(ACSTBE, ACSTBE.actual)
     `RAL_FIELD_CP_1(ACSTBE, ACSTBE.actual, 0)
     `RAL_FIELD_CP(ACSP2PRRE, ACSP2PRRE.actual)
     `RAL_FIELD_CP_1(ACSP2PRRE, ACSP2PRRE.actual, 0)
     `RAL_FIELD_CP(ACSP2PCRE, ACSP2PCRE.actual)
     `RAL_FIELD_CP_1(ACSP2PCRE, ACSP2PCRE.actual, 0)
     `RAL_FIELD_CP(ACSUFE, ACSUFE.actual)
     `RAL_FIELD_CP_1(ACSUFE, ACSUFE.actual, 0)
     `RAL_FIELD_CP(ACSP2PECE, ACSP2PECE.actual)
     `RAL_FIELD_CP_1(ACSP2PECE, ACSP2PECE.actual, 0)
     `RAL_FIELD_CP(ACSDTP2PE, ACSDTP2PE.actual)
     `RAL_FIELD_CP_1(ACSDTP2PE, ACSDTP2PE.actual, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_9(RESERVED, RESERVED.actual, 0,1,2,3,4,5,6,7,8)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ACSSVE = new("ACSSVE", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSSVE"});
    ACSSVE.set_powerwell("vcccfn");
    ACSSVE.set_rand_mode(0);
   ACSSVE.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSSVE.set_logical_path("HQMID");
    void'(add_field( ACSSVE ));

    ACSTBE = new("ACSTBE", "RO", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSTBE"});
    ACSTBE.set_powerwell("vcccfn");
    ACSTBE.set_rand_mode(0);
   ACSTBE.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSTBE.set_logical_path("HQMID");
    void'(add_field( ACSTBE ));

    ACSP2PRRE = new("ACSP2PRRE", "RO", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSP2PRRE"});
    ACSP2PRRE.set_powerwell("vcccfn");
    ACSP2PRRE.set_rand_mode(0);
   ACSP2PRRE.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSP2PRRE.set_logical_path("HQMID");
    void'(add_field( ACSP2PRRE ));

    ACSP2PCRE = new("ACSP2PCRE", "RO", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSP2PCRE"});
    ACSP2PCRE.set_powerwell("vcccfn");
    ACSP2PCRE.set_rand_mode(0);
   ACSP2PCRE.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSP2PCRE.set_logical_path("HQMID");
    void'(add_field( ACSP2PCRE ));

    ACSUFE = new("ACSUFE", "RO", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSUFE"});
    ACSUFE.set_powerwell("vcccfn");
    ACSUFE.set_rand_mode(0);
   ACSUFE.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSUFE.set_logical_path("HQMID");
    void'(add_field( ACSUFE ));

    ACSP2PECE = new("ACSP2PECE", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSP2PECE"});
    ACSP2PECE.set_powerwell("vcccfn");
    ACSP2PECE.set_rand_mode(0);
   ACSP2PECE.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSP2PECE.set_logical_path("HQMID");
    void'(add_field( ACSP2PECE ));

    ACSDTP2PE = new("ACSDTP2PE", "RO", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSDTP2PE"});
    ACSDTP2PE.set_powerwell("vcccfn");
    ACSDTP2PE.set_rand_mode(0);
   ACSDTP2PE.set_reset_signame("hqm_csr_pf0_rst_n");
    ACSDTP2PE.set_logical_path("HQMID");
    void'(add_field( ACSDTP2PE ));

    RESERVED = new("RESERVED", "RO", 9, 7, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_ACS_CAP_CONTROL_reg) 
endclass : hqm_pf_cfg_bridge_ACS_CAP_CONTROL_reg

// ================================================

class hqm_pf_cfg_bridge_PASID_CAP_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CAP_ID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PASID_CAP_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CAP_ID, CAP_ID.desired)
     `RAL_FIELD_CP_16(CAP_ID, CAP_ID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CAP_ID, CAP_ID.actual)
     `RAL_FIELD_CP_16(CAP_ID, CAP_ID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CAP_ID = new("CAP_ID", "RO", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP_ID.CAP_ID"});
    CAP_ID.set_powerwell("vcccfn");
    CAP_ID.set_rand_mode(0);
   CAP_ID.set_reset_signame("hqm_csr_pf0_rst_n");
    CAP_ID.set_logical_path("HQMID");
    void'(add_field( CAP_ID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PASID_CAP_ID_reg) 
endclass : hqm_pf_cfg_bridge_PASID_CAP_ID_reg

// ================================================

class hqm_pf_cfg_bridge_PASID_CAP_VERSION_NEXT_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SRIOVCV;
  sla_ral_field CAP_PTR;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PASID_CAP_VERSION_NEXT_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SRIOVCV, SRIOVCV.desired)
     `RAL_FIELD_CP_4(SRIOVCV, SRIOVCV.desired, 0,1,2,3)
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.desired)
     `RAL_FIELD_CP_12(CAP_PTR, CAP_PTR.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SRIOVCV, SRIOVCV.actual)
     `RAL_FIELD_CP_4(SRIOVCV, SRIOVCV.actual, 0,1,2,3)
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.actual)
     `RAL_FIELD_CP_12(CAP_PTR, CAP_PTR.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SRIOVCV = new("SRIOVCV", "RO", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP_VERSION_NEXT_PTR.SRIOVCV"});
    SRIOVCV.set_powerwell("vcccfn");
    SRIOVCV.set_rand_mode(0);
   SRIOVCV.set_reset_signame("hqm_csr_pf0_rst_n");
    SRIOVCV.set_logical_path("HQMID");
    void'(add_field( SRIOVCV ));

    CAP_PTR = new("CAP_PTR", "RO", 12, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP_VERSION_NEXT_PTR.CAP_PTR"});
    CAP_PTR.set_powerwell("vcccfn");
    CAP_PTR.set_rand_mode(0);
   CAP_PTR.set_reset_signame("hqm_csr_pf0_rst_n");
    CAP_PTR.set_logical_path("HQMID");
    void'(add_field( CAP_PTR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PASID_CAP_VERSION_NEXT_PTR_reg) 
endclass : hqm_pf_cfg_bridge_PASID_CAP_VERSION_NEXT_PTR_reg

// ================================================

class hqm_pf_cfg_bridge_PASID_CAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RESERVED0;
  sla_ral_field EXEC_PERM_SUPP;
  sla_ral_field PRIV_MODE_SUPP;
  sla_ral_field RESERVED1;
  sla_ral_field MAX_PASID_WIDTH;
  sla_ral_field RESERVED2;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PASID_CAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED0, RESERVED0.desired)
     `RAL_FIELD_CP_1(RESERVED0, RESERVED0.desired, 0)
     `RAL_FIELD_CP(EXEC_PERM_SUPP, EXEC_PERM_SUPP.desired)
     `RAL_FIELD_CP_1(EXEC_PERM_SUPP, EXEC_PERM_SUPP.desired, 0)
     `RAL_FIELD_CP(PRIV_MODE_SUPP, PRIV_MODE_SUPP.desired)
     `RAL_FIELD_CP_1(PRIV_MODE_SUPP, PRIV_MODE_SUPP.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_5(RESERVED1, RESERVED1.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(MAX_PASID_WIDTH, MAX_PASID_WIDTH.desired)
     `RAL_FIELD_CP_5(MAX_PASID_WIDTH, MAX_PASID_WIDTH.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.desired)
     `RAL_FIELD_CP_3(RESERVED2, RESERVED2.desired, 0,1,2)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED0, RESERVED0.actual)
     `RAL_FIELD_CP_1(RESERVED0, RESERVED0.actual, 0)
     `RAL_FIELD_CP(EXEC_PERM_SUPP, EXEC_PERM_SUPP.actual)
     `RAL_FIELD_CP_1(EXEC_PERM_SUPP, EXEC_PERM_SUPP.actual, 0)
     `RAL_FIELD_CP(PRIV_MODE_SUPP, PRIV_MODE_SUPP.actual)
     `RAL_FIELD_CP_1(PRIV_MODE_SUPP, PRIV_MODE_SUPP.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_5(RESERVED1, RESERVED1.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(MAX_PASID_WIDTH, MAX_PASID_WIDTH.actual)
     `RAL_FIELD_CP_5(MAX_PASID_WIDTH, MAX_PASID_WIDTH.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.actual)
     `RAL_FIELD_CP_3(RESERVED2, RESERVED2.actual, 0,1,2)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RESERVED0 = new("RESERVED0", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.RESERVED0"});
    RESERVED0.set_powerwell("vcccfn");
    RESERVED0.set_rand_mode(0);
   RESERVED0.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED0.set_logical_path("HQMID");
    void'(add_field( RESERVED0 ));

    EXEC_PERM_SUPP = new("EXEC_PERM_SUPP", "RO", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.EXEC_PERM_SUPP"});
    EXEC_PERM_SUPP.set_powerwell("vcccfn");
    EXEC_PERM_SUPP.set_rand_mode(0);
   EXEC_PERM_SUPP.set_reset_signame("hqm_csr_pf0_rst_n");
    EXEC_PERM_SUPP.set_logical_path("HQMID");
    void'(add_field( EXEC_PERM_SUPP ));

    PRIV_MODE_SUPP = new("PRIV_MODE_SUPP", "RO", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.PRIV_MODE_SUPP"});
    PRIV_MODE_SUPP.set_powerwell("vcccfn");
    PRIV_MODE_SUPP.set_rand_mode(0);
   PRIV_MODE_SUPP.set_reset_signame("hqm_csr_pf0_rst_n");
    PRIV_MODE_SUPP.set_logical_path("HQMID");
    void'(add_field( PRIV_MODE_SUPP ));

    RESERVED1 = new("RESERVED1", "RO", 5, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

    MAX_PASID_WIDTH = new("MAX_PASID_WIDTH", "RO", 5, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.MAX_PASID_WIDTH"});
    MAX_PASID_WIDTH.set_powerwell("vcccfn");
    MAX_PASID_WIDTH.set_rand_mode(0);
   MAX_PASID_WIDTH.set_reset_signame("hqm_csr_pf0_rst_n");
    MAX_PASID_WIDTH.set_logical_path("HQMID");
    void'(add_field( MAX_PASID_WIDTH ));

    RESERVED2 = new("RESERVED2", "RO", 3, 13, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.RESERVED2"});
    RESERVED2.set_powerwell("vcccfn");
    RESERVED2.set_rand_mode(0);
   RESERVED2.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED2.set_logical_path("HQMID");
    void'(add_field( RESERVED2 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PASID_CAP_reg) 
endclass : hqm_pf_cfg_bridge_PASID_CAP_reg

// ================================================

class hqm_pf_cfg_bridge_PASID_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PASID_ENABLE;
  sla_ral_field EXEC_PERM_ENABLE;
  sla_ral_field PRIV_MODE_ENABLE;
  sla_ral_field RESERVED;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_PASID_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PASID_ENABLE, PASID_ENABLE.desired)
     `RAL_FIELD_CP_1(PASID_ENABLE, PASID_ENABLE.desired, 0)
     `RAL_FIELD_CP(EXEC_PERM_ENABLE, EXEC_PERM_ENABLE.desired)
     `RAL_FIELD_CP_1(EXEC_PERM_ENABLE, EXEC_PERM_ENABLE.desired, 0)
     `RAL_FIELD_CP(PRIV_MODE_ENABLE, PRIV_MODE_ENABLE.desired)
     `RAL_FIELD_CP_1(PRIV_MODE_ENABLE, PRIV_MODE_ENABLE.desired, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_13(RESERVED, RESERVED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PASID_ENABLE, PASID_ENABLE.actual)
     `RAL_FIELD_CP_1(PASID_ENABLE, PASID_ENABLE.actual, 0)
     `RAL_FIELD_CP(EXEC_PERM_ENABLE, EXEC_PERM_ENABLE.actual)
     `RAL_FIELD_CP_1(EXEC_PERM_ENABLE, EXEC_PERM_ENABLE.actual, 0)
     `RAL_FIELD_CP(PRIV_MODE_ENABLE, PRIV_MODE_ENABLE.actual)
     `RAL_FIELD_CP_1(PRIV_MODE_ENABLE, PRIV_MODE_ENABLE.actual, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_13(RESERVED, RESERVED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PASID_ENABLE = new("PASID_ENABLE", "RW", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CONTROL.PASID_ENABLE"});
    PASID_ENABLE.set_powerwell("vcccfn");
    PASID_ENABLE.set_rand_mode(0);
   PASID_ENABLE.set_reset_signame("hqm_csr_pf0_rst_n");
    PASID_ENABLE.set_logical_path("HQMID");
    void'(add_field( PASID_ENABLE ));

    EXEC_PERM_ENABLE = new("EXEC_PERM_ENABLE", "RO", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CONTROL.EXEC_PERM_ENABLE"});
    EXEC_PERM_ENABLE.set_powerwell("vcccfn");
    EXEC_PERM_ENABLE.set_rand_mode(0);
   EXEC_PERM_ENABLE.set_reset_signame("hqm_csr_pf0_rst_n");
    EXEC_PERM_ENABLE.set_logical_path("HQMID");
    void'(add_field( EXEC_PERM_ENABLE ));

    PRIV_MODE_ENABLE = new("PRIV_MODE_ENABLE", "RO", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CONTROL.PRIV_MODE_ENABLE"});
    PRIV_MODE_ENABLE.set_powerwell("vcccfn");
    PRIV_MODE_ENABLE.set_rand_mode(0);
   PRIV_MODE_ENABLE.set_reset_signame("hqm_csr_pf0_rst_n");
    PRIV_MODE_ENABLE.set_logical_path("HQMID");
    void'(add_field( PRIV_MODE_ENABLE ));

    RESERVED = new("RESERVED", "RO", 13, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CONTROL.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_PASID_CONTROL_reg) 
endclass : hqm_pf_cfg_bridge_PASID_CONTROL_reg

// ================================================

class hqm_pf_cfg_bridge_DVSEC_CAP_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CAP_ID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_DVSEC_CAP_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CAP_ID, CAP_ID.desired)
     `RAL_FIELD_CP_16(CAP_ID, CAP_ID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CAP_ID, CAP_ID.actual)
     `RAL_FIELD_CP_16(CAP_ID, CAP_ID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CAP_ID = new("CAP_ID", "RO", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_CAP_ID.CAP_ID"});
    CAP_ID.set_powerwell("vcccfn");
    CAP_ID.set_rand_mode(0);
   CAP_ID.set_reset_signame("hqm_csr_pf0_rst_n");
    CAP_ID.set_logical_path("HQMID");
    void'(add_field( CAP_ID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_DVSEC_CAP_ID_reg) 
endclass : hqm_pf_cfg_bridge_DVSEC_CAP_ID_reg

// ================================================

class hqm_pf_cfg_bridge_DVSEC_CAP_VERSION_NEXT_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DVSECCV;
  sla_ral_field CAP_PTR;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_DVSEC_CAP_VERSION_NEXT_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DVSECCV, DVSECCV.desired)
     `RAL_FIELD_CP_4(DVSECCV, DVSECCV.desired, 0,1,2,3)
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.desired)
     `RAL_FIELD_CP_12(CAP_PTR, CAP_PTR.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DVSECCV, DVSECCV.actual)
     `RAL_FIELD_CP_4(DVSECCV, DVSECCV.actual, 0,1,2,3)
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.actual)
     `RAL_FIELD_CP_12(CAP_PTR, CAP_PTR.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DVSECCV = new("DVSECCV", "RO", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_CAP_VERSION_NEXT_PTR.DVSECCV"});
    DVSECCV.set_powerwell("vcccfn");
    DVSECCV.set_rand_mode(0);
   DVSECCV.set_reset_signame("hqm_csr_pf0_rst_n");
    DVSECCV.set_logical_path("HQMID");
    void'(add_field( DVSECCV ));

    CAP_PTR = new("CAP_PTR", "RO", 12, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_CAP_VERSION_NEXT_PTR.CAP_PTR"});
    CAP_PTR.set_powerwell("vcccfn");
    CAP_PTR.set_rand_mode(0);
   CAP_PTR.set_reset_signame("hqm_csr_pf0_rst_n");
    CAP_PTR.set_logical_path("HQMID");
    void'(add_field( CAP_PTR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_DVSEC_CAP_VERSION_NEXT_PTR_reg) 
endclass : hqm_pf_cfg_bridge_DVSEC_CAP_VERSION_NEXT_PTR_reg

// ================================================

class hqm_pf_cfg_bridge_DVSEC_HDR1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DVSEC_VENDOR_ID;
  sla_ral_field DVSEC_REVISION;
  sla_ral_field DVSEC_LENGTH;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_DVSEC_HDR1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DVSEC_VENDOR_ID, DVSEC_VENDOR_ID.desired)
     `RAL_FIELD_CP_16(DVSEC_VENDOR_ID, DVSEC_VENDOR_ID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(DVSEC_REVISION, DVSEC_REVISION.desired)
     `RAL_FIELD_CP_4(DVSEC_REVISION, DVSEC_REVISION.desired, 0,1,2,3)
     `RAL_FIELD_CP(DVSEC_LENGTH, DVSEC_LENGTH.desired)
     `RAL_FIELD_CP_12(DVSEC_LENGTH, DVSEC_LENGTH.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DVSEC_VENDOR_ID, DVSEC_VENDOR_ID.actual)
     `RAL_FIELD_CP_16(DVSEC_VENDOR_ID, DVSEC_VENDOR_ID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(DVSEC_REVISION, DVSEC_REVISION.actual)
     `RAL_FIELD_CP_4(DVSEC_REVISION, DVSEC_REVISION.actual, 0,1,2,3)
     `RAL_FIELD_CP(DVSEC_LENGTH, DVSEC_LENGTH.actual)
     `RAL_FIELD_CP_12(DVSEC_LENGTH, DVSEC_LENGTH.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DVSEC_VENDOR_ID = new("DVSEC_VENDOR_ID", "RO", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_HDR1.DVSEC_VENDOR_ID"});
    DVSEC_VENDOR_ID.set_powerwell("vcccfn");
    DVSEC_VENDOR_ID.set_rand_mode(0);
   DVSEC_VENDOR_ID.set_reset_signame("hqm_csr_pf0_rst_n");
    DVSEC_VENDOR_ID.set_logical_path("HQMID");
    void'(add_field( DVSEC_VENDOR_ID ));

    DVSEC_REVISION = new("DVSEC_REVISION", "RO", 4, 16, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_HDR1.DVSEC_REVISION"});
    DVSEC_REVISION.set_powerwell("vcccfn");
    DVSEC_REVISION.set_rand_mode(0);
   DVSEC_REVISION.set_reset_signame("hqm_csr_pf0_rst_n");
    DVSEC_REVISION.set_logical_path("HQMID");
    void'(add_field( DVSEC_REVISION ));

    DVSEC_LENGTH = new("DVSEC_LENGTH", "RO", 12, 20, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_HDR1.DVSEC_LENGTH"});
    DVSEC_LENGTH.set_powerwell("vcccfn");
    DVSEC_LENGTH.set_rand_mode(0);
   DVSEC_LENGTH.set_reset_signame("hqm_csr_pf0_rst_n");
    DVSEC_LENGTH.set_logical_path("HQMID");
    void'(add_field( DVSEC_LENGTH ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_DVSEC_HDR1_reg) 
endclass : hqm_pf_cfg_bridge_DVSEC_HDR1_reg

// ================================================

class hqm_pf_cfg_bridge_DVSEC_HDR2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field DVSEC_ID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_DVSEC_HDR2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DVSEC_ID, DVSEC_ID.desired)
     `RAL_FIELD_CP_16(DVSEC_ID, DVSEC_ID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(DVSEC_ID, DVSEC_ID.actual)
     `RAL_FIELD_CP_16(DVSEC_ID, DVSEC_ID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    DVSEC_ID = new("DVSEC_ID", "RO", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_HDR2.DVSEC_ID"});
    DVSEC_ID.set_powerwell("vcccfn");
    DVSEC_ID.set_rand_mode(0);
   DVSEC_ID.set_reset_signame("hqm_csr_pf0_rst_n");
    DVSEC_ID.set_logical_path("HQMID");
    void'(add_field( DVSEC_ID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_DVSEC_HDR2_reg) 
endclass : hqm_pf_cfg_bridge_DVSEC_HDR2_reg

// ================================================

class hqm_pf_cfg_bridge_SCIOV_CAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RESERVED0;
  sla_ral_field AIS_DEPENDENT;
  sla_ral_field HOMOGEN_FUNC;
  sla_ral_field RESERVED2;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_SCIOV_CAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED0, RESERVED0.desired)
     `RAL_FIELD_CP_8(RESERVED0, RESERVED0.desired, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(AIS_DEPENDENT, AIS_DEPENDENT.desired)
     `RAL_FIELD_CP_1(AIS_DEPENDENT, AIS_DEPENDENT.desired, 0)
     `RAL_FIELD_CP(HOMOGEN_FUNC, HOMOGEN_FUNC.desired)
     `RAL_FIELD_CP_1(HOMOGEN_FUNC, HOMOGEN_FUNC.desired, 0)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.desired)
     `RAL_FIELD_CP_6(RESERVED2, RESERVED2.desired, 0,1,2,3,4,5)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED0, RESERVED0.actual)
     `RAL_FIELD_CP_8(RESERVED0, RESERVED0.actual, 0,1,2,3,4,5,6,7)
     `RAL_FIELD_CP(AIS_DEPENDENT, AIS_DEPENDENT.actual)
     `RAL_FIELD_CP_1(AIS_DEPENDENT, AIS_DEPENDENT.actual, 0)
     `RAL_FIELD_CP(HOMOGEN_FUNC, HOMOGEN_FUNC.actual)
     `RAL_FIELD_CP_1(HOMOGEN_FUNC, HOMOGEN_FUNC.actual, 0)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.actual)
     `RAL_FIELD_CP_6(RESERVED2, RESERVED2.actual, 0,1,2,3,4,5)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RESERVED0 = new("RESERVED0", "RO", 8, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_CAP.RESERVED0"});
    RESERVED0.set_powerwell("vcccfn");
    RESERVED0.set_rand_mode(0);
   RESERVED0.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED0.set_logical_path("HQMID");
    void'(add_field( RESERVED0 ));

    AIS_DEPENDENT = new("AIS_DEPENDENT", "RO", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_CAP.AIS_DEPENDENT"});
    AIS_DEPENDENT.set_powerwell("vcccfn");
    AIS_DEPENDENT.set_rand_mode(0);
   AIS_DEPENDENT.set_reset_signame("hqm_csr_pf0_rst_n");
    AIS_DEPENDENT.set_logical_path("HQMID");
    void'(add_field( AIS_DEPENDENT ));

    HOMOGEN_FUNC = new("HOMOGEN_FUNC", "RO", 1, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_CAP.HOMOGEN_FUNC"});
    HOMOGEN_FUNC.set_powerwell("vcccfn");
    HOMOGEN_FUNC.set_rand_mode(0);
   HOMOGEN_FUNC.set_reset_signame("hqm_csr_pf0_rst_n");
    HOMOGEN_FUNC.set_logical_path("HQMID");
    void'(add_field( HOMOGEN_FUNC ));

    RESERVED2 = new("RESERVED2", "RO", 6, 10, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_CAP.RESERVED2"});
    RESERVED2.set_powerwell("vcccfn");
    RESERVED2.set_rand_mode(0);
   RESERVED2.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED2.set_logical_path("HQMID");
    void'(add_field( RESERVED2 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_SCIOV_CAP_reg) 
endclass : hqm_pf_cfg_bridge_SCIOV_CAP_reg

// ================================================

class hqm_pf_cfg_bridge_SCIOV_SUPP_PGSZ_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SUPP_PGSZ;
  sla_ral_field RESERVED;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_SCIOV_SUPP_PGSZ_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SUPP_PGSZ, SUPP_PGSZ.desired)
     `RAL_FIELD_CP_1(SUPP_PGSZ, SUPP_PGSZ.desired, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_16(RESERVED, RESERVED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RESERVED, RESERVED.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SUPP_PGSZ, SUPP_PGSZ.actual)
     `RAL_FIELD_CP_1(SUPP_PGSZ, SUPP_PGSZ.actual, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_16(RESERVED, RESERVED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RESERVED, RESERVED.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SUPP_PGSZ = new("SUPP_PGSZ", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_SUPP_PGSZ.SUPP_PGSZ"});
    SUPP_PGSZ.set_powerwell("vcccfn");
    SUPP_PGSZ.set_rand_mode(0);
   SUPP_PGSZ.set_reset_signame("hqm_csr_pf0_rst_n");
    SUPP_PGSZ.set_logical_path("HQMID");
    void'(add_field( SUPP_PGSZ ));

    RESERVED = new("RESERVED", "RO", 31, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_SUPP_PGSZ.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_SCIOV_SUPP_PGSZ_reg) 
endclass : hqm_pf_cfg_bridge_SCIOV_SUPP_PGSZ_reg

// ================================================

class hqm_pf_cfg_bridge_SCIOV_SYS_PGSZ_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field SYS_PGSZ;
  sla_ral_field RESERVED;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_SCIOV_SYS_PGSZ_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYS_PGSZ, SYS_PGSZ.desired)
     `RAL_FIELD_CP_1(SYS_PGSZ, SYS_PGSZ.desired, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_16(RESERVED, RESERVED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RESERVED, RESERVED.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(SYS_PGSZ, SYS_PGSZ.actual)
     `RAL_FIELD_CP_1(SYS_PGSZ, SYS_PGSZ.actual, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_16(RESERVED, RESERVED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RESERVED, RESERVED.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    SYS_PGSZ = new("SYS_PGSZ", "RW", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_SYS_PGSZ.SYS_PGSZ"});
    SYS_PGSZ.set_powerwell("vcccfn");
    SYS_PGSZ.set_rand_mode(0);
   SYS_PGSZ.set_reset_signame("hqm_csr_pf0_rst_n");
    SYS_PGSZ.set_logical_path("HQMID");
    void'(add_field( SYS_PGSZ ));

    RESERVED = new("RESERVED", "RO", 31, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_SYS_PGSZ.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_SCIOV_SYS_PGSZ_reg) 
endclass : hqm_pf_cfg_bridge_SCIOV_SYS_PGSZ_reg

// ================================================

class hqm_pf_cfg_bridge_SCIOV_IMS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field IMS_SUPP;
  sla_ral_field RESERVED;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_SCIOV_IMS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IMS_SUPP, IMS_SUPP.desired)
     `RAL_FIELD_CP_1(IMS_SUPP, IMS_SUPP.desired, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_16(RESERVED, RESERVED.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RESERVED, RESERVED.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(IMS_SUPP, IMS_SUPP.actual)
     `RAL_FIELD_CP_1(IMS_SUPP, IMS_SUPP.actual, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_16(RESERVED, RESERVED.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_15(RESERVED, RESERVED.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    IMS_SUPP = new("IMS_SUPP", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_IMS.IMS_SUPP"});
    IMS_SUPP.set_powerwell("vcccfn");
    IMS_SUPP.set_rand_mode(0);
   IMS_SUPP.set_reset_signame("hqm_csr_pf0_rst_n");
    IMS_SUPP.set_logical_path("HQMID");
    void'(add_field( IMS_SUPP ));

    RESERVED = new("RESERVED", "RO", 31, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_IMS.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_SCIOV_IMS_reg) 
endclass : hqm_pf_cfg_bridge_SCIOV_IMS_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PCIEAERCID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PCIEAERCID, PCIEAERCID.desired)
     `RAL_FIELD_CP_16(PCIEAERCID, PCIEAERCID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PCIEAERCID, PCIEAERCID.actual)
     `RAL_FIELD_CP_16(PCIEAERCID, PCIEAERCID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PCIEAERCID = new("PCIEAERCID", "RO", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ID.PCIEAERCID"});
    PCIEAERCID.set_powerwell("vcccfn");
    PCIEAERCID.set_rand_mode(0);
   PCIEAERCID.set_reset_signame("hqm_csr_pf0_rst_n");
    PCIEAERCID.set_logical_path("HQMID");
    void'(add_field( PCIEAERCID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_ID_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_ID_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_VERSION_NEXT_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field PCIEAERCVN;
  sla_ral_field CAP_PTR;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_VERSION_NEXT_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PCIEAERCVN, PCIEAERCVN.desired)
     `RAL_FIELD_CP_4(PCIEAERCVN, PCIEAERCVN.desired, 0,1,2,3)
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.desired)
     `RAL_FIELD_CP_12(CAP_PTR, CAP_PTR.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(PCIEAERCVN, PCIEAERCVN.actual)
     `RAL_FIELD_CP_4(PCIEAERCVN, PCIEAERCVN.actual, 0,1,2,3)
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.actual)
     `RAL_FIELD_CP_12(CAP_PTR, CAP_PTR.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    PCIEAERCVN = new("PCIEAERCVN", "RO", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_VERSION_NEXT_PTR.PCIEAERCVN"});
    PCIEAERCVN.set_powerwell("vcccfn");
    PCIEAERCVN.set_rand_mode(0);
   PCIEAERCVN.set_reset_signame("hqm_csr_pf0_rst_n");
    PCIEAERCVN.set_logical_path("HQMID");
    void'(add_field( PCIEAERCVN ));

    CAP_PTR = new("CAP_PTR", "RO", 12, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_VERSION_NEXT_PTR.CAP_PTR"});
    CAP_PTR.set_powerwell("vcccfn");
    CAP_PTR.set_rand_mode(0);
   CAP_PTR.set_reset_signame("hqm_csr_pf0_rst_n");
    CAP_PTR.set_logical_path("HQMID");
    void'(add_field( CAP_PTR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_VERSION_NEXT_PTR_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_VERSION_NEXT_PTR_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RESERVED2;
  sla_ral_field DLPE;
  sla_ral_field SDES;
  sla_ral_field RESERVED1;
  sla_ral_field PTLPR;
  sla_ral_field FCPES;
  sla_ral_field CT;
  sla_ral_field CA;
  sla_ral_field EC;
  sla_ral_field RO;
  sla_ral_field MTLP;
  sla_ral_field ECRCC;
  sla_ral_field UR;
  sla_ral_field RESERVED3;
  sla_ral_field IEUNC;
  sla_ral_field RESERVED0;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED2, RESERVED2.desired)
     `RAL_FIELD_CP_4(RESERVED2, RESERVED2.desired, 0,1,2,3)
     `RAL_FIELD_CP(DLPE, DLPE.desired)
     `RAL_FIELD_CP_1(DLPE, DLPE.desired, 0)
     `RAL_FIELD_CP(SDES, SDES.desired)
     `RAL_FIELD_CP_1(SDES, SDES.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_6(RESERVED1, RESERVED1.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(PTLPR, PTLPR.desired)
     `RAL_FIELD_CP_1(PTLPR, PTLPR.desired, 0)
     `RAL_FIELD_CP(FCPES, FCPES.desired)
     `RAL_FIELD_CP_1(FCPES, FCPES.desired, 0)
     `RAL_FIELD_CP(CT, CT.desired)
     `RAL_FIELD_CP_1(CT, CT.desired, 0)
     `RAL_FIELD_CP(CA, CA.desired)
     `RAL_FIELD_CP_1(CA, CA.desired, 0)
     `RAL_FIELD_CP(EC, EC.desired)
     `RAL_FIELD_CP_1(EC, EC.desired, 0)
     `RAL_FIELD_CP(RO, RO.desired)
     `RAL_FIELD_CP_1(RO, RO.desired, 0)
     `RAL_FIELD_CP(MTLP, MTLP.desired)
     `RAL_FIELD_CP_1(MTLP, MTLP.desired, 0)
     `RAL_FIELD_CP(ECRCC, ECRCC.desired)
     `RAL_FIELD_CP_1(ECRCC, ECRCC.desired, 0)
     `RAL_FIELD_CP(UR, UR.desired)
     `RAL_FIELD_CP_1(UR, UR.desired, 0)
     `RAL_FIELD_CP(RESERVED3, RESERVED3.desired)
     `RAL_FIELD_CP_1(RESERVED3, RESERVED3.desired, 0)
     `RAL_FIELD_CP(IEUNC, IEUNC.desired)
     `RAL_FIELD_CP_1(IEUNC, IEUNC.desired, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.desired)
     `RAL_FIELD_CP_9(RESERVED0, RESERVED0.desired, 0,1,2,3,4,5,6,7,8)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED2, RESERVED2.actual)
     `RAL_FIELD_CP_4(RESERVED2, RESERVED2.actual, 0,1,2,3)
     `RAL_FIELD_CP(DLPE, DLPE.actual)
     `RAL_FIELD_CP_1(DLPE, DLPE.actual, 0)
     `RAL_FIELD_CP(SDES, SDES.actual)
     `RAL_FIELD_CP_1(SDES, SDES.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_6(RESERVED1, RESERVED1.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(PTLPR, PTLPR.actual)
     `RAL_FIELD_CP_1(PTLPR, PTLPR.actual, 0)
     `RAL_FIELD_CP(FCPES, FCPES.actual)
     `RAL_FIELD_CP_1(FCPES, FCPES.actual, 0)
     `RAL_FIELD_CP(CT, CT.actual)
     `RAL_FIELD_CP_1(CT, CT.actual, 0)
     `RAL_FIELD_CP(CA, CA.actual)
     `RAL_FIELD_CP_1(CA, CA.actual, 0)
     `RAL_FIELD_CP(EC, EC.actual)
     `RAL_FIELD_CP_1(EC, EC.actual, 0)
     `RAL_FIELD_CP(RO, RO.actual)
     `RAL_FIELD_CP_1(RO, RO.actual, 0)
     `RAL_FIELD_CP(MTLP, MTLP.actual)
     `RAL_FIELD_CP_1(MTLP, MTLP.actual, 0)
     `RAL_FIELD_CP(ECRCC, ECRCC.actual)
     `RAL_FIELD_CP_1(ECRCC, ECRCC.actual, 0)
     `RAL_FIELD_CP(UR, UR.actual)
     `RAL_FIELD_CP_1(UR, UR.actual, 0)
     `RAL_FIELD_CP(RESERVED3, RESERVED3.actual)
     `RAL_FIELD_CP_1(RESERVED3, RESERVED3.actual, 0)
     `RAL_FIELD_CP(IEUNC, IEUNC.actual)
     `RAL_FIELD_CP_1(IEUNC, IEUNC.actual, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.actual)
     `RAL_FIELD_CP_9(RESERVED0, RESERVED0.actual, 0,1,2,3,4,5,6,7,8)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RESERVED2 = new("RESERVED2", "RO", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.RESERVED2"});
    RESERVED2.set_powerwell("vcccfn");
    RESERVED2.set_rand_mode(0);
   RESERVED2.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED2.set_logical_path("HQMID");
    void'(add_field( RESERVED2 ));

    DLPE = new("DLPE", "RO", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.DLPE"});
    DLPE.set_powerwell("vcccfn");
    DLPE.set_rand_mode(0);
   DLPE.set_reset_signame("hqm_csr_pf0_rst_n");
    DLPE.set_logical_path("HQMID");
    void'(add_field( DLPE ));

    SDES = new("SDES", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.SDES"});
    SDES.set_powerwell("vcccfn");
    SDES.set_rand_mode(0);
   SDES.set_reset_signame("hqm_csr_pf0_rst_n");
    SDES.set_logical_path("HQMID");
    void'(add_field( SDES ));

    RESERVED1 = new("RESERVED1", "RO", 6, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

    PTLPR = new("PTLPR", "RW/1C/V/P", 1, 12, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.PTLPR"});
    PTLPR.set_powerwell("vcccfn");
    PTLPR.set_rand_mode(0);
   PTLPR.set_reset_signame("hqm_csr_pf0_rst_n");
    PTLPR.set_logical_path("HQMID");
    void'(add_field( PTLPR ));

    FCPES = new("FCPES", "RO", 1, 13, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.FCPES"});
    FCPES.set_powerwell("vcccfn");
    FCPES.set_rand_mode(0);
   FCPES.set_reset_signame("hqm_csr_pf0_rst_n");
    FCPES.set_logical_path("HQMID");
    void'(add_field( FCPES ));

    CT = new("CT", "RW/1C/V/P", 1, 14, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.CT"});
    CT.set_powerwell("vcccfn");
    CT.set_rand_mode(0);
   CT.set_reset_signame("hqm_csr_pf0_rst_n");
    CT.set_logical_path("HQMID");
    void'(add_field( CT ));

    CA = new("CA", "RW/1C/V/P", 1, 15, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.CA"});
    CA.set_powerwell("vcccfn");
    CA.set_rand_mode(0);
   CA.set_reset_signame("hqm_csr_pf0_rst_n");
    CA.set_logical_path("HQMID");
    void'(add_field( CA ));

    EC = new("EC", "RW/1C/V/P", 1, 16, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.EC"});
    EC.set_powerwell("vcccfn");
    EC.set_rand_mode(0);
   EC.set_reset_signame("hqm_csr_pf0_rst_n");
    EC.set_logical_path("HQMID");
    void'(add_field( EC ));

    RO = new("RO", "RO", 1, 17, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.RO"});
    RO.set_powerwell("vcccfn");
    RO.set_rand_mode(0);
   RO.set_reset_signame("hqm_csr_pf0_rst_n");
    RO.set_logical_path("HQMID");
    void'(add_field( RO ));

    MTLP = new("MTLP", "RW/1C/V/P", 1, 18, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.MTLP"});
    MTLP.set_powerwell("vcccfn");
    MTLP.set_rand_mode(0);
   MTLP.set_reset_signame("hqm_csr_pf0_rst_n");
    MTLP.set_logical_path("HQMID");
    void'(add_field( MTLP ));

    ECRCC = new("ECRCC", "RW/1C/V/P", 1, 19, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.ECRCC"});
    ECRCC.set_powerwell("vcccfn");
    ECRCC.set_rand_mode(0);
   ECRCC.set_reset_signame("hqm_csr_pf0_rst_n");
    ECRCC.set_logical_path("HQMID");
    void'(add_field( ECRCC ));

    UR = new("UR", "RW/1C/V/P", 1, 20, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.UR"});
    UR.set_powerwell("vcccfn");
    UR.set_rand_mode(0);
   UR.set_reset_signame("hqm_csr_pf0_rst_n");
    UR.set_logical_path("HQMID");
    void'(add_field( UR ));

    RESERVED3 = new("RESERVED3", "RO", 1, 21, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.RESERVED3"});
    RESERVED3.set_powerwell("vcccfn");
    RESERVED3.set_rand_mode(0);
   RESERVED3.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED3.set_logical_path("HQMID");
    void'(add_field( RESERVED3 ));

    IEUNC = new("IEUNC", "RW/1C/V/P", 1, 22, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.IEUNC"});
    IEUNC.set_powerwell("vcccfn");
    IEUNC.set_rand_mode(0);
   IEUNC.set_reset_signame("hqm_csr_pf0_rst_n");
    IEUNC.set_logical_path("HQMID");
    void'(add_field( IEUNC ));

    RESERVED0 = new("RESERVED0", "RO", 9, 23, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.RESERVED0"});
    RESERVED0.set_powerwell("vcccfn");
    RESERVED0.set_rand_mode(0);
   RESERVED0.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED0.set_logical_path("HQMID");
    void'(add_field( RESERVED0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_STATUS_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_STATUS_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_MASK_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RESERVED2;
  sla_ral_field DLPE;
  sla_ral_field SDES;
  sla_ral_field RESERVED1;
  sla_ral_field PTLPR;
  sla_ral_field FCPES;
  sla_ral_field CT;
  sla_ral_field CA;
  sla_ral_field EC;
  sla_ral_field RO;
  sla_ral_field MTLP;
  sla_ral_field ECRCC;
  sla_ral_field UR;
  sla_ral_field RESERVED3;
  sla_ral_field IEUNC;
  sla_ral_field RESERVED0;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_MASK_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED2, RESERVED2.desired)
     `RAL_FIELD_CP_4(RESERVED2, RESERVED2.desired, 0,1,2,3)
     `RAL_FIELD_CP(DLPE, DLPE.desired)
     `RAL_FIELD_CP_1(DLPE, DLPE.desired, 0)
     `RAL_FIELD_CP(SDES, SDES.desired)
     `RAL_FIELD_CP_1(SDES, SDES.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_6(RESERVED1, RESERVED1.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(PTLPR, PTLPR.desired)
     `RAL_FIELD_CP_1(PTLPR, PTLPR.desired, 0)
     `RAL_FIELD_CP(FCPES, FCPES.desired)
     `RAL_FIELD_CP_1(FCPES, FCPES.desired, 0)
     `RAL_FIELD_CP(CT, CT.desired)
     `RAL_FIELD_CP_1(CT, CT.desired, 0)
     `RAL_FIELD_CP(CA, CA.desired)
     `RAL_FIELD_CP_1(CA, CA.desired, 0)
     `RAL_FIELD_CP(EC, EC.desired)
     `RAL_FIELD_CP_1(EC, EC.desired, 0)
     `RAL_FIELD_CP(RO, RO.desired)
     `RAL_FIELD_CP_1(RO, RO.desired, 0)
     `RAL_FIELD_CP(MTLP, MTLP.desired)
     `RAL_FIELD_CP_1(MTLP, MTLP.desired, 0)
     `RAL_FIELD_CP(ECRCC, ECRCC.desired)
     `RAL_FIELD_CP_1(ECRCC, ECRCC.desired, 0)
     `RAL_FIELD_CP(UR, UR.desired)
     `RAL_FIELD_CP_1(UR, UR.desired, 0)
     `RAL_FIELD_CP(RESERVED3, RESERVED3.desired)
     `RAL_FIELD_CP_1(RESERVED3, RESERVED3.desired, 0)
     `RAL_FIELD_CP(IEUNC, IEUNC.desired)
     `RAL_FIELD_CP_1(IEUNC, IEUNC.desired, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.desired)
     `RAL_FIELD_CP_9(RESERVED0, RESERVED0.desired, 0,1,2,3,4,5,6,7,8)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED2, RESERVED2.actual)
     `RAL_FIELD_CP_4(RESERVED2, RESERVED2.actual, 0,1,2,3)
     `RAL_FIELD_CP(DLPE, DLPE.actual)
     `RAL_FIELD_CP_1(DLPE, DLPE.actual, 0)
     `RAL_FIELD_CP(SDES, SDES.actual)
     `RAL_FIELD_CP_1(SDES, SDES.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_6(RESERVED1, RESERVED1.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(PTLPR, PTLPR.actual)
     `RAL_FIELD_CP_1(PTLPR, PTLPR.actual, 0)
     `RAL_FIELD_CP(FCPES, FCPES.actual)
     `RAL_FIELD_CP_1(FCPES, FCPES.actual, 0)
     `RAL_FIELD_CP(CT, CT.actual)
     `RAL_FIELD_CP_1(CT, CT.actual, 0)
     `RAL_FIELD_CP(CA, CA.actual)
     `RAL_FIELD_CP_1(CA, CA.actual, 0)
     `RAL_FIELD_CP(EC, EC.actual)
     `RAL_FIELD_CP_1(EC, EC.actual, 0)
     `RAL_FIELD_CP(RO, RO.actual)
     `RAL_FIELD_CP_1(RO, RO.actual, 0)
     `RAL_FIELD_CP(MTLP, MTLP.actual)
     `RAL_FIELD_CP_1(MTLP, MTLP.actual, 0)
     `RAL_FIELD_CP(ECRCC, ECRCC.actual)
     `RAL_FIELD_CP_1(ECRCC, ECRCC.actual, 0)
     `RAL_FIELD_CP(UR, UR.actual)
     `RAL_FIELD_CP_1(UR, UR.actual, 0)
     `RAL_FIELD_CP(RESERVED3, RESERVED3.actual)
     `RAL_FIELD_CP_1(RESERVED3, RESERVED3.actual, 0)
     `RAL_FIELD_CP(IEUNC, IEUNC.actual)
     `RAL_FIELD_CP_1(IEUNC, IEUNC.actual, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.actual)
     `RAL_FIELD_CP_9(RESERVED0, RESERVED0.actual, 0,1,2,3,4,5,6,7,8)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RESERVED2 = new("RESERVED2", "RO", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.RESERVED2"});
    RESERVED2.set_powerwell("vcccfn");
    RESERVED2.set_rand_mode(0);
   RESERVED2.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED2.set_logical_path("HQMID");
    void'(add_field( RESERVED2 ));

    DLPE = new("DLPE", "RW/P", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.DLPE"});
    DLPE.set_powerwell("vcccfn");
    DLPE.set_rand_mode(0);
   DLPE.set_reset_signame("hqm_csr_pf0_rst_n");
    DLPE.set_logical_path("HQMID");
    void'(add_field( DLPE ));

    SDES = new("SDES", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.SDES"});
    SDES.set_powerwell("vcccfn");
    SDES.set_rand_mode(0);
   SDES.set_reset_signame("hqm_csr_pf0_rst_n");
    SDES.set_logical_path("HQMID");
    void'(add_field( SDES ));

    RESERVED1 = new("RESERVED1", "RO", 6, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

    PTLPR = new("PTLPR", "RW/P", 1, 12, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.PTLPR"});
    PTLPR.set_powerwell("vcccfn");
    PTLPR.set_rand_mode(0);
   PTLPR.set_reset_signame("hqm_csr_pf0_rst_n");
    PTLPR.set_logical_path("HQMID");
    void'(add_field( PTLPR ));

    FCPES = new("FCPES", "RO", 1, 13, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.FCPES"});
    FCPES.set_powerwell("vcccfn");
    FCPES.set_rand_mode(0);
   FCPES.set_reset_signame("hqm_csr_pf0_rst_n");
    FCPES.set_logical_path("HQMID");
    void'(add_field( FCPES ));

    CT = new("CT", "RW/P", 1, 14, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.CT"});
    CT.set_powerwell("vcccfn");
    CT.set_rand_mode(0);
   CT.set_reset_signame("hqm_csr_pf0_rst_n");
    CT.set_logical_path("HQMID");
    void'(add_field( CT ));

    CA = new("CA", "RW/P", 1, 15, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.CA"});
    CA.set_powerwell("vcccfn");
    CA.set_rand_mode(0);
   CA.set_reset_signame("hqm_csr_pf0_rst_n");
    CA.set_logical_path("HQMID");
    void'(add_field( CA ));

    EC = new("EC", "RW/P", 1, 16, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.EC"});
    EC.set_powerwell("vcccfn");
    EC.set_rand_mode(0);
   EC.set_reset_signame("hqm_csr_pf0_rst_n");
    EC.set_logical_path("HQMID");
    void'(add_field( EC ));

    RO = new("RO", "RO", 1, 17, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.RO"});
    RO.set_powerwell("vcccfn");
    RO.set_rand_mode(0);
   RO.set_reset_signame("hqm_csr_pf0_rst_n");
    RO.set_logical_path("HQMID");
    void'(add_field( RO ));

    MTLP = new("MTLP", "RW/P", 1, 18, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.MTLP"});
    MTLP.set_powerwell("vcccfn");
    MTLP.set_rand_mode(0);
   MTLP.set_reset_signame("hqm_csr_pf0_rst_n");
    MTLP.set_logical_path("HQMID");
    void'(add_field( MTLP ));

    ECRCC = new("ECRCC", "RW/P", 1, 19, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.ECRCC"});
    ECRCC.set_powerwell("vcccfn");
    ECRCC.set_rand_mode(0);
   ECRCC.set_reset_signame("hqm_csr_pf0_rst_n");
    ECRCC.set_logical_path("HQMID");
    void'(add_field( ECRCC ));

    UR = new("UR", "RW/P", 1, 20, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.UR"});
    UR.set_powerwell("vcccfn");
    UR.set_rand_mode(0);
   UR.set_reset_signame("hqm_csr_pf0_rst_n");
    UR.set_logical_path("HQMID");
    void'(add_field( UR ));

    RESERVED3 = new("RESERVED3", "RO", 1, 21, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.RESERVED3"});
    RESERVED3.set_powerwell("vcccfn");
    RESERVED3.set_rand_mode(0);
   RESERVED3.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED3.set_logical_path("HQMID");
    void'(add_field( RESERVED3 ));

    IEUNC = new("IEUNC", "RW/P", 1, 22, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.IEUNC"});
    IEUNC.set_powerwell("vcccfn");
    IEUNC.set_rand_mode(0);
   IEUNC.set_reset_signame("hqm_csr_pf0_rst_n");
    IEUNC.set_logical_path("HQMID");
    void'(add_field( IEUNC ));

    RESERVED0 = new("RESERVED0", "RO", 9, 23, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.RESERVED0"});
    RESERVED0.set_powerwell("vcccfn");
    RESERVED0.set_rand_mode(0);
   RESERVED0.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED0.set_logical_path("HQMID");
    void'(add_field( RESERVED0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_MASK_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_MASK_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_SEV_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RESERVED2;
  sla_ral_field DLPE;
  sla_ral_field SDES;
  sla_ral_field RESERVED1;
  sla_ral_field PTLPR;
  sla_ral_field FCPES;
  sla_ral_field CT;
  sla_ral_field CA;
  sla_ral_field EC;
  sla_ral_field RO;
  sla_ral_field MTLP;
  sla_ral_field ECRCC;
  sla_ral_field UR;
  sla_ral_field RESERVED3;
  sla_ral_field IEUNC;
  sla_ral_field RESERVED0;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_SEV_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED2, RESERVED2.desired)
     `RAL_FIELD_CP_4(RESERVED2, RESERVED2.desired, 0,1,2,3)
     `RAL_FIELD_CP(DLPE, DLPE.desired)
     `RAL_FIELD_CP_1(DLPE, DLPE.desired, 0)
     `RAL_FIELD_CP(SDES, SDES.desired)
     `RAL_FIELD_CP_1(SDES, SDES.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_6(RESERVED1, RESERVED1.desired, 0,1,2,3,4,5)
     `RAL_FIELD_CP(PTLPR, PTLPR.desired)
     `RAL_FIELD_CP_1(PTLPR, PTLPR.desired, 0)
     `RAL_FIELD_CP(FCPES, FCPES.desired)
     `RAL_FIELD_CP_1(FCPES, FCPES.desired, 0)
     `RAL_FIELD_CP(CT, CT.desired)
     `RAL_FIELD_CP_1(CT, CT.desired, 0)
     `RAL_FIELD_CP(CA, CA.desired)
     `RAL_FIELD_CP_1(CA, CA.desired, 0)
     `RAL_FIELD_CP(EC, EC.desired)
     `RAL_FIELD_CP_1(EC, EC.desired, 0)
     `RAL_FIELD_CP(RO, RO.desired)
     `RAL_FIELD_CP_1(RO, RO.desired, 0)
     `RAL_FIELD_CP(MTLP, MTLP.desired)
     `RAL_FIELD_CP_1(MTLP, MTLP.desired, 0)
     `RAL_FIELD_CP(ECRCC, ECRCC.desired)
     `RAL_FIELD_CP_1(ECRCC, ECRCC.desired, 0)
     `RAL_FIELD_CP(UR, UR.desired)
     `RAL_FIELD_CP_1(UR, UR.desired, 0)
     `RAL_FIELD_CP(RESERVED3, RESERVED3.desired)
     `RAL_FIELD_CP_1(RESERVED3, RESERVED3.desired, 0)
     `RAL_FIELD_CP(IEUNC, IEUNC.desired)
     `RAL_FIELD_CP_1(IEUNC, IEUNC.desired, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.desired)
     `RAL_FIELD_CP_9(RESERVED0, RESERVED0.desired, 0,1,2,3,4,5,6,7,8)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RESERVED2, RESERVED2.actual)
     `RAL_FIELD_CP_4(RESERVED2, RESERVED2.actual, 0,1,2,3)
     `RAL_FIELD_CP(DLPE, DLPE.actual)
     `RAL_FIELD_CP_1(DLPE, DLPE.actual, 0)
     `RAL_FIELD_CP(SDES, SDES.actual)
     `RAL_FIELD_CP_1(SDES, SDES.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_6(RESERVED1, RESERVED1.actual, 0,1,2,3,4,5)
     `RAL_FIELD_CP(PTLPR, PTLPR.actual)
     `RAL_FIELD_CP_1(PTLPR, PTLPR.actual, 0)
     `RAL_FIELD_CP(FCPES, FCPES.actual)
     `RAL_FIELD_CP_1(FCPES, FCPES.actual, 0)
     `RAL_FIELD_CP(CT, CT.actual)
     `RAL_FIELD_CP_1(CT, CT.actual, 0)
     `RAL_FIELD_CP(CA, CA.actual)
     `RAL_FIELD_CP_1(CA, CA.actual, 0)
     `RAL_FIELD_CP(EC, EC.actual)
     `RAL_FIELD_CP_1(EC, EC.actual, 0)
     `RAL_FIELD_CP(RO, RO.actual)
     `RAL_FIELD_CP_1(RO, RO.actual, 0)
     `RAL_FIELD_CP(MTLP, MTLP.actual)
     `RAL_FIELD_CP_1(MTLP, MTLP.actual, 0)
     `RAL_FIELD_CP(ECRCC, ECRCC.actual)
     `RAL_FIELD_CP_1(ECRCC, ECRCC.actual, 0)
     `RAL_FIELD_CP(UR, UR.actual)
     `RAL_FIELD_CP_1(UR, UR.actual, 0)
     `RAL_FIELD_CP(RESERVED3, RESERVED3.actual)
     `RAL_FIELD_CP_1(RESERVED3, RESERVED3.actual, 0)
     `RAL_FIELD_CP(IEUNC, IEUNC.actual)
     `RAL_FIELD_CP_1(IEUNC, IEUNC.actual, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.actual)
     `RAL_FIELD_CP_9(RESERVED0, RESERVED0.actual, 0,1,2,3,4,5,6,7,8)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RESERVED2 = new("RESERVED2", "RO", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.RESERVED2"});
    RESERVED2.set_powerwell("vcccfn");
    RESERVED2.set_rand_mode(0);
   RESERVED2.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED2.set_logical_path("HQMID");
    void'(add_field( RESERVED2 ));

    DLPE = new("DLPE", "RW/P", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.DLPE"});
    DLPE.set_powerwell("vcccfn");
    DLPE.set_rand_mode(0);
   DLPE.set_reset_signame("hqm_csr_pf0_rst_n");
    DLPE.set_logical_path("HQMID");
    void'(add_field( DLPE ));

    SDES = new("SDES", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.SDES"});
    SDES.set_powerwell("vcccfn");
    SDES.set_rand_mode(0);
   SDES.set_reset_signame("hqm_csr_pf0_rst_n");
    SDES.set_logical_path("HQMID");
    void'(add_field( SDES ));

    RESERVED1 = new("RESERVED1", "RO", 6, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

    PTLPR = new("PTLPR", "RW/P", 1, 12, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.PTLPR"});
    PTLPR.set_powerwell("vcccfn");
    PTLPR.set_rand_mode(0);
   PTLPR.set_reset_signame("hqm_csr_pf0_rst_n");
    PTLPR.set_logical_path("HQMID");
    void'(add_field( PTLPR ));

    FCPES = new("FCPES", "RO", 1, 13, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.FCPES"});
    FCPES.set_powerwell("vcccfn");
    FCPES.set_rand_mode(0);
   FCPES.set_reset_signame("hqm_csr_pf0_rst_n");
    FCPES.set_logical_path("HQMID");
    void'(add_field( FCPES ));

    CT = new("CT", "RW/P", 1, 14, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.CT"});
    CT.set_powerwell("vcccfn");
    CT.set_rand_mode(0);
   CT.set_reset_signame("hqm_csr_pf0_rst_n");
    CT.set_logical_path("HQMID");
    void'(add_field( CT ));

    CA = new("CA", "RW/P", 1, 15, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.CA"});
    CA.set_powerwell("vcccfn");
    CA.set_rand_mode(0);
   CA.set_reset_signame("hqm_csr_pf0_rst_n");
    CA.set_logical_path("HQMID");
    void'(add_field( CA ));

    EC = new("EC", "RW/P", 1, 16, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.EC"});
    EC.set_powerwell("vcccfn");
    EC.set_rand_mode(0);
   EC.set_reset_signame("hqm_csr_pf0_rst_n");
    EC.set_logical_path("HQMID");
    void'(add_field( EC ));

    RO = new("RO", "RW/P", 1, 17, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.RO"});
    RO.set_powerwell("vcccfn");
    RO.set_rand_mode(0);
   RO.set_reset_signame("hqm_csr_pf0_rst_n");
    RO.set_logical_path("HQMID");
    void'(add_field( RO ));

    MTLP = new("MTLP", "RW/P", 1, 18, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.MTLP"});
    MTLP.set_powerwell("vcccfn");
    MTLP.set_rand_mode(0);
   MTLP.set_reset_signame("hqm_csr_pf0_rst_n");
    MTLP.set_logical_path("HQMID");
    void'(add_field( MTLP ));

    ECRCC = new("ECRCC", "RW/P", 1, 19, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.ECRCC"});
    ECRCC.set_powerwell("vcccfn");
    ECRCC.set_rand_mode(0);
   ECRCC.set_reset_signame("hqm_csr_pf0_rst_n");
    ECRCC.set_logical_path("HQMID");
    void'(add_field( ECRCC ));

    UR = new("UR", "RW/P", 1, 20, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.UR"});
    UR.set_powerwell("vcccfn");
    UR.set_rand_mode(0);
   UR.set_reset_signame("hqm_csr_pf0_rst_n");
    UR.set_logical_path("HQMID");
    void'(add_field( UR ));

    RESERVED3 = new("RESERVED3", "RO", 1, 21, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.RESERVED3"});
    RESERVED3.set_powerwell("vcccfn");
    RESERVED3.set_rand_mode(0);
   RESERVED3.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED3.set_logical_path("HQMID");
    void'(add_field( RESERVED3 ));

    IEUNC = new("IEUNC", "RW/P", 1, 22, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.IEUNC"});
    IEUNC.set_powerwell("vcccfn");
    IEUNC.set_rand_mode(0);
   IEUNC.set_reset_signame("hqm_csr_pf0_rst_n");
    IEUNC.set_logical_path("HQMID");
    void'(add_field( IEUNC ));

    RESERVED0 = new("RESERVED0", "RO", 9, 23, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.RESERVED0"});
    RESERVED0.set_powerwell("vcccfn");
    RESERVED0.set_rand_mode(0);
   RESERVED0.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED0.set_logical_path("HQMID");
    void'(add_field( RESERVED0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_SEV_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_SEV_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RES;
  sla_ral_field RESERVED2;
  sla_ral_field DLPE;
  sla_ral_field BDLLPS;
  sla_ral_field RNRS;
  sla_ral_field RESERVED1;
  sla_ral_field RTTS;
  sla_ral_field ANFES;
  sla_ral_field IECOR;
  sla_ral_field RESERVED0;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RES, RES.desired)
     `RAL_FIELD_CP_1(RES, RES.desired, 0)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.desired)
     `RAL_FIELD_CP_5(RESERVED2, RESERVED2.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(DLPE, DLPE.desired)
     `RAL_FIELD_CP_1(DLPE, DLPE.desired, 0)
     `RAL_FIELD_CP(BDLLPS, BDLLPS.desired)
     `RAL_FIELD_CP_1(BDLLPS, BDLLPS.desired, 0)
     `RAL_FIELD_CP(RNRS, RNRS.desired)
     `RAL_FIELD_CP_1(RNRS, RNRS.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_3(RESERVED1, RESERVED1.desired, 0,1,2)
     `RAL_FIELD_CP(RTTS, RTTS.desired)
     `RAL_FIELD_CP_1(RTTS, RTTS.desired, 0)
     `RAL_FIELD_CP(ANFES, ANFES.desired)
     `RAL_FIELD_CP_1(ANFES, ANFES.desired, 0)
     `RAL_FIELD_CP(IECOR, IECOR.desired)
     `RAL_FIELD_CP_1(IECOR, IECOR.desired, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.desired)
     `RAL_FIELD_CP_16(RESERVED0, RESERVED0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_1(RESERVED0, RESERVED0.desired, 16)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RES, RES.actual)
     `RAL_FIELD_CP_1(RES, RES.actual, 0)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.actual)
     `RAL_FIELD_CP_5(RESERVED2, RESERVED2.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(DLPE, DLPE.actual)
     `RAL_FIELD_CP_1(DLPE, DLPE.actual, 0)
     `RAL_FIELD_CP(BDLLPS, BDLLPS.actual)
     `RAL_FIELD_CP_1(BDLLPS, BDLLPS.actual, 0)
     `RAL_FIELD_CP(RNRS, RNRS.actual)
     `RAL_FIELD_CP_1(RNRS, RNRS.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_3(RESERVED1, RESERVED1.actual, 0,1,2)
     `RAL_FIELD_CP(RTTS, RTTS.actual)
     `RAL_FIELD_CP_1(RTTS, RTTS.actual, 0)
     `RAL_FIELD_CP(ANFES, ANFES.actual)
     `RAL_FIELD_CP_1(ANFES, ANFES.actual, 0)
     `RAL_FIELD_CP(IECOR, IECOR.actual)
     `RAL_FIELD_CP_1(IECOR, IECOR.actual, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.actual)
     `RAL_FIELD_CP_16(RESERVED0, RESERVED0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_1(RESERVED0, RESERVED0.actual, 16)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RES = new("RES", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RES"});
    RES.set_powerwell("vcccfn");
    RES.set_rand_mode(0);
   RES.set_reset_signame("hqm_csr_pf0_rst_n");
    RES.set_logical_path("HQMID");
    void'(add_field( RES ));

    RESERVED2 = new("RESERVED2", "RO", 5, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RESERVED2"});
    RESERVED2.set_powerwell("vcccfn");
    RESERVED2.set_rand_mode(0);
   RESERVED2.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED2.set_logical_path("HQMID");
    void'(add_field( RESERVED2 ));

    DLPE = new("DLPE", "RO", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.DLPE"});
    DLPE.set_powerwell("vcccfn");
    DLPE.set_rand_mode(0);
   DLPE.set_reset_signame("hqm_csr_pf0_rst_n");
    DLPE.set_logical_path("HQMID");
    void'(add_field( DLPE ));

    BDLLPS = new("BDLLPS", "RO", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.BDLLPS"});
    BDLLPS.set_powerwell("vcccfn");
    BDLLPS.set_rand_mode(0);
   BDLLPS.set_reset_signame("hqm_csr_pf0_rst_n");
    BDLLPS.set_logical_path("HQMID");
    void'(add_field( BDLLPS ));

    RNRS = new("RNRS", "RO", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RNRS"});
    RNRS.set_powerwell("vcccfn");
    RNRS.set_rand_mode(0);
   RNRS.set_reset_signame("hqm_csr_pf0_rst_n");
    RNRS.set_logical_path("HQMID");
    void'(add_field( RNRS ));

    RESERVED1 = new("RESERVED1", "RO", 3, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

    RTTS = new("RTTS", "RO", 1, 12, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RTTS"});
    RTTS.set_powerwell("vcccfn");
    RTTS.set_rand_mode(0);
   RTTS.set_reset_signame("hqm_csr_pf0_rst_n");
    RTTS.set_logical_path("HQMID");
    void'(add_field( RTTS ));

    ANFES = new("ANFES", "RW/1C/V/P", 1, 13, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.ANFES"});
    ANFES.set_powerwell("vcccfn");
    ANFES.set_rand_mode(0);
   ANFES.set_reset_signame("hqm_csr_pf0_rst_n");
    ANFES.set_logical_path("HQMID");
    void'(add_field( ANFES ));

    IECOR = new("IECOR", "RW/1C/V/P", 1, 14, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.IECOR"});
    IECOR.set_powerwell("vcccfn");
    IECOR.set_rand_mode(0);
   IECOR.set_reset_signame("hqm_csr_pf0_rst_n");
    IECOR.set_logical_path("HQMID");
    void'(add_field( IECOR ));

    RESERVED0 = new("RESERVED0", "RO", 17, 15, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RESERVED0"});
    RESERVED0.set_powerwell("vcccfn");
    RESERVED0.set_rand_mode(0);
   RESERVED0.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED0.set_logical_path("HQMID");
    void'(add_field( RESERVED0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_STATUS_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_STATUS_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_MASK_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field RES;
  sla_ral_field RESERVED2;
  sla_ral_field DLPE;
  sla_ral_field BDLLPS;
  sla_ral_field RNRS;
  sla_ral_field RESERVED1;
  sla_ral_field RTTS;
  sla_ral_field ANFES;
  sla_ral_field IECOR;
  sla_ral_field RESERVED0;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_MASK_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RES, RES.desired)
     `RAL_FIELD_CP_1(RES, RES.desired, 0)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.desired)
     `RAL_FIELD_CP_5(RESERVED2, RESERVED2.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(DLPE, DLPE.desired)
     `RAL_FIELD_CP_1(DLPE, DLPE.desired, 0)
     `RAL_FIELD_CP(BDLLPS, BDLLPS.desired)
     `RAL_FIELD_CP_1(BDLLPS, BDLLPS.desired, 0)
     `RAL_FIELD_CP(RNRS, RNRS.desired)
     `RAL_FIELD_CP_1(RNRS, RNRS.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_3(RESERVED1, RESERVED1.desired, 0,1,2)
     `RAL_FIELD_CP(RTTS, RTTS.desired)
     `RAL_FIELD_CP_1(RTTS, RTTS.desired, 0)
     `RAL_FIELD_CP(ANFES, ANFES.desired)
     `RAL_FIELD_CP_1(ANFES, ANFES.desired, 0)
     `RAL_FIELD_CP(IECOR, IECOR.desired)
     `RAL_FIELD_CP_1(IECOR, IECOR.desired, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.desired)
     `RAL_FIELD_CP_16(RESERVED0, RESERVED0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_1(RESERVED0, RESERVED0.desired, 16)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(RES, RES.actual)
     `RAL_FIELD_CP_1(RES, RES.actual, 0)
     `RAL_FIELD_CP(RESERVED2, RESERVED2.actual)
     `RAL_FIELD_CP_5(RESERVED2, RESERVED2.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(DLPE, DLPE.actual)
     `RAL_FIELD_CP_1(DLPE, DLPE.actual, 0)
     `RAL_FIELD_CP(BDLLPS, BDLLPS.actual)
     `RAL_FIELD_CP_1(BDLLPS, BDLLPS.actual, 0)
     `RAL_FIELD_CP(RNRS, RNRS.actual)
     `RAL_FIELD_CP_1(RNRS, RNRS.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_3(RESERVED1, RESERVED1.actual, 0,1,2)
     `RAL_FIELD_CP(RTTS, RTTS.actual)
     `RAL_FIELD_CP_1(RTTS, RTTS.actual, 0)
     `RAL_FIELD_CP(ANFES, ANFES.actual)
     `RAL_FIELD_CP_1(ANFES, ANFES.actual, 0)
     `RAL_FIELD_CP(IECOR, IECOR.actual)
     `RAL_FIELD_CP_1(IECOR, IECOR.actual, 0)
     `RAL_FIELD_CP(RESERVED0, RESERVED0.actual)
     `RAL_FIELD_CP_16(RESERVED0, RESERVED0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_1(RESERVED0, RESERVED0.actual, 16)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    RES = new("RES", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RES"});
    RES.set_powerwell("vcccfn");
    RES.set_rand_mode(0);
   RES.set_reset_signame("hqm_csr_pf0_rst_n");
    RES.set_logical_path("HQMID");
    void'(add_field( RES ));

    RESERVED2 = new("RESERVED2", "RO", 5, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RESERVED2"});
    RESERVED2.set_powerwell("vcccfn");
    RESERVED2.set_rand_mode(0);
   RESERVED2.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED2.set_logical_path("HQMID");
    void'(add_field( RESERVED2 ));

    DLPE = new("DLPE", "RW/P", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.DLPE"});
    DLPE.set_powerwell("vcccfn");
    DLPE.set_rand_mode(0);
   DLPE.set_reset_signame("hqm_csr_pf0_rst_n");
    DLPE.set_logical_path("HQMID");
    void'(add_field( DLPE ));

    BDLLPS = new("BDLLPS", "RW/P", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.BDLLPS"});
    BDLLPS.set_powerwell("vcccfn");
    BDLLPS.set_rand_mode(0);
   BDLLPS.set_reset_signame("hqm_csr_pf0_rst_n");
    BDLLPS.set_logical_path("HQMID");
    void'(add_field( BDLLPS ));

    RNRS = new("RNRS", "RW/P", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RNRS"});
    RNRS.set_powerwell("vcccfn");
    RNRS.set_rand_mode(0);
   RNRS.set_reset_signame("hqm_csr_pf0_rst_n");
    RNRS.set_logical_path("HQMID");
    void'(add_field( RNRS ));

    RESERVED1 = new("RESERVED1", "RO", 3, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

    RTTS = new("RTTS", "RO", 1, 12, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RTTS"});
    RTTS.set_powerwell("vcccfn");
    RTTS.set_rand_mode(0);
   RTTS.set_reset_signame("hqm_csr_pf0_rst_n");
    RTTS.set_logical_path("HQMID");
    void'(add_field( RTTS ));

    ANFES = new("ANFES", "RW/P", 1, 13, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.ANFES"});
    ANFES.set_powerwell("vcccfn");
    ANFES.set_rand_mode(0);
   ANFES.set_reset_signame("hqm_csr_pf0_rst_n");
    ANFES.set_logical_path("HQMID");
    void'(add_field( ANFES ));

    IECOR = new("IECOR", "RW/P", 1, 14, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.IECOR"});
    IECOR.set_powerwell("vcccfn");
    IECOR.set_rand_mode(0);
   IECOR.set_reset_signame("hqm_csr_pf0_rst_n");
    IECOR.set_logical_path("HQMID");
    void'(add_field( IECOR ));

    RESERVED0 = new("RESERVED0", "RO", 17, 15, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RESERVED0"});
    RESERVED0.set_powerwell("vcccfn");
    RESERVED0.set_rand_mode(0);
   RESERVED0.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED0.set_logical_path("HQMID");
    void'(add_field( RESERVED0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_MASK_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_MASK_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TFEP;
  sla_ral_field ECRCGC;
  sla_ral_field ECRCGE;
  sla_ral_field ECRCCC;
  sla_ral_field ECRCCE;
  sla_ral_field Multhdrrc;
  sla_ral_field RESERVED;
  sla_ral_field TLPPFLOGP;
  sla_ral_field RESERVED1;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TFEP, TFEP.desired)
     `RAL_FIELD_CP_5(TFEP, TFEP.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(ECRCGC, ECRCGC.desired)
     `RAL_FIELD_CP_1(ECRCGC, ECRCGC.desired, 0)
     `RAL_FIELD_CP(ECRCGE, ECRCGE.desired)
     `RAL_FIELD_CP_1(ECRCGE, ECRCGE.desired, 0)
     `RAL_FIELD_CP(ECRCCC, ECRCCC.desired)
     `RAL_FIELD_CP_1(ECRCCC, ECRCCC.desired, 0)
     `RAL_FIELD_CP(ECRCCE, ECRCCE.desired)
     `RAL_FIELD_CP_1(ECRCCE, ECRCCE.desired, 0)
     `RAL_FIELD_CP(Multhdrrc, Multhdrrc.desired)
     `RAL_FIELD_CP_1(Multhdrrc, Multhdrrc.desired, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.desired)
     `RAL_FIELD_CP_1(RESERVED, RESERVED.desired, 0)
     `RAL_FIELD_CP(TLPPFLOGP, TLPPFLOGP.desired)
     `RAL_FIELD_CP_1(TLPPFLOGP, TLPPFLOGP.desired, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.desired)
     `RAL_FIELD_CP_16(RESERVED1, RESERVED1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_4(RESERVED1, RESERVED1.desired, 16,17,18,19)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TFEP, TFEP.actual)
     `RAL_FIELD_CP_5(TFEP, TFEP.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(ECRCGC, ECRCGC.actual)
     `RAL_FIELD_CP_1(ECRCGC, ECRCGC.actual, 0)
     `RAL_FIELD_CP(ECRCGE, ECRCGE.actual)
     `RAL_FIELD_CP_1(ECRCGE, ECRCGE.actual, 0)
     `RAL_FIELD_CP(ECRCCC, ECRCCC.actual)
     `RAL_FIELD_CP_1(ECRCCC, ECRCCC.actual, 0)
     `RAL_FIELD_CP(ECRCCE, ECRCCE.actual)
     `RAL_FIELD_CP_1(ECRCCE, ECRCCE.actual, 0)
     `RAL_FIELD_CP(Multhdrrc, Multhdrrc.actual)
     `RAL_FIELD_CP_1(Multhdrrc, Multhdrrc.actual, 0)
     `RAL_FIELD_CP(RESERVED, RESERVED.actual)
     `RAL_FIELD_CP_1(RESERVED, RESERVED.actual, 0)
     `RAL_FIELD_CP(TLPPFLOGP, TLPPFLOGP.actual)
     `RAL_FIELD_CP_1(TLPPFLOGP, TLPPFLOGP.actual, 0)
     `RAL_FIELD_CP(RESERVED1, RESERVED1.actual)
     `RAL_FIELD_CP_16(RESERVED1, RESERVED1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_4(RESERVED1, RESERVED1.actual, 16,17,18,19)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TFEP = new("TFEP", "RO/V/P", 5, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.TFEP"});
    TFEP.set_powerwell("vcccfn");
    TFEP.set_rand_mode(0);
   TFEP.set_reset_signame("hqm_csr_pf0_rst_n");
    TFEP.set_logical_path("HQMID");
    void'(add_field( TFEP ));

    ECRCGC = new("ECRCGC", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.ECRCGC"});
    ECRCGC.set_powerwell("vcccfn");
    ECRCGC.set_rand_mode(0);
   ECRCGC.set_reset_signame("hqm_csr_pf0_rst_n");
    ECRCGC.set_logical_path("HQMID");
    void'(add_field( ECRCGC ));

    ECRCGE = new("ECRCGE", "RO", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.ECRCGE"});
    ECRCGE.set_powerwell("vcccfn");
    ECRCGE.set_rand_mode(0);
   ECRCGE.set_reset_signame("hqm_csr_pf0_rst_n");
    ECRCGE.set_logical_path("HQMID");
    void'(add_field( ECRCGE ));

    ECRCCC = new("ECRCCC", "RO", 1, 7, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.ECRCCC"});
    ECRCCC.set_powerwell("vcccfn");
    ECRCCC.set_rand_mode(0);
   ECRCCC.set_reset_signame("hqm_csr_pf0_rst_n");
    ECRCCC.set_logical_path("HQMID");
    void'(add_field( ECRCCC ));

    ECRCCE = new("ECRCCE", "RO", 1, 8, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.ECRCCE"});
    ECRCCE.set_powerwell("vcccfn");
    ECRCCE.set_rand_mode(0);
   ECRCCE.set_reset_signame("hqm_csr_pf0_rst_n");
    ECRCCE.set_logical_path("HQMID");
    void'(add_field( ECRCCE ));

    Multhdrrc = new("Multhdrrc", "RO", 1, 9, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.Multhdrrc"});
    Multhdrrc.set_powerwell("vcccfn");
    Multhdrrc.set_rand_mode(0);
   Multhdrrc.set_reset_signame("hqm_csr_pf0_rst_n");
    Multhdrrc.set_logical_path("HQMID");
    void'(add_field( Multhdrrc ));

    RESERVED = new("RESERVED", "RO", 1, 10, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.RESERVED"});
    RESERVED.set_powerwell("vcccfn");
    RESERVED.set_rand_mode(0);
   RESERVED.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED.set_logical_path("HQMID");
    void'(add_field( RESERVED ));

    TLPPFLOGP = new("TLPPFLOGP", "RO/V/P", 1, 11, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.TLPPFLOGP"});
    TLPPFLOGP.set_powerwell("vcccfn");
    TLPPFLOGP.set_rand_mode(0);
   TLPPFLOGP.set_reset_signame("hqm_csr_pf0_rst_n");
    TLPPFLOGP.set_logical_path("HQMID");
    void'(add_field( TLPPFLOGP ));

    RESERVED1 = new("RESERVED1", "RO", 20, 12, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.RESERVED1"});
    RESERVED1.set_powerwell("vcccfn");
    RESERVED1.set_rand_mode(0);
   RESERVED1.set_reset_signame("hqm_csr_pf0_rst_n");
    RESERVED1.set_logical_path("HQMID");
    void'(add_field( RESERVED1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_CONTROL_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_CONTROL_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HDRLOGDW0;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDRLOGDW0, HDRLOGDW0.desired)
     `RAL_FIELD_CP_16(HDRLOGDW0, HDRLOGDW0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDRLOGDW0, HDRLOGDW0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDRLOGDW0, HDRLOGDW0.actual)
     `RAL_FIELD_CP_16(HDRLOGDW0, HDRLOGDW0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDRLOGDW0, HDRLOGDW0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HDRLOGDW0 = new("HDRLOGDW0", "RO/V/P", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_HEADER_LOG_0.HDRLOGDW0"});
    HDRLOGDW0.set_powerwell("vcccfn");
    HDRLOGDW0.set_rand_mode(0);
   HDRLOGDW0.set_reset_signame("hqm_csr_pf0_rst_n");
    HDRLOGDW0.set_logical_path("HQMID");
    void'(add_field( HDRLOGDW0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_0_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_0_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HDRLOGDW1;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDRLOGDW1, HDRLOGDW1.desired)
     `RAL_FIELD_CP_16(HDRLOGDW1, HDRLOGDW1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDRLOGDW1, HDRLOGDW1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDRLOGDW1, HDRLOGDW1.actual)
     `RAL_FIELD_CP_16(HDRLOGDW1, HDRLOGDW1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDRLOGDW1, HDRLOGDW1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HDRLOGDW1 = new("HDRLOGDW1", "RO/V/P", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_HEADER_LOG_1.HDRLOGDW1"});
    HDRLOGDW1.set_powerwell("vcccfn");
    HDRLOGDW1.set_rand_mode(0);
   HDRLOGDW1.set_reset_signame("hqm_csr_pf0_rst_n");
    HDRLOGDW1.set_logical_path("HQMID");
    void'(add_field( HDRLOGDW1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_1_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_1_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HDRLOGDW2;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDRLOGDW2, HDRLOGDW2.desired)
     `RAL_FIELD_CP_16(HDRLOGDW2, HDRLOGDW2.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDRLOGDW2, HDRLOGDW2.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDRLOGDW2, HDRLOGDW2.actual)
     `RAL_FIELD_CP_16(HDRLOGDW2, HDRLOGDW2.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDRLOGDW2, HDRLOGDW2.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HDRLOGDW2 = new("HDRLOGDW2", "RO/V/P", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_HEADER_LOG_2.HDRLOGDW2"});
    HDRLOGDW2.set_powerwell("vcccfn");
    HDRLOGDW2.set_rand_mode(0);
   HDRLOGDW2.set_reset_signame("hqm_csr_pf0_rst_n");
    HDRLOGDW2.set_logical_path("HQMID");
    void'(add_field( HDRLOGDW2 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_2_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_2_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_3_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field HDRLOGDW3;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_3_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDRLOGDW3, HDRLOGDW3.desired)
     `RAL_FIELD_CP_16(HDRLOGDW3, HDRLOGDW3.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDRLOGDW3, HDRLOGDW3.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(HDRLOGDW3, HDRLOGDW3.actual)
     `RAL_FIELD_CP_16(HDRLOGDW3, HDRLOGDW3.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(HDRLOGDW3, HDRLOGDW3.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    HDRLOGDW3 = new("HDRLOGDW3", "RO/V/P", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_HEADER_LOG_3.HDRLOGDW3"});
    HDRLOGDW3.set_powerwell("vcccfn");
    HDRLOGDW3.set_rand_mode(0);
   HDRLOGDW3.set_reset_signame("hqm_csr_pf0_rst_n");
    HDRLOGDW3.set_logical_path("HQMID");
    void'(add_field( HDRLOGDW3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_3_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_3_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_COMMAND_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CERE;
  sla_ral_field NERE;
  sla_ral_field FERE;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_COMMAND_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CERE, CERE.desired)
     `RAL_FIELD_CP_1(CERE, CERE.desired, 0)
     `RAL_FIELD_CP(NERE, NERE.desired)
     `RAL_FIELD_CP_1(NERE, NERE.desired, 0)
     `RAL_FIELD_CP(FERE, FERE.desired)
     `RAL_FIELD_CP_1(FERE, FERE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CERE, CERE.actual)
     `RAL_FIELD_CP_1(CERE, CERE.actual, 0)
     `RAL_FIELD_CP(NERE, NERE.actual)
     `RAL_FIELD_CP_1(NERE, NERE.actual, 0)
     `RAL_FIELD_CP(FERE, FERE.actual)
     `RAL_FIELD_CP_1(FERE, FERE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CERE = new("CERE", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_COMMAND.CERE"});
    CERE.set_powerwell("vcccfn");
    CERE.set_rand_mode(0);
   CERE.set_reset_signame("hqm_csr_pf0_rst_n");
    CERE.set_logical_path("HQMID");
    void'(add_field( CERE ));

    NERE = new("NERE", "RO", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_COMMAND.NERE"});
    NERE.set_powerwell("vcccfn");
    NERE.set_rand_mode(0);
   NERE.set_reset_signame("hqm_csr_pf0_rst_n");
    NERE.set_logical_path("HQMID");
    void'(add_field( NERE ));

    FERE = new("FERE", "RO", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_COMMAND.FERE"});
    FERE.set_powerwell("vcccfn");
    FERE.set_rand_mode(0);
   FERE.set_reset_signame("hqm_csr_pf0_rst_n");
    FERE.set_logical_path("HQMID");
    void'(add_field( FERE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_COMMAND_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_COMMAND_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_STATUS_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CER;
  sla_ral_field MCER;
  sla_ral_field FNER;
  sla_ral_field MFNER;
  sla_ral_field FUF;
  sla_ral_field NER;
  sla_ral_field FER;
  sla_ral_field AEIMN;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_STATUS_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CER, CER.desired)
     `RAL_FIELD_CP_1(CER, CER.desired, 0)
     `RAL_FIELD_CP(MCER, MCER.desired)
     `RAL_FIELD_CP_1(MCER, MCER.desired, 0)
     `RAL_FIELD_CP(FNER, FNER.desired)
     `RAL_FIELD_CP_1(FNER, FNER.desired, 0)
     `RAL_FIELD_CP(MFNER, MFNER.desired)
     `RAL_FIELD_CP_1(MFNER, MFNER.desired, 0)
     `RAL_FIELD_CP(FUF, FUF.desired)
     `RAL_FIELD_CP_1(FUF, FUF.desired, 0)
     `RAL_FIELD_CP(NER, NER.desired)
     `RAL_FIELD_CP_1(NER, NER.desired, 0)
     `RAL_FIELD_CP(FER, FER.desired)
     `RAL_FIELD_CP_1(FER, FER.desired, 0)
     `RAL_FIELD_CP(AEIMN, AEIMN.desired)
     `RAL_FIELD_CP_5(AEIMN, AEIMN.desired, 0,1,2,3,4)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CER, CER.actual)
     `RAL_FIELD_CP_1(CER, CER.actual, 0)
     `RAL_FIELD_CP(MCER, MCER.actual)
     `RAL_FIELD_CP_1(MCER, MCER.actual, 0)
     `RAL_FIELD_CP(FNER, FNER.actual)
     `RAL_FIELD_CP_1(FNER, FNER.actual, 0)
     `RAL_FIELD_CP(MFNER, MFNER.actual)
     `RAL_FIELD_CP_1(MFNER, MFNER.actual, 0)
     `RAL_FIELD_CP(FUF, FUF.actual)
     `RAL_FIELD_CP_1(FUF, FUF.actual, 0)
     `RAL_FIELD_CP(NER, NER.actual)
     `RAL_FIELD_CP_1(NER, NER.actual, 0)
     `RAL_FIELD_CP(FER, FER.actual)
     `RAL_FIELD_CP_1(FER, FER.actual, 0)
     `RAL_FIELD_CP(AEIMN, AEIMN.actual)
     `RAL_FIELD_CP_5(AEIMN, AEIMN.actual, 0,1,2,3,4)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CER = new("CER", "RO", 1, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.CER"});
    CER.set_powerwell("vcccfn");
    CER.set_rand_mode(0);
   CER.set_reset_signame("hqm_csr_pf0_rst_n");
    CER.set_logical_path("HQMID");
    void'(add_field( CER ));

    MCER = new("MCER", "RO", 1, 1, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.MCER"});
    MCER.set_powerwell("vcccfn");
    MCER.set_rand_mode(0);
   MCER.set_reset_signame("hqm_csr_pf0_rst_n");
    MCER.set_logical_path("HQMID");
    void'(add_field( MCER ));

    FNER = new("FNER", "RO", 1, 2, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.FNER"});
    FNER.set_powerwell("vcccfn");
    FNER.set_rand_mode(0);
   FNER.set_reset_signame("hqm_csr_pf0_rst_n");
    FNER.set_logical_path("HQMID");
    void'(add_field( FNER ));

    MFNER = new("MFNER", "RO", 1, 3, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.MFNER"});
    MFNER.set_powerwell("vcccfn");
    MFNER.set_rand_mode(0);
   MFNER.set_reset_signame("hqm_csr_pf0_rst_n");
    MFNER.set_logical_path("HQMID");
    void'(add_field( MFNER ));

    FUF = new("FUF", "RO", 1, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.FUF"});
    FUF.set_powerwell("vcccfn");
    FUF.set_rand_mode(0);
   FUF.set_reset_signame("hqm_csr_pf0_rst_n");
    FUF.set_logical_path("HQMID");
    void'(add_field( FUF ));

    NER = new("NER", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.NER"});
    NER.set_powerwell("vcccfn");
    NER.set_rand_mode(0);
   NER.set_reset_signame("hqm_csr_pf0_rst_n");
    NER.set_logical_path("HQMID");
    void'(add_field( NER ));

    FER = new("FER", "RO", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.FER"});
    FER.set_powerwell("vcccfn");
    FER.set_rand_mode(0);
   FER.set_reset_signame("hqm_csr_pf0_rst_n");
    FER.set_logical_path("HQMID");
    void'(add_field( FER ));

    AEIMN = new("AEIMN", "RO", 5, 27, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.AEIMN"});
    AEIMN.set_powerwell("vcccfn");
    AEIMN.set_rand_mode(0);
   AEIMN.set_reset_signame("hqm_csr_pf0_rst_n");
    AEIMN.set_logical_path("HQMID");
    void'(add_field( AEIMN ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_STATUS_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_STATUS_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_ERROR_SOURCE_IDENT_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field CSID;
  sla_ral_field FNSID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_ERROR_SOURCE_IDENT_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CSID, CSID.desired)
     `RAL_FIELD_CP_16(CSID, CSID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(FNSID, FNSID.desired)
     `RAL_FIELD_CP_16(FNSID, FNSID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(CSID, CSID.actual)
     `RAL_FIELD_CP_16(CSID, CSID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP(FNSID, FNSID.actual)
     `RAL_FIELD_CP_16(FNSID, FNSID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    CSID = new("CSID", "RO", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ERROR_SOURCE_IDENT.CSID"});
    CSID.set_powerwell("vcccfn");
    CSID.set_rand_mode(0);
   CSID.set_reset_signame("hqm_csr_pf0_rst_n");
    CSID.set_logical_path("HQMID");
    void'(add_field( CSID ));

    FNSID = new("FNSID", "RO", 16, 16, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ERROR_SOURCE_IDENT.FNSID"});
    FNSID.set_powerwell("vcccfn");
    FNSID.set_rand_mode(0);
   FNSID.set_reset_signame("hqm_csr_pf0_rst_n");
    FNSID.set_logical_path("HQMID");
    void'(add_field( FNSID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_ERROR_SOURCE_IDENT_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_ERROR_SOURCE_IDENT_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_0_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TLPPFLOG0;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_0_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TLPPFLOG0, TLPPFLOG0.desired)
     `RAL_FIELD_CP_16(TLPPFLOG0, TLPPFLOG0.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TLPPFLOG0, TLPPFLOG0.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TLPPFLOG0, TLPPFLOG0.actual)
     `RAL_FIELD_CP_16(TLPPFLOG0, TLPPFLOG0.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TLPPFLOG0, TLPPFLOG0.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TLPPFLOG0 = new("TLPPFLOG0", "RO/V/P", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_TLP_PREFIX_LOG_0.TLPPFLOG0"});
    TLPPFLOG0.set_powerwell("vcccfn");
    TLPPFLOG0.set_rand_mode(0);
   TLPPFLOG0.set_reset_signame("hqm_csr_pf0_rst_n");
    TLPPFLOG0.set_logical_path("HQMID");
    void'(add_field( TLPPFLOG0 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_0_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_0_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_1_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TLPPFLOG1;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_1_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TLPPFLOG1, TLPPFLOG1.desired)
     `RAL_FIELD_CP_16(TLPPFLOG1, TLPPFLOG1.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TLPPFLOG1, TLPPFLOG1.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TLPPFLOG1, TLPPFLOG1.actual)
     `RAL_FIELD_CP_16(TLPPFLOG1, TLPPFLOG1.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TLPPFLOG1, TLPPFLOG1.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TLPPFLOG1 = new("TLPPFLOG1", "RO", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_TLP_PREFIX_LOG_1.TLPPFLOG1"});
    TLPPFLOG1.set_powerwell("vcccfn");
    TLPPFLOG1.set_rand_mode(0);
   TLPPFLOG1.set_reset_signame("hqm_csr_pf0_rst_n");
    TLPPFLOG1.set_logical_path("HQMID");
    void'(add_field( TLPPFLOG1 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_1_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_1_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_2_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TLPPFLOG2;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_2_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TLPPFLOG2, TLPPFLOG2.desired)
     `RAL_FIELD_CP_16(TLPPFLOG2, TLPPFLOG2.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TLPPFLOG2, TLPPFLOG2.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TLPPFLOG2, TLPPFLOG2.actual)
     `RAL_FIELD_CP_16(TLPPFLOG2, TLPPFLOG2.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TLPPFLOG2, TLPPFLOG2.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TLPPFLOG2 = new("TLPPFLOG2", "RO", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_TLP_PREFIX_LOG_2.TLPPFLOG2"});
    TLPPFLOG2.set_powerwell("vcccfn");
    TLPPFLOG2.set_rand_mode(0);
   TLPPFLOG2.set_reset_signame("hqm_csr_pf0_rst_n");
    TLPPFLOG2.set_logical_path("HQMID");
    void'(add_field( TLPPFLOG2 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_2_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_2_reg

// ================================================

class hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_3_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field TLPPFLOG3;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_3_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TLPPFLOG3, TLPPFLOG3.desired)
     `RAL_FIELD_CP_16(TLPPFLOG3, TLPPFLOG3.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TLPPFLOG3, TLPPFLOG3.desired, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(TLPPFLOG3, TLPPFLOG3.actual)
     `RAL_FIELD_CP_16(TLPPFLOG3, TLPPFLOG3.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
     `RAL_FIELD_CP_16(TLPPFLOG3, TLPPFLOG3.actual, 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    TLPPFLOG3 = new("TLPPFLOG3", "RO", 32, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_TLP_PREFIX_LOG_3.TLPPFLOG3"});
    TLPPFLOG3.set_powerwell("vcccfn");
    TLPPFLOG3.set_rand_mode(0);
   TLPPFLOG3.set_reset_signame("hqm_csr_pf0_rst_n");
    TLPPFLOG3.set_logical_path("HQMID");
    void'(add_field( TLPPFLOG3 ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_3_reg) 
endclass : hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_3_reg

// ================================================

class hqm_pf_cfg_bridge_ATS_CAP_ID_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ATSCID;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_ATS_CAP_ID_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ATSCID, ATSCID.desired)
     `RAL_FIELD_CP_16(ATSCID, ATSCID.desired, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ATSCID, ATSCID.actual)
     `RAL_FIELD_CP_16(ATSCID, ATSCID.actual, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ATSCID = new("ATSCID", "RO", 16, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP_ID.ATSCID"});
    ATSCID.set_powerwell("vcccfn");
    ATSCID.set_rand_mode(0);
   ATSCID.set_reset_signame("hqm_csr_pf0_rst_n");
    ATSCID.set_logical_path("HQMID");
    void'(add_field( ATSCID ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_ATS_CAP_ID_reg) 
endclass : hqm_pf_cfg_bridge_ATS_CAP_ID_reg

// ================================================

class hqm_pf_cfg_bridge_ATS_CAP_VERSION_NEXT_PTR_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ATSCV;
  sla_ral_field CAP_PTR;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_ATS_CAP_VERSION_NEXT_PTR_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ATSCV, ATSCV.desired)
     `RAL_FIELD_CP_4(ATSCV, ATSCV.desired, 0,1,2,3)
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.desired)
     `RAL_FIELD_CP_12(CAP_PTR, CAP_PTR.desired, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ATSCV, ATSCV.actual)
     `RAL_FIELD_CP_4(ATSCV, ATSCV.actual, 0,1,2,3)
     `RAL_FIELD_CP(CAP_PTR, CAP_PTR.actual)
     `RAL_FIELD_CP_12(CAP_PTR, CAP_PTR.actual, 0,1,2,3,4,5,6,7,8,9,10,11)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ATSCV = new("ATSCV", "RO", 4, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP_VERSION_NEXT_PTR.ATSCV"});
    ATSCV.set_powerwell("vcccfn");
    ATSCV.set_rand_mode(0);
   ATSCV.set_reset_signame("hqm_csr_pf0_rst_n");
    ATSCV.set_logical_path("HQMID");
    void'(add_field( ATSCV ));

    CAP_PTR = new("CAP_PTR", "RO", 12, 4, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP_VERSION_NEXT_PTR.CAP_PTR"});
    CAP_PTR.set_powerwell("vcccfn");
    CAP_PTR.set_rand_mode(0);
   CAP_PTR.set_reset_signame("hqm_csr_pf0_rst_n");
    CAP_PTR.set_logical_path("HQMID");
    void'(add_field( CAP_PTR ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_ATS_CAP_VERSION_NEXT_PTR_reg) 
endclass : hqm_pf_cfg_bridge_ATS_CAP_VERSION_NEXT_PTR_reg

// ================================================

class hqm_pf_cfg_bridge_ATS_CAP_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ATSIQD;
  sla_ral_field ATSPAR;
  sla_ral_field ATSGIS;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_ATS_CAP_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ATSIQD, ATSIQD.desired)
     `RAL_FIELD_CP_5(ATSIQD, ATSIQD.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(ATSPAR, ATSPAR.desired)
     `RAL_FIELD_CP_1(ATSPAR, ATSPAR.desired, 0)
     `RAL_FIELD_CP(ATSGIS, ATSGIS.desired)
     `RAL_FIELD_CP_1(ATSGIS, ATSGIS.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ATSIQD, ATSIQD.actual)
     `RAL_FIELD_CP_5(ATSIQD, ATSIQD.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(ATSPAR, ATSPAR.actual)
     `RAL_FIELD_CP_1(ATSPAR, ATSPAR.actual, 0)
     `RAL_FIELD_CP(ATSGIS, ATSGIS.actual)
     `RAL_FIELD_CP_1(ATSGIS, ATSGIS.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ATSIQD = new("ATSIQD", "RO", 5, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP.ATSIQD"});
    ATSIQD.set_powerwell("vcccfn");
    ATSIQD.set_rand_mode(0);
   ATSIQD.set_reset_signame("hqm_csr_pf0_rst_n");
    ATSIQD.set_logical_path("HQMID");
    void'(add_field( ATSIQD ));

    ATSPAR = new("ATSPAR", "RO", 1, 5, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP.ATSPAR"});
    ATSPAR.set_powerwell("vcccfn");
    ATSPAR.set_rand_mode(0);
   ATSPAR.set_reset_signame("hqm_csr_pf0_rst_n");
    ATSPAR.set_logical_path("HQMID");
    void'(add_field( ATSPAR ));

    ATSGIS = new("ATSGIS", "RO", 1, 6, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP.ATSGIS"});
    ATSGIS.set_powerwell("vcccfn");
    ATSGIS.set_rand_mode(0);
   ATSGIS.set_reset_signame("hqm_csr_pf0_rst_n");
    ATSGIS.set_logical_path("HQMID");
    void'(add_field( ATSGIS ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_ATS_CAP_reg) 
endclass : hqm_pf_cfg_bridge_ATS_CAP_reg

// ================================================

class hqm_pf_cfg_bridge_ATS_CAP_CONTROL_reg extends sla_ral_reg;

  // --------------------------
  sla_ral_field ATSSTU;
  sla_ral_field ATSE;

  // --------------------------
  `ovm_object_utils(hqm_pf_cfg_bridge_ATS_CAP_CONTROL_reg)

  // --------------------------
  function new(
                string         name = "",
                `ifdef SLA_RAL_COVERAGE
                sla_ral_coverage_t cov_t = COVERAGE_OFF,
                `endif
                int            bus_num=0,
                int            dev_num=0,
                int            func_num=0,
                int            offset=0,
                int            size=0,
                sla_ral_data_t reset_val=0,
                boolean_t      mon_enabled = SLA_FALSE
             );
      super.new();
      set_space_addr("CFG",undef);
      set_space_addr("MEM",undef);
      set_space_addr("IO",undef);
      set_space_addr("MSG",undef);
      set_space_addr("CREG",undef); 
      set_space_addr("LT_MEM",undef);    
 build();

      `ifdef SLA_RAL_COVERAGE
      `CONFIG_RAL_COVERAGE(regname, COVERAGE_ON, FD_RW_SAMPLE)
      if(_coverage_type != COVERAGE_OFF) begin
        if(_sample_type inside {FD_RO_SAMPLE, RO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_WRITE)
        else if(_sample_type inside {FD_WO_SAMPLE, WO_SAMPLE})
        `CREATE_OP_SAMPLE_COV(RAL_READ)
        else
        `CREATE_OP_SAMPLE_COV(RAL_NONE)
        `CREATE_DESIRED_COV
        `CREATE_ACTUAL_COV
      end
      `endif

  endfunction

  `ifdef SLA_RAL_COVERAGE
  `CREATE_RAL_OP_COVERGROUP
  covergroup desired_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ATSSTU, ATSSTU.desired)
     `RAL_FIELD_CP_5(ATSSTU, ATSSTU.desired, 0,1,2,3,4)
     `RAL_FIELD_CP(ATSE, ATSE.desired)
     `RAL_FIELD_CP_1(ATSE, ATSE.desired, 0)
  endgroup
  covergroup actual_cg @(cov_ev);
     option.per_instance = 1;
     option.name = {sla_ral_file::regfilename,".",regname};
     `RAL_FIELD_CP(ATSSTU, ATSSTU.actual)
     `RAL_FIELD_CP_5(ATSSTU, ATSSTU.actual, 0,1,2,3,4)
     `RAL_FIELD_CP(ATSE, ATSE.actual)
     `RAL_FIELD_CP_1(ATSE, ATSE.actual, 0)
  endgroup
  `endif

  // --------------------------
  // add constraint based on database legal values
  // --------------------------
  function void build();
    ATSSTU = new("ATSSTU", "RW", 5, 0, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP_CONTROL.ATSSTU"});
    ATSSTU.set_powerwell("vcccfn");
    ATSSTU.set_rand_mode(0);
   ATSSTU.set_reset_signame("hqm_csr_pf0_rst_n");
    ATSSTU.set_logical_path("HQMID");
    void'(add_field( ATSSTU ));

    ATSE = new("ATSE", "RW", 1, 15, {"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP_CONTROL.ATSE"});
    ATSE.set_powerwell("vcccfn");
    ATSE.set_rand_mode(0);
   ATSE.set_reset_signame("hqm_csr_pf0_rst_n");
    ATSE.set_logical_path("HQMID");
    void'(add_field( ATSE ));

  endfunction


`DEFINE_NONE_SCOPE_REG_API(hqm_pf_cfg_bridge_ATS_CAP_CONTROL_reg) 
endclass : hqm_pf_cfg_bridge_ATS_CAP_CONTROL_reg

// ================================================

class hqm_pf_cfg_bridge_file extends sla_ral_file;

  rand hqm_pf_cfg_bridge_VENDOR_ID_reg VENDOR_ID;
  rand hqm_pf_cfg_bridge_DEVICE_ID_reg DEVICE_ID;
  rand hqm_pf_cfg_bridge_DEVICE_COMMAND_reg DEVICE_COMMAND;
  rand hqm_pf_cfg_bridge_DEVICE_STATUS_reg DEVICE_STATUS;
  rand hqm_pf_cfg_bridge_REVISION_ID_CLASS_CODE_reg REVISION_ID_CLASS_CODE;
  rand hqm_pf_cfg_bridge_CACHE_LINE_SIZE_reg CACHE_LINE_SIZE;
  rand hqm_pf_cfg_bridge_HEADER_TYPE_reg HEADER_TYPE;
  rand hqm_pf_cfg_bridge_FUNC_BAR_L_reg FUNC_BAR_L;
  rand hqm_pf_cfg_bridge_FUNC_BAR_U_reg FUNC_BAR_U;
  rand hqm_pf_cfg_bridge_CSR_BAR_L_reg CSR_BAR_L;
  rand hqm_pf_cfg_bridge_CSR_BAR_U_reg CSR_BAR_U;
  rand hqm_pf_cfg_bridge_SUBSYSTEM_VENDOR_ID_reg SUBSYSTEM_VENDOR_ID;
  rand hqm_pf_cfg_bridge_SUBSYSTEM_ID_reg SUBSYSTEM_ID;
  rand hqm_pf_cfg_bridge_CAP_PTR_reg CAP_PTR;
  rand hqm_pf_cfg_bridge_INT_LINE_reg INT_LINE;
  rand hqm_pf_cfg_bridge_INT_PIN_reg INT_PIN;
  rand hqm_pf_cfg_bridge_MSIX_CAP_ID_reg MSIX_CAP_ID;
  rand hqm_pf_cfg_bridge_MSIX_CAP_NEXT_CAP_PTR_reg MSIX_CAP_NEXT_CAP_PTR;
  rand hqm_pf_cfg_bridge_MSIX_CAP_CONTROL_reg MSIX_CAP_CONTROL;
  rand hqm_pf_cfg_bridge_MSIX_CAP_TABLE_OFFSET_BIR_reg MSIX_CAP_TABLE_OFFSET_BIR;
  rand hqm_pf_cfg_bridge_MSIX_CAP_PBA_OFFSET_BIR_reg MSIX_CAP_PBA_OFFSET_BIR;
  rand hqm_pf_cfg_bridge_PCIE_CAP_ID_reg PCIE_CAP_ID;
  rand hqm_pf_cfg_bridge_PCIE_CAP_NEXT_CAP_PTR_reg PCIE_CAP_NEXT_CAP_PTR;
  rand hqm_pf_cfg_bridge_PCIE_CAP_reg PCIE_CAP;
  rand hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_reg PCIE_CAP_DEVICE_CAP;
  rand hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_reg PCIE_CAP_DEVICE_CONTROL;
  rand hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_STATUS_reg PCIE_CAP_DEVICE_STATUS;
  rand hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_2_reg PCIE_CAP_DEVICE_CAP_2;
  rand hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_2_reg PCIE_CAP_DEVICE_CONTROL_2;
  rand hqm_pf_cfg_bridge_PM_CAP_ID_reg PM_CAP_ID;
  rand hqm_pf_cfg_bridge_PM_CAP_NEXT_CAP_PTR_reg PM_CAP_NEXT_CAP_PTR;
  rand hqm_pf_cfg_bridge_PM_CAP_reg PM_CAP;
  rand hqm_pf_cfg_bridge_PM_CAP_CONTROL_STATUS_reg PM_CAP_CONTROL_STATUS;
  rand hqm_pf_cfg_bridge_ACS_CAP_ID_reg ACS_CAP_ID;
  rand hqm_pf_cfg_bridge_ACS_CAP_VERSION_NEXT_PTR_reg ACS_CAP_VERSION_NEXT_PTR;
  rand hqm_pf_cfg_bridge_ACS_CAP_reg ACS_CAP;
  rand hqm_pf_cfg_bridge_ACS_CAP_CONTROL_reg ACS_CAP_CONTROL;
  rand hqm_pf_cfg_bridge_PASID_CAP_ID_reg PASID_CAP_ID;
  rand hqm_pf_cfg_bridge_PASID_CAP_VERSION_NEXT_PTR_reg PASID_CAP_VERSION_NEXT_PTR;
  rand hqm_pf_cfg_bridge_PASID_CAP_reg PASID_CAP;
  rand hqm_pf_cfg_bridge_PASID_CONTROL_reg PASID_CONTROL;
  rand hqm_pf_cfg_bridge_DVSEC_CAP_ID_reg DVSEC_CAP_ID;
  rand hqm_pf_cfg_bridge_DVSEC_CAP_VERSION_NEXT_PTR_reg DVSEC_CAP_VERSION_NEXT_PTR;
  rand hqm_pf_cfg_bridge_DVSEC_HDR1_reg DVSEC_HDR1;
  rand hqm_pf_cfg_bridge_DVSEC_HDR2_reg DVSEC_HDR2;
  rand hqm_pf_cfg_bridge_SCIOV_CAP_reg SCIOV_CAP;
  rand hqm_pf_cfg_bridge_SCIOV_SUPP_PGSZ_reg SCIOV_SUPP_PGSZ;
  rand hqm_pf_cfg_bridge_SCIOV_SYS_PGSZ_reg SCIOV_SYS_PGSZ;
  rand hqm_pf_cfg_bridge_SCIOV_IMS_reg SCIOV_IMS;
  rand hqm_pf_cfg_bridge_AER_CAP_ID_reg AER_CAP_ID;
  rand hqm_pf_cfg_bridge_AER_CAP_VERSION_NEXT_PTR_reg AER_CAP_VERSION_NEXT_PTR;
  rand hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_STATUS_reg AER_CAP_UNCORR_ERR_STATUS;
  rand hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_MASK_reg AER_CAP_UNCORR_ERR_MASK;
  rand hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_SEV_reg AER_CAP_UNCORR_ERR_SEV;
  rand hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_STATUS_reg AER_CAP_CORR_ERR_STATUS;
  rand hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_MASK_reg AER_CAP_CORR_ERR_MASK;
  rand hqm_pf_cfg_bridge_AER_CAP_CONTROL_reg AER_CAP_CONTROL;
  rand hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_0_reg AER_CAP_HEADER_LOG_0;
  rand hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_1_reg AER_CAP_HEADER_LOG_1;
  rand hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_2_reg AER_CAP_HEADER_LOG_2;
  rand hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_3_reg AER_CAP_HEADER_LOG_3;
  rand hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_COMMAND_reg AER_CAP_ROOT_ERROR_COMMAND;
  rand hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_STATUS_reg AER_CAP_ROOT_ERROR_STATUS;
  rand hqm_pf_cfg_bridge_AER_CAP_ERROR_SOURCE_IDENT_reg AER_CAP_ERROR_SOURCE_IDENT;
  rand hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_0_reg AER_CAP_TLP_PREFIX_LOG_0;
  rand hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_1_reg AER_CAP_TLP_PREFIX_LOG_1;
  rand hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_2_reg AER_CAP_TLP_PREFIX_LOG_2;
  rand hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_3_reg AER_CAP_TLP_PREFIX_LOG_3;
  rand hqm_pf_cfg_bridge_ATS_CAP_ID_reg ATS_CAP_ID;
  rand hqm_pf_cfg_bridge_ATS_CAP_VERSION_NEXT_PTR_reg ATS_CAP_VERSION_NEXT_PTR;
  rand hqm_pf_cfg_bridge_ATS_CAP_reg ATS_CAP;
  rand hqm_pf_cfg_bridge_ATS_CAP_CONTROL_reg ATS_CAP_CONTROL;

  `ovm_component_utils(hqm_pf_cfg_bridge_file)

  function new(string n, ovm_component p);
    super.new(n,p);
  endfunction

  // --------------------------
  function void build();
    regfilename = this.get_name();

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "VENDOR_ID";
    `endif
    VENDOR_ID = hqm_pf_cfg_bridge_VENDOR_ID_reg::type_id::create("VENDOR_ID", this);
    VENDOR_ID.set_cfg(16'h00, 16'h00, 16'h00, 4'h0, 16, 16'b1000000010000110);
    VENDOR_ID.set_space_addr("CFG", 4'h0);
    VENDOR_ID.set_space_addr("MSG", 4'h0);
    VENDOR_ID.set_space_addr("msg_bus_port", 'h21);
    VENDOR_ID.set_space_addr("CFG-SB",4'h0);
      VENDOR_ID.set_space("CFG");
      VENDOR_ID.set_msg_opcode("CFG-SB");
      VENDOR_ID.set_fid(4'h0, "CFG-SB");
      VENDOR_ID.set_user_attribute("diag_reg", "0");
      VENDOR_ID.set_user_attribute("HqmIsFeatureReg", "0");
      VENDOR_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("VENDOR_ID:dont_test") ) VENDOR_ID.set_test_reg(1'b0);
      if (!add_reg( VENDOR_ID )) begin
        `sla_error(get_name(), ("Could not add register VENDOR_ID"));
      end
   VENDOR_ID.VID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.VENDOR_ID.VID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DEVICE_ID";
    `endif
    DEVICE_ID = hqm_pf_cfg_bridge_DEVICE_ID_reg::type_id::create("DEVICE_ID", this);
    DEVICE_ID.set_cfg(16'h00, 16'h00, 16'h00, 4'h2, 16, 16'b0010011100010100);
    DEVICE_ID.set_space_addr("CFG", 4'h2);
    DEVICE_ID.set_space_addr("MSG", 4'h2);
    DEVICE_ID.set_space_addr("msg_bus_port", 'h21);
    DEVICE_ID.set_space_addr("CFG-SB",4'h2);
      DEVICE_ID.set_space("CFG");
      DEVICE_ID.set_msg_opcode("CFG-SB");
      DEVICE_ID.set_fid(4'h0, "CFG-SB");
      DEVICE_ID.set_user_attribute("diag_reg", "0");
      DEVICE_ID.set_user_attribute("HqmIsFeatureReg", "0");
      DEVICE_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DEVICE_ID:dont_test") ) DEVICE_ID.set_test_reg(1'b0);
      if (!add_reg( DEVICE_ID )) begin
        `sla_error(get_name(), ("Could not add register DEVICE_ID"));
      end
   DEVICE_ID.DID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_ID.DID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DEVICE_COMMAND";
    `endif
    DEVICE_COMMAND = hqm_pf_cfg_bridge_DEVICE_COMMAND_reg::type_id::create("DEVICE_COMMAND", this);
    DEVICE_COMMAND.set_cfg(16'h00, 16'h00, 16'h00, 4'h4, 16, 16'b0000000000000000);
    DEVICE_COMMAND.set_space_addr("CFG", 4'h4);
    DEVICE_COMMAND.set_space_addr("MSG", 4'h4);
    DEVICE_COMMAND.set_space_addr("msg_bus_port", 'h21);
    DEVICE_COMMAND.set_space_addr("CFG-SB",4'h4);
      DEVICE_COMMAND.set_space("CFG");
      DEVICE_COMMAND.set_msg_opcode("CFG-SB");
      DEVICE_COMMAND.set_fid(4'h0, "CFG-SB");
      DEVICE_COMMAND.set_user_attribute("diag_reg", "0");
      DEVICE_COMMAND.set_user_attribute("HqmIsFeatureReg", "0");
      DEVICE_COMMAND.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DEVICE_COMMAND:dont_test") ) DEVICE_COMMAND.set_test_reg(1'b0);
      if (!add_reg( DEVICE_COMMAND )) begin
        `sla_error(get_name(), ("Could not add register DEVICE_COMMAND"));
      end
   DEVICE_COMMAND.IO.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.IO"});
   DEVICE_COMMAND.MEM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.MEM"});
   DEVICE_COMMAND.BM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.BM"});
   DEVICE_COMMAND.SS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.SS"});
   DEVICE_COMMAND.MWE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.MWE"});
   DEVICE_COMMAND.VPS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.VPS"});
   DEVICE_COMMAND.PER.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.PER"});
   DEVICE_COMMAND.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.RESERVED1"});
   DEVICE_COMMAND.SER.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.SER"});
   DEVICE_COMMAND.FBTB.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.FBTB"});
   DEVICE_COMMAND.INTD.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.INTD"});
   DEVICE_COMMAND.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_COMMAND.RESERVED"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DEVICE_STATUS";
    `endif
    DEVICE_STATUS = hqm_pf_cfg_bridge_DEVICE_STATUS_reg::type_id::create("DEVICE_STATUS", this);
    DEVICE_STATUS.set_cfg(16'h00, 16'h00, 16'h00, 4'h6, 16, 16'b0000000000010000);
    DEVICE_STATUS.set_space_addr("CFG", 4'h6);
    DEVICE_STATUS.set_space_addr("MSG", 4'h6);
    DEVICE_STATUS.set_space_addr("msg_bus_port", 'h21);
    DEVICE_STATUS.set_space_addr("CFG-SB",4'h6);
      DEVICE_STATUS.set_space("CFG");
      DEVICE_STATUS.set_msg_opcode("CFG-SB");
      DEVICE_STATUS.set_fid(4'h0, "CFG-SB");
      DEVICE_STATUS.set_user_attribute("diag_reg", "0");
      DEVICE_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      DEVICE_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DEVICE_STATUS:dont_test") ) DEVICE_STATUS.set_test_reg(1'b0);
      if (!add_reg( DEVICE_STATUS )) begin
        `sla_error(get_name(), ("Could not add register DEVICE_STATUS"));
      end
   DEVICE_STATUS.RESERVED2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.RESERVED2"});
   DEVICE_STATUS.INTSTS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.INTSTS"});
   DEVICE_STATUS.CL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.CL"});
   DEVICE_STATUS.MC66.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.MC66"});
   DEVICE_STATUS.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.RESERVED1"});
   DEVICE_STATUS.FB2B.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.FB2B"});
   DEVICE_STATUS.MDPE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.MDPE"});
   DEVICE_STATUS.DST.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.DST"});
   DEVICE_STATUS.STA.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.STA"});
   DEVICE_STATUS.RTA.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.RTA"});
   DEVICE_STATUS.RMA.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.RMA"});
   DEVICE_STATUS.SSE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.SSE"});
   DEVICE_STATUS.DPE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DEVICE_STATUS.DPE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "REVISION_ID_CLASS_CODE";
    `endif
    REVISION_ID_CLASS_CODE = hqm_pf_cfg_bridge_REVISION_ID_CLASS_CODE_reg::type_id::create("REVISION_ID_CLASS_CODE", this);
    REVISION_ID_CLASS_CODE.set_cfg(16'h00, 16'h00, 16'h00, 4'h8, 32, 32'b00001011010000000000000000000000);
    REVISION_ID_CLASS_CODE.set_space_addr("CFG", 4'h8);
    REVISION_ID_CLASS_CODE.set_space_addr("MSG", 4'h8);
    REVISION_ID_CLASS_CODE.set_space_addr("msg_bus_port", 'h21);
    REVISION_ID_CLASS_CODE.set_space_addr("CFG-SB",4'h8);
      REVISION_ID_CLASS_CODE.set_space("CFG");
      REVISION_ID_CLASS_CODE.set_msg_opcode("CFG-SB");
      REVISION_ID_CLASS_CODE.set_fid(4'h0, "CFG-SB");
      REVISION_ID_CLASS_CODE.set_user_attribute("diag_reg", "0");
      REVISION_ID_CLASS_CODE.set_user_attribute("HqmIsFeatureReg", "0");
      REVISION_ID_CLASS_CODE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("REVISION_ID_CLASS_CODE:dont_test") ) REVISION_ID_CLASS_CODE.set_test_reg(1'b0);
      if (!add_reg( REVISION_ID_CLASS_CODE )) begin
        `sla_error(get_name(), ("Could not add register REVISION_ID_CLASS_CODE"));
      end
   REVISION_ID_CLASS_CODE.RIDL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.REVISION_ID_CLASS_CODE.RIDL"});
   REVISION_ID_CLASS_CODE.RIDU.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.REVISION_ID_CLASS_CODE.RIDU"});
   REVISION_ID_CLASS_CODE.CC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.REVISION_ID_CLASS_CODE.CC"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CACHE_LINE_SIZE";
    `endif
    CACHE_LINE_SIZE = hqm_pf_cfg_bridge_CACHE_LINE_SIZE_reg::type_id::create("CACHE_LINE_SIZE", this);
    CACHE_LINE_SIZE.set_cfg(16'h00, 16'h00, 16'h00, 8'h0C, 8, 8'b00000000);
    CACHE_LINE_SIZE.set_space_addr("CFG", 8'h0C);
    CACHE_LINE_SIZE.set_space_addr("MSG", 8'h0C);
    CACHE_LINE_SIZE.set_space_addr("msg_bus_port", 'h21);
    CACHE_LINE_SIZE.set_space_addr("CFG-SB",4'hC);
      CACHE_LINE_SIZE.set_space("CFG");
      CACHE_LINE_SIZE.set_msg_opcode("CFG-SB");
      CACHE_LINE_SIZE.set_fid(4'h0, "CFG-SB");
      CACHE_LINE_SIZE.set_user_attribute("diag_reg", "0");
      CACHE_LINE_SIZE.set_user_attribute("HqmIsFeatureReg", "0");
      CACHE_LINE_SIZE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CACHE_LINE_SIZE:dont_test") ) CACHE_LINE_SIZE.set_test_reg(1'b0);
      if (!add_reg( CACHE_LINE_SIZE )) begin
        `sla_error(get_name(), ("Could not add register CACHE_LINE_SIZE"));
      end
   CACHE_LINE_SIZE.CLS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CACHE_LINE_SIZE.CLS"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "HEADER_TYPE";
    `endif
    HEADER_TYPE = hqm_pf_cfg_bridge_HEADER_TYPE_reg::type_id::create("HEADER_TYPE", this);
    HEADER_TYPE.set_cfg(16'h00, 16'h00, 16'h00, 8'h0E, 8, 8'b00000000);
    HEADER_TYPE.set_space_addr("CFG", 8'h0E);
    HEADER_TYPE.set_space_addr("MSG", 8'h0E);
    HEADER_TYPE.set_space_addr("msg_bus_port", 'h21);
    HEADER_TYPE.set_space_addr("CFG-SB",4'hE);
      HEADER_TYPE.set_space("CFG");
      HEADER_TYPE.set_msg_opcode("CFG-SB");
      HEADER_TYPE.set_fid(4'h0, "CFG-SB");
      HEADER_TYPE.set_user_attribute("diag_reg", "0");
      HEADER_TYPE.set_user_attribute("HqmIsFeatureReg", "0");
      HEADER_TYPE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("HEADER_TYPE:dont_test") ) HEADER_TYPE.set_test_reg(1'b0);
      if (!add_reg( HEADER_TYPE )) begin
        `sla_error(get_name(), ("Could not add register HEADER_TYPE"));
      end
   HEADER_TYPE.HDR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.HEADER_TYPE.HDR"});
   HEADER_TYPE.MFD.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.HEADER_TYPE.MFD"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "FUNC_BAR_L";
    `endif
    FUNC_BAR_L = hqm_pf_cfg_bridge_FUNC_BAR_L_reg::type_id::create("FUNC_BAR_L", this);
    FUNC_BAR_L.set_cfg(16'h00, 16'h00, 16'h00, 8'h10, 32, 32'b00000000000000000000000000001100);
    FUNC_BAR_L.set_space_addr("CFG", 8'h10);
    FUNC_BAR_L.set_space_addr("MSG", 8'h10);
    FUNC_BAR_L.set_space_addr("msg_bus_port", 'h21);
    FUNC_BAR_L.set_space_addr("CFG-SB",8'h10);
      FUNC_BAR_L.set_space("CFG");
      FUNC_BAR_L.set_msg_opcode("CFG-SB");
      FUNC_BAR_L.set_fid(4'h0, "CFG-SB");
      FUNC_BAR_L.set_user_attribute("diag_reg", "0");
      FUNC_BAR_L.set_user_attribute("HqmIsFeatureReg", "0");
      FUNC_BAR_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("FUNC_BAR_L:dont_test") ) FUNC_BAR_L.set_test_reg(1'b0);
      if (!add_reg( FUNC_BAR_L )) begin
        `sla_error(get_name(), ("Could not add register FUNC_BAR_L"));
      end
   FUNC_BAR_L.MEM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_L.MEM"});
   FUNC_BAR_L.TYP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_L.TYP"});
   FUNC_BAR_L.PREF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_L.PREF"});
   FUNC_BAR_L.ZERO.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_L.ZERO"});
   FUNC_BAR_L.ADDR_L.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_L.ADDR_L"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "FUNC_BAR_U";
    `endif
    FUNC_BAR_U = hqm_pf_cfg_bridge_FUNC_BAR_U_reg::type_id::create("FUNC_BAR_U", this);
    FUNC_BAR_U.set_cfg(16'h00, 16'h00, 16'h00, 8'h14, 32, 32'b00000000000000000000000000000000);
    FUNC_BAR_U.set_space_addr("CFG", 8'h14);
    FUNC_BAR_U.set_space_addr("MSG", 8'h14);
    FUNC_BAR_U.set_space_addr("msg_bus_port", 'h21);
    FUNC_BAR_U.set_space_addr("CFG-SB",8'h14);
      FUNC_BAR_U.set_space("CFG");
      FUNC_BAR_U.set_msg_opcode("CFG-SB");
      FUNC_BAR_U.set_fid(4'h0, "CFG-SB");
      FUNC_BAR_U.set_user_attribute("diag_reg", "0");
      FUNC_BAR_U.set_user_attribute("HqmIsFeatureReg", "0");
      FUNC_BAR_U.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("FUNC_BAR_U:dont_test") ) FUNC_BAR_U.set_test_reg(1'b0);
      if (!add_reg( FUNC_BAR_U )) begin
        `sla_error(get_name(), ("Could not add register FUNC_BAR_U"));
      end
   FUNC_BAR_U.ADDR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.FUNC_BAR_U.ADDR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CSR_BAR_L";
    `endif
    CSR_BAR_L = hqm_pf_cfg_bridge_CSR_BAR_L_reg::type_id::create("CSR_BAR_L", this);
    CSR_BAR_L.set_cfg(16'h00, 16'h00, 16'h00, 8'h18, 32, 32'b00000000000000000000000000001100);
    CSR_BAR_L.set_space_addr("CFG", 8'h18);
    CSR_BAR_L.set_space_addr("MSG", 8'h18);
    CSR_BAR_L.set_space_addr("msg_bus_port", 'h21);
    CSR_BAR_L.set_space_addr("CFG-SB",8'h18);
      CSR_BAR_L.set_space("CFG");
      CSR_BAR_L.set_msg_opcode("CFG-SB");
      CSR_BAR_L.set_fid(4'h0, "CFG-SB");
      CSR_BAR_L.set_user_attribute("diag_reg", "0");
      CSR_BAR_L.set_user_attribute("HqmIsFeatureReg", "0");
      CSR_BAR_L.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CSR_BAR_L:dont_test") ) CSR_BAR_L.set_test_reg(1'b0);
      if (!add_reg( CSR_BAR_L )) begin
        `sla_error(get_name(), ("Could not add register CSR_BAR_L"));
      end
   CSR_BAR_L.MEM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CSR_BAR_L.MEM"});
   CSR_BAR_L.TYP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CSR_BAR_L.TYP"});
   CSR_BAR_L.PREF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CSR_BAR_L.PREF"});
   CSR_BAR_L.ZERO.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CSR_BAR_L.ZERO"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CSR_BAR_U";
    `endif
    CSR_BAR_U = hqm_pf_cfg_bridge_CSR_BAR_U_reg::type_id::create("CSR_BAR_U", this);
    CSR_BAR_U.set_cfg(16'h00, 16'h00, 16'h00, 8'h1C, 32, 32'b00000000000000000000000000000000);
    CSR_BAR_U.set_space_addr("CFG", 8'h1C);
    CSR_BAR_U.set_space_addr("MSG", 8'h1C);
    CSR_BAR_U.set_space_addr("msg_bus_port", 'h21);
    CSR_BAR_U.set_space_addr("CFG-SB",8'h1C);
      CSR_BAR_U.set_space("CFG");
      CSR_BAR_U.set_msg_opcode("CFG-SB");
      CSR_BAR_U.set_fid(4'h0, "CFG-SB");
      CSR_BAR_U.set_user_attribute("diag_reg", "0");
      CSR_BAR_U.set_user_attribute("HqmIsFeatureReg", "0");
      CSR_BAR_U.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CSR_BAR_U:dont_test") ) CSR_BAR_U.set_test_reg(1'b0);
      if (!add_reg( CSR_BAR_U )) begin
        `sla_error(get_name(), ("Could not add register CSR_BAR_U"));
      end
   CSR_BAR_U.ADDR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CSR_BAR_U.ADDR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SUBSYSTEM_VENDOR_ID";
    `endif
    SUBSYSTEM_VENDOR_ID = hqm_pf_cfg_bridge_SUBSYSTEM_VENDOR_ID_reg::type_id::create("SUBSYSTEM_VENDOR_ID", this);
    SUBSYSTEM_VENDOR_ID.set_cfg(16'h00, 16'h00, 16'h00, 8'h2C, 16, 16'b1000000010000110);
    SUBSYSTEM_VENDOR_ID.set_space_addr("CFG", 8'h2C);
    SUBSYSTEM_VENDOR_ID.set_space_addr("MSG", 8'h2C);
    SUBSYSTEM_VENDOR_ID.set_space_addr("msg_bus_port", 'h21);
    SUBSYSTEM_VENDOR_ID.set_space_addr("CFG-SB",8'h2C);
      SUBSYSTEM_VENDOR_ID.set_space("CFG");
      SUBSYSTEM_VENDOR_ID.set_msg_opcode("CFG-SB");
      SUBSYSTEM_VENDOR_ID.set_fid(4'h0, "CFG-SB");
      SUBSYSTEM_VENDOR_ID.set_user_attribute("diag_reg", "0");
      SUBSYSTEM_VENDOR_ID.set_user_attribute("HqmIsFeatureReg", "0");
      SUBSYSTEM_VENDOR_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SUBSYSTEM_VENDOR_ID:dont_test") ) SUBSYSTEM_VENDOR_ID.set_test_reg(1'b0);
      if (!add_reg( SUBSYSTEM_VENDOR_ID )) begin
        `sla_error(get_name(), ("Could not add register SUBSYSTEM_VENDOR_ID"));
      end
   SUBSYSTEM_VENDOR_ID.SVID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SUBSYSTEM_VENDOR_ID.SVID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SUBSYSTEM_ID";
    `endif
    SUBSYSTEM_ID = hqm_pf_cfg_bridge_SUBSYSTEM_ID_reg::type_id::create("SUBSYSTEM_ID", this);
    SUBSYSTEM_ID.set_cfg(16'h00, 16'h00, 16'h00, 8'h2E, 16, 16'b0000000000000000);
    SUBSYSTEM_ID.set_space_addr("CFG", 8'h2E);
    SUBSYSTEM_ID.set_space_addr("MSG", 8'h2E);
    SUBSYSTEM_ID.set_space_addr("msg_bus_port", 'h21);
    SUBSYSTEM_ID.set_space_addr("CFG-SB",8'h2E);
      SUBSYSTEM_ID.set_space("CFG");
      SUBSYSTEM_ID.set_msg_opcode("CFG-SB");
      SUBSYSTEM_ID.set_fid(4'h0, "CFG-SB");
      SUBSYSTEM_ID.set_user_attribute("diag_reg", "0");
      SUBSYSTEM_ID.set_user_attribute("HqmIsFeatureReg", "0");
      SUBSYSTEM_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SUBSYSTEM_ID:dont_test") ) SUBSYSTEM_ID.set_test_reg(1'b0);
      if (!add_reg( SUBSYSTEM_ID )) begin
        `sla_error(get_name(), ("Could not add register SUBSYSTEM_ID"));
      end
   SUBSYSTEM_ID.SID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SUBSYSTEM_ID.SID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "CAP_PTR";
    `endif
    CAP_PTR = hqm_pf_cfg_bridge_CAP_PTR_reg::type_id::create("CAP_PTR", this);
    CAP_PTR.set_cfg(16'h00, 16'h00, 16'h00, 8'h34, 8, 8'b01100000);
    CAP_PTR.set_space_addr("CFG", 8'h34);
    CAP_PTR.set_space_addr("MSG", 8'h34);
    CAP_PTR.set_space_addr("msg_bus_port", 'h21);
    CAP_PTR.set_space_addr("CFG-SB",8'h34);
      CAP_PTR.set_space("CFG");
      CAP_PTR.set_msg_opcode("CFG-SB");
      CAP_PTR.set_fid(4'h0, "CFG-SB");
      CAP_PTR.set_user_attribute("diag_reg", "0");
      CAP_PTR.set_user_attribute("HqmIsFeatureReg", "0");
      CAP_PTR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("CAP_PTR:dont_test") ) CAP_PTR.set_test_reg(1'b0);
      if (!add_reg( CAP_PTR )) begin
        `sla_error(get_name(), ("Could not add register CAP_PTR"));
      end
   CAP_PTR.CP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.CAP_PTR.CP"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "INT_LINE";
    `endif
    INT_LINE = hqm_pf_cfg_bridge_INT_LINE_reg::type_id::create("INT_LINE", this);
    INT_LINE.set_cfg(16'h00, 16'h00, 16'h00, 8'h3C, 8, 8'b00000000);
    INT_LINE.set_space_addr("CFG", 8'h3C);
    INT_LINE.set_space_addr("MSG", 8'h3C);
    INT_LINE.set_space_addr("msg_bus_port", 'h21);
    INT_LINE.set_space_addr("CFG-SB",8'h3C);
      INT_LINE.set_space("CFG");
      INT_LINE.set_msg_opcode("CFG-SB");
      INT_LINE.set_fid(4'h0, "CFG-SB");
      INT_LINE.set_user_attribute("diag_reg", "0");
      INT_LINE.set_user_attribute("HqmIsFeatureReg", "0");
      INT_LINE.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("INT_LINE:dont_test") ) INT_LINE.set_test_reg(1'b0);
      if (!add_reg( INT_LINE )) begin
        `sla_error(get_name(), ("Could not add register INT_LINE"));
      end
   INT_LINE.IRQL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.INT_LINE.IRQL"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "INT_PIN";
    `endif
    INT_PIN = hqm_pf_cfg_bridge_INT_PIN_reg::type_id::create("INT_PIN", this);
    INT_PIN.set_cfg(16'h00, 16'h00, 16'h00, 8'h3D, 8, 8'b00000000);
    INT_PIN.set_space_addr("CFG", 8'h3D);
    INT_PIN.set_space_addr("MSG", 8'h3D);
    INT_PIN.set_space_addr("msg_bus_port", 'h21);
    INT_PIN.set_space_addr("CFG-SB",8'h3D);
      INT_PIN.set_space("CFG");
      INT_PIN.set_msg_opcode("CFG-SB");
      INT_PIN.set_fid(4'h0, "CFG-SB");
      INT_PIN.set_user_attribute("diag_reg", "0");
      INT_PIN.set_user_attribute("HqmIsFeatureReg", "0");
      INT_PIN.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("INT_PIN:dont_test") ) INT_PIN.set_test_reg(1'b0);
      if (!add_reg( INT_PIN )) begin
        `sla_error(get_name(), ("Could not add register INT_PIN"));
      end
   INT_PIN.IRQP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.INT_PIN.IRQP"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_CAP_ID";
    `endif
    MSIX_CAP_ID = hqm_pf_cfg_bridge_MSIX_CAP_ID_reg::type_id::create("MSIX_CAP_ID", this);
    MSIX_CAP_ID.set_cfg(16'h00, 16'h00, 16'h00, 8'h60, 8, 8'b00010001);
    MSIX_CAP_ID.set_space_addr("CFG", 8'h60);
    MSIX_CAP_ID.set_space_addr("MSG", 8'h60);
    MSIX_CAP_ID.set_space_addr("msg_bus_port", 'h21);
    MSIX_CAP_ID.set_space_addr("CFG-SB",8'h60);
      MSIX_CAP_ID.set_space("CFG");
      MSIX_CAP_ID.set_msg_opcode("CFG-SB");
      MSIX_CAP_ID.set_fid(4'h0, "CFG-SB");
      MSIX_CAP_ID.set_user_attribute("diag_reg", "0");
      MSIX_CAP_ID.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_CAP_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_CAP_ID:dont_test") ) MSIX_CAP_ID.set_test_reg(1'b0);
      if (!add_reg( MSIX_CAP_ID )) begin
        `sla_error(get_name(), ("Could not add register MSIX_CAP_ID"));
      end
   MSIX_CAP_ID.MSIX.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_ID.MSIX"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_CAP_NEXT_CAP_PTR";
    `endif
    MSIX_CAP_NEXT_CAP_PTR = hqm_pf_cfg_bridge_MSIX_CAP_NEXT_CAP_PTR_reg::type_id::create("MSIX_CAP_NEXT_CAP_PTR", this);
    MSIX_CAP_NEXT_CAP_PTR.set_cfg(16'h00, 16'h00, 16'h00, 8'h61, 8, 8'b01101100);
    MSIX_CAP_NEXT_CAP_PTR.set_space_addr("CFG", 8'h61);
    MSIX_CAP_NEXT_CAP_PTR.set_space_addr("MSG", 8'h61);
    MSIX_CAP_NEXT_CAP_PTR.set_space_addr("msg_bus_port", 'h21);
    MSIX_CAP_NEXT_CAP_PTR.set_space_addr("CFG-SB",8'h61);
      MSIX_CAP_NEXT_CAP_PTR.set_space("CFG");
      MSIX_CAP_NEXT_CAP_PTR.set_msg_opcode("CFG-SB");
      MSIX_CAP_NEXT_CAP_PTR.set_fid(4'h0, "CFG-SB");
      MSIX_CAP_NEXT_CAP_PTR.set_user_attribute("diag_reg", "0");
      MSIX_CAP_NEXT_CAP_PTR.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_CAP_NEXT_CAP_PTR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_CAP_NEXT_CAP_PTR:dont_test") ) MSIX_CAP_NEXT_CAP_PTR.set_test_reg(1'b0);
      if (!add_reg( MSIX_CAP_NEXT_CAP_PTR )) begin
        `sla_error(get_name(), ("Could not add register MSIX_CAP_NEXT_CAP_PTR"));
      end
   MSIX_CAP_NEXT_CAP_PTR.CAP_PTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_NEXT_CAP_PTR.CAP_PTR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_CAP_CONTROL";
    `endif
    MSIX_CAP_CONTROL = hqm_pf_cfg_bridge_MSIX_CAP_CONTROL_reg::type_id::create("MSIX_CAP_CONTROL", this);
    MSIX_CAP_CONTROL.set_cfg(16'h00, 16'h00, 16'h00, 8'h62, 16, 16'b0000000001000000);
    MSIX_CAP_CONTROL.set_space_addr("CFG", 8'h62);
    MSIX_CAP_CONTROL.set_space_addr("MSG", 8'h62);
    MSIX_CAP_CONTROL.set_space_addr("msg_bus_port", 'h21);
    MSIX_CAP_CONTROL.set_space_addr("CFG-SB",8'h62);
      MSIX_CAP_CONTROL.set_space("CFG");
      MSIX_CAP_CONTROL.set_msg_opcode("CFG-SB");
      MSIX_CAP_CONTROL.set_fid(4'h0, "CFG-SB");
      MSIX_CAP_CONTROL.set_user_attribute("diag_reg", "0");
      MSIX_CAP_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_CAP_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_CAP_CONTROL:dont_test") ) MSIX_CAP_CONTROL.set_test_reg(1'b0);
      if (!add_reg( MSIX_CAP_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register MSIX_CAP_CONTROL"));
      end
   MSIX_CAP_CONTROL.TS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_CONTROL.TS"});
   MSIX_CAP_CONTROL.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_CONTROL.RESERVED"});
   MSIX_CAP_CONTROL.FM.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_CONTROL.FM"});
   MSIX_CAP_CONTROL.MSIXEN.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_CONTROL.MSIXEN"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_CAP_TABLE_OFFSET_BIR";
    `endif
    MSIX_CAP_TABLE_OFFSET_BIR = hqm_pf_cfg_bridge_MSIX_CAP_TABLE_OFFSET_BIR_reg::type_id::create("MSIX_CAP_TABLE_OFFSET_BIR", this);
    MSIX_CAP_TABLE_OFFSET_BIR.set_cfg(16'h00, 16'h00, 16'h00, 8'h64, 32, 32'b00000001000000000000000000000000);
    MSIX_CAP_TABLE_OFFSET_BIR.set_space_addr("CFG", 8'h64);
    MSIX_CAP_TABLE_OFFSET_BIR.set_space_addr("MSG", 8'h64);
    MSIX_CAP_TABLE_OFFSET_BIR.set_space_addr("msg_bus_port", 'h21);
    MSIX_CAP_TABLE_OFFSET_BIR.set_space_addr("CFG-SB",8'h64);
      MSIX_CAP_TABLE_OFFSET_BIR.set_space("CFG");
      MSIX_CAP_TABLE_OFFSET_BIR.set_msg_opcode("CFG-SB");
      MSIX_CAP_TABLE_OFFSET_BIR.set_fid(4'h0, "CFG-SB");
      MSIX_CAP_TABLE_OFFSET_BIR.set_user_attribute("diag_reg", "0");
      MSIX_CAP_TABLE_OFFSET_BIR.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_CAP_TABLE_OFFSET_BIR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_CAP_TABLE_OFFSET_BIR:dont_test") ) MSIX_CAP_TABLE_OFFSET_BIR.set_test_reg(1'b0);
      if (!add_reg( MSIX_CAP_TABLE_OFFSET_BIR )) begin
        `sla_error(get_name(), ("Could not add register MSIX_CAP_TABLE_OFFSET_BIR"));
      end
   MSIX_CAP_TABLE_OFFSET_BIR.TBIR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_TABLE_OFFSET_BIR.TBIR"});
   MSIX_CAP_TABLE_OFFSET_BIR.TO.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_TABLE_OFFSET_BIR.TO"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "MSIX_CAP_PBA_OFFSET_BIR";
    `endif
    MSIX_CAP_PBA_OFFSET_BIR = hqm_pf_cfg_bridge_MSIX_CAP_PBA_OFFSET_BIR_reg::type_id::create("MSIX_CAP_PBA_OFFSET_BIR", this);
    MSIX_CAP_PBA_OFFSET_BIR.set_cfg(16'h00, 16'h00, 16'h00, 8'h68, 32, 32'b00000001000000000001000000000000);
    MSIX_CAP_PBA_OFFSET_BIR.set_space_addr("CFG", 8'h68);
    MSIX_CAP_PBA_OFFSET_BIR.set_space_addr("MSG", 8'h68);
    MSIX_CAP_PBA_OFFSET_BIR.set_space_addr("msg_bus_port", 'h21);
    MSIX_CAP_PBA_OFFSET_BIR.set_space_addr("CFG-SB",8'h68);
      MSIX_CAP_PBA_OFFSET_BIR.set_space("CFG");
      MSIX_CAP_PBA_OFFSET_BIR.set_msg_opcode("CFG-SB");
      MSIX_CAP_PBA_OFFSET_BIR.set_fid(4'h0, "CFG-SB");
      MSIX_CAP_PBA_OFFSET_BIR.set_user_attribute("diag_reg", "0");
      MSIX_CAP_PBA_OFFSET_BIR.set_user_attribute("HqmIsFeatureReg", "0");
      MSIX_CAP_PBA_OFFSET_BIR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("MSIX_CAP_PBA_OFFSET_BIR:dont_test") ) MSIX_CAP_PBA_OFFSET_BIR.set_test_reg(1'b0);
      if (!add_reg( MSIX_CAP_PBA_OFFSET_BIR )) begin
        `sla_error(get_name(), ("Could not add register MSIX_CAP_PBA_OFFSET_BIR"));
      end
   MSIX_CAP_PBA_OFFSET_BIR.PBABIR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_PBA_OFFSET_BIR.PBABIR"});
   MSIX_CAP_PBA_OFFSET_BIR.PBAO.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.MSIX_CAP_PBA_OFFSET_BIR.PBAO"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PCIE_CAP_ID";
    `endif
    PCIE_CAP_ID = hqm_pf_cfg_bridge_PCIE_CAP_ID_reg::type_id::create("PCIE_CAP_ID", this);
    PCIE_CAP_ID.set_cfg(16'h00, 16'h00, 16'h00, 8'h6C, 8, 8'b00010000);
    PCIE_CAP_ID.set_space_addr("CFG", 8'h6C);
    PCIE_CAP_ID.set_space_addr("MSG", 8'h6C);
    PCIE_CAP_ID.set_space_addr("msg_bus_port", 'h21);
    PCIE_CAP_ID.set_space_addr("CFG-SB",8'h6C);
      PCIE_CAP_ID.set_space("CFG");
      PCIE_CAP_ID.set_msg_opcode("CFG-SB");
      PCIE_CAP_ID.set_fid(4'h0, "CFG-SB");
      PCIE_CAP_ID.set_user_attribute("diag_reg", "0");
      PCIE_CAP_ID.set_user_attribute("HqmIsFeatureReg", "0");
      PCIE_CAP_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PCIE_CAP_ID:dont_test") ) PCIE_CAP_ID.set_test_reg(1'b0);
      if (!add_reg( PCIE_CAP_ID )) begin
        `sla_error(get_name(), ("Could not add register PCIE_CAP_ID"));
      end
   PCIE_CAP_ID.PCIECID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_ID.PCIECID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PCIE_CAP_NEXT_CAP_PTR";
    `endif
    PCIE_CAP_NEXT_CAP_PTR = hqm_pf_cfg_bridge_PCIE_CAP_NEXT_CAP_PTR_reg::type_id::create("PCIE_CAP_NEXT_CAP_PTR", this);
    PCIE_CAP_NEXT_CAP_PTR.set_cfg(16'h00, 16'h00, 16'h00, 8'h6D, 8, 8'b10110000);
    PCIE_CAP_NEXT_CAP_PTR.set_space_addr("CFG", 8'h6D);
    PCIE_CAP_NEXT_CAP_PTR.set_space_addr("MSG", 8'h6D);
    PCIE_CAP_NEXT_CAP_PTR.set_space_addr("msg_bus_port", 'h21);
    PCIE_CAP_NEXT_CAP_PTR.set_space_addr("CFG-SB",8'h6D);
      PCIE_CAP_NEXT_CAP_PTR.set_space("CFG");
      PCIE_CAP_NEXT_CAP_PTR.set_msg_opcode("CFG-SB");
      PCIE_CAP_NEXT_CAP_PTR.set_fid(4'h0, "CFG-SB");
      PCIE_CAP_NEXT_CAP_PTR.set_user_attribute("diag_reg", "0");
      PCIE_CAP_NEXT_CAP_PTR.set_user_attribute("HqmIsFeatureReg", "0");
      PCIE_CAP_NEXT_CAP_PTR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PCIE_CAP_NEXT_CAP_PTR:dont_test") ) PCIE_CAP_NEXT_CAP_PTR.set_test_reg(1'b0);
      if (!add_reg( PCIE_CAP_NEXT_CAP_PTR )) begin
        `sla_error(get_name(), ("Could not add register PCIE_CAP_NEXT_CAP_PTR"));
      end
   PCIE_CAP_NEXT_CAP_PTR.CAP_PTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_NEXT_CAP_PTR.CAP_PTR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PCIE_CAP";
    `endif
    PCIE_CAP = hqm_pf_cfg_bridge_PCIE_CAP_reg::type_id::create("PCIE_CAP", this);
    PCIE_CAP.set_cfg(16'h00, 16'h00, 16'h00, 8'h6E, 16, 16'b0000000010010010);
    PCIE_CAP.set_space_addr("CFG", 8'h6E);
    PCIE_CAP.set_space_addr("MSG", 8'h6E);
    PCIE_CAP.set_space_addr("msg_bus_port", 'h21);
    PCIE_CAP.set_space_addr("CFG-SB",8'h6E);
      PCIE_CAP.set_space("CFG");
      PCIE_CAP.set_msg_opcode("CFG-SB");
      PCIE_CAP.set_fid(4'h0, "CFG-SB");
      PCIE_CAP.set_user_attribute("diag_reg", "0");
      PCIE_CAP.set_user_attribute("HqmIsFeatureReg", "0");
      PCIE_CAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PCIE_CAP:dont_test") ) PCIE_CAP.set_test_reg(1'b0);
      if (!add_reg( PCIE_CAP )) begin
        `sla_error(get_name(), ("Could not add register PCIE_CAP"));
      end
   PCIE_CAP.CV.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP.CV"});
   PCIE_CAP.DPT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP.DPT"});
   PCIE_CAP.SI.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP.SI"});
   PCIE_CAP.IMN.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP.IMN"});
   PCIE_CAP.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP.RESERVED"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PCIE_CAP_DEVICE_CAP";
    `endif
    PCIE_CAP_DEVICE_CAP = hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_reg::type_id::create("PCIE_CAP_DEVICE_CAP", this);
    PCIE_CAP_DEVICE_CAP.set_cfg(16'h00, 16'h00, 16'h00, 8'h70, 32, 32'b00010000000000001000000001100010);
    PCIE_CAP_DEVICE_CAP.set_space_addr("CFG", 8'h70);
    PCIE_CAP_DEVICE_CAP.set_space_addr("MSG", 8'h70);
    PCIE_CAP_DEVICE_CAP.set_space_addr("msg_bus_port", 'h21);
    PCIE_CAP_DEVICE_CAP.set_space_addr("CFG-SB",8'h70);
      PCIE_CAP_DEVICE_CAP.set_space("CFG");
      PCIE_CAP_DEVICE_CAP.set_msg_opcode("CFG-SB");
      PCIE_CAP_DEVICE_CAP.set_fid(4'h0, "CFG-SB");
      PCIE_CAP_DEVICE_CAP.set_user_attribute("diag_reg", "0");
      PCIE_CAP_DEVICE_CAP.set_user_attribute("HqmIsFeatureReg", "0");
      PCIE_CAP_DEVICE_CAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PCIE_CAP_DEVICE_CAP:dont_test") ) PCIE_CAP_DEVICE_CAP.set_test_reg(1'b0);
      if (!add_reg( PCIE_CAP_DEVICE_CAP )) begin
        `sla_error(get_name(), ("Could not add register PCIE_CAP_DEVICE_CAP"));
      end
   PCIE_CAP_DEVICE_CAP.MPS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.MPS"});
   PCIE_CAP_DEVICE_CAP.PFS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.PFS"});
   PCIE_CAP_DEVICE_CAP.ETFS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.ETFS"});
   PCIE_CAP_DEVICE_CAP.EL0L.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.EL0L"});
   PCIE_CAP_DEVICE_CAP.EL1L.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.EL1L"});
   PCIE_CAP_DEVICE_CAP.ATTN.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.ATTN"});
   PCIE_CAP_DEVICE_CAP.RBEP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.RBEP"});
   PCIE_CAP_DEVICE_CAP.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.RESERVED1"});
   PCIE_CAP_DEVICE_CAP.CSPV.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.CSPV"});
   PCIE_CAP_DEVICE_CAP.CSPS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.CSPS"});
   PCIE_CAP_DEVICE_CAP.FLR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.FLR"});
   PCIE_CAP_DEVICE_CAP.RESERVED0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP.RESERVED0"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PCIE_CAP_DEVICE_CONTROL";
    `endif
    PCIE_CAP_DEVICE_CONTROL = hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_reg::type_id::create("PCIE_CAP_DEVICE_CONTROL", this);
    PCIE_CAP_DEVICE_CONTROL.set_cfg(16'h00, 16'h00, 16'h00, 8'h74, 16, 16'b0010100100010000);
    PCIE_CAP_DEVICE_CONTROL.set_space_addr("CFG", 8'h74);
    PCIE_CAP_DEVICE_CONTROL.set_space_addr("MSG", 8'h74);
    PCIE_CAP_DEVICE_CONTROL.set_space_addr("msg_bus_port", 'h21);
    PCIE_CAP_DEVICE_CONTROL.set_space_addr("CFG-SB",8'h74);
      PCIE_CAP_DEVICE_CONTROL.set_space("CFG");
      PCIE_CAP_DEVICE_CONTROL.set_msg_opcode("CFG-SB");
      PCIE_CAP_DEVICE_CONTROL.set_fid(4'h0, "CFG-SB");
      PCIE_CAP_DEVICE_CONTROL.set_user_attribute("diag_reg", "0");
      PCIE_CAP_DEVICE_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      PCIE_CAP_DEVICE_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      PCIE_CAP_DEVICE_CONTROL.set_test_reg(0);
      if ( $test$plusargs("PCIE_CAP_DEVICE_CONTROL:dont_test") ) PCIE_CAP_DEVICE_CONTROL.set_test_reg(1'b0);
      if (!add_reg( PCIE_CAP_DEVICE_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register PCIE_CAP_DEVICE_CONTROL"));
      end
   PCIE_CAP_DEVICE_CONTROL.CERE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.CERE"});
   PCIE_CAP_DEVICE_CONTROL.NERE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.NERE"});
   PCIE_CAP_DEVICE_CONTROL.FERE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.FERE"});
   PCIE_CAP_DEVICE_CONTROL.URRO.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.URRO"});
   PCIE_CAP_DEVICE_CONTROL.ERO.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.ERO"});
   PCIE_CAP_DEVICE_CONTROL.MPS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.MPS"});
   PCIE_CAP_DEVICE_CONTROL.ETFE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.ETFE"});
   PCIE_CAP_DEVICE_CONTROL.PFE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.PFE"});
   PCIE_CAP_DEVICE_CONTROL.APME.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.APME"});
   PCIE_CAP_DEVICE_CONTROL.ENS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.ENS"});
   PCIE_CAP_DEVICE_CONTROL.MRS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.MRS"});
   PCIE_CAP_DEVICE_CONTROL.STARTFLR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL.STARTFLR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PCIE_CAP_DEVICE_STATUS";
    `endif
    PCIE_CAP_DEVICE_STATUS = hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_STATUS_reg::type_id::create("PCIE_CAP_DEVICE_STATUS", this);
    PCIE_CAP_DEVICE_STATUS.set_cfg(16'h00, 16'h00, 16'h00, 8'h76, 16, 16'b0000000000000000);
    PCIE_CAP_DEVICE_STATUS.set_space_addr("CFG", 8'h76);
    PCIE_CAP_DEVICE_STATUS.set_space_addr("MSG", 8'h76);
    PCIE_CAP_DEVICE_STATUS.set_space_addr("msg_bus_port", 'h21);
    PCIE_CAP_DEVICE_STATUS.set_space_addr("CFG-SB",8'h76);
      PCIE_CAP_DEVICE_STATUS.set_space("CFG");
      PCIE_CAP_DEVICE_STATUS.set_msg_opcode("CFG-SB");
      PCIE_CAP_DEVICE_STATUS.set_fid(4'h0, "CFG-SB");
      PCIE_CAP_DEVICE_STATUS.set_user_attribute("diag_reg", "0");
      PCIE_CAP_DEVICE_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      PCIE_CAP_DEVICE_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PCIE_CAP_DEVICE_STATUS:dont_test") ) PCIE_CAP_DEVICE_STATUS.set_test_reg(1'b0);
      if (!add_reg( PCIE_CAP_DEVICE_STATUS )) begin
        `sla_error(get_name(), ("Could not add register PCIE_CAP_DEVICE_STATUS"));
      end
   PCIE_CAP_DEVICE_STATUS.CED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.CED"});
   PCIE_CAP_DEVICE_STATUS.NED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.NED"});
   PCIE_CAP_DEVICE_STATUS.FED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.FED"});
   PCIE_CAP_DEVICE_STATUS.URD.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.URD"});
   PCIE_CAP_DEVICE_STATUS.APD.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.APD"});
   PCIE_CAP_DEVICE_STATUS.TP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.TP"});
   PCIE_CAP_DEVICE_STATUS.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_STATUS.RESERVED"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PCIE_CAP_DEVICE_CAP_2";
    `endif
    PCIE_CAP_DEVICE_CAP_2 = hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CAP_2_reg::type_id::create("PCIE_CAP_DEVICE_CAP_2", this);
    PCIE_CAP_DEVICE_CAP_2.set_cfg(16'h00, 16'h00, 16'h00, 8'h90, 32, 32'b00000000011100010000000000010000);
    PCIE_CAP_DEVICE_CAP_2.set_space_addr("CFG", 8'h90);
    PCIE_CAP_DEVICE_CAP_2.set_space_addr("MSG", 8'h90);
    PCIE_CAP_DEVICE_CAP_2.set_space_addr("msg_bus_port", 'h21);
    PCIE_CAP_DEVICE_CAP_2.set_space_addr("CFG-SB",8'h90);
      PCIE_CAP_DEVICE_CAP_2.set_space("CFG");
      PCIE_CAP_DEVICE_CAP_2.set_msg_opcode("CFG-SB");
      PCIE_CAP_DEVICE_CAP_2.set_fid(4'h0, "CFG-SB");
      PCIE_CAP_DEVICE_CAP_2.set_user_attribute("diag_reg", "0");
      PCIE_CAP_DEVICE_CAP_2.set_user_attribute("HqmIsFeatureReg", "0");
      PCIE_CAP_DEVICE_CAP_2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PCIE_CAP_DEVICE_CAP_2:dont_test") ) PCIE_CAP_DEVICE_CAP_2.set_test_reg(1'b0);
      if (!add_reg( PCIE_CAP_DEVICE_CAP_2 )) begin
        `sla_error(get_name(), ("Could not add register PCIE_CAP_DEVICE_CAP_2"));
      end
   PCIE_CAP_DEVICE_CAP_2.CTORS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.CTORS"});
   PCIE_CAP_DEVICE_CAP_2.CTODS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.CTODS"});
   PCIE_CAP_DEVICE_CAP_2.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.RESERVED"});
   PCIE_CAP_DEVICE_CAP_2.CMP10BTAGS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.CMP10BTAGS"});
   PCIE_CAP_DEVICE_CAP_2.REQ10BTAGS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.REQ10BTAGS"});
   PCIE_CAP_DEVICE_CAP_2.RESERVED2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.RESERVED2"});
   PCIE_CAP_DEVICE_CAP_2.EFFS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.EFFS"});
   PCIE_CAP_DEVICE_CAP_2.E2ETLPPS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.E2ETLPPS"});
   PCIE_CAP_DEVICE_CAP_2.MAXE2ETLPP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.MAXE2ETLPP"});
   PCIE_CAP_DEVICE_CAP_2.RESERVED3.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CAP_2.RESERVED3"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PCIE_CAP_DEVICE_CONTROL_2";
    `endif
    PCIE_CAP_DEVICE_CONTROL_2 = hqm_pf_cfg_bridge_PCIE_CAP_DEVICE_CONTROL_2_reg::type_id::create("PCIE_CAP_DEVICE_CONTROL_2", this);
    PCIE_CAP_DEVICE_CONTROL_2.set_cfg(16'h00, 16'h00, 16'h00, 8'h94, 16, 16'b0000000000000000);
    PCIE_CAP_DEVICE_CONTROL_2.set_space_addr("CFG", 8'h94);
    PCIE_CAP_DEVICE_CONTROL_2.set_space_addr("MSG", 8'h94);
    PCIE_CAP_DEVICE_CONTROL_2.set_space_addr("msg_bus_port", 'h21);
    PCIE_CAP_DEVICE_CONTROL_2.set_space_addr("CFG-SB",8'h94);
      PCIE_CAP_DEVICE_CONTROL_2.set_space("CFG");
      PCIE_CAP_DEVICE_CONTROL_2.set_msg_opcode("CFG-SB");
      PCIE_CAP_DEVICE_CONTROL_2.set_fid(4'h0, "CFG-SB");
      PCIE_CAP_DEVICE_CONTROL_2.set_user_attribute("diag_reg", "0");
      PCIE_CAP_DEVICE_CONTROL_2.set_user_attribute("HqmIsFeatureReg", "0");
      PCIE_CAP_DEVICE_CONTROL_2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PCIE_CAP_DEVICE_CONTROL_2:dont_test") ) PCIE_CAP_DEVICE_CONTROL_2.set_test_reg(1'b0);
      if (!add_reg( PCIE_CAP_DEVICE_CONTROL_2 )) begin
        `sla_error(get_name(), ("Could not add register PCIE_CAP_DEVICE_CONTROL_2"));
      end
   PCIE_CAP_DEVICE_CONTROL_2.CTOV.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL_2.CTOV"});
   PCIE_CAP_DEVICE_CONTROL_2.CTODIS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL_2.CTODIS"});
   PCIE_CAP_DEVICE_CONTROL_2.RESERVED0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL_2.RESERVED0"});
   PCIE_CAP_DEVICE_CONTROL_2.EIDO.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL_2.EIDO"});
   PCIE_CAP_DEVICE_CONTROL_2.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PCIE_CAP_DEVICE_CONTROL_2.RESERVED1"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PM_CAP_ID";
    `endif
    PM_CAP_ID = hqm_pf_cfg_bridge_PM_CAP_ID_reg::type_id::create("PM_CAP_ID", this);
    PM_CAP_ID.set_cfg(16'h00, 16'h00, 16'h00, 12'h0B0, 8, 8'b00000001);
    PM_CAP_ID.set_space_addr("CFG", 12'h0B0);
    PM_CAP_ID.set_space_addr("MSG", 12'h0B0);
    PM_CAP_ID.set_space_addr("msg_bus_port", 'h21);
    PM_CAP_ID.set_space_addr("CFG-SB",8'hB0);
      PM_CAP_ID.set_space("CFG");
      PM_CAP_ID.set_msg_opcode("CFG-SB");
      PM_CAP_ID.set_fid(4'h0, "CFG-SB");
      PM_CAP_ID.set_user_attribute("diag_reg", "0");
      PM_CAP_ID.set_user_attribute("HqmIsFeatureReg", "0");
      PM_CAP_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PM_CAP_ID:dont_test") ) PM_CAP_ID.set_test_reg(1'b0);
      if (!add_reg( PM_CAP_ID )) begin
        `sla_error(get_name(), ("Could not add register PM_CAP_ID"));
      end
   PM_CAP_ID.PMID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_ID.PMID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PM_CAP_NEXT_CAP_PTR";
    `endif
    PM_CAP_NEXT_CAP_PTR = hqm_pf_cfg_bridge_PM_CAP_NEXT_CAP_PTR_reg::type_id::create("PM_CAP_NEXT_CAP_PTR", this);
    PM_CAP_NEXT_CAP_PTR.set_cfg(16'h00, 16'h00, 16'h00, 12'h0B1, 8, 8'b00000000);
    PM_CAP_NEXT_CAP_PTR.set_space_addr("CFG", 12'h0B1);
    PM_CAP_NEXT_CAP_PTR.set_space_addr("MSG", 12'h0B1);
    PM_CAP_NEXT_CAP_PTR.set_space_addr("msg_bus_port", 'h21);
    PM_CAP_NEXT_CAP_PTR.set_space_addr("CFG-SB",8'hB1);
      PM_CAP_NEXT_CAP_PTR.set_space("CFG");
      PM_CAP_NEXT_CAP_PTR.set_msg_opcode("CFG-SB");
      PM_CAP_NEXT_CAP_PTR.set_fid(4'h0, "CFG-SB");
      PM_CAP_NEXT_CAP_PTR.set_user_attribute("diag_reg", "0");
      PM_CAP_NEXT_CAP_PTR.set_user_attribute("HqmIsFeatureReg", "0");
      PM_CAP_NEXT_CAP_PTR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PM_CAP_NEXT_CAP_PTR:dont_test") ) PM_CAP_NEXT_CAP_PTR.set_test_reg(1'b0);
      if (!add_reg( PM_CAP_NEXT_CAP_PTR )) begin
        `sla_error(get_name(), ("Could not add register PM_CAP_NEXT_CAP_PTR"));
      end
   PM_CAP_NEXT_CAP_PTR.CAP_PTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_NEXT_CAP_PTR.CAP_PTR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PM_CAP";
    `endif
    PM_CAP = hqm_pf_cfg_bridge_PM_CAP_reg::type_id::create("PM_CAP", this);
    PM_CAP.set_cfg(16'h00, 16'h00, 16'h00, 12'h0B2, 16, 16'b0000000000100011);
    PM_CAP.set_space_addr("CFG", 12'h0B2);
    PM_CAP.set_space_addr("MSG", 12'h0B2);
    PM_CAP.set_space_addr("msg_bus_port", 'h21);
    PM_CAP.set_space_addr("CFG-SB",8'hB2);
      PM_CAP.set_space("CFG");
      PM_CAP.set_msg_opcode("CFG-SB");
      PM_CAP.set_fid(4'h0, "CFG-SB");
      PM_CAP.set_user_attribute("diag_reg", "0");
      PM_CAP.set_user_attribute("HqmIsFeatureReg", "0");
      PM_CAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PM_CAP:dont_test") ) PM_CAP.set_test_reg(1'b0);
      if (!add_reg( PM_CAP )) begin
        `sla_error(get_name(), ("Could not add register PM_CAP"));
      end
   PM_CAP.PMV.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.PMV"});
   PM_CAP.PMC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.PMC"});
   PM_CAP.IROR2D0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.IROR2D0"});
   PM_CAP.DSI.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.DSI"});
   PM_CAP.AC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.AC"});
   PM_CAP.D1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.D1"});
   PM_CAP.D2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.D2"});
   PM_CAP.PME.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP.PME"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PM_CAP_CONTROL_STATUS";
    `endif
    PM_CAP_CONTROL_STATUS = hqm_pf_cfg_bridge_PM_CAP_CONTROL_STATUS_reg::type_id::create("PM_CAP_CONTROL_STATUS", this);
    PM_CAP_CONTROL_STATUS.set_cfg(16'h00, 16'h00, 16'h00, 12'h0B4, 32, 32'b00000000000000000000000000001000);
    PM_CAP_CONTROL_STATUS.set_space_addr("CFG", 12'h0B4);
    PM_CAP_CONTROL_STATUS.set_space_addr("MSG", 12'h0B4);
    PM_CAP_CONTROL_STATUS.set_space_addr("msg_bus_port", 'h21);
    PM_CAP_CONTROL_STATUS.set_space_addr("CFG-SB",8'hB4);
      PM_CAP_CONTROL_STATUS.set_space("CFG");
      PM_CAP_CONTROL_STATUS.set_msg_opcode("CFG-SB");
      PM_CAP_CONTROL_STATUS.set_fid(4'h0, "CFG-SB");
      PM_CAP_CONTROL_STATUS.set_user_attribute("diag_reg", "0");
      PM_CAP_CONTROL_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      PM_CAP_CONTROL_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PM_CAP_CONTROL_STATUS:dont_test") ) PM_CAP_CONTROL_STATUS.set_test_reg(1'b0);
      if (!add_reg( PM_CAP_CONTROL_STATUS )) begin
        `sla_error(get_name(), ("Could not add register PM_CAP_CONTROL_STATUS"));
      end
   PM_CAP_CONTROL_STATUS.PS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.PS"});
   PM_CAP_CONTROL_STATUS.RESERVED2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.RESERVED2"});
   PM_CAP_CONTROL_STATUS.NSR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.NSR"});
   PM_CAP_CONTROL_STATUS.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.RESERVED1"});
   PM_CAP_CONTROL_STATUS.PME.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.PME"});
   PM_CAP_CONTROL_STATUS.DSEL.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.DSEL"});
   PM_CAP_CONTROL_STATUS.DSC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.DSC"});
   PM_CAP_CONTROL_STATUS.PMS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.PMS"});
   PM_CAP_CONTROL_STATUS.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PM_CAP_CONTROL_STATUS.RESERVED"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ACS_CAP_ID";
    `endif
    ACS_CAP_ID = hqm_pf_cfg_bridge_ACS_CAP_ID_reg::type_id::create("ACS_CAP_ID", this);
    ACS_CAP_ID.set_cfg(16'h00, 16'h00, 16'h00, 12'h100, 16, 16'b0000000000001101);
    ACS_CAP_ID.set_space_addr("CFG", 12'h100);
    ACS_CAP_ID.set_space_addr("MSG", 12'h100);
    ACS_CAP_ID.set_space_addr("msg_bus_port", 'h21);
    ACS_CAP_ID.set_space_addr("CFG-SB",12'h100);
      ACS_CAP_ID.set_space("CFG");
      ACS_CAP_ID.set_msg_opcode("CFG-SB");
      ACS_CAP_ID.set_fid(4'h0, "CFG-SB");
      ACS_CAP_ID.set_user_attribute("diag_reg", "0");
      ACS_CAP_ID.set_user_attribute("HqmIsFeatureReg", "0");
      ACS_CAP_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ACS_CAP_ID:dont_test") ) ACS_CAP_ID.set_test_reg(1'b0);
      if (!add_reg( ACS_CAP_ID )) begin
        `sla_error(get_name(), ("Could not add register ACS_CAP_ID"));
      end
   ACS_CAP_ID.ACSCID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_ID.ACSCID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ACS_CAP_VERSION_NEXT_PTR";
    `endif
    ACS_CAP_VERSION_NEXT_PTR = hqm_pf_cfg_bridge_ACS_CAP_VERSION_NEXT_PTR_reg::type_id::create("ACS_CAP_VERSION_NEXT_PTR", this);
    ACS_CAP_VERSION_NEXT_PTR.set_cfg(16'h00, 16'h00, 16'h00, 12'h102, 16, 16'b0001010010000001);
    ACS_CAP_VERSION_NEXT_PTR.set_space_addr("CFG", 12'h102);
    ACS_CAP_VERSION_NEXT_PTR.set_space_addr("MSG", 12'h102);
    ACS_CAP_VERSION_NEXT_PTR.set_space_addr("msg_bus_port", 'h21);
    ACS_CAP_VERSION_NEXT_PTR.set_space_addr("CFG-SB",12'h102);
      ACS_CAP_VERSION_NEXT_PTR.set_space("CFG");
      ACS_CAP_VERSION_NEXT_PTR.set_msg_opcode("CFG-SB");
      ACS_CAP_VERSION_NEXT_PTR.set_fid(4'h0, "CFG-SB");
      ACS_CAP_VERSION_NEXT_PTR.set_user_attribute("diag_reg", "0");
      ACS_CAP_VERSION_NEXT_PTR.set_user_attribute("HqmIsFeatureReg", "0");
      ACS_CAP_VERSION_NEXT_PTR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ACS_CAP_VERSION_NEXT_PTR:dont_test") ) ACS_CAP_VERSION_NEXT_PTR.set_test_reg(1'b0);
      if (!add_reg( ACS_CAP_VERSION_NEXT_PTR )) begin
        `sla_error(get_name(), ("Could not add register ACS_CAP_VERSION_NEXT_PTR"));
      end
   ACS_CAP_VERSION_NEXT_PTR.ACSCV.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_VERSION_NEXT_PTR.ACSCV"});
   ACS_CAP_VERSION_NEXT_PTR.CAP_PTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_VERSION_NEXT_PTR.CAP_PTR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ACS_CAP";
    `endif
    ACS_CAP = hqm_pf_cfg_bridge_ACS_CAP_reg::type_id::create("ACS_CAP", this);
    ACS_CAP.set_cfg(16'h00, 16'h00, 16'h00, 12'h104, 16, 16'b0000000000000000);
    ACS_CAP.set_space_addr("CFG", 12'h104);
    ACS_CAP.set_space_addr("MSG", 12'h104);
    ACS_CAP.set_space_addr("msg_bus_port", 'h21);
    ACS_CAP.set_space_addr("CFG-SB",12'h104);
      ACS_CAP.set_space("CFG");
      ACS_CAP.set_msg_opcode("CFG-SB");
      ACS_CAP.set_fid(4'h0, "CFG-SB");
      ACS_CAP.set_user_attribute("diag_reg", "0");
      ACS_CAP.set_user_attribute("HqmIsFeatureReg", "0");
      ACS_CAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ACS_CAP:dont_test") ) ACS_CAP.set_test_reg(1'b0);
      if (!add_reg( ACS_CAP )) begin
        `sla_error(get_name(), ("Could not add register ACS_CAP"));
      end
   ACS_CAP.ACSSV.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSSV"});
   ACS_CAP.ACSTB.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSTB"});
   ACS_CAP.ACSP2PRR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSP2PRR"});
   ACS_CAP.ACSP2PCR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSP2PCR"});
   ACS_CAP.ACSUF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSUF"});
   ACS_CAP.ACSP2PEC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSP2PEC"});
   ACS_CAP.ACSDTP2P.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSDTP2P"});
   ACS_CAP.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.RESERVED1"});
   ACS_CAP.ACSECVS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP.ACSECVS"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ACS_CAP_CONTROL";
    `endif
    ACS_CAP_CONTROL = hqm_pf_cfg_bridge_ACS_CAP_CONTROL_reg::type_id::create("ACS_CAP_CONTROL", this);
    ACS_CAP_CONTROL.set_cfg(16'h00, 16'h00, 16'h00, 12'h106, 16, 16'b0000000000000000);
    ACS_CAP_CONTROL.set_space_addr("CFG", 12'h106);
    ACS_CAP_CONTROL.set_space_addr("MSG", 12'h106);
    ACS_CAP_CONTROL.set_space_addr("msg_bus_port", 'h21);
    ACS_CAP_CONTROL.set_space_addr("CFG-SB",12'h106);
      ACS_CAP_CONTROL.set_space("CFG");
      ACS_CAP_CONTROL.set_msg_opcode("CFG-SB");
      ACS_CAP_CONTROL.set_fid(4'h0, "CFG-SB");
      ACS_CAP_CONTROL.set_user_attribute("diag_reg", "0");
      ACS_CAP_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      ACS_CAP_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ACS_CAP_CONTROL:dont_test") ) ACS_CAP_CONTROL.set_test_reg(1'b0);
      if (!add_reg( ACS_CAP_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register ACS_CAP_CONTROL"));
      end
   ACS_CAP_CONTROL.ACSSVE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSSVE"});
   ACS_CAP_CONTROL.ACSTBE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSTBE"});
   ACS_CAP_CONTROL.ACSP2PRRE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSP2PRRE"});
   ACS_CAP_CONTROL.ACSP2PCRE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSP2PCRE"});
   ACS_CAP_CONTROL.ACSUFE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSUFE"});
   ACS_CAP_CONTROL.ACSP2PECE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSP2PECE"});
   ACS_CAP_CONTROL.ACSDTP2PE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.ACSDTP2PE"});
   ACS_CAP_CONTROL.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ACS_CAP_CONTROL.RESERVED"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PASID_CAP_ID";
    `endif
    PASID_CAP_ID = hqm_pf_cfg_bridge_PASID_CAP_ID_reg::type_id::create("PASID_CAP_ID", this);
    PASID_CAP_ID.set_cfg(16'h00, 16'h00, 16'h00, 12'h148, 16, 16'b0000000000011011);
    PASID_CAP_ID.set_space_addr("CFG", 12'h148);
    PASID_CAP_ID.set_space_addr("MSG", 12'h148);
    PASID_CAP_ID.set_space_addr("msg_bus_port", 'h21);
    PASID_CAP_ID.set_space_addr("CFG-SB",12'h148);
      PASID_CAP_ID.set_space("CFG");
      PASID_CAP_ID.set_msg_opcode("CFG-SB");
      PASID_CAP_ID.set_fid(4'h0, "CFG-SB");
      PASID_CAP_ID.set_user_attribute("diag_reg", "0");
      PASID_CAP_ID.set_user_attribute("HqmIsFeatureReg", "0");
      PASID_CAP_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PASID_CAP_ID:dont_test") ) PASID_CAP_ID.set_test_reg(1'b0);
      if (!add_reg( PASID_CAP_ID )) begin
        `sla_error(get_name(), ("Could not add register PASID_CAP_ID"));
      end
   PASID_CAP_ID.CAP_ID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP_ID.CAP_ID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PASID_CAP_VERSION_NEXT_PTR";
    `endif
    PASID_CAP_VERSION_NEXT_PTR = hqm_pf_cfg_bridge_PASID_CAP_VERSION_NEXT_PTR_reg::type_id::create("PASID_CAP_VERSION_NEXT_PTR", this);
    PASID_CAP_VERSION_NEXT_PTR.set_cfg(16'h00, 16'h00, 16'h00, 12'h14A, 16, 16'b0001010100000001);
    PASID_CAP_VERSION_NEXT_PTR.set_space_addr("CFG", 12'h14A);
    PASID_CAP_VERSION_NEXT_PTR.set_space_addr("MSG", 12'h14A);
    PASID_CAP_VERSION_NEXT_PTR.set_space_addr("msg_bus_port", 'h21);
    PASID_CAP_VERSION_NEXT_PTR.set_space_addr("CFG-SB",12'h14A);
      PASID_CAP_VERSION_NEXT_PTR.set_space("CFG");
      PASID_CAP_VERSION_NEXT_PTR.set_msg_opcode("CFG-SB");
      PASID_CAP_VERSION_NEXT_PTR.set_fid(4'h0, "CFG-SB");
      PASID_CAP_VERSION_NEXT_PTR.set_user_attribute("diag_reg", "0");
      PASID_CAP_VERSION_NEXT_PTR.set_user_attribute("HqmIsFeatureReg", "0");
      PASID_CAP_VERSION_NEXT_PTR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PASID_CAP_VERSION_NEXT_PTR:dont_test") ) PASID_CAP_VERSION_NEXT_PTR.set_test_reg(1'b0);
      if (!add_reg( PASID_CAP_VERSION_NEXT_PTR )) begin
        `sla_error(get_name(), ("Could not add register PASID_CAP_VERSION_NEXT_PTR"));
      end
   PASID_CAP_VERSION_NEXT_PTR.SRIOVCV.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP_VERSION_NEXT_PTR.SRIOVCV"});
   PASID_CAP_VERSION_NEXT_PTR.CAP_PTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP_VERSION_NEXT_PTR.CAP_PTR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PASID_CAP";
    `endif
    PASID_CAP = hqm_pf_cfg_bridge_PASID_CAP_reg::type_id::create("PASID_CAP", this);
    PASID_CAP.set_cfg(16'h00, 16'h00, 16'h00, 12'h14C, 16, 16'b0001010000000000);
    PASID_CAP.set_space_addr("CFG", 12'h14C);
    PASID_CAP.set_space_addr("MSG", 12'h14C);
    PASID_CAP.set_space_addr("msg_bus_port", 'h21);
    PASID_CAP.set_space_addr("CFG-SB",12'h14C);
      PASID_CAP.set_space("CFG");
      PASID_CAP.set_msg_opcode("CFG-SB");
      PASID_CAP.set_fid(4'h0, "CFG-SB");
      PASID_CAP.set_user_attribute("diag_reg", "0");
      PASID_CAP.set_user_attribute("HqmIsFeatureReg", "0");
      PASID_CAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PASID_CAP:dont_test") ) PASID_CAP.set_test_reg(1'b0);
      if (!add_reg( PASID_CAP )) begin
        `sla_error(get_name(), ("Could not add register PASID_CAP"));
      end
   PASID_CAP.RESERVED0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.RESERVED0"});
   PASID_CAP.EXEC_PERM_SUPP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.EXEC_PERM_SUPP"});
   PASID_CAP.PRIV_MODE_SUPP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.PRIV_MODE_SUPP"});
   PASID_CAP.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.RESERVED1"});
   PASID_CAP.MAX_PASID_WIDTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.MAX_PASID_WIDTH"});
   PASID_CAP.RESERVED2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CAP.RESERVED2"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "PASID_CONTROL";
    `endif
    PASID_CONTROL = hqm_pf_cfg_bridge_PASID_CONTROL_reg::type_id::create("PASID_CONTROL", this);
    PASID_CONTROL.set_cfg(16'h00, 16'h00, 16'h00, 12'h14E, 16, 16'b0000000000000000);
    PASID_CONTROL.set_space_addr("CFG", 12'h14E);
    PASID_CONTROL.set_space_addr("MSG", 12'h14E);
    PASID_CONTROL.set_space_addr("msg_bus_port", 'h21);
    PASID_CONTROL.set_space_addr("CFG-SB",12'h14E);
      PASID_CONTROL.set_space("CFG");
      PASID_CONTROL.set_msg_opcode("CFG-SB");
      PASID_CONTROL.set_fid(4'h0, "CFG-SB");
      PASID_CONTROL.set_user_attribute("diag_reg", "0");
      PASID_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      PASID_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("PASID_CONTROL:dont_test") ) PASID_CONTROL.set_test_reg(1'b0);
      if (!add_reg( PASID_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register PASID_CONTROL"));
      end
   PASID_CONTROL.PASID_ENABLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CONTROL.PASID_ENABLE"});
   PASID_CONTROL.EXEC_PERM_ENABLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CONTROL.EXEC_PERM_ENABLE"});
   PASID_CONTROL.PRIV_MODE_ENABLE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CONTROL.PRIV_MODE_ENABLE"});
   PASID_CONTROL.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.PASID_CONTROL.RESERVED"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DVSEC_CAP_ID";
    `endif
    DVSEC_CAP_ID = hqm_pf_cfg_bridge_DVSEC_CAP_ID_reg::type_id::create("DVSEC_CAP_ID", this);
    DVSEC_CAP_ID.set_cfg(16'h00, 16'h00, 16'h00, 12'h150, 16, 16'b0000000000100011);
    DVSEC_CAP_ID.set_space_addr("CFG", 12'h150);
    DVSEC_CAP_ID.set_space_addr("MSG", 12'h150);
    DVSEC_CAP_ID.set_space_addr("msg_bus_port", 'h21);
    DVSEC_CAP_ID.set_space_addr("CFG-SB",12'h150);
      DVSEC_CAP_ID.set_space("CFG");
      DVSEC_CAP_ID.set_msg_opcode("CFG-SB");
      DVSEC_CAP_ID.set_fid(4'h0, "CFG-SB");
      DVSEC_CAP_ID.set_user_attribute("diag_reg", "0");
      DVSEC_CAP_ID.set_user_attribute("HqmIsFeatureReg", "0");
      DVSEC_CAP_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DVSEC_CAP_ID:dont_test") ) DVSEC_CAP_ID.set_test_reg(1'b0);
      if (!add_reg( DVSEC_CAP_ID )) begin
        `sla_error(get_name(), ("Could not add register DVSEC_CAP_ID"));
      end
   DVSEC_CAP_ID.CAP_ID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_CAP_ID.CAP_ID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DVSEC_CAP_VERSION_NEXT_PTR";
    `endif
    DVSEC_CAP_VERSION_NEXT_PTR = hqm_pf_cfg_bridge_DVSEC_CAP_VERSION_NEXT_PTR_reg::type_id::create("DVSEC_CAP_VERSION_NEXT_PTR", this);
    DVSEC_CAP_VERSION_NEXT_PTR.set_cfg(16'h00, 16'h00, 16'h00, 12'h152, 16, 16'b0001011010000001);
    DVSEC_CAP_VERSION_NEXT_PTR.set_space_addr("CFG", 12'h152);
    DVSEC_CAP_VERSION_NEXT_PTR.set_space_addr("MSG", 12'h152);
    DVSEC_CAP_VERSION_NEXT_PTR.set_space_addr("msg_bus_port", 'h21);
    DVSEC_CAP_VERSION_NEXT_PTR.set_space_addr("CFG-SB",12'h152);
      DVSEC_CAP_VERSION_NEXT_PTR.set_space("CFG");
      DVSEC_CAP_VERSION_NEXT_PTR.set_msg_opcode("CFG-SB");
      DVSEC_CAP_VERSION_NEXT_PTR.set_fid(4'h0, "CFG-SB");
      DVSEC_CAP_VERSION_NEXT_PTR.set_user_attribute("diag_reg", "0");
      DVSEC_CAP_VERSION_NEXT_PTR.set_user_attribute("HqmIsFeatureReg", "0");
      DVSEC_CAP_VERSION_NEXT_PTR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DVSEC_CAP_VERSION_NEXT_PTR:dont_test") ) DVSEC_CAP_VERSION_NEXT_PTR.set_test_reg(1'b0);
      if (!add_reg( DVSEC_CAP_VERSION_NEXT_PTR )) begin
        `sla_error(get_name(), ("Could not add register DVSEC_CAP_VERSION_NEXT_PTR"));
      end
   DVSEC_CAP_VERSION_NEXT_PTR.DVSECCV.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_CAP_VERSION_NEXT_PTR.DVSECCV"});
   DVSEC_CAP_VERSION_NEXT_PTR.CAP_PTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_CAP_VERSION_NEXT_PTR.CAP_PTR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DVSEC_HDR1";
    `endif
    DVSEC_HDR1 = hqm_pf_cfg_bridge_DVSEC_HDR1_reg::type_id::create("DVSEC_HDR1", this);
    DVSEC_HDR1.set_cfg(16'h00, 16'h00, 16'h00, 12'h154, 32, 32'b00000001100000001000000010000110);
    DVSEC_HDR1.set_space_addr("CFG", 12'h154);
    DVSEC_HDR1.set_space_addr("MSG", 12'h154);
    DVSEC_HDR1.set_space_addr("msg_bus_port", 'h21);
    DVSEC_HDR1.set_space_addr("CFG-SB",12'h154);
      DVSEC_HDR1.set_space("CFG");
      DVSEC_HDR1.set_msg_opcode("CFG-SB");
      DVSEC_HDR1.set_fid(4'h0, "CFG-SB");
      DVSEC_HDR1.set_user_attribute("diag_reg", "0");
      DVSEC_HDR1.set_user_attribute("HqmIsFeatureReg", "0");
      DVSEC_HDR1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DVSEC_HDR1:dont_test") ) DVSEC_HDR1.set_test_reg(1'b0);
      if (!add_reg( DVSEC_HDR1 )) begin
        `sla_error(get_name(), ("Could not add register DVSEC_HDR1"));
      end
   DVSEC_HDR1.DVSEC_VENDOR_ID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_HDR1.DVSEC_VENDOR_ID"});
   DVSEC_HDR1.DVSEC_REVISION.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_HDR1.DVSEC_REVISION"});
   DVSEC_HDR1.DVSEC_LENGTH.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_HDR1.DVSEC_LENGTH"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "DVSEC_HDR2";
    `endif
    DVSEC_HDR2 = hqm_pf_cfg_bridge_DVSEC_HDR2_reg::type_id::create("DVSEC_HDR2", this);
    DVSEC_HDR2.set_cfg(16'h00, 16'h00, 16'h00, 12'h158, 16, 16'b0000000000000101);
    DVSEC_HDR2.set_space_addr("CFG", 12'h158);
    DVSEC_HDR2.set_space_addr("MSG", 12'h158);
    DVSEC_HDR2.set_space_addr("msg_bus_port", 'h21);
    DVSEC_HDR2.set_space_addr("CFG-SB",12'h158);
      DVSEC_HDR2.set_space("CFG");
      DVSEC_HDR2.set_msg_opcode("CFG-SB");
      DVSEC_HDR2.set_fid(4'h0, "CFG-SB");
      DVSEC_HDR2.set_user_attribute("diag_reg", "0");
      DVSEC_HDR2.set_user_attribute("HqmIsFeatureReg", "0");
      DVSEC_HDR2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("DVSEC_HDR2:dont_test") ) DVSEC_HDR2.set_test_reg(1'b0);
      if (!add_reg( DVSEC_HDR2 )) begin
        `sla_error(get_name(), ("Could not add register DVSEC_HDR2"));
      end
   DVSEC_HDR2.DVSEC_ID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.DVSEC_HDR2.DVSEC_ID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SCIOV_CAP";
    `endif
    SCIOV_CAP = hqm_pf_cfg_bridge_SCIOV_CAP_reg::type_id::create("SCIOV_CAP", this);
    SCIOV_CAP.set_cfg(16'h00, 16'h00, 16'h00, 12'h15A, 16, 16'b0000000000000000);
    SCIOV_CAP.set_space_addr("CFG", 12'h15A);
    SCIOV_CAP.set_space_addr("MSG", 12'h15A);
    SCIOV_CAP.set_space_addr("msg_bus_port", 'h21);
    SCIOV_CAP.set_space_addr("CFG-SB",12'h15A);
      SCIOV_CAP.set_space("CFG");
      SCIOV_CAP.set_msg_opcode("CFG-SB");
      SCIOV_CAP.set_fid(4'h0, "CFG-SB");
      SCIOV_CAP.set_user_attribute("diag_reg", "0");
      SCIOV_CAP.set_user_attribute("HqmIsFeatureReg", "0");
      SCIOV_CAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SCIOV_CAP:dont_test") ) SCIOV_CAP.set_test_reg(1'b0);
      if (!add_reg( SCIOV_CAP )) begin
        `sla_error(get_name(), ("Could not add register SCIOV_CAP"));
      end
   SCIOV_CAP.RESERVED0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_CAP.RESERVED0"});
   SCIOV_CAP.AIS_DEPENDENT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_CAP.AIS_DEPENDENT"});
   SCIOV_CAP.HOMOGEN_FUNC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_CAP.HOMOGEN_FUNC"});
   SCIOV_CAP.RESERVED2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_CAP.RESERVED2"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SCIOV_SUPP_PGSZ";
    `endif
    SCIOV_SUPP_PGSZ = hqm_pf_cfg_bridge_SCIOV_SUPP_PGSZ_reg::type_id::create("SCIOV_SUPP_PGSZ", this);
    SCIOV_SUPP_PGSZ.set_cfg(16'h00, 16'h00, 16'h00, 12'h15C, 32, 32'b00000000000000000000000000000001);
    SCIOV_SUPP_PGSZ.set_space_addr("CFG", 12'h15C);
    SCIOV_SUPP_PGSZ.set_space_addr("MSG", 12'h15C);
    SCIOV_SUPP_PGSZ.set_space_addr("msg_bus_port", 'h21);
    SCIOV_SUPP_PGSZ.set_space_addr("CFG-SB",12'h15C);
      SCIOV_SUPP_PGSZ.set_space("CFG");
      SCIOV_SUPP_PGSZ.set_msg_opcode("CFG-SB");
      SCIOV_SUPP_PGSZ.set_fid(4'h0, "CFG-SB");
      SCIOV_SUPP_PGSZ.set_user_attribute("diag_reg", "0");
      SCIOV_SUPP_PGSZ.set_user_attribute("HqmIsFeatureReg", "0");
      SCIOV_SUPP_PGSZ.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SCIOV_SUPP_PGSZ:dont_test") ) SCIOV_SUPP_PGSZ.set_test_reg(1'b0);
      if (!add_reg( SCIOV_SUPP_PGSZ )) begin
        `sla_error(get_name(), ("Could not add register SCIOV_SUPP_PGSZ"));
      end
   SCIOV_SUPP_PGSZ.SUPP_PGSZ.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_SUPP_PGSZ.SUPP_PGSZ"});
   SCIOV_SUPP_PGSZ.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_SUPP_PGSZ.RESERVED"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SCIOV_SYS_PGSZ";
    `endif
    SCIOV_SYS_PGSZ = hqm_pf_cfg_bridge_SCIOV_SYS_PGSZ_reg::type_id::create("SCIOV_SYS_PGSZ", this);
    SCIOV_SYS_PGSZ.set_cfg(16'h00, 16'h00, 16'h00, 12'h160, 32, 32'b00000000000000000000000000000001);
    SCIOV_SYS_PGSZ.set_space_addr("CFG", 12'h160);
    SCIOV_SYS_PGSZ.set_space_addr("MSG", 12'h160);
    SCIOV_SYS_PGSZ.set_space_addr("msg_bus_port", 'h21);
    SCIOV_SYS_PGSZ.set_space_addr("CFG-SB",12'h160);
      SCIOV_SYS_PGSZ.set_space("CFG");
      SCIOV_SYS_PGSZ.set_msg_opcode("CFG-SB");
      SCIOV_SYS_PGSZ.set_fid(4'h0, "CFG-SB");
      SCIOV_SYS_PGSZ.set_user_attribute("diag_reg", "0");
      SCIOV_SYS_PGSZ.set_user_attribute("HqmIsFeatureReg", "0");
      SCIOV_SYS_PGSZ.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SCIOV_SYS_PGSZ:dont_test") ) SCIOV_SYS_PGSZ.set_test_reg(1'b0);
      if (!add_reg( SCIOV_SYS_PGSZ )) begin
        `sla_error(get_name(), ("Could not add register SCIOV_SYS_PGSZ"));
      end
   SCIOV_SYS_PGSZ.SYS_PGSZ.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_SYS_PGSZ.SYS_PGSZ"});
   SCIOV_SYS_PGSZ.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_SYS_PGSZ.RESERVED"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "SCIOV_IMS";
    `endif
    SCIOV_IMS = hqm_pf_cfg_bridge_SCIOV_IMS_reg::type_id::create("SCIOV_IMS", this);
    SCIOV_IMS.set_cfg(16'h00, 16'h00, 16'h00, 12'h164, 32, 32'b00000000000000000000000000000001);
    SCIOV_IMS.set_space_addr("CFG", 12'h164);
    SCIOV_IMS.set_space_addr("MSG", 12'h164);
    SCIOV_IMS.set_space_addr("msg_bus_port", 'h21);
    SCIOV_IMS.set_space_addr("CFG-SB",12'h164);
      SCIOV_IMS.set_space("CFG");
      SCIOV_IMS.set_msg_opcode("CFG-SB");
      SCIOV_IMS.set_fid(4'h0, "CFG-SB");
      SCIOV_IMS.set_user_attribute("diag_reg", "0");
      SCIOV_IMS.set_user_attribute("HqmIsFeatureReg", "0");
      SCIOV_IMS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("SCIOV_IMS:dont_test") ) SCIOV_IMS.set_test_reg(1'b0);
      if (!add_reg( SCIOV_IMS )) begin
        `sla_error(get_name(), ("Could not add register SCIOV_IMS"));
      end
   SCIOV_IMS.IMS_SUPP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_IMS.IMS_SUPP"});
   SCIOV_IMS.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.SCIOV_IMS.RESERVED"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_ID";
    `endif
    AER_CAP_ID = hqm_pf_cfg_bridge_AER_CAP_ID_reg::type_id::create("AER_CAP_ID", this);
    AER_CAP_ID.set_cfg(16'h00, 16'h00, 16'h00, 12'h168, 16, 16'b0000000000000001);
    AER_CAP_ID.set_space_addr("CFG", 12'h168);
    AER_CAP_ID.set_space_addr("MSG", 12'h168);
    AER_CAP_ID.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_ID.set_space_addr("CFG-SB",12'h168);
      AER_CAP_ID.set_space("CFG");
      AER_CAP_ID.set_msg_opcode("CFG-SB");
      AER_CAP_ID.set_fid(4'h0, "CFG-SB");
      AER_CAP_ID.set_user_attribute("diag_reg", "0");
      AER_CAP_ID.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_ID:dont_test") ) AER_CAP_ID.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_ID )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_ID"));
      end
   AER_CAP_ID.PCIEAERCID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ID.PCIEAERCID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_VERSION_NEXT_PTR";
    `endif
    AER_CAP_VERSION_NEXT_PTR = hqm_pf_cfg_bridge_AER_CAP_VERSION_NEXT_PTR_reg::type_id::create("AER_CAP_VERSION_NEXT_PTR", this);
    AER_CAP_VERSION_NEXT_PTR.set_cfg(16'h00, 16'h00, 16'h00, 12'h16A, 16, 16'b0001101100000010);
    AER_CAP_VERSION_NEXT_PTR.set_space_addr("CFG", 12'h16A);
    AER_CAP_VERSION_NEXT_PTR.set_space_addr("MSG", 12'h16A);
    AER_CAP_VERSION_NEXT_PTR.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_VERSION_NEXT_PTR.set_space_addr("CFG-SB",12'h16A);
      AER_CAP_VERSION_NEXT_PTR.set_space("CFG");
      AER_CAP_VERSION_NEXT_PTR.set_msg_opcode("CFG-SB");
      AER_CAP_VERSION_NEXT_PTR.set_fid(4'h0, "CFG-SB");
      AER_CAP_VERSION_NEXT_PTR.set_user_attribute("diag_reg", "0");
      AER_CAP_VERSION_NEXT_PTR.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_VERSION_NEXT_PTR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_VERSION_NEXT_PTR:dont_test") ) AER_CAP_VERSION_NEXT_PTR.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_VERSION_NEXT_PTR )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_VERSION_NEXT_PTR"));
      end
   AER_CAP_VERSION_NEXT_PTR.PCIEAERCVN.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_VERSION_NEXT_PTR.PCIEAERCVN"});
   AER_CAP_VERSION_NEXT_PTR.CAP_PTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_VERSION_NEXT_PTR.CAP_PTR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_UNCORR_ERR_STATUS";
    `endif
    AER_CAP_UNCORR_ERR_STATUS = hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_STATUS_reg::type_id::create("AER_CAP_UNCORR_ERR_STATUS", this);
    AER_CAP_UNCORR_ERR_STATUS.set_cfg(16'h00, 16'h00, 16'h00, 12'h16C, 32, 32'b00000000000000000000000000000000);
    AER_CAP_UNCORR_ERR_STATUS.set_space_addr("CFG", 12'h16C);
    AER_CAP_UNCORR_ERR_STATUS.set_space_addr("MSG", 12'h16C);
    AER_CAP_UNCORR_ERR_STATUS.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_UNCORR_ERR_STATUS.set_space_addr("CFG-SB",12'h16C);
      AER_CAP_UNCORR_ERR_STATUS.set_space("CFG");
      AER_CAP_UNCORR_ERR_STATUS.set_msg_opcode("CFG-SB");
      AER_CAP_UNCORR_ERR_STATUS.set_fid(4'h0, "CFG-SB");
      AER_CAP_UNCORR_ERR_STATUS.set_user_attribute("diag_reg", "0");
      AER_CAP_UNCORR_ERR_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_UNCORR_ERR_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_UNCORR_ERR_STATUS:dont_test") ) AER_CAP_UNCORR_ERR_STATUS.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_UNCORR_ERR_STATUS )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_UNCORR_ERR_STATUS"));
      end
   AER_CAP_UNCORR_ERR_STATUS.RESERVED2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.RESERVED2"});
   AER_CAP_UNCORR_ERR_STATUS.DLPE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.DLPE"});
   AER_CAP_UNCORR_ERR_STATUS.SDES.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.SDES"});
   AER_CAP_UNCORR_ERR_STATUS.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.RESERVED1"});
   AER_CAP_UNCORR_ERR_STATUS.PTLPR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.PTLPR"});
   AER_CAP_UNCORR_ERR_STATUS.FCPES.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.FCPES"});
   AER_CAP_UNCORR_ERR_STATUS.CT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.CT"});
   AER_CAP_UNCORR_ERR_STATUS.CA.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.CA"});
   AER_CAP_UNCORR_ERR_STATUS.EC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.EC"});
   AER_CAP_UNCORR_ERR_STATUS.RO.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.RO"});
   AER_CAP_UNCORR_ERR_STATUS.MTLP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.MTLP"});
   AER_CAP_UNCORR_ERR_STATUS.ECRCC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.ECRCC"});
   AER_CAP_UNCORR_ERR_STATUS.UR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.UR"});
   AER_CAP_UNCORR_ERR_STATUS.RESERVED3.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.RESERVED3"});
   AER_CAP_UNCORR_ERR_STATUS.IEUNC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.IEUNC"});
   AER_CAP_UNCORR_ERR_STATUS.RESERVED0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_STATUS.RESERVED0"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_UNCORR_ERR_MASK";
    `endif
    AER_CAP_UNCORR_ERR_MASK = hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_MASK_reg::type_id::create("AER_CAP_UNCORR_ERR_MASK", this);
    AER_CAP_UNCORR_ERR_MASK.set_cfg(16'h00, 16'h00, 16'h00, 12'h170, 32, 32'b00000000010000000000000000000000);
    AER_CAP_UNCORR_ERR_MASK.set_space_addr("CFG", 12'h170);
    AER_CAP_UNCORR_ERR_MASK.set_space_addr("MSG", 12'h170);
    AER_CAP_UNCORR_ERR_MASK.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_UNCORR_ERR_MASK.set_space_addr("CFG-SB",12'h170);
      AER_CAP_UNCORR_ERR_MASK.set_space("CFG");
      AER_CAP_UNCORR_ERR_MASK.set_msg_opcode("CFG-SB");
      AER_CAP_UNCORR_ERR_MASK.set_fid(4'h0, "CFG-SB");
      AER_CAP_UNCORR_ERR_MASK.set_user_attribute("diag_reg", "0");
      AER_CAP_UNCORR_ERR_MASK.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_UNCORR_ERR_MASK.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_UNCORR_ERR_MASK:dont_test") ) AER_CAP_UNCORR_ERR_MASK.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_UNCORR_ERR_MASK )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_UNCORR_ERR_MASK"));
      end
   AER_CAP_UNCORR_ERR_MASK.RESERVED2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.RESERVED2"});
   AER_CAP_UNCORR_ERR_MASK.DLPE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.DLPE"});
   AER_CAP_UNCORR_ERR_MASK.SDES.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.SDES"});
   AER_CAP_UNCORR_ERR_MASK.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.RESERVED1"});
   AER_CAP_UNCORR_ERR_MASK.PTLPR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.PTLPR"});
   AER_CAP_UNCORR_ERR_MASK.FCPES.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.FCPES"});
   AER_CAP_UNCORR_ERR_MASK.CT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.CT"});
   AER_CAP_UNCORR_ERR_MASK.CA.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.CA"});
   AER_CAP_UNCORR_ERR_MASK.EC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.EC"});
   AER_CAP_UNCORR_ERR_MASK.RO.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.RO"});
   AER_CAP_UNCORR_ERR_MASK.MTLP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.MTLP"});
   AER_CAP_UNCORR_ERR_MASK.ECRCC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.ECRCC"});
   AER_CAP_UNCORR_ERR_MASK.UR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.UR"});
   AER_CAP_UNCORR_ERR_MASK.RESERVED3.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.RESERVED3"});
   AER_CAP_UNCORR_ERR_MASK.IEUNC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.IEUNC"});
   AER_CAP_UNCORR_ERR_MASK.RESERVED0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_MASK.RESERVED0"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_UNCORR_ERR_SEV";
    `endif
    AER_CAP_UNCORR_ERR_SEV = hqm_pf_cfg_bridge_AER_CAP_UNCORR_ERR_SEV_reg::type_id::create("AER_CAP_UNCORR_ERR_SEV", this);
    AER_CAP_UNCORR_ERR_SEV.set_cfg(16'h00, 16'h00, 16'h00, 12'h174, 32, 32'b00000000010001000000000000000000);
    AER_CAP_UNCORR_ERR_SEV.set_space_addr("CFG", 12'h174);
    AER_CAP_UNCORR_ERR_SEV.set_space_addr("MSG", 12'h174);
    AER_CAP_UNCORR_ERR_SEV.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_UNCORR_ERR_SEV.set_space_addr("CFG-SB",12'h174);
      AER_CAP_UNCORR_ERR_SEV.set_space("CFG");
      AER_CAP_UNCORR_ERR_SEV.set_msg_opcode("CFG-SB");
      AER_CAP_UNCORR_ERR_SEV.set_fid(4'h0, "CFG-SB");
      AER_CAP_UNCORR_ERR_SEV.set_user_attribute("diag_reg", "0");
      AER_CAP_UNCORR_ERR_SEV.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_UNCORR_ERR_SEV.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_UNCORR_ERR_SEV:dont_test") ) AER_CAP_UNCORR_ERR_SEV.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_UNCORR_ERR_SEV )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_UNCORR_ERR_SEV"));
      end
   AER_CAP_UNCORR_ERR_SEV.RESERVED2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.RESERVED2"});
   AER_CAP_UNCORR_ERR_SEV.DLPE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.DLPE"});
   AER_CAP_UNCORR_ERR_SEV.SDES.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.SDES"});
   AER_CAP_UNCORR_ERR_SEV.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.RESERVED1"});
   AER_CAP_UNCORR_ERR_SEV.PTLPR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.PTLPR"});
   AER_CAP_UNCORR_ERR_SEV.FCPES.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.FCPES"});
   AER_CAP_UNCORR_ERR_SEV.CT.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.CT"});
   AER_CAP_UNCORR_ERR_SEV.CA.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.CA"});
   AER_CAP_UNCORR_ERR_SEV.EC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.EC"});
   AER_CAP_UNCORR_ERR_SEV.RO.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.RO"});
   AER_CAP_UNCORR_ERR_SEV.MTLP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.MTLP"});
   AER_CAP_UNCORR_ERR_SEV.ECRCC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.ECRCC"});
   AER_CAP_UNCORR_ERR_SEV.UR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.UR"});
   AER_CAP_UNCORR_ERR_SEV.RESERVED3.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.RESERVED3"});
   AER_CAP_UNCORR_ERR_SEV.IEUNC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.IEUNC"});
   AER_CAP_UNCORR_ERR_SEV.RESERVED0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_UNCORR_ERR_SEV.RESERVED0"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_CORR_ERR_STATUS";
    `endif
    AER_CAP_CORR_ERR_STATUS = hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_STATUS_reg::type_id::create("AER_CAP_CORR_ERR_STATUS", this);
    AER_CAP_CORR_ERR_STATUS.set_cfg(16'h00, 16'h00, 16'h00, 12'h178, 32, 32'b00000000000000000000000000000000);
    AER_CAP_CORR_ERR_STATUS.set_space_addr("CFG", 12'h178);
    AER_CAP_CORR_ERR_STATUS.set_space_addr("MSG", 12'h178);
    AER_CAP_CORR_ERR_STATUS.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_CORR_ERR_STATUS.set_space_addr("CFG-SB",12'h178);
      AER_CAP_CORR_ERR_STATUS.set_space("CFG");
      AER_CAP_CORR_ERR_STATUS.set_msg_opcode("CFG-SB");
      AER_CAP_CORR_ERR_STATUS.set_fid(4'h0, "CFG-SB");
      AER_CAP_CORR_ERR_STATUS.set_user_attribute("diag_reg", "0");
      AER_CAP_CORR_ERR_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_CORR_ERR_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_CORR_ERR_STATUS:dont_test") ) AER_CAP_CORR_ERR_STATUS.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_CORR_ERR_STATUS )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_CORR_ERR_STATUS"));
      end
   AER_CAP_CORR_ERR_STATUS.RES.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RES"});
   AER_CAP_CORR_ERR_STATUS.RESERVED2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RESERVED2"});
   AER_CAP_CORR_ERR_STATUS.DLPE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.DLPE"});
   AER_CAP_CORR_ERR_STATUS.BDLLPS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.BDLLPS"});
   AER_CAP_CORR_ERR_STATUS.RNRS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RNRS"});
   AER_CAP_CORR_ERR_STATUS.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RESERVED1"});
   AER_CAP_CORR_ERR_STATUS.RTTS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RTTS"});
   AER_CAP_CORR_ERR_STATUS.ANFES.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.ANFES"});
   AER_CAP_CORR_ERR_STATUS.IECOR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.IECOR"});
   AER_CAP_CORR_ERR_STATUS.RESERVED0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_STATUS.RESERVED0"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_CORR_ERR_MASK";
    `endif
    AER_CAP_CORR_ERR_MASK = hqm_pf_cfg_bridge_AER_CAP_CORR_ERR_MASK_reg::type_id::create("AER_CAP_CORR_ERR_MASK", this);
    AER_CAP_CORR_ERR_MASK.set_cfg(16'h00, 16'h00, 16'h00, 12'h17C, 32, 32'b00000000000000000110000000000000);
    AER_CAP_CORR_ERR_MASK.set_space_addr("CFG", 12'h17C);
    AER_CAP_CORR_ERR_MASK.set_space_addr("MSG", 12'h17C);
    AER_CAP_CORR_ERR_MASK.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_CORR_ERR_MASK.set_space_addr("CFG-SB",12'h17C);
      AER_CAP_CORR_ERR_MASK.set_space("CFG");
      AER_CAP_CORR_ERR_MASK.set_msg_opcode("CFG-SB");
      AER_CAP_CORR_ERR_MASK.set_fid(4'h0, "CFG-SB");
      AER_CAP_CORR_ERR_MASK.set_user_attribute("diag_reg", "0");
      AER_CAP_CORR_ERR_MASK.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_CORR_ERR_MASK.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_CORR_ERR_MASK:dont_test") ) AER_CAP_CORR_ERR_MASK.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_CORR_ERR_MASK )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_CORR_ERR_MASK"));
      end
   AER_CAP_CORR_ERR_MASK.RES.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RES"});
   AER_CAP_CORR_ERR_MASK.RESERVED2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RESERVED2"});
   AER_CAP_CORR_ERR_MASK.DLPE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.DLPE"});
   AER_CAP_CORR_ERR_MASK.BDLLPS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.BDLLPS"});
   AER_CAP_CORR_ERR_MASK.RNRS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RNRS"});
   AER_CAP_CORR_ERR_MASK.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RESERVED1"});
   AER_CAP_CORR_ERR_MASK.RTTS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RTTS"});
   AER_CAP_CORR_ERR_MASK.ANFES.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.ANFES"});
   AER_CAP_CORR_ERR_MASK.IECOR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.IECOR"});
   AER_CAP_CORR_ERR_MASK.RESERVED0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CORR_ERR_MASK.RESERVED0"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_CONTROL";
    `endif
    AER_CAP_CONTROL = hqm_pf_cfg_bridge_AER_CAP_CONTROL_reg::type_id::create("AER_CAP_CONTROL", this);
    AER_CAP_CONTROL.set_cfg(16'h00, 16'h00, 16'h00, 12'h180, 32, 32'b00000000000000000000000000000000);
    AER_CAP_CONTROL.set_space_addr("CFG", 12'h180);
    AER_CAP_CONTROL.set_space_addr("MSG", 12'h180);
    AER_CAP_CONTROL.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_CONTROL.set_space_addr("CFG-SB",12'h180);
      AER_CAP_CONTROL.set_space("CFG");
      AER_CAP_CONTROL.set_msg_opcode("CFG-SB");
      AER_CAP_CONTROL.set_fid(4'h0, "CFG-SB");
      AER_CAP_CONTROL.set_user_attribute("diag_reg", "0");
      AER_CAP_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_CONTROL:dont_test") ) AER_CAP_CONTROL.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_CONTROL"));
      end
   AER_CAP_CONTROL.TFEP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.TFEP"});
   AER_CAP_CONTROL.ECRCGC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.ECRCGC"});
   AER_CAP_CONTROL.ECRCGE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.ECRCGE"});
   AER_CAP_CONTROL.ECRCCC.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.ECRCCC"});
   AER_CAP_CONTROL.ECRCCE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.ECRCCE"});
   AER_CAP_CONTROL.Multhdrrc.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.Multhdrrc"});
   AER_CAP_CONTROL.RESERVED.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.RESERVED"});
   AER_CAP_CONTROL.TLPPFLOGP.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.TLPPFLOGP"});
   AER_CAP_CONTROL.RESERVED1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_CONTROL.RESERVED1"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_HEADER_LOG_0";
    `endif
    AER_CAP_HEADER_LOG_0 = hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_0_reg::type_id::create("AER_CAP_HEADER_LOG_0", this);
    AER_CAP_HEADER_LOG_0.set_cfg(16'h00, 16'h00, 16'h00, 12'h184, 32, 32'b00000000000000000000000000000000);
    AER_CAP_HEADER_LOG_0.set_space_addr("CFG", 12'h184);
    AER_CAP_HEADER_LOG_0.set_space_addr("MSG", 12'h184);
    AER_CAP_HEADER_LOG_0.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_HEADER_LOG_0.set_space_addr("CFG-SB",12'h184);
      AER_CAP_HEADER_LOG_0.set_space("CFG");
      AER_CAP_HEADER_LOG_0.set_msg_opcode("CFG-SB");
      AER_CAP_HEADER_LOG_0.set_fid(4'h0, "CFG-SB");
      AER_CAP_HEADER_LOG_0.set_user_attribute("diag_reg", "0");
      AER_CAP_HEADER_LOG_0.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_HEADER_LOG_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_HEADER_LOG_0:dont_test") ) AER_CAP_HEADER_LOG_0.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_HEADER_LOG_0 )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_HEADER_LOG_0"));
      end
   AER_CAP_HEADER_LOG_0.HDRLOGDW0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_HEADER_LOG_0.HDRLOGDW0"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_HEADER_LOG_1";
    `endif
    AER_CAP_HEADER_LOG_1 = hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_1_reg::type_id::create("AER_CAP_HEADER_LOG_1", this);
    AER_CAP_HEADER_LOG_1.set_cfg(16'h00, 16'h00, 16'h00, 12'h188, 32, 32'b00000000000000000000000000000000);
    AER_CAP_HEADER_LOG_1.set_space_addr("CFG", 12'h188);
    AER_CAP_HEADER_LOG_1.set_space_addr("MSG", 12'h188);
    AER_CAP_HEADER_LOG_1.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_HEADER_LOG_1.set_space_addr("CFG-SB",12'h188);
      AER_CAP_HEADER_LOG_1.set_space("CFG");
      AER_CAP_HEADER_LOG_1.set_msg_opcode("CFG-SB");
      AER_CAP_HEADER_LOG_1.set_fid(4'h0, "CFG-SB");
      AER_CAP_HEADER_LOG_1.set_user_attribute("diag_reg", "0");
      AER_CAP_HEADER_LOG_1.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_HEADER_LOG_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_HEADER_LOG_1:dont_test") ) AER_CAP_HEADER_LOG_1.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_HEADER_LOG_1 )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_HEADER_LOG_1"));
      end
   AER_CAP_HEADER_LOG_1.HDRLOGDW1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_HEADER_LOG_1.HDRLOGDW1"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_HEADER_LOG_2";
    `endif
    AER_CAP_HEADER_LOG_2 = hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_2_reg::type_id::create("AER_CAP_HEADER_LOG_2", this);
    AER_CAP_HEADER_LOG_2.set_cfg(16'h00, 16'h00, 16'h00, 12'h18C, 32, 32'b00000000000000000000000000000000);
    AER_CAP_HEADER_LOG_2.set_space_addr("CFG", 12'h18C);
    AER_CAP_HEADER_LOG_2.set_space_addr("MSG", 12'h18C);
    AER_CAP_HEADER_LOG_2.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_HEADER_LOG_2.set_space_addr("CFG-SB",12'h18C);
      AER_CAP_HEADER_LOG_2.set_space("CFG");
      AER_CAP_HEADER_LOG_2.set_msg_opcode("CFG-SB");
      AER_CAP_HEADER_LOG_2.set_fid(4'h0, "CFG-SB");
      AER_CAP_HEADER_LOG_2.set_user_attribute("diag_reg", "0");
      AER_CAP_HEADER_LOG_2.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_HEADER_LOG_2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_HEADER_LOG_2:dont_test") ) AER_CAP_HEADER_LOG_2.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_HEADER_LOG_2 )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_HEADER_LOG_2"));
      end
   AER_CAP_HEADER_LOG_2.HDRLOGDW2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_HEADER_LOG_2.HDRLOGDW2"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_HEADER_LOG_3";
    `endif
    AER_CAP_HEADER_LOG_3 = hqm_pf_cfg_bridge_AER_CAP_HEADER_LOG_3_reg::type_id::create("AER_CAP_HEADER_LOG_3", this);
    AER_CAP_HEADER_LOG_3.set_cfg(16'h00, 16'h00, 16'h00, 12'h190, 32, 32'b00000000000000000000000000000000);
    AER_CAP_HEADER_LOG_3.set_space_addr("CFG", 12'h190);
    AER_CAP_HEADER_LOG_3.set_space_addr("MSG", 12'h190);
    AER_CAP_HEADER_LOG_3.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_HEADER_LOG_3.set_space_addr("CFG-SB",12'h190);
      AER_CAP_HEADER_LOG_3.set_space("CFG");
      AER_CAP_HEADER_LOG_3.set_msg_opcode("CFG-SB");
      AER_CAP_HEADER_LOG_3.set_fid(4'h0, "CFG-SB");
      AER_CAP_HEADER_LOG_3.set_user_attribute("diag_reg", "0");
      AER_CAP_HEADER_LOG_3.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_HEADER_LOG_3.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_HEADER_LOG_3:dont_test") ) AER_CAP_HEADER_LOG_3.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_HEADER_LOG_3 )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_HEADER_LOG_3"));
      end
   AER_CAP_HEADER_LOG_3.HDRLOGDW3.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_HEADER_LOG_3.HDRLOGDW3"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_ROOT_ERROR_COMMAND";
    `endif
    AER_CAP_ROOT_ERROR_COMMAND = hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_COMMAND_reg::type_id::create("AER_CAP_ROOT_ERROR_COMMAND", this);
    AER_CAP_ROOT_ERROR_COMMAND.set_cfg(16'h00, 16'h00, 16'h00, 12'h194, 32, 32'b00000000000000000000000000000000);
    AER_CAP_ROOT_ERROR_COMMAND.set_space_addr("CFG", 12'h194);
    AER_CAP_ROOT_ERROR_COMMAND.set_space_addr("MSG", 12'h194);
    AER_CAP_ROOT_ERROR_COMMAND.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_ROOT_ERROR_COMMAND.set_space_addr("CFG-SB",12'h194);
      AER_CAP_ROOT_ERROR_COMMAND.set_space("CFG");
      AER_CAP_ROOT_ERROR_COMMAND.set_msg_opcode("CFG-SB");
      AER_CAP_ROOT_ERROR_COMMAND.set_fid(4'h0, "CFG-SB");
      AER_CAP_ROOT_ERROR_COMMAND.set_user_attribute("diag_reg", "0");
      AER_CAP_ROOT_ERROR_COMMAND.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_ROOT_ERROR_COMMAND.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_ROOT_ERROR_COMMAND:dont_test") ) AER_CAP_ROOT_ERROR_COMMAND.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_ROOT_ERROR_COMMAND )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_ROOT_ERROR_COMMAND"));
      end
   AER_CAP_ROOT_ERROR_COMMAND.CERE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_COMMAND.CERE"});
   AER_CAP_ROOT_ERROR_COMMAND.NERE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_COMMAND.NERE"});
   AER_CAP_ROOT_ERROR_COMMAND.FERE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_COMMAND.FERE"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_ROOT_ERROR_STATUS";
    `endif
    AER_CAP_ROOT_ERROR_STATUS = hqm_pf_cfg_bridge_AER_CAP_ROOT_ERROR_STATUS_reg::type_id::create("AER_CAP_ROOT_ERROR_STATUS", this);
    AER_CAP_ROOT_ERROR_STATUS.set_cfg(16'h00, 16'h00, 16'h00, 12'h198, 32, 32'b00000000000000000000000000000000);
    AER_CAP_ROOT_ERROR_STATUS.set_space_addr("CFG", 12'h198);
    AER_CAP_ROOT_ERROR_STATUS.set_space_addr("MSG", 12'h198);
    AER_CAP_ROOT_ERROR_STATUS.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_ROOT_ERROR_STATUS.set_space_addr("CFG-SB",12'h198);
      AER_CAP_ROOT_ERROR_STATUS.set_space("CFG");
      AER_CAP_ROOT_ERROR_STATUS.set_msg_opcode("CFG-SB");
      AER_CAP_ROOT_ERROR_STATUS.set_fid(4'h0, "CFG-SB");
      AER_CAP_ROOT_ERROR_STATUS.set_user_attribute("diag_reg", "0");
      AER_CAP_ROOT_ERROR_STATUS.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_ROOT_ERROR_STATUS.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_ROOT_ERROR_STATUS:dont_test") ) AER_CAP_ROOT_ERROR_STATUS.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_ROOT_ERROR_STATUS )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_ROOT_ERROR_STATUS"));
      end
   AER_CAP_ROOT_ERROR_STATUS.CER.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.CER"});
   AER_CAP_ROOT_ERROR_STATUS.MCER.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.MCER"});
   AER_CAP_ROOT_ERROR_STATUS.FNER.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.FNER"});
   AER_CAP_ROOT_ERROR_STATUS.MFNER.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.MFNER"});
   AER_CAP_ROOT_ERROR_STATUS.FUF.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.FUF"});
   AER_CAP_ROOT_ERROR_STATUS.NER.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.NER"});
   AER_CAP_ROOT_ERROR_STATUS.FER.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.FER"});
   AER_CAP_ROOT_ERROR_STATUS.AEIMN.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ROOT_ERROR_STATUS.AEIMN"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_ERROR_SOURCE_IDENT";
    `endif
    AER_CAP_ERROR_SOURCE_IDENT = hqm_pf_cfg_bridge_AER_CAP_ERROR_SOURCE_IDENT_reg::type_id::create("AER_CAP_ERROR_SOURCE_IDENT", this);
    AER_CAP_ERROR_SOURCE_IDENT.set_cfg(16'h00, 16'h00, 16'h00, 12'h19C, 32, 32'b00000000000000000000000000000000);
    AER_CAP_ERROR_SOURCE_IDENT.set_space_addr("CFG", 12'h19C);
    AER_CAP_ERROR_SOURCE_IDENT.set_space_addr("MSG", 12'h19C);
    AER_CAP_ERROR_SOURCE_IDENT.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_ERROR_SOURCE_IDENT.set_space_addr("CFG-SB",12'h19C);
      AER_CAP_ERROR_SOURCE_IDENT.set_space("CFG");
      AER_CAP_ERROR_SOURCE_IDENT.set_msg_opcode("CFG-SB");
      AER_CAP_ERROR_SOURCE_IDENT.set_fid(4'h0, "CFG-SB");
      AER_CAP_ERROR_SOURCE_IDENT.set_user_attribute("diag_reg", "0");
      AER_CAP_ERROR_SOURCE_IDENT.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_ERROR_SOURCE_IDENT.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_ERROR_SOURCE_IDENT:dont_test") ) AER_CAP_ERROR_SOURCE_IDENT.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_ERROR_SOURCE_IDENT )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_ERROR_SOURCE_IDENT"));
      end
   AER_CAP_ERROR_SOURCE_IDENT.CSID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ERROR_SOURCE_IDENT.CSID"});
   AER_CAP_ERROR_SOURCE_IDENT.FNSID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_ERROR_SOURCE_IDENT.FNSID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_TLP_PREFIX_LOG_0";
    `endif
    AER_CAP_TLP_PREFIX_LOG_0 = hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_0_reg::type_id::create("AER_CAP_TLP_PREFIX_LOG_0", this);
    AER_CAP_TLP_PREFIX_LOG_0.set_cfg(16'h00, 16'h00, 16'h00, 12'h1A0, 32, 32'b00000000000000000000000000000000);
    AER_CAP_TLP_PREFIX_LOG_0.set_space_addr("CFG", 12'h1A0);
    AER_CAP_TLP_PREFIX_LOG_0.set_space_addr("MSG", 12'h1A0);
    AER_CAP_TLP_PREFIX_LOG_0.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_TLP_PREFIX_LOG_0.set_space_addr("CFG-SB",12'h1A0);
      AER_CAP_TLP_PREFIX_LOG_0.set_space("CFG");
      AER_CAP_TLP_PREFIX_LOG_0.set_msg_opcode("CFG-SB");
      AER_CAP_TLP_PREFIX_LOG_0.set_fid(4'h0, "CFG-SB");
      AER_CAP_TLP_PREFIX_LOG_0.set_user_attribute("diag_reg", "0");
      AER_CAP_TLP_PREFIX_LOG_0.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_TLP_PREFIX_LOG_0.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_TLP_PREFIX_LOG_0:dont_test") ) AER_CAP_TLP_PREFIX_LOG_0.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_TLP_PREFIX_LOG_0 )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_TLP_PREFIX_LOG_0"));
      end
   AER_CAP_TLP_PREFIX_LOG_0.TLPPFLOG0.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_TLP_PREFIX_LOG_0.TLPPFLOG0"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_TLP_PREFIX_LOG_1";
    `endif
    AER_CAP_TLP_PREFIX_LOG_1 = hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_1_reg::type_id::create("AER_CAP_TLP_PREFIX_LOG_1", this);
    AER_CAP_TLP_PREFIX_LOG_1.set_cfg(16'h00, 16'h00, 16'h00, 12'h1A4, 32, 32'b00000000000000000000000000000000);
    AER_CAP_TLP_PREFIX_LOG_1.set_space_addr("CFG", 12'h1A4);
    AER_CAP_TLP_PREFIX_LOG_1.set_space_addr("MSG", 12'h1A4);
    AER_CAP_TLP_PREFIX_LOG_1.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_TLP_PREFIX_LOG_1.set_space_addr("CFG-SB",12'h1A4);
      AER_CAP_TLP_PREFIX_LOG_1.set_space("CFG");
      AER_CAP_TLP_PREFIX_LOG_1.set_msg_opcode("CFG-SB");
      AER_CAP_TLP_PREFIX_LOG_1.set_fid(4'h0, "CFG-SB");
      AER_CAP_TLP_PREFIX_LOG_1.set_user_attribute("diag_reg", "0");
      AER_CAP_TLP_PREFIX_LOG_1.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_TLP_PREFIX_LOG_1.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_TLP_PREFIX_LOG_1:dont_test") ) AER_CAP_TLP_PREFIX_LOG_1.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_TLP_PREFIX_LOG_1 )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_TLP_PREFIX_LOG_1"));
      end
   AER_CAP_TLP_PREFIX_LOG_1.TLPPFLOG1.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_TLP_PREFIX_LOG_1.TLPPFLOG1"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_TLP_PREFIX_LOG_2";
    `endif
    AER_CAP_TLP_PREFIX_LOG_2 = hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_2_reg::type_id::create("AER_CAP_TLP_PREFIX_LOG_2", this);
    AER_CAP_TLP_PREFIX_LOG_2.set_cfg(16'h00, 16'h00, 16'h00, 12'h1A8, 32, 32'b00000000000000000000000000000000);
    AER_CAP_TLP_PREFIX_LOG_2.set_space_addr("CFG", 12'h1A8);
    AER_CAP_TLP_PREFIX_LOG_2.set_space_addr("MSG", 12'h1A8);
    AER_CAP_TLP_PREFIX_LOG_2.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_TLP_PREFIX_LOG_2.set_space_addr("CFG-SB",12'h1A8);
      AER_CAP_TLP_PREFIX_LOG_2.set_space("CFG");
      AER_CAP_TLP_PREFIX_LOG_2.set_msg_opcode("CFG-SB");
      AER_CAP_TLP_PREFIX_LOG_2.set_fid(4'h0, "CFG-SB");
      AER_CAP_TLP_PREFIX_LOG_2.set_user_attribute("diag_reg", "0");
      AER_CAP_TLP_PREFIX_LOG_2.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_TLP_PREFIX_LOG_2.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_TLP_PREFIX_LOG_2:dont_test") ) AER_CAP_TLP_PREFIX_LOG_2.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_TLP_PREFIX_LOG_2 )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_TLP_PREFIX_LOG_2"));
      end
   AER_CAP_TLP_PREFIX_LOG_2.TLPPFLOG2.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_TLP_PREFIX_LOG_2.TLPPFLOG2"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "AER_CAP_TLP_PREFIX_LOG_3";
    `endif
    AER_CAP_TLP_PREFIX_LOG_3 = hqm_pf_cfg_bridge_AER_CAP_TLP_PREFIX_LOG_3_reg::type_id::create("AER_CAP_TLP_PREFIX_LOG_3", this);
    AER_CAP_TLP_PREFIX_LOG_3.set_cfg(16'h00, 16'h00, 16'h00, 12'h1AC, 32, 32'b00000000000000000000000000000000);
    AER_CAP_TLP_PREFIX_LOG_3.set_space_addr("CFG", 12'h1AC);
    AER_CAP_TLP_PREFIX_LOG_3.set_space_addr("MSG", 12'h1AC);
    AER_CAP_TLP_PREFIX_LOG_3.set_space_addr("msg_bus_port", 'h21);
    AER_CAP_TLP_PREFIX_LOG_3.set_space_addr("CFG-SB",12'h1AC);
      AER_CAP_TLP_PREFIX_LOG_3.set_space("CFG");
      AER_CAP_TLP_PREFIX_LOG_3.set_msg_opcode("CFG-SB");
      AER_CAP_TLP_PREFIX_LOG_3.set_fid(4'h0, "CFG-SB");
      AER_CAP_TLP_PREFIX_LOG_3.set_user_attribute("diag_reg", "0");
      AER_CAP_TLP_PREFIX_LOG_3.set_user_attribute("HqmIsFeatureReg", "0");
      AER_CAP_TLP_PREFIX_LOG_3.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("AER_CAP_TLP_PREFIX_LOG_3:dont_test") ) AER_CAP_TLP_PREFIX_LOG_3.set_test_reg(1'b0);
      if (!add_reg( AER_CAP_TLP_PREFIX_LOG_3 )) begin
        `sla_error(get_name(), ("Could not add register AER_CAP_TLP_PREFIX_LOG_3"));
      end
   AER_CAP_TLP_PREFIX_LOG_3.TLPPFLOG3.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.AER_CAP_TLP_PREFIX_LOG_3.TLPPFLOG3"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ATS_CAP_ID";
    `endif
    ATS_CAP_ID = hqm_pf_cfg_bridge_ATS_CAP_ID_reg::type_id::create("ATS_CAP_ID", this);
    ATS_CAP_ID.set_cfg(16'h00, 16'h00, 16'h00, 12'h1B0, 16, 16'b0000000000001111);
    ATS_CAP_ID.set_space_addr("CFG", 12'h1B0);
    ATS_CAP_ID.set_space_addr("MSG", 12'h1B0);
    ATS_CAP_ID.set_space_addr("msg_bus_port", 'h21);
    ATS_CAP_ID.set_space_addr("CFG-SB",12'h1B0);
      ATS_CAP_ID.set_space("CFG");
      ATS_CAP_ID.set_msg_opcode("CFG-SB");
      ATS_CAP_ID.set_fid(4'h0, "CFG-SB");
      ATS_CAP_ID.set_user_attribute("diag_reg", "0");
      ATS_CAP_ID.set_user_attribute("HqmIsFeatureReg", "0");
      ATS_CAP_ID.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ATS_CAP_ID:dont_test") ) ATS_CAP_ID.set_test_reg(1'b0);
      if (!add_reg( ATS_CAP_ID )) begin
        `sla_error(get_name(), ("Could not add register ATS_CAP_ID"));
      end
   ATS_CAP_ID.ATSCID.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP_ID.ATSCID"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ATS_CAP_VERSION_NEXT_PTR";
    `endif
    ATS_CAP_VERSION_NEXT_PTR = hqm_pf_cfg_bridge_ATS_CAP_VERSION_NEXT_PTR_reg::type_id::create("ATS_CAP_VERSION_NEXT_PTR", this);
    ATS_CAP_VERSION_NEXT_PTR.set_cfg(16'h00, 16'h00, 16'h00, 12'h1B2, 16, 16'b0000000000000001);
    ATS_CAP_VERSION_NEXT_PTR.set_space_addr("CFG", 12'h1B2);
    ATS_CAP_VERSION_NEXT_PTR.set_space_addr("MSG", 12'h1B2);
    ATS_CAP_VERSION_NEXT_PTR.set_space_addr("msg_bus_port", 'h21);
    ATS_CAP_VERSION_NEXT_PTR.set_space_addr("CFG-SB",12'h1B2);
      ATS_CAP_VERSION_NEXT_PTR.set_space("CFG");
      ATS_CAP_VERSION_NEXT_PTR.set_msg_opcode("CFG-SB");
      ATS_CAP_VERSION_NEXT_PTR.set_fid(4'h0, "CFG-SB");
      ATS_CAP_VERSION_NEXT_PTR.set_user_attribute("diag_reg", "0");
      ATS_CAP_VERSION_NEXT_PTR.set_user_attribute("HqmIsFeatureReg", "0");
      ATS_CAP_VERSION_NEXT_PTR.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ATS_CAP_VERSION_NEXT_PTR:dont_test") ) ATS_CAP_VERSION_NEXT_PTR.set_test_reg(1'b0);
      if (!add_reg( ATS_CAP_VERSION_NEXT_PTR )) begin
        `sla_error(get_name(), ("Could not add register ATS_CAP_VERSION_NEXT_PTR"));
      end
   ATS_CAP_VERSION_NEXT_PTR.ATSCV.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP_VERSION_NEXT_PTR.ATSCV"});
   ATS_CAP_VERSION_NEXT_PTR.CAP_PTR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP_VERSION_NEXT_PTR.CAP_PTR"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ATS_CAP";
    `endif
    ATS_CAP = hqm_pf_cfg_bridge_ATS_CAP_reg::type_id::create("ATS_CAP", this);
    ATS_CAP.set_cfg(16'h00, 16'h00, 16'h00, 12'h1B4, 16, 16'b0000000001100000);
    ATS_CAP.set_space_addr("CFG", 12'h1B4);
    ATS_CAP.set_space_addr("MSG", 12'h1B4);
    ATS_CAP.set_space_addr("msg_bus_port", 'h21);
    ATS_CAP.set_space_addr("CFG-SB",12'h1B4);
      ATS_CAP.set_space("CFG");
      ATS_CAP.set_msg_opcode("CFG-SB");
      ATS_CAP.set_fid(4'h0, "CFG-SB");
      ATS_CAP.set_user_attribute("diag_reg", "0");
      ATS_CAP.set_user_attribute("HqmIsFeatureReg", "0");
      ATS_CAP.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ATS_CAP:dont_test") ) ATS_CAP.set_test_reg(1'b0);
      if (!add_reg( ATS_CAP )) begin
        `sla_error(get_name(), ("Could not add register ATS_CAP"));
      end
   ATS_CAP.ATSIQD.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP.ATSIQD"});
   ATS_CAP.ATSPAR.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP.ATSPAR"});
   ATS_CAP.ATSGIS.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP.ATSGIS"});

    `ifdef SLA_RAL_COVERAGE
    sla_ral_reg::regname = "ATS_CAP_CONTROL";
    `endif
    ATS_CAP_CONTROL = hqm_pf_cfg_bridge_ATS_CAP_CONTROL_reg::type_id::create("ATS_CAP_CONTROL", this);
    ATS_CAP_CONTROL.set_cfg(16'h00, 16'h00, 16'h00, 12'h1B6, 16, 16'b0000000000000000);
    ATS_CAP_CONTROL.set_space_addr("CFG", 12'h1B6);
    ATS_CAP_CONTROL.set_space_addr("MSG", 12'h1B6);
    ATS_CAP_CONTROL.set_space_addr("msg_bus_port", 'h21);
    ATS_CAP_CONTROL.set_space_addr("CFG-SB",12'h1B6);
      ATS_CAP_CONTROL.set_space("CFG");
      ATS_CAP_CONTROL.set_msg_opcode("CFG-SB");
      ATS_CAP_CONTROL.set_fid(4'h0, "CFG-SB");
      ATS_CAP_CONTROL.set_user_attribute("diag_reg", "0");
      ATS_CAP_CONTROL.set_user_attribute("HqmIsFeatureReg", "0");
      ATS_CAP_CONTROL.set_user_attribute("SubnetPortID", "8'h00");
      if ( $test$plusargs("ATS_CAP_CONTROL:dont_test") ) ATS_CAP_CONTROL.set_test_reg(1'b0);
      if (!add_reg( ATS_CAP_CONTROL )) begin
        `sla_error(get_name(), ("Could not add register ATS_CAP_CONTROL"));
      end
   ATS_CAP_CONTROL.ATSSTU.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP_CONTROL.ATSSTU"});
   ATS_CAP_CONTROL.ATSE.set_paths({"i_hqm_sif_core.i_hqm_ri.i_ri_pf_vf_cfg.i_hqm_pf_cfg.ATS_CAP_CONTROL.ATSE"});

  endfunction

 virtual function void print_sv_ral_file();  
    $display("RAL File Type [%s], RAL File Instance [%s], SV File ---> %s", get_type_name(), get_name(), `__FILE__); 
 endfunction 
endclass : hqm_pf_cfg_bridge_file

// ================================================


`endif
